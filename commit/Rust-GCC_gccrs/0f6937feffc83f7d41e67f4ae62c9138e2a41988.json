{"sha": "0f6937feffc83f7d41e67f4ae62c9138e2a41988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2OTM3ZmVmZmM4M2Y3ZDQxZTY3ZjRhZTYyYzkxMzhlMmE0MTk4OA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-02-06T06:18:36Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-02-06T06:18:36Z"}, "message": "tm.texi (INIT_CUMULATIVE_ARGS): Update doco.\n\n\t* doc/tm.texi (INIT_CUMULATIVE_ARGS): Update doco.\n\t* calls.c (expand_call): Pass n_named_args to INIT_CUMULATIVE_ARGS.\n\t(emit_library_call_value_1): Likewise pass nargs.\n\t* expr.c (block_move_libcall_safe_for_call_parm): Pass 3 here.\n\t* function.c (assign_parms): Pass -1 to INIT_CUMULATIVE_ARGS.\n\t* config/rs6000/rs6000.c (init_cumulative_args): Use n_named_args\n\tparameter instead of scanning TYPE_ARGS_TYPES to count args.\n\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Update\n\tprototype.\n\t* config/rs6000/rs6000.h (INIT_CUMULATIVE_ARGS): Pass extra arg.\n\t(INIT_CUMULATIVE_INCOMING_ARGS): Set extra arg to 1000.\n\t(INIT_CUMULATIVE_LIBCALL_ARGS): Set extra arg to 0.\n\t* config/sh/sh.c (sh_output_mi_thunk): Pass 1 as n_named_args to\n\tINIT_CUMULATIVE_ARGS.\n\t* config/alpha/alpha.h (INIT_CUMULATIVE_ARGS): Update.\n\t* config/alpha/unicosmk.h, config/alpha/vms.h, config/arc/arc.h,\n\tconfig/arm/arm.h, config/avr/avr.h, config/c4x/c4x.h,\n\tconfig/cris/cris.h, config/fr30/fr30.h, config/frv/frv.h,\n\tconfig/h8300/h8300.h, config/i386/i386.h, config/i860/i860.h,\n\tconfig/ia64/ia64.h, config/ip2k/ip2k.h, config/iq2000/iq2000.h,\n\tconfig/iq2000/iq2000.c, config/m32r/m32r.h, config/m68hc11/m68hc11.h,\n\tconfig/m68k/m68k.h, config/mcore/mcore.h, config/mips/mips.h,\n\tconfig/mmix/mmix.h, config/mn10300/mn10300.h, config/ns32k/ns32k.h,\n\tconfig/pa/pa.h, config/pdp11/pdp11.h config/s390/s390.h,\n\tconfig/sh/sh.h, config/sparc/sparc.h, config/stormy16/stormy16.h,\n\tconfig/v850/v850.h, config/vax/vax.h, config/xtensa/xtensa.h: Likewise.\n\nFrom-SVN: r77380", "tree": {"sha": "33e260930c6daae77a489fe2be891d0432d6531d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e260930c6daae77a489fe2be891d0432d6531d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6937feffc83f7d41e67f4ae62c9138e2a41988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6937feffc83f7d41e67f4ae62c9138e2a41988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6937feffc83f7d41e67f4ae62c9138e2a41988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6937feffc83f7d41e67f4ae62c9138e2a41988/comments", "author": null, "committer": null, "parents": [{"sha": "11b635fe000d5ab12664f33cac2305762cbf7e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b635fe000d5ab12664f33cac2305762cbf7e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b635fe000d5ab12664f33cac2305762cbf7e46"}], "stats": {"total": 169, "additions": 99, "deletions": 70}, "files": [{"sha": "30be17ec2b49cf97d6f6ce3ce0c8223b21acb8a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1,3 +1,32 @@\n+2004-02-06  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* doc/tm.texi (INIT_CUMULATIVE_ARGS): Update doco.\n+\t* calls.c (expand_call): Pass n_named_args to INIT_CUMULATIVE_ARGS.\n+\t(emit_library_call_value_1): Likewise pass nargs.\n+\t* expr.c (block_move_libcall_safe_for_call_parm): Pass 3 here.\n+\t* function.c (assign_parms): Pass -1 to INIT_CUMULATIVE_ARGS.\n+\t* config/rs6000/rs6000.c (init_cumulative_args): Use n_named_args\n+\tparameter instead of scanning TYPE_ARGS_TYPES to count args.\n+\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Update\n+\tprototype.\n+\t* config/rs6000/rs6000.h (INIT_CUMULATIVE_ARGS): Pass extra arg.\n+\t(INIT_CUMULATIVE_INCOMING_ARGS): Set extra arg to 1000.\n+\t(INIT_CUMULATIVE_LIBCALL_ARGS): Set extra arg to 0.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Pass 1 as n_named_args to\n+\tINIT_CUMULATIVE_ARGS.\n+\t* config/alpha/alpha.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* config/alpha/unicosmk.h, config/alpha/vms.h, config/arc/arc.h,\n+\tconfig/arm/arm.h, config/avr/avr.h, config/c4x/c4x.h,\n+\tconfig/cris/cris.h, config/fr30/fr30.h, config/frv/frv.h,\n+\tconfig/h8300/h8300.h, config/i386/i386.h, config/i860/i860.h,\n+\tconfig/ia64/ia64.h, config/ip2k/ip2k.h, config/iq2000/iq2000.h,\n+\tconfig/iq2000/iq2000.c, config/m32r/m32r.h, config/m68hc11/m68hc11.h,\n+\tconfig/m68k/m68k.h, config/mcore/mcore.h, config/mips/mips.h,\n+\tconfig/mmix/mmix.h, config/mn10300/mn10300.h, config/ns32k/ns32k.h,\n+\tconfig/pa/pa.h, config/pdp11/pdp11.h config/s390/s390.h,\n+\tconfig/sh/sh.h, config/sparc/sparc.h, config/stormy16/stormy16.h,\n+\tconfig/v850/v850.h, config/vax/vax.h, config/xtensa/xtensa.h: Likewise.\n+\n 2004-02-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* genemit.c (gen_exp) [CONST_INT]: Use const_int_rtx whenever"}, {"sha": "d702ed0d3a61eb3cedac4c80c718d8d46f3604fb", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -2400,14 +2400,6 @@ expand_call (tree exp, rtx target, int ignore)\n   for (p = actparms, num_actuals = 0; p; p = TREE_CHAIN (p))\n     num_actuals++;\n \n-  /* Start updating where the next arg would go.\n-\n-     On some machines (such as the PA) indirect calls have a different\n-     calling convention than normal calls.  The last argument in\n-     INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n-     or not.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, fndecl);\n-\n   /* Compute number of named args.\n      Normally, don't include the last named arg if anonymous args follow.\n      We do include the last named arg if\n@@ -2439,6 +2431,14 @@ expand_call (tree exp, rtx target, int ignore)\n     /* If we know nothing, treat all args as named.  */\n     n_named_args = num_actuals;\n \n+  /* Start updating where the next arg would go.\n+\n+     On some machines (such as the PA) indirect calls have a different\n+     calling convention than normal calls.  The fourth argument in\n+     INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n+     or not.  */\n+  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, fndecl, n_named_args);\n+\n   /* Make a vector to hold all the information about each arg.  */\n   args = alloca (num_actuals * sizeof (struct arg_data));\n   memset (args, 0, num_actuals * sizeof (struct arg_data));\n@@ -3783,7 +3783,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n #ifdef INIT_CUMULATIVE_LIBCALL_ARGS\n   INIT_CUMULATIVE_LIBCALL_ARGS (args_so_far, outmode, fun);\n #else\n-  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun, 0);\n+  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun, 0, nargs);\n #endif\n \n   args_size.constant = 0;"}, {"sha": "4c0053f43911c8556ca1c2d5fe464daa196c9302", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1002,7 +1002,8 @@ extern int alpha_memory_latency;\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)  (CUM) = 0\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n+  (CUM) = 0\n \n /* Define intermediate macro to compute the size (in registers) of an argument\n    for the Alpha.  */"}, {"sha": "d1dfe91262275e0a77568800f63b3f9288b608f3", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -176,7 +176,7 @@ typedef struct {\n    function whose data type is FNTYPE.  For a library call, FNTYPE is 0.  */\n \n #undef INIT_CUMULATIVE_ARGS\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   do { (CUM).num_args = 0;\t\t\t\t\t\\\n        (CUM).num_arg_words = 0;\t\t\t\t\t\\\n        (CUM).num_reg_words = 0;\t\t\t\t\t\\"}, {"sha": "f7058f3ff399fa2a85827ee6e33364546eae33f5", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -172,7 +172,7 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n    For a library call, FNTYPE is 0.  */\n \n #undef INIT_CUMULATIVE_ARGS\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   (CUM).num_args = 0;\t\t\t\t\t\t\\\n   (CUM).atypes[0] = (CUM).atypes[1] = (CUM).atypes[2] = I64;\t\\\n   (CUM).atypes[3] = (CUM).atypes[4] = (CUM).atypes[5] = I64;"}, {"sha": "cdd9ba292073543ded4a4c9b0670bc634a314744", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -623,7 +623,7 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n ((CUM) = 0)\n \n /* The number of registers used for parameter passing.  Local to this file.  */"}, {"sha": "26c452690968b6c5db7c8effa43b1c5543a5f98c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1875,7 +1875,7 @@ typedef struct\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n    On the ARM, the offset starts at 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   arm_init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "01ca6047956642a707511e10a929d845b33faa39", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -381,7 +381,8 @@ typedef struct avr_args {\n   int regno;\t\t\t/* next available register number */\n } CUMULATIVE_ARGS;\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) init_cumulative_args (&(CUM), FNTYPE, LIBNAME, FNDECL)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n+  init_cumulative_args (&(CUM), FNTYPE, LIBNAME, FNDECL)\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n   (function_arg_advance (&CUM, MODE, TYPE, NAMED))"}, {"sha": "35680b35d8c883718a4be05e52cca29cab34189c", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1114,7 +1114,7 @@ typedef struct c4x_args\n }\n CUMULATIVE_ARGS;\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   (c4x_init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\"}, {"sha": "5110f9adbfb92484e923f0a43c5988160da6912d", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -956,7 +956,7 @@ struct cum_args {int regs;};\n \n /* The regs member is an integer, the number of arguments got into\n    registers so far.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL)\t  \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n  ((CUM).regs = 0)\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\"}, {"sha": "0ab0e72c3302f0b6e51cb7a412961fb906f6672b", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -759,7 +759,8 @@ enum reg_class\n    the function, as a string.  LIBNAME is 0 when an ordinary C function call is\n    being processed.  Thus, each time this macro is called, either LIBNAME or\n    FNTYPE is nonzero, but never both of them at once.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) (CUM) = 0\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n+  (CUM) = 0\n \n /* A C statement (sans semicolon) to update the summarizer variable CUM to\n    advance past an argument in the argument list.  The values MODE, TYPE and"}, {"sha": "828e8a326d1c30282bb7a0bff18a1652aef0ea76", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1940,7 +1940,7 @@ struct machine_function GTY(())\n    being processed.  Thus, each time this macro is called, either LIBNAME or\n    FNTYPE is nonzero, but never both of them at once.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, FNDECL, FALSE)\n \n /* Like `INIT_CUMULATIVE_ARGS' but overrides it for the purposes of finding the"}, {"sha": "e2ba3078ee35116fe9964247fda7770e19a08ea6", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -665,7 +665,7 @@ struct cum_arg\n \n    On the H8/300, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).nbytes = 0, (CUM).libcall = LIBNAME)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "482a8407ef5872334f9bd8dd2295e064d9ec41eb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1747,7 +1747,7 @@ typedef struct ix86_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "354df72901044c8af46c5ae82a34349826332cd2", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -464,7 +464,7 @@ struct cumulative_args { int ints, floats; };\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).ints = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE ((FNTYPE)), 0) \\\n \t\t? 4 : 0),\t\t\t\\\n   (CUM).floats = 0)"}, {"sha": "279500ee7505da187b725722f22a2d35c78b46c3", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1338,7 +1338,7 @@ typedef struct ia64_args\n /* A C statement (sans semicolon) for initializing the variable CUM for the\n    state at the beginning of the argument list.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   (CUM).words = 0;\t\t\t\t\t\t\t\\\n   (CUM).int_regs = 0;\t\t\t\t\t\t\t\\"}, {"sha": "8c9a66c89d4453875f6fe86914214252b381d0dc", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -441,7 +441,7 @@ enum reg_class {\n \n #define CUMULATIVE_ARGS\tint\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)"}, {"sha": "ca48c915d1d7895ff92a45afc600031c130aa756", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -2333,7 +2333,7 @@ iq2000_expand_prologue (void)\n      variable arguments.\n \n      This is only needed if store_args_on_stack is true.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n+  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0, 0);\n   regno = GP_ARG_FIRST;\n \n   for (cur_arg = fnargs; cur_arg != 0; cur_arg = next_arg)"}, {"sha": "a69096b4464cf444b65e5e61c486e546ebb4e7fe", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -466,7 +466,7 @@ typedef struct iq2000_args\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   init_cumulative_args (& CUM, FNTYPE, LIBNAME)\t\t\t\t\\\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\"}, {"sha": "00bdad63e98d00aa80023d2cd8a54665c70ca55a", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1044,7 +1044,7 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n /* The number of registers used for parameter passing.  Local to this file.  */"}, {"sha": "4dee10644c783e5f0e7dc9bf8011e6f101ba589c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1070,7 +1070,7 @@ typedef struct m68hc11_args\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS for a call to a\n    function whose data type is FNTYPE. For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n     (m68hc11_init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n /* Update the data in CUM to advance over an argument of mode MODE and data"}, {"sha": "86742fc49c1d1a2187436943df03f7bbcfe9a4f0", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -901,7 +901,7 @@ enum reg_class {\n \n    On the m68k, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "69558291b3e05a372a4b5642a4be5289cccfafa3", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -700,7 +700,7 @@ extern const enum reg_class reg_class_from_letter[];\n \n    On MCore, the offset always starts at 0: the first parm reg is always\n    the same reg.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)  \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "d899143967ab846ea03b5b9e30f82b7a42689743", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -2287,7 +2287,7 @@ typedef struct mips_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   init_cumulative_args (&CUM, FNTYPE, LIBNAME)\t\t\t\t\\\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "4cb3075adbe065feea1d883ce4259d4b9e568da3", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -737,7 +737,7 @@ enum reg_class\n \n typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).regs = 0, (CUM).lib = ((LIBNAME) != 0))\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\"}, {"sha": "8508838124ef7bdec3e64681eb884ca0a4060d03", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -560,7 +560,7 @@ struct cum_arg {int nbytes; };\n \n    On the MN10300, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).nbytes = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "a31eba61cf23628bf4081cbb11852b8eb0ef1dff", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -675,7 +675,7 @@ enum reg_class\n \n    On the ns32k, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "944917fb6d2d1567fea4caf2329dde6b76732e65", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -785,7 +785,7 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   (CUM).words = 0, \t\t\t\t\t\t\t\\\n   (CUM).incoming = 0,\t\t\t\t\t\t\t\\\n   (CUM).indirect = (FNTYPE) && !(FNDECL),\t\t\t\t\\"}, {"sha": "725fe25e0a06e99617a81b2ec01b5ae61f6cec27", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -591,7 +591,7 @@ maybe ac0 ? - as option someday! */\n    when the function gets a structure-value-address as an\n    invisible first argument.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "1121e309db99cd8343001c7fc1ee1ce965417ea5", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -28,7 +28,7 @@\n #ifdef RTX_CODE\n \n #ifdef TREE_CODE\n-extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int);\n+extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, int, int, int);\n extern void rs6000_va_start (tree, rtx);\n #endif /* TREE_CODE */\n "}, {"sha": "1db36b17f2e2a370df24074aab215f49aa9d64f6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -3836,7 +3836,8 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \n void\n init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype, \n-\trtx libname ATTRIBUTE_UNUSED, int incoming, int libcall)\n+\t\t      rtx libname ATTRIBUTE_UNUSED, int incoming,\n+\t\t      int libcall, int n_named_args)\n {\n   static CUMULATIVE_ARGS zero_cumulative;\n \n@@ -3853,17 +3854,9 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t&& (TREE_VALUE (tree_last  (TYPE_ARG_TYPES (fntype)))\n \t    != void_type_node));\n \n-  if (incoming)\n-    cum->nargs_prototype = 1000;\t\t/* don't return a PARALLEL */\n-\n-  else if (cum->prototype)\n-    cum->nargs_prototype = (list_length (TYPE_ARG_TYPES (fntype)) - 1\n-\t\t\t    + (TYPE_MODE (TREE_TYPE (fntype)) == BLKmode\n-\t\t\t       || rs6000_return_in_memory (TREE_TYPE (fntype),\n-\t\t\t\t\t\t\t   fntype)));\n-\n-  else\n-    cum->nargs_prototype = 0;\n+  cum->nargs_prototype = 0;\n+  if (incoming || cum->prototype)\n+    cum->nargs_prototype = n_named_args;\n \n   /* Check for a longcall attribute.  */\n   if (fntype\n@@ -8369,10 +8362,10 @@ addrs_ok_for_quad_peep (rtx addr1, rtx addr2)\n     }\n \n   /* Make sure the second address is a (mem (plus (reg) (const_int)))\n-      or if it is (mem (reg)) then make sure that offset1 is -8 and the same \n-      register as addr1.  */\n+     or if it is (mem (reg)) then make sure that offset1 is -8 and the same \n+     register as addr1.  */\n   if (offset1 == -8 && GET_CODE (addr2) == REG && reg1 == REGNO (addr2))\n-   return 1;\n+    return 1;\n   if (GET_CODE (addr2) != PLUS)\n     return 0;\n "}, {"sha": "8ca547ada50b7892d401de9181380bf1c9b917d2", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1767,19 +1767,19 @@ typedef struct rs6000_args\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, FALSE)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, FALSE, N_NAMED_ARGS)\n \n /* Similar, but when scanning the definition of a procedure.  We always\n    set NARGS_PROTOTYPE large so we never return an EXPR_LIST.  */\n \n-#define INIT_CUMULATIVE_INCOMING_ARGS(CUM,FNTYPE,LIBNAME) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE, FALSE)\n+#define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE, FALSE, 1000)\n \n /* Like INIT_CUMULATIVE_ARGS' but only used for outgoing libcalls.  */\n \n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n-  init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE)\n+  init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE, 0)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "1acdeadfd6a92da19fac2894c9afdac24294dfbe", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -8958,7 +8958,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      SH that it's best to do this completely machine independently.\n      \"this\" is passed as first argument, unless a structure return pointer \n      comes first, in which case \"this\" comes second.  */\n-  INIT_CUMULATIVE_ARGS (cum, funtype, NULL_RTX, 0);\n+  INIT_CUMULATIVE_ARGS (cum, funtype, NULL_RTX, 0, 1);\n #ifndef PCC_STATIC_STRUCT_RETURN\n   if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function))\n     structure_value_byref = 1;"}, {"sha": "c3677977bd4541b94bfe4653d9904b155f5f69b1", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1820,7 +1820,7 @@ struct sh_args {\n \n    For TARGET_HITACHI, the structure value pointer is passed in memory.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   do {\t\t\t\t\t\t\t\t\\\n     (CUM).arg_count[(int) SH_ARG_INT] = 0;\t\t\t\\\n     (CUM).arg_count[(int) SH_ARG_FLOAT] = 0;\t\t\t\\\n@@ -1851,7 +1851,7 @@ struct sh_args {\n \n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n   do {\t\t\t\t\t\t\t\t\\\n-    INIT_CUMULATIVE_ARGS ((CUM), NULL_TREE, (LIBNAME), 0);\t\\\n+    INIT_CUMULATIVE_ARGS ((CUM), NULL_TREE, (LIBNAME), 0, 0);\t\\\n     (CUM).call_cookie\t\t\t\t\t\t\\\n       = (CALL_COOKIE_RET_TRAMP\t\t\t\t\t\\\n \t (TARGET_SHCOMPACT && GET_MODE_SIZE (MODE) > 4\t\t\\\n@@ -1860,7 +1860,7 @@ struct sh_args {\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n   do {\t\t\t\t\t\t\t\t\\\n-    INIT_CUMULATIVE_ARGS ((CUM), (FNTYPE), (LIBNAME), 0);\t\\\n+    INIT_CUMULATIVE_ARGS ((CUM), (FNTYPE), (LIBNAME), 0, 0);\t\\\n     (CUM).outgoing = 0;\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "81a1be3b0ed8c9704d35cff656663b8dc196d54f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1673,7 +1673,7 @@ struct sparc_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL));\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "09584adca4cc6ccc0f1864b102b17258d9d67ece", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -424,7 +424,8 @@ enum reg_class\n    of arguments that have been passed in registers so far.  */\n #define CUMULATIVE_ARGS int\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) (CUM) = 0\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n+  (CUM) = 0\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n   ((CUM) = xstormy16_function_arg_advance (CUM, MODE, TYPE, NAMED))"}, {"sha": "74a080c83cb1879ff83458f2f13732ace0afa66d", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -753,7 +753,7 @@ struct cum_arg { int nbytes; int anonymous_args; };\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).nbytes = 0, (CUM).anonymous_args = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "c2de0f64715ab476b5549b0747fdbcfedb1217d0", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -441,7 +441,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n    On the VAX, the offset starts at 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT)\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n /* Update the data in CUM to advance over an argument"}, {"sha": "0e97229820e937720c3d4e863e2866371516ab60", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -749,7 +749,7 @@ typedef struct xtensa_args {\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)\t\t\\\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   init_cumulative_args (&CUM, FNTYPE, LIBNAME)\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME)\t\t\\"}, {"sha": "dc6953a09357a742c6faca4a8e76ff72620907bd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -3725,7 +3725,7 @@ arguments are passed on the stack, there is no need to store anything in\n should not be empty, so use @code{int}.\n @end defmac\n \n-@defmac INIT_CUMULATIVE_ARGS (@var{cum}, @var{fntype}, @var{libname}, @var{fndecl})\n+@defmac INIT_CUMULATIVE_ARGS (@var{cum}, @var{fntype}, @var{libname}, @var{fndecl}, @var{n_named_args})\n A C statement (sans semicolon) for initializing the variable\n @var{cum} for the state at the beginning of the argument list.  The\n variable has type @code{CUMULATIVE_ARGS}.  The value of @var{fntype}\n@@ -3734,7 +3734,10 @@ the args, or 0 if the args are to a compiler support library function.\n For direct calls that are not libcalls, @var{fndecl} contain the\n declaration node of the function.  @var{fndecl} is also set when\n @code{INIT_CUMULATIVE_ARGS} is used to find arguments for the function\n-being compiled.\n+being compiled.  @var{n_named_args} is set to the number of named\n+arguments, including a structure return address if it is passed as a\n+parameter, when making a call.  When processing incoming arguments,\n+@var{n_named_args} is set to -1.\n \n When processing a call to a compiler support library function,\n @var{libname} identifies which one.  It is a @code{symbol_ref} rtx which"}, {"sha": "7d6dd16673131c7e7257c104ffea966a170b1ac0", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -1390,7 +1390,7 @@ block_move_libcall_safe_for_call_parm (void)\n     tree fn, arg;\n \n     fn = emit_block_move_libcall_fn (false);\n-    INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (fn), NULL_RTX, 0);\n+    INIT_CUMULATIVE_ARGS (args_so_far, TREE_TYPE (fn), NULL_RTX, 0, 3);\n \n     arg = TYPE_ARG_TYPES (TREE_TYPE (fn));\n     for ( ; arg != void_list_node ; arg = TREE_CHAIN (arg))"}, {"sha": "890ebd34c5dd6100dfd467ab237cab38cc18f6ba", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6937feffc83f7d41e67f4ae62c9138e2a41988/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0f6937feffc83f7d41e67f4ae62c9138e2a41988", "patch": "@@ -4351,7 +4351,7 @@ assign_parms (tree fndecl)\n #ifdef INIT_CUMULATIVE_INCOMING_ARGS\n   INIT_CUMULATIVE_INCOMING_ARGS (args_so_far, fntype, NULL_RTX);\n #else\n-  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, fndecl);\n+  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, fndecl, -1);\n #endif\n \n   /* We haven't yet found an argument that we must push and pretend the"}]}