{"sha": "0045d254c010bf5eac55903780c67f725192cfb3", "node_id": "C_kwDOANBUbNoAKDAwNDVkMjU0YzAxMGJmNWVhYzU1OTAzNzgwYzY3ZjcyNTE5MmNmYjM", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-13T08:55:41Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-17T15:27:17Z"}, "message": "RISC-V: Optimize masking with two clear bits not a SMALL_OPERAND\n\nAdd a split for cases where we can use two bclri (or one bclri and an\nandi) to clear two bits.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*bclri<mode>_nottwobits): New pattern.\n\t(*bclridisi_nottwobits): New pattern, handling the sign-bit.\n\t* config/riscv/predicates.md (const_nottwobits_operand):\n\tNew predicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bclri.c: New test.", "tree": {"sha": "67addffd02a3858cd110e2527eafebe9484320b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67addffd02a3858cd110e2527eafebe9484320b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0045d254c010bf5eac55903780c67f725192cfb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0045d254c010bf5eac55903780c67f725192cfb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0045d254c010bf5eac55903780c67f725192cfb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0045d254c010bf5eac55903780c67f725192cfb3/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1957bedf29a1b2cc231972aba680fe80199d5498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1957bedf29a1b2cc231972aba680fe80199d5498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1957bedf29a1b2cc231972aba680fe80199d5498"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "2175c626ee5c1807f0678f481425dcaf5da78f4d", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=0045d254c010bf5eac55903780c67f725192cfb3", "patch": "@@ -367,6 +367,44 @@\n   \"bclri\\t%0,%1,%T2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n+;; In case we have \"val & ~IMM\" where ~IMM has 2 bits set.\n+(define_insn_and_split \"*bclri<mode>_nottwobits\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(and:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t       (match_operand:X 2 \"const_nottwobits_operand\" \"i\")))]\n+  \"TARGET_ZBS && !paradoxical_subreg_p (operands[1])\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (and:X (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (and:X (match_dup 0) (match_dup 4)))]\n+{\n+\tunsigned HOST_WIDE_INT bits = ~UINTVAL (operands[2]);\n+\tunsigned HOST_WIDE_INT topbit = HOST_WIDE_INT_1U << floor_log2 (bits);\n+\n+\toperands[3] = GEN_INT (~bits | topbit);\n+\toperands[4] = GEN_INT (~topbit);\n+})\n+\n+;; In case of a paradoxical subreg, the sign bit and the high bits are\n+;; not allowed to be changed\n+(define_insn_and_split \"*bclridisi_nottwobits\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:DI 2 \"const_nottwobits_operand\" \"i\")))]\n+  \"TARGET_64BIT && TARGET_ZBS\n+   && clz_hwi (~UINTVAL (operands[2])) > 33\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (and:DI (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (and:DI (match_dup 0) (match_dup 4)))]\n+{\n+\tunsigned HOST_WIDE_INT bits = ~UINTVAL (operands[2]);\n+\tunsigned HOST_WIDE_INT topbit = HOST_WIDE_INT_1U << floor_log2 (bits);\n+\n+\toperands[3] = GEN_INT (~bits | topbit);\n+\toperands[4] = GEN_INT (~topbit);\n+})\n+\n (define_insn \"*binv<mode>\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n \t(xor:X (ashift:X (const_int 1)"}, {"sha": "ffb3fca2ac3c105420a8f9135e093f2f50112da1", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=0045d254c010bf5eac55903780c67f725192cfb3", "patch": "@@ -285,3 +285,8 @@\n        (ior (match_operand 0 \"register_operand\")\n \t    (match_test \"GET_CODE (op) == UNSPEC\n \t\t\t && (XINT (op, 1) == UNSPEC_VUNDEF)\"))))\n+\n+;; A CONST_INT operand that has exactly two bits cleared.\n+(define_predicate \"const_nottwobits_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"popcount_hwi (~UINTVAL (op)) == 2\")))"}, {"sha": "12e2063436c2380278247a2c6ee56ffa031a0d9c", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bclri.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0045d254c010bf5eac55903780c67f725192cfb3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri.c?ref=0045d254c010bf5eac55903780c67f725192cfb3", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+/* bclri + bclri */\n+long long f5 (long long a)\n+{\n+  return a & ~0x11000;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bclri\\t\" 2 } } */\n+"}]}