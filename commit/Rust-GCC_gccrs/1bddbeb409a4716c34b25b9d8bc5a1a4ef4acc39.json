{"sha": "1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkZGJlYjQwOWE0NzE2YzM0YjI1YjlkOGJjNWExYTRlZjRhY2MzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-01-14T21:01:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-01-14T21:01:18Z"}, "message": "re PR c++/12491 (Destructor fails to compile when optimizations (inlining) are enabled)\n\n        PR c++/12491\n        * except.c (struct eh_region): Add u.fixup.resolved.\n        (resolve_one_fixup_region): Split out from ...\n        (resolve_fixup_regions): ... here.\n\t* g++.dg/eh/cleanup2.C: New.\n\nFrom-SVN: r75883", "tree": {"sha": "eecbca2a732677a298b0d3f9d1df202471749812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eecbca2a732677a298b0d3f9d1df202471749812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/comments", "author": null, "committer": null, "parents": [{"sha": "4eb31d4f7e54593b6da0dbd5cc24e14c3e082c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb31d4f7e54593b6da0dbd5cc24e14c3e082c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb31d4f7e54593b6da0dbd5cc24e14c3e082c14"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "be309dd5b3e34251f8235197e5cd8e4a3485fe5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "patch": "@@ -1,3 +1,10 @@\n+2004-01-14  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/12491\n+\t* except.c (struct eh_region): Add u.fixup.resolved.\n+\t(resolve_one_fixup_region): Split out from ...\n+\t(resolve_fixup_regions): ... here.\n+\n 2004-01-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/mn10300/mn10300.h (STRUCT_VALUE): Change to 0."}, {"sha": "b735cc1aef3b17bb6e47d5dfb96df24f41fbd1c1", "filename": "gcc/except.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "patch": "@@ -189,6 +189,7 @@ struct eh_region GTY(())\n     struct eh_region_u_fixup {\n       tree cleanup_exp;\n       struct eh_region *real_region;\n+      bool resolved;\n     } GTY ((tag (\"ERT_FIXUP\"))) fixup;\n   } GTY ((desc (\"%0.type\"))) u;\n \n@@ -889,30 +890,50 @@ collect_eh_region_array (void)\n     }\n }\n \n+static void\n+resolve_one_fixup_region (struct eh_region *fixup)\n+{\n+  struct eh_region *cleanup, *real;\n+  int j, n;\n+\n+  n = cfun->eh->last_region_number;\n+  cleanup = 0;\n+\n+  for (j = 1; j <= n; ++j)\n+    {\n+      cleanup = cfun->eh->region_array[j];\n+      if (cleanup && cleanup->type == ERT_CLEANUP\n+\t  && cleanup->u.cleanup.exp == fixup->u.fixup.cleanup_exp)\n+\tbreak;\n+    }\n+  if (j > n)\n+    abort ();\n+\n+  real = cleanup->outer;\n+  if (real && real->type == ERT_FIXUP)\n+    {\n+      if (!real->u.fixup.resolved)\n+\tresolve_one_fixup_region (real);\n+      real = real->u.fixup.real_region;\n+    }\n+\n+  fixup->u.fixup.real_region = real;\n+  fixup->u.fixup.resolved = true;\n+}\n+\n static void\n resolve_fixup_regions (void)\n {\n-  int i, j, n = cfun->eh->last_region_number;\n+  int i, n = cfun->eh->last_region_number;\n \n   for (i = 1; i <= n; ++i)\n     {\n       struct eh_region *fixup = cfun->eh->region_array[i];\n-      struct eh_region *cleanup = 0;\n \n-      if (! fixup || fixup->type != ERT_FIXUP)\n+      if (!fixup || fixup->type != ERT_FIXUP || fixup->u.fixup.resolved)\n \tcontinue;\n \n-      for (j = 1; j <= n; ++j)\n-\t{\n-\t  cleanup = cfun->eh->region_array[j];\n-\t  if (cleanup && cleanup->type == ERT_CLEANUP\n-\t      && cleanup->u.cleanup.exp == fixup->u.fixup.cleanup_exp)\n-\t    break;\n-\t}\n-      if (j > n)\n-\tabort ();\n-\n-      fixup->u.fixup.real_region = cleanup->outer;\n+      resolve_one_fixup_region (fixup);\n     }\n }\n "}, {"sha": "9c9c5ad2c0fca74fdc2c784724593af249ba9dee", "filename": "gcc/testsuite/g++.dg/eh/cleanup2.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcleanup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcleanup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcleanup2.C?ref=1bddbeb409a4716c34b25b9d8bc5a1a4ef4acc39", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/12491\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+// The return statements are necessary to trigger this bug.\n+\n+class Object\n+{\n+public:\n+  virtual ~Object (void) { return; }\n+};\n+\n+class AutoPtr\n+{\n+public:\n+  ~AutoPtr (void) { delete m_rep; return; }\n+private:\n+  const Object *m_rep;\n+};\n+\n+class Handle\n+{\n+public:\n+  ~Handle (void) { return; }\n+private:\n+    AutoPtr m_rep;\n+};\n+\n+class HandleOf:public Handle\n+{\n+public:\n+  ~HandleOf (void) { return; }\n+};\n+\n+class Error\n+{\n+public:\n+  ~Error (void);\n+private:\n+  HandleOf m_hndl;\n+};\n+\n+Error::~Error (void)\n+{\n+  return;\n+}"}]}