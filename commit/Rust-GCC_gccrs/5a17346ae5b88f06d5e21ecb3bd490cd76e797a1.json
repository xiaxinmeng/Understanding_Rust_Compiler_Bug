{"sha": "5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExNzM0NmFlNWI4OGYwNmQ1ZTIxZWNiM2JkNDkwY2Q3NmU3OTdhMQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-05-03T01:23:46Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-05-03T01:23:46Z"}, "message": "re PR fortran/48720 (quad precision literals do not work)\n\n2011-05-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n    PR fortran/48720\n    * gfortran.texi: Document the 'Q' exponent-letter extension.\n    * invoke.texi: Document -Wreal-q-constant.\n    * lang.opt: Add -Wreal-q-constant option.\n    * gfortran.h: Add warn_real_q_constant to option struct.\n    * primary.c (match_real_constant):  Use it.  Accept 'Q' as\n    exponent-letter for REAL(16) real-literal-constant with a\n    fallback to REAL(10) or error if REAL(10) is not available.\n    * options.c (gfc_init_options, set_Wall) Set it.\n    (gfc_handle_option): Handle new option.\n\nFrom-SVN: r173285", "tree": {"sha": "409b0d77cb998fd7b37d9a74be2bdfcf220ec87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/409b0d77cb998fd7b37d9a74be2bdfcf220ec87a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/comments", "author": null, "committer": null, "parents": [{"sha": "591d488766d9778ca1bd5d425c331d72d314866a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591d488766d9778ca1bd5d425c331d72d314866a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591d488766d9778ca1bd5d425c331d72d314866a"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "89669e522fc43b84d00c8ede92e66beb2e9271c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -1,3 +1,16 @@\n+2011-05-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/48720\n+\t* gfortran.texi: Document the 'Q' exponent-letter extension.\n+\t* invoke.texi: Document -Wreal-q-constant.\n+\t* lang.opt: Add -Wreal-q-constant option.\n+\t* gfortran.h: Add warn_real_q_constant to option struct.\n+\t* primary.c (match_real_constant):  Use it.  Accept 'Q' as\n+\texponent-letter for REAL(16) real-literal-constant with a\n+\tfallback to REAL(10) or error if REAL(10) is not available.\n+\t* options.c (gfc_init_options, set_Wall) Set it.\n+\t(gfc_handle_option): Handle new option.\n+\n 2011-04-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* dump-prase-tree.c (show_code_node):  Set the current"}, {"sha": "b127f6f50a37e798301980078ebe868982978398", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -2189,6 +2189,7 @@ typedef struct\n   int warn_character_truncation;\n   int warn_array_temp;\n   int warn_align_commons;\n+  int warn_real_q_constant;\n   int warn_unused_dummy_argument;\n   int max_errors;\n "}, {"sha": "1284c3d20b45fb31a0db30fe8333e7f39c84dd36", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -1237,6 +1237,7 @@ without warning.\n * Missing period in FORMAT specifications::\n * I/O item lists::\n * BOZ literal constants::\n+* @code{Q} exponent-letter::\n * Real array indices::\n * Unary operators::\n * Implicitly convert LOGICAL and INTEGER values::\n@@ -1427,6 +1428,18 @@ To support legacy codes, GNU Fortran allows the input item list\n of the @code{READ} statement, and the output item lists of the\n @code{WRITE} and @code{PRINT} statements, to start with a comma.\n \n+@node @code{Q} exponent-letter\n+@subsection @code{Q} exponent-letter\n+@cindex @code{Q} exponent-letter\n+\n+GNU Fortran accepts real literal constants with an exponent-letter\n+of @code{Q}, for example, @code{1.23Q45}.  The constant is interpreted\n+as a @code{REAL(16)} entity on targets that suppports this type.  If\n+the target does not support @code{REAL(16)} but has a @code{REAL(10)}\n+type, then the real-literal-constant will be interpreted as a\n+@code{REAL(10)} entity.  In the absence of @code{REAL(16)} and\n+@code{REAL(10)}, an error will occur.\n+\n @node BOZ literal constants\n @subsection BOZ literal constants\n @cindex BOZ literal constants"}, {"sha": "0874e5c4bec86ef69d69f3661920849b9ed4a677", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -134,12 +134,13 @@ by type.  Explanations are in the following sections.\n @item Error and Warning Options\n @xref{Error and Warning Options,,Options to request or suppress errors\n and warnings}.\n-@gccoptlist{-fmax-errors=@var{n} @gol\n--fsyntax-only  -pedantic  -pedantic-errors @gol\n--Wall  -Waliasing  -Wampersand  -Warray-bounds -Wcharacter-truncation @gol\n--Wconversion -Wimplicit-interface  -Wimplicit-procedure  -Wline-truncation @gol\n--Wintrinsics-std  -Wsurprising  -Wno-tabs  -Wunderflow  -Wunused-parameter @gol\n--Wintrinsic-shadow  -Wno-align-commons -Wfunction-elimination}\n+@gccoptlist{-fmax-errors=@var{n}\n+-fsyntax-only -pedantic -pedantic-errors -Wall @gol\n+-Waliasing -Wampersand -Warray-bounds -Wcharacter-truncation @gol\n+-Wconversion -Wimplicit-interface -Wimplicit-procedure -Wline-truncation @gol\n+-Wintrinsics-std -Wreal-q-constant -Wsurprising -Wno-tabs -Wunderflow @gol\n+-Wunused-parameter -Wintrinsic-shadow -Wno-align-commons @gol\n+-Wfunction-elimination}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n@@ -694,7 +695,7 @@ we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing}, @option{-Wampersand}, \n @option{-Wconversion}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n @option{-Wno-tabs}, @option{-Wintrinsic-shadow}, @option{-Wline-truncation},\n-and @option{-Wunused}.\n+@option{-Wreal-q-constant} and @option{-Wunused}.\n \n @item -Waliasing\n @opindex @code{Waliasing}\n@@ -782,6 +783,12 @@ it as @code{EXTERNAL} procedure because of this.  @option{-fall-intrinsics} can\n be used to never trigger this behavior and always link to the intrinsic\n regardless of the selected standard.\n \n+@item -Wreal-q-constant\n+@opindex @code{Wreal-q-constant}\n+@cindex warnings, @code{q} exponent-letter\n+Produce a warning if a real-literal-constant contains a @code{q}\n+exponent-letter.\n+\n @item -Wsurprising\n @opindex @code{Wsurprising}\n @cindex warnings, suspicious code"}, {"sha": "015493e5ba63de9afa1b33dd891b2eb743946526", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -242,6 +242,10 @@ Wintrinsics-std\n Fortran Warning\n Warn on intrinsics not part of the selected standard\n \n+Wreal-q-constant\n+Fortran Warning\n+Warn about real-literal-constants with 'q' exponent-letter\n+\n Wreturn-type\n Fortran Warning\n ; Documented in C"}, {"sha": "f56fad7fce46da42287402b2fccbc0c96fb88694", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -108,6 +108,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_intrinsic_shadow = 0;\n   gfc_option.warn_intrinsics_std = 0;\n   gfc_option.warn_align_commons = 1;\n+  gfc_option.warn_real_q_constant = 0;\n   gfc_option.warn_unused_dummy_argument = 0;\n   gfc_option.max_errors = 25;\n \n@@ -455,6 +456,7 @@ set_Wall (int setting)\n   gfc_option.warn_intrinsic_shadow = setting;\n   gfc_option.warn_intrinsics_std = setting;\n   gfc_option.warn_character_truncation = setting;\n+  gfc_option.warn_real_q_constant = setting;\n   gfc_option.warn_unused_dummy_argument = setting;\n \n   warn_unused = setting;\n@@ -660,6 +662,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_align_commons = value;\n       break;\n \n+    case OPT_Wreal_q_constant:\n+      gfc_option.warn_real_q_constant = value;\n+      break;\n+\n     case OPT_Wunused_dummy_argument:\n       gfc_option.warn_unused_dummy_argument = value;\n       break;"}, {"sha": "8f3c7e51cefbec1bcb1cb48bed0db3848a118487", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a17346ae5b88f06d5e21ecb3bd490cd76e797a1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=5a17346ae5b88f06d5e21ecb3bd490cd76e797a1", "patch": "@@ -541,6 +541,17 @@ match_real_constant (gfc_expr **result, int signflag)\n     goto done;\n   exp_char = c;\n \n+\n+  if (c == 'q')\n+    {\n+      if (gfc_notify_std (GFC_STD_GNU, \"Extension: exponent-letter 'q' in \"\n+\t\t\t \"real-literal-constant at %C\") == FAILURE)\n+\treturn MATCH_ERROR;\n+      else if (gfc_option.warn_real_q_constant)\n+\tgfc_warning(\"Extension: exponent-letter 'q' in real-literal-constant \"\n+\t\t    \"at %C\");\n+    }\n+\n   /* Scan exponent.  */\n   c = gfc_next_ascii_char ();\n   count++;\n@@ -616,6 +627,30 @@ match_real_constant (gfc_expr **result, int signflag)\n       kind = gfc_default_double_kind;\n       break;\n \n+    case 'q':\n+      if (kind != -2)\n+\t{\n+\t  gfc_error (\"Real number at %C has a 'q' exponent and an explicit \"\n+\t\t     \"kind\");\n+\t  goto cleanup;\n+\t}\n+\n+      /* The maximum possible real kind type parameter is 16.  First, try\n+\t that for the kind, then fallback to trying kind=10 (Intel 80 bit)\n+\t extended precision.  If neither value works, just given up.  */\n+      kind = 16;\n+      if (gfc_validate_kind (BT_REAL, kind, true) < 0)\n+\t{\n+\t  kind = 10;\n+          if (gfc_validate_kind (BT_REAL, kind, true) < 0)\n+\t    {\n+\t      gfc_error (\"Invalid exponent-letter 'q' in \"\n+\t\t\t \"real-literal-constant at %C\");\n+\t      goto cleanup;\n+\t    }\n+\t}\n+      break;\n+\n     default:\n       if (kind == -2)\n \tkind = gfc_default_real_kind;"}]}