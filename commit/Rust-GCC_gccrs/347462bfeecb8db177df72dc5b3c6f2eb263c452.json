{"sha": "347462bfeecb8db177df72dc5b3c6f2eb263c452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NDYyYmZlZWNiOGRiMTc3ZGY3MmRjNWIzYzZmMmViMjYzYzQ1Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-08-29T00:20:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-08-29T00:20:25Z"}, "message": "compiler, runtime: remove hmap field from maptypes\n    \n    This is the gofrontend version of https://golang.org/cl/91796.\n    \n    This is part of that CL, just the compiler change and required runtime\n    changes, in preparation for updating libgo to 1.11.\n    \n    Relevant part of original CL description:\n    \n        The hmap field in the maptype is only used by the runtime to check the sizes of\n        the hmap structure created by the compiler and runtime agree.\n    \n        Comments are already present about the hmap structure definitions in the\n        compiler and runtime needing to be in sync.\n    \n    Reviewed-on: https://go-review.googlesource.com/130976\n\nFrom-SVN: r263941", "tree": {"sha": "258b35cc7e9d07a9c277d1923316c1720f93d862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/258b35cc7e9d07a9c277d1923316c1720f93d862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347462bfeecb8db177df72dc5b3c6f2eb263c452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347462bfeecb8db177df72dc5b3c6f2eb263c452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347462bfeecb8db177df72dc5b3c6f2eb263c452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347462bfeecb8db177df72dc5b3c6f2eb263c452/comments", "author": null, "committer": null, "parents": [{"sha": "d16c446e0b24e78a5025cf88531d7967615eefd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16c446e0b24e78a5025cf88531d7967615eefd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16c446e0b24e78a5025cf88531d7967615eefd6"}], "stats": {"total": 26, "additions": 3, "deletions": 23}, "files": [{"sha": "9495882b5da262c3b48c7f953ff0e22ac0c9b00f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347462bfeecb8db177df72dc5b3c6f2eb263c452/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347462bfeecb8db177df72dc5b3c6f2eb263c452/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=347462bfeecb8db177df72dc5b3c6f2eb263c452", "patch": "@@ -1,4 +1,4 @@\n-8deaafd14414bb5cbbdf3e2673f61b6d836d7d2a\n+da249ffd264154cc992e76ff03f91f700d3bf53e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "00098dabef81ae9ae786f89b35f0d61b9b582dac", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347462bfeecb8db177df72dc5b3c6f2eb263c452/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347462bfeecb8db177df72dc5b3c6f2eb263c452/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=347462bfeecb8db177df72dc5b3c6f2eb263c452", "patch": "@@ -7975,12 +7975,11 @@ Map_type::make_map_type_descriptor_type()\n       Type* bool_type = Type::lookup_bool_type();\n \n       Struct_type* sf =\n-\tType::make_builtin_struct_type(12,\n+\tType::make_builtin_struct_type(11,\n \t\t\t\t       \"\", tdt,\n \t\t\t\t       \"key\", ptdt,\n \t\t\t\t       \"elem\", ptdt,\n \t\t\t\t       \"bucket\", ptdt,\n-\t\t\t\t       \"hmap\", ptdt,\n \t\t\t\t       \"keysize\", uint8_type,\n \t\t\t\t       \"indirectkey\", bool_type,\n \t\t\t\t       \"valuesize\", uint8_type,\n@@ -8064,11 +8063,6 @@ Map_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n   go_assert(p->is_field_name(\"bucket\"));\n   vals->push_back(Expression::make_type_descriptor(bucket_type, bloc));\n \n-  ++p;\n-  go_assert(p->is_field_name(\"hmap\"));\n-  Type* hmap_type = this->hmap_type(bucket_type);\n-  vals->push_back(Expression::make_type_descriptor(hmap_type, bloc));\n-\n   ++p;\n   go_assert(p->is_field_name(\"keysize\"));\n   if (keysize > Map_type::max_key_size)"}, {"sha": "bbbef9107c2b25971ccd6078d45e0da983c8e52d", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=347462bfeecb8db177df72dc5b3c6f2eb263c452", "patch": "@@ -351,7 +351,6 @@ type mapType struct {\n \tkey           *rtype // map key type\n \telem          *rtype // map element (value) type\n \tbucket        *rtype // internal bucket structure\n-\thmap          *rtype // internal map header\n \tkeysize       uint8  // size of key slot\n \tindirectkey   uint8  // store ptr to key instead of key itself\n \tvaluesize     uint8  // size of value slot"}, {"sha": "53b05b1ef7705d3623e65ee2f2fd0195ade329a6", "filename": "libgo/go/runtime/hashmap.go", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Fruntime%2Fhashmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Fruntime%2Fhashmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhashmap.go?ref=347462bfeecb8db177df72dc5b3c6f2eb263c452", "patch": "@@ -311,20 +311,13 @@ func makemap_small() *hmap {\n // If h != nil, the map can be created directly in h.\n // If h.buckets != nil, bucket pointed to can be used as the first bucket.\n func makemap(t *maptype, hint int, h *hmap) *hmap {\n-\t// The size of hmap should be 48 bytes on 64 bit\n-\t// and 28 bytes on 32 bit platforms.\n-\tif sz := unsafe.Sizeof(hmap{}); sz != 8+5*sys.PtrSize {\n-\t\tprintln(\"runtime: sizeof(hmap) =\", sz, \", t.hmap.size =\", t.hmap.size)\n-\t\tthrow(\"bad hmap size\")\n-\t}\n-\n \tif hint < 0 || hint > int(maxSliceCap(t.bucket.size)) {\n \t\thint = 0\n \t}\n \n \t// initialize Hmap\n \tif h == nil {\n-\t\th = (*hmap)(newobject(t.hmap))\n+\t\th = new(hmap)\n \t}\n \th.hash0 = fastrand()\n \n@@ -1210,11 +1203,6 @@ func ismapkey(t *_type) bool {\n \n //go:linkname reflect_makemap reflect.makemap\n func reflect_makemap(t *maptype, cap int) *hmap {\n-\t// Check invariants and reflects math.\n-\tif sz := unsafe.Sizeof(hmap{}); sz != t.hmap.size {\n-\t\tprintln(\"runtime: sizeof(hmap) =\", sz, \", t.hmap.size =\", t.hmap.size)\n-\t\tthrow(\"bad hmap size\")\n-\t}\n \tif !ismapkey(t.key) {\n \t\tthrow(\"runtime.reflect_makemap: unsupported map key type\")\n \t}"}, {"sha": "3c08f7e1b9db4a4b9a694ff50ce30ca6aed667b0", "filename": "libgo/go/runtime/type.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Fruntime%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347462bfeecb8db177df72dc5b3c6f2eb263c452/libgo%2Fgo%2Fruntime%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftype.go?ref=347462bfeecb8db177df72dc5b3c6f2eb263c452", "patch": "@@ -72,7 +72,6 @@ type maptype struct {\n \tkey           *_type\n \telem          *_type\n \tbucket        *_type // internal type representing a hash bucket\n-\thmap          *_type // internal type representing a hmap\n \tkeysize       uint8  // size of key slot\n \tindirectkey   bool   // store ptr to key instead of key itself\n \tvaluesize     uint8  // size of value slot"}]}