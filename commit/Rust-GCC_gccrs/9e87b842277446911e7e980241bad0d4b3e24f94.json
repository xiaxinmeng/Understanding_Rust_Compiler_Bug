{"sha": "9e87b842277446911e7e980241bad0d4b3e24f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU4N2I4NDIyNzc0NDY5MTFlN2U5ODAyNDFiYWQwZDRiM2UyNGY5NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-14T19:27:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-05-14T19:27:14Z"}, "message": "* tree.h (TREE_ADDRESSABLE): Remove bogus usage for FIELD_DECL.\n\nFrom-SVN: r159409", "tree": {"sha": "e1dbb261d18f8eabeadfb6c75f45662f8e7e550f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1dbb261d18f8eabeadfb6c75f45662f8e7e550f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e87b842277446911e7e980241bad0d4b3e24f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e87b842277446911e7e980241bad0d4b3e24f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e87b842277446911e7e980241bad0d4b3e24f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e87b842277446911e7e980241bad0d4b3e24f94/comments", "author": null, "committer": null, "parents": [{"sha": "9bb1a81bb3cd328f6a8a6128534f3c9b490fac4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb1a81bb3cd328f6a8a6128534f3c9b490fac4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb1a81bb3cd328f6a8a6128534f3c9b490fac4c"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "bd83bf81421113c0aefa8ea57d265ecaf1700c12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e87b842277446911e7e980241bad0d4b3e24f94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e87b842277446911e7e980241bad0d4b3e24f94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e87b842277446911e7e980241bad0d4b3e24f94", "patch": "@@ -1,3 +1,7 @@\n+2010-05-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (TREE_ADDRESSABLE): Remove bogus usage for FIELD_DECL.\n+\n 2010-05-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44127\n@@ -15,8 +19,8 @@\n \n \t* ipa.c (enqueue_cgraph_node): Update comment; do not re-enqueue\n \tnodes already in queue.\n-\t(cgraph_remove_unreachable_nodes): Cleanup; fix problem with re-enqueueing\n-\tnode.\n+\t(cgraph_remove_unreachable_nodes): Cleanup; fix problem with\n+\tre-enqueueing node.\n \n 2010-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -43,11 +47,12 @@\n \tAdd check for  TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n \tto emit packed xor instead of packed double/packed integer\n \txor for SSE and AVX when moving a zero value.\n-\t* config/i386/sse.md: Add check for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n-\t to emit movaps instead of movapd/movdqa for SSE and AVX.\n-\tAdd check for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL to emit packed single\n-\tlogical operations i.e and, or and xor instead of packed double logical\n-\toperations for SSE and AVX. \n+\t* config/i386/sse.md: Add check for\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL to emit movaps instead of\n+\tmovapd/movdqa for SSE and AVX.\n+\tAdd check for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL to emit packed\n+\tsingle logical operations i.e and, or and xor instead of packed double\n+\tlogical operations for SSE and AVX.\n \t* config/i386/i386-c.c: \n \t(ix86_target_macros_internal): Add PROCESSOR_BDVER1.\n \t* config/i386/driver-i386.c: Turn on -mtune=native for BDVER1.\n@@ -56,26 +61,27 @@\n \t(m_BDVER1): New macro.\n \t(m_AMD_MULTIPLE): Add m_BDVER1.\n \t(x86_tune_use_leave, x86_tune_push_memory, x86_tune_unroll_strlen,\n-\t x86_tune_deep_branch_prediction, x86_tune_use_sahf, x86_tune_movx,\n-\t x86_tune_use_simode_fiop, x86_tune_promote_qimode, \n-\t x86_tune_add_esp_8, x86_tune_tune_sub_esp_4, x86_tune_sub_esp_8,\n-\t x86_tune_integer_dfmode_moves, x86_tune_partial_reg_dependency,\n-\t x86_tune_sse_partial_reg_dependency, x86_tune_sse_unaligned_load_optimal,\n-\t x86_tune_sse_unaligned_store_optimal, x86_tune_sse_typeless_stores,\n-\t x86_tune_memory_mismatch_stall, x86_tune_use_ffreep,\n-\t x86_tune_inter_unit_moves, x86_tune_inter_unit_conversions,\n-\t x86_tune_use_bt, x86_tune_pad_returns, x86_tune_slow_imul_imm32_mem,\n-\t x86_tune_slow_imul_imm8, x86_tune_fuse_cmp_and_branch): \n+\tx86_tune_deep_branch_prediction, x86_tune_use_sahf, x86_tune_movx,\n+\tx86_tune_use_simode_fiop, x86_tune_promote_qimode,\n+\tx86_tune_add_esp_8, x86_tune_tune_sub_esp_4, x86_tune_sub_esp_8,\n+\tx86_tune_integer_dfmode_moves, x86_tune_partial_reg_dependency,\n+\tx86_tune_sse_partial_reg_dependency,\n+\tx86_tune_sse_unaligned_load_optimal,\n+\tx86_tune_sse_unaligned_store_optimal, x86_tune_sse_typeless_stores,\n+\tx86_tune_memory_mismatch_stall, x86_tune_use_ffreep,\n+\tx86_tune_inter_unit_moves, x86_tune_inter_unit_conversions,\n+\tx86_tune_use_bt, x86_tune_pad_returns, x86_tune_slow_imul_imm32_mem,\n+\tx86_tune_slow_imul_imm8, x86_tune_fuse_cmp_and_branch):\n \tEnable/disable for bdver1.\n \t(processor_target_table): Add bdver1_cost.\n \t(cpu_names): Add bdver1.\n \t(override_options): Set up PROCESSOR_BDVER1 for bdver1 entry in\n \t processor_alias_table.\n-\t(ix86_expand_vector_move_misalign): Change \n-\t TARGET_SSE_UNALIGNED_MOVE_OPTIMAL to TARGET_SSE_UNALIGNED_LOAD_OPTIMAL.\n-\t Check for TARGET_SSE_UNALIGNED_STORE_OPTIMAL.\n-\t Check for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL to emit movups instead\n-\t of movupd/movdqu for SSE and AVX.\n+\t(ix86_expand_vector_move_misalign): Change.\n+\tTARGET_SSE_UNALIGNED_MOVE_OPTIMAL to TARGET_SSE_UNALIGNED_LOAD_OPTIMAL.\n+\tCheck for TARGET_SSE_UNALIGNED_STORE_OPTIMAL.\n+\tCheck for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL to emit movups instead\n+\tof movupd/movdqu for SSE and AVX.\n \t(ix86_tune_issue_rate): Add PROCESSOR_BDVER1.\n \t(ix86_tune_adjust_cost): Add code for bdver1.\n \t(standard_sse_constant_opcode): Add check for"}, {"sha": "a1ce99f913a99e906f7b2704fa1c1dee984f7ba2", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e87b842277446911e7e980241bad0d4b3e24f94/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e87b842277446911e7e980241bad0d4b3e24f94/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9e87b842277446911e7e980241bad0d4b3e24f94", "patch": "@@ -411,8 +411,7 @@ struct GTY(()) tree_common {\n    addressable_flag:\n \n        TREE_ADDRESSABLE in\n-           VAR_DECL, PARM_DECL, RESULT_DECL, FUNCTION_DECL, FIELD_DECL\n-           LABEL_DECL\n+           VAR_DECL, PARM_DECL, RESULT_DECL, FUNCTION_DECL, LABEL_DECL\n            all types\n            CONSTRUCTOR, IDENTIFIER_NODE\n            STMT_EXPR, it means we want the result of the enclosed expression\n@@ -1111,9 +1110,6 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    of this is needed.  So it cannot be in a register.\n    In a FUNCTION_DECL, nonzero means its address is needed.\n    So it must be compiled even if it is an inline function.\n-   In a FIELD_DECL node, it means that the programmer is permitted to\n-   construct the address of this field.  This is used for aliasing\n-   purposes: see record_component_aliases.\n    In CONSTRUCTOR nodes, it means object constructed must be in memory.\n    In LABEL_DECL nodes, it means a goto for this label has been seen\n    from a place outside all binding contours that restore stack levels."}]}