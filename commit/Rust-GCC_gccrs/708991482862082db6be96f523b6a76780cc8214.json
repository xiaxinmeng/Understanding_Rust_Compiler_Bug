{"sha": "708991482862082db6be96f523b6a76780cc8214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4OTkxNDgyODYyMDgyZGI2YmU5NmY1MjNiNmE3Njc4MGNjODIxNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2002-12-06T23:54:41Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2002-12-06T23:54:41Z"}, "message": "FRV docs\n\nFrom-SVN: r59901", "tree": {"sha": "9c2ec1199ced125f89eb136cf371bebcd7f935e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2ec1199ced125f89eb136cf371bebcd7f935e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/708991482862082db6be96f523b6a76780cc8214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708991482862082db6be96f523b6a76780cc8214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708991482862082db6be96f523b6a76780cc8214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708991482862082db6be96f523b6a76780cc8214/comments", "author": null, "committer": null, "parents": [{"sha": "b4d0051bd97c7c6cb2e5e2dc65286985cfccb35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d0051bd97c7c6cb2e5e2dc65286985cfccb35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d0051bd97c7c6cb2e5e2dc65286985cfccb35c"}], "stats": {"total": 338, "additions": 338, "deletions": 0}, "files": [{"sha": "b6f7228a6d700672956301168a2d7743525e22bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708991482862082db6be96f523b6a76780cc8214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708991482862082db6be96f523b6a76780cc8214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=708991482862082db6be96f523b6a76780cc8214", "patch": "@@ -1,3 +1,8 @@\n+2002-12-06  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* doc/invoke.texi: Document FRV port options.\n+\t* doc/md.texi: Document FRV register classes.\n+\n 2002-12-07  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Configuration): Improve description of cases"}, {"sha": "37681c3188b90c7ebb8356d241cb8343770ab979", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708991482862082db6be96f523b6a76780cc8214/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708991482862082db6be96f523b6a76780cc8214/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=708991482862082db6be96f523b6a76780cc8214", "patch": "@@ -678,6 +678,19 @@ in the following sections.\n -mtarget-align -mno-target-align @gol\n -mlongcalls -mno-longcalls}\n \n+@emph{FRV Options}\n+@gccoptlist{\n+-mgpr-32 -mgpr-64 -mfpr-32 -mfpr-64 -mhard-float -msoft-float @gol\n+-malloc-cc -mfixed-cc -mdword -mno-dword -mdouble -mno-double @gol\n+-mmedia -mno-media -mmuladd -mno-muladd -mlibrary-pic -macc-4 @gol\n+-macc-8 -mpack -mno-pack -mno-eflags -mcond-move -mno-cond-move @gol\n+-mscc -mno-scc -mcond-exec -mno-cond-exec -mvliw-branch -mno-vliw-branch @gol\n+-mmulti-cond-exec -mno-multi-cond-exec -mnested-cond-exec @gol\n+-mno-nested-cond-exec -mtomcat-stats @gol\n+-mcpu=@var{cpu}}\n+\n+\n+\n @item Code Generation Options\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n @gccoptlist{\n@@ -5214,6 +5227,7 @@ that macro, which enables you to change the defaults.\n * PDP-11 Options::\n * Xstormy16 Options::\n * Xtensa Options::\n+* FRV Options::\n @end menu\n \n @node M680x0 Options\n@@ -9939,6 +9953,233 @@ These options are defined for Xstormy16:\n Choose startup files and linker script suitable for the simulator.\n @end table\n \n+@node FRV Options\n+@subsection FRV Options\n+@cindex FRV Options\n+\n+@table @gcctabopt\n+@item -mgpr-32\n+@opindex mgpr-32\n+\n+Only use the first 32 general purpose registers.\n+\n+@item -mgpr-64\n+@opindex mgpr-64\n+\n+Use all 64 general purpose registers.\n+\n+@item -mfpr-32\n+@opindex mfpr-32\n+\n+Use only the first 32 floating point registers.\n+\n+@item -mfpr-64\n+@opindex mfpr-64\n+\n+Use all 64 floating point registers\n+\n+@item -mhard-float\n+@opindex mhard-float\n+\n+Use hardware instructions for floating point operations.\n+\n+@item -msoft-float\n+@opindex msoft-float\n+\n+Use library routines for floating point operations.\n+\n+@item -malloc-cc\n+@opindex malloc-cc\n+\n+Dynamically allocate condition code registers.\n+\n+@item -mfixed-cc\n+@opindex mfixed-cc\n+\n+Do not try to dynamically allocate condition code registers, only\n+use @code{icc0} and @code{fcc0}.\n+\n+@item -mdword\n+@opindex mdword\n+\n+Change ABI to use double word insns.\n+\n+@item -mno-dword\n+@opindex mno-dword\n+\n+Do not use double word instructions.\n+\n+@item -mdouble\n+@opindex mdouble\n+\n+Use floating point double instructions.\n+\n+@item -mno-double\n+@opindex mno-double\n+\n+Do not use floating point double instructions.\n+\n+@item -mmedia\n+@opindex mmedia\n+\n+Use media instructions.\n+\n+@item -mno-media\n+@opindex mno-media\n+\n+Do not use media instructions.\n+\n+@item -mmuladd\n+@opindex mmuladd\n+\n+Use multiply and add/subtract instructions.\n+\n+@item -mno-muladd\n+@opindex mno-muladd\n+\n+Do not use multiply and add/subtract instructions.\n+\n+@item -mlibrary-pic\n+@opindex mlibrary-pic\n+\n+Enable PIC support for building libraries\n+\n+@item -macc-4\n+@opindex macc-4\n+\n+Use only the first four media accumulator registers.\n+\n+@item -macc-8\n+@opindex macc-8\n+\n+Use all eight media accumulator registers.\n+\n+@item -mpack\n+@opindex mpack\n+\n+Pack VLIW instructions.\n+\n+@item -mno-pack\n+@opindex mno-pack\n+\n+Do not pack VLIW instructions.\n+\n+@item -mno-eflags\n+@opindex mno-eflags\n+\n+Do not mark ABI switches in e_flags.\n+\n+@item -mcond-move\n+@opindex mcond-move\n+\n+Enable the use of conditional-move instructions (default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-cond-move\n+@opindex mno-cond-move\n+\n+Disable the use of conditional-move instructions.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mscc\n+@opindex mscc\n+\n+Enable the use of conditional set instructions (default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-scc\n+@opindex mno-scc\n+\n+Disable the use of conditional set instructions.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mcond-exec\n+@opindex mcond-exec\n+\n+Enable the use of conditional execution (default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-cond-exec\n+@opindex mno-cond-exec\n+\n+Disable the use of conditional execution.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mvliw-branch\n+@opindex mvliw-branch\n+\n+Run a pass to pack branches into VLIW instructions (default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-vliw-branch\n+@opindex mno-vliw-branch\n+\n+Do not run a pass to pack branches into VLIW instructions.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mmulti-cond-exec\n+@opindex mmulti-cond-exec\n+\n+Enable optimization of @code{&&} and @code{||} in conditional execution\n+(default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-multi-cond-exec\n+@opindex mno-multi-cond-exec\n+\n+Disable optimization of @code{&&} and @code{||} in conditional execution.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mnested-cond-exec\n+@opindex mnested-cond-exec\n+\n+Enable nested conditional execution optimizations (default).\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mno-nested-cond-exec\n+@opindex mno-nested-cond-exec\n+\n+Disable nested conditional execution optimizations.\n+\n+This switch is mainly for debugging the compiler and will likely be removed\n+in a future version.\n+\n+@item -mtomcat-stats\n+@opindex mtomcat-stats\n+\n+Cause gas to print out tomcat statistics.\n+\n+@item -mcpu=@var{cpu}\n+@opindex mcpu\n+\n+Select the processor type for which to generate code.  Possible values are\n+@samp{simple}, @samp{tomcat}, @samp{fr500}, @samp{fr400}, @samp{fr300},\n+@samp{frv}.\n+\n+@end table\n+\n @node Xtensa Options\n @subsection Xtensa Options\n @cindex Xtensa Options"}, {"sha": "81e599d43bfbe7a751c7457b2392308cfbff93b5", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708991482862082db6be96f523b6a76780cc8214/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708991482862082db6be96f523b6a76780cc8214/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=708991482862082db6be96f523b6a76780cc8214", "patch": "@@ -1750,6 +1750,98 @@ Integer constant in the range 1 to 4 for @code{shladd} instruction\n Memory operand except postincrement and postdecrement\n @end table\n \n+@item FRV---@file{frv.h}\n+@table @code\n+@item a\n+Register in the class ACC_REGS (@code{acc0} to @code{acc7}).\n+\n+@item b\n+Register in the class EVEN_ACC_REGS (@code{acc0} to @code{acc7}).\n+\n+@item c\n+Register in the class CC_REGS (@code{fcc0} to @code{fcc3} and @code{icc0} to @code{icc3}).\n+\n+@item d\n+Register in the class GPR_REGS (@code{gr0} to @code{gr63}).\n+\n+@item e\n+Register in the class EVEN_REGS (@code{gr0} to @code{gr63}).\n+Odd registers are excluded not in the class but through the use of a machine\n+mode larger than 4 bytes.\n+\n+@item f\n+Register in the class FPR_REGS (@code{fr0} to @code{fr63}).\n+\n+@item h\n+Register in the class FEVEN_REGS (@code{fr0} to @code{fr63}).\n+Odd registers are excluded not in the class but through the use of a machine\n+mode larger than 4 bytes.\n+\n+@item l\n+Register in the class LR_REG (the @code{lr} register).\n+\n+@item q\n+Register in the class QUAD_REGS (@code{gr2} to @code{gr63}).\n+Register numbers not divisible by 4 are excluded not in the class but through\n+the use of a machine mode larger than 8 bytes.\n+\n+@item t\n+Register in the class ICC_REGS@ (@code{icc0} to @code{icc3}).\n+\n+@item u\n+Register in the class FCC_REGS (@code{fcc0} to @code{fcc3}).\n+\n+@item v\n+Register in the class ICR_REGS (@code{cc4} to @code{cc7}).\n+\n+@item w\n+Register in the class FCR_REGS (@code{cc0} to @code{cc3}).\n+\n+@item x\n+Register in the class QUAD_FPR_REGS (@code{fr0} to @code{fr63}).\n+Register numbers not divisible by 4 are excluded not in the class but through\n+the use of a machine mode larger than 8 bytes.\n+\n+@item z\n+Register in the class SPR_REGS (@code{lcr} and @code{lr}).\n+\n+@item A\n+Register in the class QUAD_ACC_REGS (@code{acc0} to @code{acc7}).\n+\n+@item B\n+Register in the class ACCG_REGS (@code{accg0} to @code{accg7}).\n+\n+@item C\n+Register in the class CR_REGS (@code{cc0} to @code{cc7}).\n+\n+@item G\n+Floating point constant zero\n+\n+@item I\n+6-bit signed integer constant\n+\n+@item J\n+10-bit signed integer constant\n+\n+@item L\n+16-bit signed integer constant\n+\n+@item M\n+16-bit unsigned integer constant\n+\n+@item N\n+12-bit signed integer constant that is negative - i.e. in the\n+range of -2048 to -1\n+\n+@item O\n+Constant zero\n+\n+@item P\n+12-bit signed integer constant that is greater than zero - i.e. in the\n+range of 1 to 2047.\n+\n+@end table\n+\n @item IP2K---@file{ip2k.h}\n @table @code\n @item a"}]}