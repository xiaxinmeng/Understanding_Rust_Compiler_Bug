{"sha": "1e65f2ed99024f23c56f7b6a961898bcaa882a92", "node_id": "C_kwDOANBUbNoAKDFlNjVmMmVkOTkwMjRmMjNjNTZmN2I2YTk2MTg5OGJjYWE4ODJhOTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-08T09:43:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-10T14:24:29Z"}, "message": "libstdc++: Fix lifetime bugs for non-TLS eh_globals [PR105880]\n\nThis ensures that the single-threaded fallback buffer eh_globals is not\ndestroyed during program termination, using the same immortalization\ntechnique used for error category objects.\n\nAlso ensure that init._M_init can still be read after init has been\ndestroyed, by making it a static data member.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/105880\n\t* libsupc++/eh_globals.cc (eh_globals): Ensure constant init and\n\tprevent destruction during termination.\n\t(__eh_globals_init::_M_init): Replace with static member _S_init.\n\t(__cxxabiv1::__cxa_get_globals_fast): Update.\n\t(__cxxabiv1::__cxa_get_globals): Likewise.", "tree": {"sha": "ee64eadb60c3441470c37a5a750ec11f1467ea0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee64eadb60c3441470c37a5a750ec11f1467ea0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e65f2ed99024f23c56f7b6a961898bcaa882a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e65f2ed99024f23c56f7b6a961898bcaa882a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e65f2ed99024f23c56f7b6a961898bcaa882a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e65f2ed99024f23c56f7b6a961898bcaa882a92/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1753a7120109c1d3b682f9487d6cca64fb2f0929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753a7120109c1d3b682f9487d6cca64fb2f0929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1753a7120109c1d3b682f9487d6cca64fb2f0929"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "768425c0f407af9065f4883c4b4a67158967be10", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e65f2ed99024f23c56f7b6a961898bcaa882a92/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e65f2ed99024f23c56f7b6a961898bcaa882a92/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=1e65f2ed99024f23c56f7b6a961898bcaa882a92", "patch": "@@ -64,8 +64,26 @@ __cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n \n #else\n \n-// Single-threaded fallback buffer.\n-static __cxa_eh_globals eh_globals;\n+#if __has_cpp_attribute(clang::require_constant_initialization)\n+#  define __constinit [[clang::require_constant_initialization]]\n+#endif\n+\n+namespace\n+{\n+  struct constant_init\n+  {\n+    union {\n+      unsigned char unused;\n+      __cxa_eh_globals obj;\n+    };\n+    constexpr constant_init() : obj() { }\n+\n+    ~constant_init() { /* do nothing, union member is not destroyed */ }\n+  };\n+\n+  // Single-threaded fallback buffer.\n+  __constinit constant_init eh_globals;\n+}\n \n #if __GTHREADS\n \n@@ -90,40 +108,45 @@ eh_globals_dtor(void* ptr)\n struct __eh_globals_init\n {\n   __gthread_key_t  \t_M_key;\n-  bool \t\t\t_M_init;\n+  static bool \t\t_S_init;\n \n-  __eh_globals_init() : _M_init(false)\n-  { \n+  __eh_globals_init()\n+  {\n     if (__gthread_active_p())\n-      _M_init = __gthread_key_create(&_M_key, eh_globals_dtor) == 0; \n+      _S_init = __gthread_key_create(&_M_key, eh_globals_dtor) == 0;\n   }\n \n   ~__eh_globals_init()\n   {\n-    if (_M_init)\n+    if (_S_init)\n       __gthread_key_delete(_M_key);\n-    _M_init = false;\n+    _S_init = false;\n   }\n+\n+  __eh_globals_init(const __eh_globals_init&) = delete;\n+  __eh_globals_init& operator=(const __eh_globals_init&) = delete;\n };\n \n+bool __eh_globals_init::_S_init = false;\n+\n static __eh_globals_init init;\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals_fast() _GLIBCXX_NOTHROW\n {\n   __cxa_eh_globals* g;\n-  if (init._M_init)\n+  if (init._S_init)\n     g = static_cast<__cxa_eh_globals*>(__gthread_getspecific(init._M_key));\n   else\n-    g = &eh_globals;\n+    g = &eh_globals.obj;\n   return g;\n }\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n {\n   __cxa_eh_globals* g;\n-  if (init._M_init)\n+  if (init._S_init)\n     {\n       g = static_cast<__cxa_eh_globals*>(__gthread_getspecific(init._M_key));\n       if (!g)\n@@ -140,19 +163,19 @@ __cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n \t}\n     }\n   else\n-    g = &eh_globals;\n+    g = &eh_globals.obj;\n   return g;\n }\n \n #else\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals_fast() _GLIBCXX_NOTHROW\n-{ return &eh_globals; }\n+{ return &eh_globals.obj; }\n \n extern \"C\" __cxa_eh_globals*\n __cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n-{ return &eh_globals; }\n+{ return &eh_globals.obj; }\n \n #endif\n "}]}