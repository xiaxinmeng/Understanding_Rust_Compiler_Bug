{"sha": "476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2YThlYzRkOGVjZjM0MzdkYzNlNzhlN2RlMmJkNzdkMzRmZGJkNQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-06-02T16:24:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:19Z"}, "message": "[Ada] SPARK: update for effectively volatile types and objects\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Global_In_Decl_Part): Update check to\n\treject volatile object for reading.\n\t* sem_res.adb (Resolve_Actuals, Resolve_Entity_Name): Update\n\tcheck to reject volatile object for reading.\n\t* sem_util.adb, sem_util.ads\n\t(Check_Nonvolatile_Function_Profile,\n\tHas_Effectively_Volatile_Profile): Detect use of volatile object\n\tfor reading.\n\t(Has_Enabled_Property): Accept constants as well.\n\t(Is_Effectively_Volatile_For_Reading): New function based on\n\texisting Is_Effectively_Volatile.\n\t(Is_Effectively_Volatile_Object_For_Reading): Adapted from the\n\texisting Is_Effectively_Volatile_Object, using a shared\n\timplementation in Is_Effectively_Volatile_Object_Shared.", "tree": {"sha": "1919b61186f5c3fcf47b5a465214683f6c6a3c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1919b61186f5c3fcf47b5a465214683f6c6a3c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057469588864b2566f89e3a548a80d7517b34c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/057469588864b2566f89e3a548a80d7517b34c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/057469588864b2566f89e3a548a80d7517b34c98"}], "stats": {"total": 192, "additions": 149, "deletions": 43}, "files": [{"sha": "7442da1c3f2bca64058f9c7e1e8249c462ef9a4d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "patch": "@@ -2467,10 +2467,11 @@ package body Sem_Prag is\n \n                elsif SPARK_Mode = On\n                  and then Ekind (Item_Id) = E_Variable\n-                 and then Is_Effectively_Volatile (Item_Id)\n+                 and then Is_Effectively_Volatile_For_Reading (Item_Id)\n                then\n-                  --  An effectively volatile object cannot appear as a global\n-                  --  item of a nonvolatile function (SPARK RM 7.1.3(8)).\n+                  --  An effectively volatile object for reading cannot appear\n+                  --  as a global item of a nonvolatile function (SPARK RM\n+                  --  7.1.3(8)).\n \n                   if Ekind (Spec_Id) in E_Function | E_Generic_Function\n                     and then not Is_Volatile_Function (Spec_Id)"}, {"sha": "de1bee99540cd511e56acdddea488d53029eac11", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "patch": "@@ -3428,7 +3428,7 @@ package body Sem_Res is\n \n       procedure Flag_Effectively_Volatile_Objects (Expr : Node_Id);\n       --  Emit an error concerning the illegal usage of an effectively volatile\n-      --  object in interfering context (SPARK RM 7.1.3(10)).\n+      --  object for reading in interfering context (SPARK RM 7.1.3(10)).\n \n       procedure Insert_Default;\n       --  If the actual is missing in a call, insert in the actuals list\n@@ -3687,7 +3687,7 @@ package body Sem_Res is\n       procedure Flag_Effectively_Volatile_Objects (Expr : Node_Id) is\n          function Flag_Object (N : Node_Id) return Traverse_Result;\n          --  Determine whether arbitrary node N denotes an effectively volatile\n-         --  object and if it does, emit an error.\n+         --  object for reading and if it does, emit an error.\n \n          -----------------\n          -- Flag_Object --\n@@ -3707,9 +3707,7 @@ package body Sem_Res is\n                Id := Entity (N);\n \n                if Is_Object (Id)\n-                 and then Is_Effectively_Volatile (Id)\n-                 and then (Async_Writers_Enabled (Id)\n-                            or else Effective_Reads_Enabled (Id))\n+                 and then Is_Effectively_Volatile_For_Reading (Id)\n                then\n                   Error_Msg_N\n                     (\"volatile object cannot appear in this context (SPARK \"\n@@ -4876,36 +4874,36 @@ package body Sem_Res is\n \n             if SPARK_Mode = On and then Comes_From_Source (A) then\n \n-               --  An effectively volatile object may act as an actual when the\n-               --  corresponding formal is of a non-scalar effectively volatile\n-               --  type (SPARK RM 7.1.3(10)).\n+               --  An effectively volatile object for reading may act as an\n+               --  actual when the corresponding formal is of a non-scalar\n+               --  effectively volatile type for reading (SPARK RM 7.1.3(10)).\n \n                if not Is_Scalar_Type (Etype (F))\n-                 and then Is_Effectively_Volatile (Etype (F))\n+                 and then Is_Effectively_Volatile_For_Reading (Etype (F))\n                then\n                   null;\n \n-               --  An effectively volatile object may act as an actual in a\n-               --  call to an instance of Unchecked_Conversion.\n+               --  An effectively volatile object for reading may act as an\n+               --  actual in a call to an instance of Unchecked_Conversion.\n                --  (SPARK RM 7.1.3(10)).\n \n                elsif Is_Unchecked_Conversion_Instance (Nam) then\n                   null;\n \n                --  The actual denotes an object\n \n-               elsif Is_Effectively_Volatile_Object (A) then\n+               elsif Is_Effectively_Volatile_Object_For_Reading (A) then\n                   Error_Msg_N\n                     (\"volatile object cannot act as actual in a call (SPARK \"\n                      & \"RM 7.1.3(10))\", A);\n \n                --  Otherwise the actual denotes an expression. Inspect the\n-               --  expression and flag each effectively volatile object with\n-               --  enabled property Async_Writers or Effective_Reads as illegal\n-               --  because it apprears within an interfering context. Note that\n-               --  this is usually done in Resolve_Entity_Name, but when the\n-               --  effectively volatile object appears as an actual in a call,\n-               --  the call must be resolved first.\n+               --  expression and flag each effectively volatile object\n+               --  for reading as illegal because it apprears within an\n+               --  interfering context. Note that this is usually done in\n+               --  Resolve_Entity_Name, but when the effectively volatile\n+               --  object for reading appears as an actual in a call, the\n+               --  call must be resolved first.\n \n                else\n                   Flag_Effectively_Volatile_Objects (A);\n@@ -4923,7 +4921,7 @@ package body Sem_Res is\n                   A_Id := Entity (A);\n \n                   if Ekind (A_Id) = E_Variable\n-                    and then Is_Effectively_Volatile (Etype (A_Id))\n+                    and then Is_Effectively_Volatile_For_Reading (Etype (A_Id))\n                     and then Effective_Reads_Enabled (A_Id)\n                   then\n                      Error_Msg_NE\n@@ -7770,14 +7768,11 @@ package body Sem_Res is\n \n          if SPARK_Mode = On then\n \n-            --  An effectively volatile object subject to enabled properties\n-            --  Async_Writers or Effective_Reads must appear in non-interfering\n-            --  context (SPARK RM 7.1.3(10)).\n+            --  An effectively volatile object for reading must appear in\n+            --  non-interfering context (SPARK RM 7.1.3(10)).\n \n             if Is_Object (E)\n-              and then Is_Effectively_Volatile (E)\n-              and then (Async_Writers_Enabled (E)\n-                         or else Effective_Reads_Enabled (E))\n+              and then Is_Effectively_Volatile_For_Reading (E)\n               and then not Is_OK_Volatile_Context (Par, N)\n             then\n                SPARK_Msg_N"}, {"sha": "9b67a45b6e9b989821ce7767d40654d105d1c1ff", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 101, "deletions": 12, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "patch": "@@ -127,6 +127,15 @@ package body Sem_Util is\n    --  Determine whether arbitrary entity Id denotes an atomic object as per\n    --  RM C.6(7).\n \n+   generic\n+      with function Is_Effectively_Volatile_Entity\n+        (Id : Entity_Id) return Boolean;\n+      --  Function to use on object and type entities\n+   function Is_Effectively_Volatile_Object_Shared\n+     (N : Node_Id) return Boolean;\n+   --  Shared function used to detect effectively volatile objects and\n+   --  effectively volatile objects for reading.\n+\n    function Is_Fully_Initialized_Variant (Typ : Entity_Id) return Boolean;\n    --  Subsidiary to Is_Fully_Initialized_Type. For an unconstrained type\n    --  with discriminants whose default values are static, examine only the\n@@ -3626,7 +3635,7 @@ package body Sem_Util is\n \n       Formal := First_Formal (Func_Id);\n       while Present (Formal) loop\n-         if Is_Effectively_Volatile (Etype (Formal)) then\n+         if Is_Effectively_Volatile_For_Reading (Etype (Formal)) then\n             Error_Msg_NE\n               (\"nonvolatile function & cannot have a volatile parameter\",\n                Formal, Func_Id);\n@@ -3637,7 +3646,7 @@ package body Sem_Util is\n \n       --  Inspect the return type\n \n-      if Is_Effectively_Volatile (Etype (Func_Id)) then\n+      if Is_Effectively_Volatile_For_Reading (Etype (Func_Id)) then\n          Error_Msg_NE\n            (\"nonvolatile function & cannot have a volatile return type\",\n             Result_Definition (Parent (Func_Id)), Func_Id);\n@@ -11222,11 +11231,11 @@ package body Sem_Util is\n \n    begin\n       --  Inspect the formal parameters looking for an effectively volatile\n-      --  type.\n+      --  type for reading.\n \n       Formal := First_Formal (Subp_Id);\n       while Present (Formal) loop\n-         if Is_Effectively_Volatile (Etype (Formal)) then\n+         if Is_Effectively_Volatile_For_Reading (Etype (Formal)) then\n             return True;\n          end if;\n \n@@ -11236,7 +11245,7 @@ package body Sem_Util is\n       --  Inspect the return type of functions\n \n       if Ekind (Subp_Id) in E_Function | E_Generic_Function\n-        and then Is_Effectively_Volatile (Etype (Subp_Id))\n+        and then Is_Effectively_Volatile_For_Reading (Etype (Subp_Id))\n       then\n          return True;\n       end if;\n@@ -11610,7 +11619,7 @@ package body Sem_Util is\n       if Ekind (Item_Id) = E_Abstract_State then\n          return State_Has_Enabled_Property;\n \n-      elsif Ekind (Item_Id) = E_Variable then\n+      elsif Ekind (Item_Id) in E_Variable | E_Constant then\n          return Type_Or_Variable_Has_Enabled_Property (Item_Id);\n \n       --  Other objects can only inherit properties through their type. We\n@@ -15747,35 +15756,115 @@ package body Sem_Util is\n       end if;\n    end Is_Effectively_Volatile;\n \n+   -----------------------------------------\n+   -- Is_Effectively_Volatile_For_Reading --\n+   -----------------------------------------\n+\n+   function Is_Effectively_Volatile_For_Reading\n+     (Id : Entity_Id) return Boolean\n+   is\n+   begin\n+      --  A concurrent type is effectively volatile for reading\n+\n+      if Is_Concurrent_Type (Id) then\n+         return True;\n+\n+      elsif Is_Effectively_Volatile (Id) then\n+\n+        --  Other volatile types and objects are effectively volatile for\n+        --  reading when they have property Async_Writers or Effective_Reads\n+        --  set to True. This includes the case of an array type whose\n+        --  Volatile_Components aspect is True (hence it is effectively\n+        --  volatile) which does not have the properties Async_Writers\n+        --  and Effective_Reads set to False.\n+\n+         if Async_Writers_Enabled (Id)\n+           or else Effective_Reads_Enabled (Id)\n+         then\n+            return True;\n+\n+         --  In addition, an array type is effectively volatile for reading\n+         --  when its component type is effectively volatile for reading.\n+\n+         elsif Is_Array_Type (Id) then\n+            declare\n+               Anc : Entity_Id := Base_Type (Id);\n+            begin\n+               if Is_Private_Type (Anc) then\n+                  Anc := Full_View (Anc);\n+               end if;\n+\n+               --  Test for presence of ancestor, as the full view of a\n+               --  private type may be missing in case of error.\n+\n+               return\n+                 Present (Anc)\n+                   and then Is_Effectively_Volatile_For_Reading\n+                     (Component_Type (Anc));\n+            end;\n+         end if;\n+      end if;\n+\n+      return False;\n+\n+   end Is_Effectively_Volatile_For_Reading;\n+\n    ------------------------------------\n    -- Is_Effectively_Volatile_Object --\n    ------------------------------------\n \n    function Is_Effectively_Volatile_Object (N : Node_Id) return Boolean is\n+      function Is_Effectively_Volatile_Object_Inst\n+      is new Is_Effectively_Volatile_Object_Shared (Is_Effectively_Volatile);\n+   begin\n+      return Is_Effectively_Volatile_Object_Inst (N);\n+   end Is_Effectively_Volatile_Object;\n+\n+   ------------------------------------------------\n+   -- Is_Effectively_Volatile_Object_For_Reading --\n+   ------------------------------------------------\n+\n+   function Is_Effectively_Volatile_Object_For_Reading\n+     (N : Node_Id) return Boolean\n+   is\n+      function Is_Effectively_Volatile_Object_For_Reading_Inst\n+      is new Is_Effectively_Volatile_Object_Shared\n+        (Is_Effectively_Volatile_For_Reading);\n+   begin\n+      return Is_Effectively_Volatile_Object_For_Reading_Inst (N);\n+   end Is_Effectively_Volatile_Object_For_Reading;\n+\n+   -------------------------------------------\n+   -- Is_Effectively_Volatile_Object_Shared --\n+   -------------------------------------------\n+\n+   function Is_Effectively_Volatile_Object_Shared\n+     (N : Node_Id) return Boolean\n+   is\n    begin\n       if Is_Entity_Name (N) then\n          return Is_Object (Entity (N))\n-           and then Is_Effectively_Volatile (Entity (N));\n+           and then Is_Effectively_Volatile_Entity (Entity (N));\n \n       elsif Nkind (N) in N_Indexed_Component | N_Slice then\n-         return Is_Effectively_Volatile_Object (Prefix (N));\n+         return Is_Effectively_Volatile_Object_Shared (Prefix (N));\n \n       elsif Nkind (N) = N_Selected_Component then\n          return\n-           Is_Effectively_Volatile_Object (Prefix (N))\n+           Is_Effectively_Volatile_Object_Shared (Prefix (N))\n              or else\n-           Is_Effectively_Volatile_Object (Selector_Name (N));\n+           Is_Effectively_Volatile_Object_Shared (Selector_Name (N));\n \n       elsif Nkind (N) in N_Qualified_Expression\n                        | N_Unchecked_Type_Conversion\n                        | N_Type_Conversion\n       then\n-         return Is_Effectively_Volatile_Object (Expression (N));\n+         return Is_Effectively_Volatile_Object_Shared (Expression (N));\n \n       else\n          return False;\n       end if;\n-   end Is_Effectively_Volatile_Object;\n+   end Is_Effectively_Volatile_Object_Shared;\n \n    -------------------\n    -- Is_Entry_Body --"}, {"sha": "2b18ac28003d9d641bd0eaaf5aa4a7423014e809", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=476a8ec4d8ecf3437dc3e78e7de2bd77d34fdbd5", "patch": "@@ -408,7 +408,7 @@ package Sem_Util is\n \n    procedure Check_Nonvolatile_Function_Profile (Func_Id : Entity_Id);\n    --  Verify that the profile of nonvolatile function Func_Id does not contain\n-   --  effectively volatile parameters or return type.\n+   --  effectively volatile parameters or return type for reading.\n \n    procedure Check_Part_Of_Reference (Var_Id : Entity_Id; Ref : Node_Id);\n    --  Verify the legality of reference Ref to variable Var_Id when the\n@@ -1289,7 +1289,8 @@ package Sem_Util is\n    function Has_Effectively_Volatile_Profile\n      (Subp_Id : Entity_Id) return Boolean;\n    --  Determine whether subprogram Subp_Id has an effectively volatile formal\n-   --  parameter or returns an effectively volatile value.\n+   --  parameter for reading or returns an effectively volatile value for\n+   --  reading.\n \n    function Has_Full_Default_Initialization (Typ : Entity_Id) return Boolean;\n    --  Determine whether type Typ defines \"full default initialization\" as\n@@ -1797,10 +1798,30 @@ package Sem_Util is\n    --    * A protected type\n    --    * Descendant of type Ada.Synchronous_Task_Control.Suspension_Object\n \n-   function Is_Effectively_Volatile_Object (N : Node_Id) return Boolean;\n+   function Is_Effectively_Volatile_For_Reading\n+     (Id : Entity_Id) return Boolean;\n+   --  Determine whether a type or object denoted by entity Id is effectively\n+   --  volatile for reading (SPARK RM 7.1.2). To qualify as such, the entity\n+   --  must be either\n+   --    * Volatile without No_Caching and have Async_Writers or\n+   --      Effective_Reads set to True\n+   --    * An array type subject to aspect Volatile_Components, unless it has\n+   --      Async_Writers and Effective_Reads set to False\n+   --    * An array type whose component type is effectively volatile for\n+   --      reading\n+   --    * A protected type\n+   --    * Descendant of type Ada.Synchronous_Task_Control.Suspension_Object\n+\n+   function Is_Effectively_Volatile_Object\n+     (N : Node_Id) return Boolean;\n    --  Determine whether an arbitrary node denotes an effectively volatile\n    --  object (SPARK RM 7.1.2).\n \n+   function Is_Effectively_Volatile_Object_For_Reading\n+     (N : Node_Id) return Boolean;\n+   --  Determine whether an arbitrary node denotes an effectively volatile\n+   --  object for reading (SPARK RM 7.1.2).\n+\n    function Is_Entry_Body (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id is the body entity of an entry [family]\n "}]}