{"sha": "00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkNzlkYzRiZTBiODZlYzU2NGNmYTJiMzJjNDdkZTZjMDc0NDllNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-13T10:17:03Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-03T13:21:45Z"}, "message": "gcov: use mmap pools for KVP.\n\ngcc/ChangeLog:\n\n\tPR gcov-profile/97461\n\t* gcov-io.h (GCOV_PREALLOCATED_KVP): Remove.\n\nlibgcc/ChangeLog:\n\n\tPR gcov-profile/97461\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\t* configure.ac: Check sys/mman.h header file\n\t* libgcov-driver.c (struct gcov_kvp): Remove static\n\tpre-allocated pool and use a dynamic one.\n\t* libgcov.h (MMAP_CHUNK_SIZE): New.\n\t(gcov_counter_add): Use mmap to allocate pool for struct\n\tgcov_kvp.", "tree": {"sha": "e8a0decbad8ba16951cd9f0861e09b67063d8f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a0decbad8ba16951cd9f0861e09b67063d8f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cfa06570dd5eae2f074e1a1388004a60edfd01f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfa06570dd5eae2f074e1a1388004a60edfd01f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfa06570dd5eae2f074e1a1388004a60edfd01f"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "75f16a274c72835bd18ef5bb70e67eca62534935", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -292,9 +292,6 @@ GCOV_COUNTERS\n /* Maximum number of tracked TOP N value profiles.  */\n #define GCOV_TOPN_MAXIMUM_TRACKED_VALUES 32\n \n-/* Number of pre-allocated gcov_kvp structures.  */\n-#define GCOV_PREALLOCATED_KVP 64\n-\n /* Convert a counter index to a tag.  */\n #define GCOV_TAG_FOR_COUNTER(COUNT)\t\t\t\t\\\n \t(GCOV_TAG_COUNTER_BASE + ((gcov_unsigned_t)(COUNT) << 17))"}, {"sha": "f93c64a00c3663ceee1fb67391a2819a801e503f", "filename": "libgcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -49,6 +49,9 @@\n /* Define to 1 if you have the <sys/auxv.h> header file. */\n #undef HAVE_SYS_AUXV_H\n \n+/* Define to 1 if you have the <sys/mman.h> header file. */\n+#undef HAVE_SYS_MMAN_H\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n "}, {"sha": "dd3afb2c95761f53dfa5bc71434e944369ef8a98", "filename": "libgcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -4458,7 +4458,7 @@ as_fn_arith $ac_cv_sizeof_long_double \\* 8 && long_double_type_size=$as_val\n \n for ac_header in inttypes.h stdint.h stdlib.h ftw.h \\\n \tunistd.h sys/stat.h sys/types.h \\\n-\tstring.h strings.h memory.h sys/auxv.h\n+\tstring.h strings.h memory.h sys/auxv.h sys/mman.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_preproc \"$LINENO\" \"$ac_header\" \"$as_ac_Header\"\n@@ -4913,7 +4913,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET insn.\n \tcet_save_CFLAGS=\"$CFLAGS\"\n \tCFLAGS=\"$CFLAGS -fcf-protection\"\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "10ffb0464156cded1b2c386ff61d198216e2e399", "filename": "libgcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -224,7 +224,7 @@ AC_SUBST(long_double_type_size)\n \n AC_CHECK_HEADERS(inttypes.h stdint.h stdlib.h ftw.h \\\n \tunistd.h sys/stat.h sys/types.h \\\n-\tstring.h strings.h memory.h sys/auxv.h)\n+\tstring.h strings.h memory.h sys/auxv.h sys/mman.h)\n AC_HEADER_STDC\n \n # Check for decimal float support."}, {"sha": "914623501329420efaea9e0f475601a66c1c90e1", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -588,11 +588,14 @@ struct gcov_root __gcov_root;\n struct gcov_master __gcov_master = \n   {GCOV_VERSION, 0};\n \n-/* Pool of pre-allocated gcov_kvp strutures.  */\n-struct gcov_kvp __gcov_kvp_pool[GCOV_PREALLOCATED_KVP];\n+/* Dynamic pool for gcov_kvp structures.  */\n+struct gcov_kvp *__gcov_kvp_dynamic_pool;\n \n-/* Index to first free gcov_kvp in the pool.  */\n-unsigned __gcov_kvp_pool_index;\n+/* Index into __gcov_kvp_dynamic_pool array.  */\n+unsigned __gcov_kvp_dynamic_pool_index;\n+\n+/* Size of _gcov_kvp_dynamic_pool array.  */\n+unsigned __gcov_kvp_dynamic_pool_size;\n \n void\n __gcov_exit (void)"}, {"sha": "9c5fcfba4ade8579816abb90badc417bbbc02a8f", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d79dc4be0b86ec564cfa2b32c47de6c07449e6/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=00d79dc4be0b86ec564cfa2b32c47de6c07449e6", "patch": "@@ -45,6 +45,10 @@\n #include \"libgcc_tm.h\"\n #include \"gcov.h\"\n \n+#if HAVE_SYS_MMAN_H\n+#include <sys/mman.h>\n+#endif\n+\n #if __CHAR_BIT__ == 8\n typedef unsigned gcov_unsigned_t __attribute__ ((mode (SI)));\n typedef unsigned gcov_position_t __attribute__ ((mode (SI)));\n@@ -250,8 +254,9 @@ struct indirect_call_tuple\n   \n /* Exactly one of these will be active in the process.  */\n extern struct gcov_master __gcov_master;\n-extern struct gcov_kvp __gcov_kvp_pool[GCOV_PREALLOCATED_KVP];\n-extern unsigned __gcov_kvp_pool_index;\n+extern struct gcov_kvp *__gcov_kvp_dynamic_pool;\n+extern unsigned __gcov_kvp_dynamic_pool_index;\n+extern unsigned __gcov_kvp_dynamic_pool_size;\n \n /* Dump a set of gcov objects.  */\n extern void __gcov_dump_one (struct gcov_root *) ATTRIBUTE_HIDDEN;\n@@ -410,25 +415,44 @@ gcov_counter_add (gcov_type *counter, gcov_type value,\n static inline struct gcov_kvp *\n allocate_gcov_kvp (void)\n {\n+#define MMAP_CHUNK_SIZE\t(128 * 1024)\n   struct gcov_kvp *new_node = NULL;\n+  unsigned kvp_sizeof = sizeof(struct gcov_kvp);\n+\n+  /* Try mmaped pool if available.  */\n+#if !defined(IN_GCOV_TOOL) && !defined(L_gcov_merge_topn) && HAVE_SYS_MMAN_H\n+  if (__gcov_kvp_dynamic_pool == NULL\n+      || __gcov_kvp_dynamic_pool_index >= __gcov_kvp_dynamic_pool_size)\n+    {\n+      void *ptr = mmap (NULL, MMAP_CHUNK_SIZE,\n+\t\t\tPROT_READ | PROT_WRITE,\n+\t\t\tMAP_PRIVATE | MAP_ANONYMOUS, 0, 0);\n+      if (ptr != MAP_FAILED)\n+\t{\n+\t  __gcov_kvp_dynamic_pool = ptr;\n+\t  __gcov_kvp_dynamic_pool_size = MMAP_CHUNK_SIZE / kvp_sizeof;\n+\t  __gcov_kvp_dynamic_pool_index = 0;\n+\t}\n+    }\n \n-#if !defined(IN_GCOV_TOOL) && !defined(L_gcov_merge_topn)\n-  if (__gcov_kvp_pool_index < GCOV_PREALLOCATED_KVP)\n+  if (__gcov_kvp_dynamic_pool != NULL)\n     {\n       unsigned index;\n #if GCOV_SUPPORTS_ATOMIC\n       index\n-\t= __atomic_fetch_add (&__gcov_kvp_pool_index, 1, __ATOMIC_RELAXED);\n+\t= __atomic_fetch_add (&__gcov_kvp_dynamic_pool_index, 1,\n+\t\t\t      __ATOMIC_RELAXED);\n #else\n-      index = __gcov_kvp_pool_index++;\n+      index = __gcov_kvp_dynamic_pool_index++;\n #endif\n-      if (index < GCOV_PREALLOCATED_KVP)\n-\tnew_node = &__gcov_kvp_pool[index];\n+      if (index < __gcov_kvp_dynamic_pool_size)\n+\tnew_node = __gcov_kvp_dynamic_pool + index;\n     }\n #endif\n \n+  /* Fallback to malloc.  */\n   if (new_node == NULL)\n-    new_node = (struct gcov_kvp *)xcalloc (1, sizeof (struct gcov_kvp));\n+    new_node = (struct gcov_kvp *)xcalloc (1, kvp_sizeof);\n \n   return new_node;\n }"}]}