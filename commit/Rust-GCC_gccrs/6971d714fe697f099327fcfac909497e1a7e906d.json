{"sha": "6971d714fe697f099327fcfac909497e1a7e906d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3MWQ3MTRmZTY5N2YwOTkzMjdmY2ZhYzkwOTQ5N2UxYTdlOTA2ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-03-14T09:57:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-03-14T09:57:43Z"}, "message": "re PR tree-optimization/26667 (Inlining always_inline functions causes further inlining that reduces function size to fail)\n\n2006-03-14  Richard Guenther  <rguenther@suse.de>\n\n        PR tree-optimization/26667\n\t* ipa-inline.c (cgraph_check_inline_limits): Walk the correct\n\tnode for the callees.  Always allow inlining if it will shrink\n\tthe function size.\n\nFrom-SVN: r112049", "tree": {"sha": "6a67f9a43b1a56c8f6f35b5469c6f0d4e28d8e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a67f9a43b1a56c8f6f35b5469c6f0d4e28d8e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6971d714fe697f099327fcfac909497e1a7e906d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6971d714fe697f099327fcfac909497e1a7e906d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6971d714fe697f099327fcfac909497e1a7e906d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6971d714fe697f099327fcfac909497e1a7e906d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7de805590acbbcce1968a6552950b189946d852f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de805590acbbcce1968a6552950b189946d852f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de805590acbbcce1968a6552950b189946d852f"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "63d589b0e7b808ecd2e03292bc72e038ff18c855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6971d714fe697f099327fcfac909497e1a7e906d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6971d714fe697f099327fcfac909497e1a7e906d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6971d714fe697f099327fcfac909497e1a7e906d", "patch": "@@ -1,3 +1,10 @@\n+2006-03-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/26667\n+\t* ipa-inline.c (cgraph_check_inline_limits): Walk the correct\n+\tnode for the callees.  Always allow inlining if it will shrink\n+\tthe function size.\n+\n 2006-03-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/26659"}, {"sha": "4765b00ac9016c7d7e1d090584cf0db120f01963", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6971d714fe697f099327fcfac909497e1a7e906d/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6971d714fe697f099327fcfac909497e1a7e906d/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=6971d714fe697f099327fcfac909497e1a7e906d", "patch": "@@ -254,13 +254,13 @@ cgraph_check_inline_limits (struct cgraph_node *to, struct cgraph_node *what,\n   int newsize;\n   int limit;\n \n-  if (to->global.inlined_to)\n-    to = to->global.inlined_to;\n-\n   for (e = to->callees; e; e = e->next_callee)\n     if (e->callee == what)\n       times++;\n \n+  if (to->global.inlined_to)\n+    to = to->global.inlined_to;\n+\n   /* When inlining large function body called once into small function,\n      take the inlined function as base for limiting the growth.  */\n   if (to->local.self_insns > what->local.self_insns)\n@@ -270,8 +270,11 @@ cgraph_check_inline_limits (struct cgraph_node *to, struct cgraph_node *what,\n \n   limit += limit * PARAM_VALUE (PARAM_LARGE_FUNCTION_GROWTH) / 100;\n \n+  /* Check the size after inlining against the function limits.  But allow\n+     the function to shrink if it went over the limits by forced inlining.  */\n   newsize = cgraph_estimate_size_after_inlining (times, to, what);\n-  if (newsize > PARAM_VALUE (PARAM_LARGE_FUNCTION_INSNS)\n+  if (newsize >= to->global.insns\n+      && newsize > PARAM_VALUE (PARAM_LARGE_FUNCTION_INSNS)\n       && newsize > limit)\n     {\n       if (reason)"}]}