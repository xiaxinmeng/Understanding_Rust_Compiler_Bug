{"sha": "254208dc7aea43712f46eb3d732d17d0d6551bfc", "node_id": "C_kwDOANBUbNoAKDI1NDIwOGRjN2FlYTQzNzEyZjQ2ZWIzZDczMmQxN2QwZDY1NTFiZmM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-10T13:10:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: reuse destructure code in compilation of types\n\nWe can just return error_mark_node instead of our own custom\nrecursion limit checker code. This makes the backend more reuseable\nin error states.\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-type.cc (TyTyResolveCompile::TyTyResolveCompile): call destructure\n\t(TyTyResolveCompile::compile): use error_mark_node\n\t(TyTyResolveCompile::visit): use error_mark_node\n\t* backend/rust-compile-type.h: remove recursive ops\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "814168b8d1bde27c40167b552553b5a67e3356b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814168b8d1bde27c40167b552553b5a67e3356b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254208dc7aea43712f46eb3d732d17d0d6551bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254208dc7aea43712f46eb3d732d17d0d6551bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254208dc7aea43712f46eb3d732d17d0d6551bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254208dc7aea43712f46eb3d732d17d0d6551bfc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e010fc08b42cf4379e2ad1b51518c22a7f82186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e010fc08b42cf4379e2ad1b51518c22a7f82186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e010fc08b42cf4379e2ad1b51518c22a7f82186"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "879b89fe1f186f031e00b22da9dc7fbe64f55f23", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254208dc7aea43712f46eb3d732d17d0d6551bfc/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254208dc7aea43712f46eb3d732d17d0d6551bfc/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=254208dc7aea43712f46eb3d732d17d0d6551bfc", "patch": "@@ -30,15 +30,16 @@ static const std::string RUST_ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\";\n \n TyTyResolveCompile::TyTyResolveCompile (Context *ctx, bool trait_object_mode)\n   : ctx (ctx), trait_object_mode (trait_object_mode),\n-    translated (error_mark_node), recurisve_ops (0)\n+    translated (error_mark_node)\n {}\n \n tree\n TyTyResolveCompile::compile (Context *ctx, const TyTy::BaseType *ty,\n \t\t\t     bool trait_object_mode)\n {\n   TyTyResolveCompile compiler (ctx, trait_object_mode);\n-  ty->accept_vis (compiler);\n+  const TyTy::BaseType *destructured = ty->destructure ();\n+  destructured->accept_vis (compiler);\n \n   if (compiler.translated != error_mark_node\n       && TYPE_NAME (compiler.translated) != NULL)\n@@ -97,6 +98,24 @@ TyTyResolveCompile::visit (const TyTy::InferType &)\n   translated = error_mark_node;\n }\n \n+void\n+TyTyResolveCompile::visit (const TyTy::ParamType &)\n+{\n+  translated = error_mark_node;\n+}\n+\n+void\n+TyTyResolveCompile::visit (const TyTy::ProjectionType &type)\n+{\n+  translated = error_mark_node;\n+}\n+\n+void\n+TyTyResolveCompile::visit (const TyTy::PlaceholderType &type)\n+{\n+  translated = error_mark_node;\n+}\n+\n void\n TyTyResolveCompile::visit (const TyTy::ClosureType &type)\n {\n@@ -137,34 +156,6 @@ TyTyResolveCompile::visit (const TyTy::ClosureType &type)\n \t\t\t\t\t\ttype.get_ident ().locus);\n }\n \n-void\n-TyTyResolveCompile::visit (const TyTy::ProjectionType &type)\n-{\n-  type.get ()->accept_vis (*this);\n-}\n-\n-void\n-TyTyResolveCompile::visit (const TyTy::PlaceholderType &type)\n-{\n-  type.resolve ()->accept_vis (*this);\n-}\n-\n-void\n-TyTyResolveCompile::visit (const TyTy::ParamType &param)\n-{\n-  if (recurisve_ops++ >= rust_max_recursion_depth)\n-    {\n-      rust_error_at (Location (),\n-\t\t     \"%<recursion depth%> count exceeds limit of %i (use \"\n-\t\t     \"%<frust-max-recursion-depth=%> to increase the limit)\",\n-\t\t     rust_max_recursion_depth);\n-      translated = error_mark_node;\n-      return;\n-    }\n-\n-  param.resolve ()->accept_vis (*this);\n-}\n-\n void\n TyTyResolveCompile::visit (const TyTy::FnType &type)\n {"}, {"sha": "acaa80a982fcf07b8b79225f646a1878c22943cb", "filename": "gcc/rust/backend/rust-compile-type.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254208dc7aea43712f46eb3d732d17d0d6551bfc/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254208dc7aea43712f46eb3d732d17d0d6551bfc/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.h?ref=254208dc7aea43712f46eb3d732d17d0d6551bfc", "patch": "@@ -70,7 +70,6 @@ class TyTyResolveCompile : protected TyTy::TyConstVisitor\n   Context *ctx;\n   bool trait_object_mode;\n   tree translated;\n-  int recurisve_ops;\n };\n \n } // namespace Compile"}]}