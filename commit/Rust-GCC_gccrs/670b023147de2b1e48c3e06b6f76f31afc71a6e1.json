{"sha": "670b023147de2b1e48c3e06b6f76f31afc71a6e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwYjAyMzE0N2RlMmIxZTQ4YzNlMDZiNmY3NmYzMWFmYzcxYTZlMQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-08T15:15:53Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2008-02-08T15:15:53Z"}, "message": "invoke.texi (Option Summary, [...]): Make -Wfoo language annotations match what the compiler outputs.\n\n\t* doc/invoke.texi (Option Summary, C++ Dialect Options)\n\t(Objective-C and Objective-C++ Dialect Options, Warning Options):\n\tMake -Wfoo language annotations match what the compiler outputs.\n\nFrom-SVN: r132186", "tree": {"sha": "0b73f0084b3093f9c7855f68d73953198dee665f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b73f0084b3093f9c7855f68d73953198dee665f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/670b023147de2b1e48c3e06b6f76f31afc71a6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670b023147de2b1e48c3e06b6f76f31afc71a6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670b023147de2b1e48c3e06b6f76f31afc71a6e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670b023147de2b1e48c3e06b6f76f31afc71a6e1/comments", "author": null, "committer": null, "parents": [{"sha": "069c47eef5efbf8843767f741c1f74b4900861bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/069c47eef5efbf8843767f741c1f74b4900861bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/069c47eef5efbf8843767f741c1f74b4900861bb"}], "stats": {"total": 86, "additions": 46, "deletions": 40}, "files": [{"sha": "aef6158e9c72621e571f3d4e63060420ece9c35b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670b023147de2b1e48c3e06b6f76f31afc71a6e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670b023147de2b1e48c3e06b6f76f31afc71a6e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=670b023147de2b1e48c3e06b6f76f31afc71a6e1", "patch": "@@ -1,3 +1,9 @@\n+2008-02-08  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/invoke.texi (Option Summary, C++ Dialect Options)\n+\t(Objective-C and Objective-C++ Dialect Options, Warning Options):\n+\tMake -Wfoo language annotations match what the compiler outputs.\n+\n 2008-02-08  Sa Liu  <saliu@de.ibm.com>\n \n \t* config/spu/spu-builtins.def: Fixed wrong parameter type in spu "}, {"sha": "c67487d5321338dabb93a8ff657a852fe5edad1b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670b023147de2b1e48c3e06b6f76f31afc71a6e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670b023147de2b1e48c3e06b6f76f31afc71a6e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=670b023147de2b1e48c3e06b6f76f31afc71a6e1", "patch": "@@ -261,7 +261,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wvariadic-macros -Wvla @gol\n -Wvolatile-register-var  -Wwrite-strings}\n \n-@item C-only Warning Options\n+@item C and Objective-C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n -Wmissing-parameter-type  -Wmissing-prototypes  -Wnested-externs @gol\n -Wold-style-declaration  -Wold-style-definition @gol\n@@ -1906,7 +1906,7 @@ Do not assume @samp{inline} for functions defined inside a class scope.\n functions will have linkage like inline functions; they just won't be\n inlined by default.\n \n-@item -Wabi @r{(C++ only)}\n+@item -Wabi @r{(C++ and Objective-C++ only)}\n @opindex Wabi\n @opindex Wno-abi\n Warn when G++ generates code that is probably not compatible with the\n@@ -2006,22 +2006,22 @@ Instantiations of these templates may be mangled incorrectly.\n \n @end itemize\n \n-@item -Wctor-dtor-privacy @r{(C++ only)}\n+@item -Wctor-dtor-privacy @r{(C++ and Objective-C++ only)}\n @opindex Wctor-dtor-privacy\n @opindex Wno-ctor-dtor-privacy\n Warn when a class seems unusable because all the constructors or\n destructors in that class are private, and it has neither friends nor\n public static member functions.\n \n-@item -Wnon-virtual-dtor @r{(C++ only)}\n+@item -Wnon-virtual-dtor @r{(C++ and Objective-C++ only)}\n @opindex Wnon-virtual-dtor\n @opindex Wno-non-virtual-dtor\n Warn when a class has virtual functions and accessible non-virtual\n destructor, in which case it would be possible but unsafe to delete\n an instance of a derived class through a pointer to the base class.\n This warning is also enabled if -Weffc++ is specified.\n \n-@item -Wreorder @r{(C++ only)}\n+@item -Wreorder @r{(C++ and Objective-C++ only)}\n @opindex Wreorder\n @opindex Wno-reorder\n @cindex reordering, warning\n@@ -2045,7 +2045,7 @@ a warning to that effect.  This warning is enabled by @option{-Wall}.\n The following @option{-W@dots{}} options are not affected by @option{-Wall}.\n \n @table @gcctabopt\n-@item -Weffc++ @r{(C++ only)}\n+@item -Weffc++ @r{(C++ and Objective-C++ only)}\n @opindex Weffc++\n @opindex Wno-effc++\n Warn about violations of the following style guidelines from Scott Meyers'\n@@ -2087,12 +2087,12 @@ When selecting this option, be aware that the standard library\n headers do not obey all of these guidelines; use @samp{grep -v}\n to filter out those warnings.\n \n-@item -Wno-deprecated @r{(C++ only)}\n+@item -Wno-deprecated @r{(C++ and Objective-C++ only)}\n @opindex Wno-deprecated\n @opindex Wdeprecated\n Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n \n-@item -Wstrict-null-sentinel @r{(C++ only)}\n+@item -Wstrict-null-sentinel @r{(C++ and Objective-C++ only)}\n @opindex Wstrict-null-sentinel\n @opindex Wno-strict-null-sentinel\n Warn also about the use of an uncasted @code{NULL} as sentinel.  When\n@@ -2101,7 +2101,7 @@ to @code{__null}.  Although it is a null pointer constant not a null pointer,\n it is guaranteed to of the same size as a pointer.  But this use is\n not portable across different compilers.\n \n-@item -Wno-non-template-friend @r{(C++ only)}\n+@item -Wno-non-template-friend @r{(C++ and Objective-C++ only)}\n @opindex Wno-non-template-friend\n @opindex Wnon-template-friend\n Disable warnings when non-templatized friend functions are declared\n@@ -2118,15 +2118,15 @@ This new compiler behavior can be turned off with\n @option{-Wno-non-template-friend} which keeps the conformant compiler code\n but disables the helpful warning.\n \n-@item -Wold-style-cast @r{(C++ only)}\n+@item -Wold-style-cast @r{(C++ and Objective-C++ only)}\n @opindex Wold-style-cast\n @opindex Wno-old-style-cast\n Warn if an old-style (C-style) cast to a non-void type is used within\n a C++ program.  The new-style casts (@samp{dynamic_cast},\n @samp{static_cast}, @samp{reinterpret_cast}, and @samp{const_cast}) are\n less vulnerable to unintended effects and much easier to search for.\n \n-@item -Woverloaded-virtual @r{(C++ only)}\n+@item -Woverloaded-virtual @r{(C++ and Objective-C++ only)}\n @opindex Woverloaded-virtual\n @opindex Wno-overloaded-virtual\n @cindex overloaded virtual fn, warning\n@@ -2154,13 +2154,13 @@ b->f();\n \n will fail to compile.\n \n-@item -Wno-pmf-conversions @r{(C++ only)}\n+@item -Wno-pmf-conversions @r{(C++ and Objective-C++ only)}\n @opindex Wno-pmf-conversions\n @opindex Wpmf-conversions\n Disable the diagnostic for converting a bound pointer to member function\n to a plain pointer.\n \n-@item -Wsign-promo @r{(C++ only)}\n+@item -Wsign-promo @r{(C++ and Objective-C++ only)}\n @opindex Wsign-promo\n @opindex Wno-sign-promo\n Warn when overload resolution chooses a promotion from unsigned or\n@@ -2400,13 +2400,13 @@ for individual class implementations to be modified during program execution.\n Dump interface declarations for all classes seen in the source file to a\n file named @file{@var{sourcename}.decl}.\n \n-@item -Wassign-intercept\n+@item -Wassign-intercept @r{(Objective-C and Objective-C++ only)}\n @opindex Wassign-intercept\n @opindex Wno-assign-intercept\n Warn whenever an Objective-C assignment is being intercepted by the\n garbage collector.\n \n-@item -Wno-protocol\n+@item -Wno-protocol @r{(Objective-C and Objective-C++ only)}\n @opindex Wno-protocol\n @opindex Wprotocol\n If a class is declared to implement a protocol, a warning is issued for\n@@ -2417,7 +2417,7 @@ from the superclass.  If you use the @option{-Wno-protocol} option, then\n methods inherited from the superclass are considered to be implemented,\n and no warning is issued for them.\n \n-@item -Wselector\n+@item -Wselector @r{(Objective-C and Objective-C++ only)}\n @opindex Wselector\n @opindex Wno-selector\n Warn if multiple methods of different types for the same selector are\n@@ -2431,7 +2431,7 @@ stage of compilation is not reached, for example because an error is\n found during compilation, or because the @option{-fsyntax-only} option is\n being used.\n \n-@item -Wstrict-selector-match\n+@item -Wstrict-selector-match @r{(Objective-C and Objective-C++ only)}\n @opindex Wstrict-selector-match\n @opindex Wno-strict-selector-match\n Warn if multiple methods with differing argument and/or return types are\n@@ -2441,7 +2441,7 @@ is off (which is the default behavior), the compiler will omit such warnings\n if any differences found are confined to types which share the same size\n and alignment.\n \n-@item -Wundeclared-selector\n+@item -Wundeclared-selector @r{(Objective-C and Objective-C++ only)}\n @opindex Wundeclared-selector\n @opindex Wno-undeclared-selector\n Warn if a @code{@@selector(@dots{})} expression referring to an\n@@ -2814,7 +2814,7 @@ in the case of @code{scanf} formats, this option will suppress the\n warning if the unused arguments are all pointers, since the Single\n Unix Specification says that such unused arguments are allowed.\n \n-@item -Wno-format-zero-length\n+@item -Wno-format-zero-length @r{(C and Objective-C only)}\n @opindex Wno-format-zero-length\n @opindex Wformat-zero-length\n If @option{-Wformat} is specified, do not warn about zero-length formats.\n@@ -2847,7 +2847,7 @@ Enable @option{-Wformat} plus format checks not included in\n @option{-Wformat}.  Currently equivalent to @samp{-Wformat\n -Wformat-nonliteral -Wformat-security -Wformat-y2k}.\n \n-@item -Wnonnull\n+@item -Wnonnull @r{(C and Objective-C only)}\n @opindex Wnonnull\n @opindex Wno-nonnull\n Warn about passing a null pointer for arguments marked as\n@@ -2875,13 +2875,13 @@ int f()\n @end group\n @end smallexample\n \n-@item -Wimplicit-int\n+@item -Wimplicit-int @r{(C and Objective-C only)}\n @opindex Wimplicit-int\n @opindex Wno-implicit-int\n Warn when a declaration does not specify a type.\n This warning is enabled by @option{-Wall}.\n \n-@item -Wimplicit-function-declaration\n+@item -Wimplicit-function-declaration @r{(C and Objective-C only)}\n @opindex Wimplicit-function-declaration\n @opindex Wno-implicit-function-declaration\n Give a warning whenever a function is used before being declared. In\n@@ -2896,7 +2896,7 @@ enabled by default and it is made into an error by\n Same as @option{-Wimplicit-int} and @option{-Wimplicit-function-declaration}.\n This warning is enabled by @option{-Wall}.\n \n-@item -Wignored-qualifiers\n+@item -Wignored-qualifiers @r{(C and C++ only)}\n @opindex Wignored-qualifiers\n @opindex Wno-ignored-qualifiers\n Warn if the return type of a function has a type qualifier\n@@ -3383,7 +3383,7 @@ would check to see whether the two values have ranges that overlap; and\n this is done with the relational operators, so equality comparisons are\n probably mistaken.\n \n-@item -Wtraditional @r{(C only)}\n+@item -Wtraditional @r{(C and Objective-C only)}\n @opindex Wtraditional\n @opindex Wno-traditional\n Warn about certain constructs that behave differently in traditional and\n@@ -3472,7 +3472,7 @@ because that feature is already a GCC extension and thus not relevant to\n traditional C compatibility.\n @end itemize\n \n-@item -Wtraditional-conversion @r{(C only)}\n+@item -Wtraditional-conversion @r{(C and Objective-C only)}\n @opindex Wtraditional-conversion\n @opindex Wno-traditional-conversion\n Warn if a prototype causes a type conversion that is different from what\n@@ -3481,7 +3481,7 @@ includes conversions of fixed point to floating and vice versa, and\n conversions changing the width or signedness of a fixed point argument\n except when the same as the default promotion.\n \n-@item -Wdeclaration-after-statement @r{(C only)}\n+@item -Wdeclaration-after-statement @r{(C and Objective-C only)}\n @opindex Wdeclaration-after-statement\n @opindex Wno-declaration-after-statement\n Warn when a declaration is found after a statement in a block.  This\n@@ -3535,13 +3535,13 @@ example, warn if an unsigned variable is compared against zero with\n @samp{<} or @samp{>=}.  This warning is also enabled by\n @option{-Wextra}.\n \n-@item -Wbad-function-cast @r{(C only)}\n+@item -Wbad-function-cast @r{(C and Objective-C only)}\n @opindex Wbad-function-cast\n @opindex Wno-bad-function-cast\n Warn whenever a function call is cast to a non-matching type.\n For example, warn if @code{int malloc()} is cast to @code{anything *}.\n \n-@item -Wc++-compat\n+@item -Wc++-compat @r{(C and Objective-C only)}\n Warn about ISO C constructs that are outside of the common subset of\n ISO C and ISO C++, e.g.@: request for implicit conversion from\n @code{void *} to a pointer to non-@code{void} type.\n@@ -3672,29 +3672,29 @@ unrecognized attributes, function attributes applied to variables,\n etc.  This will not stop errors for incorrect use of supported\n attributes.\n \n-@item -Wstrict-prototypes @r{(C only)}\n+@item -Wstrict-prototypes @r{(C and Objective-C only)}\n @opindex Wstrict-prototypes\n @opindex Wno-strict-prototypes\n Warn if a function is declared or defined without specifying the\n argument types.  (An old-style function definition is permitted without\n a warning if preceded by a declaration which specifies the argument\n types.)\n \n-@item -Wold-style-declaration @r{(C only)}\n+@item -Wold-style-declaration @r{(C and Objective-C only)}\n @opindex Wold-style-declaration\n @opindex Wno-old-style-declaration\n Warn for obsolescent usages, according to the C Standard, in a\n declaration. For example, warn if storage-class specifiers like\n @code{static} are not the first things in a declaration.  This warning\n is also enabled by @option{-Wextra}.\n \n-@item -Wold-style-definition @r{(C only)}\n+@item -Wold-style-definition @r{(C and Objective-C only)}\n @opindex Wold-style-definition\n @opindex Wno-old-style-definition\n Warn if an old-style function definition is used.  A warning is given\n even if there is a previous prototype.\n \n-@item -Wmissing-parameter-type @r{(C only)}\n+@item -Wmissing-parameter-type @r{(C and Objective-C only)}\n @opindex Wmissing-parameter-type\n @opindex Wno-missing-parameter-type\n A function parameter is declared without a type specifier in K&R-style\n@@ -3706,15 +3706,15 @@ void foo(bar) @{ @}\n \n This warning is also enabled by @option{-Wextra}.\n \n-@item -Wmissing-prototypes @r{(C only)}\n+@item -Wmissing-prototypes @r{(C and Objective-C only)}\n @opindex Wmissing-prototypes\n @opindex Wno-missing-prototypes\n Warn if a global function is defined without a previous prototype\n declaration.  This warning is issued even if the definition itself\n provides a prototype.  The aim is to detect global functions that fail\n to be declared in header files.\n \n-@item -Wmissing-declarations @r{(C and C++ only)}\n+@item -Wmissing-declarations\n @opindex Wmissing-declarations\n @opindex Wno-missing-declarations\n Warn if a global function is defined without a previous declaration.\n@@ -3847,7 +3847,7 @@ attribute.\n @opindex Woverflow\n Do not warn about compile-time overflow in constant expressions.\n \n-@item -Woverride-init\n+@item -Woverride-init @r{(C and Objective-C only)}\n @opindex Woverride-init\n @opindex Wno-override-init\n @opindex W\n@@ -3898,7 +3898,7 @@ reduce the padding and so make the structure smaller.\n Warn if anything is declared more than once in the same scope, even in\n cases where multiple declaration is valid and changes nothing.\n \n-@item -Wnested-externs @r{(C only)}\n+@item -Wnested-externs @r{(C and Objective-C only)}\n @opindex Wnested-externs\n @opindex Wno-nested-externs\n Warn if an @code{extern} declaration is encountered within a function.\n@@ -3940,7 +3940,7 @@ that has already been done in the current function.  Therefore,\n seemingly insignificant changes in the source program can cause the\n warnings produced by @option{-Winline} to appear or disappear.\n \n-@item -Wno-invalid-offsetof @r{(C++ only)}\n+@item -Wno-invalid-offsetof @r{(C++ and Objective-C++ only)}\n @opindex Wno-invalid-offsetof\n @opindex Winvalid-offsetof\n Suppress warnings from applying the @samp{offsetof} macro to a non-POD\n@@ -3956,13 +3956,13 @@ warning about it.\n The restrictions on @samp{offsetof} may be relaxed in a future version\n of the C++ standard.\n \n-@item -Wno-int-to-pointer-cast @r{(C only)}\n+@item -Wno-int-to-pointer-cast @r{(C and Objective-C only)}\n @opindex Wno-int-to-pointer-cast\n @opindex Wint-to-pointer-cast\n Suppress warnings from casts to pointer type of an integer of a\n different size.\n \n-@item -Wno-pointer-to-int-cast @r{(C only)}\n+@item -Wno-pointer-to-int-cast @r{(C and Objective-C only)}\n @opindex Wno-pointer-to-int-cast\n @opindex Wpointer-to-int-cast\n Suppress warnings from casts from a pointer to an integer type of a\n@@ -4013,7 +4013,7 @@ effectively.  Often, the problem is that your code is too big or too\n complex; GCC will refuse to optimize programs when the optimization\n itself is likely to take inordinate amounts of time.\n \n-@item -Wpointer-sign\n+@item -Wpointer-sign @r{(C and Objective-C only)}\n @opindex Wpointer-sign\n @opindex Wno-pointer-sign\n Warn for pointer argument passing or assignment with different signedness."}]}