{"sha": "d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxNzM1OTMzYThmNGRjMGI0NzNmZmE3YzFhYWFmY2FkZGVhM2Q1YQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2012-04-25T22:31:36Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-04-25T22:31:36Z"}, "message": "re PR target/53120 (ICE exposing strict_low_part / in/out operand thinko -fno-tree-sra)\n\n\tPR target/53120\n\t* config/cris/cris.md (\"*andhi_lowpart_v32\")\n\t(\"*andqi_lowpart_v32\"): Change first input-only operand from\n\ta (match_operand ...) to (match_dup 0).  Drop alternatives with\n\tconst_int-matching constraints for redundancy.\n\t(\"*andhi_lowpart_non_v32\", \"*andqi_lowpart_non_v32\"): Ditto.  Drop\n\tthree-operand alternative.\n\nFrom-SVN: r186843", "tree": {"sha": "d2bae6b2ab036950665bebad2209e0b55567f7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2bae6b2ab036950665bebad2209e0b55567f7c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1d40097cbfefceed04bbb3d3c9e14dcf7b27403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d40097cbfefceed04bbb3d3c9e14dcf7b27403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d40097cbfefceed04bbb3d3c9e14dcf7b27403"}], "stats": {"total": 101, "additions": 61, "deletions": 40}, "files": [{"sha": "22011ca9e6c89df8f192ff32887f9b26bcda8ebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "patch": "@@ -1,3 +1,13 @@\n+2012-04-26  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/53120\n+\t* config/cris/cris.md (\"*andhi_lowpart_v32\")\n+\t(\"*andqi_lowpart_v32\"): Change first input-only operand from\n+\ta (match_operand ...) to (match_dup 0).  Drop alternatives with\n+\tconst_int-matching constraints for redundancy.\n+\t(\"*andhi_lowpart_non_v32\", \"*andqi_lowpart_non_v32\"): Ditto.  Drop\n+\tthree-operand alternative.\n+\n 2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/53110"}, {"sha": "febe6f58914f373b2e010dfd275f23abb78187d7", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=d71735933a8f4dc0b473ffa7c1aaafcaddea3d5a", "patch": "@@ -2915,36 +2915,51 @@\n \n ;; A strict_low_part pattern.\n \n+;; Note the use of (match_dup 0) for the first operand of the operation\n+;; here.  Reload can't handle an operand pair where one is read-write\n+;; and must match a read, like in:\n+;; (insn 80 79 81 4\n+;;  (set (strict_low_part\n+;;        (subreg:QI (reg/v:SI 0 r0 [orig:36 data ] [36]) 0))\n+;;       (and:QI\n+;;        (subreg:QI (reg:SI 15 acr [orig:27 D.7531 ] [27]) 0)\n+;;        (const_int -64 [0xf..fc0]))) x.c:126 147 {*andqi_lowpart_v32}\n+;;  (nil))\n+;; In theory, it could reload this as a movstrictqi of the register\n+;; operand at the and:QI to the destination register and change the\n+;; and:QI operand to the same as the read-write output operand and the\n+;; result would be recognized, but it doesn't recognize that's a valid\n+;; reload for a strict_low_part-destination; it just sees a \"+\" at the\n+;; destination constraints.  Better than adding complexity to reload is\n+;; to follow the lead of m68k (see comment that begins with \"These insns\n+;; must use MATCH_DUP\") since prehistoric times and make it just a\n+;; match_dup.  FIXME: a sanity-check in gen* to refuse an insn with\n+;; input-constraints matching input-output-constraints, e.g. \"+r\" <- \"0\".\n+\n (define_insn \"*andhi_lowpart_non_v32\"\n   [(set (strict_low_part\n-\t (match_operand:HI 0 \"register_operand\"\t       \"+r,r, r,r,r,r\"))\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0, 0,0,0,r\")\n-\t\t(match_operand:HI 2 \"general_operand\"   \"r,Q>,L,O,g,!To\")))]\n+\t (match_operand:HI 0 \"register_operand\"\t       \"+r,r,r\"))\n+\t(and:HI (match_dup 0)\n+\t\t(match_operand:HI 1 \"general_operand\"   \"r,Q>,g\")))]\n   \"!TARGET_V32\"\n   \"@\n-   and.w %2,%0\n-   and.w %2,%0\n-   and.w %2,%0\n-   anDq %b2,%0\n-   and.w %2,%0\n-   and.w %2,%1,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,no,yes,no,no\")\n-   (set_attr \"cc\" \"normal,normal,normal,clobber,normal,normal\")])\n+   and.w %1,%0\n+   and.w %1,%0\n+   and.w %1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no\")])\n \n (define_insn \"*andhi_lowpart_v32\"\n   [(set (strict_low_part\n-\t (match_operand:HI 0 \"register_operand\" \"+r,r,r,r,r\"))\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"r,Q>,L,O,g\")))]\n+\t (match_operand:HI 0 \"register_operand\" \"+r,r,r\"))\n+\t(and:HI (match_dup 0)\n+\t\t(match_operand:HI 1 \"general_operand\" \"r,Q>,g\")))]\n   \"TARGET_V32\"\n   \"@\n-   and.w %2,%0\n-   and.w %2,%0\n-   and.w %2,%0\n-   anDq %b2,%0\n-   and.w %2,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,no,yes,no\")\n-   (set_attr \"cc\" \"noov32,noov32,noov32,clobber,noov32\")])\n+   and.w %1,%0\n+   and.w %1,%0\n+   and.w %1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no\")\n+   (set_attr \"cc\" \"noov32\")])\n \f\n (define_expand \"andqi3\"\n   [(set (match_operand:QI 0 \"register_operand\")\n@@ -2984,32 +2999,28 @@\n \n (define_insn \"*andqi_lowpart_non_v32\"\n   [(set (strict_low_part\n-\t (match_operand:QI 0 \"register_operand\"\t       \"+r,r, r,r,r\"))\n-\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0, 0,0,r\")\n-\t\t(match_operand:QI 2 \"general_operand\"   \"r,Q>,O,g,!To\")))]\n+\t (match_operand:QI 0 \"register_operand\"\t       \"+r,r,r\"))\n+\t(and:QI (match_dup 0)\n+\t\t(match_operand:QI 1 \"general_operand\"   \"r,Q>,g\")))]\n   \"!TARGET_V32\"\n   \"@\n-   and.b %2,%0\n-   and.b %2,%0\n-   andQ %b2,%0\n-   and.b %2,%0\n-   and.b %2,%1,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,yes,no,no\")\n-   (set_attr \"cc\" \"normal,normal,clobber,normal,normal\")])\n+   and.b %1,%0\n+   and.b %1,%0\n+   and.b %1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no\")])\n \n (define_insn \"*andqi_lowpart_v32\"\n   [(set (strict_low_part\n-\t (match_operand:QI 0 \"register_operand\" \"+r,r,r,r\"))\n-\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"r,Q>,O,g\")))]\n+\t (match_operand:QI 0 \"register_operand\" \"+r,r,r\"))\n+\t(and:QI (match_dup 0)\n+\t\t(match_operand:QI 1 \"general_operand\" \"r,Q>,g\")))]\n   \"TARGET_V32\"\n   \"@\n-   and.b %2,%0\n-   and.b %2,%0\n-   andQ %b2,%0\n-   and.b %2,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,yes,no\")\n-   (set_attr \"cc\" \"noov32,noov32,clobber,noov32\")])\n+   and.b %1,%0\n+   and.b %1,%0\n+   and.b %1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,no\")\n+   (set_attr \"cc\" \"noov32\")])\n \f\n ;; Bitwise or.\n "}]}