{"sha": "8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiNWY1YzlmYTJlNTE2MWI0ODIyZTIyMDVhMTdmNmI1YmE2NTI4YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-06-02T21:54:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-06-02T21:54:42Z"}, "message": "tree-vrp.c, [...]: Fix comment typos.\n\n\t* tree-vrp.c, config/arm/arm.md, config/arm/arm1020e.md,\n\tconfig/rs6000/rs6000.md: Fix comment typos.  Follow splling\n\tconventions.\n\t* doc/install.texi: Fix a typo.\n\nFrom-SVN: r100516", "tree": {"sha": "680fc16e22ac48db5bafd4eec1712e806eb599b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/680fc16e22ac48db5bafd4eec1712e806eb599b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/comments", "author": null, "committer": null, "parents": [{"sha": "bc0f348e1004ac1092b08ff0cfd82dd40abb67e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f348e1004ac1092b08ff0cfd82dd40abb67e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0f348e1004ac1092b08ff0cfd82dd40abb67e7"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "a67fa100397354c2f8335f4916fc13f01a6211b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -1,3 +1,10 @@\n+2005-06-02  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree-vrp.c, config/arm/arm.md, config/arm/arm1020e.md,\n+\tconfig/rs6000/rs6000.md: Fix comment typos.  Follow splling\n+\tconventions.\n+\t* doc/install.texi: Fix a typo.\n+\n 2005-06-02  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (cgraph_function_and_variable_visibility): Extern"}, {"sha": "2aadfea671ba24b7c0e16797ef676fc0f66e9e5c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -202,8 +202,8 @@\n ;\t\teven on a machine with an fpa.\n ; f_load\ta floating point load from memory\n ; f_store\ta floating point store to memory\n-; f_load[sd]\tsingle/double load from memeory\n-; f_store[sd]\tsingle/double store to memeory\n+; f_load[sd]\tsingle/double load from memory\n+; f_store[sd]\tsingle/double store to memory\n ; f_flag\ta transfer of co-processor flags to the CPSR\n ; f_mem_r\ta transfer of a floating point register to a real reg via mem\n ; r_mem_f\tthe reverse of f_mem_r"}, {"sha": "215f320ed7946d81526df710d434f66c24a6d8bc", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -189,8 +189,8 @@\n ;; for loading 2k and 2k - 1 registers.\n ;;\n ;; The ALU pipeline is decoupled after the first cycle unless there is\n-;; a register dependency; the depency is cleared as soon as the LDM/STM\n-;; has dealt with the corresponding register.  So for exmple,\n+;; a register dependency; the dependency is cleared as soon as the LDM/STM\n+;; has dealt with the corresponding register.  So for example,\n ;;  stmia sp, {r0-r3}\n ;;  add\tr0, r0, #4\n ;; will have one fewer stalls than"}, {"sha": "15426d96f631dc2dd56e41bafb8602331cdf9973", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -14870,8 +14870,8 @@\n \n ; This pattern could also take immediate values of operand 1,\n ; since the non-NOT version of the operator is used; but this is not\n-; very useful, since in practise operand 1 is a full 32-bit value.\n-; Likewise, operand 5 is in practise either <= 2^16 or it is a register.\n+; very useful, since in practice operand 1 is a full 32-bit value.\n+; Likewise, operand 5 is in practice either <= 2^16 or it is a register.\n (define_insn \"*sync_boolcshort_internal\"\n   [(set (match_operand:SI 2 \"gpc_reg_operand\" \"=&r\")\n \t(match_operator:SI 4 \"boolean_operator\""}, {"sha": "8d816be3ef1948c1e1c8dbf25e0c57fdb70e5a6c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -1076,7 +1076,7 @@ use DWARF 2 debugging information as the default.\n @itemx --enable-targets=@var{target_list}\n Some GCC targets, e.g.@: powerpc64-linux, build bi-arch compilers.\n These are compilers that are able to generate either 64-bit or 32-bit\n-code.  Typicially, the corresponding 32-bit target, e.g.@:\n+code.  Typically, the corresponding 32-bit target, e.g.@:\n powerpc-linux for powerpc64-linux, only generates 32-bit code.  This\n option enables the 32-bit target to be a bi-arch compiler, which is\n useful when you want a bi-arch compiler that defaults to 32-bit, and"}, {"sha": "74fb82994ac3334a19552b1ec9f6200c349f942d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8ab5f5c9fa2e5161b4822e2205a17f6b5ba6528a", "patch": "@@ -666,7 +666,7 @@ value_ranges_intersect_p (value_range_t *vr0, value_range_t *vr1)\n }\n \n \n-/* Return true if VR includes the value zero, false otheriwse.  */\n+/* Return true if VR includes the value zero, false otherwise.  */\n \n static inline bool\n range_includes_zero_p (value_range_t *vr)\n@@ -2855,7 +2855,7 @@ compare_name_with_value (enum tree_code comp, tree var, tree val)\n \n \n /* Given a comparison code COMP and names N1 and N2, compare all the\n-   ranges equivalent to N1 against all the ranges equivalente to N2\n+   ranges equivalent to N1 against all the ranges equivalent to N2\n    to determine the value of N1 COMP N2.  Return the same value\n    returned by compare_ranges.  */\n \n@@ -3236,7 +3236,7 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n \t      return;\n \t    }\n \n-\t  /* The resulting set of equivalencies is the intersection of\n+\t  /* The resulting set of equivalences is the intersection of\n \t     the two sets.  */\n \t  if (vr0->equiv && vr1->equiv && vr0->equiv != vr1->equiv)\n \t    bitmap_and_into (vr0->equiv, vr1->equiv);\n@@ -3253,7 +3253,7 @@ vrp_meet (value_range_t *vr0, value_range_t *vr1)\n \t  && compare_values (vr0->max, vr1->max) == 0\n \t  && compare_values (vr0->min, vr0->max) == 0)\n \t{\n-\t  /* The resulting set of equivalencies is the intersection of\n+\t  /* The resulting set of equivalences is the intersection of\n \t     the two sets.  */\n \t  if (vr0->equiv && vr1->equiv && vr0->equiv != vr1->equiv)\n \t    bitmap_and_into (vr0->equiv, vr1->equiv);\n@@ -3485,12 +3485,12 @@ vrp_finalize (void)\n    code we can also determine that p_5 cannot be NULL and, if q_2 had\n    a non-varying range, p_5's range should also be compatible with it.\n \n-   These equivalencies are created by two expressions: ASSERT_EXPR and\n+   These equivalences are created by two expressions: ASSERT_EXPR and\n    copy operations.  Since p_5 is an assertion on p_4, and p_4 was the\n    result of another assertion, then we can use the fact that p_5 and\n    p_4 are equivalent when evaluating p_5's range.\n \n-   Together with value ranges, we also propagate these equivalencies\n+   Together with value ranges, we also propagate these equivalences\n    between names so that we can take advantage of information from\n    multiple ranges when doing final replacement.  Note that this\n    equivalency relation is transitive but not symmetric."}]}