{"sha": "3b42c566b8801956047b98983b4c9962a949634d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0MmM1NjZiODgwMTk1NjA0N2I5ODk4M2I0Yzk5NjJhOTQ5NjM0ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-21T10:14:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T10:14:06Z"}, "message": "a-cgaaso.ads, [...]: Minor reformatting\n\n2010-10-21  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cgaaso.ads, a-tags.ads, exp_ch3.adb, exp_attr.adb, exp_ch4.adb,\n\texp_ch3.ads, exp_ch7.adb, exp_ch9.adb, exp_disp.adb, exp_disp.ads,\n\texp_dist.adb, exp_util.adb, layout.adb, lib-xref.adb, lib.ads,\n\tprep.adb, prj-strt.adb, s-ststop.adb, s-taskin.ads, s-tataat.ads,\n\tsem_aggr.adb, sem_attr.adb, sem_ch12.adb, sem_ch3.adb, sem_ch4.adb,\n\tsem_ch4.ads, sem_ch5.adb, sem_res.adb, sem_util.adb, einfo.adb,\n\tg-sothco.ads, make.adb: Minor reformatting\n\nFrom-SVN: r165760", "tree": {"sha": "749378dc7fba4fc3238505b01cbf6786a46a0028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749378dc7fba4fc3238505b01cbf6786a46a0028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b42c566b8801956047b98983b4c9962a949634d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b42c566b8801956047b98983b4c9962a949634d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b42c566b8801956047b98983b4c9962a949634d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b42c566b8801956047b98983b4c9962a949634d/comments", "author": null, "committer": null, "parents": [{"sha": "deeb160439b8a02a5e00909ab29c25103a162d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deeb160439b8a02a5e00909ab29c25103a162d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deeb160439b8a02a5e00909ab29c25103a162d32"}], "stats": {"total": 171, "additions": 93, "deletions": 78}, "files": [{"sha": "556c9b5239dda1ce6b8813e39cde1d3e54d084d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -1,3 +1,13 @@\n+2010-10-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cgaaso.ads, a-tags.ads, exp_ch3.adb, exp_attr.adb, exp_ch4.adb,\n+\texp_ch3.ads, exp_ch7.adb, exp_ch9.adb, exp_disp.adb, exp_disp.ads,\n+\texp_dist.adb, exp_util.adb, layout.adb, lib-xref.adb, lib.ads,\n+\tprep.adb, prj-strt.adb, s-ststop.adb, s-taskin.ads, s-tataat.ads,\n+\tsem_aggr.adb, sem_attr.adb, sem_ch12.adb, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch4.ads, sem_ch5.adb, sem_res.adb, sem_util.adb, einfo.adb,\n+\tg-sothco.ads, make.adb: Minor reformatting\n+\n 2010-10-21  Vincent Celier  <celier@adacore.com>\n \n \t* vms_data.ads: Add new qualifiers /SRC_INFO= and"}, {"sha": "f44c2207a8171c79e6a53e290c0a711ed71e867d", "filename": "gcc/ada/a-cgaaso.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fa-cgaaso.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fa-cgaaso.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cgaaso.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n \n --  Allows an anonymous array (or array-like container) to be sorted. Generic\n --  formal Less returns the result of comparing the elements designated by the\n---  indices, and generic formal Swap exchanges the designated elements.\n+--  indexes, and generic formal Swap exchanges the designated elements.\n \n generic\n    type Index_Type is (<>);"}, {"sha": "42063e26e7ea18482eea040eecfa5921b6ada105", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -120,7 +120,7 @@ private\n    --         +------------------+       +-------------------+   +------------+\n    --         |table of          |\n    --         :   entry          :\n-   --         |      indices     |\n+   --         |      indexes     |\n    --         +------------------+\n \n    --  Structure of the GNAT Secondary Dispatch Table"}, {"sha": "ca61c201207cadc5d97e3d7ad0a800c448ee6d12", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -7328,7 +7328,7 @@ package body Einfo is\n                  (\"   Component Type    \", Component_Type (Id));\n                Write_Eol;\n                Write_Str (Prefix);\n-               Write_Str (\"   Indices \");\n+               Write_Str (\"   Indexes \");\n \n                Index := First_Index (Id);\n                while Present (Index) loop"}, {"sha": "6d676acbca90d2c718612892d8d3a95a99e3f71c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -84,7 +84,7 @@ package body Exp_Attr is\n       Check : Boolean);\n    --  The body for a stream subprogram may be generated outside of the scope\n    --  of the type. If the type is fully private, it may depend on the full\n-   --  view of other types (e.g. indices) that are currently private as well.\n+   --  view of other types (e.g. indexes) that are currently private as well.\n    --  We install the declarations of the package in which the type is declared\n    --  before compiling the body in what is its proper environment. The Check\n    --  parameter indicates if checks are to be suppressed for the stream body."}, {"sha": "8a79fb1643b1483c2bfc52b87636a032f625fc38", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -560,7 +560,7 @@ package body Exp_Ch3 is\n \n       function Init_Component return List_Id;\n       --  Create one statement to initialize one array component, designated\n-      --  by a full set of indices.\n+      --  by a full set of indexes.\n \n       function Init_One_Dimension (N : Int) return List_Id;\n       --  Create loop to initialize one dimension of the array. The single\n@@ -3540,7 +3540,7 @@ package body Exp_Ch3 is\n       Stats : List_Id;\n \n    begin\n-      --  Build declarations for indices\n+      --  Build declarations for indexes\n \n       Decls := New_List;\n \n@@ -3568,7 +3568,7 @@ package body Exp_Ch3 is\n                Right_Opnd => New_Occurrence_Of (Left_Lo, Loc)),\n           Then_Statements => New_List (Make_Simple_Return_Statement (Loc))));\n \n-      --  Build initializations for indices\n+      --  Build initializations for indexes\n \n       declare\n          F_Init : constant List_Id := New_List;"}, {"sha": "beb74b562bbc36f1ba312c565fa2bb9a1644d836", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,7 +77,7 @@ package Exp_Ch3 is\n    --  enable the use of discriminals. Enclos_Type is the enclosing type when\n    --  initializing a component in an outer init proc, and it is used for\n    --  various expansion cases including the case where Typ is a task type\n-   --  which is an array component, the indices of the enclosing type are\n+   --  which is an array component, the indexes of the enclosing type are\n    --  used to build the string that identifies each task at runtime.\n    --\n    --  Discr_Map is used to replace discriminants by their discriminals in"}, {"sha": "361d854c45c9fac94727544c86930c2aba49e0fa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -1420,7 +1420,7 @@ package body Exp_Ch4 is\n \n       function Component_Equality (Typ : Entity_Id) return Node_Id;\n       --  Create one statement to compare corresponding components, designated\n-      --  by a full set of indices.\n+      --  by a full set of indexes.\n \n       function Get_Arg_Type (N : Node_Id) return Entity_Id;\n       --  Given one of the arguments, computes the appropriate type to be used\n@@ -1442,7 +1442,7 @@ package body Exp_Ch4 is\n       --       end loop;\n       --    end;\n       --\n-      --  If both indices are constrained and identical, the procedure\n+      --  If both indexes are constrained and identical, the procedure\n       --  returns a simpler loop:\n       --\n       --      for An in A'Range (N) loop\n@@ -1616,7 +1616,7 @@ package body Exp_Ch4 is\n \n          if Need_Separate_Indexes then\n \n-            --  Generate guard for loop, followed by increments of indices\n+            --  Generate guard for loop, followed by increments of indexes\n \n             Append_To (Stm_List,\n                Make_Exit_Statement (Loc,"}, {"sha": "ac5ad0ff8e28f306869c5dcd7c6f1729785b2664", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -2537,7 +2537,7 @@ package body Exp_Ch7 is\n \n       function One_Component return List_Id;\n       --  Create one statement to initialize/adjust/finalize one array\n-      --  component, designated by a full set of indices.\n+      --  component, designated by a full set of indexes.\n \n       function One_Dimension (N : Int) return List_Id;\n       --  Create loop to deal with one dimension of the array. The single"}, {"sha": "ec1dd818610d9a74eff993a61d494581f017c651", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -316,7 +316,7 @@ package body Exp_Ch9 is\n       Lo   : Node_Id;\n       Ttyp : Entity_Id;\n       Cap  : Boolean) return Node_Id;\n-   --  Compute (Hi - Lo) for two entry family indices. Hi is the index in\n+   --  Compute (Hi - Lo) for two entry family indexes. Hi is the index in\n    --  an accept statement, or the upper bound in the discrete subtype of\n    --  an entry declaration. Lo is the corresponding lower bound. Ttyp is\n    --  the concurrent type of the entry. If Cap is true, the result is\n@@ -2485,7 +2485,7 @@ package body Exp_Ch9 is\n              Left_Opnd => Make_Identifier (Loc, Name_uE),\n              Right_Opnd => Siz);\n \n-         --  Map entry queue indices in the range of the current family\n+         --  Map entry queue indexes in the range of the current family\n          --  into the current index, that designates the entry body.\n \n          if No (If_St) then"}, {"sha": "651734f141eb83c74cd8d45c4ceeda8ba1cc87f1", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -1421,7 +1421,7 @@ package body Exp_Disp is\n            and then Is_Class_Wide_Type (Formal_Typ)\n          then\n             --  No need to displace the pointer if the type of the actual\n-            --  coindices with the type of the formal.\n+            --  coincides with the type of the formal.\n \n             if Actual_Typ = Formal_Typ then\n                null;"}, {"sha": "d2dd7760dda281c546a829d94737ea31c58d423e", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -340,7 +340,7 @@ package Exp_Disp is\n    --  Ada 2005 (AI-345): Create and populate the auxiliary table in the TSD\n    --  of Typ used for dispatching in asynchronous, conditional and timed\n    --  selects. Generate code to set the primitive operation kinds and entry\n-   --  indices of primitive operations and primitive wrappers.\n+   --  indexes of primitive operations and primitive wrappers.\n \n    function Make_Tags (Typ : Entity_Id) return List_Id;\n    --  Generate the entities associated with the primary and secondary tags of"}, {"sha": "ea105f0437eeb2cffcc6e8280a5c00594a840e54", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -8207,7 +8207,7 @@ package body Exp_Dist is\n             Arry : Entity_Id;\n             --  For 'Range and Etype\n \n-            Indices : List_Id;\n+            Indexes : List_Id;\n             --  For the construction of the innermost element expression\n \n             with procedure Add_Process_Element\n@@ -8223,7 +8223,7 @@ package body Exp_Dist is\n             Depth   : Pos       := 1);\n          --  Build nested loop statements that iterate over the elements of an\n          --  array Arry. The statement(s) built by Add_Process_Element are\n-         --  executed for each element; Indices is the list of indices to be\n+         --  executed for each element; Indexes is the list of indexes to be\n          --  used in the construction of the indexed component that denotes the\n          --  current element. Subprogram is the entity for the subprogram for\n          --  which this iterator is generated. The generated statements are\n@@ -8992,7 +8992,7 @@ package body Exp_Dist is\n                     new Append_Array_Traversal (\n                       Subprogram => Fnam,\n                       Arry       => Res,\n-                      Indices    => New_List,\n+                      Indexes    => New_List,\n                       Add_Process_Element => FA_Ary_Add_Process_Element);\n \n                   Res_Subtype_Indication : Node_Id :=\n@@ -9868,7 +9868,7 @@ package body Exp_Dist is\n                     new Append_Array_Traversal (\n                       Subprogram => Fnam,\n                       Arry       => Expr_Parameter,\n-                      Indices    => New_List,\n+                      Indexes    => New_List,\n                       Add_Process_Element => TA_Ary_Add_Process_Element);\n \n                   Index : Node_Id;\n@@ -10850,7 +10850,7 @@ package body Exp_Dist is\n                   Element_Expr : constant Node_Id :=\n                                    Make_Indexed_Component (Loc,\n                                      New_Occurrence_Of (Arry, Loc),\n-                                     Indices);\n+                                     Indexes);\n                begin\n                   Set_Etype (Element_Expr, Component_Type (Typ));\n                   Add_Process_Element (Stmts,\n@@ -10862,7 +10862,7 @@ package body Exp_Dist is\n                return;\n             end if;\n \n-            Append_To (Indices,\n+            Append_To (Indexes,\n               Make_Identifier (Loc, New_External_Name ('L', Depth)));\n \n             if not Constrained or else Depth > 1 then"}, {"sha": "e919bd6d48764333e178a7620e066e99be3c549f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -340,9 +340,9 @@ package body Exp_Util is\n    --  local to the init proc for the array type, and is called for each one\n    --  of the components. The constructed image has the form of an indexed\n    --  component, whose prefix is the outer variable of the array type.\n-   --  The n-dimensional array type has known indices Index, Index2...\n+   --  The n-dimensional array type has known indexes Index, Index2...\n    --  Id_Ref is an indexed component form created by the enclosing init proc.\n-   --  Its successive indices are Val1, Val2, ... which are the loop variables\n+   --  Its successive indexes are Val1, Val2, ... which are the loop variables\n    --  in the loops that call the individual task init proc on each component.\n \n    --  The generated function has the following structure:\n@@ -404,7 +404,7 @@ package body Exp_Util is\n       --  String to hold result\n \n       Val : Node_Id;\n-      --  Value of successive indices\n+      --  Value of successive indexes\n \n       Sum : Node_Id;\n       --  Expression to compute total size of string"}, {"sha": "44a7b752215b40a6a6d5dc7fc5f4c42cff03d048", "filename": "gcc/ada/g-sothco.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -377,7 +377,7 @@ package GNAT.Sockets.Thin_Common is\n \n    Read_End  : constant := 0;\n    Write_End : constant := 1;\n-   --  Indices into an Fd_Pair value providing access to each of the connected\n+   --  Indexes into an Fd_Pair value providing access to each of the connected\n    --  file descriptors.\n \n    function Inet_Pton"}, {"sha": "eb0616fa489042b9f78fb53f432c1007bdb6bb9b", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -727,7 +727,7 @@ package body Layout is\n          Size := (Dynamic, Expr_From_SO_Ref (Loc, Component_Size (E)));\n       end if;\n \n-      --  Loop through indices\n+      --  Loop through indexes\n \n       Indx := First_Index (E);\n       while Present (Indx) loop\n@@ -1059,7 +1059,7 @@ package body Layout is\n          Size := (Dynamic, Expr_From_SO_Ref (Loc, Component_Size (E)));\n       end if;\n \n-      --  Loop to process array indices\n+      --  Loop to process array indexes\n \n       Indx := First_Index (E);\n       while Present (Indx) loop"}, {"sha": "dbfbe45480e8e1b0c811f1c6fb3c9d6809aa6e6a", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -2163,8 +2163,8 @@ package body Lib.Xref is\n                            end loop;\n                         end;\n \n-                     --  For array types, list index types as well.\n-                     --  (This is not C, indices have distinct types).\n+                     --  For array types, list index types as well. (This is\n+                     --  not C, indexes have distinct types).\n \n                      elsif Is_Array_Type (XE.Ent) then\n                         declare"}, {"sha": "fa6fe0c1900adfec2ff6e46ab898860653a90fb4", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -824,7 +824,7 @@ private\n       With_Node   : Node_Id;\n    end record;\n \n-   --  The Load_Stack table contains a list of unit numbers (indices into the\n+   --  The Load_Stack table contains a list of unit numbers (indexes into the\n    --  unit table) of units being loaded on a single dependency chain, and a\n    --  flag to indicate whether this unit is loaded through a limited_with\n    --  clause. The First entry is the main unit. The second entry, if present"}, {"sha": "626591f413be7b1f3801f31b8b5c7656e2a56855", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -799,8 +799,8 @@ package body Make is\n    type Temp_Path_Names is array (Positive range <>) of Path_Name_Type;\n    type Temp_Path_Ptr is access Temp_Path_Names;\n \n-   type Free_File_Indices is array (Positive range <>) of Positive;\n-   type Free_Indices_Ptr is access Free_File_Indices;\n+   type Free_File_Indexes is array (Positive range <>) of Positive;\n+   type Free_Indexes_Ptr is access Free_File_Indexes;\n \n    type Project_Compilation_Data is record\n       Mapping_File_Names : Temp_Path_Ptr;\n@@ -811,11 +811,11 @@ package body Make is\n       Last_Mapping_File_Names : Natural;\n       --  Index of the last mapping file created for this project\n \n-      Free_Mapping_File_Indices : Free_Indices_Ptr;\n-      --  Indices in Mapping_File_Names of the mapping file names that can be\n+      Free_Mapping_File_Indexes : Free_Indexes_Ptr;\n+      --  Indexes in Mapping_File_Names of the mapping file names that can be\n       --  reused for subsequent compilations.\n \n-      Last_Free_Indices : Natural;\n+      Last_Free_Indexes : Natural;\n       --  Number of mapping files that can be reused\n    end record;\n    --  Information necessary when compiling a project\n@@ -2669,10 +2669,10 @@ package body Make is\n                      Comp_Data :=\n                        Project_Compilation_Htable.Get\n                          (Project_Compilation, Project);\n-                     Comp_Data.Last_Free_Indices :=\n-                       Comp_Data.Last_Free_Indices + 1;\n-                     Comp_Data.Free_Mapping_File_Indices\n-                       (Comp_Data.Last_Free_Indices) :=\n+                     Comp_Data.Last_Free_Indexes :=\n+                       Comp_Data.Last_Free_Indexes + 1;\n+                     Comp_Data.Free_Mapping_File_Indexes\n+                       (Comp_Data.Last_Free_Indexes) :=\n                          Running_Compile (J).Mapping_File;\n                   end if;\n \n@@ -3182,9 +3182,9 @@ package body Make is\n \n          --  If there is a mapping file ready to be reused, reuse it\n \n-         if Data.Last_Free_Indices > 0 then\n-            Mfile := Data.Free_Mapping_File_Indices (Data.Last_Free_Indices);\n-            Data.Last_Free_Indices := Data.Last_Free_Indices - 1;\n+         if Data.Last_Free_Indexes > 0 then\n+            Mfile := Data.Free_Mapping_File_Indexes (Data.Last_Free_Indexes);\n+            Data.Last_Free_Indexes := Data.Last_Free_Indexes - 1;\n \n          --  Otherwise, create and initialize a new one\n \n@@ -5338,9 +5338,9 @@ package body Make is\n               (Mapping_File_Names        => new Temp_Path_Names\n                                               (1 .. Saved_Maximum_Processes),\n                Last_Mapping_File_Names   => 0,\n-               Free_Mapping_File_Indices => new Free_File_Indices\n+               Free_Mapping_File_Indexes => new Free_File_Indexes\n                                               (1 .. Saved_Maximum_Processes),\n-               Last_Free_Indices         => 0);\n+               Last_Free_Indexes         => 0);\n \n             Project_Compilation_Htable.Set\n               (Project_Compilation, Proj.Project, Data);\n@@ -5351,9 +5351,9 @@ package body Make is\n            (Mapping_File_Names        => new Temp_Path_Names\n                                            (1 .. Saved_Maximum_Processes),\n             Last_Mapping_File_Names   => 0,\n-            Free_Mapping_File_Indices => new Free_File_Indices\n+            Free_Mapping_File_Indexes => new Free_File_Indexes\n                                            (1 .. Saved_Maximum_Processes),\n-            Last_Free_Indices         => 0);\n+            Last_Free_Indexes         => 0);\n \n          Project_Compilation_Htable.Set\n            (Project_Compilation, No_Project, Data);"}, {"sha": "2b0e1378bcec88a3b4eefa56c040e137b6109bd5", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -714,8 +714,8 @@ package body Prep is\n    procedure List_Symbols (Foreword : String) is\n       Order : array (0 ..  Integer (Symbol_Table.Last (Mapping)))\n                  of Symbol_Id;\n-      --  After alphabetical sorting, this array stores the indices of\n-      --  the symbols in the order they are displayed.\n+      --  After alphabetical sorting, this array stores the indexes of the\n+      --  symbols in the order they are displayed.\n \n       function Lt (Op1, Op2 : Natural) return Boolean;\n       --  Comparison routine for sort call\n@@ -1034,8 +1034,8 @@ package body Prep is\n       Modified            : Boolean := False;\n \n       procedure Output (From, To : Source_Ptr);\n-      --  Output the characters with indices From .. To in the buffer\n-      --  to the output file.\n+      --  Output the characters with indexes From .. To in the buffer to the\n+      --  output file.\n \n       procedure Output_Line (From, To : Source_Ptr);\n       --  Output a line or the end of a line from the buffer to the output"}, {"sha": "271a913e762063f3df79df9164d7d5e494ada658", "filename": "gcc/ada/prj-strt.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fprj-strt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fprj-strt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-strt.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -74,8 +74,8 @@ package body Prj.Strt is\n         Table_Initial        => 10,\n         Table_Increment      => 100,\n         Table_Name           => \"Prj.Strt.Choice_Lasts\");\n-   --  Used to store the indices of the choices in table Choices,\n-   --  to distinguish nested case constructions.\n+   --  Used to store the indexes of the choices in table Choices, to\n+   --  distinguish nested case constructions.\n \n    Choice_First : Choice_Node_Id := 0;\n    --  Index in table Choices of the first case label of the current"}, {"sha": "d9f8d0f8ed9ca6ae8974118ec726e54fe31d0719", "filename": "gcc/ada/s-ststop.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-ststop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-ststop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2008-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -216,7 +216,7 @@ package body System.Strings.Stream_Ops is\n                Rem_Size : constant Natural :=\n                             Block_Size mod Default_Block_Size;\n \n-               --  String indices\n+               --  String indexes\n \n                Low  : Positive := Item'First;\n                High : Positive := Low + C_In_Default_Block - 1;\n@@ -338,7 +338,7 @@ package body System.Strings.Stream_Ops is\n                Rem_Size : constant Natural :=\n                             Block_Size mod Default_Block_Size;\n \n-               --  String indices\n+               --  String indexes\n \n                Low  : Positive := Item'First;\n                High : Positive := Low + C_In_Default_Block - 1;"}, {"sha": "4841d0b8b1dd3f122b6037819096a15f81ca7218", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -870,7 +870,7 @@ package System.Tasking is\n \n    type Direct_Index is range 0 .. Parameters.Default_Attribute_Count;\n    subtype Direct_Index_Range is Direct_Index range 1 .. Direct_Index'Last;\n-   --  Attributes with indices in this range are stored directly in the task\n+   --  Attributes with indexes in this range are stored directly in the task\n    --  control block. Such attributes must be Address-sized. Other attributes\n    --  will be held in dynamically allocated records chained off of the task\n    --  control block."}, {"sha": "c2af68c6a2137a06b3b258d13b6437a939db96bf", "filename": "gcc/ada/s-tataat.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-tataat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fs-tataat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2008, AdaCore                     --\n+--                     Copyright (C) 1995-2010, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -107,7 +107,7 @@ package System.Tasking.Task_Attributes is\n    --  Ensure that the designated object is always strictly enough aligned.\n \n    In_Use : Direct_Index_Vector := 0;\n-   --  Set True for direct indices that are already used (True??? type???)\n+   --  Set True for direct indexes that are already used (True??? type???)\n \n    All_Attributes : Access_Instance;\n    --  A linked list of all indirectly access attributes, which includes all"}, {"sha": "b42f1c48302f688380a03f6a1d5d060541ed6bf8", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -636,7 +636,7 @@ package body Sem_Aggr is\n       Set_Parent (Index_Constraints, N);\n       Collect_Aggr_Bounds (N, 1);\n \n-      --  Build the list of constrained indices of our aggregate itype\n+      --  Build the list of constrained indexes of our aggregate itype\n \n       for J in 1 .. Aggr_Dimension loop\n          Create_Index : declare\n@@ -1262,7 +1262,7 @@ package body Sem_Aggr is\n             Error_Msg_N (\"\\Constraint_Error will be raised at run time?\", AH);\n \n             --  You need to set AH to BH or else in the case of enumerations\n-            --  indices we will not be able to resolve the aggregate bounds.\n+            --  indexes we will not be able to resolve the aggregate bounds.\n \n             AH := Duplicate_Subexpr (BH);\n          end if;"}, {"sha": "8722a784dc54a54d6de3887361a73afd31a29a79", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -7866,9 +7866,9 @@ package body Sem_Attr is\n    --  Start of processing for Resolve_Attribute\n \n    begin\n-      --  If error during analysis, no point in continuing, except for\n-      --  array types, where we get  better recovery by using unconstrained\n-      --  indices than nothing at all (see Check_Array_Type).\n+      --  If error during analysis, no point in continuing, except for array\n+      --  types, where we get better recovery by using unconstrained indexes\n+      --  than nothing at all (see Check_Array_Type).\n \n       if Error_Posted (N)\n         and then Attr_Id /= Attribute_First"}, {"sha": "f5b313a7aa5902df71a6962f70f2249a18a810bf", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -9456,7 +9456,7 @@ package body Sem_Ch12 is\n          I2 := First_Index (Act_T);\n          for J in 1 .. Formal_Dimensions loop\n \n-            --  If the indices of the actual were given by a subtype_mark,\n+            --  If the indexes of the actual were given by a subtype_mark,\n             --  the index was transformed into a range attribute. Retrieve\n             --  the original type mark for checking.\n "}, {"sha": "8b14a09c6662aeb5da95c7dfce61145fc7f4d9ef", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -4588,11 +4588,11 @@ package body Sem_Ch3 is\n          Error_Msg_N (\"missing index definition in array type declaration\", T);\n \n          declare\n-            Indices : constant List_Id :=\n+            Indexes : constant List_Id :=\n                         New_List (New_Occurrence_Of (Any_Id, Sloc (T)));\n          begin\n-            Set_Discrete_Subtype_Definitions (Def, Indices);\n-            Set_First_Index (T, First (Indices));\n+            Set_Discrete_Subtype_Definitions (Def, Indexes);\n+            Set_First_Index (T, First (Indexes));\n             return;\n          end;\n       end if;\n@@ -4608,7 +4608,7 @@ package body Sem_Ch3 is\n       end if;\n \n       --  In the case of an unconstrained array the parser has already verified\n-      --  that all the indices are unconstrained but we still need to make sure\n+      --  that all the indexes are unconstrained but we still need to make sure\n       --  that the element type is constrained.\n \n       if Is_Indefinite_Subtype (Element_Type) then\n@@ -10423,7 +10423,7 @@ package body Sem_Ch3 is\n \n       function Build_Constrained_Array_Type\n         (Old_Type : Entity_Id) return Entity_Id;\n-      --  If Old_Type is an array type, one of whose indices is constrained\n+      --  If Old_Type is an array type, one of whose indexes is constrained\n       --  by a discriminant, build an Itype whose constraint replaces the\n       --  discriminant with its value in the constraint.\n "}, {"sha": "2c4bbe79037894958d795f589c23c2cd8ab8413e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -2877,6 +2877,11 @@ package body Sem_Ch4 is\n                      if All_Errors_Mode then\n                         Error_Msg_Sloc := Sloc (Nam);\n \n+                        if Etype (Formal) = Any_Type then\n+                           Error_Msg_N\n+                             (\"there is no legal actual parameter\", Actual);\n+                        end if;\n+\n                         if Is_Overloadable (Nam)\n                           and then Present (Alias (Nam))\n                           and then not Comes_From_Source (Nam)\n@@ -6375,8 +6380,8 @@ package body Sem_Ch4 is\n \n          if Present (Arr_Type) then\n \n-            --  Verify that the actuals (excluding the object)\n-            --  match the types of the indices.\n+            --  Verify that the actuals (excluding the object) match the types\n+            --  of the indexes.\n \n             declare\n                Actual : Node_Id;"}, {"sha": "4f9554589ac429663d5833329c6683e040071dd2", "filename": "gcc/ada/sem_ch4.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.ads?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -61,6 +61,6 @@ package Sem_Ch4  is\n    --    c) A conversion\n    --    d) A slice\n    --  The resolution of the construct requires some semantic information\n-   --  on the prefix and the indices.\n+   --  on the prefix and the indexes.\n \n end Sem_Ch4;"}, {"sha": "64db5206d0d8998d8f606979f5199c407a6b74c5", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -643,7 +643,7 @@ package body Sem_Ch5 is\n             or else Nkind (N) /= N_Block_Statement)\n       then\n          --  Assignment verifies that the length of the Lsh and Rhs are equal,\n-         --  but of course the indices do not have to match. If the right-hand\n+         --  but of course the indexes do not have to match. If the right-hand\n          --  side is a type conversion to an unconstrained type, a length check\n          --  is performed on the expression itself during expansion. In rare\n          --  cases, the redundant length check is computed on an index type"}, {"sha": "b30f46f866196e2b2f6488ff83dbf4e14ab81050", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -5171,7 +5171,7 @@ package body Sem_Res is\n                      --  An Ada 2005 prefixed call to a primitive operation\n                      --  whose first parameter is the prefix. This prefix was\n                      --  prepended to the parameter list, which is actually a\n-                     --  list of indices. Remove the prefix in order to build\n+                     --  list of indexes. Remove the prefix in order to build\n                      --  the proper indexed component.\n \n                      Index_Node :="}, {"sha": "ba4d37df723cf8f6c9f2219d9c6d1fdd8bd8c7dd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b42c566b8801956047b98983b4c9962a949634d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3b42c566b8801956047b98983b4c9962a949634d", "patch": "@@ -2367,7 +2367,7 @@ package body Sem_Util is\n               and then Denotes_Same_Object (Hi1, Hi2);\n          end;\n \n-         --  Literals will appear as indices. Isn't this where we should check\n+         --  Literals will appear as indexes. Isn't this where we should check\n          --  Known_At_Compile_Time at least if we are generating warnings ???\n \n       elsif Nkind (A1) = N_Integer_Literal then"}]}