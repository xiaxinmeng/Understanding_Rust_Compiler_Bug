{"sha": "4326c60500a68dd36e493f1a26917716f2b02911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyNmM2MDUwMGE2OGRkMzZlNDkzZjFhMjY5MTc3MTZmMmIwMjkxMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:41:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:41:32Z"}, "message": "(PRINT_OPERAND): Turned off: use default.\n\n(ASM_OUTPUT_{FLOAT,DOUBLE}_OPERAND): Defined.\n(SGS_NO_LI,STRUCTURE_SIZE_BOUNDARY,IMMEDIATE_PREFIX): Defined.\n(NEED_PROBE): Defined instead of HAVE_probe and gen_probe.\n(FUNCTION_{PRO,EPI}LOGUE): Do not access FPA registers.\n\nFrom-SVN: r13647", "tree": {"sha": "9464ded499a08fb53fbcdf1d57bb9ba87eb7699a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9464ded499a08fb53fbcdf1d57bb9ba87eb7699a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4326c60500a68dd36e493f1a26917716f2b02911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4326c60500a68dd36e493f1a26917716f2b02911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4326c60500a68dd36e493f1a26917716f2b02911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4326c60500a68dd36e493f1a26917716f2b02911/comments", "author": null, "committer": null, "parents": [{"sha": "cbd9173403528e13cb4bcc60122bb420dab60a9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd9173403528e13cb4bcc60122bb420dab60a9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd9173403528e13cb4bcc60122bb420dab60a9b"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "441b285b4eec99580a1c11ca3045ed919356b4fc", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4326c60500a68dd36e493f1a26917716f2b02911/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4326c60500a68dd36e493f1a26917716f2b02911/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=4326c60500a68dd36e493f1a26917716f2b02911", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler;\n    Charles River Data Systems UNiverse/32.\n-   Copyright (C) 1987, 1993, 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 1994, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Gary E. Miller (Gary_Edmunds_Miller@cup.portal.com)\n \n This file is part of GNU CC.\n@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #define MOTOROLA\t\t/* Use Motorola syntax rather than \"MIT\" */\n #define SGS\t\t\t/* Uses SGS assembler */\n #define SGS_SWITCH_TABLES\t/* Different switch table handling */\n+#define SGS_NO_LI\t\t/* Suppress jump table label usage */\n #define CRDS\t\t\t/* Charles River Data Systems assembler */\n \n #include \"m68k/m68k.h\"\n@@ -31,7 +32,8 @@ Boston, MA 02111-1307, USA.  */\n    aligned such that we can correctly extract bitfields from them.\n    Someone should check whether the usual compiler on the crds machine\n    provides the equivalent behavior of STRUCTURE_SIZE_BOUNDARY.  */\n-#error This does not define STRUCTURE_SIZE_BOUNDARY\n+/* Set to 16 because all other m68k targets have it so */\n+#define STRUCTURE_SIZE_BOUNDARY 16\n \n /* See m68k.h.  0 means 680[01]0 with no 68881.  */\n \n@@ -75,8 +77,13 @@ Boston, MA 02111-1307, USA.  */\n \n /* UNOS need stack probe :-( */\n \n+#if 0\n #define HAVE_probe 1\n #define gen_probe()  gen_rtx(ASM_INPUT, VOIDmode, \"tstb -2048(sp)\\t;probe\\n\")\n+#else\n+#undef NEED_PROBE\n+#define NEED_PROBE (-2048)\n+#endif\n \n /* use memcpy, memset instead of bcopy, etc. */\n \n@@ -146,6 +153,11 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF \n #define ASM_APP_OFF \";#NO_APP\\n\"\n \n+/* The prefix for immediate operands.  */\n+\n+#undef IMMEDIATE_PREFIX\n+#define IMMEDIATE_PREFIX \"$\"\n+\n /* This is how to output an assembler line defining a `double' constant.  */\n \n #undef ASM_OUTPUT_DOUBLE\n@@ -223,6 +235,7 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n }\n \n \n+#if 0\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.\n@@ -300,6 +313,7 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       ASM_OUTPUT_LONG_DOUBLE_OPERAND (FILE, r); }\t\t\t\\\n   else { putc ('$', FILE); output_addr_const (FILE, X); }}\n+#endif\n \f\n /* Note that this contains a kludge that knows that the only reason\n    we have an address (plus (label_ref...) (reg...))\n@@ -490,10 +504,6 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n \t  fprintf (FILE, \"\\tadd.l #%d,sp\\n\", - (fsize + 4));          \\\n \t}\t\t\t\t\t\t\t      \\\n     }\t\t\t\t\t\t\t\t      \\\n-  for (regno = 24; regno < 56; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      fprintf(FILE, \"\\tfpmoved %s, sp@-\\n\",\t\t\t\\\n-\t      reg_names[regno]);\t\t\t\t\\\n   for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n        mask |= 1 << (regno - 16);\t\t\t\t\\\n@@ -535,11 +545,6 @@ do {  int i;\t\t\t\t\t\t\t\t\\\n   int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n   int big = 0;\t\t\t\t\t\t\t\\\n   nregs = 0;  fmask = 0; fpoffset = 0;\t\t\t\t\\\n-  for (regno = 24 ; regno < 56 ; regno++)\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      nregs++;\t\t\t\t\t\t\t\\\n-  fpoffset = nregs*8;\t\t\t\t\t\t\\\n-  nregs = 0;\t\t\t\t\t\t\t\\\n   for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       { nregs++; fmask |= 1 << (23 - regno); }\t\t\t\\"}]}