{"sha": "3edbcdbead288664d874dd3a2e0d8ada4c565af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkYmNkYmVhZDI4ODY2NGQ4NzRkZDNhMmUwZDhhZGE0YzU2NWFmMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-04T12:41:14Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-04T12:41:14Z"}, "message": "Fix divergence in indirect profiling (PR gcov-profile/84107).\n\n2018-10-04  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/84107\n\t* tree-profile.c (init_ic_make_global_vars):\n\tRemove ic_void_ptr_var and ic_gcov_type_ptr_var.\n\tCome up with new ic_tuple* variables.  Emit\n\t__gcov_indirect_call{,_topn} variables.\n\t(gimple_gen_ic_profiler): Access the variable\n\tand emit gimple.\n\t(gimple_gen_ic_func_profiler): Access\n\t__gcov_indirect_call.callee field.\n\t(gimple_init_gcov_profiler): Use ptr_type_node.\n\t* value-prof.c (gimple_ic): Use ptr_type_node.\n2018-10-04  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/84107\n\t* libgcov-profiler.c (__gcov_indirect_call):\n\tChange type to indirect_call_tuple.\n\t(struct indirect_call_tuple): New struct.\n\t(__gcov_indirect_call_topn_profiler): Change type.\n\t(__gcov_indirect_call_profiler_v2): Use the new\n\tvariables.\n\t* libgcov.h (struct indirect_call_tuple): New struct\n\tdefinition.\n\nFrom-SVN: r264840", "tree": {"sha": "e312a412289bc88a481440b075cfa23d7989e321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e312a412289bc88a481440b075cfa23d7989e321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3edbcdbead288664d874dd3a2e0d8ada4c565af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edbcdbead288664d874dd3a2e0d8ada4c565af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3edbcdbead288664d874dd3a2e0d8ada4c565af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edbcdbead288664d874dd3a2e0d8ada4c565af0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "668f8d452697359a150bd651149c75109f66eb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668f8d452697359a150bd651149c75109f66eb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668f8d452697359a150bd651149c75109f66eb06"}], "stats": {"total": 151, "additions": 92, "deletions": 59}, "files": [{"sha": "fdae3d1909ae2c20345caef45913c4dd9516fad6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -1,3 +1,17 @@\n+2018-10-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/84107\n+\t* tree-profile.c (init_ic_make_global_vars):\n+\tRemove ic_void_ptr_var and ic_gcov_type_ptr_var.\n+\tCome up with new ic_tuple* variables.  Emit\n+\t__gcov_indirect_call{,_topn} variables.\n+\t(gimple_gen_ic_profiler): Access the variable\n+\tand emit gimple.\n+\t(gimple_gen_ic_func_profiler): Access\n+\t__gcov_indirect_call.callee field.\n+\t(gimple_init_gcov_profiler): Use ptr_type_node.\n+\t* value-prof.c (gimple_ic): Use ptr_type_node.\n+\n 2018-10-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/85787"}, {"sha": "d8f2a3b1ba40b83d949a02afe57d51ce6645a48e", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -53,6 +53,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"tree-pretty-print.h\"\n+#include \"langhooks.h\"\n+#include \"stor-layout.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;\n@@ -64,9 +66,9 @@ static GTY(()) tree tree_ior_profiler_fn;\n static GTY(()) tree tree_time_profiler_counter;\n \n \n-static GTY(()) tree ic_void_ptr_var;\n-static GTY(()) tree ic_gcov_type_ptr_var;\n-static GTY(()) tree ptr_void;\n+static GTY(()) tree ic_tuple_var;\n+static GTY(()) tree ic_tuple_counters_field;\n+static GTY(()) tree ic_tuple_callee_field;\n \n /* Do initialization work for the edge profiler.  */\n \n@@ -80,39 +82,35 @@ init_ic_make_global_vars (void)\n {\n   tree gcov_type_ptr;\n \n-  ptr_void = build_pointer_type (void_type_node);\n+  gcov_type_ptr = build_pointer_type (get_gcov_type ());\n \n-  ic_void_ptr_var\n-    = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t  get_identifier (\n-\t\t\t  (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n-\t\t\t   \"__gcov_indirect_call_topn_callee\" :\n-\t\t\t   \"__gcov_indirect_call_callee\")),\n-\t\t  ptr_void);\n-  TREE_PUBLIC (ic_void_ptr_var) = 1;\n-  DECL_EXTERNAL (ic_void_ptr_var) = 1;\n-  TREE_STATIC (ic_void_ptr_var) = 1;\n-  DECL_ARTIFICIAL (ic_void_ptr_var) = 1;\n-  DECL_INITIAL (ic_void_ptr_var) = NULL;\n-  if (targetm.have_tls)\n-    set_decl_tls_model (ic_void_ptr_var, decl_default_tls_model (ic_void_ptr_var));\n+  tree tuple_type = lang_hooks.types.make_type (RECORD_TYPE);\n \n-  gcov_type_ptr = build_pointer_type (get_gcov_type ());\n+  /* callee */\n+  ic_tuple_callee_field = build_decl (BUILTINS_LOCATION, FIELD_DECL, NULL_TREE,\n+\t\t\t\t      ptr_type_node);\n \n-  ic_gcov_type_ptr_var\n+  /* counters */\n+  ic_tuple_counters_field = build_decl (BUILTINS_LOCATION, FIELD_DECL,\n+\t\t\t\t\tNULL_TREE, gcov_type_ptr);\n+  DECL_CHAIN (ic_tuple_counters_field) = ic_tuple_callee_field;\n+\n+  finish_builtin_struct (tuple_type, \"indirect_call_tuple\",\n+\t\t\t ic_tuple_counters_field, NULL_TREE);\n+\n+  ic_tuple_var\n     = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n \t\t  get_identifier (\n \t\t\t  (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n-\t\t\t   \"__gcov_indirect_call_topn_counters\" :\n-\t\t\t   \"__gcov_indirect_call_counters\")),\n-\t\t  gcov_type_ptr);\n-  TREE_PUBLIC (ic_gcov_type_ptr_var) = 1;\n-  DECL_EXTERNAL (ic_gcov_type_ptr_var) = 1;\n-  TREE_STATIC (ic_gcov_type_ptr_var) = 1;\n-  DECL_ARTIFICIAL (ic_gcov_type_ptr_var) = 1;\n-  DECL_INITIAL (ic_gcov_type_ptr_var) = NULL;\n+\t\t\t   \"__gcov_indirect_call_topn\" :\n+\t\t\t   \"__gcov_indirect_call\")),\n+\t\t  tuple_type);\n+  TREE_PUBLIC (ic_tuple_var) = 1;\n+  DECL_ARTIFICIAL (ic_tuple_var) = 1;\n+  DECL_INITIAL (ic_tuple_var) = NULL;\n+  DECL_EXTERNAL (ic_tuple_var) = 1;\n   if (targetm.have_tls)\n-    set_decl_tls_model (ic_gcov_type_ptr_var, decl_default_tls_model (ic_gcov_type_ptr_var));\n+    set_decl_tls_model (ic_tuple_var, decl_default_tls_model (tuple_type));\n }\n \n /* Create the type and function decls for the interface with gcov.  */\n@@ -185,7 +183,7 @@ gimple_init_gcov_profiler (void)\n       ic_profiler_fn_type\n \t       = build_function_type_list (void_type_node,\n \t\t\t\t\t  gcov_type_node,\n-\t\t\t\t\t  ptr_void,\n+\t\t\t\t\t  ptr_type_node,\n \t\t\t\t\t  NULL_TREE);\n       profiler_fn_name = \"__gcov_indirect_call_profiler_v2\";\n       if (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE))\n@@ -388,22 +386,29 @@ gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n \n   /* Insert code:\n \n-    stmt1: __gcov_indirect_call_counters = get_relevant_counter_ptr ();\n+    stmt1: __gcov_indirect_call.counters = get_relevant_counter_ptr ();\n     stmt2: tmp1 = (void *) (indirect call argument value)\n-    stmt3: __gcov_indirect_call_callee = tmp1;\n+    stmt3: __gcov_indirect_call.callee = tmp1;\n \n     Example:\n       f_1 = foo;\n-      __gcov_indirect_call_counters = &__gcov4.main[0];\n+      __gcov_indirect_call.counters = &__gcov4.main[0];\n       PROF_9 = f_1;\n       __gcov_indirect_call_callee = PROF_9;\n       _4 = f_1 ();\n    */\n \n-  stmt1 = gimple_build_assign (ic_gcov_type_ptr_var, ref_ptr);\n-  tmp1 = make_temp_ssa_name (ptr_void, NULL, \"PROF\");\n+  tree gcov_type_ptr = build_pointer_type (get_gcov_type ());\n+\n+  tree counter_ref = build3 (COMPONENT_REF, gcov_type_ptr,\n+\t\t\t     ic_tuple_var, ic_tuple_counters_field, NULL_TREE);\n+\n+  stmt1 = gimple_build_assign (counter_ref, ref_ptr);\n+  tmp1 = make_temp_ssa_name (ptr_type_node, NULL, \"PROF\");\n   stmt2 = gimple_build_assign (tmp1, unshare_expr (value->hvalue.value));\n-  stmt3 = gimple_build_assign (ic_void_ptr_var, gimple_assign_lhs (stmt2));\n+  tree callee_ref = build3 (COMPONENT_REF, ptr_type_node,\n+\t\t\t     ic_tuple_var, ic_tuple_callee_field, NULL_TREE);\n+  stmt3 = gimple_build_assign (callee_ref, tmp1);\n \n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt2, GSI_SAME_STMT);\n@@ -459,9 +464,12 @@ gimple_gen_ic_func_profiler (void)\n      resetting __gcov_indirect_call_callee to NULL.  */\n \n   gimple_stmt_iterator gsi = gsi_start_bb (cond_bb);\n-  void0 = build_int_cst (build_pointer_type (void_type_node), 0);\n+  void0 = build_int_cst (ptr_type_node, 0);\n+\n+  tree callee_ref = build3 (COMPONENT_REF, ptr_type_node,\n+\t\t\t    ic_tuple_var, ic_tuple_callee_field, NULL_TREE);\n \n-  tree ref = force_gimple_operand_gsi (&gsi, ic_void_ptr_var, true, NULL_TREE,\n+  tree ref = force_gimple_operand_gsi (&gsi, callee_ref, true, NULL_TREE,\n \t\t\t\t       true, GSI_SAME_STMT);\n \n   gcond *cond = gimple_build_cond (NE_EXPR, ref,"}, {"sha": "60b982793d10a83b21accaefcaa3da95ad457c0e", "filename": "gcc/value-prof.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -1290,7 +1290,6 @@ gimple_ic (gcall *icall_stmt, struct cgraph_node *direct_call,\n   gcond *cond_stmt;\n   tree tmp0, tmp1, tmp;\n   basic_block cond_bb, dcall_bb, icall_bb, join_bb = NULL;\n-  tree optype = build_pointer_type (void_type_node);\n   edge e_cd, e_ci, e_di, e_dj = NULL, e_ij;\n   gimple_stmt_iterator gsi;\n   int lp_nr, dflags;\n@@ -1300,13 +1299,13 @@ gimple_ic (gcall *icall_stmt, struct cgraph_node *direct_call,\n   cond_bb = gimple_bb (icall_stmt);\n   gsi = gsi_for_stmt (icall_stmt);\n \n-  tmp0 = make_temp_ssa_name (optype, NULL, \"PROF\");\n-  tmp1 = make_temp_ssa_name (optype, NULL, \"PROF\");\n+  tmp0 = make_temp_ssa_name (ptr_type_node, NULL, \"PROF\");\n+  tmp1 = make_temp_ssa_name (ptr_type_node, NULL, \"PROF\");\n   tmp = unshare_expr (gimple_call_fn (icall_stmt));\n   load_stmt = gimple_build_assign (tmp0, tmp);\n   gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n \n-  tmp = fold_convert (optype, build_addr (direct_call->decl));\n+  tmp = fold_convert (ptr_type_node, build_addr (direct_call->decl));\n   load_stmt = gimple_build_assign (tmp1, tmp);\n   gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n "}, {"sha": "798712993b8d07248c25a0ed5389c1307f8e9b2d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -1,3 +1,15 @@\n+2018-10-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/84107\n+\t* libgcov-profiler.c (__gcov_indirect_call):\n+\tChange type to indirect_call_tuple.\n+\t(struct indirect_call_tuple): New struct.\n+\t(__gcov_indirect_call_topn_profiler): Change type.\n+\t(__gcov_indirect_call_profiler_v2): Use the new\n+\tvariables.\n+\t* libgcov.h (struct indirect_call_tuple): New struct\n+\tdefinition.\n+\n 2018-10-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* libgcc2.c (isnan): Use __builtin_isnan."}, {"sha": "7a5e50009ce15032c312cb7593bab052a5e2021d", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -271,12 +271,7 @@ __gcov_topn_value_profiler_body (gcov_type *counters, gcov_type value)\n #if defined(HAVE_CC_TLS) && !defined (USE_EMUTLS)\n __thread\n #endif\n-gcov_type *__gcov_indirect_call_topn_counters ATTRIBUTE_HIDDEN;\n-\n-#if defined(HAVE_CC_TLS) && !defined (USE_EMUTLS)\n-__thread\n-#endif\n-void *__gcov_indirect_call_topn_callee ATTRIBUTE_HIDDEN;\n+struct indirect_call_tuple __gcov_indirect_call_topn;\n \n #ifdef TARGET_VTABLE_USES_DESCRIPTORS\n #define VTABLE_USES_DESCRIPTORS 1\n@@ -290,14 +285,14 @@ void *__gcov_indirect_call_topn_callee ATTRIBUTE_HIDDEN;\n void\n __gcov_indirect_call_topn_profiler (gcov_type value, void* cur_func)\n {\n-  void *callee_func = __gcov_indirect_call_topn_callee;\n+  void *callee_func = __gcov_indirect_call_topn.callee;\n   /* If the C++ virtual tables contain function descriptors then one\n      function may have multiple descriptors and we need to dereference\n      the descriptors to see if they point to the same function.  */\n   if (cur_func == callee_func\n       || (VTABLE_USES_DESCRIPTORS && callee_func\n \t  && *(void **) cur_func == *(void **) callee_func))\n-    __gcov_topn_value_profiler_body (__gcov_indirect_call_topn_counters, value);\n+    __gcov_topn_value_profiler_body (__gcov_indirect_call_topn.counters, value);\n }\n #endif\n \n@@ -311,11 +306,7 @@ __gcov_indirect_call_topn_profiler (gcov_type value, void* cur_func)\n #if defined(HAVE_CC_TLS) && !defined (USE_EMUTLS)\n __thread\n #endif\n-void * __gcov_indirect_call_callee;\n-#if defined(HAVE_CC_TLS) && !defined (USE_EMUTLS)\n-__thread\n-#endif\n-gcov_type * __gcov_indirect_call_counters;\n+struct indirect_call_tuple __gcov_indirect_call;\n \n /* By default, the C++ compiler will use function addresses in the\n    vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero\n@@ -332,12 +323,12 @@ __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n   /* If the C++ virtual tables contain function descriptors then one\n      function may have multiple descriptors and we need to dereference\n      the descriptors to see if they point to the same function.  */\n-  if (cur_func == __gcov_indirect_call_callee\n+  if (cur_func == __gcov_indirect_call.callee\n       || (__LIBGCC_VTABLE_USES_DESCRIPTORS__\n-          && *(void **) cur_func == *(void **) __gcov_indirect_call_callee))\n-    __gcov_one_value_profiler_body (__gcov_indirect_call_counters, value, 0);\n+\t  && *(void **) cur_func == *(void **) __gcov_indirect_call.callee))\n+    __gcov_one_value_profiler_body (__gcov_indirect_call.counters, value, 0);\n \n-  __gcov_indirect_call_callee = NULL;\n+  __gcov_indirect_call.callee = NULL;\n }\n #endif\n "}, {"sha": "ee05a68d2b2705d2d92524227bee2ced63cc81bb", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edbcdbead288664d874dd3a2e0d8ada4c565af0/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=3edbcdbead288664d874dd3a2e0d8ada4c565af0", "patch": "@@ -226,6 +226,15 @@ struct gcov_master\n   gcov_unsigned_t version;\n   struct gcov_root *root;\n };\n+\n+struct indirect_call_tuple\n+{\n+  /* Callee function.  */\n+  void *callee;\n+\n+  /* Pointer to counters.  */\n+  gcov_type *counters;\n+};\n   \n /* Exactly one of these will be active in the process.  */\n extern struct gcov_master __gcov_master;"}]}