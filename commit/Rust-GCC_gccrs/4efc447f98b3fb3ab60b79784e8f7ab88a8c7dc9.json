{"sha": "4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmYzQ0N2Y5OGIzZmIzYWI2MGI3OTc4NGU4ZjdhYjg4YThjN2RjOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-12-08T18:14:21Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-12-08T18:14:21Z"}, "message": "2006-12-08  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n\n\t* lib/target-supports.exp\n\t(check_effective_target_large_long_double): New.  \n\t* gcc.dg/Wconversion-real.c : Use it.  \n\t* gcc.dg/Wconversion-integer.c : Fix for targets where char is\n\tunsigned.\n\nFrom-SVN: r119662", "tree": {"sha": "ee3fa624b17b5f89232793441d5b1e05030bbdfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee3fa624b17b5f89232793441d5b1e05030bbdfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/comments", "author": null, "committer": null, "parents": [{"sha": "fd13de777227fdcdb7aafaa97ca5def90755961d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd13de777227fdcdb7aafaa97ca5def90755961d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd13de777227fdcdb7aafaa97ca5def90755961d"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "fe8632a881d0bd216a4c3e404270a31e4d6b5069", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "patch": "@@ -1,3 +1,11 @@\n+2006-12-08  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_large_long_double): New.  \n+\t* gcc.dg/Wconversion-real.c : Use it.  \n+\t* gcc.dg/Wconversion-integer.c : Fix for targets where char is\n+\tunsigned.\n+\n 2006-12-08  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* gcc.c-torture/execute/mode-dependent-address.c: New test."}, {"sha": "515aba30dbf47114158466b97fc314ad667c7819", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c?ref=4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "patch": "@@ -2,7 +2,7 @@\n    These tests come from gcc/testsuite/gcc.dg/overflow-warn-2.c  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -Wconversion\" } */\n+/* { dg-options \"-std=c99 -fsigned-char -Wconversion\" } */\n \n #include <limits.h>\n "}, {"sha": "877fcea391f676076e83e1a3ab731e8f131eb42f", "filename": "gcc/testsuite/gcc.dg/Wconversion-real.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real.c?ref=4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "patch": "@@ -20,15 +20,15 @@ void h (void)\n   ffloat (3.1); /* { dg-warning \"conversion\" } */\n   vfloat = 3.1; /* { dg-warning \"conversion\" } */\n   ffloat (3.1L); /* { dg-warning \"conversion\" } */\n-  vfloat = 3.1L; /* { dg-warning \"conversion\" } */\n-  fdouble (3.1L); /* { dg-warning \"conversion\" } */\n-  vdouble = 3.1L; /* { dg-warning \"conversion\" } */\n+  vfloat = 3.1L;  /* { dg-warning \"conversion\" } */\n+  fdouble (3.1L); /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+  vdouble = 3.1L; /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n   ffloat (vdouble); /* { dg-warning \"conversion\" } */\n   vfloat = vdouble; /* { dg-warning \"conversion\" } */\n   ffloat (vlongdouble); /* { dg-warning \"conversion\" } */\n   vfloat = vlongdouble; /* { dg-warning \"conversion\" } */\n-  fdouble (vlongdouble); /* { dg-warning \"conversion\" } */\n-  vdouble = vlongdouble; /* { dg-warning \"conversion\" } */\n+  fdouble (vlongdouble); /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+  vdouble = vlongdouble; /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n \n \n   ffloat ((float) 3.1); "}, {"sha": "221d17d474da30e909e5d42705bf6126065c3efb", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4efc447f98b3fb3ab60b79784e8f7ab88a8c7dc9", "patch": "@@ -1118,6 +1118,16 @@ proc check_effective_target_lp64 { } {\n     }]\n }\n \n+# Return 1 if the target supports long double larger than double,\n+# 0 otherwise.\n+\n+proc check_effective_target_large_long_double { } {\n+    return [check_no_compiler_messages large_long_double object {\n+\tint dummy[sizeof(long double) > sizeof(double) ? 1 : -1];\n+    }]\n+}\n+\n+\n # Return 1 if the target supports compiling decimal floating point,\n # 0 otherwise.\n "}]}