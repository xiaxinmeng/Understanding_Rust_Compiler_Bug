{"sha": "63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMDJmMDU4ZjBiYTNjMWQwMGMyYTlmMTJjYWM4NmVlZWMwMGI2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-16T14:48:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-16T14:48:56Z"}, "message": "re PR c++/66387 (ICE in make_decl_rtl with lambda)\n\n\tPR c++/66387\n\t* pt.c (tsubst_copy) [VAR_DECL]: Use process_outer_var_ref.\n\nFrom-SVN: r224521", "tree": {"sha": "aff7fc914e78f2fd2eb3926d7ea57cd8d43727b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff7fc914e78f2fd2eb3926d7ea57cd8d43727b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff09c88dd183154206764fb841a87856f5b2f94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff09c88dd183154206764fb841a87856f5b2f94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff09c88dd183154206764fb841a87856f5b2f94d"}], "stats": {"total": 136, "additions": 132, "deletions": 4}, "files": [{"sha": "1ab5e8f2c3f3fe4e49f3f7cedec1d22fe70a1ded", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "patch": "@@ -1,3 +1,8 @@\n+2015-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66387\n+\t* pt.c (tsubst_copy) [VAR_DECL]: Use process_outer_var_ref.\n+\n 2015-06-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/58583"}, {"sha": "9236311329db80897c4450e5ab57589ece76e039", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "patch": "@@ -13071,10 +13071,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t      if (TREE_STATIC (r))\n \t\t\trest_of_decl_compilation (r, toplevel_bindings_p (),\n \t\t\t\t\t\t  at_eof);\n-\t\t      else if (decl_constant_var_p (r))\n-\t\t\t/* A use of a local constant decays to its value.\n-\t\t\t   FIXME update for core DR 696.  */\n-\t\t\tr = scalar_constant_value (r);\n+\t\t      else\n+\t\t\tr = process_outer_var_ref (r, complain);\n \t\t    }\n \t\t}\n \t      /* Remember this for subsequent uses.  */"}, {"sha": "a1519b9e608b977cf2a58807b1a59b184fa18968", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "patch": "@@ -3103,6 +3103,8 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n   if (cp_unevaluated_operand)\n     /* It's not a use (3.2) if we're in an unevaluated context.  */\n     return decl;\n+  if (decl == error_mark_node)\n+    return decl;\n \n   tree context = DECL_CONTEXT (decl);\n   tree containing_function = current_function_decl;"}, {"sha": "57e0ad2b28824ad5dab0b8121008a5f36ac338bd", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-ice2.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d02f058f0ba3c1d00c2a9f12cac86eeec00b66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ice2.C?ref=63d02f058f0ba3c1d00c2a9f12cac86eeec00b66", "patch": "@@ -0,0 +1,123 @@\n+// PR c++/66387\n+// { dg-do compile { target c++14 } }\n+\n+namespace boost {\n+namespace hana {\n+namespace detail {\n+namespace std {\n+using size_t = decltype(0);\n+}\n+}\n+namespace ic_detail {\n+template <typename T, T> struct _with_index {\n+  template <typename F> constexpr void operator()(F &&) const;\n+};\n+template <typename T, T v> struct _times { _with_index<T, v> with_index; };\n+}\n+template <typename T, T v> struct _integral_constant {\n+  using value_type = T;\n+  operator value_type() const;\n+  ic_detail::_times<T, v> times;\n+};\n+template <detail::std::size_t i>\n+constexpr _integral_constant<detail::std::size_t, i> size_t{};\n+template <typename, typename = void> struct datatype;\n+}\n+}\n+namespace std {\n+typedef int size_t;\n+inline namespace __cxx11 {}\n+}\n+namespace boost {\n+namespace hana {\n+template <bool> struct when;\n+template <typename, typename, typename> struct to_impl;\n+template <typename T, typename> struct datatype : datatype<T, when<true>> {};\n+template <typename T, bool condition> struct datatype<T, when<condition>> {\n+  using type = typename T::hana::datatype;\n+};\n+template <typename> struct _models;\n+template <typename To, typename From>\n+    struct to_impl < To,\n+    From, when < _models<From> {\n+} >> ;\n+namespace detail {\n+namespace std {\n+template <typename T, T> struct integer_sequence;\n+template <size_t... n> using index_sequence = integer_sequence<size_t, n...>;\n+namespace int_seq_detail {\n+template <size_t> struct make_index_sequence {\n+  using type = index_sequence<0>;\n+};\n+template <typename, typename> struct cast_to;\n+template <typename T, typename U, U... u>\n+struct cast_to<T, integer_sequence<U, u...>> {\n+  using type = integer_sequence<T, u...>;\n+};\n+}\n+template <typename T, T>\n+using make_integer_sequence = typename int_seq_detail::cast_to<\n+    T, int_seq_detail::make_index_sequence<1>::type>::type;\n+}\n+}\n+namespace ic_detail {\n+template <typename T, T N, typename = detail::std::make_integer_sequence<T, N>>\n+struct go;\n+template <typename T, T N, T... i>\n+struct go<T, N, detail::std::integer_sequence<T, i...>> {\n+  using swallow = T;\n+  template <typename F> static void with_index(F f) {\n+    swallow{(f(_integral_constant<T, i>{}), 0)...};\n+  }\n+};\n+template <typename T, T v>\n+template <typename F>\n+constexpr void _with_index<T, v>::operator()(F &&f) const {\n+  go<T, 0>::with_index(f);\n+}\n+}\n+}\n+}\n+namespace std {\n+template <typename> class allocator;\n+template <class> struct char_traits;\n+template <typename _CharT, typename = char_traits<_CharT>> class basic_ostream;\n+namespace __cxx11 {\n+template <typename _CharT, typename = char_traits<_CharT>,\n+          typename = allocator<_CharT>>\n+class basic_stringstream;\n+}\n+typedef basic_ostream<char> ostream;\n+typedef basic_stringstream<char> stringstream;\n+template <typename, typename> class basic_ostream {};\n+template <typename _CharT, typename>\n+class basic_iostream : public basic_ostream<_CharT> {};\n+namespace __cxx11 {\n+template <typename _CharT, typename _Traits, typename>\n+class basic_stringstream : public basic_iostream<_CharT, _Traits> {};\n+}\n+}\n+namespace hana = boost::hana;\n+template <typename> struct print_impl;\n+template <typename X> void print(std::ostream os, X x) {\n+  using Tag = typename hana::datatype<X>::type;\n+  print_impl<Tag>::apply(os, x);\n+}\n+struct Vector;\n+template <typename, typename> struct vector2 {\n+  struct hana {\n+    using datatype = Vector;\n+  };\n+  static constexpr std::size_t size = 0;\n+};\n+template <> struct print_impl<Vector> {\n+  template <typename vectorN> static void apply(std::ostream, vectorN) {\n+    constexpr auto N = hana::size_t<vectorN::size>;\n+    N.times.with_index([&](auto) { N - hana::size_t<1>; });\n+  }\n+};\n+int main() {\n+  std::stringstream ss;\n+  vector2<int, char> v2;\n+  print(ss, v2);\n+}"}]}