{"sha": "f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "node_id": "C_kwDOANBUbNoAKGY1MzkwMjljMWNlNmZiOTE2MzQyMmQxYThiNmFjMTJhMjU1NGVhYTI", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-10-28T11:38:43Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-10-31T12:20:52Z"}, "message": "amdgcn: multi-size vector reductions\n\nAdd support for vector reductions for any vector width by switching iterators\nand generalising the code slightly.  There's no one-instruction way to move an\nitem from lane 31 to lane 0 (63, 15, 7, 3, and 1 are all fine though), and\nvec_extract is probably fewer cycles anyway, so now we always reduce to an\nSGPR.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-valu.md (V64_SI): Delete iterator.\n\t(V64_DI): Likewise.\n\t(V64_1REG): Likewise.\n\t(V64_INT_1REG): Likewise.\n\t(V64_2REG): Likewise.\n\t(V64_ALL): Likewise.\n\t(V64_FP): Likewise.\n\t(reduc_<reduc_op>_scal_<mode>): Use V_ALL. Use gen_vec_extract.\n\t(fold_left_plus_<mode>): Use V_FP.\n\t(*<reduc_op>_dpp_shr_<mode>): Use V_1REG.\n\t(*<reduc_op>_dpp_shr_<mode>): Use V_DI.\n\t(*plus_carry_dpp_shr_<mode>): Use V_INT_1REG.\n\t(*plus_carry_in_dpp_shr_<mode>): Use V_SI.\n\t(*plus_carry_dpp_shr_<mode>): Use V_DI.\n\t(mov_from_lane63_<mode>): Delete.\n\t(mov_from_lane63_<mode>): Delete.\n\t* config/gcn/gcn.cc (gcn_expand_reduc_scalar): Support partial vectors.\n\t* config/gcn/gcn.md (unspec): Remove UNSPEC_MOV_FROM_LANE63.", "tree": {"sha": "137b983b21f3fa14ce7244b62d4978753f5623d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/137b983b21f3fa14ce7244b62d4978753f5623d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a1085644c6c5446eece41d255ca1fd569149d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a1085644c6c5446eece41d255ca1fd569149d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a1085644c6c5446eece41d255ca1fd569149d4"}], "stats": {"total": 139, "additions": 45, "deletions": 94}, "files": [{"sha": "6274d2e922802b3ee912e6355a7f703cc96c7a87", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 30, "deletions": 81, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "patch": "@@ -32,11 +32,6 @@\n (define_mode_iterator V_DF\n \t\t      [V2DF V4DF V8DF V16DF V32DF V64DF])\n \n-(define_mode_iterator V64_SI\n-\t\t      [V64SI])\n-(define_mode_iterator V64_DI\n-\t\t      [V64DI])\n-\n ; Vector modes for sub-dword modes\n (define_mode_iterator V_QIHI\n \t\t      [V2QI V2HI\n@@ -77,13 +72,6 @@\n \t\t       V32HF V32SF\n \t\t       V64HF V64SF])\n \n-; V64_* modes are for where more general support is unimplemented\n-; (e.g. reductions)\n-(define_mode_iterator V64_1REG\n-\t\t      [V64QI V64HI V64SI V64HF V64SF])\n-(define_mode_iterator V64_INT_1REG\n-\t\t      [V64QI V64HI V64SI])\n-\n ; Vector modes for two vector registers\n (define_mode_iterator V_2REG\n \t\t      [V2DI V2DF\n@@ -93,9 +81,6 @@\n \t\t       V32DI V32DF\n \t\t       V64DI V64DF])\n \n-(define_mode_iterator V64_2REG\n-\t\t      [V64DI V64DF])\n-\n ; Vector modes with native support\n (define_mode_iterator V_noQI\n \t\t      [V2HI V2HF V2SI V2SF V2DI V2DF\n@@ -158,11 +143,6 @@\n \t\t       V32HF V32SF V32DF\n \t\t       V64HF V64SF V64DF])\n \n-(define_mode_iterator V64_ALL\n-\t\t      [V64QI V64HI V64HF V64SI V64SF V64DI V64DF])\n-(define_mode_iterator V64_FP\n-\t\t      [V64HF V64SF V64DF])\n-\n (define_mode_attr scalar_mode\n   [(V2QI \"qi\") (V2HI \"hi\") (V2SI \"si\")\n    (V2HF \"hf\") (V2SF \"sf\") (V2DI \"di\") (V2DF \"df\")\n@@ -3528,15 +3508,16 @@\n (define_expand \"reduc_<reduc_op>_scal_<mode>\"\n   [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:V64_ALL 1 \"register_operand\")]\n+\t  [(match_operand:V_ALL 1 \"register_operand\")]\n \t  REDUC_UNSPEC))]\n   \"\"\n   {\n     rtx tmp = gcn_expand_reduc_scalar (<MODE>mode, operands[1],\n \t\t\t\t       <reduc_unspec>);\n \n-    /* The result of the reduction is in lane 63 of tmp.  */\n-    emit_insn (gen_mov_from_lane63_<mode> (operands[0], tmp));\n+    rtx last_lane = GEN_INT (GET_MODE_NUNITS (<MODE>mode) - 1);\n+    emit_insn (gen_vec_extract<mode><scalar_mode> (operands[0], tmp,\n+\t\t\t\t\t\t   last_lane));\n \n     DONE;\n   })\n@@ -3547,7 +3528,7 @@\n (define_expand \"fold_left_plus_<mode>\"\n  [(match_operand:<SCALAR_MODE> 0 \"register_operand\")\n   (match_operand:<SCALAR_MODE> 1 \"gcn_alu_operand\")\n-  (match_operand:V64_FP 2 \"gcn_alu_operand\")]\n+  (match_operand:V_FP 2 \"gcn_alu_operand\")]\n   \"can_create_pseudo_p ()\n    && (flag_openacc || flag_openmp\n        || flag_associative_math)\"\n@@ -3563,11 +3544,11 @@\n    })\n \n (define_insn \"*<reduc_op>_dpp_shr_<mode>\"\n-  [(set (match_operand:V64_1REG 0 \"register_operand\"   \"=v\")\n-\t(unspec:V64_1REG\n-\t  [(match_operand:V64_1REG 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64_1REG 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"      \"n\")]\n+  [(set (match_operand:V_1REG 0 \"register_operand\"   \"=v\")\n+\t(unspec:V_1REG\n+\t  [(match_operand:V_1REG 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_1REG 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"        \"n\")]\n \t  REDUC_UNSPEC))]\n   ; GCN3 requires a carry out, GCN5 not\n   \"!(TARGET_GCN3 && SCALAR_INT_MODE_P (<SCALAR_MODE>mode)\n@@ -3580,11 +3561,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"*<reduc_op>_dpp_shr_<mode>\"\n-  [(set (match_operand:V64_DI 0 \"register_operand\"    \"=v\")\n-\t(unspec:V64_DI\n-\t  [(match_operand:V64_DI 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64_DI 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")]\n+  [(set (match_operand:V_DI 0 \"register_operand\"    \"=v\")\n+\t(unspec:V_DI\n+\t  [(match_operand:V_DI 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_DI 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"  \"n\")]\n \t  REDUC_2REG_UNSPEC))]\n   \"\"\n   \"#\"\n@@ -3609,10 +3590,10 @@\n ; Special cases for addition.\n \n (define_insn \"*plus_carry_dpp_shr_<mode>\"\n-  [(set (match_operand:V64_INT_1REG 0 \"register_operand\"   \"=v\")\n-\t(unspec:V64_INT_1REG\n-\t  [(match_operand:V64_INT_1REG 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64_INT_1REG 2 \"register_operand\" \"v\")\n+  [(set (match_operand:V_INT_1REG 0 \"register_operand\"   \"=v\")\n+\t(unspec:V_INT_1REG\n+\t  [(match_operand:V_INT_1REG 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_INT_1REG 2 \"register_operand\" \"v\")\n \t   (match_operand:SI 3 \"const_int_operand\"\t  \"n\")]\n \t  UNSPEC_PLUS_CARRY_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n@@ -3626,12 +3607,12 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*plus_carry_in_dpp_shr_<mode>\"\n-  [(set (match_operand:V64_SI 0 \"register_operand\"    \"=v\")\n-\t(unspec:V64_SI\n-\t  [(match_operand:V64_SI 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64_SI 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")\n-\t   (match_operand:DI 4 \"register_operand\"     \"cV\")]\n+  [(set (match_operand:V_SI 0 \"register_operand\"    \"=v\")\n+\t(unspec:V_SI\n+\t  [(match_operand:V_SI 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_SI 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"  \"n\")\n+\t   (match_operand:DI 4 \"register_operand\"   \"cV\")]\n \t  UNSPEC_PLUS_CARRY_IN_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n@@ -3644,11 +3625,11 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"*plus_carry_dpp_shr_<mode>\"\n-  [(set (match_operand:V64_DI 0 \"register_operand\"    \"=v\")\n-\t(unspec:V64_DI\n-\t  [(match_operand:V64_DI 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64_DI 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"    \"n\")]\n+  [(set (match_operand:V_DI 0 \"register_operand\"    \"=v\")\n+\t(unspec:V_DI\n+\t  [(match_operand:V_DI 1 \"register_operand\" \"v\")\n+\t   (match_operand:V_DI 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"  \"n\")]\n \t  UNSPEC_PLUS_CARRY_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n@@ -3675,38 +3656,6 @@\n   [(set_attr \"type\" \"vmult\")\n    (set_attr \"length\" \"16\")])\n \n-; Instructions to move a scalar value from lane 63 of a vector register.\n-(define_insn \"mov_from_lane63_<mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\" \"=Sg,v\")\n-\t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:V64_1REG 1 \"register_operand\"\t  \"  v,v\")]\n-\t  UNSPEC_MOV_FROM_LANE63))]\n-  \"\"\n-  \"@\n-   v_readlane_b32\\t%0, %1, 63\n-   v_mov_b32\\t%0, %1 wave_ror:1\"\n-  [(set_attr \"type\" \"vop3a,vop_dpp\")\n-   (set_attr \"exec\" \"none,*\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn \"mov_from_lane63_<mode>\"\n-  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\" \"=Sg,v\")\n-\t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:V64_2REG 1 \"register_operand\"\t  \"  v,v\")]\n-\t  UNSPEC_MOV_FROM_LANE63))]\n-  \"\"\n-  \"@\n-   v_readlane_b32\\t%L0, %L1, 63\\;v_readlane_b32\\t%H0, %H1, 63\n-   * if (REGNO (operands[0]) <= REGNO (operands[1]))\t\\\n-       return \\\"v_mov_b32\\t%L0, %L1 wave_ror:1\\;\\\"\t\\\n-\t      \\\"v_mov_b32\\t%H0, %H1 wave_ror:1\\\";\t\\\n-     else\t\t\t\t\t\t\\\n-       return \\\"v_mov_b32\\t%H0, %H1 wave_ror:1\\;\\\"\t\\\n-\t      \\\"v_mov_b32\\t%L0, %L1 wave_ror:1\\\";\"\n-  [(set_attr \"type\" \"vop3a,vop_dpp\")\n-   (set_attr \"exec\" \"none,*\")\n-   (set_attr \"length\" \"8\")])\n-\n ;; }}}\n ;; {{{ Miscellaneous\n "}, {"sha": "b9d9170f167650dd336f616737b8760c950153f4", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "patch": "@@ -4918,23 +4918,25 @@ gcn_expand_dpp_shr_insn (machine_mode mode, const char *insn,\n \n    The vector register SRC of mode MODE is reduced using the operation given\n    by UNSPEC, and the scalar result is returned in lane 63 of a vector\n-   register.  */\n-/* FIXME: Implement reductions for sizes other than V64.\n-          (They're currently disabled in the machine description.)  */\n+   register (or lane 31, 15, 7, 3, 1 for partial vectors).  */\n \n rtx\n gcn_expand_reduc_scalar (machine_mode mode, rtx src, int unspec)\n {\n   machine_mode orig_mode = mode;\n+  machine_mode scalar_mode = GET_MODE_INNER (mode);\n+  int vf = GET_MODE_NUNITS (mode);\n   bool use_moves = (((unspec == UNSPEC_SMIN_DPP_SHR\n+\t\t      || unspec == UNSPEC_SMIN_DPP_SHR\n \t\t      || unspec == UNSPEC_SMAX_DPP_SHR\n \t\t      || unspec == UNSPEC_UMIN_DPP_SHR\n \t\t      || unspec == UNSPEC_UMAX_DPP_SHR)\n-\t\t     && (mode == V64DImode\n-\t\t\t || mode == V64DFmode))\n+\t\t     && (scalar_mode == DImode\n+\t\t\t || scalar_mode == DFmode))\n \t\t    || (unspec == UNSPEC_PLUS_DPP_SHR\n-\t\t\t&& mode == V64DFmode));\n+\t\t\t&& scalar_mode == DFmode));\n   rtx_code code = (unspec == UNSPEC_SMIN_DPP_SHR ? SMIN\n+\t\t   : unspec == UNSPEC_SMIN_DPP_SHR ? SMIN\n \t\t   : unspec == UNSPEC_SMAX_DPP_SHR ? SMAX\n \t\t   : unspec == UNSPEC_UMIN_DPP_SHR ? UMIN\n \t\t   : unspec == UNSPEC_UMAX_DPP_SHR ? UMAX\n@@ -4944,31 +4946,32 @@ gcn_expand_reduc_scalar (machine_mode mode, rtx src, int unspec)\n \t\t       || unspec == UNSPEC_SMAX_DPP_SHR\n \t\t       || unspec == UNSPEC_UMIN_DPP_SHR\n \t\t       || unspec == UNSPEC_UMAX_DPP_SHR)\n-\t\t      && (mode == V64QImode\n-\t\t\t  || mode == V64HImode));\n+\t\t      && (scalar_mode == QImode\n+\t\t\t  || scalar_mode == HImode));\n   bool unsignedp = (unspec == UNSPEC_UMIN_DPP_SHR\n \t\t    || unspec == UNSPEC_UMAX_DPP_SHR);\n   bool use_plus_carry = unspec == UNSPEC_PLUS_DPP_SHR\n \t\t\t&& GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n-\t\t\t&& (TARGET_GCN3 || mode == V64DImode);\n+\t\t\t&& (TARGET_GCN3 || scalar_mode == DImode);\n \n   if (use_plus_carry)\n     unspec = UNSPEC_PLUS_CARRY_DPP_SHR;\n \n   if (use_extends)\n     {\n-      rtx tmp = gen_reg_rtx (V64SImode);\n+      mode = VnMODE (vf, SImode);\n+      rtx tmp = gen_reg_rtx (mode);\n       convert_move (tmp, src, unsignedp);\n       src = tmp;\n-      mode = V64SImode;\n     }\n \n   /* Perform reduction by first performing the reduction operation on every\n      pair of lanes, then on every pair of results from the previous\n      iteration (thereby effectively reducing every 4 lanes) and so on until\n      all lanes are reduced.  */\n   rtx in, out = force_reg (mode, src);\n-  for (int i = 0, shift = 1; i < 6; i++, shift <<= 1)\n+  int iterations = exact_log2 (vf);\n+  for (int i = 0, shift = 1; i < iterations; i++, shift <<= 1)\n     {\n       rtx shift_val = gen_rtx_CONST_INT (VOIDmode, shift);\n       in = out;"}, {"sha": "6c1a438f9d1a0b82191f92bf49fd66d1b7f2a4dd", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f539029c1ce6fb9163422d1a8b6ac12a2554eaa2/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=f539029c1ce6fb9163422d1a8b6ac12a2554eaa2", "patch": "@@ -78,7 +78,6 @@\n   UNSPEC_PLUS_CARRY_DPP_SHR UNSPEC_PLUS_CARRY_IN_DPP_SHR\n   UNSPEC_AND_DPP_SHR UNSPEC_IOR_DPP_SHR UNSPEC_XOR_DPP_SHR\n   UNSPEC_MOV_DPP_SHR\n-  UNSPEC_MOV_FROM_LANE63\n   UNSPEC_GATHER\n   UNSPEC_SCATTER\n   UNSPEC_RCP"}]}