{"sha": "c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmZjRmMGZlNmI5MzU3MzkzYzdlNDQzMzhjNDc4M2NmMGMxOTc1OQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2019-01-09T14:32:06Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2019-01-09T14:32:06Z"}, "message": "[AArch64, 6/6] Enable BTI: Add configure option.\n\nThis patch is part of a series that enables ARMv8.5-A in GCC and\nadds Branch Target Identification Mechanism.\n\nThis patch is adding a new configure option for enabling BTI and\nReturn Address Signing by default.\n\n*** gcc/ChangeLog ***\n\n2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_override_options): Add case to\n\tcheck configure option to set BTI and Return Address Signing.\n\t* configure.ac: Add --enable-standard-branch-protection and\n\t--disable-standard-branch-protection.\n\t* configure: Regenerated.\n\t* doc/install.texi: Document the same.\n\n*** gcc/testsuite/ChangeLog ***\n\n2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n\n\t* gcc.target/aarch64/bti-1.c: Update test to not add command line\n\toption when configure with bti.\n\t* gcc.target/aarch64/bti-2.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_default_branch_protection):\n\tAdd configure check for --enable-standard-branch-protection.\n\nFrom-SVN: r267770", "tree": {"sha": "db02073be5558e36dbb273606c294c9de708594f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db02073be5558e36dbb273606c294c9de708594f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5f794b47bc09930e3a05b64de0890d315631436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f794b47bc09930e3a05b64de0890d315631436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f794b47bc09930e3a05b64de0890d315631436"}], "stats": {"total": 115, "additions": 113, "deletions": 2}, "files": [{"sha": "fbdf51d21594b60955ae9be8c2c1b5277bfb41b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -1,3 +1,12 @@\n+2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_override_options): Add case to\n+\tcheck configure option to set BTI and Return Address Signing.\n+\t* configure.ac: Add --enable-standard-branch-protection and\n+\t--disable-standard-branch-protection.\n+\t* configure: Regenerated.\n+\t* doc/install.texi: Document the same.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "0b0bc854db7abf038de2338109473c4746f2c617", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -11825,6 +11825,28 @@ aarch64_override_options (void)\n   if (!selected_tune)\n     selected_tune = selected_cpu;\n \n+  if (aarch64_enable_bti == 2)\n+    {\n+#ifdef TARGET_ENABLE_BTI\n+      aarch64_enable_bti = 1;\n+#else\n+      aarch64_enable_bti = 0;\n+#endif\n+    }\n+\n+  /* Return address signing is currently not supported for ILP32 targets.  For\n+     LP64 targets use the configured option in the absence of a command-line\n+     option for -mbranch-protection.  */\n+  if (!TARGET_ILP32 && accepted_branch_protection_string == NULL)\n+    {\n+#ifdef TARGET_ENABLE_PAC_RET\n+      aarch64_ra_sign_scope = AARCH64_FUNCTION_NON_LEAF;\n+      aarch64_ra_sign_key = AARCH64_KEY_A;\n+#else\n+      aarch64_ra_sign_scope = AARCH64_FUNCTION_NONE;\n+#endif\n+    }\n+\n #ifndef HAVE_AS_MABI_OPTION\n   /* The compiler may have been configured with 2.23.* binutils, which does\n      not have support for ILP32.  */"}, {"sha": "ed76a7e8d9c181ef9f108a037af76be7d0dfb0ad", "filename": "gcc/configure", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -979,6 +979,7 @@ with_plugin_ld\n enable_gnu_indirect_function\n enable_initfini_array\n enable_comdat\n+enable_standard_branch_protection\n enable_fix_cortex_a53_835769\n enable_fix_cortex_a53_843419\n with_glibc_version\n@@ -1708,6 +1709,14 @@ Optional Features:\n   --enable-initfini-array\tuse .init_array/.fini_array sections\n   --enable-comdat         enable COMDAT group support\n \n+  --enable-standard-branch-protection\n+                          enable Branch Target Identification Mechanism and\n+                          Return Address Signing by default for AArch64\n+  --disable-standard-branch-protection\n+                          disable Branch Target Identification Mechanism and\n+                          Return Address Signing by default for AArch64\n+\n+\n   --enable-fix-cortex-a53-835769\n                           enable workaround for AArch64 Cortex-A53 erratum\n                           835769 by default\n@@ -25054,6 +25063,25 @@ if test $gcc_cv_as_aarch64_picreloc = yes; then\n \n $as_echo \"#define HAVE_AS_SMALL_PIC_RELOCS 1\" >>confdefs.h\n \n+fi\n+\n+    # Enable Branch Target Identification Mechanism and Return Address\n+    # Signing by default.\n+    # Check whether --enable-standard-branch-protection was given.\n+if test \"${enable_standard_branch_protection+set}\" = set; then :\n+  enableval=$enable_standard_branch_protection;\n+        case $enableval in\n+          yes)\n+            tm_defines=\"${tm_defines} TARGET_ENABLE_BTI=1 TARGET_ENABLE_PAC_RET=1\"\n+            ;;\n+          no)\n+            ;;\n+          *)\n+            as_fn_error \"'$enableval' is an invalid value for --enable-standard-branch-protection.\\\n+  Valid choices are 'yes' and 'no'.\" \"$LINENO\" 5\n+            ;;\n+        esac\n+\n fi\n \n     # Enable default workaround for AArch64 Cortex-A53 erratum 835769."}, {"sha": "e3a455817cbcd810c83103e1c479435c180d631b", "filename": "gcc/configure.ac", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -3962,6 +3962,29 @@ case \"$target\" in\n \tldr     x0, [[x2, #:gotpage_lo15:globalsym]]\n     ],,[AC_DEFINE(HAVE_AS_SMALL_PIC_RELOCS, 1,\n \t[Define if your assembler supports relocs needed by -fpic.])])\n+    # Enable Branch Target Identification Mechanism and Return Address\n+    # Signing by default.\n+    AC_ARG_ENABLE(standard-branch-protection,\n+    [\n+AS_HELP_STRING([--enable-standard-branch-protection],\n+        [enable Branch Target Identification Mechanism and Return Address Signing by default for AArch64])\n+AS_HELP_STRING([--disable-standard-branch-protection],\n+        [disable Branch Target Identification Mechanism and Return Address Signing by default for AArch64])\n+    ],\n+      [\n+        case $enableval in\n+          yes)\n+            tm_defines=\"${tm_defines} TARGET_ENABLE_BTI=1 TARGET_ENABLE_PAC_RET=1\"\n+            ;;\n+          no)\n+            ;;\n+          *)\n+            AC_MSG_ERROR(['$enableval' is an invalid value for --enable-standard-branch-protection.\\\n+  Valid choices are 'yes' and 'no'.])\n+            ;;\n+        esac\n+      ],\n+    [])\n     # Enable default workaround for AArch64 Cortex-A53 erratum 835769.\n     AC_ARG_ENABLE(fix-cortex-a53-835769,\n     ["}, {"sha": "d5e1edbdb0bfec82e85dc8e8e63ef859a5d75c9a", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -3413,6 +3413,16 @@ The workaround is disabled by default if neither of\n @option{--enable-fix-cortex-a53-843419} or\n @option{--disable-fix-cortex-a53-843419} is given at configure time.\n \n+To enable Branch Target Identification Mechanism and Return Address Signing by\n+default at configure time use the @option{--enable-standard-branch-protection}\n+option.  This is equivalent to having @option{-mbranch-protection=standard}\n+during compilation.  This can be explicitly disabled during compilation by\n+passing the @option{-mbranch-protection=none} option which turns off all\n+types of branch protections.  Conversely,\n+@option{--disable-standard-branch-protection} will disable both the\n+protections by default.  This mechanism is turned off by default if neither\n+of the options are given at configure time.\n+\n @html\n <hr />\n @end html"}, {"sha": "daa66aa583067e759638e12c6f0c43c3d06af15a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -1,3 +1,12 @@\n+2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* gcc.target/aarch64/bti-1.c: Update test to not add command line\n+\toption when configure with bti.\n+\t* gcc.target/aarch64/bti-2.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_default_branch_protection):\n+\tAdd configure check for --enable-standard-branch-protection.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \n \t* gcc.target/aarch64/bti-1.c: New test."}, {"sha": "67551859649f98541ac81ac24533a45b0c1afde2", "filename": "gcc/testsuite/gcc.target/aarch64/bti-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-1.c?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -1,6 +1,9 @@\n /* { dg-do compile } */\n /* -Os to create jump table.  */\n-/* { dg-options \"-Os -mbranch-protection=standard\" } */\n+/* { dg-options \"-Os\" } */\n+/* If configured with --enable-standard-branch-protection, don't use\n+   command line option.  */\n+/* { dg-additional-options \"-mbranch-protection=standard\" { target { ! default_branch_protection } } } */\n \n extern int f1 (void);\n extern int f2 (void);"}, {"sha": "85943c3d6415b010c858cb948221e33b0d30a310", "filename": "gcc/testsuite/gcc.target/aarch64/bti-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-2.c?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-require-effective-target aarch64_bti_hw } */\n-/* { dg-options \"-mbranch-protection=standard\" } */\n+/* If configured with --enable-standard-branch-protection, don't use\n+   command line option.  */\n+/* { dg-additional-options \"-mbranch-protection=standard\" { target { ! default_branch_protection } } } */\n \n #include<stdio.h>\n "}, {"sha": "f0043d5dd4f90793f6b9ad563ee0911b635f934b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff4f0fe6b9357393c7e44338c4783cf0c19759/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "patch": "@@ -4329,6 +4329,11 @@ proc check_effective_target_aarch64_bti_hw { } {\n     } \"-O2\" ]\n }\n \n+# Return 1 if GCC was configured with --enable-standard-branch-protection\n+proc check_effective_target_default_branch_protection { } {\n+    return [check_configured_with \"enable-standard-branch-protection\"]\n+}\n+\n # Return 1 if the target supports the ARMv8.1 Adv.SIMD extension, 0\n # otherwise.  The test is valid for AArch64 and ARM.  Record the command\n # line options needed."}]}