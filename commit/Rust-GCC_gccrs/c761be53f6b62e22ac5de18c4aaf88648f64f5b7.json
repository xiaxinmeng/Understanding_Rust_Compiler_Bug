{"sha": "c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2MWJlNTNmNmI2MmUyMmFjNWRlMThjNGFhZjg4NjQ4ZjY0ZjViNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-24T17:11:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-24T17:11:44Z"}, "message": "c++: alias CTAD and aggregate deduction cand [PR98832]\n\nDuring alias CTAD, we're accidentally ignoring the aggregate deduction\ncandidate for the underlying template because this guide is added\nseparately via maybe_aggr_guide (which doesn't yet handle alias\ntemplates) instead of via deduction_guides_for (which does).  This patch\nmakes maybe_aggr_guide handle alias templates in a manner similar to\ndeduction_guides_for.\n\n\tPR c++/98832\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (maybe_aggr_guide): Handle alias templates appropriately.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/class-deduction-alias9.C: New test.", "tree": {"sha": "347c506d26541a427787e2c43d005fc4ca4facd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347c506d26541a427787e2c43d005fc4ca4facd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c761be53f6b62e22ac5de18c4aaf88648f64f5b7/comments", "author": null, "committer": null, "parents": [{"sha": "c06493dc30afbf65b14d783c7cd53f20877ef577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06493dc30afbf65b14d783c7cd53f20877ef577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06493dc30afbf65b14d783c7cd53f20877ef577"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "f73c7471a3369498ea497b9ba607702459d769e1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c761be53f6b62e22ac5de18c4aaf88648f64f5b7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c761be53f6b62e22ac5de18c4aaf88648f64f5b7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "patch": "@@ -28886,6 +28886,8 @@ is_spec_or_derived (tree etype, tree tmpl)\n   return !err;\n }\n \n+static tree alias_ctad_tweaks (tree, tree);\n+\n /* Return a C++20 aggregate deduction candidate for TYPE initialized from\n    INIT.  */\n \n@@ -28898,6 +28900,15 @@ maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n   if (init == NULL_TREE)\n     return NULL_TREE;\n \n+  if (DECL_ALIAS_TEMPLATE_P (tmpl))\n+    {\n+      tree under = DECL_ORIGINAL_TYPE (DECL_TEMPLATE_RESULT (tmpl));\n+      tree tinfo = get_template_info (under);\n+      if (tree guide = maybe_aggr_guide (TI_TEMPLATE (tinfo), init, args))\n+\treturn alias_ctad_tweaks (tmpl, guide);\n+      return NULL_TREE;\n+    }\n+\n   /* We might be creating a guide for a class member template, e.g.,\n \n        template<typename U> struct A {"}, {"sha": "5cc7b7c1a801e9f3b9bfe0c1f3fa5ab291599495", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias9.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c761be53f6b62e22ac5de18c4aaf88648f64f5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c761be53f6b62e22ac5de18c4aaf88648f64f5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias9.C?ref=c761be53f6b62e22ac5de18c4aaf88648f64f5b7", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/98832\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> struct X { U u; };\n+template<class T> using Y = X<int, T>;\n+Y y{0};"}]}