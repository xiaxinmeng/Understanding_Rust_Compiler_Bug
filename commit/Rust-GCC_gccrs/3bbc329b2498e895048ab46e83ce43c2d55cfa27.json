{"sha": "3bbc329b2498e895048ab46e83ce43c2d55cfa27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiYzMyOWIyNDk4ZTg5NTA0OGFiNDZlODNjZTQzYzJkNTVjZmEyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-19T14:45:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-19T14:45:38Z"}, "message": "re PR tree-optimization/91403 (GCC fails with ICE.)\n\n2019-08-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91403\n\t* tree-scalar-evolution.c (follow_ssa_edge_binary): Inline\n\tcases we can handle with tail-recursion...\n\t(follow_ssa_edge_expr): ... here.  Do so.\n\nFrom-SVN: r274672", "tree": {"sha": "c9bd978c5508866cbe409c289aedd141a1a974c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9bd978c5508866cbe409c289aedd141a1a974c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bbc329b2498e895048ab46e83ce43c2d55cfa27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbc329b2498e895048ab46e83ce43c2d55cfa27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbc329b2498e895048ab46e83ce43c2d55cfa27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbc329b2498e895048ab46e83ce43c2d55cfa27/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04e1749c557a5df14f8528efa451bb0e93afea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e1749c557a5df14f8528efa451bb0e93afea80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e1749c557a5df14f8528efa451bb0e93afea80"}], "stats": {"total": 79, "additions": 30, "deletions": 49}, "files": [{"sha": "ccc63c24a711d3d9b6c75b7a65f9ec3b2ccc8282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbc329b2498e895048ab46e83ce43c2d55cfa27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbc329b2498e895048ab46e83ce43c2d55cfa27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bbc329b2498e895048ab46e83ce43c2d55cfa27", "patch": "@@ -1,3 +1,10 @@\n+2019-08-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91403\n+\t* tree-scalar-evolution.c (follow_ssa_edge_binary): Inline\n+\tcases we can handle with tail-recursion...\n+\t(follow_ssa_edge_expr): ... here.  Do so.\n+\n 2019-08-19  Kito Cheng  <kito.cheng@sifive.com>\n \n \tPR target/91441"}, {"sha": "50b2700834ec6514e0cdf78a2858f4ade1f1a024", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 23, "deletions": 49, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbc329b2498e895048ab46e83ce43c2d55cfa27/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbc329b2498e895048ab46e83ce43c2d55cfa27/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=3bbc329b2498e895048ab46e83ce43c2d55cfa27", "patch": "@@ -925,32 +925,11 @@ follow_ssa_edge_binary (class loop *loop, gimple *at_stmt,\n \t\t  res = follow_ssa_edge_expr\n \t\t    (loop, at_stmt, rhs1, halting_phi,\n \t\t     evolution_of_loop, limit);\n-\t\t  if (res == t_true)\n-\t\t    ;\n-\t\t  else if (res == t_dont_know)\n-\t\t    *evolution_of_loop = chrec_dont_know;\n \t\t}\n-\n-\t      else if (res == t_dont_know)\n-\t\t*evolution_of_loop = chrec_dont_know;\n \t    }\n \n \t  else\n-\t    {\n-\t      /* Match an assignment under the form:\n-\t\t \"a = b + ...\".  */\n-\t      *evolution_of_loop = add_to_evolution\n-\t\t  (loop->num, chrec_convert (type, *evolution_of_loop,\n-\t\t\t\t\t     at_stmt),\n-\t\t   code, rhs1, at_stmt);\n-\t      res = follow_ssa_edge_expr\n-\t\t(loop, at_stmt, rhs0, halting_phi,\n-\t\t evolution_of_loop, limit);\n-\t      if (res == t_true)\n-\t\t;\t\n-\t      else if (res == t_dont_know)\n-\t\t*evolution_of_loop = chrec_dont_know;\n-\t    }\n+\t    gcc_unreachable ();  /* Handled in caller.  */\n \t}\n \n       else if (TREE_CODE (rhs1) == SSA_NAME)\n@@ -964,10 +943,6 @@ follow_ssa_edge_binary (class loop *loop, gimple *at_stmt,\n \t  res = follow_ssa_edge_expr\n \t    (loop, at_stmt, rhs1, halting_phi,\n \t     evolution_of_loop, limit);\n-\t  if (res == t_true)\n-\t    ;\n-\t  else if (res == t_dont_know)\n-\t    *evolution_of_loop = chrec_dont_know;\n \t}\n \n       else\n@@ -980,26 +955,7 @@ follow_ssa_edge_binary (class loop *loop, gimple *at_stmt,\n     case MINUS_EXPR:\n       /* This case is under the form \"opnd0 = rhs0 - rhs1\".  */\n       if (TREE_CODE (rhs0) == SSA_NAME)\n-\t{\n-\t  /* Match an assignment under the form:\n-\t     \"a = b - ...\".  */\n-\n-\t  /* We want only assignments of form \"name - name\" contribute to\n-\t     LIMIT, as the other cases do not necessarily contribute to\n-\t     the complexity of the expression.  */\n-\t  if (TREE_CODE (rhs1) == SSA_NAME)\n-\t    limit++;\n-\n-\t  *evolution_of_loop = add_to_evolution\n-\t      (loop->num, chrec_convert (type, *evolution_of_loop, at_stmt),\n-\t       MINUS_EXPR, rhs1, at_stmt);\n-\t  res = follow_ssa_edge_expr (loop, at_stmt, rhs0, halting_phi,\n-\t\t\t\t      evolution_of_loop, limit);\n-\t  if (res == t_true)\n-\t    ;\n-\t  else if (res == t_dont_know)\n-\t    *evolution_of_loop = chrec_dont_know;\n-\t}\n+\tgcc_unreachable (); /* Handled in caller.  */\n       else\n \t/* Otherwise, match an assignment under the form:\n \t   \"a = ... - ...\".  */\n@@ -1184,6 +1140,7 @@ follow_ssa_edge_expr (class loop *loop, gimple *at_stmt, tree expr,\n   /* For SSA_NAME look at the definition statement, handling\n      PHI nodes and otherwise expand appropriately for the expression\n      handling below.  */\n+tail_recurse:\n   if (TREE_CODE (expr) == SSA_NAME)\n     {\n       gimple *def = SSA_NAME_DEF_STMT (expr);\n@@ -1193,7 +1150,10 @@ follow_ssa_edge_expr (class loop *loop, gimple *at_stmt, tree expr,\n \n       /* Give up if the path is longer than the MAX that we allow.  */\n       if (limit > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_COMPLEXITY))\n-\treturn t_dont_know;\n+\t{\n+\t  *evolution_of_loop = chrec_dont_know;\n+\t  return t_dont_know;\n+\t}\n \n       if (gphi *phi = dyn_cast <gphi *>(def))\n \t{\n@@ -1303,14 +1263,28 @@ follow_ssa_edge_expr (class loop *loop, gimple *at_stmt, tree expr,\n       /* This case is under the form \"rhs0 +- rhs1\".  */\n       STRIP_USELESS_TYPE_CONVERSION (rhs0);\n       STRIP_USELESS_TYPE_CONVERSION (rhs1);\n+      if (TREE_CODE (rhs0) == SSA_NAME\n+\t  && (TREE_CODE (rhs1) != SSA_NAME || code == MINUS_EXPR))\n+\t{\n+\t  /* Match an assignment under the form:\n+\t     \"a = b +- ...\".\n+\t     Use tail-recursion for the simple case.  */\n+\t  *evolution_of_loop = add_to_evolution\n+\t      (loop->num, chrec_convert (type, *evolution_of_loop,\n+\t\t\t\t\t at_stmt),\n+\t       code, rhs1, at_stmt);\n+\t  expr = rhs0;\n+\t  goto tail_recurse;\n+\t}\n+      /* Else search for the SCC in both rhs0 and rhs1.  */\n       return follow_ssa_edge_binary (loop, at_stmt, type, rhs0, code, rhs1,\n \t\t\t\t     halting_phi, evolution_of_loop, limit);\n \n     case ASSERT_EXPR:\n       /* This assignment is of the form: \"a_1 = ASSERT_EXPR <a_2, ...>\"\n \t It must be handled as a copy assignment of the form a_1 = a_2.  */\n-      return follow_ssa_edge_expr (loop, at_stmt, ASSERT_EXPR_VAR (rhs0),\n-\t\t\t\t   halting_phi, evolution_of_loop, limit);\n+      expr = ASSERT_EXPR_VAR (rhs0);\n+      goto tail_recurse;\n \n     default:\n       return t_false;"}]}