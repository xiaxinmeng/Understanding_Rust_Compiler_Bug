{"sha": "b1eb28d14049e19baf772e6052a3cc388e85bd51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlYjI4ZDE0MDQ5ZTE5YmFmNzcyZTYwNTJhM2NjMzg4ZTg1YmQ1MQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2017-08-18T23:41:41Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-08-18T23:41:41Z"}, "message": "re PR target/80210 (ICE in in extract_insn, at recog.c:2311 on ppc64 for with __builtin_pow)\n\n\ngcc/\n\tPR target/80210\n\t* config/rs6000/rs6000.c (rs6000_activate_target_options): New function.\n\t(rs6000_set_current_function): Rewrite function to use it.\n\ngcc/testsuite/\n\tPR target/80210\n\t* gcc.target/powerpc/pr80210.c: New test.\n\nFrom-SVN: r251190", "tree": {"sha": "391d1fafdc7c31c8f7549a35ad395fdd54b481aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/391d1fafdc7c31c8f7549a35ad395fdd54b481aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1eb28d14049e19baf772e6052a3cc388e85bd51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb28d14049e19baf772e6052a3cc388e85bd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1eb28d14049e19baf772e6052a3cc388e85bd51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1eb28d14049e19baf772e6052a3cc388e85bd51/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b66d36128f7b02664f9d7971acce108db07ac347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66d36128f7b02664f9d7971acce108db07ac347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66d36128f7b02664f9d7971acce108db07ac347"}], "stats": {"total": 120, "additions": 75, "deletions": 45}, "files": [{"sha": "a632a4673ccf1b5093300f3f62843a0e3c448a59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1eb28d14049e19baf772e6052a3cc388e85bd51", "patch": "@@ -1,3 +1,9 @@\n+2017-08-18  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/80210\n+\t* config/rs6000/rs6000.c (rs6000_activate_target_options): New function.\n+\t(rs6000_set_current_function): Rewrite function to use it.\n+\n 2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/53037"}, {"sha": "5e694ffffe1dd45689f59f97fdf73feafec8c2ff", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 54, "deletions": 45, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b1eb28d14049e19baf772e6052a3cc388e85bd51", "patch": "@@ -36664,23 +36664,30 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n /* Remember the last target of rs6000_set_current_function.  */\n static GTY(()) tree rs6000_previous_fndecl;\n \n+/* Restore target's globals from NEW_TREE and invalidate the\n+   rs6000_previous_fndecl cache.  */\n+\n+static void\n+rs6000_activate_target_options (tree new_tree)\n+{\n+  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n+  if (TREE_TARGET_GLOBALS (new_tree))\n+    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+  else if (new_tree == target_option_default_node)\n+    restore_target_globals (&default_target_globals);\n+  else\n+    TREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n+  rs6000_previous_fndecl = NULL_TREE;\n+}\n+\n /* Establish appropriate back-end context for processing the function\n    FNDECL.  The argument might be NULL to indicate processing at top\n    level, outside of any function scope.  */\n static void\n rs6000_set_current_function (tree fndecl)\n {\n-  tree old_tree = (rs6000_previous_fndecl\n-\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (rs6000_previous_fndecl)\n-\t\t   : NULL_TREE);\n-\n-  tree new_tree = (fndecl\n-\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (fndecl)\n-\t\t   : NULL_TREE);\n-\n   if (TARGET_DEBUG_TARGET)\n     {\n-      bool print_final = false;\n       fprintf (stderr, \"\\n==================== rs6000_set_current_function\");\n \n       if (fndecl)\n@@ -36693,58 +36700,60 @@ rs6000_set_current_function (tree fndecl)\n \tfprintf (stderr, \", prev_fndecl (%p)\", (void *)rs6000_previous_fndecl);\n \n       fprintf (stderr, \"\\n\");\n+    }\n+\n+  /* Only change the context if the function changes.  This hook is called\n+     several times in the course of compiling a function, and we don't want to\n+     slow things down too much or call target_reinit when it isn't safe.  */\n+  if (fndecl == rs6000_previous_fndecl)\n+    return;\n+\n+  tree old_tree;\n+  if (rs6000_previous_fndecl == NULL_TREE)\n+    old_tree = target_option_current_node;\n+  else if (DECL_FUNCTION_SPECIFIC_TARGET (rs6000_previous_fndecl))\n+    old_tree = DECL_FUNCTION_SPECIFIC_TARGET (rs6000_previous_fndecl);\n+  else\n+    old_tree = target_option_default_node;\n+\n+  tree new_tree;\n+  if (fndecl == NULL_TREE)\n+    {\n+      if (old_tree != target_option_current_node)\n+\tnew_tree = target_option_current_node;\n+      else\n+\tnew_tree = NULL_TREE;\n+    }\n+  else\n+    {\n+      new_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n+      if (new_tree == NULL_TREE)\n+\tnew_tree = target_option_default_node;\n+    }\n+\n+  if (TARGET_DEBUG_TARGET)\n+    {\n       if (new_tree)\n \t{\n \t  fprintf (stderr, \"\\nnew fndecl target specific options:\\n\");\n \t  debug_tree (new_tree);\n-\t  print_final = true;\n \t}\n \n       if (old_tree)\n \t{\n \t  fprintf (stderr, \"\\nold fndecl target specific options:\\n\");\n \t  debug_tree (old_tree);\n-\t  print_final = true;\n \t}\n \n-      if (print_final)\n+      if (old_tree != NULL_TREE || new_tree != NULL_TREE)\n \tfprintf (stderr, \"--------------------\\n\");\n     }\n \n-  /* Only change the context if the function changes.  This hook is called\n-     several times in the course of compiling a function, and we don't want to\n-     slow things down too much or call target_reinit when it isn't safe.  */\n-  if (fndecl && fndecl != rs6000_previous_fndecl)\n-    {\n-      rs6000_previous_fndecl = fndecl;\n-      if (old_tree == new_tree)\n-\t;\n-\n-      else if (new_tree && new_tree != target_option_default_node)\n-\t{\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n+  if (new_tree && old_tree != new_tree)\n+    rs6000_activate_target_options (new_tree);\n \n-      else if (old_tree && old_tree != target_option_default_node)\n-\t{\n-\t  new_tree = target_option_current_node;\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else if (new_tree == target_option_default_node)\n-\t    restore_target_globals (&default_target_globals);\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n-    }\n+  if (fndecl)\n+    rs6000_previous_fndecl = fndecl;\n }\n \n \f"}, {"sha": "7fce23aaed17ad39d07f349059c5ef73034820a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1eb28d14049e19baf772e6052a3cc388e85bd51", "patch": "@@ -1,3 +1,8 @@\n+2017-08-18  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/80210\n+\t* gcc.target/powerpc/pr80210.c: New test.\n+\n 2017-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/81514"}, {"sha": "9e2f2d9da49814ef7f76d129d0b562e9cef58d16", "filename": "gcc/testsuite/gcc.target/powerpc/pr80210.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1eb28d14049e19baf772e6052a3cc388e85bd51/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80210.c?ref=b1eb28d14049e19baf772e6052a3cc388e85bd51", "patch": "@@ -0,0 +1,10 @@\n+/* Test for ICE arising from GCC target pragma.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+double\n+foo (double a)\n+{\n+  return __builtin_sqrt (a);\n+}\n+#pragma GCC target \"no-powerpc-gpopt\""}]}