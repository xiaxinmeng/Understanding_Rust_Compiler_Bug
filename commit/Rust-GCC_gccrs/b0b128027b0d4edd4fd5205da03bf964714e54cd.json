{"sha": "b0b128027b0d4edd4fd5205da03bf964714e54cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiMTI4MDI3YjBkNGVkZDRmZDUyMDVkYTAzYmY5NjQ3MTRlNTRjZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-13T04:46:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-13T04:46:58Z"}, "message": "abi_check.cc (hash<string>): Specialize.\n\n\n2002-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/abi_check.cc (hash<string>): Specialize.\n\tSimplify. Check compatible symbol versions.\n\t* config/linker-map.gnu: Clarify, explicitly export\n\tstd::codecvt::c* symbols.\n\n\t* testsuite/22_locale/static_members.cc (test02): Avoid null strings.\n\nFrom-SVN: r58091", "tree": {"sha": "a98b2060f13683f37747255ea0ece6aec3e78bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98b2060f13683f37747255ea0ece6aec3e78bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b128027b0d4edd4fd5205da03bf964714e54cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b128027b0d4edd4fd5205da03bf964714e54cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b128027b0d4edd4fd5205da03bf964714e54cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b128027b0d4edd4fd5205da03bf964714e54cd/comments", "author": null, "committer": null, "parents": [{"sha": "4ca1256f1ce4b7b45a21c43f798d29192ab6d489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1256f1ce4b7b45a21c43f798d29192ab6d489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca1256f1ce4b7b45a21c43f798d29192ab6d489"}], "stats": {"total": 182, "additions": 121, "deletions": 61}, "files": [{"sha": "94d81077b04ce8ae2db63a1c35ccbcc052a48f43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0b128027b0d4edd4fd5205da03bf964714e54cd", "patch": "@@ -1,3 +1,12 @@\n+2002-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/abi_check.cc (hash<string>): Specialize.\n+\tSimplify. Check compatible symbol versions.\n+\t* config/linker-map.gnu: Clarify, explicitly export\n+\tstd::codecvt::c* symbols.\n+\n+\t* testsuite/22_locale/static_members.cc (test02): Avoid null strings.\n+\n 2002-10-12  Jonathan Wakely  <jw@kayari.org>\n             Gabriel Dos Reis  <gdr@integrable-solutions.net>\n "}, {"sha": "0896c9ff1ab687335ae7e5160f2dc2f9e1cc5583", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=b0b128027b0d4edd4fd5205da03bf964714e54cd", "patch": "@@ -28,17 +28,27 @@ GLIBCPP_3.2 {\n     # All but the last are terminated with a semicolon.\n     extern \"C++\"\n     {\n-      std::[A-Za-k]*;\n+      std::[A-Za-b]*;\n+      std::c[a-n]*;\n+      std::co[a-c]*;\n+      std::codecvt_byname*;\n+      std::codecvt::[A-Za-b]*;\n+      std::codecvt::[A-Zd-z]*;\n+      std::codecvt_c;\n+      std::codecvt_w;\n+      std::co[e-z]*;\n+      std::c[p-z]*;\n+      std::c_[a-z]*;\n+      std::[A-Zd-k]*;\n       std::length_error*;\n       std::logic_error*;\n       std::locale::[A-Za-z]*;\n-      std::locale::_Impl*;\n+      std::locale::_[A-Ra-z]*;\n       std::locale::_S_classic;\n       std::locale::_S_global;\n       std::locale::_S_num_categories;\n-      std::locale::facet*;\n-      std::locale::id*;\n-      std::locale::locale*;\n+      std::locale::_S_normalize_category*;\n+      std::locale::_[T-Za-z]*;\n       std::[A-Zm-z]*;\n       std::__throw_*;\n       std::__basic_file*;\n@@ -53,10 +63,32 @@ GLIBCPP_3.2 {\n \n     # Names not in an 'extern' block are mangled names.\n \n-    _ZNSt6localeC1E*;\n-    _ZNSt6locale11_M_coalesceERKS_S1_j;\n-    _ZNSt6locale21_S_normalize_categoryEj;\n+    # std::locale destructors\n     _ZNSt6localeD*;\n+\t \n+    # std::codecvt<char> members.\n+    _ZNKSt7codecvtIcc11__mbstate_tE*;\n+    # std::codecvt<char>::~codecvt\n+    _ZNSt7codecvtIcc11__mbstate_tED*;\n+    # std::codecvt<char>::codecvt default\n+    _ZNSt7codecvtIcc11__mbstate_tEC1Ej;\n+    _ZNSt7codecvtIcc11__mbstate_tEC2Ej;\n+    # std::codecvt<char>::id\n+    _ZNSt7codecvtIcc11__mbstate_tE2idE;\n+\n+    # std::codecvt<wchar_t> members.\n+    _ZNKSt7codecvtIwc11__mbstate_tE*;\n+    # std::codecvt<wchar_t>::~codecvt\n+    _ZNSt7codecvtIwc11__mbstate_tED*;\n+    # std::codecvt<wchar_t>::codecvt default\n+    _ZNSt7codecvtIwc11__mbstate_tEC1Ej;\n+    _ZNSt7codecvtIwc11__mbstate_tEC2Ej;\n+    # std::codecvt<wchar_t>::id\n+    _ZNSt7codecvtIwc11__mbstate_tE2idE;\n+\n+     # std::use_facet<codecvt>\n+    _ZSt9use_facetISt7codecvtIcc11__mbstate_tEERKT_RKSt6locale;\n+    _ZSt9use_facetISt7codecvtIwc11__mbstate_tEERKT_RKSt6locale;\n \n     # std::has_facet*\n     _ZSt9has_facet*;"}, {"sha": "dd020340b7616d3bc2ab8fedcbbef86fd557c84d", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=b0b128027b0d4edd4fd5205da03bf964714e54cd", "patch": "@@ -74,7 +74,6 @@ void test02()\n   const locale loc_mx(mx.c_str());\n \n   // Get underlying current locale and environment settings.\n-  const string lc_all_orig = std::setlocale(LC_ALL, NULL);\n   const locale env_orig(\"\");\n \n   // setlocale to en_PH\n@@ -84,8 +83,9 @@ void test02()\n   VERIFY( loc_env == env_orig );\n \n   locale global_orig = locale::global(loc_mx);\n-  string lc_all_mx = std::setlocale(LC_ALL, NULL);\n-  VERIFY( lc_all_mx == mx.c_str() );\n+  const char* lc_all_mx = std::setlocale(LC_ALL, NULL);\n+  if (lc_all_mx)\n+    VERIFY( mx == lc_all_mx );\n \n   // Restore global settings.\n   locale::global(global_orig);"}, {"sha": "4018cd5377ee956c36aad2c7eed88662ca562b9e", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 69, "deletions": 50, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b128027b0d4edd4fd5205da03bf964714e54cd/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=b0b128027b0d4edd4fd5205da03bf964714e54cd", "patch": "@@ -46,17 +46,35 @@ struct symbol_info\n   enum category { none, function, object, error };\n   category \ttype;\n   std::string \tname;\n-  std::string \tname_demangled;\n-  std::string \tversion;\n+  std::string \tdemangled_name;\n   int \t\tsize;\n+  std::string \tversion_name;\n \n   symbol_info() : type(none), size(0) { }\n \n   symbol_info(const symbol_info& other) \n-  : type(other.type), name(other.name), name_demangled(other.name_demangled), \n-  version(other.version), size(other.size) { }\n+  : type(other.type), name(other.name), demangled_name(other.demangled_name), \n+   size(other.size), version_name(other.version_name) { }\n };\n \n+namespace __gnu_cxx\n+{\n+  using namespace std;\n+\n+  template<> \n+    struct hash<string>\n+    {\n+      size_t operator()(const string& s) const \n+      { \n+\tconst collate<char>& c = use_facet<collate<char> >(locale::classic());\n+\treturn c.hash(s.c_str(), s.c_str() + s.size());\n+      }\n+    }; \n+}\n+\n+typedef std::deque<std::string>\t\t\t\tsymbol_names;\n+typedef __gnu_cxx::hash_map<std::string, symbol_info> \tsymbol_infos;\n+\n bool \n check_compatible(const symbol_info& lhs, const symbol_info& rhs, \n \t\t bool verbose = false)\n@@ -93,8 +111,7 @@ check_compatible(const symbol_info& lhs, const symbol_info& rhs,\n \t}\n     }\n \n-  // Expect something more sophisticated eventually.\n-  if (lhs.version != rhs.version)\n+  if (lhs.version_name != rhs.version_name)\n     {\n       ret = false;\n       if (verbose)\n@@ -106,19 +123,6 @@ check_compatible(const symbol_info& lhs, const symbol_info& rhs,\n   return ret;\n }\n \n-template<typename _CharT, typename _Traits>\n-  std::basic_ostream<_CharT, _Traits>&\n-  operator<<(std::basic_ostream<_CharT, _Traits>& os, symbol_info& si)\n-  {\n-    using namespace std;\n-    os << si.type << endl;\n-    os << si.name << endl;\n-    os << si.name_demangled << endl;\n-    os << si.version << endl;\n-    os << si.size << endl;\n-    return os;\n-  }\n- \n const char*\n demangle(const std::string& mangled)\n {\n@@ -203,7 +207,7 @@ line_to_symbol_info(std::string& input, symbol_info& output)\n       input.erase(input.begin(), input.begin() + n + 1);\n \n       // Set version name.\n-      output.version = input;\n+      output.version_name = input;\n     }\n   else\n     {\n@@ -213,12 +217,9 @@ line_to_symbol_info(std::string& input, symbol_info& output)\n     }\n \n   // Set the demangled name.\n-  output.name_demangled = demangle(output.name);\n+  output.demangled_name = demangle(output.name);\n }\n \n-typedef std::deque<std::string>\t\t\t\tsymbol_names;\n-typedef __gnu_cxx::hash_map<const char*, symbol_info> \tsymbol_infos;\n-\n void\n create_symbol_data(const char* file, symbol_infos& symbols, \n \t\t   symbol_names& names)\n@@ -238,7 +239,7 @@ create_symbol_data(const char* file, symbol_infos& symbols,\n \t{\n \t  symbol_info symbol;\n \t  line_to_symbol_info(line, symbol);\n-\t  symbols[symbol.name.c_str()] = symbol;\n+\t  symbols[symbol.name] = symbol;\n \t  names.push_back(symbol.name);\n \t  line = empty;\n \t}\n@@ -256,7 +257,7 @@ report_symbol_info(const symbol_info& symbol, std::size_t n)\n \n   // Add any other information to display here.\n   cout << tab << \"demangled symbol\"<< endl;\n-  cout << tab << symbol.name_demangled << endl;\n+  cout << tab << symbol.demangled_name << endl;\n \n   cout << endl;\n }\n@@ -279,10 +280,10 @@ main(int argc, char** argv)\n       exit(1);\n     }\n \n+\n+  // Quick sanity/setup check for arguments.\n   const char* test_file = argv[2];\n   const char* baseline_file = argv[3];\n-\n-  // Quick sanity/setup check\n   if (access(test_file, R_OK) != 0)\n     {\n       cerr << \"Cannot read symbols file \" << test_file\n@@ -303,7 +304,7 @@ main(int argc, char** argv)\n   create_symbol_data(baseline_file, baseline_symbols, baseline_names);\n   create_symbol_data(test_file, test_symbols, test_names);\n \n-  // More sanity checking.\n+  //  Sanity check results.\n   const symbol_names::size_type baseline_size = baseline_names.size();\n   const symbol_names::size_type test_size = test_names.size();\n   if (!baseline_size || !test_size)\n@@ -315,53 +316,71 @@ main(int argc, char** argv)\n   // Sort out names.\n   // Assuming baseline_names, test_names are both unique w/ no duplicates.\n   //\n-  // The pairs of names in shared_names are needed to do lookups on\n-  // the hash tables of common symbols to do compares.\n-  //\n   // The names added to missing_names are baseline_names not found in\n   // test_names \n   // -> symbols that have been deleted.\n   //\n-  // The names left in test_names are names not in baseline_names\n+  // The names added to added_names are test_names are names not in\n+  // baseline_names\n   // -> symbols that have been added.\n-  typedef pair<string, string> string_pair;\n-  vector<string_pair> shared_names;\n+  symbol_names shared_names;\n   symbol_names missing_names;\n+  symbol_names added_names = test_names;\n   for (size_t i = 0; i < baseline_size; ++i)\n     {\n-      symbol_names::iterator end = test_names.end();\n-      symbol_names::iterator it = find(test_names.begin(), end, \n-\t\t\t\t       baseline_names[i]);\n+      string what(baseline_names[i]);\n+      symbol_names::iterator end = added_names.end();\n+      symbol_names::iterator it = find(added_names.begin(), end, what);\n       if (it != end)\n \t{\n \t  // Found.\n-\t  shared_names.push_back(string_pair(baseline_names[i], *it));\n-\t  test_names.erase(it);\n+\t  shared_names.push_back(what);\n+\t  added_names.erase(it);\n \t}\n       else\n-\tmissing_names.push_back(baseline_names[i]);\n+\tmissing_names.push_back(what);\n     }\n \n-  // Check common names for detailed compatibility.\n-  const vector<string_pair>::size_type shared_size = shared_names.size();\n+  // Check shared names for compatibility.\n   typedef pair<symbol_info, symbol_info> symbol_pair;\n   vector<symbol_pair> incompatible;\n-  for (size_t i = 0; i < shared_size; ++i)\n+  for (size_t i = 0; i < shared_names.size(); ++i)\n     {\n-      symbol_info base = baseline_symbols[shared_names[i].first.c_str()];\n-      symbol_info test = test_symbols[shared_names[i].second.c_str()];\n+      symbol_info base = baseline_symbols[shared_names[i]];\n+      symbol_info test = test_symbols[shared_names[i]];\n       if (!check_compatible(base, test))\n \tincompatible.push_back(symbol_pair(base, test));\n     }\n \n+  // Check added names for compatibility.\n+  for (size_t i = 0; i < added_names.size(); ++i)\n+    {\n+      vector<string> compatible_versions;\n+      compatible_versions.push_back(\"GLIBCPP_3.2.1\");\n+\n+      symbol_info test = test_symbols[added_names[i]];\n+      vector<string>::iterator end = compatible_versions.end();\n+\n+      // Check version names for compatibility...\n+      vector<string>::iterator it1 = find(compatible_versions.begin(), end, \n+\t\t\t\t\t  test.version_name);\n+\n+      // Check for weak label.\n+      vector<string>::iterator it2 = find(compatible_versions.begin(), end, \n+\t\t\t\t\t  test.name);\n+\n+      if (it1 == end && it2 == end)\n+\tincompatible.push_back(symbol_pair(test, test));\n+    }\n+\n   // Report results.\n-  cout << test_names.size() << \" added symbols \" << endl;\n-  for (size_t j = 0; j < test_names.size() ; ++j)\n-    report_symbol_info(test_symbols[test_names[j].c_str()], j + 1);\n+  cout << added_names.size() << \" added symbols \" << endl;\n+  for (size_t j = 0; j < added_names.size() ; ++j)\n+    report_symbol_info(test_symbols[added_names[j]], j + 1);\n \n   cout << missing_names.size() << \" missing symbols \" << endl;\n   for (size_t j = 0; j < missing_names.size() ; ++j)\n-    report_symbol_info(baseline_symbols[missing_names[j].c_str()], j + 1);\n+    report_symbol_info(baseline_symbols[missing_names[j]], j + 1);\n \n   cout << incompatible.size() << \" incompatible symbols \" << endl;\n   for (size_t j = 0; j < incompatible.size() ; ++j)"}]}