{"sha": "005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1Y2ZmNGUyZWNiZDVjNGUyZWY5NzhmZTQ4NDJmYTNjOGM3OWY0Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-12-08T15:49:46Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-12-08T15:54:22Z"}, "message": "Fortran: Add 'omp scan' support of OpenMP 5.0\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses, show_omp_node,\n\tshow_code_node): Handle OMP SCAN.\n\t* gfortran.h (enum gfc_statement): Add ST_OMP_SCAN.\n\t(enum): Add OMP_LIST_SCAN_IN and OMP_LIST_SCAN_EX.\n\t(enum gfc_exec_op): Add EXEC_OMP_SCAN.\n\t* match.h (gfc_match_omp_scan): New prototype.\n\t* openmp.c (gfc_match_omp_scan): New.\n\t(gfc_match_omp_taskgroup): Cleanup.\n\t(resolve_omp_clauses, gfc_resolve_omp_do_blocks,\n\tomp_code_to_statement, gfc_resolve_omp_directive): Handle 'omp scan'.\n\t* parse.c (decode_omp_directive, next_statement,\n\tgfc_ascii_statement): Likewise.\n\t* resolve.c (gfc_resolve_code): Handle EXEC_OMP_SCAN.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_trans_omp_do,\n\tgfc_split_omp_clauses): Handle 'omp scan'.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/scan-1.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/reduction4.f90: Update; move FE some tests to ...\n\t* gfortran.dg/gomp/reduction6.f90: ... this new test and ...\n\t* gfortran.dg/gomp/reduction7.f90: ... this new test.\n\t* gfortran.dg/gomp/reduction5.f90: Add dg-error.\n\t* gfortran.dg/gomp/scan-1.f90: New test.\n\t* gfortran.dg/gomp/scan-2.f90: New test.\n\t* gfortran.dg/gomp/scan-3.f90: New test.\n\t* gfortran.dg/gomp/scan-4.f90: New test.\n\t* gfortran.dg/gomp/scan-5.f90: New test.\n\t* gfortran.dg/gomp/scan-6.f90: New test.\n\t* gfortran.dg/gomp/scan-7.f90: New test.", "tree": {"sha": "fd67e840cf2cc4a475ce8a08dd25ed9cdf595d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd67e840cf2cc4a475ce8a08dd25ed9cdf595d5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e401db7bfd8cf86d3833805a81b1252884eb1c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e401db7bfd8cf86d3833805a81b1252884eb1c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e401db7bfd8cf86d3833805a81b1252884eb1c9d"}], "stats": {"total": 710, "additions": 669, "deletions": 41}, "files": [{"sha": "b3fa1785b14eeca406a577706fc9b804778dec74", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -1600,6 +1600,8 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n \t  case OMP_LIST_USE_DEVICE_PTR: type = \"USE_DEVICE_PTR\"; break;\n \t  case OMP_LIST_USE_DEVICE_ADDR: type = \"USE_DEVICE_ADDR\"; break;\n \t  case OMP_LIST_NONTEMPORAL: type = \"NONTEMPORAL\"; break;\n+\t  case OMP_LIST_SCAN_IN: type = \"INCLUSIVE\"; break;\n+\t  case OMP_LIST_SCAN_EX: type = \"EXCLUSIVE\"; break;\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n@@ -1803,6 +1805,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO_SIMD: name = \"PARALLEL DO SIMD\"; break;\n     case EXEC_OMP_PARALLEL_SECTIONS: name = \"PARALLEL SECTIONS\"; break;\n     case EXEC_OMP_PARALLEL_WORKSHARE: name = \"PARALLEL WORKSHARE\"; break;\n+    case EXEC_OMP_SCAN: name = \"SCAN\"; break;\n     case EXEC_OMP_SECTIONS: name = \"SECTIONS\"; break;\n     case EXEC_OMP_SIMD: name = \"SIMD\"; break;\n     case EXEC_OMP_SINGLE: name = \"SINGLE\"; break;\n@@ -1873,6 +1876,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n+    case EXEC_OMP_SCAN:\n     case EXEC_OMP_SECTIONS:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_SINGLE:\n@@ -1933,7 +1937,7 @@ show_omp_node (int level, gfc_code *c)\n   if (c->op == EXEC_OACC_CACHE || c->op == EXEC_OACC_UPDATE\n       || c->op == EXEC_OACC_ENTER_DATA || c->op == EXEC_OACC_EXIT_DATA\n       || c->op == EXEC_OMP_TARGET_UPDATE || c->op == EXEC_OMP_TARGET_ENTER_DATA\n-      || c->op == EXEC_OMP_TARGET_EXIT_DATA\n+      || c->op == EXEC_OMP_TARGET_EXIT_DATA || c->op == EXEC_OMP_SCAN\n       || (c->op == EXEC_OMP_ORDERED && c->block == NULL))\n     return;\n   if (c->op == EXEC_OMP_SECTIONS || c->op == EXEC_OMP_PARALLEL_SECTIONS)\n@@ -3073,6 +3077,7 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n+    case EXEC_OMP_SCAN:\n     case EXEC_OMP_SECTIONS:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_SINGLE:"}, {"sha": "41fed15919f77e1f7d7866b502ceaf59e8c1b00e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -261,7 +261,7 @@ enum gfc_statement\n   ST_OMP_TARGET_PARALLEL_DO_SIMD, ST_OMP_END_TARGET_PARALLEL_DO_SIMD,\n   ST_OMP_TARGET_ENTER_DATA, ST_OMP_TARGET_EXIT_DATA,\n   ST_OMP_TARGET_SIMD, ST_OMP_END_TARGET_SIMD,\n-  ST_OMP_TASKLOOP, ST_OMP_END_TASKLOOP,\n+  ST_OMP_TASKLOOP, ST_OMP_END_TASKLOOP, ST_OMP_SCAN,\n   ST_OMP_TASKLOOP_SIMD, ST_OMP_END_TASKLOOP_SIMD, ST_OMP_ORDERED_DEPEND,\n   ST_OMP_REQUIRES, ST_PROCEDURE, ST_GENERIC, ST_CRITICAL, ST_END_CRITICAL,\n   ST_GET_FCN_CHARACTERISTICS, ST_LOCK, ST_UNLOCK, ST_EVENT_POST,\n@@ -1277,6 +1277,8 @@ enum\n   OMP_LIST_MAP,\n   OMP_LIST_TO,\n   OMP_LIST_FROM,\n+  OMP_LIST_SCAN_IN,\n+  OMP_LIST_SCAN_EX,\n   OMP_LIST_REDUCTION,\n   OMP_LIST_REDUCTION_INSCAN,\n   OMP_LIST_REDUCTION_TASK,\n@@ -2697,7 +2699,7 @@ enum gfc_exec_op\n   EXEC_OMP_TARGET_ENTER_DATA, EXEC_OMP_TARGET_EXIT_DATA,\n   EXEC_OMP_TARGET_PARALLEL, EXEC_OMP_TARGET_PARALLEL_DO,\n   EXEC_OMP_TARGET_PARALLEL_DO_SIMD, EXEC_OMP_TARGET_SIMD,\n-  EXEC_OMP_TASKLOOP, EXEC_OMP_TASKLOOP_SIMD\n+  EXEC_OMP_TASKLOOP, EXEC_OMP_TASKLOOP_SIMD, EXEC_OMP_SCAN\n };\n \n typedef struct gfc_code"}, {"sha": "c771448c184c35f4a8e8d2d96f4cbe567408d076", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -176,6 +176,7 @@ match gfc_match_omp_parallel_do_simd (void);\n match gfc_match_omp_parallel_sections (void);\n match gfc_match_omp_parallel_workshare (void);\n match gfc_match_omp_requires (void);\n+match gfc_match_omp_scan (void);\n match gfc_match_omp_sections (void);\n match gfc_match_omp_simd (void);\n match gfc_match_omp_single (void);"}, {"sha": "b1f009785e30efa9964dcc04053ee9b6b5b5c54b", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 93, "deletions": 9, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -3882,6 +3882,42 @@ gfc_match_omp_requires (void)\n }\n \n \n+match\n+gfc_match_omp_scan (void)\n+{\n+  bool incl;\n+  gfc_omp_clauses *c = gfc_get_omp_clauses ();\n+  gfc_gobble_whitespace ();\n+  if ((incl = (gfc_match (\"inclusive\") == MATCH_YES))\n+      || gfc_match (\"exclusive\") == MATCH_YES)\n+    {\n+      if (gfc_match_omp_variable_list (\" (\", &c->lists[incl ? OMP_LIST_SCAN_IN\n+\t\t\t\t\t\t\t    : OMP_LIST_SCAN_EX],\n+\t\t\t\t       false) != MATCH_YES)\n+\t{\n+\t  gfc_free_omp_clauses (c);\n+\t  return MATCH_ERROR;\n+\t}\n+    }\n+  else\n+    {\n+      gfc_error (\"Expected INCLUSIVE or EXCLUSIVE clause at %C\");\n+      gfc_free_omp_clauses (c);\n+      return MATCH_ERROR;\n+    }\n+  if (gfc_match_omp_eos () != MATCH_YES)\n+    {\n+      gfc_error (\"Unexpected junk after !$OMP SCAN at %C\");\n+      gfc_free_omp_clauses (c);\n+      return MATCH_ERROR;\n+    }\n+\n+  new_st.op = EXEC_OMP_SCAN;\n+  new_st.ext.omp_clauses = c;\n+  return MATCH_YES;\n+}\n+\n+\n match\n gfc_match_omp_sections (void)\n {\n@@ -4296,13 +4332,7 @@ gfc_match_omp_barrier (void)\n match\n gfc_match_omp_taskgroup (void)\n {\n-  gfc_omp_clauses *c;\n-  if (gfc_match_omp_clauses (&c, OMP_CLAUSE_TASK_REDUCTION, true, true)\n-      != MATCH_YES)\n-    return MATCH_ERROR;\n-  new_st.op = EXEC_OMP_TASKGROUP;\n-  new_st.ext.omp_clauses = c;\n-  return MATCH_YES;\n+  return match_omp (EXEC_OMP_TASKGROUP, OMP_CLAUSE_TASK_REDUCTION);\n }\n \n \n@@ -4628,7 +4658,8 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   static const char *clause_names[]\n     = { \"PRIVATE\", \"FIRSTPRIVATE\", \"LASTPRIVATE\", \"COPYPRIVATE\", \"SHARED\",\n \t\"COPYIN\", \"UNIFORM\", \"ALIGNED\", \"LINEAR\", \"DEPEND\", \"MAP\",\n-\t\"TO\", \"FROM\", \"REDUCTION\", \"REDUCTION\" /*inscan*/, \"REDUCTION\" /*task*/,\n+\t\"TO\", \"FROM\", \"INCLUSIVE\", \"EXCLUSIVE\",\n+\t\"REDUCTION\", \"REDUCTION\" /*inscan*/, \"REDUCTION\" /*task*/,\n \t\"IN_REDUCTION\", \"TASK_REDUCTION\",\n \t\"DEVICE_RESIDENT\", \"LINK\", \"USE_DEVICE\",\n \t\"CACHE\", \"IS_DEVICE_PTR\", \"USE_DEVICE_PTR\", \"USE_DEVICE_ADDR\",\n@@ -4865,6 +4896,15 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t  gfc_error (\"Object %qs is not a variable at %L\", n->sym->name,\n \t\t     &n->where);\n       }\n+  if (omp_clauses->lists[OMP_LIST_REDUCTION_INSCAN]\n+      && code->op != EXEC_OMP_DO\n+      && code->op != EXEC_OMP_SIMD\n+      && code->op != EXEC_OMP_DO_SIMD\n+      && code->op != EXEC_OMP_PARALLEL_DO\n+      && code->op != EXEC_OMP_PARALLEL_DO_SIMD)\n+    gfc_error (\"%<inscan%> REDUCTION clause on construct other than DO, SIMD, \"\n+\t       \"DO SIMD, PARALLEL DO, PARALLEL DO SIMD at %L\",\n+\t       &omp_clauses->lists[OMP_LIST_REDUCTION_INSCAN]->where);\n \n   for (list = 0; list < OMP_LIST_NUM; list++)\n     if (list != OMP_LIST_FIRSTPRIVATE\n@@ -4982,6 +5022,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \tn->sym->mark = 1;\n     }\n \n+  bool has_inscan = false, has_notinscan = false;\n   for (list = 0; list < OMP_LIST_NUM; list++)\n     if ((n = omp_clauses->lists[list]) != NULL)\n       {\n@@ -5289,6 +5330,17 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\t\t     || list == OMP_LIST_REDUCTION_TASK\n \t\t\t\t     || list == OMP_LIST_IN_REDUCTION\n \t\t\t\t     || list == OMP_LIST_TASK_REDUCTION);\n+\t\tif (list == OMP_LIST_REDUCTION_INSCAN)\n+\t\t  has_inscan = true;\n+\t\telse if (is_reduction)\n+\t\t  has_notinscan = true;\n+\t\tif (has_inscan && has_notinscan && is_reduction)\n+\t\t  {\n+\t\t    gfc_error (\"%<inscan%> and non-%<inscan%> %<reduction%> \"\n+\t\t\t       \"clauses on the same construct %L\",\n+\t\t\t       &n->where);\n+\t\t    break;\n+\t\t  }\n \t\tif (n->sym->attr.threadprivate)\n \t\t  gfc_error (\"THREADPRIVATE object %qs in %s clause at %L\",\n \t\t\t     n->sym->name, name, &n->where);\n@@ -6151,6 +6203,28 @@ gfc_resolve_omp_do_blocks (gfc_code *code, gfc_namespace *ns)\n \t}\n       if (i < omp_current_do_collapse || omp_current_do_collapse <= 0)\n \tomp_current_do_collapse = 1;\n+      if (code->ext.omp_clauses->lists[OMP_LIST_REDUCTION_INSCAN])\n+\t{\n+\t  locus *loc\n+\t    = &code->ext.omp_clauses->lists[OMP_LIST_REDUCTION_INSCAN]->where;\n+\t  if (code->ext.omp_clauses->ordered)\n+\t    gfc_error (\"ORDERED clause specified together with %<inscan%> \"\n+\t\t       \"REDUCTION clause at %L\", loc);\n+\t  if (code->ext.omp_clauses->sched_kind != OMP_SCHED_NONE)\n+\t    gfc_error (\"SCHEDULE clause specified together with %<inscan%> \"\n+\t\t       \"REDUCTION clause at %L\", loc);\n+\t  if (!c->block\n+\t      || !c->block->next\n+\t      || !c->block->next->next\n+\t      || c->block->next->next->op != EXEC_OMP_SCAN\n+\t      || !c->block->next->next->next\n+\t      || c->block->next->next->next->next)\n+\t    gfc_error (\"With INSCAN at %L, expected loop body with !$OMP SCAN \"\n+\t\t       \"between two structured-block-sequences\", loc);\n+\t  else\n+\t    /* Mark as checked; flag will be unset later.  */\n+\t    c->block->next->next->ext.omp_clauses->if_present = true;\n+\t}\n     }\n   gfc_resolve_blocks (code->block, ns);\n   omp_current_do_collapse = 0;\n@@ -6534,6 +6608,8 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_DISTRIBUTE_SIMD;\n     case EXEC_OMP_DO_SIMD:\n       return ST_OMP_DO_SIMD;\n+    case EXEC_OMP_SCAN:\n+      return ST_OMP_SCAN;\n     case EXEC_OMP_SIMD:\n       return ST_OMP_SIMD;\n     case EXEC_OMP_TARGET:\n@@ -6972,7 +7048,7 @@ gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n    of each directive.  */\n \n void\n-gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n+gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n {\n   resolve_omp_directive_inside_oacc_region (code);\n \n@@ -7046,6 +7122,14 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n \tgfc_error (\"OMP CRITICAL at %L with HINT clause requires a NAME, \"\n \t\t   \"except when omp_sync_hint_none is used\", &code->loc);\n       break;\n+    case EXEC_OMP_SCAN:\n+      /* Flag is only used to checking, hence, it is unset afterwards.  */\n+      if (!code->ext.omp_clauses->if_present)\n+\tgfc_error (\"Unexpected !$OMP SCAN at %L outside loop construct with \"\n+\t\t   \"%<inscan%> REDUCTION clause\", &code->loc);\n+      code->ext.omp_clauses->if_present = false;\n+      resolve_omp_clauses (code, code->ext.omp_clauses, ns);\n+      break;\n     default:\n       break;\n     }"}, {"sha": "fe0fffd0d1ad8e273230a7ce66a4d9f5ff65fb64", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -999,6 +999,7 @@ decode_omp_directive (void)\n       matcho (\"requires\", gfc_match_omp_requires, ST_OMP_REQUIRES);\n       break;\n     case 's':\n+      matcho (\"scan\", gfc_match_omp_scan, ST_OMP_SCAN);\n       matcho (\"sections\", gfc_match_omp_sections, ST_OMP_SECTIONS);\n       matcho (\"section\", gfc_match_omp_eos_error, ST_OMP_SECTION);\n       matcho (\"single\", gfc_match_omp_single, ST_OMP_SINGLE);\n@@ -1590,7 +1591,7 @@ next_statement (void)\n   case ST_OMP_CANCEL: case ST_OMP_CANCELLATION_POINT: \\\n   case ST_OMP_TARGET_UPDATE: case ST_OMP_TARGET_ENTER_DATA: \\\n   case ST_OMP_TARGET_EXIT_DATA: case ST_OMP_ORDERED_DEPEND: \\\n-  case ST_ERROR_STOP: case ST_SYNC_ALL: \\\n+  case ST_ERROR_STOP: case ST_OMP_SCAN: case ST_SYNC_ALL: \\\n   case ST_SYNC_IMAGES: case ST_SYNC_MEMORY: case ST_LOCK: case ST_UNLOCK: \\\n   case ST_FORM_TEAM: case ST_CHANGE_TEAM: \\\n   case ST_END_TEAM: case ST_SYNC_TEAM: \\\n@@ -2447,6 +2448,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_REQUIRES:\n       p = \"!$OMP REQUIRES\";\n       break;\n+    case ST_OMP_SCAN:\n+      p = \"!$OMP SCAN\";\n+      break;\n     case ST_OMP_SECTIONS:\n       p = \"!$OMP SECTIONS\";\n       break;"}, {"sha": "327dffbebf201d229cc221a75cbb27e3bbd0024d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -12184,6 +12184,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_ORDERED:\n+\tcase EXEC_OMP_SCAN:\n \tcase EXEC_OMP_SECTIONS:\n \tcase EXEC_OMP_SIMD:\n \tcase EXEC_OMP_SINGLE:"}, {"sha": "d5bccb80f0317c07637f281a1a302c8979a7b523", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -231,6 +231,7 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n+    case EXEC_OMP_SCAN:\n     case EXEC_OMP_SECTIONS:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_SINGLE:"}, {"sha": "ae290648b9975df7238c3ffaeb612abb747f2c98", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -2334,6 +2334,12 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \tcase OMP_LIST_NONTEMPORAL:\n \t  clause_code = OMP_CLAUSE_NONTEMPORAL;\n \t  goto add_clause;\n+\tcase OMP_LIST_SCAN_IN:\n+\t  clause_code = OMP_CLAUSE_INCLUSIVE;\n+\t  goto add_clause;\n+\tcase OMP_LIST_SCAN_EX:\n+\t  clause_code = OMP_CLAUSE_EXCLUSIVE;\n+\t  goto add_clause;\n \n \tadd_clause:\n \t  omp_clauses\n@@ -4707,7 +4713,31 @@ gfc_trans_omp_do (gfc_code *code, gfc_exec_op op, stmtblock_t *pblock,\n   code->exit_label = NULL_TREE;\n \n   /* Main loop body.  */\n-  tmp = gfc_trans_omp_code (code->block->next, true);\n+  if (clauses->lists[OMP_LIST_REDUCTION_INSCAN])\n+    {\n+      gcc_assert (code->block->next->next->op == EXEC_OMP_SCAN);\n+      gcc_assert (code->block->next->next->next->next == NULL);\n+      locus *cloc = &code->block->next->next->loc;\n+      location_t loc = gfc_get_location (cloc);\n+\n+      gfc_code code2 = *code->block->next;\n+      code2.next = NULL;\n+      tmp = gfc_trans_code (&code2);\n+      tmp = build2 (OMP_SCAN, void_type_node, tmp, NULL_TREE);\n+      SET_EXPR_LOCATION (tmp, loc);\n+      gfc_add_expr_to_block (&body, tmp);\n+      input_location = loc;\n+      tree c = gfc_trans_omp_clauses (&body,\n+\t\t\t\t      code->block->next->next->ext.omp_clauses,\n+\t\t\t\t      *cloc);\n+      code2 = *code->block->next->next->next;\n+      code2.next = NULL;\n+      tmp = gfc_trans_code (&code2);\n+      tmp = build2 (OMP_SCAN, void_type_node, tmp, c);\n+      SET_EXPR_LOCATION (tmp, loc);\n+    }\n+  else\n+    tmp = gfc_trans_omp_code (code->block->next, true);\n   gfc_add_expr_to_block (&body, tmp);\n \n   /* Label for cycle statements (if needed).  */\n@@ -5234,13 +5264,15 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n       /* Reduction is allowed on simd, do, parallel and teams.\n \t Duplicate it on all of them, but omit on do if\n-\t parallel is present.  */\n+\t parallel is present; additionally, inscan applies to do/simd only.  */\n       for (int i = OMP_LIST_REDUCTION; i <= OMP_LIST_REDUCTION_TASK; i++)\n \t{\n-\t  if (mask & GFC_OMP_MASK_TEAMS)\n+\t  if (mask & GFC_OMP_MASK_TEAMS\n+\t      && i != OMP_LIST_REDUCTION_INSCAN)\n \t    clausesa[GFC_OMP_SPLIT_TEAMS].lists[i]\n \t      = code->ext.omp_clauses->lists[i];\n-\t  if (mask & GFC_OMP_MASK_PARALLEL)\n+\t  if (mask & GFC_OMP_MASK_PARALLEL\n+\t      && i != OMP_LIST_REDUCTION_INSCAN)\n \t    clausesa[GFC_OMP_SPLIT_PARALLEL].lists[i]\n \t      = code->ext.omp_clauses->lists[i];\n \t  else if (mask & GFC_OMP_MASK_DO)"}, {"sha": "812be323b2eaab1f94c5ae5ac032fa2c2618f953", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction4.f90", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -28,7 +28,7 @@\n end do\n !$omp end parallel\n \n-!$omp parallel reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause on 'parallel' construct\" }\n+!$omp parallel reduction(inscan,+:a)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n do i=1,10\n   a = a + 1\n end do\n@@ -45,16 +45,6 @@\n   a = a + 1\n end do\n \n-!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do' or 'sections'\" }\n-do i=1,10\n-  a = a + 1\n-end do\n-\n-!$omp simd reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n-do i=1,10\n-  a = a + 1\n-end do\n-\n ! ------------ do ------------\n !$omp parallel\n !$omp do reduction(+:a)\n@@ -77,13 +67,6 @@\n end do\n !$omp end parallel\n \n-!$omp parallel\n-!$omp do reduction(inscan,+:a)  ! { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n-do i=1,10\n-  a = a + 1\n-end do\n-!$omp end parallel\n-\n ! ------------ section ------------\n !$omp parallel\n !$omp sections reduction(+:a)\n@@ -107,7 +90,7 @@\n !$omp end parallel\n \n !$omp parallel\n-!$omp sections reduction(inscan,+:a)  ! { dg-error \"'inscan' 'reduction' clause on 'sections' construct\" }\n+!$omp sections reduction(inscan,+:a)   ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n   !$omp section\n   a = a + 1\n !$omp end sections\n@@ -152,9 +135,8 @@\n end\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[\\n\\r\\]\" 8 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[\\n\\r\\]\" 7 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp parallel private\\\\(i\\\\) reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n@@ -163,7 +145,6 @@\n ! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp sections reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(\\\\\\+:a\\\\)\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(task,\\\\\\+:a\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target in_reduction\\\\(\\\\\\+:b\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task in_reduction\\\\(\\\\\\+:a\\\\)\" 1 \"original\" } }"}, {"sha": "bfb847e99332c1aab97e2883d35d0ffe2e9f8444", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction5.f90", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -20,7 +20,10 @@\n   a = a + 1\n !$omp end task  ! { dg-error \"Unexpected !.OMP END TASK statement\" }\n \n-!$omp taskloop reduction(inscan,+:a) in_reduction(+:b) ! { dg-error \"34: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+!$omp taskloop reduction(inscan,+:a) in_reduction(+:b) ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+  ! { dg-error \"34: With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" \"\" { target *-*-* } .-1 }\n+  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" \"\" { target *-*-* } .-2 }\n+  ! { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" \"\" { target *-*-* } .-3 }\n do i=1,10\n   a = a + 1\n end do\n@@ -30,7 +33,8 @@\n   a = a + 1\n end do\n \n-!$omp teams reduction(inscan,+:b) ! { dg-error \"31: Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+!$omp teams reduction(inscan,+:b) ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" \"\" { target *-*-* } .-1 }\n   a = a + 1\n !$omp end teams\n "}, {"sha": "6bf685130ab7d0d45929f158baced43aff39a3f3", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction6.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction6.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+\n+implicit none\n+integer :: a, b, i\n+a = 0\n+\n+!$omp simd reduction(inscan,+:a)  ! { dg-error \"30: With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+\n+!$omp parallel\n+!$omp do reduction(inscan,+:a)  ! { dg-error \"28: With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+!$omp end parallel\n+end"}, {"sha": "7dc50e1ac69779101332daa37a057a722a1dd5fe", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction7.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,9 @@\n+implicit none\n+integer :: a, b, i\n+a = 0\n+\n+!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do' or 'sections'\" }\n+do i=1,10\n+  a = a + 1\n+end do\n+end"}, {"sha": "8c879fd98b9558fa661356fffae604852d3148cb", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-1.f90", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,213 @@\n+module m\n+  integer a, b\n+end module m\n+\n+subroutine f1\n+  use m\n+  !$omp scan inclusive (a)  ! { dg-error \"Unexpected ..OMP SCAN at .1. outside loop construct with 'inscan' REDUCTION clause\" }\n+  !$omp scan exclusive (b)  ! { dg-error \"Unexpected ..OMP SCAN at .1. outside loop construct with 'inscan' REDUCTION clause\" }\n+end\n+\n+subroutine f2 (c, d, e, f)\n+  use m\n+  implicit none\n+  integer i, l, c(*), d(*), e(64), f(64)\n+  l = 1\n+\n+  !$omp do reduction (inscan, +: a) reduction (+: b)  ! { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" }\n+  do i = 1, 64\n+    block\n+      b = b + 1\n+      a = a + c(i)\n+    end block\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+\n+  !$omp do reduction (+: a) reduction (inscan, +: b)  ! { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" }\n+  do i = 1, 64\n+    block\n+      a = a + 1\n+      b = b + c(i)\n+    end block\n+    !$omp scan inclusive (b)\n+      d(i) = b\n+  end do\n+\n+  !$omp do reduction (inscan, +: e)\n+  do i = 1, 64\n+    block\n+      e(1) = e(1) + c(i)\n+      e(2) = e(2) + c(i)\n+    end block\n+    !$omp scan inclusive (a, e)\n+    block\n+      d(1) = e(1)\n+      f(2) = e(2)\n+    end block\n+  end do\n+\n+  !$omp do reduction (inscan, +: e(:2))  ! { dg-error \"Syntax error in OpenMP variable list\" }\n+  do i = 1, 64\n+    block\n+      e(1) = e(1) + c(i)\n+      e(2) = e(2) + c(i)\n+    end block\n+    !$omp scan inclusive (a, e) ! { dg-error \"outside loop construct with 'inscan' REDUCTION clause\" }\n+    block\n+      d(1) = e(1)\n+      f(2) = e(2)\n+    end block\n+  end do\n+\n+  !$omp do reduction (inscan, +: a) ordered    ! { dg-error \"ORDERED clause specified together with 'inscan' REDUCTION clause\" }\n+  do i = 1, 64\n+    a = a + c(i)\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+\n+  !$omp do reduction (inscan, +: a) ordered(1)    ! { dg-error \"ORDERED clause specified together with 'inscan' REDUCTION clause\" }\n+  do i = 1, 64\n+    a = a + c(i)\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+\n+  !$omp do reduction (inscan, +: a) schedule(static)  ! { dg-error \"SCHEDULE clause specified together with 'inscan' REDUCTION clause\" }\n+  do i = 1, 64\n+    a = a + c(i)\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+\n+  !$omp do reduction (inscan, +: a) schedule(static, 2)  ! { dg-error \"SCHEDULE clause specified together with 'inscan' REDUCTION clause\" }\n+  do i = 1, 64\n+    a = a + c(i)\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+\n+  !$omp do reduction (inscan, +: a) schedule(nonmonotonic: dynamic, 2)  ! { dg-error \"SCHEDULE clause specified together with 'inscan' REDUCTION clause\" }\n+  do i = 1, 64\n+    a = a + c(i)\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do\n+end\n+\n+subroutine f3 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64)\n+  !$omp teams reduction (inscan, +: a)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause at\" }\n+    ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n+    ! ...\n+  !$omp end teams\n+\n+  !$omp target parallel do reduction (inscan, +: a) map (c, d)\n+  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+  !$omp teams\n+  !$omp distribute parallel do reduction (inscan, +: a)\n+  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+  !$omp end teams\n+\n+  !$omp distribute parallel do simd reduction (inscan, +: a)\n+  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+subroutine f4 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64)\n+  !$omp taskloop reduction (inscan, +: a)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+subroutine f7\n+  use m\n+  implicit none\n+  integer i\n+  !$omp simd reduction (inscan, +: a)\n+  do i = 1, 64\n+    if (i == 23) then  ! { dg-error \"invalid exit from OpenMP structured block\" \"\" { target c++ } .+1 }\n+      cycle  ! { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target c } }\n+    elseif (i == 27) then\n+      goto 123  ! Diagnostic by ME, see scan-7.f90\n+      ! { dg-warning \"is not in the same block as the GOTO statement\" \"\" { target *-*-* } .-1 }\n+    endif\n+    !$omp scan exclusive (a)\n+    block\n+123 a = 0  ! { dg-error \"jump to label 'l1'\" \"\" { target c++ } }\n+           ! { dg-warning \"is not in the same block as the GOTO statement\" \"\" { target *-*-* } .-1 }\n+      if (i == 33) then  ! { dg-error \"invalid exit from OpenMP structured block\" \"\" { target c++ } .+1 }\n+        cycle  ! { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target c } }\n+      end if\n+    end block\n+  end do\n+end\n+\n+subroutine f8 (c, d, e, f)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64), e(64), f(64)\n+  !$omp do reduction (inscan, +: a, b)\t  ! { dg-error \"With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" }\n+  do i = 1, 64\n+    block\n+      a = a + c(i)\n+      b = b + d(i)\n+    end block\n+    !$omp scan inclusive (a) inclusive (b)  ! { dg-error \"Unexpected junk after ..OMP SCAN\" }\n+    block\n+      e(i) = a\n+      f(i) = b\n+    end block\n+  end do\n+\n+  !$omp do reduction (inscan, +: a, b)  ! { dg-error \"With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" }\n+  do i = 1, 64\n+    block\n+      a = a + c(i)\n+      b = b + d(i)\n+    end block\n+    !$omp scan  ! { dg-error \"Expected INCLUSIVE or EXCLUSIVE clause\" }\n+    block\n+      e(i) = a\n+      f(i) = b\n+    end block\n+  end do\n+end\n+\n+subroutine f9\n+  use m\n+  implicit none\n+  integer i\n+! The first error (exit) causes two follow-up errors:\n+  !$omp simd reduction (inscan, +: a)  ! { dg-error \"With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" }\n+  do i = 1, 64\n+    if (i == 23) &\n+      exit  ! { dg-error \"EXIT statement at .1. terminating ..OMP DO loop\" } */\n+    !$omp scan exclusive (a) ! { dg-error \"Unexpected ..OMP SCAN at .1. outside loop construct with 'inscan' REDUCTION clause\" }\n+    a = a + 1\n+  end do\n+end"}, {"sha": "c0572321e51df7db9542d3a68f580bb5ba5d7234", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-2.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-2.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+module m\n+  integer :: a, b\n+end module m\n+\n+subroutine f1 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(*), d(*)\n+  !$omp simd reduction (inscan, +: a)\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp scan exclusive\\\\(a\\\\)\" 1 \"original\" } }"}, {"sha": "83181666462c3d04f4927d546a6a2c46116e6479", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-3.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-3.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+module m\n+  integer :: a, b\n+end module m\n+\n+subroutine f1 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(*), d(*)\n+  !$omp do reduction (inscan, +: a)\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan inclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp scan inclusive\\\\(a\\\\)\" 1 \"original\" } }"}, {"sha": "c9e9d7e57c93948df679a01c9e29da1e8d73f584", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-4.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-4.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+module m\n+  integer a, b\n+end module m\n+\n+subroutine f1 (c, d)\n+  use m\n+  implicit none\n+  integer c(*), d(*), i\n+  !$omp do simd reduction (inscan, +: a)\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) reduction\\\\(inscan,\\\\\\+:a\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp scan exclusive\\\\(a\\\\)\" 1 \"original\" } }"}, {"sha": "a3789a5868a765b5e26233a3e188448f4dd2c7be", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-5.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-5.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+integer function foo(a,b, n) result(r)\n+  implicit none\n+  integer :: a(n), b(n), n, i\n+  r = 0\n+  !$omp parallel do reduction (inscan, +:r) default(none) firstprivate (a, b)\n+  do i = 1, n\n+    r = r + a(i)\n+    !$omp scan inclusive (r)\n+    b(i) = r\n+  end do\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(a\\\\) firstprivate\\\\(b\\\\) default\\\\(none\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for reduction\\\\(inscan,\\\\\\+:r\\\\) nowait\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp scan inclusive\\\\(r\\\\)\" 1 \"original\" } }"}, {"sha": "35d5869ac1c2c5f15f4caa1acfc52d8eafc48603", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-6.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-6.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,16 @@\n+module m\n+  integer a, b\n+end module m\n+\n+subroutine f3 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64)\n+  !$omp parallel reduction (inscan, +: a)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+    ! ...\n+  !$omp end parallel\n+  !$omp sections reduction (inscan, +: a)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+    !$omp section\n+    ! ...\n+  !$omp end sections\n+end"}, {"sha": "0446c5eee2bfefaacd915be1b2e5d56d7aeb9e01", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-7.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-7.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,60 @@\n+module m\n+  integer a, b\n+end module m\n+\n+subroutine f2 (c, d, e, f)\n+  use m\n+  implicit none\n+  integer i, l, c(*), d(*), e(64), f(64)\n+  l = 1\n+\n+  !$omp do reduction (inscan, +: a) linear (l)    ! { dg-error \"'inscan' 'reduction' clause used together with 'linear' clause for a variable other than loop iterator\" }\n+  do i = 1, 64\n+    block\n+      a = a + c(i)\n+      l = l + 1\n+    end block\n+    !$omp scan inclusive (a)\n+    d(i) = a\n+  end do \n+end\n+\n+subroutine f5 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64)\n+  !$omp simd reduction (inscan, +: a)\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a, b)  ! { dg-error \"'b' specified in 'exclusive' clause but not in 'inscan' 'reduction' clause on the containing construct\" }\n+    a = a + c(i)\n+  end do\n+end\n+\n+subroutine f6 (c, d)\n+  use m\n+  implicit none\n+  integer i, c(64), d(64)\n+  !$omp simd reduction (inscan, +: a, b)  ! { dg-error \"'b' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n+  do i = 1, 64\n+    d(i) = a\n+    !$omp scan exclusive (a)\n+    a = a + c(i)\n+  end do\n+end\n+\n+subroutine f7\n+  use m\n+  implicit none\n+  integer i\n+  !$omp simd reduction (inscan, +: a)\n+  do i = 1, 64\n+    if (i == 27) goto 123  ! { dg-error \"invalid branch to/from OpenMP structured block\" }\n+      ! { dg-warning \"is not in the same block as the GOTO statement\" \"\" { target *-*-* } .-1 }\n+    !$omp scan exclusive (a)\n+    block\n+123   a = 0  ! { dg-error \"jump to label 'l1'\" \"\" { target c++ } }\n+             ! { dg-warning \"is not in the same block as the GOTO statement\" \"\" { target *-*-* } .-1 }\n+    end block\n+  end do\n+end"}, {"sha": "a6f8ef7ea76350ea09bd8077d914c2cbca0e24ce", "filename": "libgomp/testsuite/libgomp.fortran/scan-1.f90", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fscan-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fscan-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fscan-1.f90?ref=005cff4e2ecbd5c4e2ef978fe4842fa3c8c79f47", "patch": "@@ -0,0 +1,115 @@\n+! { dg-require-effective-target size32plus }\n+\n+module m\n+  implicit none\n+  integer r, a(1024), b(1024)\n+contains\n+subroutine foo (a, b)\n+  integer, contiguous :: a(:), b(:)\n+  integer :: i\n+  !$omp do reduction (inscan, +:r)\n+  do i = 1, 1024\n+    r = r + a(i)\n+    !$omp scan inclusive(r)\n+    b(i) = r\n+  end do\n+end\n+\n+integer function bar ()\n+  integer s, i\n+  s = 0\n+  !$omp parallel\n+  !$omp do reduction (inscan, +:s)\n+  do i = 1, 1024\n+    s = s + 2 * a(i)\n+    !$omp scan inclusive(s)\n+    b(i) = s\n+  end do\n+  !$omp end parallel\n+  bar = s\n+end\n+\n+subroutine baz (a, b)\n+  integer, contiguous :: a(:), b(:)\n+  integer :: i\n+  !$omp parallel do reduction (inscan, +:r)\n+  do i = 1, 1024\n+    r = r + a(i)\n+    !$omp scan inclusive(r)\n+    b(i) = r\n+  end do\n+end\n+\n+integer function qux ()\n+  integer s, i\n+  s = 0\n+  !$omp parallel do reduction (inscan, +:s)\n+  do i = 1, 1024\n+    s = s + 2 * a(i)\n+    !$omp scan inclusive(s)\n+    b(i) = s\n+  end do\n+  qux = s\n+end\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+\n+  integer s, i\n+  s = 0\n+  do i = 1, 1024\n+    a(i) = i-1\n+    b(i) = -1\n+  end do\n+\n+  !$omp parallel\n+  call foo (a, b)\n+  !$omp end parallel\n+  if (r /= 1024 * 1023 / 2) &\n+    stop 1\n+  do i = 1, 1024\n+    s = s + i-1\n+    if (b(i) /= s) then\n+      stop 2\n+    else\n+      b(i) = 25\n+    endif\n+  end do\n+\n+  if (bar () /= 1024 * 1023) &\n+    stop 3\n+  s = 0\n+  do i = 1, 1024\n+    s = s + 2 * (i-1)\n+    if (b(i) /= s) then\n+      stop 4\n+    else\n+      b(i) = -1\n+    end if\n+  end do\n+\n+  r = 0\n+  call baz (a, b)\n+  if (r /= 1024 * 1023 / 2) &\n+    stop 5\n+  s = 0\n+  do i = 1, 1024\n+    s = s + i-1\n+    if (b(i) /= s) then\n+      stop 6\n+    else\n+      b(i) = -25\n+    endif\n+  end do\n+\n+  if (qux () /= 1024 * 1023) &\n+    stop 6\n+  s = 0\n+  do i = 1, 1024\n+    s = s + 2 * (i-1)\n+    if (b(i) /= s) &\n+      stop 7\n+  end do\n+end program"}]}