{"sha": "600cf1128e49f086522bfddc54490b4e39e30383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwY2YxMTI4ZTQ5ZjA4NjUyMmJmZGRjNTQ0OTBiNGUzOWUzMDM4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-09T08:16:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-09T08:18:41Z"}, "message": "match.pd: Fix up FFS -> CTZ + 1 optimization [PR97325]\n\nAnd no testcase was included, I'm including one below.\n\nAnyway, this PR and the other CTZ related discussions led me to discover a\nbug I've made earlier, CLZ/CTZ builtins have unsigned arguments and e.g.\nboth the vr-values.cc and now gimple-range.cc code heavily relies on that,\nbut __builtin_ffs has a signed operand and this optimization was incorrectly\nmaking the operand signed too, so I guess it would greatly confuse VRP in\nsome cases.\n\n2020-10-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97325\n\t* match.pd (FFS(nonzero) -> CTZ(nonzero) + 1): Cast argument to\n\tcorresponding unsigned type.\n\n\t* gcc.c-torture/execute/pr97325.c: New test.", "tree": {"sha": "394041ef76ed7c8ba90598b84683260a69fae9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394041ef76ed7c8ba90598b84683260a69fae9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600cf1128e49f086522bfddc54490b4e39e30383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600cf1128e49f086522bfddc54490b4e39e30383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600cf1128e49f086522bfddc54490b4e39e30383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600cf1128e49f086522bfddc54490b4e39e30383/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6887244269e0c412afd43474e13fa5ca12c350c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6887244269e0c412afd43474e13fa5ca12c350c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6887244269e0c412afd43474e13fa5ca12c350c4"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "a7032dcae29b6f9e604b1e67f30208150b0e347f", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cf1128e49f086522bfddc54490b4e39e30383/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cf1128e49f086522bfddc54490b4e39e30383/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=600cf1128e49f086522bfddc54490b4e39e30383", "patch": "@@ -6196,7 +6196,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n       && direct_internal_fn_supported_p (IFN_CTZ, TREE_TYPE (@0),\n \t\t\t\t\t OPTIMIZE_FOR_SPEED))\n-  (plus (CTZ:type @0) { build_one_cst (type); })))\n+  (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n+   (plus (CTZ:type (convert:utype @0)) { build_one_cst (type); }))))\n #endif\n \n (for ffs (BUILT_IN_FFS BUILT_IN_FFSL BUILT_IN_FFSLL"}, {"sha": "f734c85c71176969af1098c903f194ea6396fb51", "filename": "gcc/testsuite/gcc.c-torture/execute/pr97325.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cf1128e49f086522bfddc54490b4e39e30383/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97325.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cf1128e49f086522bfddc54490b4e39e30383/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97325.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97325.c?ref=600cf1128e49f086522bfddc54490b4e39e30383", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/97325 */\n+\n+unsigned long long\n+foo (unsigned long long c)\n+{\n+  return c ? __builtin_ffs (-(unsigned short) c) : 0;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (2) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}