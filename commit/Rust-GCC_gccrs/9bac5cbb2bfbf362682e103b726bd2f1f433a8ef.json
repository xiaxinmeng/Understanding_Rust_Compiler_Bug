{"sha": "9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhYzVjYmIyYmZiZjM2MjY4MmUxMDNiNzI2YmQyZjFmNDMzYThlZg==", "commit": {"author": {"name": "S. Gilles", "email": "sgilles@terpmail.umd.edu", "date": "2014-06-05T19:36:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-06-05T19:36:03Z"}, "message": "re PR c/53119 (-Wmissing-braces wrongly warns about universal zero initializer {0})\n\n2014-06-05  S. Gilles  <sgilles@terpmail.umd.edu>\n\n\tPR c/53119\n\t* c-typeck.c (push_init_level, process_init_element,\n\tpop_init_level): Correct check for zero initialization, move\n\tmissing brace warning to respect zero initialization.\n\n\tPR c/53119\n\t* gcc.dg/pr53119.c: New testcase.\n\nFrom-SVN: r211289", "tree": {"sha": "cbffa0bae02b85683b8ae55888f3d5d76ad39e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbffa0bae02b85683b8ae55888f3d5d76ad39e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/comments", "author": null, "committer": null, "parents": [{"sha": "a148c4b2645a213a99d26056ed942fcec918bc42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a148c4b2645a213a99d26056ed942fcec918bc42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a148c4b2645a213a99d26056ed942fcec918bc42"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "54d0de7faf519c5eaf3ec0de5490fd2d0bf5f813", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "patch": "@@ -1,3 +1,10 @@\n+2014-06-05  S. Gilles  <sgilles@terpmail.umd.edu>\n+\n+\tPR c/53119\n+\t* c-typeck.c (push_init_level, process_init_element,\n+\tpop_init_level): Correct check for zero initialization, move\n+\tmissing brace warning to respect zero initialization.\n+\n 2014-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/56724"}, {"sha": "e4fa0c3b4bcaf555f005760d240b00dcf215be04", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "patch": "@@ -74,9 +74,9 @@ int in_typeof;\n    if expr.original_code == SIZEOF_EXPR.  */\n tree c_last_sizeof_arg;\n \n-/* Nonzero if we've already printed a \"missing braces around initializer\"\n-   message within this initializer.  */\n-static int missing_braces_mentioned;\n+/* Nonzero if we might need to print a \"missing braces around\n+   initializer\" message within this initializer.  */\n+static int found_missing_braces;\n \n static int require_constant_value;\n static int require_constant_elements;\n@@ -6864,6 +6864,9 @@ static int constructor_nonconst;\n /* 1 if this constructor is erroneous so far.  */\n static int constructor_erroneous;\n \n+/* 1 if this constructor is the universal zero initializer { 0 }.  */\n+static int constructor_zeroinit;\n+\n /* Structure for managing pending initializer elements, organized as an\n    AVL tree.  */\n \n@@ -7025,7 +7028,7 @@ start_init (tree decl, tree asmspec_tree ATTRIBUTE_UNUSED, int top_level)\n   constructor_stack = 0;\n   constructor_range_stack = 0;\n \n-  missing_braces_mentioned = 0;\n+  found_missing_braces = 0;\n \n   spelling_base = 0;\n   spelling_size = 0;\n@@ -7120,6 +7123,7 @@ really_start_incremental_init (tree type)\n   constructor_type = type;\n   constructor_incremental = 1;\n   constructor_designated = 0;\n+  constructor_zeroinit = 1;\n   designator_depth = 0;\n   designator_erroneous = 0;\n \n@@ -7323,12 +7327,8 @@ push_init_level (location_t loc, int implicit,\n \tset_nonincremental_init (braced_init_obstack);\n     }\n \n-  if (implicit == 1 && warn_missing_braces && !missing_braces_mentioned)\n-    {\n-      missing_braces_mentioned = 1;\n-      warning_init (input_location, OPT_Wmissing_braces,\n-\t\t    \"missing braces around initializer\");\n-    }\n+  if (implicit == 1)\n+    found_missing_braces = 1;\n \n   if (TREE_CODE (constructor_type) == RECORD_TYPE\n \t   || TREE_CODE (constructor_type) == UNION_TYPE)\n@@ -7461,16 +7461,23 @@ pop_init_level (location_t loc, int implicit,\n \t}\n     }\n \n+  if (vec_safe_length (constructor_elements) != 1)\n+    constructor_zeroinit = 0;\n+\n+  /* Warn when some structs are initialized with direct aggregation.  */\n+  if (!implicit && found_missing_braces && warn_missing_braces\n+      && !constructor_zeroinit)\n+    {\n+      warning_init (loc, OPT_Wmissing_braces,\n+\t\t    \"missing braces around initializer\");\n+    }\n+\n   /* Warn when some struct elements are implicitly initialized to zero.  */\n   if (warn_missing_field_initializers\n       && constructor_type\n       && TREE_CODE (constructor_type) == RECORD_TYPE\n       && constructor_unfilled_fields)\n     {\n-\tbool constructor_zeroinit =\n-\t (vec_safe_length (constructor_elements) == 1\n-\t  && integer_zerop ((*constructor_elements)[0].value));\n-\n \t/* Do not warn for flexible array members or zero-length arrays.  */\n \twhile (constructor_unfilled_fields\n \t       && (!DECL_SIZE (constructor_unfilled_fields)\n@@ -8600,6 +8607,9 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n   designator_depth = 0;\n   designator_erroneous = 0;\n \n+  if (!implicit && value.value && !integer_zerop (value.value))\n+    constructor_zeroinit = 0;\n+\n   /* Handle superfluous braces around string cst as in\n      char x[] = {\"foo\"}; */\n   if (string_flag"}, {"sha": "8e0fb801342b1c5129d64dcacf3ffa4efd242f8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  S. Gilles  <sgilles@terpmail.umd.edu>\n+\n+\tPR c/53119\n+\t* gcc.dg/pr53119.c: New testcase.\n+\n 2014-06-05  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \tPR target/52472"}, {"sha": "044811d833aa5cd02684e103ee55d45097c3e29a", "filename": "gcc/testsuite/gcc.dg/pr53119.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bac5cbb2bfbf362682e103b726bd2f1f433a8ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53119.c?ref=9bac5cbb2bfbf362682e103b726bd2f1f433a8ef", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+/* { dg-options \"-Wmissing-braces -Wmissing-field-initializers\" } */\n+\n+struct a {\n+  int x, y, z;\n+};\n+\n+struct b {\n+  struct a w, z;\n+};\n+\n+int main (void)\n+{\n+  struct a az = { 0 };\n+  struct a anz = { 1 };   /* { dg-warning \"missing initializer for\" } */\n+  struct a aez = { 0, 0 };   /* { dg-warning \"missing initializer for\" } */\n+\n+  struct b bz = { 0 };\n+  struct b bnz = { 0, 0, 0, 0, 0, 0 };  /* { dg-warning \"missing braces\" }  */\n+\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"note\" } */"}]}