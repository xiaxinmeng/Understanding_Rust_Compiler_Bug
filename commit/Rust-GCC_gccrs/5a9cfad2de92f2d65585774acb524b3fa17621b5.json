{"sha": "5a9cfad2de92f2d65585774acb524b3fa17621b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5Y2ZhZDJkZTkyZjJkNjU1ODU3NzRhY2I1MjRiM2ZhMTc2MjFiNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-12T19:58:27Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-12T20:03:00Z"}, "message": "Avoid a couple more ICEs in print_mem_ref (PR c/98597).\n\nResolves:\nPR c/98597 - ICE in -Wuninitialized printing a MEM_REF\nPR c/98592 - ICE in gimple_canonical_types_compatible_p while formatting\n\ngcc/c-family/ChangeLog:\n\n\tPR c/98597\n\tPR c/98592\n\t* c-pretty-print.c (print_mem_ref): Avoid assuming MEM_REF operand\n\thas pointer type.  Remove redundant code.  Avoid calling\n\tgimple_canonical_types_compatible_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/98597\n\tPR c/98592\n\t* g++.dg/warn/Wuninitialized-13.C: New test.\n\t gcc.dg/uninit-39.c: New test.\n\n\t#", "tree": {"sha": "2466054153dcd0396ea2b4d4b5918849c0ddfdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2466054153dcd0396ea2b4d4b5918849c0ddfdc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a9cfad2de92f2d65585774acb524b3fa17621b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9cfad2de92f2d65585774acb524b3fa17621b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9cfad2de92f2d65585774acb524b3fa17621b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9cfad2de92f2d65585774acb524b3fa17621b5/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728fee7a7980addedfdb48e6dbcedc60054974f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728fee7a7980addedfdb48e6dbcedc60054974f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728fee7a7980addedfdb48e6dbcedc60054974f0"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "4d17c270b1651b5819abce1d0f450144c077633a", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=5a9cfad2de92f2d65585774acb524b3fa17621b5", "patch": "@@ -1847,10 +1847,11 @@ print_mem_ref (c_pretty_printer *pp, tree e)\n   tree access_type = TREE_TYPE (e);\n   if (TREE_CODE (access_type) == ARRAY_TYPE)\n     access_type = TREE_TYPE (access_type);\n-  tree arg_type = TREE_TYPE (TREE_TYPE (arg));\n+  tree arg_type = TREE_TYPE (arg);\n+  if (POINTER_TYPE_P (arg_type))\n+    arg_type = TREE_TYPE (arg_type);\n   if (TREE_CODE (arg_type) == ARRAY_TYPE)\n     arg_type = TREE_TYPE (arg_type);\n-\n   if (tree access_size = TYPE_SIZE_UNIT (access_type))\n     if (TREE_CODE (access_size) == INTEGER_CST)\n       {\n@@ -1866,16 +1867,13 @@ print_mem_ref (c_pretty_printer *pp, tree e)\n \n   /* True to include a cast to the accessed type.  */\n   const bool access_cast = VOID_TYPE_P (arg_type)\n-    || !gimple_canonical_types_compatible_p (access_type, arg_type);\n+    || TYPE_MAIN_VARIANT (access_type) != TYPE_MAIN_VARIANT (arg_type);\n \n   if (byte_off != 0)\n     {\n       /* When printing the byte offset for a pointer to a type of\n \t a different size than char, include a cast to char* first,\n \t before printing the cast to a pointer to the accessed type.  */\n-      tree arg_type = TREE_TYPE (TREE_TYPE (arg));\n-      if (TREE_CODE (arg_type) == ARRAY_TYPE)\n-\targ_type = TREE_TYPE (arg_type);\n       offset_int arg_size = 0;\n       if (tree size = TYPE_SIZE (arg_type))\n \targ_size = wi::to_offset (size);"}, {"sha": "49ee878806acb63c845a8fc472805c7862564f83", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-13.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-13.C?ref=5a9cfad2de92f2d65585774acb524b3fa17621b5", "patch": "@@ -0,0 +1,28 @@\n+/* PR c/98597 - ICE in -Wuninitialized printing a MEM_REF\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+struct shared_count {\n+  shared_count () { }\n+  shared_count (shared_count &r)\n+    : pi (r.pi) { }     // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+  int pi;\n+};\n+\n+// There's another (redundant) -Wuninitialized on the line below.\n+struct shared_ptr {\n+  int ptr;\n+  shared_count refcount;\n+};\n+\n+struct Bar {\n+  Bar (int, shared_ptr);\n+};\n+\n+void g () {\n+  shared_ptr foo;\n+  Bar (0, foo);\n+}\n+\n+// Prune out duplicates.\n+// { dg-prune-output \"-Wuninitialized\" }"}, {"sha": "0f9185427739e51e814123df4c39dff9ad7f6e5e", "filename": "gcc/testsuite/gcc.dg/uninit-39.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9cfad2de92f2d65585774acb524b3fa17621b5/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-39.c?ref=5a9cfad2de92f2d65585774acb524b3fa17621b5", "patch": "@@ -0,0 +1,47 @@\n+/* PR c/98592 - ICE in gimple_canonical_types_compatible_p while formatting\n+   a MEM_REF\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void f (int);\n+\n+void vlaNx3_to_pia1 (int n)\n+{\n+  int a[n][3];\n+\n+  /* The VLA isn't formatted correctly due to PR 98587.  Just verify\n+     there is no ICE and a warning is issued.  */\n+  f (((*(int(*)[4])&a[1][2]))[3]);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void vlaNxN_to_pia1 (int n)\n+{\n+  int a[n][n];\n+\n+  /* Same as above.  */\n+  f (((*(int(*)[4])&a[1][2]))[3]);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void vlaNxN_to_pvla4xN (int n)\n+{\n+  int a[n][n];\n+\n+  /* Same as above.  */\n+  f (((*(int(*)[4][n])&a[1][2]))[3][4]);  // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void vlaN_to_pia2 (int n)\n+{\n+  int a[n];\n+\n+  /* Same as above.  */\n+  f (((*(int(*)[3][4])&a[1]))[2][3]);   // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void vlaN_to_pvlaNx4 (int n)\n+{\n+  int a[n];\n+\n+  /* Same as above.  */\n+  f (((*(int(*)[n][4])&a[1]))[1][3]);   // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}"}]}