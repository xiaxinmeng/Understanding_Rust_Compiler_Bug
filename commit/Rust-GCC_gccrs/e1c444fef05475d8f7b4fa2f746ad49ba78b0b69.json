{"sha": "e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjNDQ0ZmVmMDU0NzVkOGY3YjRmYTJmNzQ2YWQ0OWJhNzhiMGI2OQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-04-30T11:36:52Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-04-30T11:36:52Z"}, "message": "2015-04-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/cpp_type_traits.h\n\t(__gnu_cxx::__is_normal_iterator): Delete.\n\t* include/bits/stl_algobase.h (std::__niter_base): Adapt.\n\t* include/bits/stl_iterator.h (__make_reverse_iterator): New in C++11.\n\t(std::__niter_base): Overloads for std::reverse_iterator,\n\t__gnu_cxx::__normal_iterator and std::move_iterator.\n\nFrom-SVN: r222617", "tree": {"sha": "33ced6b44c0c49fcb93492614c687cb204ed99be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ced6b44c0c49fcb93492614c687cb204ed99be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/comments", "author": null, "committer": null, "parents": [{"sha": "d2db6b291ed42db792d8c001b101164652e05983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2db6b291ed42db792d8c001b101164652e05983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2db6b291ed42db792d8c001b101164652e05983"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "53661dfa9bd7a517f1d1285da138b82ebc16ab50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "patch": "@@ -1,3 +1,12 @@\n+2015-04-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/cpp_type_traits.h\n+\t(__gnu_cxx::__is_normal_iterator): Delete.\n+\t* include/bits/stl_algobase.h (std::__niter_base): Adapt.\n+\t* include/bits/stl_iterator.h (__make_reverse_iterator): New in C++11.\n+\t(std::__niter_base): Overloads for std::reverse_iterator,\n+\t__gnu_cxx::__normal_iterator and std::move_iterator.\n+\n 2015-04-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h (_Prime_rehash_policy::_S_n_primes):"}, {"sha": "21429175c05bef07c18800367cdfb285febe77ca", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "patch": "@@ -64,17 +64,6 @@\n // removed.\n //\n \n-// Forward declaration hack, should really include this from somewhere.\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template<typename _Iterator, typename _Container>\n-    class __normal_iterator;\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -330,24 +319,6 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n       typedef __true_type __type;\n     };\n \n-  //\n-  // Normal iterator type\n-  //\n-  template<typename _Tp>\n-    struct __is_normal_iterator\n-    {\n-      enum { __value = 0 };\n-      typedef __false_type __type;\n-    };\n-\n-  template<typename _Iterator, typename _Container>\n-    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,\n-\t\t\t\t\t\t\t      _Container> >\n-    {\n-      enum { __value = 1 };\n-      typedef __true_type __type;\n-    };\n-\n   //\n   // An arithmetic type is an integer type or a floating point type\n   //"}, {"sha": "630b3a04fc23341073705afc931e83972cf2502d", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "patch": "@@ -270,19 +270,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __a;\n     }\n \n-  // If _Iterator is a __normal_iterator return its base (a plain pointer,\n-  // normally) otherwise return it untouched.  See copy, fill, ... \n+  // Fallback implementation of the function in bits/stl_iterator.h used to\n+  // remove the __normal_iterator wrapper. See copy, fill, ...\n   template<typename _Iterator>\n-    struct _Niter_base\n-    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>\n-    { };\n-\n-  template<typename _Iterator>\n-    inline typename _Niter_base<_Iterator>::iterator_type\n+    inline _Iterator\n     __niter_base(_Iterator __it)\n-    { return std::_Niter_base<_Iterator>::_S_base(__it); }\n+    { return __it; }\n \n-  // Likewise, for move_iterator.\n+  // If _Iterator is a move_iterator return its base otherwise return it\n+  // untouched.  See copy, fill, ...\n   template<typename _Iterator>\n     struct _Miter_base\n     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>"}, {"sha": "d4ea6577a4986ed0c3597bd83ab8a095edd624b0", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c444fef05475d8f7b4fa2f746ad49ba78b0b69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=e1c444fef05475d8f7b4fa2f746ad49ba78b0b69", "patch": "@@ -388,8 +388,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __y.base() - __x.base(); }\n   //@}\n \n-#if __cplusplus > 201103L\n-#define __cpp_lib_make_reverse_iterator 201402\n+#if __cplusplus >= 201103L\n+  // Same as C++14 make_reverse_iterator but used in C++03 mode too.\n+  template<typename _Iterator>\n+    inline reverse_iterator<_Iterator>\n+    __make_reverse_iterator(_Iterator __i)\n+    { return reverse_iterator<_Iterator>(__i); }\n+\n+# if __cplusplus > 201103L\n+#  define __cpp_lib_make_reverse_iterator 201402\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 2285. make_reverse_iterator\n@@ -398,6 +405,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline reverse_iterator<_Iterator>\n     make_reverse_iterator(_Iterator __i)\n     { return reverse_iterator<_Iterator>(__i); }\n+# endif\n+#endif\n+\n+#if __cplusplus >= 201103L\n+  template<typename _Iterator>\n+    auto\n+    __niter_base(reverse_iterator<_Iterator> __it)\n+    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))\n+    { return __make_reverse_iterator(__niter_base(__it.base())); }\n #endif\n \n   // 24.4.2.2.1 back_insert_iterator\n@@ -935,6 +951,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Iterator, typename _Container>\n+    _Iterator\n+    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)\n+    { return __it.base(); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n #if __cplusplus >= 201103L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -1168,6 +1196,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // @} group iterators\n \n+  template<typename _Iterator>\n+    auto\n+    __niter_base(move_iterator<_Iterator> __it)\n+    -> decltype(make_move_iterator(__niter_base(__it.base())))\n+    { return make_move_iterator(__niter_base(__it.base())); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}]}