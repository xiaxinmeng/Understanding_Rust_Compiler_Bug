{"sha": "7958186bea8d900b8e876f80c2b089581e717cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1ODE4NmJlYThkOTAwYjhlODc2ZjgwYzJiMDg5NTgxZTcxN2NkYw==", "commit": {"author": {"name": "Michael Ploujnikov", "email": "michael.ploujnikov@oracle.com", "date": "2018-10-30T11:39:29Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-30T11:39:29Z"}, "message": "Avoid unnecessarily numbering cloned symbols.\n\n2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n\n\t* cgraph.h (clone_function_name_1): Replaced by new\n\t  clone_function_name_numbered that takes name as string; for\n\t  privatize_symbol_name_1 use only.\n\t  (clone_function_name): Renamed to\n\t  clone_function_name_numbered to be explicit about numbering.\n\t  (clone_function_name): New two-argument function that does\n\t  not number its output.\n\t  (clone_function_name): New three-argument function that\n\t  takes a number to append to its output.\n\t* cgraphclones.c (duplicate_thunk_for_node):\n\t  (clone_function_name_1): Renamed.\n\t  (clone_function_name_numbered): Two new functions.\n\t  (clone_function_name): Improved documentation.\n\t  (cgraph_node::create_virtual_clone): Use clone_function_name_numbered.\n\t* config/rs6000/rs6000.c (make_resolver_func): Ditto.\n\t* final.c (final_scan_insn_1): Use the new clone_function_name\n\t  without numbering.\n\t* multiple_target.c (create_dispatcher_calls): Ditto.\n\t  (create_target_clone): Ditto.\n\t* omp-expand.c (grid_expand_target_grid_body): Ditto.\n\t* omp-low.c (create_omp_child_function_name): Ditto.\n\t* omp-simd-clone.c (simd_clone_create): Ditto.\n\t* symtab.c (simd_symtab_node::noninterposable_alias): Use the\n\t  new clone_function_name without numbering.\n2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n\n\t* lto-partition.c (privatize_symbol_name_1): Use\n\t  clone_function_name_numbered.\n2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n\n\t* gcc.dg/tree-prof/cold_partition_label.c: Update for cold\n\t  section names without numbers.\n\t* gcc.dg/tree-prof/section-attr-1.c: Ditto.\n\t* gcc.dg/tree-prof/section-attr-2.c: Ditto.\n\t* gcc.dg/tree-prof/section-attr-3.c: Ditto.\n\nFrom-SVN: r265621", "tree": {"sha": "f97eaee1050aed32973ba14c4ca333e316d141a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f97eaee1050aed32973ba14c4ca333e316d141a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7958186bea8d900b8e876f80c2b089581e717cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7958186bea8d900b8e876f80c2b089581e717cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7958186bea8d900b8e876f80c2b089581e717cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7958186bea8d900b8e876f80c2b089581e717cdc/comments", "author": {"login": "plouj-oracle", "id": 7086511, "node_id": "MDQ6VXNlcjcwODY1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7086511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plouj-oracle", "html_url": "https://github.com/plouj-oracle", "followers_url": "https://api.github.com/users/plouj-oracle/followers", "following_url": "https://api.github.com/users/plouj-oracle/following{/other_user}", "gists_url": "https://api.github.com/users/plouj-oracle/gists{/gist_id}", "starred_url": "https://api.github.com/users/plouj-oracle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plouj-oracle/subscriptions", "organizations_url": "https://api.github.com/users/plouj-oracle/orgs", "repos_url": "https://api.github.com/users/plouj-oracle/repos", "events_url": "https://api.github.com/users/plouj-oracle/events{/privacy}", "received_events_url": "https://api.github.com/users/plouj-oracle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f6f2d244c77dd7ae5a86b3bf7cb18fd953168f"}], "stats": {"total": 156, "additions": 125, "deletions": 31}, "files": [{"sha": "1dcec6ae5c03573aad94aeafb30dbe8a34402068", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -1,3 +1,30 @@\n+2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\n+\t* cgraph.h (clone_function_name_1): Replaced by new\n+\t  clone_function_name_numbered that takes name as string; for\n+\t  privatize_symbol_name_1 use only.\n+\t  (clone_function_name): Renamed to\n+\t  clone_function_name_numbered to be explicit about numbering.\n+\t  (clone_function_name): New two-argument function that does\n+\t  not number its output.\n+\t  (clone_function_name): New three-argument function that\n+\t  takes a number to append to its output.\n+\t* cgraphclones.c (duplicate_thunk_for_node):\n+\t  (clone_function_name_1): Renamed.\n+\t  (clone_function_name_numbered): Two new functions.\n+\t  (clone_function_name): Improved documentation.\n+\t  (cgraph_node::create_virtual_clone): Use clone_function_name_numbered.\n+\t* config/rs6000/rs6000.c (make_resolver_func): Ditto.\n+\t* final.c (final_scan_insn_1): Use the new clone_function_name\n+\t  without numbering.\n+\t* multiple_target.c (create_dispatcher_calls): Ditto.\n+\t  (create_target_clone): Ditto.\n+\t* omp-expand.c (grid_expand_target_grid_body): Ditto.\n+\t* omp-low.c (create_omp_child_function_name): Ditto.\n+\t* omp-simd-clone.c (simd_clone_create): Ditto.\n+\t* symtab.c (simd_symtab_node::noninterposable_alias): Use the\n+\t  new clone_function_name without numbering.\n+\n 2018-10-30  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* alloc-pool.h (base_pool_allocator <TBlockAllocator>::initialize):"}, {"sha": "c13d79850fa86e45b40e85b5b32d0854cfbbb2f1", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -2382,8 +2382,11 @@ tree thunk_adjust (gimple_stmt_iterator *, tree, bool, HOST_WIDE_INT, tree,\n \t\t   HOST_WIDE_INT);\n /* In cgraphclones.c  */\n \n-tree clone_function_name_1 (const char *, const char *);\n-tree clone_function_name (tree decl, const char *);\n+tree clone_function_name_numbered (const char *name, const char *suffix);\n+tree clone_function_name_numbered (tree decl, const char *suffix);\n+tree clone_function_name (const char *name, const char *suffix,\n+\t\t\t  unsigned long number);\n+tree clone_function_name (tree decl, const char *suffix);\n \n void tree_function_versioning (tree, tree, vec<ipa_replace_map *, va_gc> *,\n \t\t\t       bool, bitmap, bool, bitmap, basic_block);"}, {"sha": "e17959c0ca61bd5c85840df1f03b0e2873c8de1d", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -317,7 +317,8 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n   gcc_checking_assert (!DECL_RESULT (new_decl));\n   gcc_checking_assert (!DECL_RTL_SET_P (new_decl));\n \n-  DECL_NAME (new_decl) = clone_function_name (thunk->decl, \"artificial_thunk\");\n+  DECL_NAME (new_decl) = clone_function_name_numbered (thunk->decl,\n+\t\t\t\t\t\t       \"artificial_thunk\");\n   SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n \n   new_thunk = cgraph_node::create (new_decl);\n@@ -514,11 +515,41 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,\n \n static GTY(()) unsigned int clone_fn_id_num;\n \n-/* Return a new assembler name for a clone with SUFFIX of a decl named\n-   NAME.  */\n+/* Return a new assembler name for a clone of decl named NAME.  Apart\n+   from the string SUFFIX, the new name will end with a unique (for\n+   each NAME) unspecified number.  If clone numbering is not needed\n+   then the two argument clone_function_name should be used instead.\n+   Should not be called directly except for by\n+   lto-partition.c:privatize_symbol_name_1.  */\n \n tree\n-clone_function_name_1 (const char *name, const char *suffix)\n+clone_function_name_numbered (const char *name, const char *suffix)\n+{\n+  return clone_function_name (name, suffix, clone_fn_id_num++);\n+}\n+\n+/* Return a new assembler name for a clone of DECL.  Apart from string\n+   SUFFIX, the new name will end with a unique (for each DECL\n+   assembler name) unspecified number.  If clone numbering is not\n+   needed then the two argument clone_function_name should be used\n+   instead.  */\n+\n+tree\n+clone_function_name_numbered (tree decl, const char *suffix)\n+{\n+  tree name = DECL_ASSEMBLER_NAME (decl);\n+  return clone_function_name_numbered (IDENTIFIER_POINTER (name),\n+\t\t\t\t       suffix);\n+}\n+\n+/* Return a new assembler name for a clone of decl named NAME.  Apart\n+   from the string SUFFIX, the new name will end with the specified\n+   NUMBER.  If clone numbering is not needed then the two argument\n+   clone_function_name should be used instead.  */\n+\n+tree\n+clone_function_name (const char *name, const char *suffix,\n+\t\t     unsigned long number)\n {\n   size_t len = strlen (name);\n   char *tmp_name, *prefix;\n@@ -527,17 +558,34 @@ clone_function_name_1 (const char *name, const char *suffix)\n   memcpy (prefix, name, len);\n   strcpy (prefix + len + 1, suffix);\n   prefix[len] = symbol_table::symbol_suffix_separator ();\n-  ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix, clone_fn_id_num++);\n+  ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix, number);\n   return get_identifier (tmp_name);\n }\n \n-/* Return a new assembler name for a clone of DECL with SUFFIX.  */\n+/* Return a new assembler name ending with the string SUFFIX for a\n+   clone of DECL.  */\n \n tree\n clone_function_name (tree decl, const char *suffix)\n {\n-  tree name = DECL_ASSEMBLER_NAME (decl);\n-  return clone_function_name_1 (IDENTIFIER_POINTER (name), suffix);\n+  tree identifier = DECL_ASSEMBLER_NAME (decl);\n+  /* For consistency this needs to behave the same way as\n+     ASM_FORMAT_PRIVATE_NAME does, but without the final number\n+     suffix.  */\n+  char *separator = XALLOCAVEC (char, 2);\n+  separator[0] = symbol_table::symbol_suffix_separator ();\n+  separator[1] = 0;\n+#if defined (NO_DOT_IN_LABEL) && defined (NO_DOLLAR_IN_LABEL)\n+  const char *prefix = \"__\";\n+#else\n+  const char *prefix = \"\";\n+#endif\n+  char *result = ACONCAT ((prefix,\n+\t\t\t   IDENTIFIER_POINTER (identifier),\n+\t\t\t   separator,\n+\t\t\t   suffix,\n+\t\t\t   (char*)0));\n+  return get_identifier (result);\n }\n \n \n@@ -585,7 +633,8 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n   strcpy (name + len + 1, suffix);\n   name[len] = '.';\n   DECL_NAME (new_decl) = get_identifier (name);\n-  SET_DECL_ASSEMBLER_NAME (new_decl, clone_function_name (old_decl, suffix));\n+  SET_DECL_ASSEMBLER_NAME (new_decl, clone_function_name_numbered (old_decl,\n+\t\t\t\t\t\t\t\t   suffix));\n   SET_DECL_RTL (new_decl, NULL);\n \n   new_node = create_clone (new_decl, count, false,\n@@ -964,7 +1013,7 @@ cgraph_node::create_version_clone_with_body\n       = build_function_decl_skip_args (old_decl, args_to_skip, skip_return);\n \n   /* Generate a new name for the new version. */\n-  DECL_NAME (new_decl) = clone_function_name (old_decl, suffix);\n+  DECL_NAME (new_decl) = clone_function_name_numbered (old_decl, suffix);\n   SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n   SET_DECL_RTL (new_decl, NULL);\n "}, {"sha": "4f113cb025e08191768fec5baa58a649cacdc0f2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -36997,7 +36997,7 @@ make_resolver_func (const tree default_decl,\n {\n   /* Make the resolver function static.  The resolver function returns\n      void *.  */\n-  tree decl_name = clone_function_name (default_decl, \"resolver\");\n+  tree decl_name = clone_function_name_numbered (default_decl, \"resolver\");\n   const char *resolver_name = IDENTIFIER_POINTER (decl_name);\n   tree type = build_function_type_list (ptr_type_node, NULL_TREE);\n   tree decl = build_fn_decl (resolver_name, type);"}, {"sha": "a31b7de889903b27f8f7940a140527864f340210", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -1,3 +1,8 @@\n+2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\n+\t* lto-partition.c (privatize_symbol_name_1): Use\n+\t  clone_function_name_numbered.\n+\n 2018-10-26  Jan Hubicka  <jh@suse.cz>\n \n \t* lto/lto-symtab.c (lto_symtab_merge_decls_2): Fix extra space."}, {"sha": "24e7c238597986ccf469446d0b7c8f816976059d", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -964,8 +964,8 @@ privatize_symbol_name_1 (symtab_node *node, tree decl)\n \n   name = maybe_rewrite_identifier (name);\n   symtab->change_decl_assembler_name (decl,\n-\t\t\t\t      clone_function_name_1 (name,\n-\t\t\t\t\t\t\t     \"lto_priv\"));\n+\t\t\t\t      clone_function_name_numbered (\n+\t\t\t\t\t  name, \"lto_priv\"));\n \n   if (node->lto_file_data)\n     lto_record_renamed_decl (node->lto_file_data, name,"}, {"sha": "5225e46bf04fce6fd372a71393daaa4c2d0ffb21", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -162,8 +162,8 @@ create_dispatcher_calls (struct cgraph_node *node)\n     }\n \n   symtab->change_decl_assembler_name (node->decl,\n-\t\t\t\t      clone_function_name (node->decl,\n-\t\t\t\t\t\t\t   \"default\"));\n+\t\t\t\t      clone_function_name_numbered (\n+\t\t\t\t\t  node->decl, \"default\"));\n \n   /* FIXME: copy of cgraph_node::make_local that should be cleaned up\n \t    in next stage1.  */\n@@ -312,8 +312,8 @@ create_target_clone (cgraph_node *node, bool definition, char *name)\n       new_node = cgraph_node::get_create (new_decl);\n       /* Generate a new name for the new version.  */\n       symtab->change_decl_assembler_name (new_node->decl,\n-\t\t\t\t\t  clone_function_name (node->decl,\n-\t\t\t\t\t\t\t       name));\n+\t\t\t\t\t  clone_function_name_numbered (\n+\t\t\t\t\t      node->decl, name));\n     }\n   return new_node;\n }"}, {"sha": "1185a26619ae46a46167b226423867af846618d9", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -7625,7 +7625,8 @@ grid_expand_target_grid_body (struct omp_region *target)\n     expand_omp (gpukernel->inner);\n \n   tree kern_fndecl = copy_node (orig_child_fndecl);\n-  DECL_NAME (kern_fndecl) = clone_function_name (kern_fndecl, \"kernel\");\n+  DECL_NAME (kern_fndecl) = clone_function_name_numbered (kern_fndecl,\n+\t\t\t\t\t\t\t  \"kernel\");\n   SET_DECL_ASSEMBLER_NAME (kern_fndecl, DECL_NAME (kern_fndecl));\n   tree tgtblock = gimple_block (tgt_stmt);\n   tree fniniblock = make_node (BLOCK);"}, {"sha": "b06ddb385767283c64da3cb290dea1b0fe51b1fe", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -1531,8 +1531,8 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n static tree\n create_omp_child_function_name (bool task_copy)\n {\n-  return clone_function_name (current_function_decl,\n-\t\t\t      task_copy ? \"_omp_cpyfn\" : \"_omp_fn\");\n+  return clone_function_name_numbered (current_function_decl,\n+\t\t\t\t       task_copy ? \"_omp_cpyfn\" : \"_omp_fn\");\n }\n \n /* Return true if CTX may belong to offloaded code: either if current function"}, {"sha": "7bafe39b1778c6e7c1af2507f258ac8dec1c614c", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -444,7 +444,8 @@ simd_clone_create (struct cgraph_node *old_node)\n     {\n       tree old_decl = old_node->decl;\n       tree new_decl = copy_node (old_node->decl);\n-      DECL_NAME (new_decl) = clone_function_name (old_decl, \"simdclone\");\n+      DECL_NAME (new_decl) = clone_function_name_numbered (old_decl,\n+\t\t\t\t\t\t\t   \"simdclone\");\n       SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n       SET_DECL_RTL (new_decl, NULL);\n       DECL_STATIC_CONSTRUCTOR (new_decl) = 0;"}, {"sha": "5463008e6458d30f0c0123381b59fb12d1c86b17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -1,3 +1,11 @@\n+2018-10-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n+\n+\t* gcc.dg/tree-prof/cold_partition_label.c: Update for cold\n+\t  section names without numbers.\n+\t* gcc.dg/tree-prof/section-attr-1.c: Ditto.\n+\t* gcc.dg/tree-prof/section-attr-2.c: Ditto.\n+\t* gcc.dg/tree-prof/section-attr-3.c: Ditto.\n+\n 2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/87721"}, {"sha": "450308d6407e6cb627fdd7c8738754c37ac0432b", "filename": "gcc/testsuite/gcc.dg/tree-prof/cold_partition_label.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -37,6 +37,6 @@ main (int argc, char *argv[])\n   return 0;\n }\n \n-/* { dg-final-use { scan-assembler \"foo\\[._\\]+cold\\[\\._\\]+0\" { target *-*-linux* *-*-gnu* } } } */\n-/* { dg-final-use { scan-assembler \"size\\[ \\ta-zA-Z0-0\\]+foo\\[._\\]+cold\\[\\._\\]+0\" { target *-*-linux* *-*-gnu* } } } */\n+/* { dg-final-use { scan-assembler \"foo\\[._\\]+cold\" { target *-*-linux* *-*-gnu* } } } */\n+/* { dg-final-use { scan-assembler \"size\\[ \\ta-zA-Z0-0\\]+foo\\[._\\]+cold\" { target *-*-linux* *-*-gnu* } } } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "0cbd2de0cb100d0574b078cb8a2b4f0a2ad52301", "filename": "gcc/testsuite/gcc.dg/tree-prof/section-attr-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-1.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -46,5 +46,5 @@ foo (int path)\n     }\n }\n \n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\\.0\" { target *-*-linux* *-*-gnu* } } } */\n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\.\\*\\[\\\\n\\\\r\\]+_foo\\.cold\\.0\" { target *-*-darwin* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\" { target *-*-linux* *-*-gnu* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\*\\[\\\\n\\\\r\\]+_foo\\.cold\" { target *-*-darwin* } } } */"}, {"sha": "75a4d8a2c9652fe5e3800f70e2fc7a3faa3f3c31", "filename": "gcc/testsuite/gcc.dg/tree-prof/section-attr-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-2.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -45,5 +45,5 @@ foo (int path)\n     }\n }\n \n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\\.0\" { target *-*-linux* *-*-gnu* } } } */\n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\.\\*\\[\\\\n\\\\r\\]+_foo\\.cold\\.0:\" { target *-*-darwin* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\" { target *-*-linux* *-*-gnu* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\*\\[\\\\n\\\\r\\]+_foo\\.cold:\" { target *-*-darwin* } } } */"}, {"sha": "c243b18b1cff4a992ae156cdd9f9423ff1428551", "filename": "gcc/testsuite/gcc.dg/tree-prof/section-attr-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7958186bea8d900b8e876f80c2b089581e717cdc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fsection-attr-3.c?ref=7958186bea8d900b8e876f80c2b089581e717cdc", "patch": "@@ -46,5 +46,5 @@ foo (int path)\n     }\n }\n \n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\\.0\" { target *-*-linux* *-*-gnu* } } } */\n-/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\.\\*\\[\\\\n\\\\r\\]+_foo\\.cold\\.0:\" { target *-*-darwin* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*\\.text\\.unlikely\\[\\\\n\\\\r\\]+\\[\\t \\]*\\.size\\[\\t \\]*foo\\.cold\" { target *-*-linux* *-*-gnu* } } } */\n+/* { dg-final-use { scan-assembler \"\\.section\\[\\t \\]*__TEXT,__text_cold\\*\\[\\\\n\\\\r\\]+_foo\\.cold:\" { target *-*-darwin* } } } */"}]}