{"sha": "1efb1dc2d893db2fa8f15945d506410aab628b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmYjFkYzJkODkzZGIyZmE4ZjE1OTQ1ZDUwNjQxMGFhYjYyOGI2MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-03-20T18:13:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-03-20T18:13:38Z"}, "message": "re PR c++/84927 (ICE with NSDMI and reference)\n\n\tPR c++/84927\n\t* constexpr.c (cxx_eval_bare_aggregate): Update constructor's flags\n\tas we evaluate the elements.\n\t(cxx_eval_constant_expression): Verify constructor's flags\n\tunconditionally.\n\n\t* g++.dg/cpp1y/nsdmi-aggr9.C: New test.\n\nFrom-SVN: r258691", "tree": {"sha": "cb02f82151fa7f7bd4cef7375f6174ef7a066af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb02f82151fa7f7bd4cef7375f6174ef7a066af4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1efb1dc2d893db2fa8f15945d506410aab628b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efb1dc2d893db2fa8f15945d506410aab628b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1efb1dc2d893db2fa8f15945d506410aab628b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efb1dc2d893db2fa8f15945d506410aab628b60/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5f035a336a9a47d326e800e97fe7fbbeede4a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f035a336a9a47d326e800e97fe7fbbeede4a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f035a336a9a47d326e800e97fe7fbbeede4a99"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "c4dd7d11163edee97a6b67240093d162bcad01a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1efb1dc2d893db2fa8f15945d506410aab628b60", "patch": "@@ -1,3 +1,9 @@\n+2018-03-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/84978, ICE with NRVO.\n+\t* constexpr.c (cxx_eval_constant_expression): Handle the case when\n+\ta RESULT_DECL isn't in the hash map.\n+\n 2018-03-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84978, ICE with NRVO."}, {"sha": "1f8ece89730613e08bd20c6b85d4452641b88cf8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1efb1dc2d893db2fa8f15945d506410aab628b60", "patch": "@@ -4111,7 +4111,15 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       /* We ask for an rvalue for the RESULT_DECL when indirecting\n \t through an invisible reference, or in named return value\n \t optimization.  */\n-      return (*ctx->values->get (t));\n+      if (tree *p = ctx->values->get (t))\n+\treturn *p;\n+      else\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error (\"%qE is not a constant expression\", t);\n+\t  *non_constant_p = true;\n+\t}\n+      break;\n \n     case VAR_DECL:\n       if (DECL_HAS_VALUE_EXPR_P (t))"}, {"sha": "edef059e7ef2e434817e616d8bc88cf11c102189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1efb1dc2d893db2fa8f15945d506410aab628b60", "patch": "@@ -1,3 +1,8 @@\n+2018-03-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/84978, ICE with NRVO.\n+\t* g++.dg/opt/nrv19.C: New test.\n+\n 2018-03-20  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84962"}, {"sha": "385593cc90c68385453875081405d528ca77b3aa", "filename": "gcc/testsuite/g++.dg/opt/nrv19.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efb1dc2d893db2fa8f15945d506410aab628b60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv19.C?ref=1efb1dc2d893db2fa8f15945d506410aab628b60", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/84978\n+// { dg-do compile }\n+\n+struct S {\n+  void (*fn)();\n+  int a[10];\n+};\n+\n+S\n+foo ()\n+{\n+  S s;\n+  s.fn ();\n+  return s;\n+}"}]}