{"sha": "816fad6ed44fb327c4034c40eb9d2bccafd6538d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2ZmFkNmVkNDRmYjMyN2M0MDM0YzQwZWI5ZDJiY2NhZmQ2NTM4ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-02-14T23:22:15Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-02-14T23:22:15Z"}, "message": "PR tree-optimization/83698 - bogus offset in -Wrestrict messages for strcat of unknown strings\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/83698\n\t* gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): For\n\tarrays constrain the offset range to their bounds.\n\t(builtin_access::strcat_overlap): Adjust the bounds of overlap offset.\n\t(builtin_access::overlap): Avoid setting the size of overlap if it's\n\talready been set.\n\t(maybe_diag_overlap): Also consider arrays when deciding what values\n\tof offsets to include in diagnostics.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/83698\n\t* gcc.dg/Wrestrict-7.c: New test.\n\t* c-c++-common/Wrestrict.c: Adjust expected values for strcat.\n\t* gcc.target/i386/chkp-stropt-17.c: Same.\n\nFrom-SVN: r257676", "tree": {"sha": "4abe2f0ee56e212baf1980d760fbb71436a2cbfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4abe2f0ee56e212baf1980d760fbb71436a2cbfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/816fad6ed44fb327c4034c40eb9d2bccafd6538d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816fad6ed44fb327c4034c40eb9d2bccafd6538d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/816fad6ed44fb327c4034c40eb9d2bccafd6538d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/816fad6ed44fb327c4034c40eb9d2bccafd6538d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c102986d6f8205ebc3952344c64edbcd7018fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c102986d6f8205ebc3952344c64edbcd7018fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c102986d6f8205ebc3952344c64edbcd7018fbc"}], "stats": {"total": 142, "additions": 127, "deletions": 15}, "files": [{"sha": "6b09207797980b8de508f564f9124212ed317478", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -1,3 +1,14 @@\n+2018-02-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83698\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): For\n+\tarrays constrain the offset range to their bounds.\n+\t(builtin_access::strcat_overlap): Adjust the bounds of overlap offset.\n+\t(builtin_access::overlap): Avoid setting the size of overlap if it's\n+\talready been set.\n+\t(maybe_diag_overlap): Also consider arrays when deciding what values\n+\tof offsets to include in diagnostics.\n+\n 2018-02-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/84108"}, {"sha": "d0e18541275384f1ac4bf6ce455886389c04ad71", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -375,6 +375,14 @@ builtin_memref::builtin_memref (tree expr, tree size)\n \t    }\n       }\n \n+  if (DECL_P (base) && TREE_CODE (TREE_TYPE (base)) == ARRAY_TYPE)\n+    {\n+      /* For array objects, where a negative offset wouldn't make\n+\t sense, use zero instead if the upper bound is positive.  */\n+      if (offrange[0] < 0 && offrange[1] > 0)\n+\toffrange[0] = 0;\n+    }\n+\n   if (size)\n     {\n       tree range[2];\n@@ -1070,14 +1078,35 @@ builtin_access::strcat_overlap ()\n     return false;\n \n   /* When strcat overlap is certain it is always a single byte:\n-     the terminatinn NUL, regardless of offsets and sizes.  When\n+     the terminating NUL, regardless of offsets and sizes.  When\n      overlap is only possible its range is [0, 1].  */\n   acs.ovlsiz[0] = dstref->sizrange[0] == dstref->sizrange[1] ? 1 : 0;\n   acs.ovlsiz[1] = 1;\n-  acs.ovloff[0] = (dstref->sizrange[0] + dstref->offrange[0]).to_shwi ();\n-  acs.ovloff[1] = (dstref->sizrange[1] + dstref->offrange[1]).to_shwi ();\n \n-  acs.sizrange[0] = wi::smax (acs.dstsiz[0], srcref->sizrange[0]).to_shwi ();\n+  offset_int endoff = dstref->offrange[0] + dstref->sizrange[0];\n+  if (endoff <= srcref->offrange[0])\n+    acs.ovloff[0] = wi::smin (maxobjsize, srcref->offrange[0]).to_shwi ();\n+  else\n+    acs.ovloff[0] = wi::smin (maxobjsize, endoff).to_shwi ();\n+\n+  acs.sizrange[0] = wi::smax (wi::abs (endoff - srcref->offrange[0]) + 1,\n+\t\t\t      srcref->sizrange[0]).to_shwi ();\n+  if (dstref->offrange[0] == dstref->offrange[1])\n+    {\n+      if (srcref->offrange[0] == srcref->offrange[1])\n+\tacs.ovloff[1] = acs.ovloff[0];\n+      else\n+\tacs.ovloff[1]\n+\t  = wi::smin (maxobjsize,\n+\t\t      srcref->offrange[1] + srcref->sizrange[1]).to_shwi ();\n+    }\n+  else\n+    acs.ovloff[1]\n+      = wi::smin (maxobjsize,\n+\t\t  dstref->offrange[1] + dstref->sizrange[1]).to_shwi ();\n+\n+  if (acs.sizrange[0] == 0)\n+    acs.sizrange[0] = 1;\n   acs.sizrange[1] = wi::smax (acs.dstsiz[1], srcref->sizrange[1]).to_shwi ();\n   return true;\n }\n@@ -1215,8 +1244,12 @@ builtin_access::overlap ()\n   /* Call the appropriate function to determine the overlap.  */\n   if ((this->*detect_overlap) ())\n     {\n-      sizrange[0] = wi::smax (acs.dstsiz[0], srcref->sizrange[0]).to_shwi ();\n-      sizrange[1] = wi::smax (acs.dstsiz[1], srcref->sizrange[1]).to_shwi ();\n+      if (!sizrange[1])\n+\t{\n+\t  /* Unless the access size range has already been set, do so here.  */\n+\t  sizrange[0] = wi::smax (acs.dstsiz[0], srcref->sizrange[0]).to_shwi ();\n+\t  sizrange[1] = wi::smax (acs.dstsiz[1], srcref->sizrange[1]).to_shwi ();\n+\t}\n       return true;\n     }\n \n@@ -1392,10 +1425,17 @@ maybe_diag_overlap (location_t loc, gcall *call, builtin_access &acs)\n   /* Use more concise wording when one of the offsets is unbounded\n      to avoid confusing the user with large and mostly meaningless\n      numbers.  */\n-  bool open_range = ((dstref.offrange[0] == -maxobjsize - 1\n-\t\t      && dstref.offrange[1] == maxobjsize)\n-\t\t     || (srcref.offrange[0] == -maxobjsize - 1\n-\t\t\t && srcref.offrange[1] == maxobjsize));\n+  bool open_range;\n+  if (DECL_P (dstref.base) && TREE_CODE (TREE_TYPE (dstref.base)) == ARRAY_TYPE)\n+    open_range = ((dstref.offrange[0] == 0\n+\t\t   && dstref.offrange[1] == maxobjsize)\n+\t\t  || (srcref.offrange[0] == 0\n+\t\t      && srcref.offrange[1] == maxobjsize));\n+  else\n+    open_range = ((dstref.offrange[0] == -maxobjsize - 1\n+\t\t   && dstref.offrange[1] == maxobjsize)\n+\t\t  || (srcref.offrange[0] == -maxobjsize - 1\n+\t\t      && srcref.offrange[1] == maxobjsize));\n \n   if (sizrange[0] == sizrange[1] || sizrange[1] == 1)\n     {"}, {"sha": "431af1a900845be323c986af57962171c40a52b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -3,6 +3,13 @@\n \t(dg-require-effective-target): Change vsx_hw to p8vector_hw.\n \t(dg-options): Change -maltivec -mvsx to -mpower8-vector.\n \n+2018-02-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83698\n+\t* gcc.dg/Wrestrict-7.c: New test.\n+\t* c-c++-common/Wrestrict.c: Adjust expected values for strcat.\n+\t* gcc.target/i386/chkp-stropt-17.c: Same.\n+\n 2018-02-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/84108"}, {"sha": "72d9a4716fb22b4de5f36a08bd606c27b5b5fa98", "filename": "gcc/testsuite/c-c++-common/Wrestrict.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -616,10 +616,13 @@ void test_strcat_var (char *d, const char *s)\n   } while (0)\n \n   T (d, d);                       /* { dg-warning \"source argument is the same as destination\" \"strcat\" } */\n-  T (d, d + 1);                   /* { dg-warning \"accessing 0 or more bytes at offsets 0 and 1 may overlap 1 byte\" \"strcat\" } */\n-  T (d, d + 2);                   /* { dg-warning \"accessing 0 or more bytes at offsets 0 and 2 may overlap 1 byte\" \"strcat\" } */\n-  T (d, d + 999);                 /* { dg-warning \"accessing 0 or more bytes at offsets 0 and 999 may overlap 1 byte\" \"strcat\" } */\n-  T (d, d + -99);                 /* { dg-warning \"accessing 0 or more bytes at offsets 0 and -99 may overlap 1 byte\" \"strcat\" } */\n+  T (d, d + 1);                   /* { dg-warning \"accessing 2 or more bytes at offsets 0 and 1 may overlap 1 byte\" \"strcat\" } */\n+  T (d, d + 2);                   /* { dg-warning \"accessing 3 or more bytes at offsets 0 and 2 may overlap 1 byte at offset 2\" \"strcat\" } */\n+  T (d, d + 999);                 /* { dg-warning \"accessing 1000 or more bytes at offsets 0 and 999 may overlap 1 byte at offset 999\" \"strcat\" } */\n+\n+  /* The source string must be at least 100 bytes in length for the copy\n+     below to overlap.  */\n+  T (d, d + -99);                 /* { dg-warning \"accessing 100 or more bytes at offsets 0 and -99 may overlap 1 byte\" \"strcat\" } */\n \n   size_t n = unsigned_value ();\n "}, {"sha": "5be5e0bd051eca18f0b956d827638f1b1ff02abc", "filename": "gcc/testsuite/gcc.dg/Wrestrict-7.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-7.c?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -0,0 +1,51 @@\n+/* PR tree-optimization/83698 - bogus offset in -Wrestrict messages for\n+   strcat of unknown strings\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wrestrict -ftrack-macro-expansion=0\" } */\n+\n+extern char* strcat (char*, const char*);\n+\n+void sink (char*);\n+\n+#define T(d, s) sink (strcat (d, s))\n+\n+extern char arr[];\n+\n+\n+void test_strcat_array_cst_offset (void)\n+{\n+  T (arr, arr + 1);           /* { dg-warning \"accessing 2 or more bytes at offsets 0 and 1 may overlap 1 byte at offset 1\" } */\n+  T (arr, arr + 2);           /* { dg-warning \"accessing 3 or more bytes at offsets 0 and 2 may overlap 1 byte at offset 2\" } */\n+  T (arr, arr + 13);          /* { dg-warning \"accessing 14 or more bytes at offsets 0 and 13 may overlap 1 byte at offset 13\" } */\n+\n+  T (arr + 1, arr);           /* { dg-warning \"accessing 2 or more bytes at offsets 1 and 0 may overlap 1 byte at offset 1\" } */\n+  T (arr + 17, arr + 11);     /* { dg-warning \"accessing 7 or more bytes at offsets 17 and 11 may overlap 1 byte at offset 17\" } */\n+  T (arr + 36, arr + 20);     /* { dg-warning \"accessing 17 or more bytes at offsets 36 and 20 may overlap 1 byte at offset 36\" } */\n+}\n+\n+void test_strcat_ptr_cst_offset (char *d)\n+{\n+  T (d - 12, d + 34);         /* { dg-warning \"accessing 47 or more bytes at offsets -12 and 34 may overlap 1 byte at offset 34\" } */\n+  T (d + 12, d + 34);         /* { dg-warning \"accessing 23 or more bytes at offsets 12 and 34 may overlap 1 byte at offset 34\" } */\n+  T (d + 20, d + 36);         /* { dg-warning \"accessing 17 or more bytes at offsets 20 and 36 may overlap 1 byte at offset 36\" } */\n+}\n+\n+void test_strcat_array_var_offset (int i, int j)\n+{\n+  T (arr + i, arr);           /* { dg-warning \"accessing 1 or more bytes at offsets \\\\\\[0, \\[0-9\\]+] and 0 may overlap 1 byte at offset \\\\\\[0, \\[0-9\\]+]\" } */\n+  T (arr, arr + j);           /* { dg-warning \"accessing 1 or more bytes at offsets 0 and \\\\\\[0, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[0, \\[0-9\\]+]\" } */\n+  T (arr + i, arr + j);       /* { dg-warning \"accessing 1 or more bytes at offsets \\\\\\[0, \\[0-9\\]+] and \\\\\\[0, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[0, \\[0-9\\]+]\" } */\n+\n+  T (arr + i, arr + 5);       /* { dg-warning \"accessing 6 or more bytes at offsets \\\\\\[0, \\[0-9\\]+] and 5 may overlap 1 byte at offset \\\\\\[5, \\[0-9\\]+]\" } */\n+  T (arr + 7, arr + j);       /* { dg-warning \"accessing 8 or more bytes at offsets 7 and \\\\\\[0, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[7, \\[0-9\\]+]\" } */\n+}\n+\n+void test_strcat_ptr_var_offset (char *d, int i, int j)\n+{\n+  T (d + i, d);               /* { dg-warning \"accessing \\[0-9\\]+ or more bytes at offsets \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] and 0 may overlap 1 byte at offset \\\\\\[0, \\[0-9\\]+]\" } */\n+  T (d, d + j);               /* { dg-warning \"accessing \\[0-9\\]+ or more bytes at offsets 0 and \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[0, \\[0-9\\]+]\" } */\n+  T (d + i, d + j);           /* { dg-warning \"accessing 1 or more bytes at offsets \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] and \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[-\\[0-9\\]+, \\[0-9\\]+]\" } */\n+\n+  T (d + i, d + 3);           /* { dg-warning \"accessing \\[0-9\\]+ or more bytes at offsets \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] and 3 may overlap 1 byte at offset \\\\\\[3, \\[0-9\\]+]\" } */\n+  T (d + 9, d + j);           /* { dg-warning \"accessing \\[0-9\\]+ or more bytes at offsets 9 and \\\\\\[-\\[0-9\\]+, \\[0-9\\]+] may overlap 1 byte at offset \\\\\\[9, \\[0-9\\]+]\" } */\n+}"}, {"sha": "faf304c33039961c55f8b6b3271a3e4ececbb6bb", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/816fad6ed44fb327c4034c40eb9d2bccafd6538d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c?ref=816fad6ed44fb327c4034c40eb9d2bccafd6538d", "patch": "@@ -51,7 +51,7 @@ void test_strcpy (void)\n \n void test_strcat (int n)\n {\n-  strcat (a, a + 3);   /* { dg-warning \".strcat\\.chkp. accessing 0 or more bytes at offsets 0 and 3 may overlap 1 byte\" } */\n+  strcat (a, a + 3);   /* { dg-warning \".strcat\\.chkp. accessing 4 or more bytes at offsets 0 and 3 may overlap 1 byte at offset 3\" } */\n }\n \n void test_strncat (int n)"}]}