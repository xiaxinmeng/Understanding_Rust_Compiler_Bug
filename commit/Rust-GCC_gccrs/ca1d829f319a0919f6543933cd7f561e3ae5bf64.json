{"sha": "ca1d829f319a0919f6543933cd7f561e3ae5bf64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExZDgyOWYzMTlhMDkxOWY2NTQzOTMzY2Q3ZjU2MWUzYWU1YmY2NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-23T14:07:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-23T14:07:28Z"}, "message": "2004-01-23  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/FileDescriptor.java\n\t(lock): New method.\n\t(tryLock): New method.\n\t(unlock): New method.\n\t* java/io/natFileDescriptorEcos.cc\n\t(lock): New method.\n\t(tryLock): New method.\n\t(unlock): New method.\n\t* java/io/natFileDescriptorPosix.cc\n\t(lock): New method.\n\t(tryLock): New method.\n\t(unlock): New method.\n\t* java/io/natFileDescriptorWin32.cc\n\t(lock): New method.\n\t(tryLock): New method.\n\t(unlock): New method.\n\nFrom-SVN: r76421", "tree": {"sha": "fd615eae154189a9a30bcb6d68a92415141b8f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd615eae154189a9a30bcb6d68a92415141b8f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1d829f319a0919f6543933cd7f561e3ae5bf64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1d829f319a0919f6543933cd7f561e3ae5bf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1d829f319a0919f6543933cd7f561e3ae5bf64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1d829f319a0919f6543933cd7f561e3ae5bf64/comments", "author": null, "committer": null, "parents": [{"sha": "0e707673d273651f3b1f75beb53c42c9d521e3c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e707673d273651f3b1f75beb53c42c9d521e3c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e707673d273651f3b1f75beb53c42c9d521e3c4"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "1d25820785f81599eaa8d91af26701cbcd4045cb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ca1d829f319a0919f6543933cd7f561e3ae5bf64", "patch": "@@ -1,3 +1,22 @@\n+2004-01-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/FileDescriptor.java\n+\t(lock): New method.\n+\t(tryLock): New method.\n+\t(unlock): New method.\n+\t* java/io/natFileDescriptorEcos.cc\n+\t(lock): New method.\n+\t(tryLock): New method.\n+\t(unlock): New method.\n+\t* java/io/natFileDescriptorPosix.cc\n+\t(lock): New method.\n+\t(tryLock): New method.\n+\t(unlock): New method.\n+\t* java/io/natFileDescriptorWin32.cc\n+\t(lock): New method.\n+\t(tryLock): New method.\n+\t(unlock): New method.\n+\n 2004-01-23  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/FileDescriptor.java"}, {"sha": "109d2468783d47bbc9726db8d18eacec058e4c29", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=ca1d829f319a0919f6543933cd7f561e3ae5bf64", "patch": "@@ -208,6 +208,10 @@ native void write(byte[] b, int offset, int len)\n   native long getLength() throws IOException;\n   native void setLength(long pos) throws IOException;\n \n+  native void lock(long pos, int len, boolean shared) throws IOException;\n+  native boolean tryLock(long pos, int lent, boolean shared) throws IOException;\n+  native void unlock(long pos, int len) throws IOException;\n+\n   // When collected, close.\n   protected void finalize() throws Throwable\n   {"}, {"sha": "66713079a8600d1ea577e27b72764815feb88e52", "filename": "libjava/java/io/natFileDescriptorEcos.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc?ref=ca1d829f319a0919f6543933cd7f561e3ae5bf64", "patch": "@@ -136,3 +136,24 @@ java::io::FileDescriptor::available (void)\n {\n   return 0;\n }\n+\n+void\n+java::io::FileDescriptor::lock (jlong pos, jint len, jboolean shared)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.lock() not implemented\"));\n+}\n+\n+jboolean\n+java::io::FileDescriptor::tryLock (jlong pos, jint len, jboolean shared)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.tryLock() not implemented\"));\n+}\n+\n+void\n+java::io::FileDescriptor::unlock (jlong pos, jint len)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.unlock() not implemented\"));\n+}"}, {"sha": "7c36669d27f0902c804758e4d94bc442c9cffc0b", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=ca1d829f319a0919f6543933cd7f561e3ae5bf64", "patch": "@@ -13,6 +13,7 @@ details.  */\n #include \"posix.h\"\n \n #include <errno.h>\n+#include <fcntl.h>\n #include <stdio.h>\n #include <string.h>\n #include <sys/stat.h>\n@@ -420,3 +421,47 @@ java::io::FileDescriptor::available (void)\n   return 0;\n #endif\n }\n+\n+void\n+java::io::FileDescriptor::lock (jlong pos, jint len, jboolean shared)\n+{\n+  struct flock lockdata;\n+\n+  lockdata.l_type = shared ? F_WRLCK : F_RDLCK;\n+  lockdata.l_whence = SEEK_SET;\n+  lockdata.l_start = pos;\n+  lockdata.l_len = len;\n+\n+  if (::fcntl (fd, F_SETLK, &lockdata) == -1)\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+}\n+\n+jboolean\n+java::io::FileDescriptor::tryLock (jlong pos, jint len, jboolean shared)\n+{\n+  struct flock lockdata;\n+\n+  lockdata.l_type = shared ? F_WRLCK : F_RDLCK;\n+  lockdata.l_whence = SEEK_SET;\n+  lockdata.l_start = pos;\n+  lockdata.l_len = len;\n+\n+  if (::fcntl (fd, F_GETLK, &lockdata) == -1)\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+\n+  return lockdata.l_type == F_UNLCK;\n+}\n+\n+void\n+java::io::FileDescriptor::unlock (jlong pos, jint len)\n+{\n+  struct flock lockdata;\n+\n+  lockdata.l_type = F_UNLCK;\n+  lockdata.l_whence = SEEK_SET;\n+  lockdata.l_start = pos;\n+  lockdata.l_len = len;\n+\n+  if (::fcntl (fd, F_SETLK, &lockdata) == -1)\n+    throw new IOException (JvNewStringLatin1 (strerror (errno)));\n+}"}, {"sha": "fd9d9755e69fb00b3d6702a160531e3471055f83", "filename": "libjava/java/io/natFileDescriptorWin32.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1d829f319a0919f6543933cd7f561e3ae5bf64/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc?ref=ca1d829f319a0919f6543933cd7f561e3ae5bf64", "patch": "@@ -350,3 +350,24 @@ java::io::FileDescriptor::available(void)\n   // FIXME:\n   return getLength() - getFilePointer();\n }\n+\n+void\n+java::io::FileDescriptor::lock (jlong pos, jint len, jboolean shared)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.lock() not implemented\"));\n+}\n+\n+jboolean\n+java::io::FileDescriptor::tryLock (jlong pos, jint len, jboolean shared)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.tryLock() not implemented\"));\n+}\n+\n+void\n+java::io::FileDescriptor::unlock (jlong pos, jint len)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"java.io.FileDescriptor.unlock() not implemented\"));\n+}"}]}