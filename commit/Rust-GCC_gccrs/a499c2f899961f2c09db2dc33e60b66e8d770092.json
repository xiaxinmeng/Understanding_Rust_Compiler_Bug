{"sha": "a499c2f899961f2c09db2dc33e60b66e8d770092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5OWMyZjg5OTk2MWYyYzA5ZGIyZGMzM2U2MGI2NmU4ZDc3MDA5Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:41:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:41:45Z"}, "message": "PR c/93812 - ICE on redeclaration of an attribute format function without protoype\n\ngcc/c/ChangeLog:\n\n\tPR c/93812\n\t* c-typeck.c (build_functype_attribute_variant): New function.\n\t(composite_type): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/93812\n\t* gcc.dg/format/proto.c: New test.", "tree": {"sha": "b4e1280ce09a78f7b1a84f3e921d48f47aef1ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e1280ce09a78f7b1a84f3e921d48f47aef1ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a499c2f899961f2c09db2dc33e60b66e8d770092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a499c2f899961f2c09db2dc33e60b66e8d770092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a499c2f899961f2c09db2dc33e60b66e8d770092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a499c2f899961f2c09db2dc33e60b66e8d770092/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9369c5dcf301e090d3a83e2c210cd6b96ac08c"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "effb71bd328f4eca00c5bad0e3e1eea6f41315aa", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a499c2f899961f2c09db2dc33e60b66e8d770092", "patch": "@@ -1,3 +1,9 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/93812\n+\t* c-typeck.c (build_functype_attribute_variant): New function.\n+\t(composite_type): Call it.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/93912"}, {"sha": "308fcffcfb0c03fe04a38757ed72a770c02a5bcf", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a499c2f899961f2c09db2dc33e60b66e8d770092", "patch": "@@ -353,7 +353,28 @@ c_vla_type_p (const_tree t)\n     return true;\n   return false;\n }\n-\f\n+\n+/* If NTYPE is a type of a non-variadic function with a prototype\n+   and OTYPE is a type of a function without a prototype and ATTRS\n+   contains attribute format, diagnosess and removes it from ATTRS.\n+   Returns the result of build_type_attribute_variant of NTYPE and\n+   the (possibly) modified ATTRS.  */\n+\n+static tree\n+build_functype_attribute_variant (tree ntype, tree otype, tree attrs)\n+{\n+  if (!prototype_p (otype)\n+      && prototype_p (ntype)\n+      && lookup_attribute (\"format\", attrs))\n+    {\n+      warning_at (input_location, OPT_Wattributes,\n+\t\t  \"%qs attribute cannot be applied to a function that \"\n+\t\t  \"does not take variable arguments\", \"format\");\n+      attrs = remove_attribute (\"format\", attrs);\n+    }\n+  return build_type_attribute_variant (ntype, attrs);\n+\n+}\n /* Return the composite type of two compatible types.\n \n    We assume that comptypes has already been done and returned\n@@ -504,9 +525,9 @@ composite_type (tree t1, tree t2)\n \n \t/* Save space: see if the result is identical to one of the args.  */\n \tif (valtype == TREE_TYPE (t1) && !TYPE_ARG_TYPES (t2))\n-\t  return build_type_attribute_variant (t1, attributes);\n+\t  return build_functype_attribute_variant (t1, t2, attributes);\n \tif (valtype == TREE_TYPE (t2) && !TYPE_ARG_TYPES (t1))\n-\t  return build_type_attribute_variant (t2, attributes);\n+\t  return build_functype_attribute_variant (t2, t1, attributes);\n \n \t/* Simple way if one arg fails to specify argument types.  */\n \tif (TYPE_ARG_TYPES (t1) == NULL_TREE)"}, {"sha": "a6524beedefb65d3f1b6743f84473381155a54db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a499c2f899961f2c09db2dc33e60b66e8d770092", "patch": "@@ -1,3 +1,8 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/93812\n+\t* gcc.dg/format/proto.c: New test.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/93829"}, {"sha": "b2050c9de5bb5c9f0bc088e5cb9e3d90f2c6a6dd", "filename": "gcc/testsuite/gcc.dg/format/proto.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fproto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a499c2f899961f2c09db2dc33e60b66e8d770092/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fproto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fproto.c?ref=a499c2f899961f2c09db2dc33e60b66e8d770092", "patch": "@@ -0,0 +1,89 @@\n+/* PR c/93812 - ICE on redeclaration of an attribute format function without\n+   protoype\n+   It's not clear that attribute format should be accepted on functions\n+   without a prototype.  If it's decided that it shouldn't be the tests\n+   here will need to be adjusted.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define FMT(n1, n2) __attribute__((__format__(__printf__, n1, n2)))\n+\n+// Exercise function declarations.\n+FMT (1, 2) void print1 ();\n+\n+FMT (2, 3) void print2 ();\n+           void print2 ();\n+\n+FMT (3, 4) void print3 ();\n+FMT (3, 4) void print3 ();\n+\n+FMT (1, 2) void print4 ();\n+           void print4 (void);              // { dg-warning \"'format' attribute cannot be applied to a function that does not take variable arguments\" }\n+\n+           void print5 ();\n+FMT (1, 2) void print5 (void);              // { dg-warning \"\\\\\\[-Wattributes\" }\n+\n+FMT (1, 2) void print6 ();\n+          void print6 (const char*, ...);   // { dg-error \"conflicting types\" }\n+\n+           void print7 (const char*, ...);\n+FMT (1, 2) void print7 ();                  // { dg-error \"conflicting types\" }\n+\n+\n+// Exercise function calls.\n+void test_print (void)\n+{\n+  print1 (\"%i %s\", 123, \"\");\n+  print1 (\"%s %i\", 123, 123);               // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  print2 (0, \"%s %i\", \"\", 123);\n+  print2 (1, \"%i %s\", \"\", 123);             // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  print3 (0, 1, \"%s %i\", \"\", 123);\n+  print3 (1, 2, \"%i %s\", \"\", 123);          // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  // Just verify there's no ICE.\n+  print4 ();\n+  print5 ();\n+  print6 (\"%i %s\", 123, \"\");\n+}\n+\n+\n+// Exercise declarations of pointers to functions.\n+FMT (1, 2) void (*pfprint1)();\n+\n+FMT (2, 3) void (*pfprint2)();\n+           void (*pfprint2)();\n+\n+FMT (3, 4) void (*pfprint3)();\n+FMT (3, 4) void (*pfprint3)();\n+\n+FMT (1, 2) void (*pfprint4)();\n+           void (*pfprint4)(void);              // { dg-warning \"'format' attribute cannot be applied to a function that does not take variable arguments\" }\n+\n+           void (*pfprint5)();\n+FMT (1, 2) void (*pfprint5)(void);              // { dg-warning \"\\\\\\[-Wattributes\" }\n+\n+FMT (1, 2) void (*pfprint6)();\n+           void (*pfprint6)(const char*, ...);   // { dg-error \"conflicting types\" }\n+\n+           void (*pfprint7)(const char*, ...);\n+FMT (1, 2) void (*pfprint7)();                  // { dg-error \"conflicting types\" }\n+\n+// Exercise calls via function pointers.\n+void test_pfprint (void)\n+{\n+  pfprint1 (\"%i %s\", 123, \"\");\n+  pfprint1 (\"%s %i\", 123, 123);             // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  pfprint2 (0, \"%s %i\", \"\", 123);\n+  pfprint2 (1, \"%i %s\", \"\", 123);           // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  pfprint3 (0, 1, \"%s %i\", \"\", 123);\n+  pfprint3 (1, 2, \"%i %s\", \"\", 123);        // { dg-warning \"\\\\\\[-Wformat\" }\n+\n+  // Just verify there's no ICE.\n+  pfprint4 ();\n+  pfprint5 ();\n+  pfprint6 (\"%i %s\", 123, \"\");\n+}"}]}