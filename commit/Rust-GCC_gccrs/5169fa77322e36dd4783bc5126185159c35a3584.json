{"sha": "5169fa77322e36dd4783bc5126185159c35a3584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2OWZhNzczMjJlMzZkZDQ3ODNiYzUxMjYxODUxNTljMzVhMzU4NA==", "commit": {"author": {"name": "Sylvia Taylor", "email": "sylvia.taylor@arm.com", "date": "2019-07-09T12:51:55Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-07-09T12:51:55Z"}, "message": "[aarch64]: redefine aes patterns\n\nThis first patch removes aarch64 usage of the aese/aesmc and aesd/aesimc\nfusions (i.e. aes fusion) implemented in the scheduler due to unpredictable\nbehaviour observed in cases such as:\n- when register allocation goes bad (e.g. extra movs)\n- aes operations with xor and zeroed keys among interleaved operations\n\nA more stable version should be provided by instead doing the aes fusion\nduring the combine pass. Since the aese and aesd patterns have been\nrewritten as encapsulating a xor operation, the existing combine fusion\npatterns have also been updated. The purpose is to simplify the need of\nhaving additional combine patterns for cases like the ones below:\n\nFor AESE (though it also applies to AESD as both have a xor operation):\n\n    data = data ^ key;\n    data = vaeseq_u8(data, zero);\n    ---\n    eor         v1.16b, v0.16b, v1.16b\n    aese        v1.16b, v2.16b\n\nShould mean and generate the same as:\n\n    data = vaeseq_u8(data, key);\n    ---\n    aese        v1.16b, v0.16b\n\n2019-07-09  Sylvia Taylor  <sylvia.taylor@arm.com>\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_crypto_aes<aes_op>v16qi): Redefine pattern with xor.\n\t(aarch64_crypto_aes<aesmc_op>v16qi): Remove attribute enabled.\n\t(*aarch64_crypto_aes<aes_op>v16qi_xor_combine): Remove both.\n\t(*aarch64_crypto_aese_fused,\n\t*aarch64_crypto_aesd_fused): Update to new definition.\n\t* config/aarch64/aarch64.c\n\t(aarch_macro_fusion_pair_p): Remove aese/aesmc fusion check.\n\n\t* gcc.target/aarch64/crypto-fuse-1.c: Remove.\n\t* gcc.target/aarch64/crypto-fuse-2.c: Remove.\n\t* gcc.target/aarch64/aes-fuse-1.c: New testcase.\n\t* gcc.target/aarch64/aes-fuse-2.c: New testcase.\n\nFrom-SVN: r273304", "tree": {"sha": "0f91a01db5f71dd71180d423acde7e2f5164c77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f91a01db5f71dd71180d423acde7e2f5164c77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5169fa77322e36dd4783bc5126185159c35a3584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5169fa77322e36dd4783bc5126185159c35a3584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5169fa77322e36dd4783bc5126185159c35a3584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5169fa77322e36dd4783bc5126185159c35a3584/comments", "author": null, "committer": null, "parents": [{"sha": "b61184875ec454875b5a47f3bfa94a6d45f5b845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61184875ec454875b5a47f3bfa94a6d45f5b845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61184875ec454875b5a47f3bfa94a6d45f5b845"}], "stats": {"total": 244, "additions": 135, "deletions": 109}, "files": [{"sha": "25959b9453c77633712169e26f2c69671bccf6f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -1,3 +1,14 @@\n+2019-07-09  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_crypto_aes<aes_op>v16qi): Redefine pattern with xor.\n+\t(aarch64_crypto_aes<aesmc_op>v16qi): Remove attribute enabled.\n+\t(*aarch64_crypto_aes<aes_op>v16qi_xor_combine): Remove both.\n+\t(*aarch64_crypto_aese_fused,\n+\t*aarch64_crypto_aesd_fused): Update to new definition.\n+\t* config/aarch64/aarch64.c\n+\t(aarch_macro_fusion_pair_p): Remove aese/aesmc fusion check.\n+\n 2019-07-09  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-match.h (gimple_match_op::resimplify): New."}, {"sha": "0c2600f1fc6d5872b59a1f1c3af4e753bc61a6a2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -6053,56 +6053,23 @@\n \n (define_insn \"aarch64_crypto_aes<aes_op>v16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%0\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"w\")]\n+\t(unspec:V16QI\n+\t\t[(xor:V16QI\n+\t\t (match_operand:V16QI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:V16QI 2 \"register_operand\" \"w\"))]\n          CRYPTO_AES))]\n   \"TARGET_SIMD && TARGET_AES\"\n   \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n   [(set_attr \"type\" \"crypto_aese\")]\n )\n \n-(define_insn \"*aarch64_crypto_aes<aes_op>v16qi_xor_combine\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:V16QI [(xor:V16QI\n-\t\t\t(match_operand:V16QI 1 \"register_operand\" \"%0\")\n-\t\t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))\n-\t\t       (match_operand:V16QI 3 \"aarch64_simd_imm_zero\" \"\")]\n-\t\t       CRYPTO_AES))]\n-  \"TARGET_SIMD && TARGET_AES\"\n-  \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n-  [(set_attr \"type\" \"crypto_aese\")]\n-)\n-\n-(define_insn \"*aarch64_crypto_aes<aes_op>v16qi_xor_combine\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:V16QI [(match_operand:V16QI 3 \"aarch64_simd_imm_zero\" \"\")\n-\t(xor:V16QI (match_operand:V16QI 1 \"register_operand\" \"%0\")\n-\t\t   (match_operand:V16QI 2 \"register_operand\" \"w\"))]\n-\tCRYPTO_AES))]\n-  \"TARGET_SIMD && TARGET_AES\"\n-  \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n-  [(set_attr \"type\" \"crypto_aese\")]\n-)\n-\n-;; When AES/AESMC fusion is enabled we want the register allocation to\n-;; look like:\n-;;    AESE Vn, _\n-;;    AESMC Vn, Vn\n-;; So prefer to tie operand 1 to operand 0 when fusing.\n-\n (define_insn \"aarch64_crypto_aes<aesmc_op>v16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=w,w\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0,w\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"w\")]\n \t CRYPTO_AESMC))]\n   \"TARGET_SIMD && TARGET_AES\"\n   \"aes<aesmc_op>\\\\t%0.16b, %1.16b\"\n-  [(set_attr \"type\" \"crypto_aesmc\")\n-   (set_attr_alternative \"enabled\"\n-     [(if_then_else (match_test\n-\t\t       \"aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\")\n-\t\t     (const_string \"yes\" )\n-\t\t     (const_string \"no\"))\n-      (const_string \"yes\")])]\n+  [(set_attr \"type\" \"crypto_aesmc\")]\n )\n \n ;; When AESE/AESMC fusion is enabled we really want to keep the two together\n@@ -6111,12 +6078,14 @@\n ;;  Mash the two together during combine.\n \n (define_insn \"*aarch64_crypto_aese_fused\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=&w\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n \t(unspec:V16QI\n \t  [(unspec:V16QI\n-\t    [(match_operand:V16QI 1 \"register_operand\" \"0\")\n-\t     (match_operand:V16QI 2 \"register_operand\" \"w\")] UNSPEC_AESE)\n-\t  ] UNSPEC_AESMC))]\n+\t   [(xor:V16QI\n+\t\t(match_operand:V16QI 1 \"register_operand\" \"%0\")\n+\t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))]\n+\t     UNSPEC_AESE)]\n+\tUNSPEC_AESMC))]\n   \"TARGET_SIMD && TARGET_AES\n    && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n   \"aese\\\\t%0.16b, %2.16b\\;aesmc\\\\t%0.16b, %0.16b\"\n@@ -6130,12 +6099,14 @@\n ;;  Mash the two together during combine.\n \n (define_insn \"*aarch64_crypto_aesd_fused\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=&w\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n \t(unspec:V16QI\n \t  [(unspec:V16QI\n-\t    [(match_operand:V16QI 1 \"register_operand\" \"0\")\n-\t     (match_operand:V16QI 2 \"register_operand\" \"w\")] UNSPEC_AESD)\n-\t  ] UNSPEC_AESIMC))]\n+\t\t    [(xor:V16QI\n+\t\t\t(match_operand:V16QI 1 \"register_operand\" \"%0\")\n+\t\t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))]\n+\t\tUNSPEC_AESD)]\n+\t  UNSPEC_AESIMC))]\n   \"TARGET_SIMD && TARGET_AES\n    && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n   \"aesd\\\\t%0.16b, %2.16b\\;aesimc\\\\t%0.16b, %0.16b\""}, {"sha": "e4e9e3fb02cf49c4bfb0c7cdb208381f65346ee3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -17965,10 +17965,6 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if (aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\n-       && aarch_crypto_can_dual_issue (prev, curr))\n-    return true;\n-\n   if (aarch64_fusion_enabled_p (AARCH64_FUSE_CMP_BRANCH)\n       && any_condjump_p (curr))\n     {"}, {"sha": "3e36c0a2f4d260fd52f7a792aae515d62838722d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -1,3 +1,10 @@\n+2019-07-09  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* gcc.target/aarch64/crypto-fuse-1.c: Remove.\n+\t* gcc.target/aarch64/crypto-fuse-2.c: Remove.\n+\t* gcc.target/aarch64/aes-fuse-1.c: New testcase.\n+\t* gcc.target/aarch64/aes-fuse-2.c: New testcase.\n+\n 2019-07-09  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/cmse/bitfield-1.c: Fix address of .gnu.sgstubs"}, {"sha": "d7b4f89919d1144557e409f7dcce9c1c8c6321ed", "filename": "gcc/testsuite/gcc.target/aarch64/aes-fuse-1.c", "status": "renamed", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-1.c?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -1,45 +1,66 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n+/* { dg-additional-options \"-march=armv8-a+crypto\" { target { aarch64*-*-* } } }*/\n \n #include <arm_neon.h>\n \n #define AESE(r, v, key) (r = vaeseq_u8 ((v), (key)));\n #define AESMC(r, i) (r = vaesmcq_u8 (i))\n \n+const uint8x16_t zero = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n uint8x16_t dummy;\n uint8x16_t a;\n uint8x16_t b;\n uint8x16_t c;\n uint8x16_t d;\n-uint8x16_t e;\n+uint8x16_t x;\n+uint8x16_t y;\n+uint8x16_t k;\n+\n+void foo (void)\n \n-void\n-foo (void)\n {\n-  AESE (a, a, e);\n+  AESE (a, a, k);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n-  AESE (b, b, e);\n+  AESE (b, b, k);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n-  AESE (c, c, e);\n+  AESE (c, c, k);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n-  AESE (d, d, e);\n+  AESE (d, d, k);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n \n-  AESMC (a, a);\n+  x = x ^ k;\n+  AESE (x, x, zero);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n-  AESMC (b, b);\n+  y = y ^ k;\n+  AESE (y, y, zero);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  AESMC (d, d);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n   AESMC (c, c);\n   dummy = vaddq_u8 (dummy, dummy);\n   dummy = vaddq_u8 (dummy, dummy);\n-  AESMC (d, d);\n-}\n+  AESMC (b, b);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (a, a);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n \n-/* { dg-final { scan-assembler-times \"crypto_aese_fused\" 4 } } */\n+  AESMC (y, y);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESMC (x, x);\n+}\n \n+/* { dg-final { scan-assembler-times \"crypto_aese_fused\" 6 } } */\n+/* { dg-final { scan-assembler-not \"veor\" } } */", "previous_filename": "gcc/testsuite/gcc.target/aarch64/crypto-fuse-1.c"}, {"sha": "dfe01b03a36c72e2b2d8235cea794a9cd32baa9a", "filename": "gcc/testsuite/gcc.target/aarch64/aes-fuse-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5169fa77322e36dd4783bc5126185159c35a3584/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes-fuse-2.c?ref=5169fa77322e36dd4783bc5126185159c35a3584", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n+/* { dg-additional-options \"-march=armv8-a+crypto\" { target { aarch64*-*-* } } }*/\n+\n+#include <arm_neon.h>\n+\n+#define AESD(r, v, key) (r = vaesdq_u8 ((v), (key)));\n+#define AESIMC(r, i) (r = vaesimcq_u8 (i))\n+\n+const uint8x16_t zero = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+uint8x16_t dummy;\n+uint8x16_t a;\n+uint8x16_t b;\n+uint8x16_t c;\n+uint8x16_t d;\n+uint8x16_t x;\n+uint8x16_t y;\n+uint8x16_t k;\n+\n+void foo (void)\n+{\n+  AESD (a, a, k);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESD (b, b, k);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESD (c, c, k);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESD (d, d, k);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  x = x ^ k;\n+  AESD (x, x, zero);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  y = y ^ k;\n+  AESD (y, y, zero);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  AESIMC (d, d);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESIMC (c, c);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESIMC (b, b);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESIMC (a, a);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+\n+  AESIMC (y, y);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  dummy = vaddq_u8 (dummy, dummy);\n+  AESIMC (x, x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crypto_aesd_fused\" 6 } } */\n+/* { dg-final { scan-assembler-not \"veor\" } } */"}, {"sha": "b12df2d3ee4e042790fce25ae6c0fcb810b57641", "filename": "gcc/testsuite/gcc.target/aarch64/crypto-fuse-2.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61184875ec454875b5a47f3bfa94a6d45f5b845/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61184875ec454875b5a47f3bfa94a6d45f5b845/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcrypto-fuse-2.c?ref=b61184875ec454875b5a47f3bfa94a6d45f5b845", "patch": "@@ -1,45 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -mcpu=cortex-a72+crypto -dp\" } */\n-\n-#include <arm_neon.h>\n-\n-#define AESE(r, v, key) (r = vaesdq_u8 ((v), (key)));\n-#define AESMC(r, i) (r = vaesimcq_u8 (i))\n-\n-uint8x16_t dummy;\n-uint8x16_t a;\n-uint8x16_t b;\n-uint8x16_t c;\n-uint8x16_t d;\n-uint8x16_t e;\n-\n-void\n-foo (void)\n-{\n-  AESE (a, a, e);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESE (b, b, e);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESE (c, c, e);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESE (d, d, e);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-\n-  AESMC (a, a);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESMC (b, b);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESMC (c, c);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  dummy = vaddq_u8 (dummy, dummy);\n-  AESMC (d, d);\n-}\n-\n-/* { dg-final { scan-assembler-times \"crypto_aesd_fused\" 4 } } */\n-"}]}