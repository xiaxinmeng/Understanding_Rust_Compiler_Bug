{"sha": "c95d07f893f510c270e214445f628e20173d62f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1ZDA3Zjg5M2Y1MTBjMjcwZTIxNDQ0NWY2MjhlMjAxNzNkNjJmMQ==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-10-29T18:23:02Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-10-29T18:23:02Z"}, "message": "gthr-posix.h: Include <unistd.h> for feature tests.\n\n* gthr-posix.h: Include <unistd.h> for feature tests.\n(sched_get_priority_max, sched_get_priority_min)\n(pthread_getschedparam, pthread_setschedparam): Only use\nif _POSIX_THREAD_PRIORITY_SCHEDULING is defined.\n(__gthread_objc_thread_set_priority): Don't treat all non-zero\nreturns from sched_get_priority_max and sched_get_priority_min\nas an error.\n\nFrom-SVN: r58630", "tree": {"sha": "1211af4b64b815810c777f183715ab35af995db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1211af4b64b815810c777f183715ab35af995db0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95d07f893f510c270e214445f628e20173d62f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95d07f893f510c270e214445f628e20173d62f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95d07f893f510c270e214445f628e20173d62f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95d07f893f510c270e214445f628e20173d62f1/comments", "author": null, "committer": null, "parents": [{"sha": "3950794d0a5a93bb4af3979c23252df7f34c35bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3950794d0a5a93bb4af3979c23252df7f34c35bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3950794d0a5a93bb4af3979c23252df7f34c35bd"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "b64d04531e6f77001231d4466b25768cae7cb8df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95d07f893f510c270e214445f628e20173d62f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95d07f893f510c270e214445f628e20173d62f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c95d07f893f510c270e214445f628e20173d62f1", "patch": "@@ -1,3 +1,13 @@\n+2002-10-29  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* gthr-posix.h: Include <unistd.h> for feature tests.\n+\t(sched_get_priority_max, sched_get_priority_min)\n+\t(pthread_getschedparam, pthread_setschedparam): Only use\n+\tif _POSIX_THREAD_PRIORITY_SCHEDULING is defined.\n+\t(__gthread_objc_thread_set_priority): Don't treat all non-zero\n+\treturns from sched_get_priority_max and sched_get_priority_min\n+\tas an error.\n+\n 2002-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.h (TARGET_DEFAULT): Make it"}, {"sha": "463cae0705452eee70dccf31879b7e115f7a4cd9", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95d07f893f510c270e214445f628e20173d62f1/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95d07f893f510c270e214445f628e20173d62f1/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=c95d07f893f510c270e214445f628e20173d62f1", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define __GTHREADS 1\n \n #include <pthread.h>\n+#include <unistd.h>\n \n typedef pthread_key_t __gthread_key_t;\n typedef pthread_once_t __gthread_once_t;\n@@ -67,15 +68,21 @@ typedef pthread_mutex_t __gthread_mutex_t;\n #pragma weak pthread_mutex_init\n #pragma weak pthread_mutex_destroy\n #pragma weak pthread_self\n+/* These really should be protected by _POSIX_PRIORITY_SCHEDULING, but\n+   we use them inside a _POSIX_THREAD_PRIORITY_SCHEDULING block.  */\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n #pragma weak sched_get_priority_max\n #pragma weak sched_get_priority_min\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n #pragma weak sched_yield\n #pragma weak pthread_attr_destroy\n #pragma weak pthread_attr_init\n #pragma weak pthread_attr_setdetachstate\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n #pragma weak pthread_getschedparam\n #pragma weak pthread_setschedparam\n-#endif\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n+#endif /* _LIBOBJC */\n \n static inline int\n __gthread_active_p (void)\n@@ -173,17 +180,18 @@ __gthread_objc_thread_set_priority(int priority)\n   if (!__gthread_active_p())\n     return -1;\n   else {\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n     pthread_t thread_id = pthread_self();\n     int policy;\n     struct sched_param params;\n     int priority_min, priority_max;\n \n     if (pthread_getschedparam(thread_id, &policy, &params) == 0)\n       {\n-\tif ((priority_max = sched_get_priority_max(policy)) != 0)\n+\tif ((priority_max = sched_get_priority_max(policy)) == -1)\n \t  return -1;\n \n-\tif ((priority_min = sched_get_priority_min(policy)) != 0)\n+\tif ((priority_min = sched_get_priority_min(policy)) == -1)\n \t  return -1;\n \n \tif (priority > priority_max)\n@@ -200,6 +208,7 @@ __gthread_objc_thread_set_priority(int priority)\n \tif (pthread_setschedparam(thread_id, policy, &params) == 0)\n \t  return 0;\n       }\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n     return -1;\n   }\n }\n@@ -208,6 +217,7 @@ __gthread_objc_thread_set_priority(int priority)\n static inline int\n __gthread_objc_thread_get_priority(void)\n {\n+#ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n   if (__gthread_active_p ())\n     {\n       int policy;\n@@ -219,6 +229,7 @@ __gthread_objc_thread_get_priority(void)\n \treturn -1;\n     }\n   else\n+#endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */\n     return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n "}]}