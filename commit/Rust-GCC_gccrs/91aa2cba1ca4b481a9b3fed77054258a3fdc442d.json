{"sha": "91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhYTJjYmExY2E0YjQ4MWE5YjNmZWQ3NzA1NDI1OGEzZmRjNDQyZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-05T16:25:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-10T20:26:58Z"}, "message": "Refactor CanonicalPath so we can iterate the segments\n\nThis adds the associated NodeId into each CanonicalPath segment which\nreferences their respective TypePathSegment or PathExprSegment.", "tree": {"sha": "b9792149e3b68149c4efa0cafbc33aeb82949884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9792149e3b68149c4efa0cafbc33aeb82949884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb51a9de35e35ac4e411a323c1fde806fb54d142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb51a9de35e35ac4e411a323c1fde806fb54d142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb51a9de35e35ac4e411a323c1fde806fb54d142"}], "stats": {"total": 154, "additions": 102, "deletions": 52}, "files": [{"sha": "d6f5fcd263415ae813614c05ae7db9f070702226", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -117,16 +117,16 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::IdentifierExpr &expr) override\n   {\n-    if (resolver->get_name_scope ().lookup (CanonicalPath (expr.as_string ()),\n-\t\t\t\t\t    &resolved_node))\n+    if (resolver->get_name_scope ().lookup (\n+\t  CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n       {\n \tresolver->insert_resolved_name (expr.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (expr.get_node_id (),\n \t\t\t\t\t Definition{expr.get_node_id (),\n \t\t\t\t\t\t    parent});\n       }\n     else if (resolver->get_type_scope ().lookup (\n-\t       CanonicalPath (expr.as_string ()), &resolved_node))\n+\t       CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n       {\n \tresolver->insert_resolved_type (expr.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (expr.get_node_id (),\n@@ -272,7 +272,7 @@ class ResolveExpr : public ResolverBase\n \tauto label_name = label.get_lifetime ().get_lifetime_name ();\n \tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n \tresolver->get_label_scope ().insert (\n-\t  CanonicalPath (label_name), label_lifetime_node_id,\n+\t  CanonicalPath::new_seg (label_name), label_lifetime_node_id,\n \t  label.get_locus (), false,\n \t  [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t    rust_error_at (label.get_locus (),\n@@ -299,8 +299,9 @@ class ResolveExpr : public ResolverBase\n \t  }\n \n \tNodeId resolved_node = UNKNOWN_NODEID;\n-\tif (!resolver->get_label_scope ().lookup (\n-\t      CanonicalPath (label.get_lifetime_name ()), &resolved_node))\n+\tif (!resolver->get_label_scope ().lookup (CanonicalPath::new_seg (\n+\t\t\t\t\t\t    label.get_lifetime_name ()),\n+\t\t\t\t\t\t  &resolved_node))\n \t  {\n \t    rust_error_at (expr.get_label ().get_locus (),\n \t\t\t   \"failed to resolve label\");\n@@ -329,7 +330,7 @@ class ResolveExpr : public ResolverBase\n \tauto label_name = label.get_lifetime ().get_lifetime_name ();\n \tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n \tresolver->get_label_scope ().insert (\n-\t  CanonicalPath (label_name), label_lifetime_node_id,\n+\t  CanonicalPath::new_seg (label_name), label_lifetime_node_id,\n \t  label.get_locus (), false,\n \t  [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t    rust_error_at (label.get_locus (),\n@@ -357,8 +358,9 @@ class ResolveExpr : public ResolverBase\n \t  }\n \n \tNodeId resolved_node = UNKNOWN_NODEID;\n-\tif (!resolver->get_label_scope ().lookup (\n-\t      CanonicalPath (label.get_lifetime_name ()), &resolved_node))\n+\tif (!resolver->get_label_scope ().lookup (CanonicalPath::new_seg (\n+\t\t\t\t\t\t    label.get_lifetime_name ()),\n+\t\t\t\t\t\t  &resolved_node))\n \t  {\n \t    rust_error_at (expr.get_label ().get_locus (),\n \t\t\t   \"failed to resolve label\");"}, {"sha": "b622dcb4a6ad9d84d99a1687d3960a241fe56c2f", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -45,7 +45,8 @@ class ResolveToplevelImplItem : public ResolverBase\n \n   void visit (AST::TypeAlias &type) override\n   {\n-    auto path = prefix.append (CanonicalPath (type.get_new_type_name ()));\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (type.get_new_type_name ()));\n     resolver->get_type_scope ().insert (\n       path, type.get_node_id (), type.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "b2d059e003b46b1f00b3cd60abd7185211d7c8fc", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -44,7 +44,7 @@ class ResolvePattern : public ResolverBase\n   void visit (AST::IdentifierPattern &pattern) override\n   {\n     if (resolver->get_name_scope ().lookup (\n-\t  CanonicalPath (pattern.get_ident ()), &resolved_node))\n+\t  CanonicalPath::new_seg (pattern.get_ident ()), &resolved_node))\n       {\n \tresolver->insert_resolved_name (pattern.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (pattern.get_node_id (),\n@@ -72,7 +72,8 @@ class PatternDeclaration : public ResolverBase\n   {\n     // if we have a duplicate id this then allows for shadowing correctly\n     // as new refs to this decl will match back here so it is ok to overwrite\n-    resolver->get_name_scope ().insert (CanonicalPath (pattern.get_ident ()),\n+    resolver->get_name_scope ().insert (CanonicalPath::new_seg (\n+\t\t\t\t\t  pattern.get_ident ()),\n \t\t\t\t\tpattern.get_node_id (),\n \t\t\t\t\tpattern.get_locus ());\n     resolver->insert_new_definition (pattern.get_node_id (),"}, {"sha": "b0cdeb2e48b8ed15b5c6bfad5dc1250b41a5cb34", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -67,7 +67,7 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::TupleStruct &struct_decl) override\n   {\n-    auto path = CanonicalPath (struct_decl.get_identifier ());\n+    auto path = CanonicalPath::new_seg (struct_decl.get_identifier ());\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -99,7 +99,7 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::StructStruct &struct_decl) override\n   {\n-    auto path = CanonicalPath (struct_decl.get_identifier ());\n+    auto path = CanonicalPath::new_seg (struct_decl.get_identifier ());\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "44f5b22319b7256e0ecf8fac04c85a6e5bc4ad37", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -41,7 +41,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::TypeAlias &alias) override\n   {\n-    auto path = prefix.append (CanonicalPath (alias.get_new_type_name ()));\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (alias.get_new_type_name ()));\n     resolver->get_type_scope ().insert (\n       path, alias.get_node_id (), alias.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -53,7 +54,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::TupleStruct &struct_decl) override\n   {\n-    auto path = prefix.append (CanonicalPath (struct_decl.get_identifier ()));\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -65,7 +67,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::StructStruct &struct_decl) override\n   {\n-    auto path = prefix.append (CanonicalPath (struct_decl.get_identifier ()));\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -77,7 +80,7 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::StaticItem &var) override\n   {\n-    auto path = prefix.append (CanonicalPath (var.get_identifier ()));\n+    auto path = prefix.append (CanonicalPath::new_seg (var.get_identifier ()));\n     resolver->get_name_scope ().insert (\n       path, var.get_node_id (), var.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -170,7 +173,7 @@ class ResolveTopLevel : public ResolverBase\n   void visit (AST::Trait &trait) override\n   {\n     CanonicalPath path\n-      = prefix.append (CanonicalPath (trait.get_identifier ()));\n+      = prefix.append (CanonicalPath::new_seg (trait.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, trait.get_node_id (), trait.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "cf6962b035ea8fa5f7f46ab5d8a71dcc8dcf661a", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -30,7 +30,7 @@ class ResolveConstantItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::ConstantItem &constant)\n   {\n-    return CanonicalPath (constant.get_identifier ());\n+    return CanonicalPath::new_seg (constant.get_identifier ());\n   }\n };\n \n@@ -39,7 +39,7 @@ class ResolveFunctionItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::Function &function)\n   {\n-    return CanonicalPath (function.get_function_name ());\n+    return CanonicalPath::new_seg (function.get_function_name ());\n   }\n };\n \n@@ -48,7 +48,7 @@ class ResolveMethodItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::Method &method)\n   {\n-    return CanonicalPath (method.get_method_name ());\n+    return CanonicalPath::new_seg (method.get_method_name ());\n   }\n };\n \n@@ -57,7 +57,7 @@ class ResolveTraitItemFunctionToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemFunc &function)\n   {\n-    return CanonicalPath (\n+    return CanonicalPath::new_seg (\n       function.get_trait_function_decl ().get_identifier ());\n   }\n };\n@@ -67,7 +67,8 @@ class ResolveTraitItemMethodToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemMethod &method)\n   {\n-    return CanonicalPath (method.get_trait_method_decl ().get_identifier ());\n+    return CanonicalPath::new_seg (\n+      method.get_trait_method_decl ().get_identifier ());\n   }\n };\n \n@@ -76,7 +77,7 @@ class ResolveTraitItemConstToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemConst &constant)\n   {\n-    return CanonicalPath (constant.get_identifier ());\n+    return CanonicalPath::new_seg (constant.get_identifier ());\n   }\n };\n \n@@ -85,7 +86,7 @@ class ResolveTraitItemTypeToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemType &type)\n   {\n-    return CanonicalPath (type.get_identifier ());\n+    return CanonicalPath::new_seg (type.get_identifier ());\n   }\n };\n \n@@ -142,7 +143,8 @@ class ResolvePathSegmentToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::PathExprSegment &seg)\n   {\n-    CanonicalPath path = CanonicalPath (seg.get_ident_segment ().as_string ());\n+    CanonicalPath path\n+      = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n     if (seg.has_generic_args ())\n       {\n \tbool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n@@ -168,8 +170,8 @@ class TraitImplProjection\n   static CanonicalPath resolve (const CanonicalPath &trait_seg,\n \t\t\t\tconst CanonicalPath &impl_type_seg)\n   {\n-    return CanonicalPath (\"<\" + impl_type_seg.get () + \" as \" + trait_seg.get ()\n-\t\t\t  + \">\");\n+    return CanonicalPath::new_seg (\"<\" + impl_type_seg.get () + \" as \"\n+\t\t\t\t   + trait_seg.get () + \">\");\n   }\n };\n \n@@ -316,8 +318,8 @@ class ResolveGenericParam : public ResolverBase\n \n     // for now lets focus on handling the basics: like struct<T> { a:T, ....}\n     resolver->get_type_scope ().insert (\n-      CanonicalPath (param.get_type_representation ()), param.get_node_id (),\n-      param.get_locus (), false,\n+      CanonicalPath::new_seg (param.get_type_representation ()),\n+      param.get_node_id (), param.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \trust_error_at (param.get_locus (),\n \t\t       \"generic param redefined multiple times\");"}, {"sha": "d47371cb1986d92bc186b2100e6398ca063fa513", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -121,7 +121,8 @@ Resolver::insert_builtin_types (Rib *r)\n   auto builtins = get_builtin_types ();\n   for (auto &builtin : builtins)\n     {\n-      CanonicalPath builtin_path (builtin->as_string ());\n+      CanonicalPath builtin_path\n+\t= CanonicalPath::new_seg (builtin->as_string ());\n       r->insert_name (builtin_path, builtin->get_node_id (),\n \t\t      Linemap::predeclared_location (), false,\n \t\t      [] (const CanonicalPath &, NodeId, Location) -> void {});\n@@ -401,7 +402,7 @@ ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n       i++;\n     }\n \n-  return CanonicalPath (\"<\" + buf + \">\");\n+  return CanonicalPath::new_seg (\"<\" + buf + \">\");\n }\n \n bool\n@@ -430,7 +431,7 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n \n   // ident seg\n   CanonicalPath ident_seg\n-    = CanonicalPath (seg.get_ident_segment ().as_string ());\n+    = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n   result = result.append (ident_seg);\n \n   // generic args\n@@ -460,7 +461,7 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegment &seg)\n     }\n \n   CanonicalPath ident_seg\n-    = CanonicalPath (seg.get_ident_segment ().as_string ());\n+    = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n   result = result.append (ident_seg);\n }\n \n@@ -474,7 +475,8 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n   AST::PathIdentSegment &root_ident_seg = root_segment.get_ident_segment ();\n \n   bool segment_is_type = false;\n-  CanonicalPath root_seg_path (root_ident_seg.as_string ());\n+  CanonicalPath root_seg_path\n+    = CanonicalPath::new_seg (root_ident_seg.as_string ());\n \n   // name scope first\n   if (resolver->get_name_scope ().lookup (root_seg_path, &resolved_node))"}, {"sha": "11a54141cfdab8e433fefe9cc1aad805f6133d5f", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -57,8 +57,8 @@ class VerifyAsignee : public ResolverBase\n \n   void visit (AST::IdentifierExpr &expr) override\n   {\n-    if (!resolver->get_name_scope ().lookup (CanonicalPath (expr.as_string ()),\n-\t\t\t\t\t     &resolved_node))\n+    if (!resolver->get_name_scope ().lookup (\n+\t  CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n       return;\n \n     ok = true;"}, {"sha": "d3b22a0825bcc1e11400b61e45dd5efad1e57012", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91aa2cba1ca4b481a9b3fed77054258a3fdc442d/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=91aa2cba1ca4b481a9b3fed77054258a3fdc442d", "patch": "@@ -47,34 +47,73 @@ namespace Resolver {\n class CanonicalPath\n {\n public:\n-  explicit CanonicalPath (std::string path) : path (path) {}\n-\n-  CanonicalPath (const CanonicalPath &other) : path (other.path) {}\n+  CanonicalPath (const CanonicalPath &other) : segs (other.segs) {}\n \n   CanonicalPath &operator= (const CanonicalPath &other)\n   {\n-    path = other.path;\n+    segs = other.segs;\n     return *this;\n   }\n \n-  std::string get () const { return path; }\n+  static CanonicalPath new_seg (const std::string &path)\n+  {\n+    rust_assert (!path.empty ());\n+    return CanonicalPath ({path});\n+  }\n \n-  static CanonicalPath get_big_self () { return CanonicalPath (\"Self\"); }\n+  std::string get () const\n+  {\n+    std::string buf;\n+    for (size_t i = 0; i < segs.size (); i++)\n+      {\n+\tbool have_more = (i + 1) < segs.size ();\n+\tconst std::string &seg = segs.at (i);\n+\tbuf += seg + (have_more ? \"::\" : \"\");\n+      }\n+    return buf;\n+  }\n \n-  static CanonicalPath get_wee_self () { return CanonicalPath (\"self\"); }\n+  static CanonicalPath get_big_self ()\n+  {\n+    return CanonicalPath::new_seg (\"Self\");\n+  }\n \n-  static CanonicalPath create_empty ()\n+  static CanonicalPath get_wee_self ()\n   {\n-    return CanonicalPath (std::string ());\n+    return CanonicalPath::new_seg (\"self\");\n   }\n \n-  bool is_error () const { return path.empty (); }\n+  static CanonicalPath create_empty () { return CanonicalPath ({}); }\n+\n+  bool is_error () const { return segs.size () == 0; }\n \n   CanonicalPath append (const CanonicalPath &other) const\n   {\n     rust_assert (!other.is_error ());\n-    return is_error () ? CanonicalPath (other.get ())\n-\t\t       : CanonicalPath (append (other.get ()));\n+    if (is_error ())\n+      return CanonicalPath (other.segs);\n+\n+    std::vector<std::string> copy (segs);\n+    for (auto &s : other.segs)\n+      copy.push_back (s);\n+\n+    return CanonicalPath (copy);\n+  }\n+\n+  // if we have the path A::B::C this will give a callback for each segment\n+  // example:\n+  //   A\n+  //   A::B\n+  //   A::B::C\n+  void iterate_path (std::function<bool (const CanonicalPath &)> cb) const\n+  {\n+    std::vector<std::string> buf;\n+    for (auto &seg : segs)\n+      {\n+\tbuf.push_back (seg);\n+\tif (!cb (CanonicalPath (buf)))\n+\t  return;\n+      }\n   }\n \n   bool operator== (const CanonicalPath &b) const\n@@ -85,9 +124,9 @@ class CanonicalPath\n   bool operator< (const CanonicalPath &b) const { return get () < b.get (); }\n \n private:\n-  std::string append (std::string elem) const { return path + \"::\" + elem; }\n+  explicit CanonicalPath (std::vector<std::string> path) : segs (path) {}\n \n-  std::string path;\n+  std::vector<std::string> segs;\n };\n \n class Rib"}]}