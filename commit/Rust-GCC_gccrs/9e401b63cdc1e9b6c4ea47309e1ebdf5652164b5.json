{"sha": "9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0MDFiNjNjZGMxZTliNmM0ZWE0NzMwOWUxZWJkZjU2NTIxNjRiNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-06T10:36:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-06T10:36:44Z"}, "message": "Makefile.in (tree-sra.o): Update dependencies.\n\n\n\t* Makefile.in (tree-sra.o): Update dependencies.\n\t* tree-sra.c: Include ipa-utils.h\n\t(scan_function): Use recursive_call_p.\n\t(has_caller_p): New function.\n\t(cgraph_for_node_and_aliases): Count also callers of aliases.\n\nFrom-SVN: r202319", "tree": {"sha": "a1ddfe75690ca0907c186d72de5de2d335a7e132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ddfe75690ca0907c186d72de5de2d335a7e132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5/comments", "author": null, "committer": null, "parents": [{"sha": "c1d49770cb83fe768d4dac9cedaa31d59bc0ae28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d49770cb83fe768d4dac9cedaa31d59bc0ae28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d49770cb83fe768d4dac9cedaa31d59bc0ae28"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "a72b75302bd1dbaeb4f7260593de471243fe3898", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "patch": "@@ -3104,7 +3104,7 @@ tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h alloc-pool.h \\\n    $(HASH_TABLE_H) $(TM_H) $(TREE_H) $(GIMPLE_H) $(CGRAPH_H) $(TREE_FLOW_H) \\\n    $(IPA_PROP_H) $(DIAGNOSTIC_H) statistics.h \\\n    $(PARAMS_H) $(TARGET_H) $(FLAGS_H) \\\n-   $(DBGCNT_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n+   $(DBGCNT_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H) ipa-utils.h\n tree-switch-conversion.o : tree-switch-conversion.c $(CONFIG_H) $(SYSTEM_H) \\\n     $(TREE_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n     $(TM_H) coretypes.h $(GIMPLE_H) $(CFGLOOP_H) \\"}, {"sha": "7ed166857e581bd1f21fd60ccd3f19bfc7f85c62", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9e401b63cdc1e9b6c4ea47309e1ebdf5652164b5", "patch": "@@ -91,6 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"gimple-pretty-print.h\"\n #include \"ipa-inline.h\"\n+#include \"ipa-utils.h\"\n \n /* Enumeration of all aggregate reductions we can do.  */\n enum sra_mode { SRA_MODE_EARLY_IPA,   /* early call regularization */\n@@ -1256,8 +1257,7 @@ scan_function (void)\n \t\t      if (DECL_BUILT_IN_CLASS (dest) == BUILT_IN_NORMAL\n \t\t\t  && DECL_FUNCTION_CODE (dest) == BUILT_IN_APPLY_ARGS)\n \t\t\tencountered_apply_args = true;\n-\t\t      if (cgraph_get_node (dest)\n-\t\t\t  == cgraph_get_node (current_function_decl))\n+\t\t      if (recursive_call_p (current_function_decl, dest))\n \t\t\t{\n \t\t\t  encountered_recursive_call = true;\n \t\t\t  if (!callsite_has_enough_arguments_p (stmt))\n@@ -4906,6 +4906,16 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   return cfg_changed;\n }\n \n+/* If NODE has a caller, return true.  */\n+\n+static bool\n+has_caller_p (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n+{\n+  if (node->callers)\n+    return true;\n+  return false;\n+}\n+\n /* Return false the function is apparently unsuitable for IPA-SRA based on it's\n    attributes, return true otherwise.  NODE is the cgraph node of the current\n    function.  */\n@@ -4949,7 +4959,7 @@ ipa_sra_preliminary_function_checks (struct cgraph_node *node)\n       return false;\n     }\n \n-  if (!node->callers)\n+  if (!cgraph_for_node_and_aliases (node, has_caller_p, NULL, true))\n     {\n       if (dump_file)\n \tfprintf (dump_file,"}]}