{"sha": "46f9491e74bcfdad8409d33bb407677e3a126f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmOTQ5MWU3NGJjZmRhZDg0MDlkMzNiYjQwNzY3N2UzYTEyNmY1MA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2001-08-28T23:03:52Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2001-08-28T23:03:52Z"}, "message": "c-pragma.h (add_weak): Move prototype from here...\n\n2001-08-28  Eric Christopher <echristo@redhat.com>\n\t    Richard Henderson <rth@redhat.com>\n\n\t* c-pragma.h (add_weak): Move prototype from here...\n\t* output.h (add_weak): ... to here.\n\t* varasm.c (add_weak): Fix typo.\n\t* config/mips/crti.asm: New file.\n\t* config/mips/crtn.asm: Ditto.\n\t* config/mips/elf.h (SBSS_SECTION_ASM_OP) Add #undef.\n\t(CTOR_LISTS_DEFINED_EXTERNALLY): Remove.\n\t(INVOKE__main): Ditto.\n\t(INIT_SECTION_ASM_OP): New.\n\t(FINI_SECTION_ASM_OP): Ditto.\n\t(STARTFILE_SPEC): Add crti.\n\t(ENDFILE_SPEC): Add crtn.\n\t* config/mips/elf64.h: Same.\n\t* config/mips/rtems64.h (INVOKE__main, NAME__MAIN, SYMBOL__MAIN):\n\tRemove.\n\t* config/mips/vxworks.h: Ditto.\n\t* config/mips/t-elf: Support crti and crtn.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r45243", "tree": {"sha": "490b4a7728416582f147cb5193c5b68562a77802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/490b4a7728416582f147cb5193c5b68562a77802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46f9491e74bcfdad8409d33bb407677e3a126f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f9491e74bcfdad8409d33bb407677e3a126f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f9491e74bcfdad8409d33bb407677e3a126f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f9491e74bcfdad8409d33bb407677e3a126f50/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dde01439ea4977e8678c6cfc096c5a7d13fe821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dde01439ea4977e8678c6cfc096c5a7d13fe821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dde01439ea4977e8678c6cfc096c5a7d13fe821"}], "stats": {"total": 251, "additions": 165, "deletions": 86}, "files": [{"sha": "87a5aae7ccbb57440487365c8990a88f22e076eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -1,3 +1,24 @@\n+2001-08-28  Eric Christopher <echristo@redhat.com>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\t* c-pragma.h (add_weak): Move prototype from here...\n+\t* output.h (add_weak): ... to here.\n+\t* varasm.c (add_weak): Fix typo.\n+\t* config/mips/crti.asm: New file.\n+\t* config/mips/crtn.asm: Ditto.\n+\t* config/mips/elf.h (SBSS_SECTION_ASM_OP) Add #undef.\n+\t(CTOR_LISTS_DEFINED_EXTERNALLY): Remove.\n+\t(INVOKE__main): Ditto.\n+\t(INIT_SECTION_ASM_OP): New.\n+\t(FINI_SECTION_ASM_OP): Ditto.\n+\t(STARTFILE_SPEC): Add crti.\n+\t(ENDFILE_SPEC): Add crtn.\n+\t* config/mips/elf64.h: Same.\n+\t* config/mips/rtems64.h (INVOKE__main, NAME__MAIN, SYMBOL__MAIN):\n+\tRemove.\n+\t* config/mips/vxworks.h: Ditto.\n+\t* config/mips/t-elf: Support crti and crtn.\n+\n 2001-08-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* jump.c (mark_jump_label): Fix typo: REG_LABEL is EXPR_LIST, not\n@@ -47,7 +68,7 @@\n \tbordered, bunordered, buneq, bunge, bungt, bunle, bunlt, bltgt,\n \tbordered_rev, bunordered_rev, buneq_rev, bunge_rev, bungt_rev,\n \tbunle_rev, bunlt_rev, bltgt_rev): New patterns.\n-\t\n+\n 2001-08-27  Roman Zippel  <zippel@linux-m68k.org>\n \n \t* config/m68k/m68k.md (subreghi1ashrdi_const32, bsetmemqi,\n@@ -104,13 +125,13 @@\n \tPRESENCE_SET, ABSENCE_SET, DEFINE_BYPASS, DEFINE_AUTOMATON,\n \tAUTOMATA_OPTION, DEFINE_RESERVATION, DEFINE_INSN_RESERVATION): New\n \tRTL constructions.\n-\t\n+\n \t* genattr.c (main): New variable num_insn_reservations.  Increase\n \tit if there is DEFINE_INSN_RESERVATION.  Output automaton based\n \tpipeline hazard recognizer interface.\n \n \t* genattrtab.h: New file.\n-\t\n+\n \t* genattrtab.c: Include genattrtab.h.\n \t(attr_printf, check_attr_test, make_internal_attr,\n \tmake_numeric_value): Move protypes into genattrtab.h.  Define them\n@@ -124,11 +145,11 @@\n \t* genautomata.c: New file.\n \n \t* rtl.h (LINK_COST_ZERO, LINK_COST_FREE): Remove them.\n-\t\n+\n \t* sched-int.h: (curr_state): Add the external definition for\n \tautomaton pipeline interface.\n \t(haifa_insn_data): Add comments for members blockage and units.\n-\t\n+\n \t* target-def.h (TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE,\n \tTARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN,\n \tTARGET_SCHED_DFA_PRE_CYCLE_INSN,\n@@ -143,7 +164,7 @@\n \tdfa_pre_cycle_insn, init_dfa_post_cycle_insn, dfa_post_cycle_insn,\n \tfirst_cycle_multipass_dfa_lookahead, init_dfa_bubbles,\n \tdfa_bubble): New members in gcc_target.sched.\n-\t\n+\n \t* haifa-sched.c (insert_schedule_bubbles_p): New variable.\n \t(MAX_INSN_QUEUE_INDEX): New macro for automaton interface.\n \t(insn_queue): Redefine it as pointer to array.\n@@ -177,15 +198,15 @@\n \tInitiate insn cost by -1.\n \t(sched_finish): Free the current automaton state and finalize\n \tautomaton pipeline interface.\n-\t\n+\n \t* sched-rgn.c: Include target.h.\n \t(init_ready_list, new_ready, debug_dependencies): Add new code for\n \tautomaton pipeline interface.\n \n \t* sched-vis.c: Include target.h.\n \t(get_visual_tbl_length): Add code for automaton interface.\n \t(target_units, print_block_visualization):  Add comments.\n-\t\n+\n \t* Makefile.in (GETRUNTIME, HASHTAB, HOST_GETRUNTIME, HOST_HASHTAB,\n \tUSE_HOST_GETRUNTIME, USE_HOST_HASHTAB, HOST_VARRAY): New variables.\n \t(sched-rgn.o, sched-vis.o): Add new dependency file target.h.\n@@ -195,7 +216,7 @@\n \t(getruntime.o, hashtab.o): New entries for canadian cross.\n \n \t* doc/md.texi: Description of automaton based model.\n-\t\n+\n \t* doc/tm.texi (TARGET_SCHED_ISSUE_RATE, TARGET_SCHED_ADJUST_COST):\n \tAdd comments.\n \t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE,\n@@ -208,7 +229,7 @@\n \thook descriptions.\n \t(TRADITIONAL_PIPELINE_INTERFACE, DFA_PIPELINE_INTERFACE,\n \tMAX_DFA_ISSUE_RATE): New macro descriptions.\n-\t\n+\n \t* doc/contrib.texi: Add dfa based scheduler contribution.\n \n \t* doc/gcc.texi: Add more information about genattrtab.\n@@ -241,7 +262,7 @@\n \t* c-tree.h: Add prototyp for c_sizeof_nowarn.\n \n 2001-08-25 Dan Nicolaescu  <dann@ics.uci.edu>\n-  \n+\n \t* ssa-ccp.c (ssa_const_prop): Free ssa_edges.\n \n 2001-08-27  Alan Modra  <amodra@bigpond.net.au>"}, {"sha": "6f0d6ea15a0bd178806096f6df13f4ab9bf29ad3", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -41,11 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define HANDLE_PRAGMA_PACK 1\n #endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \n-\n-#ifdef HANDLE_PRAGMA_WEAK\n-extern int add_weak PARAMS ((const char *, const char *));\n-#endif /* HANDLE_PRAGMA_WEAK */\n-\n extern void init_pragma PARAMS ((void));\n \n /* Duplicate prototypes for the register_pragma stuff and the typedef for"}, {"sha": "0b08529c6bf114701b316afb41c668e06109fb35", "filename": "gcc/config/mips/crti.asm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fcrti.asm?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -0,0 +1,26 @@\n+/* 4 slots for argument spill area.  1 for cpreturn, 1 for stack.\n+   Return spill offset of 40 and 20.  */\n+\n+\t.section .init,\"ax\",@progbits\n+\t.globl\t_init\n+\t.type\t_init,@function\n+_init:\n+#ifdef __mips64\n+\tdsubu   $sp,$sp,48\n+\tsd      $31,40($sp)\n+#else\n+\tsubu\t$sp,$sp,32\n+\tsw\t$31,20($sp)\n+#endif\n+\n+\t.section .fini,\"ax\",@progbits\n+\t.globl\t_fini\n+\t.type\t_fini,@function\n+_fini:\n+#ifdef __mips64\n+\tdsubu   $sp,$sp,48\n+\tsd      $31,40($sp)\n+#else\n+\tsubu\t$sp,$sp,32\n+\tsw\t$31,20($sp)\n+#endif"}, {"sha": "be38a86874615cead61a0f4aeabe896676e1a301", "filename": "gcc/config/mips/crtn.asm", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fcrtn.asm?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -0,0 +1,22 @@\n+/* 4 slots for argument spill area.  1 for cpreturn, 1 for stack.\n+   Return spill offset of 40 and 20.  */\n+\n+\t.section .init,\"ax\",@progbits\n+#ifdef __mips64\n+\tld      $31,40($sp)\n+\tdaddu\t$sp,$sp,48\n+#else\n+\tlw\t$31,20($sp)\n+\taddu\t$sp,$sp,32\n+#endif\n+\tj\t$31\n+\n+\t.section .fini,\"ax\",@progbits\n+#ifdef __mips64\n+\tld\t$31,40($sp)\n+\tdaddu\t$sp,$sp,48\n+#else\n+\tlw\t$31,20($sp)\n+\taddu\t$sp,$sp,32\n+#endif\n+\tj\t$31"}, {"sha": "c7e68f1687f3e807f447c880e79beb45e6e158d2", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -99,10 +99,12 @@ do {\t\t\t\t\t\t\\\n    uninitialized global data will be output in the data section if\n    `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n    used.  */\n+\n #ifndef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #endif\n \n+#undef  SBSS_SECTION_ASM_OP\n #define SBSS_SECTION_ASM_OP\t\"\\t.section .sbss\"\n \n /* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n@@ -213,17 +215,10 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define UNIQUE_SECTION(DECL,RELOC) \\\n   mips_unique_section ((DECL), (RELOC))\n \n-/* There's no point providing a default definition of __CTOR_LIST__\n-   since people are expected either to use crtbegin.o, or an equivalent,\n-   or provide their own definition.  */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_sbss, in_rdata\n- \n-#define INVOKE__main\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n@@ -241,12 +236,23 @@ void FN ()                                                            \\\n     }                                                                 \\\n }\n \n+/* On elf, we *do* have support for the .init and .fini sections, and we\n+   can put stuff in there to be executed before and after `main'.  We let\n+   crtstuff.c and other files know this by defining the following symbols.\n+   The definitions say how to change sections to the .init and .fini\n+   sections.  This is the same for all known elf assemblers.  */\n+\n+#undef  INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n+#undef  FINI_SECTION_ASM_OP\n+#define FINI_SECTION_ASM_OP     \"\\t.section\\t.fini\"\n+\n /* Don't set the target flags, this is done by the linker script */\n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n \n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \"crtbegin%O%s %{!mno-crt0:crt0%O%s}\"\n+#define STARTFILE_SPEC \"crti%O%s crtbegin%O%s %{!mno-crt0:crt0%O%s}\"\n \n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend%O%s\"\n+#define ENDFILE_SPEC \"crtend%O%s crtn%O%s\""}, {"sha": "894ea51194115fd4d6d04dcfbfe864b70ea5e86a", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -256,17 +256,10 @@ do {\t\t\t\t\t\t\t\t\t   \\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n } while (0)\n \n-/* There's no point providing a default definition of __CTOR_LIST__\n-   since people are expected either to use crtbegin.o, or an equivalent,\n-   or provide their own definition.  */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_rdata\n- \n-#define INVOKE__main\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n@@ -282,12 +275,24 @@ void FN ()                                                            \\\n       in_section = ENUM;                                              \\\n     }                                                                 \\\n }\n+\n+/* On elf, we *do* have support for the .init and .fini sections, and we\n+   can put stuff in there to be executed before and after `main'.  We let\n+   crtstuff.c and other files know this by defining the following symbols.\n+   The definitions say how to change sections to the .init and .fini\n+   sections.  This is the same for all known elf assemblers.  */\n+\n+#undef  INIT_SECTION_ASM_OP\n+#define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n+#undef  FINI_SECTION_ASM_OP\n+#define FINI_SECTION_ASM_OP     \"\\t.section\\t.fini\"\n+\n /* Don't set the target flags, this is done by the linker script */\n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n \n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \"crtbegin%O%s %{!mno-crt0:crt0%O%s}\"\n+#define STARTFILE_SPEC \"crti%O%s crtbegin%O%s %{!mno-crt0:crt0%O%s}\"\n \n #undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend%O%s\"\n+#define ENDFILE_SPEC \"crtend%O%s crtn%O%s\""}, {"sha": "aedb02a87b598d6b57a4aa332e0bee92f8635aac", "filename": "gcc/config/mips/rtems64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Frtems64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Frtems64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems64.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -33,10 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_rdata\n \n-#undef INVOKE__main\n-#undef NAME__MAIN\n-#undef SYMBOL__MAIN\n-\n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\"}, {"sha": "955edf982bd014f8a9cbf2c1ad87b3e9afea5cca", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -1,9 +1,17 @@\n CONFIG2_H\t= $(srcdir)/config/mips/ecoff.h\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n # Don't let CTOR_LIST end up in sdata section.\n CRTSTUFF_T_CFLAGS = -G 0\n \n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n+\n LIB1ASMSRC = mips/mips16.S\n LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n@@ -48,6 +56,7 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n MULTILIB_OPTIONS = msoft-float/msingle-float EL/EB mips1/mips3\n MULTILIB_DIRNAMES = soft-float single el eb mips1 mips3\n MULTILIB_MATCHES = msingle-float=m4650\n+EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "9eca3b71c6a1bca0b5c04c905a51cc8a76d03bb9", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -20,10 +20,6 @@ Boston, MA 02111-1307, USA.  */\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_rdata, in_sbss\n \n-#undef INVOKE__main\n-#undef NAME__MAIN\n-#undef SYMBOL__MAIN\n-\n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\"}, {"sha": "370589ad3ac153a2dabbc2d483ba8d8eed1c35ba", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -135,6 +135,10 @@ extern void leaf_renumber_regs_insn PARAMS ((rtx));\n /* Locate the proper template for the given insn-code.  */\n extern const char *get_insn_template PARAMS ((int, rtx));\n \n+/* Add function NAME to the weak symbols list.  VALUE is a weak alias\n+   associated with NAME.  */\n+extern int add_weak PARAMS ((const char *, const char *));\n+\n /* Functions in flow.c */\n extern void allocate_for_life_analysis\tPARAMS ((void));\n extern int regno_uninitialized\t\tPARAMS ((int));"}, {"sha": "a95994ca237dd4a28fcddaaa2fcfc7335ccdebac", "filename": "gcc/varasm.c", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46f9491e74bcfdad8409d33bb407677e3a126f50/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=46f9491e74bcfdad8409d33bb407677e3a126f50", "patch": "@@ -206,7 +206,7 @@ static enum in_section { no_section, in_text, in_data, in_named\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n    && DECL_SECTION_NAME (DECL) != NULL_TREE)\n #endif\n-     \n+\n /* Text of section name when in_section == in_named.  */\n static const char *in_named_name;\n \n@@ -621,7 +621,7 @@ decode_reg_name (asmspec)\n \n       /* Get rid of confusing prefixes.  */\n       asmspec = strip_reg_name (asmspec);\n-\t\n+\n       /* Allow a decimal number as a \"register name\".  */\n       for (i = strlen (asmspec) - 1; i >= 0; i--)\n \tif (! (asmspec[i] >= '0' && asmspec[i] <= '9'))\n@@ -697,7 +697,7 @@ make_decl_rtl (decl, asmspec)\n \t  && !DECL_REGISTER (decl)))\n     abort ();\n   /* And that we were not given a type or a label.  */\n-  else if (TREE_CODE (decl) == TYPE_DECL \n+  else if (TREE_CODE (decl) == TYPE_DECL\n \t   || TREE_CODE (decl) == LABEL_DECL)\n     abort ();\n \n@@ -772,7 +772,7 @@ make_decl_rtl (decl, asmspec)\n \t     kludge to avoid setting DECL_RTL to frame_pointer_rtx.  */\n \n \t  SET_DECL_RTL (decl,\n-\t\t\tgen_rtx_REG (DECL_MODE (decl), \n+\t\t\tgen_rtx_REG (DECL_MODE (decl),\n \t\t\t\t     FIRST_PSEUDO_REGISTER));\n \t  REGNO (DECL_RTL (decl)) = reg_number;\n \t  REG_USERVAR_P (DECL_RTL (decl)) = 1;\n@@ -1082,7 +1082,7 @@ assemble_start_function (decl, fnname)\n   if (align_functions_log > align)\n     {\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN\n-      ASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file, \n+      ASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file,\n \t\t\t\t align_functions_log, align_functions-1);\n #else\n       ASM_OUTPUT_ALIGN (asm_out_file, align_functions_log);\n@@ -1271,14 +1271,14 @@ asm_emit_uninitialised (decl, name, size, rounded)\n     asm_dest_local\n   }\n   destination = asm_dest_local;\n-  \n+\n   if (TREE_PUBLIC (decl))\n     {\n #if defined ASM_EMIT_BSS\n       if (! DECL_COMMON (decl))\n \tdestination = asm_dest_bss;\n       else\n-#endif      \n+#endif\n \tdestination = asm_dest_common;\n     }\n \n@@ -1401,7 +1401,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Make sure ENCODE_SECTION_INFO is invoked before we set ASM_WRITTEN.  */\n   decl_rtl = DECL_RTL (decl);\n- \n+\n   TREE_ASM_WRITTEN (decl) = 1;\n \n   /* Do no output if -fsyntax-only.  */\n@@ -1498,14 +1498,14 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       rounded += (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1;\n       rounded = (rounded / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n-      \n+\n /* Don't continue this line--convex cc version 4.1 would lose.  */\n #if !defined(ASM_OUTPUT_ALIGNED_COMMON) && !defined(ASM_OUTPUT_ALIGNED_DECL_COMMON) && !defined(ASM_OUTPUT_ALIGNED_BSS)\n       if ((unsigned HOST_WIDE_INT) DECL_ALIGN (decl) / BITS_PER_UNIT > rounded)\n-         warning_with_decl \n+         warning_with_decl\n            (decl, \"requested alignment for %s is greater than implemented alignment of %d.\",rounded);\n #endif\n-       \n+\n       asm_emit_uninitialised (decl, name, size, rounded);\n \n       return;\n@@ -1519,7 +1519,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n     {\n #ifdef ASM_WEAKEN_LABEL\n-      if (DECL_WEAK (decl)) \n+      if (DECL_WEAK (decl))\n \t{\n \t  ASM_WEAKEN_LABEL (asm_out_file, name);\n \t   /* Remove this variable from the pending weak list so that\n@@ -1690,7 +1690,7 @@ assemble_name (file, name)\n   tree id;\n \n   STRIP_NAME_ENCODING (real_name, name);\n-  if (flag_prefix_function_name \n+  if (flag_prefix_function_name\n       && ! memcmp (real_name, CHKR_PREFIX, CHKR_PREFIX_SIZE))\n     real_name = real_name + CHKR_PREFIX_SIZE;\n \n@@ -1916,7 +1916,7 @@ assemble_integer (x, size, align, force)\n     {\n       enum machine_mode omode, imode;\n       unsigned int i;\n- \n+\n       omode = mode_for_size (BITS_PER_UNIT, MODE_INT, 0);\n       imode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n \n@@ -2333,7 +2333,7 @@ struct constant_descriptor\n   const char *label;\n   rtx rtl;\n   /* Make sure the data is reasonably aligned.  */\n-  union \n+  union\n   {\n     unsigned char contents[1];\n #ifdef HAVE_LONG_DOUBLE\n@@ -2361,7 +2361,7 @@ static htab_t const_str_htab;\n \n /* Mark a const_hash_table descriptor for GC.  */\n \n-static void \n+static void\n mark_const_hash_entry (ptr)\n      void *ptr;\n {\n@@ -2376,7 +2376,7 @@ mark_const_hash_entry (ptr)\n \n /* Mark the hash-table element X (which is really a pointer to an\n    struct deferred_string *).  */\n-   \n+\n static int\n mark_const_str_htab_1 (x, data)\n      void **x;\n@@ -2388,7 +2388,7 @@ mark_const_str_htab_1 (x, data)\n \n /* Mark a const_str_htab for GC.  */\n \n-static void \n+static void\n mark_const_str_htab (htab)\n      void *htab;\n {\n@@ -2529,7 +2529,7 @@ const_hash (exp)\n     case CONVERT_EXPR:\n     case NON_LVALUE_EXPR:\n       return const_hash (TREE_OPERAND (exp, 0)) * 7 + 2;\n-      \n+\n     default:\n       /* A language specific constant. Just hash the code.  */\n       return (int) code % MAX_HASH_TABLE;\n@@ -2655,7 +2655,7 @@ compare_constant_1 (exp, p)\n \t  p += sizeof length;\n \n \t  /* For record constructors, insist that the types match.\n-\t     For arrays, just verify both constructors are for arrays. \n+\t     For arrays, just verify both constructors are for arrays.\n \t     Then insist that either both or none have any TREE_PURPOSE\n \t     values.  */\n \t  if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n@@ -2898,7 +2898,7 @@ record_constant_1 (exp)\n \t  obstack_grow (&permanent_obstack, (char *) &type, sizeof type);\n \t  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n \t    obstack_grow (&permanent_obstack, &mode, sizeof mode);\n-\t\t\t  \n+\n \t  obstack_grow (&permanent_obstack, (char *) &have_purpose,\n \t\t\tsizeof have_purpose);\n \n@@ -3166,18 +3166,18 @@ output_constant_def (exp, defer)\n      the label number already assigned.  */\n \n   hash = const_hash (exp) % MAX_HASH_TABLE;\n-      \n+\n   for (desc = const_hash_table[hash]; desc; desc = desc->next)\n     if (compare_constant (exp, desc))\n       break;\n-      \n+\n   if (desc == 0)\n     {\n       /* No constant equal to EXP is known to have been output.\n \t Make a constant descriptor to enter EXP in the hash table.\n \t Assign the label number and record it in the descriptor for\n \t future calls to this function to find.  */\n-\t  \n+\n       /* Create a string containing the label name, in LABEL.  */\n       labelno = const_labelno++;\n       ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", labelno);\n@@ -3186,7 +3186,7 @@ output_constant_def (exp, defer)\n       desc->next = const_hash_table[hash];\n       desc->label = ggc_strdup (label);\n       const_hash_table[hash] = desc;\n-  \n+\n       /* We have a symbol name; construct the SYMBOL_REF and the MEM.  */\n       desc->rtl\n \t= gen_rtx_MEM (TYPE_MODE (TREE_TYPE (exp)),\n@@ -3390,7 +3390,7 @@ init_varasm_status (f)\n \n /* Mark PC for GC.  */\n \n-static void \n+static void\n mark_pool_constant (pc)\n      struct pool_constant *pc;\n {\n@@ -3526,7 +3526,7 @@ decode_rtx_const (mode, x, value)\n       case LABEL_REF:\n \t/* For a LABEL_REF, compare labels.  */\n \tvalue->un.addr.base = XEXP (value->un.addr.base, 0);\n-\t\n+\n       default:\n \tbreak;\n       }\n@@ -3608,7 +3608,7 @@ record_constant_rtx (mode, x)\n {\n   struct constant_descriptor *ptr;\n \n-  ptr = ((struct constant_descriptor *) \n+  ptr = ((struct constant_descriptor *)\n \t xcalloc (1, (offsetof (struct constant_descriptor, u)\n \t\t      + sizeof (struct rtx_const))));\n   decode_rtx_const (mode, x, (struct rtx_const *) ptr->u.contents);\n@@ -3870,7 +3870,7 @@ output_constant_pool (fnname, fndecl)\n \t      x = const0_rtx;\n \t    }\n \t  break;\n-\t  \n+\n \tdefault:\n \t  break;\n \t}\n@@ -4162,7 +4162,7 @@ initializer_constant_valid_p (value, endtype)\n \treturn\n \t  initializer_constant_valid_p (TREE_VALUE (CONSTRUCTOR_ELTS (value)),\n \t\t\t\t\tendtype);\n-\t\n+\n       return TREE_STATIC (value) ? null_pointer_node : 0;\n \n     case INTEGER_CST:\n@@ -4345,7 +4345,7 @@ output_constant (exp, size, align)\n      That way we get the constant (we hope) inside it.  Also, strip off any\n      NOP_EXPR that converts between two record, union, array, or set types\n      or a CONVERT_EXPR that converts to a union TYPE.  */\n-  while ((TREE_CODE (exp) == NOP_EXPR \n+  while ((TREE_CODE (exp) == NOP_EXPR\n \t  && (TREE_TYPE (exp) == TREE_TYPE (TREE_OPERAND (exp, 0))\n \t      || AGGREGATE_TYPE_P (TREE_TYPE (exp))))\n \t || (TREE_CODE (exp) == CONVERT_EXPR\n@@ -4482,7 +4482,7 @@ array_size_for_constructor (val)\n     return 0;\n \n   /* Compute the total number of array elements.  */\n-  i = size_binop (MINUS_EXPR, convert (sizetype, max_index), \n+  i = size_binop (MINUS_EXPR, convert (sizetype, max_index),\n \t\t  convert (sizetype,\n \t\t\t   TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (val)))));\n   i = size_binop (PLUS_EXPR, i, convert (sizetype, integer_one_node));\n@@ -4607,7 +4607,7 @@ output_constructor (exp, size, align)\n \n \t  /* Find the alignment of this element.  */\n \t  align2 = min_align (align, BITS_PER_UNIT * pos);\n-\t  \n+\n \t  /* Determine size this element should occupy.  */\n \t  if (field)\n \t    {\n@@ -4799,9 +4799,9 @@ output_constructor (exp, size, align)\n     assemble_zeros (size - total_bytes);\n }\n \n-/* This structure contains any weak symbol declarations waiting to be\n-   emitted.  */\n \n+/* This structure contains any weak symbol declarations waiting\n+   to be emitted.  */\n struct weak_syms\n {\n   struct weak_syms * next;\n@@ -4812,8 +4812,8 @@ struct weak_syms\n static struct weak_syms * weak_decls;\n \n /* Add function NAME to the weak symbols list.  VALUE is a weak alias\n-   associatd with NAME.  */\n-   \n+   associated with NAME.  */\n+\n int\n add_weak (name, value)\n      const char *name;\n@@ -4878,7 +4878,6 @@ weak_finish ()\n /* Remove NAME from the pending list of weak symbols.  This prevents\n    the compiler from emitting multiple .weak directives which confuses\n    some assemblers.  */\n-\n static void\n remove_from_pending_weak_list (name)\n      const char *name;\n@@ -4890,12 +4889,12 @@ remove_from_pending_weak_list (name)\n     {\n       t = *p;\n       if (strcmp (name, t->name) == 0)\n-\t{\n-\t  *p = t->next;\n-\t  free (t);\n-\t}\n+        {\n+          *p = t->next;\n+          free (t);\n+        }\n       else\n-\tp = &(t->next);\n+        p = &(t->next);\n     }\n }\n "}]}