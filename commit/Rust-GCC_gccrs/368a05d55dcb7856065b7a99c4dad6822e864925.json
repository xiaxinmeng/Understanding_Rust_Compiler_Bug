{"sha": "368a05d55dcb7856065b7a99c4dad6822e864925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4YTA1ZDU1ZGNiNzg1NjA2NWI3YTk5YzRkYWQ2ODIyZTg2NDkyNQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2009-12-02T13:50:52Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2009-12-02T13:50:52Z"}, "message": "re PR middle-end/42224 (32bit pointers to 32bit pointers abort on 64bit VMS and S390X)\n\ngcc/\n\tPR middle-end/42224\n\t* tree.h (int_or_pointer_precision): Remove.\n\t* tree.c (int_or_pointer_precision): Remove.\n\t(integer_pow2p): Use TYPE_PRECISION instead.\n\t(tree_log2): Likewise.\n\t(tree_floor_log2): Likewise.\n\t(signed_or_unsigned_type_for): Likewise.\n\t* fold-const.c (fit_double_type): Likewise.\n\t* varasm.c (initializer_constant_valid_p): Likewise.\n\ngcc/testsuite/\n\tPR middle-end/42224\n\t* gcc.target/s390/pr42224.c: New test.\n\nFrom-SVN: r154908", "tree": {"sha": "7e4051e9b7fae9d73287f5c8056ee0a287a5ce90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4051e9b7fae9d73287f5c8056ee0a287a5ce90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/368a05d55dcb7856065b7a99c4dad6822e864925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368a05d55dcb7856065b7a99c4dad6822e864925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368a05d55dcb7856065b7a99c4dad6822e864925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368a05d55dcb7856065b7a99c4dad6822e864925/comments", "author": null, "committer": null, "parents": [{"sha": "ca0b0bf89d0d6b2041df2cb25426e8c7c0be90d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b0bf89d0d6b2041df2cb25426e8c7c0be90d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0b0bf89d0d6b2041df2cb25426e8c7c0be90d5"}], "stats": {"total": 73, "additions": 24, "deletions": 49}, "files": [{"sha": "1f20ff9ad9056b6955b427826125cfc6e01b4939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -1,3 +1,15 @@\n+2009-12-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR middle-end/42224\n+\t* tree.h (int_or_pointer_precision): Remove.\n+\t* tree.c (int_or_pointer_precision): Remove.\n+\t(integer_pow2p): Use TYPE_PRECISION instead.\n+\t(tree_log2): Likewise.\n+\t(tree_floor_log2): Likewise.\n+\t(signed_or_unsigned_type_for): Likewise.\n+\t* fold-const.c (fit_double_type): Likewise.\n+\t* varasm.c (initializer_constant_valid_p): Likewise.\n+\n 2009-12-02  Ira Rosen  <irar@il.ibm.com>\n \n \t* doc/invoke.texi (-fdump-tree-slp): Document."}, {"sha": "1a77dd592f102bb627dd908a25778145fd6a3e81", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -206,7 +206,7 @@ fit_double_type (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n {\n   unsigned HOST_WIDE_INT low0 = l1;\n   HOST_WIDE_INT high0 = h1;\n-  unsigned int prec = int_or_pointer_precision (type);\n+  unsigned int prec = TYPE_PRECISION (type);\n   int sign_extended_type;\n \n   /* Size types *are* sign extended.  */"}, {"sha": "dfe0081ae055667f66d409aae8a43d24b8ff56b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -1,3 +1,8 @@\n+2009-12-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR middle-end/42224\n+\t* gcc.target/s390/pr42224.c: New test.\n+\n 2009-12-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41611"}, {"sha": "c533fd8c12cde11482ad71e8c5ebcbe808f8f443", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -1685,7 +1685,7 @@ integer_pow2p (const_tree expr)\n   if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n \n-  prec = int_or_pointer_precision (TREE_TYPE (expr));\n+  prec = TYPE_PRECISION (TREE_TYPE (expr));\n   high = TREE_INT_CST_HIGH (expr);\n   low = TREE_INT_CST_LOW (expr);\n \n@@ -1749,7 +1749,7 @@ tree_log2 (const_tree expr)\n   if (TREE_CODE (expr) == COMPLEX_CST)\n     return tree_log2 (TREE_REALPART (expr));\n \n-  prec = int_or_pointer_precision (TREE_TYPE (expr));\n+  prec = TYPE_PRECISION (TREE_TYPE (expr));\n   high = TREE_INT_CST_HIGH (expr);\n   low = TREE_INT_CST_LOW (expr);\n \n@@ -1785,7 +1785,7 @@ tree_floor_log2 (const_tree expr)\n   if (TREE_CODE (expr) == COMPLEX_CST)\n     return tree_log2 (TREE_REALPART (expr));\n \n-  prec = int_or_pointer_precision (TREE_TYPE (expr));\n+  prec = TYPE_PRECISION (TREE_TYPE (expr));\n   high = TREE_INT_CST_HIGH (expr);\n   low = TREE_INT_CST_LOW (expr);\n \n@@ -9685,12 +9685,8 @@ signed_or_unsigned_type_for (int unsignedp, tree type)\n \t based on the named address space it points to.  */\n       if (!TYPE_ADDR_SPACE (TREE_TYPE (t)))\n \tt = size_type_node;\n-\n       else\n-\t{\n-\t  int prec = int_or_pointer_precision (t);\n-\t  return lang_hooks.types.type_for_size (prec, unsignedp);\n-\t}\n+\treturn lang_hooks.types.type_for_size (TYPE_PRECISION (t), unsignedp);\n     }\n \n   if (!INTEGRAL_TYPE_P (t) || TYPE_UNSIGNED (t) == unsignedp)\n@@ -10565,41 +10561,6 @@ build_target_option_node (void)\n   return t;\n }\n \n-/* Return the size in bits of an integer or pointer type.  TYPE_PRECISION\n-   contains the bits, but in the past it was not set in some cases and there\n-   was special purpose code that checked for POINTER_TYPE_P or OFFSET_TYPE, so\n-   check that it is consitant when assertion checking is used.  */\n-\n-unsigned int\n-int_or_pointer_precision (const_tree type)\n-{\n-#if ENABLE_ASSERT_CHECKING\n-  unsigned int prec;\n-\n-  if (POINTER_TYPE_P (type))\n-    {\n-      addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (type));\n-      prec = GET_MODE_BITSIZE (targetm.addr_space.pointer_mode (as));\n-      gcc_assert (prec == TYPE_PRECISION (type));\n-    }\n-  else if (TREE_CODE (type) == OFFSET_TYPE)\n-    {\n-      prec = POINTER_SIZE;\n-      gcc_assert (prec == TYPE_PRECISION (type));\n-    }\n-  else\n-    {\n-      prec = TYPE_PRECISION (type);\n-      gcc_assert (prec != 0);\n-    }\n-\n-  return prec;\n-\n-#else\n-  return TYPE_PRECISION (type);\n-#endif\n-}\n-\n /* Determine the \"ultimate origin\" of a block.  The block may be an inlined\n    instance of an inlined instance of a block which is local to an inline\n    function, so we have to trace all of the way back through the origin chain"}, {"sha": "a0e1f67776107914ca74e02b2b5583bdc6222858", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -4710,7 +4710,6 @@ extern const char *get_name (tree);\n extern bool stdarg_p (tree);\n extern bool prototype_p (tree);\n extern bool auto_var_in_fn_p (const_tree, const_tree);\n-extern unsigned int int_or_pointer_precision (const_tree);\n extern tree build_low_bits_mask (tree, unsigned);\n extern tree tree_strip_nop_conversions (tree);\n extern tree tree_strip_sign_nop_conversions (tree);"}, {"sha": "fab62198053ad0d0c42375a05d0de48b9bdc3b26", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368a05d55dcb7856065b7a99c4dad6822e864925/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=368a05d55dcb7856065b7a99c4dad6822e864925", "patch": "@@ -4327,8 +4327,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n       if (TREE_CODE (endtype) == REAL_TYPE)\n \treturn NULL_TREE;\n       if (! INTEGRAL_TYPE_P (endtype)\n-\t  || TYPE_PRECISION (endtype)\n-\t     >= int_or_pointer_precision (TREE_TYPE (value)))\n+\t  || TYPE_PRECISION (endtype) >= TYPE_PRECISION (TREE_TYPE (value)))\n \t{\n \t  tree valid0 = initializer_constant_valid_p (TREE_OPERAND (value, 0),\n \t\t\t\t\t\t      endtype);\n@@ -4352,8 +4351,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n       if (TREE_CODE (endtype) == REAL_TYPE)\n \treturn NULL_TREE;\n       if (! INTEGRAL_TYPE_P (endtype)\n-\t  || TYPE_PRECISION (endtype)\n-\t     >= int_or_pointer_precision (TREE_TYPE (value)))\n+\t  || TYPE_PRECISION (endtype) >= TYPE_PRECISION (TREE_TYPE (value)))\n \t{\n \t  tree valid0 = initializer_constant_valid_p (TREE_OPERAND (value, 0),\n \t\t\t\t\t\t      endtype);"}]}