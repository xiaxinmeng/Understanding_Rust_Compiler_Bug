{"sha": "628c731a48ab24519f13202bd912dc69bd8fb87e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4YzczMWE0OGFiMjQ1MTlmMTMyMDJiZDkxMmRjNjliZDhmYjg3ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-03-14T22:16:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-03-14T22:16:06Z"}, "message": "stdc++.h: New.\n\n\n2003-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/stdc++.h: New.\n\t* libsupc++/exception_defines.h (__EXCEPTION_DEFINES_H): Add guard.\n\t* include/Makefile.am (stamp-std-precompile): Generate stdc++.h.gch\n        * include/Makefile.in: Regenerate.\n        * testsuite_flags.in (--build-cxx): Add, but don't use PCHFLAGS.\n\t(--cxxflags): Put -g -O2 here.\n\t* testsuite/libstdc++-v3.dg/dg.exp: Remove -g -O2 here.\n\nFrom-SVN: r64374", "tree": {"sha": "acdd6c6813776c94011cfa1c90e57ba79d7fd8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acdd6c6813776c94011cfa1c90e57ba79d7fd8e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628c731a48ab24519f13202bd912dc69bd8fb87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c731a48ab24519f13202bd912dc69bd8fb87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628c731a48ab24519f13202bd912dc69bd8fb87e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628c731a48ab24519f13202bd912dc69bd8fb87e/comments", "author": null, "committer": null, "parents": [{"sha": "23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23345bbbcc8dc9c11168d0fd6b2afb415cb6c4e6"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "6d77a248038c8d797855efe08099f78111539119", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -1,3 +1,13 @@\n+2003-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/stdc++.h: New.\t\n+\t* libsupc++/exception_defines.h (__EXCEPTION_DEFINES_H): Add guard.\n+\t* include/Makefile.am (stamp-std-precompile): Generate stdc++.h.gch\n+        * include/Makefile.in: Regenerate.\n+        * testsuite_flags.in (--build-cxx): Add, but don't use PCHFLAGS.\n+\t(--cxxflags): Put -g -O2 here.\n+\t* testsuite/libstdc++-v3.dg/dg.exp: Remove -g -O2 here.\n+\n 2003-03-14  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/testsuite_hooks.h: Suppress runtime exception thrown by"}, {"sha": "01aa208bfbbda1e8771d670816db91c318eca685", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -340,11 +340,15 @@ thread_target_headers = \\\n \t${target_builddir}/gthr-posix.h \\\n \t${target_builddir}/gthr-default.h\n \n+pch_input = stdc++.h\n+pch_output = stdc++.h.gch\n+pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target \n+\tstamp-backward stamp-ext stamp-target\n \n # Here are the rules for building the headers\n all-local: ${target_builddir}/c++config.h ${thread_target_headers} ${allstamps}\n@@ -363,12 +367,13 @@ stamp-std: ${std_headers}\n \t  echo `date` > stamp-std ;\\\n \tfi\n \n-stamp-std-precompile: stamp-std ${target_builddir}/c++config.h\n-\tfor h in ${std_headers_rename}; do \\\n-\t  echo \"generating $$h.pch...\"; \\\n-\t  $(CXX) -Winvalid-pch -x c++-header $(INCLUDES) $${h}; \\\n-\tdone; \\\n-\techo `date` > stamp-std-precompile\n+PCHFLAGS=-Winvalid-pch -x c++-header $(CXXFLAGS)\n+stamp-stdc++-precompile: stamp-std ${target_builddir}/c++config.h ${pch_source}\n+\tif [ ! -f \"${pch_output}\" ]; then \\\n+\t  $(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \\\n+\t  touch ${pch_input}; \\\n+\tfi; \\\n+\ttouch stamp-stdc++-precompile\n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n@@ -525,7 +530,7 @@ install-data-local:\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.pch stamp-std-precompile\n+CLEANFILES = *.gch stamp-stdc++-precompile\n \n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled"}, {"sha": "78632dbe74d117a9553256ccbd7ef04fd81f74c3", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -457,12 +457,18 @@ thread_target_headers = \\\n \t${target_builddir}/gthr-default.h\n \n \n+pch_input = stdc++.h\n+pch_output = stdc++.h.gch\n+pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+\n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n allstamps = \\\n \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target \n+\tstamp-backward stamp-ext stamp-target\n+\n \n+PCHFLAGS = -Winvalid-pch -x c++-header $(CXXFLAGS)\n \n # Target includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n@@ -479,7 +485,7 @@ uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n gxx_include_dir = @gxx_include_dir@\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.pch stamp-std-precompile\n+CLEANFILES = *.gch stamp-stdc++-precompile\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n DIST_COMMON =  Makefile.am Makefile.in\n@@ -599,13 +605,12 @@ stamp-std: ${std_headers}\n \t  done) ;\\\n \t  echo `date` > stamp-std ;\\\n \tfi\n-\n-stamp-std-precompile: stamp-std ${target_builddir}/c++config.h\n-\tfor h in ${std_headers_rename}; do \\\n-\t  echo \"generating $$h.pch...\"; \\\n-\t  $(CXX) -Winvalid-pch -x c++-header $(INCLUDES) $${h}; \\\n-\tdone; \\\n-\techo `date` > stamp-std-precompile\n+stamp-stdc++-precompile: stamp-std ${target_builddir}/c++config.h ${pch_source}\n+\tif [ ! -f \"${pch_output}\" ]; then \\\n+\t  $(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \\\n+\t  touch ${pch_input}; \\\n+\tfi; \\\n+\ttouch stamp-stdc++-precompile\n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\"}, {"sha": "d350a3c0df46bf2968e3e444bb06154af3f055fc", "filename": "libstdc++-v3/include/stdc++.h", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Finclude%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstdc%2B%2B.h?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -0,0 +1,82 @@\n+// C++ includes used for precompiling -*- C++ -*-\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 17.4.1.2 Headers\n+\n+// C\n+#include <cassert>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfloat>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstddef>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctime>\n+\n+// C++\n+#include <algorithm>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <typeinfo>\n+#include <utility>\n+#include <valarray>\n+#include <vector>"}, {"sha": "1178f22452790cca772938d56723a272ca82698c", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -1,6 +1,6 @@\n // -fno-exceptions Support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,6 +31,9 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n+#ifndef __EXCEPTION_DEFINES_H\n+#define __EXCEPTION_DEFINES_H 1\n+\n #ifndef __EXCEPTIONS\n // Iff -fno-exceptions, transform error handling code to work without it.\n # define try      if (true)\n@@ -40,3 +43,5 @@\n // Else proceed normally.\n # define __throw_exception_again throw\n #endif\n+\n+#endif"}, {"sha": "8b70564d87a09f5e1d2be91bf488d8412353afea", "filename": "libstdc++-v3/testsuite/libstdc++-v3.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -22,7 +22,7 @@ load_lib libstdc++-v3-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \"-g -O2 -DDEBUG_ASSERT\"\n+    set DEFAULT_CXXFLAGS \"-DDEBUG_ASSERT\"\n }\n \n # Initialize 'dg' last or dejagnu exits with an error..."}, {"sha": "fb911193a0e4e26d100b9c2e8aea82860b3478be", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628c731a48ab24519f13202bd912dc69bd8fb87e/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=628c731a48ab24519f13202bd912dc69bd8fb87e", "patch": "@@ -43,15 +43,16 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --build-cxx)\n-      CC_build=\"@glibcpp_CXX@\"\n+      PCHFLAGS=\"-Winvalid-pch -include ${BUILD_DIR}/include/stdc++.h\"\n+      CC_build=\"@glibcpp_CXX@\n       CXX=`echo $CC_build | sed 's/xgcc/g++/g'`\n       echo ${CXX}\n       ;;\n     --cxxflags)\n-      CXXFLAGS=' -g @SECTION_FLAGS@ @SECTION_LDFLAGS@\n-\t\t -fmessage-length=0 @EXTRA_CXX_FLAGS@\n-\t\t -DDEBUG_ASSERT  -DLOCALEDIR=\"@glibcpp_localedir@\" '\n-      echo ${CXXFLAGS}\n+      CXXFLAGS_save=\"-g -O2\"\n+      CXXFLAGS_config='@SECTION_FLAGS@ @SECTION_LDFLAGS@ -fmessage-length=0 \n+ \t\t      @EXTRA_CXX_FLAGS@ -DLOCALEDIR=\"@glibcpp_localedir@\" '\n+      echo ${CXXFLAGS_save} ${CXXFLAGS_config}\n       ;;\n     *)\n       print_usage"}]}