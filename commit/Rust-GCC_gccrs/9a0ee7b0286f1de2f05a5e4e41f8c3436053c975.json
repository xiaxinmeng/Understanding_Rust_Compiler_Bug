{"sha": "9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwZWU3YjAyODZmMWRlMmYwNWE1ZTRlNDFmOGMzNDM2MDUzYzk3NQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-05-06T21:14:59Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-05-06T21:14:59Z"}, "message": "tree.c (integer_all_onesp): Test that both components are all 1s.\n\n2013-05-06  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* tree.c (integer_all_onesp) <COMPLEX_CST>: Test that both\n\tcomponents are all 1s.\n\t(integer_minus_onep): New function.\n\t* tree.h (integer_minus_onep): Declare it.\n\t* fold-const.c (fold_binary_loc) <MULT_EXPR>: Test\n\tinteger_minus_onep instead of integer_all_onesp.\n\nFrom-SVN: r198649", "tree": {"sha": "7d9d8b97ec358bd6267025f8446e73231ebbc98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d9d8b97ec358bd6267025f8446e73231ebbc98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6698175d1591c25041f3979a5c01ef5f81e2f4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6698175d1591c25041f3979a5c01ef5f81e2f4ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6698175d1591c25041f3979a5c01ef5f81e2f4ff"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "d813433e124d8b37fe3881698352eccc0fd1e76a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "patch": "@@ -1,3 +1,12 @@\n+2013-05-06  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree.c (integer_all_onesp) <COMPLEX_CST>: Test that both\n+\tcomponents are all 1s.\n+\t(integer_minus_onep): New function.\n+\t* tree.h (integer_minus_onep): Declare it.\n+\t* fold-const.c (fold_binary_loc) <MULT_EXPR>: Test\n+\tinteger_minus_onep instead of integer_all_onesp.\n+\n 2013-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/52933"}, {"sha": "74b451e470a40cd9b8eea418a42e8b47fcc833da", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "patch": "@@ -10870,7 +10870,7 @@ fold_binary_loc (location_t loc,\n \t  /* Transform x * -1 into -x.  Make sure to do the negation\n \t     on the original operand with conversions not stripped\n \t     because we can only strip non-sign-changing conversions.  */\n-\t  if (integer_all_onesp (arg1))\n+\t  if (integer_minus_onep (arg1))\n \t    return fold_convert_loc (loc, type, negate_expr (op0));\n \t  /* Transform x * -C into -x * C if x is easily negatable.  */\n \t  if (TREE_CODE (arg1) == INTEGER_CST"}, {"sha": "444c87673d7e3ba37608a3f7ffd6869d91213f6c", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "patch": "@@ -1781,7 +1781,7 @@ integer_onep (const_tree expr)\n }\n \n /* Return 1 if EXPR is an integer containing all 1's in as much precision as\n-   it contains.  Likewise for the corresponding complex constant.  */\n+   it contains, or a complex or vector whose subparts are such integers.  */\n \n int\n integer_all_onesp (const_tree expr)\n@@ -1793,7 +1793,7 @@ integer_all_onesp (const_tree expr)\n \n   if (TREE_CODE (expr) == COMPLEX_CST\n       && integer_all_onesp (TREE_REALPART (expr))\n-      && integer_zerop (TREE_IMAGPART (expr)))\n+      && integer_all_onesp (TREE_IMAGPART (expr)))\n     return 1;\n \n   else if (TREE_CODE (expr) == VECTOR_CST)\n@@ -1839,6 +1839,20 @@ integer_all_onesp (const_tree expr)\n     return TREE_INT_CST_LOW (expr) == ((unsigned HOST_WIDE_INT) 1 << prec) - 1;\n }\n \n+/* Return 1 if EXPR is the integer constant minus one.  */\n+\n+int\n+integer_minus_onep (const_tree expr)\n+{\n+  STRIP_NOPS (expr);\n+\n+  if (TREE_CODE (expr) == COMPLEX_CST)\n+    return (integer_all_onesp (TREE_REALPART (expr))\n+\t    && integer_zerop (TREE_IMAGPART (expr)));\n+  else\n+    return integer_all_onesp (expr);\n+}\n+\n /* Return 1 if EXPR is an integer constant that is a power of 2 (i.e., has only\n    one bit on).  */\n "}, {"sha": "2b6f13b8f1203ac7bd2160e352e1f4c1b89f1698", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0ee7b0286f1de2f05a5e4e41f8c3436053c975/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9a0ee7b0286f1de2f05a5e4e41f8c3436053c975", "patch": "@@ -5310,6 +5310,11 @@ extern int integer_onep (const_tree);\n \n extern int integer_all_onesp (const_tree);\n \n+/* integer_minus_onep (tree x) is nonzero if X is an integer constant of\n+   value -1.  */\n+\n+extern int integer_minus_onep (const_tree);\n+\n /* integer_pow2p (tree x) is nonzero is X is an integer constant with\n    exactly one bit 1.  */\n "}]}