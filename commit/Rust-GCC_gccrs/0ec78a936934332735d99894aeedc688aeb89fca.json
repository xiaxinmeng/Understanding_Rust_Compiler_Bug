{"sha": "0ec78a936934332735d99894aeedc688aeb89fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjNzhhOTM2OTM0MzMyNzM1ZDk5ODk0YWVlZGM2ODhhZWI4OWZjYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-07T19:13:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-07T19:13:26Z"}, "message": "PR libstdc++/86874 fix std::variant::swap regression\n\n\tPR libstdc++/86874\n\t* include/std/variant (_Copy_ctor_base::_M_destructive_move): Define\n\there instead of in _Move_assign_base.\n\t(_Copy_ctor_base<true, _Types...>::_M_destructive_move): Define.\n\t(_Copy_assign_base::operator=): Use _M_destructive_move when changing\n\tthe contained value to another alternative.\n\t(_Move_assign_base::operator=): Likewise.\n\t(_Move_assign_base::_M_destructive_move): Remove.\n\t* testsuite/20_util/variant/86874.cc: New test.\n\nFrom-SVN: r263365", "tree": {"sha": "af7482d1bdaac35de846258d95325e6731f5b5a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af7482d1bdaac35de846258d95325e6731f5b5a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ec78a936934332735d99894aeedc688aeb89fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec78a936934332735d99894aeedc688aeb89fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec78a936934332735d99894aeedc688aeb89fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec78a936934332735d99894aeedc688aeb89fca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d7c92f24721a10f5b780bb6927c863cc5a45c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d7c92f24721a10f5b780bb6927c863cc5a45c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d7c92f24721a10f5b780bb6927c863cc5a45c6"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "50a01efd77f3200a0280f1494b929329f4ba1ca5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0ec78a936934332735d99894aeedc688aeb89fca", "patch": "@@ -1,5 +1,15 @@\n 2018-08-07  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86874\n+\t* include/std/variant (_Copy_ctor_base::_M_destructive_move): Define\n+\there instead of in _Move_assign_base.\n+\t(_Copy_ctor_base<true, _Types...>::_M_destructive_move): Define.\n+\t(_Copy_assign_base::operator=): Use _M_destructive_move when changing\n+\tthe contained value to another alternative.\n+\t(_Move_assign_base::operator=): Likewise.\n+\t(_Move_assign_base::_M_destructive_move): Remove.\n+\t* testsuite/20_util/variant/86874.cc: New test.\n+\n \tPR libstdc++/86861\n \t* libsupc++/new_opa.cc [_GLIBCXX_HAVE_MEMALIGN] (aligned_alloc):\n \tReplace macro with inline function."}, {"sha": "2d86a704c63e3c3449b2a3a460853d0f77cba427", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=0ec78a936934332735d99894aeedc688aeb89fca", "patch": "@@ -506,6 +506,20 @@ namespace __variant\n \t  }\n       }\n \n+      void _M_destructive_move(_Move_ctor_base&& __rhs)\n+      {\n+\tthis->~_Move_ctor_base();\n+\t__try\n+\t  {\n+\t    ::new (this) _Move_ctor_base(std::move(__rhs));\n+\t  }\n+\t__catch (...)\n+\t  {\n+\t    this->_M_index = variant_npos;\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+\n       _Move_ctor_base(const _Move_ctor_base&) = default;\n       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;\n       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;\n@@ -516,6 +530,12 @@ namespace __variant\n     {\n       using _Base = _Copy_ctor_alias<_Types...>;\n       using _Base::_Base;\n+\n+      void _M_destructive_move(_Move_ctor_base&& __rhs)\n+      {\n+\tthis->~_Move_ctor_base();\n+\t::new (this) _Move_ctor_base(std::move(__rhs));\n+      }\n     };\n \n   template<typename... _Types>\n@@ -538,22 +558,14 @@ namespace __variant\n \t      {\n \t\tstatic constexpr void (*_S_vtable[])(void*, void*) =\n \t\t  { &__erased_assign<_Types&, const _Types&>... };\n-\t\t_S_vtable[__rhs._M_index](this->_M_storage(), __rhs._M_storage());\n+\t\t_S_vtable[__rhs._M_index](this->_M_storage(),\n+\t\t\t\t\t  __rhs._M_storage());\n \t      }\n \t  }\n \telse\n \t  {\n \t    _Copy_assign_base __tmp(__rhs);\n-\t    this->~_Copy_assign_base();\n-\t    __try\n-\t      {\n-\t\t::new (this) _Copy_assign_base(std::move(__tmp));\n-\t      }\n-\t    __catch (...)\n-\t      {\n-\t\tthis->_M_index = variant_npos;\n-\t\t__throw_exception_again;\n-\t      }\n+\t    this->_M_destructive_move(std::move(__tmp));\n \t  }\n \t__glibcxx_assert(this->_M_index == __rhs._M_index);\n \treturn *this;\n@@ -582,20 +594,6 @@ namespace __variant\n       using _Base = _Copy_assign_alias<_Types...>;\n       using _Base::_Base;\n \n-      void _M_destructive_move(_Move_assign_base&& __rhs)\n-      {\n-\tthis->~_Move_assign_base();\n-\t__try\n-\t  {\n-\t    ::new (this) _Move_assign_base(std::move(__rhs));\n-\t  }\n-\t__catch (...)\n-\t  {\n-\t    this->_M_index = variant_npos;\n-\t    __throw_exception_again;\n-\t  }\n-      }\n-\n       _Move_assign_base&\n       operator=(_Move_assign_base&& __rhs)\n \t  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)\n@@ -613,16 +611,7 @@ namespace __variant\n \telse\n \t  {\n \t    _Move_assign_base __tmp(std::move(__rhs));\n-\t    this->~_Move_assign_base();\n-\t    __try\n-\t      {\n-\t\t::new (this) _Move_assign_base(std::move(__tmp));\n-\t      }\n-\t    __catch (...)\n-\t      {\n-\t\tthis->_M_index = variant_npos;\n-\t\t__throw_exception_again;\n-\t      }\n+\t    this->_M_destructive_move(std::move(__tmp));\n \t  }\n \t__glibcxx_assert(this->_M_index == __rhs._M_index);\n \treturn *this;"}, {"sha": "b595f9581a1e8c764638f045a52f00bfcc3e36a0", "filename": "libstdc++-v3/testsuite/20_util/variant/86874.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F86874.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec78a936934332735d99894aeedc688aeb89fca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F86874.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F86874.cc?ref=0ec78a936934332735d99894aeedc688aeb89fca", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <variant>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::variant<std::monostate> v1, v2;\n+  std::swap(v1, v2);\n+}\n+\n+void\n+test02()\n+{\n+  std::variant<int> v1{1}, v2{2};\n+  std::swap(v1, v2);\n+  VERIFY( std::get<0>(v1) == 2 );\n+  VERIFY( std::get<0>(v2) == 1 );\n+}\n+\n+void\n+test03()\n+{\n+  std::variant<double, int> v1{1}, v2{2.3};\n+  std::swap(v1, v2);\n+  VERIFY( std::get<double>(v1) == 2.3 );\n+  VERIFY( std::get<int>(v2) == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}