{"sha": "406d1650fb890e9e3f6972280e971bdef38bc302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2ZDE2NTBmYjg5MGU5ZTNmNjk3MjI4MGU5NzFiZGVmMzhiYzMwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2009-07-18T07:51:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-07-18T07:51:19Z"}, "message": "rs6000.c (rs6000_mode_dependent_address): Allow any offset from virtual_stack_vars_rtx and arg_pointer_rtx.\n\ngcc/\n\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address): Allow any\n\toffset from virtual_stack_vars_rtx and arg_pointer_rtx.\n\t* config/rs6000/predicates.md (volatile_mem_operand): Use\n\toffsettable_nonstrict_memref_p.\n\t* config/rs6000/rs6000.md (*floatsidf2_internal): Remove split check.\n\t(*floatunssidf2_internal): Likewise.\n\t(*fix_truncdfsi2_internal): Likewise.\n\t(*fix_trunctfsi2_internal): Likewise.\n\nFrom-SVN: r149765", "tree": {"sha": "040920e4f1eb1d62777c9747ff6a3a4987e6ef72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040920e4f1eb1d62777c9747ff6a3a4987e6ef72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406d1650fb890e9e3f6972280e971bdef38bc302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406d1650fb890e9e3f6972280e971bdef38bc302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406d1650fb890e9e3f6972280e971bdef38bc302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406d1650fb890e9e3f6972280e971bdef38bc302/comments", "author": null, "committer": null, "parents": [{"sha": "f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "9696070354b1f8747f97da36a9303001a061d617", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=406d1650fb890e9e3f6972280e971bdef38bc302", "patch": "@@ -1,3 +1,14 @@\n+2009-07-18  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address): Allow any\n+\toffset from virtual_stack_vars_rtx and arg_pointer_rtx.\n+\t* config/rs6000/predicates.md (volatile_mem_operand): Use\n+\toffsettable_nonstrict_memref_p.\n+\t* config/rs6000/rs6000.md (*floatsidf2_internal): Remove split check.\n+\t(*floatunssidf2_internal): Likewise.\n+\t(*fix_truncdfsi2_internal): Likewise.\n+\t(*fix_trunctfsi2_internal): Likewise.\n+\n 2009-07-17  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr-devices.c (avr_mcu_t): Add atmega8u2, atmega16u2 and"}, {"sha": "b6b443bf3f8ebf69c901fbd0fc8cb028eea63429", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=406d1650fb890e9e3f6972280e971bdef38bc302", "patch": "@@ -367,7 +367,7 @@\n ;; Return 1 if the operand is an offsettable memory operand.\n (define_predicate \"offsettable_mem_operand\"\n   (and (match_operand 0 \"memory_operand\")\n-       (match_test \"GET_RTX_CLASS (GET_CODE (XEXP (op, 0))) != RTX_AUTOINC\")))\n+       (match_test \"offsettable_nonstrict_memref_p (op)\")))\n \n ;; Return 1 if the operand is a memory operand with an address divisible by 4\n (define_predicate \"word_offset_memref_operand\""}, {"sha": "6063a6c69b2ea20d25a3a07216f7451e000afed6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=406d1650fb890e9e3f6972280e971bdef38bc302", "patch": "@@ -5165,7 +5165,15 @@ rs6000_mode_dependent_address (rtx addr)\n   switch (GET_CODE (addr))\n     {\n     case PLUS:\n-      if (GET_CODE (XEXP (addr, 1)) == CONST_INT)\n+      /* Any offset from virtual_stack_vars_rtx and arg_pointer_rtx\n+\t is considered a legitimate address before reload, so there\n+\t are no offset restrictions in that case.  Note that this\n+\t condition is safe in strict mode because any address involving\n+\t virtual_stack_vars_rtx or arg_pointer_rtx would already have\n+\t been rejected as illegitimate.  */\n+      if (XEXP (addr, 0) != virtual_stack_vars_rtx\n+\t  && XEXP (addr, 0) != arg_pointer_rtx\n+\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT)\n \t{\n \t  unsigned HOST_WIDE_INT val = INTVAL (XEXP (addr, 1));\n \t  return val + 12 + 0x8000 >= 0x10000;"}, {"sha": "a2fdc34342c9c387641a055f9ab161ce378b1689", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406d1650fb890e9e3f6972280e971bdef38bc302/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=406d1650fb890e9e3f6972280e971bdef38bc302", "patch": "@@ -6354,7 +6354,7 @@\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"=&r\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n-  \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n+  \"\"\n   [(pc)]\n   \"\n {\n@@ -6421,7 +6421,7 @@\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&d\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n-  \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n+  \"\"\n   [(pc)]\n   \"\n {\n@@ -6488,7 +6488,7 @@\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n-  \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[3]))\"\n+  \"\"\n   [(pc)]\n   \"\n {\n@@ -9396,7 +9396,7 @@\n   \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n-  \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[5]))\"\n+  \"\"\n   [(pc)]\n {\n   rtx lowword;"}]}