{"sha": "f982f8052a15da18976e84b8d537726b322d0278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MmY4MDUyYTE1ZGExODk3NmU4NGI4ZDUzNzcyNmIzMjJkMDI3OA==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-01-22T04:23:07Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-01-22T04:23:07Z"}, "message": "netbsd.h (TARGET_HAS_F_SETLKW): define.\n\n* config/netbsd.h (TARGET_HAS_F_SETLKW): define.\nSplit a.out-specific bits into...\n* config/netbsd-aout.h: ...this.\n* config/netbsd-elf.h: New file.\n* config/alpha/netbsd-elf.h: Remove.\n* config/alpha/netbsd.h: Rewrite for a NetBSD/alpha ELF target.\n* config/i386/netbsd-elf.h (LIB_SPEC): Remove.\n(STARTFILE_SPEC): Remove redundant definition.\n(ENDFILE_SPEC): Likewise.\n(LINK_SPEC): Likewise.\n(CPP_SPEC): Likewise.\n(ASM_SPEC): Likewise.\n(LIB_SPEC): Likewise.\n(SWITCH_TAKES_ARG): Likewise.\n(TARGET_MEM_FUNCTIONS): Likewise.\n(CPP_PREDEFINES): Redefine.\n(ASM_FINAL_SPEC): Remove redefinition.\n(ASM_COMMENT_START): Redefine.\n(FUNCTION_PROFILER): Define.\n(TARGET_VERSION): Redefine.\nComment and formatting cleanup.\n* config/i386/netbsd.h: Include <netbsd-aout.h>.\n* config/m68k/netbsd.h: Include <netbsd-aout.h>.\n* config/mips/netbsd.h: Rewrite for NetBSD/mips ELF target,\nbig- or little-endian.\n* config/ns32k/netbsd.h: Include <netbsd-aout.h>.\n* config.gcc (*-*-netbsd*): Add definitions common to all\nNetBSD configs.\n(alpha*-*-netbsd*): Remove redundant xm_defines, gas, and\ngnu_ld definitions.  Add netbsd-elf.h to and remove\nalpha/netbsd-elf.h from tm_file.  Remove alpha/t-crtfm from\ntmake_file, and don't lose previous tmake_file contents.\n(arm*-*-netbsd*): Add netbsd-aout.h to tm_file.\n(i[34567]86-*-netbsdelf*): Remove redundant xm_defines, gas, and\ngnu_ld definitions.  Add netbsd-elf.h to tm_file.\n(mips-dec-netbsd*): Remove as alias for mipsel-*-netbsd*.\n(mipsel-*-netbsd*): Rename this to...\n(mips*-*-netbsd*): ...this.  Add elfos.h to tm_file.  Add\nmips/little.h to tm_file for mips*el-*.\n(powerpc-*-netbsd*): Remove redundant xm_defines definition.\n(sparc-*-netbsd*): Add netbsd-aout.h to tm_file.\n(vax-*-netbsd*): Add netbsd-aout.h to tm_file.\n\nFrom-SVN: r49064", "tree": {"sha": "fb881f08fa95811a9605ea29489c77d5ff5aa601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb881f08fa95811a9605ea29489c77d5ff5aa601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f982f8052a15da18976e84b8d537726b322d0278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982f8052a15da18976e84b8d537726b322d0278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f982f8052a15da18976e84b8d537726b322d0278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982f8052a15da18976e84b8d537726b322d0278/comments", "author": null, "committer": null, "parents": [{"sha": "58dbcf0581d6a91c9374d1087f1e9cd384319121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dbcf0581d6a91c9374d1087f1e9cd384319121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58dbcf0581d6a91c9374d1087f1e9cd384319121"}], "stats": {"total": 1149, "additions": 665, "deletions": 484}, "files": [{"sha": "37c60bd81ca7123bb093548216a85defaf643319", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -1,3 +1,48 @@\n+2002-01-21  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/netbsd.h (TARGET_HAS_F_SETLKW): define.\n+\tSplit a.out-specific bits into...\n+\t* config/netbsd-aout.h: ...this.\n+\t* config/netbsd-elf.h: New file.\n+\t* config/alpha/netbsd-elf.h: Remove.\n+\t* config/alpha/netbsd.h: Rewrite for a NetBSD/alpha ELF target.\n+\t* config/i386/netbsd-elf.h (LIB_SPEC): Remove.\n+\t(STARTFILE_SPEC): Remove redundant definition.  \n+\t(ENDFILE_SPEC): Likewise.\n+\t(LINK_SPEC): Likewise.\n+\t(CPP_SPEC): Likewise.\n+\t(ASM_SPEC): Likewise.\n+\t(LIB_SPEC): Likewise.\n+\t(SWITCH_TAKES_ARG): Likewise.\n+\t(TARGET_MEM_FUNCTIONS): Likewise.\n+\t(CPP_PREDEFINES): Redefine.\n+\t(ASM_FINAL_SPEC): Remove redefinition.\n+\t(ASM_COMMENT_START): Redefine.\n+\t(FUNCTION_PROFILER): Define.\n+\t(TARGET_VERSION): Redefine.\n+\tComment and formatting cleanup.\n+\t* config/i386/netbsd.h: Include <netbsd-aout.h>.\n+\t* config/m68k/netbsd.h: Include <netbsd-aout.h>.\n+\t* config/mips/netbsd.h: Rewrite for NetBSD/mips ELF target,\n+\tbig- or little-endian.\n+\t* config/ns32k/netbsd.h: Include <netbsd-aout.h>.\n+\t* config.gcc (*-*-netbsd*): Add definitions common to all\n+\tNetBSD configs.\n+\t(alpha*-*-netbsd*): Remove redundant xm_defines, gas, and\n+\tgnu_ld definitions.  Add netbsd-elf.h to and remove\n+\talpha/netbsd-elf.h from tm_file.  Remove alpha/t-crtfm from\n+\ttmake_file, and don't lose previous tmake_file contents.\n+\t(arm*-*-netbsd*): Add netbsd-aout.h to tm_file.\n+\t(i[34567]86-*-netbsdelf*): Remove redundant xm_defines, gas, and\n+\tgnu_ld definitions.  Add netbsd-elf.h to tm_file.\n+\t(mips-dec-netbsd*): Remove as alias for mipsel-*-netbsd*.\n+\t(mipsel-*-netbsd*): Rename this to...\n+\t(mips*-*-netbsd*): ...this.  Add elfos.h to tm_file.  Add\n+\tmips/little.h to tm_file for mips*el-*.\n+\t(powerpc-*-netbsd*): Remove redundant xm_defines definition.\n+\t(sparc-*-netbsd*): Add netbsd-aout.h to tm_file.\n+\t(vax-*-netbsd*): Add netbsd-aout.h to tm_file.\n+\n 2002-01-21  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa-protos.h (reg_before_reload_operand): New function prototype."}, {"sha": "7a86bee20a5f56c8d3a887fa4ab3945f1391bb8f", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -277,7 +277,7 @@ case $machine in\n \t;;\n esac\n \n-# Common parts for GNU/Linux, GNU/Hurd, OpenBSD and FreeBSD systems.\n+# Common parts for GNU/Linux, GNU/Hurd, OpenBSD, NetBSD, and FreeBSD systems.\n case $machine in\n *-*-linux*)\n \txm_defines=POSIX\n@@ -312,6 +312,12 @@ case $machine in\n \t\ttmake_file=\"${tmake_file} t-openbsd-thread\"\n \tfi\n \t;;\n+*-*-netbsd*)\n+\ttmake_file=\"t-libc-ok t-netbsd\"\n+\txm_defines=POSIX\n+\tgas=yes\n+\tgnu_ld=yes\n+\t;;\n *-*-freebsd[12] | *-*-freebsd[12].* | *-*-freebsd*aout*)\n \t# This is the place-holder for the generic a.out configuration\n \t# of FreeBSD.  No actual configuration resides here since\n@@ -469,11 +475,9 @@ alpha*-*-freebsd*)\n \ttmake_file=\"${tmake_file} alpha/t-crtbe alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n \t;;\n alpha*-*-netbsd*)\n-\txm_defines=POSIX\n-\ttm_file=\"${tm_file} alpha/elf.h alpha/netbsd.h alpha/netbsd-elf.h\"\n+\ttm_file=\"${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n-\ttmake_file=\"alpha/t-crtbe alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n-\tgas=yes gnu_ld=yes\n+\ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-crtbe alpha/t-ieee\"\n \t;;\n \n alpha*-*-openbsd*)\n@@ -613,7 +617,7 @@ arm*-*-freebsd*|strongarm*-*-freebsd*)\n \ttmake_file=\"${tmake_file} arm/t-strongarm-elf\"\n \t;;\n arm*-*-netbsd*)\n-\ttm_file=\"arm/aout.h arm/arm.h netbsd.h arm/netbsd.h\"\n+\ttm_file=\"arm/aout.h arm/arm.h netbsd.h netbsd-aout.h arm/netbsd.h\"\n \ttmake_file=\"t-netbsd arm/t-netbsd\"\n \tuse_collect2=yes\n \t;;\n@@ -1124,10 +1128,7 @@ i[34567]86-*-freebsd*)\n \ttm_file=\"${tm_file} i386/att.h dbxelf.h elfos.h svr4.h ${fbsd_tm_file} i386/freebsd.h\"\n \t;;\n i[34567]86-*-netbsdelf*)\n-\txm_defines=POSIX\n-\ttm_file=\"${tm_file} i386/att.h dbxelf.h elfos.h svr4.h i386/netbsd-elf.h\"\n-\ttmake_file=t-netbsd\n-\tgnu_ld=yes\n+\ttm_file=\"${tm_file} i386/att.h dbxelf.h elfos.h netbsd.h netbsd-elf.h i386/netbsd-elf.h\"\n \tfloat_format=i386\n \t;;\n i[34567]86-*-netbsd*)\n@@ -2231,10 +2232,13 @@ mips-dec-bsd*)                  # Decstation running 4.4 BSD\n \t\tuse_collect2=yes\n       fi\n       ;;\n-mipsel-*-netbsd* | mips-dec-netbsd*)    # Decstation running NetBSD\n-\ttm_file=mips/netbsd.h\n-\t# On NetBSD, the headers are already okay, except for math.h.\n-\ttmake_file=t-netbsd\n+mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n+\ttm_file=\"elfos.h mips/netbsd.h\"\n+\tcase $machine in\n+\tmips*el-*)\n+\t\ttm_file=\"mips/little.h $tm_file\" \n+\t\t;;\n+\tesac\n \t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n         tm_file=\"dbxelf.h elfos.h svr4.h linux.h mips/linux.h\"\n@@ -2650,7 +2654,6 @@ powerpc-*-sysv*)\n \ttmake_file=\"rs6000/t-ppcos rs6000/t-ppccomm\"\n \t;;\n powerpc-*-netbsd*)\n-\txm_defines=POSIX\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/netbsd.h\"\n \ttmake_file=\"rs6000/t-ppcos rs6000/t-ppccomm\"\n \t;;\n@@ -2892,7 +2895,7 @@ sparc-*-aout*)\n \ttm_file=\"sparc/sparc.h aoutos.h sparc/aout.h libgloss.h\"\n \t;;\n sparc-*-netbsd*)\n-\ttm_file=\"${tm_file} sparc/aout.h netbsd.h sparc/netbsd.h\"\n+\ttm_file=\"${tm_file} sparc/aout.h netbsd.h netbsd-aout.h sparc/netbsd.h\"\n \ttmake_file=t-netbsd\n \tuse_collect2=yes\n \t;;\n@@ -3206,7 +3209,7 @@ vax-*-sysv*)\t\t\t# VAXen running system V\n \tfloat_format=vax\n \t;;\n vax-*-netbsd*)\n-\ttm_file=\"${tm_file} netbsd.h vax/netbsd.h\"\n+\ttm_file=\"${tm_file} netbsd.h netbsd-aout.h vax/netbsd.h\"\n \ttmake_file=t-netbsd\n \tfloat_format=vax\n \tuse_collect2=yes"}, {"sha": "6e4f4daf62b20e9fa63cddfc1ca4fd5dc7ef1100", "filename": "gcc/config/alpha/netbsd-elf.h", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dbcf0581d6a91c9374d1087f1e9cd384319121/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd-elf.h?ref=58dbcf0581d6a91c9374d1087f1e9cd384319121", "patch": "@@ -1,32 +0,0 @@\n-/* Definitions of target machine for GNU compiler\n-   for Alpha NetBSD systems using ELF.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (Alpha NetBSD/ELF)\");\n-\n-#undef SUB_CPP_PREDEFINES\n-#define SUB_CPP_PREDEFINES \"-D__ELF__\"\n-\n-#undef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS \\\n-{ \"elf_dynamic_linker\", ELF_DYNAMIC_LINKER },\n-\n-#define ELF_DYNAMIC_LINKER\t\"/usr/libexec/ld.elf_so\""}, {"sha": "7eacce23f8c75b18b8afb213da7f34cb70326c51", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Alpha NetBSD systems.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -23,11 +23,75 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT (MASK_FP | MASK_FPREGS | MASK_GAS)\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D_LONGLONG -Dnetbsd -Dunix \" SUB_CPP_PREDEFINES\n+#define CPP_PREDEFINES\t\t\t\t\t\t\t\\\n+  \"-D__NetBSD__ -D__ELF__ -Asystem=unix -Asystem=NetBSD\"\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\"\n \n /* Show that we need a GP when profiling.  */\n #undef TARGET_PROFILING_NEEDS_GP\n #define TARGET_PROFILING_NEEDS_GP 1\n+\n+\n+/* Provide a CPP_SPEC appropriate for NetBSD/alpha.  In addition to\n+   the standard NetBSD specs, we also handle Alpha FP mode indications.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC\t\t\t\t\t\t\t\\\n+  \"%{mieee:-D_IEEE_FP}\t\t\t\t\t\t\t\\\n+   %{mieee-with-inexact:-D_IEEE_FP -D_IEEE_FP_INEXACT}\t\t\t\\\n+   %(cpp_cpu) %(cpp_subtarget)\"\n+\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC\t\t\t\t\t\t\\\n+  \"%{posix:-D_POSIX_SOURCE}\"\n+\n+\n+/* Provide a LINK_SPEC appropriate for a NetBSD/alpha ELF target.\n+   This is a copy of LINK_SPEC from <netbsd-elf.h> tweaked for\n+   the alpha target.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\t\t\t\t\t\t\\\n+  \"%{G*} %{relax:-relax}\t\t\t\t\t\t\\\n+   %{O*:-O3} %{!O*:-O1}\t\t\t\t\t\t\t\\\n+   %{assert*} %{R*}\t\t\t\t\t\t\t\\\n+   %{shared:-shared}\t\t\t\t\t\t\t\\\n+   %{!shared:\t\t\t\t\t\t\t\t\\\n+     -dc -dp\t\t\t\t\t\t\t\t\\\n+     %{!nostdlib:\t\t\t\t\t\t\t\\\n+       %{!r*:\t\t\t\t\t\t\t\t\\\n+\t %{!e*:-e __start}}}\t\t\t\t\t\t\\\n+     %{!static:\t\t\t\t\t\t\t\t\\\n+       %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+       %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}}\t\\\n+     %{static:-static}}\"\n+\n+\n+/* Provide an ENDFILE_SPEC appropriate for NetBSD/alpha ELF.  Here we\n+   add crtend.o, which provides part of the support for getting\n+   C++ file-scope static objects deconstructed after exiting \"main\".\n+\n+   We also need to handle the GCC option `-ffast-math'.  */\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC\t\t\\\n+  \"%{ffast-math|funsafe-math-optimizations:crtfm%O%s} \\\n+   %{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n+\n+/* Make gcc agree with <machine/ansi.h> */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (NetBSD/alpha ELF)\");"}, {"sha": "7ff3c21fdeaeef7a6c1c27bf1719f6022b9c5d00", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 39, "deletions": 88, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for i386/ELF NetBSD systems.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n    Contributed by matthew green <mrg@eterna.com.au>\n \n This file is part of GNU CC.\n@@ -20,87 +20,28 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Provide a LIB_SPEC appropriate for NetBSD.  Just select the appropriate\n-   libc, depending on whether we're doing profiling; if `-posix' is specified,\n-   link against the appropriate libposix first.  */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC\t\t\t\t\t\t\t\\\n-  \"%{posix:%{!p:%{!pg:-lposix}}%{p:-lposix_p}%{pg:-lposix_p}}\t\t\\\n-   %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n-\n-/* Provide a STARTFILE_SPEC appropriate for NetBSD ELF targets.  Here we\n-   provide support for the special GCC option -static.  On ELF targets,\n-   we also add the crtbegin.o file which provides part of the support\n-   for getting C++ file-scope static objects constructed before entering\n-   `main'.  We use the NetBSD crt0.  */\n-\n-#undef STARTFILE_SPEC\n-#define\tSTARTFILE_SPEC \\\n- \"%{!shared: \\\n-     %{pg:gcrt0%O%s} \\\n-     %{!pg: \\\n-        %{p:gcrt0%O%s} \\\n-        %{!p:crt0%O%s}}} \\\n-   %{!shared:crtbegin%O%s} %{shared:crtbeginS%O%s}\"\n-\n-/* Provide an ENDFILE_SPEC appropriate for NetBSD ELF targets.  Here we\n-   add crtend.o, which provides part of the support for getting C++\n-   file-scope static objects deconstructed after exiting `main'.  */\n-\n-#undef ENDFILE_SPEC\n-#define\tENDFILE_SPEC \\\n- \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n-\n-/* Provide a LINK_SPEC appropriate for a NetBSD/i386 ELF target.  Only\n-   the linker emulation is i386-specific.  The rest are\n-   common to all ELF targets, except for the name of the start function.  */\n+/* Provide a LINK_SPEC appropriate for a NetBSD/i386 ELF target.\n+   This is a copy of LINK_SPEC from <netbsd-elf.h> tweaked for\n+   the i386 target.  */\n \n #undef LINK_SPEC\n-#define LINK_SPEC \\\n- \"-m elf_i386 \\\n-  %{assert*} %{R*} \\\n-  %{shared:-shared} \\\n-  %{!shared: \\\n-    -dp \\\n-    %{!nostdlib:%{!r*:%{!e*:-e __start}}} \\\n-    %{!static: \\\n-      -dy %{rdynamic:-export-dynamic} \\\n-      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}} \\\n+#define LINK_SPEC\t\t\t\t\t\t\t\\\n+ \"%{assert*} %{R*}\t\t\t\t\t\t\t\\\n+  %{shared:-shared}\t\t\t\t\t\t\t\\\n+  %{!shared:\t\t\t\t\t\t\t\t\\\n+    -dc -dp\t\t\t\t\t\t\t\t\\\n+    %{!nostdlib:\t\t\t\t\t\t\t\\\n+      %{!r*:\t\t\t\t\t\t\t\t\\\n+\t%{!e*:-e __start}}}\t\t\t\t\t\t\\\n+    %{!static:\t\t\t\t\t\t\t\t\\\n+      %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}}\t\\\n     %{static:-static}}\"\n \n-/* Provide a CPP_SPEC appropriate for NetBSD.  Current we just deal with\n-   the GCC option `-posix'.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-\n-/* Provide an ASM_SPEC appropriate for NetBSD.  Currently we only deal\n-   with the options for generating PIC code.  */\n-\n-#undef ASM_SPEC\n-#define ASM_SPEC \" %| %{fpic:-k} %{fPIC:-k -K}\"\n-\n-/* Provide a LIB_SPEC appropriate for NetBSD.  Just select the appropriate\n-   libc, depending on whether we're doing profiling.  */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n-\n-/* This defines which switch letters take arguments.  */\n-#undef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) \\\n-  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n-   || (CHAR) == 'R')\n-\n-/* Implicit library calls should use memcpy, not bcopy, etc.  */\n-\n-#define TARGET_MEM_FUNCTIONS\n-\n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"\\\n--Di386 -D__NetBSD__ -D__ELF__ -Asystem(unix) -Asystem(NetBSD)\"\n+#define CPP_PREDEFINES\t\t\t\t\t\t\t\\\n+  \"-D__NetBSD__ -D__ELF__ -Asystem=unix -Asystem=NetBSD\"\n \n /* Make gcc agree with <machine/ansi.h> */\n \n@@ -122,25 +63,36 @@ Boston, MA 02111-1307, USA.  */\n #undef WINT_TYPE\n #define WINT_TYPE \"int\"\n \n-/* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.  Under NetBSD/i386, the assembler does\n-   nothing special with -pg.  */\n-\n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n \n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n #undef ASM_FINAL_SPEC\n-#define ASM_FINAL_SPEC \"%{pipe:-}\"\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n \n-#undef  NO_PROFILE_COUNTERS\n+\n+/* Output assembler code to FILE to call the profiler.  */\n+\n+#undef NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS\n \n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tcall __mcount@PLT\\n\");\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tcall __mcount\\n\");\t\t\t\t\\\n+}\n+\n+\n #undef HAS_INIT_SECTION\n \n /* This is how we tell the assembler that two symbols have the same value.  */\n@@ -158,16 +110,15 @@ Boston, MA 02111-1307, USA.  */\n    This is used to align code labels according to Intel recommendations.  */\n \n #ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n-#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n-  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\\\n+  if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n     if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n     else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n   }\n #endif\n \n-/*\n- * We always use gas here, so we don't worry about ECOFF assembler problems.\n- */\n+/* We always use gas here, so we don't worry about ECOFF assembler\n+   problems.  */\n #undef TARGET_GAS\n #define TARGET_GAS\t1\n \n@@ -176,4 +127,4 @@ Boston, MA 02111-1307, USA.  */\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n #undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (NetBSD/i386 ELF target)\");\n+#define TARGET_VERSION fprintf (stderr, \" (NetBSD/i386 ELF)\");"}, {"sha": "659a4f0fd3f9aa518b4702acbc4732a862edb613", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -5,6 +5,7 @@\n \n /* Get generic NetBSD definitions.  */\n #include <netbsd.h>\n+#include <netbsd-aout.h>\n \n /* This goes away when the math-emulator is fixed */\n #undef TARGET_SUBTARGET_DEFAULT"}, {"sha": "07dd4e8cc34ca7fba71f9547c44b0da71d793885", "filename": "gcc/config/m68k/netbsd.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -3,6 +3,7 @@\n /* Get generic NetBSD definitions.  */\n \n #include <netbsd.h>\n+#include <netbsd-aout.h>\n \n #define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68020)\n "}, {"sha": "95d3901df942a44254abd05aa58d20f8e7e84723", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 157, "deletions": 191, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -1,5 +1,6 @@\n-/* Definitions for DECstation running BSD as target machine for GNU compiler.\n-   Copyright (C) 1993, 1995, 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler, for MIPS NetBSD systems.\n+   Copyright (C) 1993, 1995, 1996, 1997, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,212 +19,177 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#define DECSTATION\n \n-/* Look for the include files in the system-defined places.  */\n+/* Define default target values. */\n \n-#ifndef CROSS_COMPILE\n-#undef GPLUSPLUS_INCLUDE_DIR\n-#define GPLUSPLUS_INCLUDE_DIR \"/usr/include/g++\"\n+#ifndef TARGET_ENDIAN_DEFAULT\n+#define TARGET_ENDIAN_DEFAULT MASK_BIG_ENDIAN\n+#endif\n \n-#undef GCC_INCLUDE_DIR\n-#define GCC_INCLUDE_DIR \"/usr/include\"\n+#ifndef MACHINE_TYPE\n+#if TARGET_ENDIAN_DEFAULT != 0\n+#define MACHINE_TYPE \"NetBSD/mipseb ELF\"\n+#else\n+#define MACHINE_TYPE \"NetBSD/mipsel ELF\"\n+#endif\n+#endif\n \n-#undef INCLUDE_DEFAULTS\n-#define INCLUDE_DEFAULTS\t\t\t\\\n-  {\t\t\t\t\t\t\\\n-    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\t\\\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\t\t\\\n-    { 0, 0, 0, 0 }\t\t\t\t\\\n-  }\n+#define TARGET_DEFAULT (MASK_GAS|MASK_ABICALLS)\n \n-/* Under NetBSD, the normal location of the various *crt*.o files is the\n-   /usr/lib directory.  */\n \n-#undef STANDARD_STARTFILE_PREFIX\n-#define STANDARD_STARTFILE_PREFIX \"/usr/lib/\"\n-#endif\n+/* XXX Don't use DWARF-2 debugging info, for now.  */\n+#undef DBX_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* Provide a LINK_SPEC appropriate for NetBSD.  Here we provide support\n-   for the special GCC options -static, -assert, and -nostdlib.  */\n \n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} \\\n-   %{!nostartfiles:%{!r*:%{!e*:-e __start}}} -dc -dp %{static:-Bstatic} %{assert*}\"\n+/* Include the generic MIPS ELF configuration.  */\n+#include <mips/elf.h>\n+\n+/* Now clean up after it.  */\n+#undef OBJECT_FORMAT_COFF\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+#undef US_SOFTWARE_GOFAST\n+#undef INIT_SUBTARGET_OPTABS\n+#define INIT_SUBTARGET_OPTABS\n+\n \n-/* Implicit library calls should use memcpy, not bcopy, etc.  */\n+/* Get generic NetBSD definitions.  */\n+#include <netbsd.h>\n \n-#define TARGET_MEM_FUNCTIONS\n \n-/* Define mips-specific netbsd predefines...  */\n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__ANSI_COMPAT \\\n--DMIPSEL -DR3000 -DSYSTYPE_BSD -D_SYSTYPE_BSD -D__NetBSD__ -Dmips \\\n--D__NO_LEADING_UNDERSCORES__ -D__GP_SUPPORT__ \\\n--Dunix -D_R3000 \\\n--Asystem=unix -Asystem=NetBSD -Amachine=mips\"\n+/* Get generic NetBSD ELF definitions.  */\n+#include <netbsd-elf.h>\n+\n+\n+/* Provide CPP predefines appropriate for NetBSD.  We default to\n+   MIPS-I.  */\n+\n+#undef CPP_PREDEFINES\n+#if TARGET_ENDIAN_DEFAULT != 0 \n+#define CPP_PREDEFINES\t\t\t\t\t\t\t\\\n+  \"-D__NetBSD__ -D__ELF__ -D__mips__ -D__mips=1 -D__MIPSEB__\t\t\\\n+   -D__NO_LEADING_UNDERSCORES__\t-D__GP_SUPPORT__\t\t\t\\\n+   -Asystem=unix -Asystem=NetBSD -Amachine=mips\"\n+#else\n+#define CPP_PREDEFINES\t\t\t\t\t\t\t\\\n+  \"-D__NetBSD__ -D__ELF__ -D__mips__ -D__mips=1 -D__MIPSEL__\t\t\\\n+   -D__NO_LEADING_UNDERSCORES__\t-D__GP_SUPPORT__\t\t\t\\\n+   -Asystem=unix -Asystem=NetBSD -Amachine=mips\"\n #endif\n \n-#ifndef SUBTARGET_CPP_SPEC\n+\n+/* Provide a CPP_SPEC appropriate for NetBSD.  This is a simplified\n+   CPP_SPEC from <mips/mips.h>.  We use the SUBTARGET_CPP_SPEC to\n+   deal with NetBSD-specific CPP options.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC\t\t\t\t\t\t\t\\\n+  \"%(subtarget_cpp_size_spec)\t\t\t\t\t\t\\\n+   %{mips3:-U__mips -D__mips=3 -D__mips64}\t\t\t\t\\\n+   %{mips4:-U__mips -D__mips=4 -D__mips64}\t\t\t\t\\\n+   %{mips32:-U__mips -D__mips=32}\t\t\t\t\t\\\n+   %{mips64:-U__mips -D__mips=64 -D__mips64}\t\t\t\t\\\n+   %{mgp32:-U__mips64} %{mgp64:-D__mips64}\t\t\t\t\\\n+   %{mfp32:-D__mips_fpr=32} %{mfp64:-D__mips_fpr=64}\t\t\t\\\n+   %{!mfp32:\t\t\t\t\t\t\t\t\\\n+     %{!mfp64:\t\t\t\t\t\t\t\t\\\n+       %{mgp32:-D__mips_fpr=32}\t\t\t\t\t\t\\\n+       %{!mgp32: %(cpp_fpr_spec)}}}\t\t\t\t\t\\\n+   %{msingle-float:\t\t\t\t\t\t\t\\\n+     %{!msoft-float:-D__mips_single_float}}\t\t\t\t\\\n+   %{m4650:\t\t\t\t\t\t\t\t\\\n+     %{!msoft-float:-D__mips_single_float}}\t\t\t\t\\\n+   %{msoft-float:-D__mips_soft_float}\t\t\t\t\t\\\n+   %{mabi=eabi:-D__mips_eabi}\t\t\t\t\t\t\\\n+   %{mips16:%{!mno-mips16:-D__mips16}}\t\t\t\t\t\\\n+   %{EB:-U__MIPSEL__ -D__MIPSEB__}\t\t\t\t\t\\\n+   %{EL:-U__MIPSEB__ -D__MIPSEL__}\t\t\t\t\t\\\n+   %(subtarget_cpp_spec) \"\n+\n+\n+/* Provide a SUBTARGET_CPP_SIZE_SPEC appropriate for NetBSD.  In\n+   addition to the normal work done by this spec, we also define\n+   __LONG64 or not (so that <machine/ansi.h> can tell).  */\n+\n+#undef SUBTARGET_CPP_SIZE_SPEC\n+#define SUBTARGET_CPP_SIZE_SPEC\t\t\t\t\t\t\\\n+  \"%{mlong64:\t\t\t\t\t\t\t\t\\\n+     %{!mips1:\t\t\t\t\t\t\t\t\\\n+       %{!mips2:\t\t\t\t\t\t\t\\\n+\t %{!mips32:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int -D__LONG64}}}} \\\n+   %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int -U__LONG64}\"\n+\n+\n+/* Provide a SUBTARGET_CPP_SPEC appropriate for NetBSD.  Currently,\n+   we just deal with the GCC option '-posix'.  */\n+\n+#undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-#endif\n \n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n-#define STARTFILE_SPEC \"\"\n \n-#ifndef MACHINE_TYPE\n-#define MACHINE_TYPE \"NetBSD/pmax\"\n-#endif\n+/* Provide a LINK_SPEC appropriate for a NetBSD/mips target.\n+   This is a copy of LINK_SPEC from <netbsd-elf.h> tweaked for\n+   the MIPS target.  */\n \n-#define TARGET_DEFAULT MASK_GAS\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\t\t\t\t\t\t\\\n+  \"%{assert*} %{R*} %{rpath*}\t\t\t\t\t\t\\\n+   %{EL:-m elf32lmip}\t\t\t\t\t\t\t\\\n+   %{EB:-m elf32bmip}\t\t\t\t\t\t\t\\\n+   %(endian_spec)\t\t\t\t\t\t\t\\\n+   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64}\t\\\n+   %{bestGnum} %{call_shared} %{no_archive} %{exact_version}\t\t\\\n+   %{shared:-shared}\t\t\t\t\t\t\t\\\n+   %{!shared:\t\t\t\t\t\t\t\t\\\n+     -dc -dp\t\t\t\t\t\t\t\t\\\n+     %{!nostdlib:\t\t\t\t\t\t\t\\\n+       %{!r*:\t\t\t\t\t\t\t\t\\\n+\t %{!e*:-e __start}}}\t\t\t\t\t\t\\\n+     %{!static:\t\t\t\t\t\t\t\t\\\n+       %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+       %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}}\t\\\n+     %{static:-static}}\"\n+\n+\n+#undef SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC\t\t\t\t\t\t\\\n+  \"%{fpic:-KPIC} %{fPIC:-KPIC}\"\n+\n+\n+/* -G is incompatible with -KPIC which is the default, so only allow objects\n+   in the small data section if the user explicitly asks for it.  */\n+\n+#undef MIPS_DEFAULT_GVALUE \n+#define MIPS_DEFAULT_GVALUE 0 \n+\n+\n+/* This defines which switch letters take arguments.  -G is a MIPS\n+   special.  */\n+\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR)\t\t\t\t\t\t\\\n+  (DEFAULT_SWITCH_TAKES_ARG (CHAR)\t\t\t\t\t\\\n+   || (CHAR) == 'R'\t\t\t\t\t\t\t\\\n+   || (CHAR) == 'G')\n \n-#include \"mips/mips.h\"\n-\n-/*\n- * Some imports from svr4.h in support of shared libraries.\n- * Currently, we need the DECLARE_OBJECT_SIZE stuff.\n- */\n-\n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n-\n-#undef TYPE_ASM_OP\n-#undef SIZE_ASM_OP\n-#undef WEAK_ASM_OP\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-#define WEAK_ASM_OP\t\"\\t.weak\\t\"\n-\n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#undef TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n-\n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n-#endif\n \n-/* These macros generate the special .type and .size directives which\n-   are used to set the corresponding fields of the linker symbol table\n-   entries in an ELF object file under SVR4.  These macros also output\n-   the starting labels for the relevant functions/objects.  */\n-\n-/* Write the extra assembler code needed to declare a function properly.\n-   Some svr4 assemblers need to also have something extra said about the\n-   function's return value.  We allow for that here.  */\n-\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-  } while (0)\n-\n-/* Write the extra assembler code needed to declare an object properly.  */\n-\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n-\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Output the size directive for a decl in rest_of_decl_compilation\n-   in the case where we did not do so before the initializer.\n-   Once we find the error_mark_node, we know that the value of\n-   size_directive_output was set\n-   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n-\n-#undef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n-do {\t\t\t\t\t\t\t\t\t \\\n-     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n-     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n-         && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n-\t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n-\t && !size_directive_output)\t\t\t\t\t \\\n-       {\t\t\t\t\t\t\t\t \\\n-\t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",\");\t\t\t\t\t\t \\\n-\t fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t \\\n-\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t \\\n-\t fprintf (FILE, \"\\n\");\t\t\t\t\t\t \\\n-       }\t\t\t\t\t\t\t\t \\\n-   } while (0)\n-\n-/* This is how to declare the size of a function.  */\n-\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        char label[256];\t\t\t\t\t\t\\\n-\tstatic int labelno;\t\t\t\t\t\t\\\n-\tlabelno++;\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n-\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Switch into a generic section.  */\n-#undef TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n-\n-/* Not having TARGET_GAS here seems a mistake.  If we actually need to\n-   be prepared for file switching, then we need a custom\n-   TARGET_ASM_NAMED_SECTION too.  */\n-\n-#undef TEXT_SECTION\n-#define TEXT_SECTION()\t\t\t\t\\\n-do {\t\t\t\t\t\t\\\n-  if (TARGET_FILE_SWITCHING)\t\t\t\\\n-    abort ();\t\t\t\t\t\\\n-  fputs (TEXT_SECTION_ASM_OP, asm_out_file);\t\\\n-  fputc ('\\n', asm_out_file);\t\t\t\\\n-} while (0)\n-\n-/* Since gas and gld are standard on NetBSD, we don't need these */\n #undef ASM_FINAL_SPEC\n-#undef STARTFILE_SPEC\n+#undef SET_ASM_OP\n+\n+\n+/* Make gcc agree with <machine/ansi.h> */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\""}, {"sha": "867f99a14e033d01049cae4eda7cd1600ebfa015", "filename": "gcc/config/netbsd-aout.h", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-aout.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -0,0 +1,215 @@\n+/* Common configuration file for NetBSD a.out targets.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This defines which switch letters take arguments. */\n+\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR)\t\t\\ \n+  (DEFAULT_SWITCH_TAKES_ARG(CHAR)\t\\\n+   || (CHAR) == 'R')\n+\n+\n+/* Provide an ASM_SPEC appropriate for NetBSD.  Currently we only deal\n+   with the options for generating PIC code.  */\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \" %| %{fpic:-k} %{fPIC:-k -K}\"\n+\n+\n+/* Provide a STARTFILE_SPEC appropriate for NetBSD a.out.  Here we\n+   provide support for the special GCC option -static.  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\t\t\\\n+  \"%{!shared:\t\t\t\t\\\n+     %{pg:gcrt0%O%s}\t\t\t\\\n+     %{!pg:\t\t\t\t\\\n+       %{p:mcrt0%O%s}\t\t\t\\\n+       %{!p:\t\t\t\t\\\n+\t %{!static:crt0%O%s}\t\t\\\n+\t %{static:scrt0%O%s}}}}\t\t\\\n+   %{shared:c++rt0%O%s}\"\n+\n+/* Provide a LINK_SPEC appropriate for NetBSD a.out.  Here we provide\n+   support for the special GCC options -static, -assert, and -nostdlib.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\t\t\\\n+  \"%{nostdlib:-nostdlib}\t\t\\\n+   %{!shared:\t\t\t\t\\\n+     %{!nostdlib:\t\t\t\\\n+       %{!r*:\t\t\t\t\\\n+\t %{!e*:-e start}}}\t\t\\\n+     -dc -dp\t\t\t\t\\\n+     %{static:-Bstatic}}\t\t\\\n+   %{shared:-Bshareable}\t\t\\\n+   %{R*}\t\t\t\t\\\n+   %{assert*}\"\n+\n+\n+/* Some imports from svr4.h in support of shared libraries.  */\n+\n+/* Define the strings used for the .type, .size, and .set directives.\n+   These strings generally do not vary from one system running NetBSD\n+   to another, but if a given system needs to use different pseudo-op\n+   names for these, they may be overridden in the file included after\n+   this one.  */\n+\n+#undef TYPE_ASM_OP\n+#undef SIZE_ASM_OP\n+#undef SET_ASM_OP                \n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n+\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#undef ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE,NAME)\t\t\t\t\t\\\n+  do \t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\t.globl\\t\", FILE); assemble_name (FILE, NAME);\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME);\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+\n+/* The following macro defines the format used to output the second\n+   operand of the .type assembler directive.  Different svr4 assemblers\n+   expect various different forms of this operand.  The one given here\n+   is just a default.  You may need to override it in your machine-\n+   specific tm.h file (depending on the particulars of your assembler).  */\n+\n+#undef TYPE_OPERAND_FMT\n+#define TYPE_OPERAND_FMT\t\"@%s\"\n+\n+\n+/* Write the extra assembler code needed to declare a function's result.\n+   Most svr4 assemblers don't require any special declaration of the\n+   result value, but there are exceptions.  */\n+\n+#ifndef ASM_DECLARE_RESULT\n+#define ASM_DECLARE_RESULT(FILE, RESULT)\n+#endif\n+\n+\n+/* These macros generate the special .type and .size directives which\n+   are used to set the corresponding fields of the linker symbol table\n+   entries in an ELF object file under SVR4 (and a.out on NetBSD).\n+   These macros also output the starting labels for the relevant\n+   functions/objects.  */\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+      putc ('\\n', FILE);\t\t\t\t\t\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+\n+/* Write the extra assembler code needed to declare an object properly.  */\n+\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n+      putc ('\\n', FILE);\t\t\t\t\t\t\\\n+      size_directive_output = 0;\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n+\t  assemble_name (FILE, NAME);\t\t\t\t\t\\\n+\t  fprintf (FILE, \",%d\\n\",\t\t\t\t\t\\\n+\t           int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+    }\n+  while (0)\n+\n+\n+/* Output the size directive for a decl in rest_of_decl_compilation\n+   in the case where we did not do so before the initializer.\n+   Once we find the error_mark_node, we know that the value of\n+   size_directive_output was set\n+   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n+\n+#undef ASM_FINISH_DECLARE_OBJECT\n+#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n+      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t\\\n+\t  && ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n+\t  && DECL_INITIAL (DECL) == error_mark_node\t\t\t\\\n+\t  && !size_directive_output)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n+\t  assemble_name (FILE, name);\t\t\t\t\t\\\n+\t  fprintf (FILE, \",%d\\n\",\t\t\t\t\t\\\n+\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+\n+/* This is how to declare the size of a function.  */\n+\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  char label[256];\t\t\t\t\t\t\\\n+\t  static int labelno;\t\t\t\t\t\t\\\n+\t  labelno++;\t\t\t\t\t\t\t\\\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n+\t  ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n+\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n+\t  assemble_name (FILE, (FNAME));\t\t\t\t\\\n+\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, label);\t\t\t\t\t\\\n+\t  fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, (FNAME));\t\t\t\t\\\n+\t  putc ('\\n', FILE);\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "7dd9ff3d66dfd6ecd071c4674e47e8f71999d9eb", "filename": "gcc/config/netbsd-elf.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-elf.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -0,0 +1,76 @@\n+/* Common configuration file for NetBSD ELF targets.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* This defines which switch letters take arguments.  On NetBSD, most\n+   of the normal cases (defined by gcc.c) apply, and we also have -h*\n+   and -z* options (for the linker) (coming from SVR4).  */\n+\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR)\t\t\t\\\n+  (DEFAULT_SWITCH_TAKES_ARG (CHAR)\t\t\\\n+   || (CHAR) == 'h'\t\t\t\t\\\n+   || (CHAR) == 'z'\t\t\t\t\\\n+   || (CHAR) == 'R')\n+\n+\n+/* Provide a STARTFILE_SPEC appropriate for NetBSD ELF.  Here we\n+   provide support for the special GCC option -static.  On ELF\n+   targets, we also add the crtbegin.o file, which provides part\n+   of the support for getting C++ file-scope static objects\n+   constructed before entering \"main\".  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\t\\\n+  \"%{!shared:\t\t\t\\\n+     %{pg:gcrt0%O%s}\t\t\\\n+     %{!pg:\t\t\t\\\n+       %{p:gcrt0%O%s}\t\t\\\n+       %{!p:crt0%O%s}}}\t\t\\\n+   %{!shared:crtbegin%O%s} %{shared:crtbeginS%O%s}\"\n+\n+\n+/* Provide an ENDFILE_SPEC appropriate for NetBSD ELF.  Here we\n+   add crtend.o, which provides part of the support for getting\n+   C++ file-scope static objects deconstructed after exiting \"main\".  */\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC\t\t\\\n+  \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n+\n+/* Provide a LINK_SPEC appropriate for NetBSD ELF.  Here we provide\n+   support for the special GCC options -assert, -R, -rpath, -shared,\n+   -nostdlib, -static, -rdynamic, and -dynamic-linker.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\t\t\t\t\t\t\\\n+  \"%{assert*} %{R*} %{rpath*}\t\t\t\t\t\t\\\n+   %{shared:-shared}\t\t\t\t\t\t\t\\\n+   %{!shared:\t\t\t\t\t\t\t\t\\\n+     -dc -dp\t\t\t\t\t\t\t\t\\\n+     %{!nostdlib:\t\t\t\t\t\t\t\\\n+       %{!r*:\t\t\t\t\t\t\t\t\\\n+\t %{!e*:-e __start}}}\t\t\t\t\t\t\\\n+     %{!static:\t\t\t\t\t\t\t\t\\\n+       %{rdynamic:-export-dynamic}\t\t\t\t\t\\\n+       %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}}\t\\\n+     %{static:-static}}\""}, {"sha": "5894174791e56b6cd624bfa3a49cd6b1800e2fc9", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 42, "deletions": 152, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -32,33 +32,51 @@\n #undef STANDARD_STARTFILE_PREFIX\n #define STANDARD_STARTFILE_PREFIX\t\"/usr/lib/\"\n \n-#endif\n+#endif /* NETBSD_NATIVE */\n \n \n-/* Provide a CPP_SPEC appropriate for NetBSD.  Current we just deal with\n+/* Provide a CPP_SPEC appropriate for NetBSD.  Currently we just deal with\n    the GCC option `-posix'.  */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-\n-/* Provide an ASM_SPEC appropriate for NetBSD.  Currently we only deal\n-   with the options for generating PIC code.  */\n+#define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE}\"\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \" %| %{fpic:-k} %{fPIC:-k -K}\"\n \n /* Provide a LIB_SPEC appropriate for NetBSD.  Just select the appropriate\n-   libc, depending on whether we're doing profiling.  */\n+   libc, depending on whether we're doing profiling; if `-posix' is specified,\n+   link against the appropriate libposix first.  Don't include libc when\n+   linking a shared library.  */\n \n #undef LIB_SPEC\n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n-\n-/* Provide a LINK_SPEC appropriate for NetBSD.  Here we provide support\n-   for the special GCC options -shared, -static, -assert, and -nostdlib.  */\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} %{static:-Bstatic}} %{shared} %{assert*}\"\n+#define LIB_SPEC\t\t\\\n+  \"%{posix:\t\t\t\\\n+     %{!p:\t\t\t\\\n+       %{!pg:-lposix}}\t\t\\\n+     %{p:-lposix_p}\t\t\\\n+     %{pg:-lposix_p}}\t\t\\\n+   %{!shared:\t\t\t\\\n+     %{!symbolic:\t\t\\\n+       %{!p:\t\t\t\\\n+\t %{!pg:-lc}}\t\t\\\n+       %{p:-lc_p}\t\t\\\n+       %{pg:-lc_p}}}\"\n+\n+/* Provide a LIBGCC_SPEC appropriate for NetBSD.  We also want to exclude\n+   libgcc with -symbolic.  */\n+\n+#undef LIBGCC_SPEC\n+#ifdef NETBSD_NATIVE\n+#define LIBGCC_SPEC\t\t\\\n+  \"%{!symbolic:\t\t\t\\\n+     %{!shared:\t\t\t\\\n+       %{!p:\t\t\t\\\n+\t %{!pg:-lgcc}}}\t\t\\\n+     %{shared:-lgcc_pic}\t\\\n+     %{p:-lgcc_p}\t\t\\\n+     %{pg:-lgcc_p}}\"\n+#else\n+#define LIBGCC_SPEC \"%{!shared:%{!symbolic:-lgcc}}\"\n+#endif\n \n /* When building shared libraries, the initialization and finalization \n    functions for the library are .init and .fini respectively.  */\n@@ -75,11 +93,13 @@\n     fprintf ((STREAM), \"void __fini() {\\n\\t%s();\\n}\\n\", (FUNC));\t\\\n   } while (0)\n \n-/* This defines which switch letters take arguments. */\n-#undef SWITCH_TAKES_ARG\n-#define SWITCH_TAKES_ARG(CHAR) \\\n-  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n-   || (CHAR) == 'R')\n+/* Allow #sccs in preprocessor.  */\n+\n+#undef SCCS_DIRECTIVE\n+#define SCCS_DIRECTIVE\n+\n+#undef TARGET_HAS_F_SETLKW\n+#define TARGET_HAS_F_SETLKW\n \n /* Implicit library calls should use memcpy, not bcopy, etc.  */\n \n@@ -89,133 +109,3 @@\n /* Handle #pragma weak and #pragma pack.  */\n \n #define HANDLE_SYSV_PRAGMA\n-\f\n-/*\n- * Some imports from svr4.h in support of shared libraries.\n- * Currently, we need the DECLARE_OBJECT_SIZE stuff.\n- */\n-\n-/* Define the strings used for the .type, .size, and .set directives.\n-   These strings generally do not vary from one system running netbsd\n-   to another, but if a given system needs to use different pseudo-op\n-   names for these, they may be overridden in the file which includes\n-   this one.  */\n-\n-#undef TYPE_ASM_OP\n-#undef SIZE_ASM_OP\n-#undef SET_ASM_OP\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-#define SET_ASM_OP\t\"\\t.set\\t\"\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-\n-#undef ASM_WEAKEN_LABEL\n-#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n-  do { fputs (\"\\t.globl\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); \\\n-       fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); } while (0)\n-\n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#undef TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n-\n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n-#endif\n-\n-/* These macros generate the special .type and .size directives which\n-   are used to set the corresponding fields of the linker symbol table\n-   entries in an ELF object file under SVR4.  These macros also output\n-   the starting labels for the relevant functions/objects.  */\n-\n-/* Write the extra assembler code needed to declare a function properly.\n-   Some svr4 assemblers need to also have something extra said about the\n-   function's return value.  We allow for that here.  */\n-\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Write the extra assembler code needed to declare an object properly.  */\n-\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Output the size directive for a decl in rest_of_decl_compilation\n-   in the case where we did not do so before the initializer.\n-   Once we find the error_mark_node, we know that the value of\n-   size_directive_output was set\n-   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n-\n-#undef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n-do {\t\t\t\t\t\t\t\t\t \\\n-     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n-     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n-         && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n-\t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n-\t && !size_directive_output)\t\t\t\t\t \\\n-       {\t\t\t\t\t\t\t\t \\\n-\t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n-\t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n-       }\t\t\t\t\t\t\t\t \\\n-   } while (0)\n-\n-/* This is how to declare the size of a function.  */\n-\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        char label[256];\t\t\t\t\t\t\\\n-\tstatic int labelno;\t\t\t\t\t\t\\\n-\tlabelno++;\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n-\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "12ffdf77de590c37fa3814d6ce022622f3ba14b7", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f982f8052a15da18976e84b8d537726b322d0278/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=f982f8052a15da18976e84b8d537726b322d0278", "patch": "@@ -66,6 +66,7 @@ Boston, MA 02111-1307, USA.\n \n /* Get generic NetBSD definitions. */\n #include <netbsd.h>\n+#include <netbsd-aout.h>\n \n /* Names to predefine in the preprocessor for this target machine.  */\n "}]}