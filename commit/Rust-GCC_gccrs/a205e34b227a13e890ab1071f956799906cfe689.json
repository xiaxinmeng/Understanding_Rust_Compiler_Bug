{"sha": "a205e34b227a13e890ab1071f956799906cfe689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwNWUzNGIyMjdhMTNlODkwYWIxMDcxZjk1Njc5OTkwNmNmZTY4OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-11T06:11:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-11T06:11:14Z"}, "message": "Jeff for Tege:\n\n\t* pa.h (GO_IF_LEGITIMATE_ADDRESS): Allow\n\t(lo_sum (reg) (unspec (symref))).\n\n\t* pa.md (pic2_lo_sum): New pattern matching when -fPIC using UNSPEC.\n\t* pa.c (legitimize_pic_address): Generate an insn matching\n\tpic2_lo_sum when -fPIC.\n\n\t* pa.md (pic_highpart): Add missing mode for PLUS.\n\t(add_high_const): Likewise.\n\n\t* pa.md (matcher for plain lo_sum): Call abort if this happens\n\twhen generating pic or PIC.\n\nFrom-SVN: r8423", "tree": {"sha": "46dcb01ad5a837cd944e0ef39ec1baf041f8b87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46dcb01ad5a837cd944e0ef39ec1baf041f8b87f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a205e34b227a13e890ab1071f956799906cfe689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a205e34b227a13e890ab1071f956799906cfe689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a205e34b227a13e890ab1071f956799906cfe689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a205e34b227a13e890ab1071f956799906cfe689/comments", "author": null, "committer": null, "parents": [{"sha": "279c9bde625781e47709a2a5900c3c56966e67e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279c9bde625781e47709a2a5900c3c56966e67e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279c9bde625781e47709a2a5900c3c56966e67e7"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "a458203e03107102599aec65fb87bd39e11d19b0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a205e34b227a13e890ab1071f956799906cfe689", "patch": "@@ -491,8 +491,10 @@ legitimize_pic_address (orig, mode, reg)\n \n       if (flag_pic == 2)\n \t{\n-\t  emit_insn (gen_pic_highpart (reg, pic_offset_table_rtx, orig));\n-\t  pic_ref = (gen_rtx (MEM, Pmode, gen_rtx (LO_SUM, Pmode, reg, orig)));\n+\t  emit_insn (gen_pic2_highpart (reg, pic_offset_table_rtx, orig));\n+\t  pic_ref = gen_rtx (MEM, Pmode,\n+\t\t\t     gen_rtx (LO_SUM, Pmode, reg,\n+\t\t\t\t      gen_rtx (UNSPEC, SImode, gen_rtvec (1, orig), 0)));\n \t}\n       else\n \tpic_ref = gen_rtx (MEM, Pmode,"}, {"sha": "ceef67d79e7f3a6f0ea27d2cbcb27caac4768a34", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a205e34b227a13e890ab1071f956799906cfe689", "patch": "@@ -1355,6 +1355,12 @@ extern union tree_node *current_function_decl;\n \t   || (GET_CODE (X) == CONST_INT\t\t\\\n \t       && INT_5_BITS (X)))\t\t\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n+  /* Needed for -fPIC */\t\t\t\t\\\n+  else if (GET_CODE (X) == LO_SUM\t\t\t\\\n+\t   && GET_CODE (XEXP (X, 0)) == REG             \\\n+\t   && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\\\n+\t   && GET_CODE (XEXP (X, 1)) == UNSPEC)\t\t\\\n+    goto ADDR;\t\t\t\t\t\t\\\n }\n \f\n /* Try machine-dependent ways of modifying an illegitimate address"}, {"sha": "1917fac914ac51b9a6c7c4d7b44c3649bd63d4ad", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a205e34b227a13e890ab1071f956799906cfe689/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=a205e34b227a13e890ab1071f956799906cfe689", "patch": "@@ -1166,10 +1166,10 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"16\")])\t\t; 12 or 16\n \n-(define_insn \"pic_highpart\"\n+(define_insn \"pic2_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus (match_operand:SI 1 \"register_operand\" \"r\")\n-\t      (high:SI (match_operand 2 \"\" \"\"))))]\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (high:SI (match_operand 2 \"\" \"\"))))]\n   \"symbolic_operand (operands[2], Pmode)\n    && ! function_label_operand (operands[2])\n    && ! read_only_operand (operands[2])\n@@ -1178,6 +1178,22 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+; We need this to make sure CSE doesn't simplify a memory load with a\n+; symbolic address, whose content it think it knows.  For PIC, what CSE\n+; think is the real value will be the address of that value.\n+(define_insn \"pic2_lo_sum\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mem:SI (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (unspec:SI [(match_operand:SI 2 \"symbolic_operand\" \"\")] 0))))]\n+  \"\"\n+  \"*\n+{\n+  if (flag_pic != 2)\n+    abort ();\n+  return \\\"ldw RT'%G2(%1),%0\\\";\n+}\")\n+\n+\n ;; Always use addil rather than ldil;add sequences.  This allows the\n ;; HP linker to eliminate the dp relocation if the symbolic operand\n ;; lives in the TEXT space.\n@@ -1267,9 +1283,7 @@\n   \"!is_function_label_plus_const (operands[2])\"\n   \"*\n {\n-  if (flag_pic == 2 && symbolic_operand (operands[2], Pmode))\n-    return \\\"ldw RT'%G2(%1),%0\\\";\n-  else if (flag_pic == 1 && symbolic_operand (operands[2], Pmode))\n+  if (flag_pic && symbolic_operand (operands[2], Pmode))\n     abort ();\n   else\n     return \\\"ldo R'%G2(%1),%0\\\";\n@@ -1386,7 +1400,7 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lo_sum:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"i\")))]\n+\t\t   (match_operand 2 \"const_int_operand\" \"\")))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n   [(set_attr \"length\" \"4\")])"}]}