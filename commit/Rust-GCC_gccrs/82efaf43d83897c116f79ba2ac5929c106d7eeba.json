{"sha": "82efaf43d83897c116f79ba2ac5929c106d7eeba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlZmFmNDNkODM4OTdjMTE2Zjc5YmEyYWM1OTI5YzEwNmQ3ZWViYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-18T04:36:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-18T04:36:03Z"}, "message": "re PR c++/10091 ([parisc] ICE in cp_expr_size, at cp/cp-lang.c:307)\n\n        PR c++/10091\n        * expr.c (expand_expr) [ADDR_EXPR]: Disallow taking the address of\n        an unaligned member of TREE_ADDRESSABLE type.\n        * cp/typeck.c (build_class_member_access_expr): Compare\n        TYPE_MAIN_VARIANTs.\n\nFrom-SVN: r64523", "tree": {"sha": "88310bae3369e9f1bfa85001db5c73eef27a9770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88310bae3369e9f1bfa85001db5c73eef27a9770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82efaf43d83897c116f79ba2ac5929c106d7eeba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82efaf43d83897c116f79ba2ac5929c106d7eeba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82efaf43d83897c116f79ba2ac5929c106d7eeba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82efaf43d83897c116f79ba2ac5929c106d7eeba/comments", "author": null, "committer": null, "parents": [{"sha": "10326855ab6f03a63a891d80f578c34104b18e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10326855ab6f03a63a891d80f578c34104b18e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10326855ab6f03a63a891d80f578c34104b18e22"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "5effc3b1c1efd74a4df231f2e5f4b7a8715be6ee", "filename": "gcc/testsuite/g++.dg/ext/packed2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82efaf43d83897c116f79ba2ac5929c106d7eeba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82efaf43d83897c116f79ba2ac5929c106d7eeba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked2.C?ref=82efaf43d83897c116f79ba2ac5929c106d7eeba", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/10091\n+\n+// Bug: We were dying because in general, B::a doesn't have enough\n+// alignment for us to take its address.  But if the B is C::b, it does\n+// have enough alignment, and we should be able to determine that.\n+\n+// This only failed on STRICT_ALIGNMENT targets (i.e. not i686)\n+\n+struct A {\n+  int i;\n+\n+  A();\n+  A(const A&);\n+  A& operator=(const A&);\n+};\n+\n+struct B {\n+  A a;\n+} __attribute__ ((packed));\n+\n+struct C {\n+  B b;\n+  int j;\n+};\n+\n+void f (const A&);\n+void g (const C& c)\n+{\n+  f (c.b.a);\n+}"}]}