{"sha": "bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3YzE0MDhmZmEwZjZiYWE4NmZhMDk4MTViMGRhZjI4N2I3NGNiOQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T18:13:03Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T18:13:03Z"}, "message": "iq2000-protos.h (print_operand): Delete.\n\n\t* config/iq2000/iq2000-protos.h (print_operand): Delete.\n\t(print_operand_address): Delete.\n\t* config/iq2000/iq2000.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t(iq2000_print_operand_punct): Delete.\n\t* config/iq2000/iq2000.c (iq2000_print_operand_punct): Make static.\n\t(iq2000_print_operand_address): Make static.\n\t(iq2000_print_operand): Make static.\n\t(iq2000_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r160938", "tree": {"sha": "8d389f9eb157d90f5f0dc6aa212cd8b58a3172aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d389f9eb157d90f5f0dc6aa212cd8b58a3172aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/comments", "author": null, "committer": null, "parents": [{"sha": "0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb30cb73d96d9ed538bf3ded15e949e59eaf90e"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "b74ff10e0e8069a31fe2fa5aec28f64d19c88e8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "patch": "@@ -1,3 +1,18 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/iq2000/iq2000-protos.h (print_operand): Delete.\n+\t(print_operand_address): Delete.\n+\t* config/iq2000/iq2000.h (PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t(iq2000_print_operand_punct): Delete.\n+\t* config/iq2000/iq2000.c (iq2000_print_operand_punct): Make static.\n+\t(iq2000_print_operand_address): Make static.\n+\t(iq2000_print_operand): Make static.\n+\t(iq2000_print_operand_punct_valid_p): New function.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS):\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/frv/frv-protos.h (frv_print_operand): Delete."}, {"sha": "56fd39e7bc661ef5c2d3a99c251ae1580bb9f48b", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "patch": "@@ -35,8 +35,6 @@ extern void             iq2000_expand_eh_return (rtx);\n extern int              iq2000_can_use_return_insn (void);\n extern int              iq2000_adjust_insn_length (rtx, int);\n extern char *           iq2000_output_conditional_branch (rtx, rtx *, int, int, int, int);\n-extern void             print_operand_address (FILE *, rtx);\n-extern void             print_operand (FILE *, rtx, int);\n \n #ifdef RTX_CODE\n extern rtx              gen_int_relational (enum rtx_code, rtx, rtx, rtx, int *);"}, {"sha": "559d88433fa7d73884e0f835ed105d4bb7a7db5d", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "patch": "@@ -108,8 +108,8 @@ struct GTY(()) machine_function\n \n /* Global variables for machine-dependent things.  */\n \n-/* List of all IQ2000 punctuation characters used by print_operand.  */\n-char iq2000_print_operand_punct[256];\n+/* List of all IQ2000 punctuation characters used by iq2000_print_operand.  */\n+static char iq2000_print_operand_punct[256];\n \n /* The target cpu for optimization and scheduling.  */\n enum processor_type iq2000_tune;\n@@ -169,6 +169,9 @@ static void iq2000_asm_trampoline_template (FILE *);\n static void iq2000_trampoline_init    (rtx, tree, rtx);\n static rtx iq2000_function_value      (const_tree, const_tree, bool);\n static rtx iq2000_libcall_value       (enum machine_mode, const_rtx);\n+static void iq2000_print_operand      (FILE *, rtx, int);\n+static void iq2000_print_operand_address (FILE *, rtx);\n+static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -193,6 +196,13 @@ static rtx iq2000_libcall_value       (enum machine_mode, const_rtx);\n #undef  TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n #define TARGET_HAVE_SWITCHABLE_BSS_SECTIONS false\n \n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND\t\tiq2000_print_operand\n+#undef  TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS\tiq2000_print_operand_address\n+#undef  TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P iq2000_print_operand_punct_valid_p\n+\n #undef  TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE\tdefault_promote_function_mode_always_promote\n #undef  TARGET_PROMOTE_PROTOTYPES\n@@ -2920,8 +2930,8 @@ iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n    assembler syntax for an instruction operand that is a memory\n    reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n-void\n-print_operand_address (FILE * file, rtx addr)\n+static void\n+iq2000_print_operand_address (FILE * file, rtx addr)\n {\n   if (!addr)\n     error (\"PRINT_OPERAND_ADDRESS, null pointer\");\n@@ -2946,7 +2956,7 @@ print_operand_address (FILE * file, rtx addr)\n \t\t\t     \"PRINT_OPERAND_ADDRESS, LO_SUM with #1 not REG.\");\n \n \t  fprintf (file, \"%%lo(\");\n-\t  print_operand_address (file, arg1);\n+\t  iq2000_print_operand_address (file, arg1);\n \t  fprintf (file, \")(%s)\", reg_names [REGNO (arg0)]);\n \t}\n \tbreak;\n@@ -3048,12 +3058,12 @@ print_operand_address (FILE * file, rtx addr)\n    '$'\tPrint the name of the stack pointer register (sp or $29).\n    '+'\tPrint the name of the gp register (gp or $28).  */\n \n-void\n-print_operand (FILE *file, rtx op, int letter)\n+static void\n+iq2000_print_operand (FILE *file, rtx op, int letter)\n {\n   enum rtx_code code;\n \n-  if (PRINT_OPERAND_PUNCT_VALID_P (letter))\n+  if (iq2000_print_operand_punct_valid_p (letter))\n     {\n       switch (letter)\n \t{\n@@ -3234,13 +3244,18 @@ print_operand (FILE *file, rtx op, int letter)\n \n   else if (code == CONST && GET_CODE (XEXP (op, 0)) == REG)\n     {\n-      print_operand (file, XEXP (op, 0), letter);\n+      iq2000_print_operand (file, XEXP (op, 0), letter);\n     }\n \n   else\n     output_addr_const (file, op);\n }\n \n+static bool\n+iq2000_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return iq2000_print_operand_punct[code];\n+}\n \n /* For the IQ2000, transform:\n "}, {"sha": "53a6b5cad04660d6d6f1a72ba6597acf644f031f", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7c1408ffa0f6baa86fa09815b0daf287b74cb9/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=bf7c1408ffa0f6baa86fa09815b0daf287b74cb9", "patch": "@@ -571,13 +571,6 @@ typedef struct iq2000_args\n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)\t\t\t\\\n   final_prescan_insn (INSN, OPVEC, NOPERANDS)\n \n-/* See iq2000.c for the IQ2000 specific codes.  */\n-#define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) iq2000_print_operand_punct[CODE]\n-\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n-\n #define DBR_OUTPUT_SEQEND(STREAM)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n@@ -920,9 +913,6 @@ enum processor_type\n #define SDATA_SECTION_ASM_OP\t\"\\t.sdata\"\t/* Small data.  */\n \n \f\n-/* List of all IQ2000 punctuation characters used by print_operand.  */\n-extern char iq2000_print_operand_punct[256];\n-\n /* The target cpu for optimization and scheduling.  */\n extern enum processor_type iq2000_tune;\n "}]}