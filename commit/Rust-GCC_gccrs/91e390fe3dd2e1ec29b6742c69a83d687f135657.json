{"sha": "91e390fe3dd2e1ec29b6742c69a83d687f135657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlMzkwZmUzZGQyZTFlYzI5YjY3NDJjNjlhODNkNjg3ZjEzNTY1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-28T17:20:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-28T17:20:43Z"}, "message": "type_traits: Implement is_empty.\n\n2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_empty.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_empty/\n\tis_empty.cc: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_empty/\n\ttypedefs.cc: Likewise.\n\n\t* include/tr1/type_traits (__is_abstract_helper): Simplify a bit.\n\nFrom-SVN: r94379", "tree": {"sha": "39a383dbe7b8cb361b07842496d049532f0518d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a383dbe7b8cb361b07842496d049532f0518d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e390fe3dd2e1ec29b6742c69a83d687f135657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e390fe3dd2e1ec29b6742c69a83d687f135657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e390fe3dd2e1ec29b6742c69a83d687f135657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e390fe3dd2e1ec29b6742c69a83d687f135657/comments", "author": null, "committer": null, "parents": [{"sha": "01aa1d43e4cf1a77639ea8839d4de13d440eba64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aa1d43e4cf1a77639ea8839d4de13d440eba64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01aa1d43e4cf1a77639ea8839d4de13d440eba64"}], "stats": {"total": 153, "additions": 150, "deletions": 3}, "files": [{"sha": "eda22a8d56755ce4ae870136330db95f31e6056a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91e390fe3dd2e1ec29b6742c69a83d687f135657", "patch": "@@ -1,3 +1,13 @@\n+2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_empty.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_empty/\n+\tis_empty.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_empty/\n+\ttypedefs.cc: Likewise.\n+\n+\t* include/tr1/type_traits (__is_abstract_helper): Simplify a bit.\n+\n 2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Implement is_abstract, by exploiting the"}, {"sha": "753722941f9d224852569830a615a895658ed765", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=91e390fe3dd2e1ec29b6742c69a83d687f135657", "patch": "@@ -477,10 +477,38 @@ namespace tr1\n \t\t\t\t      remove_all_extents<_Tp>::type>::value)>\n     { };\n \n+  template<typename>\n+    struct __is_empty_helper_1\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_empty_helper_2\n+    : public _Tp { };\n+\n+  // Unfortunately, without compiler support we cannot tell union from\n+  // class types, and is_empty doesn't work at all with the former. \n+  template<typename _Tp, bool = (is_fundamental<_Tp>::value\n+\t\t\t\t || is_array<_Tp>::value\n+\t\t\t\t || is_pointer<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value\n+\t\t\t\t || is_member_pointer<_Tp>::value\n+\t\t\t\t || is_enum<_Tp>::value\n+\t\t\t\t || is_function<_Tp>::value)>\n+    struct __is_empty_helper\n+    { static const bool __value = (sizeof(__is_empty_helper_1<_Tp>)\n+\t\t\t\t   == sizeof(__is_empty_helper_2<_Tp>)); };\n+\n+  template<typename _Tp>\n+    struct __is_empty_helper<_Tp, true>\n+    { static const bool __value = false; };\n+\n+  template<typename _Tp>\n+    struct is_empty\n+    : public integral_constant<bool, __is_empty_helper<_Tp>::__value>\n+    { };\n+\n   // Exploit the resolution DR core/337.\n-  template<typename _Tp, bool = (is_void<_Tp>::value\n-\t\t\t\t || is_function<_Tp>::value\n-\t\t\t\t || is_reference<_Tp>::value)>\n+  template<typename _Tp, bool = !is_object<_Tp>::value>\n     struct __is_abstract_helper\n     : public __sfinae_types\n     {"}, {"sha": "861105498aad42851258b426c1106b7ad59e4d40", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_empty/is_empty.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Fis_empty.cc?ref=91e390fe3dd2e1ec29b6742c69a83d687f135657", "patch": "@@ -0,0 +1,73 @@\n+// 2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+class EmptyClassOne\n+{ typedef int type; };\n+\n+class EmptyClassTwo\n+{ static int data; };\n+\n+class EmptyClassThree\n+{ int f(); };\n+\n+class NonEmptyClassOne\n+{ int data; };\n+\n+class NonEmptyClassTwo\n+{ virtual int f(); };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_empty;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_empty, ClassType>(true)) );\n+  VERIFY( (test_category<is_empty, EmptyClassOne>(true)) );\n+  VERIFY( (test_category<is_empty, EmptyClassTwo>(true)) );\n+  VERIFY( (test_category<is_empty, EmptyClassThree>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_empty, void>(false)) );\n+  VERIFY( (test_category<is_empty, float>(false)) );\n+  VERIFY( (test_category<is_empty, int[4]>(false)) );\n+  VERIFY( (test_category<is_empty, int*>(false)) );\n+  VERIFY( (test_category<is_empty, int&>(false)) );\n+  VERIFY( (test_category<is_empty, int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_empty, EnumType>(false)) );\n+  VERIFY( (test_category<is_empty, int (int)>(false)) );\n+\n+  VERIFY( (test_category<is_empty, AbstractClass>(false)) );\n+  VERIFY( (test_category<is_empty, NonEmptyClassOne>(false)) );\n+  VERIFY( (test_category<is_empty, NonEmptyClassTwo>(false)) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ffc041606dc218623e0e722a573250b40fd9f71", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_empty/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e390fe3dd2e1ec29b6742c69a83d687f135657/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_empty%2Ftypedefs.cc?ref=91e390fe3dd2e1ec29b6742c69a83d687f135657", "patch": "@@ -0,0 +1,36 @@\n+// 2005-01-28  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_empty<int>             test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}