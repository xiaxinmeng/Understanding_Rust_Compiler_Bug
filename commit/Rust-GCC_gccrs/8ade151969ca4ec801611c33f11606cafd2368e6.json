{"sha": "8ade151969ca4ec801611c33f11606cafd2368e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkZTE1MTk2OWNhNGVjODAxNjExYzMzZjExNjA2Y2FmZDIzNjhlNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-04-23T19:10:52Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-04-23T19:10:52Z"}, "message": "Fix gcov mips switch table interaction bug reported to bug-gcc.\n\n\t* profile.c (tablejump_entry_p): New function.\n\t(branch_prob): Add code to recognize MIPS tablejump entry branch.\n\tUse tablejump_entry_p in MIPS and HPPA tablejump checking code.\n\nFrom-SVN: r19388", "tree": {"sha": "c7752a4e5b4c384f8e7906d09434bc29071647e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7752a4e5b4c384f8e7906d09434bc29071647e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ade151969ca4ec801611c33f11606cafd2368e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ade151969ca4ec801611c33f11606cafd2368e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ade151969ca4ec801611c33f11606cafd2368e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ade151969ca4ec801611c33f11606cafd2368e6/comments", "author": null, "committer": null, "parents": [{"sha": "2e925bfc0c4acda15c414f10faae640a5c4735c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e925bfc0c4acda15c414f10faae640a5c4735c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e925bfc0c4acda15c414f10faae640a5c4735c4"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "24a5a0836c7028ba4cdf8caade6d56e93dfa35d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ade151969ca4ec801611c33f11606cafd2368e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ade151969ca4ec801611c33f11606cafd2368e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ade151969ca4ec801611c33f11606cafd2368e6", "patch": "@@ -1,3 +1,9 @@\n+Thu Apr 23 19:09:33 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* profile.c (tablejump_entry_p): New function.\n+\t(branch_prob): Add code to recognize MIPS tablejump entry branch.\n+\tUse tablejump_entry_p in MIPS and HPPA tablejump checking code.\n+\n Thu Apr 23 15:01:13 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c (find_barrier): Return as soon as a barrier is"}, {"sha": "8b6fff5be987ee864ece4383adaa1a82fb7f032a", "filename": "gcc/profile.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ade151969ca4ec801611c33f11606cafd2368e6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ade151969ca4ec801611c33f11606cafd2368e6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=8ade151969ca4ec801611c33f11606cafd2368e6", "patch": "@@ -413,6 +413,25 @@ output_gcov_string (string, delimiter)\n   __write_long (delimiter, bb_file, 4);\n }\n \f\n+/* Return TRUE if this insn must be a tablejump entry insn.  This works for\n+   the MIPS port, but may give false negatives for some targets.  */\n+\n+int\n+tablejump_entry_p (insn, label)\n+     rtx insn, label;\n+{\n+  rtx next = next_active_insn (insn);\n+  enum rtx_code code = GET_CODE (PATTERN (next));\n+\n+  if (code != ADDR_DIFF_VEC && code != ADDR_VEC)\n+    return 0;\n+\n+  if (PREV_INSN (next) == XEXP (label, 0))\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Instrument and/or analyze program behavior based on program flow graph.\n    In either case, this function builds a flow graph for the function being\n    compiled.  The flow graph is stored in BB_GRAPH.\n@@ -711,10 +730,22 @@ branch_prob (f, dump_file)\n \t       We have to handle tablejumps and returns specially anyways, so\n \t       we don't check the JUMP_LABEL at all here.  */\n \n+\t    /* ??? This code should be rewritten.  We need a more elegant way\n+\t       to find the LABEL_REF.  We need a more elegant way to\n+\t       differentiate tablejump entries from computed gotos.\n+\t       We should perhaps reuse code from flow to compute the CFG\n+\t       instead of trying to compute it here.\n+\n+\t       We can't use current_function_has_computed_jump, because that\n+\t       is calculated later by flow.  We can't use computed_jump_p,\n+\t       because that returns true for tablejump entry insns for some\n+\t       targets, e.g. HPPA and MIPS.  */\n+\n \t    if (GET_CODE (pattern) == PARALLEL)\n \t      {\n-\t\t/* This assumes that PARALLEL jumps are tablejump entry\n-\t\t   jumps.  */\n+\t\t/* This assumes that PARALLEL jumps with a USE are\n+\t\t   tablejump entry jumps.  The same assumption can be found\n+\t\t   in computed_jump_p.  */\n \t\t/* Make an arc from this jump to the label of the\n \t\t   jump table.  This will instrument the number of\n \t\t   times the switch statement is executed.  */\n@@ -755,7 +786,14 @@ branch_prob (f, dump_file)\n \t\t     && GET_CODE (XEXP (tem, 0)) == MEM\n \t\t     && GET_CODE (XEXP (XEXP (tem, 0), 0)) == PLUS\n \t\t     && GET_CODE (XEXP (XEXP (XEXP (tem, 0), 0), 0)) == PC\n-\t\t     && GET_CODE (XEXP (tem, 1)) == LABEL_REF)\n+\t\t     && GET_CODE (XEXP (tem, 1)) == LABEL_REF\n+\t\t     && tablejump_entry_p (insn, XEXP (tem, 1)))\n+\t      dest = label_to_bb[CODE_LABEL_NUMBER (XEXP (XEXP (tem, 1), 0))];\n+\t    /* Recognize the MIPS table jump entry.  */\n+\t    else if (GET_CODE (tem) == PLUS\n+\t\t     && GET_CODE (XEXP (tem, 0)) == REG\n+\t\t     && GET_CODE (XEXP (tem, 1)) == LABEL_REF\n+\t\t     && tablejump_entry_p (insn, XEXP (tem, 1)))\n \t      dest = label_to_bb[CODE_LABEL_NUMBER (XEXP (XEXP (tem, 1), 0))];\n \t    else\n \t      {"}]}