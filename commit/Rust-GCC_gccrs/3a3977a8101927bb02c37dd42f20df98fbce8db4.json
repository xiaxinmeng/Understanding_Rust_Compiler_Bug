{"sha": "3a3977a8101927bb02c37dd42f20df98fbce8db4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzOTc3YTgxMDE5MjdiYjAyYzM3ZGQ0MmYyMGRmOThmYmNlOGRiNA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-07-03T13:03:45Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-03T13:03:45Z"}, "message": "* intrinsic.texi: Document new intrinsics.\n\nFrom-SVN: r115148", "tree": {"sha": "7b404209cf76af1f8f3ca5bd1c7142935df68eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b404209cf76af1f8f3ca5bd1c7142935df68eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a3977a8101927bb02c37dd42f20df98fbce8db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3977a8101927bb02c37dd42f20df98fbce8db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3977a8101927bb02c37dd42f20df98fbce8db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3977a8101927bb02c37dd42f20df98fbce8db4/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95695ad38f014bf5c3967b32ac81424359286188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95695ad38f014bf5c3967b32ac81424359286188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95695ad38f014bf5c3967b32ac81424359286188"}], "stats": {"total": 1806, "additions": 1510, "deletions": 296}, "files": [{"sha": "b976cba2da9b7e86e77977e2417ea969c31a1f34", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3977a8101927bb02c37dd42f20df98fbce8db4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3977a8101927bb02c37dd42f20df98fbce8db4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3a3977a8101927bb02c37dd42f20df98fbce8db4", "patch": "@@ -1,3 +1,7 @@\n+2006-07-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.texi: Document new intrinsics.\n+\n 2006-07-01  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/19259\n@@ -10,7 +14,7 @@\n \t* check.c: Fix a comment typo.\n \n 2006-06-25  Paul Thomas  <pault@gcc.gnu.org>\n- \n+\n \tPR fortran/25056\n \t* interface.c (compare_actual_formal): Signal an error if the formal\n \targument is a pure procedure and the actual is not pure."}, {"sha": "6bc7759feeabeb1e0e88bbdbb4b07a94774b2d26", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1505, "deletions": 295, "changes": 1800, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a3977a8101927bb02c37dd42f20df98fbce8db4/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a3977a8101927bb02c37dd42f20df98fbce8db4/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=3a3977a8101927bb02c37dd42f20df98fbce8db4", "patch": "@@ -59,7 +59,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{BIT_SIZE}:      BIT_SIZE,  Bit size inquiry function\n * @code{BTEST}:         BTEST,     Bit test function\n * @code{CEILING}:       CEILING,   Integer ceiling function\n-* @code{CHAR}:          CHAR,      Character conversion function\n+* @code{CHAR}:          CHAR,      Integer-to-character conversion function\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n * @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT,  Command line argument count\n * @code{CONJG}:         CONJG,     Complex conjugate function\n@@ -90,20 +90,49 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{FDATE}:         FDATE,     Subroutine (or function) to get the current time as a string\n * @code{FLOAT}:         FLOAT,     Convert integer to default real\n * @code{FLOOR}:         FLOOR,     Integer floor function\n+* @code{FLUSH}:         FLUSH,     Flush I/O unit(s)\n * @code{FNUM}:          FNUM,      File number function\n+* @code{FRACTION}:      FRACTION,  Fractional part of the model representation\n * @code{FREE}:          FREE,      Memory de-allocation subroutine\n+* @code{GETGID}:        GETGID,    Group ID function\n+* @code{GETPID}:        GETPID,    Process ID function\n+* @code{GETUID}:        GETUID,    User ID function\n+* @code{HUGE}:          HUGE,      Largest number of a kind\n+* @code{IACHAR}:        IACHAR,    Code in @acronym{ASCII} collating sequence\n+* @code{ICHAR}:         ICHAR,     Character-to-integer conversion function\n+* @code{IRAND}:         IRAND,     Integer pseudo-random number\n+* @code{KIND}:          KIND,      Kind of an entity\n * @code{LOC}:           LOC,       Returns the address of a variable\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n * @code{MALLOC}:        MALLOC,    Dynamic memory allocation function\n+* @code{MAXEXPONENT}:   MAXEXPONENT, Maximum exponent of a real kind\n+* @code{MINEXPONENT}:   MINEXPONENT, Minimum exponent of a real kind\n+* @code{MOD}:           MOD,       Remainder function\n+* @code{MODULO}:        MODULO,    Modulo function\n+* @code{NEAREST}:       NEAREST,   Nearest representable number\n+* @code{NINT}:          NINT,      Nearest whole number\n+* @code{PRECISION}:     PRECISION, Decimal precision of a real kind\n+* @code{RADIX}:         RADIX,     Base of a data model\n+* @code{RAND}:          RAND,      Real pseudo-random number\n+* @code{RANGE}:         RANGE,     Decimal exponent range of a real kind\n * @code{REAL}:          REAL,      Convert to real type \n+* @code{RRSPACING}:     RRSPACING, Reciprocal of the relative spacing\n+* @code{SCALE}:         SCALE,     Scale a real value\n * @code{SECNDS}:        SECNDS,    Time function\n+* @code{SELECTED_INT_KIND}: SELECTED_INT_KIND,  Choose integer kind\n+* @code{SELECTED_REAL_KIND}: SELECTED_REAL_KIND,  Choose real kind\n+* @code{SET_EXPONENT}:  SET_EXPONENT, Set the exponent of the model\n+* @code{SIGN}:          SIGN,      Sign copying function\n * @code{SIGNAL}:        SIGNAL,    Signal handling subroutine (or function)\n * @code{SIN}:           SIN,       Sine function\n * @code{SINH}:          SINH,      Hyperbolic sine function\n+* @code{SNGL}:          SNGL,      Convert double precision real to default real\n * @code{SQRT}:          SQRT,      Square-root function\n+* @code{SRAND}:         SRAND,     Reinitialize the random number generator\n * @code{TAN}:           TAN,       Tangent function\n * @code{TANH}:          TANH,      Hyperbolic tangent function\n+* @code{TINY}:          TINY,      Smallest positive number of a real kind\n @end menu\n \n @node Introduction\n@@ -678,7 +707,7 @@ end program test_allocated\n \n \n @node ANINT\n-@section @code{ANINT} --- Imaginary part of complex number  \n+@section @code{ANINT} --- Nearest whole number\n @findex @code{ANINT} intrinsic\n @findex @code{DNINT} intrinsic\n @cindex whole number\n@@ -2755,42 +2784,6 @@ end program test_exponent\n @end table\n \n \n-@node FREE\n-@section @code{FREE} --- Frees memory\n-@findex @code{FREE} intrinsic\n-@cindex FREE\n-\n-@table @asis\n-@item @emph{Description}:\n-Frees memory previously allocated by @code{MALLOC()}. The @code{FREE}\n-intrinsic is an extension intended to be used with Cray pointers, and is\n-provided in @command{gfortran} to allow user to compile legacy code. For\n-new code using Fortran 95 pointers, the memory de-allocation intrinsic is\n-@code{DEALLOCATE}.\n-\n-@item @emph{Option}:\n-gnu\n-\n-@item @emph{Class}:\n-subroutine\n-\n-@item @emph{Syntax}:\n-@code{FREE(PTR)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n-@item @var{PTR} @tab The type shall be @code{INTEGER}. It represents the\n-location of the memory that should be de-allocated.\n-@end multitable\n-\n-@item @emph{Return value}:\n-None\n-\n-@item @emph{Example}:\n-See @code{MALLOC} for an example.\n-@end table\n-\n-\n @node FDATE\n @section @code{FDATE} --- Get the current time as a string\n @findex @code{FDATE} intrinsic\n@@ -2919,6 +2912,38 @@ end program test_floor\n \n \n \n+@node FLUSH\n+@section @code{FLUSH} --- Flush I/O unit(s)\n+@findex @code{FLUSH}\n+@cindex flush\n+\n+@table @asis\n+@item @emph{Description}:\n+Flushes Fortran unit(s) currently open for output. Without the optional\n+argument, all units are flushed, otherwise just the unit specified.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL FLUSH(UNIT)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{UNIT} @tab (Optional) The type shall be @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Note}:\n+Beginning with the Fortran 2003 standard, there is a @code{FLUSH}\n+statement that should be prefered over the @code{FLUSH} intrinsic.\n+\n+@end table\n+\n+\n+\n @node FNUM\n @section @code{FNUM} --- File number function\n @findex @code{FNUM} intrinsic\n@@ -2958,57 +2983,192 @@ end program test_fnum\n @end smallexample\n @end table\n \n-@node LOC\n-@section @code{LOC} --- Returns the address of a variable\n-@findex @code{LOC} intrinsic\n-@cindex loc\n+\n+\n+@node FRACTION\n+@section @code{FRACTION} --- Fractional part of the model representation\n+@findex @code{FRACTION} intrinsic\n+@cindex fractional part\n \n @table @asis\n @item @emph{Description}:\n-@code{LOC(X)} returns the address of @var{X} as an integer.\n+@code{FRACTION(X)} returns the fractional part of the model\n+representation of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{Y = FRACTION(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type of the argument shall be a @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type and kind as the argument.\n+The fractional part of the model representation of @code{X} is returned;\n+it is @code{X * RADIX(X)**(-EXPONENT(X))}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_fraction\n+  real :: x\n+  x = 178.1387e-4\n+  print *, fraction(x), x * radix(x)**(-exponent(x))\n+end program test_fraction\n+@end smallexample\n+\n+@end table\n+\n+\n+\n+@node FREE\n+@section @code{FREE} --- Frees memory\n+@findex @code{FREE} intrinsic\n+@cindex FREE\n+\n+@table @asis\n+@item @emph{Description}:\n+Frees memory previously allocated by @code{MALLOC()}. The @code{FREE}\n+intrinsic is an extension intended to be used with Cray pointers, and is\n+provided in @command{gfortran} to allow user to compile legacy code. For\n+new code using Fortran 95 pointers, the memory de-allocation intrinsic is\n+@code{DEALLOCATE}.\n \n @item @emph{Option}:\n gnu\n \n @item @emph{Class}:\n-inquiry function\n+subroutine\n \n @item @emph{Syntax}:\n-@code{I = LOC(X)}\n+@code{FREE(PTR)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab Variable of any type.\n+@item @var{PTR} @tab The type shall be @code{INTEGER}. It represents the\n+location of the memory that should be de-allocated.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{INTEGER(n)}, where @code{n} is the\n-size (in bytes) of a memory address on the target machine.\n+None\n+\n+@item @emph{Example}:\n+See @code{MALLOC} for an example.\n+@end table\n+\n+\n+\n+@node GETGID\n+@section @code{GETGID} --- Group ID function\n+@findex @code{GETGID} intrinsic\n+@cindex GETGID\n+\n+@table @asis\n+@item @emph{Description}:\n+Returns the numerical group ID of the current process.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{I = GETGID()}\n+\n+@item @emph{Return value}:\n+The return value of @code{GETGID} is an @code{INTEGER} of the default\n+kind.\n+\n+\n+@item @emph{Example}:\n+See @code{GETPID} for an example.\n+\n+@end table\n+\n+\n+\n+@node GETPID\n+@section @code{GETPID} --- Process ID function\n+@findex @code{GETPID} intrinsic\n+@cindex GETPID\n+\n+@table @asis\n+@item @emph{Description}:\n+Returns the process numerical identificator of the current process.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{I = GETPID()}\n+\n+@item @emph{Return value}:\n+The return value of @code{GETPID} is an @code{INTEGER} of the default\n+kind.\n+\n \n @item @emph{Example}:\n @smallexample\n-program test_loc\n-  integer :: i\n-  real :: r\n-  i = loc(r)\n-  print *, i\n-end program test_loc\n+program info\n+  print *, \"The current process ID is \", getpid()\n+  print *, \"Your numerical user ID is \", getuid()\n+  print *, \"Your numerical group ID is \", getgid()\n+end program info\n @end smallexample\n+\n @end table\n \n-@node LOG\n-@section @code{LOG} --- Logarithm function\n-@findex @code{LOG} intrinsic\n-@findex @code{ALOG} intrinsic\n-@findex @code{DLOG} intrinsic\n-@findex @code{CLOG} intrinsic\n-@findex @code{ZLOG} intrinsic\n-@findex @code{CDLOG} intrinsic\n-@cindex logarithm\n+\n+\n+@node GETUID\n+@section @code{GETUID} --- User ID function\n+@findex @code{GETUID} intrinsic\n+@cindex GETUID\n \n @table @asis\n @item @emph{Description}:\n-@code{LOG(X)} computes the logarithm of @var{X}.\n+Returns the numerical user ID of the current process.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{GETUID()}\n+\n+@item @emph{Return value}:\n+The return value of @code{GETUID} is an @code{INTEGER} of the default\n+kind.\n+\n+\n+@item @emph{Example}:\n+See @code{GETPID} for an example.\n+\n+@end table\n+\n+\n+\n+@node HUGE\n+@section @code{HUGE} --- Largest number of a kind\n+@findex @code{HUGE} intrinsic\n+@cindex huge\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{HUGE(X)} returns the largest number that is not an infinity in\n+the model of the type of @code{X}.\n \n @item @emph{Option}:\n f95, gnu\n@@ -3017,51 +3177,76 @@ f95, gnu\n elemental function\n \n @item @emph{Syntax}:\n-@code{X = LOG(X)}\n+@code{Y = HUGE(X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab The type shall be @code{REAL(*)} or\n-@code{COMPLEX(*)}.\n+@item @var{X} @tab shall be of type @code{REAL} or @code{INTEGER}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n-The kind type parameter is the same as @var{X}.\n+The return value is of the same type and kind as @var{X}\n \n @item @emph{Example}:\n @smallexample\n-program test_log\n-  real(8) :: x = 1.0_8\n-  complex :: z = (1.0, 2.0)\n-  x = log(x)\n-  z = log(z)\n-end program test_log\n+program test_huge_tiny\n+  print *, huge(0), huge(0.0), huge(0.0d0)\n+  print *, tiny(0.0), tiny(0.0d0)\n+end program test_huge_tiny\n @end smallexample\n+@end table\n \n-@item @emph{Specific names}:\n-@multitable @columnfractions .24 .24 .24 .24\n-@item Name            @tab Argument          @tab Return type       @tab Option\n-@item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n-@item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n-@item @code{CLOG(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n-@item @code{ZLOG(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n-@item @code{CDLOG(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+\n+\n+@node IACHAR\n+@section @code{IACHAR} --- Code in @acronym{ASCII} collating sequence \n+@findex @code{IACHAR} intrinsic\n+@cindex @acronym{ASCII} collating sequence\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{IACHAR(C)} returns the code for the @acronym{ASCII} character\n+in the first character position of @code{C}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = IACHAR(C)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{C} @tab Shall be a scalar @code{CHARACTER}, with @code{INTENT(IN)}\n @end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_iachar\n+  integer i\n+  i = iachar(' ')\n+end program test_iachar\n+@end smallexample\n @end table\n \n \n \n-@node LOG10\n-@section @code{LOG10} --- Base 10 logarithm function\n-@findex @code{LOG10} intrinsic\n-@findex @code{ALOG10} intrinsic\n-@findex @code{DLOG10} intrinsic\n-@cindex logarithm\n+@node ICHAR\n+@section @code{ICHAR} --- Character-to-integer conversion function\n+@findex @code{ICHAR} intrinsic\n \n @table @asis\n @item @emph{Description}:\n-@code{LOG10(X)} computes the base 10 logarithm of @var{X}.\n+@code{ICHAR(C)} returns the code for the character in the first character\n+position of @code{C} in the system's native character set.\n+The correspondence between character and their codes is not necessarily\n+the same between GNU Fortran implementations.\n \n @item @emph{Option}:\n f95, gnu\n@@ -3070,153 +3255,1181 @@ f95, gnu\n elemental function\n \n @item @emph{Syntax}:\n-@code{X = LOG10(X)}\n+@code{I = ICHAR(C)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab The type shall be @code{REAL(*)} or\n-@code{COMPLEX(*)}.\n+@item @var{C} @tab Shall be a scalar @code{CHARACTER}, with @code{INTENT(IN)}\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_ichar\n+  integer i\n+  i = ichar(' ')\n+end program test_ichar\n+@end smallexample\n+\n+@item @emph{Note}:\n+No intrinsic exists to convert a printable character string to a numerical\n+value. For example, there is no intrinsic that, given the @code{CHARACTER}\n+value 154, returns an @code{INTEGER} or @code{REAL} value with the\n+value 154.\n+\n+Instead, you can use internal-file I/O to do this kind of conversion. For\n+example:\n+@smallexample\n+program read_val\n+  integer value\n+  character(len=10) string\n+\n+  string = '154'\n+  read (string,'(I10)') value\n+  print *, value\n+end program read_val\n+@end smallexample\n+@end table\n+\n+\n+\n+@node IRAND\n+@section @code{IRAND} --- Integer pseudo-random number\n+@findex @code{IRAND} intrinsic\n+@cindex random number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{IRAND(FLAG)} returns a pseudo-random number from a uniform\n+distribution between 0 and a system-dependent limit (which is in most\n+cases 2147483647). If @var{FLAG} is 0, the next number\n+in the current sequence is returned; if @var{FLAG} is 1, the generator\n+is restarted by @code{CALL SRAND(0)}; if @var{FLAG} has any other value,\n+it is used as a new seed with @code{SRAND}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = IRAND(FLAG)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{FLAG} @tab shall be a scalar @code{INTEGER} of kind 4.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of @code{INTEGER(kind=4)} type.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_irand\n+  integer,parameter :: seed = 86456\n+  \n+  call srand(seed)\n+  print *, irand(), irand(), irand(), irand()\n+  print *, irand(seed), irand(), irand(), irand()\n+end program test_irand\n+@end smallexample\n+\n+@end table\n+\n+\n+\n+@node KIND\n+@section @code{KIND} --- Kind of an entity\n+@findex @code{KIND} intrinsic\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{KIND(X)} returns the kind value of the entity @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+inquiry function\n+\n+@item @emph{Syntax}:\n+@code{K = KIND(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab Shall be of type @code{LOGICAL}, @code{INTEGER},\n+@code{REAL}, @code{COMPLEX} or @code{CHARACTER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a scalar of type @code{INTEGER} and of the default\n+integer kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_kind\n+  integer,parameter :: kc = kind(' ')\n+  integer,parameter :: kl = kind(.true.)\n+\n+  print *, \"The default character kind is \", kc\n+  print *, \"The default logical kind is \", kl\n+end program test_kind\n+@end smallexample\n+\n+@end table\n+\n+\n+\n+@node LOC\n+@section @code{LOC} --- Returns the address of a variable\n+@findex @code{LOC} intrinsic\n+@cindex loc\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOC(X)} returns the address of @var{X} as an integer.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+inquiry function\n+\n+@item @emph{Syntax}:\n+@code{I = LOC(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab Variable of any type.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER(n)}, where @code{n} is the\n+size (in bytes) of a memory address on the target machine.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_loc\n+  integer :: i\n+  real :: r\n+  i = loc(r)\n+  print *, i\n+end program test_loc\n+@end smallexample\n+@end table\n+\n+@node LOG\n+@section @code{LOG} --- Logarithm function\n+@findex @code{LOG} intrinsic\n+@findex @code{ALOG} intrinsic\n+@findex @code{DLOG} intrinsic\n+@findex @code{CLOG} intrinsic\n+@findex @code{ZLOG} intrinsic\n+@findex @code{CDLOG} intrinsic\n+@cindex logarithm\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOG(X)} computes the logarithm of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LOG(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n+The kind type parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log\n+  real(8) :: x = 1.0_8\n+  complex :: z = (1.0, 2.0)\n+  x = log(x)\n+  z = log(z)\n+end program test_log\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n+@item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{CLOG(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n+@item @code{ZLOG(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{CDLOG(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node LOG10\n+@section @code{LOG10} --- Base 10 logarithm function\n+@findex @code{LOG10} intrinsic\n+@findex @code{ALOG10} intrinsic\n+@findex @code{DLOG10} intrinsic\n+@cindex logarithm\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOG10(X)} computes the base 10 logarithm of @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LOG10(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be @code{REAL(*)} or\n+@code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n+The kind type parameter is the same as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log10\n+  real(8) :: x = 10.0_8\n+  x = log10(x)\n+end program test_log10\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n+@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+@node MALLOC\n+@section @code{MALLOC} --- Allocate dynamic memory\n+@findex @code{MALLOC} intrinsic\n+@cindex MALLOC\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MALLOC(SIZE)} allocates @var{SIZE} bytes of dynamic memory and\n+returns the address of the allocated memory. The @code{MALLOC} intrinsic\n+is an extension intended to be used with Cray pointers, and is provided\n+in @command{gfortran} to allow user to compile legacy code. For new code\n+using Fortran 95 pointers, the memory allocation intrinsic is\n+@code{ALLOCATE}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{PTR = MALLOC(SIZE)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{SIZE} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER(K)}, with @var{K} such that\n+variables of type @code{INTEGER(K)} have the same size as\n+C pointers (@code{sizeof(void *)}).\n+\n+@item @emph{Example}:\n+The following example demonstrates the use of @code{MALLOC} and\n+@code{FREE} with Cray pointers. This example is intended to run on\n+32-bit systems, where the default integer kind is suitable to store\n+pointers; on 64-bit systems, ptr_x would need to be declared as\n+@code{integer(kind=8)}.\n+\n+@smallexample\n+program test_malloc\n+  integer i\n+  integer ptr_x\n+  real*8 x(*), z\n+  pointer(ptr_x,x)\n+\n+  ptr_x = malloc(20*8)\n+  do i = 1, 20\n+    x(i) = sqrt(1.0d0 / i)\n+  end do\n+  z = 0\n+  do i = 1, 20\n+    z = z + x(i)\n+    print *, z\n+  end do\n+  call free(ptr_x)\n+end program test_malloc\n+@end smallexample\n+@end table\n+\n+\n+\n+@node MAXEXPONENT\n+@section @code{MAXEXPONENT} --- Maximum exponent of a real kind\n+@findex @code{MAXEXPONENT} intrinsic\n+@cindex MAXEXPONENT\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MAXEXPONENT(X)} returns the maximum exponent in the model of the\n+type of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = MAXEXPONENT(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program exponents\n+  real(kind=4) :: x\n+  real(kind=8) :: y\n+\n+  print *, minexponent(x), maxexponent(x)\n+  print *, minexponent(y), maxexponent(y)\n+end program exponents\n+@end smallexample\n+@end table\n+\n+\n+\n+@node MINEXPONENT\n+@section @code{MINEXPONENT} --- Minimum exponent of a real kind\n+@findex @code{MINEXPONENT} intrinsic\n+@cindex MINEXPONENT\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MINEXPONENT(X)} returns the minimum exponent in the model of the\n+type of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = MINEXPONENT(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+See @code{MAXEXPONENT} for an example.\n+@end table\n+\n+\n+\n+@node MOD\n+@section @code{MOD} --- Remainder function\n+@findex @code{MOD} intrinsic\n+@findex @code{AMOD} intrinsic\n+@findex @code{DMOD} intrinsic\n+@cindex remainder\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MOD(A,P)} computes the remainder of the division of A by P. It is\n+calculated as @code{A - (INT(A/P) * P)}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = MOD(A,P)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n+@item @var{P} @tab shall be a scalar of the same type as @var{A} and not\n+equal to zero\n+@end multitable\n+\n+@item @emph{Return value}:\n+The kind of the return value is the result of cross-promoting\n+the kinds of the arguments.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_mod\n+  print *, mod(17,3)\n+  print *, mod(17.5,5.5)\n+  print *, mod(17.5d0,5.5)\n+  print *, mod(17.5,5.5d0)\n+\n+  print *, mod(-17,3)\n+  print *, mod(-17.5,5.5)\n+  print *, mod(-17.5d0,5.5)\n+  print *, mod(-17.5,5.5d0)\n+\n+  print *, mod(17,-3)\n+  print *, mod(17.5,-5.5)\n+  print *, mod(17.5d0,-5.5)\n+  print *, mod(17.5,-5.5d0)\n+end program test_mod\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name             @tab Arguments      @tab Return type    @tab Option\n+@item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab f95, gnu\n+@item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node MODULO\n+@section @code{MODULO} --- Modulo function\n+@findex @code{MODULO} intrinsic\n+@cindex modulo\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MODULO(A,P)} computes the @var{A} modulo @var{P}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = MODULO(A,P)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n+@item @var{P} @tab shall be a scalar of the same type and kind as @var{A}\n+@end multitable\n+\n+@item @emph{Return value}:\n+The type and kind of the result are those of the arguments.\n+@table @asis\n+@item If @var{A} and @var{P} are of type @code{INTEGER}:\n+@code{MODULO(A,P)} has the value @var{R} such that @code{A=Q*P+R}, where\n+@var{Q} is an integer and @var{R} is between 0 (inclusive) and @var{P}\n+(exclusive).\n+@item If @var{A} and @var{P} are of type @code{REAL}:\n+@code{MODULO(A,P)} has the value of @code{A - FLOOR (A / P) * P}.\n+@end table\n+In all cases, if @var{P} is zero the result is processor-dependent.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_mod\n+  print *, modulo(17,3)\n+  print *, modulo(17.5,5.5)\n+\n+  print *, modulo(-17,3)\n+  print *, modulo(-17.5,5.5)\n+\n+  print *, modulo(17,-3)\n+  print *, modulo(17.5,-5.5)\n+end program test_mod\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name             @tab Arguments      @tab Return type    @tab Option\n+@item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab f95, gnu\n+@item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node NEAREST\n+@section @code{NEAREST} --- Nearest representable number\n+@findex @code{NEAREST} intrinsic\n+@cindex processor-representable number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{NEAREST(X, S)} returns the processor-representable number nearest\n+to @code{X} in the direction indicated by the sign of @code{S}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{Y = NEAREST(X, S)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@item @var{S} @tab (Optional) shall be of type @code{REAL} and\n+not equal to zero.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type as @code{X}. If @code{S} is\n+positive, @code{NEAREST} returns the processor-representable number\n+greater than @code{X} and nearest to it. If @code{S} is negative,\n+@code{NEAREST} returns the processor-representable number smaller than\n+@code{X} and nearest to it.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_nearest\n+  real :: x, y\n+  x = nearest(42.0, 1.0)\n+  y = nearest(42.0, -1.0)\n+  write (*,\"(3(G20.15))\") x, y, x - y\n+end program test_nearest\n+@end smallexample\n+@end table\n+\n+\n+\n+@node NINT\n+@section @code{NINT} --- Nearest whole number\n+@findex @code{NINT} intrinsic\n+@findex @code{IDNINT} intrinsic\n+@cindex whole number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{NINT(X)} rounds its argument to the nearest whole number.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = NINT(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X}    @tab The type of the argument shall be @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+Returns @var{A} with the fractional portion of its magnitude eliminated by\n+rounding to the nearest whole number and with its sign preserved,\n+converted to an @code{INTEGER} of the default kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_nint\n+  real(4) x4\n+  real(8) x8\n+  x4 = 1.234E0_4\n+  x8 = 4.321_8\n+  print *, nint(x4), idnint(x8)\n+end program test_nint\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .33 .33 .33\n+@item Name             @tab Argument         @tab Option\n+@item @code{IDNINT(X)} @tab @code{REAL(8)} @tab f95, gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node PRECISION\n+@section @code{PRECISION} --- Decimal precision of a real kind\n+@findex @code{PRECISION} intrinsic\n+@cindex PRECISION\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{PRECISION(X)} returns the decimal precision in the model of the\n+type of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = PRECISION(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL} or @code{COMPLEX}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program prec_and_range\n+  real(kind=4) :: x(2)\n+  complex(kind=8) :: y\n+\n+  print *, precision(x), range(x)\n+  print *, precision(y), range(y)\n+end program prec_and_range\n+@end smallexample\n+@end table\n+\n+\n+\n+@node RADIX\n+@section @code{RADIX} --- Base of a model number\n+@findex @code{RADIX} intrinsic\n+@cindex base\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{RADIX(X)} returns the base of the model representing the entity @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+inquiry function\n+\n+@item @emph{Syntax}:\n+@code{R = RADIX(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab Shall be of type @code{INTEGER} or @code{REAL}\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a scalar of type @code{INTEGER} and of the default\n+integer kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_radix\n+  print *, \"The radix for the default integer kind is\", radix(0)\n+  print *, \"The radix for the default real kind is\", radix(0.0)\n+end program test_radix\n+@end smallexample\n+\n+@end table\n+\n+\n+\n+@node RAND\n+@section @code{RAND} --- Real pseudo-random number\n+@findex @code{RAND} intrinsic\n+@findex @code{RAN} intrinsic\n+@cindex random number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{RAND(FLAG)} returns a pseudo-random number from a uniform\n+distribution between 0 and 1. If @var{FLAG} is 0, the next number\n+in the current sequence is returned; if @var{FLAG} is 1, the generator\n+is restarted by @code{CALL SRAND(0)}; if @var{FLAG} has any other value,\n+it is used as a new seed with @code{SRAND}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = RAND(FLAG)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{FLAG} @tab shall be a scalar @code{INTEGER} of kind 4.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of @code{REAL} type and the default kind.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_rand\n+  integer,parameter :: seed = 86456\n+  \n+  call srand(seed)\n+  print *, rand(), rand(), rand(), rand()\n+  print *, rand(seed), rand(), rand(), rand()\n+end program test_rand\n+@end smallexample\n+\n+@item @emph{Note}:\n+For compatibility with HP FORTRAN 77/iX, the @code{RAN} intrinsic is\n+provided as an alias for @code{RAND}.\n+\n+@end table\n+\n+\n+\n+@node RANGE\n+@section @code{RANGE} --- Decimal exponent range of a real kind\n+@findex @code{RANGE} intrinsic\n+@cindex RANGE\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{RANGE(X)} returns the decimal exponent range in the model of the\n+type of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{I = RANGE(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL} or @code{COMPLEX}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER} and of the default integer\n+kind.\n+\n+@item @emph{Example}:\n+See @code{PRECISION} for an example.\n+@end table\n+\n+\n+\n+@node REAL\n+@section @code{REAL} --- Convert to real type \n+@findex @code{REAL} intrinsic\n+@findex @code{REALPART} intrinsic\n+@cindex true values\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{REAL(X [, KIND])} converts its argument @var{X} to a real type.  The\n+@code{REALPART(X)} function is provided for compatibility with @command{g77},\n+and its use is strongly discouraged.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .30 .80\n+@item @code{X = REAL(X)}\n+@item @code{X = REAL(X, KIND)}\n+@item @code{X = REALPART(Z)}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or  \n+@code{COMPLEX(*)}.\n+@item @var{KIND}  @tab (Optional) @var{KIND} shall be a scalar integer.\n+@end multitable\n+\n+@item @emph{Return value}:\n+These functions return the a @code{REAL(*)} variable or array under\n+the following rules: \n+\n+@table @asis\n+@item (A)\n+@code{REAL(X)} is converted to a default real type if @var{X} is an \n+integer or real variable.\n+@item (B)\n+@code{REAL(X)} is converted to a real type with the kind type parameter\n+of @var{X} if @var{X} is a complex variable.\n+@item (C)\n+@code{REAL(X, KIND)} is converted to a real type with kind type\n+parameter @var{KIND} if @var{X} is a complex, integer, or real\n+variable.\n+@end table\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_real\n+  complex :: x = (1.0, 2.0)\n+  print *, real(x), real(x,8), realpart(x)\n+end program test_real\n+@end smallexample\n+@end table\n+\n+\n+\n+@node RRSPACING\n+@section @code{RRSPACING} --- Reciprocal of the relative spacing\n+@findex @code{RRSPACING} intrinsic\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{RRSPACING(X)} returns the  reciprocal of the relative spacing of\n+model numbers near @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{Y = RRSPACING(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type and kind as @var{X}.\n+The value returned is equal to\n+@code{ABS(FRACTION(X)) * FLOAT(RADIX(X))**DIGITS(X)}.\n+\n+@end table\n+\n+\n+\n+@node SCALE\n+@section @code{SCALE} --- Scale a real value\n+@findex @code{SCALE} intrinsic\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SCALE(X,I)} returns @code{X * RADIX(X)**I}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{Y = SCALE(X, I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type of the argument shall be a @code{REAL}.\n+@item @var{I} @tab The type of the argument shall be a @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type and kind as @var{X}.\n+Its value is @code{X * RADIX(X)**I}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_scale\n+  real :: x = 178.1387e-4\n+  integer :: i = 5\n+  print *, scale(x,i), x*radix(x)**i\n+end program test_scale\n+@end smallexample\n+\n+@end table\n+\n+\n+\n+@node SELECTED_INT_KIND\n+@section @code{SELECTED_INT_KIND} --- Choose integer kind\n+@findex @code{SELECTED_INT_KIND} intrinsic\n+@cindex integer kind\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SELECTED_INT_KIND(I)} return the kind value of the smallest integer\n+type that can represent all values ranging from @math{-10^I} (exclusive)\n+to @math{10^I} (exclusive). If there is no integer kind that accomodates\n+this range, @code{SELECTED_INT_KIND} returns @math{-1}.\n+\n+@item @emph{Option}:\n+f95\n+\n+@item @emph{Class}:\n+transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .30 .80\n+@item @code{J = SELECTED_INT_KIND(I)}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{I} @tab shall be a scalar and of type @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program large_integers\n+  integer,parameter :: k5 = selected_int_kind(5)\n+  integer,parameter :: k15 = selected_int_kind(15)\n+  integer(kind=k5) :: i5\n+  integer(kind=k15) :: i15\n+\n+  print *, huge(i5), huge(i15)\n+\n+  ! The following inequalities are always true\n+  print *, huge(i5) >= 10_k5**5-1\n+  print *, huge(i15) >= 10_k15**15-1\n+end program large_integers\n+@end smallexample\n+@end table\n+\n+\n+\n+@node SELECTED_REAL_KIND\n+@section @code{SELECTED_REAL_KIND} --- Choose real kind\n+@findex @code{SELECTED_REAL_KIND} intrinsic\n+@cindex real kind\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SELECTED_REAL_KIND(P,R)} return the kind value of a real data type\n+with decimal precision greater of at least @code{P} digits and exponent\n+range greater at least @code{R}. \n+\n+@item @emph{Option}:\n+f95\n+\n+@item @emph{Class}:\n+transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .30 .80\n+@item @code{I = SELECTED_REAL_KIND(P,R)}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{P} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n+@item @var{R} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n+@end multitable\n+At least one argument shall be present.\n+\n+@item @emph{Return value}:\n+\n+@code{SELECTED_REAL_KIND} returns the value of the kind type parameter of\n+a real data type with decimal precision of at least @code{P} digits and a\n+decimal exponent range of at least @code{R}. If more than one real data\n+type meet the criteria, the kind of the data type with the smallest\n+decimal precision is returned. If no real data type matches the criteria,\n+the result is\n+@table @asis\n+@item -1 if the processor does not support a real data type with a\n+precision greater than or equal to @code{P}\n+@item -2 if the processor does not support a real type with an exponent\n+range greater than or equal to @code{R}\n+@item -3 if neither is supported.\n+@end table\n+\n+@item @emph{Example}:\n+@smallexample\n+program real_kinds\n+  integer,parameter :: p6 = selected_real_kind(6)\n+  integer,parameter :: p10r100 = selected_real_kind(10,100)\n+  integer,parameter :: r400 = selected_real_kind(r=400)\n+  real(kind=p6) :: x\n+  real(kind=p10r100) :: y\n+  real(kind=r400) :: z\n+\n+  print *, precision(x), range(x)\n+  print *, precision(y), range(y)\n+  print *, precision(z), range(z)\n+end program real_kinds\n+@end smallexample\n+@end table\n+\n+\n+\n+@node SECNDS\n+@section @code{SECNDS} --- Time subroutine\n+@findex @code{SECNDS} intrinsic\n+@cindex SECNDS\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SECNDS(X)} gets the time in seconds from the real-time system clock.\n+@var{X} is a reference time, also in seconds. If this is zero, the time in\n+seconds from midnight is returned. This function is non-standard and its\n+use is discouraged.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{T = SECNDS (X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item Name        @tab Type\n+@item @var{T}     @tab REAL(4)\n+@item @var{X}     @tab REAL(4)\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL(*)} or @code{COMPLEX(*)}.\n-The kind type parameter is the same as @var{X}.\n+None\n \n @item @emph{Example}:\n @smallexample\n-program test_log10\n-  real(8) :: x = 10.0_8\n-  x = log10(x)\n-end program test_log10\n+program test_secnds\n+    real(4) :: t1, t2\n+    print *, secnds (0.0)   ! seconds since midnight\n+    t1 = secnds (0.0)       ! reference time\n+    do i = 1, 10000000      ! do something\n+    end do\n+    t2 = secnds (t1)        ! elapsed time\n+    print *, \"Something took \", t2, \" seconds.\"\n+end program test_secnds\n @end smallexample\n-\n-@item @emph{Specific names}:\n-@multitable @columnfractions .24 .24 .24 .24\n-@item Name            @tab Argument          @tab Return type       @tab Option\n-@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n-@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n-@end multitable\n @end table\n \n \n-@node MALLOC\n-@section @code{MALLOC} --- Allocate dynamic memory\n-@findex @code{MALLOC} intrinsic\n-@cindex MALLOC\n+\n+@node SET_EXPONENT\n+@section @code{SET_EXPONENT} --- Set the exponent of the model\n+@findex @code{SET_EXPONENT} intrinsic\n+@cindex exponent\n \n @table @asis\n @item @emph{Description}:\n-@code{MALLOC(SIZE)} allocates @var{SIZE} bytes of dynamic memory and\n-returns the address of the allocated memory. The @code{MALLOC} intrinsic\n-is an extension intended to be used with Cray pointers, and is provided\n-in @command{gfortran} to allow user to compile legacy code. For new code\n-using Fortran 95 pointers, the memory allocation intrinsic is\n-@code{ALLOCATE}.\n+@code{SET_EXPONENT(X, I)} returns the real number whose fractional part\n+is that that of @var{X} and whose exponent part if @var{I}.\n \n @item @emph{Option}:\n-gnu\n+f95, gnu\n \n @item @emph{Class}:\n-non-elemental function\n+elemental function\n \n @item @emph{Syntax}:\n-@code{PTR = MALLOC(SIZE)}\n+@code{Y = SET_EXPONENT(X, I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{SIZE} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@item @var{I} @tab shall be of type @code{INTEGER}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{INTEGER(K)}, with @var{K} such that\n-variables of type @code{INTEGER(K)} have the same size as\n-C pointers (@code{sizeof(void *)}).\n+The return value is of the same type and kind as @var{X}.\n+The real number whose fractional part\n+is that that of @var{X} and whose exponent part if @var{I} is returned;\n+it is @code{FRACTION(X) * RADIX(X)**I}.\n \n @item @emph{Example}:\n-The following example demonstrates the use of @code{MALLOC} and\n-@code{FREE} with Cray pointers. This example is intended to run on\n-32-bit systems, where the default integer kind is suitable to store\n-pointers; on 64-bit systems, ptr_x would need to be declared as\n-@code{integer(kind=8)}.\n-\n @smallexample\n-program test_malloc\n-  integer i\n-  integer ptr_x\n-  real*8 x(*), z\n-  pointer(ptr_x,x)\n-\n-  ptr_x = malloc(20*8)\n-  do i = 1, 20\n-    x(i) = sqrt(1.0d0 / i)\n-  end do\n-  z = 0\n-  do i = 1, 20\n-    z = z + x(i)\n-    print *, z\n-  end do\n-  call free(ptr_x)\n-end program test_malloc\n+program test_setexp\n+  real :: x = 178.1387e-4\n+  integer :: i = 17\n+  print *, set_exponent(x), fraction(x) * radix(x)**i\n+end program test_setexp\n @end smallexample\n+\n @end table\n \n \n-@node REAL\n-@section @code{REAL} --- Convert to real type \n-@findex @code{REAL} intrinsic\n-@findex @code{REALPART} intrinsic\n-@cindex true values\n+\n+@node SIGN\n+@section @code{SIGN} --- Sign copying function\n+@findex @code{SIGN} intrinsic\n+@findex @code{ISIGN} intrinsic\n+@findex @code{DSIGN} intrinsic\n+@cindex sign copying\n \n @table @asis\n @item @emph{Description}:\n-@code{REAL(X [, KIND])} converts its argument @var{X} to a real type.  The\n-@code{REALPART(X)} function is provided for compatibility with @command{g77},\n-and its use is strongly discouraged.\n+@code{SIGN(A,B)} returns the value of @var{A} with the sign of @var{B}.\n \n @item @emph{Option}:\n f95, gnu\n \n @item @emph{Class}:\n-transformational function\n+elemental function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n-@item @code{X = REAL(X)}\n-@item @code{X = REAL(X, KIND)}\n-@item @code{X = REALPART(Z)}\n-@end multitable\n+@code{X = SIGN(A,B)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or  \n-@code{COMPLEX(*)}.\n-@item @var{KIND}  @tab (Optional) @var{KIND} shall be a scalar integer.\n+@item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n+@item @var{B} @tab shall be a scalar of the same type and kind as @var{A}\n @end multitable\n \n @item @emph{Return value}:\n-These functions return the a @code{REAL(*)} variable or array under\n-the following rules: \n-\n-@table @asis\n-@item (A)\n-@code{REAL(X)} is converted to a default real type if @var{X} is an \n-integer or real variable.\n-@item (B)\n-@code{REAL(X)} is converted to a real type with the kind type parameter\n-of @var{X} if @var{X} is a complex variable.\n-@item (C)\n-@code{REAL(X, KIND)} is converted to a real type with kind type\n-parameter @var{KIND} if @var{X} is a complex, integer, or real\n-variable.\n-@end table\n+The kind of the return value is that of @var{A} and @var{B}.\n+If @math{B\\ge 0} then the result is @code{ABS(A)}, else\n+it is @code{-ABS(A)}.\n \n @item @emph{Example}:\n @smallexample\n-program test_real\n-  complex :: x = (1.0, 2.0)\n-  print *, real(x), real(x,8), realpart(x)\n-  end program test_real\n+program test_sign\n+  print *, sign(-12,1)\n+  print *, sign(-12,0)\n+  print *, sign(-12,-1)\n+\n+  print *, sign(-12.,1.)\n+  print *, sign(-12.,0.)\n+  print *, sign(-12.,-1.)\n+end program test_sign\n @end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name              @tab Arguments      @tab Return type    @tab Option\n+@item @code{ISIGN(A,P)} @tab @code{INTEGER(4)} @tab @code{INTEGER(4)} @tab f95, gnu\n+@item @code{DSIGN(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab f95, gnu\n+@end multitable\n @end table\n \n \n@@ -3280,53 +4493,6 @@ end program test_signal\n \n \n \n-@node SECNDS\n-@section @code{SECNDS} --- Time subroutine\n-@findex @code{SECNDS} intrinsic\n-@cindex SECNDS\n-\n-@table @asis\n-@item @emph{Description}:\n-@code{SECNDS(X)} gets the time in seconds from the real-time system clock.\n-@var{X} is a reference time, also in seconds. If this is zero, the time in\n-seconds from midnight is returned. This function is non-standard and its\n-use is discouraged.\n-\n-@item @emph{Option}:\n-gnu\n-\n-@item @emph{Class}:\n-function\n-\n-@item @emph{Syntax}:\n-@code{T = SECNDS (X)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n-@item Name        @tab Type\n-@item @var{T}     @tab REAL(4)\n-@item @var{X}     @tab REAL(4)\n-@end multitable\n-\n-@item @emph{Return value}:\n-None\n-\n-@item @emph{Example}:\n-@smallexample\n-program test_secnds\n-    real(4) :: t1, t2\n-    print *, secnds (0.0)   ! seconds since midnight\n-    t1 = secnds (0.0)       ! reference time\n-    do i = 1, 10000000      ! do something\n-    end do\n-    t2 = secnds (t1)        ! elapsed time\n-    print *, \"Something took \", t2, \" seconds.\"\n-end program test_secnds\n-@end smallexample\n-@end table\n-\n-\n-\n @node SIN\n @section @code{SIN} --- Sine function \n @findex @code{SIN} intrinsic\n@@ -3421,6 +4587,38 @@ end program test_sinh\n \n \n \n+@node SNGL\n+@section @code{SNGL} --- Convert double precision real to default real\n+@findex @code{SNGL} intrinsic\n+@cindex sngl\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SNGL(A)} converts the double precision real @var{A}\n+to a default real value. This is an archaic form of @code{REAL}\n+that is specific to one type for @var{A}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+function\n+\n+@item @emph{Syntax}:\n+@code{X = SNGL(A)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{A} @tab The type shall be a double precision @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type default @code{REAL}.\n+\n+@end table\n+\n+\n+\n @node SQRT\n @section @code{SQRT} --- Square-root function\n @findex @code{SQRT} intrinsic\n@@ -3475,6 +4673,50 @@ end program test_sqrt\n \n \n \n+@node SRAND\n+@section @code{SRAND} --- Reinitialize the random number generator\n+@findex @code{SRAND} intrinsic\n+@cindex random number\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SRAND} reinitializes the pseudo-random number generator\n+called by @code{RAND} and @code{IRAND}. The new seed used by the\n+generator is specified by the required argument @var{SEED}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL SRAND(SEED)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{SEED} @tab shall be a scalar @code{INTEGER(kind=4)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+Does not return.\n+\n+@item @emph{Example}:\n+See @code{RAND} and @code{IRAND} for examples.\n+\n+@item @emph{Notes}:\n+The Fortran 2003 standard specifies the intrinsic @code{RANDOM_SEED} to\n+initialize the pseudo-random numbers generator and @code{RANDOM_NUMBER}\n+to generate pseudo-random numbers. Please note that in\n+@command{gfortran}, these two sets of intrinsics (@code{RAND},\n+@code{IRAND} and @code{SRAND} on the one hand, @code{RANDOM_NUMBER} and\n+@code{RANDOM_SEED} on the other hand) access two independent\n+pseudo-random numbers generators.\n+\n+@end table\n+\n+\n+\n @node TAN\n @section @code{TAN} --- Tangent function\n @findex @code{TAN} intrinsic\n@@ -3565,10 +4807,39 @@ end program test_tanh\n \n \n \n-@comment sub   flush\n-@comment \n-@comment gen   fraction\n-@comment \n+@node TINY\n+@section @code{TINY} --- Smallest positive number of a real kind\n+@findex @code{TINY} intrinsic\n+@cindex tiny\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{TINY(X)} returns the smallest positive (non zero) number\n+in the model of the type of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{Y = TINY(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be of type @code{REAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type and kind as @var{X}\n+\n+@item @emph{Example}:\n+See @code{HUGE} for an example.\n+@end table\n+\n+\n+\n @comment gen   fstat\n @comment sub   fstat\n @comment \n@@ -3579,22 +4850,12 @@ end program test_tanh\n @comment \n @comment sub   getenv\n @comment \n-@comment gen   getgid\n-@comment \n-@comment gen   getpid\n-@comment \n-@comment gen   getuid\n-@comment \n @comment sub   get_command\n @comment \n @comment sub   get_command_argument\n @comment \n @comment sub   get_environment_variable\n @comment \n-@comment gen   huge\n-@comment \n-@comment gen   iachar\n-@comment \n @comment gen   iand\n @comment \n @comment gen   iargc\n@@ -3605,8 +4866,6 @@ end program test_tanh\n @comment \n @comment gen   ibset\n @comment \n-@comment gen   ichar\n-@comment \n @comment gen   ieor\n @comment \n @comment gen   index\n@@ -3617,14 +4876,10 @@ end program test_tanh\n @comment \n @comment gen   ior\n @comment \n-@comment gen   irand\n-@comment \n @comment gen   ishft\n @comment \n @comment gen   ishftc\n @comment \n-@comment gen   kind\n-@comment \n @comment gen   lbound\n @comment \n @comment gen   len\n@@ -3650,8 +4905,6 @@ end program test_tanh\n @comment       max1\n @comment       dmax1\n @comment \n-@comment gen   maxexponent\n-@comment \n @comment gen   maxloc\n @comment \n @comment gen   maxval\n@@ -3665,85 +4918,45 @@ end program test_tanh\n @comment       min1\n @comment       dmin1\n @comment \n-@comment gen   minexponent\n-@comment \n @comment gen   minloc\n @comment \n @comment gen   minval\n @comment \n-@comment gen   mod\n-@comment       amod\n-@comment       dmod\n-@comment \n-@comment gen   modulo\n-@comment \n @comment sub   mvbits\n @comment \n-@comment gen   nearest\n-@comment \n-@comment gen   nint\n-@comment       idnint\n-@comment \n @comment gen   not\n @comment \n @comment gen   null\n @comment \n @comment gen   pack\n @comment \n-@comment gen   precision\n+@comment gen   perror\n @comment \n @comment gen   present\n @comment \n @comment gen   product\n @comment \n-@comment gen   radix\n-@comment \n-@comment gen   rand\n-@comment       ran \n-@comment \n @comment sub   random_number\n @comment \n @comment sub   random_seed\n @comment \n-@comment gen   range\n-@comment \n-@comment gen   real\n-@comment       float\n-@comment       sngl\n-@comment \n @comment gen   repeat\n @comment \n @comment gen   reshape\n @comment \n-@comment gen   rrspacing\n-@comment \n-@comment gen   scale\n-@comment \n @comment gen   scan\n @comment \n @comment gen   second\n @comment sub   second\n @comment \n-@comment gen   selected_int_kind\n-@comment \n-@comment gen   selected_real_kind\n-@comment \n-@comment gen   set_exponent\n-@comment \n @comment gen   shape\n @comment \n-@comment gen   sign\n-@comment       isign\n-@comment       dsign\n-@comment \n @comment gen   size\n @comment \n @comment gen   spacing\n @comment \n @comment gen   spread\n @comment \n-@comment sub   srand\n-@comment \n @comment gen   stat\n @comment sub   stat\n @comment \n@@ -3754,8 +4967,6 @@ end program test_tanh\n @comment \n @comment sub system_clock\n @comment \n-@comment gen   tiny\n-@comment \n @comment gen   transfer\n @comment \n @comment gen   transpose\n@@ -3773,4 +4984,3 @@ end program test_tanh\n @comment gen   unpack\n @comment \n @comment gen   verify\n-"}]}