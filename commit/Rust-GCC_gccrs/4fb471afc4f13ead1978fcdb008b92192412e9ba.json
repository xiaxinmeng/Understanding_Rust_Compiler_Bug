{"sha": "4fb471afc4f13ead1978fcdb008b92192412e9ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiNDcxYWZjNGYxM2VhZDE5NzhmY2RiMDA4YjkyMTkyNDEyZTliYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T14:03:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T14:13:08Z"}, "message": "libstdc++: Improve doxygen documentation for std::unique_ptr\n\nAdd more detailed documentation for unique_ptr and related components.\n\nThe new alias templates for the _MakeUniq SFINAE helper make the\ngenerated docs look better too.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (default_delete): Add @since tag.\n\t(unique_ptr, unique_ptr<T[]>): Likewise. Improve @brief.\n\t(make_unique, make_unique_for_overwrite): Likewise. Add @tparam,\n\t@param, and @returns.\n\t(_MakeUniq): Move to __detail namespace. Add alias template\n\thelpers.", "tree": {"sha": "a590c84bc4cded3eaaaeecfe3b541875aa306d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a590c84bc4cded3eaaaeecfe3b541875aa306d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fb471afc4f13ead1978fcdb008b92192412e9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb471afc4f13ead1978fcdb008b92192412e9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb471afc4f13ead1978fcdb008b92192412e9ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb471afc4f13ead1978fcdb008b92192412e9ba/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828176ba490d034d5d689f7733466530c25c5ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828176ba490d034d5d689f7733466530c25c5ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828176ba490d034d5d689f7733466530c25c5ed3"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "023bd4d7f31b2932af72e8c61df18f67bcdd96bf", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb471afc4f13ead1978fcdb008b92192412e9ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb471afc4f13ead1978fcdb008b92192412e9ba/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=4fb471afc4f13ead1978fcdb008b92192412e9ba", "patch": "@@ -58,6 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   /// Primary template of default_delete, used by unique_ptr for single objects\n+  /// @since C++11\n   template<typename _Tp>\n     struct default_delete\n     {\n@@ -236,7 +237,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n   /// @endcond\n \n-  /// 20.7.1.2 unique_ptr for single objects.\n+  // 20.7.1.2 unique_ptr for single objects.\n+\n+  /// A move-only smart pointer that manages unique ownership of a resource.\n+  /// @since C++11\n   template <typename _Tp, typename _Dp = default_delete<_Tp>>\n     class unique_ptr\n     {\n@@ -468,10 +472,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       unique_ptr& operator=(const unique_ptr&) = delete;\n   };\n \n-  /// 20.7.1.3 unique_ptr for array objects with a runtime length\n+  // 20.7.1.3 unique_ptr for array objects with a runtime length\n   // [unique.ptr.runtime]\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 740 - omit specialization for array objects with a compile time length\n+\n+  /// A move-only smart pointer that manages unique ownership of an array.\n+  /// @since C++11\n   template<typename _Tp, typename _Dp>\n     class unique_ptr<_Tp[], _Dp>\n     {\n@@ -939,7 +946,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #define __cpp_lib_make_unique 201304\n \n   /// @cond undocumented\n-\n+namespace __detail\n+{\n   template<typename _Tp>\n     struct _MakeUniq\n     { typedef unique_ptr<_Tp> __single_object; };\n@@ -952,54 +960,92 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _MakeUniq<_Tp[_Bound]>\n     { struct __invalid_type { }; };\n \n+  template<typename _Tp>\n+    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;\n+  template<typename _Tp>\n+    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;\n+  template<typename _Tp>\n+    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;\n+}\n   /// @endcond\n \n-  /// @{\n-  /// @relates unique_ptr\n-\n-  /// std::make_unique for single objects\n+  /** Create an object owned by a `unique_ptr`.\n+   *  @tparam _Tp A non-array object type.\n+   *  @param __args Constructor arguments for the new object.\n+   *  @returns A `unique_ptr<_Tp>` that owns the new object.\n+   *  @since C++14\n+   *  @relates unique_ptr\n+   */\n   template<typename _Tp, typename... _Args>\n-    inline typename _MakeUniq<_Tp>::__single_object\n+    inline __detail::__unique_ptr_t<_Tp>\n     make_unique(_Args&&... __args)\n     { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }\n \n-  /// std::make_unique for arrays of unknown bound\n+  /** Create an array owned by a `unique_ptr`.\n+   *  @tparam _Tp An array type of unknown bound, such as `U[]`.\n+   *  @param __num The number of elements of type `U` in the new array.\n+   *  @returns A `unique_ptr<U[]>` that owns the new array.\n+   *  @since C++14\n+   *  @relates unique_ptr\n+   *\n+   *  The array elements are value-initialized.\n+   */\n   template<typename _Tp>\n-    inline typename _MakeUniq<_Tp>::__array\n+    inline __detail::__unique_ptr_array_t<_Tp>\n     make_unique(size_t __num)\n     { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }\n \n-  /// Disable std::make_unique for arrays of known bound\n+  /** Disable std::make_unique for arrays of known bound.\n+   *  @tparam _Tp An array type of known bound, such as `U[N]`.\n+   *  @since C++14\n+   *  @relates unique_ptr\n+   */\n   template<typename _Tp, typename... _Args>\n-    typename _MakeUniq<_Tp>::__invalid_type\n+    __detail::__invalid_make_unique_t<_Tp>\n     make_unique(_Args&&...) = delete;\n \n #if __cplusplus > 201703L\n-  /// std::make_unique_for_overwrite for single objects\n+  /** Create a default-initialied object owned by a `unique_ptr`.\n+   *  @tparam _Tp A non-array object type.\n+   *  @returns A `unique_ptr<_Tp>` that owns the new object.\n+   *  @since C++20\n+   *  @relates unique_ptr\n+   */\n   template<typename _Tp>\n-    inline typename _MakeUniq<_Tp>::__single_object\n+    inline __detail::__unique_ptr_t<_Tp>\n     make_unique_for_overwrite()\n     { return unique_ptr<_Tp>(new _Tp); }\n \n-  /// std::make_unique_for_overwrite for arrays of unknown bound\n+  /** Create a default-initialized array owned by a `unique_ptr`.\n+   *  @tparam _Tp An array type of unknown bound, such as `U[]`.\n+   *  @param __num The number of elements of type `U` in the new array.\n+   *  @returns A `unique_ptr<U[]>` that owns the new array.\n+   *  @since C++20\n+   *  @relates unique_ptr\n+   */\n   template<typename _Tp>\n-    inline typename _MakeUniq<_Tp>::__array\n+    inline __detail::__unique_ptr_array_t<_Tp>\n     make_unique_for_overwrite(size_t __n)\n     { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__n]); }\n \n-  /// Disable std::make_unique_for_overwrite for arrays of known bound\n+  /** Disable std::make_unique_for_overwrite for arrays of known bound.\n+   *  @tparam _Tp An array type of known bound, such as `U[N]`.\n+   *  @since C++20\n+   *  @relates unique_ptr\n+   */\n   template<typename _Tp, typename... _Args>\n-    typename _MakeUniq<_Tp>::__invalid_type\n+    __detail::__invalid_make_unique_t<_Tp>\n     make_unique_for_overwrite(_Args&&...) = delete;\n #endif // C++20\n \n-  /// @} relates unique_ptr\n #endif // C++14\n \n #if __cplusplus > 201703L && __cpp_concepts\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2948. unique_ptr does not define operator<< for stream output\n   /// Stream output operator for unique_ptr\n+  /// @relates unique_ptr\n+  /// @since C++20\n   template<typename _CharT, typename _Traits, typename _Tp, typename _Dp>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os,"}]}