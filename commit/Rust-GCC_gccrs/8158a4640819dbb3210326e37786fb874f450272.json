{"sha": "8158a4640819dbb3210326e37786fb874f450272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1OGE0NjQwODE5ZGJiMzIxMDMyNmUzNzc4NmZiODc0ZjQ1MDI3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-20T18:27:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-21T15:17:50Z"}, "message": "PR c++/91476 - anon-namespace reference temp clash between TUs.\n\nThe problem in the PR was that make_temporary_var_for_ref_to_temp ran before\ndetermine_visibility, so when we copied the linkage of the reference\nvariable it had not yet been restricted by its anonymous namespace context,\nso the temporary wrongly ended up with TREE_PUBLIC set.  The natural\nsolution is to run determine_visibility earlier.  But that needs to happen\nafter maybe_commonize_var increases the linkage of some local variables, and\non targets without weak symbol support, that function does different things\nbased on the results of check_initializer, which is what calls\nmake_temporary_var_for_ref_to_temp.  To break this circular dependency I'm\ncalling maybe_commonize_var early, and then again later if the target\ndoesn't support weak symbols.\n\nIt also occurred to me that make_temporary_var_for_ref_to_temp wasn't\nhandling DECL_VISIBILITY at all, and verified that we were doing the wrong\nthing.  So I've combined the linkage-copying code from there and two other\nplaces.\n\n\t* decl2.c (copy_linkage): Factor out of get_guard.\n\t* call.c (make_temporary_var_for_ref_to_temp): Use it.\n\t* decl.c (cp_finish_decomp): Use it.\n\t(cp_finish_decl): determine_visibility sooner.", "tree": {"sha": "c7724af94aa2132a7bfdeb8f6fb8abbfc04058e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7724af94aa2132a7bfdeb8f6fb8abbfc04058e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8158a4640819dbb3210326e37786fb874f450272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8158a4640819dbb3210326e37786fb874f450272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8158a4640819dbb3210326e37786fb874f450272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8158a4640819dbb3210326e37786fb874f450272/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e2cc43de6e47312c186398c35732b890de0049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e2cc43de6e47312c186398c35732b890de0049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e2cc43de6e47312c186398c35732b890de0049"}], "stats": {"total": 104, "additions": 63, "deletions": 41}, "files": [{"sha": "412702f9b62691213f492adf142170b820a6fd38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -1,3 +1,11 @@\n+2020-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91476 - anon-namespace reference temp clash between TUs.\n+\t* decl2.c (copy_linkage): Factor out of get_guard.\n+\t* call.c (make_temporary_var_for_ref_to_temp): Use it.\n+\t* decl.c (cp_finish_decomp): Use it.\n+\t(cp_finish_decl): determine_visibility sooner.\n+\n 2020-01-21  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \t* coroutines.cc (finish_co_await_expr): Set return value flag."}, {"sha": "aacd961faa17ad7e95a46b11d5c8f86a6b740d6b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -11973,14 +11973,7 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n \t GR and suffixed with a sequence number mangled using the usual rules\n \t for a seq-id. Temporaries are numbered with a pre-order, depth-first,\n \t left-to-right walk of the complete initializer.  */\n-\n-      TREE_STATIC (var) = TREE_STATIC (decl);\n-      TREE_PUBLIC (var) = TREE_PUBLIC (decl);\n-      if (vague_linkage_p (decl))\n-\tcomdat_linkage (var);\n-\n-      CP_DECL_THREAD_LOCAL_P (var) = CP_DECL_THREAD_LOCAL_P (decl);\n-      set_decl_tls_model (var, DECL_TLS_MODEL (decl));\n+      copy_linkage (var, decl);\n \n       tree name = mangle_ref_init_variable (decl);\n       DECL_NAME (var) = name;"}, {"sha": "77bcf0466089856cb9070a7e7f74a54c8cbd6cef", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -6636,6 +6636,7 @@ extern bool mark_used\t\t\t\t(tree);\n extern bool mark_used\t\t\t        (tree, tsubst_flags_t);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree, tree);\n+extern void copy_linkage\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n extern tree get_guard_cond\t\t\t(tree, bool);\n extern tree set_guard\t\t\t\t(tree);"}, {"sha": "47ff7eea88f1ebe42eeac7b6cc9ad51c8cf11f2a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -7657,6 +7657,14 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       TREE_READONLY (decl) = 0;\n     }\n \n+  /* This needs to happen before extend_ref_init_temps.  */\n+  if (VAR_OR_FUNCTION_DECL_P (decl))\n+    {\n+      if (VAR_P (decl))\n+\tmaybe_commonize_var (decl);\n+      determine_visibility (decl);\n+    }\n+\n   if (VAR_P (decl))\n     {\n       duration_kind dk = decl_storage_duration (decl);\n@@ -7786,12 +7794,11 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if (VAR_P (decl))\n \t{\n \t  layout_var_decl (decl);\n-\t  maybe_commonize_var (decl);\n+\t  if (!flag_weak)\n+\t    /* Check again now that we have an initializer.  */\n+\t    maybe_commonize_var (decl);\n \t}\n \n-      /* This needs to happen after the linkage is set. */\n-      determine_visibility (decl);\n-\n       if (var_definition_p && TREE_STATIC (decl))\n \t{\n \t  /* If a TREE_READONLY variable needs initialization\n@@ -8328,23 +8335,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t    }\n \t  if (!processing_template_decl)\n \t    {\n-\t      TREE_PUBLIC (v[i]) = TREE_PUBLIC (decl);\n-\t      TREE_STATIC (v[i]) = TREE_STATIC (decl);\n-\t      DECL_COMMON (v[i]) = DECL_COMMON (decl);\n-\t      DECL_COMDAT (v[i]) = DECL_COMDAT (decl);\n-\t      if (TREE_STATIC (v[i]))\n-\t\t{\n-\t\t  CP_DECL_THREAD_LOCAL_P (v[i])\n-\t\t    = CP_DECL_THREAD_LOCAL_P (decl);\n-\t\t  set_decl_tls_model (v[i], DECL_TLS_MODEL (decl));\n-\t\t  if (DECL_ONE_ONLY (decl))\n-\t\t    make_decl_one_only (v[i], cxx_comdat_group (v[i]));\n-\t\t  if (TREE_PUBLIC (decl))\n-\t\t    DECL_WEAK (v[i]) = DECL_WEAK (decl);\n-\t\t  DECL_VISIBILITY (v[i]) = DECL_VISIBILITY (decl);\n-\t\t  DECL_VISIBILITY_SPECIFIED (v[i])\n-\t\t    = DECL_VISIBILITY_SPECIFIED (decl);\n-\t\t}\n+\t      copy_linkage (v[i], decl);\n \t      cp_finish_decl (v[i], init, /*constexpr*/false,\n \t\t\t      /*asm*/NULL_TREE, LOOKUP_NORMAL);\n \t    }"}, {"sha": "1ecf0b937d533dccfbf1614d979fc74786688e89", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -3214,6 +3214,29 @@ build_cleanup (tree decl)\n   return clean;\n }\n \n+/* GUARD is a helper variable for DECL; make them have the same linkage and\n+   visibility.  */\n+\n+void\n+copy_linkage (tree guard, tree decl)\n+{\n+  TREE_PUBLIC (guard) = TREE_PUBLIC (decl);\n+  TREE_STATIC (guard) = TREE_STATIC (decl);\n+  DECL_COMMON (guard) = DECL_COMMON (decl);\n+  DECL_COMDAT (guard) = DECL_COMDAT (decl);\n+  if (TREE_STATIC (guard))\n+    {\n+      CP_DECL_THREAD_LOCAL_P (guard) = CP_DECL_THREAD_LOCAL_P (decl);\n+      set_decl_tls_model (guard, DECL_TLS_MODEL (decl));\n+      /* We can't rely on DECL_WEAK (decl) or DECL_ONE_ONLY (decl) here, as\n+\t they may not be set until import_export_decl at EOF.  */\n+      if (vague_linkage_p (decl))\n+\tcomdat_linkage (guard);\n+      DECL_VISIBILITY (guard) = DECL_VISIBILITY (decl);\n+      DECL_VISIBILITY_SPECIFIED (guard) = DECL_VISIBILITY_SPECIFIED (decl);\n+    }\n+}\n+\n /* Returns the initialization guard variable for the variable DECL,\n    which has static storage duration.  */\n \n@@ -3236,18 +3259,7 @@ get_guard (tree decl)\n \t\t\t  VAR_DECL, sname, guard_type);\n \n       /* The guard should have the same linkage as what it guards.  */\n-      TREE_PUBLIC (guard) = TREE_PUBLIC (decl);\n-      TREE_STATIC (guard) = TREE_STATIC (decl);\n-      DECL_COMMON (guard) = DECL_COMMON (decl);\n-      DECL_COMDAT (guard) = DECL_COMDAT (decl);\n-      CP_DECL_THREAD_LOCAL_P (guard) = CP_DECL_THREAD_LOCAL_P (decl);\n-      set_decl_tls_model (guard, DECL_TLS_MODEL (decl));\n-      if (DECL_ONE_ONLY (decl))\n-\tmake_decl_one_only (guard, cxx_comdat_group (guard));\n-      if (TREE_PUBLIC (decl))\n-\tDECL_WEAK (guard) = DECL_WEAK (decl);\n-      DECL_VISIBILITY (guard) = DECL_VISIBILITY (decl);\n-      DECL_VISIBILITY_SPECIFIED (guard) = DECL_VISIBILITY_SPECIFIED (decl);\n+      copy_linkage (guard, decl);\n \n       DECL_ARTIFICIAL (guard) = 1;\n       DECL_IGNORED_P (guard) = 1;"}, {"sha": "ecb62326e1bd05c35b6200985aa532964e51ade5", "filename": "gcc/testsuite/g++.dg/ext/visibility/ref-temp1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8158a4640819dbb3210326e37786fb874f450272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fref-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8158a4640819dbb3210326e37786fb874f450272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fref-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fref-temp1.C?ref=8158a4640819dbb3210326e37786fb874f450272", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91476\n+// Test that hidden and internal visibility propagates to reference temps.\n+\n+#define HIDDEN __attribute((visibility(\"hidden\")))\n+\n+// { dg-final { scan-hidden \"_ZGRZ1fvE3foo_\" } }\n+HIDDEN inline const int* f() { static const int &foo = 1; return &foo; }\n+\n+// { dg-final { scan-assembler-not \"(weak|globl)\\[^\\n\\]*_ZGRN12_GLOBAL__N_13fooE_\" } }\n+namespace { const int &foo = 1; }\n+\n+const void *volatile p;\n+int main()\n+{\n+  p = f();\n+  p = &foo;\n+}"}]}