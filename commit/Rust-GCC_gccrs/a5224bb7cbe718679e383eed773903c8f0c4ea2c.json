{"sha": "a5224bb7cbe718679e383eed773903c8f0c4ea2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyMjRiYjdjYmU3MTg2NzllMzgzZWVkNzczOTAzYzhmMGM0ZWEyYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-06-18T19:26:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-18T19:26:26Z"}, "message": "i386.md (*movsicc_noc_zext): New insn.\n\n\t* config/i386/i386.md (*movsicc_noc_zext): New insn.\n\t(zero-extended cmove with mem peephole2): New pattern.\n\t(cmove with mem peephole2): Merge patterns.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/cmov9.c: New test.\n\nFrom-SVN: r224631", "tree": {"sha": "180e868d1006588ed2174ace6a0e63e43ec1f825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180e868d1006588ed2174ace6a0e63e43ec1f825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5224bb7cbe718679e383eed773903c8f0c4ea2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5224bb7cbe718679e383eed773903c8f0c4ea2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5224bb7cbe718679e383eed773903c8f0c4ea2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5224bb7cbe718679e383eed773903c8f0c4ea2c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "861b6407e476c8fbddc5bda37b8b91959f8e86fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861b6407e476c8fbddc5bda37b8b91959f8e86fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861b6407e476c8fbddc5bda37b8b91959f8e86fe"}], "stats": {"total": 139, "additions": 104, "deletions": 35}, "files": [{"sha": "25628faad67fd240fc85053b5f20a449c8b182f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5224bb7cbe718679e383eed773903c8f0c4ea2c", "patch": "@@ -1,3 +1,9 @@\n+2015-06-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movsicc_noc_zext): New insn.\n+\t(zero-extended cmove with mem peephole2): New pattern.\n+\t(cmove with mem peephole2): Merge patterns.\n+\n 2015-06-18  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.h (WORD_REGISTER_OPERATIONS): Delete."}, {"sha": "d75b2e119c3b04527f2deab7e6f3d52e77b2092f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 85, "deletions": 34, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a5224bb7cbe718679e383eed773903c8f0c4ea2c", "patch": "@@ -16746,6 +16746,22 @@\n   [(set_attr \"type\" \"icmov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*movsicc_noc_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\"\n+\t\t\t   [(reg FLAGS_REG) (const_int 0)])\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\"))\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\"))))]\n+  \"TARGET_64BIT\n+   && TARGET_CMOVE && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+  \"@\n+   cmov%O2%C1\\t{%2, %k0|%k0, %2}\n+   cmov%O2%c1\\t{%3, %k0|%k0, %3}\"\n+  [(set_attr \"type\" \"icmov\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; Don't do conditional moves with memory inputs.  This splitter helps\n ;; register starved x86_32 by forcing inputs into registers before reload.\n (define_split\n@@ -16797,30 +16813,65 @@\n \n ;; Don't do conditional moves with memory inputs\n (define_peephole2\n-  [(match_scratch:SWI248 2 \"r\")\n+  [(match_scratch:SWI248 4 \"r\")\n    (set (match_operand:SWI248 0 \"register_operand\")\n \t(if_then_else:SWI248 (match_operator 1 \"ix86_comparison_operator\"\n \t\t\t       [(reg FLAGS_REG) (const_int 0)])\n-\t  (match_dup 0)\n-\t  (match_operand:SWI248 3 \"memory_operand\")))]\n+\t  (match_operand:SWI248 2 \"nonimmediate_operand\")\n+\t  (match_operand:SWI248 3 \"nonimmediate_operand\")))]\n   \"TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n+   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n    && optimize_insn_for_speed_p ()\"\n-  [(set (match_dup 2) (match_dup 3))\n+  [(set (match_dup 4) (match_dup 5))\n    (set (match_dup 0)\n-\t(if_then_else:SWI248 (match_dup 1) (match_dup 0) (match_dup 2)))])\n+\t(if_then_else:SWI248 (match_dup 1) (match_dup 2) (match_dup 3)))]\n+{\n+  if (MEM_P (operands[2]))\n+    {\n+      operands[5] = operands[2];\n+      operands[2] = operands[4];\n+    }\n+  else if (MEM_P (operands[3]))\n+    {\n+      operands[5] = operands[3];\n+      operands[3] = operands[4];\n+    }\n+  else\n+    gcc_unreachable ();\n+})\n \n (define_peephole2\n-  [(match_scratch:SWI248 2 \"r\")\n-   (set (match_operand:SWI248 0 \"register_operand\")\n-\t(if_then_else:SWI248 (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t       [(reg FLAGS_REG) (const_int 0)])\n-\t  (match_operand:SWI248 3 \"memory_operand\")\n-\t  (match_dup 0)))]\n-  \"TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n+  [(match_scratch:SI 4 \"r\")\n+   (set (match_operand:DI 0 \"register_operand\")\n+\t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\"\n+\t\t\t   [(reg FLAGS_REG) (const_int 0)])\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 2 \"nonimmediate_operand\"))\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 3 \"nonimmediate_operand\"))))]\n+  \"TARGET_64BIT\n+   && TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n+   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n    && optimize_insn_for_speed_p ()\"\n-  [(set (match_dup 2) (match_dup 3))\n+  [(set (match_dup 4) (match_dup 5))\n    (set (match_dup 0)\n-\t(if_then_else:SWI248 (match_dup 1) (match_dup 2) (match_dup 0)))])\n+\t(if_then_else:DI (match_dup 1)\n+\t  (zero_extend:DI (match_dup 2))\n+\t  (zero_extend:DI (match_dup 3))))]\n+{\n+  if (MEM_P (operands[2]))\n+    {\n+      operands[5] = operands[2];\n+      operands[2] = operands[4];\n+    }\n+  else if (MEM_P (operands[3]))\n+    {\n+      operands[5] = operands[3];\n+      operands[3] = operands[4];\n+    }\n+  else\n+    gcc_unreachable ();\n+})\n \n (define_expand \"mov<mode>cc\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n@@ -16922,34 +16973,34 @@\n \n ;; Don't do conditional moves with memory inputs\n (define_peephole2\n-  [(match_scratch:MODEF 2 \"r\")\n-   (set (match_operand:MODEF 0 \"register_and_not_any_fp_reg_operand\")\n-\t(if_then_else:MODEF (match_operator 1 \"fcmov_comparison_operator\"\n-\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n-\t  (match_dup 0)\n-\t  (match_operand:MODEF 3 \"memory_operand\")))]\n-  \"(<MODE>mode != DFmode || TARGET_64BIT)\n-   && TARGET_80387 && TARGET_CMOVE\n-   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n-   && optimize_insn_for_speed_p ()\"\n-  [(set (match_dup 2) (match_dup 3))\n-   (set (match_dup 0)\n-\t(if_then_else:MODEF (match_dup 1) (match_dup 0) (match_dup 2)))])\n-\n-(define_peephole2\n-  [(match_scratch:MODEF 2 \"r\")\n+  [(match_scratch:MODEF 4 \"r\")\n    (set (match_operand:MODEF 0 \"register_and_not_any_fp_reg_operand\")\n \t(if_then_else:MODEF (match_operator 1 \"fcmov_comparison_operator\"\n \t\t\t      [(reg FLAGS_REG) (const_int 0)])\n-\t  (match_operand:MODEF 3 \"memory_operand\")\n-\t  (match_dup 0)))]\n+\t  (match_operand:MODEF 2 \"nonimmediate_operand\")\n+\t  (match_operand:MODEF 3 \"nonimmediate_operand\")))]\n   \"(<MODE>mode != DFmode || TARGET_64BIT)\n    && TARGET_80387 && TARGET_CMOVE\n    && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n+   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n    && optimize_insn_for_speed_p ()\"\n-  [(set (match_dup 2) (match_dup 3))\n+  [(set (match_dup 4) (match_dup 5))\n    (set (match_dup 0)\n-\t(if_then_else:MODEF (match_dup 1) (match_dup 2) (match_dup 0)))])\n+\t(if_then_else:MODEF (match_dup 1) (match_dup 2) (match_dup 3)))]\n+{\n+  if (MEM_P (operands[2]))\n+    {\n+      operands[5] = operands[2];\n+      operands[2] = operands[4];\n+    }\n+  else if (MEM_P (operands[3]))\n+    {\n+      operands[5] = operands[3];\n+      operands[3] = operands[4];\n+    }\n+  else\n+    gcc_unreachable ();\n+})\n \n ;; All moves in XOP pcmov instructions are 128 bits and hence we restrict\n ;; the scalar versions to have only XMM registers as operands."}, {"sha": "9a3978b7e79e5bb81f537a75856c17ab51a0fb4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5224bb7cbe718679e383eed773903c8f0c4ea2c", "patch": "@@ -1,3 +1,7 @@\n+2015-06-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/cmov9.c: New test.\n+\n 2015-06-18  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/other/const4.C: New testcase.\n@@ -32,7 +36,7 @@\n \t* gcc.target/i386/noplt-1.c (dg-do): Fix target selector.\n \t* gcc.target/i386/noplt-2.c (dg-do): Ditto.\n \t* gcc.target/i386/noplt-3.c (dg-do): Ditto.\n-\t* gcc.target/i386/noplt-4.c (dg-do): ditto.\n+\t* gcc.target/i386/noplt-4.c (dg-do): Ditto.\n \n 2015-06-17  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "6f0c54e91205036753b7efb890e0d6f6841a9a1b", "filename": "gcc/testsuite/gcc.target/i386/cmov9.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5224bb7cbe718679e383eed773903c8f0c4ea2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov9.c?ref=a5224bb7cbe718679e383eed773903c8f0c4ea2c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -dp\" } */\n+/* { dg-final { scan-assembler-not \"zero_extendsidi\" } } */\n+\n+unsigned long long foo (int a, unsigned int b, unsigned int c)\n+{\n+  return a ? b : c;\n+}"}]}