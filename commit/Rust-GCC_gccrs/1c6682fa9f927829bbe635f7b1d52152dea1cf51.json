{"sha": "1c6682fa9f927829bbe635f7b1d52152dea1cf51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2NjgyZmE5ZjkyNzgyOWJiZTYzNWY3YjFkNTIxNTJkZWExY2Y1MQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-06-12T09:55:38Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-06-12T09:55:38Z"}, "message": "Use atomics in guard.cc / remove special casing in targets.\n\nThe PowerPC, AIX, Alpha, IA64  implementations of atomic_word.h are in no\nway different from what can be achieved with the generic rewrite in\nPatch 1 of this series - delete these.\n\n2015-06-12  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        * config/cpu/alpha/atomic_word.h: Remove.\n        * config/cpu/ia64/atomic_word.h: Remove.\n        * config/cpu/powerpc/atomic_word.h: Remove.\n        * config/os/aix/atomic_word.h: Remove.\n        * configure.host (atomic_word_dir) [ia64, aix*, powerpc, alpha]:\n        Use generic definition.\n\nFrom-SVN: r224413", "tree": {"sha": "5e00a732ce199554b30cdb94d38fc06b1efe3d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e00a732ce199554b30cdb94d38fc06b1efe3d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c6682fa9f927829bbe635f7b1d52152dea1cf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6682fa9f927829bbe635f7b1d52152dea1cf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6682fa9f927829bbe635f7b1d52152dea1cf51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6682fa9f927829bbe635f7b1d52152dea1cf51/comments", "author": null, "committer": null, "parents": [{"sha": "dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5"}], "stats": {"total": 178, "additions": 0, "deletions": 178}, "files": [{"sha": "9d3d7086fe53fb7711a5bee34e4dc20480571838", "filename": "libstdc++-v3/config/cpu/alpha/atomic_word.h", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomic_word.h?ref=dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "patch": "@@ -1,33 +0,0 @@\n-// Low-level type for atomic operations -*- C++ -*-\n-\n-// Copyright (C) 2004-2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef _GLIBCXX_ATOMIC_WORD_H\n-#define _GLIBCXX_ATOMIC_WORD_H\t1\n-\n-typedef int _Atomic_word;\n-\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"mb\":::\"memory\")\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"wmb\":::\"memory\")\n-\n-#endif "}, {"sha": "6aeeb6470026b8ffd3ecb8ddbd176f299bf96852", "filename": "libstdc++-v3/config/cpu/ia64/atomic_word.h", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomic_word.h?ref=dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "patch": "@@ -1,64 +0,0 @@\n-// Low-level type for atomic operations -*- C++ -*-\n-\n-// Copyright (C) 2004-2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef _GLIBCXX_ATOMIC_WORD_H\n-#define _GLIBCXX_ATOMIC_WORD_H\t1\n-\n-#include <bits/cxxabi_tweaks.h>\n-\n-typedef int _Atomic_word;\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-  // Test the first byte of __g and ensure that no loads are hoisted across\n-  // the test.\n-  inline bool\n-  __test_and_acquire (__cxxabiv1::__guard *__g)\n-  {\n-    unsigned char __c;\n-    unsigned char *__p = reinterpret_cast<unsigned char *>(__g);\n-    // ldN.acq is a load with an implied hoist barrier.\n-    // would ld8+mask be faster than just doing an ld1?\n-    __asm __volatile (\"ld1.acq %0 = %1\" : \"=r\"(__c) : \"m\"(*__p) : \"memory\");\n-    return __c != 0;\n-  }\n-\n-  // Set the first byte of __g to 1 and ensure that no stores are sunk\n-  // across the store.\n-  inline void\n-  __set_and_release (__cxxabiv1::__guard *__g)\n-  {\n-    unsigned char *__p = reinterpret_cast<unsigned char *>(__g);\n-    // stN.rel is a store with an implied sink barrier.\n-    // could load word, set flag, and CAS it back\n-    __asm __volatile (\"st1.rel %0 = %1\" : \"=m\"(*__p) : \"r\"(1) : \"memory\");\n-  }\n-\n-  // We don't define the _BARRIER macros on ia64 because the barriers are\n-  // included in the test and set, above.\n-#define _GLIBCXX_GUARD_TEST_AND_ACQUIRE(G) __gnu_cxx::__test_and_acquire (G)\n-#define _GLIBCXX_GUARD_SET_AND_RELEASE(G) __gnu_cxx::__set_and_release (G)\n-}\n-\n-#endif "}, {"sha": "1ceb02cf7028f941cd8ce2db7ac60fa0174e8bfd", "filename": "libstdc++-v3/config/cpu/powerpc/atomic_word.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomic_word.h?ref=dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "patch": "@@ -1,38 +0,0 @@\n-// Low-level type for atomic operations -*- C++ -*-\n-\n-// Copyright (C) 2004-2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef _GLIBCXX_ATOMIC_WORD_H\n-#define _GLIBCXX_ATOMIC_WORD_H\t1\n-\n-typedef int _Atomic_word;\n-\n-#ifdef __NO_LWSYNC__\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"sync\":::\"memory\")\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"sync\":::\"memory\")\n-#else\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"lwsync\":::\"memory\")\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"lwsync\":::\"memory\")\n-#endif\n-\n-#endif "}, {"sha": "2b2647a8b01140cbe6c938998c73291eca6edc1c", "filename": "libstdc++-v3/config/os/aix/atomic_word.h", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fatomic_word.h?ref=dd38693ee5a47a2ea5d89ad6bfbd75cd1789b6c5", "patch": "@@ -1,43 +0,0 @@\n-// Low-level type for atomic operations -*- C++ -*-\n-\n-// Copyright (C) 2004-2015 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/atomic_word.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{ext/atomicity.h}\n- */\n-\n-#ifndef _GLIBCXX_ATOMIC_WORD_H\n-#define _GLIBCXX_ATOMIC_WORD_H\t1\n-\n-typedef int _Atomic_word;\n-\n-#ifdef _ARCH_PPC\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"isync\":::\"memory\")\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"sync\":::\"memory\")\n-#else\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n-#endif\n-\n-#endif"}]}