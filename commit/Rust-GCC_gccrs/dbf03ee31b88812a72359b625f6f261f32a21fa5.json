{"sha": "dbf03ee31b88812a72359b625f6f261f32a21fa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmMDNlZTMxYjg4ODEyYTcyMzU5YjYyNWY2ZjI2MWYzMmEyMWZhNQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-20T11:37:11Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-20T11:37:11Z"}, "message": "m68hc11.c (m68hc11_override_options): Ignore the -fpic and -fPIC options, clear flag_pic.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Ignore\n\tthe -fpic and -fPIC options, clear flag_pic.\n\nFrom-SVN: r42339", "tree": {"sha": "6c9f312de663e0ff6cf364857f31f471a81be037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9f312de663e0ff6cf364857f31f471a81be037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbf03ee31b88812a72359b625f6f261f32a21fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf03ee31b88812a72359b625f6f261f32a21fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf03ee31b88812a72359b625f6f261f32a21fa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf03ee31b88812a72359b625f6f261f32a21fa5/comments", "author": null, "committer": null, "parents": [{"sha": "a078edf8139869ae6833c7e5d5e832d3c656dacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a078edf8139869ae6833c7e5d5e832d3c656dacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a078edf8139869ae6833c7e5d5e832d3c656dacc"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "8b2d873767d4676410fcfeeebb7bb02197218742", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf03ee31b88812a72359b625f6f261f32a21fa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf03ee31b88812a72359b625f6f261f32a21fa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbf03ee31b88812a72359b625f6f261f32a21fa5", "patch": "@@ -1,3 +1,8 @@\n+2001-05-20  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Ignore\n+\tthe -fpic and -fPIC options, clear flag_pic.\n+\n 2001-05-20  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* hashtable.c (calc_hash): Fix HASHSTEP definition."}, {"sha": "fed8d16a1e3f19ac6f2c64b58a617dfcf5816f77", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf03ee31b88812a72359b625f6f261f32a21fa5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf03ee31b88812a72359b625f6f261f32a21fa5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=dbf03ee31b88812a72359b625f6f261f32a21fa5", "patch": "@@ -211,6 +211,14 @@ m68hc11_override_options ()\n \t  sizeof (m68hc11_reg_valid_for_index));\n   memset (m68hc11_reg_valid_for_base, 0, sizeof (m68hc11_reg_valid_for_base));\n \n+  /* Compilation with -fpic generates a wrong code.  */\n+  if (flag_pic)\n+    {\n+      warning (\"-f%s ignored for 68HC11/68HC12 (not supported)\",\n+\t       (flag_pic > 1) ? \"PIC\" : \"pic\");\n+      flag_pic = 0;\n+    }\n+\n   /* Configure for a 68hc11 processor.  */\n   if (TARGET_M6811)\n     {\n@@ -1808,7 +1816,8 @@ m68hc11_gen_lowpart (mode, x)\n \t  if (mode == SImode)\n \t    return gen_rtx (CONST_INT, VOIDmode, l[0]);\n \n-\t  return gen_rtx (CONST_INT, VOIDmode, l[0] & 0x0ffff);\n+\t  return gen_rtx (CONST_INT, VOIDmode,\n+                          trunc_int_for_mode (l[0], HImode));\n \t}\n       else\n \t{\n@@ -1817,7 +1826,8 @@ m68hc11_gen_lowpart (mode, x)\n       if (mode == SImode)\n \treturn gen_rtx (CONST_INT, VOIDmode, l[0]);\n       else if (mode == HImode && GET_MODE (x) == SFmode)\n-\treturn gen_rtx (CONST_INT, VOIDmode, l[0] & 0x0FFFF);\n+\treturn gen_rtx (CONST_INT, VOIDmode,\n+                        trunc_int_for_mode (l[0], HImode));\n       else\n \tabort ();\n     }\n@@ -1829,9 +1839,9 @@ m68hc11_gen_lowpart (mode, x)\n   if (GET_CODE (x) == SUBREG && SUBREG_BYTE (x) != 0)\n     {\n       if (mode == SImode)\n-\treturn gen_rtx_SUBREG (mode, SUBREG_REG (x), SUBREG_BYTE (x) + 2);\n+\treturn gen_rtx_SUBREG (mode, SUBREG_REG (x), SUBREG_BYTE (x) + 4);\n       else if (mode == HImode)\n-\treturn gen_rtx_SUBREG (mode, SUBREG_REG (x), SUBREG_BYTE (x) + 1);\n+\treturn gen_rtx_SUBREG (mode, SUBREG_REG (x), SUBREG_BYTE (x) + 2);\n       else\n \tabort ();\n     }\n@@ -1885,7 +1895,8 @@ m68hc11_gen_highpart (mode, x)\n \t  if (mode == SImode)\n \t    return gen_rtx (CONST_INT, VOIDmode, l[1]);\n \n-\t  return gen_rtx (CONST_INT, VOIDmode, (l[1] >> 16) & 0x0ffff);\n+\t  return gen_rtx (CONST_INT, VOIDmode,\n+                          trunc_int_for_mode ((l[1] >> 16), HImode));\n \t}\n       else\n \t{\n@@ -1895,7 +1906,8 @@ m68hc11_gen_highpart (mode, x)\n       if (mode == SImode)\n \treturn gen_rtx (CONST_INT, VOIDmode, l[1]);\n       else if (mode == HImode && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\treturn gen_rtx (CONST_INT, VOIDmode, (l[0] >> 16) & 0x0FFFF);\n+\treturn gen_rtx (CONST_INT, VOIDmode,\n+                        trunc_int_for_mode ((l[0] >> 16), HImode));\n       else\n \tabort ();\n     }\n@@ -1905,11 +1917,13 @@ m68hc11_gen_highpart (mode, x)\n \n       if (mode == QImode)\n \t{\n-\t  return gen_rtx (CONST_INT, VOIDmode, val >> 8);\n+\t  return gen_rtx (CONST_INT, VOIDmode,\n+                          trunc_int_for_mode (val >> 8, QImode));\n \t}\n       else if (mode == HImode)\n \t{\n-\t  return gen_rtx (CONST_INT, VOIDmode, val >> 16);\n+\t  return gen_rtx (CONST_INT, VOIDmode,\n+                          trunc_int_for_mode (val >> 16, HImode));\n \t}\n     }\n   if (mode == QImode && D_REG_P (x))"}]}