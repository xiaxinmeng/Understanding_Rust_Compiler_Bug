{"sha": "f8feccb8b08a42fa44caff69c8d82860caef3574", "node_id": "C_kwDOANBUbNoAKGY4ZmVjY2I4YjA4YTQyZmE0NGNhZmY2OWM4ZDgyODYwY2FlZjM1NzQ", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-01-12T01:07:13Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-01-12T02:50:53Z"}, "message": "cris: Parenthesize parameter to as_a.\n\nNoted by Richard Sandiford in\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=103974#c7 (thanks!)\n\nMea culpa: I wrongly thought the default development-level value\n(\"yes,extra\") would include everything interesting to normal target\nhacking (i.e. as opposed to hacking stuff like GC).  I see\nrtl-checking is marked as \"expensive\" and presumably therefore left\nout.  Maybe it could be split into rtl-static (cheap; catching type\nerrors including this kind of foulups) and rtl-dynamic (the expensive\nparts).  I suppose that's for whomever feels a strong enough itch.\n\nA quick (error-prone) grep-and-eyeball in config/ shows this was the\nonly file missing the parenthesis.  This lets cris-elf configured with\n--enable-checking=yes,extra,rtl survive make all-gcc.\n\n2022-01-11  Hans-Peter Nilsson  <hp@axis.com>\n\n\t* config/cris/cris.c (cris_postdbr_cmpelim): Parenthesize\n\tparameter to as_a.", "tree": {"sha": "578000491b653aed51fd20641c3b119f616df639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/578000491b653aed51fd20641c3b119f616df639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8feccb8b08a42fa44caff69c8d82860caef3574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8feccb8b08a42fa44caff69c8d82860caef3574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8feccb8b08a42fa44caff69c8d82860caef3574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8feccb8b08a42fa44caff69c8d82860caef3574/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a254e3e53cc1cf9e16688ed785ca931b1459aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01a254e3e53cc1cf9e16688ed785ca931b1459aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01a254e3e53cc1cf9e16688ed785ca931b1459aa"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "ac1fc4909fc346c63a6262b85659b9d24cd37391", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8feccb8b08a42fa44caff69c8d82860caef3574/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8feccb8b08a42fa44caff69c8d82860caef3574/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=f8feccb8b08a42fa44caff69c8d82860caef3574", "patch": "@@ -392,7 +392,7 @@ cris_postdbr_cmpelim ()\n       /* Consider filled delay slots; there might be a comparison there.\n \t It's only the second insn in a sequence that is interesting.  */\n       if (GET_CODE (pat) == SEQUENCE)\n-\tinsn = as_a <rtx_insn *> XVECEXP (pat, 0, 1);\n+\tinsn = as_a <rtx_insn *> (XVECEXP (pat, 0, 1));\n       /* The \"else\" eliminates temptations to consider an insn in a\n \t delay slot for elimination; it can only be a prev_cc_setter.  */\n       else if (prev_cc_setter != 0 && GET_CODE (pat) == SET)"}]}