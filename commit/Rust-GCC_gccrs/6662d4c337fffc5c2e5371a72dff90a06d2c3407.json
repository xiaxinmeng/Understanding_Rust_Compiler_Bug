{"sha": "6662d4c337fffc5c2e5371a72dff90a06d2c3407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2MmQ0YzMzN2ZmZmM1YzJlNTM3MWE3MmRmZjkwYTA2ZDJjMzQwNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-02-06T12:13:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-02-06T12:13:00Z"}, "message": "locale_facets.tcc (money_get::do_get(string)): In case money_base::symbol deal properly with multi-char sign for patterns...\n\n2002-02-06  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/locale_facets.tcc (money_get::do_get(string)):\n\tIn case money_base::symbol deal properly with multi-char sign\n\tfor patterns {X,Y,Z,symbol} and {X,Y,symbol,none}.\n\t* testsuite/22_locale/money_get_members_char.cc: Add test07.\n\t* testsuite/22_locale/money_get_members_wchar_t.cc: Add test07.\n\nFrom-SVN: r49543", "tree": {"sha": "f4854e2eb8561aed34cfe1f67124d3b8a1460868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4854e2eb8561aed34cfe1f67124d3b8a1460868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6662d4c337fffc5c2e5371a72dff90a06d2c3407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6662d4c337fffc5c2e5371a72dff90a06d2c3407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6662d4c337fffc5c2e5371a72dff90a06d2c3407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6662d4c337fffc5c2e5371a72dff90a06d2c3407/comments", "author": null, "committer": null, "parents": [{"sha": "d3a8b6a672bc5a693331f98d2a3c01e84eb1d786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a8b6a672bc5a693331f98d2a3c01e84eb1d786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a8b6a672bc5a693331f98d2a3c01e84eb1d786"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "40c21893d5aff23ab564815955c6cff86e145ecd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6662d4c337fffc5c2e5371a72dff90a06d2c3407", "patch": "@@ -1,3 +1,11 @@\n+2002-02-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/locale_facets.tcc (money_get::do_get(string)):\n+\tIn case money_base::symbol deal properly with multi-char sign\n+\tfor patterns {X,Y,Z,symbol} and {X,Y,symbol,none}.\n+\t* testsuite/22_locale/money_get_members_char.cc: Add test07.\n+\t* testsuite/22_locale/money_get_members_wchar_t.cc: Add test07.\n+\n 2002-02-05  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/locale_facets.tcc (money_get::do_get(string)):"}, {"sha": "c27b1eec38301ffb59226e814aa69dae91dd5661", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=6662d4c337fffc5c2e5371a72dff90a06d2c3407", "patch": "@@ -941,8 +941,10 @@ namespace std\n \t  switch (__which)\n \t\t{\n \t\tcase money_base::symbol:\n-\t\t  if (__io.flags() & ios_base::showbase || __i < 2 ||\n-\t\t      __i == 2 && static_cast<part>(__p.field[3]) != money_base::none)\n+\t\t  if (__io.flags() & ios_base::showbase\n+\t\t      || __i < 2\n+\t\t      || (__i == 2 && static_cast<part>(__p.field[3]) != money_base::none)\n+\t\t      || __sign.size() > 1)\n \t\t    {\n \t\t      // According to 22.2.6.1.2.2, symbol is required if\n \t\t      // (__io.flags() & ios_base::showbase), otherwise is optional"}, {"sha": "148854a33d1b17ae54ae6e6d8a11580e0a67feb2", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=6662d4c337fffc5c2e5371a72dff90a06d2c3407", "patch": "@@ -419,6 +419,105 @@ void test06()\n   VERIFY( val == buffer3 );\n }\n \n+class My_money_io_a : public std::moneypunct<char,false>\n+{\n+public:\n+  explicit My_money_io_a(size_t r = 0): std::moneypunct<char,false>(r) { }\n+  char_type do_decimal_point() const { return '.'; }\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    static pattern pat = { { sign, value, space, symbol } };\n+    return pat;\n+  }\n+};\n+\n+class My_money_io_b : public std::moneypunct<char,false>\n+{\n+public:\n+  explicit My_money_io_b(size_t r = 0): std::moneypunct<char,false>(r) { }\n+  char_type do_decimal_point() const { return '.'; }\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    static pattern pat = { { sign, value, symbol, none } };\n+    return pat;\n+  }\n+};\n+\n+// This one exercises patterns of the type { X, Y, Z, symbol } and\n+// { X, Y, symbol, none } for a two character long sign. Therefore\n+// the optional symbol (showbase is false by default) must be consumed\n+// if present, since \"rest of the sign\" is left to read.\n+void test07()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> InIt;\n+\n+  bool intl = false;\n+  ios_base::iostate err;\n+\n+  locale loc_a(locale::classic(), new My_money_io_a);\n+\n+  string buffer_a(\"(1234.56 $)\");\n+  string buffer_a_ns(\"(1234.56 )\");\n+\n+  InIt iend_a, iend_a_ns;\n+  string val_a, val_a_ns;\n+\n+  const money_get<char,InIt>& mg_a  =\n+    use_facet<money_get<char, InIt> >(loc_a);\n+\n+  istringstream fmt_a(buffer_a);\n+  fmt_a.imbue(loc_a);\n+  InIt ibeg_a(fmt_a);\n+  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n+  VERIFY( val_a == \"123456\" );\n+\n+  istringstream fmt_a_ns(buffer_a_ns);\n+  fmt_a_ns.imbue(loc_a);\n+  InIt ibeg_a_ns(fmt_a_ns);\n+  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n+  VERIFY( val_a_ns == \"123456\" );\n+\n+  locale loc_b(locale::classic(), new My_money_io_b);\n+\n+  string buffer_b(\"(1234.56$)\");\n+  string buffer_b_ns(\"(1234.56)\");\n+\n+  InIt iend_b, iend_b_ns;\n+  string val_b, val_b_ns;\n+\n+  const money_get<char,InIt>& mg_b  =\n+    use_facet<money_get<char, InIt> >(loc_b);\n+\n+  istringstream fmt_b(buffer_b);\n+  fmt_b.imbue(loc_b);\n+  InIt ibeg_b(fmt_b);\n+  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n+  VERIFY( val_b == \"123456\" );\n+\n+  istringstream fmt_b_ns(buffer_b_ns);\n+  fmt_b_ns.imbue(loc_b);\n+  InIt ibeg_b_ns(fmt_b_ns);\n+  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n+  VERIFY( val_b_ns == \"123456\" );\n+}\n+\n int main()\n {\n   test01();\n@@ -427,5 +526,6 @@ int main()\n   test04();\n   test05();\n   test06();\n+  test07();\n   return 0;\n }"}, {"sha": "cf9ff1fca4bf95dae92b755b68c95a78922f2f5a", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6662d4c337fffc5c2e5371a72dff90a06d2c3407/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=6662d4c337fffc5c2e5371a72dff90a06d2c3407", "patch": "@@ -420,6 +420,105 @@ void test06()\n   mg.get(ibeg3,iend3,false,fmt3,err,val);\n   VERIFY( val == buffer3 );\n }\n+\n+class My_money_io_a : public std::moneypunct<wchar_t,false>\n+{\n+public:\n+  explicit My_money_io_a(size_t r = 0): std::moneypunct<wchar_t,false>(r) { }\n+  char_type do_decimal_point() const { return L'.'; }\n+  char_type do_thousands_sep() const { return L','; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    static pattern pat = { { sign, value, space, symbol } };\n+    return pat;\n+  }\n+};\n+\n+class My_money_io_b : public std::moneypunct<wchar_t,false>\n+{\n+public:\n+  explicit My_money_io_b(size_t r = 0): std::moneypunct<wchar_t,false>(r) { }\n+  char_type do_decimal_point() const { return L'.'; }\n+  char_type do_thousands_sep() const { return L','; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    static pattern pat = { { sign, value, symbol, none } };\n+    return pat;\n+  }\n+};\n+\n+// This one exercises patterns of the type { X, Y, Z, symbol } and\n+// { X, Y, symbol, none } for a two character long sign. Therefore\n+// the optional symbol (showbase is false by default) must be consumed\n+// if present, since \"rest of the sign\" is left to read.\n+void test07()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> InIt;\n+\n+  bool intl = false;\n+  ios_base::iostate err;\n+\n+  locale loc_a(locale::classic(), new My_money_io_a);\n+\n+  wstring buffer_a(L\"(1234.56 $)\");\n+  wstring buffer_a_ns(L\"(1234.56 )\");\n+\n+  InIt iend_a, iend_a_ns;\n+  wstring val_a, val_a_ns;\n+\n+  const money_get<wchar_t,InIt>& mg_a  =\n+    use_facet<money_get<wchar_t, InIt> >(loc_a);\n+\n+  wistringstream fmt_a(buffer_a);\n+  fmt_a.imbue(loc_a);\n+  InIt ibeg_a(fmt_a);\n+  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n+  VERIFY( val_a == L\"123456\" );\n+\n+  wistringstream fmt_a_ns(buffer_a_ns);\n+  fmt_a_ns.imbue(loc_a);\n+  InIt ibeg_a_ns(fmt_a_ns);\n+  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n+  VERIFY( val_a_ns == L\"123456\" );\n+\n+  locale loc_b(locale::classic(), new My_money_io_b);\n+\n+  wstring buffer_b(L\"(1234.56$)\");\n+  wstring buffer_b_ns(L\"(1234.56)\");\n+\n+  InIt iend_b, iend_b_ns;\n+  wstring val_b, val_b_ns;\n+\n+  const money_get<wchar_t,InIt>& mg_b  =\n+    use_facet<money_get<wchar_t, InIt> >(loc_b);\n+\n+  wistringstream fmt_b(buffer_b);\n+  fmt_b.imbue(loc_b);\n+  InIt ibeg_b(fmt_b);\n+  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n+  VERIFY( val_b == L\"123456\" );\n+\n+  wistringstream fmt_b_ns(buffer_b_ns);\n+  fmt_b_ns.imbue(loc_b);\n+  InIt ibeg_b_ns(fmt_b_ns);\n+  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n+  VERIFY( val_b_ns == L\"123456\" );\n+}\n #endif\n \n int main()\n@@ -431,6 +530,7 @@ int main()\n   test04();\n   test05();\n   test06();\n+  test07();\n #endif\n   return 0;\n }"}]}