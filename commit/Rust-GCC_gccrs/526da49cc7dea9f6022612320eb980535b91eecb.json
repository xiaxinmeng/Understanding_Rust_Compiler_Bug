{"sha": "526da49cc7dea9f6022612320eb980535b91eecb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2ZGE0OWNjN2RlYTlmNjAyMjYxMjMyMGViOTgwNTM1YjkxZWVjYg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-12-09T04:26:28Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-12-09T04:26:28Z"}, "message": "bitset, [...]: Remove trailing whitespace.\n\n\t* include/debug/bitset, include/debug/debug.h, include/debug/deque,\n\tinclude/debug/formatter.h, include/debug/hash_map.h,\n\tinclude/debug/hash_multimap.h, include/debug/hash_multiset.h,\n\tinclude/debug/hash_set, include/debug/hash_set.h, include/debug/list,\n\tinclude/debug/map.h, include/debug/multimap.h,\n\tinclude/debug/multiset.h, include/debug/safe_base.h,\n\tinclude/debug/safe_iterator.h, include/debug/safe_iterator.tcc,\n\tinclude/debug/safe_sequence.h, include/debug/set.h,\n\tinclude/debug/string, include/debug/vector: Remove trailing whitespace.\n\nFrom-SVN: r74463", "tree": {"sha": "ac7c2f2acc6d92bc9cfb2124d2d9ff415962bc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7c2f2acc6d92bc9cfb2124d2d9ff415962bc49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/526da49cc7dea9f6022612320eb980535b91eecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526da49cc7dea9f6022612320eb980535b91eecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526da49cc7dea9f6022612320eb980535b91eecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526da49cc7dea9f6022612320eb980535b91eecb/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f86b51673a67a9a8f4c1d5232aa9fe81962170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f86b51673a67a9a8f4c1d5232aa9fe81962170"}], "stats": {"total": 2306, "additions": 1159, "deletions": 1147}, "files": [{"sha": "d6aaf444aa245128876311befb09b7a98c7575b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -1,3 +1,15 @@\n+2003-12-09  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* include/debug/bitset, include/debug/debug.h, include/debug/deque,\n+\tinclude/debug/formatter.h, include/debug/hash_map.h,\n+\tinclude/debug/hash_multimap.h, include/debug/hash_multiset.h,\n+\tinclude/debug/hash_set, include/debug/hash_set.h, include/debug/list,\n+\tinclude/debug/map.h, include/debug/multimap.h,\n+\tinclude/debug/multiset.h, include/debug/safe_base.h,\n+\tinclude/debug/safe_iterator.h, include/debug/safe_iterator.tcc,\n+\tinclude/debug/safe_sequence.h, include/debug/set.h,\n+\tinclude/debug/string, include/debug/vector: Remove trailing whitespace.\n+\n 2003-12-09  Bernardo Innocenti  <bernie@develer.com>\n \n \t* include/c_compatibility/iso646.h, include/c_compatibility/limits.h,"}, {"sha": "89244226dd7adfae9fd8ffc148b7459a5ba8a422", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -36,25 +36,25 @@\n #include <debug/safe_iterator.h>\n \n namespace __gnu_debug_def\n-{ \n-  template<size_t _Nb> \n+{\n+  template<size_t _Nb>\n     class bitset\n     : public __gnu_norm::bitset<_Nb>, public __gnu_debug::_Safe_sequence_base\n     {\n-      typedef  __gnu_norm::bitset<_Nb> \t   \t_Base;\n+      typedef  __gnu_norm::bitset<_Nb>\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence_base  _Safe_base;\n \n     public:\n       // bit reference:\n-      class reference \n+      class reference\n       : private _Base::reference, public __gnu_debug::_Safe_iterator_base\n       {\n \ttypedef typename _Base::reference _Base_ref;\n \n \tfriend class bitset;\n \treference();\n-\t\n-\treference(const _Base_ref& __base, bitset* __seq) \n+\n+\treference(const _Base_ref& __base, bitset* __seq)\n \t: _Base_ref(__base), _Safe_iterator_base(__seq, false)\n \t{ }\n \n@@ -63,7 +63,7 @@ namespace __gnu_debug_def\n \t: _Base_ref(__x), _Safe_iterator_base(__x, false)\n \t{ }\n \n-\treference& \n+\treference&\n \toperator=(bool __x)\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n@@ -73,7 +73,7 @@ namespace __gnu_debug_def\n \t  return *this;\n \t}\n \n-\treference& \n+\treference&\n \toperator=(const reference& __x)\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! __x._M_singular(),\n@@ -85,25 +85,25 @@ namespace __gnu_debug_def\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n \t}\n-\t\n-\tbool \n+\n+\tbool\n \toperator~() const\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t       _M_message(::__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n-\t\n+\n \toperator bool() const\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(::__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return *static_cast<const _Base_ref*>(this);\n \t}\n-\t\n-\treference& \n+\n+\treference&\n \tflip()\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n@@ -116,170 +116,170 @@ namespace __gnu_debug_def\n \n       // 23.3.5.1 constructors:\n       bitset() : _Base() { }\n-      \n+\n       bitset(unsigned long __val) : _Base(__val) { }\n-      \n+\n       template<typename _CharT, typename _Traits, typename _Allocator>\n-        explicit \n+        explicit\n         bitset(const std::basic_string<_CharT,_Traits,_Allocator>& __str,\n \t       typename std::basic_string<_CharT,_Traits,_Allocator>::size_type\n \t       __pos = 0,\n \t       typename std::basic_string<_CharT,_Traits,_Allocator>::size_type\n-  \t       __n = (std::basic_string<_CharT,_Traits,_Allocator>::npos))\n+\t       __n = (std::basic_string<_CharT,_Traits,_Allocator>::npos))\n \t: _Base(__str, __pos, __n) { }\n \n       bitset(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n       // 23.3.5.2 bitset operations:\n-      bitset<_Nb>& \n+      bitset<_Nb>&\n       operator&=(const bitset<_Nb>& __rhs)\n       {\n \t_M_base() &= __rhs;\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       operator|=(const bitset<_Nb>& __rhs)\n       {\n \t_M_base() != __rhs;\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       operator^=(const bitset<_Nb>& __rhs)\n       {\n \t_M_base() ^= __rhs;\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       operator<<=(size_t __pos)\n       {\n \t_M_base() <<= __pos;\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       operator>>=(size_t __pos)\n       {\n \t_M_base() >>= __pos;\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       set()\n       {\n \t_Base::set();\n \treturn *this;\n       }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 186. bitset::set() second parameter should be bool \n-      bitset<_Nb>& \n+      // 186. bitset::set() second parameter should be bool\n+      bitset<_Nb>&\n       set(size_t __pos, bool __val = true)\n       {\n \t_Base::set(__pos, __val);\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       reset()\n       {\n \t_Base::reset();\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       reset(size_t __pos)\n       {\n \t_Base::reset(__pos);\n \treturn *this;\n       }\n-      \n+\n       bitset<_Nb> operator~() const { return bitset(~_M_base()); }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       flip()\n       {\n \t_Base::flip();\n \treturn *this;\n       }\n-      \n-      bitset<_Nb>& \n+\n+      bitset<_Nb>&\n       flip(size_t __pos)\n       {\n \t_Base::flip(__pos);\n \treturn *this;\n       }\n-      \n+\n       // element access:\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 11. Bitset minor problems \n-      reference \n+      // 11. Bitset minor problems\n+      reference\n       operator[](size_t __pos)\n-      { \n+      {\n \t__glibcxx_check_subscript(__pos);\n-\treturn reference(_M_base()[__pos], this); \n+\treturn reference(_M_base()[__pos], this);\n       }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 11. Bitset minor problems \n-      bool \n-      operator[](size_t __pos) const \n-      { \n+      // 11. Bitset minor problems\n+      bool\n+      operator[](size_t __pos) const\n+      {\n \t__glibcxx_check_subscript(__pos);\n-\treturn _M_base()[__pos]; \n+\treturn _M_base()[__pos];\n       }\n-      \n+\n       using _Base::to_ulong;\n-      \n+\n       template <typename _CharT, typename _Traits, typename _Allocator>\n-        std::basic_string<_CharT, _Traits, _Allocator> \n+        std::basic_string<_CharT, _Traits, _Allocator>\n         to_string() const\n         { return _M_base().template to_string<_CharT, _Traits, _Allocator>(); }\n-      \n+\n       using _Base::count;\n       using _Base::size;\n-      \n-      bool \n+\n+      bool\n       operator==(const bitset<_Nb>& __rhs) const\n       { return _M_base() == __rhs; }\n \n-      bool \n+      bool\n       operator!=(const bitset<_Nb>& __rhs) const\n       { return _M_base() != __rhs; }\n-      \n+\n       using _Base::test;\n       using _Base::any;\n       using _Base::none;\n-      \n-      bitset<_Nb> \n+\n+      bitset<_Nb>\n       operator<<(size_t __pos) const\n       { return bitset<_Nb>(_M_base() << __pos); }\n-      \n-      bitset<_Nb> \n+\n+      bitset<_Nb>\n       operator>>(size_t __pos) const\n       { return bitset<_Nb>(_M_base() >> __pos); }\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n     };\n- \n+\n   template<size_t _Nb>\n-    bitset<_Nb> \n+    bitset<_Nb>\n     operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n     { return bitset<_Nb>(__x) &= __y; }\n-  \n+\n   template<size_t _Nb>\n-    bitset<_Nb> \n+    bitset<_Nb>\n     operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n     { return bitset<_Nb>(__x) |= __y; }\n \n   template<size_t _Nb>\n-    bitset<_Nb> \n+    bitset<_Nb>\n     operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n     { return bitset<_Nb>(__x) ^= __y; }\n \n@@ -290,7 +290,7 @@ namespace __gnu_debug_def\n \n   template<typename _CharT, typename _Traits, size_t _Nb>\n     std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os, \n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const bitset<_Nb>& __x)\n     { return __os << __x._M_base(); }\n } // namespace __gnu_debug_def"}, {"sha": "87bbcfa4db68cb66a62a77e35166542b15e12b8c", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -174,7 +174,7 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n \t\t\t\t\t\t\t _Value),\t\\\n \t\t      _M_message(::__gnu_debug::__msg_unpartitioned) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n-\t\t      ._M_iterator(_Last, #_Last) \t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Value))\n \n /** Verify that the iterator range [_First, _Last) is partitioned\n@@ -185,7 +185,7 @@ _GLIBCXX_DEBUG_VERIFY(::__gnu_debug::__check_partitioned(_First, _Last,\t\\\n \t\t\t\t\t\t\t _Value, _Pred), \\\n \t\t      _M_message(::__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n-\t\t      ._M_iterator(_Last, #_Last) \t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred)\t\t\t\t\\\n                       ._M_string(#_Value))\n \n@@ -267,7 +267,7 @@ _GLIBCXX_DEBUG_VERIFY(::std::__is_heap(_First, _Last, _Pred),\t\t\\\n #  define __glibcxx_requires_string(_String)\n #  define __glibcxx_requires_string_len(_String,_Len)\n #  define __glibcxx_requires_subscript(_N)\n-#endif \n+#endif\n \n #include <cassert> // TBD: temporary\n \n@@ -277,11 +277,11 @@ _GLIBCXX_DEBUG_VERIFY(::std::__is_heap(_First, _Last, _Pred),\t\t\\\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence> \n+  template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n   // An arbitrary iterator pointer is not singular.\n-  inline bool \n+  inline bool\n   __check_singular_aux(const void*) { return false; }\n \n   // We may have an iterator that derives from _Safe_iterator_base but isn't\n@@ -323,11 +323,11 @@ namespace __gnu_debug\n     { return __x._M_dereferenceable(); }\n \n   /** If the distance between two random access iterators is\n-   *  nonnegative, assume the range is valid. \n+   *  nonnegative, assume the range is valid.\n   */\n   template<typename _RandomAccessIterator>\n     inline bool\n-    __valid_range_aux2(const _RandomAccessIterator& __first, \n+    __valid_range_aux2(const _RandomAccessIterator& __first,\n \t\t       const _RandomAccessIterator& __last,\n \t\t       std::random_access_iterator_tag)\n     { return __last - __first >= 0; }\n@@ -344,7 +344,7 @@ namespace __gnu_debug\n \n   /** We say that integral types for a valid range, and defer to other\n    *  routines to realize what to do with integral types instead of\n-   *  iterators. \n+   *  iterators.\n   */\n   template<typename _Integral>\n     inline bool\n@@ -356,12 +356,12 @@ namespace __gnu_debug\n   */\n   template<typename _InputIterator>\n     inline bool\n-    __valid_range_aux(const _InputIterator& __first, \n+    __valid_range_aux(const _InputIterator& __first,\n \t\t      const _InputIterator& __last, __false_type)\n   {\n     typedef typename std::iterator_traits<_InputIterator>::iterator_category\n       _Category;\n-    return __gnu_debug::__valid_range_aux2(__first, __last, _Category()); \n+    return __gnu_debug::__valid_range_aux2(__first, __last, _Category());\n   }\n \n   /** Don't know what these iterators are, or if they are even\n@@ -372,25 +372,25 @@ namespace __gnu_debug\n   template<typename _InputIterator>\n     inline bool\n     __valid_range(const _InputIterator& __first, const _InputIterator& __last)\n-    { \n+    {\n       typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n       return __gnu_debug::__valid_range_aux(__first, __last, _Integral());\n     }\n \n   /** Safe iterators know how to check if they form a valid range. */\n   template<typename _Iterator, typename _Sequence>\n-    inline bool \n+    inline bool\n     __valid_range(const _Safe_iterator<_Iterator, _Sequence>& __first,\n \t\t  const _Safe_iterator<_Iterator, _Sequence>& __last)\n     { return __first._M_valid_range(__last); }\n \n   /* Checks that [first, last) is a valid range, and then returns\n    * __first. This routine is useful when we can't use a separate\n-   * assertion statement because, e.g., we are in a constructor. \n+   * assertion statement because, e.g., we are in a constructor.\n   */\n   template<typename _InputIterator>\n     inline _InputIterator\n-    __check_valid_range(const _InputIterator& __first, \n+    __check_valid_range(const _InputIterator& __first,\n \t\t\tconst _InputIterator& __last)\n     {\n       _GLIBCXX_DEBUG_ASSERT(__gnu_debug::__valid_range(__first, __last));\n@@ -422,7 +422,7 @@ namespace __gnu_debug\n   // Can't check if an input iterator sequence is sorted, because we\n   // can't step through the sequence.\n   template<typename _InputIterator>\n-    inline bool \n+    inline bool\n     __check_sorted_aux(const _InputIterator&, const _InputIterator&,\n                        std::input_iterator_tag)\n     { return true; }\n@@ -433,7 +433,7 @@ namespace __gnu_debug\n     inline bool\n     __check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last,\n                        std::forward_iterator_tag)\n-    { \n+    {\n       if (__first == __last)\n         return true;\n \n@@ -449,7 +449,7 @@ namespace __gnu_debug\n   // Can't check if an input iterator sequence is sorted, because we can't step\n   // through the sequence.\n   template<typename _InputIterator, typename _Predicate>\n-    inline bool \n+    inline bool\n     __check_sorted_aux(const _InputIterator&, const _InputIterator&,\n                        _Predicate, std::input_iterator_tag)\n     { return true; }\n@@ -458,9 +458,9 @@ namespace __gnu_debug\n   // std::__is_sorted\n   template<typename _ForwardIterator, typename _Predicate>\n     inline bool\n-    __check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last, \n+    __check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last,\n                        _Predicate __pred, std::forward_iterator_tag)\n-    { \n+    {\n       if (__first == __last)\n         return true;\n \n@@ -477,8 +477,8 @@ namespace __gnu_debug\n   template<typename _InputIterator>\n     inline bool\n     __check_sorted(const _InputIterator& __first, const _InputIterator& __last)\n-    { \n-      typedef typename std::iterator_traits<_InputIterator>::iterator_category \n+    {\n+      typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n       return __gnu_debug::__check_sorted_aux(__first, __last, _Category());\n     }\n@@ -487,15 +487,15 @@ namespace __gnu_debug\n     inline bool\n     __check_sorted(const _InputIterator& __first, const _InputIterator& __last,\n                    _Predicate __pred)\n-    { \n-      typedef typename std::iterator_traits<_InputIterator>::iterator_category \n+    {\n+      typedef typename std::iterator_traits<_InputIterator>::iterator_category\n         _Category;\n       return __gnu_debug::__check_sorted_aux(__first, __last, __pred,\n \t\t\t\t\t     _Category());\n     }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 270. Binary search requirements overly strict \n+  // 270. Binary search requirements overly strict\n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n@@ -528,4 +528,4 @@ namespace __gnu_debug\n #  include <debug/formatter.h>\n #endif\n \n-#endif \n+#endif"}, {"sha": "ed68b37a79867d6468721467e7d79bf656c34592", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -38,7 +38,7 @@\n namespace __gnu_debug_def\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n-    class deque \n+    class deque\n     : public  __gnu_norm::deque<_Tp, _Allocator>,\n     public __gnu_debug::_Safe_sequence<deque<_Tp, _Allocator> >\n     {\n@@ -48,17 +48,17 @@ namespace __gnu_debug_def\n     public:\n       typedef typename _Allocator::reference        reference;\n       typedef typename _Allocator::const_reference  const_reference;\n-      \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,deque> \n-      \t\t\t\t\t\t    iterator;\n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,deque>\n+\t\t\t\t\t\t    iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,deque>\n \t\t\t\t\t\t     const_iterator;\n-      \n+\n       typedef typename _Base::size_type             size_type;\n       typedef typename _Base::difference_type       difference_type;\n-      \n-      typedef _Tp        \t\t\t    value_type;\n-      typedef _Allocator \t\t\t    allocator_type;\n+\n+      typedef _Tp\t\t\t\t    value_type;\n+      typedef _Allocator\t\t\t    allocator_type;\n       typedef typename _Allocator::pointer          pointer;\n       typedef typename _Allocator::const_pointer    const_pointer;\n       typedef std::reverse_iterator<iterator>       reverse_iterator;\n@@ -81,187 +81,187 @@ namespace __gnu_debug_def\n       deque(const deque<_Tp,_Allocator>& __x) : _Base(__x), _Safe_base() { }\n \n       deque(const _Base& __x) : _Base(__x), _Safe_base() { }\n-      \n+\n       ~deque() { }\n-      \n-      deque<_Tp,_Allocator>& \n+\n+      deque<_Tp,_Allocator>&\n       operator=(const deque<_Tp,_Allocator>& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n-      \n+\n       template<class _InputIterator>\n-        void \n+        void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::assign(__first, __last);\n \t  this->_M_invalidate_all();\n \t}\n \n-      void \n+      void\n       assign(size_type __n, const _Tp& __t)\n       {\n \t_Base::assign(__n, __t);\n \tthis->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::get_allocator;\n-      \n+\n       // iterators:\n-      iterator \n-      begin() \n+      iterator\n+      begin()\n       { return iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      iterator \n-      end() \n+\n+      iterator\n+      end()\n       { return iterator(_Base::end(), this); }\n-      \n-      const_iterator \n-      end() const \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n-      \n-      reverse_iterator \n-      rbegin() \n+\n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n-      \n-      const_reverse_iterator \n+\n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n-      \n-      reverse_iterator \n-      rend() \n+\n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n-      \n-      const_reverse_iterator \n+\n+      const_reverse_iterator\n       rend() const\n       { return const_reverse_iterator(begin()); }\n-      \n+\n       // 23.2.1.2 capacity:\n       using _Base::size;\n       using _Base::max_size;\n-      \n-      void \n+\n+      void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_After_nth_from<_Base_const_iterator> _After_nth;\n-\t\n+\n \tbool __invalidate_all = __sz > this->size();\n \tif (__sz < this->size())\n \t  this->_M_invalidate_if(_After_nth(__sz, _M_base().begin()));\n-\t\n+\n \t_Base::resize(__sz, __c);\n-\t\n+\n \tif (__invalidate_all)\n \t  this->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::empty;\n-      \n+\n       // element access:\n-      reference \n+      reference\n       operator[](size_type __n)\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n-      \n-      const_reference \n+\n+      const_reference\n       operator[](size_type __n) const\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n-      \n+\n       using _Base::at;\n-      \n-      reference \n+\n+      reference\n       front()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n-      \n-      const_reference \n+\n+      const_reference\n       front() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n-      \n-      reference \n+\n+      reference\n       back()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n-      \n-      const_reference \n+\n+      const_reference\n       back() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n-      \n+\n       // 23.2.1.3 modifiers:\n-      void \n+      void\n       push_front(const _Tp& __x)\n       {\n \t_Base::push_front(__x);\n \tthis->_M_invalidate_all();\n       }\n-      \n-      void \n+\n+      void\n       push_back(const _Tp& __x)\n       {\n \t_Base::push_back(__x);\n \tthis->_M_invalidate_all();\n       }\n-      \n-      iterator \n+\n+      iterator\n       insert(iterator __position, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \ttypename _Base::iterator __res = _Base::insert(__position.base(), __x);\n \tthis->_M_invalidate_all();\n \treturn iterator(__res, this);\n       }\n-      \n-      void \n+\n+      void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \t_Base::insert(__position.base(), __n, __x);\n \tthis->_M_invalidate_all();\n       }\n-      \n+\n       template<class _InputIterator>\n-        void \n-        insert(iterator __position, \n+        void\n+        insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_insert_range(__position, __first, __last);\n \t  _Base::insert(__position.base(), __first, __last);\n \t  this->_M_invalidate_all();\n \t}\n-      \n-      void \n+\n+      void\n       pop_front()\n       {\n \t__glibcxx_check_nonempty();\n \titerator __victim = begin();\n \t__victim._M_invalidate();\n \t_Base::pop_front();\n       }\n-      \n-      void \n+\n+      void\n       pop_back()\n       {\n \t__glibcxx_check_nonempty();\n@@ -270,8 +270,8 @@ namespace __gnu_debug_def\n \t__victim._M_invalidate();\n \t_Base::pop_back();\n       }\n-      \n-      iterator \n+\n+      iterator\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n@@ -287,8 +287,8 @@ namespace __gnu_debug_def\n \t    return iterator(__res, this);\n \t  }\n       }\n-      \n-      iterator \n+\n+      iterator\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -302,10 +302,10 @@ namespace __gnu_debug_def\n \t\titerator __victim = __position++;\n \t\t__victim._M_invalidate();\n \t      }\n-\t    try \n-\t      { \n+\t    try\n+\t      {\n \t\treturn iterator(_Base::erase(__first.base(), __last.base()),\n-\t\t\t\tthis); \n+\t\t\t\tthis);\n \t      }\n \t    catch (...)\n \t      {\n@@ -315,43 +315,43 @@ namespace __gnu_debug_def\n \t  }\n \telse\n \t  {\n-\t    typename _Base::iterator __res = _Base::erase(__first.base(), \n+\t    typename _Base::iterator __res = _Base::erase(__first.base(),\n \t\t\t\t\t\t\t  __last.base());\n \t    this->_M_invalidate_all();\n \t    return iterator(__res, this);\n \t  }\n       }\n-      \n-      void \n+\n+      void\n       swap(deque<_Tp,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      void \n+\n+      void\n       clear()\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base()       { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n     };\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator==(const deque<_Tp, _Alloc>& __lhs, \n+    operator==(const deque<_Tp, _Alloc>& __lhs,\n \t       const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator!=(const deque<_Tp, _Alloc>& __lhs, \n+    operator!=(const deque<_Tp, _Alloc>& __lhs,\n \t       const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n@@ -362,13 +362,13 @@ namespace __gnu_debug_def\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<=(const deque<_Tp, _Alloc>& __lhs, \n+    operator<=(const deque<_Tp, _Alloc>& __lhs,\n \t       const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>=(const deque<_Tp, _Alloc>& __lhs, \n+    operator>=(const deque<_Tp, _Alloc>& __lhs,\n \t       const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n "}, {"sha": "6ed00bd868e6f31ce304a42b1c02908fac6c2656", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -55,10 +55,10 @@ namespace __gnu_debug\n \n   class _Safe_sequence_base;\n \n-  template<typename _Iterator, typename _Sequence> \n+  template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n-  template<typename _Sequence> \n+  template<typename _Sequence>\n     class _Safe_sequence;\n \n   enum _Debug_msg_id\n@@ -123,7 +123,7 @@ namespace __gnu_debug\n       __const_iterator,\n       __mutable_iterator,\n       __last_constness\n-    }; \n+    };\n \n     // The state of the iterator (fine-grained), if we know it.\n     enum _Iterator_state\n@@ -143,29 +143,29 @@ namespace __gnu_debug\n     // A parameter that may be referenced by an error message\n     struct _Parameter\n     {\n-      enum \n-      { \n-\t__unused_param, \n-\t__iterator, \n-\t__sequence, \n+      enum\n+      {\n+\t__unused_param,\n+\t__iterator,\n+\t__sequence,\n \t__integer,\n \t__string\n       } _M_kind;\n-      \n+\n       union\n       {\n \t// When _M_kind == __iterator\n-\tstruct \n+\tstruct\n \t{\n-\t  const char*      _M_name;      \n-\t  const void*      _M_address;   \n-\t  const type_info* _M_type;   \n+\t  const char*      _M_name;\n+\t  const void*      _M_address;\n+\t  const type_info* _M_type;\n \t  _Constness       _M_constness;\n \t  _Iterator_state  _M_state;\n-\t  const void*      _M_sequence;  \n+\t  const void*      _M_sequence;\n \t  const type_info* _M_seq_type;\n \t} _M_iterator;\n-\t\n+\n \t// When _M_kind == __sequence\n \tstruct\n \t{\n@@ -190,17 +190,17 @@ namespace __gnu_debug\n       } _M_variant;\n \n       _Parameter() : _M_kind(__unused_param) { }\n-      \n+\n       _Parameter(long __value, const char* __name) : _M_kind(__integer)\n-      { \n+      {\n \t_M_variant._M_integer._M_name = __name;\n-\t_M_variant._M_integer._M_value = __value; \n+\t_M_variant._M_integer._M_value = __value;\n       }\n \n       _Parameter(const char* __value, const char* __name) : _M_kind(__string)\n       {\n \t_M_variant._M_string._M_name = __name;\n-\t_M_variant._M_string._M_value = __value; \n+\t_M_variant._M_string._M_value = __value;\n       }\n \n       template<typename _Iterator, typename _Sequence>\n@@ -211,7 +211,7 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n-\t  _M_variant._M_iterator._M_constness = \n+\t  _M_variant._M_iterator._M_constness =\n \t    __is_same<_Safe_iterator<_Iterator, _Sequence>,\n \t                         typename _Sequence::iterator>::\n \t      value? __mutable_iterator : __const_iterator;\n@@ -258,7 +258,7 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_sequence = 0;\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n-      \n+\n       template<typename _Iterator>\n         _Parameter(const _Iterator& __it, const char* __name, _Is_iterator)\n \t: _M_kind(__iterator)\n@@ -267,19 +267,19 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_address = &__it;\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n \t  _M_variant._M_iterator._M_constness = __unknown_constness;\n-\t  _M_variant._M_iterator._M_state = \n+\t  _M_variant._M_iterator._M_state =\n \t    __gnu_debug::__check_singular(__it)? __singular : __unknown_state;\n \t  _M_variant._M_iterator._M_sequence = 0;\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n \n       template<typename _Sequence>\n-        _Parameter(const _Safe_sequence<_Sequence>& __seq, \n+        _Parameter(const _Safe_sequence<_Sequence>& __seq,\n \t\t   const char* __name, _Is_sequence)\n \t: _M_kind(__sequence)\n         {\n \t  _M_variant._M_sequence._M_name = __name;\n-\t  _M_variant._M_sequence._M_address = \n+\t  _M_variant._M_sequence._M_address =\n \t    static_cast<const _Sequence*>(&__seq);\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n \t}\n@@ -292,18 +292,18 @@ namespace __gnu_debug\n \t  _M_variant._M_sequence._M_address = &__seq;\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n \t}\n-      \n+\n       void\n-      _M_print_field(const _Error_formatter* __formatter, \n+      _M_print_field(const _Error_formatter* __formatter,\n \t\t     const char* __name) const;\n-\t\t\t\t\t \n+\n       void\n       _M_print_description(const _Error_formatter* __formatter) const;\n     };\n \n     friend struct _Parameter;\n \n-  public:    \n+  public:\n     template<typename _Iterator>\n       const _Error_formatter&\n       _M_iterator(const _Iterator& __it, const char* __name = 0)  const\n@@ -335,7 +335,7 @@ namespace __gnu_debug\n       _M_sequence(const _Sequence& __seq, const char* __name = 0) const\n       {\n \tif (_M_num_parameters < __max_parameters)\n-\t  _M_parameters[_M_num_parameters++] = _Parameter(__seq, __name, \n+\t  _M_parameters[_M_num_parameters++] = _Parameter(__seq, __name,\n \t\t\t\t\t\t\t  _Is_sequence());\n \treturn *this;\n       }\n@@ -347,7 +347,7 @@ namespace __gnu_debug\n     const _Error_formatter&\n     _M_message(_Debug_msg_id __id) const;\n \n-    void \n+    void\n     _M_error() const;\n \n   private:\n@@ -360,10 +360,10 @@ namespace __gnu_debug\n       void\n       _M_format_word(char*, int, const char*, _Tp) const;\n \n-    void \n+    void\n     _M_print_word(const char* __word) const;\n \n-    void \n+    void\n     _M_print_string(const char* __string) const;\n \n     enum { __max_parameters = 9 };\n@@ -386,4 +386,4 @@ namespace __gnu_debug\n   };\n } // namespace __gnu_debug\n \n-#endif \n+#endif"}, {"sha": "c2cd7b8ca693b65def043805b37d84759b5ef3b8", "filename": "libstdc++-v3/include/debug/hash_map.h", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -45,7 +45,7 @@ namespace __gnu_debug_def\n       public __gnu_debug::_Safe_sequence<hash_map<_Value, _Tp, _HashFcn,\n \t\t\t\t\t\t _EqualKey, _Alloc> >\n     {\n-      typedef __gnu_cxx::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc> \n+      typedef __gnu_cxx::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>\n       \t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_map> \t_Safe_base;\n \n@@ -62,29 +62,29 @@ namespace __gnu_debug_def\n       typedef typename _Base::const_pointer   const_pointer;\n       typedef typename _Base::reference       reference;\n       typedef typename _Base::const_reference const_reference;\n-      \n+\n       typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, hash_map>\n-      \t\t\t\t\t      iterator;\n-      typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, \n+\t\t\t\t\t      iterator;\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n \t\t\t\t\t  hash_map>\n-      \t\t\t\t\t      const_iterator;\n-      \n+\t\t\t\t\t      const_iterator;\n+\n       typedef typename _Base::allocator_type  allocator_type;\n \n       using _Base::hash_funct;\n       using _Base::key_eq;\n       using _Base::get_allocator;\n-      \n+\n       hash_map() { }\n-      \n+\n       explicit hash_map(size_type __n) : _Base(__n) { }\n-      \n+\n       hash_map(size_type __n, const hasher& __hf) : _Base(__n, __hf) { }\n \n       hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __eql, __a) { }\n-    \n+\n       template<typename _InputIterator>\n         hash_map(_InputIterator __f, _InputIterator __l)\n         : _Base(__gnu_debug::__check_valid_range(__f, __l), __l) { }\n@@ -110,102 +110,102 @@ namespace __gnu_debug_def\n       using _Base::size;\n       using _Base::max_size;\n       using _Base::empty;\n-      \n-      void \n+\n+      void\n       swap(hash_map& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      iterator \n+\n+      iterator\n       begin() { return iterator(_Base::begin(), this); }\n \n-      iterator \n+      iterator\n       end() { return iterator(_Base::end(),   this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      end() const \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(),   this); }\n-      \n-      std::pair<iterator, bool> \n+\n+      std::pair<iterator, bool>\n       insert(const value_type& __obj)\n-      { \n+      {\n \tstd::pair<typename _Base::iterator, bool> __res = _Base::insert(__obj);\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n-      \n+\n       template <typename _InputIterator>\n-        void \n-        insert(_InputIterator __first, _InputIterator __last) \n+        void\n+        insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::insert(__first.base(), __last.base());\n \t}\n \n \n-      std::pair<iterator, bool> \n+      std::pair<iterator, bool>\n       insert_noresize(const value_type& __obj)\n-      { \n-\tstd::pair<typename _Base::iterator, bool> __res = \n+      {\n+\tstd::pair<typename _Base::iterator, bool> __res =\n \t                                        _Base::insert_noresize(__obj);\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n-      \n-      iterator \n+\n+      iterator\n       find(const key_type& __key)\n       { return iterator(_Base::find(__key), this); }\n-      \n-      const_iterator \n-      find(const key_type& __key) const \n+\n+      const_iterator\n+      find(const key_type& __key) const\n       { return const_iterator(_Base::find(__key), this); }\n-      \n+\n       using _Base::operator[];\n       using _Base::count;\n-      \n-      std::pair<iterator, iterator> \n+\n+      std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n-      { \n+      {\n \ttypedef typename _Base::iterator _Base_iterator;\n-\tstd::pair<_Base_iterator, _Base_iterator> __res = \n+\tstd::pair<_Base_iterator, _Base_iterator> __res =\n \t                  _Base::equal_range(__key);\n \treturn std::make_pair(iterator(__res.first, this),\n \t\t\t      iterator(__res.second, this));\n       }\n-      \n-      std::pair<const_iterator, const_iterator> \n+\n+      std::pair<const_iterator, const_iterator>\n       equal_range(const key_type& __key) const\n-      { \n+      {\n \ttypedef typename _Base::const_iterator _Base_iterator;\n-\tstd::pair<_Base_iterator, _Base_iterator> __res = \n+\tstd::pair<_Base_iterator, _Base_iterator> __res =\n \t_Base::equal_range(__key);\n \treturn std::make_pair(const_iterator(__res.first, this),\n \t\t\t      const_iterator(__res.second, this));\n       }\n-      \n-      size_type \n-      erase(const key_type& __key) \n+\n+      size_type\n+      erase(const key_type& __key)\n       {\n \titerator __victim(_Base::find(__key), this);\n \tif (__victim != end())\n-  \t  return this->erase(__victim), 1;\n+\t  return this->erase(__victim), 1;\n \telse\n \t  return 0;\n       }\n-      \n-      void \n-      erase(iterator __it) \n+\n+      void\n+      erase(iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n \t_Base::erase(__it.base());\n       }\n-      \n-      void \n+\n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n@@ -216,55 +216,55 @@ namespace __gnu_debug_def\n \t}\n \t_Base::erase(__first.base(), __last.base());\n       }\n-      \n-      void \n-      clear() \n-      { \n+\n+      void\n+      clear()\n+      {\n \t_Base::clear();\n-\tthis->_M_invalidate_all(); \n+\tthis->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::resize;\n       using _Base::bucket_count;\n       using _Base::max_bucket_count;\n       using _Base::elems_in_bucket;\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base()       { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n-      \n+\n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_Not_equal_to<_Base_const_iterator> _Not_equal;\n \tthis->_M_invalidate_if(_Not_equal(_M_base().end()));\n       }\n     };\n-  \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+\n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline bool\n     operator==(const hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,\n \t       const hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { return __x._M_base() == __y._M_base(); }\n \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline bool\n     operator!=(const hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,\n \t       const hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { return __x._M_base() != __y._M_base(); }\n \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline void\n     swap(hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,\n \t hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n } // namespace __gnu_debug_def\n \n-#endif \n+#endif"}, {"sha": "83b4425aaf0c878a215bb022f6fa0cba05be18f6", "filename": "libstdc++-v3/include/debug/hash_multimap.h", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -46,24 +46,24 @@ namespace __gnu_debug_def\n \t\t\t\t\t\t       _EqualKey, _Alloc> >\n     {\n       typedef __gnu_cxx::hash_multimap<_Value,_Tp,_HashFcn, _EqualKey,_Alloc>\n-      \t\t\t\t\t\t\t_Base;\n+\t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_multimap> _Safe_base;\n \n   public:\n-      typedef typename _Base::key_type        \t\tkey_type;\n-      typedef typename _Base::data_type       \t\tdata_type;\n-      typedef typename _Base::mapped_type     \t\tmapped_type;\n-      typedef typename _Base::value_type      \t\tvalue_type;\n-      typedef typename _Base::hasher          \t\thasher;\n-      typedef typename _Base::key_equal       \t\tkey_equal;\n-      typedef typename _Base::size_type       \t\tsize_type;\n-      typedef typename _Base::difference_type \t\tdifference_type;\n-      typedef typename _Base::pointer         \t\tpointer;\n-      typedef typename _Base::const_pointer   \t\tconst_pointer;\n-      typedef typename _Base::reference       \t\treference;\n-      typedef typename _Base::const_reference \t\tconst_reference;\n-\n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, \n+      typedef typename _Base::key_type\t\t\tkey_type;\n+      typedef typename _Base::data_type\t\t\tdata_type;\n+      typedef typename _Base::mapped_type\t\tmapped_type;\n+      typedef typename _Base::value_type\t\tvalue_type;\n+      typedef typename _Base::hasher\t\t\thasher;\n+      typedef typename _Base::key_equal\t\t\tkey_equal;\n+      typedef typename _Base::size_type\t\t\tsize_type;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,\n \t\t\t\t\t  hash_multimap> iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n \t\t\t\t\t  hash_multimap> const_iterator;\n@@ -73,17 +73,17 @@ namespace __gnu_debug_def\n       using _Base::hash_funct;\n       using _Base::key_eq;\n       using _Base::get_allocator;\n-      \n+\n       hash_multimap() { }\n-      \n+\n       explicit hash_multimap(size_type __n) : _Base(__n) { }\n-      \n+\n       hash_multimap(size_type __n, const hasher& __hf) : _Base(__n, __hf) { }\n \n       hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,\n \t\t    const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __eql, __a) { }\n-    \n+\n       template<typename _InputIterator>\n         hash_multimap(_InputIterator __f, _InputIterator __l)\n \t: _Base(__gnu_debug::__check_valid_range(__f, __l), __l) { }\n@@ -107,96 +107,96 @@ namespace __gnu_debug_def\n       using _Base::size;\n       using _Base::max_size;\n       using _Base::empty;\n-      \n-      void \n+\n+      void\n       swap(hash_multimap& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      iterator \n+\n+      iterator\n       begin() { return iterator(_Base::begin(), this); }\n \n-      iterator \n+      iterator\n       end()   { return iterator(_Base::end(),   this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      end() const \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(),   this); }\n-      \n+\n       iterator\n       insert(const value_type& __obj)\n       { return iterator(_Base::insert(__obj), this); }\n-      \n+\n       template <typename _InputIterator>\n-        void \n-        insert(_InputIterator __first, _InputIterator __last) \n+        void\n+        insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::insert(__first.base(), __last.base());\n \t}\n-      \n+\n       iterator\n       insert_noresize(const value_type& __obj)\n       { return iterator(_Base::insert_noresize(__obj), this); }\n-      \n-      iterator \n+\n+      iterator\n       find(const key_type& __key)\n       { return iterator(_Base::find(__key), this); }\n-      \n-      const_iterator \n-      find(const key_type& __key) const \n+\n+      const_iterator\n+      find(const key_type& __key) const\n       { return const_iterator(_Base::find(__key), this); }\n-      \n+\n       using _Base::count;\n-      \n-      std::pair<iterator, iterator> \n+\n+      std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n-      { \n+      {\n \ttypedef typename _Base::iterator _Base_iterator;\n-\tstd::pair<_Base_iterator, _Base_iterator> __res = \n+\tstd::pair<_Base_iterator, _Base_iterator> __res =\n \t                                             _Base::equal_range(__key);\n \treturn std::make_pair(iterator(__res.first, this),\n \t\t\t      iterator(__res.second, this));\n       }\n-      \n-      std::pair<const_iterator, const_iterator> \n+\n+      std::pair<const_iterator, const_iterator>\n       equal_range(const key_type& __key) const\n-      { \n+      {\n \ttypedef typename _Base::const_iterator _Base_iterator;\n-\tstd::pair<_Base_iterator, _Base_iterator> __res = \n+\tstd::pair<_Base_iterator, _Base_iterator> __res =\n         _Base::equal_range(__key);\n \treturn std::make_pair(const_iterator(__res.first, this),\n \t\t\t      const_iterator(__res.second, this));\n       }\n-      \n-      size_type \n-      erase(const key_type& __key) \n+\n+      size_type\n+      erase(const key_type& __key)\n       {\n \tstd::pair<iterator, iterator> __victims = this->equal_range(__key);\n \tsize_t __num_victims = 0;\n-\twhile (__victims.first != __victims.second) \n+\twhile (__victims.first != __victims.second)\n \t{\n \t  this->erase(__victims.first++);\n \t  ++__num_victims;\n \t}\n \treturn __num_victims;\n       }\n-    \n-      void \n-      erase(iterator __it) \n+\n+      void\n+      erase(iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n \t_Base::erase(__it.base());\n       }\n-      \n-      void \n+\n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n@@ -207,50 +207,50 @@ namespace __gnu_debug_def\n \t}\n \t_Base::erase(__first.base(), __last.base());\n       }\n-      \n-      void \n-      clear() \n-      { \n+\n+      void\n+      clear()\n+      {\n \t_Base::clear();\n-\tthis->_M_invalidate_all(); \n+\tthis->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::resize;\n       using _Base::bucket_count;\n       using _Base::max_bucket_count;\n       using _Base::elems_in_bucket;\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base()       { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n-      \n+\n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_Not_equal_to<_Base_const_iterator> _Not_equal;\n \tthis->_M_invalidate_if(_Not_equal(_M_base().end()));\n       }\n     };\n-  \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+\n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline bool\n     operator==(const hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>& __x,\n \t       const hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>& __y)\n     { return __x._M_base() == __y._M_base(); }\n \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline bool\n     operator!=(const hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>& __x,\n \t       const hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>& __y)\n     { return __x._M_base() != __y._M_base(); }\n-  \n-  template<typename _Value, typename _Tp, typename _HashFcn, \n+\n+  template<typename _Value, typename _Tp, typename _HashFcn,\n \t   typename _EqualKey, typename _Alloc>\n     inline void\n     swap(hash_multimap<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,"}, {"sha": "705d8da25329255cbf40b531b8e83c0fce6e58eb", "filename": "libstdc++-v3/include/debug/hash_multiset.h", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -46,22 +46,22 @@ namespace __gnu_debug_def\n \t\t\t\t\t\t       _EqualKey, _Alloc> >\n     {\n       typedef __gnu_cxx:: hash_multiset<_Value,_HashFcn, _EqualKey,_Alloc>\n-      \t\t\t\t\t\t\t_Base;\n+\t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_multiset> _Safe_base;\n \n   public:\n-    typedef typename _Base::key_type        \t\tkey_type;\n-    typedef typename _Base::value_type      \t\tvalue_type;\n-    typedef typename _Base::hasher          \t\thasher;\n-    typedef typename _Base::key_equal       \t\tkey_equal;\n-    typedef typename _Base::size_type       \t\tsize_type;\n-    typedef typename _Base::difference_type \t\tdifference_type;\n-    typedef typename _Base::pointer         \t\tpointer;\n-    typedef typename _Base::const_pointer   \t\tconst_pointer;\n-    typedef typename _Base::reference       \t\treference;\n-    typedef typename _Base::const_reference \t\tconst_reference;\n-\n-    typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, \n+    typedef typename _Base::key_type\t\t\tkey_type;\n+    typedef typename _Base::value_type\t\t\tvalue_type;\n+    typedef typename _Base::hasher\t\t\thasher;\n+    typedef typename _Base::key_equal\t\t\tkey_equal;\n+    typedef typename _Base::size_type\t\t\tsize_type;\n+    typedef typename _Base::difference_type\t\tdifference_type;\n+    typedef typename _Base::pointer\t\t\tpointer;\n+    typedef typename _Base::const_pointer\t\tconst_pointer;\n+    typedef typename _Base::reference\t\t\treference;\n+    typedef typename _Base::const_reference\t\tconst_reference;\n+\n+    typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,\n \t\t\t\t\t hash_multiset> iterator;\n     typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n \t\t\t\t\t hash_multiset> const_iterator;\n@@ -82,7 +82,7 @@ namespace __gnu_debug_def\n \t\t  const allocator_type& __a = allocator_type())\n     : _Base(__n, __hf, __eql, __a)\n     { }\n-    \n+\n     template<typename _InputIterator>\n       hash_multiset(_InputIterator __f, _InputIterator __l)\n       : _Base(__gnu_debug::__check_valid_range(__f, __l), __l)\n@@ -113,7 +113,7 @@ namespace __gnu_debug_def\n     using _Base::max_size;\n     using _Base::empty;\n \n-    void \n+    void\n     swap(hash_multiset& __x)\n     {\n       _Base::swap(__x);\n@@ -128,8 +128,8 @@ namespace __gnu_debug_def\n     { return iterator(_Base::insert(__obj), this); }\n \n     template <typename _InputIterator>\n-      void \n-      insert(_InputIterator __first, _InputIterator __last) \n+      void\n+      insert(_InputIterator __first, _InputIterator __last)\n       {\n \t__glibcxx_check_valid_range(__first, __last);\n \t_Base::insert(__first.base(), __last.base());\n@@ -140,24 +140,24 @@ namespace __gnu_debug_def\n     insert_noresize(const value_type& __obj)\n     { return iterator(_Base::insert_noresize(__obj), this); }\n \n-    iterator \n-    find(const key_type& __key) const \n+    iterator\n+    find(const key_type& __key) const\n     { return iterator(_Base::find(__key), this); }\n \n     using _Base::count;\n-    \n-    std::pair<iterator, iterator> \n+\n+    std::pair<iterator, iterator>\n     equal_range(const key_type& __key) const\n-    { \n+    {\n       typedef typename _Base::iterator _Base_iterator;\n-      std::pair<_Base_iterator, _Base_iterator> __res = \n+      std::pair<_Base_iterator, _Base_iterator> __res =\n \t_Base::equal_range(__key);\n       return std::make_pair(iterator(__res.first, this),\n \t\t\t    iterator(__res.second, this));\n     }\n \n-    size_type \n-    erase(const key_type& __key) \n+    size_type\n+    erase(const key_type& __key)\n     {\n       size_type __count = 0;\n       std::pair<iterator, iterator> __victims = this->equal_range(__key);\n@@ -168,16 +168,16 @@ namespace __gnu_debug_def\n \t}\n       return __count;\n     }\n-    \n-    void \n-    erase(iterator __it) \n+\n+    void\n+    erase(iterator __it)\n     {\n       __glibcxx_check_erase(__it);\n       __it._M_invalidate();\n       _Base::erase(__it.base());\n     }\n \n-    void \n+    void\n     erase(iterator __first, iterator __last)\n     {\n       __glibcxx_check_erase_range(__first, __last);\n@@ -189,11 +189,11 @@ namespace __gnu_debug_def\n       _Base::erase(__first.base(), __last.base());\n     }\n \n-    void \n-    clear() \n-    { \n+    void\n+    clear()\n+    {\n       _Base::clear();\n-      this->_M_invalidate_all(); \n+      this->_M_invalidate_all();\n     }\n \n     using _Base::resize;\n@@ -205,7 +205,7 @@ namespace __gnu_debug_def\n     const _Base& _M_base() const { return *this; }\n \n   private:\n-    void \n+    void\n     _M_invalidate_all()\n     {\n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "282cba27613a4e20cfb5f1c1e4eae38d153eb7ee", "filename": "libstdc++-v3/include/debug/hash_set", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -35,4 +35,4 @@\n #include <debug/dbg_hash_set.h>\n #include <debug/dbg_hash_multiset.h>\n \n-#endif \n+#endif"}, {"sha": "0f56d882935c45a6f9d409c7a0dec0dca15b321e", "filename": "libstdc++-v3/include/debug/hash_set.h", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -47,7 +47,7 @@ namespace __gnu_debug_def\n     {\n       typedef __gnu_cxx::hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<hash_set> _Safe_base;\n-      \n+\n     public:\n       typedef typename _Base::key_type        key_type;\n       typedef typename _Base::value_type      value_type;\n@@ -67,21 +67,21 @@ namespace __gnu_debug_def\n                                               const_iterator;\n \n       typedef typename _Base::allocator_type allocator_type;\n-      \n+\n       using _Base::hash_funct;\n       using _Base::key_eq;\n       using _Base::get_allocator;\n-      \n+\n       hash_set() { }\n-      \n+\n       explicit hash_set(size_type __n) : _Base(__n) { }\n-      \n+\n       hash_set(size_type __n, const hasher& __hf) : _Base(__n, __hf) { }\n-      \n+\n       hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,\n \t       const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __eql, __a) { }\n-    \n+\n       template<typename _InputIterator>\n         hash_set(_InputIterator __f, _InputIterator __l)\n         : _Base(__gnu_debug::__check_valid_range(__f, __l), __l) { }\n@@ -103,84 +103,84 @@ namespace __gnu_debug_def\n \t\t__eql, __a) { }\n \n       hash_set(const _Base& __x) : _Base(__x), _Safe_base() { }\n-      \n+\n       using _Base::size;\n       using _Base::max_size;\n       using _Base::empty;\n-      \n-      void \n+\n+      void\n       swap(hash_set& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      iterator \n+\n+      iterator\n       begin() const { return iterator(_Base::begin(), this); }\n \n-      iterator \n+      iterator\n       end() const   { return iterator(_Base::end(),   this); }\n \n-      std::pair<iterator, bool> \n+      std::pair<iterator, bool>\n       insert(const value_type& __obj)\n-      { \t\t    \n+      {\n \tstd::pair<typename _Base::iterator, bool> __res =\n         _Base::insert(__obj);\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n-      \n+\n       template <typename _InputIterator>\n-        void \n-        insert(_InputIterator __first, _InputIterator __last) \n+        void\n+        insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::insert(__first.base(), __last.base());\n \t}\n-      \n \n-      std::pair<iterator, bool> \n+\n+      std::pair<iterator, bool>\n       insert_noresize(const value_type& __obj)\n       {\n \tstd::pair<typename _Base::iterator, bool> __res =\n         _Base::insert_noresize(__obj);\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n-      \n-      iterator \n-      find(const key_type& __key) const \n+\n+      iterator\n+      find(const key_type& __key) const\n       { return iterator(_Base::find(__key), this); }\n-      \n+\n       using _Base::count;\n-      \n-      std::pair<iterator, iterator> \n+\n+      std::pair<iterator, iterator>\n       equal_range(const key_type& __key) const\n-      { \n+      {\n \ttypedef typename _Base::iterator _Base_iterator;\n-\tstd::pair<_Base_iterator, _Base_iterator> __res = \n+\tstd::pair<_Base_iterator, _Base_iterator> __res =\n \t  _Base::equal_range(__key);\n \treturn std::make_pair(iterator(__res.first, this),\n \t\t\t      iterator(__res.second, this));\n       }\n-      \n-      size_type \n-      erase(const key_type& __key) \n+\n+      size_type\n+      erase(const key_type& __key)\n       {\n \titerator __victim(_Base::find(__key), this);\n \tif (__victim != end())\n \t  return this->erase(__victim), 1;\n \telse\n \t  return 0;\n       }\n-    \n-      void \n-      erase(iterator __it) \n+\n+      void\n+      erase(iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n \t_Base::erase(__it.base());\n       }\n-      \n-      void \n+\n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n@@ -191,27 +191,27 @@ namespace __gnu_debug_def\n \t}\n \t_Base::erase(__first.base(), __last.base());\n       }\n-      \n-      void \n-      clear() \n-      { \n+\n+      void\n+      clear()\n+      {\n \t_Base::clear();\n-\tthis->_M_invalidate_all(); \n+\tthis->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::resize;\n       using _Base::bucket_count;\n       using _Base::max_bucket_count;\n       using _Base::elems_in_bucket;\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base()       { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n \n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n@@ -220,21 +220,21 @@ namespace __gnu_debug_def\n       }\n     };\n \n-  template<typename _Value, typename _HashFcn, typename _EqualKey, \n+  template<typename _Value, typename _HashFcn, typename _EqualKey,\n \t   typename _Alloc>\n     inline bool\n     operator==(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __x,\n \t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n     { return __x._M_base() == __y._M_base(); }\n \n-  template<typename _Value, typename _HashFcn, typename _EqualKey, \n+  template<typename _Value, typename _HashFcn, typename _EqualKey,\n \t   typename _Alloc>\n     inline bool\n     operator!=(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __x,\n \t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n     { return __x._M_base() != __y._M_base(); }\n \n-  template<typename _Value, typename _HashFcn, typename _EqualKey, \n+  template<typename _Value, typename _HashFcn, typename _EqualKey,\n \t   typename _Alloc>\n     inline void\n     swap(hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __x,"}, {"sha": "f9bb9f9435cc423f02f817fb93f6bcef9a312a3e", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -49,17 +49,17 @@ namespace __gnu_debug_def\n     public:\n       typedef typename _Allocator::reference        reference;\n       typedef typename _Allocator::const_reference  const_reference;\n-      \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, list> \n-      \t\t\t\t\t\t    iterator;\n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, list>\n+\t\t\t\t\t\t    iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, list>\n \t\t\t\t\t\t    const_iterator;\n \n       typedef typename _Base::size_type             size_type;\n       typedef typename _Base::difference_type       difference_type;\n-      \n-      typedef _Tp        \t\t\t    value_type;\n-      typedef _Allocator \t\t\t    allocator_type;\n+\n+      typedef _Tp\t\t\t\t    value_type;\n+      typedef _Allocator\t\t\t    allocator_type;\n       typedef typename _Allocator::pointer          pointer;\n       typedef typename _Allocator::const_pointer    const_pointer;\n       typedef std::reverse_iterator<iterator>       reverse_iterator;\n@@ -78,96 +78,96 @@ namespace __gnu_debug_def\n \t   const _Allocator& __a = _Allocator())\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last, __a)\n       { }\n-      \n+\n \n       list(const list& __x) : _Base(__x), _Safe_base() { }\n-      \n+\n       list(const _Base& __x) : _Base(__x), _Safe_base() { }\n-      \n+\n       ~list() { }\n-      \n-      list& \n+\n+      list&\n       operator=(const list& __x)\n       {\n \tstatic_cast<_Base&>(*this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n-      \n+\n       template<class _InputIterator>\n-        void \n+        void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::assign(__first, __last);\n \t  this->_M_invalidate_all();\n \t}\n-      \n-      void \n+\n+      void\n       assign(size_type __n, const _Tp& __t)\n       {\n \t_Base::assign(__n, __t);\n \tthis->_M_invalidate_all();\n       }\n-      \n+\n       using _Base::get_allocator;\n-      \n+\n       // iterators:\n-      iterator       \n-      begin()       \n+      iterator\n+      begin()\n       { return iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      iterator \n-      end() \n+\n+      iterator\n+      end()\n       { return iterator(_Base::end(), this); }\n-      \n-      const_iterator \n-      end() const   \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n-      \n-      reverse_iterator \n-      rbegin() \n+\n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n-      \n-      const_reverse_iterator \n+\n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n-      \n-      reverse_iterator \n-      rend() \n+\n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n-      \n-      const_reverse_iterator \n-      rend() const \n+\n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n-      \n+\n       // 23.2.2.2 capacity:\n       using _Base::empty;\n       using _Base::size;\n       using _Base::max_size;\n-      \n-      void \n+\n+      void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n \tthis->_M_detach_singular();\n-\t\n+\n \t// if __sz < size(), invalidate all iterators in [begin+__sz, end())\n \titerator __victim = begin();\n \titerator __end = end();\n \tfor (size_type __i = __sz; __victim != __end && __i > 0; --__i)\n \t  ++__victim;\n-\t\n+\n \twhile (__victim != __end)\n \t  {\n \t    iterator __real_victim = __victim++;\n \t    __real_victim._M_invalidate();\n \t  }\n-\t\n-\ttry \n+\n+\ttry\n \t  {\n \t    _Base::resize(__sz, __c);\n \t  }\n@@ -177,51 +177,51 @@ namespace __gnu_debug_def\n \t    __throw_exception_again;\n \t  }\n       }\n-      \n+\n       // element access:\n-      reference \n+      reference\n       front()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n-      \n-      const_reference \n+\n+      const_reference\n       front() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n-      \n-      reference \n+\n+      reference\n       back()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n-      \n-      const_reference \n+\n+      const_reference\n       back() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n-      \n+\n       // 23.2.2.3 modifiers:\n       using _Base::push_front;\n-      \n-      void \n+\n+      void\n       pop_front()\n       {\n \t__glibcxx_check_nonempty();\n \titerator __victim = begin();\n \t__victim._M_invalidate();\n \t_Base::pop_front();\n       }\n-      \n+\n       using _Base::push_back;\n-      \n-      void \n+\n+      void\n       pop_back()\n       {\n \t__glibcxx_check_nonempty();\n@@ -230,39 +230,39 @@ namespace __gnu_debug_def\n \t__victim._M_invalidate();\n \t_Base::pop_back();\n       }\n-      \n-      iterator \n+\n+      iterator\n       insert(iterator __position, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n-      \n-      void \n+\n+      void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \t_Base::insert(__position.base(), __n, __x);\n       }\n-      \n+\n       template<class _InputIterator>\n-        void \n+        void\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n         {\n \t  __glibcxx_check_insert_range(__position, __first, __last);\n \t  _Base::insert(__position.base(), __first, __last);\n \t}\n-      \n-      iterator \n+\n+      iterator\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \treturn iterator(_Base::erase(__position.base()), this);\n       }\n-      \n-      iterator \n+\n+      iterator\n       erase(iterator __position, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -276,32 +276,32 @@ namespace __gnu_debug_def\n \t  }\n \treturn iterator(_Base::erase(__position.base(), __last.base()), this);\n       }\n-      \n-      void \n+\n+      void\n       swap(list& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      void \n+\n+      void\n       clear()\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n       }\n-      \n+\n       // 23.2.2.4 list operations:\n-      void \n+      void\n       splice(iterator __position, list& __x)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(&__x != this,\n \t\t\t      _M_message(::__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n \tthis->splice(__position, __x, __x.begin(), __x.end());\n       }\n-      \n-      void \n+\n+      void\n       splice(iterator __position, list& __x, iterator __i)\n       {\n \t__glibcxx_check_insert(__position);\n@@ -314,14 +314,14 @@ namespace __gnu_debug_def\n \t_GLIBCXX_DEBUG_VERIFY(__i._M_attached_to(&__x),\n \t\t\t      _M_message(::__gnu_debug::__msg_splice_other)\n \t\t\t     ._M_iterator(__i, \"__i\")._M_sequence(__x, \"__x\"));\n-\t\n+\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 250. splicing invalidates iterators\n \tthis->_M_transfer_iter(__i);\n \t_Base::splice(__position.base(), __x._M_base(), __i.base());\n       }\n-      \n-      void \n+\n+      void\n       splice(iterator __position, list& __x, iterator __first, iterator __last)\n       {\n \t__glibcxx_check_insert(__position);\n@@ -333,7 +333,7 @@ namespace __gnu_debug_def\n \t_GLIBCXX_DEBUG_VERIFY(__x.get_allocator() == this->get_allocator(),\n \t\t\t      _M_message(::__gnu_debug::__msg_splice_alloc)\n \t\t\t      ._M_sequence(*this)._M_sequence(__x));\n-\t\n+\n \tfor (iterator __tmp = __first; __tmp != __last; )\n \t  {\n \t    _GLIBCXX_DEBUG_VERIFY(&__x != this || __tmp != __position,\n@@ -346,12 +346,12 @@ namespace __gnu_debug_def\n \t    // 250. splicing invalidates iterators\n \t    this->_M_transfer_iter(__victim);\n \t  }\n-\t\n+\n \t_Base::splice(__position.base(), __x._M_base(), __first.base(),\n \t\t      __last.base());\n       }\n-      \n-      void \n+\n+      void\n       remove(const _Tp& __value)\n       {\n \tfor (iterator __x = begin(); __x.base() != _Base::end(); )\n@@ -362,9 +362,9 @@ namespace __gnu_debug_def\n \t      ++__x;\n \t  }\n       }\n-      \n-      template<class _Predicate> \n-        void \n+\n+      template<class _Predicate>\n+        void\n         remove_if(_Predicate __pred)\n         {\n \t  for (iterator __x = begin(); __x.base() != _Base::end(); )\n@@ -375,13 +375,13 @@ namespace __gnu_debug_def\n \t\t++__x;\n \t    }\n \t}\n-      \n-      void \n+\n+      void\n       unique()\n       {\n \titerator __first = begin();\n \titerator __last = end();\n-\tif (__first == __last) \n+\tif (__first == __last)\n \t  return;\n \titerator __next = __first;\n \twhile (++__next != __last)\n@@ -393,14 +393,14 @@ namespace __gnu_debug_def\n \t    __next = __first;\n \t  }\n       }\n-      \n+\n       template<class _BinaryPredicate>\n-        void \n+        void\n         unique(_BinaryPredicate __binary_pred)\n         {\n \t  iterator __first = begin();\n \t  iterator __last = end();\n-\t  if (__first == __last) \n+\t  if (__first == __last)\n \t    return;\n \t  iterator __next = __first;\n \t  while (++__next != __last)\n@@ -412,8 +412,8 @@ namespace __gnu_debug_def\n \t      __next = __first;\n \t    }\n \t}\n-      \n-      void \n+\n+      void\n       merge(list& __x)\n       {\n \t__glibcxx_check_sorted(_Base::begin(), _Base::end());\n@@ -425,13 +425,13 @@ namespace __gnu_debug_def\n \t  }\n \t_Base::merge(__x._M_base());\n       }\n-      \n-      template<class _Compare> \n-        void \n+\n+      template<class _Compare>\n+        void\n         merge(list& __x, _Compare __comp)\n         {\n \t  __glibcxx_check_sorted_pred(_Base::begin(), _Base::end(), __comp);\n-\t  __glibcxx_check_sorted_pred(__x.begin().base(), __x.end().base(), \n+\t  __glibcxx_check_sorted_pred(__x.begin().base(), __x.end().base(),\n \t\t\t\t      __comp);\n \t  for (iterator __tmp = __x.begin(); __tmp != __x.end(); )\n \t    {\n@@ -440,32 +440,32 @@ namespace __gnu_debug_def\n \t    }\n \t  _Base::merge(__x._M_base(), __comp);\n \t}\n-      \n-      void \n+\n+      void\n       sort() { _Base::sort(); }\n-      \n+\n       template<typename _StrictWeakOrdering>\n-        void \n+        void\n         sort(_StrictWeakOrdering __pred) { _Base::sort(__pred); }\n-      \n+\n       using _Base::reverse;\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base()       { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n \n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_Not_equal_to<_Base_const_iterator> _Not_equal;\n \tthis->_M_invalidate_if(_Not_equal(_M_base().end()));\n       }\n     };\n-  \n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator==(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n@@ -475,12 +475,12 @@ namespace __gnu_debug_def\n     inline bool\n     operator!=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n-  \n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator<(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n-  \n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator<=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n@@ -490,12 +490,12 @@ namespace __gnu_debug_def\n     inline bool\n     operator>=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n-  \n+\n   template<typename _Tp, typename _Alloc>\n     inline bool\n     operator>(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n-  \n+\n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)"}, {"sha": "9470e667434eff93d2f113ae4207dbf1ba6573a8", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 83, "deletions": 83, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -55,8 +55,8 @@ namespace __gnu_debug_def\n       typedef _Allocator                            allocator_type;\n       typedef typename _Allocator::reference        reference;\n       typedef typename _Allocator::const_reference  const_reference;\n-      \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, map> \n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, map>\n                                                     iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, map>\n                                                     const_iterator;\n@@ -67,115 +67,115 @@ namespace __gnu_debug_def\n       typedef typename _Allocator::const_pointer    const_pointer;\n       typedef std::reverse_iterator<iterator>       reverse_iterator;\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n-      \n+\n       using _Base::value_compare;\n-      \n+\n       // 23.3.1.1 construct/copy/destroy:\n-      explicit map(const _Compare& __comp = _Compare(), \n+      explicit map(const _Compare& __comp = _Compare(),\n \t\t   const _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n       template<typename _InputIterator>\n         map(_InputIterator __first, _InputIterator __last,\n-\t    const _Compare& __comp = _Compare(), \n+\t    const _Compare& __comp = _Compare(),\n \t    const _Allocator& __a = _Allocator())\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a), _Safe_base() { }\n \n-      map(const map<_Key,_Tp,_Compare,_Allocator>& __x) \n-      : _Base(__x), _Safe_base() { } \n-      \n+      map(const map<_Key,_Tp,_Compare,_Allocator>& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n       map(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n       ~map() { }\n-      \n+\n       map<_Key,_Tp,_Compare,_Allocator>&\n       operator=(const map<_Key,_Tp,_Compare,_Allocator>& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 133. map missing get_allocator()\n       using _Base::get_allocator;\n-      \n+\n       // iterators:\n-      iterator       \n-      begin()  \n+      iterator \n+      begin()\n       { return iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      iterator       \n-      end()         \n+\n+      iterator\n+      end()\n       { return iterator(_Base::end(), this); }\n-      \n-      const_iterator \n-      end() const   \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n-      \n-      reverse_iterator \n-      rbegin() \n+\n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n-      \n-      const_reverse_iterator \n+\n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n-      \n-      reverse_iterator \n-      rend() \n+\n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n-      \n-      const_reverse_iterator \n-      rend() const \n+\n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n-      \n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;\n       using _Base::max_size;\n-      \n+\n       // 23.3.1.2 element access:\n       using _Base::operator[];\n-      \n+\n       // modifiers:\n-      std::pair<iterator, bool> \n+      std::pair<iterator, bool>\n       insert(const value_type& __x)\n       {\n \ttypedef typename _Base::iterator _Base_iterator;\n \tstd::pair<_Base_iterator, bool> __res = _Base::insert(__x);\n-\treturn std::pair<iterator, bool>(iterator(__res.first, this), \n+\treturn std::pair<iterator, bool>(iterator(__res.first, this),\n \t\t\t\t\t __res.second);\n       }\n-      \n-      iterator \n+\n+      iterator\n       insert(iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n-      \n+\n       template<typename _InputIterator>\n-        void \n+        void\n         insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_valid_range(__first, __last);\n \t  _Base::insert(__first, __last);\n \t}\n-      \n-      void \n+\n+      void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n-      \n-      size_type \n+\n+      size_type\n       erase(const key_type& __x)\n       {\n \titerator __victim = find(__x);\n@@ -188,8 +188,8 @@ namespace __gnu_debug_def\n \t  return 1;\n \t}\n       }\n-      \n-      void \n+\n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -198,49 +198,49 @@ namespace __gnu_debug_def\n \twhile (__first != __last)\n \t  this->erase(__first++);\n       }\n-      \n-      void \n+\n+      void\n       swap(map<_Key,_Tp,_Compare,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      void \n+\n+      void\n       clear()\n       { this->erase(begin(), end()); }\n-      \n+\n       // observers:\n       using _Base::key_comp;\n       using _Base::value_comp;\n-      \n+\n       // 23.3.1.3 map operations:\n-      iterator \n+      iterator\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n-      \n-      const_iterator \n+\n+      const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n-      \n+\n       using _Base::count;\n-      \n-      iterator \n+\n+      iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n-      \n-      const_iterator \n+\n+      const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n-      \n-      iterator \n+\n+      iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n-      \n-      const_iterator \n+\n+      const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n-      \n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -250,7 +250,7 @@ namespace __gnu_debug_def\n \treturn std::make_pair(iterator(__res.first, this),\n \t\t\t      iterator(__res.second, this));\n       }\n-      \n+\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n@@ -260,15 +260,15 @@ namespace __gnu_debug_def\n \treturn std::make_pair(const_iterator(__res.first, this),\n \t\t\t      const_iterator(__res.second, this));\n       }\n-      \n-      _Base&       \n+\n+      _Base& \n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n-      \n+\n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n@@ -277,47 +277,47 @@ namespace __gnu_debug_def\n       }\n     };\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator> \n+  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator==(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator==(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator!=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator!=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator<(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator<(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t      const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator<=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator<=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator>=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator>=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator>(const map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator>(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t      const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline void\n-    swap(map<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    swap(map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n \n-#endif \n+#endif"}, {"sha": "3772c31dc698913e7f83052bba5cf81b3be30859", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -39,24 +39,24 @@ namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n-    class multimap \n+    class multimap\n     : public __gnu_norm::multimap<_Key, _Tp, _Compare, _Allocator>,\n     public __gnu_debug::_Safe_sequence<multimap<_Key,_Tp,_Compare,_Allocator> >\n     {\n       typedef __gnu_norm::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multimap> _Safe_base;\n-      \n+\n     public:\n       // types:\n-      typedef _Key   \t\t\t   \t     key_type;\n-      typedef _Tp  \t\t\t   \t     mapped_type;\n+      typedef _Key\t\t\t\t     key_type;\n+      typedef _Tp\t\t\t\t     mapped_type;\n       typedef std::pair<const _Key, _Tp>             value_type;\n       typedef _Compare                               key_compare;\n       typedef _Allocator                             allocator_type;\n       typedef typename _Allocator::reference         reference;\n       typedef typename _Allocator::const_reference   const_reference;\n-      \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, multimap> \n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, multimap>\n                                                      iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n                                            multimap> const_iterator;\n@@ -67,23 +67,23 @@ namespace __gnu_debug_def\n       typedef typename _Allocator::const_pointer     const_pointer;\n       typedef std::reverse_iterator<iterator>        reverse_iterator;\n       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;\n-      \n+\n       using _Base::value_compare;\n-      \n+\n       // 23.3.1.1 construct/copy/destroy:\n       explicit multimap(const _Compare& __comp = _Compare(),\n \t\t\tconst _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n \n       template<typename _InputIterator>\n       multimap(_InputIterator __first, _InputIterator __last,\n-\t       const _Compare& __comp = _Compare(), \n+\t       const _Compare& __comp = _Compare(),\n \t       const _Allocator& __a = _Allocator())\n       : _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t      __comp, __a) { }\n \n       multimap(const multimap<_Key,_Tp,_Compare,_Allocator>& __x)\n-      : _Base(__x), _Safe_base() { } \n+      : _Base(__x), _Safe_base() { }\n \n       multimap(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n@@ -100,36 +100,36 @@ namespace __gnu_debug_def\n       using _Base::get_allocator;\n \n       // iterators:\n-      iterator       \n-      begin() \n+      iterator\n+      begin()\n       { return iterator(_Base::begin(), this); }\n \n-      const_iterator \n-      begin() const \n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n \n-      iterator       \n-      end() \n+      iterator\n+      end()\n       { return iterator(_Base::end(), this); }\n \n-      const_iterator \n-      end() const   \n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n \n-      reverse_iterator \n-      rbegin() \n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator \n-      rend() \n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator \n-      rend() const \n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n \n       // capacity:\n@@ -138,34 +138,34 @@ namespace __gnu_debug_def\n       using _Base::max_size;\n \n       // modifiers:\n-      iterator \n+      iterator\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x), this); }\n \n-      iterator \n+      iterator\n       insert(iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n       template<typename _InputIterator>\n-        void \n+        void\n         insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::insert(__first, __last);\n \t}\n \n-      void \n+      void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n \n-      size_type \n+      size_type\n       erase(const key_type& __x)\n       {\n \tstd::pair<iterator, iterator> __victims = this->equal_range(__x);\n@@ -180,7 +180,7 @@ namespace __gnu_debug_def\n \treturn __count;\n       }\n \n-      void \n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -190,14 +190,14 @@ namespace __gnu_debug_def\n \tthis->erase(__first++);\n       }\n \n-      void \n+      void\n       swap(multimap<_Key,_Tp,_Compare,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n \n-      void \n+      void\n       clear()\n       { this->erase(begin(), end()); }\n \n@@ -206,29 +206,29 @@ namespace __gnu_debug_def\n       using _Base::value_comp;\n \n       // 23.3.1.3 multimap operations:\n-      iterator \n+      iterator\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n \n-      const_iterator \n+      const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n       using _Base::count;\n \n-      iterator \n+      iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n \n-      const_iterator \n+      const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n-      iterator \n+      iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n \n-      const_iterator \n+      const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n@@ -252,14 +252,14 @@ namespace __gnu_debug_def\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n-      _Base&       \n+      _Base&\n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n \n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n@@ -270,45 +270,45 @@ namespace __gnu_debug_def\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator==(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator==(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator!=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator!=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator<(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator<(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t      const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator<=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator<=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator>=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator>=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline bool\n-    operator>(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    operator>(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t      const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n     inline void\n-    swap(multimap<_Key,_Tp,_Compare,_Allocator>& __lhs, \n+    swap(multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n \n-#endif \n+#endif"}, {"sha": "19bc29a960a8022a2c38823714c2e1d901681b97", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -39,7 +39,7 @@ namespace __gnu_debug_def\n {\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n-    class multiset \n+    class multiset\n     : public __gnu_norm::multiset<_Key, _Compare, _Allocator>,\n       public __gnu_debug::_Safe_sequence<multiset<_Key, _Compare, _Allocator> >\n     {\n@@ -48,15 +48,15 @@ namespace __gnu_debug_def\n \n     public:\n       // types:\n-      typedef _Key \t \t\t\t   key_type;\n-      typedef _Key \t \t\t\t   value_type;\n-      typedef _Compare   \t\t\t   \t   key_compare;\n-      typedef _Compare   \t\t\t   \t   value_compare;\n-      typedef _Allocator \t\t\t   \t   allocator_type;\n-      typedef typename _Allocator::reference         reference;\n+      typedef _Key\t\t\t\t     key_type;\n+      typedef _Key\t\t\t\t     value_type;\n+      typedef _Compare\t\t\t\t     key_compare;\n+      typedef _Compare\t\t\t\t     value_compare;\n+      typedef _Allocator\t\t\t     allocator_type;\n+      typedef typename _Allocator::reference\t     reference;\n       typedef typename _Allocator::const_reference   const_reference;\n \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, multiset> \n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, multiset>\n       iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n \t\t\t\t\t  multiset> const_iterator;\n@@ -80,14 +80,14 @@ namespace __gnu_debug_def\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a) { }\n \n-      multiset(const multiset<_Key,_Compare,_Allocator>& __x) \n+      multiset(const multiset<_Key,_Compare,_Allocator>& __x)\n       : _Base(__x), _Safe_base() { }\n-    \n+\n       multiset(const _Base& __x) : _Base(__x), _Safe_base() { }\n \n       ~multiset() { }\n \n-      multiset<_Key,_Compare,_Allocator>& \n+      multiset<_Key,_Compare,_Allocator>&\n       operator=(const multiset<_Key,_Compare,_Allocator>& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n@@ -102,32 +102,32 @@ namespace __gnu_debug_def\n       begin()\n       { return iterator(_Base::begin(), this); }\n \n-      const_iterator \n-      begin() const \n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n \n-      iterator \n+      iterator\n       end()\n       { return iterator(_Base::end(), this); }\n \n-      const_iterator \n-      end() const   \n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n \n-      reverse_iterator \n-      rbegin() \n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator \n-      rend() \n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator \n-      rend() const \n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n \n       // capacity:\n@@ -136,26 +136,26 @@ namespace __gnu_debug_def\n       using _Base::max_size;\n \n       // modifiers:\n-      iterator \n+      iterator\n       insert(const value_type& __x)\n       { return iterator(_Base::insert(__x), this); }\n \n-      iterator \n+      iterator\n       insert(iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n       template<typename _InputIterator>\n-      void \n+      void\n       insert(_InputIterator __first, _InputIterator __last)\n       {\n \t__glibcxx_check_valid_range(__first, __last);\n \t_Base::insert(__first, __last);\n       }\n \n-      void \n+      void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n@@ -178,7 +178,7 @@ namespace __gnu_debug_def\n \treturn __count;\n       }\n \n-      void \n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -188,14 +188,14 @@ namespace __gnu_debug_def\n \tthis->erase(__first++);\n       }\n \n-      void \n+      void\n       swap(multiset<_Key,_Compare,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n \n-      void \n+      void\n       clear()\n       { this->erase(begin(), end()); }\n \n@@ -204,35 +204,35 @@ namespace __gnu_debug_def\n       using _Base::value_comp;\n \n       // multiset operations:\n-      iterator \n+      iterator\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n       using _Base::count;\n \n-      iterator \n+      iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n-      iterator \n+      iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n@@ -258,14 +258,14 @@ namespace __gnu_debug_def\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n-      _Base& \n+      _Base&\n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n-      \n+\n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n@@ -275,37 +275,37 @@ namespace __gnu_debug_def\n     };\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator==(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator!=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t      const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>(const multiset<_Key,_Compare,_Allocator>& __lhs,\n \t      const multiset<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }"}, {"sha": "07bc3b363e1e21ca8c53d2ada9f35bae17ea58ec", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -59,7 +59,7 @@ namespace __gnu_debug\n      *  singular because of an operation on the container). This\n      *  version number must equal the version number in the sequence\n      *  referenced by _M_sequence for the iterator to be\n-     *  non-singular. \n+     *  non-singular.\n      */\n     unsigned int         _M_version;\n \n@@ -73,7 +73,7 @@ namespace __gnu_debug\n \n   protected:\n     /** Initializes the iterator and makes it singular. */\n-    _Safe_iterator_base() \n+    _Safe_iterator_base()\n     : _M_sequence(0), _M_version(0), _M_prior(0), _M_next(0)\n     { }\n \n@@ -82,7 +82,7 @@ namespace __gnu_debug\n      *  constant iterator, and false if it is a mutable iterator. Note\n      *  that @p __seq may be NULL, in which case the iterator will be\n      *  singular. Otherwise, the iterator will reference @p __seq and\n-     *  be nonsingular. \n+     *  be nonsingular.\n      */\n     _Safe_iterator_base(const _Safe_sequence_base* __seq, bool __constant)\n     : _M_sequence(0), _M_version(0), _M_prior(0), _M_next(0)\n@@ -102,11 +102,11 @@ namespace __gnu_debug\n      *\tfrom whatever sequence it was attached to originally. If the\n      *\tnew sequence is the NULL pointer, the iterator is left\n      *\tunattached.\n-     */ \n+     */\n     void _M_attach(_Safe_sequence_base* __seq, bool __constant);\n \n     /** Detach the iterator for whatever sequence it is attached to,\n-     *\tif any. \n+     *\tif any.\n     */\n     void _M_detach();\n \n@@ -145,57 +145,57 @@ namespace __gnu_debug\n   public:\n     /// The list of mutable iterators that reference this container\n     _Safe_iterator_base* _M_iterators;\n-    \n+\n     /// The list of constant iterators that reference this container\n     _Safe_iterator_base* _M_const_iterators;\n-    \n+\n     /// The container version number. This number may never be 0.\n     mutable unsigned int _M_version;\n-    \n+\n   protected:\n     // Initialize with a version number of 1 and no iterators\n     _Safe_sequence_base()\n     : _M_iterators(0), _M_const_iterators(0), _M_version(1)\n     { }\n-    \n+\n     /** Notify all iterators that reference this sequence that the\n \tsequence is being destroyed. */\n     ~_Safe_sequence_base()\n     { this->_M_detach_all(); }\n-    \n+\n     /** Detach all iterators, leaving them singular. */\n-    void \n+    void\n     _M_detach_all();\n-    \n-    /** Detach all singular iterators. \n-     *  @post for all iterators i attached to this sequence, \n+\n+    /** Detach all singular iterators.\n+     *  @post for all iterators i attached to this sequence,\n      *   i->_M_version == _M_version.\n      */\n     void\n     _M_detach_singular();\n-    \n+\n     /** Revalidates all attached singular iterators.  This method may\n      *  be used to validate iterators that were invalidated before\n      *  (but for some reasion, such as an exception, need to become\n      *  valid again).\n      */\n     void\n     _M_revalidate_singular();\n-    \n+\n     /** Swap this sequence with the given sequence. This operation\n      *  also swaps ownership of the iterators, so that when the\n      *  operation is complete all iterators that originally referenced\n      *  one container now reference the other container.\n      */\n-    void \n+    void\n     _M_swap(_Safe_sequence_base& __x);\n-      \n+\n   public:\n     /** Invalidates all iterators. */\n-    void \n+    void\n     _M_invalidate_all() const\n     { if (++_M_version == 0) _M_version = 1; }\n   };\n } // namespace __gnu_debug\n \n-#endif \n+#endif"}, {"sha": "72ba3b52f10bd5051326d907583e3e6faf7d8918", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -40,13 +40,13 @@ namespace __gnu_debug\n {\n   /** Iterators that derive from _Safe_iterator_base but that aren't\n    *  _Safe_iterators can be determined singular or non-singular via\n-   *  _Safe_iterator_base. \n+   *  _Safe_iterator_base.\n    */\n   inline bool __check_singular_aux(const _Safe_iterator_base* __x)\n   { return __x->_M_singular(); }\n-  \n+\n   /** \\brief Safe iterator wrapper.\n-   *  \n+   *\n    *  The class template %_Safe_iterator is a wrapper around an\n    *  iterator that tracks the iterator's movement among sequences and\n    *  checks that operations performed on the \"safe\" iterator are\n@@ -70,12 +70,12 @@ namespace __gnu_debug\n \t  __dp_sign,     //< Can determine equality and ordering\n \t  __dp_exact     //< Can determine distance precisely\n \t};\n-      \n+\n       /// The underlying iterator\n       _Iterator _M_current;\n \n       /// Determine if this is a constant iterator.\n-      bool \n+      bool\n       _M_constant() const\n       {\n \ttypedef typename _Sequence::const_iterator const_iterator;\n@@ -103,7 +103,7 @@ namespace __gnu_debug\n        */\n       _Safe_iterator(const _Iterator& __i, const _Sequence* __seq)\n       : _Safe_iterator_base(__seq, _M_constant()), _M_current(__i)\n-      { \n+      {\n \t_GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n \t\t\t      ._M_iterator(*this, \"this\"));\n@@ -115,14 +115,14 @@ namespace __gnu_debug\n        */\n       _Safe_iterator(const _Safe_iterator& __x)\n       : _Safe_iterator_base(__x, _M_constant()), _M_current(__x._M_current)\n-      { \n+      {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n       }\n \n-      /** \n+      /**\n        *  @brief Converting constructor from a mutable iterator to a\n        *  constant iterator.\n        *\n@@ -131,7 +131,7 @@ namespace __gnu_debug\n       template<typename _MutableIterator>\n         _Safe_iterator(const _Safe_iterator<_MutableIterator, _Sequence>& __x)\n \t: _Safe_iterator_base(__x, _M_constant()), _M_current(__x.base())\n-        { \n+        {\n \t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n@@ -142,7 +142,7 @@ namespace __gnu_debug\n        * @brief Copy assignment.\n        * @pre @p x is not singular\n        */\n-      _Safe_iterator& \n+      _Safe_iterator&\n       operator=(const _Safe_iterator& __x)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n@@ -158,8 +158,8 @@ namespace __gnu_debug\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n        */\n-      reference \n-      operator*() const \n+      reference\n+      operator*() const\n       {\n \n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n@@ -174,7 +174,7 @@ namespace __gnu_debug\n        *  @todo Make this correct w.r.t. iterators that return proxies\n        *  @todo Use addressof() instead of & operator\n        */\n-      pointer \n+      pointer\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n@@ -188,7 +188,7 @@ namespace __gnu_debug\n        *  @brief Iterator preincrement\n        *  @pre iterator is incrementable\n        */\n-      _Safe_iterator& \n+      _Safe_iterator&\n       operator++()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n@@ -202,7 +202,7 @@ namespace __gnu_debug\n        *  @brief Iterator postincrement\n        *  @pre iterator is incrementable\n        */\n-      _Safe_iterator \n+      _Safe_iterator\n       operator++(int)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n@@ -218,7 +218,7 @@ namespace __gnu_debug\n        *  @brief Iterator predecrement\n        *  @pre iterator is decrementable\n        */\n-      _Safe_iterator& \n+      _Safe_iterator&\n       operator--()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n@@ -232,7 +232,7 @@ namespace __gnu_debug\n        *  @brief Iterator postdecrement\n        *  @pre iterator is decrementable\n        */\n-      _Safe_iterator \n+      _Safe_iterator\n       operator--(int)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n@@ -244,18 +244,18 @@ namespace __gnu_debug\n       }\n \n       // ------ Random access iterator requirements ------\n-      reference \n+      reference\n       operator[](const difference_type& __n) const\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n) \n+\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n)\n \t\t\t      && this->_M_can_advance(__n+1),\n \t\t\t      _M_message(__msg_iter_subscript_oob)\n \t\t\t      ._M_iterator(*this)._M_integer(__n));\n \n \treturn _M_current[__n];\n       }\n \n-      _Safe_iterator& \n+      _Safe_iterator&\n       operator+=(const difference_type& __n)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n@@ -265,15 +265,15 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-      _Safe_iterator \n+      _Safe_iterator\n       operator+(const difference_type& __n) const\n       {\n \t_Safe_iterator __tmp(*this);\n \t__tmp += __n;\n \treturn __tmp;\n       }\n \n-      _Safe_iterator& \n+      _Safe_iterator&\n       operator-=(const difference_type& __n)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n@@ -283,7 +283,7 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-      _Safe_iterator \n+      _Safe_iterator\n       operator-(const difference_type& __n) const\n       {\n \t_Safe_iterator __tmp(*this);\n@@ -294,8 +294,8 @@ namespace __gnu_debug\n       // ------ Utilities ------\n       /**\n        * @brief Return the underlying iterator\n-       */      \n-      _Iterator \n+       */\n+      _Iterator\n       base() const { return _M_current; }\n \n       /**\n@@ -305,46 +305,46 @@ namespace __gnu_debug\n       operator _Iterator() const { return _M_current; }\n \n       /** Attach iterator to the given sequence. */\n-      void \n+      void\n       _M_attach(const _Sequence* __seq)\n-      { \n+      {\n \t_Safe_iterator_base::_M_attach(const_cast<_Sequence*>(__seq),\n-\t\t\t\t       _M_constant()); \n+\t\t\t\t       _M_constant());\n       }\n \n       /** Invalidate the iterator, making it singular. */\n-      void \n+      void\n       _M_invalidate();\n \n       /// Is the iterator dereferenceable?\n-      bool \n+      bool\n       _M_dereferenceable() const\n       { return !this->_M_singular() && !_M_is_end(); }\n \n       /// Is the iterator incrementable?\n-      bool \n+      bool\n       _M_incrementable() const { return this->_M_dereferenceable(); }\n \n       // Is the iterator decrementable?\n-      bool \n+      bool\n       _M_decrementable() const { return !_M_singular() && !_M_is_begin(); }\n \n       // Can we advance the iterator @p __n steps (@p __n may be negative)\n-      bool \n+      bool\n       _M_can_advance(const difference_type& __n) const;\n \n       // Is the iterator range [*this, __rhs) valid?\n       template<typename _Other>\n-        bool \n+        bool\n         _M_valid_range(const _Safe_iterator<_Other, _Sequence>& __rhs) const;\n \n       // The sequence this iterator references.\n-      const _Sequence* \n+      const _Sequence*\n       _M_get_sequence() const\n       { return static_cast<const _Sequence*>(_M_sequence); }\n \n     /** Determine the distance between two iterators with some known\n-     *\tprecision. \n+     *\tprecision.\n     */\n     template<typename _Iterator1, typename _Iterator2>\n       static pair<difference_type, _Distance_precision>\n@@ -366,9 +366,9 @@ namespace __gnu_debug\n     template<typename _Iterator1, typename _Iterator2>\n       static pair<difference_type, _Distance_precision>\n       _M_get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs,\n-    \t\t    std::forward_iterator_tag)\n+\t\t    std::forward_iterator_tag)\n       {\n-        return std::make_pair(__lhs.base() == __rhs.base()? 0 : 1, \n+        return std::make_pair(__lhs.base() == __rhs.base()? 0 : 1,\n \t\t\t      __dp_equality);\n       }\n \n@@ -384,8 +384,8 @@ namespace __gnu_debug\n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator==(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-  \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -394,14 +394,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_compare_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base(); \n+      return __lhs.base() == __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator==(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -410,14 +410,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_compare_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base(); \n+      return __lhs.base() == __rhs.base();\n     }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator!=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-  \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -426,14 +426,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_compare_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base(); \n+      return __lhs.base() != __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator!=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -442,14 +442,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_compare_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base(); \n+      return __lhs.base() != __rhs.base();\n     }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator<(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -458,14 +458,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() < __rhs.base(); \n+      return __lhs.base() < __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator<(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n \t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -474,14 +474,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() < __rhs.base(); \n+      return __lhs.base() < __rhs.base();\n     }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator<=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-  \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -490,14 +490,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() <= __rhs.base(); \n+      return __lhs.base() <= __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator<=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -506,14 +506,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() <= __rhs.base(); \n+      return __lhs.base() <= __rhs.base();\n     }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator>(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -522,14 +522,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() > __rhs.base(); \n+      return __lhs.base() > __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator>(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n \t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -538,14 +538,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() > __rhs.base(); \n+      return __lhs.base() > __rhs.base();\n     }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator>=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-  \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -554,14 +554,14 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() >= __rhs.base(); \n+      return __lhs.base() >= __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator>=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -570,7 +570,7 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_order_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() >= __rhs.base(); \n+      return __lhs.base() >= __rhs.base();\n     }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -581,7 +581,7 @@ namespace __gnu_debug\n     inline typename _Safe_iterator<_IteratorL, _Sequence>::difference_type\n     operator-(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    { \n+    {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_distance_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -590,7 +590,7 @@ namespace __gnu_debug\n \t\t\t    _M_message(__msg_distance_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() - __rhs.base(); \n+      return __lhs.base() - __rhs.base();\n     }\n \n   template<typename _Iterator, typename _Sequence>\n@@ -602,6 +602,6 @@ namespace __gnu_debug\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n #  include <debug/safe_iterator.tcc>\n-#endif \n+#endif\n \n #endif"}, {"sha": "29813f4e8e28f3408eb454d9a325863a63c63274", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -39,19 +39,19 @@\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n-    bool \n+    bool\n     _Safe_iterator<_Iterator, _Sequence>::\n     _M_can_advance(const difference_type& __n) const\n     {\n       typedef typename _Sequence::const_iterator const_iterator;\n-      \n+\n       if (this->_M_singular())\n \treturn false;\n       if (__n == 0)\n \treturn true;\n-      if (__n < 0) \n+      if (__n < 0)\n \t{\n-\t  const_iterator __begin = \n+\t  const_iterator __begin =\n \t    static_cast<const _Sequence*>(_M_sequence)->begin();\n \t  pair<difference_type, _Distance_precision> __dist =\n \t    this->_M_get_distance(__begin, *this);\n@@ -61,47 +61,47 @@ namespace __gnu_debug\n \t}\n       else\n \t{\n-\t  const_iterator __end = \n+\t  const_iterator __end =\n \t    static_cast<const _Sequence*>(_M_sequence)->end();\n-\t  pair<difference_type, _Distance_precision> __dist = \n+\t  pair<difference_type, _Distance_precision> __dist =\n \t    this->_M_get_distance(*this, __end);\n \t  bool __ok = (__dist.second == __dp_exact && __dist.first >= __n\n \t\t       || __dist.second != __dp_exact && __dist.first > 0);\n \t  return __ok;\n \t}\n     }\n-  \n+\n   template<typename _Iterator, typename _Sequence>\n     template<typename _Other>\n-      bool \n+      bool\n       _Safe_iterator<_Iterator, _Sequence>::\n       _M_valid_range(const _Safe_iterator<_Other, _Sequence>& __rhs) const\n       {\n \tif (!_M_can_compare(__rhs))\n \t  return false;\n-\t\n+\n \t/* Determine if we can order the iterators without the help of\n \t   the container */\n-\tpair<difference_type, _Distance_precision> __dist = \n+\tpair<difference_type, _Distance_precision> __dist =\n \t  this->_M_get_distance(*this, __rhs);\n \tswitch (__dist.second) {\n \tcase __dp_equality:\n \t  if (__dist.first == 0)\n \t    return true;\n \t  break;\n-\t  \n+\n \tcase __dp_sign:\n \tcase __dp_exact:\n \t  return __dist.first >= 0;\n \t}\n-\t\n+\n \t/* We can only test for equality, but check if one of the\n \t   iterators is at an extreme. */\n \tif (_M_is_begin() || __rhs._M_is_end())\n \t  return true;\n \telse if (_M_is_end() || __rhs._M_is_begin())\n \t  return false;\n-\t\n+\n \t// Assume that this is a valid range; we can't check anything else\n \treturn true;\n       }\n@@ -113,7 +113,7 @@ namespace __gnu_debug\n     {\n       typedef typename _Sequence::iterator iterator;\n       typedef typename _Sequence::const_iterator const_iterator;\n-      \n+\n       if (!this->_M_singular())\n \t{\n \t  for (_Safe_iterator_base* iter = _M_sequence->_M_iterators; iter; )\n@@ -136,5 +136,5 @@ namespace __gnu_debug\n     }\n } // namespace __gnu_debug\n \n-#endif \n+#endif\n "}, {"sha": "0bae9430313437f0b0bfd7e5d6dee26a515f0f07", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -36,46 +36,46 @@\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence> \n+  template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n   /** A simple function object that returns true if the passed-in\n    *  value is not equal to the stored value. It saves typing over\n-   *  using both bind1st and not_equal. \n+   *  using both bind1st and not_equal.\n    */\n   template<typename _Type>\n     class _Not_equal_to\n     {\n       _Type __value;\n-      \n+\n     public:\n       explicit _Not_equal_to(const _Type& __v) : __value(__v) { }\n-      \n-      bool \n-      operator()(const _Type& __x) const \n+\n+      bool\n+      operator()(const _Type& __x) const\n       { return __value != __x; }\n     };\n-  \n+\n   /** A function object that returns true when the given random access\n       iterator is at least @c n steps away from the given iterator. */\n   template<typename _Iterator>\n     class _After_nth_from\n     {\n       typedef typename std::iterator_traits<_Iterator>::difference_type\n       difference_type;\n-      \n+\n       _Iterator _M_base;\n       difference_type _M_n;\n-      \n+\n     public:\n       _After_nth_from(const difference_type& __n, const _Iterator& __base)\n       : _M_base(__base), _M_n(__n) { }\n-      \n-      bool \n+\n+      bool\n       operator()(const _Iterator& __x) const\n       { return __x - _M_base >= _M_n; }\n     };\n-  \n+\n   /**\n    * @brief Base class for constructing a \"safe\" sequence type that\n    * tracks iterators that reference it.\n@@ -101,8 +101,8 @@ namespace __gnu_debug\n \t  true. The user of this routine should be careful not to make\n \t  copies of the iterators passed to @p pred, as the copies may\n \t  interfere with the invalidation. */\n-      template<typename _Predicate> \n-        void \n+      template<typename _Predicate>\n+        void\n         _M_invalidate_if(_Predicate __pred);\n \n       /** Transfers all iterators that reference this memory location\n@@ -114,19 +114,19 @@ namespace __gnu_debug\n     };\n \n   template<typename _Sequence>\n-    template<typename _Predicate> \n-      void \n+    template<typename _Predicate>\n+      void\n       _Safe_sequence<_Sequence>::\n       _M_invalidate_if(_Predicate __pred)\n       {\n         typedef typename _Sequence::iterator iterator;\n         typedef typename _Sequence::const_iterator const_iterator;\n-        \n+\n         for (_Safe_iterator_base* __iter = _M_iterators; __iter; )\n         {\n           iterator* __victim = static_cast<iterator*>(__iter);\n           __iter = __iter->_M_next;\n-          if (!__victim->_M_singular()) \n+          if (!__victim->_M_singular())\n           {\n \t    if (__pred(__victim->base()))\n \t      __victim->_M_invalidate();\n@@ -137,12 +137,12 @@ namespace __gnu_debug\n         {\n           const_iterator* __victim = static_cast<const_iterator*>(__iter);\n           __iter = __iter->_M_next;\n-          if (!__victim->_M_singular()) \n+          if (!__victim->_M_singular())\n           {\n \t    if (__pred(__victim->base()))\n \t      __victim->_M_invalidate();\n           }\n-        }    \n+        }\n       }\n \n   template<typename _Sequence>\n@@ -157,7 +157,7 @@ namespace __gnu_debug\n \n         typedef typename _Sequence::iterator iterator;\n         typedef typename _Sequence::const_iterator const_iterator;\n-        \n+\n         for (_Safe_iterator_base* __iter = __from->_M_iterators; __iter; )\n         {\n           iterator* __victim = static_cast<iterator*>(__iter);\n@@ -176,4 +176,4 @@ namespace __gnu_debug\n       }\n } // namespace __gnu_debug\n \n-#endif \n+#endif"}, {"sha": "b9200adf233c8421dd485282bf7500630241c79d", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -45,18 +45,18 @@ namespace __gnu_debug_def\n     {\n       typedef __gnu_norm::set<_Key,_Compare,_Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<set> _Safe_base;\n-      \n+\n     public:\n       // types:\n-      typedef _Key \t \t\t\t    key_type;\n-      typedef _Key \t \t\t\t    value_type;\n-      typedef _Compare   \t\t\t    key_compare;\n-      typedef _Compare   \t\t\t    value_compare;\n-      typedef _Allocator \t\t\t    allocator_type;\n+      typedef _Key\t\t\t\t    key_type;\n+      typedef _Key\t\t\t\t    value_type;\n+      typedef _Compare\t\t\t\t    key_compare;\n+      typedef _Compare\t\t\t\t    value_compare;\n+      typedef _Allocator\t\t\t    allocator_type;\n       typedef typename _Allocator::reference        reference;\n       typedef typename _Allocator::const_reference  const_reference;\n-      \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, set> \n+\n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, set>\n                                                     iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, set>\n                                                     const_iterator;\n@@ -67,108 +67,108 @@ namespace __gnu_debug_def\n       typedef typename _Allocator::const_pointer    const_pointer;\n       typedef std::reverse_iterator<iterator>       reverse_iterator;\n       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n-      \n+\n       // 23.3.3.1 construct/copy/destroy:\n       explicit set(const _Compare& __comp = _Compare(),\n \t\t   const _Allocator& __a = _Allocator())\n       : _Base(__comp, __a) { }\n-      \n+\n       template<typename _InputIterator>\n         set(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp = _Compare(),\n \t    const _Allocator& __a = _Allocator())\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a) { }\n \n-      set(const set<_Key,_Compare,_Allocator>& __x) \n+      set(const set<_Key,_Compare,_Allocator>& __x)\n       : _Base(__x), _Safe_base() { }\n-    \n+\n       set(const _Base& __x) : _Base(__x), _Safe_base() { }\n-      \n+\n       ~set() { }\n-      \n-      set<_Key,_Compare,_Allocator>& \n+\n+      set<_Key,_Compare,_Allocator>&\n       operator=(const set<_Key,_Compare,_Allocator>& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n-      \n+\n       using _Base::get_allocator;\n-      \n+\n       // iterators:\n-      iterator       \n-      begin() \n+      iterator\n+      begin()\n       { return iterator(_Base::begin(), this); }\n-      \n-      const_iterator \n-      begin() const \n+\n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n-      \n-      iterator       \n+\n+      iterator\n       end()\n       { return iterator(_Base::end(), this); }\n-      \n-      const_iterator \n-      end() const   \n+\n+      const_iterator\n+      end() const\n       { return const_iterator(_Base::end(), this); }\n-      \n-      reverse_iterator \n+\n+      reverse_iterator\n       rbegin()\n       { return reverse_iterator(end()); }\n-      \n-      const_reverse_iterator \n+\n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n-      \n-      reverse_iterator \n-      rend() \n+\n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n-      \n-      const_reverse_iterator \n-      rend() const \n+\n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n-      \n+\n       // capacity:\n       using _Base::empty;\n       using _Base::size;\n       using _Base::max_size;\n-      \n+\n       // modifiers:\n-      std::pair<iterator, bool> \n+      std::pair<iterator, bool>\n       insert(const value_type& __x)\n       {\n \ttypedef typename _Base::iterator _Base_iterator;\n \tstd::pair<_Base_iterator, bool> __res = _Base::insert(__x);\n \treturn std::pair<iterator, bool>(iterator(__res.first, this),\n \t\t\t\t\t __res.second);\n       }\n-      \n-      iterator \n+\n+      iterator\n       insert(iterator __position, const value_type& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n-      \n+\n       template <typename _InputIterator>\n-        void \n+        void\n         insert(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n \t  _Base::insert(__first, __last);\n \t}\n-      \n-      void \n+\n+      void\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \t__position._M_invalidate();\n \t_Base::erase(__position.base());\n       }\n-      \n-      size_type \n+\n+      size_type\n       erase(const key_type& __x)\n       {\n \titerator __victim = find(__x);\n@@ -181,66 +181,66 @@ namespace __gnu_debug_def\n \t  return 1;\n         }\n       }\n-      \n-      void \n+\n+      void\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-\t\n+\n \twhile (__first != __last)\n         this->erase(__first++);\n       }\n-      \n-      void \n+\n+      void\n       swap(set<_Key,_Compare,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n       }\n-      \n-      void \n+\n+      void\n       clear()\n       { this->erase(begin(), end()); }\n-      \n+\n       // observers:\n       using _Base::key_comp;\n       using _Base::value_comp;\n-      \n+\n       // set operations:\n-      iterator \n+      iterator\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n-      \n+\n       using _Base::count;\n-      \n-      iterator \n+\n+      iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n-      \n-      iterator \n+\n+      iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      const_iterator \n+      const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n-      \n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -250,7 +250,7 @@ namespace __gnu_debug_def\n \treturn std::make_pair(iterator(__res.first, this),\n \t\t\t      iterator(__res.second, this));\n       }\n-      \n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n       std::pair<const_iterator,const_iterator>\n@@ -262,62 +262,62 @@ namespace __gnu_debug_def\n \treturn std::make_pair(const_iterator(__res.first, this),\n \t\t\t      const_iterator(__res.second, this));\n       }\n-      \n-      _Base&       \n+\n+      _Base&\n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n-      \n+\n     private:\n-      void \n+      void\n       _M_invalidate_all()\n       {\n \ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_Not_equal_to<_Base_const_iterator> _Not_equal;\n \tthis->_M_invalidate_if(_Not_equal(_M_base().end()));\n       }\n     };\n-  \n+\n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator==(const set<_Key,_Compare,_Allocator>& __lhs,\n \t       const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator!=(const set<_Key,_Compare,_Allocator>& __lhs,\n \t       const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<(const set<_Key,_Compare,_Allocator>& __lhs,\n \t      const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<=(const set<_Key,_Compare,_Allocator>& __lhs,\n \t       const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>=(const set<_Key,_Compare,_Allocator>& __lhs,\n \t       const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>(const set<_Key,_Compare,_Allocator>& __lhs,\n \t      const set<_Key,_Compare,_Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     void\n-    swap(set<_Key,_Compare,_Allocator>& __x, \n+    swap(set<_Key,_Compare,_Allocator>& __x,\n \t set<_Key,_Compare,_Allocator>& __y)\n     { return __x.swap(__y); }\n } // namespace __gnu_debug_def"}, {"sha": "a91c004e93792b02cd9c0c2f1f88ae3514cc42e8", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 139, "deletions": 139, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -38,7 +38,7 @@\n namespace __gnu_debug\n {\n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    class basic_string \n+    class basic_string\n     : public std::basic_string<_CharT, _Traits, _Allocator>,\n       public __gnu_debug::_Safe_sequence<basic_string<_CharT, _Traits,\n \t\t\t\t\t\t      _Allocator> >\n@@ -48,9 +48,9 @@ namespace __gnu_debug\n \n   public:\n     // types:\n-    typedef _Traits                     \t       traits_type;\n-    typedef typename _Traits::char_type \t       value_type;\n-    typedef _Allocator                  \t       allocator_type;\n+    typedef _Traits\t\t\t\t       traits_type;\n+    typedef typename _Traits::char_type\t\t       value_type;\n+    typedef _Allocator\t\t\t\t       allocator_type;\n     typedef typename _Allocator::size_type             size_type;\n     typedef typename _Allocator::difference_type       difference_type;\n     typedef typename _Allocator::reference             reference;\n@@ -60,7 +60,7 @@ namespace __gnu_debug\n \n     typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, basic_string>\n                                                        iterator;\n-    typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, \n+    typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,\n                                          basic_string> const_iterator;\n \n     typedef std::reverse_iterator<iterator>            reverse_iterator;\n@@ -77,13 +77,13 @@ namespace __gnu_debug\n     basic_string(const _Base& __base) : _Base(__base), _Safe_base() { }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 42. string ctors specify wrong default allocator \n+    // 42. string ctors specify wrong default allocator\n     basic_string(const basic_string& __str)\n     : _Base(__str, 0, _Base::npos, __str.get_allocator()), _Safe_base()\n     { }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 42. string ctors specify wrong default allocator \n+    // 42. string ctors specify wrong default allocator\n     basic_string(const basic_string& __str, size_type __pos,\n \t\t   size_type __n = _Base::npos,\n \t\t   const _Allocator& __a = _Allocator())\n@@ -112,15 +112,15 @@ namespace __gnu_debug\n \n     ~basic_string() { }\n \n-    basic_string& \n+    basic_string&\n     operator=(const basic_string& __str)\n     {\n       *static_cast<_Base*>(this) = __str;\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     operator=(const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n@@ -129,7 +129,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     operator=(_CharT __c)\n     {\n       *static_cast<_Base*>(this) = __c;\n@@ -138,58 +138,58 @@ namespace __gnu_debug\n     }\n \n     // 21.3.2 iterators:\n-    iterator \n-    begin() \n+    iterator\n+    begin()\n     { return iterator(_Base::begin(), this); }\n \n-    const_iterator \n-    begin() const \n+    const_iterator\n+    begin() const\n     { return const_iterator(_Base::begin(), this); }\n \n-    iterator \n-    end() \n+    iterator\n+    end()\n     { return iterator(_Base::end(), this); }\n \n-    const_iterator \n+    const_iterator\n     end() const\n     { return const_iterator(_Base::end(), this); }\n \n-    reverse_iterator \n-    rbegin() \n+    reverse_iterator\n+    rbegin()\n     { return reverse_iterator(end()); }\n \n-    const_reverse_iterator \n+    const_reverse_iterator\n     rbegin() const\n     { return const_reverse_iterator(end()); }\n \n     reverse_iterator\n     rend()\n     { return reverse_iterator(begin()); }\n \n-    const_reverse_iterator \n-    rend() const \n+    const_reverse_iterator\n+    rend() const\n     { return const_reverse_iterator(begin()); }\n \n     // 21.3.3 capacity:\n     using _Base::size;\n     using _Base::length;\n     using _Base::max_size;\n \n-    void \n+    void\n     resize(size_type __n, _CharT __c)\n     {\n       _Base::resize(__n, __c);\n       this->_M_invalidate_all();\n     }\n \n-    void \n+    void\n     resize(size_type __n)\n     { this->resize(__n, _CharT()); }\n \n     using _Base::capacity;\n     using _Base::reserve;\n \n-    void \n+    void\n     clear()\n     {\n       _Base::clear();\n@@ -199,7 +199,7 @@ namespace __gnu_debug\n     using _Base::empty;\n \n     // 21.3.4 element access:\n-    const_reference \n+    const_reference\n     operator[](size_type __pos) const\n     {\n       _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n@@ -210,7 +210,7 @@ namespace __gnu_debug\n       return _M_base()[__pos];\n     }\n \n-    reference \n+    reference\n     operator[](size_type __pos)\n     {\n       __glibcxx_check_subscript(__pos);\n@@ -220,15 +220,15 @@ namespace __gnu_debug\n     using _Base::at;\n \n     // 21.3.5 modifiers:\n-    basic_string& \n+    basic_string&\n     operator+=(const basic_string& __str)\n     {\n       _M_base() += __str;\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     operator+=(const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n@@ -237,31 +237,31 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     operator+=(_CharT __c)\n     {\n       _M_base() += __c;\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     append(const basic_string& __str)\n     {\n       _Base::append(__str);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     append(const basic_string& __str, size_type __pos, size_type __n)\n     {\n       _Base::append(__str, __pos, __n);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     append(const _CharT* __s, size_type __n)\n     {\n       __glibcxx_check_string_len(__s, __n);\n@@ -270,7 +270,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     append(const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n@@ -279,7 +279,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     append(size_type __n, _CharT __c)\n     {\n       _Base::append(__n, __c);\n@@ -288,7 +288,7 @@ namespace __gnu_debug\n     }\n \n     template<typename _InputIterator>\n-      basic_string& \n+      basic_string&\n       append(_InputIterator __first, _InputIterator __last)\n       {\n \t__glibcxx_check_valid_range(__first, __last);\n@@ -298,31 +298,31 @@ namespace __gnu_debug\n       }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 7. string clause minor problems \n-    void \n+    // 7. string clause minor problems\n+    void\n     push_back(_CharT __c)\n     {\n       _Base::push_back(__c);\n       this->_M_invalidate_all();\n     }\n \n-    basic_string& \n+    basic_string&\n     assign(const basic_string& __x)\n     {\n       _Base::assign(__x);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     assign(const basic_string& __str, size_type __pos, size_type __n)\n     {\n       _Base::assign(__str, __pos, __n);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     assign(const _CharT* __s, size_type __n)\n     {\n       __glibcxx_check_string_len(__s, __n);\n@@ -331,7 +331,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     assign(const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n@@ -340,33 +340,33 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     assign(size_type __n, _CharT __c)\n     {\n       _Base::assign(__n, __c);\n       this->_M_invalidate_all();\n-      return *this;\t\n+      return *this;\n     }\n \n     template<typename _InputIterator>\n-      basic_string& \n+      basic_string&\n       assign(_InputIterator __first, _InputIterator __last)\n       {\n \t__glibcxx_check_valid_range(__first, __last);\n \t_Base::assign(__first, __last);\n \tthis->_M_invalidate_all();\n-\treturn *this;\t\n+\treturn *this;\n       }\n \n-    basic_string& \n+    basic_string&\n     insert(size_type __pos1, const basic_string& __str)\n     {\n       _Base::insert(__pos1, __str);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     insert(size_type __pos1, const basic_string& __str,\n \t   size_type __pos2, size_type __n)\n     {\n@@ -375,7 +375,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     insert(size_type __pos, const _CharT* __s, size_type __n)\n     {\n       __glibcxx_check_string(__s);\n@@ -384,24 +384,24 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     insert(size_type __pos, const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n       _Base::insert(__pos, __s);\n       this->_M_invalidate_all();\n-      return *this;\t\n+      return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     insert(size_type __pos, size_type __n, _CharT __c)\n     {\n       _Base::insert(__pos, __n, __c);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    iterator \n+    iterator\n     insert(iterator __p, _CharT __c)\n     {\n       __glibcxx_check_insert(__p);\n@@ -410,7 +410,7 @@ namespace __gnu_debug\n       return iterator(__res, this);\n     }\n \n-    void \n+    void\n     insert(iterator __p, size_type __n, _CharT __c)\n     {\n       __glibcxx_check_insert(__p);\n@@ -419,23 +419,23 @@ namespace __gnu_debug\n     }\n \n     template<typename _InputIterator>\n-      void \n+      void\n       insert(iterator __p, _InputIterator __first, _InputIterator __last)\n       {\n \t__glibcxx_check_insert_range(__p, __first, __last);\n \t_Base::insert(__p.base(), __first, __last);\n \tthis->_M_invalidate_all();\n       }\n \n-    basic_string& \n+    basic_string&\n     erase(size_type __pos = 0, size_type __n = _Base::npos)\n     {\n       _Base::erase(__pos, __n);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    iterator \n+    iterator\n     erase(iterator __position)\n     {\n       __glibcxx_check_erase(__position);\n@@ -444,7 +444,7 @@ namespace __gnu_debug\n       return iterator(__res, this);\n     }\n \n-    iterator \n+    iterator\n     erase(iterator __first, iterator __last)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -456,15 +456,15 @@ namespace __gnu_debug\n       return iterator(__res, this);\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(size_type __pos1, size_type __n1, const basic_string& __str)\n     {\n       _Base::replace(__pos1, __n1, __str);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2)\n     {\n@@ -473,8 +473,8 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n-    replace(size_type __pos, size_type __n1, const _CharT* __s, \n+    basic_string&\n+    replace(size_type __pos, size_type __n1, const _CharT* __s,\n \t    size_type __n2)\n     {\n       __glibcxx_check_string_len(__s, __n2);\n@@ -483,7 +483,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(size_type __pos, size_type __n1, const _CharT* __s)\n     {\n       __glibcxx_check_string(__s);\n@@ -492,24 +492,24 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n     {\n       _Base::replace(__pos, __n1, __n2, __c);\n       this->_M_invalidate_all();\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(iterator __i1, iterator __i2, const basic_string& __str)\n     {\n       __glibcxx_check_erase_range(__i1, __i2);\n       _Base::replace(__i1.base(), __i2.base(), __str);\n       this->_M_invalidate_all();\n       return *this;\n     }\n-    \n-    basic_string& \n+\n+    basic_string&\n     replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n     {\n       __glibcxx_check_erase_range(__i1, __i2);\n@@ -519,7 +519,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(iterator __i1, iterator __i2, const _CharT* __s)\n     {\n       __glibcxx_check_erase_range(__i1, __i2);\n@@ -529,7 +529,7 @@ namespace __gnu_debug\n       return *this;\n     }\n \n-    basic_string& \n+    basic_string&\n     replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n     {\n       __glibcxx_check_erase_range(__i1, __i2);\n@@ -539,7 +539,7 @@ namespace __gnu_debug\n     }\n \n     template<typename _InputIterator>\n-      basic_string& \n+      basic_string&\n       replace(iterator __i1, iterator __i2,\n \t      _InputIterator __j1, _InputIterator __j2)\n       {\n@@ -550,14 +550,14 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-    size_type \n+    size_type\n     copy(_CharT* __s, size_type __n, size_type __pos = 0) const\n     {\n       __glibcxx_check_string_len(__s, __n);\n       return _Base::copy(__s, __n, __pos);\n     }\n \n-    void \n+    void\n     swap(basic_string<_CharT,_Traits,_Allocator>& __x)\n     {\n       _Base::swap(__x);\n@@ -567,15 +567,15 @@ namespace __gnu_debug\n     }\n \n     // 21.3.6 string operations:\n-    const _CharT* \n+    const _CharT*\n     c_str() const\n     {\n       const _CharT* __res = _Base::c_str();\n       this->_M_invalidate_all();\n       return __res;\n     }\n \n-    const _CharT* \n+    const _CharT*\n     data() const\n     {\n       const _CharT* __res = _Base::data();\n@@ -585,158 +585,158 @@ namespace __gnu_debug\n \n     using _Base::get_allocator;\n \n-    size_type \n+    size_type\n     find(const basic_string& __str, size_type __pos = 0) const\n     { return _Base::find(__str, __pos); }\n \n-    size_type \n+    size_type\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::find(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     find(const _CharT* __s, size_type __pos = 0) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::find(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     find(_CharT __c, size_type __pos = 0) const\n     { return _Base::find(__c, __pos); }\n \n-    size_type \n+    size_type\n     rfind(const basic_string& __str, size_type __pos = _Base::npos) const\n     { return _Base::rfind(__str, __pos); }\n \n-    size_type \n+    size_type\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n-    { \n+    {\n       __glibcxx_check_string_len(__s, __n);\n       return _Base::rfind(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     rfind(const _CharT* __s, size_type __pos = _Base::npos) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::rfind(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     rfind(_CharT __c, size_type __pos = _Base::npos) const\n     { return _Base::rfind(__c, __pos); }\n-\t\n-    size_type \n+\n+    size_type\n     find_first_of(const basic_string& __str, size_type __pos = 0) const\n     { return _Base::find_first_of(__str, __pos); }\n \n-    size_type \n+    size_type\n     find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    { \n+    {\n       __glibcxx_check_string(__s);\n-      return _Base::find_first_of(__s, __pos, __n); \n+      return _Base::find_first_of(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     find_first_of(const _CharT* __s, size_type __pos = 0) const\n-    { \n+    {\n       __glibcxx_check_string(__s);\n-      return _Base::find_first_of(__s, __pos); \n+      return _Base::find_first_of(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     find_first_of(_CharT __c, size_type __pos = 0) const\n     { return _Base::find_first_of(__c, __pos); }\n \n-    size_type \n+    size_type\n     find_last_of(const basic_string& __str, size_type __pos = _Base::npos) const\n     { return _Base::find_last_of(__str, __pos); }\n \n-    size_type \n+    size_type\n     find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    { \n+    {\n       __glibcxx_check_string(__s);\n       return _Base::find_last_of(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     find_last_of(const _CharT* __s, size_type __pos = _Base::npos) const\n-    { \n+    {\n       __glibcxx_check_string(__s);\n       return _Base::find_last_of(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     find_last_of(_CharT __c, size_type __pos = _Base::npos) const\n     { return _Base::find_last_of(__c, __pos); }\n \n-    size_type \n+    size_type\n     find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n     { return _Base::find_first_not_of(__str, __pos); }\n \n-    size_type \n+    size_type\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_check_string_len(__s, __n);\n       return _Base::find_first_not_of(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::find_first_not_of(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     find_first_not_of(_CharT __c, size_type __pos = 0) const\n     { return _Base::find_first_not_of(__c, __pos); }\n \n-    size_type \n+    size_type\n     find_last_not_of(const basic_string& __str,\n \t\t\t\t  size_type __pos = _Base::npos) const\n     { return _Base::find_last_not_of(__str, __pos); }\n \n-    size_type \n+    size_type\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::find_last_not_of(__s, __pos, __n);\n     }\n \n-    size_type \n+    size_type\n     find_last_not_of(const _CharT* __s, size_type __pos = _Base::npos) const\n     {\n       __glibcxx_check_string(__s);\n       return _Base::find_last_not_of(__s, __pos);\n     }\n \n-    size_type \n+    size_type\n     find_last_not_of(_CharT __c, size_type __pos = _Base::npos) const\n     { return _Base::find_last_not_of(__c, __pos); }\n \n-    basic_string \n+    basic_string\n     substr(size_type __pos = 0, size_type __n = _Base::npos) const\n     { return basic_string(_Base::substr(__pos, __n)); }\n \n-    int \n+    int\n     compare(const basic_string& __str) const\n     { return _Base::compare(__str); }\n \n-    int \n+    int\n     compare(size_type __pos1, size_type __n1,\n \t\t  const basic_string& __str) const\n     { return _Base::compare(__pos1, __n1, __str); }\n \n-    int \n+    int\n     compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2) const\n     { return _Base::compare(__pos1, __n1, __str, __pos2, __n2); }\n \n-    int \n+    int\n     compare(const _CharT* __s) const\n     {\n       __glibcxx_check_string(__s);\n@@ -745,7 +745,7 @@ namespace __gnu_debug\n \n     //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n     //  5. string::compare specification questionable\n-    int \n+    int\n     compare(size_type __pos1, size_type __n1, const _CharT* __s) const\n     {\n       __glibcxx_check_string(__s);\n@@ -754,18 +754,18 @@ namespace __gnu_debug\n \n     //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n     //  5. string::compare specification questionable\n-    int \n+    int\n     compare(size_type __pos1, size_type __n1,const _CharT* __s,\n \t      size_type __n2) const\n     {\n       __glibcxx_check_string_len(__s, __n2);\n       return _Base::compare(__pos1, __n1, __s, __n2);\n     }\n \n-    _Base&       \n+    _Base&\n     _M_base() { return *this; }\n \n-    const _Base& \n+    const _Base&\n     _M_base() const { return *this; }\n \n     using _Safe_base::_M_invalidate_all;\n@@ -781,24 +781,24 @@ namespace __gnu_debug\n     inline basic_string<_CharT,_Traits,_Allocator>\n     operator+(const _CharT* __lhs,\n \t      const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n-    { \n+    {\n       __glibcxx_check_string(__lhs);\n       return basic_string<_CharT,_Traits,_Allocator>(__lhs) += __rhs;\n     }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline basic_string<_CharT,_Traits,_Allocator>\n-    operator+(_CharT __lhs, \n+    operator+(_CharT __lhs,\n \t      const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return basic_string<_CharT,_Traits,_Allocator>(1, __lhs) += __rhs; }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline basic_string<_CharT,_Traits,_Allocator>\n     operator+(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t      const _CharT* __rhs)\n-    { \n+    {\n       __glibcxx_check_string(__rhs);\n-      return basic_string<_CharT,_Traits,_Allocator>(__lhs) += __rhs; \n+      return basic_string<_CharT,_Traits,_Allocator>(__lhs) += __rhs;\n     }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n@@ -808,11 +808,11 @@ namespace __gnu_debug\n     { return basic_string<_CharT,_Traits,_Allocator>(__lhs) += __rhs; }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator==(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t       const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator==(const _CharT* __lhs,\n@@ -832,11 +832,11 @@ namespace __gnu_debug\n     }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator!=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t       const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator!=(const _CharT* __lhs,\n@@ -856,11 +856,11 @@ namespace __gnu_debug\n     }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t      const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator<(const _CharT* __lhs,\n@@ -880,11 +880,11 @@ namespace __gnu_debug\n     }\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator<=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t       const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator<=(const _CharT* __lhs,\n@@ -902,13 +902,13 @@ namespace __gnu_debug\n       __glibcxx_check_string(__rhs);\n       return __lhs._M_base() <= __rhs;\n     }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t       const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator>=(const _CharT* __lhs,\n@@ -917,7 +917,7 @@ namespace __gnu_debug\n       __glibcxx_check_string(__lhs);\n       return __lhs >= __rhs._M_base();\n     }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator>=(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n@@ -926,13 +926,13 @@ namespace __gnu_debug\n       __glibcxx_check_string(__rhs);\n       return __lhs._M_base() >= __rhs;\n     }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline bool \n+    inline bool\n     operator>(const basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t      const basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline bool\n     operator>(const _CharT* __lhs,\n@@ -953,7 +953,7 @@ namespace __gnu_debug\n \n   // 21.3.7.8:\n   template<typename _CharT, typename _Traits, typename _Allocator>\n-    inline void \n+    inline void\n     swap(basic_string<_CharT,_Traits,_Allocator>& __lhs,\n \t basic_string<_CharT,_Traits,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n@@ -979,23 +979,23 @@ namespace __gnu_debug\n     getline(std::basic_istream<_CharT,_Traits>& __is,\n \t    basic_string<_CharT,_Traits,_Allocator>& __str, _CharT __delim)\n     {\n-      std::basic_istream<_CharT,_Traits>& __res = getline(__is, \n+      std::basic_istream<_CharT,_Traits>& __res = getline(__is,\n \t\t\t\t\t\t\t  __str._M_base(),\n \t\t\t\t\t\t\t__delim);\n       __str._M_invalidate_all();\n       return __res;\n     }\n-  \n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     std::basic_istream<_CharT,_Traits>&\n     getline(std::basic_istream<_CharT,_Traits>& __is,\n \t    basic_string<_CharT,_Traits,_Allocator>& __str)\n     {\n-      std::basic_istream<_CharT,_Traits>& __res = getline(__is, \n+      std::basic_istream<_CharT,_Traits>& __res = getline(__is,\n \t\t\t\t\t\t\t  __str._M_base());\n       __str._M_invalidate_all();\n       return __res;\n     }\n } // namespace __gnu_debug\n \n-#endif \n+#endif"}, {"sha": "f7fa3e8f092e81957a15441abad5a3e5499404bb", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526da49cc7dea9f6022612320eb980535b91eecb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=526da49cc7dea9f6022612320eb980535b91eecb", "patch": "@@ -38,7 +38,7 @@\n \n namespace __gnu_debug_def\n {\n-  template<typename _Tp, \n+  template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n     class vector\n     : public __gnu_norm::vector<_Tp, _Allocator>,\n@@ -54,16 +54,16 @@ namespace __gnu_debug_def\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,vector> \n+      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator,vector>\n       iterator;\n       typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator,vector>\n       const_iterator;\n \n       typedef typename _Base::size_type             size_type;\n       typedef typename _Base::difference_type       difference_type;\n \n-      typedef _Tp        \t\t\t    value_type;\n-      typedef _Allocator \t\t\t    allocator_type;\n+      typedef _Tp\t\t\t\t    value_type;\n+      typedef _Allocator\t\t\t    allocator_type;\n       typedef typename _Allocator::pointer          pointer;\n       typedef typename _Allocator::const_pointer    const_pointer;\n       typedef std::reverse_iterator<iterator>       reverse_iterator;\n@@ -80,21 +80,21 @@ namespace __gnu_debug_def\n       template<class _InputIterator>\n         vector(_InputIterator __first, _InputIterator __last,\n \t       const _Allocator& __a = _Allocator())\n-\t: _Base(__gnu_debug::__check_valid_range(__first, __last), \n+\t: _Base(__gnu_debug::__check_valid_range(__first, __last),\n \t\t__last, __a),\n \t  _M_guaranteed_capacity(0)\n         { _M_update_guaranteed_capacity(); }\n \n-      vector(const vector<_Tp,_Allocator>& __x) \n+      vector(const vector<_Tp,_Allocator>& __x)\n       : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n \n       /// Construction from a release-mode vector\n-      vector(const _Base& __x) \n+      vector(const _Base& __x)\n       : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n \n       ~vector() { }\n \n-      vector<_Tp,_Allocator>& \n+      vector<_Tp,_Allocator>&\n       operator=(const vector<_Tp,_Allocator>& __x)\n       {\n \tstatic_cast<_Base&>(*this) = __x;\n@@ -104,7 +104,7 @@ namespace __gnu_debug_def\n       }\n \n       template<typename _InputIterator>\n-        void \n+        void\n         assign(_InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_valid_range(__first, __last);\n@@ -113,7 +113,7 @@ namespace __gnu_debug_def\n \t  _M_update_guaranteed_capacity();\n \t}\n \n-      void \n+      void\n       assign(size_type __n, const _Tp& __u)\n       {\n \t_Base::assign(__n, __u);\n@@ -124,43 +124,43 @@ namespace __gnu_debug_def\n       using _Base::get_allocator;\n \n       // iterators:\n-      iterator \n-      begin() \n+      iterator\n+      begin()\n       { return iterator(_Base::begin(), this); }\n \n-      const_iterator \n-      begin() const \n+      const_iterator\n+      begin() const\n       { return const_iterator(_Base::begin(), this); }\n \n-      iterator \n+      iterator\n       end()\n       { return iterator(_Base::end(), this); }\n \n-      const_iterator \n+      const_iterator\n       end() const\n       { return const_iterator(_Base::end(), this); }\n \n-      reverse_iterator \n-      rbegin() \n+      reverse_iterator\n+      rbegin()\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator \n-      rend() \n+      reverse_iterator\n+      rend()\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator \n-      rend() const \n+      const_reverse_iterator\n+      rend() const\n       { return const_reverse_iterator(begin()); }\n \n       // 23.2.4.2 capacity:\n       using _Base::size;\n       using _Base::max_size;\n \n-      void \n+      void\n       resize(size_type __sz, _Tp __c = _Tp())\n       {\n \tbool __realloc = _M_requires_reallocation(__sz);\n@@ -174,7 +174,7 @@ namespace __gnu_debug_def\n       using _Base::capacity;\n       using _Base::empty;\n \n-      void \n+      void\n       reserve(size_type __n)\n       {\n \tbool __realloc = _M_requires_reallocation(__n);\n@@ -186,14 +186,14 @@ namespace __gnu_debug_def\n       }\n \n       // element access:\n-      reference \n+      reference\n       operator[](size_type __n)\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n \n-      const_reference \n+      const_reference\n       operator[](size_type __n) const\n       {\n \t__glibcxx_check_subscript(__n);\n@@ -202,36 +202,36 @@ namespace __gnu_debug_def\n \n       using _Base::at;\n \n-      reference \n+      reference\n       front()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n-      const_reference \n+      const_reference\n       front() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n-      reference \n+      reference\n       back()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n-      const_reference \n+      const_reference\n       back() const\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n       // 23.2.4.3 modifiers:\n-      void \n+      void\n       push_back(const _Tp& __x)\n       {\n \tbool __realloc = _M_requires_reallocation(this->size() + 1);\n@@ -241,7 +241,7 @@ namespace __gnu_debug_def\n \t_M_update_guaranteed_capacity();\n       }\n \n-      void \n+      void\n       pop_back()\n       {\n \t__glibcxx_check_nonempty();\n@@ -250,7 +250,7 @@ namespace __gnu_debug_def\n \t_Base::pop_back();\n       }\n \n-      iterator \n+      iterator\n       insert(iterator __position, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n@@ -265,7 +265,7 @@ namespace __gnu_debug_def\n \treturn iterator(__res, this);\n       }\n \n-      void \n+      void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n@@ -280,27 +280,27 @@ namespace __gnu_debug_def\n       }\n \n       template<class _InputIterator>\n-        void \n-        insert(iterator __position, \n+        void\n+        insert(iterator __position,\n \t       _InputIterator __first, _InputIterator __last)\n         {\n \t  __glibcxx_check_insert_range(__position, __first, __last);\n-\t  \n+\n \t  /* Hard to guess if invalidation will occur, because __last\n \t     - __first can't be calculated in all cases, so we just\n \t     punt here by checking if it did occur. */\n \t  typename _Base::iterator __old_begin = _M_base().begin();\n \t  difference_type __offset = __position - begin();\n \t  _Base::insert(__position.base(), __first, __last);\n-\t  \n+\n \t  if (_M_base().begin() != __old_begin)\n \t    this->_M_invalidate_all();\n \t  else\n \t    this->_M_invalidate_if(_After_nth(__offset, _M_base().begin()));\n \t  _M_update_guaranteed_capacity();\n \t}\n-      \n-      iterator \n+\n+      iterator\n       erase(iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n@@ -310,46 +310,46 @@ namespace __gnu_debug_def\n \treturn iterator(__res, this);\n       }\n \n-      iterator \n+      iterator\n       erase(iterator __first, iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-      \n+\n \tdifference_type __offset = __first - begin();\n-\ttypename _Base::iterator __res = _Base::erase(__first.base(), \n+\ttypename _Base::iterator __res = _Base::erase(__first.base(),\n \t\t\t\t\t\t\t __last.base());\n \tthis->_M_invalidate_if(_After_nth(__offset, _M_base().begin()));\n \treturn iterator(__res, this);\n       }\n \n-      void \n+      void\n       swap(vector<_Tp,_Allocator>& __x)\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n         std::swap(_M_guaranteed_capacity, __x._M_guaranteed_capacity);\n       }\n \n-      void \n+      void\n       clear()\n       {\n \t_Base::clear();\n \tthis->_M_invalidate_all();\n         _M_guaranteed_capacity = 0;\n       }\n \n-      _Base&       \n+      _Base&\n       _M_base() { return *this; }\n \n-      const _Base& \n+      const _Base&\n       _M_base() const { return *this; }\n \n     private:\n       size_type _M_guaranteed_capacity;\n \n-      bool \n+      bool\n       _M_requires_reallocation(size_type __elements)\n       {\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n@@ -358,8 +358,8 @@ namespace __gnu_debug_def\n \treturn __elements > _M_guaranteed_capacity;\n #endif\n       }\n-      \n-      void \n+\n+      void\n       _M_update_guaranteed_capacity()\n       {\n \tif (this->size() > _M_guaranteed_capacity)\n@@ -375,31 +375,31 @@ namespace __gnu_debug_def\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator!=(const vector<_Tp, _Alloc>& __lhs, \n+    operator!=(const vector<_Tp, _Alloc>& __lhs,\n \t       const vector<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<(const vector<_Tp, _Alloc>& __lhs, \n+    operator<(const vector<_Tp, _Alloc>& __lhs,\n \t      const vector<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<=(const vector<_Tp, _Alloc>& __lhs, \n+    operator<=(const vector<_Tp, _Alloc>& __lhs,\n \t       const vector<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>=(const vector<_Tp, _Alloc>& __lhs, \n+    operator>=(const vector<_Tp, _Alloc>& __lhs,\n \t       const vector<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>(const vector<_Tp, _Alloc>& __lhs, \n+    operator>(const vector<_Tp, _Alloc>& __lhs,\n \t      const vector<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n@@ -409,4 +409,4 @@ namespace __gnu_debug_def\n     { __lhs.swap(__rhs); }\n } // namespace __gnu_debug_def\n \n-#endif \n+#endif"}]}