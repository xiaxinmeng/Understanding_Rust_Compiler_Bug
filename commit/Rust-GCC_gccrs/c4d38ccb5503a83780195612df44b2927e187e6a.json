{"sha": "c4d38ccb5503a83780195612df44b2927e187e6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkMzhjY2I1NTAzYTgzNzgwMTk1NjEyZGY0NGIyOTI3ZTE4N2U2YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-03-25T13:17:37Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-03-25T13:17:37Z"}, "message": "Fix warnings from Kaveh R. Ghazi\n\nFrom-SVN: r18826", "tree": {"sha": "3457945541aaabd9c1d04c7bbf59ee53bc6c20fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3457945541aaabd9c1d04c7bbf59ee53bc6c20fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d38ccb5503a83780195612df44b2927e187e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d38ccb5503a83780195612df44b2927e187e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d38ccb5503a83780195612df44b2927e187e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d38ccb5503a83780195612df44b2927e187e6a/comments", "author": null, "committer": null, "parents": [{"sha": "c440840d77ac8134f0d1a63cbbe286fc1bb76e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c440840d77ac8134f0d1a63cbbe286fc1bb76e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c440840d77ac8134f0d1a63cbbe286fc1bb76e6d"}], "stats": {"total": 148, "additions": 97, "deletions": 51}, "files": [{"sha": "e76dc8109b45a58f3beca569e5a15267488ed311", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -1,3 +1,37 @@\n+Wed Mar 25 16:09:01 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.h (FUNCTION_ARG_PADDING): Cast result to be enum\n+\tdirection.\n+\t(function_arg_padding): Declare.\n+\n+\t* rs6000.c: Include system.h.\n+\t(function_arg_padding): Change return type to int, cast enum's to\n+\tint.\n+\n+\t(From Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>)\n+\t* collect2.c (scan_prog_file): Add explicit braces to avoid\n+\tambiguous `else'.\n+ \n+\t* dbxout.c (dbxout_type_fields): Add braces around empty body in\n+\tan if-statement.\n+\t(dbxout_type): Likewise.\n+ \n+\t* rs6000.c (rs6000_override_options): Change type of `i', `j' and\n+\t`ptt_size' from int to size_t.\n+\t(rs6000_file_start): Likewise for `i'.\n+\t(rs6000_replace_regno): Add default case in enumeration switch.\n+\t(output_epilog): Remove unused variable `i'.\n+\t(rs6000_longcall_ref): Remove unused variables `len', `p', `reg1'\n+\tand `reg2'.\n+ \n+\t* rs6000.h (ADDITIONAL_REGISTER_NAMES): Add missing braces around\n+\tinitializer.\n+\t(get_issue_rate, non_logical_cint_operand): Add prototype.\n+\t(rs6000_output_load_toc_table): Ditto.\n+ \n+\t* rs6000.md (udivmodsi4): Add explicit braces to avoid ambiguous\n+\t`else'.\n+ \n Wed Mar 25 10:05:19 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/thumb.c: New File.  Support for ARM's Thumb"}, {"sha": "169c3beda466713ae479536bdba9c53d445a18d1", "filename": "gcc/collect2.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -2914,12 +2914,14 @@ scan_prog_file (prog_name, which_pass)\n \t\t\t     to explicitly export all global symbols or add\n \t\t\t     them to import list.  */\n \t\t\t  if (shared_obj) \n-\t\t\t    if (which_pass == PASS_OBJ && (! export_flag))\n-\t\t\t      add_to_list (&exports, name);\n-\t\t\t    else if (! is_shared && which_pass == PASS_FIRST\n-\t\t\t\t     && import_flag\n-\t\t\t\t     && is_in_list(name, undefined.first))\n-\t\t\t      add_to_list (&imports, name);\n+\t\t\t    {\n+\t\t\t      if (which_pass == PASS_OBJ && (! export_flag))\n+\t\t\t\tadd_to_list (&exports, name);\n+\t\t\t      else if (! is_shared && which_pass == PASS_FIRST\n+\t\t\t\t       && import_flag\n+\t\t\t\t       && is_in_list(name, undefined.first))\n+\t\t\t\tadd_to_list (&imports, name);\n+\t\t\t    }\n #endif\n \t\t\t  continue;\n \t\t\t}"}, {"sha": "3be059db13fddce7eb254e210d44740072ec2bf6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include <stdio.h>\n #include <ctype.h>\n #include \"config.h\"\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -157,7 +158,7 @@ void\n rs6000_override_options (default_cpu)\n      char *default_cpu;\n {\n-  int i, j;\n+  size_t i, j;\n   struct rs6000_cpu_select *ptr;\n \n   /* Simplify the entries below by making a mask for any POWER\n@@ -241,7 +242,7 @@ rs6000_override_options (default_cpu)\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64}};\n \n-  int ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n+  size_t ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n \n   int multiple = TARGET_MULTIPLE;\t/* save current -mmultiple/-mno-multiple status */\n   int string   = TARGET_STRING;\t\t/* save current -mstring/-mno-string status */\n@@ -337,7 +338,7 @@ rs6000_file_start (file, default_cpu)\n      FILE *file;\n      char *default_cpu;\n {\n-  int i;\n+  size_t i;\n   char buffer[80];\n   char *start = buffer;\n   struct rs6000_cpu_select *ptr;\n@@ -1187,22 +1188,22 @@ init_cumulative_args (cum, fntype, libname, incoming)\n    For the AIX ABI structs are always stored left shifted in their\n    argument slot.  */\n \n-enum direction\n+int\n function_arg_padding (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n   if (type != 0 && AGGREGATE_TYPE_P (type))\n-    return upward;\n+    return (int)upward;\n \n   /* This is the default definition.  */\n   return (! BYTES_BIG_ENDIAN\n-          ? upward\n+          ? (int)upward\n           : ((mode == BLKmode\n               ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n                  && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n               : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n-             ? downward : upward));\n+             ? (int)downward : (int)upward));\n }\n \n /* If defined, a C expression that gives the alignment boundary, in bits,\n@@ -2221,6 +2222,9 @@ rs6000_replace_regno (x, from, reg)\n \t}\n \n       return x;\n+\n+    default:\n+      break;\n     }\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));\n@@ -3875,7 +3879,6 @@ output_epilog (file, size)\n   rtx insn = get_last_insn ();\n   int sp_reg = 1;\n   int sp_offset = 0;\n-  int i;\n \n   /* If the last insn was a BARRIER, we don't have to write anything except\n      the trace table.  */\n@@ -4946,9 +4949,6 @@ rs6000_longcall_ref (call_ref)\n      rtx call_ref;\n {\n   char *call_name;\n-  int len;\n-  char *p;\n-  rtx reg1, reg2;\n   tree node;\n \n   if (GET_CODE (call_ref) != SYMBOL_REF)"}, {"sha": "e50bf5d948f17c99d40cc07e7c1f06a19fb7c389", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -1468,7 +1468,7 @@ typedef struct rs6000_args\n    padding.  */\n \n #define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n-  function_arg_padding (MODE, TYPE)\n+  (enum direction) function_arg_padding (MODE, TYPE)\n \n /* If defined, a C expression that gives the alignment boundary, in bits,\n    of an argument with the specified mode and type.  If it is not defined,\n@@ -2755,26 +2755,26 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n /* Table of additional register names to use in user input.  */\n \n #define ADDITIONAL_REGISTER_NAMES \\\n- {\"r0\",    0, \"r1\",    1, \"r2\",    2, \"r3\",    3,\t\\\n-  \"r4\",    4, \"r5\",    5, \"r6\",    6, \"r7\",    7,\t\\\n-  \"r8\",    8, \"r9\",    9, \"r10\",  10, \"r11\",  11,\t\\\n-  \"r12\",  12, \"r13\",  13, \"r14\",  14, \"r15\",  15,\t\\\n-  \"r16\",  16, \"r17\",  17, \"r18\",  18, \"r19\",  19,\t\\\n-  \"r20\",  20, \"r21\",  21, \"r22\",  22, \"r23\",  23,\t\\\n-  \"r24\",  24, \"r25\",  25, \"r26\",  26, \"r27\",  27,\t\\\n-  \"r28\",  28, \"r29\",  29, \"r30\",  30, \"r31\",  31,\t\\\n-  \"fr0\",  32, \"fr1\",  33, \"fr2\",  34, \"fr3\",  35,\t\\\n-  \"fr4\",  36, \"fr5\",  37, \"fr6\",  38, \"fr7\",  39,\t\\\n-  \"fr8\",  40, \"fr9\",  41, \"fr10\", 42, \"fr11\", 43,\t\\\n-  \"fr12\", 44, \"fr13\", 45, \"fr14\", 46, \"fr15\", 47,\t\\\n-  \"fr16\", 48, \"fr17\", 49, \"fr18\", 50, \"fr19\", 51,\t\\\n-  \"fr20\", 52, \"fr21\", 53, \"fr22\", 54, \"fr23\", 55,\t\\\n-  \"fr24\", 56, \"fr25\", 57, \"fr26\", 58, \"fr27\", 59,\t\\\n-  \"fr28\", 60, \"fr29\", 61, \"fr30\", 62, \"fr31\", 63,\t\\\n-  /* no additional names for: mq, lr, ctr, ap */\t\\\n-  \"cr0\",  68, \"cr1\",  69, \"cr2\",  70, \"cr3\",  71,\t\\\n-  \"cr4\",  72, \"cr5\",  73, \"cr6\",  74, \"cr7\",  75,\t\\\n-  \"cc\",   68, \"sp\",    1, \"toc\",   2 }\n+ {{\"r0\",    0}, {\"r1\",    1}, {\"r2\",    2}, {\"r3\",    3},\t\\\n+  {\"r4\",    4}, {\"r5\",    5}, {\"r6\",    6}, {\"r7\",    7},\t\\\n+  {\"r8\",    8}, {\"r9\",    9}, {\"r10\",  10}, {\"r11\",  11},\t\\\n+  {\"r12\",  12}, {\"r13\",  13}, {\"r14\",  14}, {\"r15\",  15},\t\\\n+  {\"r16\",  16}, {\"r17\",  17}, {\"r18\",  18}, {\"r19\",  19},\t\\\n+  {\"r20\",  20}, {\"r21\",  21}, {\"r22\",  22}, {\"r23\",  23},\t\\\n+  {\"r24\",  24}, {\"r25\",  25}, {\"r26\",  26}, {\"r27\",  27},\t\\\n+  {\"r28\",  28}, {\"r29\",  29}, {\"r30\",  30}, {\"r31\",  31},\t\\\n+  {\"fr0\",  32}, {\"fr1\",  33}, {\"fr2\",  34}, {\"fr3\",  35},\t\\\n+  {\"fr4\",  36}, {\"fr5\",  37}, {\"fr6\",  38}, {\"fr7\",  39},\t\\\n+  {\"fr8\",  40}, {\"fr9\",  41}, {\"fr10\", 42}, {\"fr11\", 43},\t\\\n+  {\"fr12\", 44}, {\"fr13\", 45}, {\"fr14\", 46}, {\"fr15\", 47},\t\\\n+  {\"fr16\", 48}, {\"fr17\", 49}, {\"fr18\", 50}, {\"fr19\", 51},\t\\\n+  {\"fr20\", 52}, {\"fr21\", 53}, {\"fr22\", 54}, {\"fr23\", 55},\t\\\n+  {\"fr24\", 56}, {\"fr25\", 57}, {\"fr26\", 58}, {\"fr27\", 59},\t\\\n+  {\"fr28\", 60}, {\"fr29\", 61}, {\"fr30\", 62}, {\"fr31\", 63},\t\\\n+  /* no additional names for: mq, lr, ctr, ap */\t\t\\\n+  {\"cr0\",  68}, {\"cr1\",  69}, {\"cr2\",  70}, {\"cr3\",  71},\t\\\n+  {\"cr4\",  72}, {\"cr5\",  73}, {\"cr6\",  74}, {\"cr7\",  75},\t\\\n+  {\"cc\",   68}, {\"sp\",    1}, {\"toc\",   2} }\n \n /* How to renumber registers for dbx and gdb.  */\n \n@@ -3101,6 +3101,7 @@ extern struct rtx_def *rs6000_float_const ();\n extern struct rtx_def *rs6000_immed_double_const ();\n extern struct rtx_def *rs6000_got_register ();\n extern int direct_return ();\n+extern int get_issue_rate ();\n extern int any_operand ();\n extern int short_cint_operand ();\n extern int u_short_cint_operand ();\n@@ -3120,6 +3121,7 @@ extern int offsettable_addr_operand ();\n extern int mem_or_easy_const_operand ();\n extern int add_operand ();\n extern int non_add_cint_operand ();\n+extern int non_logical_cint_operand ();\n extern int logical_operand ();\n extern int non_logical_operand ();\n extern int mask_constant ();\n@@ -3175,12 +3177,14 @@ extern int rs6000_adjust_cost ();\n extern void rs6000_trampoline_template ();\n extern int rs6000_trampoline_size ();\n extern void rs6000_initialize_trampoline ();\n+extern void rs6000_output_load_toc_table ();\n extern int rs6000_comp_type_attributes ();\n extern int rs6000_valid_decl_attribute_p ();\n extern int rs6000_valid_type_attribute_p ();\n extern void rs6000_set_default_type_attributes ();\n extern struct rtx_def *rs6000_dll_import_ref ();\n extern struct rtx_def *rs6000_longcall_ref ();\n+extern int function_arg_padding ();\n \n /* See nonlocal_goto_receiver for when this must be set.  */\n "}, {"sha": "9bd5afd6959651fa7effc9744342eb878cf551ac", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -1602,17 +1602,19 @@\n   rtx label = 0;\n \n   if (! TARGET_POWER)\n-    if (! TARGET_POWERPC)\n-      {\n-\temit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n-\temit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-\temit_insn (gen_divus_call ());\n-\temit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n-\temit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n-\tDONE;\n-      }\n-    else\n-      FAIL;\n+    {\n+      if (! TARGET_POWERPC)\n+        {\n+\t  emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n+\t  emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n+\t  emit_insn (gen_divus_call ());\n+\t  emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n+\t  emit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n+\t  DONE;\n+        }\n+      else\n+        FAIL;\n+    }\n \n   if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) < 0)\n     {"}, {"sha": "231f0034cb17b3a88617fc4c253d32b0e36bbb88", "filename": "gcc/dbxout.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d38ccb5503a83780195612df44b2927e187e6a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=c4d38ccb5503a83780195612df44b2927e187e6a", "patch": "@@ -646,7 +646,9 @@ dbxout_type_fields (type)\n \t  /* Continue the line if necessary,\n \t     but not before the first field.  */\n \t  if (tem != TYPE_FIELDS (type))\n-\t    CONTIN;\n+\t    {\n+\t      CONTIN;\n+\t    }\n \n \t  if (use_gnu_debug_info_extensions\n \t      && flag_minimal_debug\n@@ -1427,7 +1429,9 @@ dbxout_type (type, full, show_arg_types)\n \t  fprintf (asmfile, \",\");\n \t  CHARS (20 + IDENTIFIER_LENGTH (TREE_PURPOSE (tem)));\n \t  if (TREE_CHAIN (tem) != 0)\n-\t    CONTIN;\n+\t    {\n+\t      CONTIN;\n+\t    }\n \t}\n       putc (';', asmfile);\n       CHARS (1);"}]}