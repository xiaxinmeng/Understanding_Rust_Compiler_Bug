{"sha": "906f9ad995368b4891186c07ed3c5c2fd5f53bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2ZjlhZDk5NTM2OGI0ODkxMTg2YzA3ZWQzYzVjMmZkNWY1M2JlYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-11-06T01:08:53Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-11-06T01:08:53Z"}, "message": "PR c++/67942 - diagnose placement new buffer overflow\n\ngcc/cp/\n\t* cp/init.c (warn_placement_new_too_small): Avoid assuming\n\tthe size of the first operand of placement new or its type\n\tis known.\n\ngcc/testsuite/\n\t* g++.dg/warn/Wplacement-new-size.C: Exercise placement new\n\tinvocations where the size of the destination buffer object\n\tor its type (or both) is unknown.\n\nFrom-SVN: r229831", "tree": {"sha": "290722de96f765a33eafce59384bc6741c175d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290722de96f765a33eafce59384bc6741c175d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/906f9ad995368b4891186c07ed3c5c2fd5f53bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906f9ad995368b4891186c07ed3c5c2fd5f53bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906f9ad995368b4891186c07ed3c5c2fd5f53bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906f9ad995368b4891186c07ed3c5c2fd5f53bea/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "925b6a76e2d352c7a59119a4179db953ad30af00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925b6a76e2d352c7a59119a4179db953ad30af00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925b6a76e2d352c7a59119a4179db953ad30af00"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "1741fa2cfc0a22b1e806d5ba210139adb297c957", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=906f9ad995368b4891186c07ed3c5c2fd5f53bea", "patch": "@@ -1,3 +1,10 @@\n+2015-11-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/67942\n+\t* cp/init.c (warn_placement_new_too_small): Avoid assuming\n+\tthe size of the first operand of placement new or its type\n+\tis known.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "7386499d570936479970d80dc2aa0780db5f7ce0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=906f9ad995368b4891186c07ed3c5c2fd5f53bea", "patch": "@@ -2384,20 +2384,26 @@ warn_placement_new_too_small (tree type, tree nelts, tree size, tree oper)\n       /* Treat members of unions and members of structs uniformly, even\n \t though the size of a member of a union may be viewed as extending\n \t to the end of the union itself (it is by __builtin_object_size).  */\n-      if (TREE_CODE (oper) == VAR_DECL || use_obj_size)\n+      if ((TREE_CODE (oper) == VAR_DECL || use_obj_size)\n+\t  && DECL_SIZE_UNIT (oper))\n \t{\n \t  /* Use the size of the entire array object when the expression\n \t     refers to a variable or its size depends on an expression\n \t     that's not a compile-time constant.  */\n-\t  bytes_avail = tree_to_shwi (DECL_SIZE_UNIT (oper));\n+\t  bytes_avail = tree_to_uhwi (DECL_SIZE_UNIT (oper));\n \t  exact_size = !use_obj_size;\n \t}\n-      else\n+      else if (TYPE_SIZE_UNIT (TREE_TYPE (oper)))\n \t{\n \t  /* Use the size of the type of the destination buffer object\n \t     as the optimistic estimate of the available space in it.  */\n \t  bytes_avail = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (oper)));\n \t}\n+      else\n+\t{\n+\t  /* Bail if neither the size of the object nor its type is known.  */\n+\t  return;\n+\t}\n \n       /* Avoid diagnosing flexible array members (accepted as an extension\n \t and diagnosed with -Wpedantic)."}, {"sha": "eb518088d9142f98815d508ed94cadd3d0ee513f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=906f9ad995368b4891186c07ed3c5c2fd5f53bea", "patch": "@@ -1,3 +1,10 @@\n+2015-11-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/67942\n+\t* g++.dg/warn/Wplacement-new-size.C: Exercise placement new\n+\tinvocations where the size of the destination buffer object\n+\tor its type (or both) is unknown.\n+\n 2015-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/67942"}, {"sha": "c0d753fae0e96bc6ba74b7da1ece74bd384c3203", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size.C", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/906f9ad995368b4891186c07ed3c5c2fd5f53bea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size.C?ref=906f9ad995368b4891186c07ed3c5c2fd5f53bea", "patch": "@@ -408,3 +408,48 @@ void test_user_defined_placement_new ()\n         new (&x) ClassWithGlobalNew[2];\n     }\n }\n+\n+extern char extbuf[];\n+\n+template <class> struct TemplateClass { char c; };\n+\n+// Declare a specialization but don't provide a definition.\n+template <> struct TemplateClass<void>;\n+\n+// Declare an object of an explicit specialization of an unknown size.\n+extern TemplateClass<void> exttempl_void;\n+\n+// Verify that no warning is issued when placement new is called with\n+// an extern buffer of unknown size (and the case is handled gracefully\n+// and doesn't cause an ICE).\n+static __attribute__ ((used))\n+void test_extern_buffer_of_unknown_size ()\n+{\n+    new (extbuf) int ();\n+    new (extbuf) int [1024];\n+\n+    new (&exttempl_void) int ();\n+    new (&exttempl_void) int [1024];\n+}\n+\n+extern char extbuf_size_int [sizeof (int)];\n+\n+extern TemplateClass<int> exttempl;\n+\n+// Verify that a warning is issued as expected when placement new is\n+// called with an extern buffer of known size (and the case is handled\n+// gracefully and doesn't cause an ICE).\n+static __attribute__ ((used))\n+void test_extern_buffer ()\n+{\n+    new (extbuf_size_int) int ();\n+    new (extbuf_size_int) int [1];\n+\n+    struct S { int a [2]; };\n+\n+    new (extbuf_size_int) S;            // { dg-warning \"placement\" }\n+    new (extbuf_size_int) int [2];      // { dg-warning \"placement\" }\n+\n+    new (&exttempl) int ();             // { dg-warning \"placement\" }\n+    new (&exttempl) int [1024];         // { dg-warning \"placement\" }\n+}"}]}