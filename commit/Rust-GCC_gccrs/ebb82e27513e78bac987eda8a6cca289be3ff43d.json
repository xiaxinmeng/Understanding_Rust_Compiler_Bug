{"sha": "ebb82e27513e78bac987eda8a6cca289be3ff43d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiODJlMjc1MTNlNzhiYWM5ODdlZGE4YTZjY2EyODliZTNmZjQzZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-30T13:05:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-30T13:05:26Z"}, "message": "re PR libstdc++/33815 (tr1::uniform_int isn't uniform)\n\n2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/33815\n\t* include/tr1_impl/random\n\t(uniform_int<>::_M_call(_UniformRandomNumberGenerator&, result_type,\n\tresult_type, true_type)): Avoid the modulo (which uses the low-order\n\tbits).\n\nFrom-SVN: r129769", "tree": {"sha": "2ba79277f8e16d30c740eb3681da9226b66ffaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba79277f8e16d30c740eb3681da9226b66ffaa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb82e27513e78bac987eda8a6cca289be3ff43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb82e27513e78bac987eda8a6cca289be3ff43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb82e27513e78bac987eda8a6cca289be3ff43d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb82e27513e78bac987eda8a6cca289be3ff43d/comments", "author": null, "committer": null, "parents": [{"sha": "19d8eb46e30f295f89708eafec1170e712565823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d8eb46e30f295f89708eafec1170e712565823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d8eb46e30f295f89708eafec1170e712565823"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "2b783daf8bb7321e8a43634672351dbb1da6275a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ebb82e27513e78bac987eda8a6cca289be3ff43d", "patch": "@@ -1,21 +1,31 @@\n+2007-10-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1_impl/random (uniform_int<>::\n+\t_M_call(_UniformRandomNumberGenerator&, result_type, result_type,\n+\ttrue_type)): Only declare.\n+\t* include/tr1_impl/random.tcc (uniform_int<>::\n+\t_M_call(_UniformRandomNumberGenerator&, result_type, result_type,\n+\ttrue_type)): Re-do, unbiased for the currently supported ranges;\n+\tadd comment.\n+\n 2007-10-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\t*docs/html/ext/pb_ds/multimap_text_insert_timing_test_small.html:\n+\t* docs/html/ext/pb_ds/multimap_text_insert_timing_test_small.html:\n \tCorrect filename.\t\n-\t*docs/html/ext/pb_ds/multimap_text_find_timing_test_large.html: Same.\n-\t*docs/html/ext/pb_ds/\n+\t* docs/html/ext/pb_ds/multimap_text_find_timing_test_large.html: Same.\n+\t* docs/html/ext/pb_ds/\n \tmultimap_text_insert_mem_usage_test_small.html: Same.\n-\t*docs/html/ext/pb_ds/multimap_text_insert_timing_test_large.html: Same.\n-\t*docs/html/ext/pb_ds/\n+\t* docs/html/ext/pb_ds/multimap_text_insert_timing_test_large.html: Same.\n+\t* docs/html/ext/pb_ds/\n \tmultimap_text_insert_mem_usage_test_large.html: Same.\n-\t*docs/html/ext/pb_ds/multimap_text_find_timing_test_small.html: Same.\n+\t* docs/html/ext/pb_ds/multimap_text_find_timing_test_small.html: Same.\n \n 2007-10-30  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n-\t*include/Makefile.am (PCHFLAGS): Remove -Wno-deprecated.\n-\t*include/Makefile.in: Regenerate.\n-\t\n-\t*include/std/memory: Remove extraneous include.\t\n+\t* include/Makefile.am (PCHFLAGS): Remove -Wno-deprecated.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* include/std/memory: Remove extraneous include.\t\n \n 2007-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n  "}, {"sha": "4ce7d8b4c47bc375c3a39e2684dfb062e6e1fcff", "filename": "libstdc++-v3/include/tr1_impl/random", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom?ref=ebb82e27513e78bac987eda8a6cca289be3ff43d", "patch": "@@ -1603,17 +1603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       template<typename _UniformRandomNumberGenerator>\n         result_type\n         _M_call(_UniformRandomNumberGenerator& __urng,\n-\t\tresult_type __min, result_type __max, true_type)\n-        {\n-\t  // XXX Must be fixed to also work when __urng.max() - __urng.min()\n-\t  // is smaller than __max - __min.\n-\t  typedef typename __gnu_cxx::__add_unsigned<typename\n-\t    _UniformRandomNumberGenerator::result_type>::__type __utype;\n-\t  return result_type((__max - __min + 1.0L)\n-\t\t\t     * (__utype(__urng()) - __utype(__urng.min()))\n-\t\t\t     / (__utype(__urng.max())\n-\t\t\t\t- __utype(__urng.min()) + 1.0L)) + __min;\n-\t}\n+\t\tresult_type __min, result_type __max, true_type);\n \n       template<typename _UniformRandomNumberGenerator>\n         result_type"}, {"sha": "2b0f6957b14da99b6ef49cbb6f6bae9d9a7e16fb", "filename": "libstdc++-v3/include/tr1_impl/random.tcc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb82e27513e78bac987eda8a6cca289be3ff43d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc?ref=ebb82e27513e78bac987eda8a6cca289be3ff43d", "patch": "@@ -750,6 +750,40 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     }\n \n \n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_int<_IntType>::result_type\n+      uniform_int<_IntType>::\n+      _M_call(_UniformRandomNumberGenerator& __urng,\n+\t      result_type __min, result_type __max, true_type)\n+      {\n+\t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n+\t// __urng.min(), __max, __min.  Currently works fine only in the\n+\t// most common case __urng.max() - __urng.min() >= __max - __min,\n+\t// with __urng.max() > __urng.min() >= 0.\n+\ttypedef typename __gnu_cxx::__add_unsigned<typename\n+\t  _UniformRandomNumberGenerator::result_type>::__type __urntype;\n+\ttypedef typename __gnu_cxx::__add_unsigned<result_type>::__type\n+\t                                                      __utype;\n+\ttypedef typename __gnu_cxx::__conditional_type<(sizeof(__urntype)\n+\t\t\t\t\t\t\t> sizeof(__utype)),\n+\t  __urntype, __utype>::__type                         __uctype;\n+\n+\tresult_type __ret;\n+\n+\tconst __urntype __urnmin = __urng.min();\n+\tconst __urntype __urnmax = __urng.max();\n+\tconst __urntype __urnrange = __urnmax - __urnmin;\n+\tconst __uctype __urange = __max - __min;\n+\tconst __uctype __udenom = (__urnrange <= __urange\n+\t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n+\tdo\n+\t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n+\twhile (__ret > __max - __min);\n+\n+\treturn __ret + __min;\n+      }\n+\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,"}]}