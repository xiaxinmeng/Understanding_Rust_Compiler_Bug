{"sha": "93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlZjE1NWIzZDJiNGRlMzFkZWMxNjU5NmY3MWYzYzFlYjliOGEwMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-07-10T17:58:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-07-10T17:58:56Z"}, "message": "PR libstdc++/81338 correctly manage string capacity\n\n\tPR libstdc++/81338\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (basic_string):\n\tDeclare basic_stringbuf to be a friend.\n\t* include/bits/sstream.tcc (basic_stringbuf::overflow)\n\t[_GLIBCXX_USE_CXX11_ABI]: Use unused capacity before reallocating.\n\t* include/std/sstream (basic_stringbuf::__xfer_bufptrs): Update string\n\tlength to buffer length.\n\t* testsuite/27_io/basic_stringstream/assign/81338.cc: New.\n\nFrom-SVN: r250100", "tree": {"sha": "24778fc62f28419369156b33052d4e8bc55f1add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24778fc62f28419369156b33052d4e8bc55f1add"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1938888f5a072e5619acba11b9e6ded42956ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1938888f5a072e5619acba11b9e6ded42956ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1938888f5a072e5619acba11b9e6ded42956ca3"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "58adb85608b416d74a54d2b33e2ec8507d7a6982", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "patch": "@@ -1,3 +1,14 @@\n+2017-07-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/81338\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI] (basic_string):\n+\tDeclare basic_stringbuf to be a friend.\n+\t* include/bits/sstream.tcc (basic_stringbuf::overflow)\n+\t[_GLIBCXX_USE_CXX11_ABI]: Use unused capacity before reallocating.\n+\t* include/std/sstream (basic_stringbuf::__xfer_bufptrs): Update string\n+\tlength to buffer length.\n+\t* testsuite/27_io/basic_stringstream/assign/81338.cc: New.\n+\n 2017-07-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/specialized_algorithms/memory_management_tools/"}, {"sha": "7fd867c6acc759141bb9e012af0424ead3d84493", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "patch": "@@ -2918,7 +2918,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n-  };\n+\n+      // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:\n+      template<typename, typename, typename> friend class basic_stringbuf;\n+    };\n _GLIBCXX_END_NAMESPACE_CXX11\n #else  // !_GLIBCXX_USE_CXX11_ABI\n   // Reference-counted COW string implentation"}, {"sha": "fc2fcb8992daf8dadfa521fc7dfbb363c9d06afc", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "patch": "@@ -88,6 +88,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn traits_type::not_eof(__c);\n \n       const __size_type __capacity = _M_string.capacity();\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+      if ((this->epptr() - this->pbase()) < __capacity)\n+\t{\n+\t  // There is additional capacity in _M_string that can be used.\n+\t  char_type* __base = const_cast<char_type*>(_M_string.data());\n+\t  _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());\n+\t  if (_M_mode & ios_base::in)\n+\t    {\n+\t      const __size_type __nget = this->gptr() - this->eback();\n+\t      const __size_type __eget = this->egptr() - this->eback();\n+\t      this->setg(__base, __base + __nget, __base + __eget + 1);\n+\t    }\n+\t  *this->pptr() = traits_type::to_char_type(__c);\n+\t  this->pbump(1);\n+\t  return __c;\n+\t}\n+#endif\n+\n       const __size_type __max_size = _M_string.max_size();\n       const bool __testput = this->pptr() < this->epptr();\n       if (__builtin_expect(!__testput && __capacity == __max_size, false))"}, {"sha": "7690252b3e320e87c5e1ae21baa4cd90ac4dfdcc", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "patch": "@@ -302,18 +302,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t__xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)\n \t: _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}\n \t{\n-\t  const _CharT* __str = __from._M_string.data();\n+\t  const _CharT* const __str = __from._M_string.data();\n+\t  const _CharT* __end = nullptr;\n \t  if (__from.eback())\n \t    {\n-\t    _M_goff[0] = __from.eback() - __str;\n-\t    _M_goff[1] = __from.gptr() - __str;\n-\t    _M_goff[2] = __from.egptr() - __str;\n+\t      _M_goff[0] = __from.eback() - __str;\n+\t      _M_goff[1] = __from.gptr() - __str;\n+\t      _M_goff[2] = __from.egptr() - __str;\n+\t      __end = __from.egptr();\n \t    }\n \t  if (__from.pbase())\n \t    {\n \t      _M_poff[0] = __from.pbase() - __str;\n \t      _M_poff[1] = __from.pptr() - __from.pbase();\n \t      _M_poff[2] = __from.epptr() - __str;\n+\t      if (__from.pptr() > __end)\n+\t\t__end = __from.pptr();\n+\t    }\n+\n+\t  // Set _M_string length to the greater of the get and put areas.\n+\t  if (__end)\n+\t    {\n+\t      // The const_cast avoids changing this constructor's signature,\n+\t      // because it is exported from the dynamic library.\n+\t      auto& __mut_from = const_cast<basic_stringbuf&>(__from);\n+\t      __mut_from._M_string._M_length(__end - __str);\n \t    }\n \t}\n "}, {"sha": "30370c0dd42b5fe5a53dd0b5c5e4d3f23279c881", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/assign/81338.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F81338.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93ef155b3d2b4de31dec16596f71f3c1eb9b8a03/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F81338.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F81338.cc?ref=93ef155b3d2b4de31dec16596f71f3c1eb9b8a03", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::stringstream ss;\n+  for (int i = 0; i < 100; ++i)\n+  {\n+    ss << 'a';\n+    VERIFY( static_cast<bool>(ss) );\n+    VERIFY( ss.str() == \"a\" );\n+    ss = std::stringstream();\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}