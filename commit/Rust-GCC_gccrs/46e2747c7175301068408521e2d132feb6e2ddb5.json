{"sha": "46e2747c7175301068408521e2d132feb6e2ddb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlMjc0N2M3MTc1MzAxMDY4NDA4NTIxZTJkMTMyZmViNmUyZGRiNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-09-06T09:21:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-09-06T09:21:35Z"}, "message": "error.c (dump_typename): New function, broken out of ...\n\n\t* error.c (dump_typename): New function, broken out of ...\n\t(dump_type): ... here. Use it.\n\t* typeck.c (same_type_p): Use cp_tree_equal for TYPENAME_TYPE.\n\nFrom-SVN: r36193", "tree": {"sha": "f6538c31bbabd5cc99c43a8e819a92e724d50ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6538c31bbabd5cc99c43a8e819a92e724d50ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e2747c7175301068408521e2d132feb6e2ddb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e2747c7175301068408521e2d132feb6e2ddb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e2747c7175301068408521e2d132feb6e2ddb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e2747c7175301068408521e2d132feb6e2ddb5/comments", "author": null, "committer": null, "parents": [{"sha": "630c79be17246fec9843b3c2b060bc4bddc115c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630c79be17246fec9843b3c2b060bc4bddc115c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630c79be17246fec9843b3c2b060bc4bddc115c6"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "ecd845b88b4a77d6a5101d71ac13dc10df475591", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46e2747c7175301068408521e2d132feb6e2ddb5", "patch": "@@ -1,3 +1,9 @@\n+2000-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* error.c (dump_typename): New function, broken out of ...\n+\t(dump_type): ... here. Use it.\n+\t* typeck.c (same_type_p): Use cp_tree_equal for TYPENAME_TYPE.\n+\n 2000-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* init.c (build_offset_ref): Deal with namespace scoped"}, {"sha": "6d821a2d970d9c12e488330c81ec522d4c58120c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=46e2747c7175301068408521e2d132feb6e2ddb5", "patch": "@@ -87,6 +87,7 @@ static const char *parm_to_string\t\tPARAMS ((int, int));\n static const char *type_to_string\t\tPARAMS ((tree, int));\n \n static void dump_type PARAMS ((tree, enum tree_string_flags));\n+static void dump_typename PARAMS ((tree, enum tree_string_flags));\n static void dump_simple_decl PARAMS ((tree, tree, enum tree_string_flags));\n static void dump_decl PARAMS ((tree, enum tree_string_flags));\n static void dump_template_decl PARAMS ((tree, enum tree_string_flags));\n@@ -503,9 +504,7 @@ dump_type (t, flags)\n     }\n     case TYPENAME_TYPE:\n       OB_PUTS (\"typename \");\n-      dump_type (TYPE_CONTEXT (t), flags & ~TS_AGGR_TAGS);\n-      OB_PUTS (\"::\");\n-      dump_decl (TYPENAME_TYPE_FULLNAME (t), flags);\n+      dump_typename (t, flags);\n       break;\n \n     case TYPEOF_TYPE:\n@@ -525,6 +524,24 @@ dump_type (t, flags)\n     }\n }\n \n+/* Dump a TYPENAME_TYPE. We need to notice when the context is itself\n+   a TYPENAME_TYPE.  */\n+\n+static void\n+dump_typename (t, flags)\n+     tree t;\n+     enum tree_string_flags flags;\n+{\n+  tree ctx = TYPE_CONTEXT (t);\n+  \n+  if (TREE_CODE (ctx) == TYPENAME_TYPE)\n+    dump_typename (ctx, flags);\n+  else\n+    dump_type (ctx, flags & ~TS_AGGR_TAGS);\n+  OB_PUTS (\"::\");\n+  dump_decl (TYPENAME_TYPE_FULLNAME (t), flags);\n+}\n+\n /* Return the name of the supplied aggregate, or enumeral type.  */\n \n static const char *"}, {"sha": "bff019d36c9a4c29be1922db6b17385aa3f9952c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e2747c7175301068408521e2d132feb6e2ddb5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=46e2747c7175301068408521e2d132feb6e2ddb5", "patch": "@@ -1096,8 +1096,9 @@ comptypes (t1, t2, strict)\n \t&& TEMPLATE_TYPE_LEVEL (t1) == TEMPLATE_TYPE_LEVEL (t2);\n \n     case TYPENAME_TYPE:\n-      if (TYPE_IDENTIFIER (t1) != TYPE_IDENTIFIER (t2))\n-\treturn 0;\n+      if (cp_tree_equal (TYPENAME_TYPE_FULLNAME (t1),\n+                         TYPENAME_TYPE_FULLNAME (t2)) < 1)\n+        return 0;\n       return same_type_p (TYPE_CONTEXT (t1), TYPE_CONTEXT (t2));\n \n     case COMPLEX_TYPE:"}]}