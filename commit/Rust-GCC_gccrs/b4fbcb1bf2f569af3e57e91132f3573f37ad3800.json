{"sha": "b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmYmNiMWJmMmY1NjlhZjNlNTdlOTExMzJmMzU3M2YzN2FkMzgwMA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-02-01T02:11:30Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-02-01T02:11:30Z"}, "message": "md.texi (Machine Constraints): Alphabetize table by target.\n\n2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/md.texi (Machine Constraints): Alphabetize table by target.\n\t* doc/extend.texi (x86 Variable Attributes): Move section to\n\tcorrect alphabetization\tafter renaming.\n\t(x86 Type Attributes): Likewise.\n\t(Target Builtins): Re-alphabetize menu.\n\t(x86 Built-in Functions): Move section to correct alphabetization\n\tafter renaming.\n\t(x86 transactional memory intrinsics): Likewise.\n\t* doc/invoke.texi (Option Summary): Re-alphabetize x86 Options\n\tand x86 Windows Options in table and menu.\n\t(x86 Options): Move section to correct alphabetization after\n\trenaming.\n\t(x86 Windows Options): Likewise.\n\nFrom-SVN: r220315", "tree": {"sha": "bae709a7cfaad39f410356107f39eff5748c18e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bae709a7cfaad39f410356107f39eff5748c18e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0353c564debb7e8ab17e53bb92127d8e1d6fe010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0353c564debb7e8ab17e53bb92127d8e1d6fe010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0353c564debb7e8ab17e53bb92127d8e1d6fe010"}], "stats": {"total": 24407, "additions": 12212, "deletions": 12195}, "files": [{"sha": "0618d835f9a453b012378ab2e7c016d11a6baf32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "patch": "@@ -1,3 +1,19 @@\n+2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/md.texi (Machine Constraints): Alphabetize table by target.\n+\t* doc/extend.texi (x86 Variable Attributes): Move section to\n+\tcorrect alphabetization\tafter renaming.\n+\t(x86 Type Attributes): Likewise.\n+\t(Target Builtins): Re-alphabetize menu.\n+\t(x86 Built-in Functions): Move section to correct alphabetization\n+\tafter renaming.\n+\t(x86 transactional memory intrinsics): Likewise.\n+\t* doc/invoke.texi (Option Summary): Re-alphabetize x86 Options\n+\tand x86 Windows Options in table and menu.\n+\t(x86 Options): Move section to correct alphabetization after\n+\trenaming.\n+\t(x86 Windows Options): Likewise.\n+\n 2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi: Use \"x86\", \"x86-32\", and \"x86-64\" as the"}, {"sha": "18068508d03bf7a79bc01e2fdade77be911bb8f9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5115, "deletions": 5115, "changes": 10230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b4fbcb1bf2f569af3e57e91132f3573f37ad3800"}, {"sha": "ba81ec7a7d84d5cd143cabd353682d3dcff8335a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6287, "deletions": 6287, "changes": 12574, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b4fbcb1bf2f569af3e57e91132f3573f37ad3800"}, {"sha": "f2c25c2a45d4b02f900dafa32ed076e6c9d87882", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 794, "deletions": 793, "changes": 1587, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fbcb1bf2f569af3e57e91132f3573f37ad3800/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=b4fbcb1bf2f569af3e57e91132f3573f37ad3800", "patch": "@@ -1695,6 +1695,7 @@ constraints that aren't.  The compiler source file mentioned in the\n table heading for each architecture is the definitive reference for\n the meanings of that architecture's constraints.\n \n+@c Please keep this table alphabetized by target!\n @table @emph\n @item AArch64 family---@file{config/aarch64/constraints.md}\n @table @code\n@@ -1931,6 +1932,157 @@ A floating point constant 0.0\n A memory address based on Y or Z pointer with displacement.\n @end table\n \n+@item Blackfin family---@file{config/bfin/constraints.md}\n+@table @code\n+@item a\n+P register\n+\n+@item d\n+D register\n+\n+@item z\n+A call clobbered P register.\n+\n+@item q@var{n}\n+A single register.  If @var{n} is in the range 0 to 7, the corresponding D\n+register.  If it is @code{A}, then the register P0.\n+\n+@item D\n+Even-numbered D register\n+\n+@item W\n+Odd-numbered D register\n+\n+@item e\n+Accumulator register.\n+\n+@item A\n+Even-numbered accumulator register.\n+\n+@item B\n+Odd-numbered accumulator register.\n+\n+@item b\n+I register\n+\n+@item v\n+B register\n+\n+@item f\n+M register\n+\n+@item c\n+Registers used for circular buffering, i.e. I, B, or L registers.\n+\n+@item C\n+The CC register.\n+\n+@item t\n+LT0 or LT1.\n+\n+@item k\n+LC0 or LC1.\n+\n+@item u\n+LB0 or LB1.\n+\n+@item x\n+Any D, P, B, M, I or L register.\n+\n+@item y\n+Additional registers typically used only in prologues and epilogues: RETS,\n+RETN, RETI, RETX, RETE, ASTAT, SEQSTAT and USP.\n+\n+@item w\n+Any register except accumulators or CC.\n+\n+@item Ksh\n+Signed 16 bit integer (in the range @minus{}32768 to 32767)\n+\n+@item Kuh\n+Unsigned 16 bit integer (in the range 0 to 65535)\n+\n+@item Ks7\n+Signed 7 bit integer (in the range @minus{}64 to 63)\n+\n+@item Ku7\n+Unsigned 7 bit integer (in the range 0 to 127)\n+\n+@item Ku5\n+Unsigned 5 bit integer (in the range 0 to 31)\n+\n+@item Ks4\n+Signed 4 bit integer (in the range @minus{}8 to 7)\n+\n+@item Ks3\n+Signed 3 bit integer (in the range @minus{}3 to 4)\n+\n+@item Ku3\n+Unsigned 3 bit integer (in the range 0 to 7)\n+\n+@item P@var{n}\n+Constant @var{n}, where @var{n} is a single-digit constant in the range 0 to 4.\n+\n+@item PA\n+An integer equal to one of the MACFLAG_XXX constants that is suitable for\n+use with either accumulator.\n+\n+@item PB\n+An integer equal to one of the MACFLAG_XXX constants that is suitable for\n+use only with accumulator A1.\n+\n+@item M1\n+Constant 255.\n+\n+@item M2\n+Constant 65535.\n+\n+@item J\n+An integer constant with exactly a single bit set.\n+\n+@item L\n+An integer constant with all bits set except exactly one.\n+\n+@item H\n+\n+@item Q\n+Any SYMBOL_REF.\n+@end table\n+\n+@item CR16 Architecture---@file{config/cr16/cr16.h}\n+@table @code\n+\n+@item b\n+Registers from r0 to r14 (registers without stack pointer)\n+\n+@item t\n+Register from r0 to r11 (all 16-bit registers)\n+\n+@item p\n+Register from r12 to r15 (all 32-bit registers)\n+\n+@item I\n+Signed constant that fits in 4 bits\n+\n+@item J\n+Signed constant that fits in 5 bits\n+\n+@item K\n+Signed constant that fits in 6 bits\n+\n+@item L\n+Unsigned constant that fits in 4 bits\n+\n+@item M\n+Signed constant that fits in 32 bits\n+\n+@item N\n+Check for 64 bits wide constants for add/sub instructions\n+\n+@item G\n+Floating point constant that is legal for store immediate\n+@end table\n+\n @item Epiphany---@file{config/epiphany/constraints.md}\n @table @code\n @item U16\n@@ -2002,38 +2154,97 @@ Matches control register values to switch fp mode, which are encapsulated in\n @code{UNSPEC_FP_MODE}.\n @end table\n \n-@item CR16 Architecture---@file{config/cr16/cr16.h}\n+@item FRV---@file{config/frv/frv.h}\n @table @code\n+@item a\n+Register in the class @code{ACC_REGS} (@code{acc0} to @code{acc7}).\n \n @item b\n-Registers from r0 to r14 (registers without stack pointer)\n+Register in the class @code{EVEN_ACC_REGS} (@code{acc0} to @code{acc7}).\n+\n+@item c\n+Register in the class @code{CC_REGS} (@code{fcc0} to @code{fcc3} and\n+@code{icc0} to @code{icc3}).\n+\n+@item d\n+Register in the class @code{GPR_REGS} (@code{gr0} to @code{gr63}).\n+\n+@item e\n+Register in the class @code{EVEN_REGS} (@code{gr0} to @code{gr63}).\n+Odd registers are excluded not in the class but through the use of a machine\n+mode larger than 4 bytes.\n+\n+@item f\n+Register in the class @code{FPR_REGS} (@code{fr0} to @code{fr63}).\n+\n+@item h\n+Register in the class @code{FEVEN_REGS} (@code{fr0} to @code{fr63}).\n+Odd registers are excluded not in the class but through the use of a machine\n+mode larger than 4 bytes.\n+\n+@item l\n+Register in the class @code{LR_REG} (the @code{lr} register).\n+\n+@item q\n+Register in the class @code{QUAD_REGS} (@code{gr2} to @code{gr63}).\n+Register numbers not divisible by 4 are excluded not in the class but through\n+the use of a machine mode larger than 8 bytes.\n \n @item t\n-Register from r0 to r11 (all 16-bit registers)\n+Register in the class @code{ICC_REGS} (@code{icc0} to @code{icc3}).\n \n-@item p\n-Register from r12 to r15 (all 32-bit registers)\n+@item u\n+Register in the class @code{FCC_REGS} (@code{fcc0} to @code{fcc3}).\n+\n+@item v\n+Register in the class @code{ICR_REGS} (@code{cc4} to @code{cc7}).\n+\n+@item w\n+Register in the class @code{FCR_REGS} (@code{cc0} to @code{cc3}).\n+\n+@item x\n+Register in the class @code{QUAD_FPR_REGS} (@code{fr0} to @code{fr63}).\n+Register numbers not divisible by 4 are excluded not in the class but through\n+the use of a machine mode larger than 8 bytes.\n+\n+@item z\n+Register in the class @code{SPR_REGS} (@code{lcr} and @code{lr}).\n+\n+@item A\n+Register in the class @code{QUAD_ACC_REGS} (@code{acc0} to @code{acc7}).\n+\n+@item B\n+Register in the class @code{ACCG_REGS} (@code{accg0} to @code{accg7}).\n+\n+@item C\n+Register in the class @code{CR_REGS} (@code{cc0} to @code{cc7}).\n+\n+@item G\n+Floating point constant zero\n \n @item I\n-Signed constant that fits in 4 bits\n+6-bit signed integer constant\n \n @item J\n-Signed constant that fits in 5 bits\n-\n-@item K\n-Signed constant that fits in 6 bits\n+10-bit signed integer constant\n \n @item L\n-Unsigned constant that fits in 4 bits\n+16-bit signed integer constant\n \n @item M\n-Signed constant that fits in 32 bits\n+16-bit unsigned integer constant\n \n @item N\n-Check for 64 bits wide constants for add/sub instructions\n+12-bit signed integer constant that is negative---i.e.@: in the\n+range of @minus{}2048 to @minus{}1\n+\n+@item O\n+Constant zero\n+\n+@item P\n+12-bit signed integer constant that is greater than zero---i.e.@: in the\n+range of 1 to 2047.\n \n-@item G\n-Floating point constant that is legal for store immediate\n @end table\n \n @item Hewlett-Packard PA-RISC---@file{config/pa/pa.h}\n@@ -2107,615 +2318,68 @@ A memory operand for floating-point loads and stores\n A register indirect memory operand\n @end table\n \n-@item PowerPC and IBM RS6000---@file{config/rs6000/constraints.md}\n+@item Intel IA-64---@file{config/ia64/ia64.h}\n @table @code\n-@item b\n-Address base register\n-\n-@item d\n-Floating point register (containing 64-bit value)\n-\n-@item f\n-Floating point register (containing 32-bit value)\n+@item a\n+General register @code{r0} to @code{r3} for @code{addl} instruction\n \n-@item v\n-Altivec vector register\n-\n-@item wa\n-Any VSX register if the -mvsx option was used or NO_REGS.\n-\n-@item wd\n-VSX vector register to hold vector double data or NO_REGS.\n-\n-@item wf\n-VSX vector register to hold vector float data or NO_REGS.\n-\n-@item wg\n-If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n-\n-@item wh\n-Floating point register if direct moves are available, or NO_REGS.\n-\n-@item wi\n-FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n-\n-@item wj\n-FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\n-\n-@item wk\n-FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\n-\n-@item wl\n-Floating point register if the LFIWAX instruction is enabled or NO_REGS.\n-\n-@item wm\n-VSX register if direct move instructions are enabled, or NO_REGS.\n-\n-@item wn\n-No register (NO_REGS).\n-\n-@item wr\n-General purpose register if 64-bit instructions are enabled or NO_REGS.\n-\n-@item ws\n-VSX vector register to hold scalar double values or NO_REGS.\n-\n-@item wt\n-VSX vector register to hold 128 bit integer or NO_REGS.\n-\n-@item wu\n-Altivec register to use for float/32-bit int loads/stores  or NO_REGS.\n-\n-@item wv\n-Altivec register to use for double loads/stores  or NO_REGS.\n-\n-@item ww\n-FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n-\n-@item wx\n-Floating point register if the STFIWX instruction is enabled or NO_REGS.\n-\n-@item wy\n-FP or VSX register to perform ISA 2.07 float ops or NO_REGS.\n-\n-@item wz\n-Floating point register if the LFIWZX instruction is enabled or NO_REGS.\n-\n-@item wD\n-Int constant that is the element number of the 64-bit scalar in a vector.\n-\n-@item wQ\n-A memory address that will work with the @code{lq} and @code{stq}\n-instructions.\n-\n-@item h\n-@samp{MQ}, @samp{CTR}, or @samp{LINK} register\n-\n-@item q\n-@samp{MQ} register\n-\n-@item c\n-@samp{CTR} register\n-\n-@item l\n-@samp{LINK} register\n-\n-@item x\n-@samp{CR} register (condition register) number 0\n-\n-@item y\n-@samp{CR} register (condition register)\n-\n-@item z\n-@samp{XER[CA]} carry bit (part of the XER register)\n-\n-@item I\n-Signed 16-bit constant\n-\n-@item J\n-Unsigned 16-bit constant shifted left 16 bits (use @samp{L} instead for\n-@code{SImode} constants)\n-\n-@item K\n-Unsigned 16-bit constant\n-\n-@item L\n-Signed 16-bit constant shifted left 16 bits\n-\n-@item M\n-Constant larger than 31\n-\n-@item N\n-Exact power of 2\n-\n-@item O\n-Zero\n-\n-@item P\n-Constant whose negation is a signed 16-bit constant\n-\n-@item G\n-Floating point constant that can be loaded into a register with one\n-instruction per word\n-\n-@item H\n-Integer/Floating point constant that can be loaded into a register using\n-three instructions\n-\n-@item m\n-Memory operand.\n-Normally, @code{m} does not allow addresses that update the base register.\n-If @samp{<} or @samp{>} constraint is also used, they are allowed and\n-therefore on PowerPC targets in that case it is only safe\n-to use @samp{m<>} in an @code{asm} statement if that @code{asm} statement\n-accesses the operand exactly once.  The @code{asm} statement must also\n-use @samp{%U@var{<opno>}} as a placeholder for the ``update'' flag in the\n-corresponding load or store instruction.  For example:\n-\n-@smallexample\n-asm (\"st%U0 %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n-@end smallexample\n-\n-is correct but:\n-\n-@smallexample\n-asm (\"st %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n-@end smallexample\n-\n-is not.\n-\n-@item es\n-A ``stable'' memory operand; that is, one which does not include any\n-automodification of the base register.  This used to be useful when\n-@samp{m} allowed automodification of the base register, but as those are now only\n-allowed when @samp{<} or @samp{>} is used, @samp{es} is basically the same\n-as @samp{m} without @samp{<} and @samp{>}.\n-\n-@item Q\n-Memory operand that is an offset from a register (it is usually better\n-to use @samp{m} or @samp{es} in @code{asm} statements)\n-\n-@item Z\n-Memory operand that is an indexed or indirect from a register (it is\n-usually better to use @samp{m} or @samp{es} in @code{asm} statements)\n-\n-@item R\n-AIX TOC entry\n-\n-@item a\n-Address operand that is an indexed or indirect from a register (@samp{p} is\n-preferable for @code{asm} statements)\n-\n-@item S\n-Constant suitable as a 64-bit mask operand\n-\n-@item T\n-Constant suitable as a 32-bit mask operand\n-\n-@item U\n-System V Release 4 small data area reference\n-\n-@item t\n-AND masks that can be performed by two rldic@{l, r@} instructions\n-\n-@item W\n-Vector constant that does not require memory\n-\n-@item j\n-Vector constant that is all zeros.\n-\n-@end table\n-\n-@item x86 family---@file{config/i386/constraints.md}\n-@table @code\n-@item R\n-Legacy register---the eight integer registers available on all\n-i386 processors (@code{a}, @code{b}, @code{c}, @code{d},\n-@code{si}, @code{di}, @code{bp}, @code{sp}).\n-\n-@item q\n-Any register accessible as @code{@var{r}l}.  In 32-bit mode, @code{a},\n-@code{b}, @code{c}, and @code{d}; in 64-bit mode, any integer register.\n-\n-@item Q\n-Any register accessible as @code{@var{r}h}: @code{a}, @code{b},\n-@code{c}, and @code{d}.\n-\n-@ifset INTERNALS\n-@item l\n-Any register that can be used as the index in a base+index memory\n-access: that is, any general register except the stack pointer.\n-@end ifset\n-\n-@item a\n-The @code{a} register.\n-\n-@item b\n-The @code{b} register.\n-\n-@item c\n-The @code{c} register.\n-\n-@item d\n-The @code{d} register.\n-\n-@item S\n-The @code{si} register.\n-\n-@item D\n-The @code{di} register.\n-\n-@item A\n-The @code{a} and @code{d} registers.  This class is used for instructions\n-that return double word results in the @code{ax:dx} register pair.  Single\n-word values will be allocated either in @code{ax} or @code{dx}.\n-For example on i386 the following implements @code{rdtsc}:\n-\n-@smallexample\n-unsigned long long rdtsc (void)\n-@{\n-  unsigned long long tick;\n-  __asm__ __volatile__(\"rdtsc\":\"=A\"(tick));\n-  return tick;\n-@}\n-@end smallexample\n-\n-This is not correct on x86-64 as it would allocate tick in either @code{ax}\n-or @code{dx}.  You have to use the following variant instead:\n-\n-@smallexample\n-unsigned long long rdtsc (void)\n-@{\n-  unsigned int tickl, tickh;\n-  __asm__ __volatile__(\"rdtsc\":\"=a\"(tickl),\"=d\"(tickh));\n-  return ((unsigned long long)tickh << 32)|tickl;\n-@}\n-@end smallexample\n-\n-\n-@item f\n-Any 80387 floating-point (stack) register.\n-\n-@item t\n-Top of 80387 floating-point stack (@code{%st(0)}).\n-\n-@item u\n-Second from top of 80387 floating-point stack (@code{%st(1)}).\n-\n-@item y\n-Any MMX register.\n-\n-@item x\n-Any SSE register.\n-\n-@item Yz\n-First SSE register (@code{%xmm0}).\n-\n-@ifset INTERNALS\n-@item Y2\n-Any SSE register, when SSE2 is enabled.\n-\n-@item Yi\n-Any SSE register, when SSE2 and inter-unit moves are enabled.\n-\n-@item Ym\n-Any MMX register, when inter-unit moves are enabled.\n-@end ifset\n-\n-@item I\n-Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\n-\n-@item J\n-Integer constant in the range 0 @dots{} 63, for 64-bit shifts.\n-\n-@item K\n-Signed 8-bit integer constant.\n-\n-@item L\n-@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\n-\n-@item M\n-0, 1, 2, or 3 (shifts for the @code{lea} instruction).\n-\n-@item N\n-Unsigned 8-bit integer constant (for @code{in} and @code{out}\n-instructions).\n-\n-@ifset INTERNALS\n-@item O\n-Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\n-@end ifset\n-\n-@item G\n-Standard 80387 floating point constant.\n-\n-@item C\n-Standard SSE floating point constant.\n-\n-@item e\n-32-bit signed integer constant, or a symbolic reference known\n-to fit that range (for immediate operands in sign-extending x86-64\n-instructions).\n-\n-@item Z\n-32-bit unsigned integer constant, or a symbolic reference known\n-to fit that range (for immediate operands in zero-extending x86-64\n-instructions).\n-\n-@end table\n-\n-@item Intel IA-64---@file{config/ia64/ia64.h}\n-@table @code\n-@item a\n-General register @code{r0} to @code{r3} for @code{addl} instruction\n-\n-@item b\n-Branch register\n+@item b\n+Branch register\n \n @item c\n Predicate register (@samp{c} as in ``conditional'')\n \n-@item d\n-Application register residing in M-unit\n-\n-@item e\n-Application register residing in I-unit\n-\n-@item f\n-Floating-point register\n-\n-@item m\n-Memory operand.  If used together with @samp{<} or @samp{>},\n-the operand can have postincrement and postdecrement which\n-require printing with @samp{%Pn} on IA-64.\n-\n-@item G\n-Floating-point constant 0.0 or 1.0\n-\n-@item I\n-14-bit signed integer constant\n-\n-@item J\n-22-bit signed integer constant\n-\n-@item K\n-8-bit signed integer constant for logical instructions\n-\n-@item L\n-8-bit adjusted signed integer constant for compare pseudo-ops\n-\n-@item M\n-6-bit unsigned integer constant for shift counts\n-\n-@item N\n-9-bit signed integer constant for load and store postincrements\n-\n-@item O\n-The constant zero\n-\n-@item P\n-0 or @minus{}1 for @code{dep} instruction\n-\n-@item Q\n-Non-volatile memory for floating-point loads and stores\n-\n-@item R\n-Integer constant in the range 1 to 4 for @code{shladd} instruction\n-\n-@item S\n-Memory operand except postincrement and postdecrement.  This is\n-now roughly the same as @samp{m} when not used together with @samp{<}\n-or @samp{>}.\n-@end table\n-\n-@item FRV---@file{config/frv/frv.h}\n-@table @code\n-@item a\n-Register in the class @code{ACC_REGS} (@code{acc0} to @code{acc7}).\n-\n-@item b\n-Register in the class @code{EVEN_ACC_REGS} (@code{acc0} to @code{acc7}).\n-\n-@item c\n-Register in the class @code{CC_REGS} (@code{fcc0} to @code{fcc3} and\n-@code{icc0} to @code{icc3}).\n-\n-@item d\n-Register in the class @code{GPR_REGS} (@code{gr0} to @code{gr63}).\n-\n-@item e\n-Register in the class @code{EVEN_REGS} (@code{gr0} to @code{gr63}).\n-Odd registers are excluded not in the class but through the use of a machine\n-mode larger than 4 bytes.\n-\n-@item f\n-Register in the class @code{FPR_REGS} (@code{fr0} to @code{fr63}).\n-\n-@item h\n-Register in the class @code{FEVEN_REGS} (@code{fr0} to @code{fr63}).\n-Odd registers are excluded not in the class but through the use of a machine\n-mode larger than 4 bytes.\n-\n-@item l\n-Register in the class @code{LR_REG} (the @code{lr} register).\n-\n-@item q\n-Register in the class @code{QUAD_REGS} (@code{gr2} to @code{gr63}).\n-Register numbers not divisible by 4 are excluded not in the class but through\n-the use of a machine mode larger than 8 bytes.\n-\n-@item t\n-Register in the class @code{ICC_REGS} (@code{icc0} to @code{icc3}).\n-\n-@item u\n-Register in the class @code{FCC_REGS} (@code{fcc0} to @code{fcc3}).\n-\n-@item v\n-Register in the class @code{ICR_REGS} (@code{cc4} to @code{cc7}).\n-\n-@item w\n-Register in the class @code{FCR_REGS} (@code{cc0} to @code{cc3}).\n-\n-@item x\n-Register in the class @code{QUAD_FPR_REGS} (@code{fr0} to @code{fr63}).\n-Register numbers not divisible by 4 are excluded not in the class but through\n-the use of a machine mode larger than 8 bytes.\n-\n-@item z\n-Register in the class @code{SPR_REGS} (@code{lcr} and @code{lr}).\n-\n-@item A\n-Register in the class @code{QUAD_ACC_REGS} (@code{acc0} to @code{acc7}).\n-\n-@item B\n-Register in the class @code{ACCG_REGS} (@code{accg0} to @code{accg7}).\n-\n-@item C\n-Register in the class @code{CR_REGS} (@code{cc0} to @code{cc7}).\n-\n-@item G\n-Floating point constant zero\n-\n-@item I\n-6-bit signed integer constant\n-\n-@item J\n-10-bit signed integer constant\n-\n-@item L\n-16-bit signed integer constant\n-\n-@item M\n-16-bit unsigned integer constant\n-\n-@item N\n-12-bit signed integer constant that is negative---i.e.@: in the\n-range of @minus{}2048 to @minus{}1\n-\n-@item O\n-Constant zero\n-\n-@item P\n-12-bit signed integer constant that is greater than zero---i.e.@: in the\n-range of 1 to 2047.\n-\n-@end table\n-\n-@item Blackfin family---@file{config/bfin/constraints.md}\n-@table @code\n-@item a\n-P register\n-\n-@item d\n-D register\n-\n-@item z\n-A call clobbered P register.\n-\n-@item q@var{n}\n-A single register.  If @var{n} is in the range 0 to 7, the corresponding D\n-register.  If it is @code{A}, then the register P0.\n-\n-@item D\n-Even-numbered D register\n-\n-@item W\n-Odd-numbered D register\n-\n-@item e\n-Accumulator register.\n-\n-@item A\n-Even-numbered accumulator register.\n-\n-@item B\n-Odd-numbered accumulator register.\n-\n-@item b\n-I register\n-\n-@item v\n-B register\n-\n-@item f\n-M register\n-\n-@item c\n-Registers used for circular buffering, i.e. I, B, or L registers.\n-\n-@item C\n-The CC register.\n-\n-@item t\n-LT0 or LT1.\n-\n-@item k\n-LC0 or LC1.\n-\n-@item u\n-LB0 or LB1.\n-\n-@item x\n-Any D, P, B, M, I or L register.\n-\n-@item y\n-Additional registers typically used only in prologues and epilogues: RETS,\n-RETN, RETI, RETX, RETE, ASTAT, SEQSTAT and USP.\n-\n-@item w\n-Any register except accumulators or CC.\n-\n-@item Ksh\n-Signed 16 bit integer (in the range @minus{}32768 to 32767)\n-\n-@item Kuh\n-Unsigned 16 bit integer (in the range 0 to 65535)\n-\n-@item Ks7\n-Signed 7 bit integer (in the range @minus{}64 to 63)\n-\n-@item Ku7\n-Unsigned 7 bit integer (in the range 0 to 127)\n-\n-@item Ku5\n-Unsigned 5 bit integer (in the range 0 to 31)\n-\n-@item Ks4\n-Signed 4 bit integer (in the range @minus{}8 to 7)\n-\n-@item Ks3\n-Signed 3 bit integer (in the range @minus{}3 to 4)\n-\n-@item Ku3\n-Unsigned 3 bit integer (in the range 0 to 7)\n+@item d\n+Application register residing in M-unit\n \n-@item P@var{n}\n-Constant @var{n}, where @var{n} is a single-digit constant in the range 0 to 4.\n+@item e\n+Application register residing in I-unit\n \n-@item PA\n-An integer equal to one of the MACFLAG_XXX constants that is suitable for\n-use with either accumulator.\n+@item f\n+Floating-point register\n \n-@item PB\n-An integer equal to one of the MACFLAG_XXX constants that is suitable for\n-use only with accumulator A1.\n+@item m\n+Memory operand.  If used together with @samp{<} or @samp{>},\n+the operand can have postincrement and postdecrement which\n+require printing with @samp{%Pn} on IA-64.\n \n-@item M1\n-Constant 255.\n+@item G\n+Floating-point constant 0.0 or 1.0\n \n-@item M2\n-Constant 65535.\n+@item I\n+14-bit signed integer constant\n \n @item J\n-An integer constant with exactly a single bit set.\n+22-bit signed integer constant\n+\n+@item K\n+8-bit signed integer constant for logical instructions\n \n @item L\n-An integer constant with all bits set except exactly one.\n+8-bit adjusted signed integer constant for compare pseudo-ops\n \n-@item H\n+@item M\n+6-bit unsigned integer constant for shift counts\n+\n+@item N\n+9-bit signed integer constant for load and store postincrements\n+\n+@item O\n+The constant zero\n+\n+@item P\n+0 or @minus{}1 for @code{dep} instruction\n \n @item Q\n-Any SYMBOL_REF.\n+Non-volatile memory for floating-point loads and stores\n+\n+@item R\n+Integer constant in the range 1 to 4 for @code{shladd} instruction\n+\n+@item S\n+Memory operand except postincrement and postdecrement.  This is\n+now roughly the same as @samp{m} when not used together with @samp{<}\n+or @samp{>}.\n @end table\n \n @item M32C---@file{config/m32c/m32c.c}\n@@ -3316,33 +2980,232 @@ Floating point constant 0.\n @item I\n An integer constant that fits in 16 bits.\n \n-@item J\n-An integer constant whose low order 16 bits are zero.\n+@item J\n+An integer constant whose low order 16 bits are zero.\n+\n+@item K\n+An integer constant that does not meet the constraints for codes\n+@samp{I} or @samp{J}.\n+\n+@item L\n+The integer constant 1.\n+\n+@item M\n+The integer constant @minus{}1.\n+\n+@item N\n+The integer constant 0.\n+\n+@item O\n+Integer constants @minus{}4 through @minus{}1 and 1 through 4; shifts by these\n+amounts are handled as multiple single-bit shifts rather than a single\n+variable-length shift.\n+\n+@item Q\n+A memory reference which requires an additional word (address or\n+offset) after the opcode.\n+\n+@item R\n+A memory reference that is encoded within the opcode.\n+\n+@end table\n+\n+@item PowerPC and IBM RS6000---@file{config/rs6000/constraints.md}\n+@table @code\n+@item b\n+Address base register\n+\n+@item d\n+Floating point register (containing 64-bit value)\n+\n+@item f\n+Floating point register (containing 32-bit value)\n+\n+@item v\n+Altivec vector register\n+\n+@item wa\n+Any VSX register if the -mvsx option was used or NO_REGS.\n+\n+@item wd\n+VSX vector register to hold vector double data or NO_REGS.\n+\n+@item wf\n+VSX vector register to hold vector float data or NO_REGS.\n+\n+@item wg\n+If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n+\n+@item wh\n+Floating point register if direct moves are available, or NO_REGS.\n+\n+@item wi\n+FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n+\n+@item wj\n+FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\n+\n+@item wk\n+FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\n+\n+@item wl\n+Floating point register if the LFIWAX instruction is enabled or NO_REGS.\n+\n+@item wm\n+VSX register if direct move instructions are enabled, or NO_REGS.\n+\n+@item wn\n+No register (NO_REGS).\n+\n+@item wr\n+General purpose register if 64-bit instructions are enabled or NO_REGS.\n+\n+@item ws\n+VSX vector register to hold scalar double values or NO_REGS.\n+\n+@item wt\n+VSX vector register to hold 128 bit integer or NO_REGS.\n+\n+@item wu\n+Altivec register to use for float/32-bit int loads/stores  or NO_REGS.\n+\n+@item wv\n+Altivec register to use for double loads/stores  or NO_REGS.\n+\n+@item ww\n+FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n+\n+@item wx\n+Floating point register if the STFIWX instruction is enabled or NO_REGS.\n+\n+@item wy\n+FP or VSX register to perform ISA 2.07 float ops or NO_REGS.\n+\n+@item wz\n+Floating point register if the LFIWZX instruction is enabled or NO_REGS.\n+\n+@item wD\n+Int constant that is the element number of the 64-bit scalar in a vector.\n+\n+@item wQ\n+A memory address that will work with the @code{lq} and @code{stq}\n+instructions.\n+\n+@item h\n+@samp{MQ}, @samp{CTR}, or @samp{LINK} register\n+\n+@item q\n+@samp{MQ} register\n+\n+@item c\n+@samp{CTR} register\n+\n+@item l\n+@samp{LINK} register\n+\n+@item x\n+@samp{CR} register (condition register) number 0\n+\n+@item y\n+@samp{CR} register (condition register)\n+\n+@item z\n+@samp{XER[CA]} carry bit (part of the XER register)\n+\n+@item I\n+Signed 16-bit constant\n+\n+@item J\n+Unsigned 16-bit constant shifted left 16 bits (use @samp{L} instead for\n+@code{SImode} constants)\n+\n+@item K\n+Unsigned 16-bit constant\n+\n+@item L\n+Signed 16-bit constant shifted left 16 bits\n+\n+@item M\n+Constant larger than 31\n+\n+@item N\n+Exact power of 2\n+\n+@item O\n+Zero\n+\n+@item P\n+Constant whose negation is a signed 16-bit constant\n+\n+@item G\n+Floating point constant that can be loaded into a register with one\n+instruction per word\n+\n+@item H\n+Integer/Floating point constant that can be loaded into a register using\n+three instructions\n+\n+@item m\n+Memory operand.\n+Normally, @code{m} does not allow addresses that update the base register.\n+If @samp{<} or @samp{>} constraint is also used, they are allowed and\n+therefore on PowerPC targets in that case it is only safe\n+to use @samp{m<>} in an @code{asm} statement if that @code{asm} statement\n+accesses the operand exactly once.  The @code{asm} statement must also\n+use @samp{%U@var{<opno>}} as a placeholder for the ``update'' flag in the\n+corresponding load or store instruction.  For example:\n+\n+@smallexample\n+asm (\"st%U0 %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n+@end smallexample\n+\n+is correct but:\n+\n+@smallexample\n+asm (\"st %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n+@end smallexample\n+\n+is not.\n+\n+@item es\n+A ``stable'' memory operand; that is, one which does not include any\n+automodification of the base register.  This used to be useful when\n+@samp{m} allowed automodification of the base register, but as those are now only\n+allowed when @samp{<} or @samp{>} is used, @samp{es} is basically the same\n+as @samp{m} without @samp{<} and @samp{>}.\n+\n+@item Q\n+Memory operand that is an offset from a register (it is usually better\n+to use @samp{m} or @samp{es} in @code{asm} statements)\n+\n+@item Z\n+Memory operand that is an indexed or indirect from a register (it is\n+usually better to use @samp{m} or @samp{es} in @code{asm} statements)\n+\n+@item R\n+AIX TOC entry\n \n-@item K\n-An integer constant that does not meet the constraints for codes\n-@samp{I} or @samp{J}.\n+@item a\n+Address operand that is an indexed or indirect from a register (@samp{p} is\n+preferable for @code{asm} statements)\n \n-@item L\n-The integer constant 1.\n+@item S\n+Constant suitable as a 64-bit mask operand\n \n-@item M\n-The integer constant @minus{}1.\n+@item T\n+Constant suitable as a 32-bit mask operand\n \n-@item N\n-The integer constant 0.\n+@item U\n+System V Release 4 small data area reference\n \n-@item O\n-Integer constants @minus{}4 through @minus{}1 and 1 through 4; shifts by these\n-amounts are handled as multiple single-bit shifts rather than a single\n-variable-length shift.\n+@item t\n+AND masks that can be performed by two rldic@{l, r@} instructions\n \n-@item Q\n-A memory reference which requires an additional word (address or\n-offset) after the opcode.\n+@item W\n+Vector constant that does not require memory\n \n-@item R\n-A memory reference that is encoded within the opcode.\n+@item j\n+Vector constant that is all zeros.\n \n @end table\n \n@@ -3462,6 +3325,79 @@ A constant in the range 0 to 15, inclusive.\n \n @end table\n \n+@item S/390 and zSeries---@file{config/s390/s390.h}\n+@table @code\n+@item a\n+Address register (general purpose register except r0)\n+\n+@item c\n+Condition code register\n+\n+@item d\n+Data register (arbitrary general purpose register)\n+\n+@item f\n+Floating-point register\n+\n+@item I\n+Unsigned 8-bit constant (0--255)\n+\n+@item J\n+Unsigned 12-bit constant (0--4095)\n+\n+@item K\n+Signed 16-bit constant (@minus{}32768--32767)\n+\n+@item L\n+Value appropriate as displacement.\n+@table @code\n+@item (0..4095)\n+for short displacement\n+@item (@minus{}524288..524287)\n+for long displacement\n+@end table\n+\n+@item M\n+Constant integer with a value of 0x7fffffff.\n+\n+@item N\n+Multiple letter constraint followed by 4 parameter letters.\n+@table @code\n+@item 0..9:\n+number of the part counting from most to least significant\n+@item H,Q:\n+mode of the part\n+@item D,S,H:\n+mode of the containing operand\n+@item 0,F:\n+value of the other parts (F---all bits set)\n+@end table\n+The constraint matches if the specified part of a constant\n+has a value different from its other parts.\n+\n+@item Q\n+Memory reference without index register and with short displacement.\n+\n+@item R\n+Memory reference with index register and short displacement.\n+\n+@item S\n+Memory reference without index register but with long displacement.\n+\n+@item T\n+Memory reference with index register and long displacement.\n+\n+@item U\n+Pointer with short displacement.\n+\n+@item W\n+Pointer with long displacement.\n+\n+@item Y\n+Shift count operand.\n+\n+@end table\n+\n @need 1000\n @item SPARC---@file{config/sparc/sparc.h}\n @table @code\n@@ -3581,199 +3517,56 @@ An immediate which can be loaded with @code{fsmbi}.\n @item A\n An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is treated as a 32 bit value.\n \n-@item B\n-An immediate for most arithmetic instructions.  const_int is treated as a 32 bit value.\n-\n-@item C\n-An immediate for and/xor/or instructions.  const_int is treated as a 32 bit value.\n-\n-@item D\n-An immediate for the @code{iohl} instruction.  const_int is treated as a 32 bit value.\n-\n-@item I\n-A constant in the range [@minus{}64, 63] for shift/rotate instructions.\n-\n-@item J\n-An unsigned 7-bit constant for conversion/nop/channel instructions.\n-\n-@item K\n-A signed 10-bit constant for most arithmetic instructions.\n-\n-@item M\n-A signed 16 bit immediate for @code{stop}.\n-\n-@item N\n-An unsigned 16-bit constant for @code{iohl} and @code{fsmbi}.\n-\n-@item O\n-An unsigned 7-bit constant whose 3 least significant bits are 0.\n-\n-@item P\n-An unsigned 3-bit constant for 16-byte rotates and shifts\n-\n-@item R\n-Call operand, reg, for indirect calls\n-\n-@item S\n-Call operand, symbol, for relative calls.\n-\n-@item T\n-Call operand, const_int, for absolute calls.\n-\n-@item U\n-An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is sign extended to 128 bit.\n-\n-@item W\n-An immediate for shift and rotate instructions.  const_int is treated as a 32 bit value.\n-\n-@item Y\n-An immediate for and/xor/or instructions.  const_int is sign extended as a 128 bit.\n-\n-@item Z\n-An immediate for the @code{iohl} instruction.  const_int is sign extended to 128 bit.\n-\n-@end table\n-\n-@item S/390 and zSeries---@file{config/s390/s390.h}\n-@table @code\n-@item a\n-Address register (general purpose register except r0)\n-\n-@item c\n-Condition code register\n-\n-@item d\n-Data register (arbitrary general purpose register)\n-\n-@item f\n-Floating-point register\n-\n-@item I\n-Unsigned 8-bit constant (0--255)\n-\n-@item J\n-Unsigned 12-bit constant (0--4095)\n-\n-@item K\n-Signed 16-bit constant (@minus{}32768--32767)\n-\n-@item L\n-Value appropriate as displacement.\n-@table @code\n-@item (0..4095)\n-for short displacement\n-@item (@minus{}524288..524287)\n-for long displacement\n-@end table\n-\n-@item M\n-Constant integer with a value of 0x7fffffff.\n-\n-@item N\n-Multiple letter constraint followed by 4 parameter letters.\n-@table @code\n-@item 0..9:\n-number of the part counting from most to least significant\n-@item H,Q:\n-mode of the part\n-@item D,S,H:\n-mode of the containing operand\n-@item 0,F:\n-value of the other parts (F---all bits set)\n-@end table\n-The constraint matches if the specified part of a constant\n-has a value different from its other parts.\n-\n-@item Q\n-Memory reference without index register and with short displacement.\n-\n-@item R\n-Memory reference with index register and short displacement.\n-\n-@item S\n-Memory reference without index register but with long displacement.\n-\n-@item T\n-Memory reference with index register and long displacement.\n-\n-@item U\n-Pointer with short displacement.\n-\n-@item W\n-Pointer with long displacement.\n-\n-@item Y\n-Shift count operand.\n-\n-@end table\n-\n-@item Xstormy16---@file{config/stormy16/stormy16.h}\n-@table @code\n-@item a\n-Register r0.\n-\n-@item b\n-Register r1.\n-\n-@item c\n-Register r2.\n-\n-@item d\n-Register r8.\n-\n-@item e\n-Registers r0 through r7.\n-\n-@item t\n-Registers r0 and r1.\n+@item B\n+An immediate for most arithmetic instructions.  const_int is treated as a 32 bit value.\n \n-@item y\n-The carry register.\n+@item C\n+An immediate for and/xor/or instructions.  const_int is treated as a 32 bit value.\n \n-@item z\n-Registers r8 and r9.\n+@item D\n+An immediate for the @code{iohl} instruction.  const_int is treated as a 32 bit value.\n \n @item I\n-A constant between 0 and 3 inclusive.\n+A constant in the range [@minus{}64, 63] for shift/rotate instructions.\n \n @item J\n-A constant that has exactly one bit set.\n+An unsigned 7-bit constant for conversion/nop/channel instructions.\n \n @item K\n-A constant that has exactly one bit clear.\n-\n-@item L\n-A constant between 0 and 255 inclusive.\n+A signed 10-bit constant for most arithmetic instructions.\n \n @item M\n-A constant between @minus{}255 and 0 inclusive.\n+A signed 16 bit immediate for @code{stop}.\n \n @item N\n-A constant between @minus{}3 and 0 inclusive.\n+An unsigned 16-bit constant for @code{iohl} and @code{fsmbi}.\n \n @item O\n-A constant between 1 and 4 inclusive.\n+An unsigned 7-bit constant whose 3 least significant bits are 0.\n \n @item P\n-A constant between @minus{}4 and @minus{}1 inclusive.\n-\n-@item Q\n-A memory reference that is a stack push.\n+An unsigned 3-bit constant for 16-byte rotates and shifts\n \n @item R\n-A memory reference that is a stack pop.\n+Call operand, reg, for indirect calls\n \n @item S\n-A memory reference that refers to a constant address of known value.\n+Call operand, symbol, for relative calls.\n \n @item T\n-The register indicated by Rx (not implemented yet).\n+Call operand, const_int, for absolute calls.\n \n @item U\n-A constant that is not between 2 and 15 inclusive.\n+An immediate which can be loaded with the il/ila/ilh/ilhu instructions.  const_int is sign extended to 128 bit.\n+\n+@item W\n+An immediate for shift and rotate instructions.  const_int is treated as a 32 bit value.\n+\n+@item Y\n+An immediate for and/xor/or instructions.  const_int is sign extended as a 128 bit.\n \n @item Z\n-The constant 0.\n+An immediate for the @code{iohl} instruction.  const_int is sign extended to 128 bit.\n \n @end table\n \n@@ -4058,6 +3851,214 @@ Integer constant 0\n Integer constant 32\n @end table\n \n+@item x86 family---@file{config/i386/constraints.md}\n+@table @code\n+@item R\n+Legacy register---the eight integer registers available on all\n+i386 processors (@code{a}, @code{b}, @code{c}, @code{d},\n+@code{si}, @code{di}, @code{bp}, @code{sp}).\n+\n+@item q\n+Any register accessible as @code{@var{r}l}.  In 32-bit mode, @code{a},\n+@code{b}, @code{c}, and @code{d}; in 64-bit mode, any integer register.\n+\n+@item Q\n+Any register accessible as @code{@var{r}h}: @code{a}, @code{b},\n+@code{c}, and @code{d}.\n+\n+@ifset INTERNALS\n+@item l\n+Any register that can be used as the index in a base+index memory\n+access: that is, any general register except the stack pointer.\n+@end ifset\n+\n+@item a\n+The @code{a} register.\n+\n+@item b\n+The @code{b} register.\n+\n+@item c\n+The @code{c} register.\n+\n+@item d\n+The @code{d} register.\n+\n+@item S\n+The @code{si} register.\n+\n+@item D\n+The @code{di} register.\n+\n+@item A\n+The @code{a} and @code{d} registers.  This class is used for instructions\n+that return double word results in the @code{ax:dx} register pair.  Single\n+word values will be allocated either in @code{ax} or @code{dx}.\n+For example on i386 the following implements @code{rdtsc}:\n+\n+@smallexample\n+unsigned long long rdtsc (void)\n+@{\n+  unsigned long long tick;\n+  __asm__ __volatile__(\"rdtsc\":\"=A\"(tick));\n+  return tick;\n+@}\n+@end smallexample\n+\n+This is not correct on x86-64 as it would allocate tick in either @code{ax}\n+or @code{dx}.  You have to use the following variant instead:\n+\n+@smallexample\n+unsigned long long rdtsc (void)\n+@{\n+  unsigned int tickl, tickh;\n+  __asm__ __volatile__(\"rdtsc\":\"=a\"(tickl),\"=d\"(tickh));\n+  return ((unsigned long long)tickh << 32)|tickl;\n+@}\n+@end smallexample\n+\n+\n+@item f\n+Any 80387 floating-point (stack) register.\n+\n+@item t\n+Top of 80387 floating-point stack (@code{%st(0)}).\n+\n+@item u\n+Second from top of 80387 floating-point stack (@code{%st(1)}).\n+\n+@item y\n+Any MMX register.\n+\n+@item x\n+Any SSE register.\n+\n+@item Yz\n+First SSE register (@code{%xmm0}).\n+\n+@ifset INTERNALS\n+@item Y2\n+Any SSE register, when SSE2 is enabled.\n+\n+@item Yi\n+Any SSE register, when SSE2 and inter-unit moves are enabled.\n+\n+@item Ym\n+Any MMX register, when inter-unit moves are enabled.\n+@end ifset\n+\n+@item I\n+Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\n+\n+@item J\n+Integer constant in the range 0 @dots{} 63, for 64-bit shifts.\n+\n+@item K\n+Signed 8-bit integer constant.\n+\n+@item L\n+@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\n+\n+@item M\n+0, 1, 2, or 3 (shifts for the @code{lea} instruction).\n+\n+@item N\n+Unsigned 8-bit integer constant (for @code{in} and @code{out}\n+instructions).\n+\n+@ifset INTERNALS\n+@item O\n+Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\n+@end ifset\n+\n+@item G\n+Standard 80387 floating point constant.\n+\n+@item C\n+Standard SSE floating point constant.\n+\n+@item e\n+32-bit signed integer constant, or a symbolic reference known\n+to fit that range (for immediate operands in sign-extending x86-64\n+instructions).\n+\n+@item Z\n+32-bit unsigned integer constant, or a symbolic reference known\n+to fit that range (for immediate operands in zero-extending x86-64\n+instructions).\n+\n+@end table\n+\n+@item Xstormy16---@file{config/stormy16/stormy16.h}\n+@table @code\n+@item a\n+Register r0.\n+\n+@item b\n+Register r1.\n+\n+@item c\n+Register r2.\n+\n+@item d\n+Register r8.\n+\n+@item e\n+Registers r0 through r7.\n+\n+@item t\n+Registers r0 and r1.\n+\n+@item y\n+The carry register.\n+\n+@item z\n+Registers r8 and r9.\n+\n+@item I\n+A constant between 0 and 3 inclusive.\n+\n+@item J\n+A constant that has exactly one bit set.\n+\n+@item K\n+A constant that has exactly one bit clear.\n+\n+@item L\n+A constant between 0 and 255 inclusive.\n+\n+@item M\n+A constant between @minus{}255 and 0 inclusive.\n+\n+@item N\n+A constant between @minus{}3 and 0 inclusive.\n+\n+@item O\n+A constant between 1 and 4 inclusive.\n+\n+@item P\n+A constant between @minus{}4 and @minus{}1 inclusive.\n+\n+@item Q\n+A memory reference that is a stack push.\n+\n+@item R\n+A memory reference that is a stack pop.\n+\n+@item S\n+A memory reference that refers to a constant address of known value.\n+\n+@item T\n+The register indicated by Rx (not implemented yet).\n+\n+@item U\n+A constant that is not between 2 and 15 inclusive.\n+\n+@item Z\n+The constant 0.\n+\n+@end table\n+\n @item Xtensa---@file{config/xtensa/constraints.md}\n @table @code\n @item a"}]}