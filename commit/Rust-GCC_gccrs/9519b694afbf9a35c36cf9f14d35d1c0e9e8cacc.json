{"sha": "9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "node_id": "C_kwDOANBUbNoAKDk1MTliNjk0YWZiZjlhMzVjMzZjZjlmMTRkMzVkMWMwZTllOGNhY2M", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-26T15:24:20Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-29T09:45:57Z"}, "message": "Fix regression introduced by r12-5536.\n\nThere're several failures:\n1.  unsupported instruction `pextrw` for \"pextrw $0, %xmm31, 16(%rax)\"\n%vpextrw should be used in output templates.\n2. ICE in get_attr_memory for movhi_internal since some alternatives\nare marked as TYPE_SSELOG.\nuse TYPE_SSELOG1 instead.\n\nAlso this patch fixs a typo and some latent bugs which are related to\nmoving HImode from/to sse register w/o TARGET_AVX512FP16.\n\ngcc/ChangeLog:\n\n\tPR target/102811\n\tPR target/103463\n\t* config/i386/i386.c (ix86_secondary_reload): Without\n\tTARGET_SSE4_1, General register is needed to move HImode from\n\tsse register to memory.\n\t* config/i386/sse.md (*vec_extrachf): Use %vpextrw instead of\n\tpextrw in output templates.\n\t* config/i386/i386.md (movhi_internal): Ditto, also fix typo of\n\tMEM_P (operands[1]) and adjust mode/prefix/type attribute for\n\talternatives related to sse register.", "tree": {"sha": "748cba18ee37cbaa0c46cc3407bd9fa6a53605ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/748cba18ee37cbaa0c46cc3407bd9fa6a53605ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e91ad55a69282c1b0e34569836a026a1a954d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e91ad55a69282c1b0e34569836a026a1a954d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85e91ad55a69282c1b0e34569836a026a1a954d1"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "7cf599f57f72c5292bd390e6b920a4330ae3ec0d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "patch": "@@ -19277,7 +19277,7 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n     }\n \n   /* Require movement to gpr, and then store to memory.  */\n-  if (mode == HFmode\n+  if ((mode == HFmode || mode == HImode)\n       && !TARGET_SSE4_1\n       && SSE_CLASS_P (rclass)\n       && !in_p && MEM_P (x))"}, {"sha": "12ea5135cd7b2c8ff28a4e4a60671b1d32643f93", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "patch": "@@ -2525,15 +2525,15 @@\n     case TYPE_SSEMOV:\n       return ix86_output_ssemov (insn, operands);\n \n-    case TYPE_SSELOG:\n+    case TYPE_SSELOG1:\n       if (SSE_REG_P (operands[0]))\n \treturn MEM_P (operands[1])\n-\t  ? \"pinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t  : \"pinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n+\t  ? \"%vpinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t  : \"%vpinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n       else\n-\treturn MEM_P (operands[1])\n-\t  ? \"pextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t  : \"pextrw\\t{$0, %1, %k0|%k0, %k1, 0}\";\n+\treturn MEM_P (operands[0])\n+\t  ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t  : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n \n     case TYPE_MSKLOG:\n       if (operands[1] == const0_rtx)\n@@ -2557,12 +2557,14 @@\n \t       ]\n \t       (const_string \"*\")))\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n+     (cond [(eq_attr \"alternative\" \"9,10,12,13\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"ssemov\")\n-\t\t(const_string \"sselog\"))\n+\t\t(const_string \"sselog1\"))\n \t    (eq_attr \"alternative\" \"4,5,6,7\")\n \t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"11\")\n+\t      (const_string \"ssemov\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"msklog\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n@@ -2580,14 +2582,23 @@\n \t   ]\n \t   (const_string \"imov\")))\n     (set (attr \"prefix\")\n-      (if_then_else (eq_attr \"alternative\" \"4,5,6,7,8\")\n-\t(const_string \"vex\")\n-\t(const_string \"orig\")))\n+\t (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n+\t\t  (const_string \"maybe_evex\")\n+\t\t(eq_attr \"alternative\" \"4,5,6,7,8\")\n+\t\t  (const_string \"vex\")\n+\t       ]\n+\t       (const_string \"orig\")))\n     (set (attr \"mode\")\n       (cond [(eq_attr \"type\" \"imovx\")\n \t       (const_string \"SI\")\n+\t     (eq_attr \"alternative\" \"9,10,12,13\")\n+\t       (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t (const_string \"HI\")\n+\t\t (const_string \"TI\"))\n \t     (eq_attr \"alternative\" \"11\")\n-\t       (const_string \"HF\")\n+\t       (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t (const_string \"HF\")\n+\t\t (const_string \"SF\"))\n \t     (and (eq_attr \"alternative\" \"1,2\")\n \t\t  (match_operand:HI 1 \"aligned_operand\"))\n \t       (const_string \"SI\")\n@@ -3791,9 +3802,9 @@\n \t       ? \"pinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n \t       : \"pinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n       else\n-\treturn MEM_P (operands[1])\n+\treturn MEM_P (operands[0])\n \t       ? \"pextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t       : \"pextrw\\t{$0, %1, %k0|%k0, %k1, 0}\";\n+\t       : \"pextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n \n     default:\n       gcc_unreachable ();"}, {"sha": "5229b23af98b5029ef6835fe2cd5504ac9029630", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc", "patch": "@@ -11315,9 +11315,9 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\";\n+      return \"%vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\";\n     case 1:\n-      return \"vpextrw\\t{%2, %1, %0|%0, %1, %2}\";\n+      return \"%vpextrw\\t{%2, %1, %0|%0, %1, %2}\";\n \n     case 2:\n       operands[2] = GEN_INT (INTVAL (operands[2]) * 2);\n@@ -11330,7 +11330,7 @@\n       gcc_unreachable ();\n    }\n }\n-  [(set_attr \"isa\" \"*,*,noavx,avx\")\n+  [(set_attr \"isa\" \"*,sse4,noavx,avx\")\n    (set_attr \"type\" \"sselog1,sselog1,sseishft1,sseishft1\")\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"TI\")])"}]}