{"sha": "a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczNzM0ZjVmNWYwNDljODBmY2FjOGVhN2YzZjhlNzQyMzUzMmVhYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-29T08:51:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-29T08:51:53Z"}, "message": "[multiple changes]\n\n2009-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_atag.ads, exp_atag.adb, s-tasini.adb, s-soflin.ads,\n\texp_disp.adb, g-socket.adb: Minor reformatting\n\n2009-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch7.adb (New_Private_Type): Create class-wide type after other\n\tattributes have been established, so that they are all inherited by the\n\tclass-wide type.\n\t* sem_cat.adb (Validate_Remote_Access_Object_Type_Declaration): Handle\n\tproperly named subtypes of class-wide types.\n\nFrom-SVN: r150201", "tree": {"sha": "8c38f3248ca1de9382b2e7ab9b2b501ff9e59308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c38f3248ca1de9382b2e7ab9b2b501ff9e59308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/comments", "author": null, "committer": null, "parents": [{"sha": "53b10ce9218f53b3a0b139133cf95ab31c7cc344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b10ce9218f53b3a0b139133cf95ab31c7cc344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b10ce9218f53b3a0b139133cf95ab31c7cc344"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "e54daa9ea65481a443cc6f58541e23b168920ede", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -1,3 +1,16 @@\n+2009-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_atag.ads, exp_atag.adb, s-tasini.adb, s-soflin.ads,\n+\texp_disp.adb, g-socket.adb: Minor reformatting\n+\n+2009-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch7.adb (New_Private_Type): Create class-wide type after other\n+\tattributes have been established, so that they are all inherited by the\n+\tclass-wide type.\n+\t* sem_cat.adb (Validate_Remote_Access_Object_Type_Declaration): Handle\n+\tproperly named subtypes of class-wide types.\n+\n 2009-07-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Check_Overriding_Indicator): Handle properly overriding"}, {"sha": "314258c3070b4b45dc3ab4e29925399721fca987", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -231,7 +231,7 @@ package body Exp_Atag is\n      (Loc      : Source_Ptr;\n       Position : Uint;\n       Tag_Node : in out Node_Id;\n-      New_Node :    out Node_Id)\n+      New_Node : out Node_Id)\n    is\n       Ctrl_Tag : Node_Id;\n \n@@ -352,7 +352,7 @@ package body Exp_Atag is\n       Typ      : Entity_Id;\n       Position : Uint;\n       Tag_Node : in out Node_Id;\n-      New_Node :    out Node_Id)\n+      New_Node : out Node_Id)\n    is\n       New_Prefix : Node_Id;\n "}, {"sha": "42ec4769c38cd9e44eef10383c612e48595d31b1", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -65,7 +65,7 @@ package Exp_Atag is\n      (Loc      : Source_Ptr;\n       Position : Uint;\n       Tag_Node : in out Node_Id;\n-      New_Node :    out Node_Id);\n+      New_Node : out Node_Id);\n    --  Given a pointer to a dispatch table (T) and a position in the DT, build\n    --  code that gets the address of the predefined virtual function stored in\n    --  it (used for dispatching calls). Tag_Node is relocated.\n@@ -77,7 +77,7 @@ package Exp_Atag is\n       Typ      : Entity_Id;\n       Position : Uint;\n       Tag_Node : in out Node_Id;\n-      New_Node : out    Node_Id);\n+      New_Node : out Node_Id);\n    --  Build code that retrieves the address of the virtual function stored in\n    --  a given position of the dispatch table (used for dispatching calls).\n    --  Tag_Node is relocated."}, {"sha": "a38e4d8b943e829ed2ef66f34205b7183ca05530", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -811,11 +811,11 @@ package body Exp_Disp is\n       else\n          Controlling_Tag :=\n            Make_Selected_Component (Loc,\n-             Prefix => Duplicate_Subexpr_Move_Checks (Ctrl_Arg),\n+             Prefix        => Duplicate_Subexpr_Move_Checks (Ctrl_Arg),\n              Selector_Name => New_Reference_To (DTC_Entity (Subp), Loc));\n       end if;\n \n-      --  Handle dispatching calls to predefined primitives.\n+      --  Handle dispatching calls to predefined primitives\n \n       if Is_Predefined_Dispatching_Operation (Subp)\n         or else Is_Predefined_Dispatching_Alias (Subp)\n@@ -854,10 +854,10 @@ package body Exp_Disp is\n          --  Handle renaming of selected component\n \n          elsif Nkind (Controlling_Tag) = N_Identifier\n-           and then Nkind (Parent (Entity (Controlling_Tag)))\n-                      = N_Object_Renaming_Declaration\n-           and then Nkind (Name (Parent (Entity (Controlling_Tag))))\n-                      = N_Selected_Component\n+           and then Nkind (Parent (Entity (Controlling_Tag))) =\n+                                             N_Object_Renaming_Declaration\n+           and then Nkind (Name (Parent (Entity (Controlling_Tag)))) =\n+                                             N_Selected_Component\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Name (Parent (Entity (Controlling_Tag))));\n@@ -867,8 +867,8 @@ package body Exp_Disp is\n \n          elsif Nkind (Controlling_Tag) = N_Identifier\n            and then Nkind_In (Parent (Entity (Controlling_Tag)),\n-                                N_Object_Declaration,\n-                                N_Parameter_Specification)\n+                              N_Object_Declaration,\n+                              N_Parameter_Specification)\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Parent (Entity (Controlling_Tag)));\n@@ -879,8 +879,8 @@ package body Exp_Disp is\n          elsif Nkind (Controlling_Tag) = N_Explicit_Dereference\n             and then Nkind (Prefix (Controlling_Tag)) = N_Identifier\n             and then Nkind_In (Parent (Entity (Prefix (Controlling_Tag))),\n-                                 N_Object_Declaration,\n-                                 N_Parameter_Specification)\n+                               N_Object_Declaration,\n+                               N_Parameter_Specification)\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Parent (Entity (Prefix (Controlling_Tag))));\n@@ -894,9 +894,9 @@ package body Exp_Disp is\n          then\n             Set_SCIL_Controlling_Tag (SCIL_Node,\n               Parent\n-               (Node\n-                (First_Elmt\n-                 (Access_Disp_Table (Entity (Prefix (Controlling_Tag)))))));\n+                (Node\n+                  (First_Elmt\n+                    (Access_Disp_Table (Entity (Prefix (Controlling_Tag)))))));\n \n          --  Interfaces are not supported. For now we leave the SCIL node\n          --  decorated with the Controlling_Tag. More work needed here???\n@@ -913,7 +913,7 @@ package body Exp_Disp is\n       if Nkind (Call_Node) = N_Function_Call then\n          New_Call :=\n            Make_Function_Call (Loc,\n-             Name => New_Call_Name,\n+             Name                   => New_Call_Name,\n              Parameter_Associations => New_Params);\n \n          --  If this is a dispatching \"=\", we must first compare the tags so\n@@ -927,26 +927,26 @@ package body Exp_Disp is\n                      Make_Op_Eq (Loc,\n                        Left_Opnd =>\n                          Make_Selected_Component (Loc,\n-                           Prefix => New_Value (Param),\n+                           Prefix        => New_Value (Param),\n                            Selector_Name =>\n                              New_Reference_To (First_Tag_Component (Typ),\n                                                Loc)),\n \n                        Right_Opnd =>\n                          Make_Selected_Component (Loc,\n-                           Prefix =>\n+                           Prefix        =>\n                              Unchecked_Convert_To (Typ,\n                                New_Value (Next_Actual (Param))),\n                            Selector_Name =>\n-                             New_Reference_To (First_Tag_Component (Typ),\n-                                               Loc))),\n+                             New_Reference_To\n+                               (First_Tag_Component (Typ), Loc))),\n                 Right_Opnd => New_Call);\n          end if;\n \n       else\n          New_Call :=\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Call_Name,\n+             Name                   => New_Call_Name,\n              Parameter_Associations => New_Params);\n       end if;\n "}, {"sha": "d32ebfc37a84395dac184c11baf0b24ccc660d7d", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -1664,11 +1664,14 @@ package body GNAT.Sockets is\n               (Msg_Name       => System.Null_Address,\n                Msg_Namelen    => 0,\n                Msg_Iov        => Vector'Address,\n-               Msg_Iovlen     =>\n-                 SOSC.Msg_Iovlen_T'Min (Vector'Length, SOSC.IOV_MAX),\n+\n                --  recvmsg(2) returns EMSGSIZE on Linux (and probably on other\n                --  platforms) when the supplied vector is longer than IOV_MAX,\n                --  so use minimum of the two lengths.\n+\n+               Msg_Iovlen     => SOSC.Msg_Iovlen_T'Min\n+                                   (Vector'Length, SOSC.IOV_MAX),\n+\n                Msg_Control    => System.Null_Address,\n                Msg_Controllen => 0,\n                Msg_Flags      => 0);"}, {"sha": "783fd8878eba900a4e0c00bd6341781f273de918", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -242,7 +242,7 @@ package System.Soft_Links is\n    function Get_Exc_Stack_Addr_NT return Address;\n    Get_Exc_Stack_Addr : Get_Address_Call := Get_Exc_Stack_Addr_NT'Access;\n \n-   function  Get_Current_Excep_NT return EOA;\n+   function Get_Current_Excep_NT return EOA;\n \n    Get_Current_Excep : Get_EOA_Call := Get_Current_Excep_NT'Access;\n "}, {"sha": "28b86cb5765c2b17ff042bd08d492f2548b5d573", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -191,8 +191,8 @@ package body System.Tasking.Initialization is\n       end if;\n \n       --  pragma Assert\n-      --    ((Self_ID.Pending_ATC_Level >= Self_ID.ATC_Nesting_Level or else\n-      --      Self_ID.Deferral_Level > 0));\n+      --    (Self_ID.Pending_ATC_Level >= Self_ID.ATC_Nesting_Level or else\n+      --     Self_ID.Deferral_Level > 0);\n \n       --  See comment in Defer_Abort on the situations in which it may be\n       --  useful to uncomment the above assertion."}, {"sha": "d5d38235f3605609b91dd03afe227fbbc3357bc8", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1774,12 +1774,12 @@ package body Sem_Cat is\n \n       --  Check RCI or RT unit type declaration. It may not contain the\n       --  declaration of an access-to-object type unless it is a general access\n-      --  type that designates a class-wide limited private type. There are\n-      --  also constraints on the primitive subprograms of the class-wide type\n-      --  (RM E.2.2(14), see Validate_RACW_Primitives).\n+      --  type that designates a class-wide limited private type or subtype.\n+      --  There are also constraints on the primitive subprograms of the\n+      --  class-wide type (RM E.2.2(14), see Validate_RACW_Primitives).\n \n       if Ekind (T) /= E_General_Access_Type\n-        or else Ekind (Designated_Type (T)) /= E_Class_Wide_Type\n+        or else not Is_Class_Wide_Type (Designated_Type (T))\n       then\n          if In_RCI_Declaration (Parent (T)) then\n             Error_Msg_N"}, {"sha": "4edcfe76bcb01aa47877017bf33f51bd45d5246d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73734f5f5f049c80fcac8ea7f3f8e7423532eab/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=a73734f5f5f049c80fcac8ea7f3f8e7423532eab", "patch": "@@ -1907,12 +1907,15 @@ package body Sem_Ch7 is\n \n       if Tagged_Present (Def) then\n          Set_Ekind                (Id, E_Record_Type_With_Private);\n-         Make_Class_Wide_Type     (Id);\n          Set_Primitive_Operations (Id, New_Elmt_List);\n          Set_Is_Abstract_Type     (Id, Abstract_Present (Def));\n          Set_Is_Limited_Record    (Id, Limited_Present (Def));\n          Set_Has_Delayed_Freeze   (Id, True);\n \n+         --  Create a class-wide type with the same attributes.\n+\n+         Make_Class_Wide_Type     (Id);\n+\n       elsif Abstract_Present (Def) then\n          Error_Msg_N (\"only a tagged type can be abstract\", N);\n       end if;"}]}