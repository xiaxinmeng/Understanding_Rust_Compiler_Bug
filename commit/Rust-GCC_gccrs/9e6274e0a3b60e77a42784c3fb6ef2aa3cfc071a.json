{"sha": "9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "node_id": "C_kwDOANBUbNoAKDllNjI3NGUwYTNiNjBlNzdhNDI3ODRjM2ZiNmVmMmFhM2NmYzA3MWE", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2021-12-15T13:26:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-07T16:24:10Z"}, "message": "[Ada] Fix exit status of GNAT.Expect.Close call on running process\n\ngcc/ada/\n\n\t* expect.c (__gnat_waitpid): Use macros WIFEXITED, WEXITSTATUS,\n\tWIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG to get exit status\n\tor signal that caused the child process to terminate/stop.  Do\n\tnot process exit status in case of error in waitpid call.\n\t* adaint.c (__gnat_kill): Use of GenerateConsoleCtrlEvent is\n\tremoved in Windows variant as it actually is not working and was\n\tterminating the calling process.  Set signal number into exit\n\tcode parameter of TerminateProcess to work the same like in\n\tLinux.", "tree": {"sha": "7366e040405074b954c1650a1e9b0f3f7a6fb15b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7366e040405074b954c1650a1e9b0f3f7a6fb15b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a6631a6ff0074083da528e3eec7dbf4997a609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a6631a6ff0074083da528e3eec7dbf4997a609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a6631a6ff0074083da528e3eec7dbf4997a609"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "2db35283eac25fae1b410d4f0f3f8b96837cba05", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "patch": "@@ -3562,18 +3562,8 @@ __gnat_kill (int pid, int sig, int close ATTRIBUTE_UNUSED)\n   HANDLE h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n   if (h == NULL)\n     return;\n-  if (sig == 9)\n-    {\n-      TerminateProcess (h, 1);\n-    }\n-  else if (sig == SIGINT)\n-    GenerateConsoleCtrlEvent (CTRL_C_EVENT, pid);\n-  else if (sig == SIGBREAK)\n-    GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT, pid);\n-  /* ??? The last two alternatives don't really work. SIGBREAK requires setting\n-     up process groups at start time which we don't do; treating SIGINT is just\n-     not possible apparently. So we really only support signal 9. Fortunately\n-     that's all we use in GNAT.Expect */\n+\n+  TerminateProcess (h, sig);\n \n   CloseHandle (h);\n #elif defined (__vxworks)"}, {"sha": "86cbcba0e6450460cf3f45c4355ae62524ba8ae1", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=9e6274e0a3b60e77a42784c3fb6ef2aa3cfc071a", "patch": "@@ -345,8 +345,17 @@ __gnat_waitpid (int pid)\n {\n   int status = 0;\n \n-  waitpid (pid, &status, 0);\n-  status = WEXITSTATUS (status);\n+  if (waitpid (pid, &status, 0) == -1) {\n+     return -1;\n+  }\n+\n+  if WIFEXITED (status) {\n+     status = WEXITSTATUS (status);\n+  } else if WIFSIGNALED (status) {\n+     status = WTERMSIG (status);\n+  } else if WIFSTOPPED (status) {\n+     status = WSTOPSIG (status);\n+  }\n \n   return status;\n }"}]}