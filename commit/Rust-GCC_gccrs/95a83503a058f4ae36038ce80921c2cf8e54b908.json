{"sha": "95a83503a058f4ae36038ce80921c2cf8e54b908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhODM1MDNhMDU4ZjRhZTM2MDM4Y2U4MDkyMWMyY2Y4ZTU0YjkwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-03-24T22:10:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-03-24T22:10:29Z"}, "message": "re PR libstdc++/56170 (Extension debug_allocator seems non-compliant w.r.t. rebind)\n\n\tPR libstdc++/56170\n\t* include/ext/debug_allocator.h (debug_allocator): Add missing members\n\tto meet allocator requirements.\n\t* testsuite/ext/debug_allocator/56170.cc: New.\n\nFrom-SVN: r197023", "tree": {"sha": "b845ecf5b8ab76dc1f846ef65bf26d476f028f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b845ecf5b8ab76dc1f846ef65bf26d476f028f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95a83503a058f4ae36038ce80921c2cf8e54b908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a83503a058f4ae36038ce80921c2cf8e54b908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a83503a058f4ae36038ce80921c2cf8e54b908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a83503a058f4ae36038ce80921c2cf8e54b908/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68"}], "stats": {"total": 139, "additions": 119, "deletions": 20}, "files": [{"sha": "4c2c6d9c5f44b860a14953618afcce561c7186a7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95a83503a058f4ae36038ce80921c2cf8e54b908", "patch": "@@ -1,3 +1,10 @@\n+2013-03-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/56170\n+\t* include/ext/debug_allocator.h (debug_allocator): Add missing members\n+\tto meet allocator requirements.\n+\t* testsuite/ext/debug_allocator/56170.cc: New.\n+\n 2013-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/56678"}, {"sha": "9bb73f061614ae8a3c041578bfefd4dc29dc00dc", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=95a83503a058f4ae36038ce80921c2cf8e54b908", "patch": "@@ -43,6 +43,8 @@\n #define _DEBUG_ALLOCATOR_H 1\n \n #include <stdexcept>\n+#include <bits/functexcept.h>\n+#include <ext/alloc_traits.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -51,24 +53,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using std::size_t;\n \n   /**\n-   *  @brief  A meta-allocator with debugging bits, as per [20.4].\n+   *  @brief  A meta-allocator with debugging bits.\n    *  @ingroup allocators\n    *\n-   *  This is precisely the allocator defined in the C++ Standard. \n-   *    - all allocation calls operator new\n-   *    - all deallocation calls operator delete\n+   *  This is precisely the allocator defined in the C++03 Standard.\n    */\n   template<typename _Alloc>\n     class debug_allocator\n     {\n+      template<typename> friend class debug_allocator;\n+\n+      typedef __alloc_traits<_Alloc> _Traits;\n+\n     public:\n-      typedef typename _Alloc::size_type       \tsize_type;\n-      typedef typename _Alloc::difference_type\tdifference_type;\n-      typedef typename _Alloc::pointer       \tpointer;\n-      typedef typename _Alloc::const_pointer    const_pointer;\n-      typedef typename _Alloc::reference       \treference;\n-      typedef typename _Alloc::const_reference  const_reference;\n-      typedef typename _Alloc::value_type       value_type;\n+      typedef typename _Traits::size_type       \tsize_type;\n+      typedef typename _Traits::difference_type\tdifference_type;\n+      typedef typename _Traits::pointer       \tpointer;\n+      typedef typename _Traits::const_pointer    const_pointer;\n+      typedef typename _Traits::reference       \treference;\n+      typedef typename _Traits::const_reference  const_reference;\n+      typedef typename _Traits::value_type       value_type;\n+\n+      template<typename _Up>\n+\tclass rebind\n+\t{\n+\t  typedef typename _Traits::template rebind<_Up>::other __other;\n+\n+\tpublic:\n+\t  typedef debug_allocator<__other> other;\n+\t};\n \n     private:\n       // _M_extra is the number of objects that correspond to the\n@@ -77,13 +90,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       _Alloc\t\t\t_M_allocator;\n \n-    public:\n-      debug_allocator()\n+      template<typename _Alloc2,\n+\t       typename = typename _Alloc2::template rebind<value_type>::other>\n+\tstruct __convertible\n+\t{ };\n+\n+      template<typename _Alloc2>\n+\tstruct __convertible<_Alloc2, _Alloc>\n+\t{\n+\t  typedef void* __type;\n+\t};\n+\n+      size_type _S_extra()\n       {\n \tconst size_t __obj_size = sizeof(value_type);\n-\t_M_extra = (sizeof(size_type) + __obj_size - 1) / __obj_size; \n+\treturn (sizeof(size_type) + __obj_size - 1) / __obj_size; \n       }\n-      \n+\n+    public:\n+      debug_allocator() : _M_extra(_S_extra()) { }\n+\n+      template<typename _Alloc2>\n+\tdebug_allocator(const debug_allocator<_Alloc2>& __a2,\n+\t\t\ttypename __convertible<_Alloc2>::__type = 0)\n+\t: _M_allocator(__a2._M_allocator), _M_extra(_S_extra()) { }\n+\n+      debug_allocator(const _Alloc& __a)\n+      : _M_allocator(__a), _M_extra(_S_extra()) { }\n+\n       pointer\n       allocate(size_type __n)\n       {\n@@ -105,21 +139,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       deallocate(pointer __p, size_type __n)\n       {\n+\tusing std::__throw_runtime_error;\n \tif (__p)\n \t  {\n \t    pointer __real_p = __p - _M_extra;\n \t    if (*reinterpret_cast<size_type*>(__real_p) != __n)\n-\t      {\n-\t\tthrow std::runtime_error(\"debug_allocator::deallocate\"\n-\t\t\t\t\t \" wrong size\");\n-\t      }\n+\t      __throw_runtime_error(\"debug_allocator::deallocate wrong size\");\n \t    _M_allocator.deallocate(__real_p, __n + _M_extra);\n \t  }\n \telse\n-\t  throw std::runtime_error(\"debug_allocator::deallocate null pointer\");\n+\t  __throw_runtime_error(\"debug_allocator::deallocate null pointer\");\n       }\n+\n+      void\n+      construct(pointer __p, const value_type& __val)\n+      { _Traits::construct(_M_allocator, __p, __val); }\n+\n+#if __cplusplus >= 201103L\n+      template<typename _Tp, typename... _Args>\n+\tvoid\n+\tconstruct(_Tp* __p, _Args&&... __args)\n+\t{\n+\t  _Traits::construct(_M_allocator, __p,\n+\t\t\t     std::forward<_Args>(__args)...);\n+\t}\n+#endif\n+\n+      template<typename _Tp>\n+\tvoid\n+\tdestroy(_Tp* __p)\n+\t{ _Traits::destroy(_M_allocator, __p); }\n+\n+      size_type\n+      max_size() const throw()\n+      { return _Traits::max_size(_M_allocator) - _M_extra; }\n+\n+      friend bool\n+      operator==(const debug_allocator& __lhs, const debug_allocator& __rhs)\n+      { return __lhs._M_allocator == __rhs._M_allocator; }\n     };\n \n+  template<typename _Alloc>\n+    inline bool\n+    operator!=(const debug_allocator<_Alloc>& __lhs,\n+\t       const debug_allocator<_Alloc>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "217fc323baf96e184b14d0e24c18d26231bc5d42", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/56170.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2F56170.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a83503a058f4ae36038ce80921c2cf8e54b908/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2F56170.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2F56170.cc?ref=95a83503a058f4ae36038ce80921c2cf8e54b908", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <list>\n+#include <vector>\n+#include <ext/debug_allocator.h>\n+\n+using __gnu_cxx::debug_allocator;\n+\n+template class std::list<int, debug_allocator<std::allocator<int> > >;\n+template class std::vector<int, debug_allocator<std::allocator<int> > >;"}]}