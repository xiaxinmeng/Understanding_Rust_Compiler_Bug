{"sha": "931631924b3726db31f2f723e6c7d2d0d9de084f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxNjMxOTI0YjM3MjZkYjMxZjJmNzIzZTZjN2QyZDBkOWRlMDg0Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-09-24T19:04:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-09-24T19:04:54Z"}, "message": "PR tree-optimization/91570 - ICE in get_range_strlen_dynamic on a conditional\n\nPR tree-optimization/91570 - ICE in get_range_strlen_dynamic on a conditional\nof two strings\n\ngcc/Changelog:\n\t* tree-ssa-strlen.c (get_range_strlen_dynamic): Handle null and\n\tnon-constant minlen, maxlen and maxbound.\n\ngcc/testsuite/Changelog:\n\t* gcc.dg/pr91570.c: New test.\n\nFrom-SVN: r276105", "tree": {"sha": "a8f82d6d6bd021080cbb44eda97228dd3e40e41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f82d6d6bd021080cbb44eda97228dd3e40e41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931631924b3726db31f2f723e6c7d2d0d9de084f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931631924b3726db31f2f723e6c7d2d0d9de084f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931631924b3726db31f2f723e6c7d2d0d9de084f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931631924b3726db31f2f723e6c7d2d0d9de084f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0aedc7a41c6756a30669632d3df22e05b174401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0aedc7a41c6756a30669632d3df22e05b174401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0aedc7a41c6756a30669632d3df22e05b174401"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "ab0cef72f2b24a39029c9c31ff327bf23d94719e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=931631924b3726db31f2f723e6c7d2d0d9de084f", "patch": "@@ -1,3 +1,9 @@\n+2019-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/91570\n+\t* tree-ssa-strlen.c (get_range_strlen_dynamic): Handle null and\n+\tnon-constant minlen, maxlen and maxbound.\n+\n 2019-09-24  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (_stmt_vec_info::const_cond_reduc_code):"}, {"sha": "f1f670bf0cfd05ec8236edeb637f7b36cd6ac76a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=931631924b3726db31f2f723e6c7d2d0d9de084f", "patch": "@@ -1,3 +1,8 @@\n+2019-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/91570\n+\t* gcc.dg/pr91570.c: New test.\n+\n 2019-09-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91868 - improve -Wshadow location."}, {"sha": "03f268619e972859a0032aaa208c837fbe0c219d", "filename": "gcc/testsuite/gcc.dg/pr91570.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91570.c?ref=931631924b3726db31f2f723e6c7d2d0d9de084f", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/91570 - ICE in get_range_strlen_dynamic on\n+   a conditional of two strings\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern char a[], b[];\n+\n+/* Test case from comment #0 on the bug.  */\n+\n+void comment_0 (int i)\n+{\n+  a[0] = 0;\n+  b[0] = '1';\n+\n+  const char *p = i ? b : a;\n+\n+  if (__builtin_snprintf (0, 0, \"%s\", p) < 4)\n+    __builtin_abort ();\n+}\n+\n+\n+/* Test case from comment #2 on the bug.  */\n+\n+void comment_2 (char *s)\n+{\n+  char *t = __builtin_strrchr (s, '/');\n+  __builtin_strcat (s, \".SIF\");\n+  t = t ? t : s;\n+  __builtin_printf (\"%s\", t);\n+}"}, {"sha": "c82bc7c481555bee76f5f021a6c0f7941b8f11db", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931631924b3726db31f2f723e6c7d2d0d9de084f/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=931631924b3726db31f2f723e6c7d2d0d9de084f", "patch": "@@ -896,7 +896,8 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n \n \t\t      if (!argdata.minlen\n \t\t\t  || (integer_zerop (argdata.minlen)\n-\t\t\t      && integer_all_onesp (argdata.maxbound)\n+\t\t\t      && (!argdata.maxbound\n+\t\t\t\t  || integer_all_onesp (argdata.maxbound))\n \t\t\t      && integer_all_onesp (argdata.maxlen)))\n \t\t\t{\n \t\t\t  /* Set the upper bound of the length to unbounded.  */\n@@ -910,11 +911,13 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n \t\t\t  || tree_int_cst_lt (argdata.minlen, pdata->minlen))\n \t\t\tpdata->minlen = argdata.minlen;\n \t\t      if (!pdata->maxlen\n-\t\t\t  || tree_int_cst_lt (pdata->maxlen, argdata.maxlen))\n+\t\t\t  || (argdata.maxlen\n+\t\t\t      && tree_int_cst_lt (pdata->maxlen, argdata.maxlen)))\n \t\t\tpdata->maxlen = argdata.maxlen;\n \t\t      if (!pdata->maxbound\n-\t\t\t  || (tree_int_cst_lt (pdata->maxbound,\n-\t\t\t\t\t       argdata.maxbound)\n+\t\t\t  || (argdata.maxbound\n+\t\t\t      && tree_int_cst_lt (pdata->maxbound,\n+\t\t\t\t\t\t  argdata.maxbound)\n \t\t\t      && !integer_all_onesp (argdata.maxbound)))\n \t\t\tpdata->maxbound = argdata.maxbound;\n \t\t    }\n@@ -944,8 +947,7 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n   if (strinfo *si = get_strinfo (idx))\n     {\n       pdata->minlen = get_string_length (si);\n-      if (!pdata->minlen\n-\t  && si->nonzero_chars)\n+      if (!pdata->minlen && si->nonzero_chars)\n \t{\n \t  if (TREE_CODE (si->nonzero_chars) == INTEGER_CST)\n \t    pdata->minlen = si->nonzero_chars;\n@@ -989,7 +991,7 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n \t  else\n \t    pdata->maxlen = build_all_ones_cst (size_type_node);\n \t}\n-      else if (TREE_CODE (pdata->minlen) == SSA_NAME)\n+      else if (pdata->minlen && TREE_CODE (pdata->minlen) == SSA_NAME)\n \t{\n \t  const value_range *vr\n \t    = CONST_CAST (class vr_values *, rvals)\n@@ -1007,11 +1009,19 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n \t      pdata->maxlen = build_all_ones_cst (size_type_node);\n \t    }\n \t}\n-      else\n+      else if (pdata->minlen && TREE_CODE (pdata->minlen) == INTEGER_CST)\n \t{\n \t  pdata->maxlen = pdata->minlen;\n \t  pdata->maxbound = pdata->minlen;\n \t}\n+      else\n+\t{\n+\t  /* For PDATA->MINLEN that's a non-constant expression such\n+\t     as PLUS_EXPR whose value range is unknown, set the bounds\n+\t     to zero and SIZE_MAX.  */\n+\t  pdata->minlen = build_zero_cst (size_type_node);\n+\t  pdata->maxlen = build_all_ones_cst (size_type_node);\n+\t}\n \n       return true;\n     }"}]}