{"sha": "e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "node_id": "C_kwDOANBUbNoAKGU3Y2UzMmM3ODNjOGQzOGVmOGExYWIyMjdmZDA1Y2JhYjQxZGE3NWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T10:16:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-15T10:16:50Z"}, "message": "openmp: Add support for OMP_PLACES=numa_domains\n\nThis adds support for numa_domains abstract name in OMP_PLACES, also new\nin OpenMP 5.1.\n\nWay to test this is\nOMP_PLACES=numa_domains OMP_DISPLAY_ENV=true LD_PRELOAD=.libs/libgomp.so.1 /bin/true\nand see what it prints on OMP_PLACES line.\nFor non-NUMA machines it should print a single place that covers all CPUs,\nfor NUMA machine one place for each NUMA node with corresponding CPUs.\n\n2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n\n\t* env.c (parse_places_var): Handle numa_domains as level 5.\n\t* config/linux/affinity.c (gomp_affinity_init_numa_domains): New\n\tfunction.\n\t(gomp_affinity_init_level): Use it instead of\n\tgomp_affinity_init_level_1 for level == 5.\n\t* testsuite/libgomp.c/places-5.c: New test.", "tree": {"sha": "574280be16a3a47f6e06e653f26c4f185085e7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574280be16a3a47f6e06e653f26c4f185085e7ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5809be05a2813f2a95d9787f388185fa31fbf3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5809be05a2813f2a95d9787f388185fa31fbf3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5809be05a2813f2a95d9787f388185fa31fbf3a2"}], "stats": {"total": 118, "additions": 116, "deletions": 2}, "files": [{"sha": "82981b654723666e9f9af895454b17c6e5f6dc7b", "filename": "libgomp/config/linux/affinity.c", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Fconfig%2Flinux%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Fconfig%2Flinux%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Faffinity.c?ref=e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "patch": "@@ -355,6 +355,102 @@ gomp_affinity_init_level_1 (int level, int this_level, unsigned long count,\n   free (line);\n }\n \n+static void\n+gomp_affinity_init_numa_domains (unsigned long count, cpu_set_t *copy,\n+\t\t\t\t char *name)\n+{\n+  FILE *f;\n+  char *nline = NULL, *line = NULL;\n+  size_t nlinelen = 0, linelen = 0;\n+  char *q;\n+  size_t prefix_len = sizeof (\"/sys/devices/system/node/\") - 1;\n+\n+  strcpy (name, \"/sys/devices/system/node/online\");\n+  f = fopen (name, \"r\");\n+  if (f == NULL || getline (&nline, &nlinelen, f) <= 0)\n+    {\n+      if (f)\n+\tfclose (f);\n+      return;\n+    }\n+  fclose (f);\n+  q = nline;\n+  while (*q && *q != '\\n' && gomp_places_list_len < count)\n+    {\n+      unsigned long nfirst, nlast;\n+\n+      errno = 0;\n+      nfirst = strtoul (q, &q, 10);\n+      if (errno)\n+\tbreak;\n+      nlast = nfirst;\n+      if (*q == '-')\n+\t{\n+\t  errno = 0;\n+\t  nlast = strtoul (q + 1, &q, 10);\n+\t  if (errno || nlast < nfirst)\n+\t    break;\n+\t}\n+      for (; nfirst <= nlast; nfirst++)\n+\t{\n+\t  sprintf (name + prefix_len, \"node%lu/cpulist\", nfirst);\n+\t  f = fopen (name, \"r\");\n+\t  if (f == NULL)\n+\t    continue;\n+\t  if (getline (&line, &linelen, f) > 0)\n+\t    {\n+\t      char *p = line;\n+\t      void *pl = NULL;\n+\n+\t      while (*p && *p != '\\n')\n+\t\t{\n+\t\t  unsigned long first, last;\n+\t\t  bool seen = false;\n+\n+\t\t  errno = 0;\n+\t\t  first = strtoul (p, &p, 10);\n+\t\t  if (errno)\n+\t\t    break;\n+\t\t  last = first;\n+\t\t  if (*p == '-')\n+\t\t    {\n+\t\t      errno = 0;\n+\t\t      last = strtoul (p + 1, &p, 10);\n+\t\t      if (errno || last < first)\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  for (; first <= last; first++)\n+\t\t    {\n+\t\t      if (!CPU_ISSET_S (first, gomp_cpuset_size, copy))\n+\t\t\tcontinue;\n+\t\t      if (pl == NULL)\n+\t\t\t{\n+\t\t\t  pl = gomp_places_list[gomp_places_list_len];\n+\t\t\t  gomp_affinity_init_place (pl);\n+\t\t\t}\n+\t\t      if (gomp_affinity_add_cpus (pl, first, 1, 0, true))\n+\t\t\t{\n+\t\t\t  CPU_CLR_S (first, gomp_cpuset_size, copy);\n+\t\t\t  if (!seen)\n+\t\t\t    {\n+\t\t\t      gomp_places_list_len++;\n+\t\t\t      seen = true;\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n+\t\t  if (*p == ',')\n+\t\t    ++p;\n+\t\t}\n+\t    }\n+\t  fclose (f);\n+\t}\n+      if (*q == ',')\n+\t++q;\n+    }\n+  free (line);\n+  free (nline);\n+}\n+\n bool\n gomp_affinity_init_level (int level, unsigned long count, bool quiet)\n {\n@@ -377,8 +473,11 @@ gomp_affinity_init_level (int level, unsigned long count, bool quiet)\n   copy = gomp_alloca (gomp_cpuset_size);\n   strcpy (name, \"/sys/devices/system/cpu/cpu\");\n   memcpy (copy, gomp_cpusetp, gomp_cpuset_size);\n-  gomp_affinity_init_level_1 (level, level > 3 ? level : 3, count, copy, name,\n-\t\t\t      quiet);\n+  if (level == 5)\n+    gomp_affinity_init_numa_domains (count, copy, name);\n+  else\n+    gomp_affinity_init_level_1 (level, level > 3 ? level : 3, count, copy,\n+\t\t\t\tname, quiet);\n   if (gomp_places_list_len == 0)\n     {\n       if (!quiet)"}, {"sha": "7eb895f6b6948dd2db53ebbf969e4d17233c98e7", "filename": "libgomp/env.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "patch": "@@ -701,6 +701,11 @@ parse_places_var (const char *name, bool ignore)\n       env += 9;\n       level = 4;\n     }\n+  else if (strncasecmp (env, \"numa_domains\", 12) == 0)\n+    {\n+      env += 12;\n+      level = 5;\n+    }\n   if (level)\n     {\n       count = ULONG_MAX;"}, {"sha": "5f1e595433b7a8e63f47165d74d72c173308f785", "filename": "libgomp/testsuite/libgomp.c/places-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ce32c783c8d38ef8a1ab227fd05cbab41da75b/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fplaces-5.c?ref=e7ce32c783c8d38ef8a1ab227fd05cbab41da75b", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-set-target-env-var OMP_PLACES \"numa_domains\" } */\n+\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  omp_display_env (0);\n+  return 0;\n+}"}]}