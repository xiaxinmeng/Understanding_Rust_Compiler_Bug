{"sha": "6dc93b16c6f32fab8452601f262bf57db253ef65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjOTNiMTZjNmYzMmZhYjg0NTI2MDFmMjYyYmY1N2RiMjUzZWY2NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-01-13T15:37:37Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-01-13T15:37:37Z"}, "message": "re PR tree-optimization/42703 (ICE in generate_subtree_copies with out of bounds array access)\n\n2010-01-13  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/42703\n\t* tree-sra.c (analyze_access_subtree): Check that we can build a\n\treference to the original data within the aggregate.\n\n\t* testsuite/gcc.c-torture/compile/pr42703.c: New test.\n\nFrom-SVN: r155863", "tree": {"sha": "1f033dfe8941e8c89c0ac78c93049266d6af94af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f033dfe8941e8c89c0ac78c93049266d6af94af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc93b16c6f32fab8452601f262bf57db253ef65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc93b16c6f32fab8452601f262bf57db253ef65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc93b16c6f32fab8452601f262bf57db253ef65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc93b16c6f32fab8452601f262bf57db253ef65/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d21a8e566372a8b6344351f5cef1faa4d468250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d21a8e566372a8b6344351f5cef1faa4d468250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d21a8e566372a8b6344351f5cef1faa4d468250"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "b8a4ec0008c04f905c4c37001998d4bc6cd8595d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dc93b16c6f32fab8452601f262bf57db253ef65", "patch": "@@ -1,3 +1,9 @@\n+2010-01-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42703\n+\t* tree-sra.c (analyze_access_subtree): Check that we can build a\n+\treference to the original data within the aggregate.\n+\n 2010-01-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42705"}, {"sha": "148ba87203dffd64f07384f989e51788c9ca7b10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dc93b16c6f32fab8452601f262bf57db253ef65", "patch": "@@ -1,3 +1,8 @@\n+2010-01-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/42703\n+\t* testsuite/gcc.c-torture/compile/pr42703.c: New test.\n+\n 2010-01-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42705"}, {"sha": "4805b17b069f3b2bce5644140ac28d10fc8a9091", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42703.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42703.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42703.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42703.c?ref=6dc93b16c6f32fab8452601f262bf57db253ef65", "patch": "@@ -0,0 +1,12 @@\n+__extension__ typedef unsigned long long int uint64_t;\n+typedef uint64_t ScmUInt64;\n+void swapb64(ScmUInt64 *loc) \n+{\n+    union {\n+        ScmUInt64 l;\n+        unsigned char c[4];\n+    } dd;\n+    unsigned char t;\n+    dd.l = *loc;\n+    (t = dd.c[3], dd.c[3] = dd.c[4], dd.c[4] = t);\n+}"}, {"sha": "38b3cf507e06ebab5d458b88f2c0c96ef75d58aa", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc93b16c6f32fab8452601f262bf57db253ef65/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=6dc93b16c6f32fab8452601f262bf57db253ef65", "patch": "@@ -1659,7 +1659,13 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n \n   if (allow_replacements && scalar && !root->first_child\n       && (root->grp_hint\n-\t  || (direct_read && root->grp_write)))\n+\t  || (direct_read && root->grp_write))\n+      /* We must not ICE later on when trying to build an access to the\n+\t original data within the aggregate even when it is impossible to do in\n+\t a defined way like in the PR 42703 testcase.  Therefore we check\n+\t pre-emptively here that we will be able to do that.  */\n+      && build_ref_for_offset (NULL, TREE_TYPE (root->base), root->offset,\n+\t\t\t       root->type, false))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}]}