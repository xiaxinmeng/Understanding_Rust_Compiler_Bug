{"sha": "872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcyY2MyZDNjOWVjMDU2N2E2YWQ0M2M4ZTBmYWEyMDBmZWRjNjM2Nw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-07-12T14:29:50Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-12T14:29:50Z"}, "message": "inclhack.def (solaris_cond_init): New fix.\n\n\t* inclhack.def (solaris_cond_init): New fix.\n\t* fixincl.x: Regenerate.\n\t* tests/base/pthread.h [SOLARIS_COND_INIT_CHECK]: New test.\n\t[SOLARIS_MUTEX_INIT_2_CHECK]: Adapt.\n\nFrom-SVN: r162080", "tree": {"sha": "722bbe688b0ca9ee8e6404f78dd7615d339f5386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722bbe688b0ca9ee8e6404f78dd7615d339f5386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb2f8cf836d3489f713c0c1416f7f095e37cf39c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2f8cf836d3489f713c0c1416f7f095e37cf39c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2f8cf836d3489f713c0c1416f7f095e37cf39c"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "942df122fc4dd156ceae82691426fd7b444c4f4a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "patch": "@@ -1,3 +1,10 @@\n+2010-07-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (solaris_cond_init): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/pthread.h [SOLARIS_COND_INIT_CHECK]: New test.\n+\t[SOLARIS_MUTEX_INIT_2_CHECK]: Adapt.\n+\n 2010-06-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* inclhack.def (solaris__restrict, solaris_complex_cxx): New fixes"}, {"sha": "f1552cc17419c383ecd8a10aba818ac956d17ed9", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday May  7, 2010 at 02:41:29 PM MEST\n+ * It has been AutoGen-ed  Sunday June 27, 2010 at 12:52:26 PM MEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Fri May  7 14:41:29 MEST 2010\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Jun 27 12:52:26 MEST 2010\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 207 fixup descriptions.\n+ * This file contains 208 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -6227,6 +6227,44 @@ extern \\\"C\\\" {\\\\\\n\\\n #endif\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Cond_Init fix\n+ */\n+tSCC zSolaris_Cond_InitName[] =\n+     \"solaris_cond_init\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Cond_InitList[] =\n+  \"pthread.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Cond_InitMachs[] = {\n+        \"*-*-solaris2.8\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Cond_InitSelect0[] =\n+       \"@\\\\(#\\\\)pthread.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_COND_INIT_TEST_CT  1\n+static tTestDesc aSolaris_Cond_InitTests[] = {\n+  { TT_EGREP,    zSolaris_Cond_InitSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Cond_Init\n+ */\n+static const char* apzSolaris_Cond_InitPatch[] = {\n+    \"format\",\n+    \"%1, 0x4356%2\",\n+    \"^(#define[ \\t]+PTHREAD_COND_INITIALIZER[ \\t]+\\\\{.*0)(\\\\},[ \\t]*0\\\\}.*)$\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Math_1 fix\n@@ -8432,9 +8470,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          246\n+#define REGEX_COUNT          247\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            207\n+#define FIX_COUNT            208\n \n /*\n  *  Enumerate the fixes\n@@ -8593,6 +8631,7 @@ typedef enum {\n     SOLARIS___RESTRICT_FIXIDX,\n     SOLARIS_COMPLEX_FIXIDX,\n     SOLARIS_COMPLEX_CXX_FIXIDX,\n+    SOLARIS_COND_INIT_FIXIDX,\n     SOLARIS_MATH_1_FIXIDX,\n     SOLARIS_MATH_2_FIXIDX,\n     SOLARIS_MATH_3_FIXIDX,\n@@ -9415,6 +9454,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_COMPLEX_CXX_TEST_CT, FD_MACH_ONLY,\n      aSolaris_Complex_CxxTests,   apzSolaris_Complex_CxxPatch, 0 },\n \n+  {  zSolaris_Cond_InitName,    zSolaris_Cond_InitList,\n+     apzSolaris_Cond_InitMachs,\n+     SOLARIS_COND_INIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Cond_InitTests,   apzSolaris_Cond_InitPatch, 0 },\n+\n   {  zSolaris_Math_1Name,    zSolaris_Math_1List,\n      apzSolaris_Math_1Machs,\n      SOLARIS_MATH_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "362dc7054c9ee72ce66ce3431e543f8c6163bd8a", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "patch": "@@ -3306,6 +3306,26 @@ fix = {\n };\n \n \n+/*\n+ * Solaris 8 PTHREAD_COND_INITIALIZER lacks the __pthread_cond_magic field.\n+ * COND_MAGIC is only defined in <synch.h> and pollutes the namespace, so\n+ * use the value literally instead.\n+ */\n+fix = {\n+    hackname = solaris_cond_init;\n+    select = '@\\(#\\)pthread.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files = pthread.h;\n+    mach = '*-*-solaris2.8';\n+    c_fix = format;\n+    c_fix_arg = \"%1, 0x4356%2\";\n+    c_fix_arg = \"^(#define[ \\t]+PTHREAD_COND_INITIALIZER[ \\t]+\"\n+                \"\\\\{.*0)(\\\\},[ \\t]*0\\\\}.*)$\";\n+    test_text =\n+    '#pragma ident\t\"@(#)pthread.h\t1.29\t01/07/07 SMI\"'\"\\n\"\n+    '#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0}, 0}\t/* = DEFAULTCV */';\n+};\n+\n+\n /*\n  * Sun Solaris 10 defines several C99 math macros in terms of\n  * builtins specific to the Studio compiler, in particular not"}, {"sha": "f08aee40bb6646cf767724e9ae72a213ea597ffe", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/872cc2d3c9ec0567a6ad43c8e0faa200fedc6367/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=872cc2d3c9ec0567a6ad43c8e0faa200fedc6367", "patch": "@@ -101,6 +101,16 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #endif  /* PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK */\n \n \n+#if defined( SOLARIS_COND_INIT_CHECK )\n+#pragma ident\t\"@(#)pthread.h\t1.29\t01/07/07 SMI\"\n+#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n+#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, 0}\t/* = DEFAULTCV */\n+#else\n+#define\tPTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, {0}}\t/* = DEFAULTCV */\n+#endif\n+#endif  /* SOLARIS_COND_INIT_CHECK */\n+\n+\n #if defined( SOLARIS_MUTEX_INIT_2_CHECK )\n #ident \"@(#)pthread.h  1.26  98/04/12 SMI\"\n #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n@@ -109,9 +119,9 @@ extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #define PTHREAD_MUTEX_INITIALIZER\t{{{0},0}, {{{0}}}, {0}}\n #endif\n #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n-#define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, 0}\t/* DEFAULTCV */\n+#define PTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, 0}\t/* DEFAULTCV */\n #else\n-#define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, {0}}\t/* DEFAULTCV */\n+#define PTHREAD_COND_INITIALIZER\t{{{0}, 0, 0x4356}, {0}}\t/* DEFAULTCV */\n #endif\n #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n #define\tPTHREAD_MUTEX_INITIALIZER\t\t/* = DEFAULTMUTEX */\t\\"}]}