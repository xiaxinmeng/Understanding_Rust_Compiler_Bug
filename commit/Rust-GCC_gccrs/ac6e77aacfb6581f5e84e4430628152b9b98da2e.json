{"sha": "ac6e77aacfb6581f5e84e4430628152b9b98da2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2ZTc3YWFjZmI2NTgxZjVlODRlNDQzMDYyODE1MmI5Yjk4ZGEyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-01T19:33:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T19:33:30Z"}, "message": "libcpp: __VA_OPT__ tweak\n\n> We want to remove the latter <placemarker> but not the former one, and\n> the patch adds the vaopt_padding_tokens counter for it to control\n> how many placemarkers are removed on vaopt_state::END.\n> As can be seen in #c1 and #c2 of the PR, I've tried various approaches,\n> but neither worked out for all the cases except the posted one.\n\nI notice that the second placemarker you mention is avoid_paste, which seems\nrelevant.  This seems to also work, at least it doesn't seem to break any of\nthe va_opt tests.\n\n2021-09-01  Jason Merrill  <jason@redhat.com>\n\n\t* macro.c (replace_args): When __VA_OPT__ is on the LHS of ##,\n\tremove trailing avoid_paste tokens.", "tree": {"sha": "860c5cb23c00a1c5fe42194176931811d9f698e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/860c5cb23c00a1c5fe42194176931811d9f698e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6e77aacfb6581f5e84e4430628152b9b98da2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6e77aacfb6581f5e84e4430628152b9b98da2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6e77aacfb6581f5e84e4430628152b9b98da2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6e77aacfb6581f5e84e4430628152b9b98da2e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e928cf47f350e46eacb48ed954112e603ef3800a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e928cf47f350e46eacb48ed954112e603ef3800a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e928cf47f350e46eacb48ed954112e603ef3800a"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "f214548de1e1c76d83896d800225589564c07299", "filename": "libcpp/macro.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6e77aacfb6581f5e84e4430628152b9b98da2e/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6e77aacfb6581f5e84e4430628152b9b98da2e/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=ac6e77aacfb6581f5e84e4430628152b9b98da2e", "patch": "@@ -2026,7 +2026,6 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n   i = 0;\n   vaopt_state vaopt_tracker (pfile, macro->variadic, &args[macro->paramc - 1]);\n   const cpp_token **vaopt_start = NULL;\n-  unsigned vaopt_padding_tokens = 0;\n   for (src = macro->exp.tokens; src < limit; src++)\n     {\n       unsigned int arg_tokens_count;\n@@ -2059,16 +2058,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t      const cpp_token **start = vaopt_start;\n \t      vaopt_start = NULL;\n \n-\t      /* Remove any tail padding from inside the __VA_OPT__.  */\n \t      paste_flag = tokens_buff_last_token_ptr (buff);\n-\t      while (vaopt_padding_tokens--\n-\t\t     && paste_flag\n-\t\t     && paste_flag != start\n-\t\t     && (*paste_flag)->type == CPP_PADDING)\n-\t\t{\n-\t\t  tokens_buff_remove_last_token (buff);\n-\t\t  paste_flag = tokens_buff_last_token_ptr (buff);\n-\t\t}\n \n \t      if (vaopt_tracker.stringify ())\n \t\t{\n@@ -2089,6 +2079,14 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t}\n \t      else if (src->flags & PASTE_LEFT)\n \t\t{\n+\t\t  /* Don't avoid paste after all.  */\n+\t\t  while (paste_flag && paste_flag != start\n+\t\t\t && *paste_flag == &pfile->avoid_paste)\n+\t\t    {\n+\t\t      tokens_buff_remove_last_token (buff);\n+\t\t      paste_flag = tokens_buff_last_token_ptr (buff);\n+\t\t    }\n+\n \t\t  /* With a non-empty __VA_OPT__ on the LHS of ##, the last\n \t\t     token should be flagged PASTE_LEFT.  */\n \t\t  if (paste_flag && (*paste_flag)->type != CPP_PADDING)\n@@ -2107,7 +2105,6 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t  continue;\n \t}\n \n-      vaopt_padding_tokens = 0;\n       if (src->type != CPP_MACRO_ARG)\n \t{\n \t  /* Allocate a virtual location for token SRC, and add that\n@@ -2263,10 +2260,6 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \n \t      index = expanded_token_index (pfile, macro, src, token_index);\n \t      const cpp_token *tok = macro_arg_token_iter_get_token (&from);\n-\t      if (tok->type == CPP_PADDING)\n-\t\tvaopt_padding_tokens++;\n-\t      else\n-\t\tvaopt_padding_tokens = 0;\n \t      tokens_buff_add_token (buff, virt_locs, tok,\n \t\t\t\t     macro_arg_token_iter_get_location (&from),\n \t\t\t\t     src->src_loc, map, index);\n@@ -2313,7 +2306,6 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t  tokens_buff_add_token (buff, virt_locs,\n \t\t\t\t t, t->src_loc, t->src_loc,\n \t\t\t\t NULL, 0);\n-\t  vaopt_padding_tokens++;\n \t}\n \n       /* Add a new paste flag, or remove an unwanted one.  */"}]}