{"sha": "bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxZWM3ZjcwZWMwOTFmYzk2ZmZjODQ2MDE3MmEwMDViNjFhZmIyYg==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-02-05T19:45:02Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-02-05T19:45:02Z"}, "message": "Scrollbar.java (next_scrollbar_number): New field.\n\n2004-02-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* java/awt/Scrollbar.java (next_scrollbar_number): New field.\n\t(Scrollbar (int, int, int, int, int)): Make default page\n\tincrement 10.\n\t(setValues): Only call peer.setValues if one of the values has\n\tchanged.\n\t(generateName): New method.\n\t(getUniqueLong): New method.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c\n\t(range_scrollbar): Remove structure.\n\t(post_adjustment_event): Remove function.\n\t(post_change_event): Accept jobject argument.\n\t(create): Cast jints to gdoubles.  Round scrollbar values to the\n\tnearest integer.  Clamp min, max and value settings.\n\t(connectJObject): Connect hook to widget->window.\n\t(connectSignals): Remove range_scrollbar structure variables.\n\tRemove \"move-slider\" connection.  Pass global peer reference to\n\t\"value-changed\" callback.\n\t(setLineIncrement): Cast jint value to gdouble.\n\t(setPageIncrement): Likewise.\n\t(setValues): Likewise.  Clamp min, max and value settings.\n\nFrom-SVN: r77332", "tree": {"sha": "295071a60052fcc7419762c498ef7483341c83ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/295071a60052fcc7419762c498ef7483341c83ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/comments", "author": null, "committer": null, "parents": [{"sha": "6039a93dd7214d5f1effdd2c165dc4e52b950139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6039a93dd7214d5f1effdd2c165dc4e52b950139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6039a93dd7214d5f1effdd2c165dc4e52b950139"}], "stats": {"total": 209, "additions": 101, "deletions": 108}, "files": [{"sha": "22fbd8283876f63d7593928db06fd0362bc8149a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "patch": "@@ -1,3 +1,26 @@\n+2004-02-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* java/awt/Scrollbar.java (next_scrollbar_number): New field.\n+\t(Scrollbar (int, int, int, int, int)): Make default page\n+\tincrement 10.\n+\t(setValues): Only call peer.setValues if one of the values has\n+\tchanged.\n+\t(generateName): New method.\n+\t(getUniqueLong): New method.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c\n+\t(range_scrollbar): Remove structure.\n+\t(post_adjustment_event): Remove function.\n+\t(post_change_event): Accept jobject argument.\n+\t(create): Cast jints to gdoubles.  Round scrollbar values to the\n+\tnearest integer.  Clamp min, max and value settings.\n+\t(connectJObject): Connect hook to widget->window.\n+\t(connectSignals): Remove range_scrollbar structure variables.\n+\tRemove \"move-slider\" connection.  Pass global peer reference to\n+\t\"value-changed\" callback.\n+\t(setLineIncrement): Cast jint value to gdouble.\n+\t(setPageIncrement): Likewise.\n+\t(setValues): Likewise.  Clamp min, max and value settings.\n+\n 2004-02-05  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/AbstractCellEditor.java"}, {"sha": "a01dc3ccdc8a1fe742fdf41ea5c51c95ae203fda", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "patch": "@@ -120,6 +120,11 @@ public class Scrollbar extends Component implements Accessible,\n \n private transient boolean valueIsAdjusting = false;\n \n+  /*\n+   * The number used to generate the name returned by getName.\n+   */\n+  private static transient long next_scrollbar_number = 0;\n+\n /*************************************************************************/\n \n /*\n@@ -194,9 +199,8 @@ public class Scrollbar extends Component implements Accessible,\n   // Default is 1 according to online docs.\n   lineIncrement = 1;\n \n-  pageIncrement = (maximum - minimum) / 5;\n-  if (pageIncrement == 0)\n-    pageIncrement = 1;\n+  // Default is 10 according to javadocs.\n+  pageIncrement = 10;\n }\n \n /*************************************************************************/\n@@ -394,15 +398,17 @@ public class Scrollbar extends Component implements Accessible,\n   if (visibleAmount > maximum - minimum)\n     visibleAmount = maximum - minimum;\n \n+  ScrollbarPeer peer = (ScrollbarPeer) getPeer ();\n+  if (peer != null\n+      && (this.value != value || this.visibleAmount != visibleAmount\n+          || this.minimum != minimum || this.maximum != maximum))\n+    peer.setValues(value, visibleAmount, minimum, maximum);\n+\n   this.value = value;\n   this.visibleAmount = visibleAmount;\n   this.minimum = minimum;\n   this.maximum = maximum;\n \n-  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n-  if (sp != null)\n-    sp.setValues(value, visibleAmount, minimum, maximum);\n-\n   int range = maximum - minimum;\n   if (lineIncrement > range)\n     {\n@@ -411,8 +417,8 @@ public class Scrollbar extends Component implements Accessible,\n       else\n         lineIncrement = range;\n \n-      if (sp != null)\n-        sp.setLineIncrement(lineIncrement);\n+      if (peer != null)\n+        peer.setLineIncrement(lineIncrement);\n     }\n \n   if (pageIncrement > range)\n@@ -422,8 +428,8 @@ public class Scrollbar extends Component implements Accessible,\n       else\n         pageIncrement = range;\n \n-      if (sp != null)\n-        sp.setPageIncrement(pageIncrement);\n+      if (peer != null)\n+        peer.setPageIncrement(pageIncrement);\n     }\n }\n \n@@ -503,9 +509,9 @@ public class Scrollbar extends Component implements Accessible,\n \n   this.lineIncrement = lineIncrement;\n \n-  ScrollbarPeer sp = (ScrollbarPeer) getPeer ();\n-  if (sp != null)\n-    sp.setLineIncrement (this.lineIncrement);\n+  ScrollbarPeer peer = (ScrollbarPeer) getPeer ();\n+  if (peer != null)\n+    peer.setLineIncrement (this.lineIncrement);\n }\n \n /*************************************************************************/\n@@ -584,9 +590,9 @@ public class Scrollbar extends Component implements Accessible,\n \n   this.pageIncrement = pageIncrement;\n \n-  ScrollbarPeer sp = (ScrollbarPeer) getPeer ();\n-  if (sp != null)\n-    sp.setPageIncrement (this.pageIncrement);\n+  ScrollbarPeer peer = (ScrollbarPeer) getPeer ();\n+  if (peer != null)\n+    peer.setPageIncrement (this.pageIncrement);\n }\n \n /*************************************************************************/\n@@ -746,5 +752,20 @@ public void setValueIsAdjusting (boolean valueIsAdjusting)\n   {\n     this.valueIsAdjusting = valueIsAdjusting;\n   }\n+\n+  /**\n+   * Generate a unique name for this scroll bar.\n+   *\n+   * @return A unique name for this scroll bar.\n+   */\n+  String generateName ()\n+  {\n+    return \"scrollbar\" + getUniqueLong ();\n+  }\n+\n+  private static synchronized long getUniqueLong ()\n+  {\n+    return next_scrollbar_number++;\n+  }\n } // class Scrollbar \n "}, {"sha": "c916b3fe128b9bd8f453c2aea7ada8ea64205f92", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "status": "modified", "additions": 40, "deletions": 91, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1ec7f70ec091fc96ffc8460172a005b61afb2b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c?ref=bc1ec7f70ec091fc96ffc8460172a005b61afb2b", "patch": "@@ -40,89 +40,41 @@ exception statement from your version. */\n #include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkScrollbarPeer.h\"\n \n-struct range_scrollbar\n-{\n-  GtkRange *range;\n-  jobject *scrollbar;\n-};\n-\n-static void \n-post_change_event (GtkRange *range,\n-\t\t   struct range_scrollbar *rs)\n-{\n-  GtkAdjustment *adj;\n-  adj = gtk_range_get_adjustment (range);\n-  (*gdk_env)->CallVoidMethod (gdk_env, *(rs->scrollbar), postAdjustmentEventID,\n-\t\t\t      AWT_ADJUSTMENT_TRACK, (jint) adj->value);\n-  \n-}\n-\n-static void \n-post_adjustment_event (GtkRange *range, GtkScrollType scroll, \n-\t\t       struct range_scrollbar *rs)\n-{\n-  jint type;\n-  GtkAdjustment *adj;\n-\n-  adj = gtk_range_get_adjustment (range);\n-\n-  switch (scroll)\n-    {\n-    case GTK_SCROLL_STEP_UP:\n-    case GTK_SCROLL_STEP_RIGHT:\n-    case GTK_SCROLL_STEP_FORWARD:\n-      type = AWT_ADJUSTMENT_UNIT_INCREMENT;\n-      break;\n-    case GTK_SCROLL_STEP_DOWN:\n-    case GTK_SCROLL_STEP_LEFT:\n-    case GTK_SCROLL_STEP_BACKWARD:\n-      type = AWT_ADJUSTMENT_UNIT_DECREMENT;\n-      break;\n-    case GTK_SCROLL_PAGE_UP:\n-    case GTK_SCROLL_PAGE_RIGHT:\n-    case GTK_SCROLL_PAGE_FORWARD:\n-      type = AWT_ADJUSTMENT_BLOCK_INCREMENT;\n-      break;\n-    case GTK_SCROLL_PAGE_DOWN:\n-    case GTK_SCROLL_PAGE_LEFT:\n-    case GTK_SCROLL_PAGE_BACKWARD:\n-      type = AWT_ADJUSTMENT_BLOCK_DECREMENT;\n-      break;\n-    case GTK_SCROLL_JUMP:\n-    case GTK_SCROLL_NONE:  /* Apparently generated when slider is dragged. */\n-      type = AWT_ADJUSTMENT_TRACK;\n-      break;\n-    default: /* Can this happen?  If so, is this right? */\n-      return;\n-    }\n-  \n-  (*gdk_env)->CallVoidMethod (gdk_env, *(rs->scrollbar), postAdjustmentEventID,\n-\t\t\t      type, (jint) adj->value);\n-}\n+static void post_change_event (GtkRange *range, jobject peer);\n \n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create\n (JNIEnv *env, jobject obj, jint orientation, jint value, \n  jint min, jint max, jint step_incr, jint page_incr, jint visible_amount)\n {\n-  GtkWidget *sb;\n+  GtkWidget *scrollbar;\n   GtkObject *adj;\n \n   /* Create global reference and save it for future use */\n   NSA_SET_GLOBAL_REF (env, obj);\n \n   gdk_threads_enter ();\n   \n-  adj = gtk_adjustment_new (value, min, max, \n-\t\t\t    step_incr, page_incr, \n-\t\t\t    visible_amount);\n-\n-  sb = (orientation) ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj)) :\n+  adj = gtk_adjustment_new ((gdouble) value,\n+                            (gdouble) min,\n+                            (gdouble) max,\n+\t\t\t    (gdouble) step_incr,\n+                            (gdouble) page_incr,\n+\t\t\t    (gdouble) visible_amount);\n+\n+  scrollbar = (orientation) ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj)) :\n                        gtk_hscrollbar_new (GTK_ADJUSTMENT (adj));\n \n+  GTK_RANGE (scrollbar)->round_digits = 0;\n+  /* These calls seem redundant but they are not.  They clamp values\n+     so that the slider's entirety is always between the two\n+     steppers. */\n+  gtk_range_set_range (GTK_RANGE (scrollbar), (gdouble) min, (gdouble) max);\n+  gtk_range_set_value (GTK_RANGE (scrollbar), (gdouble) value);\n+\n   gdk_threads_leave ();\n \n-  NSA_SET_PTR (env, obj, sb);\n+  NSA_SET_PTR (env, obj, scrollbar);\n }\n \n JNIEXPORT void JNICALL\n@@ -137,7 +89,7 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectJObject\n \n   gtk_widget_realize (GTK_WIDGET (ptr));\n \n-  connect_awt_hook (env, obj, 1, GTK_SCROLLBAR (ptr)->range);\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n \n   gdk_threads_leave ();\n }\n@@ -146,27 +98,14 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  struct range_scrollbar *rs;\n   void *ptr = NSA_GET_PTR (env, obj);\n   jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n   g_assert (gref);\n \n-  rs = (struct range_scrollbar *) malloc (sizeof (struct range_scrollbar));\n-\n   gdk_threads_enter ();\n \n-  gtk_widget_realize (GTK_WIDGET (ptr));\n-\n-  rs->range = GTK_RANGE (ptr);\n-  rs->scrollbar = gref;\n-\n-  g_signal_connect (G_OBJECT (GTK_RANGE (ptr)), \n-\t\t      \"move-slider\", \n-\t\t      GTK_SIGNAL_FUNC (post_adjustment_event), rs);\n-\n-  g_signal_connect (G_OBJECT (GTK_RANGE (ptr)), \n-\t\t      \"value-changed\", \n-\t\t      GTK_SIGNAL_FUNC (post_change_event), rs);\n+  g_signal_connect (G_OBJECT (ptr), \"value-changed\",\n+                    G_CALLBACK (post_change_event), *gref);\n \n   gdk_threads_leave ();\n \n@@ -186,8 +125,8 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setLineIncrement\n \n   gdk_threads_enter ();\n \n-  adj = GTK_RANGE (ptr)->adjustment;\n-  adj->step_increment = amount;\n+  adj = gtk_range_get_adjustment (GTK_RANGE (ptr));\n+  adj->step_increment = (gdouble) amount;\n   gtk_adjustment_changed (adj);\n \n   gdk_threads_leave ();\n@@ -204,8 +143,8 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setPageIncrement\n \n   gdk_threads_enter ();\n \n-  adj = GTK_RANGE (ptr)->adjustment;\n-  adj->page_increment = amount;\n+  adj = gtk_range_get_adjustment (GTK_RANGE (ptr));\n+  adj->page_increment = (gdouble) amount;\n   gtk_adjustment_changed (adj);\n \n   gdk_threads_leave ();\n@@ -222,12 +161,22 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setValues\n \n   gdk_threads_enter ();\n \n-  adj = GTK_RANGE (ptr)->adjustment;\n-  adj->value = value;\n-  adj->page_size = visible;\n-  adj->lower = min;\n-  adj->upper = max;\n+  adj = gtk_range_get_adjustment (GTK_RANGE (ptr));\n+  adj->page_size = (gdouble) visible;\n+\n+  gtk_range_set_range (GTK_RANGE (ptr), (gdouble) min, (gdouble) max);\n+  gtk_range_set_value (GTK_RANGE (ptr), (gdouble) value);\n+\n   gtk_adjustment_changed (adj);\n \n   gdk_threads_leave ();\n }\n+\n+static void\n+post_change_event (GtkRange *range, jobject peer)\n+{\n+  GtkAdjustment *adj;\n+  adj = gtk_range_get_adjustment (range);\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer, postAdjustmentEventID,\n+                              AWT_ADJUSTMENT_TRACK, (jint) adj->value);\n+}"}]}