{"sha": "1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxMTExOWY0NzUyYzZmMWE5NzE1NmQzYTI0ZWE3ZGZmN2MwY2IwMg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-04-20T15:57:01Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-04-20T15:57:01Z"}, "message": "re PR tree-optimization/69489 (missed vectorization for boolean loop, missed if-conversion)\n\n\tPR tree-optimization/69489\n\t* tree-if-conv.c (phi_convertible_by_degenerating_args): New.\n\t(if_convertible_phi_p): Call phi_convertible_by_degenerating_args.\n\tRevise dump message.\n\t(if_convertible_bb_p): Remove check on edge count of basic block's\n\tpredecessors.\n\n\tgcc/testsuite/ChangeLog\n\tPR tree-optimization/69489\n\t* gcc.dg/tree-ssa/ifc-pr69489-2.c: New test.\n\nFrom-SVN: r235292", "tree": {"sha": "7b075215f21e6c36021bf238f66fc504b4709773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b075215f21e6c36021bf238f66fc504b4709773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/comments", "author": null, "committer": null, "parents": [{"sha": "4986f823a2d1de841c0e77f8e98d9832d74d8d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4986f823a2d1de841c0e77f8e98d9832d74d8d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4986f823a2d1de841c0e77f8e98d9832d74d8d0a"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "55d9708336bf72683487f047915ab60291959e73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "patch": "@@ -1,3 +1,12 @@\n+2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69489\n+\t* tree-if-conv.c (phi_convertible_by_degenerating_args): New.\n+\t(if_convertible_phi_p): Call phi_convertible_by_degenerating_args.\n+\tRevise dump message.\n+\t(if_convertible_bb_p): Remove check on edge count of basic block's\n+\tpredecessors.\n+\n 2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/56625"}, {"sha": "57f5bb4a8e39a60a57a60e11a8b00ec1a86b3171", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "patch": "@@ -1,3 +1,8 @@\n+2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69489\n+\t* gcc.dg/tree-ssa/ifc-pr69489-2.c: New test.\n+\n 2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n \n \tPR c++/69363"}, {"sha": "6661f1a6c1bdc6325a6685cf5ac3626e36e7408a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr69489-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c?ref=1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-S -O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+\n+double\n+foo (const char *u, const char *v, long n)\n+{\n+  long i, n1 = 0, n2 = 0;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      n2 += (u[i] && !v[i]);\n+      n1 += (!u[i] && v[i]);\n+    }\n+  return (2.0 * n2 * n1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */"}, {"sha": "04a1d3e536db27591c09f7e3d785358e5bd5895c", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011119f4752c6f1a97156d3a24ea7dff7c0cb02/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=1011119f4752c6f1a97156d3a24ea7dff7c0cb02", "patch": "@@ -575,6 +575,65 @@ bb_with_exit_edge_p (struct loop *loop, basic_block bb)\n   return false;\n }\n \n+/* Given PHI which has more than two arguments, this function checks if\n+   it's if-convertible by degenerating its arguments.  Specifically, if\n+   below two conditions are satisfied:\n+\n+     1) Number of PHI arguments with different values equals to 2 and one\n+\targument has the only occurrence.\n+     2) The edge corresponding to the unique argument isn't critical edge.\n+\n+   Such PHI can be handled as PHIs have only two arguments.  For example,\n+   below PHI:\n+\n+     res = PHI <A_1(e1), A_1(e2), A_2(e3)>;\n+\n+   can be transformed into:\n+\n+     res = (predicate of e3) ? A_2 : A_1;\n+\n+   Return TRUE if it is the case, FALSE otherwise.  */\n+\n+static bool\n+phi_convertible_by_degenerating_args (gphi *phi)\n+{\n+  edge e;\n+  tree arg, t1 = NULL, t2 = NULL;\n+  unsigned int i, i1 = 0, i2 = 0, n1 = 0, n2 = 0;\n+  unsigned int num_args = gimple_phi_num_args (phi);\n+\n+  gcc_assert (num_args > 2);\n+\n+  for (i = 0; i < num_args; i++)\n+    {\n+      arg = gimple_phi_arg_def (phi, i);\n+      if (t1 == NULL || operand_equal_p (t1, arg, 0))\n+\t{\n+\t  n1++;\n+\t  i1 = i;\n+\t  t1 = arg;\n+\t}\n+      else if (t2 == NULL || operand_equal_p (t2, arg, 0))\n+\t{\n+\t  n2++;\n+\t  i2 = i;\n+\t  t2 = arg;\n+\t}\n+      else\n+\treturn false;\n+    }\n+\n+  if (n1 != 1 && n2 != 1)\n+    return false;\n+\n+  /* Check if the edge corresponding to the unique arg is critical.  */\n+  e = gimple_phi_arg_edge (phi, (n1 == 1) ? i1 : i2);\n+  if (EDGE_COUNT (e->src->succs) > 1)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Return true when PHI is if-convertible.  PHI is part of loop LOOP\n    and it belongs to basic block BB.\n \n@@ -601,10 +660,11 @@ if_convertible_phi_p (struct loop *loop, basic_block bb, gphi *phi,\n   if (bb != loop->header)\n     {\n       if (gimple_phi_num_args (phi) != 2\n-\t  && !aggressive_if_conv)\n+\t  && !aggressive_if_conv\n+\t  && !phi_convertible_by_degenerating_args (phi))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"More than two phi node args.\\n\");\n+\t    fprintf (dump_file, \"Phi can't be predicated by single cond.\\n\");\n \t  return false;\n         }\n     }\n@@ -1003,10 +1063,6 @@ if_convertible_bb_p (struct loop *loop, basic_block bb, basic_block exit_bb)\n   if (EDGE_COUNT (bb->succs) > 2)\n     return false;\n \n-  if (EDGE_COUNT (bb->preds) > 2\n-      && !aggressive_if_conv)\n-    return false;\n-\n   if (exit_bb)\n     {\n       if (bb != loop->latch)"}]}