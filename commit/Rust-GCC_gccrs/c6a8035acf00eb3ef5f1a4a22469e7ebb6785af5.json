{"sha": "c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhODAzNWFjZjAwZWIzZWY1ZjFhNGEyMjQ2OWU3ZWJiNjc4NWFmNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-08-24T15:19:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-08-24T15:19:36Z"}, "message": "acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Add ENOLINK, EPROTO for netbsd.\n\n2007-08-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Add ENOLINK, EPROTO\n\tfor netbsd.\n\t* configure: Regenerate.\n\t* include/std/system_error: Guard.\t\n\t* testsuite/19_diagnostics/headers/system_error/\n\ttypes_std_c++0x.cc: Same.\n\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Adjust\n\tline numbers.\n\nFrom-SVN: r127772", "tree": {"sha": "27ddac42af04ecce4a26ab092c55c2464fb37ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ddac42af04ecce4a26ab092c55c2464fb37ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/comments", "author": null, "committer": null, "parents": [{"sha": "fa2050d2664411f84dfdfcdcea9c509144ba0b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2050d2664411f84dfdfcdcea9c509144ba0b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2050d2664411f84dfdfcdcea9c509144ba0b96"}], "stats": {"total": 181, "additions": 179, "deletions": 2}, "files": [{"sha": "9dcc664cbec6bc908e71d0453a51825b6331bcbd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -1,3 +1,14 @@\n+2007-08-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): Add ENOLINK, EPROTO\n+\tfor netbsd.\n+\t* configure: Regenerate.\n+\t* include/std/system_error: Guard.\t\n+\t* testsuite/19_diagnostics/headers/system_error/\n+\ttypes_std_c++0x.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Adjust\n+\tline numbers.\n+\n 2007-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/system_error: New file."}, {"sha": "c50dacd903c894b9a9a02bc592d5586b4a1324f7", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -1282,6 +1282,26 @@ AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n     AC_DEFINE(HAVE_ENOTRECOVERABLE, 1, [Define if ENOTRECOVERABLE exists.])\n   fi\n \n+  AC_MSG_CHECKING([for ENOLINK])\n+  AC_CACHE_VAL(ac_system_error3, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = ENOLINK; ],\n+             [ac_system_error3=yes], [ac_system_error3=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error3)\n+  if test x\"$ac_system_error3\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_ENOLINK, 1, [Define if ENOLINK exists.])\n+  fi\n+\n+  AC_MSG_CHECKING([for EPROTO])\n+  AC_CACHE_VAL(ac_system_error_4, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = EPROTO; ],\n+             [ac_system_error_4=yes], [ac_system_error_4=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error_4)\n+  if test x\"$ac_system_error_4\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_EPROTO, 1, [Define if EPROTO exists.])\n+  fi\n+\n   AC_MSG_CHECKING([for sys_nerr])\n   AC_CACHE_VAL(ac_system_error3, [\n   AC_TRY_COMPILE([#include <errno.h> ], [ int i = sys_nerr; ],"}, {"sha": "1779215e551ef7a4a8c628b290b19f5e5c228bd8", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -63,12 +63,18 @@\n /* Define to 1 if you have the <endian.h> header file. */\n #undef HAVE_ENDIAN_H\n \n+/* Define if ENOLINK exists. */\n+#undef HAVE_ENOLINK\n+\n /* Define if ENOTRECOVERABLE exists. */\n #undef HAVE_ENOTRECOVERABLE\n \n /* Define if EOWNERDEAD exists. */\n #undef HAVE_EOWNERDEAD\n \n+/* Define if EPROTO exists. */\n+#undef HAVE_EPROTO\n+\n /* Define to 1 if you have the `expf' function. */\n #undef HAVE_EXPF\n "}, {"sha": "4658205d751507471647959e0ea3fa7f92c4e7a5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -16661,6 +16661,134 @@ _ACEOF\n \n   fi\n \n+  echo \"$as_me:$LINENO: checking for ENOLINK\" >&5\n+echo $ECHO_N \"checking for ENOLINK... $ECHO_C\" >&6\n+  if test \"${ac_system_error3+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = ENOLINK;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error3=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error3=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error3\" >&5\n+echo \"${ECHO_T}$ac_system_error3\" >&6\n+  if test x\"$ac_system_error3\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ENOLINK 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking for EPROTO\" >&5\n+echo $ECHO_N \"checking for EPROTO... $ECHO_C\" >&6\n+  if test \"${ac_system_error_4+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = EPROTO;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error_4=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error_4=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error_4\" >&5\n+echo \"${ECHO_T}$ac_system_error_4\" >&6\n+  if test x\"$ac_system_error_4\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_EPROTO 1\n+_ACEOF\n+\n+  fi\n+\n   echo \"$as_me:$LINENO: checking for sys_nerr\" >&5\n echo $ECHO_N \"checking for sys_nerr... $ECHO_C\" >&6\n   if test \"${ac_system_error3+set}\" = set; then\n@@ -16767,7 +16895,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 16770 \"configure\"\n+#line 16898 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int."}, {"sha": "0b520580b142a128aa448707881ea5fdf5df6663", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -93,7 +93,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       network_unreachable = \t\t\tENETUNREACH,\n       no_buffer_space = \t\t\tENOBUFS,\n       no_child_process = \t\t\tECHILD,\n+#ifdef _GLIBCXX_HAVE_ENOLINK\n       no_link = \t\t\t\tENOLINK,\n+#endif\n       no_lock_available = \t\t\tENOLCK,\n       no_message_available = \t\t\tENODATA, \n       no_message = \t\t\t\tENOMSG, \n@@ -119,7 +121,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       owner_dead = \t\t\t\tEOWNERDEAD,\n #endif\n       permission_denied = \t\t\tEACCES,\n+#ifdef _GLIBCXX_HAVE_EPROTO\n       protocol_error = \t\t\t\tEPROTO,\n+#endif\n       protocol_not_supported = \t\t\tEPROTONOSUPPORT,\n       read_only_file_system = \t\t\tEROFS,\n       resource_deadlock_would_occur = \t\tEDEADLK,"}, {"sha": "7c0aa0a54c4379244e6c0237242d287046a91a4a", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -50,7 +50,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"is private\" \"\" { target *-*-* } 162 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 166 }\n // { dg-error \"within this context\" \"\" { target *-*-* } 29 }\n // { dg-error \"first required here\" \"\" { target *-*-* } 48 }\n // { dg-excess-errors \"copy constructor\" }"}, {"sha": "73d4d66f2e9b46082189c4fc03b045f1f2b4c037", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc?ref=c6a8035acf00eb3ef5f1a4a22469e7ebb6785af5", "patch": "@@ -67,7 +67,11 @@ namespace gnu\n   using std::network_unreachable; \n   using std::no_buffer_space; \n   using std::no_child_process;\n+\n+#ifdef _GLIBCXX_HAVE_ENOLINK\n   using std::no_link; \n+#endif\n+\n   using std::no_lock_available; \n   using std::no_message_available; \n   using std::no_message; \n@@ -96,7 +100,11 @@ namespace gnu\n #endif\n \n   using std::permission_denied;\n+\n+#ifdef _GLIBCXX_HAVE_EPROTO\n   using std::protocol_error; \n+#endif\n+\n   using std::protocol_not_supported;\n   using std::read_only_file_system; \n   using std::resource_deadlock_would_occur;"}]}