{"sha": "e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkZDEzMTMxMzJlNWFhYTRjNjZiMGJkMjEzNTkxOTcwN2RjNDViNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-17T09:10:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-17T09:10:23Z"}, "message": "re PR tree-optimization/81365 (GCC miscompiles swap)\n\n\tPR tree-optimization/81365\n\t* tree-ssa-phiprop.c (propagate_with_phi): When considering hoisting\n\taggregate moves onto bb predecessor edges, make sure there are no\n\tloads that could alias the lhs in between the start of bb and the\n\tloads from *phi.\n\n\t* g++.dg/torture/pr81365.C: New test.\n\nFrom-SVN: r250261", "tree": {"sha": "ab28fd58473d7498affb0856f0fba16c2c508561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab28fd58473d7498affb0856f0fba16c2c508561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "2f29824f91577e2d415ea2fdef34ccc8c344d8ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "patch": "@@ -1,3 +1,11 @@\n+2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81365\n+\t* tree-ssa-phiprop.c (propagate_with_phi): When considering hoisting\n+\taggregate moves onto bb predecessor edges, make sure there are no\n+\tloads that could alias the lhs in between the start of bb and the\n+\tloads from *phi.\n+\n 2017-07-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR 80929"}, {"sha": "141d035cf6dbcc30ab12b732f66106cf64fa8917", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "patch": "@@ -1,5 +1,8 @@\n 2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/81365\n+\t* g++.dg/torture/pr81365.C: New test.\n+\n \tPR tree-optimization/81396\n \t* gcc.dg/tree-ssa/pr81396.c: New test.\n "}, {"sha": "fde5e503df9108348b79b1bc7bcd89188343896b", "filename": "gcc/testsuite/g++.dg/torture/pr81365.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81365.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81365.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81365.C?ref=e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "patch": "@@ -0,0 +1,39 @@\n+// PR tree-optimization/81365\n+// { dg-do run }\n+\n+struct A { unsigned a; };\n+\n+struct B {\n+  B (const A *x)\n+  {\n+    __builtin_memcpy (b, x, 3 * sizeof (A));\n+    __builtin_memcpy (c, x + 3, sizeof (A));\n+    __builtin_memset (c + 1, 0, sizeof (A));\n+  }\n+  bool\n+  foo (unsigned x)\n+  {\n+    A *it = c;\n+    if (it->a == x || (++it)->a == x)\n+      {\n+\tA t(b[0]);\n+\tb[0] = *it;\n+\t*it = t;\n+\treturn true;\n+      }\n+    return false;\n+  }\n+  A b[3];\n+  A c[2];\n+};\n+\n+int\n+main ()\n+{\n+  A x[] = { 4, 8, 12, 18 };\n+  B y(x);\n+  if (!y.foo (18))\n+    __builtin_abort ();\n+  if (!y.foo (4))\n+    __builtin_abort ();\n+}"}, {"sha": "7dcb9ee49a43716eb3eaa354ec20b8e8f0e719c5", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dd1313132e5aaa4c66b0bd2135919707dc45b6/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=e8dd1313132e5aaa4c66b0bd2135919707dc45b6", "patch": "@@ -327,7 +327,7 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n       if (!dominated_by_p (CDI_POST_DOMINATORS,\n \t\t\t   bb, gimple_bb (use_stmt)))\n \tcontinue;\n-         \n+\n       /* Check whether this is a load of *ptr.  */\n       if (!(is_gimple_assign (use_stmt)\n \t    && gimple_assign_rhs_code (use_stmt) == MEM_REF\n@@ -356,13 +356,38 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n          insert aggregate copies on the edges instead.  */\n       if (!is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n \t{\n+\t  if (!gimple_vdef (use_stmt))\n+\t    goto next;\n+\n \t  /* As we replicate the lhs on each incoming edge all\n \t     used SSA names have to be available there.  */\n \t  if (! for_each_index (gimple_assign_lhs_ptr (use_stmt),\n \t\t\t\tchk_uses,\n \t\t\t\tget_immediate_dominator (CDI_DOMINATORS,\n \t\t\t\t\t\t\t gimple_bb (phi))))\n \t    goto next;\n+\n+\t  gimple *vuse_stmt;\n+\t  imm_use_iterator vui;\n+\t  use_operand_p vuse_p;\n+\t  /* In order to move the aggregate copies earlier, make sure\n+\t     there are no statements that could read from memory\n+\t     aliasing the lhs in between the start of bb and use_stmt.\n+\t     As we require use_stmt to have a VDEF above, loads after\n+\t     use_stmt will use a different virtual SSA_NAME.  */\n+\t  FOR_EACH_IMM_USE_FAST (vuse_p, vui, vuse)\n+\t    {\n+\t      vuse_stmt = USE_STMT (vuse_p);\n+\t      if (vuse_stmt == use_stmt)\n+\t\tcontinue;\n+\t      if (!dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t   gimple_bb (vuse_stmt), bb))\n+\t\tcontinue;\n+\t      if (ref_maybe_used_by_stmt_p (vuse_stmt,\n+\t\t\t\t\t    gimple_assign_lhs (use_stmt)))\n+\t\tgoto next;\n+\t    }\n+\n \t  phiprop_insert_phi (bb, phi, use_stmt, phivn, n);\n \n \t  /* Remove old stmt.  The phi is taken care of by DCE.  */"}]}