{"sha": "bb63e5a07f942a515d55dd8de4032f82e2e5edac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2M2U1YTA3Zjk0MmE1MTVkNTVkZDhkZTQwMzJmODJlMmU1ZWRhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-04-05T08:00:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-04-05T08:00:32Z"}, "message": "mips.h (CUMULATIVE_ARGS): Rename fp_regs to num_fprs to avoid clash with Irix header file sys/ucontext.h.\n\n\t* config/mips/mips.h (CUMULATIVE_ARGS): Rename fp_regs to num_fprs\n\tto avoid clash with Irix header file sys/ucontext.h.  Rename gp_regs\n\tto num_gprs for symmetry.\n\t* config/mips/mips.c: Adjust accordingly.\n\nFrom-SVN: r51906", "tree": {"sha": "97887798a6d279c196d9117def4fa1cbcc835f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97887798a6d279c196d9117def4fa1cbcc835f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb63e5a07f942a515d55dd8de4032f82e2e5edac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb63e5a07f942a515d55dd8de4032f82e2e5edac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb63e5a07f942a515d55dd8de4032f82e2e5edac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb63e5a07f942a515d55dd8de4032f82e2e5edac/comments", "author": null, "committer": null, "parents": [{"sha": "8ab80eaa693e56679b57e6b8fd4385a8006bf476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab80eaa693e56679b57e6b8fd4385a8006bf476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab80eaa693e56679b57e6b8fd4385a8006bf476"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "ed61e4e5bc4c0f9b93d16e0ce136c80ab710ce3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb63e5a07f942a515d55dd8de4032f82e2e5edac", "patch": "@@ -1,3 +1,10 @@\n+2002-04-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (CUMULATIVE_ARGS): Rename fp_regs to num_fprs\n+\tto avoid clash with Irix header file sys/ucontext.h.  Rename gp_regs\n+\tto num_gprs for symmetry.\n+\t* config/mips/mips.c: Adjust accordingly.\n+\n 2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (truthvalue_conversion): Rename, update."}, {"sha": "c04b0546a53e13a994bad7f3aba4ff99dcfc3b72", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bb63e5a07f942a515d55dd8de4032f82e2e5edac", "patch": "@@ -4023,8 +4023,8 @@ mips_arg_info (cum, mode, type, named, info)\n      The EABI allocates the floating-point registers separately,\n      but the other ABIs allocate them like integer registers.  */\n   info->reg_offset = (mips_abi == ABI_EABI && info->fpr_p\n-\t\t      ? cum->fp_regs\n-\t\t      : cum->gp_regs);\n+\t\t      ? cum->num_fprs\n+\t\t      : cum->num_gprs);\n \n   if (even_reg_p)\n     info->reg_offset += info->reg_offset & 1;\n@@ -4102,9 +4102,9 @@ function_arg_advance (cum, mode, type, named)\n     cum->fp_code += (mode == SFmode ? 1 : 2) << ((cum->arg_number - 1) * 2);\n \n   if (mips_abi != ABI_EABI || !info.fpr_p)\n-    cum->gp_regs = info.reg_offset + info.reg_words;\n+    cum->num_gprs = info.reg_offset + info.reg_words;\n   else if (info.reg_words > 0)\n-    cum->fp_regs += FP_INC;\n+    cum->num_fprs += FP_INC;\n \n   if (info.stack_words > 0)\n     cum->stack_words = info.stack_offset + info.stack_words;\n@@ -4279,9 +4279,9 @@ mips_setup_incoming_varargs (cum, mode, type, no_rtl)\n     FUNCTION_ARG_ADVANCE (local_cum, mode, type, 1);\n \n   /* Found out how many registers we need to save.  */\n-  gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.gp_regs;\n+  gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.num_gprs;\n   fp_saved = (EABI_FLOAT_VARARGS_P\n-\t      ? MAX_ARGS_IN_REGISTERS - local_cum.fp_regs\n+\t      ? MAX_ARGS_IN_REGISTERS - local_cum.num_fprs\n \t      : 0);\n \n   if (!no_rtl)\n@@ -4302,7 +4302,7 @@ mips_setup_incoming_varargs (cum, mode, type, no_rtl)\n \t  if (mips_abi != ABI_EABI && BYTES_BIG_ENDIAN)\n \t    MEM_SET_IN_STRUCT_P (mem, 1);\n \n-\t  move_block_from_reg (local_cum.gp_regs + GP_ARG_FIRST, mem,\n+\t  move_block_from_reg (local_cum.num_gprs + GP_ARG_FIRST, mem,\n \t\t\t       gp_saved, gp_saved * UNITS_PER_WORD);\n \t}\n       if (fp_saved > 0)\n@@ -4321,7 +4321,7 @@ mips_setup_incoming_varargs (cum, mode, type, no_rtl)\n \n \t  mode = TARGET_SINGLE_FLOAT ? SFmode : DFmode;\n \n-\t  for (i = local_cum.fp_regs; i < MAX_ARGS_IN_REGISTERS; i += FP_INC)\n+\t  for (i = local_cum.num_fprs; i < MAX_ARGS_IN_REGISTERS; i += FP_INC)\n \t    {\n \t      rtx ptr = plus_constant (virtual_incoming_args_rtx, off);\n \t      emit_move_insn (gen_rtx_MEM (mode, ptr),\n@@ -4412,7 +4412,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n       int gpr_save_area_size;\n \n       gpr_save_area_size\n-\t= (MAX_ARGS_IN_REGISTERS - cum->gp_regs) * UNITS_PER_WORD;\n+\t= (MAX_ARGS_IN_REGISTERS - cum->num_gprs) * UNITS_PER_WORD;\n \n       if (EABI_FLOAT_VARARGS_P)\n \t{\n@@ -4470,7 +4470,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  /* Likewise emit code to initialize FOFF, the offset from FTOP\n \t     of the next FPR argument.  */\n \t  fpr_save_area_size\n-\t    = (MAX_ARGS_IN_REGISTERS - cum->fp_regs) * UNITS_PER_FPREG;\n+\t    = (MAX_ARGS_IN_REGISTERS - cum->num_fprs) * UNITS_PER_FPREG;\n \t  t = build (MODIFY_EXPR, TREE_TYPE (foff), foff,\n \t\t     build_int_2 (fpr_save_area_size, 0));\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -4502,7 +4502,9 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  if (mips_abi == ABI_N32\n \t      || mips_abi == ABI_64\n \t      || mips_abi == ABI_MEABI)\n- \t    ofs = (cum->gp_regs < MAX_ARGS_IN_REGISTERS ? 0 : -UNITS_PER_WORD);\n+ \t    ofs = (cum->num_gprs < MAX_ARGS_IN_REGISTERS\n+\t\t   ? 0\n+\t\t   : -UNITS_PER_WORD);\n \t  else\n \t    ofs = -UNITS_PER_WORD;\n \t}"}, {"sha": "553edb7ace7f9c60db5415b7c7246a783d96b11c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb63e5a07f942a515d55dd8de4032f82e2e5edac/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=bb63e5a07f942a515d55dd8de4032f82e2e5edac", "patch": "@@ -2794,10 +2794,10 @@ typedef struct mips_args {\n   /* For EABI, the number of integer registers used so far.  For other\n      ABIs, the number of words passed in registers (whether integer\n      or floating-point).  */\n-  unsigned int gp_regs;\n+  unsigned int num_gprs;\n \n   /* For EABI, the number of floating-point registers used so far.  */\n-  unsigned int fp_regs;\n+  unsigned int num_fprs;\n \n   /* The number of words passed on the stack.  */\n   unsigned int stack_words;"}]}