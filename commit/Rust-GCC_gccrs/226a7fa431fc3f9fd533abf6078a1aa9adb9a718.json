{"sha": "226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2YTdmYTQzMWZjM2Y5ZmQ1MzNhYmY2MDc4YTFhYTlhZGI5YTcxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:40:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:40:11Z"}, "message": "[multiple changes]\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch10.adb, a-coorse.adb, exp_dist.adb, exp_ch3.adb: Minor\n\treformatting.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* alfa.ads (Name_Of_Heap_Variable): New constant name.\n\t* lib-xref-alfa.adb, lib-xref.adb, lib-xref.ads (Drefs): New global\n\ttable to hold dereferences.\n\t(Add_ALFA_Xrefs): Take into account dereferences as special\n\treads/writes to the variable \"HEAP\".\n\t(Enclosing_Subprogram_Or_Package): Move subprogram here.\n\t(Generate_Dereference): New procedure to store a read/write dereferencew\n\tin the table Drefs.\n\t* put_alfa.adb (Put_ALFA): Use different default than (0,0) used for\n\tthe special \"HEAP\" var.\n\t* sem_ch4.adb (Analyze_Explicit_Dereference): Store read dereference\n\tin ALFA mode.\n\t* sem_util.adb (Note_Possible_Modification): Store write dereference\n\tin ALFA mode.\n\nFrom-SVN: r178252", "tree": {"sha": "e32b257f259965d95e0d8e66ce84cc867c98918a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32b257f259965d95e0d8e66ce84cc867c98918a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/comments", "author": null, "committer": null, "parents": [{"sha": "dfbcb149aa59ef88a254489d2c3aa9c105562490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbcb149aa59ef88a254489d2c3aa9c105562490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbcb149aa59ef88a254489d2c3aa9c105562490"}], "stats": {"total": 2719, "additions": 1420, "deletions": 1299}, "files": [{"sha": "51788c798555c1931a66d4dc42902be1775a7700", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -1,3 +1,26 @@\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch10.adb, a-coorse.adb, exp_dist.adb, exp_ch3.adb: Minor\n+\treformatting.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* alfa.ads (Name_Of_Heap_Variable): New constant name.\n+\t* lib-xref-alfa.adb, lib-xref.adb, lib-xref.ads (Drefs): New global\n+\ttable to hold dereferences.\n+\t(Add_ALFA_Xrefs): Take into account dereferences as special\n+\treads/writes to the variable \"HEAP\".\n+\t(Enclosing_Subprogram_Or_Package): Move subprogram here.\n+\t(Generate_Dereference): New procedure to store a read/write dereferencew\n+\tin the table Drefs.\n+\t* put_alfa.adb (Put_ALFA): Use different default than (0,0) used for\n+\tthe special \"HEAP\" var.\n+\t* sem_ch4.adb (Analyze_Explicit_Dereference): Store read dereference\n+\tin ALFA mode.\n+\t* sem_util.adb (Note_Possible_Modification): Store write dereference\n+\tin ALFA mode.\n+\n 2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch3.adb (Freeze_Type): Generate an accessibility check which"}, {"sha": "7465f930b1fc5198141bb68bc107719870180c58", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -535,9 +535,10 @@ package body Ada.Containers.Ordered_Sets is\n       if Object.Container = null then\n          return No_Element;\n       else\n-         return Cursor'(\n-          Object.Container.all'Unrestricted_Access,\n-            Object.Container.Tree.First);\n+         return\n+           Cursor'(\n+             Object.Container.all'Unrestricted_Access,\n+             Object.Container.Tree.First);\n       end if;\n    end First;\n \n@@ -1171,19 +1172,20 @@ package body Ada.Containers.Ordered_Sets is\n    begin\n       if Container.Tree.Last = null then\n          return No_Element;\n+      else\n+         return Cursor'(Container'Unrestricted_Access, Container.Tree.Last);\n       end if;\n-\n-      return Cursor'(Container'Unrestricted_Access, Container.Tree.Last);\n    end Last;\n \n    function Last (Object : Iterator) return Cursor is\n    begin\n       if Object.Container = null then\n          return No_Element;\n+      else\n+         return Cursor'(\n+           Object.Container.all'Unrestricted_Access,\n+                        Object.Container.Tree.Last);\n       end if;\n-\n-      return Cursor'(\n-        Object.Container.all'Unrestricted_Access, Object.Container.Tree.Last);\n    end Last;\n \n    ------------------\n@@ -1194,9 +1196,9 @@ package body Ada.Containers.Ordered_Sets is\n    begin\n       if Container.Tree.Last = null then\n          raise Constraint_Error with \"set is empty\";\n+      else\n+         return Container.Tree.Last.Element;\n       end if;\n-\n-      return Container.Tree.Last.Element;\n    end Last_Element;\n \n    ----------\n@@ -1300,13 +1302,12 @@ package body Ada.Containers.Ordered_Sets is\n       declare\n          Node : constant Node_Access :=\n                   Tree_Operations.Previous (Position.Node);\n-\n       begin\n          if Node = null then\n             return No_Element;\n+         else\n+            return Cursor'(Position.Container, Node);\n          end if;\n-\n-         return Cursor'(Position.Container, Node);\n       end;\n    end Previous;\n "}, {"sha": "3c45c14dedc7e7403db1b2a0cb6661569dcd24ef", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -175,6 +175,11 @@ package ALFA is\n    --        r = reference\n    --        s = subprogram reference in a static call\n \n+   --  Special entries for reads and writes to memory reference a special\n+   --  variable called \"HEAP\". These special entries are present in every scope\n+   --  where reads and writes to memory are present. Line and column for this\n+   --  special variable are always 0.\n+\n    --    Examples: ??? add examples here\n \n    ----------------\n@@ -327,6 +332,14 @@ package ALFA is\n      Table_Initial        => 20,\n      Table_Increment      => 200);\n \n+   ---------------\n+   -- Constants --\n+   ---------------\n+\n+   Name_Of_Heap_Variable : constant String := \"HEAP\";\n+   --  Name of special variable used in effects to denote reads and writes\n+   --  through explicit dereference.\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "361b2a4797fab9eb05b14c349c55ca7d070723b3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -6607,10 +6607,12 @@ package body Exp_Ch3 is\n \n             --  When compiling in Ada 2012 mode, ensure that the accessibility\n             --  level of the subpool access type is not deeper than that of the\n-            --  pool_with_subpools.\n+            --  pool_with_subpools. This check is not performed on .NET/JVM\n+            --  since those targets do not support pools.\n \n             elsif Ada_Version >= Ada_2012\n               and then Present (Associated_Storage_Pool (Def_Id))\n+              and then VM_Target = No_VM\n             then\n                declare\n                   Loc   : constant Source_Ptr := Sloc (Def_Id);\n@@ -6642,7 +6644,7 @@ package body Exp_Ch3 is\n                      --  Dynamic case: when the pool is of a class-wide type,\n                      --  it may or may not support subpools depending on the\n                      --  path of derivation. Generate:\n-                     --\n+\n                      --    if Def_Id in RSPWS'Class then\n                      --       raise Program_Error;\n                      --    end if;"}, {"sha": "ad3f432b98c8aaf1deac7eaa38fd14600c8b28d6", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -10550,6 +10550,7 @@ package body Exp_Dist is\n                                        Add_Params_For_Variant_Components;\n                                        J := J + Uint_1;\n                                     end loop;\n+\n                                     Choice_Index :=\n                                       Choice_Index + UI_To_Int (H - L) + 1;\n                                  end;\n@@ -10591,10 +10592,9 @@ package body Exp_Dist is\n                                  Add_Params_For_Variant_Components;\n                                  Choice_Index := Choice_Index + 1;\n \n-                              when others =>\n-\n-                                 --  Case of an explicit choice\n+                              --  Case of an explicit choice\n \n+                              when others =>\n                                  declare\n                                     Exp : constant Node_Id :=\n                                             New_Copy_Tree (Choice);"}, {"sha": "be89eb4591eb31d1722f66172f413ac5cc81cf14", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1144, "deletions": 1186, "changes": 2330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718"}, {"sha": "32439a02a07d350aa590e8eb69ccb93b984fac92", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 189, "deletions": 11, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -25,6 +25,7 @@\n \n with ALFA;        use ALFA;\n with Einfo;       use Einfo;\n+with Nmake;       use Nmake;\n with Put_ALFA;\n with GNAT.HTable;\n \n@@ -143,6 +144,22 @@ package body ALFA is\n    type Entity_Hashed_Range is range 0 .. 255;\n    --  Size of hash table headers\n \n+   ---------------------\n+   -- Local Variables --\n+   ---------------------\n+\n+   package Drefs is new Table.Table (\n+     Table_Component_Type => Xref_Entry,\n+     Table_Index_Type     => Xref_Entry_Number,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => Alloc.Xrefs_Initial,\n+     Table_Increment      => Alloc.Xrefs_Increment,\n+     Table_Name           => \"Drefs\");\n+   --  Table of cross-references for reads and writes through explicit\n+   --  dereferences, that are output as reads/writes to the special variable\n+   --  \"HEAP\". These references are added to the regular references when\n+   --  computing ALFA cross-references.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -400,7 +417,9 @@ package body ALFA is\n       --  when we eliminate duplicate reference entries as well as references\n       --  not suitable for local cross-references.\n \n-      Rnums : array (0 .. Nrefs) of Nat;\n+      Nrefs_Add : constant Nat := Drefs.Last;\n+\n+      Rnums : array (0 .. Nrefs + Nrefs_Add) of Nat;\n       --  This array contains numbers of references in the Xrefs table. This\n       --  list is sorted in output order. The extra 0'th entry is convenient\n       --  for the call to sort. When we sort the table, we move the entries in\n@@ -506,6 +525,8 @@ package body ALFA is\n          Rnums (Nat (To)) := Rnums (Nat (From));\n       end Move;\n \n+      Heap : Entity_Id;\n+\n       --  Start of processing for Add_ALFA_Xrefs\n    begin\n \n@@ -520,6 +541,31 @@ package body ALFA is\n          Rnums (J) := J;\n       end loop;\n \n+      --  Add dereferences to the set of regular references, by creating a\n+      --  special \"HEAP\" variable for these special references.\n+\n+      Name_Len := Name_Of_Heap_Variable'Length;\n+      Name_Buffer (1 .. Name_Len) := Name_Of_Heap_Variable;\n+\n+      Atree.Unlock;\n+      Nlists.Unlock;\n+      Heap := Make_Defining_Identifier (Standard_Location, Name_Enter);\n+      Atree.Lock;\n+      Nlists.Lock;\n+\n+      Set_Ekind         (Heap, E_Variable);\n+      Set_Is_Internal   (Heap, True);\n+      Set_Has_Fully_Qualified_Name (Heap);\n+\n+      for J in Drefs.First .. Drefs.Last loop\n+         Xrefs.Increment_Last;\n+         Xrefs.Table (Xrefs.Last)     := Drefs.Table (J);\n+         Xrefs.Table (Xrefs.Last).Ent := Heap;\n+\n+         Nrefs         := Nrefs + 1;\n+         Rnums (Nrefs) := Xrefs.Last;\n+      end loop;\n+\n       --  Eliminate entries not appropriate for ALFA. Done prior to sorting\n       --  cross-references, as it discards useless references which do not have\n       --  a proper format for the comparison function (like no location).\n@@ -762,16 +808,29 @@ package body ALFA is\n                  new String'(Unique_Name (XE.Ent));\n             end if;\n \n-            ALFA_Xref_Table.Append (\n-              (Entity_Name => Cur_Entity_Name,\n-               Entity_Line => Int (Get_Logical_Line_Number (XE.Def)),\n-               Etype       => Get_Entity_Type (XE.Ent),\n-               Entity_Col  => Int (Get_Column_Number (XE.Def)),\n-               File_Num    => Dependency_Num (XE.Lun),\n-               Scope_Num   => Get_Scope_Num (XE.Ref_Scope),\n-               Line        => Int (Get_Logical_Line_Number (XE.Loc)),\n-               Rtype       => XE.Typ,\n-               Col         => Int (Get_Column_Number (XE.Loc))));\n+            if XE.Ent = Heap then\n+               ALFA_Xref_Table.Append (\n+                 (Entity_Name => Cur_Entity_Name,\n+                  Entity_Line => 0,\n+                  Etype       => Get_Entity_Type (XE.Ent),\n+                  Entity_Col  => 0,\n+                  File_Num    => Dependency_Num (XE.Lun),\n+                  Scope_Num   => Get_Scope_Num (XE.Ref_Scope),\n+                  Line        => Int (Get_Logical_Line_Number (XE.Loc)),\n+                  Rtype       => XE.Typ,\n+                  Col         => Int (Get_Column_Number (XE.Loc))));\n+            else\n+               ALFA_Xref_Table.Append (\n+                 (Entity_Name => Cur_Entity_Name,\n+                  Entity_Line => Int (Get_Logical_Line_Number (XE.Def)),\n+                  Etype       => Get_Entity_Type (XE.Ent),\n+                  Entity_Col  => Int (Get_Column_Number (XE.Def)),\n+                  File_Num    => Dependency_Num (XE.Lun),\n+                  Scope_Num   => Get_Scope_Num (XE.Ref_Scope),\n+                  Line        => Int (Get_Logical_Line_Number (XE.Loc)),\n+                  Rtype       => XE.Typ,\n+                  Col         => Int (Get_Column_Number (XE.Loc))));\n+            end if;\n          end Add_One_Xref;\n       end loop;\n \n@@ -877,6 +936,84 @@ package body ALFA is\n       end if;\n    end Detect_And_Add_ALFA_Scope;\n \n+   -------------------------------------\n+   -- Enclosing_Subprogram_Or_Package --\n+   -------------------------------------\n+\n+   function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id is\n+      Result : Entity_Id;\n+\n+   begin\n+      --  If N is the defining identifier for a subprogram, then return the\n+      --  enclosing subprogram or package, not this subprogram.\n+\n+      if Nkind_In (N, N_Defining_Identifier, N_Defining_Operator_Symbol)\n+        and then Nkind (Parent (N)) in N_Subprogram_Specification\n+      then\n+         Result := Parent (Parent (Parent (N)));\n+      else\n+         Result := N;\n+      end if;\n+\n+      loop\n+         exit when No (Result);\n+\n+         case Nkind (Result) is\n+            when N_Package_Specification =>\n+               Result := Defining_Unit_Name (Result);\n+               exit;\n+\n+            when N_Package_Body =>\n+               Result := Defining_Unit_Name (Result);\n+               exit;\n+\n+            when N_Subprogram_Specification =>\n+               Result := Defining_Unit_Name (Result);\n+               exit;\n+\n+            when N_Subprogram_Declaration =>\n+               Result := Defining_Unit_Name (Specification (Result));\n+               exit;\n+\n+            when N_Subprogram_Body =>\n+               Result := Defining_Unit_Name (Specification (Result));\n+               exit;\n+\n+            --  The enclosing subprogram for a pre- or postconditions should be\n+            --  the subprogram to which the pragma is attached. This is not\n+            --  always the case in the AST, as the pragma may be declared after\n+            --  the declaration of the subprogram. Return Empty in this case.\n+\n+            when N_Pragma =>\n+               if Get_Pragma_Id (Result) = Pragma_Precondition\n+                    or else\n+                  Get_Pragma_Id (Result) = Pragma_Postcondition\n+               then\n+                  return Empty;\n+               else\n+                  Result := Parent (Result);\n+               end if;\n+\n+            when others =>\n+               Result := Parent (Result);\n+         end case;\n+      end loop;\n+\n+      if Nkind (Result) = N_Defining_Program_Unit_Name then\n+         Result := Defining_Identifier (Result);\n+      end if;\n+\n+      --  Do no return a scope without a proper location\n+\n+      if Present (Result)\n+        and then Sloc (Result) = No_Location\n+      then\n+         return Empty;\n+      end if;\n+\n+      return Result;\n+   end Enclosing_Subprogram_Or_Package;\n+\n    -----------------\n    -- Entity_Hash --\n    -----------------\n@@ -887,6 +1024,47 @@ package body ALFA is\n         Entity_Hashed_Range (E mod (Entity_Id (Entity_Hashed_Range'Last) + 1));\n    end Entity_Hash;\n \n+   --------------------------\n+   -- Generate_Dereference --\n+   --------------------------\n+\n+   procedure Generate_Dereference\n+     (N   : Node_Id;\n+      Typ : Character := 'r')\n+   is\n+      Indx      : Nat;\n+      Ref       : Source_Ptr;\n+      Ref_Scope : Entity_Id;\n+\n+   begin\n+      Ref := Original_Location (Sloc (N));\n+\n+      if Ref > No_Location then\n+         Drefs.Increment_Last;\n+         Indx := Drefs.Last;\n+\n+         Ref_Scope := Enclosing_Subprogram_Or_Package (N);\n+\n+         --  Entity is filled later on with the special \"HEAP\" variable\n+\n+         Drefs.Table (Indx).Ent := Empty;\n+\n+         Drefs.Table (Indx).Def := No_Location;\n+         Drefs.Table (Indx).Loc := Ref;\n+         Drefs.Table (Indx).Typ := Typ;\n+\n+         --  It is as if the special \"HEAP\" was defined in every scope where it\n+         --  is referenced.\n+\n+         Drefs.Table (Indx).Eun := Get_Source_Unit (Ref);\n+         Drefs.Table (Indx).Lun := Get_Source_Unit (Ref);\n+\n+         Drefs.Table (Indx).Ref_Scope := Ref_Scope;\n+         Drefs.Table (Indx).Ent_Scope := Ref_Scope;\n+         Drefs.Table (Indx).Ent_Scope_File := Get_Source_Unit (Ref_Scope);\n+      end if;\n+   end Generate_Dereference;\n+\n    ------------------------------------\n    -- Traverse_All_Compilation_Units --\n    ------------------------------------"}, {"sha": "b280ce5d4a73caa589314e1c8722084158c29dd1", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 83, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -112,9 +112,6 @@ package body Lib.Xref is\n    --  Local Subprograms --\n    ------------------------\n \n-   function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id;\n-   --  Return the closest enclosing subprogram of package\n-\n    procedure Generate_Prim_Op_References (Typ : Entity_Id);\n    --  For a tagged type, generate implicit references to its primitive\n    --  operations, for source navigation. This is done right before emitting\n@@ -124,84 +121,6 @@ package body Lib.Xref is\n    function Lt (T1, T2 : Xref_Entry) return Boolean;\n    --  Order cross-references\n \n-   -------------------------------------\n-   -- Enclosing_Subprogram_Or_Package --\n-   -------------------------------------\n-\n-   function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id is\n-      Result : Entity_Id;\n-\n-   begin\n-      --  If N is the defining identifier for a subprogram, then return the\n-      --  enclosing subprogram or package, not this subprogram.\n-\n-      if Nkind_In (N, N_Defining_Identifier, N_Defining_Operator_Symbol)\n-        and then Nkind (Parent (N)) in N_Subprogram_Specification\n-      then\n-         Result := Parent (Parent (Parent (N)));\n-      else\n-         Result := N;\n-      end if;\n-\n-      loop\n-         exit when No (Result);\n-\n-         case Nkind (Result) is\n-            when N_Package_Specification =>\n-               Result := Defining_Unit_Name (Result);\n-               exit;\n-\n-            when N_Package_Body =>\n-               Result := Defining_Unit_Name (Result);\n-               exit;\n-\n-            when N_Subprogram_Specification =>\n-               Result := Defining_Unit_Name (Result);\n-               exit;\n-\n-            when N_Subprogram_Declaration =>\n-               Result := Defining_Unit_Name (Specification (Result));\n-               exit;\n-\n-            when N_Subprogram_Body =>\n-               Result := Defining_Unit_Name (Specification (Result));\n-               exit;\n-\n-            --  The enclosing subprogram for a pre- or postconditions should be\n-            --  the subprogram to which the pragma is attached. This is not\n-            --  always the case in the AST, as the pragma may be declared after\n-            --  the declaration of the subprogram. Return Empty in this case.\n-\n-            when N_Pragma =>\n-               if Get_Pragma_Id (Result) = Pragma_Precondition\n-                    or else\n-                  Get_Pragma_Id (Result) = Pragma_Postcondition\n-               then\n-                  return Empty;\n-               else\n-                  Result := Parent (Result);\n-               end if;\n-\n-            when others =>\n-               Result := Parent (Result);\n-         end case;\n-      end loop;\n-\n-      if Nkind (Result) = N_Defining_Program_Unit_Name then\n-         Result := Defining_Identifier (Result);\n-      end if;\n-\n-      --  Do no return a scope without a proper location\n-\n-      if Present (Result)\n-        and then Sloc (Result) = No_Location\n-      then\n-         return Empty;\n-      end if;\n-\n-      return Result;\n-   end Enclosing_Subprogram_Or_Package;\n-\n    -------------------------\n    -- Generate_Definition --\n    -------------------------\n@@ -946,8 +865,8 @@ package body Lib.Xref is\n          Ref := Original_Location (Sloc (Nod));\n          Def := Original_Location (Sloc (Ent));\n \n-         Ref_Scope := Enclosing_Subprogram_Or_Package (N);\n-         Ent_Scope := Enclosing_Subprogram_Or_Package (Ent);\n+         Ref_Scope := ALFA.Enclosing_Subprogram_Or_Package (N);\n+         Ent_Scope := ALFA.Enclosing_Subprogram_Or_Package (Ent);\n \n          Xrefs.Increment_Last;\n          Indx := Xrefs.Last;"}, {"sha": "e8a4f3940a56651a507eb25cc2220ecded7ff5ef", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -590,6 +590,15 @@ package Lib.Xref is\n \n    package ALFA is\n \n+      function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id;\n+      --  Return the closest enclosing subprogram of package\n+\n+      procedure Generate_Dereference\n+        (N   : Node_Id;\n+         Typ : Character := 'r');\n+      --  This procedure is called to record a dereference. N is the location\n+      --  of the dereference.\n+\n       type Node_Processing is access procedure (N : Node_Id);\n \n       procedure Traverse_Compilation_Unit"}, {"sha": "20a37d9330fb1f1d569fba1dfdcb8ad9ba0a546d", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -153,8 +153,11 @@ begin\n                   Write_Info_Char (S.Scope_Name (N));\n                end loop;\n \n+               --  Default value of (0,0) is used for the special HEAP variable\n+               --  so use another default value.\n+\n                Entity_Line := 0;\n-               Entity_Col  := 0;\n+               Entity_Col  := 1;\n \n                --  Loop through cross reference entries for this scope\n "}, {"sha": "ce7c9b360e0c480152070a2b5d82382efd8d96ea", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -5041,6 +5041,7 @@ package body Sem_Ch10 is\n               (\"instantiation depends on itself\", Name (With_Clause));\n \n          elsif not Is_Visible_Child_Unit (Uname) then\n+\n             --  Abandon processing in case of previous errors\n \n             if No (Scope (Uname)) then"}, {"sha": "62218c46e17e85cf7babffdf31504bd8170ec869", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -1761,6 +1761,13 @@ package body Sem_Ch4 is\n    begin\n       Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n \n+      --  In formal verification mode, keep track of all reads and writes\n+      --  through explicit dereferences.\n+\n+      if ALFA_Mode then\n+         ALFA.Generate_Dereference (N);\n+      end if;\n+\n       Analyze (P);\n       Set_Etype (N, Any_Type);\n "}, {"sha": "6a5e5f1a1fd177ab259efbfea847044679008884", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/226a7fa431fc3f9fd533abf6078a1aa9adb9a718/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=226a7fa431fc3f9fd533abf6078a1aa9adb9a718", "patch": "@@ -10506,6 +10506,13 @@ package body Sem_Util is\n                P : constant Node_Id := Prefix (Exp);\n \n             begin\n+               --  In formal verification mode, keep track of all reads and\n+               --  writes through explicit dereferences.\n+\n+               if ALFA_Mode then\n+                  ALFA.Generate_Dereference (N, 'm');\n+               end if;\n+\n                if Nkind (P) = N_Selected_Component\n                  and then Present (\n                    Entry_Formal (Entity (Selector_Name (P))))"}]}