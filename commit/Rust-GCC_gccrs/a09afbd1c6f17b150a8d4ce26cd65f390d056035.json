{"sha": "a09afbd1c6f17b150a8d4ce26cd65f390d056035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5YWZiZDFjNmYxN2IxNTBhOGQ0Y2UyNmNkNjVmMzkwZDA1NjAzNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-10T17:43:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:18Z"}, "message": "[Ada] Add stream-oriented attributes support for 128-bit integer types\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst (-xdr):\n\tDocument that XDR is not supported for 128-bit integer types.\n\t* gnat_ugn.texi: Regenerate.\n\t* exp_strm.adb (Build_Elementary_Input_Call): Deal with types\n\tlarger than Long_Long_Integer.\n\t(Build_Elementary_Write_Call): Likewise.\n\t* rtsfind.ads (RE_Id): Add RE_I_LLL{I,U] and RE_W_LLL{I,U}.\n\t(RE_Unit_Table): Add entries for them.\n\t* libgnat/s-stratt.ads (I_LLLI): New inline function.\n\t(I_LLLU): Likewise.\n\t(W_LLLI): New inline procedure.\n\t(W_LLLU): Likewise.\n\t* libgnat/s-stratt.adb (S_LLLI): New subtype of SEA.\n\t(S_LLLU): Likewise.\n\t(From_LLLI): New instance of Unchecked_Conversion.\n\t(From_LLLU): Likewise.\n\t(To_LLLI): Likewise.\n\t(To_LLLU): Likewise.\n\t(I_LLLI): Implement.\n\t(I_LLLU): Likewise.\n\t(W_LLLI): Likewise.\n\t(W_LLLU): Likewise.", "tree": {"sha": "c4d68a57cfbac40ac00d18133658a8189e7b2cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d68a57cfbac40ac00d18133658a8189e7b2cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09afbd1c6f17b150a8d4ce26cd65f390d056035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09afbd1c6f17b150a8d4ce26cd65f390d056035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09afbd1c6f17b150a8d4ce26cd65f390d056035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09afbd1c6f17b150a8d4ce26cd65f390d056035/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4056d9abfa67e3584f68e1c2ecb8de9bc05a68cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4056d9abfa67e3584f68e1c2ecb8de9bc05a68cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4056d9abfa67e3584f68e1c2ecb8de9bc05a68cf"}], "stats": {"total": 363, "additions": 248, "deletions": 115}, "files": [{"sha": "6993f0d402b7ea374c6a9139ae05240dfbcf54cf", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -6704,6 +6704,9 @@ be presented in subsequent sections.\n   Use the target-independent XDR protocol for stream oriented attributes\n   instead of the default implementation which is based on direct binary\n   representations and is therefore target-and endianness-dependent.\n+  However it does not support 128-bit integer types and the exception\n+  ``Ada.IO_Exceptions.Device_Error`` is raised if any attempt is made\n+  at streaming 128-bit integer types with it.\n \n \n   .. index:: -Xnnn  (gnatbind)"}, {"sha": "09bd8726cb6aa520ff03853865234d14811dc9f7", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -578,8 +578,11 @@ package body Exp_Strm is\n          elsif P_Size <= Standard_Long_Integer_Size then\n             Lib_RE := RE_I_LI;\n \n-         else\n+         elsif P_Size <= Standard_Long_Long_Integer_Size then\n             Lib_RE := RE_I_LLI;\n+\n+         else\n+            Lib_RE := RE_I_LLLI;\n          end if;\n \n       --  Unsigned integer types, also includes unsigned fixed-point types\n@@ -609,8 +612,11 @@ package body Exp_Strm is\n          elsif P_Size <= Standard_Long_Integer_Size then\n             Lib_RE := RE_I_LU;\n \n-         else\n+         elsif P_Size <= Standard_Long_Long_Integer_Size then\n             Lib_RE := RE_I_LLU;\n+\n+         else\n+            Lib_RE := RE_I_LLLU;\n          end if;\n \n       else pragma Assert (Is_Access_Type (U_Type));\n@@ -802,16 +808,24 @@ package body Exp_Strm is\n       then\n          if P_Size <= Standard_Short_Short_Integer_Size then\n             Lib_RE := RE_W_SSI;\n+\n          elsif P_Size <= Standard_Short_Integer_Size then\n             Lib_RE := RE_W_SI;\n+\n          elsif P_Size = 24 then\n             Lib_RE := RE_W_I24;\n+\n          elsif P_Size <= Standard_Integer_Size then\n             Lib_RE := RE_W_I;\n+\n          elsif P_Size <= Standard_Long_Integer_Size then\n             Lib_RE := RE_W_LI;\n-         else\n+\n+         elsif P_Size <= Standard_Long_Long_Integer_Size then\n             Lib_RE := RE_W_LLI;\n+\n+         else\n+            Lib_RE := RE_W_LLLI;\n          end if;\n \n       --  Unsigned integer types, also includes unsigned fixed-point types\n@@ -828,16 +842,24 @@ package body Exp_Strm is\n       then\n          if P_Size <= Standard_Short_Short_Integer_Size then\n             Lib_RE := RE_W_SSU;\n+\n          elsif P_Size <= Standard_Short_Integer_Size then\n             Lib_RE := RE_W_SU;\n+\n          elsif P_Size = 24 then\n             Lib_RE := RE_W_U24;\n+\n          elsif P_Size <= Standard_Integer_Size then\n             Lib_RE := RE_W_U;\n+\n          elsif P_Size <= Standard_Long_Integer_Size then\n             Lib_RE := RE_W_LU;\n-         else\n+\n+         elsif P_Size <= Standard_Long_Long_Integer_Size then\n             Lib_RE := RE_W_LLU;\n+\n+         else\n+            Lib_RE := RE_W_LLLU;\n          end if;\n \n       else pragma Assert (Is_Access_Type (U_Type));"}, {"sha": "2981d785aa29293fedd13b4b94481d7ffe06e660", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Nov 19, 2020\n+GNAT User's Guide for Native Platforms , Nov 20, 2020\n \n AdaCore\n \n@@ -15919,6 +15919,9 @@ Exclude source files (check object consistency only).\n Use the target-independent XDR protocol for stream oriented attributes\n instead of the default implementation which is based on direct binary\n representations and is therefore target-and endianness-dependent.\n+However it does not support 128-bit integer types and the exception\n+@code{Ada.IO_Exceptions.Device_Error} is raised if any attempt is made\n+at streaming 128-bit integer types with it.\n \n @geindex -Xnnn (gnatbind)\n "}, {"sha": "8fe2721638c7199d554648456ce59c11376d1ef1", "filename": "gcc/ada/libgnat/s-stratt.adb", "status": "modified", "additions": 147, "deletions": 63, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Flibgnat%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stratt.adb?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -44,7 +44,8 @@ package body System.Stream_Attributes is\n \n    function XDR_Support return Boolean;\n    pragma Inline (XDR_Support);\n-   --  Return True if XDR streaming should be used\n+   --  Return True if XDR streaming should be used. Note that 128-bit integers\n+   --  are not supported by the XDR protocol and will raise Device_Error.\n \n    Err : exception renames Ada.IO_Exceptions.End_Error;\n    --  Exception raised if insufficient data read (note that the RM implies\n@@ -64,74 +65,81 @@ package body System.Stream_Attributes is\n    Thin_Pointer_Size : constant := System.Address'Size;\n    Fat_Pointer_Size  : constant := System.Address'Size * 2;\n \n-   subtype S_AD  is SEA (1 .. (Fat_Pointer_Size              + SU - 1) / SU);\n-   subtype S_AS  is SEA (1 .. (Thin_Pointer_Size             + SU - 1) / SU);\n-   subtype S_B   is SEA (1 .. (Boolean'Size                  + SU - 1) / SU);\n-   subtype S_C   is SEA (1 .. (Character'Size                + SU - 1) / SU);\n-   subtype S_F   is SEA (1 .. (Float'Size                    + SU - 1) / SU);\n-   subtype S_I   is SEA (1 .. (Integer'Size                  + SU - 1) / SU);\n-   subtype S_I24 is SEA (1 .. (Integer_24'Size               + SU - 1) / SU);\n-   subtype S_LF  is SEA (1 .. (Long_Float'Size               + SU - 1) / SU);\n-   subtype S_LI  is SEA (1 .. (Long_Integer'Size             + SU - 1) / SU);\n-   subtype S_LLF is SEA (1 .. (Long_Long_Float'Size          + SU - 1) / SU);\n-   subtype S_LLI is SEA (1 .. (Long_Long_Integer'Size        + SU - 1) / SU);\n-   subtype S_LLU is SEA (1 .. (UST.Long_Long_Unsigned'Size   + SU - 1) / SU);\n-   subtype S_LU  is SEA (1 .. (UST.Long_Unsigned'Size        + SU - 1) / SU);\n-   subtype S_SF  is SEA (1 .. (Short_Float'Size              + SU - 1) / SU);\n-   subtype S_SI  is SEA (1 .. (Short_Integer'Size            + SU - 1) / SU);\n-   subtype S_SSI is SEA (1 .. (Short_Short_Integer'Size      + SU - 1) / SU);\n-   subtype S_SSU is SEA (1 .. (UST.Short_Short_Unsigned'Size + SU - 1) / SU);\n-   subtype S_SU  is SEA (1 .. (UST.Short_Unsigned'Size       + SU - 1) / SU);\n-   subtype S_U   is SEA (1 .. (UST.Unsigned'Size             + SU - 1) / SU);\n-   subtype S_U24 is SEA (1 .. (Unsigned_24'Size              + SU - 1) / SU);\n-   subtype S_WC  is SEA (1 .. (Wide_Character'Size           + SU - 1) / SU);\n-   subtype S_WWC is SEA (1 .. (Wide_Wide_Character'Size      + SU - 1) / SU);\n+   subtype S_AD   is SEA (1 .. (Fat_Pointer_Size              + SU - 1) / SU);\n+   subtype S_AS   is SEA (1 .. (Thin_Pointer_Size             + SU - 1) / SU);\n+   subtype S_B    is SEA (1 .. (Boolean'Size                  + SU - 1) / SU);\n+   subtype S_C    is SEA (1 .. (Character'Size                + SU - 1) / SU);\n+   subtype S_F    is SEA (1 .. (Float'Size                    + SU - 1) / SU);\n+   subtype S_I    is SEA (1 .. (Integer'Size                  + SU - 1) / SU);\n+   subtype S_I24  is SEA (1 .. (Integer_24'Size               + SU - 1) / SU);\n+   subtype S_LF   is SEA (1 .. (Long_Float'Size               + SU - 1) / SU);\n+   subtype S_LI   is SEA (1 .. (Long_Integer'Size             + SU - 1) / SU);\n+   subtype S_LLF  is SEA (1 .. (Long_Long_Float'Size          + SU - 1) / SU);\n+   subtype S_LLI  is SEA (1 .. (Long_Long_Integer'Size        + SU - 1) / SU);\n+   subtype S_LLLI is SEA (1 .. (Long_Long_Long_Integer'Size   + SU - 1) / SU);\n+   subtype S_LLLU is\n+                  SEA (1 .. (UST.Long_Long_Long_Unsigned'Size + SU - 1) / SU);\n+   subtype S_LLU  is SEA (1 .. (UST.Long_Long_Unsigned'Size   + SU - 1) / SU);\n+   subtype S_LU   is SEA (1 .. (UST.Long_Unsigned'Size        + SU - 1) / SU);\n+   subtype S_SF   is SEA (1 .. (Short_Float'Size              + SU - 1) / SU);\n+   subtype S_SI   is SEA (1 .. (Short_Integer'Size            + SU - 1) / SU);\n+   subtype S_SSI  is SEA (1 .. (Short_Short_Integer'Size      + SU - 1) / SU);\n+   subtype S_SSU  is SEA (1 .. (UST.Short_Short_Unsigned'Size + SU - 1) / SU);\n+   subtype S_SU   is SEA (1 .. (UST.Short_Unsigned'Size       + SU - 1) / SU);\n+   subtype S_U    is SEA (1 .. (UST.Unsigned'Size             + SU - 1) / SU);\n+   subtype S_U24  is SEA (1 .. (Unsigned_24'Size              + SU - 1) / SU);\n+   subtype S_WC   is SEA (1 .. (Wide_Character'Size           + SU - 1) / SU);\n+   subtype S_WWC  is SEA (1 .. (Wide_Wide_Character'Size      + SU - 1) / SU);\n \n    --  Unchecked conversions from the elementary type to the stream type\n \n-   function From_AD  is new UC (Fat_Pointer,              S_AD);\n-   function From_AS  is new UC (Thin_Pointer,             S_AS);\n-   function From_F   is new UC (Float,                    S_F);\n-   function From_I   is new UC (Integer,                  S_I);\n-   function From_I24 is new UC (Integer_24,               S_I24);\n-   function From_LF  is new UC (Long_Float,               S_LF);\n-   function From_LI  is new UC (Long_Integer,             S_LI);\n-   function From_LLF is new UC (Long_Long_Float,          S_LLF);\n-   function From_LLI is new UC (Long_Long_Integer,        S_LLI);\n-   function From_LLU is new UC (UST.Long_Long_Unsigned,   S_LLU);\n-   function From_LU  is new UC (UST.Long_Unsigned,        S_LU);\n-   function From_SF  is new UC (Short_Float,              S_SF);\n-   function From_SI  is new UC (Short_Integer,            S_SI);\n-   function From_SSI is new UC (Short_Short_Integer,      S_SSI);\n-   function From_SSU is new UC (UST.Short_Short_Unsigned, S_SSU);\n-   function From_SU  is new UC (UST.Short_Unsigned,       S_SU);\n-   function From_U   is new UC (UST.Unsigned,             S_U);\n-   function From_U24 is new UC (Unsigned_24,              S_U24);\n-   function From_WC  is new UC (Wide_Character,           S_WC);\n-   function From_WWC is new UC (Wide_Wide_Character,      S_WWC);\n+   function From_AD   is new UC (Fat_Pointer,                 S_AD);\n+   function From_AS   is new UC (Thin_Pointer,                S_AS);\n+   function From_F    is new UC (Float,                       S_F);\n+   function From_I    is new UC (Integer,                     S_I);\n+   function From_I24  is new UC (Integer_24,                  S_I24);\n+   function From_LF   is new UC (Long_Float,                  S_LF);\n+   function From_LI   is new UC (Long_Integer,                S_LI);\n+   function From_LLF  is new UC (Long_Long_Float,             S_LLF);\n+   function From_LLI  is new UC (Long_Long_Integer,           S_LLI);\n+   function From_LLLI is new UC (Long_Long_Long_Integer,      S_LLLI);\n+   function From_LLLU is new UC (UST.Long_Long_Long_Unsigned, S_LLLU);\n+   function From_LLU  is new UC (UST.Long_Long_Unsigned,      S_LLU);\n+   function From_LU   is new UC (UST.Long_Unsigned,           S_LU);\n+   function From_SF   is new UC (Short_Float,                 S_SF);\n+   function From_SI   is new UC (Short_Integer,               S_SI);\n+   function From_SSI  is new UC (Short_Short_Integer,         S_SSI);\n+   function From_SSU  is new UC (UST.Short_Short_Unsigned,    S_SSU);\n+   function From_SU   is new UC (UST.Short_Unsigned,          S_SU);\n+   function From_U    is new UC (UST.Unsigned,                S_U);\n+   function From_U24  is new UC (Unsigned_24,                 S_U24);\n+   function From_WC   is new UC (Wide_Character,              S_WC);\n+   function From_WWC  is new UC (Wide_Wide_Character,         S_WWC);\n \n    --  Unchecked conversions from the stream type to elementary type\n \n-   function To_AD  is new UC (S_AD,  Fat_Pointer);\n-   function To_AS  is new UC (S_AS,  Thin_Pointer);\n-   function To_F   is new UC (S_F,   Float);\n-   function To_I   is new UC (S_I,   Integer);\n-   function To_I24 is new UC (S_I24, Integer_24);\n-   function To_LF  is new UC (S_LF,  Long_Float);\n-   function To_LI  is new UC (S_LI,  Long_Integer);\n-   function To_LLF is new UC (S_LLF, Long_Long_Float);\n-   function To_LLI is new UC (S_LLI, Long_Long_Integer);\n-   function To_LLU is new UC (S_LLU, UST.Long_Long_Unsigned);\n-   function To_LU  is new UC (S_LU,  UST.Long_Unsigned);\n-   function To_SF  is new UC (S_SF,  Short_Float);\n-   function To_SI  is new UC (S_SI,  Short_Integer);\n-   function To_SSI is new UC (S_SSI, Short_Short_Integer);\n-   function To_SSU is new UC (S_SSU, UST.Short_Short_Unsigned);\n-   function To_SU  is new UC (S_SU,  UST.Short_Unsigned);\n-   function To_U   is new UC (S_U,   UST.Unsigned);\n-   function To_U24 is new UC (S_U24, Unsigned_24);\n-   function To_WC  is new UC (S_WC,  Wide_Character);\n-   function To_WWC is new UC (S_WWC, Wide_Wide_Character);\n+   function To_AD   is new UC (S_AD,   Fat_Pointer);\n+   function To_AS   is new UC (S_AS,   Thin_Pointer);\n+   function To_F    is new UC (S_F,    Float);\n+   function To_I    is new UC (S_I,    Integer);\n+   function To_I24  is new UC (S_I24,  Integer_24);\n+   function To_LF   is new UC (S_LF,   Long_Float);\n+   function To_LI   is new UC (S_LI,   Long_Integer);\n+   function To_LLF  is new UC (S_LLF,  Long_Long_Float);\n+   function To_LLI  is new UC (S_LLI,  Long_Long_Integer);\n+   function To_LLLI is new UC (S_LLLI, Long_Long_Long_Integer);\n+   function To_LLLU is new UC (S_LLLU, UST.Long_Long_Long_Unsigned);\n+   function To_LLU  is new UC (S_LLU,  UST.Long_Long_Unsigned);\n+   function To_LU   is new UC (S_LU,   UST.Long_Unsigned);\n+   function To_SF   is new UC (S_SF,   Short_Float);\n+   function To_SI   is new UC (S_SI,   Short_Integer);\n+   function To_SSI  is new UC (S_SSI,  Short_Short_Integer);\n+   function To_SSU  is new UC (S_SSU,  UST.Short_Short_Unsigned);\n+   function To_SU   is new UC (S_SU,   UST.Short_Unsigned);\n+   function To_U    is new UC (S_U,    UST.Unsigned);\n+   function To_U24  is new UC (S_U24,  Unsigned_24);\n+   function To_WC   is new UC (S_WC,   Wide_Character);\n+   function To_WWC  is new UC (S_WWC,  Wide_Wide_Character);\n \n    -----------------\n    -- XDR_Support --\n@@ -393,6 +401,53 @@ package body System.Stream_Attributes is\n       end if;\n    end I_LLI;\n \n+   ------------\n+   -- I_LLLI --\n+   ------------\n+\n+   function I_LLLI (Stream : not null access RST) return Long_Long_Long_Integer\n+   is\n+      T : S_LLLI;\n+      L : SEO;\n+\n+   begin\n+      if XDR_Support then\n+         raise Ada.IO_Exceptions.Device_Error;\n+      end if;\n+\n+      Ada.Streams.Read (Stream.all, T, L);\n+\n+      if L < T'Last then\n+         raise Err;\n+      else\n+         return To_LLLI (T);\n+      end if;\n+   end I_LLLI;\n+\n+   ------------\n+   -- I_LLLU --\n+   ------------\n+\n+   function I_LLLU\n+     (Stream : not null access RST) return UST.Long_Long_Long_Unsigned\n+   is\n+      T : S_LLLU;\n+      L : SEO;\n+\n+   begin\n+      if XDR_Support then\n+         raise Ada.IO_Exceptions.Device_Error;\n+      end if;\n+\n+      Ada.Streams.Read (Stream.all, T, L);\n+\n+      if L < T'Last then\n+         raise Err;\n+      else\n+         return To_LLLU (T);\n+      end if;\n+   end I_LLLU;\n+\n    -----------\n    -- I_LLU --\n    -----------\n@@ -799,6 +854,35 @@ package body System.Stream_Attributes is\n       Ada.Streams.Write (Stream.all, From_LLI (Item));\n    end W_LLI;\n \n+   ------------\n+   -- W_LLLI --\n+   ------------\n+\n+   procedure W_LLLI\n+     (Stream : not null access RST; Item : Long_Long_Long_Integer) is\n+   begin\n+      if XDR_Support then\n+         raise Ada.IO_Exceptions.Device_Error;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LLLI (Item));\n+   end W_LLLI;\n+\n+   ------------\n+   -- W_LLLU --\n+   ------------\n+\n+   procedure W_LLLU\n+     (Stream : not null access RST; Item : UST.Long_Long_Long_Unsigned)\n+   is\n+   begin\n+      if XDR_Support then\n+         raise Ada.IO_Exceptions.Device_Error;\n+      end if;\n+\n+      Ada.Streams.Write (Stream.all, From_LLLU (Item));\n+   end W_LLLU;\n+\n    -----------\n    -- W_LLU --\n    -----------"}, {"sha": "965dff6710310158d83a68d78be3909780ce63b7", "filename": "gcc/ada/libgnat/s-stratt.ads", "status": "modified", "additions": 60, "deletions": 47, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Flibgnat%2Fs-stratt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Flibgnat%2Fs-stratt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stratt.ads?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -104,29 +104,34 @@ package System.Stream_Attributes is\n    --  is the same for all elementary types (no bounds or discriminants\n    --  are involved).\n \n-   function I_AD  (Stream : not null access RST) return Fat_Pointer;\n-   function I_AS  (Stream : not null access RST) return Thin_Pointer;\n-   function I_B   (Stream : not null access RST) return Boolean;\n-   function I_C   (Stream : not null access RST) return Character;\n-   function I_F   (Stream : not null access RST) return Float;\n-   function I_I   (Stream : not null access RST) return Integer;\n-   function I_I24 (Stream : not null access RST) return Integer_24;\n-   function I_LF  (Stream : not null access RST) return Long_Float;\n-   function I_LI  (Stream : not null access RST) return Long_Integer;\n-   function I_LLF (Stream : not null access RST) return Long_Long_Float;\n-   function I_LLI (Stream : not null access RST) return Long_Long_Integer;\n-   function I_LLU (Stream : not null access RST) return UST.Long_Long_Unsigned;\n-   function I_LU  (Stream : not null access RST) return UST.Long_Unsigned;\n-   function I_SF  (Stream : not null access RST) return Short_Float;\n-   function I_SI  (Stream : not null access RST) return Short_Integer;\n-   function I_SSI (Stream : not null access RST) return Short_Short_Integer;\n-   function I_SSU (Stream : not null access RST) return\n-                                                   UST.Short_Short_Unsigned;\n-   function I_SU  (Stream : not null access RST) return UST.Short_Unsigned;\n-   function I_U   (Stream : not null access RST) return UST.Unsigned;\n-   function I_U24 (Stream : not null access RST) return Unsigned_24;\n-   function I_WC  (Stream : not null access RST) return Wide_Character;\n-   function I_WWC (Stream : not null access RST) return Wide_Wide_Character;\n+   function I_AD   (Stream : not null access RST) return Fat_Pointer;\n+   function I_AS   (Stream : not null access RST) return Thin_Pointer;\n+   function I_B    (Stream : not null access RST) return Boolean;\n+   function I_C    (Stream : not null access RST) return Character;\n+   function I_F    (Stream : not null access RST) return Float;\n+   function I_I    (Stream : not null access RST) return Integer;\n+   function I_I24  (Stream : not null access RST) return Integer_24;\n+   function I_LF   (Stream : not null access RST) return Long_Float;\n+   function I_LI   (Stream : not null access RST) return Long_Integer;\n+   function I_LLF  (Stream : not null access RST) return Long_Long_Float;\n+   function I_LLI  (Stream : not null access RST) return Long_Long_Integer;\n+   function I_LLLI (Stream : not null access RST) return\n+                                                    Long_Long_Long_Integer;\n+   function I_LLLU (Stream : not null access RST) return\n+                                                   UST.Long_Long_Long_Unsigned;\n+   function I_LLU  (Stream : not null access RST) return\n+                                                    UST.Long_Long_Unsigned;\n+   function I_LU   (Stream : not null access RST) return UST.Long_Unsigned;\n+   function I_SF   (Stream : not null access RST) return Short_Float;\n+   function I_SI   (Stream : not null access RST) return Short_Integer;\n+   function I_SSI  (Stream : not null access RST) return Short_Short_Integer;\n+   function I_SSU  (Stream : not null access RST) return\n+                                                    UST.Short_Short_Unsigned;\n+   function I_SU   (Stream : not null access RST) return UST.Short_Unsigned;\n+   function I_U    (Stream : not null access RST) return UST.Unsigned;\n+   function I_U24  (Stream : not null access RST) return Unsigned_24;\n+   function I_WC   (Stream : not null access RST) return Wide_Character;\n+   function I_WWC  (Stream : not null access RST) return Wide_Wide_Character;\n \n    -----------------------\n    -- Output Procedures --\n@@ -137,30 +142,34 @@ package System.Stream_Attributes is\n    --  'Write and 'Output because there are no discriminants or bounds to\n    --  be written.\n \n-   procedure W_AD  (Stream : not null access RST; Item : Fat_Pointer);\n-   procedure W_AS  (Stream : not null access RST; Item : Thin_Pointer);\n-   procedure W_B   (Stream : not null access RST; Item : Boolean);\n-   procedure W_C   (Stream : not null access RST; Item : Character);\n-   procedure W_F   (Stream : not null access RST; Item : Float);\n-   procedure W_I   (Stream : not null access RST; Item : Integer);\n-   procedure W_I24 (Stream : not null access RST; Item : Integer_24);\n-   procedure W_LF  (Stream : not null access RST; Item : Long_Float);\n-   procedure W_LI  (Stream : not null access RST; Item : Long_Integer);\n-   procedure W_LLF (Stream : not null access RST; Item : Long_Long_Float);\n-   procedure W_LLI (Stream : not null access RST; Item : Long_Long_Integer);\n-   procedure W_LLU (Stream : not null access RST; Item :\n-                                                    UST.Long_Long_Unsigned);\n-   procedure W_LU  (Stream : not null access RST; Item : UST.Long_Unsigned);\n-   procedure W_SF  (Stream : not null access RST; Item : Short_Float);\n-   procedure W_SI  (Stream : not null access RST; Item : Short_Integer);\n-   procedure W_SSI (Stream : not null access RST; Item : Short_Short_Integer);\n-   procedure W_SSU (Stream : not null access RST; Item :\n-                                                    UST.Short_Short_Unsigned);\n-   procedure W_SU  (Stream : not null access RST; Item : UST.Short_Unsigned);\n-   procedure W_U   (Stream : not null access RST; Item : UST.Unsigned);\n-   procedure W_U24 (Stream : not null access RST; Item : Unsigned_24);\n-   procedure W_WC  (Stream : not null access RST; Item : Wide_Character);\n-   procedure W_WWC (Stream : not null access RST; Item : Wide_Wide_Character);\n+   procedure W_AD   (Stream : not null access RST; Item : Fat_Pointer);\n+   procedure W_AS   (Stream : not null access RST; Item : Thin_Pointer);\n+   procedure W_B    (Stream : not null access RST; Item : Boolean);\n+   procedure W_C    (Stream : not null access RST; Item : Character);\n+   procedure W_F    (Stream : not null access RST; Item : Float);\n+   procedure W_I    (Stream : not null access RST; Item : Integer);\n+   procedure W_I24  (Stream : not null access RST; Item : Integer_24);\n+   procedure W_LF   (Stream : not null access RST; Item : Long_Float);\n+   procedure W_LI   (Stream : not null access RST; Item : Long_Integer);\n+   procedure W_LLF  (Stream : not null access RST; Item : Long_Long_Float);\n+   procedure W_LLI  (Stream : not null access RST; Item : Long_Long_Integer);\n+   procedure W_LLLI (Stream : not null access RST; Item :\n+                                                     Long_Long_Long_Integer);\n+   procedure W_LLLU (Stream : not null access RST; Item :\n+                                                  UST.Long_Long_Long_Unsigned);\n+   procedure W_LLU  (Stream : not null access RST; Item :\n+                                                     UST.Long_Long_Unsigned);\n+   procedure W_LU   (Stream : not null access RST; Item : UST.Long_Unsigned);\n+   procedure W_SF   (Stream : not null access RST; Item : Short_Float);\n+   procedure W_SI   (Stream : not null access RST; Item : Short_Integer);\n+   procedure W_SSI  (Stream : not null access RST; Item : Short_Short_Integer);\n+   procedure W_SSU  (Stream : not null access RST; Item :\n+                                                     UST.Short_Short_Unsigned);\n+   procedure W_SU   (Stream : not null access RST; Item : UST.Short_Unsigned);\n+   procedure W_U    (Stream : not null access RST; Item : UST.Unsigned);\n+   procedure W_U24  (Stream : not null access RST; Item : Unsigned_24);\n+   procedure W_WC   (Stream : not null access RST; Item : Wide_Character);\n+   procedure W_WWC  (Stream : not null access RST; Item : Wide_Wide_Character);\n \n    function Block_IO_OK return Boolean;\n    --  Indicate whether the current setting supports block IO. See\n@@ -177,6 +186,8 @@ private\n    pragma Inline (I_LI);\n    pragma Inline (I_LLF);\n    pragma Inline (I_LLI);\n+   pragma Inline (I_LLLI);\n+   pragma Inline (I_LLLU);\n    pragma Inline (I_LLU);\n    pragma Inline (I_LU);\n    pragma Inline (I_SF);\n@@ -198,6 +209,8 @@ private\n    pragma Inline (W_LI);\n    pragma Inline (W_LLF);\n    pragma Inline (W_LLI);\n+   pragma Inline (W_LLLI);\n+   pragma Inline (W_LLLU);\n    pragma Inline (W_LLU);\n    pragma Inline (W_LU);\n    pragma Inline (W_SF);"}, {"sha": "665458fb1f07f82a0a24debd8f2cd6d96abb544d", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09afbd1c6f17b150a8d4ce26cd65f390d056035/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=a09afbd1c6f17b150a8d4ce26cd65f390d056035", "patch": "@@ -1869,6 +1869,8 @@ package Rtsfind is\n      RE_I_LI,                            -- System.Stream_Attributes\n      RE_I_LLF,                           -- System.Stream_Attributes\n      RE_I_LLI,                           -- System.Stream_Attributes\n+     RE_I_LLLI,                          -- System.Stream_Attributes\n+     RE_I_LLLU,                          -- System.Stream_Attributes\n      RE_I_LLU,                           -- System.Stream_Attributes\n      RE_I_LU,                            -- System.Stream_Attributes\n      RE_I_SF,                            -- System.Stream_Attributes\n@@ -1892,6 +1894,8 @@ package Rtsfind is\n      RE_W_LI,                            -- System.Stream_Attributes\n      RE_W_LLF,                           -- System.Stream_Attributes\n      RE_W_LLI,                           -- System.Stream_Attributes\n+     RE_W_LLLI,                          -- System.Stream_Attributes\n+     RE_W_LLLU,                          -- System.Stream_Attributes\n      RE_W_LLU,                           -- System.Stream_Attributes\n      RE_W_LU,                            -- System.Stream_Attributes\n      RE_W_SF,                            -- System.Stream_Attributes\n@@ -3550,6 +3554,8 @@ package Rtsfind is\n      RE_I_LI                             => System_Stream_Attributes,\n      RE_I_LLF                            => System_Stream_Attributes,\n      RE_I_LLI                            => System_Stream_Attributes,\n+     RE_I_LLLI                           => System_Stream_Attributes,\n+     RE_I_LLLU                           => System_Stream_Attributes,\n      RE_I_LLU                            => System_Stream_Attributes,\n      RE_I_LU                             => System_Stream_Attributes,\n      RE_I_SF                             => System_Stream_Attributes,\n@@ -3573,6 +3579,8 @@ package Rtsfind is\n      RE_W_LI                             => System_Stream_Attributes,\n      RE_W_LLF                            => System_Stream_Attributes,\n      RE_W_LLI                            => System_Stream_Attributes,\n+     RE_W_LLLI                           => System_Stream_Attributes,\n+     RE_W_LLLU                           => System_Stream_Attributes,\n      RE_W_LLU                            => System_Stream_Attributes,\n      RE_W_LU                             => System_Stream_Attributes,\n      RE_W_SF                             => System_Stream_Attributes,"}]}