{"sha": "774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0YzNkODY0N2NjNzAxMjkzN2NmYzlkMmQ2ZGFjYzg1YjZjZjhlOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-26T19:18:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-26T19:18:24Z"}, "message": "cmath (pow(float, int), [...]): Do not define in C++0x mode, per DR 550.\n\n2008-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/c_global/cmath (pow(float, int), pow(double, int),\n\tpow(long double, int)): Do not define in C++0x mode, per DR 550.\n\t* include/tr1_impl/cmath (pow): Do not bring in unconditionally\n\tfrom namespace std.\n\t* include/tr1/cmath (pow(double, double), pow(float, float),\n\tpow(long double, long double), pow(_Tp, _Up)): Define.\n\t* include/tr1/complex (pow): Do not bring in from namespace std.\n\t(pow(const std::complex<_Tp>&, int), pow(const std::complex<_Tp>&,\n\tconst _Tp&), pow(const _Tp&, const std::complex<_Tp>&),\n\tpow(const std::complex<_Tp>&, const std::complex<_Tp>&)): Define.\n\t* include/tr1_impl/complex (pow(const std::complex<_Tp>&,\n\tconst _Up&), pow(const _Tp&, const std::complex<_Up>&),\n\tpow(const std::complex<_Tp>&, const std::complex<_Up>&)): Always\n\tdefine.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 550.\n\t* testsuite/26_numerics/headers/cmath/dr550.cc: New.\n\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: Adjust.\n\nFrom-SVN: r135955", "tree": {"sha": "1c714aed772d1688bc92edf6c7d871cc35e11712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c714aed772d1688bc92edf6c7d871cc35e11712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/comments", "author": null, "committer": null, "parents": [{"sha": "ba977e1ad972fdad98e39864d12f1d204935af2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba977e1ad972fdad98e39864d12f1d204935af2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba977e1ad972fdad98e39864d12f1d204935af2f"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "1c023cfe8279815a0d4b870e8d5738fc3045daae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -1,3 +1,23 @@\n+2008-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/c_global/cmath (pow(float, int), pow(double, int),\n+\tpow(long double, int)): Do not define in C++0x mode, per DR 550.\n+\t* include/tr1_impl/cmath (pow): Do not bring in unconditionally\n+\tfrom namespace std.\n+\t* include/tr1/cmath (pow(double, double), pow(float, float),\n+\tpow(long double, long double), pow(_Tp, _Up)): Define.\n+\t* include/tr1/complex (pow): Do not bring in from namespace std.\n+\t(pow(const std::complex<_Tp>&, int), pow(const std::complex<_Tp>&,\n+\tconst _Tp&), pow(const _Tp&, const std::complex<_Tp>&),\n+\tpow(const std::complex<_Tp>&, const std::complex<_Tp>&)): Define.\n+\t* include/tr1_impl/complex (pow(const std::complex<_Tp>&,\n+\tconst _Up&), pow(const _Tp&, const std::complex<_Up>&),\n+\tpow(const std::complex<_Tp>&, const std::complex<_Up>&)): Always\n+\tdefine.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 550.\n+\t* testsuite/26_numerics/headers/cmath/dr550.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: Adjust.\n+\n 2008-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple: Ifndef __GXX_EXPERIMENTAL_CXX0X__ just error out."}, {"sha": "1f6708dac9a379856be852564abef8d50a8a558b", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -611,6 +611,12 @@\n     <listitem><para>Follow the straightforward proposed resolution.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#550\">550</ulink>:\n+        <emphasis>What should the return type of pow(float,int) be?</emphasis>\n+    </term>\n+    <listitem><para>In C++0x mode, remove the pow(float,int), etc., signatures.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#586\">586</ulink>:\n         <emphasis>string inserter not a formatted function</emphasis>\n     </term>"}, {"sha": "dd26db1a718795841e578de2dcdff603ec14f3b7", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -367,7 +367,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   pow(long double __x, long double __y)\n   { return __builtin_powl(__x, __y); }\n \n-  // DR 550.\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 550. What should the return type of pow(float,int) be?\n   inline double\n   pow(double __x, int __i)\n   { return __builtin_powi(__x, __i); }\n@@ -379,6 +381,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   inline long double\n   pow(long double __x, int __n)\n   { return __builtin_powil(__x, __n); }\n+#endif\n \n   template<typename _Tp, typename _Up>\n     inline"}, {"sha": "a9c5aecf0185af437f900ec8680735314812dfa3", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -56,6 +56,34 @@\n #  undef _GLIBCXX_INCLUDE_AS_TR1\n #endif\n \n+namespace std\n+{\n+namespace tr1\n+{\n+  // DR 550. What should the return type of pow(float,int) be?\n+  // NB: C++0x and TR1 != C++03.\n+  inline double\n+  pow(double __x, double __y)\n+  { return std::pow(__x, __y); }\n+\n+  inline float\n+  pow(float __x, float __y)\n+  { return std::pow(__x, __y); }\n+\n+  inline long double\n+  pow(long double __x, long double __y)\n+  { return std::pow(__x, __y); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    pow(_Tp __x, _Up __y)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n+      return std::pow(__type(__x), __type(__y));\n+    }\n+}\n+}\n+\n #include <bits/stl_algobase.h>\n #include <limits>\n #include <tr1/type_traits>"}, {"sha": "b571a5982edc496494bd2a00d408c57df0a56e53", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -75,9 +75,27 @@ namespace tr1\n     }\n \n   using std::real;\n-  using std::pow;\n+\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    pow(const std::complex<_Tp>& __x, int __n)\n+    { return std::pow(__x, __n); }\n+\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    pow(const std::complex<_Tp>& __x, const _Tp& __y)\n+    { return std::pow(__x, __y); }\n+\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    pow(const _Tp& __x, const std::complex<_Tp>& __y)\n+    { return std::pow(__x, __y); }\n+\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    pow(const std::complex<_Tp>& __x, const std::complex<_Tp>& __y)\n+    { return std::pow(__x, __y); }\n }\n }\n \n #endif // _GLIBCXX_TR1_COMPLEX\n-"}, {"sha": "d969a8feada7cfb3afdd8fdf6e6e81cbecd4c9ca", "filename": "libstdc++-v3/include/tr1_impl/cmath", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcmath?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -763,7 +763,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       return nexttoward(__type(__x), __y);\n     }\n \n-  using std::pow;\n+  // DR 550. What should the return type of pow(float,int) be?\n+  // NB: C++0x and TR1 != C++03.\n+  //   using std::pow;\n \n   inline float\n   remainder(float __x, float __y)"}, {"sha": "46560deaa4b3a78e0848944faf4a038727c486a5", "filename": "libstdc++-v3/include/tr1_impl/complex", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -301,12 +301,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     fabs(const std::complex<_Tp>& __z)\n     { return std::abs(__z); }\n \n-\n+  /// Additional overloads [8.1.9].\n #if (defined(_GLIBCXX_INCLUDE_AS_CXX0X) \\\n      || (defined(_GLIBCXX_INCLUDE_AS_TR1) \\\n \t && !defined(__GXX_EXPERIMENTAL_CXX0X__)))\n \n-  /// Additional overloads [8.1.9].\n   template<typename _Tp>\n     inline typename __gnu_cxx::__promote<_Tp>::__type\n     arg(_Tp __x)\n@@ -338,6 +337,8 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     real(_Tp __x)\n     { return __x; }\n \n+#endif\n+\n   template<typename _Tp, typename _Up>\n     inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>\n     pow(const std::complex<_Tp>& __x, const _Up& __y)\n@@ -363,7 +364,5 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t      std::complex<__type>(__y));\n     }\n \n-#endif\n-\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "b3a9ce0255dd60ea8e95fb28bb7adc9e275eabd8", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/dr550.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr550.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr550.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr550.cc?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// DR 550. What should the return type of pow(float,int) be?\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::check_ret_type;\n+\n+  const int          i1 = 1;\n+  const float        f1 = 1.0f;\n+  const double       d1 = 1.0;\n+  const long double ld1 = 1.0l;\n+\n+  check_ret_type<double>(std::pow(f1, i1));\n+  VERIFY( std::pow(f1, i1) == std::pow(double(f1), double(i1)) );\n+  check_ret_type<double>(std::pow(d1, i1));\n+  check_ret_type<long double>(std::pow(ld1, i1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fea560fc293e3330a163a1ad50c9384cbd9f4193", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/overloads.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc?ref=774c3d8647cc7012937cfc9d2d6dacc85b6cf8e9", "patch": "@@ -206,9 +206,7 @@ void test01()\n   check_ret_type<long double>(std::tr1::pow(ld0, d0));\n   check_ret_type<double>(std::tr1::pow(i0, i0));\n   check_ret_type<double>(std::tr1::pow(d0, i0));\n-  // DR 550.\n-  // check_ret_type<double>(std::tr1::pow(f0, i0));\n-  check_ret_type<float>(std::tr1::pow(f0, i0));\n+  check_ret_type<double>(std::tr1::pow(f0, i0));\n \n   check_ret_type<double>(std::tr1::remainder(d0, d0));\n   check_ret_type<double>(std::tr1::remainder(d0, f0));"}]}