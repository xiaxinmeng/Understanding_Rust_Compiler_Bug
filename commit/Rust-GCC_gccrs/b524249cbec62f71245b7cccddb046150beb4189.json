{"sha": "b524249cbec62f71245b7cccddb046150beb4189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyNDI0OWNiZWM2MmY3MTI0NWI3Y2NjZGRiMDQ2MTUwYmViNDE4OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-07-24T23:22:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-07-24T23:22:41Z"}, "message": "crc32.c: New file.\n\nlibiberty/:\n\t* crc32.c: New file.\n\t* Makefile.in: Rebuild dependencies.\n\t(CFILES): Add crc32.c.\n\t(REQUIRED_OFILES): Add ./crc32.o.\n\t* functions.texi: Rebuild.\ninclude/:\n\t* libiberty.h (crc32): Declare.\n\nFrom-SVN: r150067", "tree": {"sha": "06391e2bbc357e793b4a7f9749c97012828c5e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06391e2bbc357e793b4a7f9749c97012828c5e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b524249cbec62f71245b7cccddb046150beb4189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b524249cbec62f71245b7cccddb046150beb4189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b524249cbec62f71245b7cccddb046150beb4189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b524249cbec62f71245b7cccddb046150beb4189/comments", "author": null, "committer": null, "parents": [{"sha": "cbea518e5bed234467f0c1108a623fd49a251b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbea518e5bed234467f0c1108a623fd49a251b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbea518e5bed234467f0c1108a623fd49a251b80"}], "stats": {"total": 243, "additions": 225, "deletions": 18}, "files": [{"sha": "6aba7751e758c5befabb57308d2ba197951e1ec2", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -1,3 +1,7 @@\n+2009-07-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* libiberty.h (crc32): Declare.\n+\n 2009-07-20  Cary Coutant  <ccoutant@google.com>\n \t    Doug Evans  <dje@google.com>\n "}, {"sha": "e50ad64712ea10f16dc5c1b6a893cc5c6e9a181e", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -1,6 +1,7 @@\n /* Function declarations for libiberty.\n \n-   Copyright 2001, 2002, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    \n    Note - certain prototypes declared in this header file are for\n    functions whoes implementation copyright does not belong to the\n@@ -311,6 +312,8 @@ extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC;\n extern double physmem_total (void);\n extern double physmem_available (void);\n \n+/* Compute the 32-bit CRC of a block of memory.  */\n+extern unsigned int crc32 (const unsigned char *, int, unsigned int);\n \n /* These macros provide a K&R/C89/C++-friendly way of allocating structures\n    with nice encapsulation.  The XDELETE*() macros are technically"}, {"sha": "516a90d58fcb693485a2e24bc4d414390532f9a4", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -1,3 +1,11 @@\n+2009-07-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* crc32.c: New file.\n+\t* Makefile.in: Rebuild dependencies.\n+\t(CFILES): Add crc32.c.\n+\t(REQUIRED_OFILES): Add ./crc32.o.\n+\t* functions.texi: Rebuild.\n+\n 2009-07-17  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* cp-demangle.c (d_print_comp <DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS>)\n@@ -92,7 +100,7 @@\n        * libiberty/configure.ac: Fix Linux/MIPS matching rule.\n        * libiberty/configure: Regenerate.\n \n-2008-03-27  Ian Lance Taylor  <iant@google.com>\n+2009-03-27  Ian Lance Taylor  <iant@google.com>\n \n \t* memmem.c: New file, from gnulib.\n \t* configure.ac: Add memmem to list of functions provided if they"}, {"sha": "20a7210a1a1504f075b74ee95f50f5124b7bb85f", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -124,7 +124,7 @@ COMPILE.c = $(CC) -c @DEFS@ $(CFLAGS) $(CPPFLAGS) -I. -I$(INCDIR) $(HDEFINES) @a\n CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tbasename.c bcmp.c bcopy.c bsearch.c bzero.c\t\t\t\\\n \tcalloc.c choose-temp.c clock.c concat.c cp-demangle.c\t\t\\\n-\t cp-demint.c cplus-dem.c\t\t\t\t\t\\\n+\t cp-demint.c cplus-dem.c crc32.c\t\t\t\t\\\n \tdyn-string.c\t\t\t\t\t\t\t\\\n \tfdmatch.c ffs.c fibheap.c filename_cmp.c floatformat.c\t\t\\\n \tfnmatch.c fopen_unlocked.c\t\t\t\t\t\\\n@@ -160,7 +160,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./regex.o ./cplus-dem.o ./cp-demangle.o ./md5.o ./sha1.o\t\\\n \t./alloca.o ./argv.o\t\t\t\t\t\t\\\n-\t./choose-temp.o ./concat.o ./cp-demint.o\t\t\t\\\n+\t./choose-temp.o ./concat.o ./cp-demint.o ./crc32.o\t\t\\\n \t./dyn-string.o\t\t\t\t\t\t\t\\\n \t./fdmatch.o ./fibheap.o ./filename_cmp.o ./floatformat.o\t\\\n \t./fnmatch.o ./fopen_unlocked.o\t\t\t\t\t\\\n@@ -603,6 +603,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/cplus-dem.c $(OUTPUT_OPTION)\n \n+./crc32.o: $(srcdir)/crc32.c config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/crc32.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/crc32.c $(OUTPUT_OPTION)\n+\n ./dyn-string.o: $(srcdir)/dyn-string.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/dyn-string.h $(INCDIR)/libiberty.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\"}, {"sha": "2171a3d1c7fbe9e7611fafdc36310b1c57a7c569", "filename": "libiberty/crc32.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2Fcrc32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2Fcrc32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcrc32.c?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -0,0 +1,167 @@\n+/* crc32.c\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+   This file is part of the libiberty library.\n+\n+   This file is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combined\n+   executable.)\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+#include \"libiberty.h\"\n+\n+/* This table was generated by the following program.  This matches\n+   what gdb does.\n+\n+   #include <stdio.h>\n+\n+   int\n+   main ()\n+   {\n+     int i, j;\n+     unsigned int c;\n+     int table[256];\n+\n+     for (i = 0; i < 256; i++)\n+       {\n+\t for (c = i << 24, j = 8; j > 0; --j)\n+\t   c = c & 0x80000000 ? (c << 1) ^ 0x04c11db7 : (c << 1);\n+\t table[i] = c;\n+       }\n+\n+     printf (\"static const unsigned int crc32_table[] =\\n{\\n\");\n+     for (i = 0; i < 256; i += 4)\n+       {\n+\t printf (\"  0x%08x, 0x%08x, 0x%08x, 0x%08x\",\n+\t\t table[i + 0], table[i + 1], table[i + 2], table[i + 3]);\n+\t if (i + 4 < 256)\n+\t   putchar (',');\n+\t putchar ('\\n');\n+       }\n+     printf (\"};\\n\");\n+     return 0;\n+   }\n+\n+   For more information on CRC, see, e.g.,\n+   http://www.ross.net/crc/download/crc_v3.txt.  */\n+\n+static const unsigned int crc32_table[] =\n+{\n+  0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,\n+  0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,\n+  0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n+  0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,\n+  0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,\n+  0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n+  0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,\n+  0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,\n+  0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n+  0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,\n+  0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,\n+  0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n+  0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,\n+  0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,\n+  0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n+  0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,\n+  0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,\n+  0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n+  0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,\n+  0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,\n+  0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n+  0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,\n+  0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,\n+  0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n+  0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,\n+  0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,\n+  0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n+  0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,\n+  0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,\n+  0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n+  0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,\n+  0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,\n+  0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n+  0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,\n+  0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,\n+  0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n+  0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,\n+  0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,\n+  0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n+  0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,\n+  0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,\n+  0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n+  0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,\n+  0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,\n+  0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n+  0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,\n+  0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,\n+  0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n+  0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,\n+  0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,\n+  0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n+  0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,\n+  0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,\n+  0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n+  0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,\n+  0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,\n+  0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n+  0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,\n+  0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,\n+  0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n+  0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,\n+  0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,\n+  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n+  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n+};\n+\n+/*\n+\n+@deftypefn Extension unsigned int crc32 (const unsigned char *@var{buf}, int @var{len}, unsigned int @var{init})\n+\n+Compute the 32-bit CRC of @var{buf} which has length @var{len}.  The\n+starting value is @var{init}; this may be used to compute the CRC of\n+data split across multiple buffers by passing the return value of each\n+call as the @var{init} parameter of the next.\n+\n+This is intended to match the CRC used by the @command{gdb} remote\n+protocol for the @samp{qCRC} command.  In order to get the same\n+results as gdb for a block of data, you must pass the first CRC\n+parameter as @code{0xffffffff}.\n+\n+@end deftypefn\n+\n+*/\n+\n+unsigned int\n+crc32 (const unsigned char *buf, int len, unsigned int init)\n+{\n+  unsigned int crc = init;\n+  while (len--)\n+    {\n+      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];\n+      buf++;\n+    }\n+  return crc;\n+}"}, {"sha": "9598b3c83ed0d8001b3c64f264add44a24da19a6", "filename": "libiberty/functions.texi", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b524249cbec62f71245b7cccddb046150beb4189/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=b524249cbec62f71245b7cccddb046150beb4189", "patch": "@@ -185,6 +185,21 @@ pointer encountered.  Pointers to empty strings are ignored.\n \n @end deftypefn\n \n+@c crc32.c:141\n+@deftypefn Extension unsigned int crc32 (const unsigned char *@var{buf}, int @var{len}, unsigned int @var{init})\n+\n+Compute the 32-bit CRC of @var{buf} which has length @var{len}.  The\n+starting value is @var{init}; this may be used to compute the CRC of\n+data split across multiple buffers by passing the return value of each\n+call as the @var{init} parameter of the next.\n+\n+This is intended to match the CRC used by the @command{gdb} remote\n+protocol for the @samp{qCRC} command.  In order to get the same\n+results as gdb for a block of data, you must pass the first CRC\n+parameter as @code{0xffffffff}.\n+\n+@end deftypefn\n+\n @c argv.c:52\n @deftypefn Extension char** dupargv (char **@var{vector})\n \n@@ -1111,13 +1126,15 @@ be the value @code{1}).\n @c snprintf.c:28\n @deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, ...)\n \n-This function is similar to sprintf, but it will print at most @var{n}\n-characters.  On error the return value is -1, otherwise it returns the\n-number of characters that would have been printed had @var{n} been\n-sufficiently large, regardless of the actual value of @var{n}.  Note\n-some pre-C99 system libraries do not implement this correctly so users\n-cannot generally rely on the return value if the system version of\n-this function is used.\n+This function is similar to @code{sprintf}, but it will write to\n+@var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n+terminating null byte, for a total of @var{n} bytes.\n+On error the return value is -1, otherwise it returns the number of\n+bytes, not including the terminating null byte, that would have been\n+written had @var{n} been sufficiently large, regardless of the actual\n+value of @var{n}.  Note some pre-C99 system libraries do not implement\n+this correctly so users cannot generally rely on the return value if\n+the system version of this function is used.\n \n @end deftypefn\n \n@@ -1464,13 +1481,15 @@ nonstandard but common function @code{_doprnt}.\n @c vsnprintf.c:28\n @deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, va_list @var{ap})\n \n-This function is similar to vsprintf, but it will print at most\n-@var{n} characters.  On error the return value is -1, otherwise it\n-returns the number of characters that would have been printed had\n-@var{n} been sufficiently large, regardless of the actual value of\n-@var{n}.  Note some pre-C99 system libraries do not implement this\n-correctly so users cannot generally rely on the return value if the\n-system version of this function is used.\n+This function is similar to @code{vsprintf}, but it will write to\n+@var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n+terminating null byte, for a total of @var{n} bytes.  On error the\n+return value is -1, otherwise it returns the number of characters that\n+would have been printed had @var{n} been sufficiently large,\n+regardless of the actual value of @var{n}.  Note some pre-C99 system\n+libraries do not implement this correctly so users cannot generally\n+rely on the return value if the system version of this function is\n+used.\n \n @end deftypefn\n "}]}