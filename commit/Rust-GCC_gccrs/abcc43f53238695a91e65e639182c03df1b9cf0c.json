{"sha": "abcc43f53238695a91e65e639182c03df1b9cf0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjYzQzZjUzMjM4Njk1YTkxZTY1ZTYzOTE4MmMwM2RmMWI5Y2YwYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-21T20:19:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-21T20:19:25Z"}, "message": "Move cabs simplifications to match.pd\n\nThe fold code also expanded cabs(x+yi) to fsqrt(x*x+y*y) when optimising\nfor speed.  tree-ssa-math-opts.c has this transformation too, but unlike\nthe fold code, it first checks whether the target implements the sqrt\noptab.  The patch simply removes the fold code and keeps the\ntree-ssa-math-opts.c logic the same.\n\ngcc.dg/lto/20110201-1_0.c was relying on us replacing cabs\nwith fsqrt even on targets where fsqrt is itself a library call.\nThe discussion leading up to that patch suggested that we only\nwant to test the fold on targets with a square root instruction,\nso it would be OK to skip the test on other targets:\n\n        https://gcc.gnu.org/ml/gcc-patches/2011-07/msg01961.html\n        https://gcc.gnu.org/ml/gcc-patches/2011-07/msg02036.html\n\nThe patch does that using the sqrt_insn effective target.\n\nIt's possible that removing the tree folds renders the LTO trick\nunnecessary, but since the test was originally for an ICE, it seems\nbetter to leave it as-is.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n20110201-1_0.c passes on all three.\n\ngcc/\n\t* builtins.c (fold_builtin_cabs): Delete.\n\t(fold_builtin_1): Update accordingly.  Handle constant arguments here.\n\t* match.pd: Add rules previously handled by fold_builtin_cabs.\n\ngcc/testsuite/\n\t* gcc.dg/lto/20110201-1_0.c: Restrict to sqrt_insn targets.\n\tAdd associated options for arm*-*-*.\n\t(sqrt): Remove dummy definition.\n\nFrom-SVN: r229141", "tree": {"sha": "6b28454ef437717184e8a12849ad52ead35988df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b28454ef437717184e8a12849ad52ead35988df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abcc43f53238695a91e65e639182c03df1b9cf0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcc43f53238695a91e65e639182c03df1b9cf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcc43f53238695a91e65e639182c03df1b9cf0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcc43f53238695a91e65e639182c03df1b9cf0c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adfc9a5d353d64b5bf39536064d300f9e45a0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adfc9a5d353d64b5bf39536064d300f9e45a0cf"}], "stats": {"total": 125, "additions": 38, "deletions": 87}, "files": [{"sha": "8271924da317b926d2db78edfa428dd2c862fb9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abcc43f53238695a91e65e639182c03df1b9cf0c", "patch": "@@ -1,3 +1,9 @@\n+2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_cabs): Delete.\n+\t(fold_builtin_1): Update accordingly.  Handle constant arguments here.\n+\t* match.pd: Add rules previously handled by fold_builtin_cabs.\n+\n 2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* fold-const.h (fold_strip_sign_ops): Delete."}, {"sha": "2318b2859fcfa5684b7cd28f8494bc2a250f9dcf", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 77, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=abcc43f53238695a91e65e639182c03df1b9cf0c", "patch": "@@ -7538,82 +7538,6 @@ fold_fixed_mathfn (location_t loc, tree fndecl, tree arg)\n   return NULL_TREE;\n }\n \n-/* Fold call to builtin cabs, cabsf or cabsl with argument ARG.  TYPE is the\n-   return type.  Return NULL_TREE if no simplification can be made.  */\n-\n-static tree\n-fold_builtin_cabs (location_t loc, tree arg, tree type, tree fndecl)\n-{\n-  tree res;\n-\n-  if (!validate_arg (arg, COMPLEX_TYPE)\n-      || TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) != REAL_TYPE)\n-    return NULL_TREE;\n-\n-  /* Calculate the result when the argument is a constant.  */\n-  if (TREE_CODE (arg) == COMPLEX_CST\n-      && (res = do_mpfr_arg2 (TREE_REALPART (arg), TREE_IMAGPART (arg),\n-\t\t\t      type, mpfr_hypot)))\n-    return res;\n-\n-  if (TREE_CODE (arg) == COMPLEX_EXPR)\n-    {\n-      tree real = TREE_OPERAND (arg, 0);\n-      tree imag = TREE_OPERAND (arg, 1);\n-\n-      /* If either part is zero, cabs is fabs of the other.  */\n-      if (real_zerop (real))\n-\treturn fold_build1_loc (loc, ABS_EXPR, type, imag);\n-      if (real_zerop (imag))\n-\treturn fold_build1_loc (loc, ABS_EXPR, type, real);\n-\n-      /* cabs(x+xi) -> fabs(x)*sqrt(2).  */\n-      if (flag_unsafe_math_optimizations\n-\t  && operand_equal_p (real, imag, OEP_PURE_SAME))\n-        {\n-\t  STRIP_NOPS (real);\n-\t  return fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t  fold_build1_loc (loc, ABS_EXPR, type, real),\n-\t\t\t\t  build_real_truncate (type, dconst_sqrt2 ()));\n-\t}\n-    }\n-\n-  /* Optimize cabs(-z) and cabs(conj(z)) as cabs(z).  */\n-  if (TREE_CODE (arg) == NEGATE_EXPR\n-      || TREE_CODE (arg) == CONJ_EXPR)\n-    return build_call_expr_loc (loc, fndecl, 1, TREE_OPERAND (arg, 0));\n-\n-  /* Don't do this when optimizing for size.  */\n-  if (flag_unsafe_math_optimizations\n-      && optimize && optimize_function_for_speed_p (cfun))\n-    {\n-      tree sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n-\n-      if (sqrtfn != NULL_TREE)\n-\t{\n-\t  tree rpart, ipart, result;\n-\n-\t  arg = builtin_save_expr (arg);\n-\n-\t  rpart = fold_build1_loc (loc, REALPART_EXPR, type, arg);\n-\t  ipart = fold_build1_loc (loc, IMAGPART_EXPR, type, arg);\n-\n-\t  rpart = builtin_save_expr (rpart);\n-\t  ipart = builtin_save_expr (ipart);\n-\n-\t  result = fold_build2_loc (loc, PLUS_EXPR, type,\n-\t\t\t\tfold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t\t     rpart, rpart),\n-\t\t\t\tfold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t\t     ipart, ipart));\n-\n-\t  return build_call_expr_loc (loc, sqrtfn, 1, result);\n-\t}\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Build a complex (inf +- 0i) for the result of cproj.  TYPE is the\n    complex tree type of the result.  If NEG is true, the imaginary\n    zero is negative.  */\n@@ -9655,7 +9579,11 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_CABS):\n-      return fold_builtin_cabs (loc, arg0, type, fndecl);\n+      if (TREE_CODE (arg0) == COMPLEX_CST\n+\t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)\n+        return do_mpfr_arg2 (TREE_REALPART (arg0), TREE_IMAGPART (arg0),\n+\t\t\t     type, mpfr_hypot);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_CARG):\n       return fold_builtin_carg (loc, arg0, type);"}, {"sha": "0a9598e1f799e76852b425aca1283de69bcd4b92", "filename": "gcc/match.pd", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=abcc43f53238695a91e65e639182c03df1b9cf0c", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list COPYSIGN BUILT_IN_COPYSIGNF\n \t\t\t       BUILT_IN_COPYSIGN\n \t\t\t       BUILT_IN_COPYSIGNL)\n+(define_operator_list CABS BUILT_IN_CABSF BUILT_IN_CABS BUILT_IN_CABSL)\n \n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n@@ -394,6 +395,13 @@ along with GCC; see the file COPYING3.  If not see\n   (ccoss (negate @0))\n    (ccoss @0)))\n \n+/* cabs(-x) and cos(conj(x)) -> cabs(x).  */\n+(for ops (conj negate)\n+ (for cabss (CABS)\n+  (simplify\n+   (cabss (ops @0))\n+   (cabss @0))))\n+\n /* Fold (a * (1 << b)) into (a << b)  */\n (simplify\n  (mult:c @0 (convert? (lshift integer_onep@1 @2)))\n@@ -2368,6 +2376,11 @@ along with GCC; see the file COPYING3.  If not see\n    (cbrts (exps @0))\n    (exps (mult @0 { build_real_truncate (type, dconst_third ()); })))))\n \n+/* cabs(x+0i) or cabs(0+xi) -> abs(x).  */\n+(simplify\n+ (CABS (complex:c @0 real_zerop@1))\n+ (abs @0))\n+\n /* Canonicalization of sequences of math builtins.  These rules represent\n    IL simplifications but are not necessarily optimizations.\n \n@@ -2459,7 +2472,12 @@ along with GCC; see the file COPYING3.  If not see\n   /* cbrt(pow(x,y)) -> pow(x,y/3), iff x is nonnegative.  */\n   (simplify\n    (cbrts (pows tree_expr_nonnegative_p@0 @1))\n-   (pows @0 (mult @1 { build_real_truncate (type, dconst_third ()); })))))\n+   (pows @0 (mult @1 { build_real_truncate (type, dconst_third ()); }))))\n+\n+ /* cabs(x+xi) -> fabs(x)*sqrt(2).  */\n+ (simplify\n+  (CABS (complex @0 @0))\n+  (mult (abs @0) { build_real_truncate (type, dconst_sqrt2 ()); })))\n \n /* If the real part is inf and the imag part is known to be\n    nonnegative, return (inf + 0i).  */"}, {"sha": "9c76295c91689b74f21d6103d79448bce244912a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abcc43f53238695a91e65e639182c03df1b9cf0c", "patch": "@@ -1,3 +1,9 @@\n+2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/lto/20110201-1_0.c: Restrict to sqrt_insn targets.\n+\tAdd associated options for arm*-*-*.\n+\t(sqrt): Remove dummy definition.\n+\n 2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/torture/builtin-symmetric-1.c: Don't run at -O0."}, {"sha": "068dddc3a84f7c4fd823fe8558e476c7d9bed9b4", "filename": "gcc/testsuite/gcc.dg/lto/20110201-1_0.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcc43f53238695a91e65e639182c03df1b9cf0c/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20110201-1_0.c?ref=abcc43f53238695a91e65e639182c03df1b9cf0c", "patch": "@@ -1,6 +1,8 @@\n /* { dg-lto-do run } */\n /* { dg-lto-options { { -O0 -flto } } } */\n+/* { dg-lto-options { \"-O0 -flto -mfloat-abi=softfp -mfpu=neon-vfpv4\" } { target arm*-*-* } } */\n /* { dg-require-linker-plugin \"\" } */\n+/* { dg-require-effective-target sqrt_insn } */\n \n /* We require a linker plugin because otherwise we'd need to link\n    against libm which we are not sure here has cabs on all targets.\n@@ -16,13 +18,4 @@ foo (_Complex double x, int b)\n   return cabs(x);\n }\n \n-/* We provide a dummy sqrt to avoid link failures on targets that do not\n-   expand sqrt inline.  Note that we do not link against libm in order\n-   to ensure cabs is not satisfied by the library, but must be folded.  */\n-double __attribute__((used))\n-sqrt (double x)\n-{\n-  return x;\n-}\n-\n int main() { return 0; }"}]}