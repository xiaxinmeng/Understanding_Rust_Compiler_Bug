{"sha": "a4e577b044d69977f93b2cb7769dc991eadf2cf0", "node_id": "C_kwDOANBUbNoAKGE0ZTU3N2IwNDRkNjk5NzdmOTNiMmNiNzc2OWRjOTkxZWFkZjJjZjA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-02T01:11:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-02T01:11:53Z"}, "message": "c++: comptypes ICE with BOUND_TEMPLATE_TEMPLATE_PARMs [PR107539]\n\nHere we end up giving the two BOUND_TEMPLATE_TEMPLATE_PARMs\nC<decltype(f::t)> and C<decltype(g::t)> the same TYPE_CANONICAL because\nthe hash table that interns TYPE_CANONICAL for template type parameters\ndoesn't set the comparing_specializations flag which controls how\nPARM_DECLs from different contexts compare equal.\n\nLater, from spec_hasher::equal for the corresponding two specializations\nA<C<decltype(f::t)>> and A<C<decltype(g::t)>>, we compare the two bound\nttps with comparing_specializations set hence they now (structurally)\ncompare different despite having the same TYPE_CANONICAL, and so we get\nthe error:\n\n  internal compiler error: same canonical type node for different types\n    'C<decltype (t)>' and 'C<decltype (t)>'\n\nThis suggests that we should be setting comparing_specializations from\nctp_hasher::equal to match spec_hasher::equal.  But doing so introduces\na separate ICE in cpp2a/concepts-placeholder3.C:\n\n  internal compiler error: canonical types differ for identical types\n    'auto [requires ::same_as<<placeholder>, decltype(f::x)>]' and\n    'auto [requires ::same_as<<placeholder>, decltype(g::x)>]'\n\nbecause norm_hasher::equal doesn't set comparing_specializations either.\n\nI'm not sure when exactly we need to set comparing_specializations given\nwhat it controls (TYPENAME_TYPE equality/hashing and PARM_DECL equality)\nbut it seems to be the conservative choice to set the flag wherever we\nhave a global hash table that relies on type equality.  To that end this\npatch sets comparing_specializations in ctp_hasher and norm_hasher, as\nwell as in atom_hasher and sat_hasher for good measure.  This turns out\nto be a compile time win of about 2% in some concepts tests, probably\nbecause of the improved TYPENAME_TYPE hashing enabled by the flag.\n\n\tPR c++/107539\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (norm_hasher::hash, norm_hasher::equal): Set\n\tcomparing_specializations.\n\t(sat_hasher::hash, sat_hasher::equal): Likewise.\n\t* cp-tree.h (atom_hasher::hash, atom_hasher::equal): Likewise.\n\t* pt.cc (ctp_hasher::hash, ctp_hasher::equal): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/canon-type-19.C: New test.", "tree": {"sha": "a404151051099e11b2d889a2e6f359558bdf9904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a404151051099e11b2d889a2e6f359558bdf9904"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e577b044d69977f93b2cb7769dc991eadf2cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e577b044d69977f93b2cb7769dc991eadf2cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e577b044d69977f93b2cb7769dc991eadf2cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e577b044d69977f93b2cb7769dc991eadf2cf0/comments", "author": null, "committer": null, "parents": [{"sha": "40adb39566c6e06809fc63ccade8d25bdfc8dd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40adb39566c6e06809fc63ccade8d25bdfc8dd24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40adb39566c6e06809fc63ccade8d25bdfc8dd24"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "37eae03afdb73120be5d03558de917343faae9fd", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=a4e577b044d69977f93b2cb7769dc991eadf2cf0", "patch": "@@ -715,14 +715,20 @@ struct norm_hasher : ggc_ptr_hash<norm_entry>\n {\n   static hashval_t hash (norm_entry *e)\n   {\n-    hashval_t hash = iterative_hash_template_arg (e->tmpl, 0);\n-    return iterative_hash_template_arg (e->args, hash);\n+    ++comparing_specializations;\n+    hashval_t val = iterative_hash_template_arg (e->tmpl, 0);\n+    val = iterative_hash_template_arg (e->args, val);\n+    --comparing_specializations;\n+    return val;\n   }\n \n   static bool equal (norm_entry *e1, norm_entry *e2)\n   {\n-    return e1->tmpl == e2->tmpl\n+    ++comparing_specializations;\n+    bool eq = e1->tmpl == e2->tmpl\n       && template_args_equal (e1->args, e2->args);\n+    --comparing_specializations;\n+    return eq;\n   }\n };\n \n@@ -2530,6 +2536,9 @@ struct sat_hasher : ggc_ptr_hash<sat_entry>\n {\n   static hashval_t hash (sat_entry *e)\n   {\n+    auto cso = make_temp_override (comparing_specializations);\n+    ++comparing_specializations;\n+\n     if (ATOMIC_CONSTR_MAP_INSTANTIATED_P (e->atom))\n       {\n \t/* Atoms with instantiated mappings are built during satisfaction.\n@@ -2564,6 +2573,9 @@ struct sat_hasher : ggc_ptr_hash<sat_entry>\n \n   static bool equal (sat_entry *e1, sat_entry *e2)\n   {\n+    auto cso = make_temp_override (comparing_specializations);\n+    ++comparing_specializations;\n+\n     if (ATOMIC_CONSTR_MAP_INSTANTIATED_P (e1->atom)\n \t!= ATOMIC_CONSTR_MAP_INSTANTIATED_P (e2->atom))\n       return false;"}, {"sha": "addd26ea077efa39e0768f044501e5b55abb4657", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a4e577b044d69977f93b2cb7769dc991eadf2cf0", "patch": "@@ -8418,12 +8418,18 @@ struct atom_hasher : default_hash_traits<tree>\n {\n   static hashval_t hash (tree t)\n   {\n-    return hash_atomic_constraint (t);\n+    ++comparing_specializations;\n+    hashval_t val = hash_atomic_constraint (t);\n+    --comparing_specializations;\n+    return val;\n   }\n \n   static bool equal (tree t1, tree t2)\n   {\n-    return atomic_constraints_identical_p (t1, t2);\n+    ++comparing_specializations;\n+    bool eq = atomic_constraints_identical_p (t1, t2);\n+    --comparing_specializations;\n+    return eq;\n   }\n };\n "}, {"sha": "31691618d1b803af01e931c0534dbe200fcb2c38", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=a4e577b044d69977f93b2cb7769dc991eadf2cf0", "patch": "@@ -4492,18 +4492,23 @@ struct ctp_hasher : ggc_ptr_hash<tree_node>\n {\n   static hashval_t hash (tree t)\n   {\n+    ++comparing_specializations;\n     tree_code code = TREE_CODE (t);\n     hashval_t val = iterative_hash_object (code, 0);\n     val = iterative_hash_object (TEMPLATE_TYPE_LEVEL (t), val);\n     val = iterative_hash_object (TEMPLATE_TYPE_IDX (t), val);\n     if (TREE_CODE (t) == BOUND_TEMPLATE_TEMPLATE_PARM)\n       val = iterative_hash_template_arg (TYPE_TI_ARGS (t), val);\n+    --comparing_specializations;\n     return val;\n   }\n \n   static bool equal (tree t, tree u)\n   {\n-    return comptypes (t, u, COMPARE_STRUCTURAL);\n+    ++comparing_specializations;\n+    bool eq = comptypes (t, u, COMPARE_STRUCTURAL);\n+    --comparing_specializations;\n+    return eq;\n   }\n };\n "}, {"sha": "27ef3f1de3c08ceff69f87ee3b798c792960147c", "filename": "gcc/testsuite/g++.dg/template/canon-type-19.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e577b044d69977f93b2cb7769dc991eadf2cf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-19.C?ref=a4e577b044d69977f93b2cb7769dc991eadf2cf0", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/107539\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+struct A { };\n+\n+template<template<class> class C>\n+struct B {\n+  template<class T>\n+  void f(T t) {\n+    A<C<decltype(t)>> a1;\n+  }\n+\n+  template<class T>\n+  void g(T t) {\n+    A<C<decltype(t)>> a2;\n+  }\n+};"}]}