{"sha": "a766d4d74da96bb308f22fd5c9a607740f76c2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2NmQ0ZDc0ZGE5NmJiMzA4ZjIyZmQ1YzlhNjA3NzQwZjc2YzJiOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-10-14T09:54:32Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-10-14T09:54:32Z"}, "message": "Support only \\0-terminated string in c_getstr and return\n\n\t* fold-const.c (c_getstr): Support of properly \\0-terminated\n\tstring constants.  New argument is added.\n\t* fold-const.h: New argument is added.\n\nFrom-SVN: r241152", "tree": {"sha": "648929aa753753d3f27c6630f7000ed2b5d5e34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/648929aa753753d3f27c6630f7000ed2b5d5e34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a766d4d74da96bb308f22fd5c9a607740f76c2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766d4d74da96bb308f22fd5c9a607740f76c2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a766d4d74da96bb308f22fd5c9a607740f76c2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766d4d74da96bb308f22fd5c9a607740f76c2b9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57c4fbc64b6c15c43b60a7943422c9ff7010694d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c4fbc64b6c15c43b60a7943422c9ff7010694d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c4fbc64b6c15c43b60a7943422c9ff7010694d"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "b907c6622d54eec21874e487c640e88280dc644b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a766d4d74da96bb308f22fd5c9a607740f76c2b9", "patch": "@@ -1,3 +1,9 @@\n+2016-10-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* fold-const.c (c_getstr): Support of properly \\0-terminated\n+\tstring constants.  New argument is added.\n+\t* fold-const.h: New argument is added.\n+\n 2016-10-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_print_hint_for_core_or_arch):"}, {"sha": "89ed89dc25cddadae2deccc8980469596ce1d5d1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a766d4d74da96bb308f22fd5c9a607740f76c2b9", "patch": "@@ -14441,24 +14441,44 @@ fold_build_pointer_plus_hwi_loc (location_t loc, tree ptr, HOST_WIDE_INT off)\n }\n \n /* Return a char pointer for a C string if it is a string constant\n-   or sum of string constant and integer constant.  */\n+   or sum of string constant and integer constant.  We only support\n+   string constants properly terminated with '\\0' character.\n+   If STRLEN is a valid pointer, length (including terminating character)\n+   of returned string is stored to the argument.  */\n \n const char *\n-c_getstr (tree src)\n+c_getstr (tree src, unsigned HOST_WIDE_INT *strlen)\n {\n   tree offset_node;\n \n+  if (strlen)\n+    *strlen = 0;\n+\n   src = string_constant (src, &offset_node);\n   if (src == 0)\n-    return 0;\n+    return NULL;\n \n-  if (offset_node == 0)\n-    return TREE_STRING_POINTER (src);\n-  else if (!tree_fits_uhwi_p (offset_node)\n-\t   || compare_tree_int (offset_node, TREE_STRING_LENGTH (src) - 1) > 0)\n-    return 0;\n+  unsigned HOST_WIDE_INT offset = 0;\n+  if (offset_node != NULL_TREE)\n+    {\n+      if (!tree_fits_uhwi_p (offset_node))\n+\treturn NULL;\n+      else\n+\toffset = tree_to_uhwi (offset_node);\n+    }\n+\n+  unsigned HOST_WIDE_INT string_length = TREE_STRING_LENGTH (src);\n+  const char *string = TREE_STRING_POINTER (src);\n+\n+  /* Support only properly null-terminated strings.  */\n+  if (string_length == 0\n+      || string[string_length - 1] != '\\0'\n+      || offset >= string_length)\n+    return NULL;\n \n-  return TREE_STRING_POINTER (src) + tree_to_uhwi (offset_node);\n+  if (strlen)\n+    *strlen = string_length - offset;\n+  return string + offset;\n }\n \n #if CHECKING_P"}, {"sha": "bc22c88b334d02d4f0125e0d026e30fc3ad2f7ed", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a766d4d74da96bb308f22fd5c9a607740f76c2b9/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=a766d4d74da96bb308f22fd5c9a607740f76c2b9", "patch": "@@ -182,7 +182,7 @@ extern bool expr_not_equal_to (tree t, const wide_int &);\n extern tree const_unop (enum tree_code, tree, tree);\n extern tree const_binop (enum tree_code, tree, tree, tree);\n extern bool negate_mathfn_p (combined_fn);\n-extern const char *c_getstr (tree);\n+extern const char *c_getstr (tree, unsigned HOST_WIDE_INT *strlen = NULL);\n \n /* Return OFF converted to a pointer offset type suitable as offset for\n    POINTER_PLUS_EXPR.  Use location LOC for this conversion.  */"}]}