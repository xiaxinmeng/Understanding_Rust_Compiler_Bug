{"sha": "dddfde5fc33619e2788b4264812d68bbcfd0f82a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkZmRlNWZjMzM2MTllMjc4OGI0MjY0ODEyZDY4YmJjZmQwZjgyYQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-26T14:50:27Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-26T14:50:27Z"}, "message": "2003-11-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(DategramSocket, bind): Moved binding code from DatagramSocket\n\tconstructor to bind method.\n\nFrom-SVN: r73952", "tree": {"sha": "c8a53ad5b9d423e59467290138e06c01847f6a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a53ad5b9d423e59467290138e06c01847f6a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dddfde5fc33619e2788b4264812d68bbcfd0f82a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddfde5fc33619e2788b4264812d68bbcfd0f82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddfde5fc33619e2788b4264812d68bbcfd0f82a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddfde5fc33619e2788b4264812d68bbcfd0f82a/comments", "author": null, "committer": null, "parents": [{"sha": "4aa74bd346b862ac34704642f0483a057cfe73a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa74bd346b862ac34704642f0483a057cfe73a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa74bd346b862ac34704642f0483a057cfe73a3"}], "stats": {"total": 79, "additions": 37, "deletions": 42}, "files": [{"sha": "570890540aeb008fb1daa40d2f74614d55a5ea0d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddfde5fc33619e2788b4264812d68bbcfd0f82a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddfde5fc33619e2788b4264812d68bbcfd0f82a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=dddfde5fc33619e2788b4264812d68bbcfd0f82a", "patch": "@@ -1,3 +1,9 @@\n+2003-11-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(DategramSocket, bind): Moved binding code from DatagramSocket\n+\tconstructor to bind method.\n+\n 2003-11-26  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java"}, {"sha": "f4bc4ea79d5eaced1261d01cc91c50bb0ffcf200", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddfde5fc33619e2788b4264812d68bbcfd0f82a/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddfde5fc33619e2788b4264812d68bbcfd0f82a/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=dddfde5fc33619e2788b4264812d68bbcfd0f82a", "patch": "@@ -187,44 +187,8 @@ public DatagramSocket (SocketAddress address) throws SocketException\n \t  impl = new PlainDatagramSocketImpl();\n \t}\n \n-    if (address == null)\n-      return;\n-\n-    if (! (address instanceof InetSocketAddress))\n-      throw new SocketException(\"unsupported address type\");\n-\n-    InetAddress addr = ((InetSocketAddress) address).getAddress();\n-    int port = ((InetSocketAddress) address).getPort();\n-\n-    if (port < 0 || port > 65535)\n-      throw new IllegalArgumentException(\"Invalid port: \" + port);\n-\n-    SecurityManager s = System.getSecurityManager();\n-    if (s != null)\n-      s.checkListen(port);\n-\n-    if (addr == null)\n-      addr = InetAddress.ANY_IF;\n-    \n-    try\n-      {\n-        getImpl().bind(port, addr);\n-      }\n-    catch (SocketException exception)\n-      {\n-        getImpl().close();\n-        throw exception;\n-      }\n-    catch (RuntimeException exception)\n-      {\n-        getImpl().close();\n-        throw exception;\n-      }\n-    catch (Error error)\n-      {\n-        getImpl().close();\n-        throw error;\n-      }\n+    if (address != null)\n+      bind(address);\n   }\n   \n   // This needs to be accessible from java.net.MulticastSocket\n@@ -671,14 +635,39 @@ public void bind (SocketAddress address)\n     if (! (address instanceof InetSocketAddress))\n       throw new IllegalArgumentException(\"unsupported address type\");\n \n-    InetSocketAddress tmp = (InetSocketAddress) address;\n+    InetAddress addr = ((InetSocketAddress) address).getAddress();\n+    int port = ((InetSocketAddress) address).getPort();\n+\n+    if (port < 0 || port > 65535)\n+      throw new IllegalArgumentException(\"Invalid port: \" + port);\n \n     SecurityManager s = System.getSecurityManager ();\n     if (s != null)\n-      s.checkListen(tmp.getPort ());\n+      s.checkListen(port);\n \n-    getImpl().bind (tmp.getPort (), tmp.getAddress ());\n-    bound = true;\n+    if (addr == null)\n+      addr = InetAddress.ANY_IF;\n+    \n+    try\n+      {\n+        getImpl().bind(port, addr);\n+\tbound = true;\n+      }\n+    catch (SocketException exception)\n+      {\n+        getImpl().close();\n+        throw exception;\n+      }\n+    catch (RuntimeException exception)\n+      {\n+        getImpl().close();\n+        throw exception;\n+      }\n+    catch (Error error)\n+      {\n+        getImpl().close();\n+        throw error;\n+      }\n   }\n \n   /**"}]}