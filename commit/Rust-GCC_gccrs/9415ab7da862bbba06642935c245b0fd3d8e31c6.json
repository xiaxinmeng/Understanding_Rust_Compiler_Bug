{"sha": "9415ab7da862bbba06642935c245b0fd3d8e31c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxNWFiN2RhODYyYmJiYTA2NjQyOTM1YzI0NWIwZmQzZDhlMzFjNg==", "commit": {"author": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2007-06-06T08:02:56Z"}, "committer": {"name": "Thomas Neumann", "email": "tneumann@gcc.gnu.org", "date": "2007-06-06T08:02:56Z"}, "message": "i386.c (enum pta_flags): Move out of struct scope...\n\n\t* config/i386/i386.c (enum pta_flags): Move out of struct scope...\n\t(struct pta): ...from here. Change flags to unsigned to avoid excessive\n\tcasting (as it is used as a bit mask).\n\t(override_options): Add casts according to the coding convenventions.\n\t(x86_64_elf_unique_section): Likewise.\n\t(examine_argument): Avoid using C++ keywords as variable names.\n\t(construct_container): Likewise.\n\t(legitimize_pic_address): Likewise.\n\t(get_dllimport_decl): Cast according to the coding conventions. Use\n\ttype safe memory macros.\n\t(legitimize_address): Cast according to the coding conventions.\n\t(emit_i387_cw_initialization): Corrected the type of slot to enum\n\tix86_stack_slot.\n\t(ix86_init_machine_status): Use type safe memory macros.\n\t(bdesc_pcmpestr): Use UNKNOWN instead of integer 0.\n\t(bdesc_pcmpistr): Likewise.\n\t(bdesc_crc32): Likewise.\n\t(bdesc_sse_3arg): Likewise.\n\t(bdesc_2arg): Likewise.\n\t(bdesc_1arg): Likewise.\n\t(ix86_expand_sse_pcmpestr): Cast according to the coding conventions.\n\t(ix86_expand_sse_pcmpistr): Likewise.\n\t(ix86_expand_vec_set_builtin): Use EXPAND_NORMAL instead of integer 0.\n\t(ix86_builtin_vectorized_function): Change the type of fn to unsigned\n\tint to match the langhook definition.\n\t(ix86_builtin_conversion): Change the type of code to unsigned init to\n\tmatch the langhook definition.\n\t(ix86_preferred_reload_class): Avoid using C++ keywords as variable\n\tnames.\n\t(ix86_preferred_output_reload_class): Likewise.\n\t(ix86_cannot_change_mode_class): Likewise.\n\t(ix86_memory_move_cost): Likewise.\n\t(ix86_rtx_costs): Cast the outer_code parameter to enum rtx_code to\n\tavoid excessive casting later on.\n\t(x86_output_mi_thunk): Avoid using C++ keywords as variable names.\n\nFrom-SVN: r125357", "tree": {"sha": "1229439c24451e470f0a4ce8a5c80c90ce7fb0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1229439c24451e470f0a4ce8a5c80c90ce7fb0cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9415ab7da862bbba06642935c245b0fd3d8e31c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9415ab7da862bbba06642935c245b0fd3d8e31c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9415ab7da862bbba06642935c245b0fd3d8e31c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9415ab7da862bbba06642935c245b0fd3d8e31c6/comments", "author": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f28eb39cee72340b8f202c535368887111047bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28eb39cee72340b8f202c535368887111047bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28eb39cee72340b8f202c535368887111047bf3"}], "stats": {"total": 978, "additions": 511, "deletions": 467}, "files": [{"sha": "addf5a2894b4e15479a05bbc4f6fd717c167518c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9415ab7da862bbba06642935c245b0fd3d8e31c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9415ab7da862bbba06642935c245b0fd3d8e31c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9415ab7da862bbba06642935c245b0fd3d8e31c6", "patch": "@@ -1,3 +1,41 @@\n+2007-06-06  Thomas Neumann  <tneumann@users.sourceforge.net>\n+\n+\t* config/i386/i386.c (enum pta_flags): Move out of struct scope...\n+\t(struct pta): ...from here. Change flags to unsigned to avoid excessive\n+\tcasting (as it is used as a bit mask).\n+\t(override_options): Add casts according to the coding convenventions.\n+\t(x86_64_elf_unique_section): Likewise.\n+\t(examine_argument): Avoid using C++ keywords as variable names.\n+\t(construct_container): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(get_dllimport_decl): Cast according to the coding conventions. Use\n+\ttype safe memory macros.\n+\t(legitimize_address): Cast according to the coding conventions.\n+\t(emit_i387_cw_initialization): Corrected the type of slot to enum\n+\tix86_stack_slot.\n+\t(ix86_init_machine_status): Use type safe memory macros.\n+\t(bdesc_pcmpestr): Use UNKNOWN instead of integer 0.\n+\t(bdesc_pcmpistr): Likewise.\n+\t(bdesc_crc32): Likewise.\n+\t(bdesc_sse_3arg): Likewise.\n+\t(bdesc_2arg): Likewise.\n+\t(bdesc_1arg): Likewise.\n+\t(ix86_expand_sse_pcmpestr): Cast according to the coding conventions.\n+\t(ix86_expand_sse_pcmpistr): Likewise.\n+\t(ix86_expand_vec_set_builtin): Use EXPAND_NORMAL instead of integer 0.\n+\t(ix86_builtin_vectorized_function): Change the type of fn to unsigned\n+\tint to match the langhook definition.\n+\t(ix86_builtin_conversion): Change the type of code to unsigned init to\n+\tmatch the langhook definition.\n+\t(ix86_preferred_reload_class): Avoid using C++ keywords as variable\n+\tnames.\n+\t(ix86_preferred_output_reload_class): Likewise.\n+\t(ix86_cannot_change_mode_class): Likewise.\n+\t(ix86_memory_move_cost): Likewise.\n+\t(ix86_rtx_costs): Cast the outer_code parameter to enum rtx_code to\n+\tavoid excessive casting later on.\n+\t(x86_output_mi_thunk): Avoid using C++ keywords as variable names.\n+\n 2007-06-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (sse4_2_pcmpestr_cconly): Prefer pcmpestrm"}, {"sha": "7046ae50c31a1aef0aba2a548512a9459895bbff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 473, "deletions": 467, "changes": 940, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9415ab7da862bbba06642935c245b0fd3d8e31c6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9415ab7da862bbba06642935c245b0fd3d8e31c6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9415ab7da862bbba06642935c245b0fd3d8e31c6", "patch": "@@ -1735,29 +1735,31 @@ override_options (void)\n     };\n \n   static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n+  enum pta_flags\n+    {\n+      PTA_SSE = 1 << 0,\n+      PTA_SSE2 = 1 << 1,\n+      PTA_SSE3 = 1 << 2,\n+      PTA_MMX = 1 << 3,\n+      PTA_PREFETCH_SSE = 1 << 4,\n+      PTA_3DNOW = 1 << 5,\n+      PTA_3DNOW_A = 1 << 6,\n+      PTA_64BIT = 1 << 7,\n+      PTA_SSSE3 = 1 << 8,\n+      PTA_CX16 = 1 << 9,\n+      PTA_POPCNT = 1 << 10,\n+      PTA_ABM = 1 << 11,\n+      PTA_SSE4A = 1 << 12,\n+      PTA_NO_SAHF = 1 << 13,\n+      PTA_SSE4_1 = 1 << 14,\n+      PTA_SSE4_2 = 1 << 15\n+    };\n+\n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n-      const enum pta_flags\n-\t{\n-\t  PTA_SSE = 1 << 0,\n-\t  PTA_SSE2 = 1 << 1,\n-\t  PTA_SSE3 = 1 << 2,\n-\t  PTA_MMX = 1 << 3,\n-\t  PTA_PREFETCH_SSE = 1 << 4,\n-\t  PTA_3DNOW = 1 << 5,\n-\t  PTA_3DNOW_A = 1 << 6,\n-\t  PTA_64BIT = 1 << 7,\n-\t  PTA_SSSE3 = 1 << 8,\n-\t  PTA_CX16 = 1 << 9,\n-\t  PTA_POPCNT = 1 << 10,\n-\t  PTA_ABM = 1 << 11,\n- \t  PTA_SSE4A = 1 << 12,\n-\t  PTA_NO_SAHF = 1 << 13,\n- \t  PTA_SSE4_1 = 1 << 14,\n- \t  PTA_SSE4_2 = 1 << 15\n-\t} flags;\n+      const unsigned /*enum pta_flags*/ flags;\n     }\n   const processor_alias_table[] =\n     {\n@@ -2356,7 +2358,7 @@ override_options (void)\n \t      ix86_fpmath = FPMATH_SSE;\n \t    }\n \t  else\n-\t    ix86_fpmath = FPMATH_SSE | FPMATH_387;\n+\t    ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE | FPMATH_387);\n \t}\n       else\n \terror (\"bad value (%s) for -mfpmath= switch\", ix86_fpmath_string);\n@@ -2569,7 +2571,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n \t  name = targetm.strip_name_encoding (name);\n \t  nlen = strlen (name);\n \n-\t  string = alloca (nlen + plen + 1);\n+\t  string = (char *) alloca (nlen + plen + 1);\n \t  memcpy (string, prefix, plen);\n \t  memcpy (string + plen, name, nlen + 1);\n \n@@ -3605,15 +3607,15 @@ static int\n examine_argument (enum machine_mode mode, tree type, int in_return,\n \t\t  int *int_nregs, int *sse_nregs)\n {\n-  enum x86_64_reg_class class[MAX_CLASSES];\n-  int n = classify_argument (mode, type, class, 0);\n+  enum x86_64_reg_class regclass[MAX_CLASSES];\n+  int n = classify_argument (mode, type, regclass, 0);\n \n   *int_nregs = 0;\n   *sse_nregs = 0;\n   if (!n)\n     return 0;\n   for (n--; n >= 0; n--)\n-    switch (class[n])\n+    switch (regclass[n])\n       {\n       case X86_64_INTEGER_CLASS:\n       case X86_64_INTEGERSI_CLASS:\n@@ -3656,15 +3658,15 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n   enum machine_mode tmpmode;\n   int bytes =\n     (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n-  enum x86_64_reg_class class[MAX_CLASSES];\n+  enum x86_64_reg_class regclass[MAX_CLASSES];\n   int n;\n   int i;\n   int nexps = 0;\n   int needed_sseregs, needed_intregs;\n   rtx exp[MAX_CLASSES];\n   rtx ret;\n \n-  n = classify_argument (mode, type, class, 0);\n+  n = classify_argument (mode, type, regclass, 0);\n   if (!n)\n     return NULL;\n   if (!examine_argument (mode, type, in_return, &needed_intregs,\n@@ -3697,9 +3699,9 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n      x87 registers and the user specified -mno-80387.  */\n   if (!TARGET_80387 && in_return)\n     for (i = 0; i < n; i++)\n-      if (class[i] == X86_64_X87_CLASS\n-\t  || class[i] == X86_64_X87UP_CLASS\n-\t  || class[i] == X86_64_COMPLEX_X87_CLASS)\n+      if (regclass[i] == X86_64_X87_CLASS\n+\t  || regclass[i] == X86_64_X87UP_CLASS\n+\t  || regclass[i] == X86_64_COMPLEX_X87_CLASS)\n \t{\n \t  if (!issued_x87_ret_error)\n \t    {\n@@ -3712,7 +3714,7 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n   /* First construct simple cases.  Avoid SCmode, since we want to use\n      single register to pass this type.  */\n   if (n == 1 && mode != SCmode)\n-    switch (class[0])\n+    switch (regclass[0])\n       {\n       case X86_64_INTEGER_CLASS:\n       case X86_64_INTEGERSI_CLASS:\n@@ -3730,23 +3732,23 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n       default:\n \tgcc_unreachable ();\n       }\n-  if (n == 2 && class[0] == X86_64_SSE_CLASS && class[1] == X86_64_SSEUP_CLASS\n-      && mode != BLKmode)\n+  if (n == 2 && regclass[0] == X86_64_SSE_CLASS\n+      && regclass[1] == X86_64_SSEUP_CLASS && mode != BLKmode)\n     return gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n \n   if (n == 2\n-      && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS)\n+      && regclass[0] == X86_64_X87_CLASS && regclass[1] == X86_64_X87UP_CLASS)\n     return gen_rtx_REG (XFmode, FIRST_STACK_REG);\n-  if (n == 2 && class[0] == X86_64_INTEGER_CLASS\n-      && class[1] == X86_64_INTEGER_CLASS\n+  if (n == 2 && regclass[0] == X86_64_INTEGER_CLASS\n+      && regclass[1] == X86_64_INTEGER_CLASS\n       && (mode == CDImode || mode == TImode || mode == TFmode)\n       && intreg[0] + 1 == intreg[1])\n     return gen_rtx_REG (mode, intreg[0]);\n \n   /* Otherwise figure out the entries of the PARALLEL.  */\n   for (i = 0; i < n; i++)\n     {\n-      switch (class[i])\n+      switch (regclass[i])\n         {\n \t  case X86_64_NO_CLASS:\n \t    break;\n@@ -3755,7 +3757,7 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n \t    /* Merge TImodes on aligned occasions here too.  */\n \t    if (i * 8 + 8 > bytes)\n \t      tmpmode = mode_for_size ((bytes - i * 8) * BITS_PER_UNIT, MODE_INT, 0);\n-\t    else if (class[i] == X86_64_INTEGERSI_CLASS)\n+\t    else if (regclass[i] == X86_64_INTEGERSI_CLASS)\n \t      tmpmode = SImode;\n \t    else\n \t      tmpmode = DImode;\n@@ -3782,7 +3784,7 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n \t    sse_regno++;\n \t    break;\n \t  case X86_64_SSE_CLASS:\n-\t    if (i < n - 1 && class[i + 1] == X86_64_SSEUP_CLASS)\n+\t    if (i < n - 1 && regclass[i + 1] == X86_64_SSEUP_CLASS)\n \t      tmpmode = TImode;\n \t    else\n \t      tmpmode = DImode;\n@@ -7167,7 +7169,7 @@ static rtx\n legitimize_pic_address (rtx orig, rtx reg)\n {\n   rtx addr = orig;\n-  rtx new = orig;\n+  rtx new_rtx = orig;\n   rtx base;\n \n #if TARGET_MACHO\n@@ -7181,7 +7183,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n #endif\n \n   if (TARGET_64BIT && legitimate_pic_address_disp_p (addr))\n-    new = addr;\n+    new_rtx = addr;\n   else if (TARGET_64BIT\n \t   && ix86_cmodel != CM_SMALL_PIC\n \t   && gotoff_operand (addr, Pmode))\n@@ -7196,26 +7198,26 @@ legitimize_pic_address (rtx orig, rtx reg)\n \taddr = XEXP (addr, 0);\n       if (GET_CODE (addr) == PLUS)\n \t  {\n-            new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n-\t\t\t\t  UNSPEC_GOTOFF);\n-\t    new = gen_rtx_PLUS (Pmode, new, XEXP (addr, 1));\n+            new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n+\t\t\t\t      UNSPEC_GOTOFF);\n+\t    new_rtx = gen_rtx_PLUS (Pmode, new_rtx, XEXP (addr, 1));\n \t  }\n \telse\n-          new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n-      new = gen_rtx_CONST (Pmode, new);\n+          new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n+      new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n       if (!reg)\n         tmpreg = gen_reg_rtx (Pmode);\n       else\n \ttmpreg = reg;\n-      emit_move_insn (tmpreg, new);\n+      emit_move_insn (tmpreg, new_rtx);\n \n       if (reg != 0)\n \t{\n-\t  new = expand_simple_binop (Pmode, PLUS, reg, pic_offset_table_rtx,\n-\t\t\t\t     tmpreg, 1, OPTAB_DIRECT);\n-\t  new = reg;\n+\t  new_rtx = expand_simple_binop (Pmode, PLUS, reg, pic_offset_table_rtx,\n+\t\t\t\t\t tmpreg, 1, OPTAB_DIRECT);\n+\t  new_rtx = reg;\n \t}\n-      else new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmpreg);\n+      else new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmpreg);\n     }\n   else if (!TARGET_64BIT && gotoff_operand (addr, Pmode))\n     {\n@@ -7228,19 +7230,19 @@ legitimize_pic_address (rtx orig, rtx reg)\n \taddr = XEXP (addr, 0);\n       if (GET_CODE (addr) == PLUS)\n \t  {\n-            new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n-\t\t\t\t  UNSPEC_GOTOFF);\n-\t    new = gen_rtx_PLUS (Pmode, new, XEXP (addr, 1));\n+            new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, XEXP (addr, 0)),\n+\t\t\t\t      UNSPEC_GOTOFF);\n+\t    new_rtx = gen_rtx_PLUS (Pmode, new_rtx, XEXP (addr, 1));\n \t  }\n \telse\n-          new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n-      new = gen_rtx_CONST (Pmode, new);\n-      new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n+          new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTOFF);\n+      new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+      new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n \n       if (reg != 0)\n \t{\n-\t  emit_move_insn (reg, new);\n-\t  new = reg;\n+\t  emit_move_insn (reg, new_rtx);\n+\t  new_rtx = reg;\n \t}\n     }\n   else if ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (addr) == 0)\n@@ -7255,18 +7257,18 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n       if (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC)\n \t{\n-\t  new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);\n-\t  new = gen_rtx_CONST (Pmode, new);\n-\t  new = gen_const_mem (Pmode, new);\n-\t  set_mem_alias_set (new, ix86_GOT_alias_set ());\n+\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);\n+\t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+\t  new_rtx = gen_const_mem (Pmode, new_rtx);\n+\t  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());\n \n \t  if (reg == 0)\n \t    reg = gen_reg_rtx (Pmode);\n \t  /* Use directly gen_movsi, otherwise the address is loaded\n \t     into register for CSE.  We don't want to CSE this addresses,\n \t     instead we CSE addresses from the GOT table, so skip this.  */\n-\t  emit_insn (gen_movsi (reg, new));\n-\t  new = reg;\n+\t  emit_insn (gen_movsi (reg, new_rtx));\n+\t  new_rtx = reg;\n \t}\n       else\n \t{\n@@ -7275,18 +7277,18 @@ legitimize_pic_address (rtx orig, rtx reg)\n \n \t  if (reload_in_progress)\n \t    regs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n-\t  new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n-\t  new = gen_rtx_CONST (Pmode, new);\n+\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n+\t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n \t  if (TARGET_64BIT)\n-\t    new = force_reg (Pmode, new);\n-\t  new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n-\t  new = gen_const_mem (Pmode, new);\n-\t  set_mem_alias_set (new, ix86_GOT_alias_set ());\n+\t    new_rtx = force_reg (Pmode, new_rtx);\n+\t  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n+\t  new_rtx = gen_const_mem (Pmode, new_rtx);\n+\t  set_mem_alias_set (new_rtx, ix86_GOT_alias_set ());\n \n \t  if (reg == 0)\n \t    reg = gen_reg_rtx (Pmode);\n-\t  emit_move_insn (reg, new);\n-\t  new = reg;\n+\t  emit_move_insn (reg, new_rtx);\n+\t  new_rtx = reg;\n \t}\n     }\n   else\n@@ -7297,10 +7299,10 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t  if (reg)\n \t    {\n \t      emit_move_insn (reg, addr);\n-\t      new = reg;\n+\t      new_rtx = reg;\n \t    }\n \t  else\n-\t    new = force_reg (Pmode, addr);\n+\t    new_rtx = force_reg (Pmode, addr);\n \t}\n       else if (GET_CODE (addr) == CONST)\n \t{\n@@ -7328,16 +7330,16 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t{\n \t\t  if (reload_in_progress)\n \t\t    regs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n-\t\t  new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op0),\n-\t\t\t\t\tUNSPEC_GOTOFF);\n-\t\t  new = gen_rtx_PLUS (Pmode, new, op1);\n-\t\t  new = gen_rtx_CONST (Pmode, new);\n-\t\t  new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n+\t\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op0),\n+\t\t\t\t\t    UNSPEC_GOTOFF);\n+\t\t  new_rtx = gen_rtx_PLUS (Pmode, new_rtx, op1);\n+\t\t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+\t\t  new_rtx = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new_rtx);\n \n \t\t  if (reg != 0)\n \t\t    {\n-\t\t      emit_move_insn (reg, new);\n-\t\t      new = reg;\n+\t\t      emit_move_insn (reg, new_rtx);\n+\t\t      new_rtx = reg;\n \t\t    }\n \t\t}\n \t      else\n@@ -7347,31 +7349,31 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t\t    {\n \t\t      if (!x86_64_immediate_operand (op1, Pmode))\n \t\t\top1 = force_reg (Pmode, op1);\n-\t\t      new = gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), op1);\n+\t\t      new_rtx = gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), op1);\n \t\t    }\n \t\t}\n \t    }\n \t  else\n \t    {\n \t      base = legitimize_pic_address (XEXP (addr, 0), reg);\n-\t      new  = legitimize_pic_address (XEXP (addr, 1),\n-\t\t\t\t\t     base == reg ? NULL_RTX : reg);\n+\t      new_rtx  = legitimize_pic_address (XEXP (addr, 1),\n+\t\t\t\t\t\t base == reg ? NULL_RTX : reg);\n \n-\t      if (CONST_INT_P (new))\n-\t\tnew = plus_constant (base, INTVAL (new));\n+\t      if (CONST_INT_P (new_rtx))\n+\t\tnew_rtx = plus_constant (base, INTVAL (new_rtx));\n \t      else\n \t\t{\n-\t\t  if (GET_CODE (new) == PLUS && CONSTANT_P (XEXP (new, 1)))\n+\t\t  if (GET_CODE (new_rtx) == PLUS && CONSTANT_P (XEXP (new_rtx, 1)))\n \t\t    {\n-\t\t      base = gen_rtx_PLUS (Pmode, base, XEXP (new, 0));\n-\t\t      new = XEXP (new, 1);\n+\t\t      base = gen_rtx_PLUS (Pmode, base, XEXP (new_rtx, 0));\n+\t\t      new_rtx = XEXP (new_rtx, 1);\n \t\t    }\n-\t\t  new = gen_rtx_PLUS (Pmode, base, new);\n+\t\t  new_rtx = gen_rtx_PLUS (Pmode, base, new_rtx);\n \t\t}\n \t    }\n \t}\n     }\n-  return new;\n+  return new_rtx;\n }\n \f\n /* Load the thread pointer.  If TO_REG is true, force it into a register.  */\n@@ -7574,11 +7576,11 @@ get_dllimport_decl (tree decl)\n   in.hash = htab_hash_pointer (decl);\n   in.base.from = decl;\n   loc = htab_find_slot_with_hash (dllimport_map, &in, in.hash, INSERT);\n-  h = *loc;\n+  h = (struct tree_map *) *loc;\n   if (h)\n     return h->to;\n \n-  *loc = h = ggc_alloc (sizeof (struct tree_map));\n+  *loc = h = GGC_NEW (struct tree_map);\n   h->hash = in.hash;\n   h->base.from = decl;\n   h->to = to = build_decl (VAR_DECL, NULL, ptr_type_node);\n@@ -7599,7 +7601,7 @@ get_dllimport_decl (tree decl)\n \n   namelen = strlen (name);\n   prefixlen = strlen (prefix);\n-  imp_name = alloca (namelen + prefixlen + 1);\n+  imp_name = (char *) alloca (namelen + prefixlen + 1);\n   memcpy (imp_name, prefix, prefixlen);\n   memcpy (imp_name + prefixlen, name, namelen + 1);\n \n@@ -7663,13 +7665,14 @@ legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n \n   log = GET_CODE (x) == SYMBOL_REF ? SYMBOL_REF_TLS_MODEL (x) : 0;\n   if (log)\n-    return legitimize_tls_address (x, log, false);\n+    return legitimize_tls_address (x, (enum tls_model) log, false);\n   if (GET_CODE (x) == CONST\n       && GET_CODE (XEXP (x, 0)) == PLUS\n       && GET_CODE (XEXP (XEXP (x, 0), 0)) == SYMBOL_REF\n       && (log = SYMBOL_REF_TLS_MODEL (XEXP (XEXP (x, 0), 0))))\n     {\n-      rtx t = legitimize_tls_address (XEXP (XEXP (x, 0), 0), log, false);\n+      rtx t = legitimize_tls_address (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t      (enum tls_model) log, false);\n       return gen_rtx_PLUS (Pmode, t, XEXP (XEXP (x, 0), 1));\n     }\n \n@@ -9374,7 +9377,7 @@ emit_i387_cw_initialization (int mode)\n   rtx stored_mode = assign_386_stack_local (HImode, SLOT_CW_STORED);\n   rtx new_mode;\n \n-  int slot;\n+  enum ix86_stack_slot slot;\n \n   rtx reg = gen_reg_rtx (HImode);\n \n@@ -15560,7 +15563,7 @@ ix86_init_machine_status (void)\n {\n   struct machine_function *f;\n \n-  f = ggc_alloc_cleared (sizeof (struct machine_function));\n+  f = GGC_CNEW (struct machine_function);\n   f->use_fast_prologue_epilogue_nregs = -1;\n   f->tls_descriptor_call_expanded_p = 0;\n \n@@ -16899,65 +16902,65 @@ static const struct builtin_description bdesc_ptest[] =\n static const struct builtin_description bdesc_pcmpestr[] =\n {\n   /* SSE4.2 */\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestri128\", IX86_BUILTIN_PCMPESTRI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrm128\", IX86_BUILTIN_PCMPESTRM128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestria128\", IX86_BUILTIN_PCMPESTRA128, 0, (int) CCAmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestric128\", IX86_BUILTIN_PCMPESTRC128, 0, (int) CCCmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrio128\", IX86_BUILTIN_PCMPESTRO128, 0, (int) CCOmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestris128\", IX86_BUILTIN_PCMPESTRS128, 0, (int) CCSmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestriz128\", IX86_BUILTIN_PCMPESTRZ128, 0, (int) CCZmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestri128\", IX86_BUILTIN_PCMPESTRI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrm128\", IX86_BUILTIN_PCMPESTRM128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestria128\", IX86_BUILTIN_PCMPESTRA128, UNKNOWN, (int) CCAmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestric128\", IX86_BUILTIN_PCMPESTRC128, UNKNOWN, (int) CCCmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestrio128\", IX86_BUILTIN_PCMPESTRO128, UNKNOWN, (int) CCOmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestris128\", IX86_BUILTIN_PCMPESTRS128, UNKNOWN, (int) CCSmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpestr, \"__builtin_ia32_pcmpestriz128\", IX86_BUILTIN_PCMPESTRZ128, UNKNOWN, (int) CCZmode },\n };\n \n static const struct builtin_description bdesc_pcmpistr[] =\n {\n   /* SSE4.2 */\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistri128\", IX86_BUILTIN_PCMPISTRI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrm128\", IX86_BUILTIN_PCMPISTRM128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistria128\", IX86_BUILTIN_PCMPISTRA128, 0, (int) CCAmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistric128\", IX86_BUILTIN_PCMPISTRC128, 0, (int) CCCmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrio128\", IX86_BUILTIN_PCMPISTRO128, 0, (int) CCOmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistris128\", IX86_BUILTIN_PCMPISTRS128, 0, (int) CCSmode },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, 0, (int) CCZmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistri128\", IX86_BUILTIN_PCMPISTRI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrm128\", IX86_BUILTIN_PCMPISTRM128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistria128\", IX86_BUILTIN_PCMPISTRA128, UNKNOWN, (int) CCAmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistric128\", IX86_BUILTIN_PCMPISTRC128, UNKNOWN, (int) CCCmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistrio128\", IX86_BUILTIN_PCMPISTRO128, UNKNOWN, (int) CCOmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistris128\", IX86_BUILTIN_PCMPISTRS128, UNKNOWN, (int) CCSmode },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, UNKNOWN, (int) CCZmode },\n };\n \n static const struct builtin_description bdesc_crc32[] =\n {\n   /* SSE4.2 */\n-  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32qi, 0, IX86_BUILTIN_CRC32QI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32hi, 0, IX86_BUILTIN_CRC32HI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32si, 0, IX86_BUILTIN_CRC32SI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32di, 0, IX86_BUILTIN_CRC32DI, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32qi, 0, IX86_BUILTIN_CRC32QI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32hi, 0, IX86_BUILTIN_CRC32HI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32si, 0, IX86_BUILTIN_CRC32SI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32di, 0, IX86_BUILTIN_CRC32DI, UNKNOWN, 0 },\n };\n \n /* SSE builtins with 3 arguments and the last argument must be an immediate or xmm0.  */\n static const struct builtin_description bdesc_sse_3arg[] =\n {\n   /* SSE4.1 */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvpd, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvps, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dppd, \"__builtin_ia32_dppd\", IX86_BUILTIN_DPPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dpps, \"__builtin_ia32_dpps\", IX86_BUILTIN_DPPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_insertps, \"__builtin_ia32_insertps128\", IX86_BUILTIN_INSERTPS128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mpsadbw, \"__builtin_ia32_mpsadbw128\", IX86_BUILTIN_MPSADBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundsd, 0, IX86_BUILTIN_ROUNDSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundss, 0, IX86_BUILTIN_ROUNDSS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvpd, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendvps, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dppd, \"__builtin_ia32_dppd\", IX86_BUILTIN_DPPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_dpps, \"__builtin_ia32_dpps\", IX86_BUILTIN_DPPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_insertps, \"__builtin_ia32_insertps128\", IX86_BUILTIN_INSERTPS128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mpsadbw, \"__builtin_ia32_mpsadbw128\", IX86_BUILTIN_MPSADBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundsd, 0, IX86_BUILTIN_ROUNDSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundss, 0, IX86_BUILTIN_ROUNDSS, UNKNOWN, 0 },\n };\n \n static const struct builtin_description bdesc_2arg[] =\n {\n   /* SSE */\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_addv4sf3, \"__builtin_ia32_addps\", IX86_BUILTIN_ADDPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_subv4sf3, \"__builtin_ia32_subps\", IX86_BUILTIN_SUBPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_mulv4sf3, \"__builtin_ia32_mulps\", IX86_BUILTIN_MULPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_divv4sf3, \"__builtin_ia32_divps\", IX86_BUILTIN_DIVPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmaddv4sf3,  \"__builtin_ia32_addss\", IX86_BUILTIN_ADDSS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsubv4sf3,  \"__builtin_ia32_subss\", IX86_BUILTIN_SUBSS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmmulv4sf3,  \"__builtin_ia32_mulss\", IX86_BUILTIN_MULSS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmdivv4sf3,  \"__builtin_ia32_divss\", IX86_BUILTIN_DIVSS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_addv4sf3, \"__builtin_ia32_addps\", IX86_BUILTIN_ADDPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_subv4sf3, \"__builtin_ia32_subps\", IX86_BUILTIN_SUBPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_mulv4sf3, \"__builtin_ia32_mulps\", IX86_BUILTIN_MULPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_divv4sf3, \"__builtin_ia32_divps\", IX86_BUILTIN_DIVPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmaddv4sf3,  \"__builtin_ia32_addss\", IX86_BUILTIN_ADDSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsubv4sf3,  \"__builtin_ia32_subss\", IX86_BUILTIN_SUBSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmmulv4sf3,  \"__builtin_ia32_mulss\", IX86_BUILTIN_MULSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmdivv4sf3,  \"__builtin_ia32_divss\", IX86_BUILTIN_DIVSS, UNKNOWN, 0 },\n \n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_maskcmpv4sf3, \"__builtin_ia32_cmpeqps\", IX86_BUILTIN_CMPEQPS, EQ, 0 },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_maskcmpv4sf3, \"__builtin_ia32_cmpltps\", IX86_BUILTIN_CMPLTPS, LT, 0 },\n@@ -16982,112 +16985,112 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmmaskcmpv4sf3, \"__builtin_ia32_cmpngess\", IX86_BUILTIN_CMPNGESS, UNGT, BUILTIN_DESC_SWAP_OPERANDS },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmmaskcmpv4sf3, \"__builtin_ia32_cmpordss\", IX86_BUILTIN_CMPORDSS, ORDERED, 0 },\n \n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sminv4sf3, \"__builtin_ia32_minps\", IX86_BUILTIN_MINPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_smaxv4sf3, \"__builtin_ia32_maxps\", IX86_BUILTIN_MAXPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsminv4sf3, \"__builtin_ia32_minss\", IX86_BUILTIN_MINSS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsmaxv4sf3, \"__builtin_ia32_maxss\", IX86_BUILTIN_MAXSS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sminv4sf3, \"__builtin_ia32_minps\", IX86_BUILTIN_MINPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_smaxv4sf3, \"__builtin_ia32_maxps\", IX86_BUILTIN_MAXPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsminv4sf3, \"__builtin_ia32_minss\", IX86_BUILTIN_MINSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsmaxv4sf3, \"__builtin_ia32_maxss\", IX86_BUILTIN_MAXSS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE, CODE_FOR_andv4sf3, \"__builtin_ia32_andps\", IX86_BUILTIN_ANDPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_nandv4sf3,  \"__builtin_ia32_andnps\", IX86_BUILTIN_ANDNPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_iorv4sf3, \"__builtin_ia32_orps\", IX86_BUILTIN_ORPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_xorv4sf3,  \"__builtin_ia32_xorps\", IX86_BUILTIN_XORPS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_andv4sf3, \"__builtin_ia32_andps\", IX86_BUILTIN_ANDPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_nandv4sf3,  \"__builtin_ia32_andnps\", IX86_BUILTIN_ANDNPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_iorv4sf3, \"__builtin_ia32_orps\", IX86_BUILTIN_ORPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_xorv4sf3,  \"__builtin_ia32_xorps\", IX86_BUILTIN_XORPS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movhlps,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movlhps,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpckhps, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movhlps,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movlhps,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpckhps, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, UNKNOWN, 0 },\n \n   /* MMX */\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_adddi3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subdi3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_nandv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhdq, \"__builtin_ia32_punpckhdq\", IX86_BUILTIN_PUNPCKHDQ, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpcklbw, \"__builtin_ia32_punpcklbw\", IX86_BUILTIN_PUNPCKLBW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpcklwd, \"__builtin_ia32_punpcklwd\", IX86_BUILTIN_PUNPCKLWD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckldq, \"__builtin_ia32_punpckldq\", IX86_BUILTIN_PUNPCKLDQ, 0, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_adddi3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subdi3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_nandv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckhdq, \"__builtin_ia32_punpckhdq\", IX86_BUILTIN_PUNPCKHDQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpcklbw, \"__builtin_ia32_punpcklbw\", IX86_BUILTIN_PUNPCKLBW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpcklwd, \"__builtin_ia32_punpcklwd\", IX86_BUILTIN_PUNPCKLWD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_punpckldq, \"__builtin_ia32_punpckldq\", IX86_BUILTIN_PUNPCKLDQ, UNKNOWN, 0 },\n \n   /* Special.  */\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packsswb, 0, IX86_BUILTIN_PACKSSWB, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packssdw, 0, IX86_BUILTIN_PACKSSDW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packuswb, 0, IX86_BUILTIN_PACKUSWB, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtpi2ps, 0, IX86_BUILTIN_CVTPI2PS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq, 0, IX86_BUILTIN_CVTSI642SS, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLDI, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQ, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQI, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLWI, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLDI, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQ, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQI, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAWI, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRAD, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRADI, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, 0, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packsswb, 0, IX86_BUILTIN_PACKSSWB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packssdw, 0, IX86_BUILTIN_PACKSSDW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_packuswb, 0, IX86_BUILTIN_PACKUSWB, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtpi2ps, 0, IX86_BUILTIN_CVTPI2PS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq, 0, IX86_BUILTIN_CVTSI642SS, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLDI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQI, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLWI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLDI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQI, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAWI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRAD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRADI, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, UNKNOWN, 0 },\n \n   /* SSE2 */\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv2df3, \"__builtin_ia32_addpd\", IX86_BUILTIN_ADDPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv2df3, \"__builtin_ia32_subpd\", IX86_BUILTIN_SUBPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mulv2df3, \"__builtin_ia32_mulpd\", IX86_BUILTIN_MULPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_divv2df3, \"__builtin_ia32_divpd\", IX86_BUILTIN_DIVPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmaddv2df3,  \"__builtin_ia32_addsd\", IX86_BUILTIN_ADDSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsubv2df3,  \"__builtin_ia32_subsd\", IX86_BUILTIN_SUBSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmmulv2df3,  \"__builtin_ia32_mulsd\", IX86_BUILTIN_MULSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmdivv2df3,  \"__builtin_ia32_divsd\", IX86_BUILTIN_DIVSD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv2df3, \"__builtin_ia32_addpd\", IX86_BUILTIN_ADDPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv2df3, \"__builtin_ia32_subpd\", IX86_BUILTIN_SUBPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mulv2df3, \"__builtin_ia32_mulpd\", IX86_BUILTIN_MULPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_divv2df3, \"__builtin_ia32_divpd\", IX86_BUILTIN_DIVPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmaddv2df3,  \"__builtin_ia32_addsd\", IX86_BUILTIN_ADDSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsubv2df3,  \"__builtin_ia32_subsd\", IX86_BUILTIN_SUBSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmmulv2df3,  \"__builtin_ia32_mulsd\", IX86_BUILTIN_MULSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmdivv2df3,  \"__builtin_ia32_divsd\", IX86_BUILTIN_DIVSD, UNKNOWN, 0 },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_maskcmpv2df3, \"__builtin_ia32_cmpeqpd\", IX86_BUILTIN_CMPEQPD, EQ, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_maskcmpv2df3, \"__builtin_ia32_cmpltpd\", IX86_BUILTIN_CMPLTPD, LT, 0 },\n@@ -17110,222 +17113,222 @@ static const struct builtin_description bdesc_2arg[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmmaskcmpv2df3, \"__builtin_ia32_cmpnlesd\", IX86_BUILTIN_CMPNLESD, UNGT, 0 },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmmaskcmpv2df3, \"__builtin_ia32_cmpordsd\", IX86_BUILTIN_CMPORDSD, ORDERED, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sminv2df3, \"__builtin_ia32_minpd\", IX86_BUILTIN_MINPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_smaxv2df3, \"__builtin_ia32_maxpd\", IX86_BUILTIN_MAXPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsminv2df3, \"__builtin_ia32_minsd\", IX86_BUILTIN_MINSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsmaxv2df3, \"__builtin_ia32_maxsd\", IX86_BUILTIN_MAXSD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sminv2df3, \"__builtin_ia32_minpd\", IX86_BUILTIN_MINPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_smaxv2df3, \"__builtin_ia32_maxpd\", IX86_BUILTIN_MAXPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsminv2df3, \"__builtin_ia32_minsd\", IX86_BUILTIN_MINSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsmaxv2df3, \"__builtin_ia32_maxsd\", IX86_BUILTIN_MAXSD, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2df3, \"__builtin_ia32_andpd\", IX86_BUILTIN_ANDPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2df3,  \"__builtin_ia32_andnpd\", IX86_BUILTIN_ANDNPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2df3, \"__builtin_ia32_orpd\", IX86_BUILTIN_ORPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2df3,  \"__builtin_ia32_xorpd\", IX86_BUILTIN_XORPD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2df3, \"__builtin_ia32_andpd\", IX86_BUILTIN_ANDPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2df3,  \"__builtin_ia32_andnpd\", IX86_BUILTIN_ANDNPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2df3, \"__builtin_ia32_orpd\", IX86_BUILTIN_ORPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2df3,  \"__builtin_ia32_xorpd\", IX86_BUILTIN_XORPD, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpckhpd, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpcklpd, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpckhpd, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_unpcklpd, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, UNKNOWN, 0 },\n \n   /* SSE2 MMX */\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv16qi3, \"__builtin_ia32_paddb128\", IX86_BUILTIN_PADDB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv8hi3, \"__builtin_ia32_paddw128\", IX86_BUILTIN_PADDW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddd128\", IX86_BUILTIN_PADDD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv2di3, \"__builtin_ia32_paddq128\", IX86_BUILTIN_PADDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv16qi3, \"__builtin_ia32_psubb128\", IX86_BUILTIN_PSUBB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv8hi3, \"__builtin_ia32_psubw128\", IX86_BUILTIN_PSUBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubd128\", IX86_BUILTIN_PSUBD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv2di3, \"__builtin_ia32_psubq128\", IX86_BUILTIN_PSUBQ128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ssaddv16qi3, \"__builtin_ia32_paddsb128\", IX86_BUILTIN_PADDSB128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ssaddv8hi3, \"__builtin_ia32_paddsw128\", IX86_BUILTIN_PADDSW128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_sssubv16qi3, \"__builtin_ia32_psubsb128\", IX86_BUILTIN_PSUBSB128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_sssubv8hi3, \"__builtin_ia32_psubsw128\", IX86_BUILTIN_PSUBSW128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_usaddv16qi3, \"__builtin_ia32_paddusb128\", IX86_BUILTIN_PADDUSB128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_usaddv8hi3, \"__builtin_ia32_paddusw128\", IX86_BUILTIN_PADDUSW128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ussubv16qi3, \"__builtin_ia32_psubusb128\", IX86_BUILTIN_PSUBUSB128, 0, 0 },\n-  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ussubv8hi3, \"__builtin_ia32_psubusw128\", IX86_BUILTIN_PSUBUSW128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_mulv8hi3, \"__builtin_ia32_pmullw128\", IX86_BUILTIN_PMULLW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_smulv8hi3_highpart, \"__builtin_ia32_pmulhw128\", IX86_BUILTIN_PMULHW128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2di3, \"__builtin_ia32_pand128\", IX86_BUILTIN_PAND128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2di3, \"__builtin_ia32_pandn128\", IX86_BUILTIN_PANDN128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2di3, \"__builtin_ia32_por128\", IX86_BUILTIN_POR128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2di3, \"__builtin_ia32_pxor128\", IX86_BUILTIN_PXOR128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_uavgv16qi3, \"__builtin_ia32_pavgb128\", IX86_BUILTIN_PAVGB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_uavgv8hi3, \"__builtin_ia32_pavgw128\", IX86_BUILTIN_PAVGW128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv16qi3, \"__builtin_ia32_pcmpeqb128\", IX86_BUILTIN_PCMPEQB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv8hi3, \"__builtin_ia32_pcmpeqw128\", IX86_BUILTIN_PCMPEQW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv4si3, \"__builtin_ia32_pcmpeqd128\", IX86_BUILTIN_PCMPEQD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv16qi3, \"__builtin_ia32_pcmpgtb128\", IX86_BUILTIN_PCMPGTB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv8hi3, \"__builtin_ia32_pcmpgtw128\", IX86_BUILTIN_PCMPGTW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv4si3, \"__builtin_ia32_pcmpgtd128\", IX86_BUILTIN_PCMPGTD128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_umaxv16qi3, \"__builtin_ia32_pmaxub128\", IX86_BUILTIN_PMAXUB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_smaxv8hi3, \"__builtin_ia32_pmaxsw128\", IX86_BUILTIN_PMAXSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_uminv16qi3, \"__builtin_ia32_pminub128\", IX86_BUILTIN_PMINUB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sminv8hi3, \"__builtin_ia32_pminsw128\", IX86_BUILTIN_PMINSW128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhbw, \"__builtin_ia32_punpckhbw128\", IX86_BUILTIN_PUNPCKHBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhwd, \"__builtin_ia32_punpckhwd128\", IX86_BUILTIN_PUNPCKHWD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhdq, \"__builtin_ia32_punpckhdq128\", IX86_BUILTIN_PUNPCKHDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhqdq, \"__builtin_ia32_punpckhqdq128\", IX86_BUILTIN_PUNPCKHQDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklbw, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklwd, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckldq, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklqdq, \"__builtin_ia32_punpcklqdq128\", IX86_BUILTIN_PUNPCKLQDQ128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packsswb, \"__builtin_ia32_packsswb128\", IX86_BUILTIN_PACKSSWB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packssdw, \"__builtin_ia32_packssdw128\", IX86_BUILTIN_PACKSSDW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packuswb, \"__builtin_ia32_packuswb128\", IX86_BUILTIN_PACKUSWB128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_umulv8hi3_highpart, \"__builtin_ia32_pmulhuw128\", IX86_BUILTIN_PMULHUW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_psadbw, 0, IX86_BUILTIN_PSADBW128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulsidi3, 0, IX86_BUILTIN_PMULUDQ, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, 0, IX86_BUILTIN_PMULUDQ128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, 0, IX86_BUILTIN_PSLLWI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, 0, IX86_BUILTIN_PSLLDI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, 0, IX86_BUILTIN_PSLLQI128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, 0, IX86_BUILTIN_PSRLWI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, 0, IX86_BUILTIN_PSRLDI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, 0, IX86_BUILTIN_PSRLQI128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, 0, IX86_BUILTIN_PSRAWI128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, 0, IX86_BUILTIN_PSRADI128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, 0, IX86_BUILTIN_PMADDWD128, 0, 0 },\n-\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsi2sdq, 0, IX86_BUILTIN_CVTSI642SD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2ss, 0, IX86_BUILTIN_CVTSD2SS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv16qi3, \"__builtin_ia32_paddb128\", IX86_BUILTIN_PADDB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv8hi3, \"__builtin_ia32_paddw128\", IX86_BUILTIN_PADDW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddd128\", IX86_BUILTIN_PADDD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_addv2di3, \"__builtin_ia32_paddq128\", IX86_BUILTIN_PADDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv16qi3, \"__builtin_ia32_psubb128\", IX86_BUILTIN_PSUBB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv8hi3, \"__builtin_ia32_psubw128\", IX86_BUILTIN_PSUBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubd128\", IX86_BUILTIN_PSUBD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_subv2di3, \"__builtin_ia32_psubq128\", IX86_BUILTIN_PSUBQ128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ssaddv16qi3, \"__builtin_ia32_paddsb128\", IX86_BUILTIN_PADDSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ssaddv8hi3, \"__builtin_ia32_paddsw128\", IX86_BUILTIN_PADDSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_sssubv16qi3, \"__builtin_ia32_psubsb128\", IX86_BUILTIN_PSUBSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_sssubv8hi3, \"__builtin_ia32_psubsw128\", IX86_BUILTIN_PSUBSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_usaddv16qi3, \"__builtin_ia32_paddusb128\", IX86_BUILTIN_PADDUSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_usaddv8hi3, \"__builtin_ia32_paddusw128\", IX86_BUILTIN_PADDUSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ussubv16qi3, \"__builtin_ia32_psubusb128\", IX86_BUILTIN_PSUBUSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_sse2_ussubv8hi3, \"__builtin_ia32_psubusw128\", IX86_BUILTIN_PSUBUSW128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_mulv8hi3, \"__builtin_ia32_pmullw128\", IX86_BUILTIN_PMULLW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_smulv8hi3_highpart, \"__builtin_ia32_pmulhw128\", IX86_BUILTIN_PMULHW128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_andv2di3, \"__builtin_ia32_pand128\", IX86_BUILTIN_PAND128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_nandv2di3, \"__builtin_ia32_pandn128\", IX86_BUILTIN_PANDN128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_iorv2di3, \"__builtin_ia32_por128\", IX86_BUILTIN_POR128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_xorv2di3, \"__builtin_ia32_pxor128\", IX86_BUILTIN_PXOR128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_uavgv16qi3, \"__builtin_ia32_pavgb128\", IX86_BUILTIN_PAVGB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_uavgv8hi3, \"__builtin_ia32_pavgw128\", IX86_BUILTIN_PAVGW128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv16qi3, \"__builtin_ia32_pcmpeqb128\", IX86_BUILTIN_PCMPEQB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv8hi3, \"__builtin_ia32_pcmpeqw128\", IX86_BUILTIN_PCMPEQW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_eqv4si3, \"__builtin_ia32_pcmpeqd128\", IX86_BUILTIN_PCMPEQD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv16qi3, \"__builtin_ia32_pcmpgtb128\", IX86_BUILTIN_PCMPGTB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv8hi3, \"__builtin_ia32_pcmpgtw128\", IX86_BUILTIN_PCMPGTW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_gtv4si3, \"__builtin_ia32_pcmpgtd128\", IX86_BUILTIN_PCMPGTD128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_umaxv16qi3, \"__builtin_ia32_pmaxub128\", IX86_BUILTIN_PMAXUB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_smaxv8hi3, \"__builtin_ia32_pmaxsw128\", IX86_BUILTIN_PMAXSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_uminv16qi3, \"__builtin_ia32_pminub128\", IX86_BUILTIN_PMINUB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sminv8hi3, \"__builtin_ia32_pminsw128\", IX86_BUILTIN_PMINSW128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhbw, \"__builtin_ia32_punpckhbw128\", IX86_BUILTIN_PUNPCKHBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhwd, \"__builtin_ia32_punpckhwd128\", IX86_BUILTIN_PUNPCKHWD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhdq, \"__builtin_ia32_punpckhdq128\", IX86_BUILTIN_PUNPCKHDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckhqdq, \"__builtin_ia32_punpckhqdq128\", IX86_BUILTIN_PUNPCKHQDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklbw, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklwd, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpckldq, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_punpcklqdq, \"__builtin_ia32_punpcklqdq128\", IX86_BUILTIN_PUNPCKLQDQ128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packsswb, \"__builtin_ia32_packsswb128\", IX86_BUILTIN_PACKSSWB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packssdw, \"__builtin_ia32_packssdw128\", IX86_BUILTIN_PACKSSDW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_packuswb, \"__builtin_ia32_packuswb128\", IX86_BUILTIN_PACKUSWB128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_umulv8hi3_highpart, \"__builtin_ia32_pmulhuw128\", IX86_BUILTIN_PMULHUW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_psadbw, 0, IX86_BUILTIN_PSADBW128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulsidi3, 0, IX86_BUILTIN_PMULUDQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, 0, IX86_BUILTIN_PMULUDQ128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, 0, IX86_BUILTIN_PSLLWI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, 0, IX86_BUILTIN_PSLLDI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, 0, IX86_BUILTIN_PSLLQI128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, 0, IX86_BUILTIN_PSRLWI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, 0, IX86_BUILTIN_PSRLDI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, 0, IX86_BUILTIN_PSRLQI128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, 0, IX86_BUILTIN_PSRAWI128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, 0, IX86_BUILTIN_PSRADI128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, 0, IX86_BUILTIN_PMADDWD128, UNKNOWN, 0 },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsi2sdq, 0, IX86_BUILTIN_CVTSI642SD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2ss, 0, IX86_BUILTIN_CVTSD2SS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, UNKNOWN, 0 },\n \n   /* SSE3 MMX */\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_addsubv4sf3, \"__builtin_ia32_addsubps\", IX86_BUILTIN_ADDSUBPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_addsubv2df3, \"__builtin_ia32_addsubpd\", IX86_BUILTIN_ADDSUBPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_haddv4sf3, \"__builtin_ia32_haddps\", IX86_BUILTIN_HADDPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_haddv2df3, \"__builtin_ia32_haddpd\", IX86_BUILTIN_HADDPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_hsubv4sf3, \"__builtin_ia32_hsubps\", IX86_BUILTIN_HSUBPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_hsubv2df3, \"__builtin_ia32_hsubpd\", IX86_BUILTIN_HSUBPD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_addsubv4sf3, \"__builtin_ia32_addsubps\", IX86_BUILTIN_ADDSUBPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_addsubv2df3, \"__builtin_ia32_addsubpd\", IX86_BUILTIN_ADDSUBPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_haddv4sf3, \"__builtin_ia32_haddps\", IX86_BUILTIN_HADDPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_haddv2df3, \"__builtin_ia32_haddpd\", IX86_BUILTIN_HADDPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_hsubv4sf3, \"__builtin_ia32_hsubps\", IX86_BUILTIN_HSUBPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_hsubv2df3, \"__builtin_ia32_hsubpd\", IX86_BUILTIN_HSUBPD, UNKNOWN, 0 },\n \n   /* SSSE3 */\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddwv8hi3, \"__builtin_ia32_phaddw128\", IX86_BUILTIN_PHADDW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddwv4hi3, \"__builtin_ia32_phaddw\", IX86_BUILTIN_PHADDW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phadddv4si3, \"__builtin_ia32_phaddd128\", IX86_BUILTIN_PHADDD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phadddv2si3, \"__builtin_ia32_phaddd\", IX86_BUILTIN_PHADDD, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddswv8hi3, \"__builtin_ia32_phaddsw128\", IX86_BUILTIN_PHADDSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddswv4hi3, \"__builtin_ia32_phaddsw\", IX86_BUILTIN_PHADDSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubwv8hi3, \"__builtin_ia32_phsubw128\", IX86_BUILTIN_PHSUBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubwv4hi3, \"__builtin_ia32_phsubw\", IX86_BUILTIN_PHSUBW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubdv4si3, \"__builtin_ia32_phsubd128\", IX86_BUILTIN_PHSUBD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubdv2si3, \"__builtin_ia32_phsubd\", IX86_BUILTIN_PHSUBD, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubswv8hi3, \"__builtin_ia32_phsubsw128\", IX86_BUILTIN_PHSUBSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubswv4hi3, \"__builtin_ia32_phsubsw\", IX86_BUILTIN_PHSUBSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmaddubswv8hi3, \"__builtin_ia32_pmaddubsw128\", IX86_BUILTIN_PMADDUBSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmaddubswv4hi3, \"__builtin_ia32_pmaddubsw\", IX86_BUILTIN_PMADDUBSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmulhrswv8hi3, \"__builtin_ia32_pmulhrsw128\", IX86_BUILTIN_PMULHRSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmulhrswv4hi3, \"__builtin_ia32_pmulhrsw\", IX86_BUILTIN_PMULHRSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pshufbv16qi3, \"__builtin_ia32_pshufb128\", IX86_BUILTIN_PSHUFB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pshufbv8qi3, \"__builtin_ia32_pshufb\", IX86_BUILTIN_PSHUFB, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv16qi3, \"__builtin_ia32_psignb128\", IX86_BUILTIN_PSIGNB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv8qi3, \"__builtin_ia32_psignb\", IX86_BUILTIN_PSIGNB, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv8hi3, \"__builtin_ia32_psignw128\", IX86_BUILTIN_PSIGNW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv4hi3, \"__builtin_ia32_psignw\", IX86_BUILTIN_PSIGNW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv4si3, \"__builtin_ia32_psignd128\", IX86_BUILTIN_PSIGND128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, 0, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddwv8hi3, \"__builtin_ia32_phaddw128\", IX86_BUILTIN_PHADDW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddwv4hi3, \"__builtin_ia32_phaddw\", IX86_BUILTIN_PHADDW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phadddv4si3, \"__builtin_ia32_phaddd128\", IX86_BUILTIN_PHADDD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phadddv2si3, \"__builtin_ia32_phaddd\", IX86_BUILTIN_PHADDD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddswv8hi3, \"__builtin_ia32_phaddsw128\", IX86_BUILTIN_PHADDSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phaddswv4hi3, \"__builtin_ia32_phaddsw\", IX86_BUILTIN_PHADDSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubwv8hi3, \"__builtin_ia32_phsubw128\", IX86_BUILTIN_PHSUBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubwv4hi3, \"__builtin_ia32_phsubw\", IX86_BUILTIN_PHSUBW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubdv4si3, \"__builtin_ia32_phsubd128\", IX86_BUILTIN_PHSUBD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubdv2si3, \"__builtin_ia32_phsubd\", IX86_BUILTIN_PHSUBD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubswv8hi3, \"__builtin_ia32_phsubsw128\", IX86_BUILTIN_PHSUBSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_phsubswv4hi3, \"__builtin_ia32_phsubsw\", IX86_BUILTIN_PHSUBSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmaddubswv8hi3, \"__builtin_ia32_pmaddubsw128\", IX86_BUILTIN_PMADDUBSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmaddubswv4hi3, \"__builtin_ia32_pmaddubsw\", IX86_BUILTIN_PMADDUBSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmulhrswv8hi3, \"__builtin_ia32_pmulhrsw128\", IX86_BUILTIN_PMULHRSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pmulhrswv4hi3, \"__builtin_ia32_pmulhrsw\", IX86_BUILTIN_PMULHRSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pshufbv16qi3, \"__builtin_ia32_pshufb128\", IX86_BUILTIN_PSHUFB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_pshufbv8qi3, \"__builtin_ia32_pshufb\", IX86_BUILTIN_PSHUFB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv16qi3, \"__builtin_ia32_psignb128\", IX86_BUILTIN_PSIGNB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv8qi3, \"__builtin_ia32_psignb\", IX86_BUILTIN_PSIGNB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv8hi3, \"__builtin_ia32_psignw128\", IX86_BUILTIN_PSIGNW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv4hi3, \"__builtin_ia32_psignw\", IX86_BUILTIN_PSIGNW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv4si3, \"__builtin_ia32_psignd128\", IX86_BUILTIN_PSIGND128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, UNKNOWN, 0 },\n \n   /* SSE4.1 */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_packusdw, \"__builtin_ia32_packusdw128\", IX86_BUILTIN_PACKUSDW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_eqv2di3, \"__builtin_ia32_pcmpeqq\", IX86_BUILTIN_PCMPEQQ, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_smaxv16qi3, \"__builtin_ia32_pmaxsb128\", IX86_BUILTIN_PMAXSB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_smaxv4si3, \"__builtin_ia32_pmaxsd128\", IX86_BUILTIN_PMAXSD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_umaxv4si3, \"__builtin_ia32_pmaxud128\", IX86_BUILTIN_PMAXUD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_umaxv8hi3, \"__builtin_ia32_pmaxuw128\", IX86_BUILTIN_PMAXUW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sminv16qi3, \"__builtin_ia32_pminsb128\", IX86_BUILTIN_PMINSB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sminv4si3, \"__builtin_ia32_pminsd128\", IX86_BUILTIN_PMINSD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv4si3, \"__builtin_ia32_pminud128\", IX86_BUILTIN_PMINUD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv8hi3, \"__builtin_ia32_pminuw128\", IX86_BUILTIN_PMINUW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, 0, IX86_BUILTIN_PMULDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_packusdw, \"__builtin_ia32_packusdw128\", IX86_BUILTIN_PACKUSDW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_eqv2di3, \"__builtin_ia32_pcmpeqq\", IX86_BUILTIN_PCMPEQQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_smaxv16qi3, \"__builtin_ia32_pmaxsb128\", IX86_BUILTIN_PMAXSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_smaxv4si3, \"__builtin_ia32_pmaxsd128\", IX86_BUILTIN_PMAXSD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_umaxv4si3, \"__builtin_ia32_pmaxud128\", IX86_BUILTIN_PMAXUD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_umaxv8hi3, \"__builtin_ia32_pmaxuw128\", IX86_BUILTIN_PMAXUW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sminv16qi3, \"__builtin_ia32_pminsb128\", IX86_BUILTIN_PMINSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sminv4si3, \"__builtin_ia32_pminsd128\", IX86_BUILTIN_PMINSD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv4si3, \"__builtin_ia32_pminud128\", IX86_BUILTIN_PMINUD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv8hi3, \"__builtin_ia32_pminuw128\", IX86_BUILTIN_PMINUW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, 0, IX86_BUILTIN_PMULDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, 0 },\n \n   /* SSE4.2 */\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, 0 },\n };\n \n static const struct builtin_description bdesc_1arg[] =\n {\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sqrtv4sf2, 0, IX86_BUILTIN_SQRTPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_rsqrtv4sf2, 0, IX86_BUILTIN_RSQRTPS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_rcpv4sf2, 0, IX86_BUILTIN_RCPPS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sqrtv4sf2, 0, IX86_BUILTIN_SQRTPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_rsqrtv4sf2, 0, IX86_BUILTIN_RSQRTPS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_rcpv4sf2, 0, IX86_BUILTIN_RCPPS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtps2pi, 0, IX86_BUILTIN_CVTPS2PI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtss2si, 0, IX86_BUILTIN_CVTSS2SI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtss2siq, 0, IX86_BUILTIN_CVTSS2SI64, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvttps2pi, 0, IX86_BUILTIN_CVTTPS2PI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvttss2siq, 0, IX86_BUILTIN_CVTTSS2SI64, 0, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtps2pi, 0, IX86_BUILTIN_CVTPS2PI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtss2si, 0, IX86_BUILTIN_CVTSS2SI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtss2siq, 0, IX86_BUILTIN_CVTSS2SI64, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvttps2pi, 0, IX86_BUILTIN_CVTTPS2PI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvttss2siq, 0, IX86_BUILTIN_CVTTSS2SI64, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sqrtv2df2, 0, IX86_BUILTIN_SQRTPD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sqrtv2df2, 0, IX86_BUILTIN_SQRTPD, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2pd, 0, IX86_BUILTIN_CVTDQ2PD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2ps, 0, IX86_BUILTIN_CVTDQ2PS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2pd, 0, IX86_BUILTIN_CVTDQ2PD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtdq2ps, 0, IX86_BUILTIN_CVTDQ2PS, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2dq, 0, IX86_BUILTIN_CVTPD2DQ, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2pi, 0, IX86_BUILTIN_CVTPD2PI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2ps, 0, IX86_BUILTIN_CVTPD2PS, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttpd2dq, 0, IX86_BUILTIN_CVTTPD2DQ, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttpd2pi, 0, IX86_BUILTIN_CVTTPD2PI, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2dq, 0, IX86_BUILTIN_CVTPD2DQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2pi, 0, IX86_BUILTIN_CVTPD2PI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpd2ps, 0, IX86_BUILTIN_CVTPD2PS, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttpd2dq, 0, IX86_BUILTIN_CVTTPD2DQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttpd2pi, 0, IX86_BUILTIN_CVTTPD2PI, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpi2pd, 0, IX86_BUILTIN_CVTPI2PD, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtpi2pd, 0, IX86_BUILTIN_CVTPI2PD, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2si, 0, IX86_BUILTIN_CVTSD2SI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttsd2si, 0, IX86_BUILTIN_CVTTSD2SI, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsd2siq, 0, IX86_BUILTIN_CVTSD2SI64, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvttsd2siq, 0, IX86_BUILTIN_CVTTSD2SI64, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2si, 0, IX86_BUILTIN_CVTSD2SI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttsd2si, 0, IX86_BUILTIN_CVTTSD2SI, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsd2siq, 0, IX86_BUILTIN_CVTSD2SI64, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvttsd2siq, 0, IX86_BUILTIN_CVTTSD2SI64, UNKNOWN, 0 },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2dq, 0, IX86_BUILTIN_CVTPS2DQ, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, 0, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2dq, 0, IX86_BUILTIN_CVTPS2DQ, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, UNKNOWN, 0 },\n \n   /* SSE3 */\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_movshdup, \"__builtin_ia32_movshdup\", IX86_BUILTIN_MOVSHDUP, 0, 0 },\n-  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_movsldup, \"__builtin_ia32_movsldup\", IX86_BUILTIN_MOVSLDUP, 0, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_movshdup, \"__builtin_ia32_movshdup\", IX86_BUILTIN_MOVSHDUP, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_movsldup, \"__builtin_ia32_movsldup\", IX86_BUILTIN_MOVSLDUP, UNKNOWN, 0 },\n \n   /* SSSE3 */\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv16qi2, \"__builtin_ia32_pabsb128\", IX86_BUILTIN_PABSB128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv8qi2, \"__builtin_ia32_pabsb\", IX86_BUILTIN_PABSB, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv8hi2, \"__builtin_ia32_pabsw128\", IX86_BUILTIN_PABSW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv4hi2, \"__builtin_ia32_pabsw\", IX86_BUILTIN_PABSW, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv4si2, \"__builtin_ia32_pabsd128\", IX86_BUILTIN_PABSD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv2si2, \"__builtin_ia32_pabsd\", IX86_BUILTIN_PABSD, 0, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv16qi2, \"__builtin_ia32_pabsb128\", IX86_BUILTIN_PABSB128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv8qi2, \"__builtin_ia32_pabsb\", IX86_BUILTIN_PABSB, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv8hi2, \"__builtin_ia32_pabsw128\", IX86_BUILTIN_PABSW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv4hi2, \"__builtin_ia32_pabsw\", IX86_BUILTIN_PABSW, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv4si2, \"__builtin_ia32_pabsd128\", IX86_BUILTIN_PABSD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_absv2si2, \"__builtin_ia32_pabsd\", IX86_BUILTIN_PABSD, UNKNOWN, 0 },\n \n   /* SSE4.1 */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv8qiv8hi2, 0, IX86_BUILTIN_PMOVSXBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4qiv4si2, 0, IX86_BUILTIN_PMOVSXBD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2qiv2di2, 0, IX86_BUILTIN_PMOVSXBQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4hiv4si2, 0, IX86_BUILTIN_PMOVSXWD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2hiv2di2, 0, IX86_BUILTIN_PMOVSXWQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2siv2di2, 0, IX86_BUILTIN_PMOVSXDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv8qiv8hi2, 0, IX86_BUILTIN_PMOVZXBW128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv4qiv4si2, 0, IX86_BUILTIN_PMOVZXBD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2qiv2di2, 0, IX86_BUILTIN_PMOVZXBQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv4hiv4si2, 0, IX86_BUILTIN_PMOVZXWD128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2hiv2di2, 0, IX86_BUILTIN_PMOVZXWQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2siv2di2, 0, IX86_BUILTIN_PMOVZXDQ128, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_phminposuw, \"__builtin_ia32_phminposuw128\", IX86_BUILTIN_PHMINPOSUW128, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv8qiv8hi2, 0, IX86_BUILTIN_PMOVSXBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4qiv4si2, 0, IX86_BUILTIN_PMOVSXBD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2qiv2di2, 0, IX86_BUILTIN_PMOVSXBQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4hiv4si2, 0, IX86_BUILTIN_PMOVSXWD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2hiv2di2, 0, IX86_BUILTIN_PMOVSXWQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2siv2di2, 0, IX86_BUILTIN_PMOVSXDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv8qiv8hi2, 0, IX86_BUILTIN_PMOVZXBW128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv4qiv4si2, 0, IX86_BUILTIN_PMOVZXBD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2qiv2di2, 0, IX86_BUILTIN_PMOVZXBQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv4hiv4si2, 0, IX86_BUILTIN_PMOVZXWD128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2hiv2di2, 0, IX86_BUILTIN_PMOVZXWQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2siv2di2, 0, IX86_BUILTIN_PMOVZXDQ128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_phminposuw, \"__builtin_ia32_phminposuw128\", IX86_BUILTIN_PHMINPOSUW128, UNKNOWN, 0 },\n \n   /* Fake 1 arg builtins with a constant smaller than 8 bits as the 2nd arg.  */\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, 0, IX86_BUILTIN_ROUNDPD, 0, 0 },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, 0, IX86_BUILTIN_ROUNDPS, 0, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, 0, IX86_BUILTIN_ROUNDPD, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, 0, IX86_BUILTIN_ROUNDPS, UNKNOWN, 0 },\n };\n \n /* Set up all the MMX/SSE builtins.  This is not called if TARGET_MMX\n@@ -18790,7 +18793,8 @@ ix86_expand_sse_pcmpestr (const struct builtin_description *d,\n       emit_insn\n \t(gen_rtx_SET (VOIDmode, gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t      gen_rtx_fmt_ee (EQ, QImode,\n-\t\t\t\t      gen_rtx_REG (d->flag, FLAGS_REG),\n+\t\t\t\t      gen_rtx_REG ((enum machine_mode) d->flag,\n+\t\t\t\t\t\t   FLAGS_REG),\n \t\t\t\t      const0_rtx)));\n       return SUBREG_REG (target);\n     }\n@@ -18884,7 +18888,8 @@ ix86_expand_sse_pcmpistr (const struct builtin_description *d,\n       emit_insn\n \t(gen_rtx_SET (VOIDmode, gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t      gen_rtx_fmt_ee (EQ, QImode,\n-\t\t\t\t      gen_rtx_REG (d->flag, FLAGS_REG),\n+\t\t\t\t      gen_rtx_REG ((enum machine_mode) d->flag,\n+\t\t\t\t\t\t   FLAGS_REG),\n \t\t\t\t      const0_rtx)));\n       return SUBREG_REG (target);\n     }\n@@ -18995,8 +19000,8 @@ ix86_expand_vec_set_builtin (tree exp)\n   mode1 = TYPE_MODE (TREE_TYPE (TREE_TYPE (arg0)));\n   gcc_assert (VECTOR_MODE_P (tmode));\n \n-  op0 = expand_expr (arg0, NULL_RTX, tmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, mode1, 0);\n+  op0 = expand_expr (arg0, NULL_RTX, tmode, EXPAND_NORMAL);\n+  op1 = expand_expr (arg1, NULL_RTX, mode1, EXPAND_NORMAL);\n   elt = get_element_number (TREE_TYPE (arg0), arg2);\n \n   if (GET_MODE (op1) != mode1 && GET_MODE (op1) != VOIDmode)\n@@ -19516,9 +19521,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       arg2 = CALL_EXPR_ARG (exp, 2);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n       tmode = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n@@ -19742,7 +19747,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n    if it is not available.  */\n \n static tree\n-ix86_builtin_vectorized_function (enum built_in_function fn, tree type_out,\n+ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t\t\t\t  tree type_in)\n {\n   enum machine_mode in_mode, out_mode;\n@@ -19788,7 +19793,7 @@ ix86_builtin_vectorized_function (enum built_in_function fn, tree type_out,\n    input vector of type TYPE, or NULL_TREE if it is not available.  */\n \n static tree\n-ix86_builtin_conversion (enum tree_code code, tree type)\n+ix86_builtin_conversion (unsigned int code, tree type)\n {\n   if (TREE_CODE (type) != VECTOR_TYPE)\n     return NULL_TREE;\n@@ -19922,36 +19927,36 @@ ix86_free_from_memory (enum machine_mode mode)\n    Narrow ALL_REGS to GENERAL_REGS.  This supports allowing movsf and\n    movdf to do mem-to-mem moves through integer regs.  */\n enum reg_class\n-ix86_preferred_reload_class (rtx x, enum reg_class class)\n+ix86_preferred_reload_class (rtx x, enum reg_class regclass)\n {\n   enum machine_mode mode = GET_MODE (x);\n \n   /* We're only allowed to return a subclass of CLASS.  Many of the\n      following checks fail for NO_REGS, so eliminate that early.  */\n-  if (class == NO_REGS)\n+  if (regclass == NO_REGS)\n     return NO_REGS;\n \n   /* All classes can load zeros.  */\n   if (x == CONST0_RTX (mode))\n-    return class;\n+    return regclass;\n \n   /* Force constants into memory if we are loading a (nonzero) constant into\n      an MMX or SSE register.  This is because there are no MMX/SSE instructions\n      to load from a constant.  */\n   if (CONSTANT_P (x)\n-      && (MAYBE_MMX_CLASS_P (class) || MAYBE_SSE_CLASS_P (class)))\n+      && (MAYBE_MMX_CLASS_P (regclass) || MAYBE_SSE_CLASS_P (regclass)))\n     return NO_REGS;\n \n   /* Prefer SSE regs only, if we can use them for math.  */\n   if (TARGET_SSE_MATH && !TARGET_MIX_SSE_I387 && SSE_FLOAT_MODE_P (mode))\n-    return SSE_CLASS_P (class) ? class : NO_REGS;\n+    return SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n \n   /* Floating-point constants need more complex checks.  */\n   if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != VOIDmode)\n     {\n       /* General regs can load everything.  */\n-      if (reg_class_subset_p (class, GENERAL_REGS))\n-        return class;\n+      if (reg_class_subset_p (regclass, GENERAL_REGS))\n+        return regclass;\n \n       /* Floats can load 0 and 1 plus some others.  Note that we eliminated\n \t zero above.  We only want to wind up preferring 80387 registers if\n@@ -19960,14 +19965,14 @@ ix86_preferred_reload_class (rtx x, enum reg_class class)\n \t  && standard_80387_constant_p (x))\n \t{\n \t  /* Limit class to non-sse.  */\n-\t  if (class == FLOAT_SSE_REGS)\n+\t  if (regclass == FLOAT_SSE_REGS)\n \t    return FLOAT_REGS;\n-\t  if (class == FP_TOP_SSE_REGS)\n+\t  if (regclass == FP_TOP_SSE_REGS)\n \t    return FP_TOP_REG;\n-\t  if (class == FP_SECOND_SSE_REGS)\n+\t  if (regclass == FP_SECOND_SSE_REGS)\n \t    return FP_SECOND_REG;\n-\t  if (class == FLOAT_INT_REGS || class == FLOAT_REGS)\n-\t    return class;\n+\t  if (regclass == FLOAT_INT_REGS || regclass == FLOAT_REGS)\n+\t    return regclass;\n \t}\n \n       return NO_REGS;\n@@ -19977,26 +19982,26 @@ ix86_preferred_reload_class (rtx x, enum reg_class class)\n      (plus soft-fp const_int).  Which can only be computed into general\n      regs.  */\n   if (GET_CODE (x) == PLUS)\n-    return reg_class_subset_p (class, GENERAL_REGS) ? class : NO_REGS;\n+    return reg_class_subset_p (regclass, GENERAL_REGS) ? regclass : NO_REGS;\n \n   /* QImode constants are easy to load, but non-constant QImode data\n      must go into Q_REGS.  */\n   if (GET_MODE (x) == QImode && !CONSTANT_P (x))\n     {\n-      if (reg_class_subset_p (class, Q_REGS))\n-\treturn class;\n-      if (reg_class_subset_p (Q_REGS, class))\n+      if (reg_class_subset_p (regclass, Q_REGS))\n+\treturn regclass;\n+      if (reg_class_subset_p (Q_REGS, regclass))\n \treturn Q_REGS;\n       return NO_REGS;\n     }\n \n-  return class;\n+  return regclass;\n }\n \n /* Discourage putting floating-point values in SSE registers unless\n    SSE math is being used, and likewise for the 387 registers.  */\n enum reg_class\n-ix86_preferred_output_reload_class (rtx x, enum reg_class class)\n+ix86_preferred_output_reload_class (rtx x, enum reg_class regclass)\n {\n   enum machine_mode mode = GET_MODE (x);\n \n@@ -20005,19 +20010,19 @@ ix86_preferred_output_reload_class (rtx x, enum reg_class class)\n      alternative: if reload cannot do this, it will still use its choice.  */\n   mode = GET_MODE (x);\n   if (TARGET_SSE_MATH && SSE_FLOAT_MODE_P (mode))\n-    return MAYBE_SSE_CLASS_P (class) ? SSE_REGS : NO_REGS;\n+    return MAYBE_SSE_CLASS_P (regclass) ? SSE_REGS : NO_REGS;\n \n   if (X87_FLOAT_MODE_P (mode))\n     {\n-      if (class == FP_TOP_SSE_REGS)\n+      if (regclass == FP_TOP_SSE_REGS)\n \treturn FP_TOP_REG;\n-      else if (class == FP_SECOND_SSE_REGS)\n+      else if (regclass == FP_SECOND_SSE_REGS)\n \treturn FP_SECOND_REG;\n       else\n-\treturn FLOAT_CLASS_P (class) ? class : NO_REGS;\n+\treturn FLOAT_CLASS_P (regclass) ? regclass : NO_REGS;\n     }\n \n-  return class;\n+  return regclass;\n }\n \n /* If we are copying between general and FP registers, we need a memory\n@@ -20079,17 +20084,17 @@ ix86_secondary_memory_needed (enum reg_class class1, enum reg_class class2,\n \n bool\n ix86_cannot_change_mode_class (enum machine_mode from, enum machine_mode to,\n-\t\t\t       enum reg_class class)\n+\t\t\t       enum reg_class regclass)\n {\n   if (from == to)\n     return false;\n \n   /* x87 registers can't do subreg at all, as all values are reformatted\n      to extended precision.  */\n-  if (MAYBE_FLOAT_CLASS_P (class))\n+  if (MAYBE_FLOAT_CLASS_P (regclass))\n     return true;\n \n-  if (MAYBE_SSE_CLASS_P (class) || MAYBE_MMX_CLASS_P (class))\n+  if (MAYBE_SSE_CLASS_P (regclass) || MAYBE_MMX_CLASS_P (regclass))\n     {\n       /* Vector registers do not support QI or HImode loads.  If we don't\n \t disallow a change to these modes, reload will assume it's ok to\n@@ -20296,9 +20301,9 @@ ix86_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n    Q_REGS classes.\n  */\n int\n-ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n+ix86_memory_move_cost (enum machine_mode mode, enum reg_class regclass, int in)\n {\n-  if (FLOAT_CLASS_P (class))\n+  if (FLOAT_CLASS_P (regclass))\n     {\n       int index;\n       switch (mode)\n@@ -20317,7 +20322,7 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n \t}\n       return in ? ix86_cost->fp_load [index] : ix86_cost->fp_store [index];\n     }\n-  if (SSE_CLASS_P (class))\n+  if (SSE_CLASS_P (regclass))\n     {\n       int index;\n       switch (GET_MODE_SIZE (mode))\n@@ -20336,7 +20341,7 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n \t}\n       return in ? ix86_cost->sse_load [index] : ix86_cost->sse_store [index];\n     }\n-  if (MMX_CLASS_P (class))\n+  if (MMX_CLASS_P (regclass))\n     {\n       int index;\n       switch (GET_MODE_SIZE (mode))\n@@ -20356,10 +20361,10 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n     {\n       case 1:\n \tif (in)\n-\t  return (Q_CLASS_P (class) ? ix86_cost->int_load[0]\n+\t  return (Q_CLASS_P (regclass) ? ix86_cost->int_load[0]\n \t\t  : ix86_cost->movzbl_load);\n \telse\n-\t  return (Q_CLASS_P (class) ? ix86_cost->int_store[0]\n+\t  return (Q_CLASS_P (regclass) ? ix86_cost->int_store[0]\n \t\t  : ix86_cost->int_store[0] + 4);\n \tbreak;\n       case 2:\n@@ -20379,8 +20384,9 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n+ix86_rtx_costs (rtx x, int code, int outer_code_i, int *total)\n {\n+  enum rtx_code outer_code = (enum rtx_code) outer_code_i;\n   enum machine_mode mode = GET_MODE (x);\n \n   switch (code)\n@@ -20959,17 +20965,17 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \t\t     HOST_WIDE_INT vcall_offset, tree function)\n {\n   rtx xops[3];\n-  rtx this = x86_this_parameter (function);\n+  rtx this_param = x86_this_parameter (function);\n   rtx this_reg, tmp;\n \n   /* If VCALL_OFFSET, we'll need THIS in a register.  Might as well\n      pull it in now and let DELTA benefit.  */\n-  if (REG_P (this))\n-    this_reg = this;\n+  if (REG_P (this_param))\n+    this_reg = this_param;\n   else if (vcall_offset)\n     {\n       /* Put the this parameter into %eax.  */\n-      xops[0] = this;\n+      xops[0] = this_param;\n       xops[1] = this_reg = gen_rtx_REG (Pmode, 0);\n       output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n     }\n@@ -20980,7 +20986,7 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n   if (delta)\n     {\n       xops[0] = GEN_INT (delta);\n-      xops[1] = this_reg ? this_reg : this;\n+      xops[1] = this_reg ? this_reg : this_param;\n       if (TARGET_64BIT)\n \t{\n \t  if (!x86_64_general_operand (xops[0], DImode))\n@@ -20989,7 +20995,7 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \t      xops[1] = tmp;\n \t      output_asm_insn (\"mov{q}\\t{%1, %0|%0, %1}\", xops);\n \t      xops[0] = tmp;\n-\t      xops[1] = this;\n+\t      xops[1] = this_param;\n \t    }\n \t  output_asm_insn (\"add{q}\\t{%0, %1|%1, %0}\", xops);\n \t}\n@@ -21036,10 +21042,10 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n     }\n \n   /* If necessary, drop THIS back to its stack slot.  */\n-  if (this_reg && this_reg != this)\n+  if (this_reg && this_reg != this_param)\n     {\n       xops[0] = this_reg;\n-      xops[1] = this;\n+      xops[1] = this_param;\n       output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n     }\n "}]}