{"sha": "b506575ff66ca6e62494b000ae68c182c7b22573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwNjU3NWZmNjZjYTZlNjI0OTRiMDAwYWU2OGMxODJjN2IyMjU3Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:52:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:52:43Z"}, "message": "poly_int: same_addr_size_stores_p\n\nThis patch makes tree-ssa-alias.c:same_addr_size_stores_p handle\npoly_int sizes and offsets.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-ssa-alias.c (same_addr_size_stores_p): Take the offsets and\n\tsizes as poly_int64s rather than HOST_WIDE_INTs.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255870", "tree": {"sha": "e4d2e80a14e35c997e7999bb4b24b8acc5b983ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d2e80a14e35c997e7999bb4b24b8acc5b983ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b506575ff66ca6e62494b000ae68c182c7b22573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b506575ff66ca6e62494b000ae68c182c7b22573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b506575ff66ca6e62494b000ae68c182c7b22573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b506575ff66ca6e62494b000ae68c182c7b22573/comments", "author": null, "committer": null, "parents": [{"sha": "30acf2829633b900ea5fe9a3a00aad1e9a84bf43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30acf2829633b900ea5fe9a3a00aad1e9a84bf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30acf2829633b900ea5fe9a3a00aad1e9a84bf43"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "a08c80bed1bfa46cb0b28940a9d30041ec2987f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b506575ff66ca6e62494b000ae68c182c7b22573/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b506575ff66ca6e62494b000ae68c182c7b22573/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b506575ff66ca6e62494b000ae68c182c7b22573", "patch": "@@ -1,3 +1,10 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-ssa-alias.c (same_addr_size_stores_p): Take the offsets and\n+\tsizes as poly_int64s rather than HOST_WIDE_INTs.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "4d46162791f30572b70d4123de2f7e2c54d28211", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b506575ff66ca6e62494b000ae68c182c7b22573/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b506575ff66ca6e62494b000ae68c182c7b22573/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=b506575ff66ca6e62494b000ae68c182c7b22573", "patch": "@@ -2320,14 +2320,14 @@ stmt_may_clobber_ref_p (gimple *stmt, tree ref)\n    address.  */\n \n static bool\n-same_addr_size_stores_p (tree base1, HOST_WIDE_INT offset1, HOST_WIDE_INT size1,\n-\t\t\t HOST_WIDE_INT max_size1,\n-\t\t\t tree base2, HOST_WIDE_INT offset2, HOST_WIDE_INT size2,\n-\t\t\t HOST_WIDE_INT max_size2)\n+same_addr_size_stores_p (tree base1, poly_int64 offset1, poly_int64 size1,\n+\t\t\t poly_int64 max_size1,\n+\t\t\t tree base2, poly_int64 offset2, poly_int64 size2,\n+\t\t\t poly_int64 max_size2)\n {\n   /* Offsets need to be 0.  */\n-  if (offset1 != 0\n-      || offset2 != 0)\n+  if (maybe_ne (offset1, 0)\n+      || maybe_ne (offset2, 0))\n     return false;\n \n   bool base1_obj_p = SSA_VAR_P (base1);\n@@ -2346,17 +2346,19 @@ same_addr_size_stores_p (tree base1, HOST_WIDE_INT offset1, HOST_WIDE_INT size1,\n   tree memref = base1_memref_p ? base1 : base2;\n \n   /* Sizes need to be valid.  */\n-  if (max_size1 == -1 || max_size2 == -1\n-      || size1 == -1 || size2 == -1)\n+  if (!known_size_p (max_size1)\n+      || !known_size_p (max_size2)\n+      || !known_size_p (size1)\n+      || !known_size_p (size2))\n     return false;\n \n   /* Max_size needs to match size.  */\n-  if (max_size1 != size1\n-      || max_size2 != size2)\n+  if (maybe_ne (max_size1, size1)\n+      || maybe_ne (max_size2, size2))\n     return false;\n \n   /* Sizes need to match.  */\n-  if (size1 != size2)\n+  if (maybe_ne (size1, size2))\n     return false;\n \n \n@@ -2384,10 +2386,9 @@ same_addr_size_stores_p (tree base1, HOST_WIDE_INT offset1, HOST_WIDE_INT size1,\n \n   /* Check that the object size is the same as the store size.  That ensures us\n      that ptr points to the start of obj.  */\n-  if (!tree_fits_shwi_p (DECL_SIZE (obj)))\n-    return false;\n-  HOST_WIDE_INT obj_size = tree_to_shwi (DECL_SIZE (obj));\n-  return obj_size == size1;\n+  return (DECL_SIZE (obj)\n+\t  && poly_int_tree_p (DECL_SIZE (obj))\n+\t  && known_eq (wi::to_poly_offset (DECL_SIZE (obj)), size1));\n }\n \n /* If STMT kills the memory reference REF return true, otherwise"}]}