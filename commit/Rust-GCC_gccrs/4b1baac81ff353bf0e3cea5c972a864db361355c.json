{"sha": "4b1baac81ff353bf0e3cea5c972a864db361355c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxYmFhYzgxZmYzNTNiZjBlM2NlYTVjOTcyYTg2NGRiMzYxMzU1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-03-09T07:54:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-03-09T07:54:02Z"}, "message": "re PR middle-end/56524 (Compiler ICE when compiling with -mips16)\n\ngcc/\n\tPR middle-end/56524\n\t* tree.h (tree_optimization_option): Rename target_optabs to optabs.\n\tAdd base_optabs.\n\t(TREE_OPTIMIZATION_OPTABS): Update after previous field change.\n\t(TREE_OPTIMIZATION_BASE_OPTABS): New macro.\n\t(save_optabs_if_changed): Replace with...\n\t(init_tree_optimization_optabs): ...this.\n\t* optabs.c (save_optabs_if_changed): Rename to...\n\t(init_tree_optimization_optabs): ...this.  Take the optimization node\n\tas argument.  Do nothing if the base optabs are already correct.\n\tReuse the existing TREE_OPTIMIZATION_OPTABS memory if we need\n\tto recompute optabs.\n\t* function.h (function): Remove optabs field.\n\t* function.c (invoke_set_current_function_hook): Call\n\tinit_tree_optimization_optabs.  Use the result to initialize\n\tthis_fn_optabs.\n\ngcc/c-family/\n\tPR middle-end/56524\n\t* c-common.c (handle_optimize_attribute): Don't call\n\tsave_optabs_if_changed.\n\ngcc/testsuite/\n\tPR middle-end/56524\n\t* gcc.target/mips/pr56524.c: New test.\n\nFrom-SVN: r196570", "tree": {"sha": "6f0f3cdaa7c97b4ffb3074c195483271e15c9cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f0f3cdaa7c97b4ffb3074c195483271e15c9cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1baac81ff353bf0e3cea5c972a864db361355c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1baac81ff353bf0e3cea5c972a864db361355c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1baac81ff353bf0e3cea5c972a864db361355c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1baac81ff353bf0e3cea5c972a864db361355c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc107acf8d31160a54c0ba669fc3db0aec6548aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc107acf8d31160a54c0ba669fc3db0aec6548aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc107acf8d31160a54c0ba669fc3db0aec6548aa"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "3ae6c4c84b59eb14855b5e9d7280748cfd0cde52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -1,3 +1,22 @@\n+2013-03-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/56524\n+\t* tree.h (tree_optimization_option): Rename target_optabs to optabs.\n+\tAdd base_optabs.\n+\t(TREE_OPTIMIZATION_OPTABS): Update after previous field change.\n+\t(TREE_OPTIMIZATION_BASE_OPTABS): New macro.\n+\t(save_optabs_if_changed): Replace with...\n+\t(init_tree_optimization_optabs): ...this.\n+\t* optabs.c (save_optabs_if_changed): Rename to...\n+\t(init_tree_optimization_optabs): ...this.  Take the optimization node\n+\tas argument.  Do nothing if the base optabs are already correct.\n+\tReuse the existing TREE_OPTIMIZATION_OPTABS memory if we need\n+\tto recompute optabs.\n+\t* function.h (function): Remove optabs field.\n+\t* function.c (invoke_set_current_function_hook): Call\n+\tinit_tree_optimization_optabs.  Use the result to initialize\n+\tthis_fn_optabs.\n+\n 2013-02-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* trans-mem.c (expand_transaction): Do not set PR_INSTRUMENTEDCODE"}, {"sha": "dd6cb296a4446ad7f301362a6f4e00e7fd9c59c8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -1,3 +1,9 @@\n+2013-03-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/56524\n+\t* c-common.c (handle_optimize_attribute): Don't call\n+\tsave_optabs_if_changed.\n+\n 2013-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56461"}, {"sha": "c7cdd0fc7a0bbe44d259429261df602f294ccf03", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -8947,8 +8947,6 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t= build_optimization_node ();\n \n-      save_optabs_if_changed (*node);\n-\n       /* Restore current options.  */\n       cl_optimization_restore (&global_options, &cur_opts);\n     }"}, {"sha": "e673f21a57d892851f0333e2f74661c82c498ca3", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -4400,25 +4400,14 @@ invoke_set_current_function_hook (tree fndecl)\n \t}\n \n       targetm.set_current_function (fndecl);\n+      this_fn_optabs = this_target_optabs;\n \n-      if (opts == optimization_default_node)\n-\tthis_fn_optabs = this_target_optabs;\n-      else\n+      if (opts != optimization_default_node)\n \t{\n-\t  struct function *fn = DECL_STRUCT_FUNCTION (fndecl);\n-\t  if (fn->optabs == NULL)\n-\t    {\n-\t      if (this_target_optabs == &default_target_optabs)\n-\t\tfn->optabs = TREE_OPTIMIZATION_OPTABS (opts);\n-\t      else\n-\t\t{\n-\t\t  fn->optabs = (unsigned char *)\n-\t\t    ggc_alloc_atomic (sizeof (struct target_optabs));\n-\t\t  init_all_optabs ((struct target_optabs *) fn->optabs);\n-\t\t}\n-\t    }\n-\t  this_fn_optabs = fn->optabs ? (struct target_optabs *) fn->optabs\n-\t                              : this_target_optabs;\n+\t  init_tree_optimization_optabs (opts);\n+\t  if (TREE_OPTIMIZATION_OPTABS (opts))\n+\t    this_fn_optabs = (struct target_optabs *)\n+\t      TREE_OPTIMIZATION_OPTABS (opts);\n \t}\n     }\n }"}, {"sha": "89d71e592dd227e52422dc4249037fac54e6d346", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -580,9 +580,6 @@ struct GTY(()) function {\n      a string describing the reason for failure.  */\n   const char * GTY((skip)) cannot_be_copied_reason;\n \n-  /* Optabs for this function.  This is of type `struct target_optabs *'.  */\n-  unsigned char *GTY ((atomic)) optabs;\n-\n   /* Collected bit flags.  */\n \n   /* Number of units of general registers that need saving in stdarg"}, {"sha": "a3051ad9d9ae66e3a7d4b19d1a12d4d6e0272322", "filename": "gcc/optabs.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -6208,31 +6208,32 @@ init_optabs (void)\n   targetm.init_libfuncs ();\n }\n \n-/* Recompute the optabs and save them if they have changed.  */\n+/* Use the current target and options to initialize\n+   TREE_OPTIMIZATION_OPTABS (OPTNODE).  */\n \n void\n-save_optabs_if_changed (tree fndecl)\n+init_tree_optimization_optabs (tree optnode)\n {\n-  /* ?? If this fails, we should temporarily restore the default\n-     target first (set_cfun (NULL) ??), do the rest of this function,\n-     and then restore it.  */\n-  gcc_assert (this_target_optabs == &default_target_optabs);\n+  /* Quick exit if we have already computed optabs for this target.  */\n+  if (TREE_OPTIMIZATION_BASE_OPTABS (optnode) == this_target_optabs)\n+    return;\n \n+  /* Forget any previous information and set up for the current target.  */\n+  TREE_OPTIMIZATION_BASE_OPTABS (optnode) = this_target_optabs;\n   struct target_optabs *tmp_optabs = (struct target_optabs *)\n-    ggc_alloc_atomic (sizeof (struct target_optabs));\n-  tree optnode = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n+    TREE_OPTIMIZATION_OPTABS (optnode);\n+  if (tmp_optabs)\n+    memset (tmp_optabs, 0, sizeof (struct target_optabs));\n+  else\n+    tmp_optabs = (struct target_optabs *)\n+      ggc_alloc_atomic (sizeof (struct target_optabs));\n \n   /* Generate a new set of optabs into tmp_optabs.  */\n   init_all_optabs (tmp_optabs);\n \n   /* If the optabs changed, record it.  */\n   if (memcmp (tmp_optabs, this_target_optabs, sizeof (struct target_optabs)))\n-    {\n-      if (TREE_OPTIMIZATION_OPTABS (optnode))\n-\tggc_free (TREE_OPTIMIZATION_OPTABS (optnode));\n-\n-      TREE_OPTIMIZATION_OPTABS (optnode) = (unsigned char *) tmp_optabs;\n-    }\n+    TREE_OPTIMIZATION_OPTABS (optnode) = (unsigned char *) tmp_optabs;\n   else\n     {\n       TREE_OPTIMIZATION_OPTABS (optnode) = NULL;"}, {"sha": "15156f7ae8c61dc8f3980d7aeb83576e4ef6f6ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -1,3 +1,8 @@\n+2013-03-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/56524\n+\t* gcc.target/mips/pr56524.c: New test.\n+\n 2013-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56565"}, {"sha": "7df021b6998d2b72790f77f832719a703f5c0c5b", "filename": "gcc/testsuite/gcc.target/mips/pr56524.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr56524.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr56524.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr56524.c?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-mips16\" } */\n+\n+void bar (void) {}\n+\n+void __attribute__((optimize(\"schedule-insns\")))\n+foo (void)\n+{\n+}"}, {"sha": "b852f1d9434a1c843fcc64f3a1c1192aa4586623", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1baac81ff353bf0e3cea5c972a864db361355c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4b1baac81ff353bf0e3cea5c972a864db361355c", "patch": "@@ -3589,21 +3589,26 @@ struct GTY(()) tree_optimization_option {\n \n   /* Target optabs for this set of optimization options.  This is of\n      type `struct target_optabs *'.  */\n-  unsigned char *GTY ((atomic)) target_optabs;\n+  unsigned char *GTY ((atomic)) optabs;\n+\n+  /* The value of this_target_optabs against which the optabs above were\n+     generated.  */\n+  struct target_optabs *GTY ((skip)) base_optabs;\n };\n \n #define TREE_OPTIMIZATION(NODE) \\\n   (&OPTIMIZATION_NODE_CHECK (NODE)->optimization.opts)\n \n #define TREE_OPTIMIZATION_OPTABS(NODE) \\\n-  (OPTIMIZATION_NODE_CHECK (NODE)->optimization.target_optabs)\n+  (OPTIMIZATION_NODE_CHECK (NODE)->optimization.optabs)\n+\n+#define TREE_OPTIMIZATION_BASE_OPTABS(NODE) \\\n+  (OPTIMIZATION_NODE_CHECK (NODE)->optimization.base_optabs)\n \n /* Return a tree node that encapsulates the current optimization options.  */\n extern tree build_optimization_node (void);\n \n-/* Save a new set of target_optabs in a TREE_OPTIMIZATION node if the\n-   current set of optabs has changed.  */\n-extern void save_optabs_if_changed (tree);\n+extern void init_tree_optimization_optabs (tree);\n \n /* Target options used by a function.  */\n "}]}