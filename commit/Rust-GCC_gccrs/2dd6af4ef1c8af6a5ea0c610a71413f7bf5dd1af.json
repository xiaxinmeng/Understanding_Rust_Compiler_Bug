{"sha": "2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkNmFmNGVmMWM4YWY2YTVlYTBjNjEwYTcxNDEzZjdiZjVkZDFhZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-18T11:10:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-18T11:10:10Z"}, "message": "re PR bootstrap/71435 (sparc bootstrap failure since r235625)\n\n\tPR bootstrap/71435\n\t* reload1.c (reload): Pass 0 to finish_spills when called because\n\tupdate_eliminables_and_spill returns true and remove did_spill.\n\t(finish_spills): Adjust comment and document GLOBAL parameter.\n\nFrom-SVN: r237571", "tree": {"sha": "5487f6b9b9c8795888041cf9bd85db6090fb024b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5487f6b9b9c8795888041cf9bd85db6090fb024b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af/comments", "author": null, "committer": null, "parents": [{"sha": "2b357a2ba762c323f7e63516fab93446e13c9ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b357a2ba762c323f7e63516fab93446e13c9ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b357a2ba762c323f7e63516fab93446e13c9ab7"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "dc901dacda0bc04fdf3d8210e4814c3aea0efc7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "patch": "@@ -1,3 +1,10 @@\n+2016-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/71435\n+\t* reload1.c (reload): Pass 0 to finish_spills when called because\n+\tupdate_eliminables_and_spill returns true and remove did_spill.\n+\t(finish_spills): Adjust comment and document GLOBAL parameter.\n+\n 2016-06-17  DJ Delorie  <dj@redhat.com>\n \n \tPR target/71338"}, {"sha": "5622e895e4be2818c48c9d9144d2edc8a98ffe84", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2dd6af4ef1c8af6a5ea0c610a71413f7bf5dd1af", "patch": "@@ -897,7 +897,6 @@ reload (rtx_insn *first, int global)\n   for (;;)\n     {\n       int something_changed;\n-      int did_spill;\n       HOST_WIDE_INT starting_frame_size;\n \n       starting_frame_size = get_frame_size ();\n@@ -982,7 +981,7 @@ reload (rtx_insn *first, int global)\n       if (something_was_spilled || starting_frame_size != get_frame_size ())\n \t{\n \t  if (update_eliminables_and_spill ())\n-\t    finish_spills (global);\n+\t    finish_spills (0);\n \t  continue;\n \t}\n \n@@ -1001,8 +1000,6 @@ reload (rtx_insn *first, int global)\n \t   is used.  */\n \tCLEAR_REG_SET (&spilled_pseudos);\n \n-      did_spill = 0;\n-\n       something_changed = 0;\n \n       /* If we allocated any new memory locations, make another pass\n@@ -1019,19 +1016,18 @@ reload (rtx_insn *first, int global)\n \n       if (update_eliminables_and_spill ())\n \t{\n-\t  did_spill = 1;\n+\t  finish_spills (0);\n \t  something_changed = 1;\n \t}\n       else\n \t{\n \t  select_reload_regs ();\n \t  if (failure)\n \t    goto failed;\n+\t  if (insns_need_reload)\n+\t    something_changed |= finish_spills (global);\n \t}\n \n-      if (insns_need_reload != 0 || did_spill)\n-\tsomething_changed |= finish_spills (global);\n-\n       if (! something_changed)\n \tbreak;\n \n@@ -4281,10 +4277,13 @@ spill_hard_reg (unsigned int regno, int cant_eliminate)\n       SET_REGNO_REG_SET (&spilled_pseudos, i);\n }\n \n-/* After find_reload_regs has been run for all insn that need reloads,\n-   and/or spill_hard_regs was called, this function is used to actually\n-   spill pseudo registers and try to reallocate them.  It also sets up the\n-   spill_regs array for use by choose_reload_regs.  */\n+/* After spill_hard_reg was called and/or find_reload_regs was run for all\n+   insns that need reloads, this function is used to actually spill pseudo\n+   registers and try to reallocate them.  It also sets up the spill_regs\n+   array for use by choose_reload_regs.\n+\n+   GLOBAL nonzero means we should attempt to reallocate any pseudo registers\n+   that we displace from hard registers.  */\n \n static int\n finish_spills (int global)"}]}