{"sha": "43f6dfd3ec224e73a7175987f651b3d455f7803f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmNmRmZDNlYzIyNGU3M2E3MTc1OTg3ZjY1MWIzZDQ1NWY3ODAzZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-05-09T20:48:33Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-05-09T20:48:33Z"}, "message": "c-tree.h (parser_build_unary_op): New prototype.\n\n\n\t* c-tree.h (parser_build_unary_op): New prototype.\n\t* c-typeck.c (parser_build_unary_op): New function to construct\n\ta unary operation in the C parser.\n\t* c-parser.c (c_parser_unary_expression):  Use the new function\n\tparser_build_unary_op when appropriate.\n\nFrom-SVN: r99471", "tree": {"sha": "55b63c7bc470ab9a0ee49ea53a931e7a2f5a48d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b63c7bc470ab9a0ee49ea53a931e7a2f5a48d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f6dfd3ec224e73a7175987f651b3d455f7803f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f6dfd3ec224e73a7175987f651b3d455f7803f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f6dfd3ec224e73a7175987f651b3d455f7803f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f6dfd3ec224e73a7175987f651b3d455f7803f/comments", "author": null, "committer": null, "parents": [{"sha": "32df413ae734d59d5579b05b1751ebe7a79ac014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32df413ae734d59d5579b05b1751ebe7a79ac014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32df413ae734d59d5579b05b1751ebe7a79ac014"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "ae7d68e46725f3e1d73c3fcc3d715b7f00ab0ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f6dfd3ec224e73a7175987f651b3d455f7803f", "patch": "@@ -1,3 +1,11 @@\n+2005-05-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-tree.h (parser_build_unary_op): New prototype.\n+\t* c-typeck.c (parser_build_unary_op): New function to construct\n+\ta unary operation in the C parser.\n+\t* c-parser.c (c_parser_unary_expression):  Use the new function\n+\tparser_build_unary_op when appropriate.\n+\n 2005-05-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR 18655"}, {"sha": "96bab469f4198c45b62dc63e0d64d27856e84038", "filename": "gcc/c-parser.c", "status": "modified", "additions": 23, "deletions": 48, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=43f6dfd3ec224e73a7175987f651b3d455f7803f", "patch": "@@ -4495,66 +4495,45 @@ c_parser_unary_expression (c_parser *parser)\n {\n   int ext;\n   struct c_expr ret;\n-  ret.original_code = ERROR_MARK;\n   switch (c_parser_peek_token (parser)->type)\n     {\n     case CPP_PLUS_PLUS:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (PREINCREMENT_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (PREINCREMENT_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_MINUS_MINUS:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (PREDECREMENT_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (PREDECREMENT_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_AND:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (ADDR_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (ADDR_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_MULT:\n       c_parser_consume_token (parser);\n       ret.value\n \t= build_indirect_ref (c_parser_cast_expression (parser, NULL).value,\n \t\t\t      \"unary *\");\n+      ret.original_code = ERROR_MARK;\n       return ret;\n     case CPP_PLUS:\n       c_parser_consume_token (parser);\n       if (!c_dialect_objc () && warn_traditional && !in_system_header)\n \twarning (0, \"traditional C rejects the unary plus operator\");\n-      ret.value\n-\t= build_unary_op (CONVERT_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (CONVERT_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_MINUS:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (NEGATE_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (NEGATE_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_COMPL:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (BIT_NOT_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (BIT_NOT_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_NOT:\n       c_parser_consume_token (parser);\n-      ret.value\n-\t= build_unary_op (TRUTH_NOT_EXPR,\n-\t\t\t  c_parser_cast_expression (parser, NULL).value, 0);\n-      overflow_warning (ret.value);\n-      return ret;\n+      return parser_build_unary_op (TRUTH_NOT_EXPR,\n+\t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_AND_AND:\n       /* Refer to the address of a label as a pointer.  */\n       c_parser_consume_token (parser);\n@@ -4563,14 +4542,14 @@ c_parser_unary_expression (c_parser *parser)\n \t  ret.value = finish_label_address_expr\n \t    (c_parser_peek_token (parser)->value);\n \t  c_parser_consume_token (parser);\n-\t  return ret;\n \t}\n       else\n \t{\n \t  c_parser_error (parser, \"expected identifier\");\n \t  ret.value = error_mark_node;\n-\t  return ret;\n \t}\n+\tret.original_code = ERROR_MARK;\n+\treturn ret;\n     case CPP_KEYWORD:\n       switch (c_parser_peek_token (parser)->keyword)\n \t{\n@@ -4586,18 +4565,14 @@ c_parser_unary_expression (c_parser *parser)\n \t  return ret;\n \tcase RID_REALPART:\n \t  c_parser_consume_token (parser);\n-\t  ret.value\n-\t    = build_unary_op (REALPART_EXPR,\n-\t\t\t      c_parser_cast_expression (parser, NULL).value,\n-\t\t\t      0);\n-\t  return ret;\n+\t  return parser_build_unary_op (REALPART_EXPR,\n+\t\t\t\t\tc_parser_cast_expression (parser,\n+\t\t\t\t\t\t\t\t  NULL));\n \tcase RID_IMAGPART:\n \t  c_parser_consume_token (parser);\n-\t  ret.value\n-\t    = build_unary_op (IMAGPART_EXPR,\n-\t\t\t      c_parser_cast_expression (parser, NULL).value,\n-\t\t\t      0);\n-\t  return ret;\n+\t  return parser_build_unary_op (IMAGPART_EXPR,\n+\t\t\t\t\tc_parser_cast_expression (parser,\n+\t\t\t\t\t\t\t\t  NULL));\n \tdefault:\n \t  return c_parser_postfix_expression (parser);\n \t}"}, {"sha": "7af8130a42692a8732a5548a3c92266c9a2bc37d", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=43f6dfd3ec224e73a7175987f651b3d455f7803f", "patch": "@@ -531,6 +531,7 @@ extern tree build_external_ref (tree, int, location_t);\n extern void pop_maybe_used (bool);\n extern struct c_expr c_expr_sizeof_expr (struct c_expr);\n extern struct c_expr c_expr_sizeof_type (struct c_type_name *);\n+extern struct c_expr parser_build_unary_op (enum tree_code, struct c_expr);\n extern struct c_expr parser_build_binary_op (enum tree_code, struct c_expr,\n \t\t\t\t\t     struct c_expr);\n extern tree build_conditional_expr (tree, tree, tree);"}, {"sha": "d3b1c957020811c34b69a09ffe05cb737d836511", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f6dfd3ec224e73a7175987f651b3d455f7803f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=43f6dfd3ec224e73a7175987f651b3d455f7803f", "patch": "@@ -2312,11 +2312,27 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n   return nreverse (result);\n }\n \f\n-/* This is the entry point used by the parser\n-   for binary operators in the input.\n-   In addition to constructing the expression,\n-   we check for operands that were written with other binary operators\n-   in a way that is likely to confuse the user.  */\n+/* This is the entry point used by the parser to build unary operators\n+   in the input.  CODE, a tree_code, specifies the unary operator, and\n+   ARG is the operand.  For unary plus, the C parser currently uses\n+   CONVERT_EXPR for code.  */\n+\n+struct c_expr\n+parser_build_unary_op (enum tree_code code, struct c_expr arg)\n+{\n+  struct c_expr result;\n+\n+  result.original_code = ERROR_MARK;\n+  result.value = build_unary_op (code, arg.value, 0);\n+  overflow_warning (result.value);\n+  return result;\n+}\n+\n+/* This is the entry point used by the parser to build binary operators\n+   in the input.  CODE, a tree_code, specifies the binary operator, and\n+   ARG1 and ARG2 are the operands.  In addition to constructing the\n+   expression, we check for operands that were written with other binary\n+   operators in a way that is likely to confuse the user.  */\n \n struct c_expr\n parser_build_binary_op (enum tree_code code, struct c_expr arg1,"}]}