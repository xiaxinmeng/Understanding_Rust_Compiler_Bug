{"sha": "66946624b96b762985de56444d726a0ebd4e0df5", "node_id": "C_kwDOANBUbNoAKDY2OTQ2NjI0Yjk2Yjc2Mjk4NWRlNTY0NDRkNzI2YTBlYmQ0ZTBkZjU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-04-13T15:57:57Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-04-13T15:57:57Z"}, "message": "aarch64: Don't trust TYPE_ALIGN for pointers [PR108910]\n\nThe aarch64 PCS rules ignore user alignment for scalars and\nvectors and use the \"natural\" alignment of the type.  GCC tried\nto calculate that natural alignment using:\n\n  TYPE_ALIGN (TYPE_MAIN_VARIANT (type))\n\nBut as discussed in the PR, it's possible that the main variant\nof a pointer type is an overaligned type (although that's usually\naccidental).\n\nThis isn't known to be a problem for other types, so this patch\nchanges the bare minimum.  It might be that we need to ignore\nTYPE_ALIGN in other cases too.\n\ngcc/\n\tPR target/108910\n\t* config/aarch64/aarch64.cc (aarch64_function_arg_alignment): Do\n\tnot trust TYPE_ALIGN for pointer types; use POINTER_SIZE instead.\n\ngcc/testsuite/\n\tPR target/108910\n\t* gcc.dg/torture/pr108910.c: New test.", "tree": {"sha": "7e729782df46bdfe1821de3adac11686b1b58aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e729782df46bdfe1821de3adac11686b1b58aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66946624b96b762985de56444d726a0ebd4e0df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66946624b96b762985de56444d726a0ebd4e0df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66946624b96b762985de56444d726a0ebd4e0df5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66946624b96b762985de56444d726a0ebd4e0df5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37783de23c067d6a26374ff29c014e49604035c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37783de23c067d6a26374ff29c014e49604035c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37783de23c067d6a26374ff29c014e49604035c"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "f4ef22ce02f2acc81023aa11ff7d5c6c79ad313b", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66946624b96b762985de56444d726a0ebd4e0df5/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66946624b96b762985de56444d726a0ebd4e0df5/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=66946624b96b762985de56444d726a0ebd4e0df5", "patch": "@@ -7484,7 +7484,20 @@ aarch64_function_arg_alignment (machine_mode mode, const_tree type,\n   gcc_assert (TYPE_MODE (type) == mode);\n \n   if (!AGGREGATE_TYPE_P (type))\n-    return TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n+    {\n+      /* The ABI alignment is the natural alignment of the type, without\n+\t any attributes applied.  Normally this is the alignment of the\n+\t TYPE_MAIN_VARIANT, but not always; see PR108910 for a counterexample.\n+\t For now we just handle the known exceptions explicitly.  */\n+      type = TYPE_MAIN_VARIANT (type);\n+      if (POINTER_TYPE_P (type))\n+\t{\n+\t  gcc_assert (known_eq (POINTER_SIZE, GET_MODE_BITSIZE (mode)));\n+\t  return POINTER_SIZE;\n+\t}\n+      gcc_assert (!TYPE_USER_ALIGN (type));\n+      return TYPE_ALIGN (type);\n+    }\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     return TYPE_ALIGN (TREE_TYPE (type));"}, {"sha": "59735488c2eceb3456cf70f2d42ed326d211e28e", "filename": "gcc/testsuite/gcc.dg/torture/pr108910.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66946624b96b762985de56444d726a0ebd4e0df5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66946624b96b762985de56444d726a0ebd4e0df5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c?ref=66946624b96b762985de56444d726a0ebd4e0df5", "patch": "@@ -0,0 +1,8 @@\n+extern void foo (float, float *, float *);\n+\n+void\n+bar (void *p)\n+{\n+  float *__attribute__((aligned (64))) q = __builtin_assume_aligned (p, 64);\n+  foo (0.0f, q, q);\n+}"}]}