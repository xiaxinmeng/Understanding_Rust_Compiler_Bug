{"sha": "46183c96d2aea8181efb6bc3cfdb221987fe002d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxODNjOTZkMmFlYTgxODFlZmI2YmMzY2ZkYjIyMTk4N2ZlMDAyZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-23T19:11:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-30T12:34:37Z"}, "message": "x86: Use SET operation in MOVDIRI and MOVDIR64B\n\nSince MOVDIRI and MOVDIR64B write to memory, similar to UNSPEC_MOVNT,\nuse SET operation in MOVDIRI and MOVDIR64B patterns with UNSPEC instead\nof UNSPECV.\n\ngcc/\n\n\tPR target/97184\n\t* config/i386/i386.md (UNSPECV_MOVDIRI): Renamed to ...\n\t(UNSPEC_MOVDIRI): This.\n\t(UNSPECV_MOVDIR64B): Renamed to ...\n\t(UNSPEC_MOVDIR64B): This.\n\t(movdiri<mode>): Use SET operation.\n\t(@movdir64b_<mode>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/97184\n\t* gcc.target/i386/movdir64b.c: New test.\n\t* gcc.target/i386/movdiri32.c: Likewise.\n\t* gcc.target/i386/movdiri64.c: Likewise.\n\t* lib/target-supports.exp (check_effective_target_movdir): New.", "tree": {"sha": "1e4fce32da5981a4c7bf6e62dcb6167563d9b80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e4fce32da5981a4c7bf6e62dcb6167563d9b80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46183c96d2aea8181efb6bc3cfdb221987fe002d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46183c96d2aea8181efb6bc3cfdb221987fe002d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46183c96d2aea8181efb6bc3cfdb221987fe002d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46183c96d2aea8181efb6bc3cfdb221987fe002d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0eb14bc8553d6e97f1cf70276c6a4fa67b7c38"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "9dd12cf8643bf131532d36392395293e05a15178", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=46183c96d2aea8181efb6bc3cfdb221987fe002d", "patch": "@@ -186,6 +186,10 @@\n \n   ;; IRET support\n   UNSPEC_INTERRUPT_RETURN\n+\n+  ;; For MOVDIRI and MOVDIR64B support\n+  UNSPEC_MOVDIRI\n+  UNSPEC_MOVDIR64B\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -280,10 +284,6 @@\n   UNSPECV_SETSSBSY\n   UNSPECV_CLRSSBSY\n \n-  ;; For MOVDIRI and MOVDIR64B support\n-  UNSPECV_MOVDIRI\n-  UNSPECV_MOVDIR64B\n-\n   ;; For TSXLDTRK support\n   UNSPECV_XSUSLDTRK\n   UNSPECV_XRESLDTRK\n@@ -21531,17 +21531,17 @@\n ;; MOVDIRI and MOVDIR64B\n \n (define_insn \"movdiri<mode>\"\n-  [(unspec_volatile:SWI48 [(match_operand:SWI48 0 \"memory_operand\" \"m\")\n-\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")]\n-\t\t\t  UNSPECV_MOVDIRI)]\n+  [(set (match_operand:SWI48 0 \"memory_operand\" \"=m\")\n+\t(unspec:SWI48 [(match_operand:SWI48 1 \"register_operand\" \"r\")]\n+\t\t      UNSPEC_MOVDIRI))]\n   \"TARGET_MOVDIRI\"\n   \"movdiri\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n (define_insn \"@movdir64b_<mode>\"\n-  [(unspec_volatile:XI [(match_operand:P 0 \"register_operand\" \"r\")\n-\t\t\t(match_operand:XI 1 \"memory_operand\")]\n-\t\t       UNSPECV_MOVDIR64B)]\n+  [(set (mem:XI (match_operand:P 0 \"register_operand\" \"r\"))\n+\t(unspec:XI [(match_operand:XI 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_MOVDIR64B))]\n   \"TARGET_MOVDIR64B\"\n   \"movdir64b\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])"}, {"sha": "70d872ec5d5223d1269307c2dbd6e78086c15a24", "filename": "gcc/testsuite/gcc.target/i386/movdir64b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir64b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir64b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir64b.c?ref=46183c96d2aea8181efb6bc3cfdb221987fe002d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run { target movdir } } */\n+/* { dg-options \"-mmovdir64b -O2\" } */\n+\n+#include <x86intrin.h>\n+#include <string.h>\n+\n+unsigned long long int src[8] = {1, 2, 3, 4, 5, 6, 7, 8};\n+unsigned long long int dest[8] __attribute__ ((aligned (64)))\n+  = {-1, -1, -1, -1, -1, -1, -1, -1};\n+\n+int\n+main ()\n+{\n+  if (!__builtin_cpu_supports (\"movdir64b\"))\n+    return 0;\n+\n+  _movdir64b (dest, src);\n+\n+  if (memcmp (dest, src, sizeof (dest)) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "604fa0dd9e9e21cda5f3075e59bd49f8127fdfc8", "filename": "gcc/testsuite/gcc.target/i386/movdiri32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri32.c?ref=46183c96d2aea8181efb6bc3cfdb221987fe002d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target movdir } } */\n+/* { dg-options \"-mmovdiri -O2\" } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int dest = -1;\n+\n+int\n+main ()\n+{\n+  if (!__builtin_cpu_supports (\"movdiri\"))\n+    return 0;\n+\n+  _directstoreu_u32 (&dest, 0xbadbeef);\n+\n+  if (dest != 0xbadbeef)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "551b98e8d08a2be8329322a46aa728004cccec53", "filename": "gcc/testsuite/gcc.target/i386/movdiri64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdiri64.c?ref=46183c96d2aea8181efb6bc3cfdb221987fe002d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target { movdir && { ! ia32 } } } } */\n+/* { dg-options \"-mmovdiri -O2\" } */\n+\n+#include <x86intrin.h>\n+\n+unsigned long long int dest = -1LL;\n+\n+int\n+main ()\n+{\n+  if (!__builtin_cpu_supports (\"movdiri\"))\n+    return 0;\n+\n+  _directstoreu_u64 (&dest, 0x12345678badbeef);\n+\n+  if (dest != 0x12345678badbeef)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "2fb59e8759a7fb80d2938e1604b602a2fa20f277", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46183c96d2aea8181efb6bc3cfdb221987fe002d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=46183c96d2aea8181efb6bc3cfdb221987fe002d", "patch": "@@ -10552,3 +10552,20 @@ proc check_effective_target_ident_directive {} {\n \tint i;\n     }]\n }\n+\n+# Return 1 if we're able to assemble movdiri and movdir64b\n+\n+proc check_effective_target_movdir { } {\n+    return [check_no_compiler_messages movdir object {\n+\tvoid\n+\tfoo (unsigned int *d, unsigned int s)\n+\t{\n+\t  __builtin_ia32_directstoreu_u32 (d, s);\n+\t}\n+\tvoid\n+\tbar (void *d, const void *s)\n+\t{\n+\t  __builtin_ia32_movdir64b (d, s);\n+\t}\n+    } \"-mmovdiri -mmovdir64b\" ]\n+}"}]}