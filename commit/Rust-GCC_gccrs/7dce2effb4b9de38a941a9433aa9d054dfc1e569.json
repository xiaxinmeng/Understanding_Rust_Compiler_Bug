{"sha": "7dce2effb4b9de38a941a9433aa9d054dfc1e569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjZTJlZmZiNGI5ZGUzOGE5NDFhOTQzM2FhOWQwNTRkZmMxZTU2OQ==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@redhat.com", "date": "2001-03-21T20:01:40Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-03-21T20:01:40Z"}, "message": "cp-demangle.c (struct demangling_def): New fields: is_constructor and is_destructor.\n\n* cp-demangle.c (struct demangling_def): New fields:\nis_constructor and is_destructor.\n(demangling_new): Initialize them.\n(demangle_ctor_dtor_name): Set them, if we detect a constructor\nor destructor.\n(demangle_v3_with_details, is_gnu_v3_mangled_ctor,\nis_gnu_v3_mangled_dtor): New functions.\n\nFrom-SVN: r40713", "tree": {"sha": "582847a0e8fc2383694d34259829111ffd1d4fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/582847a0e8fc2383694d34259829111ffd1d4fbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dce2effb4b9de38a941a9433aa9d054dfc1e569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dce2effb4b9de38a941a9433aa9d054dfc1e569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dce2effb4b9de38a941a9433aa9d054dfc1e569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dce2effb4b9de38a941a9433aa9d054dfc1e569/comments", "author": null, "committer": null, "parents": [{"sha": "a8d1960882c702df96396caa90c5dedd7d1a7cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d1960882c702df96396caa90c5dedd7d1a7cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d1960882c702df96396caa90c5dedd7d1a7cba"}], "stats": {"total": 130, "additions": 124, "deletions": 6}, "files": [{"sha": "3ecdc88d123edb4a8c90cfc8137c3082471ffdce", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dce2effb4b9de38a941a9433aa9d054dfc1e569/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dce2effb4b9de38a941a9433aa9d054dfc1e569/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7dce2effb4b9de38a941a9433aa9d054dfc1e569", "patch": "@@ -13,6 +13,16 @@\n \t* Makefile.in (CFILES): Add make-temp-file.c.\n \t(REQUIRED_OFILES): Add make-temp-file.o.\n \n+2001-03-20  Jim Blandy  <jimb@redhat.com>\n+\n+\t* cp-demangle.c (struct demangling_def): New fields:\n+\tis_constructor and is_destructor.\n+\t(demangling_new): Initialize them.\n+\t(demangle_ctor_dtor_name): Set them, if we detect a constructor\n+\tor destructor.\n+\t(demangle_v3_with_details, is_gnu_v3_mangled_ctor,\n+\tis_gnu_v3_mangled_dtor): New functions.\n+\n 2001-03-20  Jason Merrill  <jason@redhat.com>\n \n \t* cplus-dem.c (main): Skip initial $."}, {"sha": "e436735c8a551260d21662582ed4aae9b0a1e1f1", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 114, "deletions": 6, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dce2effb4b9de38a941a9433aa9d054dfc1e569/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dce2effb4b9de38a941a9433aa9d054dfc1e569/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=7dce2effb4b9de38a941a9433aa9d054dfc1e569", "patch": "@@ -172,6 +172,15 @@ struct demangling_def\n   \n   /* Language style to use for demangled output. */\n   int style;\n+\n+  /* Set to non-zero iff this name is a constructor.  The actual value\n+     indicates what sort of constructor this is; see demangle.h.  */\n+  enum gnu_v3_ctor_kinds is_constructor;\n+\n+  /* Set to non-zero iff this name is a destructor.  The actual value\n+     indicates what sort of destructor this is; see demangle.h.  */\n+  enum gnu_v3_dtor_kinds is_destructor;\n+\n };\n \n typedef struct demangling_def *demangling_t;\n@@ -815,6 +824,8 @@ demangling_new (name, style)\n       return NULL;\n     }\n   dm->style = style;\n+  dm->is_constructor = 0;\n+  dm->is_destructor = 0;\n \n   return dm;\n }\n@@ -2018,32 +2029,50 @@ demangle_ctor_dtor_name (dm)\n     {\n       /* A constructor name.  Consume the C.  */\n       advance_char (dm);\n-      if (peek_char (dm) < '1' || peek_char (dm) > '3')\n+      flavor = next_char (dm);\n+      if (flavor < '1' || flavor > '3')\n \treturn \"Unrecognized constructor.\";\n       RETURN_IF_ERROR (result_add_string (dm, dm->last_source_name));\n+      switch (flavor)\n+\t{\n+\tcase '1': dm->is_constructor = gnu_v3_complete_object_ctor;\n+\t  break;\n+\tcase '2': dm->is_constructor = gnu_v3_base_object_ctor;\n+\t  break;\n+\tcase '3': dm->is_constructor = gnu_v3_complete_object_allocating_ctor;\n+\t  break;\n+\t}\n       /* Print the flavor of the constructor if in verbose mode.  */\n-      flavor = next_char (dm) - '1';\n       if (flag_verbose)\n \t{\n \t  RETURN_IF_ERROR (result_add (dm, \"[\"));\n-\t  RETURN_IF_ERROR (result_add (dm, ctor_flavors[flavor]));\n+\t  RETURN_IF_ERROR (result_add (dm, ctor_flavors[flavor - '1']));\n \t  RETURN_IF_ERROR (result_add_char (dm, ']'));\n \t}\n     }\n   else if (peek == 'D')\n     {\n       /* A destructor name.  Consume the D.  */\n       advance_char (dm);\n-      if (peek_char (dm) < '0' || peek_char (dm) > '2')\n+      flavor = next_char (dm);\n+      if (flavor < '0' || flavor > '2')\n \treturn \"Unrecognized destructor.\";\n       RETURN_IF_ERROR (result_add_char (dm, '~'));\n       RETURN_IF_ERROR (result_add_string (dm, dm->last_source_name));\n+      switch (flavor)\n+\t{\n+\tcase '0': dm->is_destructor = gnu_v3_deleting_dtor;\n+\t  break;\n+\tcase '1': dm->is_destructor = gnu_v3_complete_object_dtor;\n+\t  break;\n+\tcase '2': dm->is_destructor = gnu_v3_base_object_dtor;\n+\t  break;\n+\t}\n       /* Print the flavor of the destructor if in verbose mode.  */\n-      flavor = next_char (dm) - '0';\n       if (flag_verbose)\n \t{\n \t  RETURN_IF_ERROR (result_add (dm, \" [\"));\n-\t  RETURN_IF_ERROR (result_add (dm, dtor_flavors[flavor]));\n+\t  RETURN_IF_ERROR (result_add (dm, dtor_flavors[flavor - '0']));\n \t  RETURN_IF_ERROR (result_add_char (dm, ']'));\n \t}\n     }\n@@ -3789,6 +3818,85 @@ java_demangle_v3 (mangled)\n \n #endif /* IN_LIBGCC2 */\n \n+\n+/* Demangle NAME in the G++ V3 ABI demangling style, and return either\n+   zero, indicating that some error occurred, or a demangling_t\n+   holding the results.  */\n+static demangling_t\n+demangle_v3_with_details (const char *name)\n+{\n+  demangling_t dm;\n+  status_t status;\n+\n+  if (strncmp (name, \"_Z\", 2))\n+    return 0;\n+\n+  dm = demangling_new (name, DMGL_GNU_V3);\n+  if (dm == NULL)\n+    {\n+      fprintf (stderr, \"Memory allocation failed.\\n\");\n+      abort ();\n+    }\n+\n+  status = result_push (dm);\n+  if (! STATUS_NO_ERROR (status))\n+    {\n+      demangling_delete (dm);\n+      fprintf (stderr, \"%s\\n\", status);\n+      abort ();\n+    }\n+\n+  status = demangle_mangled_name (dm);\n+  if (STATUS_NO_ERROR (status))\n+    return dm;\n+\n+  demangling_delete (dm);\n+  return 0;\n+}\n+\n+\n+/* Return non-zero iff NAME is the mangled form of a constructor name\n+   in the G++ V3 ABI demangling style.  Specifically, return:\n+   - '1' if NAME is a complete object constructor,\n+   - '2' if NAME is a base object constructor, or\n+   - '3' if NAME is a complete object allocating constructor.  */\n+enum gnu_v3_ctor_kinds\n+is_gnu_v3_mangled_ctor (const char *name)\n+{\n+  demangling_t dm = demangle_v3_with_details (name);\n+\n+  if (dm)\n+    {\n+      enum gnu_v3_ctor_kinds result = dm->is_constructor;\n+      demangling_delete (dm);\n+      return result;\n+    }\n+  else\n+    return 0;\n+}\n+\n+\n+/* Return non-zero iff NAME is the mangled form of a destructor name\n+   in the G++ V3 ABI demangling style.  Specifically, return:\n+   - '0' if NAME is a deleting destructor,\n+   - '1' if NAME is a complete object destructor, or\n+   - '2' if NAME is a base object destructor.  */\n+enum gnu_v3_dtor_kinds\n+is_gnu_v3_mangled_dtor (const char *name)\n+{\n+  demangling_t dm = demangle_v3_with_details (name);\n+\n+  if (dm)\n+    {\n+      enum gnu_v3_dtor_kinds result = dm->is_destructor;\n+      demangling_delete (dm);\n+      return result;\n+    }\n+  else\n+    return 0;\n+}\n+\n+\n #ifdef STANDALONE_DEMANGLER\n \n #include \"getopt.h\""}]}