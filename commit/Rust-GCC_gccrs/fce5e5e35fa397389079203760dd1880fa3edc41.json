{"sha": "fce5e5e35fa397389079203760dd1880fa3edc41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlNWU1ZTM1ZmEzOTczODkwNzkyMDM3NjBkZDE4ODBmYTNlZGM0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-09-09T07:24:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-09-09T07:24:03Z"}, "message": "re PR c/67500 (OpenMP ICE with invalid safelen/simdlen/alignment expressions)\n\n\tPR c/67500\n\t* c-parser.c (c_parser_omp_clause_aligned,\n\tc_parser_omp_clause_safelen, c_parser_omp_clause_simdlen): Fix up\n\ttest for errors.\n\t* c-decl.c (temp_pop_parm_decls): Allow b->decl equal to\n\terror_mark_node.\n\n\t* gcc.dg/gomp/pr67500.c: New test.\n\nFrom-SVN: r227577", "tree": {"sha": "ce2a1fe9ee949f1a0961fb1e5c6df3ceead751c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2a1fe9ee949f1a0961fb1e5c6df3ceead751c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fce5e5e35fa397389079203760dd1880fa3edc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce5e5e35fa397389079203760dd1880fa3edc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce5e5e35fa397389079203760dd1880fa3edc41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce5e5e35fa397389079203760dd1880fa3edc41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4b189d53bbc5def47c17cdc04c1c7fd291f29b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b189d53bbc5def47c17cdc04c1c7fd291f29b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b189d53bbc5def47c17cdc04c1c7fd291f29b1"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "141be369b6d909533f2d0de94f9429d5664a4e6c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fce5e5e35fa397389079203760dd1880fa3edc41", "patch": "@@ -1,5 +1,12 @@\n 2015-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/67500\n+\t* c-parser.c (c_parser_omp_clause_aligned,\n+\tc_parser_omp_clause_safelen, c_parser_omp_clause_simdlen): Fix up\n+\ttest for errors.\n+\t* c-decl.c (temp_pop_parm_decls): Allow b->decl equal to\n+\terror_mark_node.\n+\n \tPR c/67495\n \t* c-parser.c (c_parser_omp_atomic): Use c_parser_cast_expression\n \tinstead of c_parser_unary_expression.  If the result is !lvalue_p,"}, {"sha": "5e5b6d7dfc2b61e5f98ac4ef4d16314077e50ce2", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=fce5e5e35fa397389079203760dd1880fa3edc41", "patch": "@@ -8912,7 +8912,8 @@ temp_pop_parm_decls (void)\n   current_scope->bindings = NULL;\n   for (; b; b = free_binding_and_advance (b))\n     {\n-      gcc_assert (TREE_CODE (b->decl) == PARM_DECL);\n+      gcc_assert (TREE_CODE (b->decl) == PARM_DECL\n+\t\t  || b->decl == error_mark_node);\n       gcc_assert (I_SYMBOL_BINDING (b->id) == b);\n       I_SYMBOL_BINDING (b->id) = b->shadowed;\n       if (b->shadowed && b->shadowed->u.type)"}, {"sha": "6213fd452376d16b2a18107e3d2657de64b6d24d", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=fce5e5e35fa397389079203760dd1880fa3edc41", "patch": "@@ -11231,9 +11231,9 @@ c_parser_omp_clause_aligned (c_parser *parser, tree list)\n       tree alignment = c_parser_expr_no_commas (parser, NULL).value;\n       mark_exp_read (alignment);\n       alignment = c_fully_fold (alignment, false, NULL);\n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (alignment))\n-\t  && TREE_CODE (alignment) != INTEGER_CST\n-\t  && tree_int_cst_sgn (alignment) != 1)\n+      if (TREE_CODE (alignment) != INTEGER_CST\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (alignment))\n+\t  || tree_int_cst_sgn (alignment) != 1)\n \t{\n \t  error_at (clause_loc, \"%<aligned%> clause alignment expression must \"\n \t\t\t\t\"be positive constant integer expression\");\n@@ -11310,9 +11310,9 @@ c_parser_omp_clause_safelen (c_parser *parser, tree list)\n   t = c_parser_expr_no_commas (parser, NULL).value;\n   mark_exp_read (t);\n   t = c_fully_fold (t, false, NULL);\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n-      && TREE_CODE (t) != INTEGER_CST\n-      && tree_int_cst_sgn (t) != 1)\n+  if (TREE_CODE (t) != INTEGER_CST\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (t))\n+      || tree_int_cst_sgn (t) != 1)\n     {\n       error_at (clause_loc, \"%<safelen%> clause expression must \"\n \t\t\t    \"be positive constant integer expression\");\n@@ -11346,9 +11346,9 @@ c_parser_omp_clause_simdlen (c_parser *parser, tree list)\n   t = c_parser_expr_no_commas (parser, NULL).value;\n   mark_exp_read (t);\n   t = c_fully_fold (t, false, NULL);\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n-      && TREE_CODE (t) != INTEGER_CST\n-      && tree_int_cst_sgn (t) != 1)\n+  if (TREE_CODE (t) != INTEGER_CST\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (t))\n+      || tree_int_cst_sgn (t) != 1)\n     {\n       error_at (clause_loc, \"%<simdlen%> clause expression must \"\n \t\t\t    \"be positive constant integer expression\");"}, {"sha": "c1c0b6c01da6c4ed3a604e8fb27a6e80392b0214", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fce5e5e35fa397389079203760dd1880fa3edc41", "patch": "@@ -1,5 +1,8 @@\n 2015-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/67500\n+\t* gcc.dg/gomp/pr67500.c: New test.\n+\n \tPR c/67495\n \t* gcc.dg/gomp/pr67495.c: New test.\n "}, {"sha": "13a6903d72d4c6c7acf1bc5b38808856d76277f5", "filename": "gcc/testsuite/gcc.dg/gomp/pr67500.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr67500.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce5e5e35fa397389079203760dd1880fa3edc41/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr67500.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr67500.c?ref=fce5e5e35fa397389079203760dd1880fa3edc41", "patch": "@@ -0,0 +1,42 @@\n+/* PR c/67500 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#pragma omp declare simd simdlen(d)\t/* { dg-error \"clause expression must be positive constant integer expression\" } */\n+void f1 (int);\t\t\t\t/* { dg-error \"undeclared here\" \"\" { target *-*-* } 5 } */\n+#pragma omp declare simd simdlen(0.5)\t/* { dg-error \"clause expression must be positive constant integer expression\" } */\n+void f2 (int);\n+#pragma omp declare simd simdlen(-2)\t/* { dg-error \"clause expression must be positive constant integer expression\" } */\n+void f3 (int);\n+#pragma omp declare simd simdlen(0)\t/* { dg-error \"clause expression must be positive constant integer expression\" } */\n+void f4 (int);\n+\n+void\n+foo (int *p)\n+{\n+  int i;\n+  #pragma omp simd safelen(d)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\t\t/* { dg-error \"undeclared\" \"\" { target *-*-* } 18 } */\n+    ;\n+  #pragma omp simd safelen(0.5)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd safelen(-2)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd safelen(0)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd aligned(p:d)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd aligned(p:0.5)\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd aligned(p:-2)\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+  #pragma omp simd aligned(p:0)\t\t/* { dg-error \"must be positive constant integer expression\" } */\n+  for (i = 0; i < 16; ++i)\n+    ;\n+}"}]}