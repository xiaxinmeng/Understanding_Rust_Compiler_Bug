{"sha": "477fcae3e8156d1cdcf7978595c3cff7617610b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3ZmNhZTNlODE1NmQxY2RjZjc5Nzg1OTVjM2NmZjc2MTc2MTBiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-29T08:27:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-29T08:27:04Z"}, "message": "re PR middle-end/50708 (Infinite loop between rshift_double and lshift_double if count is LONG_MIN)\n\n2012-03-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/50708\n\t* double-int.h (rshift_double): Remove.\n\t* double-int.c (lshift_double): Use absu_hwi to make count\n\tpositive.\n\t(rshift_double): Make static, take unsigned count argument,\n\tremove handling of negative count argument.\n\t(double_int_rshift): Dispatch to lshift_double.\n\nFrom-SVN: r185951", "tree": {"sha": "b43e29c3de16f535b3761a7a63b0cd8d9e988d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b43e29c3de16f535b3761a7a63b0cd8d9e988d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477fcae3e8156d1cdcf7978595c3cff7617610b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477fcae3e8156d1cdcf7978595c3cff7617610b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477fcae3e8156d1cdcf7978595c3cff7617610b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477fcae3e8156d1cdcf7978595c3cff7617610b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b28472897a059fdbb13f869dab5777af2e52297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b28472897a059fdbb13f869dab5777af2e52297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b28472897a059fdbb13f869dab5777af2e52297"}], "stats": {"total": 125, "additions": 63, "deletions": 62}, "files": [{"sha": "0c2d199c54d116314186b7c970cd696e3e323efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=477fcae3e8156d1cdcf7978595c3cff7617610b8", "patch": "@@ -1,3 +1,13 @@\n+2012-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/50708\n+\t* double-int.h (rshift_double): Remove.\n+\t* double-int.c (lshift_double): Use absu_hwi to make count\n+\tpositive.\n+\t(rshift_double): Make static, take unsigned count argument,\n+\tremove handling of negative count argument.\n+\t(double_int_rshift): Dispatch to lshift_double.\n+\n 2012-03-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/biarch64.h (TARGET_64BIT_DEFAULT): Add"}, {"sha": "0f954425093b62894596c18ffed737f91688c75d", "filename": "gcc/double-int.c", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=477fcae3e8156d1cdcf7978595c3cff7617610b8", "patch": "@@ -186,24 +186,22 @@ mul_double_with_sign (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n   return (*hv < 0 ? ~(toplow & tophigh) : toplow | tophigh) != 0;\n }\n \n-/* Shift the doubleword integer in L1, H1 left by COUNT places\n-   keeping only PREC bits of result.\n-   Shift right if COUNT is negative.\n-   ARITH nonzero specifies arithmetic shifting; otherwise use logical shift.\n+/* Shift the doubleword integer in L1, H1 right by COUNT places\n+   keeping only PREC bits of result.  ARITH nonzero specifies\n+   arithmetic shifting; otherwise use logical shift.\n    Store the value as two `HOST_WIDE_INT' pieces in *LV and *HV.  */\n \n-void\n-lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n-\t       HOST_WIDE_INT count, unsigned int prec,\n-\t       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv, bool arith)\n+static void\n+rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n+\t       unsigned HOST_WIDE_INT count, unsigned int prec,\n+\t       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv,\n+\t       bool arith)\n {\n   unsigned HOST_WIDE_INT signmask;\n \n-  if (count < 0)\n-    {\n-      rshift_double (l1, h1, -count, prec, lv, hv, arith);\n-      return;\n-    }\n+  signmask = (arith\n+\t      ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))\n+\t      : 0);\n \n   if (SHIFT_COUNT_TRUNCATED)\n     count %= prec;\n@@ -217,61 +215,58 @@ lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n     }\n   else if (count >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv = l1 << (count - HOST_BITS_PER_WIDE_INT);\n-      *lv = 0;\n+      *hv = 0;\n+      *lv = (unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n-      *hv = (((unsigned HOST_WIDE_INT) h1 << count)\n-\t     | (l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));\n-      *lv = l1 << count;\n+      *hv = (unsigned HOST_WIDE_INT) h1 >> count;\n+      *lv = ((l1 >> count)\n+\t     | ((unsigned HOST_WIDE_INT) h1\n+\t\t<< (HOST_BITS_PER_WIDE_INT - count - 1) << 1));\n     }\n \n-  /* Sign extend all bits that are beyond the precision.  */\n-\n-  signmask = -((prec > HOST_BITS_PER_WIDE_INT\n-\t\t? ((unsigned HOST_WIDE_INT) *hv\n-\t\t   >> (prec - HOST_BITS_PER_WIDE_INT - 1))\n-\t\t: (*lv >> (prec - 1))) & 1);\n+  /* Zero / sign extend all bits that are beyond the precision.  */\n \n-  if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n+  if (count >= (HOST_WIDE_INT)prec)\n+    {\n+      *hv = signmask;\n+      *lv = signmask;\n+    }\n+  else if ((prec - count) >= 2 * HOST_BITS_PER_WIDE_INT)\n     ;\n-  else if (prec >= HOST_BITS_PER_WIDE_INT)\n+  else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n-      *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);\n+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));\n+      *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n       *hv = signmask;\n-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);\n-      *lv |= signmask << prec;\n+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));\n+      *lv |= signmask << (prec - count);\n     }\n }\n \n-/* Shift the doubleword integer in L1, H1 right by COUNT places\n-   keeping only PREC bits of result.  Shift left if COUNT is negative.\n+/* Shift the doubleword integer in L1, H1 left by COUNT places\n+   keeping only PREC bits of result.\n+   Shift right if COUNT is negative.\n    ARITH nonzero specifies arithmetic shifting; otherwise use logical shift.\n    Store the value as two `HOST_WIDE_INT' pieces in *LV and *HV.  */\n \n void\n-rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n+lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n \t       HOST_WIDE_INT count, unsigned int prec,\n-\t       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv,\n-\t       bool arith)\n+\t       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv, bool arith)\n {\n   unsigned HOST_WIDE_INT signmask;\n \n   if (count < 0)\n     {\n-      lshift_double (l1, h1, -count, prec, lv, hv, arith);\n+      rshift_double (l1, h1, absu_hwi (count), prec, lv, hv, arith);\n       return;\n     }\n \n-  signmask = (arith\n-\t      ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))\n-\t      : 0);\n-\n   if (SHIFT_COUNT_TRUNCATED)\n     count %= prec;\n \n@@ -284,36 +279,35 @@ rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n     }\n   else if (count >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv = 0;\n-      *lv = (unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT);\n+      *hv = l1 << (count - HOST_BITS_PER_WIDE_INT);\n+      *lv = 0;\n     }\n   else\n     {\n-      *hv = (unsigned HOST_WIDE_INT) h1 >> count;\n-      *lv = ((l1 >> count)\n-\t     | ((unsigned HOST_WIDE_INT) h1\n-\t\t<< (HOST_BITS_PER_WIDE_INT - count - 1) << 1));\n+      *hv = (((unsigned HOST_WIDE_INT) h1 << count)\n+\t     | (l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));\n+      *lv = l1 << count;\n     }\n \n-  /* Zero / sign extend all bits that are beyond the precision.  */\n+  /* Sign extend all bits that are beyond the precision.  */\n \n-  if (count >= (HOST_WIDE_INT)prec)\n-    {\n-      *hv = signmask;\n-      *lv = signmask;\n-    }\n-  else if ((prec - count) >= 2 * HOST_BITS_PER_WIDE_INT)\n+  signmask = -((prec > HOST_BITS_PER_WIDE_INT\n+\t\t? ((unsigned HOST_WIDE_INT) *hv\n+\t\t   >> (prec - HOST_BITS_PER_WIDE_INT - 1))\n+\t\t: (*lv >> (prec - 1))) & 1);\n+\n+  if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n     ;\n-  else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)\n+  else if (prec >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));\n-      *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);\n+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+      *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n       *hv = signmask;\n-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));\n-      *lv |= signmask << (prec - count);\n+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);\n+      *lv |= signmask << prec;\n     }\n }\n \n@@ -895,7 +889,7 @@ double_int\n double_int_rshift (double_int a, HOST_WIDE_INT count, unsigned int prec, bool arith)\n {\n   double_int ret;\n-  rshift_double (a.low, a.high, count, prec, &ret.low, &ret.high, arith);\n+  lshift_double (a.low, a.high, -count, prec, &ret.low, &ret.high, arith);\n   return ret;\n }\n "}, {"sha": "408ed92b8a119cca9c1ce834e98783c1eaab2729", "filename": "gcc/double-int.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477fcae3e8156d1cdcf7978595c3cff7617610b8/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=477fcae3e8156d1cdcf7978595c3cff7617610b8", "patch": "@@ -300,9 +300,6 @@ extern int mul_double_with_sign (unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n extern void lshift_double (unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t   HOST_WIDE_INT, unsigned int,\n \t\t\t   unsigned HOST_WIDE_INT *, HOST_WIDE_INT *, bool);\n-extern void rshift_double (unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t   HOST_WIDE_INT, unsigned int,\n-\t\t\t   unsigned HOST_WIDE_INT *, HOST_WIDE_INT *, bool);\n extern int div_and_round_double (unsigned, int, unsigned HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, unsigned HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, unsigned HOST_WIDE_INT *,"}]}