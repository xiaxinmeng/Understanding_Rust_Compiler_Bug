{"sha": "618d6c1c4df3b6363de8564373578a73f605f27e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4ZDZjMWM0ZGYzYjYzNjNkZTg1NjQzNzM1NzhhNzNmNjA1ZjI3ZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-04T22:54:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-04T22:54:52Z"}, "message": "Fix constexpr evaluation of comparisons involving pointer-to-members\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_binary_expression): Fold equality\n\tcomparisons involving PTRMEM_CSTs.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-ptrmem5.C: New test.\n\nFrom-SVN: r233158", "tree": {"sha": "c04eca8d743478926aef38372afd11444d227844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c04eca8d743478926aef38372afd11444d227844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618d6c1c4df3b6363de8564373578a73f605f27e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618d6c1c4df3b6363de8564373578a73f605f27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618d6c1c4df3b6363de8564373578a73f605f27e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618d6c1c4df3b6363de8564373578a73f605f27e/comments", "author": null, "committer": null, "parents": [{"sha": "d094128b5b35d96e1ceb2e3c86a4295414631f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d094128b5b35d96e1ceb2e3c86a4295414631f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d094128b5b35d96e1ceb2e3c86a4295414631f8f"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "2b6362daf2f66b197c58e6b5fe86b41edb0cb51b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=618d6c1c4df3b6363de8564373578a73f605f27e", "patch": "@@ -1,3 +1,8 @@\n+2016-02-04  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* constexpr.c (cxx_eval_binary_expression): Fold equality\n+\tcomparisons involving PTRMEM_CSTs.\n+\n 2016-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* class.c (find_flexarrays): Don't declare dom variable."}, {"sha": "05f68435cd051058428228ea2944b60af8a0f498", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=618d6c1c4df3b6363de8564373578a73f605f27e", "patch": "@@ -1593,7 +1593,7 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t    bool /*lval*/,\n \t\t\t    bool *non_constant_p, bool *overflow_p)\n {\n-  tree r;\n+  tree r = NULL_TREE;\n   tree orig_lhs = TREE_OPERAND (t, 0);\n   tree orig_rhs = TREE_OPERAND (t, 1);\n   tree lhs, rhs;\n@@ -1612,7 +1612,25 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n   location_t loc = EXPR_LOCATION (t);\n   enum tree_code code = TREE_CODE (t);\n   tree type = TREE_TYPE (t);\n-  r = fold_binary_loc (loc, code, type, lhs, rhs);\n+\n+  if (code == EQ_EXPR || code == NE_EXPR)\n+    {\n+      bool is_code_eq = (code == EQ_EXPR);\n+\n+      if (TREE_CODE (lhs) == PTRMEM_CST\n+\t  && TREE_CODE (rhs) == PTRMEM_CST)\n+\tr = constant_boolean_node (cp_tree_equal (lhs, rhs) == is_code_eq,\n+\t\t\t\t   type);\n+      else if ((TREE_CODE (lhs) == PTRMEM_CST\n+\t\t|| TREE_CODE (rhs) == PTRMEM_CST)\n+\t       && (null_member_pointer_value_p (lhs)\n+\t\t   || null_member_pointer_value_p (rhs)))\n+\tr = constant_boolean_node (!is_code_eq, type);\n+    }\n+\n+  if (r == NULL_TREE)\n+    r = fold_binary_loc (loc, code, type, lhs, rhs);\n+\n   if (r == NULL_TREE)\n     {\n       if (lhs == orig_lhs && rhs == orig_rhs)"}, {"sha": "d7c75ed705b04c29719681dadb5fd608d2d48f22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=618d6c1c4df3b6363de8564373578a73f605f27e", "patch": "@@ -1,3 +1,7 @@\n+2016-02-04  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* g++.dg/cpp0x/constexpr-ptrmem5.C: New test.\n+\n 2016-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69669\n@@ -81,7 +85,7 @@\n 2016-02-03  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/69056\n-\tg++.dg/cpp0x/pr69056.C: New test.\n+\t* g++.dg/cpp0x/pr69056.C: New test.\n \n 2016-02-03  Vladimir Makarov  <vmakarov@redhat.com>\n \t    Alexandre Oliva  <aoliva@redhat.com>"}, {"sha": "b1318c4cd1263427089abbc5f857b0623f09f440", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ptrmem5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618d6c1c4df3b6363de8564373578a73f605f27e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrmem5.C?ref=618d6c1c4df3b6363de8564373578a73f605f27e", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(x) static_assert ((x), #x)\n+\n+struct X { int a, b; };\n+\n+void\n+foo ()\n+{\n+  SA (&X::a);\n+  SA (&X::a == &X::a);\n+  SA (!(&X::a != &X::a));\n+  SA (&X::a != &X::b);\n+  SA (!(&X::a == &X::b));\n+  SA ((!&X::b) == 0);\n+  SA (!(&X::b == 0));\n+}"}]}