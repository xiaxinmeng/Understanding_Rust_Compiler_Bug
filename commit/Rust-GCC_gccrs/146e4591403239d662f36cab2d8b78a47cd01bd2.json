{"sha": "146e4591403239d662f36cab2d8b78a47cd01bd2", "node_id": "C_kwDOANBUbNoAKDE0NmU0NTkxNDAzMjM5ZDY2MmYzNmNhYjJkOGI3OGE0N2NkMDFiZDI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-06T09:04:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-06T09:04:52Z"}, "message": "libgcc: Decrease size of _Unwind_FrameState and even more size of cleared area in uw_frame_state_for\n\nThe following patch implements something that has Florian found as\nlow hanging fruit in our unwinder and has been discussed in the\nhttps://gcc.gnu.org/wiki/cauldron2022#cauldron2022talks.inprocess_unwinding_bof\ntalk.\n_Unwind_FrameState type seems to be (unlike the pre-GCC 3 frame_state\nwhich has been part of ABI) private to unwind-dw2.c + unwind.inc it\nincludes, it is always defined on the stack of some entrypoints, initialized\nby static uw_frame_state_for and the address of it is also passed to other\nstatic functions or the static inlines handling machine dependent unwinding,\nbut it isn't fortunately passed to any callbacks or public functions, so I\nthink we can safely change it any time we want.\nFlorian mentioned that the structure is large even on x86_64, 384 bytes\nthere, starts with 328 bytes long element with frame_state_reg_info type\nwhich then starts with an array with __LIBGCC_DWARF_FRAME_REGISTERS__ + 1\nelements, each of them is 16 bytes long, on x86_64\n__LIBGCC_DWARF_FRAME_REGISTERS__ is just 17 but even that is big, on say\nriscv __LIBGCC_DWARF_FRAME_REGISTERS__ is I think 128, on powerpc 111,\non sh 153 etc.  And, we memset to zero the whole fs variable with the\n_Unwind_FrameState type at the start of the unwinding.\nThe reason why each element is 16 byte (on 64-bit arches) is that it\ncontains some pointer or pointer sized integer and then an enum (with just\n7 different enumerators) + padding.\n\nThe following patch decreases it by moving the enum into a separate\narray and using just one byte for each register in that second array.\nWe could compress it even more, say 4 bits per register, but I don't\nwant to uglify the code for it too much and make the accesses slower.\nFurthermore, the clearing of the object can clear only thos how array\nand members after it, because REG_UNSAVED enumerator (0) doesn't actually\nneed any pointer or pointer sized integer, it is just the other kinds\nthat need to have there something.\nBy doing this, on x86_64 the above numbers change to _Unwind_FrameState\ntype being now 264 bytes long, frame_state_reg_info 208 bytes and we\ndon't clear the first 144 bytes of the object, so the memset is 120 bytes,\nso ~ 31% of the old clearing size.  On riscv 64-bit assuming it has same\nstructure layout rules for the few types used there that would be\n~ 2160 bytes of _Unwind_FrameState type before and ~ 1264 bytes after,\nwith the memset previously ~ 2160 bytes and after ~ 232 bytes after.\n\nWe've also talked about possibly adding a number of initially initialized\nregs and initializing the rest lazily, but at least for x86_64 with\n18 elements in the array that doesn't seem to be worth it anymore,\nespecially because return address column is 16 there and that is usually the\nfirst thing to be touched.  It might theory help with lots of registers if\nthey are usually untouched, but would uglify and complicate any stores to\nhow by having to check there for the not initialized yet cases and lazy\ninitialization, and similarly for all reads of how to do there if below\nlast initialized one, use how, otherwise imply REG_UNSAVED.\n\nThe disadvantage of the patch is that touching reg[x].loc and how[x]\nnow means 2 cachelines rather than one as before, and I admit beyond\nbootstrap/regtest I haven't benchmarked it in any way.\n\n2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n\n\t* unwind-dw2.h (REG_UNSAVED, REG_SAVED_OFFSET, REG_SAVED_REG,\n\tREG_SAVED_EXP, REG_SAVED_VAL_OFFSET, REG_SAVED_VAL_EXP,\n\tREG_UNDEFINED): New anonymous enum, moved from inside of\n\tstruct frame_state_reg_info.\n\t(struct frame_state_reg_info): Remove reg[].how element and the\n\tanonymous enum there.  Add how element.\n\t* unwind-dw2.c: Include stddef.h.\n\t(uw_frame_state_for): Don't clear first\n\toffsetof (_Unwind_FrameState, regs.how[0]) bytes of *fs.\n\t(execute_cfa_program, __frame_state_for, uw_update_context_1,\n\tuw_update_context): Use fs->regs.how[X] instead of fs->regs.reg[X].how\n\tor fs.regs.how[X] instead of fs.regs.reg[X].how.\n\t* config/sh/linux-unwind.h (sh_fallback_frame_state): Likewise.\n\t* config/bfin/linux-unwind.h (bfin_fallback_frame_state): Likewise.\n\t* config/pa/linux-unwind.h (pa32_fallback_frame_state): Likewise.\n\t* config/pa/hpux-unwind.h (UPDATE_FS_FOR_SAR, UPDATE_FS_FOR_GR,\n\tUPDATE_FS_FOR_FR, UPDATE_FS_FOR_PC, pa_fallback_frame_state):\n\tLikewise.\n\t* config/alpha/vms-unwind.h (alpha_vms_fallback_frame_state):\n\tLikewise.\n\t* config/alpha/linux-unwind.h (alpha_fallback_frame_state): Likewise.\n\t* config/arc/linux-unwind.h (arc_fallback_frame_state,\n\tarc_frob_update_context): Likewise.\n\t* config/riscv/linux-unwind.h (riscv_fallback_frame_state): Likewise.\n\t* config/nios2/linux-unwind.h (NIOS2_REG): Likewise.\n\t* config/nds32/linux-unwind.h (NDS32_PUT_FS_REG): Likewise.\n\t* config/s390/tpf-unwind.h (s390_fallback_frame_state): Likewise.\n\t* config/s390/linux-unwind.h (s390_fallback_frame_state): Likewise.\n\t* config/sparc/sol2-unwind.h (sparc64_frob_update_context,\n\tMD_FALLBACK_FRAME_STATE_FOR): Likewise.\n\t* config/sparc/linux-unwind.h (sparc64_fallback_frame_state,\n\tsparc64_frob_update_context, sparc_fallback_frame_state): Likewise.\n\t* config/i386/sol2-unwind.h (x86_64_fallback_frame_state,\n\tx86_fallback_frame_state): Likewise.\n\t* config/i386/w32-unwind.h (i386_w32_fallback_frame_state): Likewise.\n\t* config/i386/linux-unwind.h (x86_64_fallback_frame_state,\n\tx86_fallback_frame_state): Likewise.\n\t* config/i386/freebsd-unwind.h (x86_64_freebsd_fallback_frame_state):\n\tLikewise.\n\t* config/i386/dragonfly-unwind.h\n\t(x86_64_dragonfly_fallback_frame_state): Likewise.\n\t* config/i386/gnu-unwind.h (x86_gnu_fallback_frame_state): Likewise.\n\t* config/csky/linux-unwind.h (csky_fallback_frame_state): Likewise.\n\t* config/aarch64/linux-unwind.h (aarch64_fallback_frame_state):\n\tLikewise.\n\t* config/aarch64/freebsd-unwind.h\n\t(aarch64_freebsd_fallback_frame_state): Likewise.\n\t* config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):\n\tLikewise.\n\t* config/or1k/linux-unwind.h (or1k_fallback_frame_state): Likewise.\n\t* config/mips/linux-unwind.h (mips_fallback_frame_state): Likewise.\n\t* config/loongarch/linux-unwind.h (loongarch_fallback_frame_state):\n\tLikewise.\n\t* config/m68k/linux-unwind.h (m68k_fallback_frame_state): Likewise.\n\t* config/xtensa/linux-unwind.h (xtensa_fallback_frame_state):\n\tLikewise.\n\t* config/rs6000/darwin-fallback.c (set_offset): Likewise.\n\t* config/rs6000/aix-unwind.h (MD_FROB_UPDATE_CONTEXT): Likewise.\n\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Likewise.\n\t* config/rs6000/freebsd-unwind.h (frob_update_context): Likewise.", "tree": {"sha": "eebe5cc5d61d8d285d38118296f243efb1e4348d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eebe5cc5d61d8d285d38118296f243efb1e4348d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146e4591403239d662f36cab2d8b78a47cd01bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146e4591403239d662f36cab2d8b78a47cd01bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146e4591403239d662f36cab2d8b78a47cd01bd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146e4591403239d662f36cab2d8b78a47cd01bd2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847f5addc4d07a2f3b95f5daa50ab4a64dfd957d"}], "stats": {"total": 588, "additions": 296, "deletions": 292}, "files": [{"sha": "26db9cbd9e5c526e0c410a4fc6be2bedb7d261cf", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -80,7 +80,7 @@ aarch64_frob_update_context (struct _Unwind_Context *context,\n {\n   const int reg = DWARF_REGNUM_AARCH64_RA_STATE;\n   int ra_signed;\n-  if (fs->regs.reg[reg].how == REG_UNSAVED)\n+  if (fs->regs.how[reg] == REG_UNSAVED)\n     ra_signed = fs->regs.reg[reg].loc.offset & 0x1;\n   else\n     ra_signed = _Unwind_GetGR (context, reg) & 0x1;"}, {"sha": "2f795fb8234033a1d788d2b1154adb525f8e2d7c", "filename": "libgcc/config/aarch64/freebsd-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ffreebsd-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -90,15 +90,15 @@ aarch64_freebsd_fallback_frame_state\n   fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n   for (n = 0; n < 32; n++)\n-    fs->regs.reg[n].how = REG_SAVED_OFFSET;\n+    fs->regs.how[n] = REG_SAVED_OFFSET;\n \n   for (n = 0; n < 30; n++)\n     fs->regs.reg[n].loc.offset = (_Unwind_Ptr) &(sc->XREG(n)) - new_cfa;\n \n   fs->regs.reg[30].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(lr)) - new_cfa;\n   fs->regs.reg[31].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(sp)) - new_cfa;\n \n-  fs->regs.reg[DARC].how = REG_SAVED_OFFSET;\n+  fs->regs.how[DARC] = REG_SAVED_OFFSET;\n   fs->regs.reg[DARC].loc.offset = (_Unwind_Ptr) &(sc->REG_NAME(elr)) - new_cfa;\n \n   fs->retaddr_column = DARC;"}, {"sha": "bce3f3c9d93b511b674f20ad3dd0526233dc55ca", "filename": "libgcc/config/aarch64/linux-unwind.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -89,7 +89,7 @@ aarch64_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < AARCH64_DWARF_NUMBER_R; i++)\n     {\n-      fs->regs.reg[AARCH64_DWARF_R0 + i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[AARCH64_DWARF_R0 + i] = REG_SAVED_OFFSET;\n       fs->regs.reg[AARCH64_DWARF_R0 + i].loc.offset =\n \t(_Unwind_Ptr) & (sc->regs[i]) - new_cfa;\n     }\n@@ -115,7 +115,7 @@ aarch64_fallback_frame_state (struct _Unwind_Context *context,\n \t    {\n \t      _Unwind_Sword offset;\n \n-\t      fs->regs.reg[AARCH64_DWARF_V0 + i].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[AARCH64_DWARF_V0 + i] = REG_SAVED_OFFSET;\n \n \t      /* sigcontext contains 32 128bit registers for V0 to\n \t\t V31.  The kernel will have saved the contents of the\n@@ -142,12 +142,12 @@ aarch64_fallback_frame_state (struct _Unwind_Context *context,\n \t}\n     }\n \n-  fs->regs.reg[31].how = REG_SAVED_OFFSET;\n+  fs->regs.how[31] = REG_SAVED_OFFSET;\n   fs->regs.reg[31].loc.offset = (_Unwind_Ptr) & (sc->sp) - new_cfa;\n \n   fs->signal_frame = 1;\n \n-  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how =\n+  fs->regs.how[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__] =\n     REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset =\n     (_Unwind_Ptr) (sc->pc) - new_cfa;"}, {"sha": "1a3a69df92b3e97ac66baf2c9c41e9906f4c7a72", "filename": "libgcc/config/alpha/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -67,17 +67,17 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 0; i < 30; ++i)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset\n \t= (long) &sc->sc_regs[i] - new_cfa;\n     }\n   for (i = 0; i < 31; ++i)\n     {\n-      fs->regs.reg[i+32].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i+32] = REG_SAVED_OFFSET;\n       fs->regs.reg[i+32].loc.offset\n \t= (long) &sc->sc_fpregs[i] - new_cfa;\n     }\n-  fs->regs.reg[64].how = REG_SAVED_OFFSET;\n+  fs->regs.how[64] = REG_SAVED_OFFSET;\n   fs->regs.reg[64].loc.offset = (long)&sc->sc_pc - new_cfa;\n   fs->retaddr_column = 64;\n   fs->signal_frame = 1;"}, {"sha": "71b59a668ab2dc7cc4f304a2a8bcabb50589be73", "filename": "libgcc/config/alpha/vms-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -50,7 +50,7 @@ extern int SYS$GL_CALL_HANDL;\n \n #define UPDATE_FS_FOR_CFA_GR(FS, GRN, LOC, CFA) \\\n do { \\\n-(FS)->regs.reg[GRN].how = REG_SAVED_OFFSET;      \\\n+(FS)->regs.how[GRN] = REG_SAVED_OFFSET;      \\\n (FS)->regs.reg[GRN].loc.offset = (_Unwind_Sword) ((REG) (LOC) - (REG) (CFA)); \\\n } while (0);\n \n@@ -212,10 +212,10 @@ alpha_vms_fallback_frame_state (struct _Unwind_Context *context,\n \tif (eh_debug)\n \t  printf (\"FALLBACK: REGISTER frame procedure\\n\");\n \n-\tfs->regs.reg[RA_COLUMN].how = REG_SAVED_REG;\n+\tfs->regs.how[RA_COLUMN] = REG_SAVED_REG;\n \tfs->regs.reg[RA_COLUMN].loc.reg = pv->pdsc$b_save_ra;\n \t\n-\tfs->regs.reg[29].how = REG_SAVED_REG;\n+\tfs->regs.how[29] = REG_SAVED_REG;\n \tfs->regs.reg[29].loc.reg = pv->pdsc$b_save_fp;\n \t\n \tbreak;"}, {"sha": "231971a7cccee4eada0ac2417c89f8e3cda193aa", "filename": "libgcc/config/arc/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Farc%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Farc%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -122,7 +122,7 @@ arc_fallback_frame_state (struct _Unwind_Context *context,\n \n   fs->signal_frame = 1;\n   fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n-  fs->regs.reg[fs->retaddr_column].how = REG_SAVED_VAL_OFFSET;\n+  fs->regs.how[fs->retaddr_column] = REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[fs->retaddr_column].loc.offset =\n     ((_Unwind_Ptr) (regs[ret])) - new_cfa;\n \n@@ -140,7 +140,7 @@ arc_frob_update_context (struct _Unwind_Context *context,\n   _Unwind_Word fp_val;\n   asm (\"mov %0,fp\" : \"=r\" (fp_val));\n \n-  switch (fs->regs.reg[27].how)\n+  switch (fs->regs.how[27])\n     {\n     case REG_UNSAVED:\n     case REG_UNDEFINED:"}, {"sha": "de7e321e709e90c9193d079f32d4ead8890b19f2", "filename": "libgcc/config/bfin/linux-unwind.h", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fbfin%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fbfin%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -68,93 +68,93 @@ bfin_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_reg = 14;\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sc->sc_r0 - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sc->sc_r1 - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sc->sc_r2 - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sc->sc_r3 - new_cfa;\n-  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[4] = REG_SAVED_OFFSET;\n   fs->regs.reg[4].loc.offset = (long)&sc->sc_r4 - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sc->sc_r5 - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sc->sc_r6 - new_cfa;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n   fs->regs.reg[7].loc.offset = (long)&sc->sc_r7 - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sc->sc_p0 - new_cfa;\n-  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.how[9] = REG_SAVED_OFFSET;\n   fs->regs.reg[9].loc.offset = (long)&sc->sc_p1 - new_cfa;\n-  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.how[10] = REG_SAVED_OFFSET;\n   fs->regs.reg[10].loc.offset = (long)&sc->sc_p2 - new_cfa;\n-  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.how[11] = REG_SAVED_OFFSET;\n   fs->regs.reg[11].loc.offset = (long)&sc->sc_p3 - new_cfa;\n-  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.how[12] = REG_SAVED_OFFSET;\n   fs->regs.reg[12].loc.offset = (long)&sc->sc_p4 - new_cfa;\n-  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.how[13] = REG_SAVED_OFFSET;\n   fs->regs.reg[13].loc.offset = (long)&sc->sc_p5 - new_cfa;\n \n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (long)&sc->sc_fp - new_cfa;\n-  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.how[16] = REG_SAVED_OFFSET;\n   fs->regs.reg[16].loc.offset = (long)&sc->sc_i0 - new_cfa;\n-  fs->regs.reg[17].how = REG_SAVED_OFFSET;\n+  fs->regs.how[17] = REG_SAVED_OFFSET;\n   fs->regs.reg[17].loc.offset = (long)&sc->sc_i1 - new_cfa;\n-  fs->regs.reg[18].how = REG_SAVED_OFFSET;\n+  fs->regs.how[18] = REG_SAVED_OFFSET;\n   fs->regs.reg[18].loc.offset = (long)&sc->sc_i2 - new_cfa;\n-  fs->regs.reg[19].how = REG_SAVED_OFFSET;\n+  fs->regs.how[19] = REG_SAVED_OFFSET;\n   fs->regs.reg[19].loc.offset = (long)&sc->sc_i3 - new_cfa;\n-  fs->regs.reg[20].how = REG_SAVED_OFFSET;\n+  fs->regs.how[20] = REG_SAVED_OFFSET;\n   fs->regs.reg[20].loc.offset = (long)&sc->sc_b0 - new_cfa;\n-  fs->regs.reg[21].how = REG_SAVED_OFFSET;\n+  fs->regs.how[21] = REG_SAVED_OFFSET;\n   fs->regs.reg[21].loc.offset = (long)&sc->sc_b1 - new_cfa;\n-  fs->regs.reg[22].how = REG_SAVED_OFFSET;\n+  fs->regs.how[22] = REG_SAVED_OFFSET;\n   fs->regs.reg[22].loc.offset = (long)&sc->sc_b2 - new_cfa;\n-  fs->regs.reg[23].how = REG_SAVED_OFFSET;\n+  fs->regs.how[23] = REG_SAVED_OFFSET;\n   fs->regs.reg[23].loc.offset = (long)&sc->sc_b3 - new_cfa;\n-  fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+  fs->regs.how[24] = REG_SAVED_OFFSET;\n   fs->regs.reg[24].loc.offset = (long)&sc->sc_l0 - new_cfa;\n-  fs->regs.reg[25].how = REG_SAVED_OFFSET;\n+  fs->regs.how[25] = REG_SAVED_OFFSET;\n   fs->regs.reg[25].loc.offset = (long)&sc->sc_l1 - new_cfa;\n-  fs->regs.reg[26].how = REG_SAVED_OFFSET;\n+  fs->regs.how[26] = REG_SAVED_OFFSET;\n   fs->regs.reg[26].loc.offset = (long)&sc->sc_l2 - new_cfa;\n-  fs->regs.reg[27].how = REG_SAVED_OFFSET;\n+  fs->regs.how[27] = REG_SAVED_OFFSET;\n   fs->regs.reg[27].loc.offset = (long)&sc->sc_l3 - new_cfa;\n-  fs->regs.reg[28].how = REG_SAVED_OFFSET;\n+  fs->regs.how[28] = REG_SAVED_OFFSET;\n   fs->regs.reg[28].loc.offset = (long)&sc->sc_m0 - new_cfa;\n-  fs->regs.reg[29].how = REG_SAVED_OFFSET;\n+  fs->regs.how[29] = REG_SAVED_OFFSET;\n   fs->regs.reg[29].loc.offset = (long)&sc->sc_m1 - new_cfa;\n-  fs->regs.reg[30].how = REG_SAVED_OFFSET;\n+  fs->regs.how[30] = REG_SAVED_OFFSET;\n   fs->regs.reg[30].loc.offset = (long)&sc->sc_m2 - new_cfa;\n-  fs->regs.reg[31].how = REG_SAVED_OFFSET;\n+  fs->regs.how[31] = REG_SAVED_OFFSET;\n   fs->regs.reg[31].loc.offset = (long)&sc->sc_m3 - new_cfa;\n   /* FIXME: Handle A0, A1, CC.  */\n-  fs->regs.reg[35].how = REG_SAVED_OFFSET;\n+  fs->regs.how[35] = REG_SAVED_OFFSET;\n   fs->regs.reg[35].loc.offset = (long)&sc->sc_rets - new_cfa;\n-  fs->regs.reg[36].how = REG_SAVED_OFFSET;\n+  fs->regs.how[36] = REG_SAVED_OFFSET;\n   fs->regs.reg[36].loc.offset = (long)&sc->sc_pc - new_cfa;\n-  fs->regs.reg[37].how = REG_SAVED_OFFSET;\n+  fs->regs.how[37] = REG_SAVED_OFFSET;\n   fs->regs.reg[37].loc.offset = (long)&sc->sc_retx - new_cfa;\n \n-  fs->regs.reg[40].how = REG_SAVED_OFFSET;\n+  fs->regs.how[40] = REG_SAVED_OFFSET;\n   fs->regs.reg[40].loc.offset = (long)&sc->sc_astat - new_cfa;\n-  fs->regs.reg[41].how = REG_SAVED_OFFSET;\n+  fs->regs.how[41] = REG_SAVED_OFFSET;\n   fs->regs.reg[41].loc.offset = (long)&sc->sc_seqstat - new_cfa;\n \n-  fs->regs.reg[44].how = REG_SAVED_OFFSET;\n+  fs->regs.how[44] = REG_SAVED_OFFSET;\n   fs->regs.reg[44].loc.offset = (long)&sc->sc_lt0 - new_cfa;\n-  fs->regs.reg[45].how = REG_SAVED_OFFSET;\n+  fs->regs.how[45] = REG_SAVED_OFFSET;\n   fs->regs.reg[45].loc.offset = (long)&sc->sc_lt1 - new_cfa;\n-  fs->regs.reg[46].how = REG_SAVED_OFFSET;\n+  fs->regs.how[46] = REG_SAVED_OFFSET;\n   fs->regs.reg[46].loc.offset = (long)&sc->sc_lc0 - new_cfa;\n-  fs->regs.reg[47].how = REG_SAVED_OFFSET;\n+  fs->regs.how[47] = REG_SAVED_OFFSET;\n   fs->regs.reg[47].loc.offset = (long)&sc->sc_lc1 - new_cfa;\n-  fs->regs.reg[48].how = REG_SAVED_OFFSET;\n+  fs->regs.how[48] = REG_SAVED_OFFSET;\n   fs->regs.reg[48].loc.offset = (long)&sc->sc_lb0 - new_cfa;\n-  fs->regs.reg[49].how = REG_SAVED_OFFSET;\n+  fs->regs.how[49] = REG_SAVED_OFFSET;\n   fs->regs.reg[49].loc.offset = (long)&sc->sc_lb1 - new_cfa;\n   fs->retaddr_column = 35;\n "}, {"sha": "bdc8f2e11bdacb08598d4a37e9d0c04fe1585607", "filename": "libgcc/config/csky/linux-unwind.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fcsky%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fcsky%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fcsky%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -85,39 +85,39 @@ csky_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n   fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (_Unwind_Ptr) & sc_pt_regs (a0) - new_cfa;\n \n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (_Unwind_Ptr) & sc_pt_regs (a1) - new_cfa;\n \n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (_Unwind_Ptr) & sc_pt_regs (a2) - new_cfa;\n \n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (_Unwind_Ptr) & sc_pt_regs (a3) - new_cfa;\n \n   for (i = 4; i < 14; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset =\n \t(_Unwind_Ptr) & sc_pt_regs (regs[i - 4]) - new_cfa;\n     }\n \n   for (i = 16; i < 31; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset =\n \t(_Unwind_Ptr) & sc_pt_regs (exregs[i - 16]) - new_cfa;\n     }\n \n   fs->regs.reg[31].loc.offset =\n     (_Unwind_Ptr) & sc_pt_regs_tls (tls) - new_cfa;\n   /* FIXME : hi lo ? */\n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (_Unwind_Ptr) & sc_pt_regs_lr - new_cfa;\n \n-  fs->regs.reg[32].how = REG_SAVED_OFFSET;\n+  fs->regs.how[32] = REG_SAVED_OFFSET;\n   fs->regs.reg[32].loc.offset = (_Unwind_Ptr) & sc_pt_regs (pc) - new_cfa;\n   fs->retaddr_column = 32;\n   fs->signal_frame = 1;"}, {"sha": "4cafc5c023b3673b0101e6c92058fd70cea5b57c", "filename": "libgcc/config/i386/dragonfly-unwind.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fdragonfly-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -102,37 +102,37 @@ x86_64_dragonfly_fallback_frame_state\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(rax) - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(rdx) - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(rcx) - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(rbx) - new_cfa;\n-  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[4] = REG_SAVED_OFFSET;\n   fs->regs.reg[4].loc.offset = (long)&sf->REG_NAME(rsi) - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(rdi) - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(rbp) - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(r8) - new_cfa;\n-  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.how[9] = REG_SAVED_OFFSET;\n   fs->regs.reg[9].loc.offset = (long)&sf->REG_NAME(r9) - new_cfa;\n-  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.how[10] = REG_SAVED_OFFSET;\n   fs->regs.reg[10].loc.offset = (long)&sf->REG_NAME(r10) - new_cfa;\n-  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.how[11] = REG_SAVED_OFFSET;\n   fs->regs.reg[11].loc.offset = (long)&sf->REG_NAME(r11) - new_cfa;\n-  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.how[12] = REG_SAVED_OFFSET;\n   fs->regs.reg[12].loc.offset = (long)&sf->REG_NAME(r12) - new_cfa;\n-  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.how[13] = REG_SAVED_OFFSET;\n   fs->regs.reg[13].loc.offset = (long)&sf->REG_NAME(r13) - new_cfa;\n-  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.how[14] = REG_SAVED_OFFSET;\n   fs->regs.reg[14].loc.offset = (long)&sf->REG_NAME(r14) - new_cfa;\n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (long)&sf->REG_NAME(r15) - new_cfa;\n-  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.how[16] = REG_SAVED_OFFSET;\n   fs->regs.reg[16].loc.offset = (long)&sf->REG_NAME(rip) - new_cfa;\n   fs->retaddr_column = 16;\n   fs->signal_frame = 1;\n@@ -182,21 +182,21 @@ x86_dragonfly_fallback_frame_state\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(eax) - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(ebx) - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(ecx) - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(edx) - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(esi) - new_cfa;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n   fs->regs.reg[7].loc.offset = (long)&sf->REG_NAME(edi) - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(ebp) - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(eip) - new_cfa;\n   fs->retaddr_column = 8;\n   fs->signal_frame = 1;"}, {"sha": "dcbd8cdf287a1518d14b3e249b2fb60ed98b34c3", "filename": "libgcc/config/i386/freebsd-unwind.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -110,37 +110,37 @@ x86_64_freebsd_fallback_frame_state\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(rax) - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(rdx) - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(rcx) - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(rbx) - new_cfa;\n-  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[4] = REG_SAVED_OFFSET;\n   fs->regs.reg[4].loc.offset = (long)&sf->REG_NAME(rsi) - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(rdi) - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(rbp) - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(r8) - new_cfa;\n-  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.how[9] = REG_SAVED_OFFSET;\n   fs->regs.reg[9].loc.offset = (long)&sf->REG_NAME(r9) - new_cfa;\n-  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.how[10] = REG_SAVED_OFFSET;\n   fs->regs.reg[10].loc.offset = (long)&sf->REG_NAME(r10) - new_cfa;\n-  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.how[11] = REG_SAVED_OFFSET;\n   fs->regs.reg[11].loc.offset = (long)&sf->REG_NAME(r11) - new_cfa;\n-  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.how[12] = REG_SAVED_OFFSET;\n   fs->regs.reg[12].loc.offset = (long)&sf->REG_NAME(r12) - new_cfa;\n-  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.how[13] = REG_SAVED_OFFSET;\n   fs->regs.reg[13].loc.offset = (long)&sf->REG_NAME(r13) - new_cfa;\n-  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.how[14] = REG_SAVED_OFFSET;\n   fs->regs.reg[14].loc.offset = (long)&sf->REG_NAME(r14) - new_cfa;\n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (long)&sf->REG_NAME(r15) - new_cfa;\n-  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.how[16] = REG_SAVED_OFFSET;\n   fs->regs.reg[16].loc.offset = (long)&sf->REG_NAME(rip) - new_cfa;\n   fs->retaddr_column = 16;\n   fs->signal_frame = 1;\n@@ -189,21 +189,21 @@ x86_freebsd_fallback_frame_state\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sf->REG_NAME(eax) - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sf->REG_NAME(ebx) - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sf->REG_NAME(ecx) - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sf->REG_NAME(edx) - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sf->REG_NAME(esi) - new_cfa;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n   fs->regs.reg[7].loc.offset = (long)&sf->REG_NAME(edi) - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sf->REG_NAME(ebp) - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sf->REG_NAME(eip) - new_cfa;\n   fs->retaddr_column = 8;\n   fs->signal_frame = 1;"}, {"sha": "25eb690e370f92c0af5be14747c80793605cb641", "filename": "libgcc/config/i386/gnu-unwind.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -123,14 +123,14 @@ x86_gnu_fallback_frame_state\n   fs->regs.cfa_reg = 4;\n   fs->regs.cfa_offset = usp - (unsigned long) context->cfa;\n \n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n \n   fs->retaddr_column = 8;\n   fs->signal_frame = 1;"}, {"sha": "48262b068ed2add8c80527063fd17ea82cada021", "filename": "libgcc/config/i386/linux-unwind.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -79,37 +79,37 @@ x86_64_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sc->rax - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sc->rdx - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sc->rcx - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sc->rbx - new_cfa;\n-  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[4] = REG_SAVED_OFFSET;\n   fs->regs.reg[4].loc.offset = (long)&sc->rsi - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sc->rdi - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sc->rbp - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sc->r8 - new_cfa;\n-  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.how[9] = REG_SAVED_OFFSET;\n   fs->regs.reg[9].loc.offset = (long)&sc->r9 - new_cfa;\n-  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.how[10] = REG_SAVED_OFFSET;\n   fs->regs.reg[10].loc.offset = (long)&sc->r10 - new_cfa;\n-  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.how[11] = REG_SAVED_OFFSET;\n   fs->regs.reg[11].loc.offset = (long)&sc->r11 - new_cfa;\n-  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.how[12] = REG_SAVED_OFFSET;\n   fs->regs.reg[12].loc.offset = (long)&sc->r12 - new_cfa;\n-  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.how[13] = REG_SAVED_OFFSET;\n   fs->regs.reg[13].loc.offset = (long)&sc->r13 - new_cfa;\n-  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.how[14] = REG_SAVED_OFFSET;\n   fs->regs.reg[14].loc.offset = (long)&sc->r14 - new_cfa;\n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (long)&sc->r15 - new_cfa;\n-  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.how[16] = REG_SAVED_OFFSET;\n   fs->regs.reg[16].loc.offset = (long)&sc->rip - new_cfa;\n   fs->retaddr_column = 16;\n   fs->signal_frame = 1;\n@@ -159,21 +159,21 @@ x86_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&sc->eax - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&sc->ebx - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&sc->ecx - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&sc->edx - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&sc->esi - new_cfa;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n   fs->regs.reg[7].loc.offset = (long)&sc->edi - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&sc->ebp - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&sc->eip - new_cfa;\n   fs->retaddr_column = 8;\n   fs->signal_frame = 1;"}, {"sha": "718dc35ee0a48a328f537b509bfad314d63cd696", "filename": "libgcc/config/i386/sol2-unwind.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsol2-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -94,37 +94,37 @@ x86_64_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&mctx->gregs[REG_RAX] - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&mctx->gregs[REG_RDX] - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&mctx->gregs[REG_RCX] - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&mctx->gregs[REG_RBX] - new_cfa;\n-  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[4] = REG_SAVED_OFFSET;\n   fs->regs.reg[4].loc.offset = (long)&mctx->gregs[REG_RSI] - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&mctx->gregs[REG_RDI] - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&mctx->gregs[REG_RBP] - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&mctx->gregs[REG_R8] - new_cfa;\n-  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.how[9] = REG_SAVED_OFFSET;\n   fs->regs.reg[9].loc.offset = (long)&mctx->gregs[REG_R9] - new_cfa;\n-  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.how[10] = REG_SAVED_OFFSET;\n   fs->regs.reg[10].loc.offset = (long)&mctx->gregs[REG_R10] - new_cfa;\n-  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.how[11] = REG_SAVED_OFFSET;\n   fs->regs.reg[11].loc.offset = (long)&mctx->gregs[REG_R11] - new_cfa;\n-  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.how[12] = REG_SAVED_OFFSET;\n   fs->regs.reg[12].loc.offset = (long)&mctx->gregs[REG_R12] - new_cfa;\n-  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.how[13] = REG_SAVED_OFFSET;\n   fs->regs.reg[13].loc.offset = (long)&mctx->gregs[REG_R13] - new_cfa;\n-  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.how[14] = REG_SAVED_OFFSET;\n   fs->regs.reg[14].loc.offset = (long)&mctx->gregs[REG_R14] - new_cfa;\n-  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.how[15] = REG_SAVED_OFFSET;\n   fs->regs.reg[15].loc.offset = (long)&mctx->gregs[REG_R15] - new_cfa;\n-  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.how[16] = REG_SAVED_OFFSET;\n   fs->regs.reg[16].loc.offset = (long)&mctx->gregs[REG_RIP] - new_cfa;\n   fs->retaddr_column = 16;\n   fs->signal_frame = 1;\n@@ -180,21 +180,21 @@ x86_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)&mctx->gregs[EAX] - new_cfa;\n-  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[3] = REG_SAVED_OFFSET;\n   fs->regs.reg[3].loc.offset = (long)&mctx->gregs[EBX] - new_cfa;\n-  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.how[1] = REG_SAVED_OFFSET;\n   fs->regs.reg[1].loc.offset = (long)&mctx->gregs[ECX] - new_cfa;\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long)&mctx->gregs[EDX] - new_cfa;\n-  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.how[6] = REG_SAVED_OFFSET;\n   fs->regs.reg[6].loc.offset = (long)&mctx->gregs[ESI] - new_cfa;\n-  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.how[7] = REG_SAVED_OFFSET;\n   fs->regs.reg[7].loc.offset = (long)&mctx->gregs[EDI] - new_cfa;\n-  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.how[5] = REG_SAVED_OFFSET;\n   fs->regs.reg[5].loc.offset = (long)&mctx->gregs[EBP] - new_cfa;\n-  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.how[8] = REG_SAVED_OFFSET;\n   fs->regs.reg[8].loc.offset = (long)&mctx->gregs[EIP] - new_cfa;\n   fs->retaddr_column = 8;\n "}, {"sha": "096e314ccfbc33fc8aba286594ca16bdd62d27ea", "filename": "libgcc/config/i386/w32-unwind.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fw32-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fi386%2Fw32-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fw32-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -153,21 +153,21 @@ i386_w32_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.cfa_offset = new_cfa_ - (long) ctx_cfa_;\n \n       /* Restore registers.  */\n-      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.how[0] = REG_SAVED_OFFSET;\n       fs->regs.reg[0].loc.offset = (long)&proc_ctx_->Eax - new_cfa_;\n-      fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+      fs->regs.how[3] = REG_SAVED_OFFSET;\n       fs->regs.reg[3].loc.offset = (long)&proc_ctx_->Ebx - new_cfa_;\n-      fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+      fs->regs.how[1] = REG_SAVED_OFFSET;\n       fs->regs.reg[1].loc.offset = (long)&proc_ctx_->Ecx - new_cfa_;\n-      fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+      fs->regs.how[2] = REG_SAVED_OFFSET;\n       fs->regs.reg[2].loc.offset = (long)&proc_ctx_->Edx - new_cfa_;\n-      fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+      fs->regs.how[6] = REG_SAVED_OFFSET;\n       fs->regs.reg[6].loc.offset = (long)&proc_ctx_->Esi - new_cfa_;\n-      fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+      fs->regs.how[7] = REG_SAVED_OFFSET;\n       fs->regs.reg[7].loc.offset = (long)&proc_ctx_->Edi - new_cfa_;\n-      fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+      fs->regs.how[5] = REG_SAVED_OFFSET;\n       fs->regs.reg[5].loc.offset = (long)&proc_ctx_->Ebp - new_cfa_;\n-      fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+      fs->regs.how[8] = REG_SAVED_OFFSET;\n       fs->regs.reg[8].loc.offset = (long)&proc_ctx_->Eip - new_cfa_;\n       fs->retaddr_column = 8;\n       fs->signal_frame = 1;\n@@ -189,12 +189,12 @@ i386_w32_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.cfa_offset = new_cfa_ - (long) ctx_cfa_;\n \n       /* The saved value of %ecx is at CFA - 4 */\n-      fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+      fs->regs.how[1] = REG_SAVED_OFFSET;\n       fs->regs.reg[1].loc.offset = -4;\n \n       /* and what is stored at the CFA is the return address.  */\n       fs->retaddr_column = 8;\n-      fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+      fs->regs.how[8] = REG_SAVED_OFFSET;\n       fs->regs.reg[8].loc.offset = 0;\n       fs->signal_frame = 1;\n "}, {"sha": "f6c782f8426e91efaeb55e18187540cc48b0b5e9", "filename": "libgcc/config/loongarch/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -64,12 +64,12 @@ loongarch_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 32; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (_Unwind_Ptr) & (sc->sc_regs[i]) - new_cfa;\n     }\n \n   fs->signal_frame = 1;\n-  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+  fs->regs.how[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__]\n     = REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n     = (_Unwind_Ptr) (sc->sc_pc) - new_cfa;"}, {"sha": "ad0da69375e231e17afda6d40f19804a7699a1c1", "filename": "libgcc/config/m68k/linux-unwind.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fm68k%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fm68k%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm68k%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -68,31 +68,31 @@ m68k_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.cfa_reg = 15;\n       fs->regs.cfa_offset = cfa - (long) context->cfa;\n \n-      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.how[0] = REG_SAVED_OFFSET;\n       fs->regs.reg[0].loc.offset = (long) &sc->sc_d0 - cfa;\n-      fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+      fs->regs.how[1] = REG_SAVED_OFFSET;\n       fs->regs.reg[1].loc.offset = (long) &sc->sc_d1 - cfa;\n-      fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+      fs->regs.how[8] = REG_SAVED_OFFSET;\n       fs->regs.reg[8].loc.offset = (long) &sc->sc_a0 - cfa;\n-      fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+      fs->regs.how[9] = REG_SAVED_OFFSET;\n       fs->regs.reg[9].loc.offset = (long) &sc->sc_a1 - cfa;\n \n #ifdef __uClinux__\n-      fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+      fs->regs.how[13] = REG_SAVED_OFFSET;\n       fs->regs.reg[13].loc.offset = (long) &sc->sc_a5 - cfa;\n #endif\n \n-      fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+      fs->regs.how[24] = REG_SAVED_OFFSET;\n       fs->regs.reg[24].loc.offset = (long) &sc->sc_pc - cfa;\n \n #ifndef __uClinux__\n       if (*(int *) sc->sc_fpstate)\n \t{\n \t  int *fpregs = (int *) sc->sc_fpregs;\n \n-\t  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[16] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[16].loc.offset = (long) &fpregs[0] - cfa;\n-\t  fs->regs.reg[17].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[17] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[17].loc.offset = (long) &fpregs[M68K_FP_SIZE/4] - cfa;\n \t}\n #elif defined __mcffpu__\n@@ -124,12 +124,12 @@ m68k_fallback_frame_state (struct _Unwind_Context *context,\n       /* register %d0-%d7/%a0-%a6  */\n       for (i = 0; i <= 14; i++)\n \t{\n-\t  fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i].loc.offset = (long) &gregs[i] - cfa;\n \t}\n \n       /* return address  */\n-      fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+      fs->regs.how[24] = REG_SAVED_OFFSET;\n       fs->regs.reg[24].loc.offset = (long) &gregs[16] - cfa;\n \n #define uc_fpstate      uc_filler[0]\n@@ -141,7 +141,7 @@ m68k_fallback_frame_state (struct _Unwind_Context *context,\n \t  /* register %fp0-%fp7  */\n \t  for (i = 16; i <= 23; i++)\n \t    {\n-\t      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[i] = REG_SAVED_OFFSET;\n \t      fs->regs.reg[i].loc.offset = fpregs - cfa;\n \t      fpregs += M68K_FP_SIZE;\n \t    }"}, {"sha": "80e6e77952eedb985a89fb84dd24ecf5acfd4882", "filename": "libgcc/config/mips/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -103,7 +103,7 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n #endif\n \n   for (i = 0; i < 32; i++) {\n-    fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+    fs->regs.how[i] = REG_SAVED_OFFSET;\n     fs->regs.reg[i].loc.offset\n       = (_Unwind_Ptr)&(sc->sc_regs[i]) + reg_offset - new_cfa;\n   }\n@@ -115,7 +115,7 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n      Note that setting fs->signal_frame would not work.  As the comment\n      above MASK_RETURN_ADDR explains, MIPS unwinders must earch for an\n      odd-valued address.  */\n-  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+  fs->regs.how[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__]\n     = REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n     = (_Unwind_Ptr)(sc->sc_pc) + 2 - new_cfa;"}, {"sha": "cbb2620ecb803bf32a26e4be5a1da5ac62d4c76b", "filename": "libgcc/config/nds32/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fnds32%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fnds32%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnds32%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -92,7 +92,7 @@ nds32_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n #define NDS32_PUT_FS_REG(NUM, NAME) \\\n-  (fs->regs.reg[NUM].how = REG_SAVED_OFFSET, \\\n+  (fs->regs.how[NUM] = REG_SAVED_OFFSET, \\\n    fs->regs.reg[NUM].loc.offset = (_Unwind_Ptr) &(sc_->NAME) - new_cfa)\n \n   /* Restore all registers value.  */"}, {"sha": "aa278222fd1cad83d6c6e100a8a056a8955c5682", "filename": "libgcc/config/nios2/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -61,7 +61,7 @@ nios2_fallback_frame_state (struct _Unwind_Context *context,\n     return _URC_END_OF_STACK;\n \n #define NIOS2_REG(NUM,NAME)\t\t\t\t\t\t\\\n-  (fs->regs.reg[NUM].how = REG_SAVED_OFFSET,\t\t\t\t\\\n+  (fs->regs.how[NUM] = REG_SAVED_OFFSET,\t\t\t\t\\\n    fs->regs.reg[NUM].loc.offset = (_Unwind_Ptr)&(regs->NAME) - new_cfa)\n \n   if (pc[0] == (0x00800004 | (__NR_rt_sigreturn << 6)))"}, {"sha": "71171c50f113edce450bcd6ae9ff2b7a74d8d59f", "filename": "libgcc/config/or1k/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2For1k%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2For1k%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2For1k%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -59,10 +59,10 @@ or1k_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 2; i < 32; ++i)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (long) &sc->regs.gpr[i] - new_cfa;\n     }\n-  fs->regs.reg[32].how = REG_SAVED_OFFSET;\n+  fs->regs.how[32] = REG_SAVED_OFFSET;\n   fs->regs.reg[32].loc.offset = (long)&sc->regs.pc - new_cfa;\n   fs->retaddr_column = 32;\n   fs->signal_frame = 1;"}, {"sha": "b30a67ee000e7d51090392c18c67ac99d9888668", "filename": "libgcc/config/pa/hpux-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -57,19 +57,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n #define UPDATE_FS_FOR_SAR(FS, N) \\\n-  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.how[N] = REG_SAVED_OFFSET;\t\t\t\t\\\n   (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_cr11) - new_cfa\n \n #define UPDATE_FS_FOR_GR(FS, GRN, N) \\\n-  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.how[N] = REG_SAVED_OFFSET;\t\t\t\t\\\n   (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_gr##GRN) - new_cfa\n \n #define UPDATE_FS_FOR_FR(FS, FRN, N) \\\n-  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.how[N] = REG_SAVED_OFFSET;\t\t\t\t\\\n   (FS)->regs.reg[N].loc.offset = (long) &(mc->ss_fr##FRN) - new_cfa;\n \n #define UPDATE_FS_FOR_PC(FS, N) \\\n-  (FS)->regs.reg[N].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+  (FS)->regs.how[N] = REG_SAVED_OFFSET;\t\t\t\t\\\n   (FS)->regs.reg[N].loc.offset = GetSSRegAddr (mc, ss_pcoq_head) - new_cfa\n \n /* Extract bit field from word using HP's numbering (MSB = 0).  */\n@@ -151,7 +151,7 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.cfa_offset = 0;\n \n       fs->retaddr_column = 0;\n-      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.how[0] = REG_SAVED_OFFSET;\n       fs->regs.reg[0].loc.offset = -24;\n \n       /* Update context to describe the stub frame.  */\n@@ -171,7 +171,7 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.cfa_offset = 0;\n \n       fs->retaddr_column = 0;\n-      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.how[0] = REG_SAVED_OFFSET;\n       fs->regs.reg[0].loc.offset = -8;\n \n       /* Update context to describe the stub frame.  */"}, {"sha": "7efab00e33aa5327f177369a6eeffb3ce150ced9", "filename": "libgcc/config/pa/linux-unwind.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -138,22 +138,22 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n   for (i = 1; i <= 31; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (long)&sc->sc_gr[i] - new_cfa;\n     }\n   for (i = 4; i <= 31; i++)\n     {\n       /* FP regs have left and right halves */\n-      fs->regs.reg[2*i+24].how = REG_SAVED_OFFSET;\n+      fs->regs.how[2*i+24] = REG_SAVED_OFFSET;\n       fs->regs.reg[2*i+24].loc.offset\n \t= (long)&sc->sc_fr[i] - new_cfa;\n-      fs->regs.reg[2*i+24+1].how = REG_SAVED_OFFSET;\n+      fs->regs.how[2*i+24+1] = REG_SAVED_OFFSET;\n       fs->regs.reg[2*i+24+1].loc.offset\n \t= (long)&sc->sc_fr[i] + 4 - new_cfa;\n     }\n-  fs->regs.reg[88].how = REG_SAVED_OFFSET;\n+  fs->regs.how[88] = REG_SAVED_OFFSET;\n   fs->regs.reg[88].loc.offset = (long) &sc->sc_sar - new_cfa;\n-  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+  fs->regs.how[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__]\n     = REG_SAVED_OFFSET;\n   fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n     = (long) &sc->sc_iaoq[0] - new_cfa;"}, {"sha": "c44d1a86cef48a8485295ef9892835ef33f6f506", "filename": "libgcc/config/riscv/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -73,13 +73,13 @@ riscv_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 32; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (_Unwind_Ptr) &sc->gregs[i] - new_cfa;\n     }\n \n   fs->signal_frame = 1;\n   fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n-  fs->regs.reg[fs->retaddr_column].how = REG_SAVED_VAL_OFFSET;\n+  fs->regs.how[fs->retaddr_column] = REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[fs->retaddr_column].loc.offset =\n     (_Unwind_Ptr) sc->gregs[0] - new_cfa;\n "}, {"sha": "9a1efdc1c6abcf52f64176f31916130e4293c7d7", "filename": "libgcc/config/rs6000/aix-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -40,7 +40,7 @@\n #ifdef __64BIT__\n #define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n+    if ((FS)->regs.how[2] == REG_UNSAVED)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tunsigned int *insn\t\t\t\t\t\t\\\n \t  = (unsigned int *)\t\t\t\t\t\t\\\n@@ -52,7 +52,7 @@\n #else\n #define MD_FROB_UPDATE_CONTEXT(CTX, FS)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if ((FS)->regs.reg[2].how == REG_UNSAVED)\t\t\t\t\\\n+    if ((FS)->regs.how[2] == REG_UNSAVED)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tunsigned int *insn\t\t\t\t\t\t\\\n \t  = (unsigned int *)\t\t\t\t\t\t\\\n@@ -207,7 +207,7 @@ ucontext_for (struct _Unwind_Context *context)\n \n #define REGISTER_CFA_OFFSET_FOR(FS,REGNO,ADDR,CFA)\\\n do { \\\n-(FS)->regs.reg[REGNO].how = REG_SAVED_OFFSET; \\\n+(FS)->regs.how[REGNO] = REG_SAVED_OFFSET; \\\n (FS)->regs.reg[REGNO].loc.offset = (long) (ADDR) - (CFA); \\\n } while (0)\n "}, {"sha": "ad5c19585b545627b9b68df66d0c8a3f29a7d553", "filename": "libgcc/config/rs6000/darwin-fallback.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -368,7 +368,7 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n     return false;\n \n #define set_offset(r, addr)\t\t\t\t\t\\\n-  (fs->regs.reg[r].how = REG_SAVED_OFFSET,\t\t\t\\\n+  (fs->regs.how[r] = REG_SAVED_OFFSET,\t\t\t\\\n    fs->regs.reg[r].loc.offset = (_Unwind_Ptr)(addr) - new_cfa)\n \n   /* Restore even the registers that are not call-saved, since they"}, {"sha": "654e7f648b8a64e3376aa618b88a24fb192567c2", "filename": "libgcc/config/rs6000/freebsd-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Ffreebsd-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Ffreebsd-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffreebsd-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -33,7 +33,7 @@ frob_update_context (struct _Unwind_Context *context,\n   const unsigned int *pc = (const unsigned int *) context->ra;\n \n #ifdef __powerpc64__\n-  if (fs->regs.reg[2].how == REG_UNSAVED)\n+  if (fs->regs.how[2] == REG_UNSAVED)\n     {\n       /* If the current unwind info (FS) does not contain explicit info\n \t saving R2, then we have to do a minor amount of code reading to"}, {"sha": "f6ab9399b360e700ba81b1f0201097d00f21f75c", "filename": "libgcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -215,12 +215,12 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n #ifdef __powerpc64__\n-  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[2] = REG_SAVED_OFFSET;\n   fs->regs.reg[2].loc.offset = (long) &regs->gpr[2] - new_cfa;\n #endif\n   for (i = 14; i < 32; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (long) &regs->gpr[i] - new_cfa;\n     }\n \n@@ -230,28 +230,28 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n   cr_offset += sizeof (long) - 4;\n #endif\n   /* In the ELFv1 ABI, CR2 stands in for the whole CR.  */\n-  fs->regs.reg[R_CR2].how = REG_SAVED_OFFSET;\n+  fs->regs.how[R_CR2] = REG_SAVED_OFFSET;\n   fs->regs.reg[R_CR2].loc.offset = cr_offset;\n #if _CALL_ELF == 2\n   /* In the ELFv2 ABI, every CR field has a separate CFI entry.  */\n-  fs->regs.reg[R_CR3].how = REG_SAVED_OFFSET;\n+  fs->regs.how[R_CR3] = REG_SAVED_OFFSET;\n   fs->regs.reg[R_CR3].loc.offset = cr_offset;\n-  fs->regs.reg[R_CR4].how = REG_SAVED_OFFSET;\n+  fs->regs.how[R_CR4] = REG_SAVED_OFFSET;\n   fs->regs.reg[R_CR4].loc.offset = cr_offset;\n #endif\n \n-  fs->regs.reg[R_LR].how = REG_SAVED_OFFSET;\n+  fs->regs.how[R_LR] = REG_SAVED_OFFSET;\n   fs->regs.reg[R_LR].loc.offset = (long) &regs->link - new_cfa;\n \n-  fs->regs.reg[ARG_POINTER_REGNUM].how = REG_SAVED_OFFSET;\n+  fs->regs.how[ARG_POINTER_REGNUM] = REG_SAVED_OFFSET;\n   fs->regs.reg[ARG_POINTER_REGNUM].loc.offset = (long) &regs->nip - new_cfa;\n   fs->retaddr_column = ARG_POINTER_REGNUM;\n   fs->signal_frame = 1;\n \n   /* If we have a FPU...  */\n   for (i = 14; i < 32; i++)\n     {\n-      fs->regs.reg[i + 32].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i + 32] = REG_SAVED_OFFSET;\n       fs->regs.reg[i + 32].loc.offset = (long) &regs->fpr[i] - new_cfa;\n     }\n \n@@ -265,20 +265,20 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n     {\n       for (i = 20; i < 32; i++)\n \t{\n-\t  fs->regs.reg[i + R_VR0].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i + R_VR0] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i + R_VR0].loc.offset = (long) &vregs->vr[i] - new_cfa;\n \t}\n     }\n \n-  fs->regs.reg[R_VRSAVE].how = REG_SAVED_OFFSET;\n+  fs->regs.how[R_VRSAVE] = REG_SAVED_OFFSET;\n   fs->regs.reg[R_VRSAVE].loc.offset = (long) &vregs->vsave - new_cfa;\n \n   /* If we have SPE register high-parts... we check at compile-time to\n      avoid expanding the code for all other PowerPC.  */\n #ifdef __SPE__\n   for (i = 14; i < 32; i++)\n     {\n-      fs->regs.reg[i + FIRST_SPE_HIGH_REGNO - 4].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i + FIRST_SPE_HIGH_REGNO - 4] = REG_SAVED_OFFSET;\n       fs->regs.reg[i + FIRST_SPE_HIGH_REGNO - 4].loc.offset\n \t= (long) &regs->vregs - new_cfa + 4 * i;\n     }\n@@ -315,7 +315,7 @@ frob_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs ATT\n #endif\n \n #ifdef __powerpc64__\n-  if (fs->regs.reg[2].how == REG_UNSAVED)\n+  if (fs->regs.how[2] == REG_UNSAVED)\n     {\n       /* If the current unwind info (FS) does not contain explicit info\n \t saving R2, then we have to do a minor amount of code reading to"}, {"sha": "904bbaae7328f757f80aa12b5ee257e339643eaf", "filename": "libgcc/config/s390/linux-unwind.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fs390%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fs390%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -106,20 +106,20 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset =\n \t(long)&regs->gprs[i] - new_cfa;\n     }\n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[16+i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[16+i] = REG_SAVED_OFFSET;\n       fs->regs.reg[16+i].loc.offset =\n \t(long)&regs->fprs[dwarf_to_fpr_map[i]] - new_cfa;\n     }\n \n   /* Load return addr from PSW into dummy register 32.  */\n \n-  fs->regs.reg[32].how = REG_SAVED_OFFSET;\n+  fs->regs.how[32] = REG_SAVED_OFFSET;\n   fs->regs.reg[32].loc.offset = (long)&regs->psw_addr - new_cfa;\n   fs->retaddr_column = 32;\n   /* SIGILL, SIGFPE and SIGTRAP are delivered with psw_addr"}, {"sha": "992cffce117b876d8a9355b7d1d714c800571354", "filename": "libgcc/config/s390/tpf-unwind.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fs390%2Ftpf-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fs390%2Ftpf-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Ftpf-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -88,18 +88,18 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n       /* All registers remain unchanged ...  */\n       for (i = 0; i < 32; i++)\n \t{\n-\t  fs->regs.reg[i].how = REG_SAVED_REG;\n+\t  fs->regs.how[i] = REG_SAVED_REG;\n \t  fs->regs.reg[i].loc.reg = i;\n \t}\n \n       /* ... except for %r14, which is stored at CFA+offset where offset\n \t is displacment of ICST_CRET or ICST_SRET from CFA */\n       if ( __isPATrange(context->ra) )  {\n-\t   fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+\t   fs->regs.how[14] = REG_SAVED_OFFSET;\n \t   fs->regs.reg[14].loc.offset = ICST_CRET - STACK_POINTER_OFFSET;\n \t   fs->retaddr_column = 14;\n       }  else  {\n-\t   fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+\t   fs->regs.how[14] = REG_SAVED_OFFSET;\n \t   fs->regs.reg[14].loc.offset = ICST_SRET - STACK_POINTER_OFFSET;\n \t   fs->retaddr_column = 14;\n \n@@ -119,13 +119,13 @@ s390_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = regs + i*8 - new_cfa;\n     }\n \n   for (i = 0; i < 4; i++)\n     {\n-      fs->regs.reg[16 + i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[16 + i] = REG_SAVED_OFFSET;\n       fs->regs.reg[16 + i].loc.offset = regs + 16*8 + i*8 - new_cfa;\n     }\n "}, {"sha": "8088e3c08a13857c5c920cd3934adf30e0267083", "filename": "libgcc/config/sh/linux-unwind.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -99,53 +99,53 @@ sh_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 15; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset\n \t= (long)&(sc->sc_regs[i]) - new_cfa;\n     }\n \n-  fs->regs.reg[SH_DWARF_FRAME_PR].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_PR] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_PR].loc.offset\n     = (long)&(sc->sc_pr) - new_cfa;\n-  fs->regs.reg[SH_DWARF_FRAME_SR].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_SR] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_SR].loc.offset\n     = (long)&(sc->sc_sr) - new_cfa;\n-  fs->regs.reg[SH_DWARF_FRAME_GBR].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_GBR] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_GBR].loc.offset\n     = (long)&(sc->sc_gbr) - new_cfa;\n-  fs->regs.reg[SH_DWARF_FRAME_MACH].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_MACH] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_MACH].loc.offset\n     = (long)&(sc->sc_mach) - new_cfa;\n-  fs->regs.reg[SH_DWARF_FRAME_MACL].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_MACL] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_MACL].loc.offset\n     = (long)&(sc->sc_macl) - new_cfa;\n \n #if defined (__SH3E__) || defined (__SH4__)\n   r = SH_DWARF_FRAME_FP0;\n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[r+i] = REG_SAVED_OFFSET;\n       fs->regs.reg[r+i].loc.offset\n \t= (long)&(sc->sc_fpregs[i]) - new_cfa;\n     }\n \n   r = SH_DWARF_FRAME_XD0;\n   for (i = 0; i < 8; i++)\n     {\n-      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[r+i] = REG_SAVED_OFFSET;\n       fs->regs.reg[r+i].loc.offset\n \t= (long)&(sc->sc_xfpregs[2*i]) - new_cfa;\n     }\n \n-  fs->regs.reg[SH_DWARF_FRAME_FPUL].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_FPUL] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_FPUL].loc.offset\n     = (long)&(sc->sc_fpul) - new_cfa;\n-  fs->regs.reg[SH_DWARF_FRAME_FPSCR].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_FPSCR] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_FPSCR].loc.offset\n     = (long)&(sc->sc_fpscr) - new_cfa;\n #endif\n \n-  fs->regs.reg[SH_DWARF_FRAME_PC].how = REG_SAVED_OFFSET;\n+  fs->regs.how[SH_DWARF_FRAME_PC] = REG_SAVED_OFFSET;\n   fs->regs.reg[SH_DWARF_FRAME_PC].loc.offset\n     = (long)&(sc->sc_pc) - new_cfa;\n   fs->retaddr_column = SH_DWARF_FRAME_PC;"}, {"sha": "0095b43c26e90ab82be5b46eba538a5412c59e88", "filename": "libgcc/config/sparc/linux-unwind.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -65,13 +65,13 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n       if ((unsigned int) i == __builtin_dwarf_sp_column ())\n \tcontinue;\n \n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset\n \t= this_cfa + regs_off + (i * 8) - new_cfa;\n     }\n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i + 16].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i + 16] = REG_SAVED_OFFSET;\n       fs->regs.reg[i + 16].loc.offset\n \t= this_cfa + (i * 8) - new_cfa;\n     }\n@@ -81,7 +81,7 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n \t{\n \t  if (i > 32 && (i & 0x1))\n \t    continue;\n-\t  fs->regs.reg[i + 32].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i + 32] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i + 32].loc.offset\n \t    = fpu_save + (i * 4) - new_cfa;\n \t}\n@@ -95,7 +95,7 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n   shifted_ra_location = this_cfa + regs_off + 19 * 8; /* Y register */\n   *(long *)shifted_ra_location = *(long *)ra_location - 8;\n   fs->retaddr_column = 0;\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = shifted_ra_location - new_cfa;\n   fs->signal_frame = 1;\n \n@@ -122,7 +122,7 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n       context->cfa -= STACK_BIAS;\n \n       for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n-\tif (fs->regs.reg[i].how == REG_SAVED_OFFSET)\n+\tif (fs->regs.how[i] == REG_SAVED_OFFSET)\n \t  _Unwind_SetGRPtr (context, i,\n \t\t\t    _Unwind_GetGRPtr (context, i) - STACK_BIAS);\n     }\n@@ -177,21 +177,21 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n       if ((unsigned int) i == __builtin_dwarf_sp_column ())\n \tcontinue;\n \n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset\n \t= this_cfa + regs_off + (4 * 4) + (i * 4) - new_cfa;\n     }\n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i + 16].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i + 16] = REG_SAVED_OFFSET;\n       fs->regs.reg[i + 16].loc.offset\n \t= this_cfa + (i * 4) - new_cfa;\n     }\n   if (fpu_save)\n     {\n       for (i = 0; i < 32; i++)\n \t{\n-\t  fs->regs.reg[i + 32].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i + 32] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i + 32].loc.offset\n \t    = fpu_save + (i * 4) - new_cfa;\n \t}\n@@ -205,7 +205,7 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n   shifted_ra_location = this_cfa + regs_off + 3 * 4; /* Y register */\n   *(int *)shifted_ra_location = *(int *)ra_location - 8;\n   fs->retaddr_column = 0;\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = shifted_ra_location - new_cfa;\n   fs->signal_frame = 1;\n "}, {"sha": "4da5a7c332f7d96ff926e0fe4fe62fe768e082e4", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -96,7 +96,7 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n       context->cfa -= STACK_BIAS;\n \n       for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n-\tif (fs->regs.reg[i].how == REG_SAVED_OFFSET)\n+\tif (fs->regs.how[i] == REG_SAVED_OFFSET)\n \t  _Unwind_SetGRPtr (context, i,\n \t\t\t    _Unwind_GetGRPtr (context, i) - STACK_BIAS);\n     }\n@@ -221,15 +221,15 @@ MD_FALLBACK_FRAME_STATE_FOR (struct _Unwind_Context *context,\n \tcontinue;\n \n       /* First the global registers and then the out registers.  */\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (long)&mctx->gregs[REG_Y + i] - new_cfa;\n     }\n \n   /* Just above the stack pointer there are 16 extended words in which\n      the register window (in and local registers) was saved.  */\n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i + 16].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i + 16] = REG_SAVED_OFFSET;\n       fs->regs.reg[i + 16].loc.offset = i * sizeof(long);\n     }\n \n@@ -238,7 +238,7 @@ MD_FALLBACK_FRAME_STATE_FOR (struct _Unwind_Context *context,\n     {\n       for (i = 0; i < 32; i++)\n \t{\n-\t  fs->regs.reg[i + 32].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i + 32] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i + 32].loc.offset\n \t    = (long)&mctx->fpregs.fpu_fr.fpu_regs[i] - new_cfa;\n \t}\n@@ -250,7 +250,7 @@ MD_FALLBACK_FRAME_STATE_FOR (struct _Unwind_Context *context,\n \t  if (i > 32 && (i & 1))\n \t    continue;\n \n-\t  fs->regs.reg[i + 32].how = REG_SAVED_OFFSET;\n+\t  fs->regs.how[i + 32] = REG_SAVED_OFFSET;\n \t  fs->regs.reg[i + 32].loc.offset\n \t    = (long)&mctx->fpregs.fpu_fr.fpu_dregs[i/2] - new_cfa;\n \t}\n@@ -265,7 +265,7 @@ MD_FALLBACK_FRAME_STATE_FOR (struct _Unwind_Context *context,\n   shifted_ra_location = &mctx->gregs[REG_Y];\n   *(void **)shifted_ra_location = *(void **)ra_location - 8;\n   fs->retaddr_column = 0;\n-  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.how[0] = REG_SAVED_OFFSET;\n   fs->regs.reg[0].loc.offset = (long)shifted_ra_location - new_cfa;\n \n   /* SIGFPE for IEEE-754 exceptions is delivered after the faulting insn"}, {"sha": "868624e2d94e6b9e06423c4d7c49961fab8f833d", "filename": "libgcc/config/xtensa/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fxtensa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Fconfig%2Fxtensa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Flinux-unwind.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -105,11 +105,11 @@ xtensa_fallback_frame_state (struct _Unwind_Context *context,\n \n   for (i = 0; i < 16; i++)\n     {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.how[i] = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset = (_Unwind_Ptr) &(sc->sc_a[i]) - new_cfa;\n     }\n \n-  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how =\n+  fs->regs.how[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__] =\n     REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset =\n     (_Unwind_Ptr) (sc->sc_pc) - new_cfa;"}, {"sha": "eaceace20298b9b13344aff9d1fe9ee5f9c7bd73", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -36,6 +36,7 @@\n #include \"unwind-dw2-fde.h\"\n #include \"gthr.h\"\n #include \"unwind-dw2.h\"\n+#include <stddef.h>\n \n #ifdef HAVE_SYS_SDT_H\n #include <sys/sdt.h>\n@@ -983,7 +984,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = offset;\n \t    }\n \t}\n@@ -992,7 +993,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = insn & 0x3f;\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.reg[reg].how = REG_UNSAVED;\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n \t}\n       else switch (insn)\n \t{\n@@ -1026,7 +1027,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = offset;\n \t    }\n \t  break;\n@@ -1037,21 +1038,21 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t     register was saved somewhere.  */\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.reg[reg].how = REG_UNSAVED;\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n \t  break;\n \n \tcase DW_CFA_same_value:\n \t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.reg[reg].how = REG_UNSAVED;\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n \t  break;\n \n \tcase DW_CFA_undefined:\n \t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.reg[reg].how = REG_UNDEFINED;\n+\t    fs->regs.how[reg] = REG_UNDEFINED;\n \t  break;\n \n \tcase DW_CFA_nop:\n@@ -1065,7 +1066,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t    reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t    if (UNWIND_COLUMN_IN_RANGE (reg))\n \t      {\n-\t        fs->regs.reg[reg].how = REG_SAVED_REG;\n+\t\tfs->regs.how[reg] = REG_SAVED_REG;\n \t        fs->regs.reg[reg].loc.reg = (_Unwind_Word)reg2;\n \t      }\n \t  }\n@@ -1128,7 +1129,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_EXP;\n+\t      fs->regs.how[reg] = REG_SAVED_EXP;\n \t      fs->regs.reg[reg].loc.exp = insn_ptr;\n \t    }\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n@@ -1143,7 +1144,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = offset;\n \t    }\n \t  break;\n@@ -1171,7 +1172,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_VAL_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = offset;\n \t    }\n \t  break;\n@@ -1183,7 +1184,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_VAL_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = offset;\n \t    }\n \t  break;\n@@ -1193,7 +1194,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_VAL_EXP;\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_EXP;\n \t      fs->regs.reg[reg].loc.exp = insn_ptr;\n \t    }\n \t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n@@ -1205,14 +1206,14 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n \t     return address signing status.  */\n \t  reg = DWARF_REGNUM_AARCH64_RA_STATE;\n-\t  gcc_assert (fs->regs.reg[reg].how == REG_UNSAVED);\n+\t  gcc_assert (fs->regs.how[reg] == REG_UNSAVED);\n \t  fs->regs.reg[reg].loc.offset ^= 1;\n #else\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n \t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)\n \t    for (reg = 16; reg < 32; ++reg)\n \t      {\n-\t\tfs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t\tfs->regs.how[reg] = REG_SAVED_OFFSET;\n \t\tfs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n \t      }\n #endif\n@@ -1232,7 +1233,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n \t  if (UNWIND_COLUMN_IN_RANGE (reg))\n \t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n \t      fs->regs.reg[reg].loc.offset = -offset;\n \t    }\n \t  break;\n@@ -1255,7 +1256,8 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   const struct dwarf_cie *cie;\n   const unsigned char *aug, *insn, *end;\n \n-  memset (fs, 0, sizeof (*fs));\n+  memset (&fs->regs.how[0], 0,\n+\t  sizeof (*fs) - offsetof (_Unwind_FrameState, regs.how[0]));\n   context->args_size = 0;\n   context->lsda = 0;\n \n@@ -1355,7 +1357,7 @@ __frame_state_for (void *pc_target, struct frame_state *state_in)\n \n   for (reg = 0; reg < PRE_GCC3_DWARF_FRAME_REGISTERS + 1; reg++)\n     {\n-      state_in->saved[reg] = fs.regs.reg[reg].how;\n+      state_in->saved[reg] = fs.regs.how[reg];\n       switch (state_in->saved[reg])\n \t{\n \tcase REG_SAVED_REG:\n@@ -1453,7 +1455,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \n   /* Compute the addresses of all registers saved in this frame.  */\n   for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n-    switch (fs->regs.reg[i].how)\n+    switch (fs->regs.how[i])\n       {\n       case REG_UNSAVED:\n       case REG_UNDEFINED:\n@@ -1531,7 +1533,7 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n      rule is handled like same_value.  The only exception is\n      DW_CFA_undefined on retaddr_column which is supposed to\n      mark outermost frame in DWARF 3.  */\n-  if (fs->regs.reg[DWARF_REG_TO_UNWIND_COLUMN (fs->retaddr_column)].how\n+  if (fs->regs.how[DWARF_REG_TO_UNWIND_COLUMN (fs->retaddr_column)]\n       == REG_UNDEFINED)\n     /* uw_frame_state_for uses context->ra == 0 check to find outermost\n        stack frame.  */"}, {"sha": "af34e000f07e005683cd95ef58f10865dd6fbc19", "filename": "libgcc/unwind-dw2.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146e4591403239d662f36cab2d8b78a47cd01bd2/libgcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.h?ref=146e4591403239d662f36cab2d8b78a47cd01bd2", "patch": "@@ -22,6 +22,16 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+enum {\n+  REG_UNSAVED,\n+  REG_SAVED_OFFSET,\n+  REG_SAVED_REG,\n+  REG_SAVED_EXP,\n+  REG_SAVED_VAL_OFFSET,\n+  REG_SAVED_VAL_EXP,\n+  REG_UNDEFINED\n+};\n+\n /* The result of interpreting the frame unwind info for a frame.\n    This is all symbolic at this point, as none of the values can\n    be resolved until the target pc is located.  */\n@@ -37,16 +47,8 @@ typedef struct\n \t_Unwind_Sword offset;\n \tconst unsigned char *exp;\n       } loc;\n-      enum {\n-\tREG_UNSAVED,\n-\tREG_SAVED_OFFSET,\n-\tREG_SAVED_REG,\n-\tREG_SAVED_EXP,\n-\tREG_SAVED_VAL_OFFSET,\n-\tREG_SAVED_VAL_EXP,\n-\tREG_UNDEFINED\n-      } how;\n     } reg[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n+    unsigned char how[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n     /* Used to implement DW_CFA_remember_state.  */\n     struct frame_state_reg_info *prev;"}]}