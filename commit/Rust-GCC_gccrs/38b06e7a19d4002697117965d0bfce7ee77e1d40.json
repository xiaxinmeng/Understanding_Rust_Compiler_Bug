{"sha": "38b06e7a19d4002697117965d0bfce7ee77e1d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhiMDZlN2ExOWQ0MDAyNjk3MTE3OTY1ZDBiZmNlN2VlNzdlMWQ0MA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-09-17T07:59:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T07:59:11Z"}, "message": "[Ada] Refine conditions for calling Copy_Bitfield\n\nAvoid calling Copy_Bitfield if there are volatile or independent\ncomponents that might be read or written. The test is conservative.\n\n2019-09-17  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_Assign_Array_Loop_Or_Bitfield): Add tests\n\tfor potential volatile or independent components.\n\t* libgnat/s-bituti.adb (Copy_Small_Bitfield,\n\tCopy_Large_Bitfield): Move declarations to more appropriate\n\tplace.\n\nFrom-SVN: r275768", "tree": {"sha": "e2a5b8a7959e9641e03242174da27e7a81c1184b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a5b8a7959e9641e03242174da27e7a81c1184b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38b06e7a19d4002697117965d0bfce7ee77e1d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b06e7a19d4002697117965d0bfce7ee77e1d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b06e7a19d4002697117965d0bfce7ee77e1d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b06e7a19d4002697117965d0bfce7ee77e1d40/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ba9c127cdbc661a4f10fcf977c560e61edc5ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba9c127cdbc661a4f10fcf977c560e61edc5ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba9c127cdbc661a4f10fcf977c560e61edc5ca4"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "ecc67e5a376420ac89ee236c5b8d052b84c66999", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=38b06e7a19d4002697117965d0bfce7ee77e1d40", "patch": "@@ -1,3 +1,11 @@\n+2019-09-17  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array_Loop_Or_Bitfield): Add tests\n+\tfor potential volatile or independent components.\n+\t* libgnat/s-bituti.adb (Copy_Small_Bitfield,\n+\tCopy_Large_Bitfield): Move declarations to more appropriate\n+\tplace.\n+\n 2019-09-13  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* make.adb (Scan_Make_Arg): Also accept `--sysroot=' for the "}, {"sha": "6ef3fb2c4a53250887502be96e22e6ea28cc60ea", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=38b06e7a19d4002697117965d0bfce7ee77e1d40", "patch": "@@ -1451,20 +1451,35 @@ package body Exp_Ch5 is\n    begin\n       --  Determine whether Copy_Bitfield is appropriate (will work, and will\n       --  be more efficient than component-by-component copy). Copy_Bitfield\n-      --  doesn't work for reversed storage orders. It is efficient only for\n-      --  slices of bit-packed arrays.\n-\n-      --  Note that Expand_Assign_Array_Bitfield is disabled for now\n-\n-      if False -- ???\n+      --  doesn't work for reversed storage orders. It is efficient for slices\n+      --  of bit-packed arrays. Copy_Bitfield can read and write bits that are\n+      --  not part of the objects being copied, so we don't want to use it if\n+      --  there are volatile or independent components. If the Prefix of the\n+      --  slice is a selected component (etc, see below), then it might be a\n+      --  component of an object with some other volatile or independent\n+      --  components, so we disable the optimization in that case as well.\n+      --  We could complicate this code by actually looking for such volatile\n+      --  and independent components.\n+\n+      --  Note that Expand_Assign_Array_Bitfield is disabled for now.\n+\n+      if False and then -- ???\n+        RTE_Available (RE_Copy_Bitfield)\n         and then Is_Bit_Packed_Array (L_Type)\n         and then Is_Bit_Packed_Array (R_Type)\n-        and then RTE_Available (RE_Copy_Bitfield)\n         and then not Reverse_Storage_Order (L_Type)\n         and then not Reverse_Storage_Order (R_Type)\n         and then Ndim = 1\n         and then not Rev\n         and then Slices\n+        and then not Has_Volatile_Component (L_Type)\n+        and then not Has_Volatile_Component (R_Type)\n+        and then not Has_Independent_Components (L_Type)\n+        and then not Has_Independent_Components (R_Type)\n+        and then not Nkind_In (Prefix (Name (N)),\n+                               N_Selected_Component,\n+                               N_Indexed_Component,\n+                               N_Slice)\n       then\n          return Expand_Assign_Array_Bitfield\n            (N, Larray, Rarray, L_Type, R_Type, Rev);"}, {"sha": "511dc5714879b82b6d2464803036cc7dda646aac", "filename": "gcc/ada/libgnat/s-bituti.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2Flibgnat%2Fs-bituti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b06e7a19d4002697117965d0bfce7ee77e1d40/gcc%2Fada%2Flibgnat%2Fs-bituti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-bituti.adb?ref=38b06e7a19d4002697117965d0bfce7ee77e1d40", "patch": "@@ -71,6 +71,29 @@ package body System.Bitfield_Utils is\n       --  set to Src_Value. Src_Value must have high order bits (Size and\n       --  above) zero. The result is returned as the function result.\n \n+      procedure Copy_Small_Bitfield\n+        (Src_Address  : Address;\n+         Src_Offset   : Bit_Offset;\n+         Dest_Address : Address;\n+         Dest_Offset  : Bit_Offset;\n+         Size         : Small_Size);\n+      --  Copy_Bitfield in the case where Size <= Val'Size.\n+      --  The Address values must be aligned as for Val and Val_2.\n+      --  This works for overlapping bit fields.\n+\n+      procedure Copy_Large_Bitfield\n+        (Src_Address  : Address;\n+         Src_Offset   : Bit_Offset;\n+         Dest_Address : Address;\n+         Dest_Offset  : Bit_Offset;\n+         Size         : Bit_Size);\n+      --  Copy_Bitfield in the case where Size > Val'Size.\n+      --  The Address values must be aligned as for Val and Val_2.\n+      --  This works for overlapping bit fields only if the source\n+      --  bit address is greater than or equal to the destination\n+      --  bit address, because it copies forward (from lower to higher\n+      --  bit addresses).\n+\n       function Get_Bitfield\n         (Src : Val_2; Src_Offset : Bit_Offset; Size : Small_Size)\n          return Val\n@@ -115,29 +138,6 @@ package body System.Bitfield_Utils is\n          return Result;\n       end Set_Bitfield;\n \n-      procedure Copy_Small_Bitfield\n-        (Src_Address  : Address;\n-         Src_Offset   : Bit_Offset;\n-         Dest_Address : Address;\n-         Dest_Offset  : Bit_Offset;\n-         Size         : Small_Size);\n-      --  Copy_Bitfield in the case where Size <= Val'Size.\n-      --  The Address values must be aligned as for Val and Val_2.\n-      --  This works for overlapping bit fields.\n-\n-      procedure Copy_Large_Bitfield\n-        (Src_Address  : Address;\n-         Src_Offset   : Bit_Offset;\n-         Dest_Address : Address;\n-         Dest_Offset  : Bit_Offset;\n-         Size         : Bit_Size);\n-      --  Copy_Bitfield in the case where Size > Val'Size.\n-      --  The Address values must be aligned as for Val and Val_2.\n-      --  This works for overlapping bit fields only if the source\n-      --  bit address is greater than or equal to the destination\n-      --  bit address, because it copies forward (from lower to higher\n-      --  bit addresses).\n-\n       procedure Copy_Small_Bitfield\n         (Src_Address  : Address;\n          Src_Offset   : Bit_Offset;"}]}