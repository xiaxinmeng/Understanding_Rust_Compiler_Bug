{"sha": "c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxZTVjYzE5YTMwZjVlOGNiNmVhM2JkMmEyM2I2NDNmMGRmYmFkZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-07-09T13:28:51Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-07-09T13:28:51Z"}, "message": "tree-ssa-ccp.c (optimize_unreachable): New function.\n\n2012-07-09  Tom de Vries  <tom@codesourcery.com>\n\t    Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (optimize_unreachable): New function.\n\t(execute_fold_all_builtins): Use optimize_unreachable to optimize\n\tBUILT_IN_UNREACHABLE.  Don't optimize after BUILT_IN_UNREACHABLE.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r189383", "tree": {"sha": "1b9cd1549e86b0e1d14b1a7cfacbb928e0d5e245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9cd1549e86b0e1d14b1a7cfacbb928e0d5e245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf/comments", "author": null, "committer": null, "parents": [{"sha": "44a9d0eac23440d76f06ef9b3d429d5c3d286ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a9d0eac23440d76f06ef9b3d429d5c3d286ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a9d0eac23440d76f06ef9b3d429d5c3d286ded"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "2b0ebab4002f349c95f2e7c05cd1fe84909ee627", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "patch": "@@ -1,3 +1,10 @@\n+2012-07-09  Tom de Vries  <tom@codesourcery.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (optimize_unreachable): New function.\n+\t(execute_fold_all_builtins): Use optimize_unreachable to optimize\n+\tBUILT_IN_UNREACHABLE.  Don't optimize after BUILT_IN_UNREACHABLE.\n+\n 2012-07-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR bootstrap/53898"}, {"sha": "384bbb7c91f1b4c27e9c99183e4c82e6df69137b", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c61e5cc19a30f5e8cb6ea3bd2a23b643f0dfbadf", "patch": "@@ -2318,6 +2318,69 @@ optimize_stdarg_builtin (gimple call)\n     }\n }\n \n+/* Attemp to make the block of __builtin_unreachable I unreachable by changing\n+   the incoming jumps.  Return true if at least one jump was changed.  */\n+\n+static bool\n+optimize_unreachable (gimple_stmt_iterator i)\n+{\n+  basic_block bb = gsi_bb (i);\n+  gimple_stmt_iterator gsi;\n+  gimple stmt;\n+  edge_iterator ei;\n+  edge e;\n+  bool ret;\n+\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      stmt = gsi_stmt (gsi);\n+\n+      if (is_gimple_debug (stmt))\n+       continue;\n+\n+      if (gimple_code (stmt) == GIMPLE_LABEL)\n+\t{\n+\t  /* Verify we do not need to preserve the label.  */\n+\t  if (FORCED_LABEL (gimple_label_label (stmt)))\n+\t    return false;\n+\n+\t  continue;\n+\t}\n+\n+      /* Only handle the case that __builtin_unreachable is the first statement\n+\t in the block.  We rely on DCE to remove stmts without side-effects\n+\t before __builtin_unreachable.  */\n+      if (gsi_stmt (gsi) != gsi_stmt (i))\n+        return false;\n+    }\n+\n+  ret = false;\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    {\n+      gsi = gsi_last_bb (e->src);\n+      stmt = gsi_stmt (gsi);\n+\n+      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n+\t{\n+\t  if (e->flags & EDGE_TRUE_VALUE)\n+\t    gimple_cond_make_false (stmt);\n+\t  else if (e->flags & EDGE_FALSE_VALUE)\n+\t    gimple_cond_make_true (stmt);\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\t{\n+\t  /* Todo: handle other cases, f.i. switch statement.  */\n+\t  continue;\n+\t}\n+\n+      ret = true;\n+    }\n+\n+  return ret;\n+}\n+\n /* A simple pass that attempts to fold all builtin functions.  This pass\n    is run after we've propagated as many constants as we can.  */\n \n@@ -2379,6 +2442,11 @@ execute_fold_all_builtins (void)\n \t\tgsi_next (&i);\n \t\tcontinue;\n \n+\t      case BUILT_IN_UNREACHABLE:\n+\t\tif (optimize_unreachable (i))\n+\t\t  cfg_changed = true;\n+\t\tbreak;\n+\n \t      case BUILT_IN_VA_START:\n \t      case BUILT_IN_VA_END:\n \t      case BUILT_IN_VA_COPY:\n@@ -2393,6 +2461,9 @@ execute_fold_all_builtins (void)\n \t\tcontinue;\n \t      }\n \n+\t  if (result == NULL_TREE)\n+\t    break;\n+\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Simplified\\n  \");"}]}