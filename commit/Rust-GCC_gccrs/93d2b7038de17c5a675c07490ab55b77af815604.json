{"sha": "93d2b7038de17c5a675c07490ab55b77af815604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkMmI3MDM4ZGUxN2M1YTY3NWMwNzQ5MGFiNTViNzdhZjgxNTYwNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-10T13:44:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-10T13:44:36Z"}, "message": "compiler: permit inlining variable declaration statements\n    \n    This adds all of two inlinable functions to the standard library:\n    crypto/subtle.ConstantTimeLessOrEq, regexp.(*Regexp).Copy.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/176378\n\nFrom-SVN: r271063", "tree": {"sha": "218143ec282fe845ebee7e50fdbfa7d264bf8754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218143ec282fe845ebee7e50fdbfa7d264bf8754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d2b7038de17c5a675c07490ab55b77af815604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d2b7038de17c5a675c07490ab55b77af815604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d2b7038de17c5a675c07490ab55b77af815604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d2b7038de17c5a675c07490ab55b77af815604/comments", "author": null, "committer": null, "parents": [{"sha": "cd6437427d9cd2eb8e468222d6df8c9617148950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6437427d9cd2eb8e468222d6df8c9617148950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6437427d9cd2eb8e468222d6df8c9617148950"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "8158367c62b38d2be476db2d70cfd205dfd10215", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=93d2b7038de17c5a675c07490ab55b77af815604", "patch": "@@ -1,4 +1,4 @@\n-3dbf51c01c5d0acbf9ae47f77166fa9935881749\n+b5e4ba88a2e7f3c34e9183f43370c38ea639c393\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ed6585242401a5b230a75f10f4bbde52ca0e8ba3", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=93d2b7038de17c5a675c07490ab55b77af815604", "patch": "@@ -843,14 +843,14 @@ Var_expression::do_address_taken(bool escapes)\n }\n \n // The cost to inline a variable reference.  We currently only support\n-// references to parameters.\n+// references to parameters and local variables.\n \n int\n Var_expression::do_inlining_cost() const\n {\n   if (this->variable_->is_variable())\n     {\n-      if (this->variable_->var_value()->is_parameter())\n+      if (!this->variable_->var_value()->is_global())\n \treturn 1;\n     }\n   else if (this->variable_->is_result_variable())"}, {"sha": "cd1b60199e8dd2bd350336695868d8336c9db838", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=93d2b7038de17c5a675c07490ab55b77af815604", "patch": "@@ -155,6 +155,8 @@ Statement::import_statement(Import_function_body* ifb, Location loc)\n       ifb->advance(6);\n       return Statement::make_return_statement(NULL, loc);\n     }\n+  else if (ifb->match_c_string(\"var \"))\n+    return Variable_declaration_statement::do_import(ifb, loc);\n \n   Expression* lhs = Expression::import_expression(ifb, loc);\n   ifb->require_c_string(\" = \");\n@@ -408,6 +410,57 @@ Statement::make_variable_declaration(Named_object* var)\n   return new Variable_declaration_statement(var);\n }\n \n+// Export a variable declaration.\n+\n+void\n+Variable_declaration_statement::do_export_statement(Export_function_body* efb)\n+{\n+  efb->write_c_string(\"var \");\n+  efb->write_string(Gogo::unpack_hidden_name(this->var_->name()));\n+  efb->write_c_string(\" \");\n+  Variable* var = this->var_->var_value();\n+  Type* type = var->type();\n+  efb->write_type(type);\n+  Expression* init = var->init();\n+  if (init != NULL)\n+    {\n+      efb->write_c_string(\" = \");\n+\n+      go_assert(efb->type_context() == NULL);\n+      efb->set_type_context(type);\n+\n+      init->export_expression(efb);\n+\n+      efb->set_type_context(NULL);\n+    }\n+}\n+\n+// Import a variable declaration.\n+\n+Statement*\n+Variable_declaration_statement::do_import(Import_function_body* ifb,\n+\t\t\t\t\t  Location loc)\n+{\n+  ifb->require_c_string(\"var \");\n+  std::string id = ifb->read_identifier();\n+  ifb->require_c_string(\" \");\n+  Type* type = ifb->read_type();\n+  Expression* init = NULL;\n+  if (ifb->match_c_string(\" = \"))\n+    {\n+      ifb->advance(3);\n+      init = Expression::import_expression(ifb, loc);\n+      Type_context context(type, false);\n+      init->determine_type(&context);\n+    }\n+  Variable* var = new Variable(type, init, false, false, false, loc);\n+  var->set_is_used();\n+  // FIXME: The package we are importing does not yet exist, so we\n+  // can't pass the correct package here.  It probably doesn't matter.\n+  Named_object* no = ifb->block()->bindings()->add_variable(id, NULL, var);\n+  return Statement::make_variable_declaration(no);\n+}\n+\n // Class Temporary_statement.\n \n // Return the type of the temporary variable."}, {"sha": "19ccb85a4bd85c48b6c854b180d358419974fbc6", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d2b7038de17c5a675c07490ab55b77af815604/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=93d2b7038de17c5a675c07490ab55b77af815604", "patch": "@@ -16,6 +16,7 @@ class Block;\n class Function;\n class Unnamed_label;\n class Export_function_body;\n+class Import_function_body;\n class Assignment_statement;\n class Temporary_statement;\n class Variable_declaration_statement;\n@@ -332,8 +333,7 @@ class Statement\n   inlining_cost()\n   { return this->do_inlining_cost(); }\n \n-  // Export data for this statement to BODY.  INDENT is an indentation\n-  // level used if the export data requires multiple lines.\n+  // Export data for this statement to BODY.\n   void\n   export_statement(Export_function_body* efb)\n   { this->do_export_statement(efb); }\n@@ -514,10 +514,8 @@ class Statement\n   { return 0x100000; }\n \n   // Implemented by child class: write export data for this statement\n-  // to the string.  The integer is an indentation level used if the\n-  // export data requires multiple lines.  This need only be\n-  // implemented by classes that implement do_inlining_cost with a\n-  // reasonable value.\n+  // to the string.  This need only be implemented by classes that\n+  // implement do_inlining_cost with a reasonable value.\n   virtual void\n   do_export_statement(Export_function_body*)\n   { go_unreachable(); }\n@@ -746,6 +744,10 @@ class Variable_declaration_statement : public Statement\n   var()\n   { return this->var_; }\n \n+  // Import a variable declaration.\n+  static Statement*\n+  do_import(Import_function_body*, Location);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -756,6 +758,13 @@ class Variable_declaration_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*, Statement_inserter*);\n \n+  int\n+  do_inlining_cost()\n+  { return 1; }\n+\n+  void\n+  do_export_statement(Export_function_body*);\n+\n   Statement*\n   do_flatten(Gogo*, Named_object*, Block*, Statement_inserter*);\n "}]}