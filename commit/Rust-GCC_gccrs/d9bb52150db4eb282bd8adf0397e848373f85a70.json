{"sha": "d9bb52150db4eb282bd8adf0397e848373f85a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliYjUyMTUwZGI0ZWIyODJiZDhhZGYwMzk3ZTg0ODM3M2Y4NWE3MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-05T09:17:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-05T09:17:57Z"}, "message": "aarch64: Reimplement vget_high* intrinsics\n\nSimilar to the vget_low* intrinsics we should just use a proper vec_select rather than\ngoing through V2DI subregs.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (get_high): Define builtin.\n\t* config/aarch64/aarch64-simd.md (aarch64_get_high<mode>): Define.\n\t* config/aarch64/arm_neon.h (__GET_HIGH): Delete.\n\t(vget_high_f16): Reimplement using new builtin.\n\t(vget_high_f32): Likewise.\n\t(vget_high_f64): Likewise.\n\t(vget_high_p8): Likewise.\n\t(vget_high_p16): Likewise.\n\t(vget_high_p64): Likewise.\n\t(vget_high_s8): Likewise.\n\t(vget_high_s16): Likewise.\n\t(vget_high_s32): Likewise.\n\t(vget_high_s64): Likewise.\n\t(vget_high_u8): Likewise.\n\t(vget_high_u16): Likewise.\n\t(vget_high_u32): Likewise.\n\t(vget_high_u64): Likewise.", "tree": {"sha": "4e1faffb73935d44f13f9e08a4c87e496a99ef31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1faffb73935d44f13f9e08a4c87e496a99ef31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9bb52150db4eb282bd8adf0397e848373f85a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bb52150db4eb282bd8adf0397e848373f85a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9bb52150db4eb282bd8adf0397e848373f85a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bb52150db4eb282bd8adf0397e848373f85a70/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e7a7498732b83df61443c211b8d69454ad0b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e7a7498732b83df61443c211b8d69454ad0b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e7a7498732b83df61443c211b8d69454ad0b22"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "b885bd5b38bf7ad83eb9d801284bf9b34db17210", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d9bb52150db4eb282bd8adf0397e848373f85a70", "patch": "@@ -57,6 +57,8 @@\n \n   /* Implemented by aarch64_get_low<mode>.  */\n   BUILTIN_VQMOV (UNOP, get_low, 0, AUTO_FP)\n+  /* Implemented by aarch64_get_high<mode>.  */\n+  BUILTIN_VQMOV (UNOP, get_high, 0, AUTO_FP)\n \n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n   BUILTIN_VSDQ_I (BINOP, sqshl, 0, NONE)"}, {"sha": "71aa77dd0102579139191b79476c7269cd8e28b3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d9bb52150db4eb282bd8adf0397e848373f85a70", "patch": "@@ -308,6 +308,17 @@\n   }\n )\n \n+(define_expand \"aarch64_get_high<mode>\"\n+  [(match_operand:<VHALF> 0 \"register_operand\")\n+   (match_operand:VQMOV 1 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+    emit_insn (gen_aarch64_get_half<mode> (operands[0], operands[1], hi));\n+    DONE;\n+  }\n+)\n+\n (define_insn_and_split \"aarch64_simd_mov_from_<mode>low\"\n   [(set (match_operand:<VHALF> 0 \"register_operand\" \"=w,?r\")\n         (vec_select:<VHALF>"}, {"sha": "baa30bd5a9d96c1bf04a37fb105091ea56a6444a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9bb52150db4eb282bd8adf0397e848373f85a70/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d9bb52150db4eb282bd8adf0397e848373f85a70", "patch": "@@ -6400,111 +6400,105 @@ vget_low_u64 (uint64x2_t __a)\n   return (uint64x1_t) {__builtin_aarch64_get_lowv2di ((int64x2_t) __a)};\n }\n \n-#define __GET_HIGH(__TYPE)\t\t\t\t\t\\\n-  uint64x2_t tmp = vreinterpretq_u64_##__TYPE (__a);\t\t\\\n-  uint64x1_t hi = vcreate_u64 (vgetq_lane_u64 (tmp, 1));\t\\\n-  return vreinterpret_##__TYPE##_u64 (hi);\n-\n __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_f16 (float16x8_t __a)\n {\n-  __GET_HIGH (f16);\n+  return __builtin_aarch64_get_highv8hf (__a);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_f32 (float32x4_t __a)\n {\n-  __GET_HIGH (f32);\n+  return __builtin_aarch64_get_highv4sf (__a);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_f64 (float64x2_t __a)\n {\n-  __GET_HIGH (f64);\n+  return (float64x1_t) {__builtin_aarch64_get_highv2df (__a)};\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_p8 (poly8x16_t __a)\n {\n-  __GET_HIGH (p8);\n+  return (poly8x8_t) __builtin_aarch64_get_highv16qi ((int8x16_t) __a);\n }\n \n __extension__ extern __inline poly16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_p16 (poly16x8_t __a)\n {\n-  __GET_HIGH (p16);\n+  return (poly16x4_t) __builtin_aarch64_get_highv8hi ((int16x8_t) __a);\n }\n \n __extension__ extern __inline poly64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_p64 (poly64x2_t __a)\n {\n-  __GET_HIGH (p64);\n+  return (poly64x1_t) __builtin_aarch64_get_highv2di ((int64x2_t) __a);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_s8 (int8x16_t __a)\n {\n-  __GET_HIGH (s8);\n+  return  __builtin_aarch64_get_highv16qi (__a);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_s16 (int16x8_t __a)\n {\n-  __GET_HIGH (s16);\n+  return  __builtin_aarch64_get_highv8hi (__a);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_s32 (int32x4_t __a)\n {\n-  __GET_HIGH (s32);\n+  return  __builtin_aarch64_get_highv4si (__a);\n }\n \n __extension__ extern __inline int64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_s64 (int64x2_t __a)\n {\n-  __GET_HIGH (s64);\n+  return  (int64x1_t) {__builtin_aarch64_get_highv2di (__a)};\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_u8 (uint8x16_t __a)\n {\n-  __GET_HIGH (u8);\n+  return (uint8x8_t) __builtin_aarch64_get_highv16qi ((int8x16_t) __a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_u16 (uint16x8_t __a)\n {\n-  __GET_HIGH (u16);\n+  return (uint16x4_t) __builtin_aarch64_get_highv8hi ((int16x8_t) __a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_u32 (uint32x4_t __a)\n {\n-  __GET_HIGH (u32);\n+  return (uint32x2_t) __builtin_aarch64_get_highv4si ((int32x4_t) __a);\n }\n \n-#undef __GET_HIGH\n-\n __extension__ extern __inline uint64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_high_u64 (uint64x2_t __a)\n {\n-  return vcreate_u64 (vgetq_lane_u64 (__a, 1));\n+  return (uint64x1_t) {__builtin_aarch64_get_highv2di ((int64x2_t) __a)};\n }\n \n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_s8 (int8x8_t __a, int8x8_t __b)"}]}