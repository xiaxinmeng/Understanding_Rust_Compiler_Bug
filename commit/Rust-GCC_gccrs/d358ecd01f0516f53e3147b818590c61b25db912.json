{"sha": "d358ecd01f0516f53e3147b818590c61b25db912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM1OGVjZDAxZjA1MTZmNTNlMzE0N2I4MTg1OTBjNjFiMjVkYjkxMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-06T02:44:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-06T02:44:11Z"}, "message": "[multiple changes]\n\n\n2001-01-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tFix 27_io/filebuf_members.cc\n\t* src/localename.cc (locale::_Impl::_Impl(const _Impl& __imp,\n\tconst string& __name, category __cat, size_t __refs): Set\n\t_M_has_name with _M_name.\n\t* include/bits/localefwd.h (locale::operator!=): Protect member\n\tfunction call with this->.\n\t* src/locale.cc (locale::operator==): Make fast checks first.\n\t* include/bits/basic_ios.tcc (basic_ios::init): Simplify.\n\n\t* include/bits/ios_base.h (_M_synced_with_stdio): Add data member\n\tto ios_base::Init.\n\t* src/ios.cc (ios_base::Init::Init): Initialize here.\n\t(ios_base::sync_with_stdio): Set here.\n\n2001-01-04  Loren J. Rittle  <ljrittle@acm.org>\n\n        * config/c_io_stdio.cc (__basic_file<_CharT>::sys_open()): On\n        systems that support it, call dup() before fdopen().\n\nFrom-SVN: r38742", "tree": {"sha": "a2c974b2292e53afd0f3b038b13c56bc0ffa841f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2c974b2292e53afd0f3b038b13c56bc0ffa841f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d358ecd01f0516f53e3147b818590c61b25db912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d358ecd01f0516f53e3147b818590c61b25db912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d358ecd01f0516f53e3147b818590c61b25db912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d358ecd01f0516f53e3147b818590c61b25db912/comments", "author": null, "committer": null, "parents": [{"sha": "d492b0963ab57d52f0caa7b660b20d62b3f39b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d492b0963ab57d52f0caa7b660b20d62b3f39b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d492b0963ab57d52f0caa7b660b20d62b3f39b49"}], "stats": {"total": 182, "additions": 105, "deletions": 77}, "files": [{"sha": "f1a4dcd49862ce617225c3b3c905090bd5e1ee48", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -1,3 +1,24 @@\n+2001-01-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tFix 27_io/filebuf_members.cc\n+\t* src/localename.cc (locale::_Impl::_Impl(const _Impl& __imp,\n+\tconst string& __name, category __cat, size_t __refs): Set\n+\t_M_has_name with _M_name.\n+\t* include/bits/localefwd.h (locale::operator!=): Protect member\n+\tfunction call with this->.\n+\t* src/locale.cc (locale::operator==): Make fast checks first.\n+\t* include/bits/basic_ios.tcc (basic_ios::init): Simplify.\n+\n+\t* include/bits/ios_base.h (_M_synced_with_stdio): Add data member\n+\tto ios_base::Init.\n+\t* src/ios.cc (ios_base::Init::Init): Initialize here.\n+\t(ios_base::sync_with_stdio): Set here.\n+\t\n+2001-01-04  Loren J. Rittle  <ljrittle@acm.org>\n+\n+        * config/c_io_stdio.cc (__basic_file<_CharT>::sys_open()): On\n+        systems that support it, call dup() before fdopen().\n+\n 2001-01-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_std/bits/std_cwctype.h: Include std_cwchar.h for wint_t."}, {"sha": "c9ac7705c5562e81c0106261271d8154cea54715", "filename": "libstdc++-v3/config/c_io_stdio.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.cc?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,7 @@\n //\n \n #include <bits/basic_file.h>\n+#include <unistd.h>\n \n namespace std {\n \n@@ -94,14 +95,17 @@ namespace std {\n \n       _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n \n-      if (!this->is_open())\n+      int __dupfd = dup(__fd);\n+\n+      if (__dupfd != -1 && !this->is_open())\n \t{\n-\t  if ((_M_cfile = fdopen(__fd, __c_mode)))\n+\t  if ((_M_cfile = fdopen(__dupfd, __c_mode)))\n \t    {\n-\t      _M_fileno = __fd;\n+\t      _M_fileno = __dupfd;\n \t      __ret = this;\n \t    }\n \t}\n+\n       return __ret;\n     }\n   \n@@ -225,7 +229,10 @@ namespace std {\n   template<typename _CharT>\n     streamoff\n     __basic_file<_CharT>::sys_seek(streamoff __pos, ios_base::seekdir __way)\n-    { fseek(_M_cfile, __pos, __way); return ftell(_M_cfile); }\n+    { \n+      fseek(_M_cfile, __pos, __way); \n+      return ftell(_M_cfile); \n+    }\n   \n   // NB: Unused.\n   template<typename _CharT>"}, {"sha": "2b9d6f87aaa7fd804ea5fae35482ddc8a5c58498", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -119,17 +119,15 @@ namespace std {\n     {\n       // NB: This may be called more than once on the same object.\n       ios_base::_M_init();\n-      locale __loc = this->getloc();\n-      _M_ios_fctype = &use_facet<__ctype_type>(__loc);\n+      _M_ios_fctype = &use_facet<__ctype_type>(_M_ios_locale);\n       // Should be filled in by ostream and istream, respectively.\n-      _M_fnumput = &use_facet<__numput_type>(__loc); \n-      _M_fnumget = &use_facet<__numget_type>(__loc); \n+      _M_fnumput = &use_facet<__numput_type>(_M_ios_locale); \n+      _M_fnumget = &use_facet<__numget_type>(_M_ios_locale); \n       _M_tie = 0;\n       _M_fill = this->widen(' ');\n       _M_exception = goodbit;\n       _M_streambuf = __sb;\n-      iostate __state = __sb ? goodbit : badbit;\n-      _M_streambuf_state = __state;\n+      _M_streambuf_state = __sb ? goodbit : badbit;\n     }\n \n } // namespace std"}, {"sha": "c5de5b8185c97e9bb9e2ce3dd6bf3c58fedf79b0", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997-2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -138,7 +138,7 @@ namespace std {\n   class ios_base\n   {\n   public:\n-\n+    \n     // 27.4.2.1.1  Class ios_base::failure\n     class failure : public exception\n     {\n@@ -294,6 +294,7 @@ namespace std {\n       ~Init();\n     private:\n       static int \t_S_ios_base_init;\n+      bool\t\t_M_synced_with_stdio;\n       filebuf* \t\t_M_cout;\n       filebuf* \t\t_M_cin;\n       filebuf* \t\t_M_cerr;"}, {"sha": "cb86d9102fd1470fa4ec4b2817efad99ff8c4988", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -270,7 +270,7 @@ namespace std\n \n     inline bool  \n     operator!=(const locale& __other) const throw ()\n-    { return !(operator==(__other));  }\n+    { return !(this->operator==(__other));  }\n \n     template<typename _Char, typename _Traits, typename _Alloc>\n       bool  \n@@ -361,10 +361,9 @@ namespace std\n \t}\n     }\n \n-    _Impl(const _Impl&, size_t __refs);\n-    _Impl(const _Impl&, const string&, category, size_t __refs);\n-    _Impl(size_t __facets, size_t __refs, bool __has_name, \n-\t  string __name = \"*\");\n+    _Impl(const _Impl&, size_t);\n+    _Impl(const _Impl&, const string&, category, size_t);\n+    _Impl(size_t, size_t, bool __has_name = false, string __name = \"*\");\n    ~_Impl() throw();\n \n     void "}, {"sha": "bac371ab52c983f067557b90acbcb87aa01d8e5d", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,8 +35,8 @@\n #include <bits/std_iostream.h>\n #include <bits/std_fstream.h>\n \n-namespace std {\n-\n+namespace std \n+{\n   // Definitions for static const data members of __ios_flags.\n   const __ios_flags::__int_type __ios_flags::_S_boolalpha;\n   const __ios_flags::__int_type __ios_flags::_S_dec;\n@@ -159,6 +159,7 @@ namespace std {\n \t__wold = wclog.rdbuf(_M_wcerr);\n \t__wold->~wstreambuf();\n #endif\n+\t_M_synced_with_stdio = true;\n       }\n   }\n \n@@ -237,9 +238,9 @@ namespace std {\n   ios_base::_M_init()   \n   {\n     // NB: May be called more than once\n-    _M_flags = skipws | dec;\n-    _M_width = 0;\n     _M_precision = 6;\n+    _M_width = 0;\n+    _M_flags = skipws | dec;\n     _M_callbacks = 0;\n     _M_words = 0;\n     _M_word_limit = 0;\n@@ -313,9 +314,11 @@ namespace std {\n   { \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n-    bool __ret = __ioinit._M_cin->_M_file->get_fileno() == 0;\n+    bool __ret = __ioinit._M_synced_with_stdio;\n+#endif\n \n-    // Turn off sync with C FILE* for cin, cout, cerr, clog.\n+    // Turn off sync with C FILE* for cin, cout, cerr, clog iff\n+    // currently synchronized.\n     if (!__sync && __ret)\n       {\n \t// Need to dispose of the buffers created at initialization.\n@@ -349,10 +352,10 @@ namespace std {\n \twcerr.flags(ios_base::unitbuf);\n \twclog.rdbuf(__ioinit._M_wcerr);\n #endif\n+\t__ioinit._M_synced_with_stdio = false;\n       }\n     \n     return __ret; \n-#endif\n   }\n \n }  // namespace std"}, {"sha": "d9cc304c8d9ce369297b665a6e181951e8a4c9d5", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -623,8 +623,8 @@ namespace std\n   bool\n   locale::operator==(const locale& __rhs) const throw()\n   {\n-    return((this->name() != \"*\" && this->name() == __rhs.name())\n-\t   || _M_impl == __rhs._M_impl);\n+    return (_M_impl == __rhs._M_impl\n+\t    || (this->name() != \"*\" && this->name() == __rhs.name()));\n   }\n \n   const locale&"}, {"sha": "f028765a61eb97887576af2bb560eda6e71f7ac5", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d358ecd01f0516f53e3147b818590c61b25db912/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=d358ecd01f0516f53e3147b818590c61b25db912", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,20 +45,20 @@ namespace std {\n   }\n \n   locale::_Impl::\n-  _Impl(const _Impl& __other, size_t __refs)\n+  _Impl(const _Impl& __imp, size_t __refs)\n   : _M_references(__refs - 1), _M_facets(0), _M_category_names(0), \n-    _M_has_name(__other._M_has_name), _M_name(__other._M_name)\n+    _M_has_name(__imp._M_has_name), _M_name(__imp._M_name)\n   {\n     try\n-      {  _M_facets = new __vec_facet(*(__other._M_facets)); }\n+      {  _M_facets = new __vec_facet(*(__imp._M_facets)); }\n     catch(...) \n       {\n \tdelete _M_facets;\n \tthrow;\n       }\n \n     try \n-      {\t_M_category_names = new __vec_string(*(__other._M_category_names)); }\n+      {\t_M_category_names = new __vec_string(*(__imp._M_category_names)); }\n     catch(...) \n       {\n \tdelete _M_category_names;\n@@ -73,13 +73,12 @@ namespace std {\n   // This constructor is used to correctly initialize named locales,\n   // including the standard \"C\" locale.\n   locale::_Impl::\n-  _Impl(size_t __numfacets, size_t __refs, bool __has_name = false, \n-\tstring __name)\n+  _Impl(size_t __num, size_t __refs, bool __has_name, string __str)\n   : _M_references(__refs - 1), _M_facets(0), _M_category_names(0), \n-    _M_has_name(__has_name), _M_name(__name)\n+    _M_has_name(__has_name), _M_name(__str)\n   {\n     try\n-      {  _M_facets = new __vec_facet(__numfacets, NULL); }\n+      {  _M_facets = new __vec_facet(__num, NULL); }\n     catch(...) \n       {\n \tdelete _M_facets;\n@@ -97,22 +96,21 @@ namespace std {\n   \n   // Construct specific categories, leaving unselected ones alone\n   locale::_Impl::\n-  _Impl(const _Impl& __other, const string& __name, category __cat, \n-\tsize_t __refs)\n-    : _M_references(__refs - 1), _M_has_name(__other._M_name != \"*\")\n+  _Impl(const _Impl& __imp, const string& __str, category __cat, size_t __refs)\n+  : _M_references(__refs - 1)\n   {\n     __cat = _S_normalize_category(__cat);  // might throw\n \n     try \n-      { _M_facets = new __vec_facet(*(__other._M_facets)); }\n+      { _M_facets = new __vec_facet(*(__imp._M_facets)); }\n     catch(...) \n       {\n \tdelete _M_facets;\n \tthrow;\n       }\n \n     try \n-      {\t_M_category_names = new __vec_string(*(__other._M_category_names)); }\n+      {\t_M_category_names = new __vec_string(*(__imp._M_category_names)); }\n     catch(...) \n       {\n \tdelete _M_category_names;\n@@ -146,7 +144,7 @@ namespace std {\n \t    if (mask & __cat)\n \t      _M_replace_category(_S_classic, _S_facet_categories[ix]);\n \t    else\n-\t      (this->*ctors[ix])(__name.c_str());\n+\t      (this->*ctors[ix])(__str.c_str());\n \t  }\n       }\n     catch(...) \n@@ -159,43 +157,44 @@ namespace std {\n \n     // XXX May need to be adjusted\n     if (__cat == all)\n-      _M_name = __name;\n+      _M_name = __str;\n+    _M_has_name = __str != \"*\";\n   }\n   \n   void\n   locale::_Impl::\n-  _M_replace_categories(const _Impl* __other, category __cat)\n+  _M_replace_categories(const _Impl* __imp, category __cat)\n   {\n     category  __mask = locale::all & -static_cast<unsigned int>(locale::all);\n     for (unsigned int __ix = 0; (-__mask & __cat) != 0; ++__ix, (__mask <<= 1))\n       {\n \tif (__mask & __cat)\n \t  {\n-\t    _M_replace_category(__other, _S_facet_categories[__ix]);\n-\t    (*_M_category_names)[__ix] = (*(__other->_M_category_names))[__ix];\n+\t    _M_replace_category(__imp, _S_facet_categories[__ix]);\n+\t    (*_M_category_names)[__ix] = (*(__imp->_M_category_names))[__ix];\n \t  }\n       }\n   }\n \n   void\n   locale::_Impl::\n-  _M_replace_category(const _Impl* __other, const locale::id* const* __idpp)\n+  _M_replace_category(const _Impl* __imp, const locale::id* const* __idpp)\n   {\n     for (; *__idpp; ++__idpp)\n-      _M_replace_facet(__other, *__idpp);\n+      _M_replace_facet(__imp, *__idpp);\n   }\n   \n   void\n   locale::_Impl::\n-  _M_replace_facet(const _Impl* __other, const locale::id* __idp)\n+  _M_replace_facet(const _Impl* __imp, const locale::id* __idp)\n   {\n     size_t __index = __idp->_M_index;\n     if (__index == 0 \n-\t|| __other->_M_facets->size() <= __index \n-\t|| (*(__other->_M_facets))[__index] == 0)\n+\t|| __imp->_M_facets->size() <= __index \n+\t|| (*(__imp->_M_facets))[__index] == 0)\n       throw runtime_error(\"no locale facet\");\n \t\n-    _M_install_facet(__idp, (*(__other->_M_facets))[__index]); \n+    _M_install_facet(__idp, (*(__imp->_M_facets))[__index]); \n   }\n \n   void\n@@ -220,70 +219,70 @@ namespace std {\n   }\n  \n   void \n-  locale::_Impl::_M_construct_collate(const char* __name)\n+  locale::_Impl::_M_construct_collate(const char* __s)\n   {\n-    _M_facet_init(new collate_byname<char>(__name, 0));\n+    _M_facet_init(new collate_byname<char>(__s, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new collate_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new collate_byname<wchar_t>(__s, 0));\n #endif \n   }\n \n   void \n-  locale::_Impl::_M_construct_ctype(const char* __name)\n+  locale::_Impl::_M_construct_ctype(const char* __s)\n   {\n-    _M_facet_init(new ctype_byname<char>(__name, 0));\n-    _M_facet_init(new codecvt_byname<char, char, mbstate_t>(__name));\n+    _M_facet_init(new ctype_byname<char>(__s, 0));\n+    _M_facet_init(new codecvt_byname<char, char, mbstate_t>(__s));\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new ctype_byname<wchar_t>(__name, 0));\n-    _M_facet_init(new codecvt_byname<wchar_t, char, mbstate_t>(__name));\n+    _M_facet_init(new ctype_byname<wchar_t>(__s, 0));\n+    _M_facet_init(new codecvt_byname<wchar_t, char, mbstate_t>(__s));\n #endif \n   }\n     \n   void \n-  locale::_Impl::_M_construct_monetary(const char* __name)\n+  locale::_Impl::_M_construct_monetary(const char* __s)\n   {\n     _M_replace_facet(locale::_S_classic, &money_get<char>::id);\n     _M_replace_facet(locale::_S_classic, &money_put<char>::id);\n-    _M_facet_init(new moneypunct_byname<char, false>(__name, 0));\n-    _M_facet_init(new moneypunct_byname<char, true >(__name, 0));\n+    _M_facet_init(new moneypunct_byname<char, false>(__s, 0));\n+    _M_facet_init(new moneypunct_byname<char, true >(__s, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &money_get<wchar_t>::id);\n     _M_replace_facet(locale::_S_classic, &money_put<wchar_t>::id);\n-    _M_facet_init(new moneypunct_byname<wchar_t, false>(__name, 0));\n-    _M_facet_init(new moneypunct_byname<wchar_t, true >(__name, 0));\n+    _M_facet_init(new moneypunct_byname<wchar_t, false>(__s, 0));\n+    _M_facet_init(new moneypunct_byname<wchar_t, true >(__s, 0));\n #endif\n   }\n     \n   void \n-  locale::_Impl::_M_construct_numeric(const char* __name)\n+  locale::_Impl::_M_construct_numeric(const char* __s)\n   {\n     _M_replace_facet(locale::_S_classic, &num_get<char>::id);\n     _M_replace_facet(locale::_S_classic, &num_put<char>::id);\n-    _M_facet_init(new numpunct_byname<char>(__name, 0));\n+    _M_facet_init(new numpunct_byname<char>(__s, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n     _M_replace_facet(locale::_S_classic, &num_get<wchar_t>::id);\n     _M_replace_facet(locale::_S_classic, &num_put<wchar_t>::id);\n-    _M_facet_init(new numpunct_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new numpunct_byname<wchar_t>(__s, 0));\n #endif \n   }\n     \n   void \n-  locale::_Impl::_M_construct_time(const char* __name)\n+  locale::_Impl::_M_construct_time(const char* __s)\n   {\n-    _M_facet_init(new time_get_byname<char>(__name, 0));\n-    _M_facet_init(new time_put_byname<char>(__name, 0));\n+    _M_facet_init(new time_get_byname<char>(__s, 0));\n+    _M_facet_init(new time_put_byname<char>(__s, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new time_get_byname<wchar_t>(__name, 0));\n-    _M_facet_init(new time_put_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new time_get_byname<wchar_t>(__s, 0));\n+    _M_facet_init(new time_put_byname<wchar_t>(__s, 0));\n #endif \n   }\n     \n   void \n-  locale::_Impl::_M_construct_messages(const char* __name)\n+  locale::_Impl::_M_construct_messages(const char* __s)\n   {\n-    _M_facet_init(new messages_byname<char>(__name, 0));\n+    _M_facet_init(new messages_byname<char>(__s, 0));\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    _M_facet_init(new messages_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new messages_byname<wchar_t>(__s, 0));\n #endif \n   }\n }"}]}