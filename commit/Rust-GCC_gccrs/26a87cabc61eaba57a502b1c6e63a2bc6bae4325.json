{"sha": "26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhODdjYWJjNjFlYWJhNTdhNTAyYjFjNmU2M2EyYmM2YmFlNDMyNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-11-07T16:08:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-11-07T16:08:57Z"}, "message": "builtins.c (expand_builtin_strpbrk): New function.\n\n\t* builtins.c (expand_builtin_strpbrk): New function.\n\t(expand_builtin): Handle BUILT_IN_STRPBRK.\n\n\t* builtins.def (BUILT_IN_STRPBRK): New entry.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n\tstrpbrk.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-2.c: New test.\n\nFrom-SVN: r37291", "tree": {"sha": "e972720ba7132b95f7ec0a0b456b6daf624432c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e972720ba7132b95f7ec0a0b456b6daf624432c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/comments", "author": null, "committer": null, "parents": [{"sha": "4fa5bf370e0680ef750c75e91a525ef40cd7571f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa5bf370e0680ef750c75e91a525ef40cd7571f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa5bf370e0680ef750c75e91a525ef40cd7571f"}], "stats": {"total": 173, "additions": 171, "deletions": 2}, "files": [{"sha": "a142fab00821f91979ca471382db0462f748cb76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -1,3 +1,13 @@\n+2000-11-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strpbrk): New function.\n+\t(expand_builtin): Handle BUILT_IN_STRPBRK.\n+\n+\t* builtins.def (BUILT_IN_STRPBRK): New entry.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n+\tstrpbrk.\n+\n 2000-11-07  David O'Brien  <obrien@dragon.nuxi.com>\n \n \t* config/alpha/freebsd.h: New file -- FreeBSD/alpha architecture file."}, {"sha": "0021f76075792fa102b8a769a36cb8de9873190b", "filename": "gcc/builtins.c", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -109,6 +109,8 @@ static rtx expand_builtin_bzero\t\tPARAMS ((tree));\n static rtx expand_builtin_strlen\tPARAMS ((tree, rtx));\n static rtx expand_builtin_strstr\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strpbrk\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n@@ -1459,6 +1461,100 @@ expand_builtin_strstr (arglist, target, mode)\n     }\n }\n \n+/* Expand a call to the strpbrk builtin.  Return 0 if we failed the\n+   caller should emit a normal call, otherwise try to get the result\n+   in TARGET, if convenient (and in mode MODE if that's convenient).  */\n+\n+static rtx\n+expand_builtin_strpbrk (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  if (arglist == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE)\n+    return 0;\n+  else\n+    {\n+      tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n+      tree len1 = c_strlen (s1), len2 = c_strlen (s2);\n+      tree stripped_s1 = s1, stripped_s2 = s2;\n+\n+      STRIP_NOPS (stripped_s1);\n+      if (stripped_s1 && TREE_CODE (stripped_s1) == ADDR_EXPR)\n+\tstripped_s1 = TREE_OPERAND (stripped_s1, 0);\n+      STRIP_NOPS (stripped_s2);\n+      if (stripped_s2 && TREE_CODE (stripped_s2) == ADDR_EXPR)\n+\tstripped_s2 = TREE_OPERAND (stripped_s2, 0);\n+\n+      /* If both arguments are constants, calculate the result now.  */\n+      if (len1 && len2\n+\t  && TREE_CODE (stripped_s1) == STRING_CST\n+\t  && TREE_CODE (stripped_s2) == STRING_CST)\n+        {\n+\t  const char *const result =\n+\t    strpbrk (TREE_STRING_POINTER (stripped_s1),\n+\t\t     TREE_STRING_POINTER (stripped_s2));\n+\n+\t  if (result)\n+\t    {\n+\t      long offset = result - TREE_STRING_POINTER (stripped_s1);\n+\n+\t      /* Return an offset into the constant string argument.  */\n+\t      return expand_expr (fold (build (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t\t\t       s1, ssize_int (offset))),\n+\t\t\t\t  target, mode, EXPAND_NORMAL);\n+\t    }\n+\t  else\n+\t    return const0_rtx;\n+\t}\n+\n+      /* We must have been able to figure out the second argument's\n+         length to do anything else.  */\n+      if (!len2)\n+\treturn 0;\n+\n+      /* OK, handle some cases.  */\n+      switch (compare_tree_int (len2, 1))\n+        {\n+\tcase -1: /* length is 0, return NULL.  */\n+\t  {\n+\t    /* Evaluate and ignore the arguments in case they had\n+\t       side-effects.  */\n+\t    expand_expr (s1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t    expand_expr (s2, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t    return const0_rtx;\n+\t  }\n+\tcase 0: /* length is 1, return strchr(s1, s2[0]).  */\n+\t  {\n+\t    tree call_expr, fn = built_in_decls[BUILT_IN_STRCHR];\n+\n+\t    if (!fn)\n+\t      return 0;\n+\n+\t    /* New argument list transforming strpbrk(s1, s2) to\n+\t       strchr(s1, s2[0]).  */\n+\t    arglist =\n+\t      build_tree_list (NULL_TREE, build_int_2\n+\t\t\t       (TREE_STRING_POINTER (stripped_s2)[0], 0));\n+\t    arglist = tree_cons (NULL_TREE, s1, arglist);\n+\t    call_expr = build1 (ADDR_EXPR,\n+\t\t\t\tbuild_pointer_type (TREE_TYPE (fn)), fn);\n+\t    call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t       call_expr, arglist, NULL_TREE);\n+\t    TREE_SIDE_EFFECTS (call_expr) = 1;\n+\t    return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t  }\n+\tcase 1: /* length is greater than 1, really call strpbrk.  */\n+\t  return 0;\n+\tdefault:\n+\t  abort();\n+\t}\n+    }\n+}\n+\n /* Expand a call to the memcpy builtin, with arguments in ARGLIST.  */\n static rtx\n expand_builtin_memcpy (arglist)\n@@ -2503,7 +2599,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n-\t  || fcode == BUILT_IN_STRSTR\n+\t  || fcode == BUILT_IN_STRSTR || fcode == BUILT_IN_STRPBRK\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n \t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n \t  || fcode == BUILT_IN_PRINTF || fcode == BUILT_IN_FPUTC\n@@ -2638,6 +2734,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_STRPBRK:\n+      target = expand_builtin_strpbrk (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n     case BUILT_IN_MEMCPY:\n       target = expand_builtin_memcpy (arglist);\n       if (target)"}, {"sha": "261c76a663cfa78f933c6cf03b2f037de8be2329", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -40,6 +40,7 @@ DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)\n DEF_BUILTIN(BUILT_IN_STRSTR)\n+DEF_BUILTIN(BUILT_IN_STRPBRK)\n DEF_BUILTIN(BUILT_IN_STRCHR)\n DEF_BUILTIN(BUILT_IN_FSQRT)\n DEF_BUILTIN(BUILT_IN_SIN)"}, {"sha": "ac0a10107074eb2b82df174005db78921aaf97a2", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -4935,7 +4935,7 @@ c_common_nodes_and_builtins ()\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n-  /* Prototype for strstr, etc.  */\n+  /* Prototype for strstr, strpbrk, etc.  */\n   string_ftype_string_string\n     = build_function_type (string_type_node,\n \t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n@@ -5174,6 +5174,8 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n   builtin_function (\"__builtin_strstr\", string_ftype_string_string,\n \t\t    BUILT_IN_STRSTR, BUILT_IN_NORMAL, \"strstr\");\n+  builtin_function (\"__builtin_strpbrk\", string_ftype_string_string,\n+\t\t    BUILT_IN_STRPBRK, BUILT_IN_NORMAL, \"strpbrk\");\n   built_in_decls[BUILT_IN_STRCHR] =\n     builtin_function (\"__builtin_strchr\", string_ftype_string_int,\n \t\t    BUILT_IN_STRCHR, BUILT_IN_NORMAL, \"strchr\");\n@@ -5247,6 +5249,8 @@ c_common_nodes_and_builtins ()\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strstr\", string_ftype_string_string, BUILT_IN_STRSTR,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strpbrk\", string_ftype_string_string, BUILT_IN_STRPBRK,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN,"}, {"sha": "33091b9c94503c22d203932082f5e8ca05a63c12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -1,3 +1,7 @@\n+2000-11-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/string-opt-2.c: New test.\n+\n 2000-11-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/crash60.C: New test."}, {"sha": "87144ded67cbc6a224f53f2d0080507dafb3b6d7", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a87cabc61eaba57a502b1c6e63a2bc6bae4325/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-2.c?ref=26a87cabc61eaba57a502b1c6e63a2bc6bae4325", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strpbrk occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/6/2000.  */\n+\n+extern void abort(void);\n+extern char *strpbrk (const char *, const char *);\n+\n+void fn (const char *foo, const char *const *bar)\n+{\n+  if (strcmp(strpbrk (\"hello world\", \"lrooo\"), \"llo world\") != 0)\n+    abort();\n+  if (strpbrk (foo, \"\") != 0)\n+    abort();\n+  if (strpbrk (foo + 4, \"\") != 0)\n+    abort();\n+  if (strpbrk (*bar--, \"\") != 0)\n+    abort();\n+  if (strpbrk (*bar, \"h\") != foo)\n+    abort();\n+  if (strpbrk (foo, \"h\") != foo)\n+    abort();\n+  if (strpbrk (foo, \"w\") != foo + 6)\n+    abort();\n+  if (strpbrk (foo + 6, \"o\") != foo + 7)\n+    abort();\n+}\n+\n+int main()\n+{\n+  const char *const foo[] = { \"hello world\", \"bye bye world\" };\n+  fn (foo[0], foo + 1);\n+  return 0;\n+}\n+\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+char *\n+strpbrk(const char *s1, const char *s2)\n+{\n+  abort();\n+}\n+#endif"}]}