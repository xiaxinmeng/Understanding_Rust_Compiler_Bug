{"sha": "09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhNzgyZWJkYWNjNmE1MjI3ZWQ0NjRkNDdlYjNjYzI3ZTI1MmM2YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-29T11:57:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-29T11:57:15Z"}, "message": "re PR tree-optimization/40579 (gcc -O2 optimization causes infinite loop and wrong output)\n\n2009-06-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40579\n\t* tree-vrp.c (vrp_evaluate_conditional): Bail out early if\n\tthe IL to simplify has constants that overflowed.\n\n\t* gcc.c-torture/execute/pr40579.c: New testcase.\n\nFrom-SVN: r149046", "tree": {"sha": "50e923e8964fbc46128696b82c92d91fa0a41a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50e923e8964fbc46128696b82c92d91fa0a41a33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "152413f7edcf11d34026246569f5145d414f1653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152413f7edcf11d34026246569f5145d414f1653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152413f7edcf11d34026246569f5145d414f1653"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "13aeba0f381cf1ad06cc8317628faeebd6b43386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "patch": "@@ -1,3 +1,9 @@\n+2009-06-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40579\n+\t* tree-vrp.c (vrp_evaluate_conditional): Bail out early if\n+\tthe IL to simplify has constants that overflowed.\n+\n 2009-06-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/40550"}, {"sha": "b819b37228f4d64c857c56e5e6d58e6fb145905b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "patch": "@@ -1,3 +1,8 @@\n+2009-06-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40579\n+\t* gcc.c-torture/execute/pr40579.c: New testcase.\n+\n 2009-06-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/40550"}, {"sha": "7f44af310e7b9b9179eb0144306d25326cb90a4d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr40579.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40579.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40579.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40579.c?ref=09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+static char * __attribute__((noinline))\n+itos(int num)\n+{\n+  return (char *)0;\n+}\n+static void __attribute__((noinline))\n+foo(int i, const char *x)\n+{\n+  if (i >= 4)\n+    abort ();\n+}\n+int main()\n+{\n+  int x = -__INT_MAX__ + 3;\n+  int i;\n+\n+  for (i = 0; i < 4; ++i)\n+    {\n+      char *p;\n+      --x;\n+      p = itos(x);\n+      foo(i, p);\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "13ed4c005b58c3793a630234d0d72c1ddf768f8b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a782ebdacc6a5227ed464d47eb3cc27e252c6a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=09a782ebdacc6a5227ed464d47eb3cc27e252c6a", "patch": "@@ -5679,6 +5679,14 @@ vrp_evaluate_conditional (enum tree_code code, tree op0, tree op1, gimple stmt)\n   tree ret;\n   bool only_ranges;\n \n+  /* Some passes and foldings leak constants with overflow flag set\n+     into the IL.  Avoid doing wrong things with these and bail out.  */\n+  if ((TREE_CODE (op0) == INTEGER_CST\n+       && TREE_OVERFLOW (op0))\n+      || (TREE_CODE (op1) == INTEGER_CST\n+\t  && TREE_OVERFLOW (op1)))\n+    return NULL_TREE;\n+\n   sop = false;\n   ret = vrp_evaluate_conditional_warnv_with_ops (code, op0, op1, true, &sop,\n   \t\t\t\t\t\t &only_ranges);"}]}