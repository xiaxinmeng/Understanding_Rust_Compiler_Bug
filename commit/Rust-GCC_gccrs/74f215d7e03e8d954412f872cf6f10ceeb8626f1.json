{"sha": "74f215d7e03e8d954412f872cf6f10ceeb8626f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmMjE1ZDdlMDNlOGQ5NTQ0MTJmODcyY2Y2ZjEwY2VlYjg2MjZmMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-10-28T18:01:40Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-10-28T18:01:40Z"}, "message": "19960224-2.c, [...]: Update tests for new diagnostic messages.\n\n\t* gcc.dg/cpp/19960224-2.c, 20000625-2.c, cxxcom2.c, directiv.c,\n\tendif.c, if-4.c, if-5.c, if-mop.c, macsyntx.c, paste2.c, paste6.c,\n\tpaste8.c, redef2.c, strify2.c, strp1.c, tr-warn1.c, tr-warn3.c,\n\ttr-warn6.c, undef1.c, undef2.c, widestr1.c: Update tests for\n\tnew diagnostic messages.\n\n\t* gcc.dg/cpp/macro3.c: New tests.\n\nFrom-SVN: r37099", "tree": {"sha": "8d48c96b0a801722146a2653cfbd2d9cf446bad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d48c96b0a801722146a2653cfbd2d9cf446bad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74f215d7e03e8d954412f872cf6f10ceeb8626f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f215d7e03e8d954412f872cf6f10ceeb8626f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f215d7e03e8d954412f872cf6f10ceeb8626f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f215d7e03e8d954412f872cf6f10ceeb8626f1/comments", "author": null, "committer": null, "parents": [{"sha": "93c80368d9a16c073f2b930bef4232661971765f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c80368d9a16c073f2b930bef4232661971765f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c80368d9a16c073f2b930bef4232661971765f"}], "stats": {"total": 157, "additions": 104, "deletions": 53}, "files": [{"sha": "799382c8f06c8e36128adee3b5a24d8062b6ed22", "filename": "gcc/testsuite/gcc.dg/cpp/19960224-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19960224-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19960224-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F19960224-2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -2,5 +2,5 @@\n \n #if 0\n #if 0\n-#endif /\t/* { dg-error \"text after #endif\" \"text after #endif\" } */\n+#endif /\t/* { dg-warning \"extra tokens\" \"extra tokens after #endif\" } */\n #endif"}, {"sha": "fb458984b8c0ce03233eba86ce82fd12ca7f95b2", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -1,18 +1,18 @@\n /* More paste corner cases from glibc.  */\n /* { dg-do run } */\n \n+#include <stdlib.h>\n+#include <string.h>\n+\n #define symbol_version(name, version) name##@##version\n #define str(x) xstr(x)\n #define xstr(x) #x\n \n const char a[] = str(symbol_version(getrlimit, GLIBC_2.0));\n-/* { dg-warning \"valid preprocessing token\" \"\" { target *-*-* } 8 } */\n+/* { dg-warning \"valid preprocessing token\" \"\" { target *-*-* } 11 } */\n const char b[] = str(getrlimit@GLIBC_2.0);\n const char c[] = \"getrlimit@GLIBC_2.0\";\n \n-#include <stdlib.h>\n-#include <string.h>\n-\n int\n main(void)\n {"}, {"sha": "f0fb2d0114512bcf3443d158583dfcf6670adde6", "filename": "gcc/testsuite/gcc.dg/cpp/cxxcom2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcxxcom2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-pedantic -std=c89\" } */\n \n /* This is an extension and therefore gets a warning.  */\n-#line 5 \"cxx-comments-2.c\" 3  /* { dg-warning \"garbage at end\" \"#line extension\" } */\n+#line 5 \"cxx-comments-2.c\" 3  /* { dg-warning \"extra tokens\" \"#line extension\" } */\n \n /* A system header may contain C++ comments irrespective of mode.  */\n // C++ comment is not in C89  { dg-bogus \"style comment\" \"bad warning\" }"}, {"sha": "2cb772d123300e156c1f3d7248b0bf7bedbc4fcd", "filename": "gcc/testsuite/gcc.dg/cpp/directiv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -28,8 +28,8 @@ EMPTY #define bar\n /* Check that directives always start a line, even if in middle of\n    macro expansion.  */\n #define func(x) x\n-func (2\t\t\t\t/* { dg-error \"unterminated argument\" }  */\n-#define foobar\t\t\t/* { dg-error \"may not be used inside\" } */\n+func (2\t\t/* { dg-error \"unterminated\" \"\" { target *-*-* } 32 } */\n+#define foobar\t/* { dg-error \"directives may not\" } */\n \n /* For tidiness, I think the directive should still be processed\n    above.  Certainly, continuing to try to find the closing ')' can"}, {"sha": "e6fd4b9f1025800e0f3ebf673ed7cb64ccd9401d", "filename": "gcc/testsuite/gcc.dg/cpp/endif.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fendif.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -4,12 +4,12 @@\n /* You can't get away with this in your own code... */\n #ifdef KERNEL\n #define foo\n-#endif KERNEL  /* { dg-warning \"forbids text after\" \"good warning\" } */\n+#endif KERNEL  /* { dg-warning \"extra tokens\" \"good warning\" } */\n \n /* This will provoke a warning because the '3' is an extension.  */\n-#line 10 \"endif-label.c\" 3 /* { dg-warning \"garbage at end\" \"#line extension\" } */\n+#line 10 \"endif-label.c\" 3 /* { dg-warning \"extra tokens\" \"#line extension\" } */\n \n /* ... but in a system header, it's acceptable.  */\n #ifdef KERNEL\n #define foo\n-#endif KERNEL  /* { dg-bogus \"forbids text after\" \"bad warning\" } */\n+#endif KERNEL  /* { dg-bogus \"extra tokens\" \"bad warning\" } */"}, {"sha": "fbab9efc13bdac142f6997a2119a15f1e1196fd5", "filename": "gcc/testsuite/gcc.dg/cpp/if-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-4.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -2,7 +2,7 @@\n    NUL terminated, so we would print garbage after it.  */\n /* { dg-do compile } */\n \n-#if 1 += 2   /* { dg-error \"'\\\\+=' is not valid\" \"+= in if\" } */\n+#if 1 += 2   /* { dg-error \"is not valid\" \"+= in if\" } */\n syntax_error\n #endif\n int foo;"}, {"sha": "8238a12ae4bb4f599ddf0c4d50f784ee2957297f", "filename": "gcc/testsuite/gcc.dg/cpp/if-5.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-5.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -2,11 +2,8 @@\n    Jakub Jelinek <jakub@redhat.com>.  */\n /* { dg-do preprocess } */\n \n-#ifdef 0  /* { dg-error \"with invalid argument\" } */\n-#error not seen\n+#ifdef 0  /* { dg-error \"macro names\" } */\n #endif\n \n-#ifndef 0  /* { dg-error \"with invalid argument\" } */\n-#else\n-#error not seen\n+#ifndef 0  /* { dg-error \"macro names\" } */\n #endif"}, {"sha": "a6a36f150889a04a5d1b74c2b31d14954d55e92b", "filename": "gcc/testsuite/gcc.dg/cpp/if-mop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fif-mop.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -2,6 +2,8 @@\n \n /* { dg-do preprocess } */\n \n+/* Source: Neil Booth.  */\n+\n /* Various illegal expressions with missing components.  */\n \n #if\t\t/* { dg-error \"no expression\" \"empty #if\" } */"}, {"sha": "b7adaea6c68cbb32b44e363ed34acaa84ba9042b", "filename": "gcc/testsuite/gcc.dg/cpp/macro3.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro3.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+/* First two tests sourced from a bug report of Thomas Pornin.\n+   Varargs test source Jamie Lokier.\n+   All adapted for the testsuite by Neil Booth, Oct 2000.  */\n+\n+int c(int x)\n+{\n+  return x;\n+}\n+\n+int a(int x)\n+{\n+  return x;\n+}\n+\n+/* Tests various macro abuse is correctly expanded.  */\n+#define c(x) d\n+#define d(x) c(2)\n+\n+/* Every GCC <= 2.96 appears to fail this.  */\n+#define a(x) b(\n+#define b(x) a(\n+\n+#define apply(...)   apply2 (__VA_ARGS__)  \n+#define half(x)      ((x) / 2)\n+#define apply2(f,x)  f (x)\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main()\n+{\n+  /* Expands to c(2).  */\n+  if (c(c)(c) != 2)\n+    abort ();\n+\n+  /* Expands to a(2).  */\n+  if (a(a)x)2) != 2)\n+    abort ();\n+\n+  if (apply (half, 200) != 100)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "e7f3528b49f49c81174285b39f6aaebc40b86939", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -28,13 +28,14 @@\n #define foo(, X)\t\t/* { dg-error \"parameter name\" } */\n #define foo(X, X)\t\t/* { dg-error \"duplicate\" } */\n #define foo(X Y)\t\t/* { dg-error \"comma\" } */\n-#define foo(()\t\t\t/* { dg-error \"token may not appear\" } */\n+#define foo(()\t\t\t/* { dg-error \"may not appear\" } */\n #define foo(..., X)\t\t/* { dg-error \"missing\" } */\n #define foo \\\n __VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */\n-#define foo(__VA_ARGS__)\t/* { dg-warning \"__VA_ARGS__\" } */\n-#define foo(...) __VA_ARGS__\t/* OK.  */\n+#define goo(__VA_ARGS__)\t/* { dg-warning \"__VA_ARGS__\" } */\n+#define hoo(...) __VA_ARGS__\t/* OK.  */\n #define __VA_ARGS__\t\t/* { dg-warning \"__VA_ARGS__\" } */\n+__VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */\n \n /* test # of supplied arguments.  */\n #define none()\n@@ -43,12 +44,12 @@ __VA_ARGS__\t\t\t/* { dg-warning \"__VA_ARGS__\" } */\n #define var0(...)\n #define var1(x, ...)\n none()\t\t\t\t/* OK.  */\n-none(ichi)\t\t\t/* { dg-error \"too many\" } */\n+none(ichi)\t\t\t/* { dg-error \"passed 1\" } */\n one()\t\t\t\t/* OK.  */\n one(ichi)\t\t\t/* OK.  */\n one(ichi\\\n-, ni)\t\t\t\t/* { dg-error \"too many\" } */\n-two(ichi)\t\t\t/* { dg-error \"not enough\" } */\n+, ni)\t\t\t\t/* { dg-error \"passed 2\" } */\n+two(ichi)\t\t\t/* { dg-error \"requires 2\" } */\n var0()\t\t\t\t/* OK.  */\n var0(ichi)\t\t\t/* OK.  */\n var1()\t\t\t\t/* { dg-warning \"rest arguments to be used\" } */"}, {"sha": "97218565f5b01ff8862b0ea7ab0e44f9023e24a5", "filename": "gcc/testsuite/gcc.dg/cpp/paste2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -56,8 +56,8 @@ int main ()\n     err (\"Operator >> pasting\");\n \n   /* The LHS should not attempt to expand twice, and thus becomes a\n-     call to the function glue, but the RHS should fully expand.  */\n-  if (glue (gl, ue) (12) != glue (xgl, ue) (1, 2))\n+     call to the function glue.  */\n+  if (glue (gl, ue) (12) != 12)\n     err (\"Recursive macros\");\n \n   /* Test placemarker pasting.  The glued lines should all appear\n@@ -106,6 +106,8 @@ int main ()\n       err (\"Various operator pasting\");\n     if (strcmp (hh, \"%:%:\"))\n       err (\"Pasted digraph spelling\");\n+    /* glue3 here will only work if we paste left-to-right.  If a\n+       future implementation does not do this, change the test.  */\n     if ((glue (., 0) glue (=, =) .0) + (glue3 (1.0e, +, 1) == 10.0) != 2)\n       err (\"Pasted numbers\");\n   }"}, {"sha": "6b6733c4e9d8edb2d97d43d7ae355543540cda82", "filename": "gcc/testsuite/gcc.dg/cpp/paste6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -7,6 +7,6 @@\n extern int foo(int x);\n \n #define bar(x) foo(x)\n-#define baz(x) bar(##x)  /* { dg-warning \"nothing can be pasted\" } */\n+#define baz(x) bar(##x)\n \n-int quux(int y) { return baz(y); }\n+int quux(int y) { return baz(y); }  /* { dg-warning \"valid preprocessing\" } */"}, {"sha": "dd098947919cee5c630f413b7eeae1260f55759f", "filename": "gcc/testsuite/gcc.dg/cpp/paste8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste8.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -7,9 +7,9 @@ int foo(int, ...);\n a(1)\n a(1, 2, 3)\n #define b(x, y, z...) foo(x, ##y)\n-b(1, 2, 3)\t\t\t\t/* { dg-warning \"pasting would not\" } */\n+b(1, 2, 3)\t\t\t/* { dg-warning \"valid preprocessing token\" } */\n #define c(x, y, z...) foo(x, ##z)\n c(1, 2)\n c(1, 2, 3)\n-#define d(x) foo(##x)\t\t\t/* { dg-warning \"nothing can be pasted\" } */\n-d(1)\n+#define d(x) fo(##x)\n+d(1)\t\t\t\t/* { dg-warning \"valid preprocessing token\" } */"}, {"sha": "5838c47506e4861a0ebdf37ce14ed80f7ff7416e", "filename": "gcc/testsuite/gcc.dg/cpp/redef2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -26,5 +26,5 @@\n    { dg-warning \"previous\"  \"prev def ro\"   { target *-*-* } 11 }\n    { dg-warning \"previous\"  \"prev def va\"   { target *-*-* } 14 }\n \n-   { dg-warning \"varargs\"   \"named varargs\" { target *-*-* } 14 }\n-   { dg-warning \"varargs\"   \"anon varargs\"  { target *-*-* } 15 } */ \n+   { dg-warning \"named variable\"   \"named\"  { target *-*-* } 14 }\n+   { dg-warning \"anonymous variable\" \"anon\" { target *-*-* } 15 } */ "}, {"sha": "6a1a5ebc839b5160b4023d39ff55ef151c3770c9", "filename": "gcc/testsuite/gcc.dg/cpp/strp1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrp1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrp1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fstrp1.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -16,7 +16,7 @@ static const char t1[] = \"1.1\";\n #define f h\n #define h(a) a+f\n static const char s2[] = S( f(1)(2) );\n-static const char t2[] = \"1+h(2)\";\n+static const char t2[] = \"1+f(2)\";\n \n #undef I\n #undef f"}, {"sha": "2a818309c63020e6308c4111f4b7073af7bdd7c6", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -24,7 +24,7 @@\n  #assert baz(quux)\t/* { dg-bogus \"indented\" \"^ #ext\"     } */\n  # assert quux(weeble)\t/* { dg-bogus \"indented\" \"^ # ext\"    } */\n \n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 22 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 23 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 24 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 25 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 22 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 23 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 24 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 25 } */"}, {"sha": "e802b4dd0f754b12636674dff488d48e398aee60", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -55,7 +55,7 @@\n \n #endif\n \n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 27 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 28 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 29 } */\n-/* { dg-warning \"ISO C does not\" \"extension warning\" { target *-*-* } 30 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 27 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 28 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 29 } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 30 } */"}, {"sha": "586c56c1044f0cbf731b94df2447c67f5ed1c642", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -4,16 +4,16 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-Wtraditional -fno-show-column\" } */\n \n-#define foo1(h) sdf \"h3\" fds \"h\" /* { dg-warning \"macro arg \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo2(h2) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro arg \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo3(h3) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro arg \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo4(h) sdf 'h3' fds 'h' /* { dg-warning \"macro arg \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo5(h2) sdf 'h2' fds 'h3' /* { dg-warning \"macro arg \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo6(h3) sdf 'h2' fds 'h3' /* { dg-warning \"macro arg \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n-#define foo7(AA, hello, world, EEE) sdf \"A B hello C,world,DhelloE F\" fds EEE /* { dg-warning \"macro arg \\\"hello\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo1(h) sdf \"h3\" fds \"h\" /* { dg-warning \"macro argument \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo2(h2) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro argument \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo3(h3) sdf \"h2\" fds \"h3\" /* { dg-warning \"macro argument \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo4(h) sdf 'h3' fds 'h' /* { dg-warning \"macro argument \\\"h\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo5(h2) sdf 'h2' fds 'h3' /* { dg-warning \"macro argument \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo6(h3) sdf 'h2' fds 'h3' /* { dg-warning \"macro argument \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n+#define foo7(AA, hello, world, EEE) sdf \"A B hello C,world,DhelloE F\" fds EEE /* { dg-warning \"macro argument \\\"hello\\\" would be stringified\" \"traditional stringification\" } */\n \n /* Catch the second warning from the above line.  */\n-/* { dg-warning \"macro arg \\\"world\\\" would be stringified\" \"traditional stringification\" { target *-*-* } 13 } */\n+/* { dg-warning \"macro argument \\\"world\\\" would be stringified\" \"traditional stringification\" { target *-*-* } 13 } */\n \n #line 19 \"sys-header.h\" 3\n /* We are in system headers now, no -Wtraditional warnings should issue.  */"}, {"sha": "821d65453119e67e3a7e2c67216566fe2ab8ed20", "filename": "gcc/testsuite/gcc.dg/cpp/undef1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -9,6 +9,6 @@\n \n #define foo(bar) bar\n \n-foo( blah\t\t\t/* { dg-error \"unterminated argument\" }  */\n+foo( blah\t/* { dg-error \"unterminated\" \"\" { target *-*-* } 13 } */\n #undef foo\t/* { dg-error \"may not be used inside\" \"foo(#undef foo)\" } */\n      blah )"}, {"sha": "4e6a690dcc9c63562d8d66286261a87f093a820c", "filename": "gcc/testsuite/gcc.dg/cpp/undef2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef2.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -1,7 +1,9 @@\n-/* C99 6.10.8 para 4: None of [the predefined macro names] shall be the\n-   subject of a #define or an #undef preprocessing directive.  */\n+/* C99 6.10.8 para 4: None of [the predefined macro names] shall be\n+   the subject of a #define or an #undef preprocessing directive.  We\n+   pass -fno-show-column as otherwise dejagnu gets confused.  */\n \n /* { dg-do preprocess } */\n+/* { dg-options \"-fno-show-column\" } */\n \n #undef __DATE__\t\t/* { dg-warning \"undefining\" \"__DATE__\" } */\n #undef __TIME__\t\t/* { dg-warning \"undefining\" \"__TIME__\" } */"}, {"sha": "b846990e77fbc251da18c2adcf0c186fc3a5119b", "filename": "gcc/testsuite/gcc.dg/cpp/widestr1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwidestr1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f215d7e03e8d954412f872cf6f10ceeb8626f1/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwidestr1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwidestr1.c?ref=74f215d7e03e8d954412f872cf6f10ceeb8626f1", "patch": "@@ -4,6 +4,6 @@\n \n /* { dg-do preprocess } */\n \n-#line 1 L\"foo\" /* { dg-error \"not a string\" \"wide string in #line\" } */\n+#line 1 L\"foo\" /* { dg-error \"not a valid filename\" \"wide string in #line\" } */\n #include L\"stdio.h\" /* { dg-error \"expects\" \"wide string in #include\" } */\n #pragma implementation L\"test.h\" /* { dg-error \"malformed\" \"wide string in #pragma implementation\" } */"}]}