{"sha": "c4d501291d813840ad576842db00d9cfe9e77623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkNTAxMjkxZDgxMzg0MGFkNTc2ODQyZGIwMGQ5Y2ZlOWU3NzYyMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-08-12T12:10:30Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-08-12T12:10:30Z"}, "message": "s390.c (s390_extract_part, [...]): Type cast added.\n\n2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_extract_part, s390_single_part):\n\tType cast added.\n\t(s390_const_ok_for_constraint_p): Added SImode to the N constraint.\n\t(s390_output_mi_thunk): Don't use lg on 31 bit.\n\t* config/s390/s390.md (\"*movdi_31\", \"*movdf_31\"): Added lmy and stmy.\n\t(\"*llgt_sisi\" and splitter): Replaced TARGET_64BIT with TARGET_ZARCH.\n\nFrom-SVN: r103027", "tree": {"sha": "e2fb15d8aa4037309a49ce97373ba1b51979ff27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fb15d8aa4037309a49ce97373ba1b51979ff27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d501291d813840ad576842db00d9cfe9e77623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d501291d813840ad576842db00d9cfe9e77623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d501291d813840ad576842db00d9cfe9e77623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d501291d813840ad576842db00d9cfe9e77623/comments", "author": null, "committer": null, "parents": [{"sha": "b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c67a49577ce6bc098bb5a251ff5e52ec48e5b8"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "8378a7f504edb27160e0ca16b13f9eadb33122af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d501291d813840ad576842db00d9cfe9e77623", "patch": "@@ -1,3 +1,12 @@\n+2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_extract_part, s390_single_part):\n+\tType cast added.\n+\t(s390_const_ok_for_constraint_p): Added SImode to the N constraint.\n+\t(s390_output_mi_thunk): Don't use lg on 31 bit.\n+\t* config/s390/s390.md (\"*movdi_31\", \"*movdf_31\"): Added lmy and stmy.\n+\t(\"*llgt_sisi\" and splitter): Replaced TARGET_64BIT with TARGET_ZARCH.\n+\n 2005-08-12  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (CONST_OK_FOR_J, CONST_OK_FOR_K): New macros."}, {"sha": "551ffedbc8008972fded6989cc23728a798f6302", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c4d501291d813840ad576842db00d9cfe9e77623", "patch": "@@ -947,7 +947,8 @@ s390_extract_part (rtx op, enum machine_mode mode, int def)\n   unsigned HOST_WIDE_INT value = 0;\n   int max_parts = HOST_BITS_PER_WIDE_INT / GET_MODE_BITSIZE (mode);\n   int part_bits = GET_MODE_BITSIZE (mode);\n-  unsigned HOST_WIDE_INT part_mask = (1 << part_bits) - 1;\n+  unsigned HOST_WIDE_INT part_mask\n+    = ((unsigned HOST_WIDE_INT)1 << part_bits) - 1;\n   int i;\n \n   for (i = 0; i < max_parts; i++)\n@@ -976,7 +977,8 @@ s390_single_part (rtx op,\n {\n   unsigned HOST_WIDE_INT value = 0;\n   int n_parts = GET_MODE_SIZE (mode) / GET_MODE_SIZE (part_mode);\n-  unsigned HOST_WIDE_INT part_mask = (1 << GET_MODE_BITSIZE (part_mode)) - 1;\n+  unsigned HOST_WIDE_INT part_mask\n+    = ((unsigned HOST_WIDE_INT)1 << GET_MODE_BITSIZE (part_mode)) - 1;\n   int i, part = -1;\n \n   if (GET_CODE (op) != CONST_INT)\n@@ -1835,8 +1837,9 @@ s390_const_ok_for_constraint_p (HOST_WIDE_INT value,\n \n       switch (str[2])\n \t{\n-\tcase 'H': part_mode = HImode; break;\n-\tcase 'Q': part_mode = QImode; break;\n+  \tcase 'Q': part_mode = QImode; break;\n+ \tcase 'H': part_mode = HImode; break;\n+ \tcase 'S': part_mode = SImode; break;\n \tdefault:  return 0;\n \t}\n \n@@ -7780,12 +7783,12 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n         {\n \t  if (CONST_OK_FOR_J (vcall_offset))\n \t    {\n-\t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"l\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"a\\t%1,%3(%4)\", op);\n \t    }\n \t  else if (DISP_IN_RANGE (vcall_offset))\n \t    {\n-\t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"l\\t%4,0(%1)\", op);\n \t      output_asm_insn (\"ay\\t%1,%3(%4)\", op);\n \t    }\n \t  else if (CONST_OK_FOR_K (vcall_offset))"}, {"sha": "ee87cf6938b72e8fef26d791a39f05b0930e1ba0", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d501291d813840ad576842db00d9cfe9e77623/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=c4d501291d813840ad576842db00d9cfe9e77623", "patch": "@@ -933,12 +933,14 @@\n    s390_split_access_reg (operands[0], &operands[3], &operands[4]);\")\n \n (define_insn \"*movdi_31\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,Q,d,o,!*f,!*f,!*f,!R,!T,Q\")\n-        (match_operand:DI 1 \"general_operand\" \"Q,d,dKm,d,*f,R,T,*f,*f,Q\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,Q,S,d,o,!*f,!*f,!*f,!R,!T,Q\")\n+        (match_operand:DI 1 \"general_operand\" \"Q,S,d,d,dKm,d,*f,R,T,*f,*f,Q\"))]\n   \"!TARGET_64BIT\"\n   \"@\n    lm\\t%0,%N0,%S1\n+   lmy\\t%0,%N0,%S1\n    stm\\t%1,%N1,%S0\n+   stmy\\t%1,%N1,%S0\n    #\n    #\n    ldr\\t%0,%1\n@@ -947,8 +949,8 @@\n    std\\t%1,%0\n    stdy\\t%1,%0\n    #\"\n-  [(set_attr \"op_type\" \"RS,RS,*,*,RR,RX,RXY,RX,RXY,SS\")\n-   (set_attr \"type\" \"lm,stm,*,*,floaddf,floaddf,floaddf,fstoredf,fstoredf,*\")])\n+  [(set_attr \"op_type\" \"RS,RSY,RS,RSY,*,*,RR,RX,RXY,RX,RXY,SS\")\n+   (set_attr \"type\" \"lm,lm,stm,stm,*,*,floaddf,floaddf,floaddf,fstoredf,fstoredf,*\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n@@ -1393,8 +1395,8 @@\n    (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,fstoredf,fstoredf,lr,load,store,*\")])\n \n (define_insn \"*movdf_31\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,Q,d,o,Q\")\n-        (match_operand:DF 1 \"general_operand\" \"G,f,R,T,f,f,Q,d,dKm,d,Q\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d,Q,S,d,o,Q\")\n+        (match_operand:DF 1 \"general_operand\" \"G,f,R,T,f,f,Q,S,d,d,dPm,d,Q\"))]\n   \"!TARGET_64BIT\"\n   \"@\n    lzdr\\t%0\n@@ -1404,12 +1406,15 @@\n    std\\t%1,%0\n    stdy\\t%1,%0\n    lm\\t%0,%N0,%S1\n+   lmy\\t%0,%N0,%S1\n    stm\\t%1,%N1,%S0\n+   stmy\\t%1,%N1,%S0\n    #\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RS,*,*,SS\")\n-   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,fstoredf,fstoredf,lm,stm,*,*,*\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*,SS\")\n+   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,fstoredf,fstoredf,\\\n+                     lm,lm,stm,stm,*,*,*\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n@@ -2604,7 +2609,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n         (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d,m\")\n \t\t(const_int 2147483647)))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_ZARCH\"\n   \"@\n    llgtr\\t%0,%1\n    llgt\\t%0,%1\"\n@@ -2625,7 +2630,7 @@\n         (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"\")\n                  (const_int 2147483647)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && reload_completed\"\n+  \"TARGET_ZARCH && reload_completed\"\n   [(set (match_dup 0)\n         (and:GPR (match_dup 1)\n                  (const_int 2147483647)))]"}]}