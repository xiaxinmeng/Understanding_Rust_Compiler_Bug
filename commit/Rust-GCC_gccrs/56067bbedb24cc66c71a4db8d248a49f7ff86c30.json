{"sha": "56067bbedb24cc66c71a4db8d248a49f7ff86c30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYwNjdiYmVkYjI0Y2M2NmM3MWE0ZGI4ZDI0OGE0OWY3ZmY4NmMzMA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-01-13T07:54:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-01-13T07:54:59Z"}, "message": "Delete unused file.\n\n\t* unwind-libunwind.c: Delete.\n\nFrom-SVN: r75790", "tree": {"sha": "e673c20a64398961aa9f383b667580377cca3124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e673c20a64398961aa9f383b667580377cca3124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56067bbedb24cc66c71a4db8d248a49f7ff86c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56067bbedb24cc66c71a4db8d248a49f7ff86c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56067bbedb24cc66c71a4db8d248a49f7ff86c30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56067bbedb24cc66c71a4db8d248a49f7ff86c30/comments", "author": null, "committer": null, "parents": [{"sha": "d051dc88efd3433736815e49ddca42ad36aac9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d051dc88efd3433736815e49ddca42ad36aac9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d051dc88efd3433736815e49ddca42ad36aac9ba"}], "stats": {"total": 196, "additions": 4, "deletions": 192}, "files": [{"sha": "546053b2f6dadaed1187314ac71b08f9d6ed1dea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56067bbedb24cc66c71a4db8d248a49f7ff86c30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56067bbedb24cc66c71a4db8d248a49f7ff86c30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56067bbedb24cc66c71a4db8d248a49f7ff86c30", "patch": "@@ -1,3 +1,7 @@\n+2004-01-12  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* unwind-libunwind.c: Delete.\n+\n 2004-01-12  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 13656"}, {"sha": "054f9838c1e343da08132739e02c7653d650b322", "filename": "gcc/unwind-libunwind.c", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d051dc88efd3433736815e49ddca42ad36aac9ba/gcc%2Funwind-libunwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d051dc88efd3433736815e49ddca42ad36aac9ba/gcc%2Funwind-libunwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-libunwind.c?ref=d051dc88efd3433736815e49ddca42ad36aac9ba", "patch": "@@ -1,192 +0,0 @@\n-/* Subroutines needed for unwinding stack frames via the libunwind API.\n-   Copyright (C) 2002, 2003\n-   Free Software Foundation, Inc.\n-   Contributed by David Mosberger-Tang <davidm@hpl.hp.com>\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING.  If not, write to\n-   the Free Software Foundation, 59 Temple Place - Suite 330,\n-   Boston, MA 02111-1307, USA.  */\n-\n-/* As a special exception, if you link this library with other files,\n-   some of which are compiled with GCC, to produce an executable,\n-   this library does not by itself cause the resulting executable\n-   to be covered by the GNU General Public License.\n-   This exception does not however invalidate any other reasons why\n-   the executable file might be covered by the GNU General Public License.  */\n-\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"unwind.h\"\n-\n-#ifndef __USING_SJLJ_EXCEPTIONS__\n-\n-#define UNW_LOCAL_ONLY\n-\n-#include <libunwind.h>\n-\n-typedef struct {\n-  _Unwind_Personality_Fn personality;\n-} _Unwind_FrameState;\n-\n-struct _Unwind_Context {\n-  unw_cursor_t cursor;\n-};\n-\n-\f\n-/* First come the helper-routines that are needed by unwind.inc.  */\n-\n-static _Unwind_Reason_Code\n-uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n-{\n-  unw_proc_info_t pi;\n-\n-  if (unw_step (&context->cursor) <= 0)\n-    return _URC_END_OF_STACK;\n-\n-  unw_get_proc_info(&context->cursor, &pi);\n-  fs->personality = (_Unwind_Personality_Fn) pi.handler;\n-\n-  return _URC_NO_REASON;\n-}\n-\n-#define uw_update_context(context,fs)\tdo { ; } while (0)\n-\n-static inline _Unwind_Ptr\n-uw_identify_context (struct _Unwind_Context *context)\n-{\n-  unw_word_t ip;\n-  unw_get_reg (&context->cursor, UNW_REG_IP, &ip);\n-  return (_Unwind_Ptr) ip;\n-}\n-\n-#define uw_init_context(context)\t\t\\\n-do\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\\\n-    unw_context_t uc;\t\t\t\t\\\n-    unw_getcontext (&uc);\t\t\t\\\n-    unw_init_local (&(context)->cursor, &uc);\t\\\n-  }\t\t\t\t\t\t\\\n-while (0)\n-\n-static inline void __attribute__ ((noreturn))\n-uw_install_context (struct _Unwind_Context *current __attribute__ ((unused)),\n-\t\t    struct _Unwind_Context *target)\n-{\n-  unw_resume (&(target)->cursor);\n-  abort ();\n-}\n-\n-\f\n-/* Now come the helper-routines which may be called from an exception\n-   handler.  The interface for these routines are defined by the C++\n-   ABI.  See: http://www.codesourcery.com/cxx-abi/abi-eh.html */\n-\n-_Unwind_Word\n-_Unwind_GetGR (struct _Unwind_Context *context, int index)\n-{\n-  unw_word_t ret;\n-\n-  /* Note: here we depend on the fact that general registers are\n-     expected to start with register number 0!  */\n-  unw_get_reg (&context->cursor, index, &ret);\n-  return ret;\n-}\n-\n-/* Get the value of the CFA as saved in CONTEXT.  */\n-\n-_Unwind_Word\n-_Unwind_GetCFA (struct _Unwind_Context *context)\n-{\n-  unw_word_t ret;\n-\n-  unw_get_reg (&context->cursor, UNW_IA64_SP, &ret);\n-  return ret;\n-}\n-\n-/* Overwrite the saved value for register REG in CONTEXT with VAL.  */\n-\n-void\n-_Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n-{\n-  /* Note: here we depend on the fact that general registers are\n-     expected to start with register number 0!  */\n-  unw_set_reg (&context->cursor, index, val);\n-#ifdef UNW_TARGET_IA64\n-  if (index >= UNW_IA64_GR && index <= UNW_IA64_GR + 127)\n-    /* Clear the NaT bit.  */\n-    unw_set_reg (&context->cursor, UNW_IA64_NAT + (index - UNW_IA64_GR), 0);\n-#endif\n-}\n-\n-/* Retrieve the return address for CONTEXT.  */\n-\n-inline _Unwind_Ptr\n-_Unwind_GetIP (struct _Unwind_Context *context)\n-{\n-  unw_word_t ret;\n-\n-  unw_get_reg (&context->cursor, UNW_REG_IP, &ret);\n-  return ret;\n-}\n-\n-/* Overwrite the return address for CONTEXT with VAL.  */\n-\n-inline void\n-_Unwind_SetIP (struct _Unwind_Context *context, _Unwind_Ptr val)\n-{\n-  unw_set_reg (&context->cursor, UNW_REG_IP, val);\n-}\n-\n-void *\n-_Unwind_GetLanguageSpecificData (struct _Unwind_Context *context)\n-{\n-  unw_proc_info_t pi;\n-\n-  unw_get_proc_info(&context->cursor, &pi);\n-  return (void *) pi.lsda;\n-}\n-\n-_Unwind_Ptr\n-_Unwind_GetRegionStart (struct _Unwind_Context *context)\n-{\n-  unw_proc_info_t pi;\n-\n-  unw_get_proc_info(&context->cursor, &pi);\n-  return (_Unwind_Ptr) pi.start_ip;\n-}\n-\n-void *\n-_Unwind_FindEnclosingFunction (void *pc)\n-{\n-  return NULL;\n-}\n-\n-#ifdef UNW_TARGET_IA64\n-\n-_Unwind_Word\n-_Unwind_GetBSP (struct _Unwind_Context *context)\n-{\n-  unw_word_t ret;\n-\n-  unw_get_reg (&context->cursor, UNW_IA64_BSP, &ret);\n-  return ret;\n-}\n-\n-#endif\n-\n-#include \"unwind.inc\"\n-\n-#endif /* !__USING_SJLJ_EXCEPTIONS__ */"}]}