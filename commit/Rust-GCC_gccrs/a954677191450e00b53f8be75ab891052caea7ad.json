{"sha": "a954677191450e00b53f8be75ab891052caea7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1NDY3NzE5MTQ1MGUwMGI1M2Y4YmU3NWFiODkxMDUyY2FlYTdhZA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-22T19:27:17Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-22T19:27:17Z"}, "message": "In gcc/c-family/: 2010-11-22 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/c-family/:\n2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        PR objc/34033\n        * c-lex.c (lex_string): Check that each string in an Objective-C\n        string concat sequence starts with either one or zero '@', and\n        that there are no spurious '@' signs at the end.\n\nIn gcc/testsuite/:\n2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        PR objc/34033\n        * objc.dg/strings-1.m: New.\n        * objc.dg/strings-2.m: New.\n        * obj-c++.dg/strings-1.mm: New.\n        * obj-c++.dg/strings-2.mm: New.\n\nFrom-SVN: r167048", "tree": {"sha": "8a24c8b57eff44c8c440e11069452273d4a7c009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a24c8b57eff44c8c440e11069452273d4a7c009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a954677191450e00b53f8be75ab891052caea7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a954677191450e00b53f8be75ab891052caea7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a954677191450e00b53f8be75ab891052caea7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a954677191450e00b53f8be75ab891052caea7ad/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56dce2cefd90467bfe57c5e4b9340553478e78be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dce2cefd90467bfe57c5e4b9340553478e78be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dce2cefd90467bfe57c5e4b9340553478e78be"}], "stats": {"total": 212, "additions": 206, "deletions": 6}, "files": [{"sha": "fe6fe7ab7322053bea45ef865ae36c946658d211", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -1,3 +1,10 @@\n+2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/34033\n+\t* c-lex.c (lex_string): Check that each string in an Objective-C\n+\tstring concat sequence starts with either one or zero '@', and\n+\tthat there are no spurious '@' signs at the end.\n+\n 2010-11-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-pragma.c: Remove conditionals on HANDLE_PRAGMA_PACK,"}, {"sha": "e372954f9ffd48b698b8ad6d491cd0aab942a3a5", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -889,10 +889,12 @@ interpret_fixed (const cpp_token *token, unsigned int flags)\n \n /* Convert a series of STRING, WSTRING, STRING16, STRING32 and/or\n    UTF8STRING tokens into a tree, performing string constant\n-   concatenation.  TOK is the first of these.  VALP is the location\n-   to write the string into. OBJC_STRING indicates whether an '@' token\n-   preceded the incoming token.\n-   Returns the CPP token type of the result (CPP_STRING, CPP_WSTRING,\n+   concatenation.  TOK is the first of these.  VALP is the location to\n+   write the string into.  OBJC_STRING indicates whether an '@' token\n+   preceded the incoming token (in that case, the strings can either\n+   be ObjC strings, preceded by a single '@', or normal strings, not\n+   preceded by '@'.  The result will be a CPP_OBJC_STRING).  Returns\n+   the CPP token type of the result (CPP_STRING, CPP_WSTRING,\n    CPP_STRING32, CPP_STRING16, CPP_UTF8STRING, or CPP_OBJC_STRING).\n \n    This is unfortunately more work than it should be.  If any of the\n@@ -918,16 +920,25 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string, bool translate)\n   cpp_string str = tok->val.str;\n   cpp_string *strs = &str;\n \n+  /* objc_at_sign_was_seen is only used when doing Objective-C string\n+     concatenation.  It is 'true' if we have seen an '@' before the\n+     current string, and 'false' if not.  We must see exactly one or\n+     zero '@' before each string.  */\n+  bool objc_at_sign_was_seen = false;\n+\n  retry:\n   tok = cpp_get_token (parse_in);\n   switch (tok->type)\n     {\n     case CPP_PADDING:\n       goto retry;\n     case CPP_ATSIGN:\n-      if (c_dialect_objc ())\n+      if (objc_string)\n \t{\n-\t  objc_string = true;\n+\t  if (objc_at_sign_was_seen)\n+\t    error (\"repeated %<@%> before Objective-C string\");\n+\n+\t  objc_at_sign_was_seen = true;\n \t  goto retry;\n \t}\n       /* FALLTHROUGH */\n@@ -956,9 +967,15 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string, bool translate)\n \n       concats++;\n       obstack_grow (&str_ob, &tok->val.str, sizeof (cpp_string));\n+      if (objc_string)\n+\tobjc_at_sign_was_seen = false;\n       goto retry;\n     }\n \n+  /* It is an error if we saw a '@' with no following string.  */\n+  if (objc_at_sign_was_seen)\n+    error (\"stray %<@%> in program\");\n+\n   /* We have read one more token than we want.  */\n   _cpp_backup_tokens (parse_in, 1);\n   if (concats)"}, {"sha": "274d4087497a95b290d59887456efff1bf8e8b7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -1,3 +1,11 @@\n+2010-11-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/34033\n+\t* objc.dg/strings-1.m: New.\n+\t* objc.dg/strings-2.m: New.\n+\t* obj-c++.dg/strings-1.mm: New.\n+\t* obj-c++.dg/strings-2.mm: New.\t\n+\n 2010-11-22  Ian Bolton  <ian.bolton@arm.com>\n \n \t* testsuite/c-c++-common/pr44832.c: Use -fno-short-enums option for"}, {"sha": "2630220618c282607fb4a39eb9be4e44350709d6", "filename": "gcc/testsuite/obj-c++.dg/strings-1.mm", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-1.mm?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -0,0 +1,33 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+/* The following are correct.  */\n+id test_valid1 = @\"test\";\n+id test_valid2 = @\"te\" @\"st\";\n+id test_valid3 = @\"te\" @\"s\" @\"t\";\n+id test_valid4 = @ \"t\" @ \"e\" @ \"s\" @ \"t\";\n+\n+/* The following are accepted too; you can concat an ObjC string to a\n+   C string, the result being an ObjC string.  */\n+id test_valid5 = @\"te\" \"st\";\n+id test_valid6 = @\"te\" \"s\" @\"t\";\n+id test_valid7 = @\"te\" @\"s\" \"t\";\n+\n+/* The following are not correct.  */\n+id test_invalid1          = @@\"test\";            /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid2 = \"test\"@;             /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid3 = \"test\"@@;            /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid4 = \"te\" @\"st\";          /* { dg-error \"expected\" } */\n+id test_invalid5          = @\"te\" @@\"st\";        /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid6          = @@\"te\" @\"st\";        /* { dg-error \"stray .@. in program\" } */\n+id test_invalid7          = @\"te\" @\"s\" @@\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid8          = @\"te\" @@\"s\" @\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid9          = @\"te\" @\"s\" @\"t\" @;   /* { dg-error \"stray .@. in program\" } */\n+id test_invalidA          = @\"te\" @ st;          /* { dg-error \"stray .@. in program\" } */\n+                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 32 } */"}, {"sha": "9b7023a974596113dfc3f2b5a828cca99ea42a2a", "filename": "gcc/testsuite/obj-c++.dg/strings-2.mm", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings-2.mm?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -0,0 +1,51 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=MyTestString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyTestString\" { target *-*-darwin* } } */\n+\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.mm\" } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+\n+#include <stdlib.h> /* For abort() */\n+\n+@interface MyTestString : Object\n+{\n+  char *string;\n+  unsigned int len;\n+}\n+/* All strings should contain the C string 'test'.  Call -check to\n+   test that this is true.  */\n+- (void) check;\n+@end\n+\n+@implementation MyTestString\n+- (void) check\n+{\n+  if (len != 4 || string[0] != 't' || string[1] != 'e'\n+      || string[2] != 's' || string[3] != 't' || string[4] != '\\0')\n+    abort ();\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyTestString *test_valid1 = @\"test\";\n+  MyTestString *test_valid2 = @\"te\" @\"st\";\n+  MyTestString *test_valid3 = @\"te\" @\"s\" @\"t\";\n+  MyTestString *test_valid4 = @ \"t\" @ \"e\" @ \"s\" @ \"t\";\n+  MyTestString *test_valid5 = @ \"t\" \"e\" \"s\" \"t\";\n+  MyTestString *test_valid6 = @ \"t\" \"e\" \"s\" @ \"t\";\n+\n+  [test_valid1 check];\n+  [test_valid2 check];\n+  [test_valid3 check];\n+  [test_valid4 check];\n+  [test_valid5 check];\n+  [test_valid6 check];\n+\n+  return 0;\n+}"}, {"sha": "2630220618c282607fb4a39eb9be4e44350709d6", "filename": "gcc/testsuite/objc.dg/strings-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-1.m?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -0,0 +1,33 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/NXConstStr.h>\n+#endif\n+\n+/* The following are correct.  */\n+id test_valid1 = @\"test\";\n+id test_valid2 = @\"te\" @\"st\";\n+id test_valid3 = @\"te\" @\"s\" @\"t\";\n+id test_valid4 = @ \"t\" @ \"e\" @ \"s\" @ \"t\";\n+\n+/* The following are accepted too; you can concat an ObjC string to a\n+   C string, the result being an ObjC string.  */\n+id test_valid5 = @\"te\" \"st\";\n+id test_valid6 = @\"te\" \"s\" @\"t\";\n+id test_valid7 = @\"te\" @\"s\" \"t\";\n+\n+/* The following are not correct.  */\n+id test_invalid1          = @@\"test\";            /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid2 = \"test\"@;             /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid3 = \"test\"@@;            /* { dg-error \"stray .@. in program\" } */\n+const char *test_invalid4 = \"te\" @\"st\";          /* { dg-error \"expected\" } */\n+id test_invalid5          = @\"te\" @@\"st\";        /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid6          = @@\"te\" @\"st\";        /* { dg-error \"stray .@. in program\" } */\n+id test_invalid7          = @\"te\" @\"s\" @@\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid8          = @\"te\" @@\"s\" @\"t\";    /* { dg-error \"repeated .@. before Objective-C string\" } */\n+id test_invalid9          = @\"te\" @\"s\" @\"t\" @;   /* { dg-error \"stray .@. in program\" } */\n+id test_invalidA          = @\"te\" @ st;          /* { dg-error \"stray .@. in program\" } */\n+                                                 /* { dg-error \"expected\" \"\" { target *-*-* } 32 } */"}, {"sha": "d69967a6871d726bcefa4cc56c80aaf918016765", "filename": "gcc/testsuite/objc.dg/strings-2.m", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a954677191450e00b53f8be75ab891052caea7ad/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings-2.m?ref=a954677191450e00b53f8be75ab891052caea7ad", "patch": "@@ -0,0 +1,51 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-options \"-fconstant-string-class=MyTestString\" } */\n+/* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=MyTestString\" { target *-*-darwin* } } */\n+\n+/* { dg-additional-sources \"../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../objc-obj-c++-shared/Object1.h\"\n+#include \"../objc-obj-c++-shared/next-mapping.h\"\n+\n+#include <stdlib.h> /* For abort() */\n+\n+@interface MyTestString : Object\n+{\n+  char *string;\n+  unsigned int len;\n+}\n+/* All strings should contain the C string 'test'.  Call -check to\n+   test that this is true.  */\n+- (void) check;\n+@end\n+\n+@implementation MyTestString\n+- (void) check\n+{\n+  if (len != 4 || string[0] != 't' || string[1] != 'e'\n+      || string[2] != 's' || string[3] != 't' || string[4] != '\\0')\n+    abort ();\n+}\n+@end\n+\n+int main (void)\n+{\n+  MyTestString *test_valid1 = @\"test\";\n+  MyTestString *test_valid2 = @\"te\" @\"st\";\n+  MyTestString *test_valid3 = @\"te\" @\"s\" @\"t\";\n+  MyTestString *test_valid4 = @ \"t\" @ \"e\" @ \"s\" @ \"t\";\n+  MyTestString *test_valid5 = @ \"t\" \"e\" \"s\" \"t\";\n+  MyTestString *test_valid6 = @ \"t\" \"e\" \"s\" @ \"t\";\n+\n+  [test_valid1 check];\n+  [test_valid2 check];\n+  [test_valid3 check];\n+  [test_valid4 check];\n+  [test_valid5 check];\n+  [test_valid6 check];\n+\n+  return 0;\n+}"}]}