{"sha": "6666731254089eadcc09361ff815d0de80516c6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2NjczMTI1NDA4OWVhZGNjMDkzNjFmZjgxNWQwZGU4MDUxNmM2ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-12-15T14:17:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-12-15T14:17:17Z"}, "message": "Fix cv-qualifiers in std::bind invocation\n\n\tPR libstdc++/68912\n\t* include/std/functional (_Bind::operator()): Use lvalue functor to\n\tdeduce return type.\n\t* testsuite/20_util/bind/68912.cc: New.\n\nFrom-SVN: r231652", "tree": {"sha": "0a5cb6699d130b249c2d67f5e877e85e97f25fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5cb6699d130b249c2d67f5e877e85e97f25fca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6666731254089eadcc09361ff815d0de80516c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6666731254089eadcc09361ff815d0de80516c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6666731254089eadcc09361ff815d0de80516c6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6666731254089eadcc09361ff815d0de80516c6d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c036f3f0a3ca5980709c385477e0b0af1dbcd30"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "295dcf17c335e77453add6c4666b53edd244fad1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6666731254089eadcc09361ff815d0de80516c6d", "patch": "@@ -1,3 +1,10 @@\n+2015-12-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/68912\n+\t* include/std/functional (_Bind::operator()): Use lvalue functor to\n+\tdeduce return type.\n+\t* testsuite/20_util/bind/68912.cc: New.\n+\n 2015-12-15  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/68863"}, {"sha": "8d39d622b4b730c31b4e80d6b599b9d0b8fcc8c8", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=6666731254089eadcc09361ff815d0de80516c6d", "patch": "@@ -1034,7 +1034,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n       // Call unqualified\n       template<typename... _Args, typename _Result\n-\t= decltype( std::declval<_Functor>()(\n+\t= decltype( std::declval<_Functor&>()(\n \t      _Mu<_Bound_args>()( std::declval<_Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result\n@@ -1048,7 +1048,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       // Call as const\n       template<typename... _Args, typename _Result\n \t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-\t\t       typename add_const<_Functor>::type>::type>()(\n+\t\t       typename add_const<_Functor>::type&>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result\n@@ -1062,7 +1062,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       // Call as volatile\n       template<typename... _Args, typename _Result\n \t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-                       typename add_volatile<_Functor>::type>::type>()(\n+                       typename add_volatile<_Functor>::type&>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result\n@@ -1076,7 +1076,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       // Call as const volatile\n       template<typename... _Args, typename _Result\n \t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-                       typename add_cv<_Functor>::type>::type>()(\n+                       typename add_cv<_Functor>::type&>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result"}, {"sha": "7a00b75124a718fff9ffd2921f8cb95836cf5067", "filename": "libstdc++-v3/testsuite/20_util/bind/68912.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6666731254089eadcc09361ff815d0de80516c6d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc?ref=6666731254089eadcc09361ff815d0de80516c6d", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include<functional>\n+\n+struct Wrong {};\n+struct A {};\n+struct B {};\n+struct C{};\n+struct D{};\n+\n+struct X {\n+  A operator()(int, double) & { return {}; }\n+  Wrong operator()(int, double) && {return {}; }\n+\n+  B operator()(int, double) const & { return {}; }\n+  Wrong operator()(int, double) const && {return {}; }\n+\n+  C operator()(int, double) volatile & { return {}; }\n+  Wrong operator()(int, double) volatile && {return {}; }\n+\n+  D operator()(int, double) const volatile & { return {}; }\n+  Wrong operator()(int, double) const volatile && {return {}; }\n+};\n+\n+void test01()\n+{\n+  auto bound = std::bind(X{}, 5, std::placeholders::_1);\n+  A res = bound(1.0);\n+  const auto bound_c = bound;\n+  B res_c = bound_c(1.0);\n+  volatile auto bound_v = bound;\n+  C res_v = bound_v(1.0);\n+  volatile const auto bound_cv = bound;\n+  D res_cv = bound_cv(1.0);\n+}"}]}