{"sha": "fccf9848508741311fc9d64abc69a799e8162ee8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjZjk4NDg1MDg3NDEzMTFmYzlkNjRhYmM2OWE3OTllODE2MmVlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-10-13T14:55:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-10-13T14:55:19Z"}, "message": "sparc.md (nonlocal_goto_receiver): Remove.\n\n\t* config/sparc/sparc.md (nonlocal_goto_receiver): Remove.\n\t(prologue, exception_receiver, builtin_setjmp_receiver): New\n\tpatterns.\n\t* config/sparc/sparc.h (FINALIZE_PIC): Remove.\n\t* config/sparc/sparc-protos.h (finalize_pic): Remove.\n\t(load_pic_register): New prototype.\n\t* config/sparc/sparc.c (pic_setup_code): Remove.\n\t(finalize_pic): Rename to...\n\t(load_pic_register): ...this function.\n\tDon't look for nonlocal_goto_receivers and emit pic setup code\n\tdirectly.  Don't check current_function_uses_pic_offset_table.\n\n\t* gcc.dg/20001012-1.c: New test.\n\t* gcc.dg/20001012-2.c: New test.\n\nFrom-SVN: r36859", "tree": {"sha": "cf83814b14b12240cf59ca1a820b61cc6c709078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf83814b14b12240cf59ca1a820b61cc6c709078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fccf9848508741311fc9d64abc69a799e8162ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccf9848508741311fc9d64abc69a799e8162ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccf9848508741311fc9d64abc69a799e8162ee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccf9848508741311fc9d64abc69a799e8162ee8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7584b89ffd8dfa49cea79a5a48127e905a96964b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7584b89ffd8dfa49cea79a5a48127e905a96964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7584b89ffd8dfa49cea79a5a48127e905a96964b"}], "stats": {"total": 146, "additions": 101, "deletions": 45}, "files": [{"sha": "0bd5e1e07572b5c0e35baa7dfd2e28ecd9b4cf4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -1,3 +1,17 @@\n+2000-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.md (nonlocal_goto_receiver): Remove.\n+\t(prologue, exception_receiver, builtin_setjmp_receiver): New\n+\tpatterns.\n+\t* config/sparc/sparc.h (FINALIZE_PIC): Remove.\n+\t* config/sparc/sparc-protos.h (finalize_pic): Remove.\n+\t(load_pic_register): New prototype.\n+\t* config/sparc/sparc.c (pic_setup_code): Remove.\n+\t(finalize_pic): Rename to...\n+\t(load_pic_register): ...this function.\n+\tDon't look for nonlocal_goto_receivers and emit pic setup code\n+\tdirectly.  Don't check current_function_uses_pic_offset_table.\n+\n 2000-10-13  Richard Earnshaw <rearnsha@arm.com>\n \n \t* tree.h (struct obstack): Declare."}, {"sha": "fe7f67851026934862df071c2a6d2b652eb1a956", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -51,7 +51,7 @@ extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));\n #endif /* TREE_CODE */\n \n extern void ultrasparc_sched_init PARAMS ((FILE *, int));\n-extern void finalize_pic PARAMS ((void));\n+extern void load_pic_register PARAMS ((void));\n extern void order_regs_for_local_alloc PARAMS ((void));\n extern void output_function_epilogue PARAMS ((FILE *, int, int));\n extern void output_function_prologue PARAMS ((FILE *, int, int));"}, {"sha": "a6364ab06161ea8941e5bb3c11b529b9992ac066", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -127,7 +127,6 @@ char sparc_leaf_regs[] =\n static const char *frame_base_name;\n static int frame_base_offset;\n \n-static rtx pic_setup_code\tPARAMS ((void));\n static void sparc_init_modes\tPARAMS ((void));\n static int save_regs\t\tPARAMS ((FILE *, int, int, const char *,\n \t\t\t\t       int, int, int));\n@@ -2830,34 +2829,15 @@ legitimize_pic_address (orig, mode, reg)\n   return orig;\n }\n \n-/* Return the RTX for insns to set the PIC register.  */\n-\n-static rtx\n-pic_setup_code ()\n-{\n-  rtx seq;\n-\n-  start_sequence ();\n-  emit_insn (gen_get_pc (pic_offset_table_rtx, global_offset_table,\n-\t\t\t get_pc_symbol));\n-  seq = gen_sequence ();\n-  end_sequence ();\n-\n-  return seq;\n-}\n-\n-/* Emit special PIC prologues and epilogues.  */\n+/* Emit special PIC prologues.  */\n \n void\n-finalize_pic ()\n+load_pic_register ()\n {\n   /* Labels to get the PC in the prologue of this function.  */\n   int orig_flag_pic = flag_pic;\n   rtx insn;\n \n-  if (current_function_uses_pic_offset_table == 0)\n-    return;\n-\n   if (! flag_pic)\n     abort ();\n \n@@ -2882,16 +2862,8 @@ finalize_pic ()\n   get_pc_symbol = gen_rtx_SYMBOL_REF (Pmode, get_pc_symbol_name);\n   flag_pic = 0;\n \n-  emit_insn_after (pic_setup_code (), get_insns ());\n-\n-  /* Insert the code in each nonlocal goto receiver.\n-     If you make changes here or to the nonlocal_goto_receiver\n-     pattern, make sure the unspec_volatile numbers still\n-     match.  */\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n-\t&& XINT (PATTERN (insn), 1) == 5)\n-      emit_insn_after (pic_setup_code (), insn);\n+  emit_insn (gen_get_pc (pic_offset_table_rtx, global_offset_table,\n+\t\t\t get_pc_symbol));\n \n   flag_pic = orig_flag_pic;\n "}, {"sha": "93b8aac07df717f4b702a97d38f37590a92c51bf", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -1252,8 +1252,6 @@ extern int sparc_mode_class[];\n \n #define PIC_OFFSET_TABLE_REGNUM 23\n \n-#define FINALIZE_PIC finalize_pic ()\n-\n /* Pick a default value we can notice from override_options:\n    !v9: Default is on.\n    v9: Default is off.  */"}, {"sha": "21dda765f8d90e517c01583ebc8ce9ebcae76aa0", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -50,7 +50,6 @@\n ;;\t\t\t2\tgoto_handler_and_restore\n ;;\t\t\t3\tgoto_handler_and_restore_v9*\n ;;\t\t\t4\tflush\n-;;\t\t\t5\tnonlocal_goto_receiver\n ;;\n \n ;; The upper 32 fp regs on the v9 can't hold SFmode values.  To deal with this\n@@ -9439,17 +9438,37 @@\n    && in_same_eh_region (insn, operands[2])\n    && in_same_eh_region (insn, ins1)\"\n   \"call\\\\t%a0, %1\\\\n\\\\tadd\\\\t%%o7, (%l2-.-4), %%o7\")\n+\f\n+(define_expand \"prologue\"\n+  [(const_int 1)]\n+  \"flag_pic && current_function_uses_pic_offset_table\"\n+  \"\n+{\n+  load_pic_register ();\n+  DONE;\n+}\")\n \n-;; After a nonlocal goto, we need to restore the PIC register, but only\n-;; if we need it.  So do nothing much here, but we'll check for this in\n-;; finalize_pic.\n+;; We need to reload %l7 for -mflat -fpic,\n+;; otherwise %l7 should be preserved simply\n+;; by loading the function's register window\n+(define_expand \"exception_receiver\"\n+  [(const_int 0)]\n+  \"TARGET_FLAT && flag_pic\"\n+  \"\n+{\n+  load_pic_register ();\n+  DONE;\n+}\")\n \n-;; Make sure this unspec_volatile number agrees with finalize_pic.\n-(define_insn \"nonlocal_goto_receiver\"\n-  [(unspec_volatile [(const_int 0)] 5)]\n-  \"flag_pic\"\n-  \"\"\n-  [(set_attr \"length\" \"0\")])\n+;; Likewise\n+(define_expand \"builtin_setjmp_receiver\"\n+  [(label_ref (match_operand 0 \"\" \"\"))]\n+  \"TARGET_FLAT && flag_pic\"\n+  \"\n+{\n+  load_pic_register ();\n+  DONE;\n+}\")\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 5))]"}, {"sha": "0000b080d334879745de005ce9e94786cc58a7dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -1,3 +1,8 @@\n+2000-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20001012-1.c: New test.\n+\t* gcc.dg/20001012-2.c: New test.\n+\n 2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format-attr-1.c: New test."}, {"sha": "2fa7d76b0cc73b3f7b9a2ec24454d2286d787c79", "filename": "gcc/testsuite/gcc.dg/20001012-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-1.c?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+double\n+foo (void)\n+{\n+  return (__extension__ ((union { unsigned __l __attribute__((__mode__(__SI__))); float __d; }) { __l: 0x3f800000UL }).__d);\n+}\n+\n+main ()\n+{\n+  if (foo() != 1.0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "b92c4a049f5ec0a139108bc602c3bb7830999aa4", "filename": "gcc/testsuite/gcc.dg/20001012-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccf9848508741311fc9d64abc69a799e8162ee8/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001012-2.c?ref=fccf9848508741311fc9d64abc69a799e8162ee8", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+void foo (char *x, const char *y, ...)\n+{\n+}\n+\n+double bar (const char *x, long y)\n+{\n+  return 0.0;\n+}\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen (const char *);\n+\n+double baz (const char *x)\n+{\n+  if (x[0] != '\\0')\n+    {\n+      char y[6 + strlen (x)];\n+      foo (y, \"FOO\", x);\n+      return bar (y, 0);\n+    }\n+\n+  return (__extension__ ((union { unsigned __l __attribute__((__mode__(__SI__))); float __d; }) { __l: 0x3f800000UL }).__d);\n+}\n+\n+main ()\n+{\n+  if (baz(\"\") != 1.0)\n+    abort ();\n+  exit (0);\n+}"}]}