{"sha": "1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmYzcxNTdlZjNmMzNhNjVjN2FjYmYyM2IyMDQwMzBiMjFkODJmZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2009-05-19T18:12:57Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2009-05-19T18:12:57Z"}, "message": "* defaults.h (UINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE)\n\t(WCHAR_TYPE, MODIFIED_WCHAR_TYPE, PTRDIFF_TYPE, WINT_TYPE)\n\t(INTMAX_TYPE, UINTMAX_TYPE, SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE)\n\t(INT32_TYPE, INT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE)\n\t(UINT64_TYPE, INT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE)\n\t(INT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE)\n\t(UINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE)\n\t(INT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE)\n\t(UINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE)\n\t(SIZE_TYPE, PID_TYPE, CHAR16_TYPE, CHAR32_TYPE): Move defaults here...\n\t* c-common.c: ...from here.\n\nCo-Authored-By: Hans-Peter Nilsson <hp@axis.com>\n\nFrom-SVN: r147712", "tree": {"sha": "a850f5f98bcf4faa69b0caf00fcc4ae7d0a2e686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a850f5f98bcf4faa69b0caf00fcc4ae7d0a2e686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9351712b574f05b9621e92abd62fc386a643b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9351712b574f05b9621e92abd62fc386a643b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9351712b574f05b9621e92abd62fc386a643b8e"}], "stats": {"total": 364, "additions": 190, "deletions": 174}, "files": [{"sha": "025e71a4dbc31bbbf6f039db2b902dc537abb784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "patch": "@@ -1,3 +1,18 @@\n+2009-05-19  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\t    Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* defaults.h (UINT_FAST64_TYPE, INTPTR_TYPE, UINTPTR_TYPE)\n+\t(WCHAR_TYPE, MODIFIED_WCHAR_TYPE, PTRDIFF_TYPE, WINT_TYPE)\n+\t(INTMAX_TYPE, UINTMAX_TYPE, SIG_ATOMIC_TYPE, INT8_TYPE, INT16_TYPE)\n+\t(INT32_TYPE, INT64_TYPE, UINT8_TYPE, UINT16_TYPE, UINT32_TYPE)\n+\t(UINT64_TYPE, INT_LEAST8_TYPE, INT_LEAST16_TYPE, INT_LEAST32_TYPE)\n+\t(INT_LEAST64_TYPE, UINT_LEAST8_TYPE, UINT_LEAST16_TYPE)\n+\t(UINT_LEAST32_TYPE, UINT_LEAST64_TYPE, INT_FAST8_TYPE)\n+\t(INT_FAST16_TYPE, INT_FAST32_TYPE, INT_FAST64_TYPE)\n+\t(UINT_FAST8_TYPE, UINT_FAST16_TYPE, UINT_FAST32_TYPE)\n+\t(SIZE_TYPE, PID_TYPE, CHAR16_TYPE, CHAR32_TYPE): Move defaults here...\n+\t* c-common.c: ...from here.\n+\n 2009-05-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-common.c (warn_logical_operator): Remove unnecessary"}, {"sha": "46aacb50b8fec2f3e965e1ea8086eed56d72a367", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "patch": "@@ -55,180 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n-/* We let tm.h override the types used here, to handle trivial differences\n-   such as the choice of unsigned int or long unsigned int for size_t.\n-   When machines start needing nontrivial differences in the size type,\n-   it would be best to do something here to figure out automatically\n-   from other information what type to use.  */\n-\n-#ifndef SIZE_TYPE\n-#define SIZE_TYPE \"long unsigned int\"\n-#endif\n-\n-#ifndef PID_TYPE\n-#define PID_TYPE \"int\"\n-#endif\n-\n-/* If GCC knows the exact uint_least16_t and uint_least32_t types from\n-   <stdint.h>, use them for char16_t and char32_t.  Otherwise, use\n-   these guesses; getting the wrong type of a given width will not\n-   affect C++ name mangling because in C++ these are distinct types\n-   not typedefs.  */\n-\n-#ifdef UINT_LEAST16_TYPE\n-#define CHAR16_TYPE UINT_LEAST16_TYPE\n-#else\n-#define CHAR16_TYPE \"short unsigned int\"\n-#endif\n-\n-#ifdef UINT_LEAST32_TYPE\n-#define CHAR32_TYPE UINT_LEAST32_TYPE\n-#else\n-#define CHAR32_TYPE \"unsigned int\"\n-#endif\n-\n-#ifndef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-#endif\n-\n-/* WCHAR_TYPE gets overridden by -fshort-wchar.  */\n-#define MODIFIED_WCHAR_TYPE \\\n-\t(flag_short_wchar ? \"short unsigned int\" : WCHAR_TYPE)\n-\n-#ifndef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-#endif\n-\n-#ifndef WINT_TYPE\n-#define WINT_TYPE \"unsigned int\"\n-#endif\n-\n-#ifndef INTMAX_TYPE\n-#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"int\"\t\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long int\"\t\t\t\t\\\n-\t\t\t: \"long long int\"))\n-#endif\n-\n-#ifndef UINTMAX_TYPE\n-#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t     ? \"unsigned int\"\t\t\t\t\\\n-\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n-\t\t\t? \"long unsigned int\"\t\t\t\\\n-\t\t\t: \"long long unsigned int\"))\n-#endif\n-\n-/* There are no default definitions of these <stdint.h> types.  */\n-\n-#ifndef SIG_ATOMIC_TYPE\n-#define SIG_ATOMIC_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT8_TYPE\n-#define INT8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT16_TYPE\n-#define INT16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT32_TYPE\n-#define INT32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT64_TYPE\n-#define INT64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT8_TYPE\n-#define UINT8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT16_TYPE\n-#define UINT16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT32_TYPE\n-#define UINT32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT64_TYPE\n-#define UINT64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_LEAST8_TYPE\n-#define INT_LEAST8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_LEAST16_TYPE\n-#define INT_LEAST16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_LEAST32_TYPE\n-#define INT_LEAST32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_LEAST64_TYPE\n-#define INT_LEAST64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_LEAST8_TYPE\n-#define UINT_LEAST8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_LEAST16_TYPE\n-#define UINT_LEAST16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_LEAST32_TYPE\n-#define UINT_LEAST32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_LEAST64_TYPE\n-#define UINT_LEAST64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_FAST8_TYPE\n-#define INT_FAST8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_FAST16_TYPE\n-#define INT_FAST16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_FAST32_TYPE\n-#define INT_FAST32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INT_FAST64_TYPE\n-#define INT_FAST64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_FAST8_TYPE\n-#define UINT_FAST8_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_FAST16_TYPE\n-#define UINT_FAST16_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_FAST32_TYPE\n-#define UINT_FAST32_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINT_FAST64_TYPE\n-#define UINT_FAST64_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef INTPTR_TYPE\n-#define INTPTR_TYPE ((const char *) NULL)\n-#endif\n-\n-#ifndef UINTPTR_TYPE\n-#define UINTPTR_TYPE ((const char *) NULL)\n-#endif\n-\n /* The following symbols are subsumed in the c_global_trees array, and\n    listed here individually for documentation purposes.\n "}, {"sha": "b41f60366d507afd03b795ab083844a8a92e59a5", "filename": "gcc/defaults.h", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ffc7157ef3f33a65c7acbf23b204030b21d82fe/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1ffc7157ef3f33a65c7acbf23b204030b21d82fe", "patch": "@@ -492,6 +492,181 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LONG_LONG_ACCUM_TYPE_SIZE (LONG_LONG_FRACT_TYPE_SIZE * 2)\n #endif\n \n+/* We let tm.h override the types used here, to handle trivial differences\n+   such as the choice of unsigned int or long unsigned int for size_t.\n+   When machines start needing nontrivial differences in the size type,\n+   it would be best to do something here to figure out automatically\n+   from other information what type to use.  */\n+\n+#ifndef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+#endif\n+\n+#ifndef PID_TYPE\n+#define PID_TYPE \"int\"\n+#endif\n+\n+/* If GCC knows the exact uint_least16_t and uint_least32_t types from\n+   <stdint.h>, use them for char16_t and char32_t.  Otherwise, use\n+   these guesses; getting the wrong type of a given width will not\n+   affect C++ name mangling because in C++ these are distinct types\n+   not typedefs.  */\n+\n+#ifdef UINT_LEAST16_TYPE\n+#define CHAR16_TYPE UINT_LEAST16_TYPE\n+#else\n+#define CHAR16_TYPE \"short unsigned int\"\n+#endif\n+\n+#ifdef UINT_LEAST32_TYPE\n+#define CHAR32_TYPE UINT_LEAST32_TYPE\n+#else\n+#define CHAR32_TYPE \"unsigned int\"\n+#endif\n+\n+#ifndef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+#endif\n+\n+/* WCHAR_TYPE gets overridden by -fshort-wchar.  */\n+#define MODIFIED_WCHAR_TYPE \\\n+\t(flag_short_wchar ? \"short unsigned int\" : WCHAR_TYPE)\n+\n+#ifndef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+#endif\n+\n+#ifndef WINT_TYPE\n+#define WINT_TYPE \"unsigned int\"\n+#endif\n+\n+#ifndef INTMAX_TYPE\n+#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"int\"\t\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long int\"\t\t\t\t\\\n+\t\t\t: \"long long int\"))\n+#endif\n+\n+#ifndef UINTMAX_TYPE\n+#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"unsigned int\"\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long unsigned int\"\t\t\t\\\n+\t\t\t: \"long long unsigned int\"))\n+#endif\n+\n+\n+/* There are no default definitions of these <stdint.h> types.  */\n+\n+#ifndef SIG_ATOMIC_TYPE\n+#define SIG_ATOMIC_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT8_TYPE\n+#define INT8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT16_TYPE\n+#define INT16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT32_TYPE\n+#define INT32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT64_TYPE\n+#define INT64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT8_TYPE\n+#define UINT8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT16_TYPE\n+#define UINT16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT32_TYPE\n+#define UINT32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT64_TYPE\n+#define UINT64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST8_TYPE\n+#define INT_LEAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST16_TYPE\n+#define INT_LEAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST32_TYPE\n+#define INT_LEAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_LEAST64_TYPE\n+#define INT_LEAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST8_TYPE\n+#define UINT_LEAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST16_TYPE\n+#define UINT_LEAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST32_TYPE\n+#define UINT_LEAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_LEAST64_TYPE\n+#define UINT_LEAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST8_TYPE\n+#define INT_FAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST16_TYPE\n+#define INT_FAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST32_TYPE\n+#define INT_FAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INT_FAST64_TYPE\n+#define INT_FAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST8_TYPE\n+#define UINT_FAST8_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST16_TYPE\n+#define UINT_FAST16_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST32_TYPE\n+#define UINT_FAST32_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINT_FAST64_TYPE\n+#define UINT_FAST64_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef INTPTR_TYPE\n+#define INTPTR_TYPE ((const char *) NULL)\n+#endif\n+\n+#ifndef UINTPTR_TYPE\n+#define UINTPTR_TYPE ((const char *) NULL)\n+#endif\n+\n /* Width in bits of a pointer.  Mind the value of the macro `Pmode'.  */\n #ifndef POINTER_SIZE\n #define POINTER_SIZE BITS_PER_WORD"}]}