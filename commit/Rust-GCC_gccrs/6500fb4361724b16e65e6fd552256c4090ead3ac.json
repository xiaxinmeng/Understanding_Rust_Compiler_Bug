{"sha": "6500fb4361724b16e65e6fd552256c4090ead3ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwMGZiNDM2MTcyNGIxNmU2NWU2ZmQ1NTIyNTZjNDA5MGVhZDNhYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-12T22:39:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-12T22:39:19Z"}, "message": "(set_nonvarying_address_components): Fix type mismatch with caller.\n\n(refers_to_mem_p): Call properly in second call.\n\nFrom-SVN: r3718", "tree": {"sha": "5f784aa8bb3dddca160adcb1550563ae5eb50112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f784aa8bb3dddca160adcb1550563ae5eb50112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6500fb4361724b16e65e6fd552256c4090ead3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6500fb4361724b16e65e6fd552256c4090ead3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6500fb4361724b16e65e6fd552256c4090ead3ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6500fb4361724b16e65e6fd552256c4090ead3ac/comments", "author": null, "committer": null, "parents": [{"sha": "48f16828957b8cd783d3fb80c968ff9c9151ec90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f16828957b8cd783d3fb80c968ff9c9151ec90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f16828957b8cd783d3fb80c968ff9c9151ec90"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "bb290910e78b10bd673ccbc9a9eb2ec670ac3b26", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6500fb4361724b16e65e6fd552256c4090ead3ac/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6500fb4361724b16e65e6fd552256c4090ead3ac/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6500fb4361724b16e65e6fd552256c4090ead3ac", "patch": "@@ -609,7 +609,8 @@ static int canon_hash\t\tPROTO((rtx, enum machine_mode));\n static int safe_hash\t\tPROTO((rtx, enum machine_mode));\n static int exp_equiv_p\t\tPROTO((rtx, rtx, int, int));\n static void set_nonvarying_address_components PROTO((rtx, int, rtx *,\n-\t\t\t\t\t\t     int *, int *));\n+\t\t\t\t\t\t     HOST_WIDE_INT *,\n+\t\t\t\t\t\t     HOST_WIDE_INT *));\n static int refers_to_p\t\tPROTO((rtx, rtx));\n static int refers_to_mem_p\tPROTO((rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t       HOST_WIDE_INT));\n@@ -2205,7 +2206,7 @@ set_nonvarying_address_components (addr, size, pbase, pstart, pend)\n      rtx addr;\n      int size;\n      rtx *pbase;\n-     int *pstart, *pend;\n+     HOST_WIDE_INT *pstart, *pend;\n {\n   rtx base;\n   int start, end;\n@@ -2297,7 +2298,7 @@ refers_to_mem_p (x, base, start, end)\n     {\n       register rtx addr = XEXP (x, 0);\t/* Get the address.  */\n       rtx mybase;\n-      int mystart, myend;\n+      HOST_WIDE_INT mystart, myend;\n \n       set_nonvarying_address_components (addr, GET_MODE_SIZE (GET_MODE (x)),\n \t\t\t\t\t &mybase, &mystart, &myend);"}]}