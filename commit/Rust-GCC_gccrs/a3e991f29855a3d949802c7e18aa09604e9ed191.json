{"sha": "a3e991f29855a3d949802c7e18aa09604e9ed191", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlOTkxZjI5ODU1YTNkOTQ5ODAyYzdlMThhYTA5NjA0ZTllZDE5MQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-17T00:53:25Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-17T00:53:25Z"}, "message": "i386.md: Add two peepholes to clean up code generated by cmpstr* expanders.\n\n\t* i386.md: Add two peepholes to clean up code generated by\n\tcmpstr* expanders.\n\nFrom-SVN: r42183", "tree": {"sha": "d46d91043ac8d0ca2c252b6699ce8f8098b1a562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d46d91043ac8d0ca2c252b6699ce8f8098b1a562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e991f29855a3d949802c7e18aa09604e9ed191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e991f29855a3d949802c7e18aa09604e9ed191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e991f29855a3d949802c7e18aa09604e9ed191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e991f29855a3d949802c7e18aa09604e9ed191/comments", "author": null, "committer": null, "parents": [{"sha": "12b38507e683988f660c80b6910ec4a9231eb2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b38507e683988f660c80b6910ec4a9231eb2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b38507e683988f660c80b6910ec4a9231eb2a0"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "9dd929767072c4a190d4d0cabfa891193c78335f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e991f29855a3d949802c7e18aa09604e9ed191/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e991f29855a3d949802c7e18aa09604e9ed191/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3e991f29855a3d949802c7e18aa09604e9ed191", "patch": "@@ -1,3 +1,8 @@\n+2001-05-16  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* i386.md: Add two peepholes to clean up code generated by\n+\tcmpstr* expanders.\n+\n 2001-05-16  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2asm.c (eh_data_format_name): Add names for \"pointer size\" "}, {"sha": "a5bad6669eb6a43359a2788b9b343e3b5a0129f2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e991f29855a3d949802c7e18aa09604e9ed191/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e991f29855a3d949802c7e18aa09604e9ed191/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a3e991f29855a3d949802c7e18aa09604e9ed191", "patch": "@@ -15463,6 +15463,91 @@\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n+\n+;; Peephole optimizations to clean up after cmpstr*.  This should be\n+;; handled in combine, but it is not currently up to the task.\n+;; When used for their truth value, the cmpstr* expanders generate\n+;; code like this:\n+;;\n+;;   repz cmpsb\n+;;   seta \t%al\n+;;   setb \t%dl\n+;;   cmpb \t%al, %dl\n+;;   jcc\tlabel\n+;;\n+;; The intermediate three instructions are unnecessary.\n+\n+;; This one handles cmpstr*_nz_1...\n+(define_peephole2\n+  [(parallel[\n+     (set (reg:CC 17)\n+\t  (compare:CC (mem:BLK (match_operand 4 \"register_operand\" \"\"))\n+\t\t      (mem:BLK (match_operand 5 \"register_operand\" \"\"))))\n+     (use (match_operand 6 \"register_operand\" \"\"))\n+     (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n+     (use (reg:SI 19))\n+     (clobber (match_operand 0 \"register_operand\" \"\"))\n+     (clobber (match_operand 1 \"register_operand\" \"\"))\n+     (clobber (match_operand 2 \"register_operand\" \"\"))])\n+   (set (match_operand:QI 7 \"register_operand\" \"\")\n+\t(gtu:QI (reg:CC 17) (const_int 0)))\n+   (set (match_operand:QI 8 \"register_operand\" \"\")\n+\t(ltu:QI (reg:CC 17) (const_int 0)))\n+   (set (reg 17)\n+\t(compare (match_dup 7) (match_dup 8)))\n+  ]\n+  \"\"\n+  [(parallel[\n+     (set (reg:CC 17)\n+\t  (compare:CC (mem:BLK (match_dup 4))\n+\t\t      (mem:BLK (match_dup 5))))\n+     (use (match_dup 6))\n+     (use (match_dup 3))\n+     (use (reg:SI 19))\n+     (clobber (match_dup 0))\n+     (clobber (match_dup 1))\n+     (clobber (match_dup 2))])]\n+  \"\")\n+\n+;; ...and this one handles cmpstr*_1.\n+(define_peephole2\n+  [(parallel[\n+     (set (reg:CC 17)\n+\t  (if_then_else:CC (ne (match_operand 6 \"register_operand\" \"\")\n+\t\t\t       (const_int 0))\n+\t    (compare:CC (mem:BLK (match_operand 4 \"register_operand\" \"\"))\n+\t\t        (mem:BLK (match_operand 5 \"register_operand\" \"\")))\n+\t    (const_int 0)))\n+     (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n+     (use (reg:CC 17))\n+     (use (reg:SI 19))\n+     (clobber (match_operand 0 \"register_operand\" \"\"))\n+     (clobber (match_operand 1 \"register_operand\" \"\"))\n+     (clobber (match_operand 2 \"register_operand\" \"\"))])\n+   (set (match_operand:QI 7 \"register_operand\" \"\")\n+\t(gtu:QI (reg:CC 17) (const_int 0)))\n+   (set (match_operand:QI 8 \"register_operand\" \"\")\n+\t(ltu:QI (reg:CC 17) (const_int 0)))\n+   (set (reg 17)\n+\t(compare (match_dup 7) (match_dup 8)))\n+  ]\n+  \"\"\n+  [(parallel[\n+     (set (reg:CC 17)\n+\t  (if_then_else:CC (ne (match_dup 6)\n+\t\t\t       (const_int 0))\n+\t    (compare:CC (mem:BLK (match_dup 4))\n+\t\t\t(mem:BLK (match_dup 5)))\n+\t    (const_int 0)))\n+     (use (match_dup 3))\n+     (use (reg:CC 17))\n+     (use (reg:SI 19))\n+     (clobber (match_dup 0))\n+     (clobber (match_dup 1))\n+     (clobber (match_dup 2))])]\n+  \"\")\n+\n+\n \f\n ;; Conditional move instructions.\n "}]}