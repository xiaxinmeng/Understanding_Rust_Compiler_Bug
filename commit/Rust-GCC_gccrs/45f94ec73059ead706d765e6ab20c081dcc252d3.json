{"sha": "45f94ec73059ead706d765e6ab20c081dcc252d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVmOTRlYzczMDU5ZWFkNzA2ZDc2NWU2YWIyMGMwODFkY2MyNTJkMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-02-15T04:24:50Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-02-15T04:24:50Z"}, "message": "tree-sra.c (instantiate_missing_elements): Canonicalize bit-field types.\n\ngcc/ChangeLog:\n* tree-sra.c (instantiate_missing_elements): Canonicalize\nbit-field types.\n(sra_build_assignment): New.\n(generate_copy_inout, generate_element_copy,\ngenerate_element_zero, generate_one_element_init): Use it.\ngcc/testsuite/ChangeLog:\n* g++.dg/tree-ssa/sra-1.C: New.\n\nFrom-SVN: r121980", "tree": {"sha": "cb805c480dc5261c888d2381b9a4b32e576a4729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb805c480dc5261c888d2381b9a4b32e576a4729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45f94ec73059ead706d765e6ab20c081dcc252d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f94ec73059ead706d765e6ab20c081dcc252d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f94ec73059ead706d765e6ab20c081dcc252d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f94ec73059ead706d765e6ab20c081dcc252d3/comments", "author": null, "committer": null, "parents": [{"sha": "db9e0d2af65c2caafd568536b3613e7e729ab006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9e0d2af65c2caafd568536b3613e7e729ab006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9e0d2af65c2caafd568536b3613e7e729ab006"}], "stats": {"total": 95, "additions": 86, "deletions": 9}, "files": [{"sha": "5435c48233427030a52d657671bb5765567856b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45f94ec73059ead706d765e6ab20c081dcc252d3", "patch": "@@ -1,3 +1,19 @@\n+2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree-sra.c (instantiate_missing_elements): Canonicalize\n+\tbit-field types.\n+\t(sra_build_assignment): New.\n+\t(generate_copy_inout, generate_element_copy,\n+\tgenerate_element_zero, generate_one_element_init): Use it.\n+\n+2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree-sra.c (instantiate_missing_elements): Canonicalize\n+\tbit-field types.\n+\t(sra_build_assignment): New.\n+\t(generate_copy_inout, generate_element_copy,\n+\tgenerate_element_zero, generate_one_element_init): Use it.\n+\n 2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_finish): Accept namespaces as context of"}, {"sha": "bd936c062413e6319251c87b0b6ea7224e6a3e24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45f94ec73059ead706d765e6ab20c081dcc252d3", "patch": "@@ -1,3 +1,11 @@\n+2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/tree-ssa/sra-1.C: New.\n+\n+2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/tree-ssa/sra-1.C: New.\n+\n 2007-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* g++.dg/ext/interface4.C, g++.dg/ext/interface4.h: New."}, {"sha": "e3e3918eb78f2e7963f9d5fe2432b8f8651a0c9e", "filename": "gcc/testsuite/g++.dg/tree-ssa/sra-1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fsra-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fsra-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fsra-1.C?ref=45f94ec73059ead706d765e6ab20c081dcc252d3", "patch": "@@ -0,0 +1,29 @@\n+/* https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=223576 */\n+\n+/* SRA failed to canonicalize bit-field types, introducing type\n+   mismatches.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct A\n+{\n+  int a:16;\n+  /* These dummy bit-fields are here to prevent GCC 4.2+ from merging\n+     the bit-field compares into a single word compare, which disables\n+     SRA.  */\n+  int a2:16;\n+  int a3:16;\n+  int a4:16;\n+  int b:8;\n+  bool operator==(A const x) const\n+  {\n+    return (this->a == x.a && this->b == x.b);\n+  }\n+};\n+\n+bool\n+foo (A const x, A const y)\n+{\n+  return x == y;\n+}"}, {"sha": "364c76370b7a8bb77b8cd045cac1e445646aebe4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f94ec73059ead706d765e6ab20c081dcc252d3/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=45f94ec73059ead706d765e6ab20c081dcc252d3", "patch": "@@ -1,7 +1,8 @@\n /* Scalar Replacement of Aggregates (SRA) converts some structure\n    references into scalar references, exposing them to the scalar\n    optimizers.\n-   Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007\n+     Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n This file is part of GCC.\n@@ -1355,7 +1356,23 @@ instantiate_missing_elements (struct sra_elt *elt)\n \ttree f;\n \tfor (f = TYPE_FIELDS (type); f ; f = TREE_CHAIN (f))\n \t  if (TREE_CODE (f) == FIELD_DECL)\n-\t    instantiate_missing_elements_1 (elt, f, TREE_TYPE (f));\n+\t    {\n+\t      tree field_type = TREE_TYPE (f);\n+\n+\t      /* canonicalize_component_ref() unwidens some bit-field\n+\t\t types (not marked as DECL_BIT_FIELD in C++), so we\n+\t\t must do the same, lest we may introduce type\n+\t\t mismatches.  */\n+\t      if (INTEGRAL_TYPE_P (field_type)\n+\t\t  && DECL_MODE (f) != TYPE_MODE (field_type))\n+\t\tfield_type = TREE_TYPE (get_unwidened (build3 (COMPONENT_REF,\n+\t\t\t\t\t\t\t       field_type,\n+\t\t\t\t\t\t\t       elt->element,\n+\t\t\t\t\t\t\t       f, NULL_TREE),\n+\t\t\t\t\t\t       NULL_TREE));\n+\n+\t      instantiate_missing_elements_1 (elt, f, field_type);\n+\t    }\n \tbreak;\n       }\n \n@@ -1706,6 +1723,14 @@ generate_element_ref (struct sra_elt *elt)\n     return elt->element;\n }\n \n+static tree\n+sra_build_assignment (tree dst, tree src)\n+{\n+  gcc_assert (TYPE_CANONICAL (TYPE_MAIN_VARIANT (TREE_TYPE (dst)))\n+\t      == TYPE_CANONICAL (TYPE_MAIN_VARIANT (TREE_TYPE (src))));\n+  return build2 (GIMPLE_MODIFY_STMT, void_type_node, dst, src);\n+}\n+\n /* Generate a set of assignment statements in *LIST_P to copy all\n    instantiated elements under ELT to or from the equivalent structure\n    rooted at EXPR.  COPY_OUT controls the direction of the copy, with\n@@ -1729,16 +1754,16 @@ generate_copy_inout (struct sra_elt *elt, bool copy_out, tree expr,\n       i = c->replacement;\n \n       t = build2 (COMPLEX_EXPR, elt->type, r, i);\n-      t = build2 (GIMPLE_MODIFY_STMT, void_type_node, expr, t);\n+      t = sra_build_assignment (expr, t);\n       SSA_NAME_DEF_STMT (expr) = t;\n       append_to_statement_list (t, list_p);\n     }\n   else if (elt->replacement)\n     {\n       if (copy_out)\n-\tt = build2 (GIMPLE_MODIFY_STMT, void_type_node, elt->replacement, expr);\n+\tt = sra_build_assignment (elt->replacement, expr);\n       else\n-\tt = build2 (GIMPLE_MODIFY_STMT, void_type_node, expr, elt->replacement);\n+\tt = sra_build_assignment (expr, elt->replacement);\n       append_to_statement_list (t, list_p);\n     }\n   else\n@@ -1773,8 +1798,7 @@ generate_element_copy (struct sra_elt *dst, struct sra_elt *src, tree *list_p)\n \n       gcc_assert (src->replacement);\n \n-      t = build2 (GIMPLE_MODIFY_STMT, void_type_node, dst->replacement,\n-\t\t  src->replacement);\n+      t = sra_build_assignment (dst->replacement, src->replacement);\n       append_to_statement_list (t, list_p);\n     }\n }\n@@ -1805,7 +1829,7 @@ generate_element_zero (struct sra_elt *elt, tree *list_p)\n       gcc_assert (elt->is_scalar);\n       t = fold_convert (elt->type, integer_zero_node);\n \n-      t = build2 (GIMPLE_MODIFY_STMT, void_type_node, elt->replacement, t);\n+      t = sra_build_assignment (elt->replacement, t);\n       append_to_statement_list (t, list_p);\n     }\n }\n@@ -1817,7 +1841,7 @@ static void\n generate_one_element_init (tree var, tree init, tree *list_p)\n {\n   /* The replacement can be almost arbitrarily complex.  Gimplify.  */\n-  tree stmt = build2 (GIMPLE_MODIFY_STMT, void_type_node, var, init);\n+  tree stmt = sra_build_assignment (var, init);\n   gimplify_and_add (stmt, list_p);\n }\n "}]}