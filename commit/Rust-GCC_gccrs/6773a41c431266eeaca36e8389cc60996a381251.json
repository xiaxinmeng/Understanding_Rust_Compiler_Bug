{"sha": "6773a41c431266eeaca36e8389cc60996a381251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3M2E0MWM0MzEyNjZlZWFjYTM2ZTgzODljYzYwOTk2YTM4MTI1MQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2003-09-23T19:17:49Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2003-09-23T19:17:49Z"}, "message": "target.h (struct gcc_target): New member external_libcall.\n\n\t* target.h (struct gcc_target): New member external_libcall.\n\t* target-def.h (TARGET_ASM_EXTERNAL_LIBCALL): Provide default.\n\t(TARGET_ASM_OUT): Use it.\n\t* doc/tm.texi (TARGET_ASM_EXTERNAL_LIBCALL): Document.\n\t* targhooks.c: Convert to ISO C 90.\n\t(default_external_libcall): New function.\n\t* targhooks.h (default_external_libcall): Declare.\n\t* varasm.c (assemble_external_libcall): Use\n\ttargetm.asm_out.external_libcall instead of\n\tASM_OUTPUT_EXTERNAL_LIBCALL.\n\t* config/mips/mips-protos.h [TARGET_IRIX5 || TARGET_IRIX 6]\n\t(mips_output_external_libcall): Declare.\n\t* config/mips/mips.c (mips_output_external_libcall): Change\n\tdefinition guard.\n\tChange to match TARGET_ASM_EXTERNAL_LIBCALL.\n\tOnly operate for O32 ABI.\n\t* config/mips/iris5.h (TARGET_ASM_EXTERNAL_LIBCALL): Define\n\tinstead of ASM_OUTPUT_EXTERNAL_LIBCALL.\n\t* config/mips/iris6.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Don't undef,\n\tsuperceded by TARGET_ASM_EXTERNAL_LIBCALL.\n\nFrom-SVN: r71689", "tree": {"sha": "715dfc6d43d67f4a0e0c332509b5531869b36669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/715dfc6d43d67f4a0e0c332509b5531869b36669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6773a41c431266eeaca36e8389cc60996a381251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6773a41c431266eeaca36e8389cc60996a381251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6773a41c431266eeaca36e8389cc60996a381251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6773a41c431266eeaca36e8389cc60996a381251/comments", "author": null, "committer": null, "parents": [{"sha": "8c8a95ffca3cc0dddb579d4f8a63ae25fb040061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8a95ffca3cc0dddb579d4f8a63ae25fb040061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8a95ffca3cc0dddb579d4f8a63ae25fb040061"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "6790ecc0de9eec2167c06ce2f88640ad96bd8ca1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -1,3 +1,26 @@\n+2003-09-23  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* target.h (struct gcc_target): New member external_libcall.\n+\t* target-def.h (TARGET_ASM_EXTERNAL_LIBCALL): Provide default.\n+\t(TARGET_ASM_OUT): Use it.\n+\t* doc/tm.texi (TARGET_ASM_EXTERNAL_LIBCALL): Document.\n+\t* targhooks.c: Convert to ISO C 90.\n+\t(default_external_libcall): New function.\n+\t* targhooks.h (default_external_libcall): Declare.\n+\t* varasm.c (assemble_external_libcall): Use\n+\ttargetm.asm_out.external_libcall instead of\n+\tASM_OUTPUT_EXTERNAL_LIBCALL.\n+\t* config/mips/mips-protos.h [TARGET_IRIX5 || TARGET_IRIX 6]\n+\t(mips_output_external_libcall): Declare.\n+\t* config/mips/mips.c (mips_output_external_libcall): Change\n+\tdefinition guard.\n+\tChange to match TARGET_ASM_EXTERNAL_LIBCALL.\n+\tOnly operate for O32 ABI.\n+\t* config/mips/iris5.h (TARGET_ASM_EXTERNAL_LIBCALL): Define\n+\tinstead of ASM_OUTPUT_EXTERNAL_LIBCALL.\n+\t* config/mips/iris6.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Don't undef,\n+\tsuperceded by TARGET_ASM_EXTERNAL_LIBCALL.\n+\n 2003-09-22  Nathnael Nerode  <neroden@gcc.gnu.org>\n \n \t* config.host: Allow unknown hosts (not targets).  Allow"}, {"sha": "00802c2e39ab6ae6bf1a013d27bbd09679d1321f", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -215,8 +215,8 @@ do {\t\t\t\t\t\t\\\n } while (0)\n \n /* Also do this for libcalls.  */\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n-  mips_output_external_libcall (FILE, XSTR (FUN, 0))\n+#undef TARGET_ASM_EXTERNAL_LIBCALL\n+#define TARGET_ASM_EXTERNAL_LIBCALL mips_output_external_libcall\n \n /* This does for functions what ASM_DECLARE_OBJECT_NAME does for variables.\n    This is used indirectly by ASM_OUTPUT_EXTERNAL.  */"}, {"sha": "5ba1e120b7266c505df1d5055c7e1e8463710cfd", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -178,7 +178,6 @@ Boston, MA 02111-1307, USA.  */\n /* IRIX 5 stuff that we don't need for IRIX 6.  */\n /* ??? We do need this for the -mabi=32 switch though.  */\n #undef ASM_OUTPUT_UNDEF_FUNCTION\n-#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #undef ASM_DECLARE_FUNCTION_SIZE\n \n /* Stuff we need for IRIX 6 that isn't in IRIX 5.  */"}, {"sha": "27f3159d421e985f35b4260effa7de1f69171239", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -98,8 +98,8 @@ extern HOST_WIDE_INT mips_debugger_offset (rtx, HOST_WIDE_INT);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern int mips_output_external (FILE *, tree, const char *);\n-#ifdef ASM_OUTPUT_UNDEF_FUNCTION\n-extern int mips_output_external_libcall (FILE *, const char *);\n+#if TARGET_IRIX5 || TARGET_IRIX6\n+extern void mips_output_external_libcall (rtx);\n #endif\n extern void mips_output_filename (FILE *, const char *);\n extern void mips_output_lineno (FILE *, int);"}, {"sha": "0f0a6803813694971acc9b319c6f8306f2cad2ec", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -5517,19 +5517,20 @@ mips_output_external (FILE *file ATTRIBUTE_UNUSED, tree decl, const char *name)\n   return 0;\n }\n \n-#ifdef ASM_OUTPUT_UNDEF_FUNCTION\n-int\n-mips_output_external_libcall (FILE *file ATTRIBUTE_UNUSED, const char *name)\n+#if TARGET_IRIX5 || TARGET_IRIX6\n+void\n+mips_output_external_libcall (rtx fun)\n {\n   register struct extern_list *p;\n \n-  p = (struct extern_list *) ggc_alloc (sizeof (struct extern_list));\n-  p->next = extern_head;\n-  p->name = name;\n-  p->size = -1;\n-  extern_head = p;\n-\n-  return 0;\n+  if (mips_abi == ABI_32)\n+    {\n+      p = (struct extern_list *) ggc_alloc (sizeof (struct extern_list));\n+      p->next = extern_head;\n+      p->name = XSTR (fun, 0);\n+      p->size = -1;\n+      extern_head = p;\n+    }\n }\n #endif\n \f"}, {"sha": "582953b7bb5a1ee1ffa455b3c92c50e2260da341", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -6729,15 +6729,11 @@ This macro need not be defined if it does not need to output anything.\n The GNU assembler and most Unix assemblers don't require anything.\n @end defmac\n \n-@defmac ASM_OUTPUT_EXTERNAL_LIBCALL (@var{stream}, @var{symref})\n-A C statement (sans semicolon) to output on @var{stream} an assembler\n+@deftypefn {Target Hook} void TARGET_ASM_EXTERNAL_LIBCALL (rtx @var{symref})\n+This target hook is a function to output to @var{asm_out_file} an assembler\n pseudo-op to declare a library function name external.  The name of the\n-library function is given by @var{symref}, which has type @code{rtx} and\n-is a @code{symbol_ref}.\n-\n-This macro need not be defined if it does not need to output anything.\n-The GNU assembler and most Unix assemblers don't require anything.\n-@end defmac\n+library function is given by @var{symref}, which is a @code{symbol_ref}.\n+@end deftypefn\n \n @defmac ASM_OUTPUT_LABELREF (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "aa2d96a59048e4d5e670e2bbb9e545bacd397d4c", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -166,6 +166,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE false\n #endif\n \n+#ifndef TARGET_ASM_EXTERNAL_LIBCALL\n+#define TARGET_ASM_EXTERNAL_LIBCALL default_external_libcall\n+#endif\n+\n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n@@ -202,7 +206,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n                         TARGET_ASM_OUTPUT_MI_THUNK,             \\\n                         TARGET_ASM_CAN_OUTPUT_MI_THUNK,         \\\n                         TARGET_ASM_FILE_START,                  \\\n-                        TARGET_ASM_FILE_END}\n+                        TARGET_ASM_FILE_END,\t\t\t\\\n+\t\t\tTARGET_ASM_EXTERNAL_LIBCALL}\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "7ccca94150b25c508cd05ec0b0d7acc3bc4d7203", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -148,6 +148,10 @@ struct gcc_target\n     /* Output any boilerplate text needed at the end of a\n        translation unit.  */\n     void (*file_end) (void);\n+\n+    /* Output an assembler pseudo-op to declare a library function name\n+       external.  */\n+    void (*external_libcall) (rtx);\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}, {"sha": "b1955690818ec187dd90ff038e979db7d0474090", "filename": "gcc/targhooks.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -61,9 +61,16 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"target-def.h\"\n \n+void\n+default_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n+{\n+#ifdef ASM_OUTPUT_EXTERNAL_LIBCALL\n+  ASM_OUTPUT_EXTERNAL_LIBCALL(asm_out_file, fun);\n+#endif\n+}\n+\n bool\n-default_promote_function_args (fntype)\n-     tree fntype ATTRIBUTE_UNUSED;\n+default_promote_function_args (tree fntype ATTRIBUTE_UNUSED)\n {\n #ifdef PROMOTE_FUNCTION_ARGS\n   return true;\n@@ -73,8 +80,7 @@ default_promote_function_args (fntype)\n }\n \n bool\n-default_promote_function_return (fntype)\n-     tree fntype ATTRIBUTE_UNUSED;\n+default_promote_function_return (tree fntype ATTRIBUTE_UNUSED)\n {\n #ifdef PROMOTE_FUNCTION_RETURN\n   return true;\n@@ -84,8 +90,7 @@ default_promote_function_return (fntype)\n }\n \n bool\n-default_promote_prototypes (fntype)\n-     tree fntype ATTRIBUTE_UNUSED;\n+default_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n {\n   if (PROMOTE_PROTOTYPES)\n     return true;"}, {"sha": "0d7b276a9a417841c72ceee00d51bc78e3450a1a", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -18,6 +18,8 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+extern void default_external_libcall (rtx);\n+\n extern bool default_promote_function_args (tree);\n extern bool default_promote_function_return (tree);\n extern bool default_promote_prototypes (tree);"}, {"sha": "059ba5027aa12849867534de58c144057d6a8c07", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6773a41c431266eeaca36e8389cc60996a381251/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6773a41c431266eeaca36e8389cc60996a381251", "patch": "@@ -1621,16 +1621,14 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n /* Similar, for calling a library function FUN.  */\n \n void\n-assemble_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n+assemble_external_libcall (rtx fun)\n {\n-#ifdef ASM_OUTPUT_EXTERNAL_LIBCALL\n   /* Declare library function name external when first used, if nec.  */\n   if (! SYMBOL_REF_USED (fun))\n     {\n       SYMBOL_REF_USED (fun) = 1;\n-      ASM_OUTPUT_EXTERNAL_LIBCALL (asm_out_file, fun);\n+      (*targetm.asm_out.external_libcall) (fun);\n     }\n-#endif\n }\n \n /* Assemble a label named NAME.  */"}]}