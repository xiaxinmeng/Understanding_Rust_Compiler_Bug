{"sha": "ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4MTdhOGJkMmE4ZjY0ZmYyMjIyMGMzY2U3MjAyM2Y4M2U5N2UwYg==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-10-31T00:38:10Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-10-31T00:38:10Z"}, "message": "re PR target/41885 (AVR Rotate patterns do not correctly consider overlap.)\n\nPR target/41885\n* gcc.target/avr/torture/pr41885.c: New test.\n\nFrom-SVN: r153773", "tree": {"sha": "91286e48340e83e2ddf897b5fd4c8356e68d2c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91286e48340e83e2ddf897b5fd4c8356e68d2c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b/comments", "author": null, "committer": null, "parents": [{"sha": "c405f6cdf3c48134147fef389298437cbb879207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c405f6cdf3c48134147fef389298437cbb879207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c405f6cdf3c48134147fef389298437cbb879207"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "042b4eca675f31ebe56a23a1c572e8124cd60283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "patch": "@@ -1,3 +1,9 @@\n+2009-10-30  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n+\n+\tPR target/41885\n+\t* gcc.target/avr/torture/pr41885.c: New test.\n+\n+\n 2009-10-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/pack5.ads: New test."}, {"sha": "90d00121255b37ad37b93098f45626597382cb10", "filename": "gcc/testsuite/gcc.target/avr/torture/pr41885.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr41885.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee817a8bd2a8f64ff22220c3ce72023f83e97e0b/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr41885.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr41885.c?ref=ee817a8bd2a8f64ff22220c3ce72023f83e97e0b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-options \"-w -std=c99\" } */\n+/* { dg-do run } */\n+\n+#include <limits.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+\n+uint16_t rotl_16a (uint16_t x)\n+{\n+    return (x << 8) | (x >> 8);\n+}\n+uint16_t rotl_16b (short dummy, uint16_t x)\n+{\n+    return (x << 8) | (x >> 8);\n+}\n+\n+uint32_t rotl_32a (uint32_t x)\n+{\n+    return (x << 8) | (x >> 24);\n+}\n+uint32_t rotl_32b (short dummy, uint32_t x)\n+{\n+    return (x << 8) | (x >> 24);\n+}\n+uint32_t rotl_32c (short dummy, uint32_t x)\n+{\n+    return (x << 16) | (x >> 16);\n+}\n+uint32_t rotl_32d (short dummy, uint32_t x)\n+{\n+    return (x << 24) | (x >> 8);\n+}\n+uint32_t rotl_32e (long dummy, uint32_t x)\n+{\n+    return (x << 24) | (x >> 8);\n+}\n+\n+uint64_t rotl_64 (uint64_t x)\n+{\n+    return (x << 56) | (x >> 8);\n+}\n+\n+uint64_t rotl_64a (short dummy, uint64_t x)\n+{\n+    return (x << 56) | (x >> 8);\n+}\n+uint64_t rotl_64b (short dummy, uint64_t x)\n+{\n+    return (x << 48) | (x >> 16);\n+}\n+uint64_t rotl_64c (short dummy, uint64_t x)\n+{\n+    return (x << 40) | (x >> 24);\n+}\n+uint64_t rotl_64d (short dummy, uint64_t x)\n+{\n+    return (x << 32) | (x >> 32);\n+}\n+uint64_t rotl_64e (short dummy, uint64_t x)\n+{\n+    return (x << 24) | (x >> 40);\n+}\n+uint64_t rotl_64f (short dummy, uint64_t x)\n+{\n+    return (x << 16) | (x >> 48);\n+}\n+uint64_t rotl_64g (short dummy, uint64_t x)\n+{\n+    return (x << 8) | (x >> 56);\n+}\n+uint64_t rotl_64h (long dummy, uint64_t x)\n+{\n+    return (x << 16) | (x >> 48);\n+}\n+ \n+\n+\n+\n+int main (void)\n+{\n+  if (rotl_16a(0x1234) != 0x3412)\n+    abort();\n+  if (rotl_16b(0xAA55,0x1234) != 0x3412)\n+    abort();\n+\n+uint32_t num32 = 0x12345678;  \n+\n+  if (rotl_32a(num32) != 0x34567812)\n+    abort();\n+  if (rotl_32b(0xAA55,num32) != 0x34567812)\n+    abort();\n+  if (rotl_32c(0xAA55,num32) != 0x56781234)\n+    abort();\n+  if (rotl_32d(0xAA55,num32) != 0x78123456)\n+    abort();\n+  if (rotl_32e(0x1122AA55,num32) != 0x78123456)\n+    abort();\n+\n+uint64_t num = 0x123456789ABCDEF0ULL;\n+\n+ if (rotl_64(num) != 0xF0123456789ABCDEULL)\n+    abort();\n+ if (rotl_64a(0xAA55,num) != 0xF0123456789ABCDEULL)\n+    abort();\n+ if (rotl_64b(0xAA55,num) != 0xDEF0123456789ABCULL)\n+    abort();\n+ if (rotl_64c(0xAA55,num) != 0xBCDEF0123456789AULL)\n+    abort();\n+ if (rotl_64d(0xAA55,num) != 0x9ABCDEF012345678ULL)\n+    abort();\n+ if (rotl_64e(0xAA55,num) != 0x789ABCDEF0123456ULL)\n+    abort();\n+ if (rotl_64f(0xAA55,num) != 0x56789ABCDEF01234ULL)\n+    abort();\n+ if (rotl_64g(0xAA55,num) != 0x3456789ABCDEF012ULL)\n+    abort();\n+ if (rotl_64h(0x1122AA55,num) != 0x56789ABCDEF01234ULL)\n+    abort();\n+\n+  exit (0);\n+}\n+"}]}