{"sha": "94ced5b494676c8763bb28fe615084c19cec1eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjZWQ1YjQ5NDY3NmM4NzYzYmIyOGZlNjE1MDg0YzE5Y2VjMWViMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-22T03:45:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-22T03:45:48Z"}, "message": "PR c++/71274 - deprecated warning without use.\n\n\t* decl2.c (maybe_instantiate_decl): Split out from mark_used.\n\t(decl_constant_var_p): Use it instead.\n\nFrom-SVN: r238623", "tree": {"sha": "2471851599a50c25703da0419ac53f87d8bf96df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2471851599a50c25703da0419ac53f87d8bf96df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ced5b494676c8763bb28fe615084c19cec1eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ced5b494676c8763bb28fe615084c19cec1eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ced5b494676c8763bb28fe615084c19cec1eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ced5b494676c8763bb28fe615084c19cec1eb0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44ed47547a1cb981faa264b9c29bd52c2f2891af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ed47547a1cb981faa264b9c29bd52c2f2891af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ed47547a1cb981faa264b9c29bd52c2f2891af"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "603758cbd908f42867360a8611123a625b3e40b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94ced5b494676c8763bb28fe615084c19cec1eb0", "patch": "@@ -1,5 +1,9 @@\n 2016-07-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71274\n+\t* decl2.c (maybe_instantiate_decl): Split out from mark_used.\n+\t(decl_constant_var_p): Use it instead.\n+\n \tPR c++/71630\n \t* pt.c (instantiate_decl): Fix pattern_defined for namespace scope\n \tvariable templates."}, {"sha": "2ff6f53ba4ff3dc105b455f0584a19270982f86b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=94ced5b494676c8763bb28fe615084c19cec1eb0", "patch": "@@ -81,6 +81,7 @@ static tree get_guard_bits (tree);\n static void determine_visibility_from_class (tree, tree);\n static bool determine_hidden_inline (tree);\n static bool decl_defined_p (tree);\n+static void maybe_instantiate_decl (tree);\n \n /* A list of static class variables.  This is needed, because a\n    static class variable can be declared inside the class without\n@@ -4217,7 +4218,7 @@ decl_constant_var_p (tree decl)\n      in the case of a constexpr variable, we can't treat it as a\n      constant until its initializer is complete in case it's used in\n      its own initializer.  */\n-  mark_used (decl);\n+  maybe_instantiate_decl (decl);\n   return DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl);\n }\n \n@@ -5057,6 +5058,38 @@ possibly_inlined_p (tree decl)\n   return true;\n }\n \n+/* Normally, we can wait until instantiation-time to synthesize DECL.\n+   However, if DECL is a static data member initialized with a constant\n+   or a constexpr function, we need it right now because a reference to\n+   such a data member or a call to such function is not value-dependent.\n+   For a function that uses auto in the return type, we need to instantiate\n+   it to find out its type.  For OpenMP user defined reductions, we need\n+   them instantiated for reduction clauses which inline them by hand\n+   directly.  */\n+\n+static void\n+maybe_instantiate_decl (tree decl)\n+{\n+  if (DECL_LANG_SPECIFIC (decl)\n+      && DECL_TEMPLATE_INFO (decl)\n+      && (decl_maybe_constant_var_p (decl)\n+\t  || (TREE_CODE (decl) == FUNCTION_DECL\n+\t      && DECL_OMP_DECLARE_REDUCTION_P (decl))\n+\t  || undeduced_auto_decl (decl))\n+      && !DECL_DECLARED_CONCEPT_P (decl)\n+      && !uses_template_parms (DECL_TI_ARGS (decl)))\n+    {\n+      /* Instantiating a function will result in garbage collection.  We\n+\t must treat this situation as if we were within the body of a\n+\t function so as to avoid collecting live data only referenced from\n+\t the stack (such as overload resolution candidates).  */\n+      ++function_depth;\n+      instantiate_decl (decl, /*defer_ok=*/false,\n+\t\t\t/*expl_inst_class_mem_p=*/false);\n+      --function_depth;\n+    }\n+}\n+\n /* Mark DECL (either a _DECL or a BASELINK) as \"used\" in the program.\n    If DECL is a specialization or implicitly declared class member,\n    generate the actual definition.  Return false if something goes\n@@ -5151,24 +5184,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n      it to find out its type.  For OpenMP user defined reductions, we need\n      them instantiated for reduction clauses which inline them by hand\n      directly.  */\n-  if (DECL_LANG_SPECIFIC (decl)\n-      && DECL_TEMPLATE_INFO (decl)\n-      && (decl_maybe_constant_var_p (decl)\n-\t  || (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_OMP_DECLARE_REDUCTION_P (decl))\n-\t  || undeduced_auto_decl (decl))\n-      && !DECL_DECLARED_CONCEPT_P (decl)\n-      && !uses_template_parms (DECL_TI_ARGS (decl)))\n-    {\n-      /* Instantiating a function will result in garbage collection.  We\n-\t must treat this situation as if we were within the body of a\n-\t function so as to avoid collecting live data only referenced from\n-\t the stack (such as overload resolution candidates).  */\n-      ++function_depth;\n-      instantiate_decl (decl, /*defer_ok=*/false,\n-\t\t\t/*expl_inst_class_mem_p=*/false);\n-      --function_depth;\n-    }\n+  maybe_instantiate_decl (decl);\n \n   if (processing_template_decl || in_template_function ())\n     return true;"}, {"sha": "56522905afa57e2a736d91c0b3bbee7bdd6418a5", "filename": "gcc/testsuite/g++.dg/warn/deprecated-11.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ced5b494676c8763bb28fe615084c19cec1eb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-11.C?ref=94ced5b494676c8763bb28fe615084c19cec1eb0", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/71274\n+// { dg-options -Wdeprecated-declarations }\n+\n+struct foo\n+{\n+   __attribute__ ((deprecated)) static const int a;\n+};"}]}