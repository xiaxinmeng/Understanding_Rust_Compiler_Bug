{"sha": "b8bb61560577c1503878fb0ba4d505b67fbd569d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiYjYxNTYwNTc3YzE1MDM4NzhmYjBiYTRkNTA1YjY3ZmJkNTY5ZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-21T18:04:53Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-21T18:04:53Z"}, "message": "rs6000.md (div<mode>3): Fix comment.\n\n2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.md (div<mode>3): Fix comment.  Use a different\n\tinsn for divides by integer powers of two.\n\t(div<mode>3_sra, *div<mode>3_sra_dot, *div<mode>3_sra_dot2): New.\n\t(mod<mode>3): Fix formatting.\n\t(three anonymous define_insn and two define_split): Delete.\n\nFrom-SVN: r215437", "tree": {"sha": "429834393007908b1f9f464a48582dafd951e758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/429834393007908b1f9f464a48582dafd951e758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8bb61560577c1503878fb0ba4d505b67fbd569d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bb61560577c1503878fb0ba4d505b67fbd569d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bb61560577c1503878fb0ba4d505b67fbd569d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bb61560577c1503878fb0ba4d505b67fbd569d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b281c53c79520591674dfcc90b3856f15167ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b281c53c79520591674dfcc90b3856f15167ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b281c53c79520591674dfcc90b3856f15167ce3"}], "stats": {"total": 155, "additions": 79, "deletions": 76}, "files": [{"sha": "944352da24062b5a1a4d7c11af46426605a545af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bb61560577c1503878fb0ba4d505b67fbd569d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bb61560577c1503878fb0ba4d505b67fbd569d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8bb61560577c1503878fb0ba4d505b67fbd569d", "patch": "@@ -1,3 +1,11 @@\n+2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (div<mode>3): Fix comment.  Use a different\n+\tinsn for divides by integer powers of two.\n+\t(div<mode>3_sra, *div<mode>3_sra_dot, *div<mode>3_sra_dot2): New.\n+\t(mod<mode>3): Fix formatting.\n+\t(three anonymous define_insn and two define_split): Delete.\n+\n 2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (ashr<mode>3, *ashr<mode>3, *ashrsi3_64,"}, {"sha": "ae33e557e957f9b28de6119e00cdb745b0dcb02b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 71, "deletions": 76, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bb61560577c1503878fb0ba4d505b67fbd569d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bb61560577c1503878fb0ba4d505b67fbd569d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b8bb61560577c1503878fb0ba4d505b67fbd569d", "patch": "@@ -2488,7 +2488,7 @@\n    (set_attr \"size\" \"<bits>\")])\n \n \n-;; For powers of two we can do srai/aze for divide and then adjust for\n+;; For powers of two we can do sra[wd]i/addze for divide and then adjust for\n ;; modulus.  If it isn't a power of two, force operands into register and do\n ;; a normal divide.\n (define_expand \"div<mode>3\"\n@@ -2497,10 +2497,15 @@\n \t\t (match_operand:GPR 2 \"reg_or_cint_operand\" \"\")))]\n   \"\"\n {\n-  if (GET_CODE (operands[2]) != CONST_INT\n-      || INTVAL (operands[2]) <= 0\n-      || exact_log2 (INTVAL (operands[2])) < 0)\n-    operands[2] = force_reg (<MODE>mode, operands[2]);\n+  if (CONST_INT_P (operands[2])\n+      && INTVAL (operands[2]) > 0\n+      && exact_log2 (INTVAL (operands[2])) >= 0)\n+    {\n+      emit_insn (gen_div<mode>3_sra (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+\n+  operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n (define_insn \"*div<mode>3\"\n@@ -2512,12 +2517,71 @@\n   [(set_attr \"type\" \"div\")\n    (set_attr \"size\" \"<bits>\")])\n \n+(define_insn \"div<mode>3_sra\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:GPR 2 \"exact_log2_cint_operand\" \"N\")))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"\"\n+  \"sra<wd>i %0,%1,%p2\\;addze %0,%0\"\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn_and_split \"*div<mode>3_sra_dot\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t     (match_operand:GPR 2 \"exact_log2_cint_operand\" \"N,N\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:GPR 0 \"=r,r\"))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"<MODE>mode == Pmode\"\n+  \"@\n+   sra<wd>i %0,%1,%p2\\;addze. %0,%0\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (div:GPR (match_dup 1)\n+\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:GPR CA_REGNO))])\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"cell_micro\" \"not\")])\n+\n+(define_insn_and_split \"*div<mode>3_sra_dot2\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t     (match_operand:GPR 2 \"exact_log2_cint_operand\" \"N,N\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(div:GPR (match_dup 1)\n+\t\t (match_dup 2)))\n+   (clobber (reg:GPR CA_REGNO))]\n+  \"<MODE>mode == Pmode\"\n+  \"@\n+   sra<wd>i %0,%1,%p2\\;addze. %0,%0\n+   #\"\n+  \"&& reload_completed && cc_reg_not_cr0_operand (operands[3], CCmode)\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (div:GPR (match_dup 1)\n+\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:GPR CA_REGNO))])\n+   (set (match_dup 3)\n+\t(compare:CC (match_dup 0)\n+\t\t    (const_int 0)))]\n+  \"\"\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"cell_micro\" \"not\")])\n+\n (define_expand \"mod<mode>3\"\n   [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:GPR 1 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:GPR 2 \"reg_or_cint_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   int i;\n   rtx temp1;\n@@ -2535,76 +2599,7 @@\n   emit_insn (gen_ashl<mode>3 (temp2, temp1, GEN_INT (i)));\n   emit_insn (gen_sub<mode>3 (operands[0], operands[1], temp2));\n   DONE;\n-}\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n-\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t\t (match_operand:GPR 2 \"exact_log2_cint_operand\" \"N\")))]\n-  \"\"\n-  \"sra<wd>i %0,%1,%p2\\;addze %0,%0\"\n-  [(set_attr \"type\" \"two\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (div:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:P 2 \"exact_log2_cint_operand\" \"N,N\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:P 3 \"=r,r\"))]\n-  \"\"\n-  \"@\n-   sra<wd>i %3,%1,%p2\\;addze. %3,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")\n-   (set_attr \"cell_micro\" \"not\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:GPR 2 \"exact_log2_cint_operand\"\n-\t\t\t      \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:GPR 3 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n-\t(div:<MODE> (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (div:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:P 2 \"exact_log2_cint_operand\" \"N,N\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(div:P (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  \"@\n-   sra<wd>i %0,%1,%p2\\;addze. %0,%0\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")\n-   (set_attr \"cell_micro\" \"not\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:GPR 2 \"exact_log2_cint_operand\"\n-\t\t\t      \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(div:GPR (match_dup 1) (match_dup 2)))]\n-  \"reload_completed\"\n-  [(set (match_dup 0)\n-\t(div:<MODE> (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n+})\n \f\n ;; Logical instructions\n ;; The logical instructions are mostly combined by using match_operator,"}]}