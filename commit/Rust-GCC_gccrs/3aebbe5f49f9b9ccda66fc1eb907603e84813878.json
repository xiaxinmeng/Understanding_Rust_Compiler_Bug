{"sha": "3aebbe5f49f9b9ccda66fc1eb907603e84813878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlYmJlNWY0OWY5YjljY2RhNjZmYzFlYjkwNzYwM2U4NDgxMzg3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-30T14:30:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-30T14:30:21Z"}, "message": "function.c (stack_protect_epilogue): Pass label to stack_protect_test, assume it emitted also the conditional branch.\n\n\t* function.c (stack_protect_epilogue): Pass label to\n\tstack_protect_test, assume it emitted also the conditional\n\tbranch.\n\t* doc/md.texi (stack_protect_test): Adjust documentation.\n\t* config/i386/i386.md (stack_protect_test): Add third argument,\n\temit beq with operands[2].\n\t* config/rs6000/rs6000.h (FRAME_GROWS_DOWNWARD): Define to\n\tflag_stack_protect != 0.\n\t* config/rs6000/rs6000.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New\n\tconstants.\n\t(stack_protect_set, stack_protect_test): New expanders.\n\t(stack_protect_setsi, stack_protect_setdi, stack_protect_testsi,\n\tstack_protect_testdi): New insns.\n\t* config/rs6000/rs6000.c (rs6000_stack_protect_fail): New function.\n\t(TARGET_STACK_PROTECT_FAIL): Define.\n\t(rs6000_generate_compare): Handle UNSPEC_SP_TEST.\n\nFrom-SVN: r101468", "tree": {"sha": "4043695a51d7d9562a87d61e43938fa5c73948dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4043695a51d7d9562a87d61e43938fa5c73948dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aebbe5f49f9b9ccda66fc1eb907603e84813878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aebbe5f49f9b9ccda66fc1eb907603e84813878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aebbe5f49f9b9ccda66fc1eb907603e84813878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aebbe5f49f9b9ccda66fc1eb907603e84813878/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d5175e1e494e0a514019347723b7afc34a459db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5175e1e494e0a514019347723b7afc34a459db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5175e1e494e0a514019347723b7afc34a459db"}], "stats": {"total": 139, "additions": 128, "deletions": 11}, "files": [{"sha": "54cc32c2dc804f4d95b5281d2d50036181cd0ea3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -1,5 +1,22 @@\n 2005-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* function.c (stack_protect_epilogue): Pass label to\n+\tstack_protect_test, assume it emitted also the conditional\n+\tbranch.\n+\t* doc/md.texi (stack_protect_test): Adjust documentation.\n+\t* config/i386/i386.md (stack_protect_test): Add third argument,\n+\temit beq with operands[2].\n+\t* config/rs6000/rs6000.h (FRAME_GROWS_DOWNWARD): Define to\n+\tflag_stack_protect != 0.\n+\t* config/rs6000/rs6000.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New\n+\tconstants.\n+\t(stack_protect_set, stack_protect_test): New expanders.\n+\t(stack_protect_setsi, stack_protect_setdi, stack_protect_testsi,\n+\tstack_protect_testdi): New insns.\n+\t* config/rs6000/rs6000.c (rs6000_stack_protect_fail): New function.\n+\t(TARGET_STACK_PROTECT_FAIL): Define.\n+\t(rs6000_generate_compare): Handle UNSPEC_SP_TEST.\n+\n \t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Increment.\n \t(DWARF_FRAME_REGISTERS, DWARF_REG_TO_UNWIND_COLUMN): Adjust, so\n \tthat addition of sfp doesn't change these."}, {"sha": "02315657ee6eb967e5acf2bc7f10856640a631d4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -19640,7 +19640,8 @@\n \n (define_expand \"stack_protect_test\"\n   [(match_operand 0 \"memory_operand\" \"\")\n-   (match_operand 1 \"memory_operand\" \"\")]\n+   (match_operand 1 \"memory_operand\" \"\")\n+   (match_operand 2 \"\" \"\")]\n   \"\"\n {\n   rtx flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n@@ -19652,6 +19653,7 @@\n     emit_insn (gen_stack_protect_test_di (flags, operands[0], operands[1]));\n   else\n     emit_insn (gen_stack_protect_test_si (flags, operands[0], operands[1]));\n+  emit_jump_insn (gen_beq (operands[2]));\n   DONE;\n })\n "}, {"sha": "2c71ab16b255d8c6d775c924ed572638276e8dc3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -728,7 +728,7 @@ static rtx rs6000_emit_vector_compare (enum rtx_code, rtx, rtx,\n \t\t\t\t       enum machine_mode);\n static int get_vsel_insn (enum machine_mode);\n static void rs6000_emit_vector_select (rtx, rtx, rtx, rtx);\n-\n+static tree rs6000_stack_protect_fail (void);\n \n const int INSN_NOT_AVAILABLE = -1;\n static enum machine_mode rs6000_eh_return_filter_mode (void);\n@@ -973,6 +973,9 @@ static const char alt_reg_names[][8] =\n #define TARGET_DEFAULT_TARGET_FLAGS \\\n   (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n \n+#undef TARGET_STACK_PROTECT_FAIL\n+#define TARGET_STACK_PROTECT_FAIL rs6000_stack_protect_fail\n+\n /* MPC604EUM 3.5.2 Weak Consistency between Multiple Processors\n    The PowerPC architecture requires only weak consistency among\n    processors--that is, memory accesses between processors need not be\n@@ -10591,6 +10594,19 @@ rs6000_generate_compare (enum rtx_code code)\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (DFmode)),\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (DFmode)),\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (DFmode)))));\n+      else if (GET_CODE (rs6000_compare_op1) == UNSPEC\n+\t       && XINT (rs6000_compare_op1, 1) == UNSPEC_SP_TEST)\n+\t{\n+\t  rtx op1 = XVECEXP (rs6000_compare_op1, 0, 0);\n+\t  comp_mode = CCEQmode;\n+\t  compare_result = gen_reg_rtx (CCEQmode);\n+\t  if (TARGET_64BIT)\n+\t    emit_insn (gen_stack_protect_testdi (compare_result,\n+\t\t\t\t\t\t rs6000_compare_op0, op1));\n+\t  else\n+\t    emit_insn (gen_stack_protect_testsi (compare_result,\n+\t\t\t\t\t\t rs6000_compare_op0, op1));\n+\t}\n       else\n \temit_insn (gen_rtx_SET (VOIDmode, compare_result,\n \t\t\t\tgen_rtx_COMPARE (comp_mode,\n@@ -18373,4 +18389,17 @@ invalid_arg_for_unprototyped_fn (tree typelist, tree funcdecl, tree val)\n \t  : NULL;\n }\n \n+/* For TARGET_SECURE_PLT 32-bit PIC code we can save PIC register\n+   setup by using __stack_chk_fail_local hidden function instead of\n+   calling __stack_chk_fail directly.  Otherwise it is better to call\n+   __stack_chk_fail directly.  */\n+\n+static tree\n+rs6000_stack_protect_fail (void)\n+{\n+  return (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT && flag_pic)\n+\t ? default_hidden_stack_protect_fail ()\n+\t : default_external_stack_protect_fail ();\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "f615c8dd72dea2e886bc34f03e3d20a7c539c2b9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -1233,7 +1233,7 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n \n    On the RS/6000, we grow upwards, from the area after the outgoing\n    arguments.  */\n-#define FRAME_GROWS_DOWNWARD 0\n+#define FRAME_GROWS_DOWNWARD (flag_stack_protect != 0)\n \n /* Size of the outgoing register save area */\n #define RS6000_REG_SAVE ((DEFAULT_ABI == ABI_AIX\t\t\t\\"}, {"sha": "f7a9df1967a70a56b8c751b67bcafda9dc89b751", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -59,6 +59,8 @@\n    (UNSPEC_ISYNC\t\t37)\n    (UNSPEC_POPCNTB\t\t38)\n    (UNSPEC_FRES\t\t\t39)\n+   (UNSPEC_SP_SET\t\t40)\n+   (UNSPEC_SP_TEST\t\t41)\n   ])\n \n ;;\n@@ -10757,6 +10759,76 @@\n   \"\"\n   \"{ rs6000_emit_sCOND (LTGT, operands[0]); DONE; }\")\n \n+(define_expand \"stack_protect_set\"\n+  [(match_operand 0 \"memory_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")]\n+  \"\"\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_stack_protect_setdi (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_stack_protect_setsi (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_setsi\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_32BIT\"\n+  \"{l%U1%X1|lwz%U1%X1} %2,%1\\;{st%U0%X0|stw%U0%X0} %2,%0\\;{lil|li} %2,0\"\n+  [(set_attr \"type\" \"three\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"stack_protect_setdi\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_64BIT\"\n+  \"ld%U1%X1 %2,%1\\;std%U0%X0 %2,%0\\;{lil|li} %2,0\"\n+  [(set_attr \"type\" \"three\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"memory_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")\n+   (match_operand 2 \"\" \"\")]\n+  \"\"\n+{\n+  rs6000_compare_op0 = operands[0];\n+  rs6000_compare_op1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, operands[1]),\n+\t\t\t\t       UNSPEC_SP_TEST);\n+  rs6000_compare_fp_p = 0;\n+  emit_jump_insn (gen_beq (operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_testsi\"\n+  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=x,?y\")\n+        (unspec:CCEQ [(match_operand:SI 1 \"memory_operand\" \"m,m\")\n+\t\t      (match_operand:SI 2 \"memory_operand\" \"m,m\")]\n+\t\t     UNSPEC_SP_TEST))\n+   (clobber (match_scratch:SI 3 \"=r,r\"))\n+   (set (match_scratch:SI 4 \"=&r,&r\") (const_int 0))]\n+  \"TARGET_32BIT\"\n+  \"@\n+   {l%U1%X1|lwz%U1%X1} %3,%1\\;{l%U2%X2|lwz%U2%X2} %4,%2\\;xor. %3,%3,%4\\;{lil|li} %4,0\n+   {l%U1%X1|lwz%U1%X1} %3,%1\\;{l%U2%X2|lwz%U2%X2} %4,%2\\;{cmpl|cmplw} %0,%3,%4\\;{lil|li} %3,0\\;{lil|li} %4,0\"\n+  [(set_attr \"length\" \"16,20\")])\n+\n+(define_insn \"stack_protect_testdi\"\n+  [(set (match_operand:CCEQ 0 \"cc_reg_operand\" \"=x,?y\")\n+        (unspec:CCEQ [(match_operand:DI 1 \"memory_operand\" \"m,m\")\n+\t\t      (match_operand:DI 2 \"memory_operand\" \"m,m\")]\n+\t\t     UNSPEC_SP_TEST))\n+   (clobber (match_scratch:DI 3 \"=r,r\"))\n+   (set (match_scratch:DI 4 \"=&r,&r\") (const_int 0))]\n+  \"TARGET_64BIT\"\n+  \"@\n+   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;xor. %3,%3,%4\\;{lil|li} %4,0\n+   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;cmpld %0,%3,%4\\;{lil|li} %3,0\\;{lil|li} %4,0\"\n+  [(set_attr \"length\" \"16,20\")])\n+\n \f\n ;; Here are the actual compare insns.\n (define_insn \"*cmp<mode>_internal1\""}, {"sha": "84be6e4404948d34fc3fcc1c62e0d273d22142eb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -4112,13 +4112,11 @@ If this pattern is not defined, then a plain move pattern is generated.\n \n This pattern, if defined, compares a @code{Pmode} value from the\n memory in operand 1 with the memory in operand 0 without leaving the\n-value in a register afterward.  Further, it initializes the data\n-structures in the target as if the normal @code{cmp@var{mode}} \n-pattern had been emitted.  If the pattern does not @code{FAIL}, then\n-the rtl expanders will be invoking either the @code{beq} or @code{bne}\n-pattern to make use of the comparison.\n+value in a register afterward and branches to operand 2 if the values\n+weren't equal.\n \n-If this pattern is not defined, then a plain compare pattern is used.\n+If this pattern is not defined, then a plain compare pattern and\n+conditional branch pattern is used.\n \n @end table\n "}, {"sha": "9727e6d754d38f4cf8e7297ae486550ec875e354", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aebbe5f49f9b9ccda66fc1eb907603e84813878/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3aebbe5f49f9b9ccda66fc1eb907603e84813878", "patch": "@@ -3995,11 +3995,10 @@ stack_protect_epilogue (void)\n   switch (HAVE_stack_protect_test != 0)\n     {\n     case 1:\n-      tmp = gen_stack_protect_test (x, y);\n+      tmp = gen_stack_protect_test (x, y, label);\n       if (tmp)\n \t{\n \t  emit_insn (tmp);\n-\t  emit_jump_insn (bcc_gen_fctn[EQ] (label));\n \t  break;\n \t}\n       /* FALLTHRU */"}]}