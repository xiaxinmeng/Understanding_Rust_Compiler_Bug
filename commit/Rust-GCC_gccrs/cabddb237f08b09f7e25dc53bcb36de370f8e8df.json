{"sha": "cabddb237f08b09f7e25dc53bcb36de370f8e8df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiZGRiMjM3ZjA4YjA5ZjdlMjVkYzUzYmNiMzZkZTM3MGY4ZThkZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-28T07:46:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-28T07:46:40Z"}, "message": "ia64.c (ia64_expand_vcondu_v2si): Generate proper comparison operations.\n\n        * config/ia64/ia64.c (ia64_expand_vcondu_v2si): Generate proper\n        comparison operations.\n        (ia64_expand_vecint_minmax): Fix size of xops.\n        * config/ia64/vect.md (umax<VECINT>3): Fix fallback pattern typo.\n        (vec_shl_<VECINT>, vec_shr_<VECINT>): New.\n\nFrom-SVN: r101375", "tree": {"sha": "6089ebb6bd183e5977971851f405fbb4fe8438c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6089ebb6bd183e5977971851f405fbb4fe8438c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cabddb237f08b09f7e25dc53bcb36de370f8e8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabddb237f08b09f7e25dc53bcb36de370f8e8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabddb237f08b09f7e25dc53bcb36de370f8e8df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabddb237f08b09f7e25dc53bcb36de370f8e8df/comments", "author": null, "committer": null, "parents": [{"sha": "9009820b36c750c043ddf1cd885ef5ad51304350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9009820b36c750c043ddf1cd885ef5ad51304350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9009820b36c750c043ddf1cd885ef5ad51304350"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "9ee25417497134e3663e0b695431fd02d9c6ba74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cabddb237f08b09f7e25dc53bcb36de370f8e8df", "patch": "@@ -1,3 +1,11 @@\n+2005-06-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_expand_vcondu_v2si): Generate proper\n+\tcomparison operations.\n+\t(ia64_expand_vecint_minmax): Fix size of xops.\n+\t* config/ia64/vect.md (umax<VECINT>3): Fix fallback pattern typo.\n+\t(vec_shl_<VECINT>, vec_shr_<VECINT>): New.\n+\n 2005-06-27  Richard Henderson  <rth@redhat.com>\n \n \t* tree-vect-transform.c (get_initial_def_for_reduction): Use correct"}, {"sha": "5109d4f768bbe562ff0dbb39363f19904983be32", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=cabddb237f08b09f7e25dc53bcb36de370f8e8df", "patch": "@@ -1533,11 +1533,13 @@ ia64_expand_vcondu_v2si (enum rtx_code code, rtx operands[])\n   /* With the results of the comparisons, emit conditional moves.  */\n \n   dl = gen_reg_rtx (SImode);\n-  x = gen_rtx_IF_THEN_ELSE (SImode, bl, op1l, op2l);\n+  x = gen_rtx_NE (VOIDmode, bl, const0_rtx);\n+  x = gen_rtx_IF_THEN_ELSE (SImode, x, op1l, op2l);\n   emit_insn (gen_rtx_SET (VOIDmode, dl, x));\n \n   dh = gen_reg_rtx (SImode);\n-  x = gen_rtx_IF_THEN_ELSE (SImode, bh, op1h, op2h);\n+  x = gen_rtx_NE (VOIDmode, bh, const0_rtx);\n+  x = gen_rtx_IF_THEN_ELSE (SImode, x, op1h, op2h);\n   emit_insn (gen_rtx_SET (VOIDmode, dh, x));\n \n   /* Merge the two partial results back into a vector.  */\n@@ -1613,7 +1615,7 @@ bool\n ia64_expand_vecint_minmax (enum rtx_code code, enum machine_mode mode,\n \t\t\t   rtx operands[])\n {\n-  rtx xops[5];\n+  rtx xops[6];\n \n   /* These four combinations are supported directly.  */\n   if (mode == V8QImode && (code == UMIN || code == UMAX))"}, {"sha": "dc6e0f7d30ef3235b2d9231dfcfe1d4eaedf95a3", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabddb237f08b09f7e25dc53bcb36de370f8e8df/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=cabddb237f08b09f7e25dc53bcb36de370f8e8df", "patch": "@@ -214,7 +214,7 @@\n \n (define_expand \"umax<mode>3\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n-\t(smax:VECINT (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n+\t(umax:VECINT (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n \t\t     (match_operand:VECINT 2 \"gr_register_operand\" \"\")))]\n   \"\"\n {\n@@ -311,6 +311,26 @@\n   \"pshr<vecsize>.u %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n+(define_expand \"vec_shl_<mode>\"\n+  [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n+\t(ashift:DI (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n+\t\t   (match_operand:DI 2 \"gr_reg_or_6bit_operand\" \"\")))]\n+  \"\"\n+{\n+  operands[0] = gen_lowpart (DImode, operands[0]);\n+  operands[1] = gen_lowpart (DImode, operands[1]);\n+})\n+\n+(define_expand \"vec_shr_<mode>\"\n+  [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n+        (lshiftrt:DI (match_operand:VECINT 1 \"gr_register_operand\" \"\")\n+                     (match_operand:DI 2 \"gr_reg_or_6bit_operand\" \"\")))]\n+  \"\"\n+{\n+  operands[0] = gen_lowpart (DImode, operands[0]);\n+  operands[1] = gen_lowpart (DImode, operands[1]);\n+})\n+\n (define_expand \"vcond<mode>\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(if_then_else:VECINT"}]}