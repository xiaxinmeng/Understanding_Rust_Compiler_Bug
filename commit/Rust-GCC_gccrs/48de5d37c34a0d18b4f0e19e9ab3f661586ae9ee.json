{"sha": "48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkZTVkMzdjMzRhMGQxOGI0ZjBlMTllOWFiM2Y2NjE1ODZhZTllZQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-06-03T08:29:28Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-06-03T08:29:28Z"}, "message": "ipa.c (symbol_table::remove_unreachable_nodes): Don't remove instumentation thunks calling reachable functions.\n\ngcc/\n\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Don't\n\tremove instumentation thunks calling reachable functions.\n\t* lto-cgraph.c (output_refs): Always output IPA_REF_CHKP.\n\t* lto/lto-partition.c (privatize_symbol_name_1): New.\n\t(privatize_symbol_name): Privatize both decl and orig_decl\n\tnames for instrumented functions.\n\t* cgraph.c (cgraph_node::verify_node): Add transparent\n\talias chain check for instrumented node.\n\ngcc/testsuite/\n\n\t* gcc.dg/lto/chkp-privatize-1_0.c: New.\n\t* gcc.dg/lto/chkp-privatize-1_1.c: New.\n\t* gcc.dg/lto/chkp-privatize-2_0.c: New.\n\t* gcc.dg/lto/chkp-privatize-2_1.c: New.\n\nFrom-SVN: r224063", "tree": {"sha": "2937d0650a54355694d28bd857d54e78bcd1f876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2937d0650a54355694d28bd857d54e78bcd1f876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2858c9f3ed8275a61ee02421b8fc51ab070c79e"}], "stats": {"total": 201, "additions": 169, "deletions": 32}, "files": [{"sha": "baeaef58e026fe7557a44ad2857003646c1ff2dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -1,3 +1,14 @@\n+2015-06-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Don't\n+\tremove instumentation thunks calling reachable functions.\n+\t* lto-cgraph.c (output_refs): Always output IPA_REF_CHKP.\n+\t* lto/lto-partition.c (privatize_symbol_name_1): New.\n+\t(privatize_symbol_name): Privatize both decl and orig_decl\n+\tnames for instrumented functions.\n+\t* cgraph.c (cgraph_node::verify_node): Add transparent\n+\talias chain check for instrumented node.\n+\n 2015-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64223"}, {"sha": "039ce150fd82bb22d9de2cda88abf308edb6366c", "filename": "gcc/cgraph.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -3036,6 +3036,20 @@ cgraph_node::verify_node (void)\n \t}\n     }\n \n+  if (instrumentation_clone\n+      && DECL_BUILT_IN_CLASS (decl) == NOT_BUILT_IN)\n+    {\n+      tree name = DECL_ASSEMBLER_NAME (decl);\n+      tree orig_name = DECL_ASSEMBLER_NAME (orig_decl);\n+\n+      if (!IDENTIFIER_TRANSPARENT_ALIAS (name)\n+\t  || TREE_CHAIN (name) != orig_name)\n+\t{\n+\t  error (\"Alias chain for instrumented node is broken\");\n+\t  error_found = true;\n+\t}\n+    }\n+\n   if (analyzed && thunk.thunk_p)\n     {\n       if (!callees)"}, {"sha": "0b4010c33888c1cbac1945f36220231858dcc36b", "filename": "gcc/ipa.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -476,6 +476,20 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t      if (cnode->global.inlined_to)\n \t        body_needed_for_clonning.add (cnode->decl);\n \n+\t      /* For instrumentation clones we always need original\n+\t\t function node for proper LTO privatization.  */\n+\t      if (cnode->instrumentation_clone\n+\t\t  && cnode->definition)\n+\t\t{\n+\t\t  gcc_assert (cnode->instrumented_version || in_lto_p);\n+\t\t  if (cnode->instrumented_version)\n+\t\t    {\n+\t\t      enqueue_node (cnode->instrumented_version, &first,\n+\t\t\t\t    &reachable);\n+\t\t      reachable.add (cnode->instrumented_version);\n+\t\t    }\n+\t\t}\n+\n \t      /* For non-inline clones, force their origins to the boundary and ensure\n \t\t that body is not removed.  */\n \t      while (cnode->clone_of)\n@@ -492,7 +506,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t    }\n \t  else if (cnode->thunk.thunk_p)\n \t    enqueue_node (cnode->callees->callee, &first, &reachable);\n-\t      \n+\n \t  /* If any reachable function has simd clones, mark them as\n \t     reachable as well.  */\n \t  if (cnode->simd_clones)"}, {"sha": "b5fd83ee7abe58067f4307fff141272af234121c", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -806,8 +806,33 @@ output_refs (lto_symtab_encoder_t encoder)\n     {\n       symtab_node *node = lto_symtab_encoder_deref (encoder, i);\n \n+      /* IPA_REF_ALIAS and IPA_REF_CHKP references are always preserved\n+\t in the boundary.  Alias node can't have other references and\n+\t can be always handled as if it's not in the boundary.  */\n       if (!node->alias && !lto_symtab_encoder_in_partition_p (encoder, node))\n-\tcontinue;\n+\t{\n+\t  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n+\t  /* Output IPA_REF_CHKP reference.  */\n+\t  if (cnode\n+\t      && cnode->instrumented_version\n+\t      && !cnode->instrumentation_clone)\n+\t    {\n+\t      for (int i = 0; node->iterate_reference (i, ref); i++)\n+\t\tif (ref->use == IPA_REF_CHKP)\n+\t\t  {\n+\t\t    if (lto_symtab_encoder_lookup (encoder, ref->referred)\n+\t\t\t!= LCC_NOT_FOUND)\n+\t\t      {\n+\t\t\tint nref = lto_symtab_encoder_lookup (encoder, node);\n+\t\t\tstreamer_write_gcov_count_stream (ob->main_stream, 1);\n+\t\t\tstreamer_write_uhwi_stream (ob->main_stream, nref);\n+\t\t\tlto_output_ref (ob, ref, encoder);\n+\t\t      }\n+\t\t    break;\n+\t\t  }\n+\t    }\n+\t  continue;\n+\t}\n \n       count = node->ref_list.nreferences ();\n       if (count)"}, {"sha": "e7c22140802db57f3c86b1870aebc7c77004d0b8", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -900,27 +900,13 @@ validize_symbol_for_target (symtab_node *node)\n     }\n }\n \n-/* Mangle NODE symbol name into a local name.  \n-   This is necessary to do\n-   1) if two or more static vars of same assembler name\n-      are merged into single ltrans unit.\n-   2) if previously static var was promoted hidden to avoid possible conflict\n-      with symbols defined out of the LTO world.  */\n+/* Helper for privatize_symbol_name.  Mangle NODE symbol name\n+   represented by DECL.  */\n \n static bool\n-privatize_symbol_name (symtab_node *node)\n+privatize_symbol_name_1 (symtab_node *node, tree decl)\n {\n-  tree decl = node->decl;\n-  const char *name;\n-  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n-\n-  /* If we want to privatize instrumentation clone\n-     then we need to change original function name\n-     which is used via transparent alias chain.  */\n-  if (cnode && cnode->instrumentation_clone)\n-    decl = cnode->orig_decl;\n-\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \n   if (must_not_rename (node, name))\n     return false;\n@@ -929,31 +915,57 @@ privatize_symbol_name (symtab_node *node)\n   symtab->change_decl_assembler_name (decl,\n \t\t\t\t      clone_function_name_1 (name,\n \t\t\t\t\t\t\t     \"lto_priv\"));\n+\n   if (node->lto_file_data)\n     lto_record_renamed_decl (node->lto_file_data, name,\n \t\t\t     IDENTIFIER_POINTER\n \t\t\t     (DECL_ASSEMBLER_NAME (decl)));\n+\n+  if (symtab->dump_file)\n+    fprintf (symtab->dump_file,\n+\t     \"Privatizing symbol name: %s -> %s\\n\",\n+\t     name, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+\n+  return true;\n+}\n+\n+/* Mangle NODE symbol name into a local name.\n+   This is necessary to do\n+   1) if two or more static vars of same assembler name\n+      are merged into single ltrans unit.\n+   2) if previously static var was promoted hidden to avoid possible conflict\n+      with symbols defined out of the LTO world.  */\n+\n+static bool\n+privatize_symbol_name (symtab_node *node)\n+{\n+  if (!privatize_symbol_name_1 (node, node->decl))\n+    return false;\n+\n   /* We could change name which is a target of transparent alias\n      chain of instrumented function name.  Fix alias chain if so  .*/\n-  if (cnode)\n+  if (cgraph_node *cnode = dyn_cast <cgraph_node *> (node))\n     {\n       tree iname = NULL_TREE;\n       if (cnode->instrumentation_clone)\n-\tiname = DECL_ASSEMBLER_NAME (cnode->decl);\n+\t{\n+\t  /* If we want to privatize instrumentation clone\n+\t     then we also need to privatize original function.  */\n+\t  if (cnode->instrumented_version)\n+\t    privatize_symbol_name (cnode->instrumented_version);\n+\t  else\n+\t    privatize_symbol_name_1 (cnode, cnode->orig_decl);\n+\t  iname = DECL_ASSEMBLER_NAME (cnode->decl);\n+\t  TREE_CHAIN (iname) = DECL_ASSEMBLER_NAME (cnode->orig_decl);\n+\t}\n       else if (cnode->instrumented_version\n-\t       && cnode->instrumented_version->orig_decl == decl)\n-\tiname = DECL_ASSEMBLER_NAME (cnode->instrumented_version->decl);\n-\n-      if (iname)\n+\t       && cnode->instrumented_version->orig_decl == cnode->decl)\n \t{\n-\t  gcc_assert (IDENTIFIER_TRANSPARENT_ALIAS (iname));\n-\t  TREE_CHAIN (iname) = DECL_ASSEMBLER_NAME (decl);\n+\t  iname = DECL_ASSEMBLER_NAME (cnode->instrumented_version->decl);\n+\t  TREE_CHAIN (iname) = DECL_ASSEMBLER_NAME (cnode->decl);\n \t}\n     }\n-  if (symtab->dump_file)\n-    fprintf (symtab->dump_file,\n-\t    \"Privatizing symbol name: %s -> %s\\n\",\n-\t    name, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+\n   return true;\n }\n "}, {"sha": "12bf61c614e7c3d6cee8246eed816a8d57342027", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.dg/lto/chkp-privatize-1_0.c: New.\n+\t* gcc.dg/lto/chkp-privatize-1_1.c: New.\n+\t* gcc.dg/lto/chkp-privatize-2_0.c: New.\n+\t* gcc.dg/lto/chkp-privatize-2_1.c: New.\n+\n 2015-06-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64223"}, {"sha": "2054aa15ba00455a9e6e1ca7d8df80431b69ab2d", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-1_0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-lto-options { { -Ofast -flto -fcheck-pointer-bounds -mmpx } } } */\n+\n+extern int __attribute__((noinline)) f1 (int i);\n+\n+static int __attribute__((noinline))\n+f2 (int i)\n+{\n+  return i + 6;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  return f1 (argc) + f2 (argc);\n+}"}, {"sha": "4fa8656d9a3f0444b310c9bdc2836b46c8e92913", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-1_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_1.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -0,0 +1,11 @@\n+static int __attribute__((noinline))\n+f2 (int i)\n+{\n+  return 2 * i;\n+}\n+\n+int __attribute__((noinline))\n+f1 (int i)\n+{\n+  return f2 (i) + 10;\n+}"}, {"sha": "be7f601e399b2c93320d9f3394711e6e4f6145d8", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-2_0.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-lto-options { { -Ofast -flto -fcheck-pointer-bounds -mmpx } } } */\n+\n+static int\n+__attribute__ ((noinline))\n+func1 (int i)\n+{\n+  return i + 2;\n+}\n+\n+extern int func2 (int i);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  return func1 (argc) + func2 (argc) + 1;\n+}"}, {"sha": "db39e7fa9efae853d63578cab3ef9372bbbbe6d4", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-2_1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_1.c?ref=48de5d37c34a0d18b4f0e19e9ab3f661586ae9ee", "patch": "@@ -0,0 +1,8 @@\n+int func1 = 10;\n+\n+int\n+func2 (int i)\n+{\n+  func1++;\n+  return i + func1;\n+}"}]}