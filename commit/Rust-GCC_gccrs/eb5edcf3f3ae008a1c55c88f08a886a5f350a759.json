{"sha": "eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "node_id": "C_kwDOANBUbNoAKGViNWVkY2YzZjNhZTAwOGExYzU1Yzg4ZjA4YTg4NmE1ZjM1MGE3NTk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-11T13:09:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-11T13:12:06Z"}, "message": "tree-optimization/104880 - update-address-taken and cmpxchg\n\nThe following addresses optimistic non-addressable marking of\nan argument of __atomic_compare_exchange_n which broke when\nI added DECL_NOT_GIMPLE_REG_P since we cannot guarantee we can\nrewrite it when TREE_ADDRESSABLE is unset.  Instead we have to\nrestore TREE_ADDRESSABLE in that case.\n\n2022-03-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104880\n\t* tree-ssa.cc (execute_update_address_taken): Remember if we\n\toptimistically made something not addressable and\n\tprepare to undo it.\n\n\t* g++.dg/opt/pr104880.cc: New testcase.", "tree": {"sha": "02391bd2bb8424173f032ab327e446daf1380aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02391bd2bb8424173f032ab327e446daf1380aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5edcf3f3ae008a1c55c88f08a886a5f350a759/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69619acd8d9b5856f5af6e5323d9c7c4ec9ad08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69619acd8d9b5856f5af6e5323d9c7c4ec9ad08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69619acd8d9b5856f5af6e5323d9c7c4ec9ad08f"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "de56a5acfd43631ed4839d2e47dd71f2980b1363", "filename": "gcc/testsuite/g++.dg/opt/pr104880.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5edcf3f3ae008a1c55c88f08a886a5f350a759/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104880.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5edcf3f3ae008a1c55c88f08a886a5f350a759/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104880.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104880.cc?ref=eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wno-pmf-conversions -fno-checking\" }\n+\n+class c {\n+  long b;\n+};\n+class B {\n+public:\n+  typedef void *d;\n+};\n+class aa {\n+public:\n+  aa(B::d);\n+};\n+class e : public B {\n+public:\n+  e();\n+};\n+unsigned int f;\n+struct g {\n+  struct h : c {\n+    h(unsigned int &i) : c(reinterpret_cast<c &>(i)) {}\n+    unsigned int ad();\n+  };\n+};\n+class n : g {\n+public:\n+  n(int);\n+  void j() {\n+    unsigned int a;\n+    h k(a);\n+    __atomic_compare_exchange_n(&f, &a, k.ad(), true, 3, 0);\n+  }\n+};\n+int l;\n+class m : e {\n+  void ar() {\n+    n b(l);\n+    b.j();\n+  }\n+  virtual void bd() { aa(d(&m::ar)); }\n+};\n+void o() { new m; }"}, {"sha": "6dcb31428699897c8cbcd594bd89b3820a6564af", "filename": "gcc/tree-ssa.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5edcf3f3ae008a1c55c88f08a886a5f350a759/gcc%2Ftree-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5edcf3f3ae008a1c55c88f08a886a5f350a759/gcc%2Ftree-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.cc?ref=eb5edcf3f3ae008a1c55c88f08a886a5f350a759", "patch": "@@ -1742,6 +1742,7 @@ execute_update_addresses_taken (void)\n   auto_bitmap addresses_taken;\n   auto_bitmap not_reg_needs;\n   auto_bitmap suitable_for_renaming;\n+  bool optimistic_not_addressable = false;\n   tree var;\n   unsigned i;\n \n@@ -1770,6 +1771,8 @@ execute_update_addresses_taken (void)\n \t\t  gimple_call_set_arg (stmt, 1, null_pointer_node);\n \t\t  gimple_ior_addresses_taken (addresses_taken, stmt);\n \t\t  gimple_call_set_arg (stmt, 1, arg);\n+\t\t  /* Remember we have to check again below.  */\n+\t\t  optimistic_not_addressable = true;\n \t\t}\n \t      else if (is_asan_mark_p (stmt)\n \t\t       || gimple_call_internal_p (stmt, IFN_GOMP_SIMT_ENTER))\n@@ -1873,7 +1876,8 @@ execute_update_addresses_taken (void)\n \n   /* Operand caches need to be recomputed for operands referencing the updated\n      variables and operands need to be rewritten to expose bare symbols.  */\n-  if (!bitmap_empty_p (suitable_for_renaming))\n+  if (!bitmap_empty_p (suitable_for_renaming)\n+      || optimistic_not_addressable)\n     {\n       FOR_EACH_BB_FN (bb, cfun)\n \tfor (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n@@ -2064,12 +2068,18 @@ execute_update_addresses_taken (void)\n \t\tif (optimize_atomic_compare_exchange_p (stmt))\n \t\t  {\n \t\t    tree expected = gimple_call_arg (stmt, 1);\n-\t\t    if (bitmap_bit_p (suitable_for_renaming,\n-\t\t\t\t      DECL_UID (TREE_OPERAND (expected, 0))))\n+\t\t    tree decl = TREE_OPERAND (expected, 0);\n+\t\t    if (bitmap_bit_p (suitable_for_renaming, DECL_UID (decl)))\n \t\t      {\n \t\t\tfold_builtin_atomic_compare_exchange (&gsi);\n \t\t\tcontinue;\n \t\t      }\n+\t\t    else if (!TREE_ADDRESSABLE (decl))\n+\t\t      /* If there are partial defs of the decl we may\n+\t\t\t have cleared the addressable bit but set\n+\t\t\t DECL_NOT_GIMPLE_REG_P.  We have to restore\n+\t\t\t TREE_ADDRESSABLE here.  */\n+\t\t      TREE_ADDRESSABLE (decl) = 1;\n \t\t  }\n \t\telse if (is_asan_mark_p (stmt))\n \t\t  {"}]}