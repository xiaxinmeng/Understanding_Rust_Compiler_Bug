{"sha": "3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjNTVhNWE2OWY2YTRmMmYxYWNhYzY2YTM2Njc2YzYzYzQyOGRiOA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-23T12:42:10Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-23T12:42:10Z"}, "message": "AbstractAction.java: Reformated.\n\n2004-01-23  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/AbstractAction.java: Reformated.\n\t(getPropertyChangeListeners): New method.\n\t* javax/swing/AbstractCellEditor.java: Reformated.\n\t(getCellEditorListeners): New method.\n\t* javax/swing/DefaultListSelectionModel.java\n\t(listenerList): New field.\n\t(listeners): Removed.\n\t(get_listeners): Removed.\n\t(addListSelectionListener): Rewritten.\n\t(removeListSelectionListener): Rewritten.\n\t(getListSelectionListeners): New method.\n\t(getListeners): New method.\n\t* javax/swing/JComboBox.java: Imports reworked.\n\t(addActionListener): Implemented.\n\t(removeActionListener): Implemented.\n\t(addItemListener): Implemented.\n\t(removeItemListener): Implemented.\n\t(addPopupMenuListener): Implemented.\n\t(removePopupMenuListener): Implemented.\n\t(getActionListeners): New method.\n\t(getItemListeners): New method.\n\t(getPopupMenuListeners): New method.\n\nFrom-SVN: r76413", "tree": {"sha": "d45ab18ff6f571ac20c614d6c7c6c53cebbdc077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d45ab18ff6f571ac20c614d6c7c6c53cebbdc077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/comments", "author": null, "committer": null, "parents": [{"sha": "5d7b2198ba194fba04e4b82dc1d223f07bc83da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7b2198ba194fba04e4b82dc1d223f07bc83da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7b2198ba194fba04e4b82dc1d223f07bc83da6"}], "stats": {"total": 383, "additions": 239, "deletions": 144}, "files": [{"sha": "1ebfd305df84e31d9de5f146a8d41234e728e377", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "patch": "@@ -1,3 +1,28 @@\n+2004-01-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/AbstractAction.java: Reformated.\n+\t(getPropertyChangeListeners): New method.\n+\t* javax/swing/AbstractCellEditor.java: Reformated.\n+\t(getCellEditorListeners): New method.\n+\t* javax/swing/DefaultListSelectionModel.java\n+\t(listenerList): New field.\n+\t(listeners): Removed.\n+\t(get_listeners): Removed.\n+\t(addListSelectionListener): Rewritten.\n+\t(removeListSelectionListener): Rewritten.\n+\t(getListSelectionListeners): New method.\n+\t(getListeners): New method.\n+\t* javax/swing/JComboBox.java: Imports reworked.\n+\t(addActionListener): Implemented.\n+\t(removeActionListener): Implemented.\n+\t(addItemListener): Implemented.\n+\t(removeItemListener): Implemented.\n+\t(addPopupMenuListener): Implemented.\n+\t(removePopupMenuListener): Implemented.\n+\t(getActionListeners): New method.\n+\t(getItemListeners): New method.\n+\t(getPopupMenuListeners): New method.\n+\n 2004-01-23  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/http/Connection.java"}, {"sha": "e616badc0ba26ee7967e282997367a2a282c6fb4", "filename": "libjava/javax/swing/AbstractAction.java", "status": "modified", "additions": 44, "deletions": 40, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FAbstractAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FAbstractAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractAction.java?ref=3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "patch": "@@ -56,10 +56,6 @@\n {\n   static final long serialVersionUID = -6803159439231523484L;\n \n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * enabled\n \t */\n@@ -76,11 +72,6 @@\n \t */\n \tprivate transient HashMap store = new HashMap();\n \n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * Constructor AbstractAction\n \t */\n@@ -106,11 +97,6 @@ public AbstractAction(String name, Icon icon) {\n \t\tputValue(SMALL_ICON, icon);\n \t} // AbstractAction()\n \n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * readObject\n \t * @param stream TODO\n@@ -183,30 +169,48 @@ public Object[] getKeys() {\n \t\treturn store.keySet().toArray();\n \t} // getKeys()\n \n-\t/**\n-\t * firePropertyChange\n-\t * @param propertyName TODO\n-\t * @param oldValue TODO\n-\t * @param newValue TODO\n-\t */\n-\tprotected void firePropertyChange(String propertyName,\n-\t\t\tObject oldValue, Object newValue) {\n-\t\tchangeSupport.firePropertyChange(propertyName, oldValue, newValue);\n-\t} // firePropertyChange()\n-\n-\t/**\n-\t * addPropertyChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic synchronized void addPropertyChangeListener(PropertyChangeListener listener) {\n-\t\tchangeSupport.addPropertyChangeListener(listener);\n-\t} // addPropertyChangeListener()\n-\n-\t/**\n-\t * removePropertyChangeListener\n-\t * @param listener TODO\n-\t */\n-\tpublic synchronized void removePropertyChangeListener(PropertyChangeListener listener) {\n-\t\tchangeSupport.removePropertyChangeListener(listener);\n-\t} // removePropertyChangeListener()\n+  /**\n+   * firePropertyChange\n+   *\n+   * @param propertyName TODO\n+   * @param oldValue TODO\n+   * @param newValue TODO\n+   */\n+  protected void firePropertyChange(String propertyName, Object oldValue,\n+                                    Object newValue)\n+  {\n+    changeSupport.firePropertyChange(propertyName, oldValue, newValue);\n+  }\n+\n+  /**\n+   * addPropertyChangeListener\n+   *\n+   * @param listener the listener to add\n+   */\n+  public void addPropertyChangeListener(PropertyChangeListener listener)\n+  {\n+    changeSupport.addPropertyChangeListener(listener);\n+  }\n+\n+  /**\n+   * removePropertyChangeListener\n+   *\n+   * @param listener the listener to remove\n+   */\n+  public void removePropertyChangeListener(PropertyChangeListener listener)\n+  {\n+    changeSupport.removePropertyChangeListener(listener);\n+  }\n+\n+  /**\n+   * Returns all registered listeners.\n+   *\n+   * @return array of listeners.\n+   * \n+   * @since 1.4\n+   */\n+  public PropertyChangeListener[] getPropertyChangeListeners()\n+  {\n+    return changeSupport.getPropertyChangeListeners();\n+  }\n }"}, {"sha": "b2a4f4c7b50cfcb2a01d41bbb6780061ffc19a79", "filename": "libjava/javax/swing/AbstractCellEditor.java", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FAbstractCellEditor.java?ref=3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "patch": "@@ -54,10 +54,6 @@\n {\n   static final long serialVersionUID = -1048006551406220959L;\n \n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * listenerList\n \t */\n@@ -68,23 +64,13 @@\n \t */\n \tprotected transient ChangeEvent changeEvent;\n \n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * Constructor AbstractCellEditor\n \t */\n \tpublic AbstractCellEditor() {\n \t\t// TODO\n \t} // AbstractCellEditor()\n \n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n \t/**\n \t * isCellEditable\n \t * @param event TODO\n@@ -118,41 +104,67 @@ public void cancelCellEditing() {\n \t\t// TODO\n \t} // cancelCellEditing()\n \n-\t/**\n-\t * addCellEditorListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void addCellEditorListener(CellEditorListener listener) {\n-\t\t// TODO\n-\t} // addCellEditorListener()\n-\n-\t/**\n-\t * removeCellEditorListener\n-\t * @param listener TODO\n-\t */\n-\tpublic void removeCellEditorListener(CellEditorListener listener) {\n-\t\t// TODO\n-\t} // removeCellEditorListener()\n-\n-\t/**\n-\t * fireEditingStopped\n-\t */\n-\tprotected void fireEditingStopped() {\n-\t\t// TODO\n-\t} // fireEditingStopped()\n-\n-\t/**\n-\t * fireEditingCanceled\n-\t */\n-\tprotected void fireEditingCanceled() {\n-\t\t// TODO\n-\t} // fireEditingCanceled()\n-\n \t/**\n \t * getCellEditorValue\n \t * @returns Object\n \t */\n \tpublic abstract Object getCellEditorValue();\n \n+  /**\n+   * addCellEditorListener\n+   *\n+   * @param listener The listener to add\n+   */\n+  public void addCellEditorListener (CellEditorListener listener)\n+  {\n+    listenerList.add (CellEditorListener.class, listener);\n+  }\n+\n+  /**\n+   * removeCellEditorListener\n+   *\n+   * @param listener The listener to remove\n+   */\n+  public void removeCellEditorListener (CellEditorListener listener)\n+  {\n+    listenerList.remove (CellEditorListener.class, listener);\n+  }\n+\t\n+  /**\n+   * getCellEditorListeners\n+   *\n+   * @since 1.4\n+   */\n+  public CellEditorListener[] getCellEditorListeners()\n+  {\n+    return (CellEditorListener[]) listenerList.getListeners (CellEditorListener.class);\n+  }\n+\n+  /**\n+   * fireEditingStopped\n+   */\n+  protected void fireEditingStopped()\n+  {\n+    CellEditorListener[] listeners = getCellEditorListeners();\n+\n+    for (int index = 0; index < listeners.length; index++)\n+      {\n+\tlisteners [index].editingStopped (changeEvent);\n+      }\n+  }\n+\n+  /**\n+   * fireEditingCanceled\n+   */\n+  protected void fireEditingCanceled()\n+  {\n+    CellEditorListener[] listeners = getCellEditorListeners();\n+\n+    for (int index = 0; index < listeners.length; index++)\n+      {\n+\tlisteners [index].editingCanceled (changeEvent);\n+      }\n+  }\n+\n \n } // AbstractCellEditor"}, {"sha": "7ad66b0e3023f6822055e2e9b68784bdcc1dd879", "filename": "libjava/javax/swing/DefaultListSelectionModel.java", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FDefaultListSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FDefaultListSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FDefaultListSelectionModel.java?ref=3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "patch": "@@ -42,34 +42,20 @@\n import java.util.EventListener;\n import java.util.Vector;\n import javax.swing.event.EventListenerList;\n+import javax.swing.event.ListSelectionEvent;\n import javax.swing.event.ListSelectionListener;\n \n public class DefaultListSelectionModel implements Cloneable, ListSelectionModel, Serializable\n {\n+  private EventListenerList listenerList = new EventListenerList();\n+  \n     int mode = SINGLE_SELECTION;\n \n     Vector sel = new Vector();\n \n-    Vector listeners;\n-\n-    Vector get_listeners()\n-    {\n-\tif (listeners == null)\n-\t    listeners = new Vector();\n-\treturn listeners;\n-    }\n-    \n-\n-    public void addListSelectionListener(ListSelectionListener listener)\n     {\n-\tget_listeners().addElement(listener);\n     }\n \n-    public void removeListSelectionListener(ListSelectionListener listener)\n-    {\n-\tget_listeners().removeElement(listener);\n-    }\n-    \n     class Range\n     {\n \tint i0, i1;\n@@ -182,4 +168,24 @@ public void setSelectionInterval(int index0, int index1)\n \n \tsel.addElement(new Range(index0, index1));\n     }\n+\n+  public void addListSelectionListener(ListSelectionListener listener)\n+  {\n+    listenerList.add (ListSelectionListener.class, listener);\n+  }\n+\n+  public void removeListSelectionListener(ListSelectionListener listener)\n+  {\n+    listenerList.remove (ListSelectionListener.class, listener);\n+  }\n+\n+  public ListSelectionListener[] getListSelectionListeners()\n+  {\n+    return (ListSelectionListener[]) getListeners (ListSelectionListener.class);\n+  }\n+  \n+  public EventListener[] getListeners (Class listenerType)\n+  {\n+    return listenerList.getListeners (listenerType);\n+  }\n }"}, {"sha": "b0192936c297938797716090cbd7b0cae033c604", "filename": "libjava/javax/swing/JComboBox.java", "status": "modified", "additions": 91, "deletions": 43, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FJComboBox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac55a5a69f6a4f2f1acac66a36676c63c428db8/libjava%2Fjavax%2Fswing%2FJComboBox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJComboBox.java?ref=3ac55a5a69f6a4f2f1acac66a36676c63c428db8", "patch": "@@ -38,14 +38,27 @@\n \n package javax.swing;\n \n-import java.awt.*;\n-import java.awt.event.*;\n-import java.beans.*;\n-import java.io.*;\n-import java.util.*;\n-import javax.accessibility.*;\n-import javax.swing.event.*;\n-import javax.swing.plaf.*;\n+import java.awt.ItemSelectable;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+import java.beans.PropertyChangeListener;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.Vector;\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleRole;\n+import javax.accessibility.AccessibleSelection;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+import javax.swing.event.ListDataEvent;\n+import javax.swing.event.ListDataListener;\n+import javax.swing.event.PopupMenuListener;\n+import javax.swing.plaf.ComboBoxUI;\n \n /**\n  * JComboBox\n@@ -579,38 +592,6 @@ public boolean isPopupVisible() {\n \t\treturn false; // TODO\n \t} // isPopupVisible()\n \n-\t/**\n-\t * addItemListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic void addItemListener(ItemListener value0) {\n-\t\t// TODO\n-\t} // addItemListener()\n-\n-\t/**\n-\t * removeItemListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic void removeItemListener(ItemListener value0) {\n-\t\t// TODO\n-\t} // removeItemListener()\n-\n-\t/**\n-\t * addActionListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic void addActionListener(ActionListener value0) {\n-\t\t// TODO\n-\t} // addActionListener()\n-\n-\t/**\n-\t * removeActionListener\n-\t * @param value0 TODO\n-\t */\n-\tpublic void removeActionListener(ActionListener value0) {\n-\t\t// TODO\n-\t} // removeActionListener()\n-\n \t/**\n \t * setActionCommand\n \t * @param value0 TODO\n@@ -834,6 +815,73 @@ public AccessibleContext getAccessibleContext() {\n \t\t} // if\n \t\treturn accessibleContext;\n \t} // getAccessibleContext()\n-\n-\n-} // JComboBox\n+  /**\n+   * addActionListener\n+   * @param listener TODO\n+   */\n+  public void addActionListener (ActionListener listener)\n+  {\n+    listenerList.add (ActionListener.class, listener);\n+  }\n+\n+  /**\n+   * removeActionListener\n+   * @param listener TODO\n+   */\n+  public void removeActionListener (ActionListener listener)\n+  {\n+    listenerList.remove (ActionListener.class, listener);\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ActionListener[] getActionListeners()\n+  {\n+    return (ActionListener[]) getListeners (ActionListener.class);\n+  }\n+\n+  /**\n+   * addItemListener\n+   * @param listener TODO\n+   */\n+  public void addItemListener(ItemListener listener)\n+  {\n+    listenerList.add (ItemListener.class, listener);\n+  }\n+\n+  /**\n+   * removeItemListener\n+   * @param listener TODO\n+   */\n+  public void removeItemListener(ItemListener listener)\n+  {\n+    listenerList.remove (ItemListener.class, listener);\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ItemListener[] getItemListeners()\n+  {\n+    return (ItemListener[]) getListeners (ItemListener.class);\n+  }\n+\n+  public void addPopupMenuListener (PopupMenuListener listener)\n+  {\n+    listenerList.add (PopupMenuListener.class, listener);\n+  }\n+\n+  public void removePopupMenuListener (PopupMenuListener listener)\n+  {\n+    listenerList.remove (PopupMenuListener.class, listener);\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PopupMenuListener[] getPopupMenuListeners()\n+  {\n+    return (PopupMenuListener[]) getListeners (PopupMenuListener.class);\n+  }\n+}"}]}