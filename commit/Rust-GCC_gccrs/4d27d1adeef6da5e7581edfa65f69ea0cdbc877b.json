{"sha": "4d27d1adeef6da5e7581edfa65f69ea0cdbc877b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQyN2QxYWRlZWY2ZGE1ZTc1ODFlZGZhNjVmNjllYTBjZGJjODc3Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-10T13:36:59Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-12T08:39:45Z"}, "message": "ada: do not use binary mode in conf.py\n\ngcc/ada/ChangeLog:\n\n\t* doc/share/conf.py: Do not use binary mode.\n\tDo not use u' literals as Python3 uses unicode by default.", "tree": {"sha": "7342c4cfc830307622251cd5861e54b4dbb75b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7342c4cfc830307622251cd5861e54b4dbb75b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5caadfbde2c0d4cb97db23bab74b52c56bb1be9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5caadfbde2c0d4cb97db23bab74b52c56bb1be9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5caadfbde2c0d4cb97db23bab74b52c56bb1be9e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "705a6787056e677939adf68eb6ef8aa9f785388f", "filename": "gcc/ada/doc/share/conf.py", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d27d1adeef6da5e7581edfa65f69ea0cdbc877b/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py?ref=4d27d1adeef6da5e7581edfa65f69ea0cdbc877b", "patch": "@@ -18,27 +18,27 @@\n \n DOCS = {\n     'gnat_rm': {\n-        'title': u'GNAT Reference Manual'},\n+        'title': 'GNAT Reference Manual'},\n     'gnat_ugn': {\n-        'title': u'GNAT User\\'s Guide for Native Platforms'}}\n+        'title': 'GNAT User\\'s Guide for Native Platforms'}}\n \n # Then retrieve the source directory\n root_source_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n gnatvsn_spec = os.path.join(root_source_dir, '..', 'gnatvsn.ads')\n basever = os.path.join(root_source_dir, '..', '..', 'BASE-VER')\n texi_fsf = True  # Set to False when FSF doc is switched to sphinx by default\n \n-with open(gnatvsn_spec, 'rb') as fd:\n+with open(gnatvsn_spec, 'r') as fd:\n     gnatvsn_content = fd.read()\n \n \n def get_copyright():\n-    return u'2008-%s, Free Software Foundation' % time.strftime('%Y')\n+    return '2008-%s, Free Software Foundation' % time.strftime('%Y')\n \n \n def get_gnat_version():\n-    m = re.search(br'Gnat_Static_Version_String : ' +\n-                  br'constant String := \"([^\\(\\)]+)\\(.*\\)?\";',\n+    m = re.search(r'Gnat_Static_Version_String : ' +\n+                  r'constant String := \"([^\\(\\)]+)\\(.*\\)?\";',\n                   gnatvsn_content)\n     if m:\n         return m.group(1).strip().decode()\n@@ -57,12 +57,12 @@ def get_gnat_version():\n \n \n def get_gnat_build_type():\n-    m = re.search(br'Build_Type : constant Gnat_Build_Type := (.+);',\n+    m = re.search(r'Build_Type : constant Gnat_Build_Type := (.+);',\n                   gnatvsn_content)\n     if m:\n-        return {b'Gnatpro': 'PRO',\n-                b'FSF': 'FSF',\n-                b'GPL': 'GPL'}[m.group(1).strip()]\n+        return {'Gnatpro': 'PRO',\n+                'FSF': 'FSF',\n+                'GPL': 'GPL'}[m.group(1).strip()]\n     else:\n         print('cannot compute GNAT build type')\n         sys.exit(1)\n@@ -119,8 +119,8 @@ def get_gnat_build_type():\n     'date': time.strftime(\"%b %d, %Y\"),\n     'edition': 'GNAT %s Edition' % 'Pro' if get_gnat_build_type() == 'PRO'\n                else 'GPL',\n-    'name': u'GNU Ada',\n-    'tool': u'GNAT',\n+    'name': 'GNU Ada',\n+    'tool': 'GNAT',\n     'version': version}\n \n latex_elements = {\n@@ -134,11 +134,11 @@ def get_gnat_build_type():\n     'tableofcontents': latex_elements.TOC % copyright_macros}\n \n latex_documents = [\n-    (master_doc, '%s.tex' % doc_name, project, u'AdaCore', 'manual')]\n+    (master_doc, '%s.tex' % doc_name, project, 'AdaCore', 'manual')]\n \n texinfo_documents = [\n     (master_doc, doc_name, project,\n-     u'AdaCore', doc_name, doc_name, '')]\n+     'AdaCore', doc_name, doc_name, '')]\n \n \n def setup(app):"}]}