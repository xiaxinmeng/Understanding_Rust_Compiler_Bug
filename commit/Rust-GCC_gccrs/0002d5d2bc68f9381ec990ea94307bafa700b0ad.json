{"sha": "0002d5d2bc68f9381ec990ea94307bafa700b0ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMmQ1ZDJiYzY4ZjkzODFlYzk5MGVhOTQzMDdiYWZhNzAwYjBhZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-03-21T12:25:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-03-21T12:25:11Z"}, "message": "re PR libstdc++/25482 (Specialize (overload) std::copy/find for streambuf iterators)\n\n2006-03-21  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/25482\n\t* include/bits/stl_algobase.h (__copy_aux(_CharT*, _CharT*,\n\tostreambuf_iterator<_CharT>), __copy_aux(const _CharT*, const _CharT*,\n\tostreambuf_iterator<_CharT>), __copy_aux(istreambuf_iterator<_CharT>,\n\tistreambuf_iterator<_CharT>, _CharT*), copy(istreambuf_iterator<_CharT>,\n\tistreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)): Declare.\n\t* include/bits/stl_algo.h (find(istreambuf_iterator<_CharT>,\n\tistreambuf_iterator<_CharT>, _CharT)): Likewise.\n\t* include/bits/streambuf_iterator.h (copy(istreambuf_iterator<_CharT>,\n\tistreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>),\n\t__copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>),\n\t__copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>),\n\t__copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n\t_CharT*), find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n\t_CharT)): Define.\n\t(class istreambuf_iterator<>, class ostreambuf_iterator<>): Declare\n\tfriends.\n\t* include/std/std_streambuf.h (class basic_streambuf<>): Likewise.\n\t* include/bits/cpp_type_traits.h (struct __is_char<>): Add.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc: New.\n\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc: New.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc: New.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: New.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc: New.\n\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc: New.\n\t* testsuite/performance/25_algorithms/copy_streambuf_iterators.cc: New.\n\t* testsuite/performance/25_algorithms/find_istreambuf_iterators.cc: New.\n\nFrom-SVN: r112247", "tree": {"sha": "4a3ec58a3762e176cdaef61efefec7dd003c9fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3ec58a3762e176cdaef61efefec7dd003c9fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0002d5d2bc68f9381ec990ea94307bafa700b0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0002d5d2bc68f9381ec990ea94307bafa700b0ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0002d5d2bc68f9381ec990ea94307bafa700b0ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0002d5d2bc68f9381ec990ea94307bafa700b0ad/comments", "author": null, "committer": null, "parents": [{"sha": "69bdb292fd522df3ba1d9e7c52418a8b1d683dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bdb292fd522df3ba1d9e7c52418a8b1d683dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bdb292fd522df3ba1d9e7c52418a8b1d683dc0"}], "stats": {"total": 1316, "additions": 1299, "deletions": 17}, "files": [{"sha": "0ef887aba5386a1063b3af8ee64759e6ebe5273e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -1,3 +1,39 @@\n+2006-03-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/25482\n+\t* include/bits/stl_algobase.h (__copy_aux(_CharT*, _CharT*,\n+\tostreambuf_iterator<_CharT>), __copy_aux(const _CharT*, const _CharT*,\n+\tostreambuf_iterator<_CharT>), __copy_aux(istreambuf_iterator<_CharT>,\n+\tistreambuf_iterator<_CharT>, _CharT*), copy(istreambuf_iterator<_CharT>,\n+\tistreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)): Declare.\n+\t* include/bits/stl_algo.h (find(istreambuf_iterator<_CharT>,\n+\tistreambuf_iterator<_CharT>, _CharT)): Likewise.\n+\t* include/bits/streambuf_iterator.h (copy(istreambuf_iterator<_CharT>,\n+\tistreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>),\n+\t__copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>),\n+\t__copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>),\n+\t__copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t_CharT*), find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t_CharT)): Define.\n+\t(class istreambuf_iterator<>, class ostreambuf_iterator<>): Declare\n+\tfriends.\n+\t* include/std/std_streambuf.h (class basic_streambuf<>): Likewise.\n+\t* include/bits/cpp_type_traits.h (struct __is_char<>): Add.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc: New.\n+\t* testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc: New.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc: New.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc: New.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc: New.\n+\t* testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc: New.\n+\t* testsuite/performance/25_algorithms/copy_streambuf_iterators.cc: New.\n+\t* testsuite/performance/25_algorithms/find_istreambuf_iterators.cc: New.\n+\n 006-03-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/postypes.h (fpos<>::operator==, operator!=): Remove,"}, {"sha": "53823a814505d0765468ba5c651f5171d4da9837", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -1,6 +1,6 @@\n // The  -*- C++ -*- type traits classes for internal use in libstdc++\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -385,6 +385,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t};\n     };\n \n+  //\n+  // For use in std::copy and std::find overloads for streambuf iterators.\n+  //\n+  template<typename _Tp>\n+    struct __is_char\n+    {\n+      enum { __value = 0 };\n+      typedef __false_type __type;\n+    };\n+\n+  template<>\n+    struct __is_char<char>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    struct __is_char<wchar_t>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "fe94f71e70f63708592d998dc7fa59768304737b", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -294,6 +294,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n+  /**\n+   *  @if maint\n+   *  This is an overload of find() for streambuf iterators.\n+   *  @endif\n+  */\n+  template<typename _CharT>\n+    typename __enable_if<istreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT);\n+\n   /**\n    *  @brief Find the first occurrence of a value in a sequence.\n    *  @param  first  An input iterator."}, {"sha": "da93e1588f68e0e33a99b21beeb3b2e72d703177", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -1,6 +1,7 @@\n // Bits and pieces used in algorithms -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -165,8 +166,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \titer_swap(__a, __b);\n     }\n \n-  #undef min\n-  #undef max\n+#undef min\n+#undef max\n \n   /**\n    *  @brief This does what you think it does.\n@@ -316,6 +317,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return std::__copy<__simple, _Category>::copy(__first, __last, __result);\n     }\n \n+  // Helpers for streambuf iterators (either istream or ostream).\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);\n+\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);\n+\n+  template<typename _CharT>\n+    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t       _CharT*);\n+\n   template<bool, bool>\n     struct __copy_normal\n     {\n@@ -385,7 +402,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        return std::__copy_normal<__in, __out>::__copy_n(__first, __last,\n \t\t\t\t\t\t\t__result);\n     }\n-  \n+\n+  // Overload for streambuf iterators.\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t ostreambuf_iterator<_CharT>);\n+\n   template<bool, typename>\n     struct __copy_backward\n     {"}, {"sha": "56de85c4c327e3d9b48397b997192213c2d75727", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 148, "deletions": 3, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -1,6 +1,6 @@\n // Streambuf iterators\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,9 +41,13 @@\n #include <streambuf>\n #include <debug/debug.h>\n \n-// NB: Should specialize copy, find algorithms for streambuf iterators.\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n+     \n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,\n+\t ostreambuf_iterator<_CharT>);\n \n   // 24.5.3 Template class istreambuf_iterator\n   /// Provides input iterator semantics for streambufs.\n@@ -63,6 +67,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef basic_istream<_CharT, _Traits>\t\tistream_type;\n       //@}\n \n+      template<typename _CharT2>\n+\tfriend typename __enable_if<ostreambuf_iterator<_CharT2>,\n+\t                            __is_char<_CharT2>::__value>::__type\n+\tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n+\t     ostreambuf_iterator<_CharT2>);\n+\n+      template<typename _CharT2>\n+\tfriend typename __enable_if<_CharT2*,\n+\t                            __is_char<_CharT2>::__value>::__type\n+\t__copy_aux(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n+\t\t   _CharT2*);\n+\n+      template<typename _CharT2>\n+\tfriend typename __enable_if<istreambuf_iterator<_CharT2>,\n+\t                            __is_char<_CharT2>::__value>::__type\n+\tfind(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n+\t     _CharT2);\n+\n     private:\n       // 24.5.3 istreambuf_iterator\n       // p 1\n@@ -201,6 +223,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef basic_ostream<_CharT, _Traits>   ostream_type;\n       //@}\n \n+      template<typename _CharT2>\n+\tfriend typename __enable_if<ostreambuf_iterator<_CharT2>,\n+\t                            __is_char<_CharT2>::__value>::__type\n+\tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n+\t     ostreambuf_iterator<_CharT2>);\n+\n     private:\n       streambuf_type*\t_M_sbuf;\n       bool\t\t_M_failed;\n@@ -255,6 +283,123 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n     };\n \n+  // Overloads for streambuf iterators.\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    copy(istreambuf_iterator<_CharT> __first,\n+\t istreambuf_iterator<_CharT> __last,\n+\t ostreambuf_iterator<_CharT> __result)\n+    {\n+      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)\n+\t{\n+\t  bool __ineof;\n+\t  __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);\n+\t  if (!__ineof)\n+\t    __result._M_failed = true;\n+\t}\n+      return __result;\n+    }\n+\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    __copy_aux(_CharT* __first, _CharT* __last,\n+\t       ostreambuf_iterator<_CharT> __result)\n+    {\n+      const streamsize __num = __last - __first;\n+      if (__num > 0)\n+\t__result._M_put(__first, __num);\n+      return __result;\n+    }\n+\n+  template<typename _CharT>\n+    typename __enable_if<ostreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    __copy_aux(const _CharT* __first, const _CharT* __last,\n+\t       ostreambuf_iterator<_CharT> __result)\n+    {\n+      const streamsize __num = __last - __first;\n+      if (__num > 0)\n+\t__result._M_put(__first, __num);\n+      return __result;\n+    }\n+\n+  template<typename _CharT>\n+    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+    __copy_aux(istreambuf_iterator<_CharT> __first,\n+\t       istreambuf_iterator<_CharT> __last, _CharT* __result)\n+    {\n+      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n+      typedef typename __is_iterator_type::traits_type     traits_type;\n+      typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n+      typedef typename traits_type::int_type               int_type;\n+\n+      if (__first._M_sbuf && !__last._M_sbuf)\n+\t{\n+\t  streambuf_type* __sb = __first._M_sbuf;\n+\t  int_type __c = __sb->sgetc();\n+\t  while (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t    {\n+\t      const streamsize __n = __sb->egptr() - __sb->gptr();\n+\t      if (__n > 1)\n+\t\t{\n+\t\t  traits_type::copy(__result, __sb->gptr(), __n);\n+\t\t  __sb->gbump(__n);\n+\t\t  __result += __n;\n+\t\t  __c = __sb->underflow();\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  *__result++ = traits_type::to_char_type(__c);\n+\t\t  __c = __sb->snextc();\n+\t\t}\n+\t    }\n+\t}\n+      return __result;\n+    }\n+\n+  template<typename _CharT>\n+    typename __enable_if<istreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    find(istreambuf_iterator<_CharT> __first,\n+\t istreambuf_iterator<_CharT> __last, _CharT __val)\n+    {\n+      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n+      typedef typename __is_iterator_type::traits_type     traits_type;\n+      typedef typename __is_iterator_type::streambuf_type  streambuf_type;\n+      typedef typename traits_type::int_type               int_type;\n+\n+      if (__first._M_sbuf && !__last._M_sbuf)\n+\t{\n+\t  const int_type __ival = traits_type::to_int_type(__val);\n+\t  streambuf_type* __sb = __first._M_sbuf;\n+\t  int_type __c = __sb->sgetc();\n+\t  while (!traits_type::eq_int_type(__c, traits_type::eof())\n+\t\t && !traits_type::eq_int_type(__c, __ival))\n+\t    {\n+\t      streamsize __n = __sb->egptr() - __sb->gptr();\n+\t      if (__n > 1)\n+\t\t{\n+\t\t  const _CharT* __p = traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t__n, __val);\n+\t\t  if (__p)\n+\t\t    __n = __p - __sb->gptr();\n+\t\t  __sb->gbump(__n);\n+\t\t  __c = __sb->sgetc();\n+\t\t}\n+\t      else\n+\t\t__c = __sb->snextc();\n+\t    }\n+\n+\t  if (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t    __first._M_c = __c;\n+\t  else\n+\t    __first._M_sbuf = 0;\n+\t}\n+      return __first;\n+    }\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "0cc83ce451f41dcc0fed6e6c7f04b68c293659fc", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -45,6 +45,7 @@\n #include <iosfwd>\n #include <bits/localefwd.h>\n #include <bits/ios_base.h>\n+#include <bits/cpp_type_traits.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -55,10 +56,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   template<typename _CharT, typename _Traits>\n     streamsize\n-    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,\n-\t\t\t  basic_streambuf<_CharT, _Traits>* __sbout,\n-\t\t\t  bool& __ineof);\n-  \n+    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,\n+\t\t\t  basic_streambuf<_CharT, _Traits>*, bool&);\n+\n+  template<typename _CharT>\n+    typename __enable_if<_CharT*, __is_char<_CharT>::__value>::__type\n+    __copy_aux(istreambuf_iterator<_CharT>,\n+\t       istreambuf_iterator<_CharT>, _CharT*);\n+\n+  template<typename _CharT>\n+    typename __enable_if<istreambuf_iterator<_CharT>,\n+\t\t\t __is_char<_CharT>::__value>::__type\n+    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT);\n+\n   /**\n    *  @brief  The actual work of input and output (interface).\n    *\n@@ -152,18 +162,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       friend class ostreambuf_iterator<char_type, traits_type>;\n \n       friend streamsize\n-      __copy_streambufs_eof<>(__streambuf_type* __sbin,\n-\t\t\t      __streambuf_type* __sbout, bool& __ineof);\n-      \n+      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);\n+\n+      template<typename _CharT2>\n+        friend typename __enable_if<_CharT2*,\n+\t\t\t\t    __is_char<_CharT2>::__value>::__type\n+        __copy_aux(istreambuf_iterator<_CharT2>,\n+\t\t   istreambuf_iterator<_CharT2>, _CharT2*);\n+\n+      template<typename _CharT2>\n+        friend typename __enable_if<istreambuf_iterator<_CharT2>,\n+\t\t\t\t    __is_char<_CharT2>::__value>::__type\n+        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n+\t     _CharT2);\n+\n       template<typename _CharT2, typename _Traits2>\n         friend basic_istream<_CharT2, _Traits2>&\n         operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);\n-      \n+\n       template<typename _CharT2, typename _Traits2, typename _Alloc>\n         friend basic_istream<_CharT2, _Traits2>&\n         operator>>(basic_istream<_CharT2, _Traits2>&,\n \t\t   basic_string<_CharT2, _Traits2, _Alloc>&);\n-      \n+\n       template<typename _CharT2, typename _Traits2, typename _Alloc>\n         friend basic_istream<_CharT2, _Traits2>&\n         getline(basic_istream<_CharT2, _Traits2>&,"}, {"sha": "f90f325d37ebc4826ab9add19a1fa9bd9e320611", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F1.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,76 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+  typedef ostreambuf_iterator<char> out_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  ostringstream oss1;\n+  out_iterator_type out1(oss1);\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = 'x';\n+  VERIFY( oss1.str() == str1 + 'x' );\n+  oss1.str(\"\");\n+\n+  iss1.seekg(0);\n+  oss1.seekp(0);\n+  oss1.str(\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = 'y';\n+  VERIFY( oss1.str() == str1 + 'y' );\n+  oss1.str(\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == \"\" );\n+\n+  iss1.seekg(0);\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "333ad1ee30aefa690493bbbdc90ba8dbf660959e", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/2.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F2.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,77 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  char buffer1[sizeof(data1) * 5];\n+  memset(buffer1, '*', sizeof(buffer1));\n+  char* out1 = buffer1;\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( out1 == buffer1 );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( out1 == buffer1 );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( string(buffer1, out1) == str1 );\n+  *out1++ = 'x';\n+  VERIFY( string(buffer1, out1) == str1 + 'x' );\n+  memset(buffer1, '*', sizeof(buffer1));\n+\n+  iss1.seekg(0);\n+  out1 = buffer1;\n+  memset(buffer1, '*', sizeof(buffer1));\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( string(buffer1, out1) == str1 );\n+  *out1++ = 'y';\n+  VERIFY( string(buffer1, out1) == str1 + 'y' );\n+  out1 = buffer1;\n+  memset(buffer1, '*', sizeof(buffer1));\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( string(buffer1, out1) == \"\" );\n+\n+  iss1.seekg(0);\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( string(buffer1, out1) == str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0db123921144df3ad6ba72d6b21a17bf723fa4af", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F3.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,72 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef ostreambuf_iterator<char> out_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  const char* beg1 = data1;\n+  const char* end1 = beg1 + str1.size();\n+\n+  ostringstream oss1;\n+  out_iterator_type out1(oss1);\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( oss1.str().empty() );\n+  \n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = 'x';\n+  VERIFY( oss1.str() == str1 + 'x' );\n+  oss1.str(\"\");\n+\n+  oss1.seekp(0);\n+  oss1.str(\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = 'y';\n+  VERIFY( oss1.str() == str1 + 'y' );\n+  oss1.str(\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 + str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2af78d5415b823da7ecff6efce5fb5b0b80ac066", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/char/4.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fchar%2F4.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,56 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+           fbuf(\"istream_unformatted-1.txt\");\n+\n+  char buffer_ref[16500],\n+       buffer[16500];\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  in_iterator_type end;\n+  copy(beg, end, buffer);\n+\n+  VERIFY( fbuf_ref.good() );\n+  VERIFY( fbuf.good() );\n+\n+  VERIFY( !memcmp(buffer, buffer_ref, 16500) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3f4cc5569aaf8dcfb78e47ffae54f6aefcfb88ab", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F1.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,76 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+  typedef ostreambuf_iterator<wchar_t> out_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  wistringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  wostringstream oss1;\n+  out_iterator_type out1(oss1);\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = L'x';\n+  VERIFY( oss1.str() == str1 + L'x' );\n+  oss1.str(L\"\");\n+\n+  iss1.seekg(0);\n+  oss1.seekp(0);\n+  oss1.str(L\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = L'y';\n+  VERIFY( oss1.str() == str1 + L'y' );\n+  oss1.str(L\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == L\"\" );\n+\n+  iss1.seekg(0);\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1e11a2f9897ee2ac0ee92e0134c52b89a6996e20", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/2.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F2.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,77 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  wistringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1;\n+\n+  wchar_t buffer1[sizeof(data1) * 5 / sizeof(wchar_t)];\n+  wmemset(buffer1, L'*', sizeof(buffer1) / sizeof(wchar_t));\n+  wchar_t* out1 = buffer1;\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( out1 == buffer1 );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( out1 == buffer1 );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( wstring(buffer1, out1) == str1 );\n+  *out1++ = L'x';\n+  VERIFY( wstring(buffer1, out1) == str1 + L'x' );\n+  wmemset(buffer1, L'*', sizeof(buffer1) / sizeof(wchar_t));\n+\n+  iss1.seekg(0);\n+  out1 = buffer1;\n+  wmemset(buffer1, L'*', sizeof(buffer1) / sizeof(wchar_t));\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( wstring(buffer1, out1) == str1 );\n+  *out1++ = L'y';\n+  VERIFY( wstring(buffer1, out1) == str1 + L'y' );\n+  out1 = buffer1;\n+  wmemset(buffer1, L'*', sizeof(buffer1) / sizeof(wchar_t));\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( wstring(buffer1, out1) == L\"\" );\n+\n+  iss1.seekg(0);\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( wstring(buffer1, out1) == str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8edca408d9a39395da58e0a2c87512ec168ad47d", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F3.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,72 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef ostreambuf_iterator<wchar_t> out_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  const wchar_t* beg1 = data1;\n+  const wchar_t* end1 = beg1 + str1.size();\n+\n+  wostringstream oss1;\n+  out_iterator_type out1(oss1);\n+\n+  out1 = copy(beg1, beg1, out1);\n+  VERIFY( oss1.str().empty() );\n+\n+  out1 = copy(end1, end1, out1);\n+  VERIFY( oss1.str().empty() );\n+  \n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = L'x';\n+  VERIFY( oss1.str() == str1 + L'x' );\n+  oss1.str(L\"\");\n+\n+  oss1.seekp(0);\n+  oss1.str(L\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+  *out1 = L'y';\n+  VERIFY( oss1.str() == str1 + L'y' );\n+  oss1.str(L\"\");\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 );\n+\n+  out1 = copy(beg1, end1, out1);\n+  VERIFY( oss1.str() == str1 + str1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "96478bb7c6cfcd77edd62506070709f9087db2b2", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/streambuf_iterators/wchar_t/4.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fstreambuf_iterators%2Fwchar_t%2F4.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,56 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  \n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  wifstream fbuf_ref(\"istream_unformatted-1.txt\"),\n+            fbuf(\"istream_unformatted-1.txt\");\n+\n+  wchar_t buffer_ref[16500],\n+          buffer[16500];\n+\n+  fbuf_ref.read(buffer_ref, 16500);\n+\n+  in_iterator_type beg(fbuf);\n+  in_iterator_type end;\n+  copy(beg, end, buffer);\n+\n+  VERIFY( fbuf_ref.good() );\n+  VERIFY( fbuf.good() );\n+\n+  VERIFY( !wmemcmp(buffer, buffer_ref, 16500) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "33b5ec13b252fd4451b0b9735919b575c1fd4a37", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/char/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F1.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,84 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  const char data1[] = \"Drei Phantasien nach Friedrich Holderlin\";\n+  const string str1(data1);\n+  istringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1, it1;\n+\n+  it1 = find(beg1, beg1, 'l');\n+  VERIFY( it1 == beg1 );\n+  VERIFY( *it1 == 'D' );\n+\n+  it1 = find(end1, end1, 'D');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(end1, end1, 'Z');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(beg1, end1, 'P');\n+  VERIFY( *it1 == 'P' );\n+  it1 = find(beg1, end1, 't');\n+  VERIFY( *it1 == 't' );\n+  ++it1;\n+  VERIFY( *it1 == 'a' );\n+\n+  it1 = find(beg1, end1, 'H');\n+  VERIFY( *it1 == 'H' );\n+  it1 = find(beg1, end1, 'l');\n+  VERIFY( *it1 == 'l' );\n+  ++it1;\n+  it1 = find(beg1, end1, 'l');\n+  VERIFY( *it1 == 'l' );\n+  ++it1;\n+  VERIFY( *it1 == 'i' );\n+  it1 = find(beg1, end1, 'Z');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(beg1, end1, 'D');\n+  VERIFY( it1 == end1 );\n+\n+  iss1.seekg(0);\n+  it1 = find(beg1, end1, 'D');\n+  VERIFY( it1 != end1 );\n+  VERIFY( *it1 == 'D' );\n+  ++it1;\n+  VERIFY( *it1 == 'r' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "682c515683e4c8349b785f97dc725dd839bf9e61", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/char/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fchar%2F2.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,60 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  ifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+  in_iterator_type beg(fbuf);\n+  in_iterator_type end;\n+\n+  unsigned found = 0;\n+  for (;;)\n+    {\n+      beg = find(beg, end, '1');\n+      if (beg == end)\n+\tbreak;\n+      \n+      ++found;\n+      VERIFY( *beg == '1' );\n+\n+      for (unsigned sk = 0; sk < 9; sk++)\n+\t++beg;\n+      VERIFY( *beg == '0' );\n+    }\n+  VERIFY( found == 1500 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f8009d57b974125d22eef1d8b0e63be3da93a719", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F1.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,84 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  const wchar_t data1[] = L\"Drei Phantasien nach Friedrich Holderlin\";\n+  const wstring str1(data1);\n+  wistringstream iss1(str1);\n+  in_iterator_type beg1(iss1);\n+  in_iterator_type end1, it1;\n+\n+  it1 = find(beg1, beg1, L'l');\n+  VERIFY( it1 == beg1 );\n+  VERIFY( *it1 == L'D' );\n+\n+  it1 = find(end1, end1, L'D');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(end1, end1, L'Z');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(beg1, end1, L'P');\n+  VERIFY( *it1 == L'P' );\n+  it1 = find(beg1, end1, L't');\n+  VERIFY( *it1 == L't' );\n+  ++it1;\n+  VERIFY( *it1 == L'a' );\n+\n+  it1 = find(beg1, end1, L'H');\n+  VERIFY( *it1 == L'H' );\n+  it1 = find(beg1, end1, L'l');\n+  VERIFY( *it1 == L'l' );\n+  ++it1;\n+  it1 = find(beg1, end1, L'l');\n+  VERIFY( *it1 == L'l' );\n+  ++it1;\n+  VERIFY( *it1 == L'i' );\n+  it1 = find(beg1, end1, L'Z');\n+  VERIFY( it1 == end1 );\n+\n+  it1 = find(beg1, end1, L'D');\n+  VERIFY( it1 == end1 );\n+\n+  iss1.seekg(0);\n+  it1 = find(beg1, end1, L'D');\n+  VERIFY( it1 != end1 );\n+  VERIFY( *it1 == L'D' );\n+  ++it1;\n+  VERIFY( *it1 == L'r' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "efcedc12d97bd96d4728d1d529a977847bd9edb6", "filename": "libstdc++-v3/testsuite/25_algorithms/find/istreambuf_iterators/wchar_t/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fistreambuf_iterators%2Fwchar_t%2F2.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,60 @@\n+// 2006-03-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <iterator>\n+#include <fstream>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25482\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> in_iterator_type;\n+\n+  wifstream fbuf(\"istream_unformatted-1.txt\");\n+\n+  in_iterator_type beg(fbuf);\n+  in_iterator_type end;\n+\n+  unsigned found = 0;\n+  for (;;)\n+    {\n+      beg = find(beg, end, L'1');\n+      if (beg == end)\n+\tbreak;\n+      \n+      ++found;\n+      VERIFY( *beg == L'1' );\n+\n+      for (unsigned sk = 0; sk < 9; sk++)\n+\t++beg;\n+      VERIFY( *beg == L'0' );\n+    }\n+  VERIFY( found == 1500 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c9eee8780ef3252a1ca6c4a4271c777a33796f36", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/copy_streambuf_iterators.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fcopy_streambuf_iterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fcopy_streambuf_iterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fcopy_streambuf_iterators.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,107 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/25482\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+  typedef ostreambuf_iterator<char> out_iterator_type;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const char data[] = \"Contrappunto dialettico alla mente\";\n+\n+  // istreambuf iterators -> ostreambuf iterator\n+  {\n+    istringstream iss(data);\n+    in_iterator_type beg(iss);\n+    in_iterator_type end;\n+    \n+    ostringstream oss;\n+    out_iterator_type out(oss);\n+\n+    start_counters(time, resource);\n+    for (unsigned i = 0; i < 10000000; ++i)\n+      {\n+\tcopy(beg, end, out);\n+\tiss.seekg(0);\n+\toss.seekp(0);\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"isb iters -> osb iter\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  // char array -> ostreambuf iterator\n+  {\n+    const char* beg = data;\n+    const char* end = data + sizeof(data) - 1;\n+\n+    ostringstream oss;\n+    out_iterator_type out(oss);\n+\n+    start_counters(time, resource);\n+    for (unsigned i = 0; i < 10000000; ++i)\n+      {\n+\tcopy(beg, end, out);\n+\toss.seekp(0);\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"pointers  -> osb iter\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  // istreambuf iterators -> char array\n+  {\n+    istringstream iss(data);\n+    in_iterator_type beg(iss);\n+    in_iterator_type end;\n+\n+    char out[sizeof(data)];\n+\n+    start_counters(time, resource);\n+    for (unsigned i = 0; i < 10000000; ++i)\n+      {\n+\tcopy(beg, end, out);\n+\tiss.seekg(0);\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"isb iters -> pointer\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "7c2d54786a9c7953512f457c46532dcc60721525", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/find_istreambuf_iterators.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Ffind_istreambuf_iterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0002d5d2bc68f9381ec990ea94307bafa700b0ad/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Ffind_istreambuf_iterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Ffind_istreambuf_iterators.cc?ref=0002d5d2bc68f9381ec990ea94307bafa700b0ad", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/25482\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  typedef istreambuf_iterator<char> in_iterator_type;\n+\n+  istringstream iss(\"a0000b1111c2222d3333e4444f5555g6666h7777i8888j9999\"\n+\t\t    \"k0000l1111m2222n3333o4444p5555q6666r7777s8888t9999\");\n+\n+  in_iterator_type beg(iss);\n+  in_iterator_type end;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  start_counters(time, resource);\n+  for (unsigned i = 0; i < 1000000; ++i)\n+    {\n+      for (char c = 'a'; c < 'u'; ++c)\n+\t{\n+\t  find(beg, end, c);\n+\t  iss.seekg(0);\n+\t}\n+    }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}