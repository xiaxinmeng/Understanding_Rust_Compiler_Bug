{"sha": "b352afbab2dcdf3b48b08e377f48d17109297c46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM1MmFmYmFiMmRjZGYzYjQ4YjA4ZTM3N2Y0OGQxNzEwOTI5N2M0Ng==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-01-07T16:54:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-01-07T16:54:33Z"}, "message": "Support -fuse-ld=bfd and -fuse-ld=gold\n\n\tPR driver/55470\n\t* collect2.c (main): Support -fuse-ld=bfd and -fuse-ld=gold.\n\n\t* common.opt: Add fuse-ld=bfd and fuse-ld=gold.\n\n\t* gcc.c (LINK_COMMAND_SPEC): Pass -fuse-ld=* to collect2.\n\n\t* opts.c (comman_handle_option): Ignore -fuse-ld=bfd and\n\t-fuse-ld=gold.\n\n\t* doc/invoke.texi: Document -fuse-ld=bfd and -fuse-ld=gold.\n\nCo-Authored-By: Doug Kwan <dougkwan@google.com>\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Matthias Klose <doko@debian.org>\n\nFrom-SVN: r194983", "tree": {"sha": "d17099fbf4e98c921dd5658c212ee89229e8ade3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d17099fbf4e98c921dd5658c212ee89229e8ade3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b352afbab2dcdf3b48b08e377f48d17109297c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b352afbab2dcdf3b48b08e377f48d17109297c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b352afbab2dcdf3b48b08e377f48d17109297c46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b352afbab2dcdf3b48b08e377f48d17109297c46/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3b503f4a16e5279050524b6ab93a1d9483078ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b503f4a16e5279050524b6ab93a1d9483078ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b503f4a16e5279050524b6ab93a1d9483078ad"}], "stats": {"total": 106, "additions": 84, "deletions": 22}, "files": [{"sha": "be54b56445035a2d011456d1bb7d24cfa4cf4da3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -1,3 +1,20 @@\n+2013-01-07   Nick Clifton  <nickc@redhat.com>\n+\t     Matthias Klose <doko@debian.org>\n+\t     Doug Kwan  <dougkwan@google.com>\n+\t     H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/55470\n+\t* collect2.c (main): Support -fuse-ld=bfd and -fuse-ld=gold.\n+\n+\t* common.opt: Add fuse-ld=bfd and fuse-ld=gold.\n+\n+\t* gcc.c (LINK_COMMAND_SPEC): Pass -fuse-ld=* to collect2.\n+\n+\t* opts.c (comman_handle_option): Ignore -fuse-ld=bfd and\n+\t-fuse-ld=gold.\n+\n+\t* doc/invoke.texi: Document -fuse-ld=bfd and -fuse-ld=gold.\n+\n 2013-01-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54461"}, {"sha": "552aa85859eb7e9eb9a77cbfb44249d4e2da3d97", "filename": "gcc/collect2.c", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -842,8 +842,21 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n int\n main (int argc, char **argv)\n {\n-  static const char *const ld_suffix\t= \"ld\";\n-  static const char *const plugin_ld_suffix = PLUGIN_LD_SUFFIX;\n+  enum linker_select\n+    {\n+      USE_DEFAULT_LD,\n+      USE_PLUGIN_LD,\n+      USE_GOLD_LD,\n+      USE_BFD_LD,\n+      USE_LD_MAX\n+    } selected_linker = USE_DEFAULT_LD;\n+  static const char *const ld_suffixes[USE_LD_MAX] =\n+    {\n+      \"ld\",\n+      PLUGIN_LD_SUFFIX,\n+      \"ld.gold\",\n+      \"ld.bfd\"\n+    };\n   static const char *const real_ld_suffix = \"real-ld\";\n   static const char *const collect_ld_suffix = \"collect-ld\";\n   static const char *const nm_suffix\t= \"nm\";\n@@ -854,16 +867,13 @@ main (int argc, char **argv)\n   static const char *const strip_suffix = \"strip\";\n   static const char *const gstrip_suffix = \"gstrip\";\n \n+  const char *full_ld_suffixes[USE_LD_MAX];\n #ifdef CROSS_DIRECTORY_STRUCTURE\n   /* If we look for a program in the compiler directories, we just use\n      the short name, since these directories are already system-specific.\n      But it we look for a program in the system directories, we need to\n      qualify the program name with the target machine.  */\n \n-  const char *const full_ld_suffix =\n-    concat(target_machine, \"-\", ld_suffix, NULL);\n-  const char *const full_plugin_ld_suffix =\n-    concat(target_machine, \"-\", plugin_ld_suffix, NULL);\n   const char *const full_nm_suffix =\n     concat (target_machine, \"-\", nm_suffix, NULL);\n   const char *const full_gnm_suffix =\n@@ -877,13 +887,11 @@ main (int argc, char **argv)\n   const char *const full_gstrip_suffix =\n     concat (target_machine, \"-\", gstrip_suffix, NULL);\n #else\n-  const char *const full_ld_suffix\t= ld_suffix;\n-  const char *const full_plugin_ld_suffix = plugin_ld_suffix;\n-  const char *const full_nm_suffix\t= nm_suffix;\n-  const char *const full_gnm_suffix\t= gnm_suffix;\n #ifdef LDD_SUFFIX\n   const char *const full_ldd_suffix\t= ldd_suffix;\n #endif\n+  const char *const full_nm_suffix\t= nm_suffix;\n+  const char *const full_gnm_suffix\t= gnm_suffix;\n   const char *const full_strip_suffix\t= strip_suffix;\n   const char *const full_gstrip_suffix\t= gstrip_suffix;\n #endif /* CROSS_DIRECTORY_STRUCTURE */\n@@ -900,6 +908,7 @@ main (int argc, char **argv)\n   char **ld1_argv;\n   const char **ld1;\n   bool use_plugin = false;\n+  bool use_collect_ld = false;\n \n   /* The kinds of symbols we will have to consider when scanning the\n      outcome of a first pass link.  This is ALL to start with, then might\n@@ -919,6 +928,15 @@ main (int argc, char **argv)\n   int first_file;\n   int num_c_args;\n   char **old_argv;\n+  int i;\n+\n+  for (i = 0; i < USE_LD_MAX; i++)\n+    full_ld_suffixes[i]\n+#ifdef CROSS_DIRECTORY_STRUCTURE\n+      = concat (target_machine, \"-\", ld_suffixes[i], NULL);\n+#else\n+      = ld_suffixes[i];\n+#endif\n \n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && !IS_DIR_SEPARATOR (p[-1]))\n@@ -980,7 +998,6 @@ main (int argc, char **argv)\n      are called.  We also look for the -flto or -flto-partition=none flag to know\n      what LTO mode we are in.  */\n   {\n-    int i;\n     bool no_partition = false;\n \n     for (i = 1; argv[i] != NULL; i ++)\n@@ -998,7 +1015,14 @@ main (int argc, char **argv)\n \t  {\n \t    use_plugin = true;\n \t    lto_mode = LTO_MODE_NONE;\n+\t    if (selected_linker == USE_DEFAULT_LD)\n+\t      selected_linker = USE_PLUGIN_LD;\n \t  }\n+\telse if (strcmp (argv[i], \"-fuse-ld=bfd\") == 0)\n+\t  selected_linker = USE_BFD_LD;\n+\telse if (strcmp (argv[i], \"-fuse-ld=gold\") == 0)\n+\t  selected_linker = USE_GOLD_LD;\n+\n #ifdef COLLECT_EXPORT_LIST\n \t/* since -brtl, -bexport, -b64 are not position dependent\n \t   also check for them here */\n@@ -1095,21 +1119,18 @@ main (int argc, char **argv)\n   ld_file_name = find_a_file (&cpath, real_ld_suffix);\n   /* Likewise for `collect-ld'.  */\n   if (ld_file_name == 0)\n-    ld_file_name = find_a_file (&cpath, collect_ld_suffix);\n+    {\n+      ld_file_name = find_a_file (&cpath, collect_ld_suffix);\n+      use_collect_ld = ld_file_name != 0;\n+    }\n   /* Search the compiler directories for `ld'.  We have protection against\n      recursive calls in find_a_file.  */\n   if (ld_file_name == 0)\n-    ld_file_name = find_a_file (&cpath,\n-\t\t\t\tuse_plugin\n-\t\t\t\t? plugin_ld_suffix\n-\t\t\t\t: ld_suffix);\n+    ld_file_name = find_a_file (&cpath, ld_suffixes[selected_linker]);\n   /* Search the ordinary system bin directories\n      for `ld' (if native linking) or `TARGET-ld' (if cross).  */\n   if (ld_file_name == 0)\n-    ld_file_name = find_a_file (&path,\n-\t\t\t\tuse_plugin\n-\t\t\t\t? full_plugin_ld_suffix\n-\t\t\t\t: full_ld_suffix);\n+    ld_file_name = find_a_file (&path, full_ld_suffixes[selected_linker]);\n \n #ifdef REAL_NM_FILE_NAME\n   nm_file_name = find_a_file (&path, REAL_NM_FILE_NAME);\n@@ -1266,6 +1287,13 @@ main (int argc, char **argv)\n \t\t\t \"configuration\");\n #endif\n \t\t}\n+\t      else if (!use_collect_ld\n+\t\t       && strncmp (arg, \"-fuse-ld=\", 9) == 0)\n+\t\t{\n+\t\t  /* Do not pass -fuse-ld={bfd|gold} to the linker. */\n+\t\t  ld1--;\n+\t\t  ld2--;\n+\t\t}\n #ifdef TARGET_AIX_VERSION\n \t      else\n \t\t{"}, {"sha": "8085f645b0667b1a580ffe937466a5e26d73032e", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -2171,6 +2171,14 @@ funwind-tables\n Common Report Var(flag_unwind_tables) Optimization\n Just generate unwind tables for exception handling\n \n+fuse-ld=bfd\n+Common Negative(fuse-ld=gold)\n+Use the bfd linker instead of the default linker\n+\n+fuse-ld=gold\n+Common Negative(fuse-ld=bfd)\n+Use the gold linker instead of the default linker\n+\n fuse-linker-plugin\n Common Undocumented\n "}, {"sha": "df5376680fa874b774f355380b38e1338659ecd2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -425,7 +425,7 @@ Objective-C and Objective-C++ Dialects}.\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb @gol\n--fwhole-program -fwpa -fuse-linker-plugin @gol\n+-fwhole-program -fwpa -fuse-ld=@var{linker} -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os -Ofast -Og}\n \n@@ -8409,6 +8409,12 @@ the comparison operation before register allocation is complete.\n \n Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n+@item -fuse-ld=bfd\n+Use the @command{bfd} linker instead of the default linker.\n+\n+@item -fuse-ld=gold\n+Use the @command{gold} linker instead of the default linker.\n+\n @item -fcprop-registers\n @opindex fcprop-registers\n After register allocation and post-register allocation instruction splitting,"}, {"sha": "baa55432abba99d56a366f9de6a2c06d10591570", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -705,7 +705,8 @@ proper position among the other output files.  */\n     LINK_PLUGIN_SPEC \\\n     \"%{flto|flto=*:%<fcompare-debug*} \\\n     %{flto} %{flto=*} %l \" LINK_PIE_SPEC \\\n-   \"%X %{o*} %{e*} %{N} %{n} %{r}\\\n+   \"%{fuse-ld=*:-fuse-ld=%*}\\\n+    %X %{o*} %{e*} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}}\\\n     %{static:} %{L*} %(mfwrap) %(link_libgcc) %o\\\n     %{fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)}\\"}, {"sha": "947da1eed1f70050e7069a77859e27d13155f874", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b352afbab2dcdf3b48b08e377f48d17109297c46/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b352afbab2dcdf3b48b08e377f48d17109297c46", "patch": "@@ -1751,6 +1751,8 @@ common_handle_option (struct gcc_options *opts,\n       dc->max_errors = value;\n       break;\n \n+    case OPT_fuse_ld_bfd:\n+    case OPT_fuse_ld_gold:\n     case OPT_fuse_linker_plugin:\n       /* No-op. Used by the driver and passed to us because it starts with f.*/\n       break;"}]}