{"sha": "212b7076eec027d212e1badb9cb5a9db4b62ab50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyYjcwNzZlZWMwMjdkMjEyZTFiYWRiOWNiNWE5ZGI0YjYyYWI1MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:20:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:20:19Z"}, "message": "Remove global call sets: combine.c\n\nThere shouldn't be many cases in which a useful hard register is\nlive across a call before RA, so we might as well keep things simple\nand invalidate partially-clobbered registers here, in case the values\nthey hold leak into the call-clobbered part.  In principle this is\na bug fix for TARGET_HARD_REGNO_CALL_PART_CLOBBERED targets,\nbut in practice it probably doesn't make a difference.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* combine.c: Include function-abi.h.\n\t(record_dead_and_set_regs): Use insn_callee_abi to get the ABI\n\tof the target of call insns.  Invalidate partially-clobbered\n\tregisters as well as fully-clobbered ones.\n\nFrom-SVN: r276316", "tree": {"sha": "438802bf43b290eac420cfb6f0571e80e3e40f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/438802bf43b290eac420cfb6f0571e80e3e40f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/212b7076eec027d212e1badb9cb5a9db4b62ab50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212b7076eec027d212e1badb9cb5a9db4b62ab50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212b7076eec027d212e1badb9cb5a9db4b62ab50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212b7076eec027d212e1badb9cb5a9db4b62ab50/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43b484fbf281553353c6ef55ff0871b222579004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b484fbf281553353c6ef55ff0871b222579004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b484fbf281553353c6ef55ff0871b222579004"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "ed08c19bb403ee57450f9a21890091e9532c2050", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212b7076eec027d212e1badb9cb5a9db4b62ab50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212b7076eec027d212e1badb9cb5a9db4b62ab50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=212b7076eec027d212e1badb9cb5a9db4b62ab50", "patch": "@@ -1,3 +1,10 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* combine.c: Include function-abi.h.\n+\t(record_dead_and_set_regs): Use insn_callee_abi to get the ABI\n+\tof the target of call insns.  Invalidate partially-clobbered\n+\tregisters as well as fully-clobbered ones.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cfgloopanal.c: Include regs.h and function-abi.h."}, {"sha": "d200c5abd07675bd5c27f93047396ff4e0d78f62", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/212b7076eec027d212e1badb9cb5a9db4b62ab50/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/212b7076eec027d212e1badb9cb5a9db4b62ab50/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=212b7076eec027d212e1badb9cb5a9db4b62ab50", "patch": "@@ -105,6 +105,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"valtrack.h\"\n #include \"rtl-iter.h\"\n #include \"print-rtl.h\"\n+#include \"function-abi.h\"\n \n /* Number of attempts to combine instructions in this function.  */\n \n@@ -13464,11 +13465,21 @@ record_dead_and_set_regs (rtx_insn *insn)\n \n   if (CALL_P (insn))\n     {\n+      HARD_REG_SET callee_clobbers\n+\t= insn_callee_abi (insn).full_and_partial_reg_clobbers ();\n       hard_reg_set_iterator hrsi;\n-      EXECUTE_IF_SET_IN_HARD_REG_SET (regs_invalidated_by_call, 0, i, hrsi)\n+      EXECUTE_IF_SET_IN_HARD_REG_SET (callee_clobbers, 0, i, hrsi)\n \t{\n \t  reg_stat_type *rsp;\n \n+\t  /* ??? We could try to preserve some information from the last\n+\t     set of register I if the call doesn't actually clobber\n+\t     (reg:last_set_mode I), which might be true for ABIs with\n+\t     partial clobbers.  However, it would be difficult to\n+\t     update last_set_nonzero_bits and last_sign_bit_copies\n+\t     to account for the part of I that actually was clobbered.\n+\t     It wouldn't help much anyway, since we rarely see this\n+\t     situation before RA.  */\n \t  rsp = &reg_stat[i];\n \t  rsp->last_set_invalid = 1;\n \t  rsp->last_set = insn;"}]}