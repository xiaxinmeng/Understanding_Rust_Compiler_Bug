{"sha": "2fe776e2d346bcf450f40739825249cab449e567", "node_id": "C_kwDOANBUbNoAKDJmZTc3NmUyZDM0NmJjZjQ1MGY0MDczOTgyNTI0OWNhYjQ0OWU1Njc", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-10T23:28:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:31Z"}, "message": "[Ada] Add utility to preanalyze assert expression without forcing its type\n\nIn SPARK loop and subprogram variants we now allow expressions of any\ndiscrete type or of Ada.Numerics.Big_Numbers.Big_Integers.Big_Integer\ntype. This requires a variant of Preanalyze_Assert_Expression that\ndoesn't force the expression to be of a particular type, similar to the\nexisting variant of Analyze_And_Resolve.\n\ngcc/ada/\n\n\t* sem_ch3.ads, sem_ch3.adb (Preanalyze_Assert_Expression): Add a\n\tvariant that doesn't force preanalysis to yield a specific type.", "tree": {"sha": "513f665e8c7bc007e2b35c2fb58f48fc22e3aecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513f665e8c7bc007e2b35c2fb58f48fc22e3aecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe776e2d346bcf450f40739825249cab449e567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe776e2d346bcf450f40739825249cab449e567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe776e2d346bcf450f40739825249cab449e567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe776e2d346bcf450f40739825249cab449e567/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb05097d5508618a70b279df6d10d409eb4c60ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb05097d5508618a70b279df6d10d409eb4c60ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb05097d5508618a70b279df6d10d409eb4c60ae"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "a88f7f205fdc2a4dbc901d86a93772d2ee1a7dc1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe776e2d346bcf450f40739825249cab449e567/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe776e2d346bcf450f40739825249cab449e567/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2fe776e2d346bcf450f40739825249cab449e567", "patch": "@@ -40,6 +40,7 @@ with Exp_Disp;       use Exp_Disp;\n with Exp_Dist;       use Exp_Dist;\n with Exp_Tss;        use Exp_Tss;\n with Exp_Util;       use Exp_Util;\n+with Expander;       use Expander;\n with Freeze;         use Freeze;\n with Ghost;          use Ghost;\n with Itypes;         use Itypes;\n@@ -20387,6 +20388,40 @@ package body Sem_Ch3 is\n       In_Assertion_Expr := In_Assertion_Expr - 1;\n    end Preanalyze_Assert_Expression;\n \n+   --  ??? The variant below explicitly saves and restores all the flags,\n+   --  because it is impossible to compose the existing variety of\n+   --  Analyze/Resolve (and their wrappers, e.g. Preanalyze_Spec_Expression)\n+   --  to achieve the desired semantics.\n+\n+   procedure Preanalyze_Assert_Expression (N : Node_Id) is\n+      Save_In_Spec_Expression : constant Boolean := In_Spec_Expression;\n+      Save_Must_Not_Freeze    : constant Boolean := Must_Not_Freeze (N);\n+      Save_Full_Analysis      : constant Boolean := Full_Analysis;\n+\n+   begin\n+      In_Assertion_Expr  := In_Assertion_Expr + 1;\n+      In_Spec_Expression := True;\n+      Set_Must_Not_Freeze (N);\n+      Inside_Preanalysis_Without_Freezing :=\n+        Inside_Preanalysis_Without_Freezing + 1;\n+      Full_Analysis      := False;\n+      Expander_Mode_Save_And_Set (False);\n+\n+      if GNATprove_Mode then\n+         Analyze_And_Resolve (N);\n+      else\n+         Analyze_And_Resolve (N, Suppress => All_Checks);\n+      end if;\n+\n+      Expander_Mode_Restore;\n+      Full_Analysis      := Save_Full_Analysis;\n+      Inside_Preanalysis_Without_Freezing :=\n+        Inside_Preanalysis_Without_Freezing - 1;\n+      Set_Must_Not_Freeze (N, Save_Must_Not_Freeze);\n+      In_Spec_Expression := Save_In_Spec_Expression;\n+      In_Assertion_Expr  := In_Assertion_Expr - 1;\n+   end Preanalyze_Assert_Expression;\n+\n    -----------------------------------\n    -- Preanalyze_Default_Expression --\n    -----------------------------------"}, {"sha": "62b15c08903c870fb927e653a4122c68f107a6ac", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe776e2d346bcf450f40739825249cab449e567/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe776e2d346bcf450f40739825249cab449e567/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=2fe776e2d346bcf450f40739825249cab449e567", "patch": "@@ -235,6 +235,9 @@ package Sem_Ch3 is\n    --  Wrapper on Preanalyze_Spec_Expression for assertion expressions, so that\n    --  In_Assertion_Expr can be properly adjusted.\n \n+   procedure Preanalyze_Assert_Expression (N : Node_Id);\n+   --  Similar to the above, but without forcing N to be of a particular type\n+\n    procedure Preanalyze_Spec_Expression (N : Node_Id; T : Entity_Id);\n    --  Default and per object expressions do not freeze their components, and\n    --  must be analyzed and resolved accordingly. The analysis is done by"}]}