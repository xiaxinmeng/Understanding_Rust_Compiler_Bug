{"sha": "fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhYTRjYTQzMzkyY2ZlZGFhOWNlNDRkZDcyODAyMzZjMTcyNmVkOQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-19T16:51:39Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-19T16:51:39Z"}, "message": "cfgloop.c (get_loop_body_in_bfs_order): Avoid redundant call to bitmap_bit_p.\n\n\t* cfgloop.c (get_loop_body_in_bfs_order): Avoid redundant call to\n\tbitmap_bit_p.\n\t* config/bfin/bifn.c (bfin_discover_loop): Likewise.\n\t* dominance.c (iterate_fix_dominators): Likewise.\n\t* dse.c (set_usage_bits): Likewise.\n\t(set_position_unneeded, record_store): Likewise.\n\t* gimple-fold.c (get_maxval_strlen): Likewise.\n\t* haifa-sched.c (fix_inter_tick, fix_recovery_deps): Likewise.\n\t* ipa-inline.c (update_caller_keys): Likewise.\n\t* ipa-split.c (verify_non_ssa_vars): Likewise.\n\t* ipa-type-escape.c (mark_type, close_type_seen): Likewise.\n\t(close_type_exposed_parameter, close_type_full_escape): Likewise.\n\t(close_addressof_down): Likewise.\n\t* ira-color.c (assign_hard_reg, push_allocno_to_stack): Likewise.\n\t(setup_allocno_left_conflicts_size): Likewise.\n\t(ira_reassign_conflict_allocnos): Likewise.\n\t(ira_reassign_pseudos): Likewise.\n\t* ira-emit.c (change_loop): Likewise.\n\t* loop-invariant.c (mark_regno_live, mark_regno_death): Likewise.\n\t* lto-streamer-out.c (write_symbol): Likewise.\n\t* predict.c (expr_expected_value_1): Likewise.\n\t* regstat.c (regstat_bb_compute_ri): Likewise.\n\t* sel-sched.c (create_block_for_bookkeeping): Likewise.\n\t(track_scheduled_insns_and_blocks, sel_sched_region_1): Likewise.\n\t* stmt.c (expand_case): Likewise.\n\t* tree-eh.c (emit_eh_dispatch): Likewise.\n\t* tree-into-ssa.c (prune_unused_phi_nodes): Likewise.\n\t* tree-loop-distribution.c (make_nodes_having_upstream_mem_writes):\n\tLikewise.\n\t(rdg_flag_vertex, rdg_flag_loop_exits): Likewise.\n\t(rdg_build_components): Likewise.\n\t* tree-object-size.c (collect_object_sizes_for): Likewise.\n\t* tree-sra.c (convert_callers): Likewise.\n\t* tree-ssa-coalesce.c (live_track_add_partition): Likewise.\n\t* tree-ssa-live.c (mark_all_vars_used_1): Likewise.\n\t* tree-ssa-pre.c (bitmap_set_replace_value): Likewise.\n\nFrom-SVN: r163378", "tree": {"sha": "67cb91e2afbc4833424e3aa3836e69d68d51a52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67cb91e2afbc4833424e3aa3836e69d68d51a52f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/comments", "author": null, "committer": null, "parents": [{"sha": "99d821c01cacbfdba524cb4d4d8ea066abd15d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d821c01cacbfdba524cb4d4d8ea066abd15d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d821c01cacbfdba524cb4d4d8ea066abd15d2b"}], "stats": {"total": 239, "additions": 101, "deletions": 138}, "files": [{"sha": "7588c98e86649d8ce5c1e3f0d839d0d906d7cdf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -1,3 +1,42 @@\n+2010-08-19  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cfgloop.c (get_loop_body_in_bfs_order): Avoid redundant call to\n+\tbitmap_bit_p.\n+\t* config/bfin/bifn.c (bfin_discover_loop): Likewise.\n+\t* dominance.c (iterate_fix_dominators): Likewise.\n+\t* dse.c (set_usage_bits): Likewise.\n+\t(set_position_unneeded, record_store): Likewise.\n+\t* gimple-fold.c (get_maxval_strlen): Likewise.\n+\t* haifa-sched.c (fix_inter_tick, fix_recovery_deps): Likewise.\n+\t* ipa-inline.c (update_caller_keys): Likewise.\n+\t* ipa-split.c (verify_non_ssa_vars): Likewise.\n+\t* ipa-type-escape.c (mark_type, close_type_seen): Likewise.\n+\t(close_type_exposed_parameter, close_type_full_escape): Likewise.\n+\t(close_addressof_down): Likewise.\n+\t* ira-color.c (assign_hard_reg, push_allocno_to_stack): Likewise.\n+\t(setup_allocno_left_conflicts_size): Likewise.\n+\t(ira_reassign_conflict_allocnos): Likewise.\n+\t(ira_reassign_pseudos): Likewise.\n+\t* ira-emit.c (change_loop): Likewise.\n+\t* loop-invariant.c (mark_regno_live, mark_regno_death): Likewise.\n+\t* lto-streamer-out.c (write_symbol): Likewise.\n+\t* predict.c (expr_expected_value_1): Likewise.\n+\t* regstat.c (regstat_bb_compute_ri): Likewise.\n+\t* sel-sched.c (create_block_for_bookkeeping): Likewise.\n+\t(track_scheduled_insns_and_blocks, sel_sched_region_1): Likewise.\n+\t* stmt.c (expand_case): Likewise.\n+\t* tree-eh.c (emit_eh_dispatch): Likewise.\n+\t* tree-into-ssa.c (prune_unused_phi_nodes): Likewise.\n+\t* tree-loop-distribution.c (make_nodes_having_upstream_mem_writes):\n+\tLikewise.\n+\t(rdg_flag_vertex, rdg_flag_loop_exits): Likewise.\n+\t(rdg_build_components): Likewise.\n+\t* tree-object-size.c (collect_object_sizes_for): Likewise.\n+\t* tree-sra.c (convert_callers): Likewise.\n+\t* tree-ssa-coalesce.c (live_track_add_partition): Likewise.\n+\t* tree-ssa-live.c (mark_all_vars_used_1): Likewise.\n+\t* tree-ssa-pre.c (bitmap_set_replace_value): Likewise.\n+\n 2010-08-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*lea_1): Use P mode iterator."}, {"sha": "516a72eb941e058fe6aff1377b42a1a0d231295a", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -924,22 +924,16 @@ get_loop_body_in_bfs_order (const struct loop *loop)\n       edge e;\n       edge_iterator ei;\n \n-      if (!bitmap_bit_p (visited, bb->index))\n-\t{\n-\t  /* This basic block is now visited */\n-\t  bitmap_set_bit (visited, bb->index);\n-\t  blocks[i++] = bb;\n-\t}\n+      if (bitmap_set_bit (visited, bb->index))\n+\t/* This basic block is now visited */\n+\tblocks[i++] = bb;\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n \t  if (flow_bb_inside_loop_p (loop, e->dest))\n \t    {\n-\t      if (!bitmap_bit_p (visited, e->dest->index))\n-\t\t{\n-\t\t  bitmap_set_bit (visited, e->dest->index);\n-\t\t  blocks[i++] = e->dest;\n-\t\t}\n+\t      if (bitmap_set_bit (visited, e->dest->index))\n+\t\tblocks[i++] = e->dest;\n \t    }\n \t}\n "}, {"sha": "566c08bc1d9d99e15091fded79708a4a648dba5b", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -4398,14 +4398,13 @@ bfin_discover_loop (loop_info loop, basic_block tail_bb, rtx tail_insn)\n \t  break;\n \t}\n \n-      if (bitmap_bit_p (loop->block_bitmap, bb->index))\n+      if (!bitmap_set_bit (loop->block_bitmap, bb->index))\n \tcontinue;\n \n       /* We've not seen this block before.  Add it to the loop's\n \t list and then add each successor to the work list.  */\n \n       VEC_safe_push (basic_block, heap, loop->blocks, bb);\n-      bitmap_set_bit (loop->block_bitmap, bb->index);\n \n       if (bb != tail_bb)\n \t{"}, {"sha": "7507de3dcedc9601dfd82c6cfb1fe3f5f9c29d89", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -1357,10 +1357,9 @@ iterate_fix_dominators (enum cdi_direction dir, VEC (basic_block, heap) *bbs,\n \t  dom_i = (size_t) *pointer_map_contains (map, dom);\n \n \t  /* Do not include parallel edges to G.  */\n-\t  if (bitmap_bit_p ((bitmap) g->vertices[dom_i].data, i))\n+\t  if (!bitmap_set_bit ((bitmap) g->vertices[dom_i].data, i))\n \t    continue;\n \n-\t  bitmap_set_bit ((bitmap) g->vertices[dom_i].data, i);\n \t  add_edge (g, dom_i, i);\n \t}\n     }"}, {"sha": "77c551169043022c3cb76afb77cfb2335c9ac7b2", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -963,11 +963,10 @@ set_usage_bits (group_info_t group, HOST_WIDE_INT offset, HOST_WIDE_INT width)\n \t    ai = i;\n \t  }\n \n-\tif (bitmap_bit_p (store1, ai))\n+\tif (!bitmap_set_bit (store1, ai))\n \t  bitmap_set_bit (store2, ai);\n \telse\n \t  {\n-\t    bitmap_set_bit (store1, ai);\n \t    if (i < 0)\n \t      {\n \t\tif (group->offset_map_size_n < ai)\n@@ -1232,11 +1231,8 @@ set_position_unneeded (store_info_t s_info, int pos)\n {\n   if (__builtin_expect (s_info->is_large, false))\n     {\n-      if (!bitmap_bit_p (s_info->positions_needed.large.bmap, pos))\n-\t{\n-\t  s_info->positions_needed.large.count++;\n-\t  bitmap_set_bit (s_info->positions_needed.large.bmap, pos);\n-\t}\n+      if (bitmap_set_bit (s_info->positions_needed.large.bmap, pos))\n+\ts_info->positions_needed.large.count++;\n     }\n   else\n     s_info->positions_needed.small_bitmask\n@@ -1393,10 +1389,8 @@ record_store (rtx body, bb_info_t bb_info)\n \n       gcc_assert (GET_MODE (mem) != BLKmode);\n \n-      if (bitmap_bit_p (store1, spill_alias_set))\n+      if (!bitmap_set_bit (store1, spill_alias_set))\n \tbitmap_set_bit (store2, spill_alias_set);\n-      else\n-\tbitmap_set_bit (store1, spill_alias_set);\n \n       if (clear_alias_group->offset_map_size_p < spill_alias_set)\n \tclear_alias_group->offset_map_size_p = spill_alias_set;"}, {"sha": "59aa946a883114aedb92bf7a33d256d9cbdb1cdc", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -1004,9 +1004,8 @@ get_maxval_strlen (tree arg, tree *length, bitmap visited, int type)\n     }\n \n   /* If we were already here, break the infinite cycle.  */\n-  if (bitmap_bit_p (visited, SSA_NAME_VERSION (arg)))\n+  if (!bitmap_set_bit (visited, SSA_NAME_VERSION (arg)))\n     return true;\n-  bitmap_set_bit (visited, SSA_NAME_VERSION (arg));\n \n   var = arg;\n   def_stmt = SSA_NAME_DEF_STMT (var);"}, {"sha": "1865d45acc1194e76e361ea5b059c89e4bd9bde5", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -3613,9 +3613,8 @@ fix_inter_tick (rtx head, rtx tail)\n \t  gcc_assert (tick >= MIN_TICK);\n \n \t  /* Fix INSN_TICK of instruction from just scheduled block.  */\n-\t  if (!bitmap_bit_p (&processed, INSN_LUID (head)))\n+\t  if (bitmap_set_bit (&processed, INSN_LUID (head)))\n \t    {\n-\t      bitmap_set_bit (&processed, INSN_LUID (head));\n \t      tick -= next_clock;\n \n \t      if (tick < MIN_TICK)\n@@ -3635,9 +3634,8 @@ fix_inter_tick (rtx head, rtx tail)\n \t\t  /* If NEXT has its INSN_TICK calculated, fix it.\n \t\t     If not - it will be properly calculated from\n \t\t     scratch later in fix_tick_ready.  */\n-\t\t  && !bitmap_bit_p (&processed, INSN_LUID (next)))\n+\t\t  && bitmap_set_bit (&processed, INSN_LUID (next)))\n \t\t{\n-\t\t  bitmap_set_bit (&processed, INSN_LUID (next));\n \t\t  tick -= next_clock;\n \n \t\t  if (tick < MIN_TICK)\n@@ -4756,11 +4754,8 @@ fix_recovery_deps (basic_block rec)\n \t    {\n \t      sd_delete_dep (sd_it);\n \n-\t      if (!bitmap_bit_p (&in_ready, INSN_LUID (consumer)))\n-\t\t{\n-\t\t  ready_list = alloc_INSN_LIST (consumer, ready_list);\n-\t\t  bitmap_set_bit (&in_ready, INSN_LUID (consumer));\n-\t\t}\n+\t      if (bitmap_set_bit (&in_ready, INSN_LUID (consumer)))\n+\t\tready_list = alloc_INSN_LIST (consumer, ready_list);\n \t    }\n \t  else\n \t    {"}, {"sha": "1604d07ea58fc76c5091e4d48abef31a8b4fbfbb", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -699,9 +699,8 @@ update_caller_keys (fibheap_t heap, struct cgraph_node *node,\n   if (!node->local.inlinable\n       || node->global.inlined_to)\n     return;\n-  if (bitmap_bit_p (updated_nodes, node->uid))\n+  if (!bitmap_set_bit (updated_nodes, node->uid))\n     return;\n-  bitmap_set_bit (updated_nodes, node->uid);\n   node->global.estimated_growth = INT_MIN;\n \n   /* See if there is something to do.  */"}, {"sha": "712fbf5cb99ccdacfd561342fa2babc70803f0db", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -202,12 +202,11 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tif (e->src != ENTRY_BLOCK_PTR\n-\t    && !bitmap_bit_p (seen, e->src->index))\n+\t    && bitmap_set_bit (seen, e->src->index))\n \t  {\n \t    gcc_checking_assert (!bitmap_bit_p (current->split_bbs,\n \t\t\t\t\t        e->src->index));\n \t    VEC_safe_push (basic_block, heap, worklist, e->src);\n-\t    bitmap_set_bit (seen, e->src->index);\n \t  }\n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{"}, {"sha": "132a575390a77384008d12d1d9c976ef6f9feb14", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -485,18 +485,13 @@ mark_type (tree type, enum escape_t escape_status)\n     }\n \n   uid = TYPE_UID (type);\n-  if (bitmap_bit_p (map, uid))\n+  if (!bitmap_set_bit (map, uid))\n     return type;\n-  else\n-    {\n-      bitmap_set_bit (map, uid);\n-      if (escape_status == FULL_ESCAPE)\n-\t{\n-\t  /* Efficiency hack. When things are bad, do not mess around\n-\t     with this type anymore.  */\n-\t  bitmap_set_bit (global_types_exposed_parameter, uid);\n-\t}\n-    }\n+  else if (escape_status == FULL_ESCAPE)\n+    /* Efficiency hack. When things are bad, do not mess around\n+       with this type anymore.  */\n+    bitmap_set_bit (global_types_exposed_parameter, uid);\n+\n   return type;\n }\n \n@@ -1746,9 +1741,8 @@ close_type_seen (tree type)\n \n   uid = TYPE_UID (type);\n \n-  if (bitmap_bit_p (been_there_done_that, uid))\n+  if (!bitmap_set_bit (been_there_done_that, uid))\n     return;\n-  bitmap_set_bit (been_there_done_that, uid);\n \n   /* If we are doing a language with a type hierarchy, mark all of\n      the superclasses.  */\n@@ -1796,9 +1790,8 @@ close_type_exposed_parameter (tree type)\n   uid = TYPE_UID (type);\n   gcc_assert (!POINTER_TYPE_P (type));\n \n-  if (bitmap_bit_p (been_there_done_that, uid))\n+  if (!bitmap_set_bit (been_there_done_that, uid))\n     return;\n-  bitmap_set_bit (been_there_done_that, uid);\n \n   /* If the field is a struct or union type, mark all of the\n      subfields.  */\n@@ -1851,9 +1844,8 @@ close_type_full_escape (tree type)\n     return;\n   uid = TYPE_UID (type);\n \n-  if (bitmap_bit_p (been_there_done_that, uid))\n+  if (!bitmap_set_bit (been_there_done_that, uid))\n     return;\n-  bitmap_set_bit (been_there_done_that, uid);\n \n   subtype_map = subtype_map_for_uid (uid, false);\n \n@@ -1929,9 +1921,8 @@ close_addressof_down (int uid)\n   else\n     return NULL;\n \n-  if (bitmap_bit_p (been_there_done_that, uid))\n+  if (!bitmap_set_bit (been_there_done_that, uid))\n     return map;\n-  bitmap_set_bit (been_there_done_that, uid);\n \n   /* If the type escapes, get rid of the addressof map, it will not be\n      needed.  */"}, {"sha": "e26eb71fb97eead00a9216e08c4d58c024bbfd38", "filename": "gcc/ira-color.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -568,11 +568,9 @@ assign_hard_reg (ira_allocno_t allocno, bool retry_p)\n \n \t\t  if (allocno_coalesced_p)\n \t\t    {\n-\t\t      if (bitmap_bit_p (processed_coalesced_allocno_bitmap,\n+\t\t      if (!bitmap_set_bit (processed_coalesced_allocno_bitmap,\n \t\t\t\t\tALLOCNO_NUM (conflict_allocno)))\n \t\t\tcontinue;\n-\t\t      bitmap_set_bit (processed_coalesced_allocno_bitmap,\n-\t\t\t\t      ALLOCNO_NUM (conflict_allocno));\n \t\t    }\n \n \t\t  ira_allocate_and_copy_costs\n@@ -977,11 +975,9 @@ push_allocno_to_stack (ira_allocno_t allocno)\n \t\t{\n \t\t  conflict_obj = ALLOCNO_OBJECT (conflict_allocno,\n \t\t\t\t\t\t OBJECT_SUBWORD (conflict_obj));\n-\t\t  if (bitmap_bit_p (processed_coalesced_allocno_bitmap,\n+\t\t  if (!bitmap_set_bit (processed_coalesced_allocno_bitmap,\n \t\t\t\t    OBJECT_CONFLICT_ID (conflict_obj)))\n \t\t    continue;\n-\t\t  bitmap_set_bit (processed_coalesced_allocno_bitmap,\n-\t\t\t\t  OBJECT_CONFLICT_ID (conflict_obj));\n \t\t}\n \n \t      if (!ALLOCNO_IN_GRAPH_P (conflict_allocno)\n@@ -1552,11 +1548,9 @@ setup_allocno_left_conflicts_size (ira_allocno_t allocno)\n \t\t\t    == ALLOCNO_COVER_CLASS (conflict_allocno));\n \t\tif (allocno_coalesced_p)\n \t\t  {\n-\t\t    if (bitmap_bit_p (processed_coalesced_allocno_bitmap,\n-\t\t\t\t      ALLOCNO_NUM (conflict_allocno)))\n+\t\t    if (!bitmap_set_bit (processed_coalesced_allocno_bitmap,\n+\t\t\t\t\t ALLOCNO_NUM (conflict_allocno)))\n \t\t      continue;\n-\t\t    bitmap_set_bit (processed_coalesced_allocno_bitmap,\n-\t\t\t\t    ALLOCNO_NUM (conflict_allocno));\n \t\t  }\n \n \t\tif (! ALLOCNO_ASSIGNED_P (conflict_allocno))\n@@ -2436,9 +2430,8 @@ ira_reassign_conflict_allocnos (int start_regno)\n \t      ira_allocno_t conflict_a = OBJECT_ALLOCNO (conflict_obj);\n \t      ira_assert (ira_reg_classes_intersect_p\n \t\t\t  [cover_class][ALLOCNO_COVER_CLASS (conflict_a)]);\n-\t      if (bitmap_bit_p (allocnos_to_color, ALLOCNO_NUM (conflict_a)))\n+\t      if (!bitmap_set_bit (allocnos_to_color, ALLOCNO_NUM (conflict_a)))\n \t\tcontinue;\n-\t      bitmap_set_bit (allocnos_to_color, ALLOCNO_NUM (conflict_a));\n \t      sorted_allocnos[allocnos_to_color_num++] = conflict_a;\n \t    }\n \t}\n@@ -3041,10 +3034,9 @@ ira_reassign_pseudos (int *spilled_pseudo_regs, int num,\n \t      ira_allocno_t conflict_a = OBJECT_ALLOCNO (conflict_obj);\n \t      if (ALLOCNO_HARD_REGNO (conflict_a) < 0\n \t\t  && ! ALLOCNO_DONT_REASSIGN_P (conflict_a)\n-\t\t  && ! bitmap_bit_p (temp, ALLOCNO_REGNO (conflict_a)))\n+\t\t  && bitmap_set_bit (temp, ALLOCNO_REGNO (conflict_a)))\n \t\t{\n \t\t  spilled_pseudo_regs[num++] = ALLOCNO_REGNO (conflict_a);\n-\t\t  bitmap_set_bit (temp, ALLOCNO_REGNO (conflict_a));\n \t\t  /* ?!? This seems wrong.  */\n \t\t  bitmap_set_bit (consideration_allocno_bitmap,\n \t\t\t\t  ALLOCNO_NUM (conflict_a));"}, {"sha": "51f79d755458b4ee5ba78c4aada9b877d4461a73", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -521,8 +521,7 @@ change_loop (ira_loop_tree_node_t node)\n       regno = ALLOCNO_REGNO (allocno);\n       if (ALLOCNO_CAP_MEMBER (allocno) != NULL)\n \tcontinue;\n-      used_p = bitmap_bit_p (used_regno_bitmap, regno);\n-      bitmap_set_bit (used_regno_bitmap, regno);\n+      used_p = !bitmap_set_bit (used_regno_bitmap, regno);\n       ALLOCNO_SOMEWHERE_RENAMED_P (allocno) = true;\n       if (! used_p)\n \tcontinue;"}, {"sha": "cf427c3c5ed4640decfb7d09b1e3f9172b9997c4", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -1671,19 +1671,17 @@ mark_regno_live (int regno)\n        loop != current_loops->tree_root;\n        loop = loop_outer (loop))\n     bitmap_set_bit (&LOOP_DATA (loop)->regs_live, regno);\n-  if (bitmap_bit_p (&curr_regs_live, regno))\n+  if (!bitmap_set_bit (&curr_regs_live, regno))\n     return;\n-  bitmap_set_bit (&curr_regs_live, regno);\n   change_pressure (regno, true);\n }\n \n /* Mark REGNO death.  */\n static void\n mark_regno_death (int regno)\n {\n-  if (! bitmap_bit_p (&curr_regs_live, regno))\n+  if (! bitmap_clear_bit (&curr_regs_live, regno))\n     return;\n-  bitmap_clear_bit (&curr_regs_live, regno);\n   change_pressure (regno, false);\n }\n "}, {"sha": "562e934baba49729ee8fbcd9f5b6840e7718e5ef", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -2323,10 +2323,8 @@ write_symbol (struct lto_streamer_cache_d *cache,\n   gcc_assert (slot_num >= 0);\n \n   /* Avoid duplicate symbols. */\n-  if (bitmap_bit_p (seen, slot_num))\n+  if (!bitmap_set_bit (seen, slot_num))\n     return;\n-  else\n-    bitmap_set_bit (seen, slot_num);\n \n   if (DECL_EXTERNAL (t))\n     {"}, {"sha": "cd04be5f764c0b86bee584fc1ca16b40aed12318", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -1180,9 +1180,8 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code, tree op1, bitma\n       def = SSA_NAME_DEF_STMT (op0);\n \n       /* If we were already here, break the infinite cycle.  */\n-      if (bitmap_bit_p (visited, SSA_NAME_VERSION (op0)))\n+      if (!bitmap_set_bit (visited, SSA_NAME_VERSION (op0)))\n \treturn NULL;\n-      bitmap_set_bit (visited, SSA_NAME_VERSION (op0));\n \n       if (gimple_code (def) == GIMPLE_PHI)\n \t{"}, {"sha": "abe6caf19bd400c933c8361ee25a16aaac41304b", "filename": "gcc/regstat.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -308,10 +308,9 @@ regstat_bb_compute_ri (unsigned int bb_index,\n \t\tREG_BASIC_BLOCK (uregno) = REG_BLOCK_GLOBAL;\n \t    }\n \n-\t  if (!bitmap_bit_p (live, uregno))\n+\t  if (bitmap_set_bit (live, uregno))\n \t    {\n \t      /* This register is now live.  */\n-\t      bitmap_set_bit (live, uregno);\n \n \t      /* If we have seen this regno, then it has already been\n \t\t processed correctly with the per insn increment.  If"}, {"sha": "449a362ac1ea11952a7d3492d33291580b62dd1e", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -4632,11 +4632,8 @@ create_block_for_bookkeeping (edge e1, edge e2)\n \t\tif (INSN_P (insn))\n \t\t  EXPR_ORIG_BB_INDEX (INSN_EXPR (insn)) = succ->index;\n \n-\t      if (bitmap_bit_p (code_motion_visited_blocks, new_bb->index))\n-\t\t{\n-\t\t  bitmap_set_bit (code_motion_visited_blocks, succ->index);\n-\t\t  bitmap_clear_bit (code_motion_visited_blocks, new_bb->index);\n-\t\t}\n+\t      if (bitmap_clear_bit (code_motion_visited_blocks, new_bb->index))\n+\t\tbitmap_set_bit (code_motion_visited_blocks, succ->index);\n \n \t      gcc_assert (LABEL_P (BB_HEAD (new_bb))\n \t\t\t  && LABEL_P (BB_HEAD (succ)));\n@@ -5785,7 +5782,7 @@ track_scheduled_insns_and_blocks (rtx insn)\n      we still need to count it as an originator.  */\n   bitmap_set_bit (current_originators, INSN_UID (insn));\n \n-  if (!bitmap_bit_p (current_copies, INSN_UID (insn)))\n+  if (!bitmap_clear_bit (current_copies, INSN_UID (insn)))\n     {\n       /* Note that original block needs to be rescheduled, as we pulled an\n \t instruction out of it.  */\n@@ -5794,8 +5791,6 @@ track_scheduled_insns_and_blocks (rtx insn)\n       else if (INSN_UID (insn) < first_emitted_uid && !DEBUG_INSN_P (insn))\n \tnum_insns_scheduled++;\n     }\n-  else\n-    bitmap_clear_bit (current_copies, INSN_UID (insn));\n \n   /* For instructions we must immediately remove insn from the\n      stream, so subsequent update_data_sets () won't include this\n@@ -7498,7 +7493,7 @@ sel_sched_region_1 (void)\n                   continue;\n                 }\n \n-              if (bitmap_bit_p (blocks_to_reschedule, bb->index))\n+              if (bitmap_clear_bit (blocks_to_reschedule, bb->index))\n                 {\n                   flist_tail_init (new_fences);\n \n@@ -7507,8 +7502,6 @@ sel_sched_region_1 (void)\n                   /* Mark BB as head of the new ebb.  */\n                   bitmap_set_bit (forced_ebb_heads, bb->index);\n \n-                  bitmap_clear_bit (blocks_to_reschedule, bb->index);\n-\n                   gcc_assert (fences == NULL);\n \n                   init_fences (bb_note (bb));"}, {"sha": "ccf5c54320cc8c710096878803a03ff5e7b4a011", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -2338,11 +2338,8 @@ expand_case (gimple stmt)\n \t  /* If we have not seen this label yet, then increase the\n \t     number of unique case node targets seen.  */\n \t  lab = label_rtx (n->code_label);\n-\t  if (!bitmap_bit_p (label_bitmap, CODE_LABEL_NUMBER (lab)))\n-\t    {\n-\t      bitmap_set_bit (label_bitmap, CODE_LABEL_NUMBER (lab));\n-\t      uniq++;\n-\t    }\n+\t  if (bitmap_set_bit (label_bitmap, CODE_LABEL_NUMBER (lab)))\n+\t    uniq++;\n \t}\n \n       BITMAP_FREE (label_bitmap);"}, {"sha": "9fab7ad39662e1c074d661888d14d303d1160f2c", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -847,9 +847,8 @@ emit_eh_dispatch (gimple_seq *seq, eh_region region)\n static void\n note_eh_region_may_contain_throw (eh_region region)\n {\n-  while (!bitmap_bit_p (eh_region_may_contain_throw_map, region->index))\n+  while (bitmap_set_bit (eh_region_may_contain_throw_map, region->index))\n     {\n-      bitmap_set_bit (eh_region_may_contain_throw_map, region->index);\n       region = region->outer;\n       if (region == NULL)\n \tbreak;"}, {"sha": "948398ca1c85cfc72a113454552397504378723e", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -960,11 +960,10 @@ prune_unused_phi_nodes (bitmap phis, bitmap kills, bitmap uses)\n \t}\n \n       /* If the phi node is already live, there is nothing to do.  */\n-      if (bitmap_bit_p (live_phis, p))\n+      if (!bitmap_set_bit (live_phis, p))\n \tcontinue;\n \n-      /* Mark the phi as live, and add the new uses to the worklist.  */\n-      bitmap_set_bit (live_phis, p);\n+      /* Add the new uses to the worklist.  */\n       def_bb = BASIC_BLOCK (p);\n       FOR_EACH_EDGE (e, ei, def_bb->preds)\n \t{"}, {"sha": "88c77a48fdf2726f79f6d7a175b7e9ae01a89ec0", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -519,11 +519,9 @@ mark_nodes_having_upstream_mem_writes (struct graph *rdg)\n \n \tfor (i = 0; VEC_iterate (int, nodes, i, x); i++)\n \t  {\n-\t    if (bitmap_bit_p (seen, x))\n+\t    if (!bitmap_set_bit (seen, x))\n \t      continue;\n \n-\t    bitmap_set_bit (seen, x);\n-\n \t    if (RDG_MEM_WRITE_STMT (rdg, x)\n \t\t|| predecessor_has_mem_write (rdg, &(rdg->vertices[x]))\n \t\t/* In anti dependences the read should occur before\n@@ -644,12 +642,11 @@ rdg_flag_vertex (struct graph *rdg, int v, bitmap partition, bitmap loops,\n {\n   struct loop *loop;\n \n-  if (bitmap_bit_p (partition, v))\n+  if (!bitmap_set_bit (partition, v))\n     return;\n \n   loop = loop_containing_stmt (RDG_STMT (rdg, v));\n   bitmap_set_bit (loops, loop->num);\n-  bitmap_set_bit (partition, v);\n \n   if (rdg_cannot_recompute_vertex_p (rdg, v))\n     {\n@@ -730,11 +727,8 @@ rdg_flag_loop_exits (struct graph *rdg, bitmap loops, bitmap partition,\n \t\t\t\t       part_has_writes);\n \n       EXECUTE_IF_SET_IN_BITMAP (new_loops, 0, i, bi)\n-\tif (!bitmap_bit_p (loops, i))\n-\t  {\n-\t    bitmap_set_bit (loops, i);\n-\t    collect_condition_stmts (get_loop (i), &conds);\n-\t  }\n+\tif (bitmap_set_bit (loops, i))\n+\t  collect_condition_stmts (get_loop (i), &conds);\n \n       BITMAP_FREE (new_loops);\n     }\n@@ -864,14 +858,13 @@ rdg_build_components (struct graph *rdg, VEC (int, heap) *starting_vertices,\n     {\n       int c = rdg->vertices[v].component;\n \n-      if (!bitmap_bit_p (saved_components, c))\n+      if (bitmap_set_bit (saved_components, c))\n \t{\n \t  rdgc x = XCNEW (struct rdg_component);\n \t  x->num = c;\n \t  x->vertices = all_components[c];\n \n \t  VEC_safe_push (rdgc, heap, *components, x);\n-\t  bitmap_set_bit (saved_components, c);\n \t}\n     }\n "}, {"sha": "2e8ba2699a060c595ec8d4ebd6a15427b22a8d5d", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -889,9 +889,8 @@ collect_object_sizes_for (struct object_size_info *osi, tree var)\n \n   if (osi->pass == 0)\n     {\n-      if (! bitmap_bit_p (osi->visited, varno))\n+      if (bitmap_set_bit (osi->visited, varno))\n \t{\n-\t  bitmap_set_bit (osi->visited, varno);\n \t  object_sizes[object_size_type][varno]\n \t    = (object_size_type & 2) ? -1 : 0;\n \t}"}, {"sha": "83d2d277c5be8f2cab113e83e8a1bd2b31aac652", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -4233,11 +4233,8 @@ convert_callers (struct cgraph_node *node, tree old_decl,\n     }\n \n   for (cs = node->callers; cs; cs = cs->next_caller)\n-    if (!bitmap_bit_p (recomputed_callers, cs->caller->uid))\n-      {\n-\tcompute_inline_parameters (cs->caller);\n-\tbitmap_set_bit (recomputed_callers, cs->caller->uid);\n-      }\n+    if (bitmap_set_bit (recomputed_callers, cs->caller->uid))\n+      compute_inline_parameters (cs->caller);\n   BITMAP_FREE (recomputed_callers);\n \n   current_function_decl = old_cur_fndecl;"}, {"sha": "be44d5681084e37eb8ae51b3262e15b82a02be72", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -725,11 +725,8 @@ live_track_add_partition (live_track_p ptr, int partition)\n   root = basevar_index (ptr->map, partition);\n   /* If this base var wasn't live before, it is now.  Clear the element list\n      since it was delayed until needed.  */\n-  if (!bitmap_bit_p (ptr->live_base_var, root))\n-    {\n-      bitmap_set_bit (ptr->live_base_var, root);\n-      bitmap_clear (ptr->live_base_partitions[root]);\n-    }\n+  if (bitmap_set_bit (ptr->live_base_var, root))\n+    bitmap_clear (ptr->live_base_partitions[root]);\n   bitmap_set_bit (ptr->live_base_partitions[root], partition);\n \n }"}, {"sha": "fb99e16cf59bacae12badcda6e34f36bddef0dc6", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -377,11 +377,8 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees, void *data)\n      eliminated as unused.  */\n   if (TREE_CODE (t) == VAR_DECL)\n     {\n-      if (data != NULL && bitmap_bit_p ((bitmap) data, DECL_UID (t)))\n-\t{\n-\t  bitmap_clear_bit ((bitmap) data, DECL_UID (t));\n-\t  mark_all_vars_used (&DECL_INITIAL (t), data);\n-\t}\n+      if (data != NULL && bitmap_clear_bit ((bitmap) data, DECL_UID (t)))\n+\tmark_all_vars_used (&DECL_INITIAL (t), data);\n       set_is_used (t);\n     }\n   /* remove_unused_scope_block_p requires information about labels"}, {"sha": "b00307aff2b2cd2fa304385be942857d34d94230", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "patch": "@@ -855,9 +855,8 @@ bitmap_set_replace_value (bitmap_set_t set, unsigned int lookfor,\n   exprset = VEC_index (bitmap_set_t, value_expressions, lookfor);\n   FOR_EACH_EXPR_ID_IN_SET (exprset, i, bi)\n     {\n-      if (bitmap_bit_p (&set->expressions, i))\n+      if (bitmap_clear_bit (&set->expressions, i))\n \t{\n-\t  bitmap_clear_bit (&set->expressions, i);\n \t  bitmap_set_bit (&set->expressions, get_expression_id (expr));\n \t  return;\n \t}"}]}