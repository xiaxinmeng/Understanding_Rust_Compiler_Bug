{"sha": "4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5ZDYxZjc5YzBjMDE4NWEzMzA0OGFlNmNjNzIyNjljZjdlZmEzMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-06T12:50:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-24T13:59:19Z"}, "message": "add move CTOR to auto_vec, use auto_vec for get_loop_exit_edges\n\nThis adds a move CTOR to auto_vec<T, 0> and makes use of a\nauto_vec<edge> return value for get_loop_exit_edges denoting\nthat lifetime management of the vector is handed to the caller.\n\nThe move CTOR prompted the hash_table change because it appearantly\nmakes the copy CTOR implicitely deleted (good) and hash-table\nexpansion of the odr_enum_map which is\nhash_map <nofree_string_hash, odr_enum> where odr_enum has an\nauto_vec<odr_enum_val, 0> member triggers this.  Not sure if\nthere's a latent bug there before this (I think we're not\ninvoking DTORs, but we're invoking copy-CTORs).\n\n2020-08-06  Richard Biener  <rguenther@suse.de>\n\n\t* vec.h (auto_vec<T, 0>::auto_vec (auto_vec &&)): New move CTOR.\n\t(auto_vec<T, 0>::operator=(auto_vec &&)): Delete.\n\t* hash-table.h (hash_table::expand): Use std::move when expanding.\n\t* cfgloop.h (get_loop_exit_edges): Return auto_vec<edge>.\n\t* cfgloop.c (get_loop_exit_edges): Adjust.\n\t* cfgloopmanip.c (fix_loop_placement): Likewise.\n\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n\t* ira-build.c (create_loop_tree_nodes): Likewise.\n\t(create_loop_tree_node_allocnos): Likewise.\n\t(loop_with_complex_edge_p): Likewise.\n\t* ira-color.c (ira_loop_edge_freq): Likewise.\n\t* loop-unroll.c (analyze_insns_in_loop): Likewise.\n\t* predict.c (predict_loops): Likewise.\n\t* tree-predcom.c (last_always_executed_block): Likewise.\n\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Likewise.\n\t* tree-ssa-loop-im.c (store_motion_loop): Likewise.\n\t* tree-ssa-loop-ivcanon.c (loop_edge_to_cancel): Likewise.\n\t(canonicalize_loop_induction_variables): Likewise.\n\t* tree-ssa-loop-manip.c (get_loops_exits): Likewise.\n\t* tree-ssa-loop-niter.c (find_loop_niter): Likewise.\n\t(finite_loop_p): Likewise.\n\t(find_loop_niter_by_eval): Likewise.\n\t(estimate_numbers_of_iterations): Likewise.\n\t* tree-ssa-loop-prefetch.c (emit_mfence_after_loop): Likewise.\n\t(may_use_storent_in_loop_p): Likewise.", "tree": {"sha": "f62956faf4f9fa1e7b25d44bee91258c462842fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f62956faf4f9fa1e7b25d44bee91258c462842fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e66e53b1efb98f5cf6b0a123990c1ca999affd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e66e53b1efb98f5cf6b0a123990c1ca999affd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e66e53b1efb98f5cf6b0a123990c1ca999affd7"}], "stats": {"total": 98, "additions": 33, "deletions": 65}, "files": [{"sha": "33a26cca6a44096502db1a4b8fb6ac34915fd733", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -1202,10 +1202,10 @@ release_recorded_exits (function *fn)\n \n /* Returns the list of the exit edges of a LOOP.  */\n \n-vec<edge> \n+auto_vec<edge>\n get_loop_exit_edges (const class loop *loop, basic_block *body)\n {\n-  vec<edge> edges = vNULL;\n+  auto_vec<edge> edges;\n   edge e;\n   unsigned i;\n   edge_iterator ei;"}, {"sha": "d14689dc31fcd9922c39ed75c5118c6cf9e9b06d", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -383,7 +383,7 @@ extern basic_block *get_loop_body_in_custom_order (const class loop *,\n extern basic_block *get_loop_body_in_custom_order (const class loop *, void *,\n \t\t\t       int (*) (const void *, const void *, void *));\n \n-extern vec<edge> get_loop_exit_edges (const class loop *, basic_block * = NULL);\n+extern auto_vec<edge> get_loop_exit_edges (const class loop *, basic_block * = NULL);\n extern edge single_exit (const class loop *);\n extern edge single_likely_exit (class loop *loop, vec<edge>);\n extern unsigned num_loop_branches (const class loop *);"}, {"sha": "3c9e2a0a99c266da61531a9be561da69877ca174", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -126,7 +126,7 @@ fix_loop_placement (class loop *loop, bool *irred_invalidated)\n {\n   unsigned i;\n   edge e;\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   class loop *father = current_loops->tree_root, *act;\n   bool ret = false;\n \n@@ -157,7 +157,6 @@ fix_loop_placement (class loop *loop, bool *irred_invalidated)\n       ret = true;\n     }\n \n-  exits.release ();\n   return ret;\n }\n "}, {"sha": "487003c3acf5c7c12162f3c9dfb50c0443306382", "filename": "gcc/hash-table.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -819,7 +819,7 @@ hash_table<Descriptor, Lazy, Allocator>::expand ()\n       if (!is_empty (x) && !is_deleted (x))\n         {\n           value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));\n-\t  new ((void*) q) value_type (x);\n+\t  new ((void*) q) value_type (std::move (x));\n         }\n \n       p++;"}, {"sha": "cbcf0c4c95c8cafaf0548e6575e33e7be2b39a6e", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -2808,7 +2808,6 @@ analyze_function_body (struct cgraph_node *node, bool early)\n       scev_initialize ();\n       FOR_EACH_LOOP (loop, 0)\n \t{\n-\t  vec<edge> exits;\n \t  edge ex;\n \t  unsigned int j;\n \t  class tree_niter_desc niter_desc;\n@@ -2817,7 +2816,7 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \t  else\n \t    bb_predicate = false;\n \n-\t  exits = get_loop_exit_edges (loop);\n+\t  auto_vec<edge> exits = get_loop_exit_edges (loop);\n \t  FOR_EACH_VEC_ELT (exits, j, ex)\n \t    if (number_of_iterations_exit (loop, ex, &niter_desc, false)\n \t\t&& !is_gimple_min_invariant (niter_desc.niter))\n@@ -2835,7 +2834,6 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \t\t   loop with independent predicate.  */\n \t\tloop_iterations &= will_be_nonconstant;\n \t    }\n-\t  exits.release ();\n \t}\n \n       /* To avoid quadratic behavior we analyze stride predicates only"}, {"sha": "9b35d0e83a967a2a38e9f65498690973876a7c88", "filename": "gcc/ira-build.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -128,7 +128,6 @@ create_loop_tree_nodes (void)\n   bool skip_p;\n   edge_iterator ei;\n   edge e;\n-  vec<edge> edges;\n   loop_p loop;\n \n   ira_bb_nodes\n@@ -173,14 +172,13 @@ create_loop_tree_nodes (void)\n \t      }\n \t  if (skip_p)\n \t    continue;\n-\t  edges = get_loop_exit_edges (loop);\n+\t  auto_vec<edge> edges = get_loop_exit_edges (loop);\n \t  FOR_EACH_VEC_ELT (edges, j, e)\n \t    if ((e->flags & EDGE_ABNORMAL) && EDGE_CRITICAL_P (e))\n \t      {\n \t\tskip_p = true;\n \t\tbreak;\n \t      }\n-\t  edges.release ();\n \t  if (skip_p)\n \t    continue;\n \t}\n@@ -1964,17 +1962,15 @@ create_loop_tree_node_allocnos (ira_loop_tree_node_t loop_node)\n       int i;\n       edge_iterator ei;\n       edge e;\n-      vec<edge> edges;\n \n       ira_assert (current_loops != NULL);\n       FOR_EACH_EDGE (e, ei, loop_node->loop->header->preds)\n \tif (e->src != loop_node->loop->latch)\n \t  create_loop_allocnos (e);\n \n-      edges = get_loop_exit_edges (loop_node->loop);\n+      auto_vec<edge> edges = get_loop_exit_edges (loop_node->loop);\n       FOR_EACH_VEC_ELT (edges, i, e)\n \tcreate_loop_allocnos (e);\n-      edges.release ();\n     }\n }\n \n@@ -2167,21 +2163,19 @@ loop_with_complex_edge_p (class loop *loop)\n   int i;\n   edge_iterator ei;\n   edge e;\n-  vec<edge> edges;\n   bool res;\n \n   FOR_EACH_EDGE (e, ei, loop->header->preds)\n     if (e->flags & EDGE_EH)\n       return true;\n-  edges = get_loop_exit_edges (loop);\n+  auto_vec<edge> edges = get_loop_exit_edges (loop);\n   res = false;\n   FOR_EACH_VEC_ELT (edges, i, e)\n     if (e->flags & EDGE_COMPLEX)\n       {\n \tres = true;\n \tbreak;\n       }\n-  edges.release ();\n   return res;\n }\n #endif"}, {"sha": "d3f8e23faff61cab63a3ccb56f0cd464793ba3c4", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -2539,7 +2539,6 @@ ira_loop_edge_freq (ira_loop_tree_node_t loop_node, int regno, bool exit_p)\n   int freq, i;\n   edge_iterator ei;\n   edge e;\n-  vec<edge> edges;\n \n   ira_assert (current_loops != NULL && loop_node->loop != NULL\n \t      && (regno < 0 || regno >= FIRST_PSEUDO_REGISTER));\n@@ -2555,13 +2554,12 @@ ira_loop_edge_freq (ira_loop_tree_node_t loop_node, int regno, bool exit_p)\n     }\n   else\n     {\n-      edges = get_loop_exit_edges (loop_node->loop);\n+      auto_vec<edge> edges = get_loop_exit_edges (loop_node->loop);\n       FOR_EACH_VEC_ELT (edges, i, e)\n \tif (regno < 0\n \t    || (bitmap_bit_p (df_get_live_out (e->src), regno)\n \t\t&& bitmap_bit_p (df_get_live_in (e->dest), regno)))\n \t  freq += EDGE_FREQUENCY (e);\n-      edges.release ();\n     }\n \n   return REG_FREQ_FROM_EDGE_FREQ (freq);"}, {"sha": "e1efe6243610aebb886642569dfcae70fe4db110", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -1580,7 +1580,7 @@ analyze_insns_in_loop (class loop *loop)\n   struct var_to_expand *ves = NULL;\n   iv_to_split **slot1;\n   var_to_expand **slot2;\n-  vec<edge> edges = get_loop_exit_edges (loop);\n+  auto_vec<edge> edges = get_loop_exit_edges (loop);\n   edge exit;\n   bool can_apply = false;\n \n@@ -1656,7 +1656,6 @@ analyze_insns_in_loop (class loop *loop)\n       }\n     }\n \n-  edges.release ();\n   free (body);\n   return opt_info;\n }"}, {"sha": "5983889209ffb8e0c6b35e09f4f45ce2c01d055e", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -1916,7 +1916,6 @@ predict_loops (void)\n     {\n       basic_block bb, *bbs;\n       unsigned j, n_exits = 0;\n-      vec<edge> exits;\n       class tree_niter_desc niter_desc;\n       edge ex;\n       class nb_iter_bound *nb_iter;\n@@ -1927,15 +1926,12 @@ predict_loops (void)\n       gcond *stmt = NULL;\n       bool recursion = with_recursion.contains (loop);\n \n-      exits = get_loop_exit_edges (loop);\n+      auto_vec<edge> exits = get_loop_exit_edges (loop);\n       FOR_EACH_VEC_ELT (exits, j, ex)\n \tif (!unlikely_executed_edge_p (ex) && !(ex->flags & EDGE_ABNORMAL_CALL))\n \t  n_exits ++;\n       if (!n_exits)\n-\t{\n-          exits.release ();\n-\t  continue;\n-\t}\n+\tcontinue;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Predicting loop %i%s with %i exits.\\n\",\n@@ -2049,7 +2045,6 @@ predict_loops (void)\n \t  probability = RDIV (REG_BR_PROB_BASE, nitercst);\n \t  predict_edge (ex, predictor, probability);\n \t}\n-      exits.release ();\n \n       /* Find information about loop bound variables.  */\n       for (nb_iter = loop->bounds; nb_iter;"}, {"sha": "7a5990ac609affe8260dd98ee3ad2284faeca8dd", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -737,13 +737,12 @@ static basic_block\n last_always_executed_block (class loop *loop)\n {\n   unsigned i;\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   edge ex;\n   basic_block last = loop->latch;\n \n   FOR_EACH_VEC_ELT (exits, i, ex)\n     last = nearest_common_dominator (CDI_DOMINATORS, last, ex->src);\n-  exits.release ();\n \n   return last;\n }"}, {"sha": "b86acf7c39dd660b92c1850349b71e70cd63d043", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -504,14 +504,13 @@ ch_base::copy_headers (function *fun)\n \t{\n \t  edge entry = copied[i].first;\n \t  loop_p loop = copied[i].second;\n-\t  vec<edge> exit_edges = get_loop_exit_edges (loop);\n+\t  auto_vec<edge> exit_edges = get_loop_exit_edges (loop);\n \t  bitmap exit_bbs = BITMAP_ALLOC (NULL);\n \t  for (unsigned j = 0; j < exit_edges.length (); ++j)\n \t    bitmap_set_bit (exit_bbs, exit_edges[j]->dest->index);\n \t  bitmap_set_bit (exit_bbs, loop->header->index);\n \t  do_rpo_vn (cfun, entry, exit_bbs);\n \t  BITMAP_FREE (exit_bbs);\n-\t  exit_edges.release ();\n \t}\n     }\n   free (bbs);"}, {"sha": "6bb07e133cdb316adc09f17d0d5a4b9e1b7adc41", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -2868,7 +2868,7 @@ loop_suitable_for_sm (class loop *loop ATTRIBUTE_UNUSED,\n static void\n store_motion_loop (class loop *loop, bitmap sm_executed)\n {\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   class loop *subloop;\n   bitmap sm_in_loop = BITMAP_ALLOC (&lim_bitmap_obstack);\n \n@@ -2878,7 +2878,6 @@ store_motion_loop (class loop *loop, bitmap sm_executed)\n       if (!bitmap_empty_p (sm_in_loop))\n \thoist_memory_references (loop, sm_in_loop, exits);\n     }\n-  exits.release ();\n \n   bitmap_ior_into (sm_executed, sm_in_loop);\n   for (subloop = loop->inner; subloop != NULL; subloop = subloop->next)"}, {"sha": "5bb781dc7fadb0fa4e0ccd419ef2f31ba2f5623a", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -444,7 +444,6 @@ estimated_unrolled_size (struct loop_size *size,\n static edge\n loop_edge_to_cancel (class loop *loop)\n {\n-  vec<edge> exits;\n   unsigned i;\n   edge edge_to_cancel;\n   gimple_stmt_iterator gsi;\n@@ -453,7 +452,7 @@ loop_edge_to_cancel (class loop *loop)\n   if (EDGE_COUNT (loop->latch->preds) > 1)\n     return NULL;\n \n-  exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n \n   FOR_EACH_VEC_ELT (exits, i, edge_to_cancel)\n     {\n@@ -477,8 +476,6 @@ loop_edge_to_cancel (class loop *loop)\n       if (edge_to_cancel->dest != loop->latch)\n         continue;\n \n-      exits.release ();\n-\n       /* Verify that the code in loop latch does nothing that may end program\n          execution without really reaching the exit.  This may include\n \t non-pure/const function calls, EH statements, volatile ASMs etc.  */\n@@ -487,7 +484,6 @@ loop_edge_to_cancel (class loop *loop)\n \t   return NULL;\n       return edge_to_cancel;\n     }\n-  exits.release ();\n   return NULL;\n }\n \n@@ -1222,10 +1218,9 @@ canonicalize_loop_induction_variables (class loop *loop,\n      by find_loop_niter_by_eval.  Be sure to keep it for future.  */\n   if (niter && TREE_CODE (niter) == INTEGER_CST)\n     {\n-      vec<edge> exits = get_loop_exit_edges  (loop);\n+      auto_vec<edge> exits = get_loop_exit_edges  (loop);\n       record_niter_bound (loop, wi::to_widest (niter),\n \t\t\t  exit == single_likely_exit (loop, exits), true);\n-      exits.release ();\n     }\n \n   /* Force re-computation of loop bounds so we can remove redundant exits.  */"}, {"sha": "cdd1ac7683321a3e38a43fc9eb59779a205ab9fa", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -368,11 +368,10 @@ get_loops_exits (bitmap *loop_exits)\n \n   FOR_EACH_LOOP (loop, 0)\n     {\n-      vec<edge> exit_edges = get_loop_exit_edges (loop);\n+      auto_vec<edge> exit_edges = get_loop_exit_edges (loop);\n       loop_exits[loop->num] = BITMAP_ALLOC (&loop_renamer_obstack);\n       FOR_EACH_VEC_ELT (exit_edges, j, e)\n         bitmap_set_bit (loop_exits[loop->num], e->dest->index);\n-      exit_edges.release ();\n     }\n }\n "}, {"sha": "45747e150f43c346d62ff894a35bd31998ab88f0", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -2752,7 +2752,7 @@ tree\n find_loop_niter (class loop *loop, edge *exit)\n {\n   unsigned i;\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   edge ex;\n   tree niter = NULL_TREE, aniter;\n   class tree_niter_desc desc;\n@@ -2803,7 +2803,6 @@ find_loop_niter (class loop *loop, edge *exit)\n \t  continue;\n \t}\n     }\n-  exits.release ();\n \n   return niter ? niter : chrec_dont_know;\n }\n@@ -2837,21 +2836,18 @@ finite_loop_p (class loop *loop)\n   if (loop->finite_p)\n     {\n       unsigned i;\n-      vec<edge> exits = get_loop_exit_edges (loop);\n+      auto_vec<edge> exits = get_loop_exit_edges (loop);\n       edge ex;\n \n       /* If the loop has a normal exit, we can assume it will terminate.  */\n       FOR_EACH_VEC_ELT (exits, i, ex)\n \tif (!(ex->flags & (EDGE_EH | EDGE_ABNORMAL | EDGE_FAKE)))\n \t  {\n-\t    exits.release ();\n \t    if (dump_file)\n \t      fprintf (dump_file, \"Assume loop %i to be finite: it has an exit \"\n \t\t       \"and -ffinite-loops is on.\\n\", loop->num);\n \t    return true;\n \t  }\n-\n-      exits.release ();\n     }\n \n   return false;\n@@ -3114,7 +3110,7 @@ tree\n find_loop_niter_by_eval (class loop *loop, edge *exit)\n {\n   unsigned i;\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   edge ex;\n   tree niter = NULL_TREE, aniter;\n \n@@ -3123,10 +3119,7 @@ find_loop_niter_by_eval (class loop *loop, edge *exit)\n   /* Loops with multiple exits are expensive to handle and less important.  */\n   if (!flag_expensive_optimizations\n       && exits.length () > 1)\n-    {\n-      exits.release ();\n-      return chrec_dont_know;\n-    }\n+    return chrec_dont_know;\n \n   FOR_EACH_VEC_ELT (exits, i, ex)\n     {\n@@ -3144,7 +3137,6 @@ find_loop_niter_by_eval (class loop *loop, edge *exit)\n       niter = aniter;\n       *exit = ex;\n     }\n-  exits.release ();\n \n   return niter ? niter : chrec_dont_know;\n }\n@@ -4236,7 +4228,6 @@ get_upper_bound_based_on_builtin_expr_with_prob (gcond *cond)\n void\n estimate_numbers_of_iterations (class loop *loop)\n {\n-  vec<edge> exits;\n   tree niter, type;\n   unsigned i;\n   class tree_niter_desc niter_desc;\n@@ -4275,7 +4266,7 @@ estimate_numbers_of_iterations (class loop *loop)\n   number_of_latch_executions (loop);\n \n   basic_block *body = get_loop_body (loop);\n-  exits = get_loop_exit_edges (loop, body);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop, body);\n   likely_exit = single_likely_exit (loop, exits);\n   FOR_EACH_VEC_ELT (exits, i, ex)\n     {\n@@ -4311,7 +4302,6 @@ estimate_numbers_of_iterations (class loop *loop)\n \t\t       true, ex == likely_exit, true);\n       record_control_iv (loop, &niter_desc);\n     }\n-  exits.release ();\n \n   if (flag_aggressive_loop_optimizations)\n     infer_loop_bounds_from_undefined (loop, body);"}, {"sha": "5e94a19c964b197d207d7a34642a04959d2ab230", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -1289,7 +1289,7 @@ mark_nontemporal_store (struct mem_ref *ref)\n static void\n emit_mfence_after_loop (class loop *loop)\n {\n-  vec<edge> exits = get_loop_exit_edges (loop);\n+  auto_vec<edge> exits = get_loop_exit_edges (loop);\n   edge exit;\n   gcall *call;\n   gimple_stmt_iterator bsi;\n@@ -1309,7 +1309,6 @@ emit_mfence_after_loop (class loop *loop)\n       gsi_insert_before (&bsi, call, GSI_NEW_STMT);\n     }\n \n-  exits.release ();\n   update_ssa (TODO_update_ssa_only_virtuals);\n }\n \n@@ -1327,16 +1326,14 @@ may_use_storent_in_loop_p (class loop *loop)\n      is a suitable place for it at each of the loop exits.  */\n   if (FENCE_FOLLOWING_MOVNT != NULL_TREE)\n     {\n-      vec<edge> exits = get_loop_exit_edges (loop);\n+      auto_vec<edge> exits = get_loop_exit_edges (loop);\n       unsigned i;\n       edge exit;\n \n       FOR_EACH_VEC_ELT (exits, i, exit)\n \tif ((exit->flags & EDGE_ABNORMAL)\n \t    && exit->dest == EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t  ret = false;\n-\n-      exits.release ();\n     }\n \n   return ret;"}, {"sha": "d73d865cff264ff5b70a0d2dd389c74e4c426be8", "filename": "gcc/vec.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b9d61f79c0c0185a33048ae6cc72269cf7efa31/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=4b9d61f79c0c0185a33048ae6cc72269cf7efa31", "patch": "@@ -1540,6 +1540,13 @@ class auto_vec<T, 0> : public vec<T, va_heap>\n   auto_vec () { this->m_vec = NULL; }\n   auto_vec (size_t n) { this->create (n); }\n   ~auto_vec () { this->release (); }\n+\n+  auto_vec (auto_vec&& r)\n+    {\n+      this->m_vec = r.m_vec;\n+      r.m_vec = NULL;\n+    }\n+  void operator= (auto_vec&&) = delete;\n };\n \n "}]}