{"sha": "0792ab197b3956a2631a7b46f773ba11045357bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5MmFiMTk3YjM5NTZhMjYzMWE3YjQ2Zjc3M2JhMTEwNDUzNTdiYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-15T15:06:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-15T15:06:14Z"}, "message": "expmed.c (synth_mult): Mask bits of the multiplier to the machine mode of the multiplication.\n\n\n\t* expmed.c (synth_mult): Mask bits of the multiplier to the\n\tmachine mode of the multiplication.  Don't consider shifts\n\tby more than (or equal to) the width of the operation's mode.\n\nFrom-SVN: r83187", "tree": {"sha": "e04a2fe3bce10855bce0dcd51b05d25bf50ce7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e04a2fe3bce10855bce0dcd51b05d25bf50ce7ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0792ab197b3956a2631a7b46f773ba11045357bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0792ab197b3956a2631a7b46f773ba11045357bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0792ab197b3956a2631a7b46f773ba11045357bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0792ab197b3956a2631a7b46f773ba11045357bc/comments", "author": null, "committer": null, "parents": [{"sha": "5a4f18181b64187fdfa0f0c21d6a2ca476a2469e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4f18181b64187fdfa0f0c21d6a2ca476a2469e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4f18181b64187fdfa0f0c21d6a2ca476a2469e"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "e9817abeea615e49bf1cfdcd9c2e9c46cc700350", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0792ab197b3956a2631a7b46f773ba11045357bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0792ab197b3956a2631a7b46f773ba11045357bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0792ab197b3956a2631a7b46f773ba11045357bc", "patch": "@@ -1,3 +1,9 @@\n+2004-06-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (synth_mult): Mask bits of the multiplier to the\n+\tmachine mode of the multiplication.  Don't consider shifts\n+\tby more than (or equal to) the width of the operation's mode.\n+\n 2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/install.texi: Yet another update for autoconf"}, {"sha": "bebdbe86decdba1a764bd7ad3e14b7e31fe7908e", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0792ab197b3956a2631a7b46f773ba11045357bc/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0792ab197b3956a2631a7b46f773ba11045357bc/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=0792ab197b3956a2631a7b46f773ba11045357bc", "patch": "@@ -2191,6 +2191,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n   struct algorithm *alg_in, *best_alg;\n   int cost;\n   unsigned HOST_WIDE_INT q;\n+  int maxm = MIN (BITS_PER_WORD, GET_MODE_BITSIZE (mode));\n \n   /* Indicate that no algorithm is yet found.  If no algorithm\n      is found, this value will be returned and indicate failure.  */\n@@ -2199,6 +2200,9 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n   if (cost_limit <= 0)\n     return;\n \n+  /* Restrict the bits of \"t\" to the multiplication's mode.  */\n+  t &= GET_MODE_MASK (mode);\n+\n   /* t == 1 can be done in zero cost.  */\n   if (t == 1)\n     {\n@@ -2234,7 +2238,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n   if ((t & 1) == 0)\n     {\n       m = floor_log2 (t & -t);\t/* m = number of low zero bits */\n-      if (m < BITS_PER_WORD)\n+      if (m < maxm)\n \t{\n \t  q = t >> m;\n \t  cost = shift_cost[mode][m];\n@@ -2319,7 +2323,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       unsigned HOST_WIDE_INT d;\n \n       d = ((unsigned HOST_WIDE_INT) 1 << m) + 1;\n-      if (t % d == 0 && t > d && m < BITS_PER_WORD)\n+      if (t % d == 0 && t > d && m < maxm)\n \t{\n \t  cost = add_cost[mode] + shift_cost[mode][m];\n \t  if (shiftadd_cost[mode][m] < cost)\n@@ -2340,7 +2344,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n \t}\n \n       d = ((unsigned HOST_WIDE_INT) 1 << m) - 1;\n-      if (t % d == 0 && t > d && m < BITS_PER_WORD)\n+      if (t % d == 0 && t > d && m < maxm)\n \t{\n \t  cost = add_cost[mode] + shift_cost[mode][m];\n \t  if (shiftsub_cost[mode][m] < cost)\n@@ -2367,7 +2371,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       q = t - 1;\n       q = q & -q;\n       m = exact_log2 (q);\n-      if (m >= 0 && m < BITS_PER_WORD)\n+      if (m >= 0 && m < maxm)\n \t{\n \t  cost = shiftadd_cost[mode][m];\n \t  synth_mult (alg_in, (t - 1) >> m, cost_limit - cost, mode);\n@@ -2386,7 +2390,7 @@ synth_mult (struct algorithm *alg_out, unsigned HOST_WIDE_INT t,\n       q = t + 1;\n       q = q & -q;\n       m = exact_log2 (q);\n-      if (m >= 0 && m < BITS_PER_WORD)\n+      if (m >= 0 && m < maxm)\n \t{\n \t  cost = shiftsub_cost[mode][m];\n \t  synth_mult (alg_in, (t + 1) >> m, cost_limit - cost, mode);"}]}