{"sha": "19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwNzNlYmM3YWQzNDBiY2JjZmM5ZTQ3NzE1ZjIzNWE1M2UwZGM3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-13T16:31:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-13T16:31:56Z"}, "message": "g++.exp (g++_init): Use istarget.\n\n\t* lib/g++.exp (g++_init):  Use istarget.  Remove target_triplet global.\n\t* lib/obj-c++.exp (obj-c++_init): Ditto.\n\t* lib/file-format.exp (gcc_target_object_format): Ditto.\n\t* lib/target-supports-dg.exp (dg-require-dll): Ditto.\n\t* lib/target-supports-dg-exp (check_weak_available): Ditto.\n\t(check_visibility_available): Ditto.\n\t(check_effective_target_tls_native): Ditto.\n\t(check_effective_target_tls_emulated): Ditto.\n\t(check_effective_target_function_sections): Ditto.\n\nFrom-SVN: r176240", "tree": {"sha": "3c8c4c0867ec047e469fdced2def7476e99c1636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8c4c0867ec047e469fdced2def7476e99c1636"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/comments", "author": null, "committer": null, "parents": [{"sha": "e141542e74a015a27828aeaf89dabfbac9506ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e141542e74a015a27828aeaf89dabfbac9506ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e141542e74a015a27828aeaf89dabfbac9506ccc"}], "stats": {"total": 148, "additions": 74, "deletions": 74}, "files": [{"sha": "a74ee65ae4ca3941b4666f7f7e09141d943314dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -1,3 +1,15 @@\n+2011-07-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/g++.exp (g++_init):  Use istarget.  Remove target_triplet global.\n+\t* lib/obj-c++.exp (obj-c++_init): Ditto.\n+\t* lib/file-format.exp (gcc_target_object_format): Ditto.\n+\t* lib/target-supports-dg.exp (dg-require-dll): Ditto.\n+\t* lib/target-supports-dg-exp (check_weak_available): Ditto.\n+\t(check_visibility_available): Ditto.\n+\t(check_effective_target_tls_native): Ditto.\n+\t(check_effective_target_tls_emulated): Ditto.\n+\t(check_effective_target_function_sections): Ditto.\n+\n 2011-07-13  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gcc.target/arm/pr48183.c: New test.\n@@ -35,12 +47,11 @@\n \n 2011-07-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* gcc.dg/vect/costmodel/x86_64/x86_64-costmodel-vect.exp: Check\n-\tia32.\n+\t* gcc.dg/vect/costmodel/x86_64/x86_64-costmodel-vect.exp: Check ia32.\n \t* go.test/go-test.exp (go-set-goarch): Likewise.\n \n 2011-07-11  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/39633\n \t* gcc.target/avr/torture/pr39633.c: New test case.\n \n@@ -50,7 +61,7 @@\n \t* gfortran.dg/coarray_lock_3.f90: Remove bogus dg-error.\n \n 2011-07-11  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* lib/target-supports.exp (check_effective_target_scheduling):\n \tNew Function.\n \t* gcc.dg/pr46614.c: Add dg-require-effective-target scheduling.\n@@ -59,7 +70,7 @@\n \t* g++.dg/pr45056.C: Ditto.\n \n 2011-07-11  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* gcc.dg/compat/struct-by-value-16_main.c: Skip AVR.\n \t* gcc.dg/compat/struct-by-value-17_main.c: Skip AVR.\n \t* gcc.dg/compat/struct-by-value-18_main.c: Skip AVR.\n@@ -588,7 +599,7 @@\n \t* gcc.dg/debug/pr49522.c: New test.\n \n 2011-07-07  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* gcc.dg/pragma-align.c: Run only if target !default_packed.\n \t* gcc.dg/pr46212.c: Run only if target int32plus.\n \t* gcc.dg/torture/pr48146.c: Ditto."}, {"sha": "92437c4ef6149ab790fdd0b6d9b34a249300a16c", "filename": "gcc/testsuite/lib/file-format.exp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffile-format.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -24,17 +24,16 @@\n \n proc gcc_target_object_format { } { \n     global gcc_target_object_format_saved\n-    global target_triplet\n     global tool\n \n     if [info exists gcc_target_object_format_saved] {\n         verbose \"gcc_target_object_format returning saved $gcc_target_object_format_saved\" 2\n-    } elseif { [string match \"*-*-darwin*\" $target_triplet] } {\n+    } elseif { [istarget *-*-darwin*] } {\n \t# Darwin doesn't necessarily have objdump, so hand-code it.\n \tset gcc_target_object_format_saved mach-o\n-    } elseif { [string match \"hppa*-*-hpux*\" $target_triplet] } {\n+    } elseif { [istarget hppa*-*-hpux*] } {\n \t# HP-UX doesn't necessarily have objdump, so hand-code it.\n-\tif { [string match \"hppa*64*-*-hpux*\" $target_triplet] } {\n+\tif { [istarget hppa*64*-*-hpux*] } {\n \t  set gcc_target_object_format_saved elf\n \t} else {\n \t  set gcc_target_object_format_saved som"}, {"sha": "8d6e2ddd817aa8940c79b958e0b85d9dae045a43", "filename": "gcc/testsuite/lib/fortran-torture.exp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-torture.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -37,33 +37,33 @@ proc get-fortran-torture-options { } {\n \n     set vectorizer_options [list \"-O2\" \"-ftree-vectorize\"]\n \n-    if { [istarget \"powerpc*-*-*\"]\n+    if { [istarget powerpc*-*-*]\n \t && [is-effective-target powerpc_altivec_ok]\n \t && [check_vmx_hw_available] } {\n \tlappend vectorizer_options \"-maltivec\"\n \tset test_tree_vectorize 1\n-    } elseif { [istarget  \"spu-*-*\"] } {\n+    } elseif { [istarget spu-*-*] } {\n \tset test_tree_vectorize 1\n-    } elseif { ( [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] )\n+    } elseif { ( [istarget i?86-*-*] || [istarget x86_64-*-*] )\n \t       && [check_effective_target_sse2]\n \t       && [check_sse2_hw_available]\n \t       && [check_sse_os_support_available] } {\n \tlappend vectorizer_options \"-msse2\"\n \tset test_tree_vectorize 1\n-    } elseif { [istarget \"mips*-*-*\"]\n+    } elseif { [istarget mips*-*-*]\n \t       && [check_effective_target_mpaired_single]\n \t       && [check_effective_target_nomips16] } {\n \tlappend vectorizer_options \"-mpaired-single\"\n \tset test_tree_vectorize 1\n-    } elseif { [istarget \"sparc*-*-*\"]\n+    } elseif { [istarget sparc*-*-*]\n \t       && [check_effective_target_ultrasparc_hw] } {\n \tlappend vectorizer_options \"-mcpu=ultrasparc\" \"-mvis\"\n \tset test_tree_vectorize 1\n-    } elseif { [istarget \"alpha*-*-*\"]\n+    } elseif { [istarget alpha*-*-*]\n \t       && [check_alpha_max_hw_available] } {\n \tlappend vectorizer_options \"-mmax\"\n \tset test_tree_vectorize 1\n-    } elseif [istarget \"ia64-*-*\"] {\n+    } elseif [istarget ia64-*-*] {\n \tset test_tree_vectorize 1\n     } else {\n \tset test_tree_vectorize 0\n@@ -414,14 +414,14 @@ proc fortran-torture { args } {\n #\n proc add-ieee-options { } {\n     # Ensure that excess precision does not cause problems.\n-    if { [istarget \"i?86-*-*\"]\n-\t || [istarget \"m68k-*-*\"] } then {\n+    if { [istarget i?86-*-*]\n+\t || [istarget m68k-*-*] } then {\n       uplevel 1 lappend additional_flags \"-ffloat-store\"\n     }\n \n     # Enable full IEEE compliance mode.\n-    if { [istarget \"alpha*-*-*\"]\n-         || [istarget \"sh*-*-*\"] } then {\n+    if { [istarget alpha*-*-*]\n+         || [istarget sh*-*-*] } then {\n       uplevel 1 lappend additional_flags \"-mieee\"\n     }\n }"}, {"sha": "70c7aed468868e72e7529ad5d2b456674ef738e4", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -188,7 +188,6 @@ proc g++_init { args } {\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n     global GXX_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n-    global target_triplet\n     global gcc_warning_prefix\n     global gcc_error_prefix\n \n@@ -263,7 +262,7 @@ proc g++_init { args } {\n     set gcc_warning_prefix \"warning:\"\n     set gcc_error_prefix \"error:\"\n \n-    if { [string match \"*-*-darwin*\" $target_triplet] } {\n+    if { [istarget *-*-darwin*] } {\n \tlappend ALWAYS_CXXFLAGS \"ldflags=-multiply_defined suppress\"\n        }\n "}, {"sha": "0dbb088314fa74e361cb98ff1897387fc53a88e2", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -157,8 +157,8 @@ proc ${tool}_check_unsupported_p { output } {\n     if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n \treturn \"memory full\"\n     }\n-    if {[istarget spu-*-*] && \\\n-            [string match \"*exceeds local store*\" $output]} {\n+    if { [istarget spu-*-*] && \\\n+\t     [string match \"*exceeds local store*\" $output] } {\n \treturn \"memory full\"\n     }\n     return \"\""}, {"sha": "a956f3a7f92c83138342c83f7682c268351926b5", "filename": "gcc/testsuite/lib/go-torture.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -356,14 +356,14 @@ proc go-torture { args } {\n #\n proc add-ieee-options { } {\n     # Ensure that excess precision does not cause problems.\n-    if { [istarget \"i?86-*-*\"]\n-\t || [istarget \"m68k-*-*\"] } then {\n+    if { [istarget i?86-*-*]\n+\t || [istarget m68k-*-*] } then {\n       uplevel 1 lappend additional_flags \"-ffloat-store\"\n     }\n \n     # Enable full IEEE compliance mode.\n-    if { [istarget \"alpha*-*-*\"]\n-         || [istarget \"sh*-*-*\"] } then {\n+    if { [istarget alpha*-*-*]\n+         || [istarget sh*-*-*] } then {\n       uplevel 1 lappend additional_flags \"-mieee\"\n     }\n }"}, {"sha": "b3bed0e30a2c549ad3bf0f08dd447b60b1b1b746", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -210,7 +210,6 @@ proc obj-c++_init { args } {\n     global TOOL_EXECUTABLE TOOL_OPTIONS\n     global OBJCXX_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n-    global target_triplet\n     global gcc_warning_prefix\n     global gcc_error_prefix\n \n@@ -270,7 +269,7 @@ proc obj-c++_init { args } {\n     set gcc_warning_prefix \"warning:\"\n     set gcc_error_prefix \"error:\"\n \n-    if { [string match \"*-*-darwin*\" $target_triplet] } {\n+    if { [istarget *-*-darwin*] } {\n \tlappend ALWAYS_OBJCXXFLAGS \"ldflags=-multiply_defined suppress\"\n     }\n \n@@ -299,7 +298,7 @@ proc obj-c++_target_compile { source dest type options } {\n     # we need to add the include path for the gnu runtime if that is in\n     # use.\n     # First, set the default...\n-    if { [istarget \"*-*-darwin*\"] } {\n+    if { [istarget *-*-darwin*] } {\n \tset nextruntime 1\n     } else {\n \tset nextruntime 0"}, {"sha": "357ab76398c0a3d01e104360ae87c0dfe41324b9", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -30,7 +30,7 @@ proc objc-set-runtime-options { dowhat args } {\n     # installation can have the objc headers present in the same locations \n     # that Darwin uses.  If NeXT is ported to another target, then it should\n     # be listed here.\n-    if [istarget \"*-*-darwin*\" ] {\n+    if [istarget *-*-darwin*] {\n       lappend rtlist \"-fnext-runtime\" \n     }\n     if [info exists OBJC_RUNTIME_OPTIONS] {"}, {"sha": "3a19c48f27833c03f05752f7483afc3c1758cf2d", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -150,7 +150,7 @@ proc objc_target_compile { source dest type options } {\n     # we need to add the include path for the gnu runtime if that is in \n     # use.\n     # First set the default...\n-    if { [istarget \"*-*-darwin*\"] } {\n+    if { [istarget *-*-darwin*] } {\n \tset nextruntime 1\n     } else {\n \tset nextruntime 0"}, {"sha": "6574ab13a351484f9c13b1fac46420cb5eb08b2c", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -461,10 +461,10 @@ proc dg-function-on-line { args } {\n \t}\n     }\n \n-    if { [istarget \"hppa*-*-*\"] } {\n+    if { [istarget hppa*-*-*] } {\n \tset pattern [format {\\t;[^:]+:%d\\n(\\t[^\\t]+\\n)+%s:\\n\\t.PROC} \\\n                      $line $symbol]\n-    } elseif { [istarget \"mips-sgi-irix*\"] } {\n+    } elseif { [istarget mips-sgi-irix*] } {\n \tset pattern [format {\\t\\.loc [0-9]+ %d 0( [^\\n]*)?\\n\\t\\.set\\t(no)?mips16\\n\\t\\.ent\\t%s\\n\\t\\.type\\t%s, @function\\n%s:\\n} \\\n \t\t     $line $symbol $symbol $symbol]\n     } else {"}, {"sha": "d3d743810f0ef1c611fccef4d46760cc6e88319b", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -272,11 +272,11 @@ proc restore_ld_library_path_env_vars { } {\n proc get_shlib_extension { } {\n     global shlib_ext\n \n-    if { [ istarget *-*-darwin* ] } {\n+    if { [istarget *-*-darwin*] } {\n \tset shlib_ext \"dylib\"\n-    } elseif { [ istarget *-*-cygwin* ] || [ istarget *-*-mingw* ] } {\n+    } elseif { [istarget *-*-cygwin*] || [istarget *-*-mingw*] } {\n \tset shlib_ext \"dll\"\n-    } elseif { [ istarget hppa*-*-hpux* ] } {\n+    } elseif { [istarget hppa*-*-hpux*] } {\n \tset shlib_ext \"sl\"\n     } else {\n \tset shlib_ext \"so\""}, {"sha": "3e577a91166e4c82f0c86f8adc44ebf3a7ce89d9", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -122,11 +122,10 @@ proc dg-require-profiling { args } {\n # If this target does not support DLL attributes skip this test.\n \n proc dg-require-dll { args } {\n-    global target_triplet\n     # As a special case, the mcore-*-elf supports these attributes.\n     # All Symbian OS targets also support these attributes.\n-    if { [string match \"mcore-*-elf\" $target_triplet]\n-         || [string match \"*-*-symbianelf\" $target_triplet]} {\n+    if { [istarget mcore-*-elf]\n+         || [istarget *-*-symbianelf] } {\n \treturn\n     }\n     # PE/COFF targets support dllimport/dllexport."}, {"sha": "e981608cc39dd7884a3335709b9bbc1c8edbdb5f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19073ebc7ad340bcbcfc9e47715f235a53e0dc73/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=19073ebc7ad340bcbcfc9e47715f235a53e0dc73", "patch": "@@ -219,7 +219,6 @@ proc check_runtime {prop args} {\n # this proc returns 1 if they're supported, 0 if they're not, or -1 if unsure\n \n proc check_weak_available { } {\n-    global target_triplet\n     global target_cpu\n \n     # All mips targets should support it\n@@ -230,25 +229,25 @@ proc check_weak_available { } {\n \n     # All solaris2 targets should support it\n \n-    if { [regexp \".*-solaris2.*\" $target_triplet] } {\n+    if { [istarget *-*-solaris2*] } {\n         return 1\n     }\n \n     # DEC OSF/1/Digital UNIX/Tru64 UNIX supports it\n \n-    if { [regexp \"alpha.*osf.*\" $target_triplet] } {\n+    if { [istarget alpha*-dec-osf*] } {\n \treturn 1\n     }\n \n     # Windows targets Cygwin and MingW32 support it\n \n-    if { [regexp \".*mingw32|.*cygwin\" $target_triplet] } {\n+    if { [istarget *-*-cygwin*] || [istarget *-*-mingw*] } {\n \treturn 1\n     }\n \n     # HP-UX 10.X doesn't support it\n \n-    if { [istarget \"hppa*-*-hpux10*\"] } {\n+    if { [istarget hppa*-*-hpux10*] } {\n \treturn 0\n     }\n \n@@ -276,7 +275,7 @@ proc check_weak_available { } {\n # cannot be overridden.\n \n proc check_weak_override_available { } {\n-    if { [istarget \"*-*-mingw*\"] } {\n+    if { [istarget *-*-mingw*] } {\n \treturn 0\n     }\n     return [check_weak_available]\n@@ -291,9 +290,6 @@ proc check_weak_override_available { } {\n # The argument is the kind of visibility, default/protected/hidden/internal.\n \n proc check_visibility_available { what_kind } {\n-    global tool\n-    global target_triplet\n-\n     # On NetWare, support makes no sense.\n     if { [istarget *-*-netware*] } {\n         return 0\n@@ -627,7 +623,7 @@ proc check_effective_target_pcc_bitfield_type_matters { } {\n proc add_options_for_tls { flags } {\n     # Tru64 UNIX uses emutls, which relies on a couple of pthread functions\n     # which only live in libpthread, so always pass -pthread for TLS.\n-    if { [istarget *-*-osf*] } {\n+    if { [istarget alpha*-dec-osf*] } {\n \treturn \"$flags -pthread\"\n     }\n     # On Solaris 8 and 9, __tls_get_addr/___tls_get_addr only lives in\n@@ -660,8 +656,7 @@ proc check_effective_target_tls {} {\n proc check_effective_target_tls_native {} {\n     # VxWorks uses emulated TLS machinery, but with non-standard helper\n     # functions, so we fail to automatically detect it.\n-    global target_triplet\n-    if { [regexp \".*-.*-vxworks.*\" $target_triplet] } {\n+    if { [istarget *-*-vxworks*] } {\n \treturn 0\n     }\n     \n@@ -677,8 +672,7 @@ proc check_effective_target_tls_native {} {\n proc check_effective_target_tls_emulated {} {\n     # VxWorks uses emulated TLS machinery, but with non-standard helper\n     # functions, so we fail to automatically detect it.\n-    global target_triplet\n-    if { [regexp \".*-.*-vxworks.*\" $target_triplet] } {\n+    if { [istarget *-*-vxworks*] } {\n \treturn 1\n     }\n     \n@@ -702,8 +696,7 @@ proc check_effective_target_tls_runtime {} {\n \n proc check_effective_target_function_sections {} {\n     # Darwin has its own scheme and silently accepts -ffunction-sections.\n-    global target_triplet\n-    if { [regexp \".*-.*-darwin.*\" $target_triplet] } {\n+    if { [istarget *-*-darwin*] } {\n \treturn 0\n     }\n     \n@@ -1435,7 +1428,7 @@ proc check_fork_available {} {\n # Returns true iff \"mkfifo\" is available on the target system.\n \n proc check_mkfifo_available {} {\n-    if {[istarget *-*-cygwin*]} {\n+    if { [istarget *-*-cygwin*] } {\n        # Cygwin has mkfifo, but support is incomplete.\n        return 0\n      }\n@@ -1447,10 +1440,10 @@ proc check_mkfifo_available {} {\n \n proc check_cxa_atexit_available { } {\n     return [check_cached_effective_target cxa_atexit_available {\n-\tif { [istarget \"hppa*-*-hpux10*\"] } {\n+\tif { [istarget hppa*-*-hpux10*] } {\n \t    # HP-UX 10 doesn't have __cxa_atexit but subsequent test passes.\n \t    expr 0\n-\t} elseif { [istarget \"*-*-vxworks\"] } {\n+\t} elseif { [istarget *-*-vxworks] } {\n \t    # vxworks doesn't have __cxa_atexit but subsequent test passes.\n \t    expr 0\n \t} else {\n@@ -2282,7 +2275,7 @@ proc check_effective_target_powerpc_ppu_ok { } {\n # Return 1 if this is a PowerPC target that supports SPU.\n \n proc check_effective_target_powerpc_spu { } {\n-    if [istarget powerpc*-*-linux*] {\n+    if { [istarget powerpc*-*-linux*] } {\n \treturn [check_effective_target_powerpc_altivec_ok]\n     } else {\n \treturn 0\n@@ -3705,11 +3698,11 @@ proc add_options_for_c99_runtime { flags } {\n # full IEEE compliance mode.\n \n proc add_options_for_ieee { flags } {\n-    if { [istarget \"alpha*-*-*\"]\n-         || [istarget \"sh*-*-*\"] } {\n+    if { [istarget alpha*-*-*]\n+         || [istarget sh*-*-*] } {\n        return \"$flags -mieee\"\n     }\n-    if { [istarget \"rx-*-*\"] } {\n+    if { [istarget rx-*-*] } {\n        return \"$flags -mnofpu\"\n     }\n     return $flags\n@@ -3999,21 +3992,21 @@ proc check_vect_support_and_set_flags { } {\n     global DEFAULT_VECTCFLAGS\n     global dg-do-what-default\n \n-    if  [istarget \"powerpc-*paired*\"]  {\n+    if  [istarget powerpc-*paired*]  {\n         lappend DEFAULT_VECTCFLAGS \"-mpaired\"\n         if [check_750cl_hw_available] {\n             set dg-do-what-default run\n         } else {\n             set dg-do-what-default compile\n         }\n-    } elseif [istarget \"powerpc*-*-*\"] {\n+    } elseif [istarget powerpc*-*-*] {\n         # Skip targets not supporting -maltivec.\n         if ![is-effective-target powerpc_altivec_ok] {\n             return 0\n         }\n \n         lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n-        if [check_vsx_hw_available]  {\n+        if [check_vsx_hw_available] {\n             lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n         }\n \n@@ -4026,31 +4019,31 @@ proc check_vect_support_and_set_flags { } {\n             }\n             set dg-do-what-default compile\n         }\n-    } elseif { [istarget  \"spu-*-*\"] } {\n+    } elseif { [istarget spu-*-*] } {\n         set dg-do-what-default run\n-    } elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n+    } elseif { [istarget i?86-*-*] || [istarget x86_64-*-*] } {\n         lappend DEFAULT_VECTCFLAGS \"-msse2\"\n         if { [check_effective_target_sse2_runtime] } {\n             set dg-do-what-default run\n         } else {\n             set dg-do-what-default compile\n         }\n-    } elseif { [istarget \"mips*-*-*\"]\n+    } elseif { [istarget mips*-*-*]\n                && ([check_effective_target_mpaired_single]\n                     || [check_effective_target_mips_loongson])\n                && [check_effective_target_nomips16] } {\n         if { [check_effective_target_mpaired_single] } {\n             lappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n         }\n         set dg-do-what-default run\n-    } elseif [istarget \"sparc*-*-*\"] {\n+    } elseif [istarget sparc*-*-*] {\n         lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n         if [check_effective_target_ultrasparc_hw] {\n             set dg-do-what-default run\n         } else {\n             set dg-do-what-default compile\n         }\n-    } elseif [istarget \"alpha*-*-*\"] {\n+    } elseif [istarget alpha*-*-*] {\n         # Alpha's vectorization capabilities are extremely limited.\n         # It's more effort than its worth disabling all of the tests\n         # that it cannot pass.  But if you actually want to see what\n@@ -4063,7 +4056,7 @@ proc check_vect_support_and_set_flags { } {\n         } else {\n             set dg-do-what-default compile\n         }\n-    } elseif [istarget \"ia64-*-*\"] {\n+    } elseif [istarget ia64-*-*] {\n         set dg-do-what-default run\n     } elseif [is-effective-target arm_neon_ok] {\n         eval lappend DEFAULT_VECTCFLAGS [add_options_for_arm_neon \"\"]"}]}