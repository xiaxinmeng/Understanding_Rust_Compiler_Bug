{"sha": "a93fd547bacd1bab37290f9f3c44ef3ddf334287", "node_id": "C_kwDOANBUbNoAKGE5M2ZkNTQ3YmFjZDFiYWIzNzI5MGY5ZjNjNDRlZjNkZGYzMzQyODc", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-09-08T02:49:58Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-10-06T09:22:49Z"}, "message": "ada: hardened conditionals: exemplify codegen changes\n\ngcc/ada/\n\n\t* doc/gnat_rm/security_hardening_features.rst: Add examples of\n\tcodegen changes in hardened conditionals.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "0caf0d48d7a282c9509085dddb9939ee3f350564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0caf0d48d7a282c9509085dddb9939ee3f350564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a93fd547bacd1bab37290f9f3c44ef3ddf334287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93fd547bacd1bab37290f9f3c44ef3ddf334287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93fd547bacd1bab37290f9f3c44ef3ddf334287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93fd547bacd1bab37290f9f3c44ef3ddf334287/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21130676a8032b53dad05d224a78244a419e4929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21130676a8032b53dad05d224a78244a419e4929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21130676a8032b53dad05d224a78244a419e4929"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "d7c02b94f36d2f7e06d8edfef1c23a4e842db69d", "filename": "gcc/ada/doc/gnat_rm/security_hardening_features.rst", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93fd547bacd1bab37290f9f3c44ef3ddf334287/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93fd547bacd1bab37290f9f3c44ef3ddf334287/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst?ref=a93fd547bacd1bab37290f9f3c44ef3ddf334287", "patch": "@@ -203,11 +203,58 @@ activated by a separate command-line option.\n \n The option :switch:`-fharden-compares` enables hardening of compares\n that compute results stored in variables, adding verification that the\n-reversed compare yields the opposite result.\n+reversed compare yields the opposite result, turning:\n+\n+.. code-block:: ada\n+\n+    B := X = Y;\n+\n+\n+into:\n+\n+.. code-block:: ada\n+\n+    B := X = Y;\n+    declare\n+      NotB : Boolean := X /= Y; -- Computed independently of B.\n+    begin\n+      if B = NotB then\n+        <__builtin_trap>;\n+      end if;\n+    end;\n+\n \n The option :switch:`-fharden-conditional-branches` enables hardening\n of compares that guard conditional branches, adding verification of\n-the reversed compare to both execution paths.\n+the reversed compare to both execution paths, turning:\n+\n+.. code-block:: ada\n+\n+    if X = Y then\n+      X := Z + 1;\n+    else\n+      Y := Z - 1;\n+    end if;\n+\n+\n+into:\n+\n+.. code-block:: ada\n+\n+    if X = Y then\n+      if X /= Y then -- Computed independently of X = Y.\n+        <__builtin_trap>;\n+      end if;\n+      X := Z + 1;\n+    else\n+      if X /= Y then -- Computed independently of X = Y.\n+        null;\n+      else\n+        <__builtin_trap>;\n+      end if;\n+      Y := Z - 1;\n+    end if;\n+\n \n These transformations are introduced late in the compilation pipeline,\n long after boolean expressions are decomposed into separate compares,"}, {"sha": "e13dba037ffd2b4d5a207a7a8131c5032970fb28", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93fd547bacd1bab37290f9f3c44ef3ddf334287/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93fd547bacd1bab37290f9f3c44ef3ddf334287/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a93fd547bacd1bab37290f9f3c44ef3ddf334287", "patch": "@@ -28858,11 +28858,54 @@ activated by a separate command-line option.\n \n The option @code{-fharden-compares} enables hardening of compares\n that compute results stored in variables, adding verification that the\n-reversed compare yields the opposite result.\n+reversed compare yields the opposite result, turning:\n+\n+@example\n+B := X = Y;\n+@end example\n+\n+into:\n+\n+@example\n+B := X = Y;\n+declare\n+  NotB : Boolean := X /= Y; -- Computed independently of B.\n+begin\n+  if B = NotB then\n+    <__builtin_trap>;\n+  end if;\n+end;\n+@end example\n \n The option @code{-fharden-conditional-branches} enables hardening\n of compares that guard conditional branches, adding verification of\n-the reversed compare to both execution paths.\n+the reversed compare to both execution paths, turning:\n+\n+@example\n+if X = Y then\n+  X := Z + 1;\n+else\n+  Y := Z - 1;\n+end if;\n+@end example\n+\n+into:\n+\n+@example\n+if X = Y then\n+  if X /= Y then -- Computed independently of X = Y.\n+    <__builtin_trap>;\n+  end if;\n+  X := Z + 1;\n+else\n+  if X /= Y then -- Computed independently of X = Y.\n+    null;\n+  else\n+    <__builtin_trap>;\n+  end if;\n+  Y := Z - 1;\n+end if;\n+@end example\n \n These transformations are introduced late in the compilation pipeline,\n long after boolean expressions are decomposed into separate compares,"}]}