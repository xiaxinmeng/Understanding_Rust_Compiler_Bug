{"sha": "5a86d36fcc33e2461ab247715769b72d6d24e3e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4NmQzNmZjYzMzZTI0NjFhYjI0NzcxNTc2OWI3MmQ2ZDI0ZTNlNQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2012-09-09T23:08:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-09-09T23:08:48Z"}, "message": "re PR libstdc++/43852 (Embedded systems friendly libstdc++)\n\n2012-09-10  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/43852\n\t* acinclude.m4 (GLIBCXX_ENABLE_VERBOSE): Define.\n\t* configure.ac (GLIBCXX_ENABLE_VERBOSE): Use it.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\t* libsupc++/eh_term_handler.cc (_GLIBCXX_VERBOSE): Check new macro.\n\t* libsupc++/pure.cc (_GLIBCXX_VERBOSE): Likewise.\n\t* doc/xml/manual/configure.xml (--disable-libstdcxx-verbose): Document.\n\t* doc/html/manual/configure.html: Regenerate.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r191121", "tree": {"sha": "616faa9af767889cad62f988d4a1a348a0485eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/616faa9af767889cad62f988d4a1a348a0485eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a86d36fcc33e2461ab247715769b72d6d24e3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a86d36fcc33e2461ab247715769b72d6d24e3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a86d36fcc33e2461ab247715769b72d6d24e3e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a86d36fcc33e2461ab247715769b72d6d24e3e5/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a0aae0ff43fb77df886ebe26390e1e647e4433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a0aae0ff43fb77df886ebe26390e1e647e4433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a0aae0ff43fb77df886ebe26390e1e647e4433"}], "stats": {"total": 133, "additions": 111, "deletions": 22}, "files": [{"sha": "4ecedf818bd1326ed8425400dad7dcb504bc6bb5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -1,3 +1,16 @@\n+2012-09-10  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/43852\n+\t* acinclude.m4 (GLIBCXX_ENABLE_VERBOSE): Define.\n+\t* configure.ac (GLIBCXX_ENABLE_VERBOSE): Use it.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\t* libsupc++/eh_term_handler.cc (_GLIBCXX_VERBOSE): Check new macro.\n+\t* libsupc++/pure.cc (_GLIBCXX_VERBOSE): Likewise.\n+\t* doc/xml/manual/configure.xml (--disable-libstdcxx-verbose): Document.\n+\t* doc/html/manual/configure.html: Regenerate.\n+\n 2012-09-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR bootstrap/54419"}, {"sha": "794df5c22be877ae13fc9fa8ef9fd45c24744490", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -2316,6 +2316,31 @@ AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n ])\n \n \n+dnl\n+dnl Check if the user wants a non-verbose library implementation.\n+dnl\n+dnl --disable-libstdcxx-verbose will turn off descriptive messages to\n+dnl standard error on termination.\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_VERBOSE (always defined, either to 1 or 0)\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_VERBOSE], [\n+  AC_ARG_ENABLE([libstdcxx-verbose],\n+    AC_HELP_STRING([--disable-libstdcxx-verbose],\n+\t\t   [disable termination messages to standard error]),,\n+\t\t   [enable_libstdcxx_verbose=yes])\n+  if test x\"$enable_libstdcxx_verbose\" = xyes; then\n+    verbose_define=1\n+  else\n+    AC_MSG_NOTICE([verbose termination messages are disabled])\n+    verbose_define=0\n+  fi\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_VERBOSE, $verbose_define,\n+    [Define to 1 if a verbose library is built, or 0 otherwise.])\n+])\n+\n+\n dnl\n dnl Check for template specializations for the 'long long' type.\n dnl The result determines only whether 'long long' I/O is enabled; things"}, {"sha": "0667bbf7df890dbf3ffcae5fe656a50c0ce8fe1c", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -845,6 +845,9 @@\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n \n+/* Define to 1 if a verbose library is built, or 0 otherwise. */\n+#undef _GLIBCXX_VERBOSE\n+\n /* Defined if as can handle rdrand. */\n #undef _GLIBCXX_X86_RDRAND\n "}, {"sha": "ba471ad3b450fbe85106a1728bbbad771e257c2d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -843,6 +843,7 @@ enable_fast_install\n with_gnu_ld\n enable_libtool_lock\n enable_hosted_libstdcxx\n+enable_libstdcxx_verbose\n enable_sjlj_exceptions\n enable_libstdcxx_pch\n enable_cstdio\n@@ -1517,6 +1518,8 @@ Optional Features:\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --disable-hosted-libstdcxx\n                           only build freestanding C++ runtime support\n+  --disable-libstdcxx-verbose\n+                          disable termination messages to standard error\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n                           [default=auto]\n@@ -11504,7 +11507,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11507 \"configure\"\n+#line 11510 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11610,7 +11613,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11613 \"configure\"\n+#line 11616 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14936,6 +14939,29 @@ _ACEOF\n \n \n \n+# Enable descriptive messages to standard output on termination.\n+\n+  # Check whether --enable-libstdcxx-verbose was given.\n+if test \"${enable_libstdcxx_verbose+set}\" = set; then :\n+  enableval=$enable_libstdcxx_verbose;\n+else\n+  enable_libstdcxx_verbose=yes\n+fi\n+\n+  if test x\"$enable_libstdcxx_verbose\" = xyes; then\n+    verbose_define=1\n+  else\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: verbose termination messages are disabled\" >&5\n+$as_echo \"$as_me: verbose termination messages are disabled\" >&6;}\n+    verbose_define=0\n+  fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_VERBOSE $verbose_define\n+_ACEOF\n+\n+\n+\n # Enable compiler support that doesn't require linking.\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for exception model to use\" >&5\n@@ -14968,7 +14994,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14971 \"configure\"\n+#line 14997 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15303,7 +15329,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15306 \"configure\"\n+#line 15332 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15338,7 +15364,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15341 \"configure\"\n+#line 15367 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15373,7 +15399,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15376 \"configure\"\n+#line 15402 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15409,7 +15435,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15412 \"configure\"\n+#line 15438 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15488,7 +15514,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15491 \"configure\"\n+#line 15517 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15530,7 +15556,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15533 \"configure\"\n+#line 15559 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15564,7 +15590,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15567 \"configure\"\n+#line 15593 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "c09c685e099dcf2de89f9087a3d8cd9df7088c50", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -104,6 +104,9 @@ postdeps_CXX=`echo \" $postdeps_CXX \" | sed 's, -lstdc++ ,,g'`\n ## than just ignoring the results.  Faster /and/ more correct, win win.\n GLIBCXX_ENABLE_HOSTED\n \n+# Enable descriptive messages to standard output on termination.\n+GLIBCXX_ENABLE_VERBOSE\n+\n # Enable compiler support that doesn't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)"}, {"sha": "ec4e78ba7fcb726d023a62716c15177b42b2f9e1", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -215,4 +215,12 @@\n      <span class=\"emphasis\"><em>freestanding</em></span> environment, in which only a\n      minimal set of headers are provided.  This option builds such an\n      environment.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--disable-libstdcxx-verbose</code></span></dt><dd><p>\n+     By default, the library is configured to write descriptive messages\n+     to standard error for certain events such as calling a pure virtual\n+     function or the invocation of the standard terminate handler.  Those\n+     messages cause the library to depend on the demangler and standard I/O\n+     facilites, which might be undesirable in a low-memory environment or\n+     when standard error is not available.  This option disables those\n+     messages.  This option does not change the library ABI.\n      </p></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"setup.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"setup.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"make.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a02.\u00a0Setup\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Make</td></tr></table></div></body></html>"}, {"sha": "bc98d7a16e95afa919420604094818784d27289a", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -370,6 +370,19 @@\n      </para>\n  </listitem></varlistentry>\n \n+<varlistentry><term><code>--disable-libstdcxx-verbose</code></term>\n+ <listitem>\n+   <para>\n+     By default, the library is configured to write descriptive messages\n+     to standard error for certain events such as calling a pure virtual\n+     function or the invocation of the standard terminate handler.  Those\n+     messages cause the library to depend on the demangler and standard I/O\n+     facilites, which might be undesirable in a low-memory environment or\n+     when standard error is not available.  This option disables those\n+     messages.  This option does not change the library ABI.\n+   </para>\n+ </listitem></varlistentry>\n+\n </variablelist>\n \n </section>"}, {"sha": "f4bf2a30821bde70a9a8f8f0910323aff52cc839", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- std::terminate handler\n-// Copyright (C) 2002, 2003, 2009 Free Software Foundation\n+// Copyright (C) 2002-2012 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -28,19 +28,17 @@\n /* We default to the talkative, informative handler in a normal hosted\n    library.  This pulls in the demangler, the dyn-string utilities, and\n    elements of the I/O library.  For a low-memory environment, you can return\n-   to the earlier \"silent death\" handler by including <cstdlib>, initializing\n-   to \"std::abort\", and rebuilding the library.  In a freestanding mode, we\n-   default to this latter approach.  */\n-\n-#if ! _GLIBCXX_HOSTED\n-# include <cstdlib>\n-#endif\n+   to the earlier \"silent death\" handler by configuring GCC with\n+   --disable-libstdcxx-verbose and rebuilding the library.\n+   In a freestanding environment, we default to this latter approach.  */\n \n+#if _GLIBCXX_HOSTED && _GLIBCXX_VERBOSE\n /* The current installed user handler.  */\n std::terminate_handler __cxxabiv1::__terminate_handler =\n-#if _GLIBCXX_HOSTED\n \t__gnu_cxx::__verbose_terminate_handler;\n #else\n-\tstd::abort;\n+# include <cstdlib>\n+/* The current installed user handler.  */\n+std::terminate_handler __cxxabiv1::__terminate_handler = std::abort;\n #endif\n "}, {"sha": "a7745979be7211058df377f451c0f0e2f7b1ff1b", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a86d36fcc33e2461ab247715769b72d6d24e3e5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=5a86d36fcc33e2461ab247715769b72d6d24e3e5", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- \n-// Copyright (C) 2000, 2001, 2009, 2011 Free Software Foundation\n+// Copyright (C) 2000-2012 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -26,7 +26,7 @@\n #include <cxxabi.h>\n #include \"unwind-cxx.h\"\n \n-#if _GLIBCXX_HOSTED\n+#if _GLIBCXX_HOSTED && _GLIBCXX_VERBOSE\n #ifdef _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n # define writestr(str)\twrite(2, str, sizeof(str) - 1)"}]}