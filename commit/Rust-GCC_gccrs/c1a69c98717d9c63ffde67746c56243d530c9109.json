{"sha": "c1a69c98717d9c63ffde67746c56243d530c9109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhNjljOTg3MTdkOWM2M2ZmZGU2Nzc0NmM1NjI0M2Q1MzBjOTEwOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-14T15:12:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:20Z"}, "message": "[Ada] Fix internal error on extended return and fixed-point result\n\ngcc/ada/\n\n\t* contracts.adb (Check_Type_Or_Object_External_Properties): Make\n\tsure to exclude all return objects from the SPARK legality rule\n\ton effectively volatile variables.\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Use the fast\n\ttrack only when the declaration of the return object can be\n\tdropped.", "tree": {"sha": "6767fb0010c1feca3ca5dc51413a51a2111d56e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6767fb0010c1feca3ca5dc51413a51a2111d56e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a69c98717d9c63ffde67746c56243d530c9109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a69c98717d9c63ffde67746c56243d530c9109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a69c98717d9c63ffde67746c56243d530c9109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a69c98717d9c63ffde67746c56243d530c9109/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7937111e8c8cfaf5ea79d97c65d6b6dc29b261f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7937111e8c8cfaf5ea79d97c65d6b6dc29b261f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7937111e8c8cfaf5ea79d97c65d6b6dc29b261f"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "7387ffe634734eb13748b26f4d0ca0bf4ec8f9f7", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a69c98717d9c63ffde67746c56243d530c9109/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a69c98717d9c63ffde67746c56243d530c9109/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=c1a69c98717d9c63ffde67746c56243d530c9109", "patch": "@@ -905,9 +905,12 @@ package body Contracts is\n \n       --  The following checks are relevant only when SPARK_Mode is on, as\n       --  they are not standard Ada legality rules. Internally generated\n-      --  temporaries are ignored.\n+      --  temporaries are ignored, as well as return objects.\n \n-      if SPARK_Mode = On and then Comes_From_Source (Type_Or_Obj_Id) then\n+      if SPARK_Mode = On\n+        and then Comes_From_Source (Type_Or_Obj_Id)\n+        and then not Is_Return_Object (Type_Or_Obj_Id)\n+      then\n          if Is_Effectively_Volatile (Type_Or_Obj_Id) then\n \n             --  The declaration of an effectively volatile object or type must"}, {"sha": "98a1ceba8c2daf17480216cfc5671ede6576a88d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a69c98717d9c63ffde67746c56243d530c9109/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a69c98717d9c63ffde67746c56243d530c9109/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c1a69c98717d9c63ffde67746c56243d530c9109", "patch": "@@ -5384,13 +5384,15 @@ package body Exp_Ch6 is\n       end if;\n \n       --  Build a simple_return_statement that returns the return object when\n-      --  there is a statement sequence, or no expression, or the result will\n-      --  be built in place. Note however that we currently do this for all\n-      --  composite cases, even though not all are built in place.\n+      --  there is a statement sequence, or no expression, or the analysis of\n+      --  the return object declaration generated extra actions, or the result\n+      --  will be built in place. Note however that we currently do this for\n+      --  all composite cases, even though they are not built in place.\n \n       if Present (HSS)\n-        or else Is_Composite_Type (Ret_Typ)\n         or else No (Exp)\n+        or else List_Length (Return_Object_Declarations (N)) > 1\n+        or else Is_Composite_Type (Ret_Typ)\n       then\n          if No (HSS) then\n             Stmts := New_List;\n@@ -6058,16 +6060,11 @@ package body Exp_Ch6 is\n             end;\n          end if;\n \n-      --  Case where we do not build a block\n-\n-      else\n-         --  We're about to drop Return_Object_Declarations on the floor, so\n-         --  we need to insert it, in case it got expanded into useful code.\n-         --  Remove side effects from expression, which may be duplicated in\n-         --  subsequent checks (see Expand_Simple_Function_Return).\n+      --  Case where we do not need to build a block. But we're about to drop\n+      --  Return_Object_Declarations on the floor, so assert that it contains\n+      --  only the return object declaration.\n \n-         Insert_List_Before (N, Return_Object_Declarations (N));\n-         Remove_Side_Effects (Exp);\n+      else pragma Assert (List_Length (Return_Object_Declarations (N)) = 1);\n \n          --  Build simple_return_statement that returns the expression directly\n "}]}