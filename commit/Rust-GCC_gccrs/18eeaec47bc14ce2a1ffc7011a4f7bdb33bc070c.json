{"sha": "18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlZWFlYzQ3YmMxNGNlMmExZmZjNzAxMWE0ZjdiZGIzM2JjMDcwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-16T18:09:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-16T18:09:17Z"}, "message": "utility (get(std::pair<>&&)): Add.\n\n2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/utility (get(std::pair<>&&)): Add.\n\t* include/bits/stl_pair.h (pair::swap(pair&),\n\tswap(pair<>&, pair<>&)): Use noexcept.\n\t* include/bits/random.h (discard_block_engine<>::base,\n\tindependent_bits_engine<>::base, shuffle_order_engine<>::base,\n\trandom_device::entropy): Use noexcept.\n\t* include/std/array: Use noexcept where appropriate.\n\t(get(array<>&&)): Add.\n\t* testsuite/23_containers/array/requirements/get.cc: New.\n\t* testsuite/20_util/pair/get.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Tweak dg-error\n\tline number.\n\nFrom-SVN: r173798", "tree": {"sha": "5719dd46ba98d097b18f3d0c21dd26d7d38d91b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5719dd46ba98d097b18f3d0c21dd26d7d38d91b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/comments", "author": null, "committer": null, "parents": [{"sha": "f6449011601f2b983644f491e2348b99826e991a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6449011601f2b983644f491e2348b99826e991a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6449011601f2b983644f491e2348b99826e991a"}], "stats": {"total": 193, "additions": 154, "deletions": 39}, "files": [{"sha": "d4554d17b16f5d102736f7fed0854120c595001c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -1,3 +1,18 @@\n+2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/utility (get(std::pair<>&&)): Add.\n+\t* include/bits/stl_pair.h (pair::swap(pair&),\n+\tswap(pair<>&, pair<>&)): Use noexcept.\n+\t* include/bits/random.h (discard_block_engine<>::base,\n+\tindependent_bits_engine<>::base, shuffle_order_engine<>::base,\n+\trandom_device::entropy): Use noexcept.\n+\t* include/std/array: Use noexcept where appropriate.\n+\t(get(array<>&&)): Add.\n+\t* testsuite/23_containers/array/requirements/get.cc: New.\n+\t* testsuite/20_util/pair/get.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Tweak dg-error\n+\tline number.\n+\n 2011-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/c++config (_GLIBCXX_NOEXCEPT, _GLIBCXX_USE_NOEXCEPT):"}, {"sha": "f8f7ce9522e34c6645b0b762705c53e8fde00675", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -881,7 +881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *        object.\n        */\n       const _RandomNumberEngine&\n-      base() const\n+      base() const noexcept\n       { return _M_b; }\n \n       /**\n@@ -1090,7 +1090,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *        object.\n        */\n       const _RandomNumberEngine&\n-      base() const\n+      base() const noexcept\n       { return _M_b; }\n \n       /**\n@@ -1320,7 +1320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * Gets a const reference to the underlying generator engine object.\n        */\n       const _RandomNumberEngine&\n-      base() const\n+      base() const noexcept\n       { return _M_b; }\n \n       /**\n@@ -1553,7 +1553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return std::numeric_limits<result_type>::max(); }\n \n     double\n-    entropy() const\n+    entropy() const noexcept\n     { return 0.0; }\n \n     result_type"}, {"sha": "7902f2653d700085f1d1a9cdcba7c22375eb95dc", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -1,6 +1,7 @@\n // Pair implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -152,6 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       pair&\n       operator=(pair&& __p)\n+      // noexcept has to wait is_nothrow_move_assignable\n       {\n \tfirst = std::move(__p.first);\n \tsecond = std::move(__p.second);\n@@ -178,6 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(pair& __p)\n+      noexcept(noexcept(swap(first, __p.first))\n+\t       && noexcept(swap(second, __p.second)))\n       {\n \tusing std::swap;\n \tswap(first, __p.first);\n@@ -239,6 +243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _T1, class _T2>\n     inline void\n     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n #endif\n "}, {"sha": "b0fc75b14bca3f0e1acd374b3de62898b0b7e19c", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -1,6 +1,6 @@\n // <array> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -83,66 +83,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(array& __other)\n+      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n       iterator\n-      begin()\n+      begin() noexcept\n       { return iterator(std::__addressof(_M_instance[0])); }\n \n       const_iterator\n-      begin() const \n+      begin() const noexcept\n       { return const_iterator(std::__addressof(_M_instance[0])); }\n \n       iterator\n-      end()\n+      end() noexcept\n       { return iterator(std::__addressof(_M_instance[_Nm])); }\n \n       const_iterator\n-      end() const\n+      end() const noexcept\n       { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n \n       reverse_iterator \n-      rbegin()\n+      rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n       const_reverse_iterator \n-      rbegin() const\n+      rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       reverse_iterator \n-      rend()\n+      rend() noexcept\n       { return reverse_iterator(begin()); }\n \n       const_reverse_iterator \n-      rend() const\n+      rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n       const_iterator\n-      cbegin() const \n+      cbegin() const noexcept\n       { return const_iterator(std::__addressof(_M_instance[0])); }\n \n       const_iterator\n-      cend() const\n+      cend() const noexcept\n       { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n \n       const_reverse_iterator \n-      crbegin() const\n+      crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n       const_reverse_iterator \n-      crend() const\n+      crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n       // Capacity.\n       constexpr size_type \n-      size() const { return _Nm; }\n+      size() const noexcept { return _Nm; }\n \n       constexpr size_type \n-      max_size() const { return _Nm; }\n+      max_size() const noexcept { return _Nm; }\n \n       constexpr bool \n-      empty() const { return size() == 0; }\n+      empty() const noexcept { return size() == 0; }\n \n       // Element access.\n       reference\n@@ -186,11 +187,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _Nm ? *(end() - 1) : *end(); }\n \n       _Tp*\n-      data()\n+      data() noexcept\n       { return std::__addressof(_M_instance[0]); }\n \n       const _Tp*\n-      data() const\n+      data() const noexcept\n       { return std::__addressof(_M_instance[0]); }\n     };\n \n@@ -228,13 +229,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one < __two); }\n \n-  // Specialized algorithms [6.2.2.2].\n+  // Specialized algorithms.\n   template<typename _Tp, std::size_t _Nm>\n     inline void\n     swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n+    noexcept(noexcept(__one.swap(__two)))\n     { __one.swap(__two); }\n \n-  // Tuple interface to class template array [6.2.2.5].\n+  // Tuple interface to class template array.\n \n   /// tuple_size\n   template<typename _Tp> \n@@ -258,12 +260,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     inline _Tp&\n-    get(array<_Tp, _Nm>& __arr)\n+    get(array<_Tp, _Nm>& __arr) noexcept\n     { return __arr[_Int]; }\n \n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    inline _Tp&&\n+    get(array<_Tp, _Nm>&& __arr) noexcept\n+    { return std::move(get<_Int>(__arr)); }\n+\n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     inline const _Tp&\n-    get(const array<_Tp, _Nm>& __arr)\n+    get(const array<_Tp, _Nm>& __arr) noexcept\n     { return __arr[_Int]; }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "6c1dd369ba463250e82d3cde4e1ed1079ceea93e", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -1,6 +1,7 @@\n // <utility> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+// 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -108,34 +109,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __pair_get<0>\n     {\n       template<typename _Tp1, typename _Tp2>\n-      static _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair)\n-      { return __pair.first; }\n+        static _Tp1&\n+        __get(std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        { return __pair.first; }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _Tp1, typename _Tp2>\n+        static _Tp1&&\n+        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n+        { return std::forward<_Tp1>(__pair.first); }\n+#endif\n \n       template<typename _Tp1, typename _Tp2>\n-      static const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair)\n-      { return __pair.first; }\n+        static const _Tp1&\n+        __const_get(const std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        { return __pair.first; }\n     };\n \n   template<>\n     struct __pair_get<1>\n     {\n       template<typename _Tp1, typename _Tp2>\n-      static _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair)\n-      { return __pair.second; }\n+        static _Tp2&\n+        __get(std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        { return __pair.second; }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _Tp1, typename _Tp2>\n+        static _Tp2&&\n+        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n+        { return std::forward<_Tp2>(__pair.second); }\n+#endif\n \n       template<typename _Tp1, typename _Tp2>\n-      static const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair)\n-      { return __pair.second; }\n+        static const _Tp2&\n+        __const_get(const std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        { return __pair.second; }\n     };\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n     inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-    get(std::pair<_Tp1, _Tp2>& __in)\n+    get(std::pair<_Tp1, _Tp2>& __in) _GLIBCXX_NOEXCEPT\n     { return __pair_get<_Int>::__get(__in); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<std::size_t _Int, class _Tp1, class _Tp2>\n+    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\n+    get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n+    { return __pair_get<_Int>::__move_get(std::move(__in)); }\n+#endif\n+\n   template<std::size_t _Int, class _Tp1, class _Tp2>\n     inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-    get(const std::pair<_Tp1, _Tp2>& __in)\n+    get(const std::pair<_Tp1, _Tp2>& __in) _GLIBCXX_NOEXCEPT\n     { return __pair_get<_Int>::__const_get(__in); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3b68a1f9bd1a0a176bbba9ad09cbc668dd27908a", "filename": "libstdc++-v3/testsuite/20_util/pair/get.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fget.cc?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+void test01()\n+{\n+  std::pair<float, int> p;\n+\n+  float&& pfirst __attribute__((unused)) = std::get<0>(std::move(p));\n+  int&&  psecond __attribute__((unused)) = std::get<1>(std::move(p));\n+}"}, {"sha": "919dbba74f59679ef865c7a4c15a541ebc0d8d93", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -56,4 +56,4 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }\n // { dg-warning \"note\" \"\" { target *-*-* } 292 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 207 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 211 }"}, {"sha": "1919aade3b03b4f0225a12fd947cc3bc8338de09", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/get.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fget.cc?ref=18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+void test01()\n+{\n+  std::array<int, 2> a;\n+\n+  int&& aone __attribute__((unused)) = std::get<0>(std::move(a));\n+  int&& atwo __attribute__((unused)) = std::get<1>(std::move(a));\n+}"}]}