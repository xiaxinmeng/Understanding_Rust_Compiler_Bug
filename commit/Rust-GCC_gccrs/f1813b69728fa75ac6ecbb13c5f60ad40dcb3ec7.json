{"sha": "f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4MTNiNjk3MjhmYTc1YWM2ZWNiYjEzYzVmNjBhZDQwZGNiM2VjNw==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-09-05T12:55:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-09-05T12:55:33Z"}, "message": "re PR libstdc++/9028 (codecvt<wchar_t, char, mbstate_t> doesn't work on Red Hat Linux 8.0.)\n\n\n2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/9028\n\t* include/bits/fstream.tcc\n\t(basic_filebuf::_M_destroy_internal_buffer): Destroy _M_ext_buf.\n\t(basic_filebuf::basic_filebuf): Initialize _M_ext_buf,\n\t_M_ext_buf_size, _M_ext_next and _M_ext_end.\n\t(basic_filebuf::underflow): Handle variable-width stateless\n\tencodings (codecvt::encoding() == 0), including UTF-8.\n\t* include/std/std_fstream.h (basic_filebuf):\n\tDeclare _M_ext_buf, _M_ext_buf_size, _M_ext_next, _M_ext_end.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/1.cc: New test.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/2.cc: New test.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/3.cc: New test.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/4.cc: New test.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/5.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/12.cc: New test.\n\t* testsuite/27_io/objects/wchar_t/13.cc: New test.\n\nFrom-SVN: r71111", "tree": {"sha": "400c77cb0896b8affe57869ea3e138940155ddab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400c77cb0896b8affe57869ea3e138940155ddab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/comments", "author": null, "committer": null, "parents": [{"sha": "12483c9f2e0c237977f2e2ee190492274f7f0d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12483c9f2e0c237977f2e2ee190492274f7f0d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12483c9f2e0c237977f2e2ee190492274f7f0d28"}], "stats": {"total": 858, "additions": 829, "deletions": 29}, "files": [{"sha": "99022ecfb5f7a9103bf148aed685f7394637ec3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -1,3 +1,22 @@\n+2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/9028\n+\t* include/bits/fstream.tcc\n+\t(basic_filebuf::_M_destroy_internal_buffer): Destroy _M_ext_buf.\n+\t(basic_filebuf::basic_filebuf): Initialize _M_ext_buf,\n+\t_M_ext_buf_size, _M_ext_next and _M_ext_end.\n+\t(basic_filebuf::underflow): Handle variable-width stateless\n+\tencodings (codecvt::encoding() == 0), including UTF-8.\n+\t* include/std/std_fstream.h (basic_filebuf):\n+\tDeclare _M_ext_buf, _M_ext_buf_size, _M_ext_next, _M_ext_end.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/1.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/2.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/3.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/4.cc: New test.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/5.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/12.cc: New test.\n+\t* testsuite/27_io/objects/wchar_t/13.cc: New test.\n+\n 2003-09-04  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/faq/index.html: Note that a namespace alias can't be"}, {"sha": "6b77fb0c5bc6eac93ca216be0ec8aef683c5dda0", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 83, "deletions": 29, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -64,6 +64,11 @@ namespace std\n \t  this->_M_buf = NULL;\n \t  _M_buf_allocated = false;\n \t}\n+      delete [] _M_ext_buf;\n+      _M_ext_buf = NULL;\n+      _M_ext_buf_size = 0;\n+      _M_ext_next = NULL;\n+      _M_ext_end = NULL;\n     }\n \n   template<typename _CharT, typename _Traits>\n@@ -73,7 +78,8 @@ namespace std\n     _M_state_beg(__state_type()), _M_buf(NULL), _M_buf_size(BUFSIZ),\n     _M_buf_allocated(false), _M_reading(false), _M_writing(false),\n     _M_last_overflowed(false), _M_pback_cur_save(0), _M_pback_end_save(0),\n-    _M_pback_init(false), _M_codecvt(0)\n+    _M_pback_init(false), _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0),\n+    _M_ext_next(0), _M_ext_end(0)\n     { \n       if (has_facet<__codecvt_type>(this->_M_buf_locale))\n \t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n@@ -199,44 +205,92 @@ namespace std\n \t  // Get and convert input sequence.\n \t  const size_t __buflen = this->_M_buf_size > 1\n \t                          ? this->_M_buf_size - 1 : 1;\n-\t  streamsize __elen = 0;\n+\t  \n+\t  // Will be set to true if ::read() returns 0 indicating EOF.\n+\t  bool __got_eof = false;\n+\t  // Number of internal characters produced.\n \t  streamsize __ilen = 0;\n \t  if (__check_facet(_M_codecvt).always_noconv())\n \t    {\n-\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()), \n+\t      __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()), \n \t\t\t\t      __buflen);\n-\t      __ilen = __elen;\n+\t      if (__ilen == 0)\n+\t\t__got_eof = true;\n \t    }\n \t  else\n \t    {\n-\t      // Worst-case number of external bytes.\n-\t      // XXX Not done encoding() == -1.\n-\t      const int __enc = _M_codecvt->encoding();\n-\t      const streamsize __blen = __enc > 0 ? __buflen * __enc : __buflen;\n-\t      char* __buf = static_cast<char*>(__builtin_alloca(__blen));\n-\t      __elen = _M_file.xsgetn(__buf, __blen);\n-\n- \t      const char* __eend;\n-\t      char_type* __iend;\n-\t      codecvt_base::result __r;\n-\t      __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n-\t\t\t\t   __eend, this->eback(), \n-\t\t\t\t   this->eback() + __buflen, __iend);\n-\t      if (__r == codecvt_base::ok || __r == codecvt_base::partial)\n-\t\t__ilen = __iend - this->eback();\n-\t      else if (__r == codecvt_base::noconv)\n+              // Worst-case number of external bytes.\n+              // XXX Not done encoding() == -1.\n+              const int __enc = _M_codecvt->encoding();\n+\t      streamsize __blen; // Minimum buffer size.\n+\t      streamsize __rlen; // Number of chars to read.\n+\t      if (__enc > 0)\n+\t\t__blen = __rlen = __buflen * __enc;\n+\t      else\n+\t\t{\n+\t\t  __blen = __buflen + _M_codecvt->max_length() - 1;\n+\t\t  __rlen = __buflen;\n+\t\t}\n+\t      const streamsize __remainder = _M_ext_end - _M_ext_next;\n+\t      __rlen = __rlen > __remainder ? __rlen - __remainder : 0;\n+\t      \n+\t      // Allocate buffer if necessary and move unconverted\n+\t      // bytes to front.\n+\t      if (_M_ext_buf_size < __blen)\n \t\t{\n-\t\t  traits_type::copy(this->eback(),\n-\t\t\t\t    reinterpret_cast<char_type*>(__buf), \n-\t\t\t\t    __elen);\n-\t\t  __ilen = __elen;\n+\t\t  char* __buf = new char[__blen];\n+\t\t  if (__remainder > 0)\n+\t\t    std::memcpy(__buf, _M_ext_next, __remainder);\n+\n+\t\t  delete [] _M_ext_buf;\n+\t\t  _M_ext_buf = __buf;\n+\t\t  _M_ext_buf_size = __blen;\n \t\t}\n-\t      else \n+\t      else if (__remainder > 0)\n+\t\tstd::memmove(_M_ext_buf, _M_ext_next, __remainder);\n+\n+\t      _M_ext_next = _M_ext_buf;\n+\t      _M_ext_end = _M_ext_buf + __remainder;\n+\n+\t      do\n \t\t{\n-\t\t  // Unwind.\n-\t\t  __ilen = 0;\n-\t\t  _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n+\t\t  if (__rlen > 0)\n+\t\t    {\n+\t\t      // Sanity check!\n+\t\t      // This may fail if the return value of\n+\t\t      // codecvt::max_length() is bogus.\n+\t\t      if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)\n+\t\t\tstd::abort();\n+\t\t      streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);\n+\t\t      if (__elen == 0)\n+\t\t\t__got_eof = true;\n+\t\t      _M_ext_end += __elen;\n+\t\t    }\n+\t\t  \n+\t\t  char_type* __iend;\n+\t\t  codecvt_base::result __r;\n+\t\t  __r = _M_codecvt->in(_M_state_cur, _M_ext_next,\n+\t\t\t\t       _M_ext_end, _M_ext_next, this->eback(), \n+\t\t\t\t       this->eback() + __buflen, __iend);\n+\t\t  if (__r == codecvt_base::ok || __r == codecvt_base::partial)\n+\t\t    __ilen = __iend - this->eback();\n+\t\t  else if (__r == codecvt_base::noconv)\n+\t\t    {\n+\t\t      size_t __avail = _M_ext_end - _M_ext_buf;\n+\t\t      __ilen = std::min(__avail, __buflen);\n+\t\t      traits_type::copy(this->eback(),\n+\t\t\t\t\treinterpret_cast<char_type*>(_M_ext_buf), \n+\t\t\t\t\t__ilen);\n+\t\t      _M_ext_next = _M_ext_buf + __ilen;\n+\t\t    }\n+\t\t  else \n+\t\t    {\n+\t\t      __ilen = 0;\n+\t\t      break;\n+\t\t    }\n+\t\t  __rlen = 1;\n \t\t}\n+\t      while (!__got_eof && __ilen == 0);\n \t    }\n \n \t  if (__ilen > 0)\n@@ -245,7 +299,7 @@ namespace std\n \t      _M_reading = true;\n \t      __ret = traits_type::to_int_type(*this->gptr());\n \t    }\n-\t  else if (__elen == 0)\n+\t  else if (__got_eof)\n \t    {\n \t      // If the actual end of file is reached, set 'uncommitted'\n \t      // mode, thus allowing an immediate write without an "}, {"sha": "78d052ae555515d7e5c9b627fec5379d9f42363a", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -177,6 +177,32 @@ namespace std\n       // Cached codecvt facet.\n       const __codecvt_type* \t_M_codecvt;\n \n+      /**\n+       *  @if maint\n+       *  Buffer for external characters. Used for input when\n+       *  codecvt::always_noconv() == false. When valid, this corresponds\n+       *  to eback().\n+       *  @endif\n+      */ \n+      char*\t\t\t_M_ext_buf;\n+\n+      /**\n+       *  @if maint\n+       *  Size of buffer held by _M_ext_buf.\n+       *  @endif\n+      */ \n+      streamsize\t\t_M_ext_buf_size;\n+\n+      /**\n+       *  @if maint\n+       *  Pointers into the buffer held by _M_ext_buf that delimit a\n+       *  subsequence of bytes that have been read but not yet converted.\n+       *  When valid, _M_ext_next corresponds to egptr().\n+       *  @endif\n+      */ \n+      const char*\t\t_M_ext_next;\n+      char*\t\t\t_M_ext_end;\n+\n       /**\n        *  @if maint\n        *  Initializes pback buffers, and moves normal buffers to safety."}, {"sha": "d55b89c90ac12d2be52a291ae9dfabe0c938580e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/1.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F1.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,110 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handing of UTF-8 in basic_filebuf::underflow\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char name[] = \"tmp_underflow-1.tst\";\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n+\n+  FILE* file = fopen(name, \"w\");\n+  fwrite(cstr, 1, clen, file);\n+  fclose(file);\n+\n+  wchar_t wbuf[wlen + 1];\n+  \n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.open(name, ios_base::in);\n+  streamsize n = fb.sgetn(wbuf, wlen + 1);\n+  fb.close();\n+\n+  VERIFY( n == wlen );\n+  VERIFY( !wmemcmp(wbuf, wstr, wlen) );\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "77616ed5d91e9edfa01b1d4e8b8a6fa81415bc49", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/2.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F2.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,111 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handing of UTF-8 in unbuffered basic_filebuf::underflow\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char name[] = \"tmp_underflow-2.tst\";\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n+\n+  FILE* file = fopen(name, \"w\");\n+  fwrite(cstr, 1, clen, file);\n+  fclose(file);\n+\n+  wchar_t wbuf[wlen + 1];\n+  \n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.pubsetbuf(0, 0);\n+  fb.open(name, ios_base::in);\n+  streamsize n = fb.sgetn(wbuf, wlen + 1);\n+  fb.close();\n+\n+  VERIFY( n == wlen );\n+  VERIFY( !wmemcmp(wbuf, wstr, wlen) );\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "169d3ebfa25f7b495d94177584c9cd250ac03453", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/3.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F3.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,116 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handing of UTF-8 in basic_filebuf::underflow\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char name[] = \"tmp_underflow-3.tst\";\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  const int loops = 2 * BUFSIZ / wlen;\n+  locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n+\n+  FILE* file = fopen(name, \"w\");\n+  for (int i = 0; i < loops; ++i)\n+    fwrite(cstr, 1, clen, file);\n+  fclose(file);\n+\n+  wchar_t wbuf[wlen];\n+  \n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+  fb.open(name, ios_base::in);\n+  for (int i = 0; i < loops; ++i)\n+    {\n+      streamsize n = fb.sgetn(wbuf, wlen);\n+      VERIFY( n == wlen );\n+      VERIFY( !wmemcmp(wbuf, wstr, wlen) );\n+    }\n+\n+  VERIFY( fb.sgetc() == wfilebuf::traits_type::eof() );\n+  fb.close();\n+}\n+\n+int main ()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "00fb3774489b12a69686f25e43b6494e43eb51af", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/4.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F4.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,54 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+// Adapted from 27_io/basic_filebuf/underflow/char/2.cc\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = true;\n+  using namespace std;\n+\n+  locale loc (__gnu_test::try_named_locale(\"se_NO.UTF-8\"));\n+  wfilebuf fb_out, fb_in_out;\n+  fb_out.pubimbue(loc);\n+  fb_in_out.pubimbue(loc);\n+  \n+  fb_out.open(\"tmp_underflow.tst\", ios::out);\n+  fb_out.sputc(L'S');\n+  fb_out.sputc(L'T');\n+  fb_out.close();\n+\n+  fb_in_out.open(\"tmp_underflow.tst\", ios::in | ios::out);\n+  while (fb_in_out.sbumpc() != filebuf::traits_type::eof());\n+\n+  VERIFY( fb_in_out.sputc(L'x') == L'x' );\n+  fb_in_out.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f8636b0cc303c785ab6cbbad1016211270f564c0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/5.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F5.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,73 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test that unbuffered really means unbuffered for UTF-8\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char* name = \"tmp_underflow-5\";\n+\n+  wfilebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(__gnu_test::try_named_locale(\"se_NO.UTF-8\"));\n+\n+  FILE* file = fopen(name, \"w\");\n+  setvbuf(file, 0, _IONBF, 0);\n+  fputs(\"abcde\", file);\n+\n+  fb.open(name, ios_base::in);\n+  VERIFY( fb.sbumpc() == L'a' );\n+  \n+  fseek(file, 1, SEEK_SET);\n+  fputc('0', file);\n+\n+  VERIFY( fb.sbumpc() == L'0' );\n+  VERIFY( fb.sbumpc() == L'c' );\n+\n+  fputc('1', file);\n+  fputc('2', file);\n+\n+  VERIFY( fb.sbumpc() == L'2' );\n+  VERIFY( fb.sbumpc() == L'e' );\n+  VERIFY( fb.sbumpc() == WEOF );\n+\n+  fputc('3', file);\n+  fputc('4', file);\n+\n+  VERIFY( fb.sbumpc() == L'4' );\n+  VERIFY( fb.sbumpc() == WEOF );\n+\n+  fb.close();\n+  fclose(file);\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "50e4e78cd8c783373d402adb93abb40310767f64", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/12.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F12.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,119 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+\n+#include <iostream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handling of UTF-8 in wcout\n+void test12()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+  const char* name = \"tmp_12\";\n+\n+  locale loc(__gnu_test::try_named_locale(\"se_NO.UTF-8\"));\n+  locale::global(loc);\n+  std::ios_base::sync_with_stdio(false);\n+  wcout.imbue(loc);\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  int fd = open(name,\n+\t\tO_WRONLY | O_CREAT | O_TRUNC,\n+\t\t0666);\n+  VERIFY( fd != -1 );\n+  VERIFY( dup2(fd, 1) == 1 );\n+  close(fd);\n+  \n+  wcout.write(wstr, wlen);\n+  wcout.flush();\n+  VERIFY( wcout.good() );\n+\n+  FILE* file = fopen(name, \"r\");\n+  char buf[clen + 10];\n+  size_t n = fread(buf, 1, clen + 10, file);\n+  VERIFY( n == clen );\n+  VERIFY( !memcmp(buf, cstr, clen) );\n+  fclose(file);\n+}\n+\n+int main()\n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "b974b4afb858120bf165d476617c1aa9dfc4758b", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/13.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F13.cc?ref=f1813b69728fa75ac6ecbb13c5f60ad40dcb3ec7", "patch": "@@ -0,0 +1,118 @@\n+// 2003-09-04  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+\n+#include <iostream>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+// Test handling of UTF-8 in wcin\n+void test13()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+  const char* name = \"tmp_13\";\n+\n+  locale loc(__gnu_test::try_named_locale(\"se_NO.UTF-8\"));\n+  locale::global(loc);\n+  std::ios_base::sync_with_stdio(false);\n+  wcin.imbue(loc);\n+\n+  const char cstr[] =\n+    \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n+    \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n+    \"'()*+,-./0123456789:;<=>?@}~\\x7f\\xc2\\x80\\xc2\\x81\\xc2\\x82\\xc2\"\n+    \"\\x83\\xc2\\x84\\xc2\\x85\\xc2\\x86\\xc2\\x87\\xc2\\x88\\xc2\\x89\\xc2\\x8a\"\n+    \"\\xc2\\x8b\\xc2\\x8c\\xc2\\x8d\\xc2\\x8e\\xc2\\x8f\\xc2\\x90\\xc2\\x91\\xc2\"\n+    \"\\x92\\xc2\\x93\\xc2\\x94\\xc2\\x95\\xc2\\x96\\xc2\\x97\\xc2\\x98\\xc2\\x99\"\n+    \"\\xc2\\x9a\\xc2\\x9b\\xc2\\x9c\\xc3\\xba\\xc3\\xbb\\xc3\\xbc\\xc3\\xbd\\xc3\"\n+    \"\\xbe\\xc3\\xbf\\xc4\\x80\\xc4\\x81\\xc4\\x82\\xc4\\x83\\xc4\\x84\\xc4\\x85\"\n+    \"\\xc4\\x86\\xc4\\x87\\xc4\\x88\\xc4\\x89\\xc4\\x8a\\xc4\\x8b\\xc4\\x8c\\xc4\"\n+    \"\\x8d\\xc4\\x8e\\xc4\\x8f\\xc4\\x90\\xc4\\x91\\xc4\\x92\\xc4\\x93\\xc4\\x94\"\n+    \"\\xc4\\x95\\xc4\\x96\\xc4\\x97\\xc4\\x98\\xc4\\x99\\xdf\\xb8\\xdf\\xb9\\xdf\"\n+    \"\\xba\\xdf\\xbb\\xdf\\xbc\\xdf\\xbd\\xdf\\xbe\\xdf\\xbf\\xe0\\xa0\\x80\\xe0\"\n+    \"\\xa0\\x81\\xe0\\xa0\\x82\\xe0\\xa0\\x83\\xe0\\xa0\\x84\\xe0\\xa0\\x85\\xe0\"\n+    \"\\xa0\\x86\\xe0\\xa0\\x87\\xe0\\xa0\\x88\\xe0\\xa0\\x89\\xe0\\xa0\\x8a\\xe0\"\n+    \"\\xa0\\x8b\\xe0\\xa0\\x8c\\xe0\\xa0\\x8d\\xe0\\xa0\\x8e\\xe0\\xa0\\x8f\\xe0\"\n+    \"\\xa0\\x90\\xe0\\xa0\\x91\\xe0\\xa0\\x92\\xe0\\xa0\\x93\\xe0\\xa0\\x94\\xe0\"\n+    \"\\xa0\\x95\\xe0\\xa0\\x96\\xe0\\xa0\\x97\\x1\\x2\\x4\\x8\\x10\\x20@\\xc2\\x80\"\n+    \"\\xc4\\x80\\xc8\\x80\\xd0\\x80\\xe0\\xa0\\x80\\xe1\\x80\\x80\\xe2\\x80\\x80\"\n+    \"\\xe4\\x80\\x80\\xe8\\x80\\x80\\xf0\\x90\\x80\\x80\\xf0\\xa0\\x80\\x80\\xf1\"\n+    \"\\x80\\x80\\x80\\xf2\\x80\\x80\\x80\\xf4\\x80\\x80\\x80\\xf8\\x88\\x80\\x80\"\n+    \"\\x80\\xf8\\x90\\x80\\x80\\x80\\xf8\\xa0\\x80\\x80\\x80\\xf9\\x80\\x80\\x80\"\n+    \"\\x80\\xfa\\x80\\x80\\x80\\x80\\xfc\\x84\\x80\\x80\\x80\\x80\\xfc\\x88\\x80\"\n+    \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n+    \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n+\n+  const wchar_t wstr[] = {\n+    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n+    0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, L'!',\n+    L'\"', L'#', L'$', L'%', L'&', L'\\'', L'(', L')', L'*', L'+',\n+    L',', L'-', L'.', L'/', L'0', L'1', L'2', L'3', L'4', L'5',\n+    L'6', L'7', L'8', L'9', L':', L';', L'<', L'=', L'>', L'?',\n+    L'@', L'}', L'~', 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,\n+    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,\n+    0x9a, 0x9b, 0x9c, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100,\n+    0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109,\n+    0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112,\n+    0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x7f8, 0x7f9,\n+    0x7fa, 0x7fb, 0x7fc, 0x7fd, 0x7fe, 0x7ff, 0x800, 0x801, 0x802,\n+    0x803, 0x804, 0x805, 0x806, 0x807, 0x808, 0x809, 0x80a, 0x80b,\n+    0x80c, 0x80d, 0x80e, 0x80f, 0x810, 0x811, 0x812, 0x813, 0x814,\n+    0x815, 0x816, 0x817, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, L'@',\n+    0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n+    0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000,\n+    0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000,\n+    0x20000000, 0x40000000, 0x0\n+  };\n+\n+  const size_t clen = sizeof(cstr) / sizeof(cstr[0]);\n+  const size_t wlen = sizeof(wstr) / sizeof(wstr[0]);\n+\n+  FILE* file = fopen(name, \"w\");\n+  fwrite(cstr, 1, clen, file);\n+  fclose(file);\n+\n+  int fd = open(name, O_RDONLY);\n+  dup2(fd, 0);\n+  close(fd);\n+\n+  wchar_t wbuf[wlen + 10];\n+  wcin.read(wbuf, wlen + 10);\n+  streamsize n = wcin.gcount();\n+  VERIFY( n == wlen );\n+  VERIFY( !wmemcmp(wbuf, wstr, wlen) );\n+  VERIFY( wcin.eof() );\n+  VERIFY( wcin.fail() );\n+  VERIFY( !wcin.bad() );\n+}\n+\n+int main()\n+{\n+  test13();\n+  return 0;\n+}"}]}