{"sha": "730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwZjZkMTQyNTNmN2M4ZjQ0ZWZmOGMwM2JlYjU5ODRlMmY0YzZjZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-29T17:14:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-29T17:14:51Z"}, "message": "compiler, runtime: change type hash/equal to Go funcs\n    \n    Change the type descriptor hash and equal functions from C code pointers\n    to Go func values.  This permits them to be set to a Go function\n    closure.  This is in preparation for the Go 1.5, so that we can use a\n    closure for the hash/equal functions returned by the new reflect.ArrayOf\n    function.\n    \n    Reviewed-on: https://go-review.googlesource.com/16485\n\nFrom-SVN: r229541", "tree": {"sha": "51c7bcf037fe05935e1479b498e56d84212089b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c7bcf037fe05935e1479b498e56d84212089b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/comments", "author": null, "committer": null, "parents": [{"sha": "285b1f01acaf962e7a668aed7bab4d609a19fc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285b1f01acaf962e7a668aed7bab4d609a19fc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285b1f01acaf962e7a668aed7bab4d609a19fc3b"}], "stats": {"total": 209, "additions": 159, "deletions": 50}, "files": [{"sha": "8d3547b32953d32ca634c969b3ce94c5c2782ff0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -1,4 +1,4 @@\n-11e249a59e8c627fe9c2938c38e39cb1efefb1fb\n+57da43e8159bfe1a31e49683c371cf36e2fb6051\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c9750bd0aee02349e1135549c2b3ab685076865c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -1197,19 +1197,29 @@ Func_descriptor_expression::do_get_backend(Translate_context* context)\n \n   Gogo* gogo = context->gogo();\n   std::string var_name;\n-  if (no->package() == NULL)\n-    var_name = gogo->pkgpath_symbol();\n+  bool is_descriptor = false;\n+  if (no->is_function_declaration()\n+      && !no->func_declaration_value()->asm_name().empty()\n+      && Linemap::is_predeclared_location(no->location()))\n+    {\n+      var_name = no->func_declaration_value()->asm_name() + \"_descriptor\";\n+      is_descriptor = true;\n+    }\n   else\n-    var_name = no->package()->pkgpath_symbol();\n-  var_name.push_back('.');\n-  var_name.append(Gogo::unpack_hidden_name(no->name()));\n-  var_name.append(\"$descriptor\");\n+    {\n+      if (no->package() == NULL)\n+\tvar_name = gogo->pkgpath_symbol();\n+      else\n+\tvar_name = no->package()->pkgpath_symbol();\n+      var_name.push_back('.');\n+      var_name.append(Gogo::unpack_hidden_name(no->name()));\n+      var_name.append(\"$descriptor\");\n+    }\n \n   Btype* btype = this->type()->get_backend(gogo);\n \n   Bvariable* bvar;\n-  if (no->package() != NULL\n-      || Linemap::is_predeclared_location(no->location()))\n+  if (no->package() != NULL || is_descriptor)\n     bvar = context->backend()->immutable_struct_reference(var_name, btype,\n \t\t\t\t\t\t\t  loc);\n   else"}, {"sha": "5c8950a028b2324dfcad90897abd6eb81ac241c8", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -1474,6 +1474,27 @@ Type::make_type_descriptor_type()\n       Type* void_type = Type::make_void_type();\n       Type* unsafe_pointer_type = Type::make_pointer_type(void_type);\n \n+      Typed_identifier_list *params = new Typed_identifier_list();\n+      params->push_back(Typed_identifier(\"key\", unsafe_pointer_type, bloc));\n+      params->push_back(Typed_identifier(\"key_size\", uintptr_type, bloc));\n+\n+      Typed_identifier_list* results = new Typed_identifier_list();\n+      results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n+\n+      Type* hash_fntype = Type::make_function_type(NULL, params, results,\n+\t\t\t\t\t\t   bloc);\n+\n+      params = new Typed_identifier_list();\n+      params->push_back(Typed_identifier(\"key1\", unsafe_pointer_type, bloc));\n+      params->push_back(Typed_identifier(\"key2\", unsafe_pointer_type, bloc));\n+      params->push_back(Typed_identifier(\"key_size\", uintptr_type, bloc));\n+\n+      results = new Typed_identifier_list();\n+      results->push_back(Typed_identifier(\"\", Type::lookup_bool_type(), bloc));\n+\n+      Type* equal_fntype = Type::make_function_type(NULL, params, results,\n+\t\t\t\t\t\t    bloc);\n+\n       // Forward declaration for the type descriptor type.\n       Named_object* named_type_descriptor_type =\n \tNamed_object::make_type_declaration(\"commonType\", NULL, bloc);\n@@ -1514,8 +1535,8 @@ Type::make_type_descriptor_type()\n \t\t\t\t       \"fieldAlign\", uint8_type,\n \t\t\t\t       \"size\", uintptr_type,\n \t\t\t\t       \"hash\", uint32_type,\n-\t\t\t\t       \"hashfn\", uintptr_type,\n-\t\t\t\t       \"equalfn\", uintptr_type,\n+\t\t\t\t       \"hashfn\", hash_fntype,\n+\t\t\t\t       \"equalfn\", equal_fntype,\n \t\t\t\t       \"gc\", uintptr_type,\n \t\t\t\t       \"string\", pointer_string_type,\n \t\t\t\t       \"\", pointer_uncommon_type,\n@@ -1852,6 +1873,10 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n   gogo->add_block(b, bloc);\n   gogo->lower_block(equal_fn, b);\n   gogo->finish_function(bloc);\n+\n+  // Build the function descriptors for the type descriptor to refer to.\n+  hash_fn->func_value()->descriptor(gogo, hash_fn);\n+  equal_fn->func_value()->descriptor(gogo, equal_fn);\n }\n \n // Write a hash function that simply calls the hash function for a\n@@ -2009,8 +2034,8 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n   Named_object* equal_fn;\n   this->type_functions(gogo, name, hash_fntype, equal_fntype, &hash_fn,\n \t\t       &equal_fn);\n-  vals->push_back(Expression::make_func_code_reference(hash_fn, bloc));\n-  vals->push_back(Expression::make_func_code_reference(equal_fn, bloc));\n+  vals->push_back(Expression::make_func_reference(hash_fn, NULL, bloc));\n+  vals->push_back(Expression::make_func_reference(equal_fn, NULL, bloc));\n \n   ++p;\n   go_assert(p->is_field_name(\"gc\"));"}, {"sha": "61b195563b637db3b6e8ff08c1ec40e7e46e219a", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -255,8 +255,8 @@ type rtype struct {\n \tsize       uintptr\n \thash       uint32 // hash of type; avoids computation in hash tables\n \n-\thashfn  uintptr // hash function code\n-\tequalfn uintptr // equality function code\n+\thashfn  func(unsafe.Pointer, uintptr)                 // hash function\n+\tequalfn func(unsafe.Pointer, unsafe.Pointer, uintptr) // equality function\n \n \tgc            unsafe.Pointer // garbage collection data\n \tstring        *string        // string form; unnecessary  but undeniably useful"}, {"sha": "40b716eb4af0d0e5e10abeb7b405e71fe7dda515", "filename": "libgo/runtime/go-eface-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-compare.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -28,8 +28,8 @@ __go_empty_interface_compare (struct __go_empty_interface left,\n     return 1;\n   if (__go_is_pointer_type (left_descriptor))\n     return left.__object == right.__object ? 0 : 1;\n-  if (!left_descriptor->__equalfn (left.__object, right.__object,\n-\t\t\t\t   left_descriptor->__size))\n+  if (!__go_call_equalfn (left_descriptor->__equalfn, left.__object,\n+\t\t\t  right.__object, left_descriptor->__size))\n     return 1;\n   return 0;\n }"}, {"sha": "e810750d5db5b80d1aae5db7546b79ecd731042e", "filename": "libgo/runtime/go-eface-val-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-eface-val-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-eface-val-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-val-compare.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -26,8 +26,8 @@ __go_empty_interface_value_compare (\n     return 1;\n   if (__go_is_pointer_type (left_descriptor))\n     return left.__object == val ? 0 : 1;\n-  if (!left_descriptor->__equalfn (left.__object, val,\n-\t\t\t\t   left_descriptor->__size))\n+  if (!__go_call_equalfn (left_descriptor->__equalfn, left.__object, val,\n+\t\t\t  left_descriptor->__size))\n     return 1;\n   return 0;\n }"}, {"sha": "1d367753a1e4bcd3d6a306f09fbed5f15310ef28", "filename": "libgo/runtime/go-interface-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-compare.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -28,8 +28,8 @@ __go_interface_compare (struct __go_interface left,\n     return 1;\n   if (__go_is_pointer_type (left_descriptor))\n     return left.__object == right.__object ? 0 : 1;\n-  if (!left_descriptor->__equalfn (left.__object, right.__object,\n-\t\t\t\t   left_descriptor->__size))\n+  if (!__go_call_equalfn (left_descriptor->__equalfn, left.__object,\n+\t\t\t  right.__object, left_descriptor->__size))\n     return 1;\n   return 0;\n }"}, {"sha": "d1e6fd084d2e714d630f844d16258c192b52b83f", "filename": "libgo/runtime/go-interface-eface-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-eface-compare.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -27,8 +27,8 @@ __go_interface_empty_compare (struct __go_interface left,\n     return 1;\n   if (__go_is_pointer_type (left_descriptor))\n     return left.__object == right.__object ? 0 : 1;\n-  if (!left_descriptor->__equalfn (left.__object, right.__object,\n-\t\t\t\t   left_descriptor->__size))\n+  if (!__go_call_equalfn (left_descriptor->__equalfn, left.__object,\n+\t\t\t  right.__object, left_descriptor->__size))\n     return 1;\n   return 0;\n }"}, {"sha": "36b6efdc9f1068060a2885c0ad89722e0412d0a3", "filename": "libgo/runtime/go-interface-val-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-val-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-interface-val-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-val-compare.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -26,8 +26,8 @@ __go_interface_value_compare (\n     return 1;\n   if (__go_is_pointer_type (left_descriptor))\n     return left.__object == val ? 0 : 1;\n-  if (!left_descriptor->__equalfn (left.__object, val,\n-\t\t\t\t   left_descriptor->__size))\n+  if (!__go_call_equalfn (left_descriptor->__equalfn, left.__object, val,\n+\t\t\t  left_descriptor->__size))\n     return 1;\n   return 0;\n }"}, {"sha": "fb7c331856ed44b1802127c3a60e2f1c5d78afcb", "filename": "libgo/runtime/go-map-delete.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-map-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-map-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-delete.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -21,7 +21,7 @@ __go_map_delete (struct __go_map *map, const void *key)\n   const struct __go_map_descriptor *descriptor;\n   const struct __go_type_descriptor *key_descriptor;\n   uintptr_t key_offset;\n-  _Bool (*equalfn) (const void*, const void*, uintptr_t);\n+  const FuncVal *equalfn;\n   size_t key_hash;\n   size_t key_size;\n   size_t bucket_index;\n@@ -41,14 +41,14 @@ __go_map_delete (struct __go_map *map, const void *key)\n   __go_assert (key_size != -1UL);\n   equalfn = key_descriptor->__equalfn;\n \n-  key_hash = key_descriptor->__hashfn (key, key_size);\n+  key_hash = __go_call_hashfn (key_descriptor->__hashfn, key, key_size);\n   bucket_index = key_hash % map->__bucket_count;\n \n   pentry = map->__buckets + bucket_index;\n   while (*pentry != NULL)\n     {\n       char *entry = (char *) *pentry;\n-      if (equalfn (key, entry + key_offset, key_size))\n+      if (__go_call_equalfn (equalfn, key, entry + key_offset, key_size))\n \t{\n \t  *pentry = *(void **) entry;\n \t  if (descriptor->__entry_size >= TinySize)"}, {"sha": "353041db6c472db16d8482aab6a7d2b521a5041b", "filename": "libgo/runtime/go-map-index.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-map-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-map-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-index.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -22,7 +22,7 @@ __go_map_rehash (struct __go_map *map)\n   const struct __go_type_descriptor *key_descriptor;\n   uintptr_t key_offset;\n   size_t key_size;\n-  uintptr_t (*hashfn) (const void *, uintptr_t);\n+  const FuncVal *hashfn;\n   uintptr_t old_bucket_count;\n   void **old_buckets;\n   uintptr_t new_bucket_count;\n@@ -55,7 +55,7 @@ __go_map_rehash (struct __go_map *map)\n \n \t  /* We could speed up rehashing at the cost of memory space\n \t     by caching the hash code.  */\n-\t  key_hash = hashfn (entry + key_offset, key_size);\n+\t  key_hash = __go_call_hashfn (hashfn, entry + key_offset, key_size);\n \t  new_bucket_index = key_hash % new_bucket_count;\n \n \t  next = *(char **) entry;\n@@ -82,7 +82,7 @@ __go_map_index (struct __go_map *map, const void *key, _Bool insert)\n   const struct __go_map_descriptor *descriptor;\n   const struct __go_type_descriptor *key_descriptor;\n   uintptr_t key_offset;\n-  _Bool (*equalfn) (const void*, const void*, uintptr_t);\n+  const FuncVal *equalfn;\n   size_t key_hash;\n   size_t key_size;\n   size_t bucket_index;\n@@ -103,13 +103,13 @@ __go_map_index (struct __go_map *map, const void *key, _Bool insert)\n   __go_assert (key_size != -1UL);\n   equalfn = key_descriptor->__equalfn;\n \n-  key_hash = key_descriptor->__hashfn (key, key_size);\n+  key_hash = __go_call_hashfn (key_descriptor->__hashfn, key, key_size);\n   bucket_index = key_hash % map->__bucket_count;\n \n   entry = (char *) map->__buckets[bucket_index];\n   while (entry != NULL)\n     {\n-      if (equalfn (key, entry + key_offset, key_size))\n+      if (__go_call_equalfn (equalfn, key, entry + key_offset, key_size))\n \treturn entry + descriptor->__val_offset;\n       entry = *(char **) entry;\n     }"}, {"sha": "36f31025d301295abf2798e30a58f015b7d8d5ed", "filename": "libgo/runtime/go-reflect-map.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-reflect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-reflect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-map.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -151,5 +151,6 @@ extern _Bool ismapkey (const struct __go_type_descriptor *)\n _Bool\n ismapkey (const struct __go_type_descriptor *typ)\n {\n-  return typ != NULL && typ->__hashfn != __go_type_hash_error;\n+  return (typ != NULL\n+\t  && (void *) typ->__hashfn->fn != (void *) __go_type_hash_error);\n }"}, {"sha": "585984e9fef220c1c58521ef6a3149530f88ef5b", "filename": "libgo/runtime/go-type-complex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-complex.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -84,6 +84,9 @@ __go_type_hash_complex (const void *vkey, uintptr_t key_size)\n     runtime_throw (\"__go_type_hash_complex: invalid complex size\");\n }\n \n+const FuncVal __go_type_hash_complex_descriptor =\n+  { (void *) __go_type_hash_complex };\n+\n /* Equality function for complex types.  */\n \n _Bool\n@@ -112,3 +115,6 @@ __go_type_equal_complex (const void *vk1, const void *vk2, uintptr_t key_size)\n   else\n     runtime_throw (\"__go_type_equal_complex: invalid complex size\");\n }\n+\n+const FuncVal __go_type_equal_complex_descriptor =\n+  { (void *) __go_type_equal_complex };"}, {"sha": "315c30efb7f609166f2ad217ddba6560aeb1937b", "filename": "libgo/runtime/go-type-eface.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-eface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-eface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-eface.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -24,11 +24,14 @@ __go_type_hash_empty_interface (const void *vval,\n     return 0;\n   size = descriptor->__size;\n   if (__go_is_pointer_type (descriptor))\n-    return descriptor->__hashfn (&val->__object, size);\n+    return __go_call_hashfn (descriptor->__hashfn, &val->__object, size);\n   else\n-    return descriptor->__hashfn (val->__object, size);\n+    return __go_call_hashfn (descriptor->__hashfn, val->__object, size);\n }\n \n+const FuncVal __go_type_hash_empty_interface_descriptor =\n+  { (void *) __go_type_hash_empty_interface };\n+\n /* An equality function for an empty interface.  */\n \n _Bool\n@@ -51,6 +54,9 @@ __go_type_equal_empty_interface (const void *vv1, const void *vv2,\n   if (__go_is_pointer_type (v1_descriptor))\n     return v1->__object == v2->__object;\n   else\n-    return v1_descriptor->__equalfn (v1->__object, v2->__object,\n-\t\t\t\t     v1_descriptor->__size);\n+    return __go_call_equalfn (v1_descriptor->__equalfn, v1->__object,\n+\t\t\t      v2->__object, v1_descriptor->__size);\n }\n+\n+const FuncVal __go_type_equal_empty_interface_descriptor =\n+  { (void *) __go_type_equal_empty_interface };"}, {"sha": "8881a86f6e09b9bf083fd8f1918908793ca15de0", "filename": "libgo/runtime/go-type-error.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-error.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -17,6 +17,9 @@ __go_type_hash_error (const void *val __attribute__ ((unused)),\n   runtime_panicstring (\"hash of unhashable type\");\n }\n \n+const FuncVal __go_type_hash_error_descriptor =\n+  { (void *) __go_type_hash_error };\n+\n /* An equality function for an interface.  */\n \n _Bool\n@@ -26,3 +29,6 @@ __go_type_equal_error (const void *v1 __attribute__ ((unused)),\n {\n   runtime_panicstring (\"comparing uncomparable types\");\n }\n+\n+const FuncVal __go_type_equal_error_descriptor =\n+  { (void *) __go_type_equal_error };"}, {"sha": "39f9b29ae7dd095567df76a4823c65df57e3d454", "filename": "libgo/runtime/go-type-float.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-float.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -56,6 +56,9 @@ __go_type_hash_float (const void *vkey, uintptr_t key_size)\n     runtime_throw (\"__go_type_hash_float: invalid float size\");\n }\n \n+const FuncVal __go_type_hash_float_descriptor =\n+  { (void *) __go_type_hash_float };\n+\n /* Equality function for float types.  */\n \n _Bool\n@@ -84,3 +87,6 @@ __go_type_equal_float (const void *vk1, const void *vk2, uintptr_t key_size)\n   else\n     runtime_throw (\"__go_type_equal_float: invalid float size\");\n }\n+\n+const FuncVal __go_type_equal_float_descriptor =\n+  { (void *) __go_type_equal_float };"}, {"sha": "a334d56cbe406201761dabf47e6605847b194893", "filename": "libgo/runtime/go-type-identity.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-identity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-identity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-identity.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -45,6 +45,9 @@ __go_type_hash_identity (const void *key, uintptr_t key_size)\n   return ret;\n }\n \n+const FuncVal __go_type_hash_identity_descriptor =\n+  { (void *) __go_type_hash_identity };\n+\n /* An identity equality function for a type.  This is used for types\n    where we can check for equality by checking that the values have\n    the same bits.  */\n@@ -54,3 +57,6 @@ __go_type_equal_identity (const void *k1, const void *k2, uintptr_t key_size)\n {\n   return __builtin_memcmp (k1, k2, key_size) == 0;\n }\n+\n+const FuncVal __go_type_equal_identity_descriptor =\n+  { (void *) __go_type_equal_identity };"}, {"sha": "e9e577956ebba7ee66b24281d5126f2fe9111a34", "filename": "libgo/runtime/go-type-interface.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-interface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-interface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-interface.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -24,11 +24,14 @@ __go_type_hash_interface (const void *vval,\n   descriptor = (const struct __go_type_descriptor *) val->__methods[0];\n   size = descriptor->__size;\n   if (__go_is_pointer_type (descriptor))\n-    return descriptor->__hashfn (&val->__object, size);\n+    return __go_call_hashfn (descriptor->__hashfn, &val->__object, size);\n   else\n-    return descriptor->__hashfn (val->__object, size);\n+    return __go_call_hashfn (descriptor->__hashfn, val->__object, size);\n }\n \n+const FuncVal __go_type_hash_interface_descriptor =\n+  { (void *) __go_type_hash_interface };\n+\n /* An equality function for an interface.  */\n \n _Bool\n@@ -51,6 +54,9 @@ __go_type_equal_interface (const void *vv1, const void *vv2,\n   if (__go_is_pointer_type (v1_descriptor))\n     return v1->__object == v2->__object;\n   else\n-    return v1_descriptor->__equalfn (v1->__object, v2->__object,\n-\t\t\t\t     v1_descriptor->__size);\n+    return __go_call_equalfn (v1_descriptor->__equalfn, v1->__object,\n+\t\t\t      v2->__object, v1_descriptor->__size);\n }\n+\n+const FuncVal __go_type_equal_interface_descriptor =\n+  { (void *) __go_type_equal_interface };"}, {"sha": "3d33d6ee5103fba921e141c74fa243ec60bed3df", "filename": "libgo/runtime/go-type-string.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-string.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -28,6 +28,9 @@ __go_type_hash_string (const void *vkey,\n   return ret;\n }\n \n+const FuncVal __go_type_hash_string_descriptor =\n+  { (void *) __go_type_hash_string };\n+\n /* A string equality function for a map.  */\n \n _Bool\n@@ -41,3 +44,6 @@ __go_type_equal_string (const void *vk1, const void *vk2,\n   k2 = (const String *) vk2;\n   return __go_ptr_strings_equal (k1, k2);\n }\n+\n+const FuncVal __go_type_equal_string_descriptor =\n+  { (void *) __go_type_equal_string };"}, {"sha": "72c9f56986eeb25e726f23a72d21251e588b7285", "filename": "libgo/runtime/go-type.h", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type.h?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -89,11 +89,11 @@ struct __go_type_descriptor\n      size of this type, and returns a hash code.  We pass the size\n      explicitly becaues it means that we can share a single instance\n      of this function for various different types.  */\n-  uintptr_t (*__hashfn) (const void *, uintptr_t);\n+  const FuncVal *__hashfn;\n \n   /* This function takes two pointers to values of this type, and the\n      size of this type, and returns whether the values are equal.  */\n-  _Bool (*__equalfn) (const void *, const void *, uintptr_t);\n+  const FuncVal *__equalfn;\n \n   /* The garbage collection data. */\n   const uintptr *__gc;\n@@ -316,21 +316,52 @@ __go_is_pointer_type (const struct __go_type_descriptor *td)\n \t  || (td->__code & GO_CODE_MASK) == GO_UNSAFE_POINTER);\n }\n \n+/* Call a type hash function, given the __hashfn value.  */\n+\n+static inline uintptr_t\n+__go_call_hashfn (const FuncVal *hashfn, const void *p, uintptr_t size)\n+{\n+  uintptr_t (*h) (const void *, uintptr_t) = (void *) hashfn->fn;\n+  return __builtin_call_with_static_chain (h (p, size), hashfn);\n+}\n+\n+/* Call a type equality function, given the __equalfn value.  */\n+\n+static inline _Bool\n+__go_call_equalfn (const FuncVal *equalfn, const void *p1, const void *p2,\n+\t\t   uintptr_t size)\n+{\n+  _Bool (*e) (const void *, const void *, uintptr_t) = (void *) equalfn->fn;\n+  return __builtin_call_with_static_chain (e (p1, p2, size), equalfn);\n+}\n+\n extern _Bool\n __go_type_descriptors_equal(const struct __go_type_descriptor*,\n \t\t\t    const struct __go_type_descriptor*);\n \n extern uintptr_t __go_type_hash_identity (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_identity_descriptor;\n extern _Bool __go_type_equal_identity (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_identity_descriptor;\n extern uintptr_t __go_type_hash_string (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_string_descriptor;\n extern _Bool __go_type_equal_string (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_string_descriptor;\n extern uintptr_t __go_type_hash_float (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_float_descriptor;\n extern _Bool __go_type_equal_float (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_float_descriptor;\n extern uintptr_t __go_type_hash_complex (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_complex_descriptor;\n extern _Bool __go_type_equal_complex (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_complex_descriptor;\n extern uintptr_t __go_type_hash_interface (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_interface_descriptor;\n extern _Bool __go_type_equal_interface (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_interface_descriptor;\n extern uintptr_t __go_type_hash_error (const void *, uintptr_t);\n+extern const FuncVal __go_type_hash_error_descriptor;\n extern _Bool __go_type_equal_error (const void *, const void *, uintptr_t);\n+extern const FuncVal __go_type_equal_error_descriptor;\n \n #endif /* !defined(LIBGO_GO_TYPE_H) */"}, {"sha": "a59ae852185e2b575cc48339ad5a9b5a75e228ee", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -54,9 +54,9 @@ const struct __go_type_descriptor unsafe_Pointer =\n   /* __hash */\n   78501163U,\n   /* __hashfn */\n-  __go_type_hash_identity,\n+  &__go_type_hash_identity_descriptor,\n   /* __equalfn */\n-  __go_type_equal_identity,\n+  &__go_type_equal_identity_descriptor,\n   /* __gc */\n   unsafe_Pointer_gc,\n   /* __reflection */\n@@ -99,9 +99,9 @@ const struct __go_ptr_type pointer_unsafe_Pointer =\n     /* __hash */\n     1256018616U,\n     /* __hashfn */\n-    __go_type_hash_identity,\n+    &__go_type_hash_identity_descriptor,\n     /* __equalfn */\n-    __go_type_equal_identity,\n+    &__go_type_equal_identity_descriptor,\n     /* __gc */\n     unsafe_Pointer_gc,\n     /* __reflection */"}, {"sha": "db8b94f28f77aab12712243311912ae9fa5a2b5a", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730f6d14253f7c8f44eff8c03beb5984e2f4c6cf/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=730f6d14253f7c8f44eff8c03beb5984e2f4c6cf", "patch": "@@ -528,9 +528,9 @@ static struct __go_channel_type chan_bool_type_descriptor =\n       /* __hash */\n       0, /* This value doesn't matter.  */\n       /* __hashfn */\n-      __go_type_hash_error,\n+      &__go_type_hash_error_descriptor,\n       /* __equalfn */\n-      __go_type_equal_error,\n+      &__go_type_equal_error_descriptor,\n       /* __gc */\n       NULL, /* This value doesn't matter */\n       /* __reflection */"}]}