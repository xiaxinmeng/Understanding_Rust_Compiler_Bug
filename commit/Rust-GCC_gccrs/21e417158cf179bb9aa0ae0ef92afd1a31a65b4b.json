{"sha": "21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlNDE3MTU4Y2YxNzliYjlhYTBhZTBlZjkyYWZkMWEzMWE2NWI0Yg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-24T19:21:21Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-24T19:21:21Z"}, "message": "tree-pretty-print.h (default_tree_printer): Do not declare.\n\n2012-04-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\ngcc/\n\t* tree-pretty-print.h (default_tree_printer): Do not declare.\n\t* tree-diagnostic.c: Include tree-pretty-print.h, tree-pass.h and\n\tintl.h.\n\t(default_tree_diagnostic_starter): Make static.\n\t(default_tree_printer): Move to here. Make static.\n\t(tree_diagnostics_defaults): New.\n\t* tree-diagnostic.h (default_tree_diagnostic_starter): Do not declare.\n\t* tree.c (free_lang_data): Use tree_diagnostics_defaults.\n\t* toplev.c: Do not include tree-pass.h.\n\t(default_tree_printer): Move from here.\n\t(general_init): Use tree_diagnostics_defaults.\n\nFrom-SVN: r186780", "tree": {"sha": "03ddeb5ba2cc3f34ce5c10654d25ba5d70db6fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03ddeb5ba2cc3f34ce5c10654d25ba5d70db6fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/comments", "author": null, "committer": null, "parents": [{"sha": "1a985a5642607f9715657aaea7e03033130065c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a985a5642607f9715657aaea7e03033130065c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a985a5642607f9715657aaea7e03033130065c1"}], "stats": {"total": 172, "additions": 97, "deletions": 75}, "files": [{"sha": "3be610718c81d881197d4c300ec597a89d0a0c6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -1,3 +1,17 @@\n+2012-04-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* tree-pretty-print.h (default_tree_printer): Do not declare.\n+\t* tree-diagnostic.c: Include tree-pretty-print.h, tree-pass.h and\n+\tintl.h.\n+\t(default_tree_diagnostic_starter): Make static.\n+\t(default_tree_printer): Move to here. Make static.\n+\t(tree_diagnostics_defaults): New.\n+\t* tree-diagnostic.h (default_tree_diagnostic_starter): Do not declare.\n+\t* tree.c (free_lang_data): Use tree_diagnostics_defaults.\n+\t* toplev.c: Do not include tree-pass.h.\n+\t(default_tree_printer): Move from here.\n+\t(general_init): Use tree_diagnostics_defaults.\n+\n 2012-04-24  Chao-ying Fu  <fu@mips.com>\n \n \t* config.gcc (mips64*-*-linux*): Append mips/linux-common.h to tm_file."}, {"sha": "3d9e1626b8057d36542847f589cfe9ef4aef4e2e", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 63, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -74,7 +74,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"alloc-pool.h\"\n #include \"tree-mudflap.h\"\n-#include \"tree-pass.h\"\n #include \"gimple.h\"\n #include \"tree-ssa-alias.h\"\n #include \"plugin.h\"\n@@ -962,63 +961,6 @@ init_asm_output (const char *name)\n     }\n }\n \n-/* Default tree printer.   Handles declarations only.  */\n-bool\n-default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n-\t\t      int precision, bool wide, bool set_locus, bool hash)\n-{\n-  tree t;\n-\n-  /* FUTURE: %+x should set the locus.  */\n-  if (precision != 0 || wide || hash)\n-    return false;\n-\n-  switch (*spec)\n-    {\n-    case 'E':\n-      t = va_arg (*text->args_ptr, tree);\n-      if (TREE_CODE (t) == IDENTIFIER_NODE)\n-\t{\n-\t  pp_identifier (pp, IDENTIFIER_POINTER (t));\n-\t  return true;\n-\t}\n-      break;\n-\n-    case 'D':\n-      t = va_arg (*text->args_ptr, tree);\n-      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n-\tt = DECL_DEBUG_EXPR (t);\n-      break;\n-\n-    case 'F':\n-    case 'T':\n-      t = va_arg (*text->args_ptr, tree);\n-      break;\n-\n-    case 'K':\n-      percent_K_format (text);\n-      return true;\n-\n-    default:\n-      return false;\n-    }\n-\n-  if (set_locus && text->locus)\n-    *text->locus = DECL_SOURCE_LOCATION (t);\n-\n-  if (DECL_P (t))\n-    {\n-      const char *n = DECL_NAME (t)\n-        ? identifier_to_locale (lang_hooks.decl_printable_name (t, 2))\n-        : _(\"<anonymous>\");\n-      pp_string (pp, n);\n-    }\n-  else\n-    dump_generic_node (pp, t, 0, TDF_DIAGNOSTIC, 0);\n-\n-  return true;\n-}\n-\n /* A helper function; used as the reallocator function for cpp's line\n    table.  */\n static void *\n@@ -1163,13 +1105,15 @@ general_init (const char *argv0)\n   /* Initialize the diagnostics reporting machinery, so option parsing\n      can give warnings and errors.  */\n   diagnostic_initialize (global_dc, N_OPTS);\n-  diagnostic_starter (global_dc) = default_tree_diagnostic_starter;\n-  /* By default print macro expansion contexts in the diagnostic\n-     finalizer -- for tokens resulting from macro macro expansion.  */\n-  diagnostic_finalizer (global_dc) = virt_loc_aware_diagnostic_finalizer;\n   /* Set a default printer.  Language specific initializations will\n      override it later.  */\n-  pp_format_decoder (global_dc->printer) = &default_tree_printer;\n+  tree_diagnostics_defaults (global_dc);\n+  /* FIXME: This should probably be moved to C-family\n+     language-specific initializations.  */\n+  /* By default print macro expansion contexts in the diagnostic\n+     finalizer -- for tokens resulting from macro expansion.  */\n+  diagnostic_finalizer (global_dc) = virt_loc_aware_diagnostic_finalizer;\n+\n   global_dc->show_caret\n     = global_options_init.x_flag_diagnostics_show_caret;\n   global_dc->show_option_requested"}, {"sha": "c811fe9cdd2ec24c6f8723d160d63f4855e8510c", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -25,10 +25,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"diagnostic.h\"\n+#include \"tree-pretty-print.h\"\n #include \"tree-diagnostic.h\"\n+#include \"tree-pass.h\" /* TDF_DIAGNOSTIC */\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"vec.h\"\n+#include \"intl.h\"\n \n /* Prints out, if necessary, the name of the current function\n    that caused an error.  Called from all error and warning functions.  */\n@@ -40,7 +43,7 @@ diagnostic_report_current_function (diagnostic_context *context,\n   lang_hooks.print_error_function (context, input_filename, diagnostic);\n }\n \n-void\n+static void\n default_tree_diagnostic_starter (diagnostic_context *context,\n \t\t\t\t diagnostic_info *diagnostic)\n {\n@@ -227,3 +230,69 @@ virt_loc_aware_diagnostic_finalizer (diagnostic_context *context,\n \t\t\t\t   diagnostic->location,\n \t\t\t\t   NULL);\n }\n+\n+/* Default tree printer.   Handles declarations only.  */\n+static bool\n+default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n+\t\t      int precision, bool wide, bool set_locus, bool hash)\n+{\n+  tree t;\n+\n+  /* FUTURE: %+x should set the locus.  */\n+  if (precision != 0 || wide || hash)\n+    return false;\n+\n+  switch (*spec)\n+    {\n+    case 'E':\n+      t = va_arg (*text->args_ptr, tree);\n+      if (TREE_CODE (t) == IDENTIFIER_NODE)\n+\t{\n+\t  pp_identifier (pp, IDENTIFIER_POINTER (t));\n+\t  return true;\n+\t}\n+      break;\n+\n+    case 'D':\n+      t = va_arg (*text->args_ptr, tree);\n+      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n+\tt = DECL_DEBUG_EXPR (t);\n+      break;\n+\n+    case 'F':\n+    case 'T':\n+      t = va_arg (*text->args_ptr, tree);\n+      break;\n+\n+    case 'K':\n+      percent_K_format (text);\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+\n+  if (set_locus && text->locus)\n+    *text->locus = DECL_SOURCE_LOCATION (t);\n+\n+  if (DECL_P (t))\n+    {\n+      const char *n = DECL_NAME (t)\n+        ? identifier_to_locale (lang_hooks.decl_printable_name (t, 2))\n+        : _(\"<anonymous>\");\n+      pp_string (pp, n);\n+    }\n+  else\n+    dump_generic_node (pp, t, 0, TDF_DIAGNOSTIC, 0);\n+\n+  return true;\n+}\n+\n+/* Sets CONTEXT to use language independent diagnostics.  */\n+void\n+tree_diagnostics_defaults (diagnostic_context *context)\n+{\n+  diagnostic_starter (context) = default_tree_diagnostic_starter;\n+  diagnostic_finalizer (context) = default_diagnostic_finalizer;\n+  diagnostic_format_decoder (context) = default_tree_printer;\n+}"}, {"sha": "819792caaa72a9e3cd1b54bdd8695df2e7cc77ee", "filename": "gcc/tree-diagnostic.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.h?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -49,9 +49,10 @@ along with GCC; see the file COPYING3.  If not see\n        ? diagnostic_abstract_origin (DI)\t\t\\\n        : current_function_decl)\n \n-void default_tree_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n-extern void diagnostic_report_current_function (diagnostic_context *,\n-\t\t\t\t\t\tdiagnostic_info *);\n+void diagnostic_report_current_function (diagnostic_context *,\n+\t\t\t\t\t diagnostic_info *);\n void virt_loc_aware_diagnostic_finalizer (diagnostic_context *,\n \t\t\t\t\t  diagnostic_info *);\n+\n+void tree_diagnostics_defaults (diagnostic_context *context);\n #endif /* ! GCC_TREE_DIAGNOSTIC_H */"}, {"sha": "d622e5194157c30445499199e782e31c5dd54ff7", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -50,10 +50,6 @@ extern void debug_generic_stmt (tree);\n extern void debug_tree_chain (tree);\n extern void percent_K_format (text_info *);\n extern void dump_function_header (FILE *, tree, int);\n-\n-/* In toplev.c  */\n-extern bool default_tree_printer (pretty_printer *, text_info *, const char *,\n-\t\t\t\t  int, bool, bool, bool);\n /* In c-pretty-print.c  */\n extern void debug_c_tree (tree);\n "}, {"sha": "7837d45e11b062f41284c57ac8026967c4d95de7", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e417158cf179bb9aa0ae0ef92afd1a31a65b4b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=21e417158cf179bb9aa0ae0ef92afd1a31a65b4b", "patch": "@@ -38,7 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n-#include \"toplev.h\"\n+#include \"toplev.h\" /* get_random_seed */\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"filenames.h\"\n@@ -5255,9 +5255,7 @@ free_lang_data (void)\n      devise a separate, middle-end private scheme for it.  */\n \n   /* Reset diagnostic machinery.  */\n-  diagnostic_starter (global_dc) = default_tree_diagnostic_starter;\n-  diagnostic_finalizer (global_dc) = default_diagnostic_finalizer;\n-  diagnostic_format_decoder (global_dc) = default_tree_printer;\n+  tree_diagnostics_defaults (global_dc);\n \n   return 0;\n }"}]}