{"sha": "d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "node_id": "C_kwDOANBUbNoAKGQ5ZjlkNWQzMGZlYjMzYzM1OTk1NWQ3MDMwY2M2YmU1MGVmNmRjMGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T13:57:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T13:57:22Z"}, "message": "cfgbuild: Fix DEBUG_INSN handling in find_bb_boundaries [PR106719]\n\nThe following testcase FAILs on aarch64-linux.  We have some atomic\ninstruction followed by 2 DEBUG_INSNs (if -g only of course) followed\nby NOTE_INSN_EPILOGUE_BEG followed by some USE insn.\nNow, split3 pass replaces the atomic instruction with a code sequence\nwhich ends with a conditional jump and the split3 pass calls\nfind_many_sub_basic_blocks.\nFor -g0, find_bb_boundaries sees the flow_transfer_insn (the new conditional\njump), then NOTE_INSN_EPILOGUE_BEG which can live in between basic blocks\nand then the USE insn, so splits block after the NOTE_INSN_EPILOGUE_BEG\nand puts the NOTE in between the blocks.\nFor -g, if sees a DEBUG_INSN after the flow_transfer_insn, so sets\ndebug_insn to it, then walks over another DEBUG_INSN, NOTE_INSN_EPILOGUE_BEG\nuntil it finally sees the USE insn, and triggers the:\n          rtx_insn *prev = PREV_INSN (insn);\n\n          /* If the first non-debug inside_basic_block_p insn after a control\n             flow transfer is not a label, split the block before the debug\n             insn instead of before the non-debug insn, so that the debug\n             insns are not lost.  */\n          if (debug_insn && code != CODE_LABEL && code != BARRIER)\n            prev = PREV_INSN (debug_insn);\ncode I've added for PR81325.  If there are only DEBUG_INSNs, that is\nthe right thing to do, but if in between debug_insn and insn there are\nnotes which can stay in between basic blocks or simnilarly JUMP_TABLE_DATA\nor their associated CODE_LABELs, it causes -fcompare-debug differences.\n\nThe following patch fixes it by clearing debug_insn if JUMP_TABLE_DATA\nor associated CODE_LABEL is seen (I'm afraid there is no good answer\nwhat to do with DEBUG_INSNs before those; the code then removes them:\n              /* Clean up the bb field for the insns between the blocks.  */\n              for (x = NEXT_INSN (flow_transfer_insn);\n                   x != BB_HEAD (fallthru->dest);\n                   x = next)\n                {\n                  next = NEXT_INSN (x);\n                  /* Debug insns should not be in between basic blocks,\n                     drop them on the floor.  */\n                  if (DEBUG_INSN_P (x))\n                    delete_insn (x);\n                  else if (!BARRIER_P (x))\n                    set_block_for_insn (x, NULL);\n                }\nbut if there are NOTEs, the patch just reorders the NOTEs and DEBUG_INSNs,\nsuch that the NOTEs come first (so that they stay in between basic blocks\nlike with -g0) and DEBUG_INSNs after those (so that bb is split before\nthem, so they will be in the basic block after NOTE_INSN_BASIC_BLOCK).\n\n2022-12-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/106719\n\t* cfgbuild.cc (find_bb_boundaries): If there are NOTEs in between\n\tdebug_insn (seen after flow_transfer_insn) and insn, move NOTEs\n\tbefore all the DEBUG_INSNs and split after NOTEs.  If there are\n\tother insns like jump table data, clear debug_insn.\n\n\t* gcc.dg/pr106719.c: New test.", "tree": {"sha": "d2750677e38970a91693595e30228f81c3b9ea7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2750677e38970a91693595e30228f81c3b9ea7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc49df4eeaec311f19638861c64e90d7ec696e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc49df4eeaec311f19638861c64e90d7ec696e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc49df4eeaec311f19638861c64e90d7ec696e5"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "646a066143dfba725efe98167411bb205e2ab3be", "filename": "gcc/cfgbuild.cc", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a/gcc%2Fcfgbuild.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a/gcc%2Fcfgbuild.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.cc?ref=d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "patch": "@@ -445,6 +445,7 @@ find_bb_boundaries (basic_block bb)\n   rtx_insn *debug_insn = NULL;\n   edge fallthru = NULL;\n   bool skip_purge;\n+  bool seen_note_after_debug = false;\n \n   if (insn == end)\n     return;\n@@ -492,7 +493,10 @@ find_bb_boundaries (basic_block bb)\n       if (code == DEBUG_INSN)\n \t{\n \t  if (flow_transfer_insn && !debug_insn)\n-\t    debug_insn = insn;\n+\t    {\n+\t      debug_insn = insn;\n+\t      seen_note_after_debug = false;\n+\t    }\n \t}\n       /* In case we've previously seen an insn that effects a control\n \t flow transfer, split the block.  */\n@@ -506,7 +510,40 @@ find_bb_boundaries (basic_block bb)\n \t     insn instead of before the non-debug insn, so that the debug\n \t     insns are not lost.  */\n \t  if (debug_insn && code != CODE_LABEL && code != BARRIER)\n-\t    prev = PREV_INSN (debug_insn);\n+\t    {\n+\t      prev = PREV_INSN (debug_insn);\n+\t      if (seen_note_after_debug)\n+\t\t{\n+\t\t  /* Though, if there are NOTEs intermixed with DEBUG_INSNs,\n+\t\t     move the NOTEs before the DEBUG_INSNs and split after\n+\t\t     the last NOTE.  */\n+\t\t  rtx_insn *first = NULL, *last = NULL;\n+\t\t  for (x = debug_insn; x != insn; x = NEXT_INSN (x))\n+\t\t    {\n+\t\t      if (NOTE_P (x))\n+\t\t\t{\n+\t\t\t  if (first == NULL)\n+\t\t\t    first = x;\n+\t\t\t  last = x;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  gcc_assert (DEBUG_INSN_P (x));\n+\t\t\t  if (first)\n+\t\t\t    {\n+\t\t\t      reorder_insns_nobb (first, last, prev);\n+\t\t\t      prev = last;\n+\t\t\t      first = last = NULL;\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n+\t\t  if (first)\n+\t\t    {\n+\t\t      reorder_insns_nobb (first, last, prev);\n+\t\t      prev = last;\n+\t\t    }\n+\t\t}\n+\t    }\n \t  fallthru = split_block (bb, prev);\n \t  if (flow_transfer_insn)\n \t    {\n@@ -547,6 +584,14 @@ find_bb_boundaries (basic_block bb)\n \t    flow_transfer_insn = prev_nonnote_nondebug_insn_bb (insn);\n \t  debug_insn = NULL;\n \t}\n+      else if (debug_insn)\n+\t{\n+\t  if (code == NOTE)\n+\t    seen_note_after_debug = true;\n+\t  else\n+\t    /* Jump tables.  */\n+\t    debug_insn = NULL;\n+\t}\n \n       if (control_flow_insn_p (insn))\n \tflow_transfer_insn = insn;"}, {"sha": "772bd4a2d3e8824f168415c6421621f316af149f", "filename": "gcc/testsuite/gcc.dg/pr106719.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106719.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f9d5d30feb33c359955d7030cc6be50ef6dc0a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106719.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106719.c?ref=d9f9d5d30feb33c359955d7030cc6be50ef6dc0a", "patch": "@@ -0,0 +1,13 @@\n+/* PR debug/106719 */\n+/* { dg-do compile { target sync_char_short } } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+extern short int esi, easi[2];\n+\n+void\n+foo (void)\n+{\n+  short int *psi = &easi[1];\n+  __atomic_nand_fetch (psi, esi, 0);\n+  psi = &easi[1];\n+}"}]}