{"sha": "caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "node_id": "C_kwDOANBUbNoAKGNhYTg3Yjk4ZmMzN2FjY2M1ZGIwZWUxYTJjYmNhOTdmODgzZDA0ZmQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-27T23:27:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-28T03:17:02Z"}, "message": "RISC-V: Add vlse/vsse C/C++ intrinsic testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vlse-1.C: New test.\n\t* g++.target/riscv/rvv/base/vlse_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vlse_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vlse_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsse-1.C: New test.\n\t* gcc.target/riscv/rvv/base/vlse-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse-vsse-constraint-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlse_tumu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsse_m-3.c: New test.", "tree": {"sha": "985fa6bb15a7c8bb6cf1d0cdd3ff92255519af19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/985fa6bb15a7c8bb6cf1d0cdd3ff92255519af19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1c2960184e666db331cdaeef2c51cf97f7fee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1c2960184e666db331cdaeef2c51cf97f7fee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1c2960184e666db331cdaeef2c51cf97f7fee0"}], "stats": {"total": 10458, "additions": 10458, "deletions": 0}, "files": [{"sha": "4c71cad9ee63094ab7d1bb7a6a41dc7b75d9aec4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vlse-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.C?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8(vbool64_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8(vbool32_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8(vbool16_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8(vbool8_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8(vbool4_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8(vbool2_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8(vbool1_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8(mask,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16(vbool64_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16(vbool32_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16(vbool16_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16(vbool8_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16(vbool4_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16(vbool2_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16(mask,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32(vbool64_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32(vbool32_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32(vbool16_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32(vbool8_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32(vbool4_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32(vbool64_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32(vbool32_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32(vbool16_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32(vbool8_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32(vbool4_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32(mask,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64(vbool64_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64(vbool32_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64(vbool16_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64(vbool8_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64(vbool64_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64(vbool32_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64(vbool16_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64(vbool8_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64(mask,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ef75b05d46c42fb25bbb04e52f63be89654f095e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vlse_tu-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.C?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_tu(vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_tu(vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_tu(vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_tu(vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_tu(vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_tu(vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_tu(vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_tu(vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_tu(vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_tu(vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_tu(vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_tu(vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_tu(vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_tu(vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tu(merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_tu(vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_tu(vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_tu(vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_tu(vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_tu(vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_tu(vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_tu(vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_tu(vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_tu(vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_tu(vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_tu(vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_tu(vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tu(merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_tu(vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_tu(vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_tu(vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_tu(vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_tu(vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_tu(vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_tu(vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_tu(vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_tu(vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_tu(vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_tu(vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_tu(vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_tu(vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_tu(vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_tu(vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_tu(vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_tu(vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_tu(vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_tu(vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_tu(vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_tu(vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_tu(vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_tu(vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_tu(vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_tu(vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_tu(vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_tu(vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tu(merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "9e05bb3583f946d22d68010d6e235a73393a0997", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vlse_tum-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.C?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_tum(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_tum(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_tum(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_tum(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_tum(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_tum(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_tum(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_tum(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tum(mask,merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "04fa611dac8c15d3527029a1b759400d35513b00", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vlse_tumu-1.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.C?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a2d55462c987604060c4f743977ed8c8ab2f6132", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsse-1.C", "status": "added", "additions": 685, "deletions": 0, "changes": 685, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.C?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,685 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool64_t mask,int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool32_t mask,int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool16_t mask,int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool8_t mask,int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool4_t mask,int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool2_t mask,int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool1_t mask,int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool64_t mask,int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool32_t mask,int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool16_t mask,int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool8_t mask,int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool4_t mask,int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool2_t mask,int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool64_t mask,int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool32_t mask,int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool16_t mask,int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool8_t mask,int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool4_t mask,int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool64_t mask,float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool32_t mask,float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool16_t mask,float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool8_t mask,float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32(vbool4_t mask,float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool64_t mask,int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool32_t mask,int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool16_t mask,int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool8_t mask,int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool64_t mask,double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool32_t mask,double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool16_t mask,double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64(vbool8_t mask,double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64(mask,base,bstride,value,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "b7e7ef064b73dcab6fa375be1ea10282f1d4399d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8(base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4(base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2(base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1(base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2(base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4(base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8(base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8(base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4(base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2(base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1(base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2(base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4(base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8(base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4(base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2(base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1(base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2(base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4(base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8(base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4(base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2(base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1(base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2(base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4(base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8(base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2(base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1(base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2(base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4(base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8(base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2(base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1(base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2(base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4(base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8(base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2(base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1(base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2(base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4(base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8(base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1(base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2(base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4(base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8(base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1(base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2(base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4(base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8(base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1(base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2(base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4(base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8(base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "221aacde91945c9f21c93c18156ae7d253c0aac0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8(base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4(base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2(base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1(base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2(base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4(base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8(base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8(base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4(base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2(base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1(base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2(base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4(base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8(base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4(base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2(base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1(base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2(base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4(base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8(base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4(base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2(base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1(base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2(base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4(base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8(base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2(base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1(base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2(base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4(base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8(base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2(base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1(base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2(base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4(base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8(base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2(base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1(base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2(base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4(base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8(base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1(base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2(base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4(base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8(base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1(base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2(base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4(base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8(base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1(base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2(base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4(base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8(base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "2c19375c332a1ac92643001bb5f293bec9bffb19", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8(base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4(base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2(base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1(base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2(base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4(base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8(int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8(base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8(base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4(base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2(base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1(base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2(base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4(base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8(base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4(base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2(base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1(base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2(base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4(base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8(int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8(base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4(base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2(base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1(base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2(base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4(base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8(base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2(base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1(base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2(base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4(base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8(int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8(base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2(base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1(base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2(base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4(base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8(base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2(base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1(base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2(base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4(base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8(float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8(base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1(base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2(base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4(base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8(int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8(base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1(base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2(base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4(base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8(base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1(base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2(base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4(base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8(double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8(base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "0b88a765ab280a9515e243e47513226f4b75fc8b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse-vsse-constraint-1.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-vsse-constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-vsse-constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse-vsse-constraint-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvlse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*zero\n+**\tvlse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*zero\n+**\tvsse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*zero\n+**\tret\n+*/\n+void f1 (float * in, float *out)\n+{\n+    vfloat32m1_t v = __riscv_vlse32_v_f32m1 (in, 0, 4);\n+    vfloat32m1_t v2 = __riscv_vlse32_v_f32m1_tu (v, in, 0, 4);\n+    __riscv_vsse32_v_f32m1 (out, 0, v2, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  li\\t[a-x0-9]+,\\s*7\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlse32.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*[a-x0-9]+,v0.t\n+**\tvsse32.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*[a-x0-9]+\n+**\tret\n+*/\n+void f2 (float * in, float *out)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vlse32_v_f32m1 (in, 7, 4);\n+    vfloat32m1_t v2 = __riscv_vlse32_v_f32m1_m (mask, in, 7, 4);\n+    __riscv_vsse32_v_f32m1 (out, 7, v2, 4);\n+}\n+\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvlse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+**\tvlse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero,v0.t\n+**\tvsse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+**\tret\n+*/\n+void f3 (float * in, float *out)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vfloat32m1_t v = __riscv_vlse32_v_f32m1 (in, 0, 4);\n+    vfloat32m1_t v2 = __riscv_vlse32_v_f32m1_tumu (mask, v, in, 0, 4);\n+    __riscv_vsse32_v_f32m1 (out, 0, v2, 4);\n+}\n+\n+/*\n+** f4:\n+**  li\\s+[a-x0-9]+,\\s*17\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvlse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),[a-x0-9]+\n+**\tvlse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),[a-x0-9]+\n+**\tvsse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),[a-x0-9]+\n+**\tret\n+*/\n+void f4 (int8_t * in, int8_t *out)\n+{\n+    vint8mf8_t v = __riscv_vlse8_v_i8mf8 (in, 17, 4);\n+    vint8mf8_t v2 = __riscv_vlse8_v_i8mf8_tu (v, in, 17, 4);\n+    __riscv_vsse8_v_i8mf8 (out, 17, v2, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvlse8.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero,v0.t\n+**\tvsse8.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+**\tret\n+*/\n+void f5 (int8_t * in, int8_t *out)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vlse8_v_i8mf8 (in, 0, 4);\n+    vint8mf8_t v2 = __riscv_vlse8_v_i8mf8_m (mask, in, 0, 4);\n+    __riscv_vsse8_v_i8mf8 (out, 0, v2, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**  li\\s+[a-x0-9]+,\\s*999\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvlse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*[a-x0-9]+\n+**\tvlse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*[a-x0-9]+,v0.t\n+**\tvsse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),\\s*[a-x0-9]+,v0.t\n+**\tret\n+*/\n+void f6 (int8_t * in, int8_t *out)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vlse8_v_i8mf8 (in, 999, 4);\n+    vint8mf8_t v2 = __riscv_vlse8_v_i8mf8_tumu (mask, v, in, 999, 4);\n+    __riscv_vsse8_v_i8mf8_m (mask,out, 999, v2, 4);\n+}"}, {"sha": "573cf8a37fbe4637936c00fc5093ca24384386d9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_m-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_m(mask,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_m(mask,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_m(mask,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_m(mask,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_m(mask,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_m(mask,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_m(mask,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_m(mask,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_m(mask,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_m(mask,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_m(mask,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_m(mask,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_m(mask,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_m(mask,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_m(mask,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_m(mask,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_m(mask,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_m(mask,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_m(mask,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_m(mask,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_m(mask,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_m(mask,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_m(mask,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_m(mask,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_m(mask,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_m(mask,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_m(mask,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_m(mask,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_m(mask,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_m(mask,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_m(mask,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_m(mask,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_m(mask,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_m(mask,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_m(mask,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_m(mask,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_m(mask,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_m(mask,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_m(mask,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_m(mask,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_m(mask,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_m(mask,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_m(mask,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_m(mask,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_m(mask,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_m(mask,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_m(mask,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_m(mask,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_m(mask,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_m(mask,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_m(mask,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_m(mask,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_m(mask,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "cc40364d5fd31b8ff11d66eae1ab516c492b740b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_m-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_m(mask,base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_m(mask,base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_m(mask,base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_m(mask,base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_m(mask,base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_m(mask,base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_m(mask,base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_m(mask,base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_m(mask,base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_m(mask,base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_m(mask,base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_m(mask,base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_m(mask,base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_m(mask,base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_m(mask,base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_m(mask,base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_m(mask,base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_m(mask,base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_m(mask,base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_m(mask,base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_m(mask,base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_m(mask,base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_m(mask,base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_m(mask,base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_m(mask,base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_m(mask,base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_m(mask,base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_m(mask,base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_m(mask,base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_m(mask,base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_m(mask,base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_m(mask,base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_m(mask,base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_m(mask,base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_m(mask,base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_m(mask,base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_m(mask,base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_m(mask,base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_m(mask,base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_m(mask,base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_m(mask,base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_m(mask,base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_m(mask,base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_m(mask,base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_m(mask,base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_m(mask,base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_m(mask,base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_m(mask,base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_m(mask,base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_m(mask,base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_m(mask,base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_m(mask,base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_m(mask,base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "d28908885f302d5572191960b6bede7a361d71e5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_m-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_m-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_m(mask,base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_m(mask,base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_m(mask,base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_m(mask,base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_m(mask,base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_m(mask,base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_m(mask,base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_m(mask,base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_m(mask,base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_m(mask,base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_m(mask,base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_m(mask,base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_m(mask,base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_m(mask,base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_m(mask,base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_m(mask,base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_m(mask,base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_m(mask,base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_m(mask,base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_m(mask,base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_m(mask,base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_m(mask,base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_m(mask,base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_m(mask,base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_m(mask,base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_m(mask,base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_m(mask,base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_m(mask,base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_m(mask,base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_m(mask,base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_m(mask,base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_m(mask,base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_m(mask,base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_m(mask,base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_m(mask,base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_m(mask,base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_m(mask,base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_m(mask,base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_m(mask,base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_m(mask,base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_m(mask,base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_m(mask,base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_m(mask,base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_m(mask,base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_m(mask,base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_m(mask,base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_m(mask,base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_m(mask,base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_m(mask,base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_m(mask,base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_m(mask,base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_m(mask,base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_m(mask,base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "03c28707171b3e441f4fc832650dee1059eac31a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_mu-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_mu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_mu(mask,merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "bc8727f6f85d11800b37cd8b1ec36f2b6ce9869a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_mu-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_mu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_mu(mask,merge,base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0e6a4863c337ac9b1c2fff9df085bc88c9e3239c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_mu-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_mu-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_mu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_mu(mask,merge,base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "32d687645d9ff20ac06ef645e2431fb529920b27", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tu-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tu(merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tu(merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tu(vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tu(vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tu(vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tu(merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tu(vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tu(merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tu(merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tu(vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tu(vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tu(vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tu(merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tu(vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tu(merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tu(vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tu(vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tu(vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tu(merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tu(vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tu(vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tu(vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tu(vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tu(vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tu(vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tu(vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tu(vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tu(merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tu(vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tu(merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tu(vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tu(vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tu(vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tu(merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tu(vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tu(merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "70575848095edb87b1eb457062242fc8766ce0c3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tu-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tu(merge,base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tu(merge,base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tu(merge,base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tu(vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tu(merge,base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tu(vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tu(merge,base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tu(vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tu(merge,base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tu(vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tu(merge,base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tu(merge,base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tu(merge,base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tu(merge,base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tu(merge,base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tu(merge,base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tu(merge,base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tu(merge,base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tu(merge,base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tu(merge,base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tu(vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tu(merge,base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tu(vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tu(merge,base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tu(vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tu(merge,base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tu(vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tu(merge,base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tu(merge,base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tu(merge,base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tu(merge,base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tu(merge,base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tu(merge,base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tu(merge,base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tu(merge,base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tu(vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tu(merge,base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tu(vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tu(merge,base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tu(vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tu(merge,base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tu(vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tu(merge,base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tu(merge,base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tu(merge,base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tu(merge,base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tu(merge,base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tu(merge,base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tu(merge,base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tu(vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tu(merge,base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tu(vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tu(merge,base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tu(vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tu(merge,base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tu(vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tu(merge,base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tu(vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tu(merge,base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tu(vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tu(merge,base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tu(vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tu(merge,base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tu(vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tu(merge,base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tu(merge,base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tu(merge,base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tu(merge,base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tu(merge,base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tu(vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tu(merge,base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tu(vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tu(merge,base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tu(vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tu(merge,base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tu(vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tu(merge,base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "c9a3c4bf561ca37f086c4b0764f6db5572cfc242", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tu-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tu-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tu(merge,base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tu(merge,base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tu(merge,base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tu(vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tu(merge,base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tu(vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tu(merge,base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tu(vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tu(merge,base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tu(vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tu(merge,base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tu(merge,base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tu(merge,base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tu(merge,base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tu(merge,base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tu(merge,base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tu(merge,base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tu(merge,base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tu(merge,base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tu(merge,base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tu(vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tu(merge,base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tu(vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tu(merge,base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tu(vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tu(merge,base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tu(vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tu(merge,base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tu(merge,base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tu(merge,base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tu(merge,base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tu(merge,base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tu(merge,base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tu(merge,base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tu(merge,base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tu(vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tu(merge,base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tu(vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tu(merge,base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tu(vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tu(merge,base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tu(vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tu(merge,base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tu(merge,base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tu(merge,base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tu(merge,base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tu(merge,base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tu(merge,base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tu(merge,base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tu(vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tu(merge,base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tu(vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tu(merge,base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tu(vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tu(merge,base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tu(vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tu(merge,base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tu(vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tu(merge,base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tu(vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tu(merge,base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tu(vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tu(merge,base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tu(vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tu(merge,base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tu(merge,base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tu(merge,base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tu(merge,base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tu(merge,base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tu(vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tu(merge,base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tu(vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tu(merge,base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tu(vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tu(merge,base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tu(vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tu(merge,base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*[a-x0-9]+} 3 } } */"}, {"sha": "b8127099c8d98ab0ebecdc9d22272499279216ba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tum-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tum(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tum(mask,merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0bf740034e1af9c9243be09e490ee3cd0041bad3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tum-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tum(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tum(mask,merge,base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "5e62785453746c0a6fc53f020c61a60215f24e25", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tum-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tum-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tum(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tum(mask,merge,base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "35c846e1660afc4c043b4ffbb99db09ebfaf3f92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tumu-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tumu(mask,merge,base,bstride,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "fa388faae5674fc7cf84a5e2e73d4e41a960c6bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tumu-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tumu(mask,merge,base,bstride,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tumu(mask,merge,base,bstride,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "659f57beb34e9a3b49ef99d5f92b6001143ccc53", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlse_tumu-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlse_tumu-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vlse8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vlse8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vlse8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vlse8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vlse8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vlse8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vlse8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_i8m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vlse8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vlse8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vlse8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vlse8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vlse8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vlse8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vlse8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse8_v_u8m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vlse16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vlse16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vlse16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vlse16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vlse16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vlse16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_i16m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vlse16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vlse16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vlse16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vlse16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vlse16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vlse16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse16_v_u16m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vlse32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vlse32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vlse32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vlse32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vlse32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_i32m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vlse32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vlse32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vlse32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vlse32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vlse32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_u32m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vlse32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32mf2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vlse32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vlse32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vlse32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vlse32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse32_v_f32m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vlse64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vlse64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vlse64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vlse64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_i64m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vlse64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vlse64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vlse64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vlse64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_u64m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vlse64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m1_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vlse64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m2_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vlse64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m4_tumu(mask,merge,base,bstride,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vlse64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,ptrdiff_t bstride,size_t vl)\n+{\n+  return __riscv_vlse64_v_f64m8_tumu(mask,merge,base,bstride,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vlse8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vlse16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vlse32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "fff498f771f35009c5bfc8f7761c73672a850401", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1(int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2(int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4(int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8(int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1(int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2(int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4(int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8(int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1(int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2(int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4(int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8(int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2(float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1(float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2(float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4(float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8(float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1(int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2(int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4(int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8(int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1(double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2(double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4(double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4(base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8(double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8(base,bstride,value,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */"}, {"sha": "921bc0d0493b0cde74a851f3061344206eb7df6c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1(int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2(int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4(int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8(int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1(int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2(int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4(int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8(int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1(int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2(int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4(int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8(int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2(float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1(float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2(float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4(float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8(float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1(int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2(int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4(int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8(int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1(double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2(double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4(double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4(base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8(double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8(base,bstride,value,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */"}, {"sha": "9c0d8a5749919af694f29e71e894f5fda623f765", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8(int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4(int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2(int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1(int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2(int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4(int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8(int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8(uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4(uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2(uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1(uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2(uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4(uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8(uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4(int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2(int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1(int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2(int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4(int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8(int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4(uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2(uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1(uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2(uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4(uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8(uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2(int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1(int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2(int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4(int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8(int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2(uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1(uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2(uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4(uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8(uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2(float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1(float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2(float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4(float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8(float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1(int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2(int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4(int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8(int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1(uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2(uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4(uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8(uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1(double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2(double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4(double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4(base,bstride,value,32);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8(double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8(base,bstride,value,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+\\s+} 3 } } */"}, {"sha": "daf625e01dcb7b147eb25f3267562b28e6133317", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse_m-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-1.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4ff35ffc7e7512b0a706c19a7b0bddf1ca12c867", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse_m-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-2.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4_m(mask,base,bstride,value,31);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8_m(mask,base,bstride,value,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "daf625e01dcb7b147eb25f3267562b28e6133317", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsse_m-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa87b98fc37accc5db0ee1a2cbca97f883d04fd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsse_m-3.c?ref=caa87b98fc37accc5db0ee1a2cbca97f883d04fd", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test___riscv_vsse8_v_i8mf8_m(vbool64_t mask,int8_t* base,ptrdiff_t bstride,vint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf4_m(vbool32_t mask,int8_t* base,ptrdiff_t bstride,vint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8mf2_m(vbool16_t mask,int8_t* base,ptrdiff_t bstride,vint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m1_m(vbool8_t mask,int8_t* base,ptrdiff_t bstride,vint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m2_m(vbool4_t mask,int8_t* base,ptrdiff_t bstride,vint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m4_m(vbool2_t mask,int8_t* base,ptrdiff_t bstride,vint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_i8m8_m(vbool1_t mask,int8_t* base,ptrdiff_t bstride,vint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_i8m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf8_m(vbool64_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf4_m(vbool32_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8mf2_m(vbool16_t mask,uint8_t* base,ptrdiff_t bstride,vuint8mf2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m1_m(vbool8_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m1_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m2_m(vbool4_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m2_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m4_m(vbool2_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m4_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse8_v_u8m8_m(vbool1_t mask,uint8_t* base,ptrdiff_t bstride,vuint8m8_t value,size_t vl)\n+{\n+  __riscv_vsse8_v_u8m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf4_m(vbool64_t mask,int16_t* base,ptrdiff_t bstride,vint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16mf2_m(vbool32_t mask,int16_t* base,ptrdiff_t bstride,vint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m1_m(vbool16_t mask,int16_t* base,ptrdiff_t bstride,vint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m2_m(vbool8_t mask,int16_t* base,ptrdiff_t bstride,vint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m4_m(vbool4_t mask,int16_t* base,ptrdiff_t bstride,vint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_i16m8_m(vbool2_t mask,int16_t* base,ptrdiff_t bstride,vint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_i16m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf4_m(vbool64_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16mf2_m(vbool32_t mask,uint16_t* base,ptrdiff_t bstride,vuint16mf2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m1_m(vbool16_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m1_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m2_m(vbool8_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m2_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m4_m(vbool4_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m4_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse16_v_u16m8_m(vbool2_t mask,uint16_t* base,ptrdiff_t bstride,vuint16m8_t value,size_t vl)\n+{\n+  __riscv_vsse16_v_u16m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32mf2_m(vbool64_t mask,int32_t* base,ptrdiff_t bstride,vint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m1_m(vbool32_t mask,int32_t* base,ptrdiff_t bstride,vint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m2_m(vbool16_t mask,int32_t* base,ptrdiff_t bstride,vint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m4_m(vbool8_t mask,int32_t* base,ptrdiff_t bstride,vint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_i32m8_m(vbool4_t mask,int32_t* base,ptrdiff_t bstride,vint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_i32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32mf2_m(vbool64_t mask,uint32_t* base,ptrdiff_t bstride,vuint32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m1_m(vbool32_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m2_m(vbool16_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m4_m(vbool8_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_u32m8_m(vbool4_t mask,uint32_t* base,ptrdiff_t bstride,vuint32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_u32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32mf2_m(vbool64_t mask,float* base,ptrdiff_t bstride,vfloat32mf2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32mf2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m1_m(vbool32_t mask,float* base,ptrdiff_t bstride,vfloat32m1_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m2_m(vbool16_t mask,float* base,ptrdiff_t bstride,vfloat32m2_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m4_m(vbool8_t mask,float* base,ptrdiff_t bstride,vfloat32m4_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse32_v_f32m8_m(vbool4_t mask,float* base,ptrdiff_t bstride,vfloat32m8_t value,size_t vl)\n+{\n+  __riscv_vsse32_v_f32m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m1_m(vbool64_t mask,int64_t* base,ptrdiff_t bstride,vint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m2_m(vbool32_t mask,int64_t* base,ptrdiff_t bstride,vint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m4_m(vbool16_t mask,int64_t* base,ptrdiff_t bstride,vint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_i64m8_m(vbool8_t mask,int64_t* base,ptrdiff_t bstride,vint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_i64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m1_m(vbool64_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m2_m(vbool32_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m4_m(vbool16_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_u64m8_m(vbool8_t mask,uint64_t* base,ptrdiff_t bstride,vuint64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_u64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m1_m(vbool64_t mask,double* base,ptrdiff_t bstride,vfloat64m1_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m1_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m2_m(vbool32_t mask,double* base,ptrdiff_t bstride,vfloat64m2_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m2_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m4_m(vbool16_t mask,double* base,ptrdiff_t bstride,vfloat64m4_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m4_m(mask,base,bstride,value,vl);\n+}\n+\n+void\n+test___riscv_vsse64_v_f64m8_m(vbool8_t mask,double* base,ptrdiff_t bstride,vfloat64m8_t value,size_t vl)\n+{\n+  __riscv_vsse64_v_f64m8_m(mask,base,bstride,value,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse8\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse16\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse32\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsse64\\.v\\s+v[0-9]+,0\\s*\\([a-x0-9]+\\),\\s*[a-x0-9]+,\\s*v0.t} 3 } } */"}]}