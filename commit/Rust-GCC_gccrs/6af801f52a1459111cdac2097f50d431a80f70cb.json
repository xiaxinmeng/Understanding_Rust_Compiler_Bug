{"sha": "6af801f52a1459111cdac2097f50d431a80f70cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmODAxZjUyYTE0NTkxMTFjZGFjMjA5N2Y1MGQ0MzFhODBmNzBjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-23T14:13:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-23T14:13:53Z"}, "message": "tree-ssanames.c (release_free_names_and_compact_live_names): Replace \"the the\" with \"the\" in the comments.\n\n\t* tree-ssanames.c (release_free_names_and_compact_live_names): Replace\n\t\"the the\" with \"the\" in the comments.\n\t* ipa-devirt.c (build_type_inheritance_graph,\n\tupdate_type_inheritance_graph): Likewise.\n\t* tree.c (build_function_type_list_1): Likewise.\n\t* cfgloopmanip.c (scale_loop_profile): Likewise.\n\t* tree-ssa-loop-ivopts.c (get_shiftadd_cost): Likewise.\n\t* gimple-ssa-split-paths.c\n\t(find_block_to_duplicate_for_splitting_paths): Likewise.\n\t* tree-sra.c (init_subtree_with_zero, clobber_subtree): Likewise.\n\t* expr.c (convert_move): Likewise.\n\t* var-tracking.c (vt_stack_adjustments): Likewise.\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n\t* tree-vrp.c (test_for_singularity): Likewise.\n\nFrom-SVN: r232765", "tree": {"sha": "31576f26047c17c5e21696c8e860fed5eb786af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31576f26047c17c5e21696c8e860fed5eb786af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af801f52a1459111cdac2097f50d431a80f70cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af801f52a1459111cdac2097f50d431a80f70cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af801f52a1459111cdac2097f50d431a80f70cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af801f52a1459111cdac2097f50d431a80f70cb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5958f9e24850b9f8dc76d102ca3c7fe25b18fefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5958f9e24850b9f8dc76d102ca3c7fe25b18fefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5958f9e24850b9f8dc76d102ca3c7fe25b18fefc"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "14f990453c29a0cd6a1f0c4fc9734066d33c9bdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -1,5 +1,20 @@\n 2016-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-ssanames.c (release_free_names_and_compact_live_names): Replace\n+\t\"the the\" with \"the\" in the comments.\n+\t* ipa-devirt.c (build_type_inheritance_graph,\n+\tupdate_type_inheritance_graph): Likewise.\n+\t* tree.c (build_function_type_list_1): Likewise.\n+\t* cfgloopmanip.c (scale_loop_profile): Likewise.\n+\t* tree-ssa-loop-ivopts.c (get_shiftadd_cost): Likewise.\n+\t* gimple-ssa-split-paths.c\n+\t(find_block_to_duplicate_for_splitting_paths): Likewise.\n+\t* tree-sra.c (init_subtree_with_zero, clobber_subtree): Likewise.\n+\t* expr.c (convert_move): Likewise.\n+\t* var-tracking.c (vt_stack_adjustments): Likewise.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Likewise.\n+\t* tree-vrp.c (test_for_singularity): Likewise.\n+\n \t* tree-vect-stmts.c (vectorizable_condition): Build a VEC_COND_EXPR\n \tdirectly instead of building a temporary tree.\n "}, {"sha": "2bffb80e284028a832e2d40189040969441c3905", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -569,7 +569,7 @@ scale_loop_profile (struct loop *loop, int scale, gcov_type iteration_bound)\n \t}\n \n       /* Roughly speaking we want to reduce the loop body profile by the\n-\t the difference of loop iterations.  We however can do better if\n+\t difference of loop iterations.  We however can do better if\n \t we look at the actual profile, if it is available.  */\n       scale = RDIV (iteration_bound * scale, iterations);\n       if (loop->header->count)"}, {"sha": "f4bac362ed79352ccf9034fca6e51729ab41d652", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -485,7 +485,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n       /* No special multiword conversion insn; do it by hand.  */\n       start_sequence ();\n \n-      /* Since we will turn this into a no conflict block, we must ensure the\n+      /* Since we will turn this into a no conflict block, we must ensure\n          the source does not overlap the target so force it into an isolated\n          register when maybe so.  Likewise for any MEM input, since the\n          conversion sequence might require several references to it and we"}, {"sha": "40c099a119e887921f25c59b60c3c012f5d95bfc", "filename": "gcc/gimple-ssa-split-paths.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fgimple-ssa-split-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fgimple-ssa-split-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -74,7 +74,7 @@ find_block_to_duplicate_for_splitting_paths (basic_block latch)\n \t    return NULL;\n \n \t  /* And that BB's immediate dominator's successors are the\n-\t     the predecessors of BB.  */\n+\t     predecessors of BB.  */\n \t  if (!find_edge (bb_idom, EDGE_PRED (bb, 0)->src)\n \t      || !find_edge (bb_idom, EDGE_PRED (bb, 1)->src))\n \t    return NULL;"}, {"sha": "b2036d550f0494d769abacf699bbd346e6d48bca", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -2246,7 +2246,7 @@ build_type_inheritance_graph (void)\n     odr_vtable_hash = new odr_vtable_hash_type (23);\n \n   /* We reconstruct the graph starting of types of all methods seen in the\n-     the unit.  */\n+     unit.  */\n   FOR_EACH_SYMBOL (n)\n     if (is_a <cgraph_node *> (n)\n \t&& DECL_VIRTUAL_P (n->decl)\n@@ -3406,7 +3406,7 @@ update_type_inheritance_graph (void)\n   free_polymorphic_call_targets_hash ();\n   timevar_push (TV_IPA_INHERITANCE);\n   /* We reconstruct the graph starting from types of all methods seen in the\n-     the unit.  */\n+     unit.  */\n   FOR_EACH_FUNCTION (n)\n     if (DECL_VIRTUAL_P (n->decl)\n \t&& !n->definition"}, {"sha": "30a8244aa9e1bed7d4842caf82922a24a49091d1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -2813,7 +2813,7 @@ generate_subtree_copies (struct access *access, tree agg,\n }\n \n /* Assign zero to all scalar replacements in an access subtree.  ACCESS is the\n-   the root of the subtree to be processed.  GSI is the statement iterator used\n+   root of the subtree to be processed.  GSI is the statement iterator used\n    for inserting statements which are added after the current statement if\n    INSERT_AFTER is true or before it otherwise.  */\n \n@@ -2853,7 +2853,7 @@ init_subtree_with_zero (struct access *access, gimple_stmt_iterator *gsi,\n     init_subtree_with_zero (child, gsi, insert_after, loc);\n }\n \n-/* Clobber all scalar replacements in an access subtree.  ACCESS is the the\n+/* Clobber all scalar replacements in an access subtree.  ACCESS is the\n    root of the subtree to be processed.  GSI is the statement iterator used\n    for inserting statements which are added after the current statement if\n    INSERT_AFTER is true or before it otherwise.  */"}, {"sha": "3faed930dc2ed8b2e497501060c02addd7909408", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -4234,7 +4234,7 @@ get_address_cost (bool symbol_present, bool var_present,\n }\n \n  /* Calculate the SPEED or size cost of shiftadd EXPR in MODE.  MULT is the\n-    the EXPR operand holding the shift.  COST0 and COST1 are the costs for\n+    EXPR operand holding the shift.  COST0 and COST1 are the costs for\n     calculating the operands of EXPR.  Returns true if successful, and returns\n     the cost in COST.  */\n "}, {"sha": "d6897c72363069b9272cf006dab013d3d0bee1b2", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -759,8 +759,8 @@ replace_ssa_name_symbol (tree ssa_name, tree sym)\n   TREE_TYPE (ssa_name) = TREE_TYPE (sym);\n }\n \n-/* Release the vector of free SSA_NAMEs and compact the the\n-   vector of SSA_NAMEs that are live.  */\n+/* Release the vector of free SSA_NAMEs and compact the vector of SSA_NAMEs\n+   that are live.  */\n \n static void\n release_free_names_and_compact_live_names (function *fun)"}, {"sha": "4c0e1352fa67eeaefad3e10c68f785071b7a2f4e", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -1495,7 +1495,7 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n                  size (vector size / 8).  Vectorization factor will 8.  If both\n                  access are misaligned by 3, the first one needs one scalar\n                  iteration to be aligned, and the second one needs 5.  But the\n-                 the first one will be aligned also by peeling 5 scalar\n+\t\t first one will be aligned also by peeling 5 scalar\n                  iterations, and in that case both accesses will be aligned.\n                  Hence, except for the immediate peeling amount, we also want\n                  to try to add full vector size, while we don't exceed"}, {"sha": "9644ba1acfa2234c7f80f82e85df7bef01afb457", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -9257,8 +9257,8 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n   tree min = NULL;\n   tree max = NULL;\n \n-  /* Extract minimum/maximum values which satisfy the\n-     the conditional as it was written.  */\n+  /* Extract minimum/maximum values which satisfy the conditional as it was\n+     written.  */\n   if (cond_code == LE_EXPR || cond_code == LT_EXPR)\n     {\n       /* This should not be negative infinity; there is no overflow"}, {"sha": "9c67beaf9761d1bde9f6d18ba872ea657e0b4f97", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -8406,7 +8406,7 @@ build_function_type (tree value_type, tree arg_types)\n \n /* Build a function type.  The RETURN_TYPE is the type returned by the\n    function.  If VAARGS is set, no void_type_node is appended to the\n-   the list.  ARGP must be always be terminated be a NULL_TREE.  */\n+   list.  ARGP must be always be terminated be a NULL_TREE.  */\n \n static tree\n build_function_type_list_1 (bool vaargs, tree return_type, va_list argp)"}, {"sha": "d044b7f989ddcc9c76ac893e38a0ddff7296ef13", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af801f52a1459111cdac2097f50d431a80f70cb/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=6af801f52a1459111cdac2097f50d431a80f70cb", "patch": "@@ -871,7 +871,7 @@ vt_stack_adjustments (void)\n \t     pointer is often restored via a load-multiple instruction\n \t     and so no stack_adjust offset is recorded for it.  This means\n \t     that the stack offset at the end of the epilogue block is the\n-\t     the same as the offset before the epilogue, whereas other paths\n+\t     same as the offset before the epilogue, whereas other paths\n \t     to the exit block will have the correct stack_adjust.\n \n \t     It is safe to ignore these differences because (a) we never"}]}