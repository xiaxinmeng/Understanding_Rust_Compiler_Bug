{"sha": "3c844a6a13096f126522a0ea58a3e9ba503bd959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4NDRhNmExMzA5NmYxMjY1MjJhMGVhNThhM2U5YmE1MDNiZDk1OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-29T20:28:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-29T20:28:07Z"}, "message": "go-test.exp: Handle the test lines used in several new tests.\n\n\t* go.test/go-test.exp: Handle the test lines used in several new\n\ttests.\n\t(errchk): Add opts parameter.  Change all callers.  Handle parens\n\tin regexps.\n\nFrom-SVN: r171694", "tree": {"sha": "c34225b90eecf560e7b9b114497a19b423a3069f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34225b90eecf560e7b9b114497a19b423a3069f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c844a6a13096f126522a0ea58a3e9ba503bd959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c844a6a13096f126522a0ea58a3e9ba503bd959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c844a6a13096f126522a0ea58a3e9ba503bd959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c844a6a13096f126522a0ea58a3e9ba503bd959/comments", "author": null, "committer": null, "parents": [{"sha": "22d17b1c681199b6bd0380010c56cddbb6b8d96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d17b1c681199b6bd0380010c56cddbb6b8d96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d17b1c681199b6bd0380010c56cddbb6b8d96b"}], "stats": {"total": 121, "additions": 108, "deletions": 13}, "files": [{"sha": "0fabf96a456ca64b9701d15cb0f4e18512405aa7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -1,5 +1,12 @@\n+2011-03-29  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go.test/go-test.exp: Handle the test lines used in several new\n+\ttests.\n+\t(errchk): Add opts parameter.  Change all callers.  Handle parens\n+\tin regexps.\n+\n 2011-03-29  Peter Bergner <bergner@vnet.ibm.com>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\t\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \t* gcc.dg/stack-usage-1.c (SIZE): Provide proper values for __ppc64__\n \tand __APPLE__ && __PPC__ && __ALTIVEC__."}, {"sha": "11d9507ee77b8e5efef31f6d388c94880406068e", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 100, "deletions": 12, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c844a6a13096f126522a0ea58a3e9ba503bd959/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=3c844a6a13096f126522a0ea58a3e9ba503bd959", "patch": "@@ -35,7 +35,7 @@ load_lib go-dg.exp\n load_lib go-torture.exp\n \n # Implement errchk\n-proc errchk { test } {\n+proc errchk { test opts } {\n     global dg-do-what-default\n     global DEFAULT_GOCFLAGS\n     global runtests\n@@ -69,6 +69,14 @@ proc errchk { test } {\n \t    set index [string first \"dg-error\" $out_line]\n \t    regsub -start $index -all \"\\}\\(.\\)\" $out_line \"\\\\\\\\\\[\\\\\\}\\\\\\\\\\]\\\\1\" out_line\n \t}\n+\tif [string match \"*dg-error*\\(*\" $out_line] {\n+\t    set index [string first \"dg-error\" $out_line]\n+\t    regsub -start $index -all \"\\\\\\\\\\\\\\(\" $out_line \"\\\\\\\\\\[\\\\\\(\\\\\\\\\\]\" out_line\n+\t}\n+\tif [string match \"*dg-error*\\)*\\}\" $out_line] {\n+\t    set index [string first \"dg-error\" $out_line]\n+\t    regsub -start $index -all \"\\\\\\\\\\\\\\)\\(.\\)\" $out_line \"\\\\\\\\\\[\\\\\\)\\\\\\\\\\]\\\\1\" out_line\n+\t}\n \tif [string match \"*dg-error*\\[.\\]*\" $out_line] {\n \t    set index [string first \"dg-error\" $out_line]\n \t    regsub -all \"\\\\\\[\\\\.\\\\\\]\" $out_line \"\\\\\\\\\\[.\\\\\\\\\\]\" out_line\n@@ -80,7 +88,7 @@ proc errchk { test } {\n \n     set hold_runtests $runtests\n     set runtests \"go-test.exp\"\n-    go-dg-runtest $filename \"-fno-show-column $DEFAULT_GOCFLAGS\"\n+    go-dg-runtest $filename \"-fno-show-column $DEFAULT_GOCFLAGS $opts\"\n     set runtests $hold_runtests\n \n     file delete $filename\n@@ -340,7 +348,8 @@ proc go-gc-tests { } {\n \t\t\t\"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A || echo BUG*\" \\\n \t\t\t$test_line] \\\n \t\t   || [string match \"// \\$G \\$F.go && \\$L \\$F.\\$A  #*\" \\\n-\t\t\t   $test_line] } {\n+\t\t\t   $test_line]\n+\t\t   || $test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A\" } {\n \t    # This is a vanilla compile and link test.\n \t    set dg-do-what-default \"link\"\n \t    go-dg-runtest $test \"-w $DEFAULT_GOCFLAGS\"\n@@ -391,7 +400,7 @@ proc go-gc-tests { } {\n \t\t\t    $test_line] \\\n \t\t    || [string match \"// errchk \\$G \\$D/\\$F.go || echo BUG*\" \\\n \t\t\t    $test_line] } {\n-\t    errchk $test\n+\t    errchk $test \"\"\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/\\$F.dir/bug0.go && \\$G \\$D/\\$F.dir/bug1.go || echo BUG*\" \\\n \t\t\t$test_line] } {\n@@ -425,7 +434,7 @@ proc go-gc-tests { } {\n \t    regsub \"\\\\.go$\" $test \".dir/$name1\" file1\n \t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    regsub \"\\\\.go$\" $test \".dir/$name2\" file2\n-\t    errchk $file2\n+\t    errchk $file2 \"\"\n \t    file delete \"[file rootname [file tail $file1]].o\"\n \t    set runtests $hold_runtests\n \t} elseif { [string match \\\n@@ -468,7 +477,7 @@ proc go-gc-tests { } {\n \t    regsub \"\\\\.go$\" $test \".dir/bug1.go\" file2\n \t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    regsub \"\\\\.go$\" $test \".dir/bug2.go\" file3\n-\t    errchk $file3\n+\t    errchk $file3 \"\"\n \t    file delete \"[file rootname [file tail $file1]].o\"\n \t    file delete \"[file rootname [file tail $file2]].o\"\n \t    set runtests $hold_runtests\n@@ -547,6 +556,33 @@ proc go-gc-tests { } {\n \t    }\n \t    file delete $ofile1 $ofile2 $output_file\n \t    set runtests $hold_runtests\n+\t} elseif { [string match \\\n+\t\t\t\"// \\$G \\$D/\\$F.dir/lib.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ./\\$A.out || echo BUG*\" \\\n+\t\t\t$test_line ] } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"assemble\"\n+\t    regsub \"\\\\.go$\" $test \".dir/lib.go\" file1\n+\t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set ofile1 \"[file rootname [file tail $file1]].o\"\n+\t    regsub \"\\\\.go$\" $test \".dir/main.go\" file2\n+\t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set ofile2 \"[file rootname [file tail $file2]].o\"\n+\t    set dg-do-what-default \"link\"\n+\t    set output_file \"./[file rootname [file tail $file2]].exe\"\n+\t    set comp_output [go_target_compile \"$ofile1 $ofile2\" \\\n+\t\t\t\t $output_file \"executable\" \"$DEFAULT_GOCFLAGS\"]\n+\t    set comp_output [go-dg-prune $target_triplet $comp_output]\n+\t    if [string match \"\" $comp_output] {\n+\t\tset result [go_load \"$output_file\" \"\" \"\"]\n+\t\tset status [lindex $result 0]\n+\t\t$status $name\n+\t    } else {\n+\t\tverbose -log $comp_output\n+\t\tfail $name\n+\t    }\n+\t    file delete $ofile1 $ofile2 $output_file\n+\t    set runtests $hold_runtests\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/\\$F.dir/chanbug.go && \\$G -I. \\$D/\\$F.dir/chanbug2.go\" \\\n \t\t\t$test_line] } {\n@@ -574,7 +610,7 @@ proc go-gc-tests { } {\n \t    regsub \"\\\\.go$\" $test \".dir/x.go\" file1\n \t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    regsub \"\\\\.go$\" $test \".dir/y.go\" file2\n-\t    errchk $file2\n+\t    errchk $file2 \"\"\n \t    file delete \"[file rootname [file tail $file1]].o\"\n \t    set runtests $hold_runtests\n \t} elseif { [string match \"// true*\" $test_line] } {\n@@ -598,7 +634,7 @@ proc go-gc-tests { } {\n \t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    set ofile2 \"[file rootname [file tail $file2]].o\"\n \t    regsub \"\\\\.go$\" $test \".dir/bug3.go\" file3\n-\t    errchk $file3\n+\t    errchk $file3 \"\"\n \t    set output_file \"./[file rootname [file tail $test]].exe\"\n \t    set comp_output [go_target_compile \"$ofile0 $ofile1 $ofile2\" \\\n \t\t\t\t $output_file \"executable\" \"$DEFAULT_GOCFLAGS\"]\n@@ -662,7 +698,7 @@ proc go-gc-tests { } {\n \t    }\n \t    file delete $output_file\n \t} elseif { $test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A &&\" \\\n-\t\t       && $test_line2 == \"// ./\\$A.out -pass 0 >tmp.go && \\$G tmp.go && \\$L -o tmp1.\\$A tmp.\\$A && ./tmp1.\\$A &&\" \\\n+\t\t       && $test_line2 == \"// ./\\$A.out -pass 0 >tmp.go && \\$G tmp.go && \\$L -o \\$A.out1 tmp.\\$A && ./\\$A.out1 &&\" \\\n \t\t       && $test_line3 == \"// ./\\$A.out -pass 1 >tmp.go && errchk \\$G -e tmp.go &&\" \\\n \t\t       && $test_line4 == \"// ./\\$A.out -pass 2 >tmp.go && errchk \\$G -e tmp.go\" } {\n \t    set go_execute_args \"\"\n@@ -683,13 +719,13 @@ proc go-gc-tests { } {\n \t\t    fail \"$name execution 1\"\n \t\t} else {\n \t\t    pass \"$name execution 1\"\n-\t\t    errchk tmp.go\n+\t\t    errchk tmp.go \"\"\n \t\t}\n \t\tif { [catch \"exec $output_file -pass 2 >tmp.go\"] != 0 } {\n \t\t    fail \"$name execution 2\"\n \t\t} else {\n \t\t    pass \"$name execution 2\"\n-\t\t    errchk tmp.go\n+\t\t    errchk tmp.go \"\"\n \t\t}\n \t\tfile delete tmp.go\n \t    }\n@@ -709,11 +745,63 @@ proc go-gc-tests { } {\n \t\t} else {\n \t\t    pass \"$name execution\"\n \t\t    file delete tmp.x\n-\t\t    errchk tmp.go\n+\t\t    errchk tmp.go \"\"\n+\t\t}\n+\t    }\n+\t    file delete $output_file\n+\t    set runtests $hold_runtests\n+\t} elseif { [string match \\\n+\t\t\t\"// \\$G \\$D/\\$F.dir/p.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ! ./\\$A.out || echo BUG*\" \\\n+\t\t\t$test_line] } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"assemble\"\n+\t    regsub \"\\\\.go$\" $test \".dir/p.go\" file1\n+\t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set ofile1 \"[file rootname [file tail $file1]].o\"\n+\t    regsub \"\\\\.go$\" $test \".dir/main.go\" file2\n+\t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set ofile2 \"[file rootname [file tail $file2]].o\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set comp_output [go_target_compile \"$ofile1 $ofile2\" \\\n+\t\t\t\t $output_file \"executable\" \"$DEFAULT_GOCFLAGS\"]\n+\t    set comp_output [go-dg-prune $target_triplet $comp_output]\n+\t    if [string match \"\" $comp_output] {\n+\t\tsetup_xfail \"*-*-*\"\n+\t\tset result [go_load \"$output_file\" \"\" \"\"]\n+\t\tset status [lindex $result 0]\n+\t\t$status $name\n+\t    } else {\n+\t\tverbose -log $comp_output\n+\t\tfali $name\n+\t    }\n+\t    file delete $ofile1 $ofile2 $output_file\n+\t    set runtests $hold_runtests\n+\t} elseif { $test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out >tmp.go &&\"\n+\t\t   && $test_line2 == \"// \\$G tmp.go && \\$L tmp.\\$A && ./\\$A.out || echo BUG: select5\" } {\n+\t    set go_execute_args \"\"\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"link\"\n+\t    dg-test -keep-output $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set base \"[file rootname [file tail $test]]\"\n+\t    if [isnative] {\n+\t\tif { [catch \"exec $output_file > $base-out.go\"] != 0 } {\n+\t\t    fail \"$name execution\"\n+\t\t} else {\n+\t\t    pass \"$name execution\"\n+\t\t    file delete $base-out.x\n+\t\t    go-torture-execute \"./$base-out.go\"\n \t\t}\n+\t\t# file delete $base-out.go\n \t    }\n \t    file delete $output_file\n \t    set runtests $hold_runtests\n+\t} elseif { $test_line == \"// errchk \\$G -e \\$D/\\$F.dir/\\[ab\\].go\" } {\n+\t    regsub \"\\\\.go$\" $test \".dir/a.go\" file1\n+\t    regsub \"\\\\.go$\" $test \".dir/b.go\" file2\n+\t    errchk \"$file1\" \"$file2\"\n \t} elseif { $test_line == \"// # generated by cmplxdivide.c\" } {\n \t    # Ignore.\n \t} elseif { $test_line == \"// \\$G \\$D/bug302.dir/p.go && gopack grc pp.a p.\\$A && \\$G \\$D/bug302.dir/main.go\" \\"}]}