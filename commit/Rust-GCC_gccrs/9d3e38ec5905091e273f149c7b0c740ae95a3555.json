{"sha": "9d3e38ec5905091e273f149c7b0c740ae95a3555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzZTM4ZWM1OTA1MDkxZTI3M2YxNDljN2IwYzc0MGFlOTVhMzU1NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-04-21T18:11:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-04-21T18:11:51Z"}, "message": "std_streambuf.h (uflow()): It's used only by basic_stringbuf (i.e....\n\n2003-04-21  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/std/std_streambuf.h (uflow()): It's used only by\n\tbasic_stringbuf (i.e., basic_filebuf provide its own uflow()),\n\ttherefore do not consider the _M_buf_unified == true case.\n\n\t* include/std/std_streambuf.h (sgetc()): Restore __ret variable.\n\nFrom-SVN: r65891", "tree": {"sha": "2222e55ad42f4274905c073f232d639b36f99c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2222e55ad42f4274905c073f232d639b36f99c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d3e38ec5905091e273f149c7b0c740ae95a3555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3e38ec5905091e273f149c7b0c740ae95a3555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3e38ec5905091e273f149c7b0c740ae95a3555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3e38ec5905091e273f149c7b0c740ae95a3555/comments", "author": null, "committer": null, "parents": [{"sha": "337f4314e6b3bd6dc10a36806aacaa62b1025ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337f4314e6b3bd6dc10a36806aacaa62b1025ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337f4314e6b3bd6dc10a36806aacaa62b1025ad3"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "5b186682826b425760e3b5089bedfdef3780b397", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e38ec5905091e273f149c7b0c740ae95a3555/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e38ec5905091e273f149c7b0c740ae95a3555/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d3e38ec5905091e273f149c7b0c740ae95a3555", "patch": "@@ -1,3 +1,11 @@\n+2003-04-21  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_streambuf.h (uflow()): It's used only by\n+\tbasic_stringbuf (i.e., basic_filebuf provide its own uflow()),\n+\ttherefore do not consider the _M_buf_unified == true case.\n+\n+\t* include/std/std_streambuf.h (sgetc()): Restore __ret variable.\n+\n 2003-04-20  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* docs/html/ext/howto.html ('LWG Issues'):"}, {"sha": "ded94a4e5120f100d5d4b06117c1815694a867b3", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3e38ec5905091e273f149c7b0c740ae95a3555/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3e38ec5905091e273f149c7b0c740ae95a3555/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=9d3e38ec5905091e273f149c7b0c740ae95a3555", "patch": "@@ -234,8 +234,7 @@ namespace std\n        *  @if maint\n        *  Necessary bits for putback buffer management. Only used in\n        *  the basic_filebuf class, as necessary for the standard\n-       *  requirements. The only basic_streambuf member function that\n-       *  needs access to these data members is in_avail...\n+       *  requirements.\n        *  \n        *  @note pbacks of over one character are not currently supported.\n        *  @endif\n@@ -452,10 +451,12 @@ namespace std\n       int_type \n       sgetc()\n       {\n+\tint_type __ret;\n \tif (_M_in_cur < _M_in_end)\n-\t  return traits_type::to_int_type(*(this->gptr()));\n+\t  __ret = traits_type::to_int_type(*(this->gptr()));\n \telse \n-\t  return this->underflow();\n+\t  __ret = this->underflow();\n+\treturn __ret;\n       }\n \n       /**\n@@ -787,13 +788,10 @@ namespace std\n \tint_type __ret = traits_type::eof();\n \tconst bool __testeof =\n \t  traits_type::eq_int_type(this->underflow(), __ret);\n-\tconst bool __testpending = _M_in_cur < _M_in_end;\n-\tif (!__testeof && __testpending)\n+\tif (!__testeof && _M_in_cur < _M_in_end)\n \t  {\n \t    __ret = traits_type::to_int_type(*_M_in_cur);\n \t    ++_M_in_cur;\n-\t    if (_M_buf_unified && _M_mode & ios_base::out)\n-\t      ++_M_out_cur;\n \t  }\n \treturn __ret;    \n       }"}]}