{"sha": "9f4e488138d23660082c4ecd744dd0ae7a5db028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0ZTQ4ODEzOGQyMzY2MDA4MmM0ZWNkNzQ0ZGQwYWU3YTVkYjAyOA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2008-08-22T14:56:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T14:56:32Z"}, "message": "sem_util.adb (Has_Preelaborable_Initialization): Revise checking of private types to allow for types derived from a private type...\n\n2008-08-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.adb (Has_Preelaborable_Initialization): Revise checking of\n\tprivate types to allow for types derived from a private type with\n\tpreelaborable initialization, but return False for a private extension\n\t(unless it has the pragma).\n\nFrom-SVN: r139480", "tree": {"sha": "83f84a1594bea8e85b85300ab13c06aed2a5164d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83f84a1594bea8e85b85300ab13c06aed2a5164d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f4e488138d23660082c4ecd744dd0ae7a5db028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4e488138d23660082c4ecd744dd0ae7a5db028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4e488138d23660082c4ecd744dd0ae7a5db028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4e488138d23660082c4ecd744dd0ae7a5db028/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b4b0a1ac996ea8e38ff857fb171f3cd1f6a45a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4b0a1ac996ea8e38ff857fb171f3cd1f6a45a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4b0a1ac996ea8e38ff857fb171f3cd1f6a45a5"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "83c3f4b21f2399795a4ca74e7833aa2d018f68ed", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4e488138d23660082c4ecd744dd0ae7a5db028/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4e488138d23660082c4ecd744dd0ae7a5db028/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9f4e488138d23660082c4ecd744dd0ae7a5db028", "patch": "@@ -4616,14 +4616,6 @@ package body Sem_Util is\n          return Has_Preelaborable_Initialization (Base_Type (E));\n       end if;\n \n-      --  Other private types never have preelaborable initialization\n-\n-      if Is_Private_Type (E) then\n-         return False;\n-      end if;\n-\n-      --  Here for all non-private view\n-\n       --  All elementary types have preelaborable initialization\n \n       if Is_Elementary_Type (E) then\n@@ -4643,6 +4635,13 @@ package body Sem_Util is\n \n       elsif Is_Derived_Type (E) then\n \n+         --  If the derived type is a private extension then it doesn't have\n+         --  preelaborable initialization.\n+\n+         if Ekind (Base_Type (E)) = E_Record_Type_With_Private then\n+            return False;\n+         end if;\n+\n          --  First check whether ancestor type has preelaborable initialization\n \n          Has_PE := Has_Preelaborable_Initialization (Etype (Base_Type (E)));\n@@ -4663,6 +4662,13 @@ package body Sem_Util is\n             Has_PE := False;\n          end if;\n \n+      --  Private types not derived from a type having preelaborable init and\n+      --  that are not marked with pragma Preelaborable_Initialization do not\n+      --  have preelaborable initialization.\n+\n+      elsif Is_Private_Type (E) then\n+         return False;\n+\n       --  Record type has PI if it is non private and all components have PI\n \n       elsif Is_Record_Type (E) then"}]}