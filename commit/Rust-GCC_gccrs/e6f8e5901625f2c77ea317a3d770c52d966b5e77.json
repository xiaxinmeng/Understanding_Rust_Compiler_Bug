{"sha": "e6f8e5901625f2c77ea317a3d770c52d966b5e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmOGU1OTAxNjI1ZjJjNzdlYTMxN2EzZDc3MGM1MmQ5NjZiNWU3Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-21T17:37:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-21T17:37:50Z"}, "message": "Support nil maps.\n\nFrom-SVN: r179054", "tree": {"sha": "72d064eacaba81463aeeb1607f050c5b0151b34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72d064eacaba81463aeeb1607f050c5b0151b34a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f8e5901625f2c77ea317a3d770c52d966b5e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f8e5901625f2c77ea317a3d770c52d966b5e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f8e5901625f2c77ea317a3d770c52d966b5e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f8e5901625f2c77ea317a3d770c52d966b5e77/comments", "author": null, "committer": null, "parents": [{"sha": "bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "a72942d385dc924fbf3c4ab05402dbfcbd80658c", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f8e5901625f2c77ea317a3d770c52d966b5e77/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f8e5901625f2c77ea317a3d770c52d966b5e77/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=e6f8e5901625f2c77ea317a3d770c52d966b5e77", "patch": "@@ -87,8 +87,8 @@ DEF_GO_RUNTIME(MAP_INDEX, \"__go_map_index\", P3(MAP, POINTER, BOOL),\n \t       R1(POINTER))\n \n // Look up a key in a map returning whether it is present.\n-DEF_GO_RUNTIME(MAPACCESS2, \"runtime.mapaccess2\", P3(MAP, POINTER, POINTER),\n-\t       R1(BOOL))\n+DEF_GO_RUNTIME(MAPACCESS2, \"runtime.mapaccess2\",\n+\t       P4(TYPE, MAP, POINTER, POINTER), R1(BOOL))\n \n // Tuple assignment to a map element.\n DEF_GO_RUNTIME(MAPASSIGN2, \"runtime.mapassign2\","}, {"sha": "8c1f168d950e767f6804df226f0b7d10847c5ea0", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f8e5901625f2c77ea317a3d770c52d966b5e77/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f8e5901625f2c77ea317a3d770c52d966b5e77/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=e6f8e5901625f2c77ea317a3d770c52d966b5e77", "patch": "@@ -1085,14 +1085,16 @@ Tuple_map_assignment_statement::do_lower(Gogo*, Named_object*,\n     Statement::make_temporary(Type::lookup_bool_type(), NULL, loc);\n   b->add_statement(present_temp);\n \n-  // present_temp = mapaccess2(MAP, &key_temp, &val_temp)\n+  // present_temp = mapaccess2(DESCRIPTOR, MAP, &key_temp, &val_temp)\n+  Expression* a1 = Expression::make_type_descriptor(map_type, loc);\n+  Expression* a2 = map_index->map();\n   Temporary_reference_expression* ref =\n     Expression::make_temporary_reference(key_temp, loc);\n-  Expression* a1 = Expression::make_unary(OPERATOR_AND, ref, loc);\n+  Expression* a3 = Expression::make_unary(OPERATOR_AND, ref, loc);\n   ref = Expression::make_temporary_reference(val_temp, loc);\n-  Expression* a2 = Expression::make_unary(OPERATOR_AND, ref, loc);\n-  Expression* call = Runtime::make_call(Runtime::MAPACCESS2, loc, 3,\n-\t\t\t\t\tmap_index->map(), a1, a2);\n+  Expression* a4 = Expression::make_unary(OPERATOR_AND, ref, loc);\n+  Expression* call = Runtime::make_call(Runtime::MAPACCESS2, loc, 4,\n+\t\t\t\t\ta1, a2, a3, a4);\n \n   ref = Expression::make_temporary_reference(present_temp, loc);\n   ref->set_is_lvalue();"}, {"sha": "9b19ff19df4eb344e9da4cf7b6acb99cd76d5b12", "filename": "libgo/runtime/go-map-delete.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fgo-map-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fgo-map-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-delete.c?ref=e6f8e5901625f2c77ea317a3d770c52d966b5e77", "patch": "@@ -9,6 +9,7 @@\n \n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n+#include \"go-panic.h\"\n #include \"map.h\"\n \n /* Delete the entry matching KEY from MAP.  */\n@@ -25,6 +26,9 @@ __go_map_delete (struct __go_map *map, const void *key)\n   size_t bucket_index;\n   void **pentry;\n \n+  if (map == NULL)\n+    __go_panic_msg (\"assignment to entry in nil map\");\n+\n   descriptor = map->__descriptor;\n \n   key_descriptor = descriptor->__map_descriptor->__key_type;"}, {"sha": "92a806868bc584f8f1843af2094d8be79d6d1b77", "filename": "libgo/runtime/go-map-index.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fgo-map-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fgo-map-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-index.c?ref=e6f8e5901625f2c77ea317a3d770c52d966b5e77", "patch": "@@ -9,6 +9,7 @@\n \n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n+#include \"go-panic.h\"\n #include \"map.h\"\n \n /* Rehash MAP to a larger size.  */\n@@ -85,6 +86,13 @@ __go_map_index (struct __go_map *map, const void *key, _Bool insert)\n   size_t bucket_index;\n   char *entry;\n \n+  if (map == NULL)\n+    {\n+      if (insert)\n+\t__go_panic_msg (\"assignment to entry in nil map\");\n+      return NULL;\n+    }\n+\n   descriptor = map->__descriptor;\n \n   key_descriptor = descriptor->__map_descriptor->__key_type;"}, {"sha": "e19bc96de6444489a09dff10d5d442bebb296233", "filename": "libgo/runtime/map.goc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fmap.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f8e5901625f2c77ea317a3d770c52d966b5e77/libgo%2Fruntime%2Fmap.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmap.goc?ref=e6f8e5901625f2c77ea317a3d770c52d966b5e77", "patch": "@@ -9,17 +9,18 @@ package runtime\n typedef unsigned char byte;\n typedef _Bool bool;\n \n-typedef struct __go_map hmap;\n+typedef struct __go_map_type MapType;\n+typedef struct __go_map Hmap;\n typedef struct __go_hash_iter hiter;\n \n /* Access a value in a map, returning a value and a presence indicator.  */\n \n-func mapaccess2(h *hmap, key *byte, val *byte) (present bool) {\n+func mapaccess2(t *MapType, h *Hmap, key *byte, val *byte) (present bool) {\n \tbyte *mapval;\n \tsize_t valsize;\n \n \tmapval = __go_map_index(h, key, 0);\n-\tvalsize = h->__descriptor->__map_descriptor->__val_type->__size;\n+\tvalsize = t->__val_type->__size;\n \tif (mapval == nil) {\n \t\t__builtin_memset(val, 0, valsize);\n \t\tpresent = 0;\n@@ -31,7 +32,7 @@ func mapaccess2(h *hmap, key *byte, val *byte) (present bool) {\n \n /* Optionally assign a value to a map (m[k] = v, p).  */\n \n-func mapassign2(h *hmap, key *byte, val *byte, p bool) {\n+func mapassign2(h *Hmap, key *byte, val *byte, p bool) {\n \tif (!p) {\n \t\t__go_map_delete(h, key);\n \t} else {\n@@ -46,7 +47,7 @@ func mapassign2(h *hmap, key *byte, val *byte, p bool) {\n \n /* Initialize a range over a map.  */\n \n-func mapiterinit(h *hmap, it *hiter) {\n+func mapiterinit(h *Hmap, it *hiter) {\n \t__go_mapiterinit(h, it);\n }\n "}]}