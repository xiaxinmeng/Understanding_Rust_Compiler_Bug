{"sha": "2212663f7002e0459021fec3ef226c07b10c2c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxMjY2M2Y3MDAyZTA0NTkwMjFmZWMzZWYyMjZjMDdiMTBjMmM1OA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dan@cgsoftware.com", "date": "2001-12-05T18:00:54Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2001-12-05T18:00:54Z"}, "message": "rs6000.h (enum rs6000_builtins): Add more altivec builtins.\n\n2001-12-05  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* config/rs6000/rs6000.h (enum rs6000_builtins): Add more altivec\n\tbuiltins.\n\n\t* config/rs6000/rs6000.md: Modeling of 7450 altivec changed to\n\tbetter reflect reality (change from Apple's tree).\n\tAdd more of altivec instructions.\n\tAdd ftruncv4sf2 pattern.\n\tRemove more unspecs (vector merge instructions, etc).\n\n\t* config/rs6000/rs6000.c (bdesc_3arg): New, for 3 argument altivec\n\tbuiltins.\n\t(bdesc_1arg): New, for 1 argument altivec builtins.\n\t(altivec_expand_builtin): Handle unary and ternary ops.\n\t(altivec_init_builtins): Ditto.\n\nFrom-SVN: r47681", "tree": {"sha": "181c43f00be375a94f5e9c546df956e7218e328d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/181c43f00be375a94f5e9c546df956e7218e328d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2212663f7002e0459021fec3ef226c07b10c2c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2212663f7002e0459021fec3ef226c07b10c2c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2212663f7002e0459021fec3ef226c07b10c2c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2212663f7002e0459021fec3ef226c07b10c2c58/comments", "author": null, "committer": null, "parents": [{"sha": "6663c3939e3fe3cc2475d62d7b13f1e12b3607e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6663c3939e3fe3cc2475d62d7b13f1e12b3607e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6663c3939e3fe3cc2475d62d7b13f1e12b3607e9"}], "stats": {"total": 741, "additions": 712, "deletions": 29}, "files": [{"sha": "1de656af3cbf4b9a0f5a002e52fe06b00458f871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2212663f7002e0459021fec3ef226c07b10c2c58", "patch": "@@ -1,3 +1,20 @@\n+2001-12-05  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* config/rs6000/rs6000.h (enum rs6000_builtins): Add more altivec\n+\tbuiltins. \n+\n+\t* config/rs6000/rs6000.md: Modeling of 7450 altivec changed to\n+\tbetter reflect reality (change from Apple's tree).\n+\tAdd more of altivec instructions.\n+\tAdd ftruncv4sf2 pattern.\n+\tRemove more unspecs (vector merge instructions, etc).\n+\n+\t* config/rs6000/rs6000.c (bdesc_3arg): New, for 3 argument altivec\n+\tbuiltins. \n+\t(bdesc_1arg): New, for 1 argument altivec builtins.\n+\t(altivec_expand_builtin): Handle unary and ternary ops.\n+\t(altivec_init_builtins): Ditto.\n+\n Wed Dec  5 09:33:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/alpha/vms.h (ADA_LONG_TYPE_SIZE): New macro."}, {"sha": "bbc02948d8e2a3406df13a3dccb54e01286f6fae", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 303, "deletions": 4, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2212663f7002e0459021fec3ef226c07b10c2c58", "patch": "@@ -161,8 +161,9 @@ static void rs6000_init_builtins PARAMS ((void));\n static void altivec_init_builtins PARAMS ((void));\n static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static rtx altivec_expand_builtin PARAMS ((tree, rtx));\n+static rtx altivec_expand_unop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n-\n+static rtx altivec_expand_ternop_builtin PARAMS ((enum insn_code, tree, rtx));\n static void rs6000_parse_abi_options PARAMS ((void));\n static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n@@ -3001,8 +3002,27 @@ struct builtin_description\n   const char *const name;\n   const enum rs6000_builtins code;\n };\n+/* Simple ternary operations: VECd = foo (VECa, VECb, VECc) */\n+static const struct builtin_description bdesc_3arg[] =\n+  {\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmaddfp, \"__builtin_altivec_vmaddfp\", ALTIVEC_BUILTIN_VMADDFP },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmhaddshs, \"__builtin_altivec_vmhaddshs\", ALTIVEC_BUILTIN_VMHADDSHS },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmhraddshs, \"__builtin_altivec_vmhraddshs\", ALTIVEC_BUILTIN_VMHRADDSHS },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmladduhm, \"__builtin_altivec_vmladduhm\", ALTIVEC_BUILTIN_VMLADDUHM},\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumubm, \"__builtin_altivec_vmsumubm\", ALTIVEC_BUILTIN_VMSUMUBM },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsummbm, \"__builtin_altivec_vmsummbm\", ALTIVEC_BUILTIN_VMSUMMBM },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhm, \"__builtin_altivec_vmsumuhm\", ALTIVEC_BUILTIN_VMSUMUHM },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshm, \"__builtin_altivec_vmsumshm\", ALTIVEC_BUILTIN_VMSUMSHM },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhs, \"__builtin_altivec_vmsumuhs\", ALTIVEC_BUILTIN_VMSUMUHS },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshs, \"__builtin_altivec_vmsumshs\", ALTIVEC_BUILTIN_VMSUMSHS },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vnmsubfp, \"__builtin_altivec_vnmsubfp\", ALTIVEC_BUILTIN_VNMSUBFP },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4sf, \"__builtin_altivec_vperm_4sf\", ALTIVEC_BUILTIN_VPERM_4SF },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_4si, \"__builtin_altivec_vperm_4si\", ALTIVEC_BUILTIN_VPERM_4SI },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_8hi, \"__builtin_altivec_vperm_8hi\", ALTIVEC_BUILTIN_VPERM_8HI },\n+    { MASK_ALTIVEC, CODE_FOR_altivec_vperm_16qi, \"__builtin_altivec_vperm_16qi\", ALTIVEC_BUILTIN_VPERM_16QI },\n+  };\n \n-/* Simple binary operatiors: VECc = foo (VECa, VECb).  */\n+/* Simple binary operations: VECc = foo (VECa, VECb).  */\n static const struct builtin_description bdesc_2arg[] =\n {\n   { MASK_ALTIVEC, CODE_FOR_addv16qi3, \"__builtin_altivec_vaddubm\", ALTIVEC_BUILTIN_VADDUBM },\n@@ -3086,6 +3106,9 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vslw, \"__builtin_altivec_vslw\", ALTIVEC_BUILTIN_VSLW },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsl, \"__builtin_altivec_vsl\", ALTIVEC_BUILTIN_VSL },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vslo, \"__builtin_altivec_vslo\", ALTIVEC_BUILTIN_VSLO },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vspltb, \"__builtin_altivec_vspltb\", ALTIVEC_BUILTIN_VSPLTB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vsplth, \"__builtin_altivec_vsplth\", ALTIVEC_BUILTIN_VSPLTH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vspltw, \"__builtin_altivec_vspltw\", ALTIVEC_BUILTIN_VSPLTW },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsrb, \"__builtin_altivec_vsrb\", ALTIVEC_BUILTIN_VSRB },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsrh, \"__builtin_altivec_vsrh\", ALTIVEC_BUILTIN_VSRH },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsrw, \"__builtin_altivec_vsrw\", ALTIVEC_BUILTIN_VSRW },\n@@ -3112,7 +3135,41 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n   { MASK_ALTIVEC, CODE_FOR_xorv4si3, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n };\n+/* Simple unary operations: VECb = foo (unsigned literal).  */\n+static const struct builtin_description bdesc_1arg[] =\n+{\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vspltisb, \"__builtin_altivec_vspltisb\", ALTIVEC_BUILTIN_VSPLTISB },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vspltish, \"__builtin_altivec_vspltish\", ALTIVEC_BUILTIN_VSPLTISH },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_vspltisw, \"__builtin_altivec_vspltisw\", ALTIVEC_BUILTIN_VSPLTISW },\n+};\n+\n+static rtx\n+altivec_expand_unop_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat;\n+  tree arg0 = TREE_VALUE (arglist);\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+\n+  if (! target\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n \n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  pat = GEN_FCN (icode) (target, op0);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n static rtx\n altivec_expand_binop_builtin (icode, arglist, target)\n      enum insn_code icode;\n@@ -3145,7 +3202,43 @@ altivec_expand_binop_builtin (icode, arglist, target)\n \n   return target;\n }\n+static rtx\n+altivec_expand_ternop_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat;\n+  tree arg0 = TREE_VALUE (arglist);\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+  enum machine_mode mode2 = insn_data[icode].operand[3].mode;\n+\n+  if (! target\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+  if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n+    op2 = copy_to_mode_reg (mode2, op2);\n \n+  pat = GEN_FCN (icode) (target, op0, op1, op2);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n static rtx\n altivec_expand_builtin (exp, target)\n      tree exp;\n@@ -3321,13 +3414,24 @@ altivec_expand_builtin (exp, target)\n       emit_insn (pat);\n       return NULL_RTX;\n     }\n+  /* Handle simple unary operations.  */\n+  d = (struct builtin_description *) bdesc_1arg;\n+  for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+    if (d->code == fcode)\n+      return altivec_expand_unop_builtin (d->icode, arglist, target);\n \n   /* Handle simple binary operations.  */\n   d = (struct builtin_description *) bdesc_2arg;\n   for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_binop_builtin (d->icode, arglist, target);\n \n+  /* Handle simple ternary operations.  */\n+  d = (struct builtin_description *) bdesc_3arg;\n+  for (i = 0; i < sizeof  (bdesc_3arg) / sizeof *d; i++, d++)\n+    if (d->code == fcode)\n+      return altivec_expand_ternop_builtin (d->icode, arglist, target);\n+\n   abort ();\n   return NULL_RTX;\n }\n@@ -3371,6 +3475,49 @@ altivec_init_builtins (void)\n   tree pshort_type_node = build_pointer_type (short_integer_type_node);\n   tree pchar_type_node = build_pointer_type (char_type_node);\n   tree pfloat_type_node = build_pointer_type (float_type_node);\n+  tree v4sf_ftype_v4sf_v4sf_v16qi\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V16QI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v4si_ftype_v4si_v4si_v16qi\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V16QI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v8hi_ftype_v8hi_v8hi_v16qi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V16QI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v16qi_ftype_v16qi_v16qi_v16qi\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V16QI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n+  /* V4SI foo (char) */\n+  tree v4si_ftype_char\n+    = build_function_type (V4SI_type_node,\n+\t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n+\n+  /* V8HI foo (char) */\n+  tree v8hi_ftype_char\n+    = build_function_type (V8HI_type_node,\n+\t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n+\n+  /* V16QI foo (char) */\n+  tree v16qi_ftype_char\n+    = build_function_type (V16QI_type_node,\n+\t\t           tree_cons (NULL_TREE, char_type_node, endlink));\n \n   /* V4SI foo (int *).  */\n   tree v4si_ftype_pint\n@@ -3419,25 +3566,70 @@ altivec_init_builtins (void)\n \t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n \t\t\t\t\t\t endlink)));\n+ /* These are really for the unsigned 5 bit literals */ \n+  tree v4si_ftype_v4si_char\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, char_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v8hi_ftype_v8hi_char\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, char_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v16qi_ftype_v16qi_char\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, char_type_node,\n+\t\t\t\t\t\t endlink)));\n \n   tree v4sf_ftype_v4sf_v4sf\n     = build_function_type (V4SF_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree v4sf_ftype_v4sf_v4sf_v4sf\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V4SF_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n   tree v8hi_ftype_v8hi_v8hi\n     = build_function_type (V8HI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n \t\t\t\t\t\t endlink)));\n-\n+  tree v8hi_ftype_v8hi_v8hi_v8hi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE, \n+\t\t\t\t\t\t\t    V8HI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+ tree v4si_ftype_v8hi_v8hi_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    V4SI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+ tree v4si_ftype_v16qi_v16qi_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    V4SI_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  \n   tree v16qi_ftype_v16qi_v16qi\n     = build_function_type (V16QI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n \t\t\t\t\t\t endlink)));\n-\n+  \n   tree v4si_ftype_v4sf_v4sf\n     = build_function_type (V4SI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n@@ -3513,6 +3705,77 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n \n+  /* Add the simple ternary operators. */\n+  d = (struct builtin_description *) bdesc_3arg;\n+  for (i = 0; i < sizeof (bdesc_3arg) / sizeof *d; i++, d++)\n+    {\n+      \n+      enum machine_mode mode0, mode1, mode2, mode3;\n+      tree type;\n+\n+      if (d->name == 0)\n+\tcontinue;\n+      \n+      mode0 = insn_data[d->icode].operand[0].mode;\n+      mode1 = insn_data[d->icode].operand[1].mode;\n+      mode2 = insn_data[d->icode].operand[2].mode;\n+      mode3 = insn_data[d->icode].operand[3].mode;\n+      \n+      /* When all four are of the same mode.  */\n+      if (mode0 == mode1 && mode1 == mode2 && mode2 == mode3)\n+\t{\n+\t  switch (mode0)\n+\t    {\n+\t    case V4SFmode:\n+\t      type = v4sf_ftype_v4sf_v4sf_v4sf;\n+\t      break;\n+\t    case V8HImode:\n+\t      type = v8hi_ftype_v8hi_v8hi_v8hi;\n+\t      break;\t      \n+\t    case V16QImode:\n+\t      type = v16qi_ftype_v16qi_v16qi_v16qi;\n+\t      break;\t      \n+\t    default:\n+\t      abort();\t      \n+\t    }\n+\t}\n+      else if (mode0 == mode1 && mode1 == mode2 && mode3 == V16QImode)\n+        {\n+\t  switch (mode0)\n+\t    {\n+\t    case V4SImode:\n+\t      type = v4si_ftype_v4si_v4si_v16qi;\n+\t      break;\n+\t    case V4SFmode:\n+\t      type = v4sf_ftype_v4sf_v4sf_v16qi;\n+\t      break;\n+\t    case V8HImode:\n+\t      type = v8hi_ftype_v8hi_v8hi_v16qi;\n+\t      break;\t      \n+\t    case V16QImode:\n+\t      type = v16qi_ftype_v16qi_v16qi_v16qi;\n+\t      break;\t      \n+\t    default:\n+\t      abort();\t      \n+\t    }\n+\t}\n+      else if (mode0 == V4SImode && mode1 == V16QImode && mode2 == V16QImode \n+\t       && mode3 == V4SImode)\n+\t{\n+\t  type = v4si_ftype_v16qi_v16qi_v4si;\n+\t}\n+      else if (mode0 == V4SImode && mode1 == V8HImode && mode2 == V8HImode \n+\t       && mode3 == V4SImode)\n+\t{\n+\t  type = v4si_ftype_v8hi_v8hi_v4si;\n+\t}\n+      \n+      else\n+\tabort ();\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+\n   /* Add the simple binary operators.  */\n   d = (struct builtin_description *) bdesc_2arg;\n   for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n@@ -3578,6 +3841,18 @@ altivec_init_builtins (void)\n       /* vint, vshort, vint.  */\n       else if (mode0 == V4SImode && mode1 == V8HImode && mode2 == V4SImode)\n \ttype = v4si_ftype_v8hi_v4si;\n+      \n+      /* vint, vint, 5 bit literal.  */\n+      else if (mode0 == V4SImode && mode1 == V4SImode && mode2 == QImode)\n+\ttype = v4si_ftype_v4si_char;\n+      \n+      /* vshort, vshort, 5 bit literal.  */\n+      else if (mode0 == V8HImode && mode1 == V8HImode && mode2 == QImode)\n+\ttype = v8hi_ftype_v8hi_char;\n+      \n+      /* vchar, vchar, 5 bit literal.  */\n+      else if (mode0 == V16QImode && mode1 == V16QImode && mode2 == QImode)\n+\ttype = v16qi_ftype_v16qi_char;\n \n       /* fixme: aldyh */\n       /* int, x, x.  */\n@@ -3605,6 +3880,30 @@ altivec_init_builtins (void)\n       else\n \tabort ();\n \n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+  /* Add the simple unary operators.  */\n+  d = (struct builtin_description *) bdesc_1arg;\n+  for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+    {\n+      enum machine_mode mode0, mode1;\n+      tree type;\n+\n+      if (d->name == 0)\n+\tcontinue;\n+      \n+      mode0 = insn_data[d->icode].operand[0].mode;\n+      mode1 = insn_data[d->icode].operand[1].mode;\n+\n+      if (mode0 == V4SImode && mode1 == QImode)\n+        type = v4si_ftype_char;\n+      else if (mode0 == V8HImode && mode1 == QImode)\n+        type = v8hi_ftype_char;\n+      else if (mode0 == V16QImode && mode1 == QImode)\n+        type = v16qi_ftype_char;\n+      else\n+\tabort ();\n+\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n }"}, {"sha": "50137ee588a77301c21a20a779d400d4e35618f6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2212663f7002e0459021fec3ef226c07b10c2c58", "patch": "@@ -2925,19 +2925,29 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VCMPGTUW,\n   ALTIVEC_BUILTIN_VCMPGTSW,\n   ALTIVEC_BUILTIN_VCMPGTFP,\n+  ALTIVEC_BUILTIN_VMADDFP,\n   ALTIVEC_BUILTIN_VMAXUB,\n   ALTIVEC_BUILTIN_VMAXSB,\n   ALTIVEC_BUILTIN_VMAXUH,\n   ALTIVEC_BUILTIN_VMAXSH,\n   ALTIVEC_BUILTIN_VMAXUW,\n   ALTIVEC_BUILTIN_VMAXSW,\n   ALTIVEC_BUILTIN_VMAXFP,\n+  ALTIVEC_BUILTIN_VMHADDSHS,\n+  ALTIVEC_BUILTIN_VMHRADDSHS,\n+  ALTIVEC_BUILTIN_VMLADDUHM,\n   ALTIVEC_BUILTIN_VMRGHB,\n   ALTIVEC_BUILTIN_VMRGHH,\n   ALTIVEC_BUILTIN_VMRGHW,\n   ALTIVEC_BUILTIN_VMRGLB,\n   ALTIVEC_BUILTIN_VMRGLH,\n   ALTIVEC_BUILTIN_VMRGLW,\n+  ALTIVEC_BUILTIN_VMSUMUBM,\n+  ALTIVEC_BUILTIN_VMSUMMBM,\n+  ALTIVEC_BUILTIN_VMSUMUHM,\n+  ALTIVEC_BUILTIN_VMSUMSHM,\n+  ALTIVEC_BUILTIN_VMSUMUHS,\n+  ALTIVEC_BUILTIN_VMSUMSHS,\n   ALTIVEC_BUILTIN_VMINUB,\n   ALTIVEC_BUILTIN_VMINSB,\n   ALTIVEC_BUILTIN_VMINUH,\n@@ -2953,8 +2963,13 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VMULOSB,\n   ALTIVEC_BUILTIN_VMULOUH,\n   ALTIVEC_BUILTIN_VMULOSH,\n+  ALTIVEC_BUILTIN_VNMSUBFP,\n   ALTIVEC_BUILTIN_VNOR,\n   ALTIVEC_BUILTIN_VOR,\n+  ALTIVEC_BUILTIN_VPERM_4SI,\n+  ALTIVEC_BUILTIN_VPERM_4SF,\n+  ALTIVEC_BUILTIN_VPERM_8HI,\n+  ALTIVEC_BUILTIN_VPERM_16QI,\n   ALTIVEC_BUILTIN_VPKUHUM,\n   ALTIVEC_BUILTIN_VPKUWUM,\n   ALTIVEC_BUILTIN_VPKPX,\n@@ -2974,6 +2989,12 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VSLW,\n   ALTIVEC_BUILTIN_VSL,\n   ALTIVEC_BUILTIN_VSLO,\n+  ALTIVEC_BUILTIN_VSPLTB,\n+  ALTIVEC_BUILTIN_VSPLTH,\n+  ALTIVEC_BUILTIN_VSPLTW,\n+  ALTIVEC_BUILTIN_VSPLTISB,\n+  ALTIVEC_BUILTIN_VSPLTISH,\n+  ALTIVEC_BUILTIN_VSPLTISW,\n   ALTIVEC_BUILTIN_VSRB,\n   ALTIVEC_BUILTIN_VSRH,\n   ALTIVEC_BUILTIN_VSRW,"}, {"sha": "ed42ae1ccf2a3c72a58169ba0b47e23eb3b336d0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 371, "deletions": 25, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2212663f7002e0459021fec3ef226c07b10c2c58/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2212663f7002e0459021fec3ef226c07b10c2c58", "patch": "@@ -297,7 +297,10 @@\n \n ; PPC7450 has 3 integer units (for most integer insns) and one mul/div\n ; unit, which also does CR-logical insns and move to/from SPR.\n-\n+; It also has 4 vector units, one for each type of vector instruction.\n+; However, we can only dispatch 2 instructions per cycle. \n+; We model this as saying that dispatching two of the same type of instruction\n+; in a row incurs a single cycle delay.\n (define_function_unit \"iu3\" 3 0\n   (and (eq_attr \"type\" \"integer\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n@@ -317,26 +320,46 @@\n   (and (eq_attr \"type\" \"cr_logical\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   1 1)\n-(define_function_unit \"viu1\" 1 0\n+(define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecsimple\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  1 1)\n-(define_function_unit \"viu2\" 1 0\n+  1 2 [(eq_attr \"type\" \"vecsimple\")])\n+(define_function_unit \"vec_alu2\" 2 0\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  1 1 [(eq_attr \"type\" \"!vecsimple\")])\n+(define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccomplex\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  4 1)\n-(define_function_unit \"vfpu\" 1 0\n+  4 2 [(eq_attr \"type\" \"veccomplex\")])\n+(define_function_unit \"vec_alu2\" 2 0\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  4 1 [(eq_attr \"type\" \"!veccomplex\")])\n+(define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccmp\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  2 1)\n-(define_function_unit \"vfpu\" 1 0\n+  2 2 [(eq_attr \"type\" \"veccmp\")])\n+(define_function_unit \"vec_alu2\" 2 0\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  2 1 [(eq_attr \"type\" \"!veccmp\")])\n+(define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecfloat\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  4 1)\n-(define_function_unit \"vpu\" 1 0\n+  4 2 [(eq_attr \"type\" \"vecfloat\")])\n+(define_function_unit \"vec_alu2\" 2 0\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  4 1 [(eq_attr \"type\" \"!vecfloat\")])\n+(define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecperm\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n-  2 1)\n+  2 2 [(eq_attr \"type\" \"vecperm\")])\n+(define_function_unit \"vec_alu2\" 2 0\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  2 1 [(eq_attr \"type\" \"!vecperm\")])\n \n ; PPC750 has two integer units: a primary one which can perform all\n ; operations and a secondary one which is fed in lock step with the first\n@@ -9143,6 +9166,59 @@\n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_quad_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n   \"stfq%U0%X0 %1,%0\")\n+;; APPLE LOCAL peephole2 to eliminate unneeded computation of FP const\n+;; address in register.  If lo part of address is reused (i.e. reg0\n+;; is not dead), make the change in the fp load anyway (for scheduling)\n+;; but we switch the instructions in case op0==op1.\n+;; (define_peephole2\n+;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n+;; \t\t   (match_operand:SI 2 \"\" \"\")))\n+;;    (set (match_operand:DF 3 \"gpc_reg_operand\" \"\")\n+;; \t(mem:DF (match_dup 0)))]\n+;;   \"TARGET_HARD_FLOAT \n+;;     && peep2_reg_dead_p(2, operands[0])\n+;;     && FP_REGNO_P (REGNO (operands[3]))\"\n+;;   [(set (match_dup 3) (mem:DF (lo_sum:SI (match_dup 1) (match_dup 2))))]\n+;;   \"\")\n+\n+;; (define_peephole2\n+;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n+;; \t\t   (match_operand:SI 2 \"\" \"\")))\n+;;    (set (match_operand:DF 3 \"gpc_reg_operand\" \"\")\n+;; \t(mem:DF (match_dup 0)))]\n+;;   \"TARGET_HARD_FLOAT \n+;;     && !peep2_reg_dead_p(2, operands[0])\n+;;     && FP_REGNO_P (REGNO (operands[3]))\"\n+;;   [(set (match_dup 3) (mem:DF (lo_sum:SI (match_dup 1) (match_dup 2))))\n+;;    (set (match_dup 0) (lo_sum:SI (match_dup 1) (match_dup 2)))]\n+;;   \"\")\n+\n+;; (define_peephole2\n+;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n+;; \t\t   (match_operand:SI 2 \"\" \"\")))\n+;;    (set (match_operand:SF 3 \"gpc_reg_operand\" \"\")\n+;; \t(mem:SF (match_dup 0)))]\n+;;   \"TARGET_HARD_FLOAT \n+;;     && peep2_reg_dead_p(2, operands[0])\n+;;     && FP_REGNO_P (REGNO (operands[3]))\"\n+;;   [(set (match_dup 3) (mem:SF (lo_sum:SI (match_dup 1) (match_dup 2))))]\n+;;   \"\")\n+\n+;; (define_peephole2\n+;;   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+;; \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\") \n+;; \t\t   (match_operand:SI 2 \"\" \"\")))\n+;;    (set (match_operand:SF 3 \"gpc_reg_operand\" \"\")\n+;; \t(mem:SF (match_dup 0)))]\n+;;   \"TARGET_HARD_FLOAT \n+;;     && !peep2_reg_dead_p(2, operands[0])\n+;;     && FP_REGNO_P (REGNO (operands[3]))\"\n+;;   [(set (match_dup 3) (mem:SF (lo_sum:SI (match_dup 1) (match_dup 2))))\n+;;    (set (match_dup 0) (lo_sum:SI (match_dup 1) (match_dup 2)))]\n+;;   \"\")\n \f\n ;; Next come insns related to the calling sequence.\n ;;\n@@ -13826,8 +13902,8 @@\n \n (define_insn \"altivec_vandc\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 43))]\n+        (and:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n+                  (not:V4SI (match_operand:V4SI 2 \"register_operand\" \"v\"))))]\n   \"TARGET_ALTIVEC\"\n   \"vandc %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n@@ -13984,6 +14060,94 @@\n   \"vcmpgtfp %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n+;; Fused multiply add\n+(define_insn \"altivec_vmaddfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(plus:V4SF (mult:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\"))\n+\t  \t   (match_operand:V4SF 3 \"register_operand\" \"v\")))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmaddfp %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+;; The unspec here is a vec splat of 0. We do multiply as a fused\n+;; multiply-add with an add of a 0 vector. \n+\n+(define_expand \"mulv4sf3\"\n+  [(set (match_dup 3) (unspec:V4SF [(const_int 0)] 142))\n+   (set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (plus:V4SF (mult:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t                      (match_operand:V4SF 2 \"register_operand\" \"v\"))\n+\t\t   (match_dup 3)))]\n+  \"TARGET_ALTIVEC && TARGET_FUSED_MADD\"\n+  \"\n+{ operands[3] = gen_reg_rtx (V4SFmode); }\")\n+\n+;; Fused multiply subtract \n+(define_insn \"altivec_vnmsubfp\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(minus:V4SF (mult:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t\t       (match_operand:V4SF 2 \"register_operand\" \"v\"))\n+\t  \t    (match_operand:V4SF 3 \"register_operand\" \"v\")))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmmsubfp %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+\n+(define_insn \"altivec_vmsumubm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 65))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumubm %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"altivec_vmsummbm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 66))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumubm %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"altivec_vmsumuhm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 67))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumuhm %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"altivec_vmsumshm\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 68))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumshm %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"altivec_vmsumuhs\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 69))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumuhs %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+(define_insn \"altivec_vmsumshs\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 3 \"register_operand\" \"v\")] 70))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmsumshs %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n (define_insn \"umaxv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n         (umax:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n@@ -14040,50 +14204,137 @@\n   \"vmaxfp %0,%1,%2\"\n   [(set_attr \"type\" \"veccmp\")])\n \n+(define_insn \"altivec_vmhaddshs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 3 \"register_operand\" \"v\")] 71))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmhaddshs %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+(define_insn \"altivec_vmhraddshs\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 3 \"register_operand\" \"v\")] 72))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmhraddshs %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+(define_insn \"altivec_vmladduhm\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 3 \"register_operand\" \"v\")] 73))]\n+  \"TARGET_ALTIVEC\"\n+  \"vmladduhm %0, %1, %2, %3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n (define_insn \"altivec_vmrghb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 70))]\n+        (vec_merge:V16QI (vec_select:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t\t\t\t   (parallel [(const_int 8)\n+\t\t\t\t\t   \t      (const_int 9)\n+\t\t\t\t\t   \t      (const_int 10)\n+\t\t\t\t\t   \t      (const_int 11)\n+\t\t\t\t\t   \t      (const_int 12)\n+\t\t\t\t\t   \t      (const_int 13)\n+\t\t\t\t\t\t      (const_int 14)\n+\t\t\t\t\t\t      (const_int 15)\n+\t\t\t\t\t   \t      (const_int 0)\n+\t\t\t\t\t   \t      (const_int 1)\n+\t\t\t\t\t   \t      (const_int 2)\n+\t\t\t\t\t   \t      (const_int 3)\n+\t\t\t\t\t   \t      (const_int 4)\n+\t\t\t\t\t   \t      (const_int 5)\n+\t\t\t\t\t   \t      (const_int 6)\n+\t\t\t\t\t\t      (const_int 7)]))\n+                      (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t      (const_int 255)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrghh\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 71))]\n+        (vec_merge:V8HI (vec_select:V8HI (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t\t\t\t   (parallel [(const_int 4)\n+\t\t\t\t\t   \t      (const_int 5)\n+\t\t\t\t\t   \t      (const_int 6)\n+\t\t\t\t\t   \t      (const_int 7)\n+\t\t\t\t\t   \t      (const_int 0)\n+\t\t\t\t\t   \t      (const_int 1)\n+\t\t\t\t\t   \t      (const_int 2)\n+\t\t\t\t\t   \t      (const_int 3)]))\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+\t\t      (const_int 15)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrghw\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 72))]\n+        (vec_merge:V4SI (vec_select:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t\t\t\t\t (parallel [(const_int 2)\n+\t\t\t\t\t \t    (const_int 3)\n+\t\t\t\t\t\t    (const_int 0)\n+\t\t\t\t\t\t    (const_int 1)]))\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")\n+\t\t      (const_int 12)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrghw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglb\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                       (match_operand:V16QI 2 \"register_operand\" \"v\")] 73))]\n+        (vec_merge:V16QI (vec_select:V16QI (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t\t\t\t   (parallel [(const_int 8)\n+\t\t\t\t\t   \t      (const_int 9)\n+\t\t\t\t\t   \t      (const_int 10)\n+\t\t\t\t\t   \t      (const_int 11)\n+\t\t\t\t\t   \t      (const_int 12)\n+\t\t\t\t\t   \t      (const_int 13)\n+\t\t\t\t\t\t      (const_int 14)\n+\t\t\t\t\t\t      (const_int 15)\n+\t\t\t\t\t   \t      (const_int 0)\n+\t\t\t\t\t   \t      (const_int 1)\n+\t\t\t\t\t   \t      (const_int 2)\n+\t\t\t\t\t   \t      (const_int 3)\n+\t\t\t\t\t   \t      (const_int 4)\n+\t\t\t\t\t   \t      (const_int 5)\n+\t\t\t\t\t   \t      (const_int 6)\n+\t\t\t\t\t\t      (const_int 7)]))\n+                      (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t      (const_int 255)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglh\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 74))]\n+        (vec_merge:V8HI (vec_select:V8HI (match_operand:V8HI 2 \"register_operand\" \"v\")\n+\t\t\t\t\t   (parallel [(const_int 4)\n+\t\t\t\t\t   \t      (const_int 5)\n+\t\t\t\t\t   \t      (const_int 6)\n+\t\t\t\t\t   \t      (const_int 7)\n+\t\t\t\t\t   \t      (const_int 0)\n+\t\t\t\t\t   \t      (const_int 1)\n+\t\t\t\t\t   \t      (const_int 2)\n+\t\t\t\t\t   \t      (const_int 3)]))\n+                      (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (const_int 15)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vmrglw\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 75))]\n+        (vec_merge:V4SI (vec_select:V4SI (match_operand:V4SI 2 \"register_operand\" \"v\")\n+\t\t\t\t\t (parallel [(const_int 2)\n+\t\t\t\t\t \t    (const_int 3)\n+\t\t\t\t\t\t    (const_int 0)\n+\t\t\t\t\t\t    (const_int 1)]))\n+                      (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t\t      (const_int 12)))]\n   \"TARGET_ALTIVEC\"\n   \"vmrglw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n@@ -14575,3 +14826,98 @@\n   \"TARGET_ALTIVEC\"\n   \"vxor %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_vspltb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:QI 2 \"immediate_operand\" \"i\")] 136))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltb %0,%1,%2\"\n+  [(set_attr \"type\" \"vecperm\")])\n+(define_insn \"altivec_vsplth\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:QI 2 \"immediate_operand\" \"i\")] 137))]\n+  \"TARGET_ALTIVEC\"\n+  \"vsplth %0,%1,%2\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vspltw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:QI 2 \"immediate_operand\" \"i\")] 138))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltw %0,%1,%2\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vspltisb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 139))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %0, %1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+\n+(define_insn \"altivec_vspltish\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 140))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltish %0, %1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_vspltisw\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:QI 1 \"immediate_operand\" \"i\")] 141))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisw %0, %1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (unspec:V4SF [(match_operand:QI 1 \"immediate_operand\" \"i\")] 142))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisw %0, %1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"ftruncv4sf2\"\n+   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+   \t (fix:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")))]\n+   \"TARGET_ALTIVEC\"\n+   \"vrfiz %0, %1\"\n+   [(set_attr \"type\" \"vecfloat\")])\n+\n+(define_insn \"altivec_vperm_4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")] 144))]\n+  \"TARGET_ALTIVEC\"\n+  \"vperm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vperm_4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")] 145))]\n+  \"TARGET_ALTIVEC\"\n+  \"vperm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vperm_8hi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")] 146))]\n+  \"TARGET_ALTIVEC\"\n+  \"vperm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vperm_16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"v\")] 147))]\n+  \"TARGET_ALTIVEC\"\n+  \"vperm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"vecperm\")])"}]}