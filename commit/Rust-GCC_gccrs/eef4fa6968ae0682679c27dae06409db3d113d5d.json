{"sha": "eef4fa6968ae0682679c27dae06409db3d113d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmNGZhNjk2OGFlMDY4MjY3OWMyN2RhZTA2NDA5ZGIzZDExM2Q1ZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-03T17:35:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-03T17:35:26Z"}, "message": "c++: mark_used and ADL with template-id [PR100344]\n\nMy r11-295 patch for PR68942 didn't consider that the callee of an\nADL-eligible function call can be a TEMPLATE_ID_EXPR, and we don't want\nto disable mark_used when substituting into the template arguments of\nthis TEMPLATE_ID_EXPR because the arguments are clearly used regardless\nof the outcome of ADL.  In the first testcase below, this oversight\ncauses us to trip over the assert in build_call_a for the call to\nfind_index<int> because the function no longer had its TREE_USED bit set\nfrom mark_used.\n\nSo this patch restricts the original fix to disable mark_used only when\nthe callee is a FUNCTION_DECL, which seems to be the only case that\nmatters for PR68942.  For instance, in the second testcase below we\nalready don't mark_used the deleted function specialization even before\nr11-295.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/68942\n\tPR c++/100344\n\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: Set tf_conv\n\tonly when the callee is a FUNCTION_DECL.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/68942\n\tPR c++/100344\n\t* g++.dg/template/call8.C: New test.\n\t* g++.dg/template/koenig12a.C: New test.", "tree": {"sha": "68238e6b43a1003fd2966826295cf68185047fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68238e6b43a1003fd2966826295cf68185047fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eef4fa6968ae0682679c27dae06409db3d113d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef4fa6968ae0682679c27dae06409db3d113d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef4fa6968ae0682679c27dae06409db3d113d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef4fa6968ae0682679c27dae06409db3d113d5d/comments", "author": null, "committer": null, "parents": [{"sha": "34b51ea7184ebc651b39037dfea14f08722314b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b51ea7184ebc651b39037dfea14f08722314b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34b51ea7184ebc651b39037dfea14f08722314b1"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "36a8cb5df5d36337c18e1547e775b747f59a087f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eef4fa6968ae0682679c27dae06409db3d113d5d", "patch": "@@ -20227,11 +20227,13 @@ tsubst_copy_and_build (tree t,\n \t      /* Avoid error about taking the address of a constructor.  */\n \t      function = TREE_OPERAND (function, 0);\n \n-\t    /* When KOENIG_P, we don't want to mark_used the callee before\n-\t       augmenting the overload set via ADL, so during this initial\n-\t       substitution we disable mark_used by setting tf_conv (68942).  */\n-\t    function = tsubst_copy_and_build (function, args,\n-\t\t\t\t\t      complain | (koenig_p * tf_conv),\n+\t    tsubst_flags_t subcomplain = complain;\n+\t    if (koenig_p && TREE_CODE (function) == FUNCTION_DECL)\n+\t      /* When KOENIG_P, we don't want to mark_used the callee before\n+\t\t augmenting the overload set via ADL, so during this initial\n+\t\t substitution we disable mark_used by setting tf_conv (68942).  */\n+\t      subcomplain |= tf_conv;\n+\t    function = tsubst_copy_and_build (function, args, subcomplain,\n \t\t\t\t\t      in_decl,\n \t\t\t\t\t      !qualified_p,\n \t\t\t\t\t      integral_constant_expression_p);"}, {"sha": "04609dd508d14203af784b8e06cb1c9285291827", "filename": "gcc/testsuite/g++.dg/template/call8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall8.C?ref=eef4fa6968ae0682679c27dae06409db3d113d5d", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/100344\n+// { dg-do compile { target c++11 } }\n+\n+template <class> constexpr int find_index() { return 1; }\n+\n+template <int, class T> void foo(T);\n+\n+template <class T> void get(T v) {\n+  foo<find_index<T>()>(v);\n+}\n+\n+int main() {\n+  get(0);\n+}"}, {"sha": "96b98b9403f77cee02de2cff135a3ec6660ab474", "filename": "gcc/testsuite/g++.dg/template/koenig12a.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig12a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4fa6968ae0682679c27dae06409db3d113d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig12a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig12a.C?ref=eef4fa6968ae0682679c27dae06409db3d113d5d", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/68942\n+// { dg-do compile { target c++11 } }\n+// A template-id analogue of koenig12.C.\n+\n+template <int> void foo(...) = delete;\n+\n+template <class T> void lookup(T t) { foo<0>(t); }\n+\n+namespace N {\n+ struct A { };\n+ template <int> int foo(A);\n+}\n+\n+int main() {\n+  lookup(N::A{});\n+}"}]}