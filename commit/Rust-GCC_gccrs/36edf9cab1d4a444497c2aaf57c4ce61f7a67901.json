{"sha": "36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlZGY5Y2FiMWQ0YTQ0NDQ5N2MyYWFmNTdjNGNlNjFmN2E2NzkwMQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-10-04T20:22:11Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-10-04T20:22:11Z"}, "message": "Improve _GLIBCXX_DEBUG safe iterator range size computation.\n\n\t* include/debug/forward_list\n\t(_Sequence_traits<__debug::forward_list<>>::_S_size): Returns __dp_sign\n\tdistance when not empty.\n\t* include/debug/list (_Sequence_traits<__debug::list<>>::_S_size):\n\tLikewise.\n\t* include/debug/helper_functions.h (__dp_sign_max_size): New\n\t_Distance_precision enum entry.\n\t(__valid_range_aux(_IIte, _IIte, _Distance_traits<>::__type,\n\t__false_type)): Adapt.\n\t* include/debug/safe_iterator.tcc\n\t(_Safe_iterator<>::_M_get_distance_to(const _Safe_iterator&)): Review\n\tdistance computation.\n\nFrom-SVN: r276600", "tree": {"sha": "a88be7904712db89fc6c702cc4caf00bb41b371d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a88be7904712db89fc6c702cc4caf00bb41b371d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/comments", "author": null, "committer": null, "parents": [{"sha": "9af0d5ef3b14a9b3e4b0cb6aaaaba44ea722fb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af0d5ef3b14a9b3e4b0cb6aaaaba44ea722fb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af0d5ef3b14a9b3e4b0cb6aaaaba44ea722fb06"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "26d37d7effb43bbae6ddbb62870bc35c9d5be422", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "patch": "@@ -1,3 +1,18 @@\n+2019-10-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/forward_list\n+\t(_Sequence_traits<__debug::forward_list<>>::_S_size): Returns __dp_sign\n+\tdistance when not empty.\n+\t* include/debug/list (_Sequence_traits<__debug::list<>>::_S_size):\n+\tLikewise.\n+\t* include/debug/helper_functions.h (__dp_sign_max_size): New\n+\t_Distance_precision enum entry.\n+\t(__valid_range_aux(_IIte, _IIte, _Distance_traits<>::__type,\n+\t__false_type)): Adapt.\n+\t* include/debug/safe_iterator.tcc\n+\t(_Safe_iterator<>::_M_get_distance_to(const _Safe_iterator&)): Review\n+\tdistance computation.\n+\n 2019-10-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81091"}, {"sha": "f1756ddec9d2b089885d531def5d3a831d35279f", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "patch": "@@ -911,7 +911,7 @@ namespace __gnu_debug\n       _S_size(const std::__debug::forward_list<_Tp, _Alloc>& __seq)\n       {\n \treturn __seq.empty()\n-\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_equality);\n+\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_sign);\n       }\n     };\n "}, {"sha": "5a920bb9a6f3a329f05a795b35d937ea94c06295", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "patch": "@@ -50,10 +50,11 @@ namespace __gnu_debug\n    */\n   enum _Distance_precision\n     {\n-      __dp_none,\t// Not even an iterator type\n-      __dp_equality,\t//< Can compare iterator equality, only\n-      __dp_sign,\t//< Can determine equality and ordering\n-      __dp_exact\t//< Can determine distance precisely\n+      __dp_none,\t\t// Not even an iterator type\n+      __dp_equality,\t\t//< Can compare iterator equality, only\n+      __dp_sign,\t\t//< Can determine equality and ordering\n+      __dp_sign_max_size,\t//< __dp_sign and gives max range size\n+      __dp_exact\t\t//< Can determine distance precisely\n     };\n \n   template<typename _Iterator,\n@@ -176,6 +177,7 @@ namespace __gnu_debug\n \t    return true;\n \t  break;\n \tcase __dp_sign:\n+\tcase __dp_sign_max_size:\n \tcase __dp_exact:\n \t  return __dist.first >= 0;\n \t}"}, {"sha": "140546a633edf516970beb70ea553f879cdcd871", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "patch": "@@ -916,7 +916,7 @@ namespace __gnu_debug\n       _S_size(const std::__debug::list<_Tp, _Alloc>& __seq)\n       {\n \treturn __seq.empty()\n-\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_equality);\n+\t  ? std::make_pair(0, __dp_exact) : std::make_pair(1, __dp_sign);\n       }\n     };\n #endif"}, {"sha": "1750bc473d223f4396f1d3f646c4cdf29784fc85", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36edf9cab1d4a444497c2aaf57c4ce61f7a67901/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=36edf9cab1d4a444497c2aaf57c4ce61f7a67901", "patch": "@@ -113,18 +113,22 @@ namespace __gnu_debug\n     _Safe_iterator<_Iterator, _Sequence, _Category>::\n     _M_get_distance_to(const _Safe_iterator& __rhs) const\n     {\n-      typedef typename _Distance_traits<_Iterator>::__type _Diff;\n+      typedef typename _Distance_traits<_Iterator>::__type _Dist;\n       typedef _Sequence_traits<_Sequence> _SeqTraits;\n \n-      if (this->base() == __rhs.base())\n-\treturn std::make_pair(0, __dp_exact);\n+      _Dist __base_dist = __get_distance(this->base(), __rhs.base());\n+      if (__base_dist.second == __dp_exact)\n+\treturn __base_dist;\n \n+      _Dist __seq_dist = _SeqTraits::_S_size(*this->_M_get_sequence());\n       if (this->_M_is_before_begin())\n \t{\n \t  if (__rhs._M_is_begin())\n \t    return std::make_pair(1, __dp_exact);\n \n-\t  return std::make_pair(1, __dp_sign);\n+\t  return __seq_dist.second == __dp_exact\n+\t    ? std::make_pair(__seq_dist.first + 1, __dp_exact)\n+\t    : __seq_dist;\n \t}\n \n       if (this->_M_is_begin())\n@@ -133,30 +137,42 @@ namespace __gnu_debug\n \t    return std::make_pair(-1, __dp_exact);\n \n \t  if (__rhs._M_is_end())\n-\t    return _SeqTraits::_S_size(*this->_M_get_sequence());\n+\t    return __seq_dist;\n \n-\t  return std::make_pair(1, __dp_sign);\n+\t  return std::make_pair(__seq_dist.first,\n+\t\t\t\t__seq_dist.second == __dp_exact\n+\t\t\t\t? __dp_sign_max_size : __seq_dist.second);\n \t}\n \n       if (this->_M_is_end())\n \t{\n \t  if (__rhs._M_is_before_begin())\n-\t    return std::make_pair(-1, __dp_exact);\n+\t    return __seq_dist.second == __dp_exact\n+\t      ? std::make_pair(-__seq_dist.first - 1, __dp_exact)\n+\t      : std::make_pair(-__seq_dist.first, __dp_sign);\n \n \t  if (__rhs._M_is_begin())\n-\t    {\n-\t      _Diff __diff = _SeqTraits::_S_size(*this->_M_get_sequence());\n-\t      return std::make_pair(-__diff.first, __diff.second);\n-\t    }\n+\t    return std::make_pair(-__seq_dist.first, __seq_dist.second);\n \n-\t  return std::make_pair(-1, __dp_sign);\n+\t  return std::make_pair(-__seq_dist.first,\n+\t\t\t\t__seq_dist.second == __dp_exact\n+\t\t\t\t? __dp_sign_max_size : __seq_dist.second);\n \t}\n \n-      if (__rhs._M_is_before_begin() || __rhs._M_is_begin())\n-\treturn std::make_pair(-1, __dp_sign);\n+      if (__rhs._M_is_before_begin())\n+\treturn __seq_dist.second == __dp_exact\n+\t  ? std::make_pair(__seq_dist.first - 1, __dp_exact)\n+\t  : std::make_pair(-__seq_dist.first, __dp_sign);\n+\n+      if (__rhs._M_is_begin())\n+\treturn std::make_pair(-__seq_dist.first,\n+\t\t\t      __seq_dist.second == __dp_exact\n+\t\t\t      ? __dp_sign_max_size : __seq_dist.second);\n \n       if (__rhs._M_is_end())\n-\treturn std::make_pair(1, __dp_sign);\n+\treturn std::make_pair(__seq_dist.first,\n+\t\t\t      __seq_dist.second == __dp_exact\n+\t\t\t      ? __dp_sign_max_size : __seq_dist.second);\n \n       return std::make_pair(1, __dp_equality);\n     }"}]}