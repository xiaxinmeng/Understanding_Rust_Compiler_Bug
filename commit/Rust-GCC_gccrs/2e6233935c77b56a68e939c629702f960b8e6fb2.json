{"sha": "2e6233935c77b56a68e939c629702f960b8e6fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2MjMzOTM1Yzc3YjU2YTY4ZTkzOWM2Mjk3MDJmOTYwYjhlNmZiMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-17T21:43:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-18T13:15:01Z"}, "message": "analyzer: fix ICE on COMPONENT_REF of ARRAY_TYPE [PR 93778]\n\nPR analyzer/93778 reports an ICE with -fanalyzer on a gfortran test case\nat this gimple stmt:\n\n  _gfortran_st_set_nml_var (&dt_parm.0, &ro.xi.jq, &\"ro%xi%jq\"[1]{lb: 1 sz: 1}, 4, 0, D.3913);\n\nwhere ro.xi.jq is a COMPONENT_REF, but ro.xi is of type \"struct bl[3]\".\n\nThe analyzer's handling of COMPONENT_REF assumes that the type of the\n1st argument is a RECORD_TYPE or UNION_TYPE, whereas in this case it's\nan ARRAY_TYPE, leading to a failed as_a inside\nregion_model::get_field_region.\n\nThis patch fixes the ICE by generalizing the \"give up on this tree code\"\nlogic from r10-6667-gf76a88ebf089871dcce215aa0cb1956ccc060895 for\nPR analyzer/93388, so that the analyzer gives up when it needs to get an\nlvalue for a COMPONENT_REF on something other than a RECORD_TYPE or\nUNION_TYPE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93778\n\t* engine.cc (impl_region_model_context::on_unknown_tree_code):\n\tRename to...\n\t(impl_region_model_context::on_unexpected_tree_code): ...this and\n\tconvert first argument from path_var to tree.\n\t(exploded_node::on_stmt): Pass ctxt to purge_for_unknown_fncall.\n\t* exploded-graph.h (region_model_context::on_unknown_tree_code):\n\tRename to...\n\t(region_model_context::on_unexpected_tree_code): ...this and\n\tconvert first argument from path_var to tree.\n\t* program-state.cc (sm_state_map::purge_for_unknown_fncall): Add\n\tctxt param and pass on to calls to get_rvalue.\n\t* program-state.h (sm_state_map::purge_for_unknown_fncall): Add\n\tctxt param.\n\t* region-model.cc (region_model::handle_unrecognized_call): Pass\n\tctxt on to call to get_rvalue.\n\t(region_model::get_lvalue_1): Move body of default case to\n\tregion_model::make_region_for_unexpected_tree_code and call it.\n\tWithin COMPONENT_REF case, reject attempts to handle types other\n\tthan RECORD_TYPE and UNION_TYPE.\n\t(region_model::make_region_for_unexpected_tree_code): New\n\tfunction, based on default case of region_model::get_lvalue_1.\n\t* region-model.h\n\t(region_model::make_region_for_unexpected_tree_code): New decl.\n\t(region_model::on_unknown_tree_code): Rename to...\n\t(region_model::on_unexpected_tree_code): ...this and convert first\n\targument from path_var to tree.\n\t(class test_region_model_context): Update vfunc implementation for\n\tabove change.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93778\n\t* gfortran.dg/analyzer/pr93778.f90: New test.", "tree": {"sha": "3e29d3b277c5626585f6b3018c740a2de76df5d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e29d3b277c5626585f6b3018c740a2de76df5d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6233935c77b56a68e939c629702f960b8e6fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6233935c77b56a68e939c629702f960b8e6fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6233935c77b56a68e939c629702f960b8e6fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6233935c77b56a68e939c629702f960b8e6fb2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a674c7b8b8028c5d7e52dd38783e8e2b02034b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a674c7b8b8028c5d7e52dd38783e8e2b02034b63"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "05fb6144439885dd4b2bf8c9e84a7cacb9dfa109", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -1,3 +1,35 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93778\n+\t* engine.cc (impl_region_model_context::on_unknown_tree_code):\n+\tRename to...\n+\t(impl_region_model_context::on_unexpected_tree_code): ...this and\n+\tconvert first argument from path_var to tree.\n+\t(exploded_node::on_stmt): Pass ctxt to purge_for_unknown_fncall.\n+\t* exploded-graph.h (region_model_context::on_unknown_tree_code):\n+\tRename to...\n+\t(region_model_context::on_unexpected_tree_code): ...this and\n+\tconvert first argument from path_var to tree.\n+\t* program-state.cc (sm_state_map::purge_for_unknown_fncall): Add\n+\tctxt param and pass on to calls to get_rvalue.\n+\t* program-state.h (sm_state_map::purge_for_unknown_fncall): Add\n+\tctxt param.\n+\t* region-model.cc (region_model::handle_unrecognized_call): Pass\n+\tctxt on to call to get_rvalue.\n+\t(region_model::get_lvalue_1): Move body of default case to\n+\tregion_model::make_region_for_unexpected_tree_code and call it.\n+\tWithin COMPONENT_REF case, reject attempts to handle types other\n+\tthan RECORD_TYPE and UNION_TYPE.\n+\t(region_model::make_region_for_unexpected_tree_code): New\n+\tfunction, based on default case of region_model::get_lvalue_1.\n+\t* region-model.h\n+\t(region_model::make_region_for_unexpected_tree_code): New decl.\n+\t(region_model::on_unknown_tree_code): Rename to...\n+\t(region_model::on_unexpected_tree_code): ...this and convert first\n+\targument from path_var to tree.\n+\t(class test_region_model_context): Update vfunc implementation for\n+\tabove change.\n+\n 2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93774"}, {"sha": "de6bf1d394fd63c6d44cf69e26fc58c8ebee6489", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -684,18 +684,18 @@ impl_region_model_context::on_phi (const gphi *phi, tree rhs)\n     }\n }\n \n-/* Implementation of region_model_context::on_unknown_tree_code vfunc.\n+/* Implementation of region_model_context::on_unexpected_tree_code vfunc.\n    Mark the new state as being invalid for further exploration.\n    TODO(stage1): introduce a warning for when this occurs.  */\n \n void\n-impl_region_model_context::on_unknown_tree_code (path_var pv,\n-\t\t\t\t\t\t const dump_location_t &loc)\n+impl_region_model_context::on_unexpected_tree_code (tree t,\n+\t\t\t\t\t\t    const dump_location_t &loc)\n {\n   logger * const logger = get_logger ();\n   if (logger)\n     logger->log (\"unhandled tree code: %qs in %qs at %s:%i\",\n-\t\t get_tree_code_name (TREE_CODE (pv.m_tree)),\n+\t\t get_tree_code_name (TREE_CODE (t)),\n \t\t loc.get_impl_location ().m_function,\n \t\t loc.get_impl_location ().m_file,\n \t\t loc.get_impl_location ().m_line);\n@@ -1093,7 +1093,8 @@ exploded_node::on_stmt (exploded_graph &eg,\n \n \t      if (!fndecl_has_gimple_body_p (callee_fndecl))\n \t\tnew_smap->purge_for_unknown_fncall (eg, sm, call, callee_fndecl,\n-\t\t\t\t\t\t    state->m_region_model);\n+\t\t\t\t\t\t    state->m_region_model,\n+\t\t\t\t\t\t    &ctxt);\n \t    }\n \t}\n       if (*old_smap != *new_smap)"}, {"sha": "a851dd929c9d4fd186c5d5caf571081674671911", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -76,8 +76,8 @@ class impl_region_model_context : public region_model_context\n \n   void on_phi (const gphi *phi, tree rhs) FINAL OVERRIDE;\n \n-  void on_unknown_tree_code (path_var pv,\n-\t\t\t     const dump_location_t &loc) FINAL OVERRIDE;\n+  void on_unexpected_tree_code (tree t,\n+\t\t\t\tconst dump_location_t &loc) FINAL OVERRIDE;\n \n   exploded_graph *m_eg;\n   log_user m_logger;"}, {"sha": "971e8e0a7d68990201960991f6edfedf0c2ed48f", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -380,7 +380,8 @@ sm_state_map::purge_for_unknown_fncall (const exploded_graph &eg,\n \t\t\t\t\tconst state_machine &sm,\n \t\t\t\t\tconst gcall *call,\n \t\t\t\t\ttree fndecl,\n-\t\t\t\t\tregion_model *new_model)\n+\t\t\t\t\tregion_model *new_model,\n+\t\t\t\t\tregion_model_context *ctxt)\n {\n   logger * const logger = eg.get_logger ();\n   if (logger)\n@@ -413,23 +414,23 @@ sm_state_map::purge_for_unknown_fncall (const exploded_graph &eg,\n \t      continue;\n \t}\n       tree parm = gimple_call_arg (call, arg_idx);\n-      svalue_id parm_sid = new_model->get_rvalue (parm, NULL);\n+      svalue_id parm_sid = new_model->get_rvalue (parm, ctxt);\n       set_state (new_model, parm_sid, 0, svalue_id::null ());\n \n       /* Also clear sm-state from svalue_ids that are passed via a\n \t pointer.  */\n       if (TREE_CODE (parm) == ADDR_EXPR)\n \t{\n \t  tree pointee = TREE_OPERAND (parm, 0);\n-\t  svalue_id parm_sid = new_model->get_rvalue (pointee, NULL);\n+\t  svalue_id parm_sid = new_model->get_rvalue (pointee, ctxt);\n \t  set_state (new_model, parm_sid, 0, svalue_id::null ());\n \t}\n     }\n \n   /* Purge any state for any LHS.  */\n   if (tree lhs = gimple_call_lhs (call))\n     {\n-      svalue_id lhs_sid = new_model->get_rvalue (lhs, NULL);\n+      svalue_id lhs_sid = new_model->get_rvalue (lhs, ctxt);\n       set_state (new_model, lhs_sid, 0, svalue_id::null ());\n     }\n }"}, {"sha": "2c778ccb9ac109a1141d64d99b7d594c605bbcb9", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -179,7 +179,8 @@ class sm_state_map\n   void purge_for_unknown_fncall (const exploded_graph &eg,\n \t\t\t\t const state_machine &sm,\n \t\t\t\t const gcall *call, tree fndecl,\n-\t\t\t\t region_model *new_model);\n+\t\t\t\t region_model *new_model,\n+\t\t\t\t region_model_context *ctxt);\n \n   void remap_svalue_ids (const svalue_id_map &map);\n "}, {"sha": "c8ee031dc8f1d7f6a44f52ec3dc69b375ac15107", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -4431,7 +4431,7 @@ region_model::handle_unrecognized_call (const gcall *call,\n \t  }\n \n \ttree parm = gimple_call_arg (call, arg_idx);\n-\tsvalue_id parm_sid = get_rvalue (parm, NULL);\n+\tsvalue_id parm_sid = get_rvalue (parm, ctxt);\n \tsvalue *parm_sval = get_svalue (parm_sid);\n \tif (parm_sval)\n \t  if (region_svalue *parm_ptr = parm_sval->dyn_cast_region_svalue ())\n@@ -4641,19 +4641,8 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n   switch (TREE_CODE (expr))\n     {\n     default:\n-      {\n-\t/* If we see a tree code we we don't know how to handle, rather than\n-\t   ICE or generate bogus results, create a dummy region, and notify\n-\t   CTXT so that it can mark the new state as being not properly\n-\t   modelled.  The exploded graph can then stop exploring that path,\n-\t   since any diagnostics we might issue will have questionable\n-\t   validity.  */\n-\tregion_id new_rid\n-\t  = add_region (new symbolic_region (m_root_rid, NULL_TREE, false));\n-\tctxt->on_unknown_tree_code (pv, dump_location_t ());\n-\treturn new_rid;\n-      }\n-      break;\n+      return make_region_for_unexpected_tree_code (ctxt, expr,\n+\t\t\t\t\t\t   dump_location_t ());\n \n     case ARRAY_REF:\n       {\n@@ -4730,6 +4719,11 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n \t/* obj.field  */\n \ttree obj = TREE_OPERAND (expr, 0);\n \ttree field = TREE_OPERAND (expr, 1);\n+\ttree obj_type = TREE_TYPE (obj);\n+\tif (TREE_CODE (obj_type) != RECORD_TYPE\n+\t    && TREE_CODE (obj_type) != UNION_TYPE)\n+\t  return make_region_for_unexpected_tree_code (ctxt, obj_type,\n+\t\t\t\t\t\t       dump_location_t ());\n \tregion_id obj_rid = get_lvalue (obj, ctxt);\n \tregion_id struct_or_union_rid\n \t  = get_or_create_view (obj_rid, TREE_TYPE (obj));\n@@ -4770,6 +4764,24 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n     }\n }\n \n+/* If we see a tree code we we don't know how to handle, rather than\n+   ICE or generate bogus results, create a dummy region, and notify\n+   CTXT so that it can mark the new state as being not properly\n+   modelled.  The exploded graph can then stop exploring that path,\n+   since any diagnostics we might issue will have questionable\n+   validity.  */\n+\n+region_id\n+region_model::make_region_for_unexpected_tree_code (region_model_context *ctxt,\n+\t\t\t\t\t\t    tree t,\n+\t\t\t\t\t\t    const dump_location_t &loc)\n+{\n+  region_id new_rid\n+    = add_region (new symbolic_region (m_root_rid, NULL_TREE, false));\n+  ctxt->on_unexpected_tree_code (t, loc);\n+  return new_rid;\n+}\n+\n /* Assert that SRC_TYPE can be converted to DST_TYPE as a no-op.  */\n \n static void"}, {"sha": "3b2b43b595fb69cd4cc2f0ac81bdbf089b389ac8", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -1835,6 +1835,10 @@ class region_model\n   region_id get_lvalue_1 (path_var pv, region_model_context *ctxt);\n   svalue_id get_rvalue_1 (path_var pv, region_model_context *ctxt);\n \n+  region_id make_region_for_unexpected_tree_code (region_model_context *ctxt,\n+\t\t\t\t\t\t  tree t,\n+\t\t\t\t\t\t  const dump_location_t &loc);\n+\n   void add_any_constraints_from_ssa_def_stmt (tree lhs,\n \t\t\t\t\t      enum tree_code op,\n \t\t\t\t\t      tree rhs,\n@@ -1939,9 +1943,9 @@ class region_model_context\n   virtual void on_phi (const gphi *phi, tree rhs) = 0;\n \n   /* Hooks for clients to be notified when the region model doesn't\n-     know how to handle the tree code of PV at LOC.  */\n-  virtual void on_unknown_tree_code (path_var pv,\n-\t\t\t\t     const dump_location_t &loc) = 0;\n+     know how to handle the tree code of T at LOC.  */\n+  virtual void on_unexpected_tree_code (tree t,\n+\t\t\t\t\tconst dump_location_t &loc) = 0;\n };\n \n /* A bundle of data for use when attempting to merge two region_model\n@@ -2123,11 +2127,11 @@ class test_region_model_context : public region_model_context\n   {\n   }\n \n-  void on_unknown_tree_code (path_var pv, const dump_location_t &)\n+  void on_unexpected_tree_code (tree t, const dump_location_t &)\n     FINAL OVERRIDE\n   {\n     internal_error (\"unhandled tree code: %qs\",\n-\t\t    get_tree_code_name (TREE_CODE (pv.m_tree)));\n+\t\t    get_tree_code_name (TREE_CODE (t)));\n   }\n \n private:"}, {"sha": "d171d4ee61845a46ed7c507844dd65440653c1a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -1,3 +1,8 @@\n+2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93778\n+\t* gfortran.dg/analyzer/pr93778.f90: New test.\n+\n 2020-02-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93774"}, {"sha": "9112e4980ea49faf2b83c8d242bf8eaa723b54e4", "filename": "gcc/testsuite/gfortran.dg/analyzer/pr93778.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93778.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6233935c77b56a68e939c629702f960b8e6fb2/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93778.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr93778.f90?ref=2e6233935c77b56a68e939c629702f960b8e6fb2", "patch": "@@ -0,0 +1,11 @@\n+program h0\n+  type bl\n+     integer jq\n+  end type bl\n+  type qn\n+     type (bl), dimension(3) :: xi\n+  end type qn\n+  type (qn) ro\n+  namelist /i2/ ro\n+  read(10, nml = i2)\n+end program h0"}]}