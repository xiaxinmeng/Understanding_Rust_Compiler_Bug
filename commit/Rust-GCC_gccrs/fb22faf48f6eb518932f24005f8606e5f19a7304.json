{"sha": "fb22faf48f6eb518932f24005f8606e5f19a7304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyMmZhZjQ4ZjZlYjUxODkzMmYyNDAwNWY4NjA2ZTVmMTlhNzMwNA==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-03T09:35:41Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-04-21T16:49:01Z"}, "message": "aarch64, libgcc: Fix unwinding from pac-ret to normal frames [PR94514]\n\nWith -mbranch-protection=pac-ret the debug info toggles the\nsignedness state of the return address so the unwinder knows when\nthe return address needs pointer authentication.\n\nThe unwind context flags were not updated according to the dwarf\nframe info.\n\nThis causes unwinding across frames that were built without pac-ret\nto incorrectly authenticate the return address wich corrupts the\nreturn address on a system where PAuth is enabled.\n\nNote: This even affects systems where all code use pac-ret because\nunwinding across a signal frame the return address is not signed.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94514\n\t* g++.target/aarch64/pr94514.C: New test.\n\t* gcc.target/aarch64/pr94514.c: New test.\n\nlibgcc/ChangeLog:\n\n\tPR target/94514\n\t* config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):\n\tUpdate context->flags accroding to the frame state.", "tree": {"sha": "27f03a736850e068ce2537789c41f56601126414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27f03a736850e068ce2537789c41f56601126414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb22faf48f6eb518932f24005f8606e5f19a7304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb22faf48f6eb518932f24005f8606e5f19a7304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb22faf48f6eb518932f24005f8606e5f19a7304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb22faf48f6eb518932f24005f8606e5f19a7304/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d4a3bfa8311a26814d60165b3e850cce850b61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4a3bfa8311a26814d60165b3e850cce850b61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4a3bfa8311a26814d60165b3e850cce850b61a"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "0c1034087ea4251ed3875074aedb1dae13e1fe21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb22faf48f6eb518932f24005f8606e5f19a7304", "patch": "@@ -1,3 +1,9 @@\n+2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94514\n+\t* g++.target/aarch64/pr94514.C: New test.\n+\t* gcc.target/aarch64/pr94514.c: New test.\n+\n 2020-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94683"}, {"sha": "2a8c949ba30cbe88f99419b3b87f30df06ecdf57", "filename": "gcc/testsuite/g++.target/aarch64/pr94514.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94514.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94514.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr94514.C?ref=fb22faf48f6eb518932f24005f8606e5f19a7304", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/94514. Unwind across mixed pac-ret and non-pac-ret frames.  */\n+/* { dg-do run } */\n+\n+__attribute__((noinline, target(\"branch-protection=pac-ret\")))\n+static void do_throw (void)\n+{\n+  throw 42;\n+  __builtin_abort ();\n+}\n+\n+__attribute__((noinline, target(\"branch-protection=none\")))\n+static void no_pac_ret (void)\n+{\n+  do_throw ();\n+  __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+  try {\n+    no_pac_ret ();\n+  } catch (...) {\n+    return 0;\n+  }\n+  __builtin_abort ();\n+}"}, {"sha": "bbbf5a6b0b3ac1585fa330e49dd2f8185624c377", "filename": "gcc/testsuite/gcc.target/aarch64/pr94514.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94514.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22faf48f6eb518932f24005f8606e5f19a7304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94514.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94514.c?ref=fb22faf48f6eb518932f24005f8606e5f19a7304", "patch": "@@ -0,0 +1,76 @@\n+/* PR target/94514. Unwind across mixed pac-ret and non-pac-ret frames.  */\n+/* { dg-do run } */\n+/* { dg-options \"-fexceptions -O2\" } */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#define die() \\\n+  do { \\\n+    printf (\"%s:%d: reached unexpectedly.\\n\", __FILE__, __LINE__); \\\n+    fflush (stdout); \\\n+    abort (); \\\n+  } while (0)\n+\n+static struct _Unwind_Exception exc;\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+                   _Unwind_Exception_Class exc_class,\n+                   struct _Unwind_Exception *exc_obj,\n+                   struct _Unwind_Context *context,\n+                   void *stop_parameter)\n+{\n+  printf (\"%s: CFA: %p PC: %p actions: %d\\n\",\n+\t  __func__,\n+\t  (void *)_Unwind_GetCFA (context),\n+\t  (void *)_Unwind_GetIP (context),\n+\t  (int)actions);\n+  if (actions & _UA_END_OF_STACK)\n+    die ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void force_unwind (void)\n+{\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (&exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (&exc, force_unwind_stop, 0);\n+#endif\n+}\n+\n+__attribute__((noinline, target(\"branch-protection=pac-ret\")))\n+static void f2_pac_ret (void)\n+{\n+  force_unwind ();\n+  die ();\n+}\n+\n+__attribute__((noinline, target(\"branch-protection=none\")))\n+static void f1_no_pac_ret (void)\n+{\n+  f2_pac_ret ();\n+  die ();\n+}\n+\n+__attribute__((noinline, target(\"branch-protection=pac-ret\")))\n+static void f0_pac_ret (void)\n+{\n+  f1_no_pac_ret ();\n+  die ();\n+}\n+\n+static void cleanup_handler (void *p)\n+{\n+  printf (\"%s: Success.\\n\", __func__);\n+  exit (0);\n+}\n+\n+int main ()\n+{\n+  char dummy __attribute__((cleanup (cleanup_handler)));\n+  f0_pac_ret ();\n+  die ();\n+}"}, {"sha": "da419ff4b0a182167120fe32984bf3996e9f7d5c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22faf48f6eb518932f24005f8606e5f19a7304/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22faf48f6eb518932f24005f8606e5f19a7304/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=fb22faf48f6eb518932f24005f8606e5f19a7304", "patch": "@@ -1,3 +1,9 @@\n+2020-04-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/94514\n+\t* config/aarch64/aarch64-unwind.h (aarch64_frob_update_context):\n+\tUpdate context->flags accroding to the frame state.\n+\n 2020-04-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sfp-exceptions.c (__sfp_handle_exceptions) [__SSE_MATH__]:"}, {"sha": "ed84a96db41d21c8980f76b832499aac56d064c7", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb22faf48f6eb518932f24005f8606e5f19a7304/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb22faf48f6eb518932f24005f8606e5f19a7304/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=fb22faf48f6eb518932f24005f8606e5f19a7304", "patch": "@@ -104,6 +104,8 @@ aarch64_frob_update_context (struct _Unwind_Context *context,\n   if (fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset & 0x1)\n     /* The flag is used for re-authenticating EH handler's address.  */\n     context->flags |= RA_SIGNED_BIT;\n+  else\n+    context->flags &= ~RA_SIGNED_BIT;\n \n   return;\n }"}]}