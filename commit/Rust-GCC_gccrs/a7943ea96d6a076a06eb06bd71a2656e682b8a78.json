{"sha": "a7943ea96d6a076a06eb06bd71a2656e682b8a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5NDNlYTk2ZDZhMDc2YTA2ZWIwNmJkNzFhMjY1NmU2ODJiOGE3OA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-04-27T12:44:46Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-07T19:00:21Z"}, "message": "When searching for non-null, check the dominator tree.\n\nThe non-null bitmap only indicates which blocks non-null setting occurs.\nGeneralized queries need to search the dom tree, whereas propagation\nengines only need to know the current block.  Add a flag for this purpose.\n\n\t* gimple-range-cache.cc (non_null_ref::non_null_deref_p): Search\n\tdominator tree is available and requested.\n\t(ranger_cache::ssa_range_in_bb): Don't search dom tree here.\n\t(ranger_cache::fill_block_cache): Don't search dom tree here either.\n\t* gimple-range-cache.h (non_null_deref_p): Add dom_search param.", "tree": {"sha": "d40cb117c49ad3a3623d3c89ea96ea4461145ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40cb117c49ad3a3623d3c89ea96ea4461145ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7943ea96d6a076a06eb06bd71a2656e682b8a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7943ea96d6a076a06eb06bd71a2656e682b8a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7943ea96d6a076a06eb06bd71a2656e682b8a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7943ea96d6a076a06eb06bd71a2656e682b8a78/comments", "author": null, "committer": null, "parents": [{"sha": "d942d7332d3dbd93609f5b5706df5990fd63dcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d942d7332d3dbd93609f5b5706df5990fd63dcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d942d7332d3dbd93609f5b5706df5990fd63dcfc"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "9b401927bd6b505ffd3b2d1f3804c67b68984182", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943ea96d6a076a06eb06bd71a2656e682b8a78/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943ea96d6a076a06eb06bd71a2656e682b8a78/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=a7943ea96d6a076a06eb06bd71a2656e682b8a78", "patch": "@@ -48,9 +48,10 @@ non_null_ref::~non_null_ref ()\n \n // Return true if NAME has a non-null dereference in block bb.  If this is the\n // first query for NAME, calculate the summary first.\n+// If SEARCH_DOM is true, the search the dominator tree as well.\n \n bool\n-non_null_ref::non_null_deref_p (tree name, basic_block bb)\n+non_null_ref::non_null_deref_p (tree name, basic_block bb, bool search_dom)\n {\n   if (!POINTER_TYPE_P (TREE_TYPE (name)))\n     return false;\n@@ -59,7 +60,24 @@ non_null_ref::non_null_deref_p (tree name, basic_block bb)\n   if (!m_nn[v])\n     process_name (name);\n \n-  return bitmap_bit_p (m_nn[v], bb->index);\n+  if (bitmap_bit_p (m_nn[v], bb->index))\n+    return true;\n+\n+  // See if any dominator has set non-zero.\n+  if (search_dom && dom_info_available_p (CDI_DOMINATORS))\n+    {\n+      // Search back to the Def block, or the top, whichever is closer.\n+      basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (name));\n+      basic_block def_dom = def_bb\n+\t\t\t    ? get_immediate_dominator (CDI_DOMINATORS, def_bb)\n+\t\t\t    : NULL;\n+      for ( ;\n+\t    bb && bb != def_dom;\n+\t    bb = get_immediate_dominator (CDI_DOMINATORS, bb))\n+\tif (bitmap_bit_p (m_nn[v], bb->index))\n+\t  return true;\n+    }\n+  return false;\n }\n \n // Allocate an populate the bitmap for NAME.  An ON bit for a block\n@@ -800,7 +818,7 @@ ranger_cache::ssa_range_in_bb (irange &r, tree name, basic_block bb)\n   // Check if pointers have any non-null dereferences.  Non-call\n   // exceptions mean we could throw in the middle of the block, so just\n   // punt for now on those.\n-  if (r.varying_p () && m_non_null.non_null_deref_p (name, bb) &&\n+  if (r.varying_p () && m_non_null.non_null_deref_p (name, bb, false) &&\n       !cfun->can_throw_non_call_exceptions)\n     r = range_nonzero (TREE_TYPE (name));\n }\n@@ -1066,7 +1084,8 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \n \t  // Regardless of whether we have visited pred or not, if the\n \t  // pred has a non-null reference, revisit this block.\n-\t  if (m_non_null.non_null_deref_p (name, pred))\n+\t  // Don't search the DOM tree.\n+\t  if (m_non_null.non_null_deref_p (name, pred, false))\n \t    {\n \t      if (DEBUG_RANGE_CACHE)\n \t\tfprintf (dump_file, \"nonnull: update \");"}, {"sha": "986a68a9e06b009bb21c5b6690923ccf737919ee", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7943ea96d6a076a06eb06bd71a2656e682b8a78/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7943ea96d6a076a06eb06bd71a2656e682b8a78/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=a7943ea96d6a076a06eb06bd71a2656e682b8a78", "patch": "@@ -33,7 +33,7 @@ class non_null_ref\n public:\n   non_null_ref ();\n   ~non_null_ref ();\n-  bool non_null_deref_p (tree name, basic_block bb);\n+  bool non_null_deref_p (tree name, basic_block bb, bool search_dom = true);\n private:\n   vec <bitmap> m_nn;\n   void process_name (tree name);"}]}