{"sha": "c793eea7abb23067e67179546acfea0db28af1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5M2VlYTdhYmIyMzA2N2U2NzE3OTU0NmFjZmVhMGRiMjhhZjFhZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-17T22:15:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-17T22:15:10Z"}, "message": "libiberty.h (concat_length, [...]): New.\n\ninclude:\n\t* libiberty.h (concat_length, concat_copy, concat_copy2,\n\tlibiberty_concat_ptr, ACONCAT): New.\n\nlibiberty:\n\t* concat.c (vconcat_length, vconcat_copy, concat_length,\n\tconcat_copy, concat_copy2): New functions.\n\t(concat): Use vconcat_length/vconcat_copy.\n\ngcc:\n\t* gcc.c (find_file): Use ACONCAT in lieu of alloca/strcpy/strcat.\n\nFrom-SVN: r45664", "tree": {"sha": "8936428e9b92c8d4e4a9fb0979885f8a76664f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8936428e9b92c8d4e4a9fb0979885f8a76664f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c793eea7abb23067e67179546acfea0db28af1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c793eea7abb23067e67179546acfea0db28af1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c793eea7abb23067e67179546acfea0db28af1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c793eea7abb23067e67179546acfea0db28af1ae/comments", "author": null, "committer": null, "parents": [{"sha": "63fb6fc7f8e0b16439a3fc9db8554450861a2643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63fb6fc7f8e0b16439a3fc9db8554450861a2643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63fb6fc7f8e0b16439a3fc9db8554450861a2643"}], "stats": {"total": 143, "additions": 118, "deletions": 25}, "files": [{"sha": "1e8d4f04ce88f48729f9cb7ecc25c75c58525aa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -1,3 +1,7 @@\n+2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c (find_file): Use ACONCAT in lieu of alloca/strcpy/strcat.\n+\n 2001-09-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* dostage2, dostage3, listing, make-l2.com, makefile.vms,"}, {"sha": "ad692eb5b32a8aa5d099b6e392ddd2e5bd0dea8f", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -5419,12 +5419,7 @@ find_file (name)\n   /* Try multilib_dir if it is defined.  */\n   if (multilib_dir != NULL)\n     {\n-      char *try;\n-\n-      try = (char *) alloca (strlen (multilib_dir) + strlen (name) + 2);\n-      strcpy (try, multilib_dir);\n-      strcat (try, dir_separator_str);\n-      strcat (try, name);\n+      const char *const try = ACONCAT ((multilib_dir, dir_separator_str, name, NULL));\n \n       newname = find_a_file (&startfile_prefixes, try, R_OK);\n "}, {"sha": "a20b8b82e5c531b2d2ca90b1ab04b0861aeebb14", "filename": "include/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -1,5 +1,8 @@\n 2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* libiberty.h (concat_length, concat_copy, concat_copy2,\n+\tlibiberty_concat_ptr, ACONCAT): New.\n+\n \t* libiberty.h (ASTRDUP): New macro.\n \tlibiberty_optr, libiberty_nptr, libiberty_len): Declare.\n "}, {"sha": "43f1b7d401e7fcb937ddbf6b2f22e809cf5b9679", "filename": "include/libiberty.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -90,6 +90,33 @@ extern const char *lbasename PARAMS ((const char *));\n \n extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n \n+/* Determine the length of concatenating an arbitrary number of\n+   strings, up to (char *) NULL.  */\n+\n+extern unsigned long concat_length PARAMS ((const char *, ...));\n+\n+/* Concatenate an arbitrary number of strings into a SUPPLIED area of\n+   memory, up to (char *) NULL.  The supplied memory is assumed to be\n+   large enough.  */\n+\n+extern char *concat_copy PARAMS ((char *, const char *, ...));\n+\n+/* Concatenate an arbitrary number of strings into a GLOBAL area of\n+   memory, up to (char *) NULL.  The supplied memory is assumed to be\n+   large enough.  */\n+\n+extern char *concat_copy2 PARAMS ((const char *, ...));\n+\n+/* This is the global area used by concat_copy2.  */\n+\n+extern char *libiberty_concat_ptr;\n+\n+/* Concatenate an arbitrary number of strings, up to (char *) NULL.\n+   Allocates memory using alloca.  Arguments are evaluated twice!.  */\n+#define ACONCAT(ACONCAT_PARAMS) \\\n+  (libiberty_concat_ptr = alloca (concat_length ACONCAT_PARAMS + 1), \\\n+   concat_copy2 ACONCAT_PARAMS)\n+\n /* Check whether two file descriptors refer to the same file.  */\n \n extern int fdmatch PARAMS ((int fd1, int fd2));"}, {"sha": "b68c4c5b81237d87222cc6ca35cc2097d53802fa", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -1,5 +1,9 @@\n 2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* concat.c (vconcat_length, vconcat_copy, concat_length,\n+\tconcat_copy, concat_copy2): New functions.\n+\t(concat): Use vconcat_length/vconcat_copy.\n+\n \t* alloca.c (libiberty_optr, libiberty_nptr, libiberty_len):\n \tDefine.\n "}, {"sha": "feed0df819bbce9a73ec303855de7d09ad7208b4", "filename": "libiberty/concat.c", "status": "modified", "additions": 79, "deletions": 19, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c793eea7abb23067e67179546acfea0db28af1ae/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c793eea7abb23067e67179546acfea0db28af1ae/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=c793eea7abb23067e67179546acfea0db28af1ae", "patch": "@@ -74,38 +74,98 @@ NOTES\n #  endif\n # endif\n \n-char *\n-concat VPARAMS ((const char *first, ...))\n+static inline unsigned long vconcat_length PARAMS ((const char *, va_list));\n+static inline unsigned long\n+vconcat_length (first, args)\n+     const char *first;\n+     va_list args;\n {\n-  register size_t length;\n-  register char *newstr;\n-  register char *end;\n-  register const char *arg;\n+  unsigned long length = 0;\n+  const char *arg;\n \n-  /* First compute the size of the result and get sufficient memory.  */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n-  \n-  length = 0;\n   for (arg = first; arg ; arg = va_arg (args, const char *))\n     length += strlen (arg);\n \n-  VA_CLOSE (args);\n-\n-  newstr = (char *) xmalloc (length + 1);\n+  return length;\n+}\n \n-  /* Now copy the individual pieces to the result string. */\n-  VA_OPEN (args, first);\n-  VA_FIXEDARG (args, const char *, first);\n+static inline char *vconcat_copy PARAMS ((char *, const char *, va_list));\n+static inline char *\n+vconcat_copy (dst, first, args)\n+     char *dst;\n+     const char *first;\n+     va_list args;\n+{\n+  char *end = dst;\n+  const char *arg;\n \n-  end = newstr;\n   for (arg = first; arg ; arg = va_arg (args, const char *))\n     {\n-      length = strlen (arg);\n+      unsigned long length = strlen (arg);\n       memcpy (end, arg, length);\n       end += length;\n     }\n   *end = '\\000';\n+\n+  return dst;\n+}\n+\n+unsigned long\n+concat_length VPARAMS ((const char *first, ...))\n+{\n+  unsigned long length;\n+\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n+  length = vconcat_length (first, args);\n+  VA_CLOSE (args);\n+\n+  return length;\n+}\n+\n+char *\n+concat_copy VPARAMS ((char *dst, const char *first, ...))\n+{\n+  char *save_dst;\n+\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, char *, dst);\n+  VA_FIXEDARG (args, const char *, first);\n+  vconcat_copy (dst, first, args);\n+  save_dst = dst; /* With K&R C, dst goes out of scope here.  */\n+  VA_CLOSE (args);\n+\n+  return save_dst;\n+}\n+\n+char *libiberty_concat_ptr;\n+\n+char *\n+concat_copy2 VPARAMS ((const char *first, ...))\n+{\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n+  vconcat_copy (libiberty_concat_ptr, first, args);\n+  VA_CLOSE (args);\n+\n+  return libiberty_concat_ptr;\n+}\n+\n+char *\n+concat VPARAMS ((const char *first, ...))\n+{\n+  char *newstr;\n+\n+  /* First compute the size of the result and get sufficient memory.  */\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n+  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);\n+  VA_CLOSE (args);\n+\n+  /* Now copy the individual pieces to the result string. */\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n+  vconcat_copy (newstr, first, args);\n   VA_CLOSE (args);\n \n   return newstr;"}]}