{"sha": "12530dbee37f016821a4ac9a6f5521b4d7b170bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1MzBkYmVlMzdmMDE2ODIxYTRhYzlhNmY1NTIxYjRkN2IxNzBiZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-18T00:30:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-18T00:30:17Z"}, "message": "combine.c (combine_simplify_rtx): Give FLOAT_STORE_FLAG_VALUE a mode.\n\n        * combine.c (combine_simplify_rtx): Give FLOAT_STORE_FLAG_VALUE a mode.\n        * cse.c (find_comparison_args, fold_rtx): Likewise.\n        * integrate.c (subst_constants): Likewise.\n        * loop.c (get_condition): Likewise.\n\n        * tm.texi (FLOAT_STORE_FLAG_VALUE): Update docs.\n\n        * alpha.h (FLOAT_STORE_FLAG_VALUE): Use REAL_VALUE_ATOF.\n\nFrom-SVN: r31479", "tree": {"sha": "aecddda7944bbc55e14c8f8e39a527bc701516d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aecddda7944bbc55e14c8f8e39a527bc701516d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12530dbee37f016821a4ac9a6f5521b4d7b170bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12530dbee37f016821a4ac9a6f5521b4d7b170bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12530dbee37f016821a4ac9a6f5521b4d7b170bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12530dbee37f016821a4ac9a6f5521b4d7b170bd/comments", "author": null, "committer": null, "parents": [{"sha": "101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101e59f49237c5acbf25580d8f7f2f16b0e10f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101e59f49237c5acbf25580d8f7f2f16b0e10f9c"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "e1f1277bf96d3dc9a0691b50209dad2591da0acc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -1,3 +1,14 @@\n+2000-01-17  Richard Henderson  <rth@cygnus.com>\n+\n+\t* combine.c (combine_simplify_rtx): Give FLOAT_STORE_FLAG_VALUE a mode.\n+\t* cse.c (find_comparison_args, fold_rtx): Likewise.\n+\t* integrate.c (subst_constants): Likewise.\n+\t* loop.c (get_condition): Likewise.\n+\n+\t* tm.texi (FLOAT_STORE_FLAG_VALUE): Update docs.\n+\n+\t* alpha.h (FLOAT_STORE_FLAG_VALUE): Use REAL_VALUE_ATOF.\n+\n 2000-01-18  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* c-parse.in (SAVE_WARN_FLAGS): Create an INTEGER_CST."}, {"sha": "99fe499756bdd3824d1d5ffe460fcce199233227", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -3555,9 +3555,13 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n       temp = simplify_relational_operation (code, op0_mode,\n \t\t\t\t\t    XEXP (x, 0), XEXP (x, 1));\n #ifdef FLOAT_STORE_FLAG_VALUE\n-      if (temp != 0 && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\ttemp = ((temp == const0_rtx) ? CONST0_RTX (GET_MODE (x))\n-\t\t: immed_real_const_1 (FLOAT_STORE_FLAG_VALUE, GET_MODE (x)));\n+      if (temp != 0 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t{\n+\t  if (temp == const0_rtx)\n+\t    temp = CONST0_RTX (mode);\n+\t  else\n+\t    temp = immed_real_const_1 (FLOAT_STORE_FLAG_VALUE (mode), mode);\n+\t}\n #endif\n       break;\n     case 'c':"}, {"sha": "cf88a9aa3397372081128dc579489ac578035375", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -1674,7 +1674,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Define the value returned by a floating-point comparison instruction.  */\n \n-#define FLOAT_STORE_FLAG_VALUE (TARGET_FLOAT_VAX ? 0.5 : 2.0)\n+#define FLOAT_STORE_FLAG_VALUE(MODE) \\\n+  REAL_VALUE_ATOF ((TARGET_FLOAT_VAX ? \"0.5\" : \"2.0\"), (MODE))\n \n /* Canonicalize a comparison from one we don't have to one we do have.  */\n "}, {"sha": "b346199097a6dd3df5c6a5a8d8f0e08cb00ac277", "filename": "gcc/cse.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -2899,7 +2899,8 @@ find_comparison_args (code, parg1, parg2, pmode1, pmode2)\n \t\t  && code == LT && STORE_FLAG_VALUE == -1)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t      || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_FLOAT\n-\t\t  && FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t  && (REAL_VALUE_NEGATIVE\n+\t\t      (FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)))))\n #endif\n \t      )\n \t    x = arg1;\n@@ -2908,7 +2909,8 @@ find_comparison_args (code, parg1, parg2, pmode1, pmode2)\n \t\t       && code == GE && STORE_FLAG_VALUE == -1)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t   || (GET_MODE_CLASS (GET_MODE (arg1)) == MODE_FLOAT\n-\t\t       && FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t       && (REAL_VALUE_NEGATIVE\n+\t\t\t   (FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)))))\n #endif\n \t\t   )\n \t    x = arg1, reverse_code = 1;\n@@ -2954,7 +2956,8 @@ find_comparison_args (code, parg1, parg2, pmode1, pmode2)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t   || (code == LT\n \t\t       && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n-\t\t       && FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t       && (REAL_VALUE_NEGATIVE\n+\t\t\t   (FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)))))\n #endif\n \t\t   )\n \t\t  && GET_RTX_CLASS (GET_CODE (p->exp)) == '<'))\n@@ -2973,7 +2976,8 @@ find_comparison_args (code, parg1, parg2, pmode1, pmode2)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t    || (code == GE\n \t\t\t&& GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n-\t\t\t&& FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t        && (REAL_VALUE_NEGATIVE\n+\t\t\t    (FLOAT_STORE_FLAG_VALUE (GET_MODE (arg1)))))\n #endif\n \t\t    )\n \t\t   && GET_RTX_CLASS (GET_CODE (p->exp)) == '<')\n@@ -3639,8 +3643,8 @@ fold_rtx (x, insn)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t    {\n-\t      true = CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE,\n-\t\t\t\t\t\t   mode);\n+\t      true = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t\t      (FLOAT_STORE_FLAG_VALUE (mode), mode));\n \t      false = CONST0_RTX (mode);\n \t    }\n #endif\n@@ -3753,8 +3757,8 @@ fold_rtx (x, insn)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t\t{\n-\t\t  true = CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE,\n-\t\t\t\t\t\t       mode);\n+\t\t  true = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t\t\t  (FLOAT_STORE_FLAG_VALUE (mode), mode));\n \t\t  false = CONST0_RTX (mode);\n \t\t}\n #endif\n@@ -3784,8 +3788,13 @@ fold_rtx (x, insn)\n \t\t\t\t\t   const_arg1 ? const_arg1 : folded_arg1);\n #ifdef FLOAT_STORE_FLAG_VALUE\n       if (new != 0 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n-\tnew = ((new == const0_rtx) ? CONST0_RTX (mode)\n-\t       : CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE, mode));\n+\t{\n+\t  if (new == const0_rtx)\n+\t    new = CONST0_RTX (mode);\n+\t  else\n+\t    new = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t\t   (FLOAT_STORE_FLAG_VALUE (mode), mode));\n+\t}\n #endif\n       break;\n "}, {"sha": "0cbff9d05f391c93070aa370cf6363f5514ee73d", "filename": "gcc/integrate.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -2384,9 +2384,16 @@ subst_constants (loc, insn, map, memonly)\n \t\t\t\t\t       XEXP (x, 0), XEXP (x, 1));\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t  if (new != 0 && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t  new = ((new == const0_rtx) ? CONST0_RTX (GET_MODE (x))\n-\t\t : CONST_DOUBLE_FROM_REAL_VALUE (FLOAT_STORE_FLAG_VALUE,\n-\t\t\t\t\t\t GET_MODE (x)));\n+\t    {\n+\t      enum machine_mode mode = GET_MODE (x);\n+\t      if (new == const0_rtx)\n+\t\tnew = CONST0_RTX (mode);\n+\t      else\n+\t\t{\n+\t\t  REAL_VALUE_TYPE val = FLOAT_STORE_FLAG_VALUE (mode);\n+\t\t  new = CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n+\t\t}\n+\t    }\n #endif\n \t  break;\n       }"}, {"sha": "b02e4b0dc99d1465b5ea950b26bbf56b28781f98", "filename": "gcc/loop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -9103,7 +9103,8 @@ get_condition (jump, earliest)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t     || (code == LT\n \t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n-\t\t\t && FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t\t && (REAL_VALUE_NEGATIVE\n+\t\t\t     (FLOAT_STORE_FLAG_VALUE (inner_mode))))\n #endif\n \t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<'))\n@@ -9122,7 +9123,8 @@ get_condition (jump, earliest)\n #ifdef FLOAT_STORE_FLAG_VALUE\n \t\t     || (code == GE\n \t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n-\t\t\t && FLOAT_STORE_FLAG_VALUE < 0)\n+\t\t\t && (REAL_VALUE_NEGATIVE\n+\t\t\t     (FLOAT_STORE_FLAG_VALUE (inner_mode))))\n #endif\n \t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<'"}, {"sha": "d3357c1a4ef05cd0a85ce628063c53950f1fd9f8", "filename": "gcc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12530dbee37f016821a4ac9a6f5521b4d7b170bd/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=12530dbee37f016821a4ac9a6f5521b4d7b170bd", "patch": "@@ -7485,8 +7485,8 @@ You need not define @code{STORE_FLAG_VALUE} if the machine has no store-flag\n instructions.\n \n @findex FLOAT_STORE_FLAG_VALUE\n-@item FLOAT_STORE_FLAG_VALUE\n-A C expression that gives a non-zero floating point value that is\n+@item FLOAT_STORE_FLAG_VALUE (@var{mode})\n+A C expression that gives a non-zero @code{REAL_VALUE_TYPE} value that is\n returned when comparison operators with floating-point results are true.\n Define this macro on machine that have comparison operations that return\n floating-point values.  If there are no such operations, do not define"}]}