{"sha": "9eeca99ccce4b56765920bd3c839abb77bbd4280", "node_id": "C_kwDOANBUbNoAKDllZWNhOTljY2NlNGI1Njc2NTkyMGJkM2M4MzlhYmI3N2JiZDQyODA", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T18:24:14Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-12-09T18:28:43Z"}, "message": "Avoid expecting nonzero size for access none void* arguments [PR101751].\n\nResolves:\nPR middle-end/101751 - attribute access none with void pointer expects nonzero size\n\ngcc/ChangeLog:\n\n\tPR middle-end/101751\n\t* doc/extend.texi (attribute access): Adjust.\n\t* gimple-ssa-warn-access.cc (pass_waccess::maybe_check_access_sizes):\n\tTreat access mode none on a void* argument as expecting as few as\n\tzero bytes.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/101751\n\t* gcc.dg/Wstringop-overflow-86.c: New test.", "tree": {"sha": "39539227311170d470b6c68e6fbb6ec331248182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39539227311170d470b6c68e6fbb6ec331248182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eeca99ccce4b56765920bd3c839abb77bbd4280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeca99ccce4b56765920bd3c839abb77bbd4280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eeca99ccce4b56765920bd3c839abb77bbd4280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eeca99ccce4b56765920bd3c839abb77bbd4280/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c12cb70892d82506b3044c4c34f5667eb12835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c12cb70892d82506b3044c4c34f5667eb12835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c12cb70892d82506b3044c4c34f5667eb12835"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "266ef76e5c35547926f6d022351aef439c49b469", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9eeca99ccce4b56765920bd3c839abb77bbd4280", "patch": "@@ -2524,7 +2524,6 @@ The following attributes are supported on most targets.\n @table @code\n @c Keep this table alphabetized by attribute name.  Treat _ as space.\n \n-@item access\n @itemx access (@var{access-mode}, @var{ref-index})\n @itemx access (@var{access-mode}, @var{ref-index}, @var{size-index})\n \n@@ -2598,7 +2597,9 @@ __attribute__ ((access (write_only, 1, 2), access (read_write, 3))) int fgets (c\n The access mode @code{none} specifies that the pointer to which it applies\n is not used to access the referenced object at all.  Unless the pointer is\n null the pointed-to object must exist and have at least the size as denoted\n-by the @var{size-index} argument.  The object need not be initialized.\n+by the @var{size-index} argument.  When the optional @var{size-index}\n+argument is omitted for an argument of @code{void*} type the actual pointer\n+agument is ignored.  The referenced object need not be initialized.\n The mode is intended to be used as a means to help validate the expected\n object size, for example in functions that call @code{__builtin_object_size}.\n @xref{Object Size Checking}."}, {"sha": "1d095a69aa5fb32b399c6aec8ad23d10847fbd20", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=9eeca99ccce4b56765920bd3c839abb77bbd4280", "patch": "@@ -2998,6 +2998,10 @@ pass_waccess::maybe_check_access_sizes (rdwr_map *rwm, tree fndecl, tree fntype,\n \t  if (access.second.minsize\n \t      && access.second.minsize != HOST_WIDE_INT_M1U)\n \t    access_nelts = build_int_cstu (sizetype, access.second.minsize);\n+\t  else if (VOID_TYPE_P (argtype) && access.second.mode == access_none)\n+\t    /* Treat access mode none on a void* argument as expecting\n+\t       as little as zero bytes.  */\n+\t    access_nelts = size_zero_node;\n \t  else\n \t    access_nelts = size_one_node;\n \t}"}, {"sha": "345abe4a274bcf89792e9175dea382572130110c", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-86.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-86.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eeca99ccce4b56765920bd3c839abb77bbd4280/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-86.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-86.c?ref=9eeca99ccce4b56765920bd3c839abb77bbd4280", "patch": "@@ -0,0 +1,63 @@\n+/* PR middle-end/101751 - attribute access none with void pointer expects\n+   nonzero size\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+__attribute__ ((access (none, 1))) void\n+fvp_m1 (const void*);\n+\n+void nowarn_m1 (void)\n+{\n+  /* Verify these don't trigger a warning for calls to a function\n+     declared with attribute access none.  */\n+  fvp_m1 ((void*)-1);         // { dg-bogus \"-Wstringop-\" }\n+  fvp_m1 ((void*)1);          // { dg-bogus \"-Wstringop-\" }\n+}\n+\n+\n+__attribute__ ((access (none, 1))) void\n+fvp_none (void*);\n+\n+void nowarn_c_cp1 (void)\n+{\n+  char c;\n+  fvp_none (&c);\n+  fvp_none (&c + 1);          // { dg-bogus \"-Wstringop-\" }\n+}\n+\n+void nowarn_f_fp1 (void)\n+{\n+  fvp_none ((char*)&nowarn_f_fp1);\n+  fvp_none ((char*)&nowarn_f_fp1 + 1);\n+}\n+\n+void nowarn_sp1_sp_4 (void)\n+{\n+  fvp_none (\"\" + 1);          // { dg-bogus \"-Wstringop-\" }\n+  fvp_none (\"123\" + 4);       // { dg-bogus \"-Wstringop-\" }\n+}\n+\n+\n+__attribute__ ((access (none, 1))) void\n+wfvp_none (void*);            // { dg-message \"in a call to function 'wfvp_none' declared with attribute 'access \\\\\\(none, 1\\\\\\)'\" }\n+\n+void warn_cm1_p1 (void)\n+{\n+  char c;\n+  /* With optimization both of the following are diagnosed by -Warray-bounds.\n+     The second also without optimization by -Wstringop-overread.  They\n+     should both be diagnosed by the same warning even without optimization. */\n+  wfvp_none (&c - 1);         // { dg-warning \"\" \"pr??????\" { xfail *-*-* } }\n+  wfvp_none (&c + 2);         // { dg-warning \"\" }\n+}\n+\n+void warn_fp2 (void)\n+{\n+  void *p = (char*)&warn_fp2 + sizeof warn_fp2;\n+  fvp_none (p);               // { dg-warning \"\" \"pr??????\" { xfail *-*-* } }\n+}\n+\n+void warn_sp2 (void)\n+{\n+  wfvp_none (\"\" + 2);         // { dg-warning \"\" }\n+}"}]}