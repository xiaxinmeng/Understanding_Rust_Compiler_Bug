{"sha": "d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhNzYwZDhjNDNmYTEwYWE1YjQ1MGI2NmYyZjRiZjY3Zjg5OGE4Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-05-24T22:16:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-05-24T22:16:59Z"}, "message": "PR c++/80544 strip cv-quals from cast results\n\ngcc/cp:\n\n\tPR c++/80544\n\t* tree.c (reshape_init): Use unqualified type for direct enum init.\n\t* typeck.c (maybe_warn_about_cast_ignoring_quals): New.\n\t(build_static_cast_1, build_reinterpret_cast_1): Strip cv-quals from\n\tnon-class destination types.\n\t(build_const_cast_1): Strip cv-quals from destination types.\n\t(build_static_cast, build_reinterpret_cast, build_const_cast)\n\t(cp_build_c_cast): Add calls to maybe_warn_about_cast_ignoring_quals.\n\ngcc/testsuite:\n\n\tPR c++/80544\n\t* g++.dg/expr/cast11.C: New test.\n\nFrom-SVN: r248432", "tree": {"sha": "0b9e9d9dadfb3945f1b82de004c3c56971bdf0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b9e9d9dadfb3945f1b82de004c3c56971bdf0ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd211af9989ca33f08c9d9d7c29ba7cb208b645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd211af9989ca33f08c9d9d7c29ba7cb208b645"}], "stats": {"total": 108, "additions": 101, "deletions": 7}, "files": [{"sha": "2982ca7e4817edeedd5ac24c0e5700cb8225dbe8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "patch": "@@ -1,3 +1,14 @@\n+2017-05-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/80544\n+\t* tree.c (reshape_init): Use unqualified type for direct enum init.\n+\t* typeck.c (maybe_warn_about_cast_ignoring_quals): New.\n+\t(build_static_cast_1, build_reinterpret_cast_1): Strip cv-quals from\n+\tnon-class destination types.\n+\t(build_const_cast_1): Strip cv-quals from destination types.\n+\t(build_static_cast, build_reinterpret_cast, build_const_cast)\n+\t(cp_build_c_cast): Add calls to maybe_warn_about_cast_ignoring_quals.\n+\n 2017-05-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/80731"}, {"sha": "3ff0130cc644d99d32e6f5d92685c165c073b681", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "patch": "@@ -6043,6 +6043,7 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n   if (is_direct_enum_init (type, init))\n     {\n       tree elt = CONSTRUCTOR_ELT (init, 0)->value;\n+      type = cv_unqualified (type);\n       if (check_narrowing (ENUM_UNDERLYING_TYPE (type), elt, complain))\n \treturn cp_build_c_cast (type, elt, tf_warning_or_error);\n       else"}, {"sha": "b81d6c8fc786df96ad353b34eea059b76a218ace", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "patch": "@@ -6655,9 +6655,7 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n     }\n }\n \n-/*\n-  Warns if the cast from expression EXPR to type TYPE is useless.\n- */\n+/* Warns if the cast from expression EXPR to type TYPE is useless.  */\n void\n maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n {\n@@ -6673,6 +6671,20 @@ maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n     }\n }\n \n+/* Warns if the cast ignores cv-qualifiers on TYPE.  */\n+void\n+maybe_warn_about_cast_ignoring_quals (tree type, tsubst_flags_t complain)\n+{\n+  if (warn_ignored_qualifiers\n+      && complain & tf_warning\n+      && !CLASS_TYPE_P (type)\n+      && (cp_type_quals (type) & (TYPE_QUAL_CONST|TYPE_QUAL_VOLATILE)))\n+    {\n+      warning (OPT_Wignored_qualifiers, \"type qualifiers ignored on cast \"\n+\t       \"result type\");\n+    }\n+}\n+\n /* Convert EXPR (an expression with pointer-to-member type) to TYPE\n    (another pointer-to-member type in the same hierarchy) and return\n    the converted expression.  If ALLOW_INVERSE_P is permitted, a\n@@ -6746,6 +6758,10 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n   /* Save casted types in the function's used types hash table.  */\n   used_types_insert (type);\n \n+  /* A prvalue of non-class type is cv-unqualified.  */\n+  if (!CLASS_TYPE_P (type))\n+    type = cv_unqualified (type);\n+\n   /* [expr.static.cast]\n \n      An lvalue of type \"cv1 B\", where B is a class type, can be cast\n@@ -7035,7 +7051,10 @@ build_static_cast (tree type, tree expr, tsubst_flags_t complain)\n   if (valid_p)\n     {\n       if (result != error_mark_node)\n-\tmaybe_warn_about_useless_cast (type, expr, complain);\n+\t{\n+\t  maybe_warn_about_useless_cast (type, expr, complain);\n+\t  maybe_warn_about_cast_ignoring_quals (type, complain);\n+\t}\n       return result;\n     }\n \n@@ -7108,6 +7127,10 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n   /* Save casted types in the function's used types hash table.  */\n   used_types_insert (type);\n \n+  /* A prvalue of non-class type is cv-unqualified.  */\n+  if (!CLASS_TYPE_P (type))\n+    type = cv_unqualified (type);\n+\n   /* [expr.reinterpret.cast]\n      An lvalue expression of type T1 can be cast to the type\n      \"reference to T2\" if an expression of type \"pointer to T1\" can be\n@@ -7289,7 +7312,10 @@ build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n   r = build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n \t\t\t\t/*valid_p=*/NULL, complain);\n   if (r != error_mark_node)\n-    maybe_warn_about_useless_cast (type, expr, complain);\n+    {\n+      maybe_warn_about_useless_cast (type, expr, complain);\n+      maybe_warn_about_cast_ignoring_quals (type, complain);\n+    }\n   return r;\n }\n \n@@ -7335,6 +7361,9 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n       return error_mark_node;\n     }\n \n+  /* A prvalue of non-class type is cv-unqualified.  */\n+  dst_type = cv_unqualified (dst_type);\n+\n   /* Save casted types in the function's used types hash table.  */\n   used_types_insert (dst_type);\n \n@@ -7455,7 +7484,10 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n \n   r = build_const_cast_1 (type, expr, complain, /*valid_p=*/NULL);\n   if (r != error_mark_node)\n-    maybe_warn_about_useless_cast (type, expr, complain);\n+    {\n+      maybe_warn_about_useless_cast (type, expr, complain);\n+      maybe_warn_about_cast_ignoring_quals (type, complain);\n+    }\n   return r;\n }\n \n@@ -7558,7 +7590,10 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n   if (valid_p)\n     {\n       if (result != error_mark_node)\n-\tmaybe_warn_about_useless_cast (type, value, complain);\n+\t{\n+\t  maybe_warn_about_useless_cast (type, value, complain);\n+\t  maybe_warn_about_cast_ignoring_quals (type, complain);\n+\t}\n       return result;\n     }\n \n@@ -7579,6 +7614,7 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n       tree result_type;\n \n       maybe_warn_about_useless_cast (type, value, complain);\n+      maybe_warn_about_cast_ignoring_quals (type, complain);\n \n       /* Non-class rvalues always have cv-unqualified type.  */\n       if (!CLASS_TYPE_P (type))"}, {"sha": "cc8e09d9a229488d3de1c5a36bc9d4c69f2f5cbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "patch": "@@ -1,3 +1,8 @@\n+2017-05-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/80544\n+\t* g++.dg/expr/cast11.C: New test.\n+\n 2017-05-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/80731"}, {"sha": "01d578a6e18c67dacc32b90dc5799c5cc9ee8235", "filename": "gcc/testsuite/g++.dg/expr/cast11.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C?ref=d4a760d8c43fa10aa5b450b66f2f4bf67f898a8c", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wignored-qualifiers\" }\n+// c++/80544 cast expressions returned cv-qualified prvalues\n+\n+template<typename T> void f(T&&) { }\n+template<typename T> void f(T const&&) = delete;\n+\n+template<typename T> void g(T&&) = delete;\n+template<typename T> void g(T const&&) { }\n+\n+struct B { int i; const char c; } b = {};\n+\n+void f1()\n+{\n+  int i = 0;\n+  f((long const)i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n+  f((int* const)&i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n+  f((int const* const)&i);\t\t// { dg-warning \"qualifiers ignored\" }\n+  f((long* const)&i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n+\n+  f(static_cast<long const>(i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(reinterpret_cast<long const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+\n+  f(static_cast<int* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(const_cast<int* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(reinterpret_cast<long* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+\n+  using ptrmem = int B::*;\n+  f(static_cast<ptrmem const>(&B::i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(const_cast<ptrmem const>(&B::i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(reinterpret_cast<ptrmem const>(&B::i)); // { dg-warning \"qualifiers ignored\" }\n+\n+  // No warnings, not a cv-qualified type:\n+  using ptrmem2 = const char B::*;\n+  f(static_cast<ptrmem2>(&B::c));\n+  f(const_cast<ptrmem2>(&B::c));\n+  f(reinterpret_cast<ptrmem2>(&B::c));\n+\n+  // prvalue of class type can have cv-quals:\n+  g(static_cast<const B>(b));\n+}"}]}