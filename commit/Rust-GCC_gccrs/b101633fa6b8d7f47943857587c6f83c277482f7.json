{"sha": "b101633fa6b8d7f47943857587c6f83c277482f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwMTYzM2ZhNmI4ZDdmNDc5NDM4NTc1ODdjNmY4M2MyNzc0ODJmNw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-09-02T10:20:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-09-02T10:20:57Z"}, "message": "2018-09-02  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/safe_iterator.h\n\t(_Safe_iterator<_It, _Seq, _Cat>::_Self): New.\n\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>::_Self):\n\tNew.\n\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n\t::_OtherSelf): New.\n\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS, _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS)\n\t(_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS)\n\t(_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS): Define macros.\n\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n\t::operator+(difference_type)): Use latters, inline as friend.\n\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n\t::operator-(difference_type)): Likewise.\n\t(operator==(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator!=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator<(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n\t(operator<=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator>(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n\t(operator>=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n\tLikewise.\n\t(operator-(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n\t(operator+(difference_type, const _Safe_iterator<>&)): Likewise.\n\t(operator-(const _Safe_iterator<>&, difference_type)): Likewise.\n\t* include/debug/safe_iterator.tcc\n\t(_Safe_iterator<>::_M_can_advance(difference_type)): Take parameter by\n\tcopy.\n\t* include/debug/safe_local_iterator.h\n\t(_Safe_local_iterator<_It, _Seq>::_Self): New.\n\t(_Safe_local_iterator<_It, _Seq>::_OtherSelf): New.\n\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS): Define macro.\n\t(operator==(const _Safe_local_iterator<>&,\n\tconst _Safe_local_iterator<>&)): Use latter, inline as friend.\n\t(operator!=(const _Safe_local_iterator<>&,\n\tconst _Safe_local_iterator<>&)): Likewise.\n\t* testsuite/util/testsuite_containers.h: Include utility.\n\t(struct forward_members_unordered<_Tp, bool>): Remove 2nd template\n\tparameter.\n\t(forward_members_unordered<>::forward_members_unordered(value_type&)):\n\tAdd using namespace std::rel_ops.\n\tAdd iterator_concept_checks on local_iterator and const_local_iterator.\n\tAdd asserts on comparison between const_local_iterator and\n\tlocal_iterator.\n\t(struct forward_members_unordered<_Tp, false>): Remove partial\n\tspecialization.\n\t* testsuite/23_containers/forward_list/types/1.cc: New.\n\t* testsuite/23_containers/list/types/1.cc: New.\n\nFrom-SVN: r264039", "tree": {"sha": "37448aa326341f26f17fa8cfe28c5e2f6616a935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37448aa326341f26f17fa8cfe28c5e2f6616a935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b101633fa6b8d7f47943857587c6f83c277482f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b101633fa6b8d7f47943857587c6f83c277482f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b101633fa6b8d7f47943857587c6f83c277482f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b101633fa6b8d7f47943857587c6f83c277482f7/comments", "author": null, "committer": null, "parents": [{"sha": "2b35b704147c6b90ec5badd803b1a7ac788dcb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b35b704147c6b90ec5badd803b1a7ac788dcb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b35b704147c6b90ec5badd803b1a7ac788dcb7c"}], "stats": {"total": 813, "additions": 429, "deletions": 384}, "files": [{"sha": "0c6f4084ee3bee43b8e1b0b4e7ec321e4471e28b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -1,3 +1,55 @@\n+2018-09-02  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_iterator.h\n+\t(_Safe_iterator<_It, _Seq, _Cat>::_Self): New.\n+\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>::_Self):\n+\tNew.\n+\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n+\t::_OtherSelf): New.\n+\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS, _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS)\n+\t(_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS)\n+\t(_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS): Define macros.\n+\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n+\t::operator+(difference_type)): Use latters, inline as friend.\n+\t(_Safe_iterator<_It, _Seq, std::random_access_iterator_tag>\n+\t::operator-(difference_type)): Likewise.\n+\t(operator==(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator!=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator<(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n+\t(operator<=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator>(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n+\t(operator>=(const _Safe_iterator<>&, const _Safe_iterator<>&)):\n+\tLikewise.\n+\t(operator-(const _Safe_iterator<>&, const _Safe_iterator<>&)): Likewise.\n+\t(operator+(difference_type, const _Safe_iterator<>&)): Likewise.\n+\t(operator-(const _Safe_iterator<>&, difference_type)): Likewise.\n+\t* include/debug/safe_iterator.tcc\n+\t(_Safe_iterator<>::_M_can_advance(difference_type)): Take parameter by\n+\tcopy.\n+\t* include/debug/safe_local_iterator.h\n+\t(_Safe_local_iterator<_It, _Seq>::_Self): New.\n+\t(_Safe_local_iterator<_It, _Seq>::_OtherSelf): New.\n+\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS): Define macro.\n+\t(operator==(const _Safe_local_iterator<>&,\n+\tconst _Safe_local_iterator<>&)): Use latter, inline as friend.\n+\t(operator!=(const _Safe_local_iterator<>&,\n+\tconst _Safe_local_iterator<>&)): Likewise.\n+\t* testsuite/util/testsuite_containers.h: Include utility.\n+\t(struct forward_members_unordered<_Tp, bool>): Remove 2nd template\n+\tparameter.\n+\t(forward_members_unordered<>::forward_members_unordered(value_type&)):\n+\tAdd using namespace std::rel_ops.\n+\tAdd iterator_concept_checks on local_iterator and const_local_iterator.\n+\tAdd asserts on comparison between const_local_iterator and\n+\tlocal_iterator.\n+\t(struct forward_members_unordered<_Tp, false>): Remove partial\n+\tspecialization.\n+\t* testsuite/23_containers/forward_list/types/1.cc: New.\n+\t* testsuite/23_containers/list/types/1.cc: New.\n+\n 2018-09-01  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/profile_mode.xml: Update three ieeexplore.ieee.org"}, {"sha": "f0c2c204523b94eedefd9e61d6da7594b4e0e05f", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 165, "deletions": 286, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -36,6 +36,28 @@\n #include <bits/stl_pair.h>\n #include <ext/type_traits.h>\n \n+#define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, _BadMsgId, _DiffMsgId) \\\n+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),\t\\\n+\t\t\t_M_message(_BadMsgId)\t\t\t\t\\\n+\t\t\t._M_iterator(_Lhs, #_Lhs)\t\t\t\\\n+\t\t\t._M_iterator(_Rhs, #_Rhs));\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_Lhs._M_can_compare(_Rhs),\t\t\t\\\n+\t\t\t_M_message(_DiffMsgId)\t\t\t\t\\\n+\t\t\t._M_iterator(_Lhs, #_Lhs)\t\t\t\\\n+\t\t\t._M_iterator(_Rhs, #_Rhs))\n+\n+#define _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(_Lhs, _Rhs)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, __msg_iter_compare_bad,\t\\\n+\t\t\t\t __msg_compare_different)\n+\n+#define _GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(_Lhs, _Rhs)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, __msg_iter_order_bad,\t\\\n+\t\t\t\t __msg_order_different)\n+\n+#define _GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS(_Lhs, _Rhs)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, __msg_distance_bad,\t\\\n+\t\t\t\t __msg_distance_different)\n+\n namespace __gnu_debug\n {\n   /** Helper struct to deal with sequence offering a before_begin\n@@ -180,9 +202,9 @@ namespace __gnu_debug\n       template<typename _MutableIterator>\n \t_Safe_iterator(\n \t  const _Safe_iterator<_MutableIterator, _Sequence,\n-\t  typename __gnu_cxx::__enable_if<_IsConstant::__value &&\n-\t    std::__are_same<_MutableIterator, _OtherIterator>::__value,\n-\t\t\t\t\t  _Category>::__type>& __x)\n+\t    typename __gnu_cxx::__enable_if<_IsConstant::__value &&\n+\t      std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t\t\t       _Category>::__type>& __x)\n \t_GLIBCXX_NOEXCEPT\n \t: _Iter_base(__x.base())\n \t{\n@@ -374,7 +396,7 @@ namespace __gnu_debug\n \n       // Can we advance the iterator @p __n steps (@p __n may be negative)\n       bool\n-      _M_can_advance(const difference_type& __n) const;\n+      _M_can_advance(difference_type __n) const;\n \n       // Is the iterator range [*this, __rhs) valid?\n       bool\n@@ -421,6 +443,44 @@ namespace __gnu_debug\n       bool\n       _M_is_beginnest() const\n       { return _BeforeBeginHelper<_Sequence>::_S_Is_Beginnest(*this); }\n+\n+      // ------ Operators ------\n+\n+      typedef _Safe_iterator<_Iterator, _Sequence, iterator_category> _Self;\n+\n+      friend bool\n+      operator==(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() == __rhs.base();\n+      }\n+\n+      template<typename _IteR>\n+\tfriend bool\n+\toperator==(const _Self& __lhs,\n+\t  const _Safe_iterator<_IteR, _Sequence, iterator_category>& __rhs)\n+\t_GLIBCXX_NOEXCEPT\n+\t{\n+\t  _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(__lhs, __rhs);\n+\t  return __lhs.base() == __rhs.base();\n+\t}\n+\n+      friend bool\n+      operator!=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() != __rhs.base();\n+      }\n+\n+      template<typename _IteR>\n+\tfriend bool\n+\toperator!=(const _Self& __lhs,\n+\t  const _Safe_iterator<_IteR, _Sequence, iterator_category>& __rhs)\n+\t_GLIBCXX_NOEXCEPT\n+\t{\n+\t  _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS(__lhs, __rhs);\n+\t  return __lhs.base() != __rhs.base();\n+\t}\n     };\n \n   template<typename _Iterator, typename _Sequence>\n@@ -474,8 +534,8 @@ namespace __gnu_debug\n       template<typename _MutableIterator>\n \t_Safe_iterator(\n \t  const _Safe_iterator<_MutableIterator, _Sequence,\n-\t  typename __gnu_cxx::__enable_if<_Safe_base::_IsConstant::__value &&\n-\t    std::__are_same<_MutableIterator, _OtherIterator>::__value,\n+\t    typename __gnu_cxx::__enable_if<_Safe_base::_IsConstant::__value &&\n+\t      std::__are_same<_MutableIterator, _OtherIterator>::__value,\n \t\t\t       std::bidirectional_iterator_tag>::__type>& __x)\n \t_GLIBCXX_NOEXCEPT\n \t: _Safe_base(__x)\n@@ -574,6 +634,10 @@ namespace __gnu_debug\n \t\t\t     std::bidirectional_iterator_tag> _Safe_base;\n       typedef typename _Safe_base::_OtherIterator _OtherIterator;\n \n+      typedef typename _Safe_base::_Self _Self;\n+      typedef _Safe_iterator<_OtherIterator, _Sequence,\n+\t\t\t     std::random_access_iterator_tag> _OtherSelf;\n+\n       typedef typename _Safe_base::_Attach_single _Attach_single;\n \n       _Safe_iterator(_Iterator __i, _Safe_sequence_base* __seq, _Attach_single)\n@@ -706,7 +770,7 @@ namespace __gnu_debug\n \n       // ------ Random access iterator requirements ------\n       reference\n-      operator[](const difference_type& __n) const _GLIBCXX_NOEXCEPT\n+      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n)\n \t\t\t      && this->_M_can_advance(__n + 1),\n@@ -716,7 +780,7 @@ namespace __gnu_debug\n       }\n \n       _Safe_iterator&\n-      operator+=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n+      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n \t\t\t      _M_message(__msg_advance_oob)\n@@ -726,17 +790,8 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-      _Safe_iterator\n-      operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n-\t\t\t      _M_message(__msg_advance_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\treturn _Safe_iterator(this->base() + __n, this->_M_sequence);\n-      }\n-\n       _Safe_iterator&\n-      operator-=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n+      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n \t\t\t      _M_message(__msg_retreat_oob)\n@@ -746,288 +801,107 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n-      _Safe_iterator\n-      operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n+      friend bool\n+      operator<(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n-\t\t\t      _M_message(__msg_retreat_oob)\n-\t\t\t      ._M_iterator(*this)._M_integer(__n));\n-\treturn _Safe_iterator(this->base() - __n, this->_M_sequence);\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() < __rhs.base();\n       }\n-    };\n-\n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator==(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base();\n-    }\n-\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator==(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base();\n-    }\n-\n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator!=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base();\n-    }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator!=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base();\n-    }\n+      friend bool\n+      operator<(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() < __rhs.base();\n+      }\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator<(const _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() < __rhs.base();\n-    }\n+      friend bool\n+      operator<=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() <= __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator<(const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() < __rhs.base();\n-    }\n+      friend bool\n+      operator<=(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() <= __rhs.base();\n+      }\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator<=(const _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() <= __rhs.base();\n-    }\n+      friend bool\n+      operator>(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() > __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator<=(const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() <= __rhs.base();\n-    }\n+      friend bool\n+      operator>(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() > __rhs.base();\n+      }\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator>(const _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() > __rhs.base();\n-    }\n+      friend bool\n+      operator>=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() >= __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator>(const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() > __rhs.base();\n-    }\n+      friend bool\n+      operator>=(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() >= __rhs.base();\n+      }\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator>=(const _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n-\t       const _Safe_iterator<_IteratorR, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() >= __rhs.base();\n-    }\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // According to the resolution of DR179 not only the various comparison\n+      // operators but also operator- must accept mixed iterator/const_iterator\n+      // parameters.\n+      friend difference_type\n+      operator-(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() - __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator>=(const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __lhs,\n-\t       const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t    std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_order_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_order_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() >= __rhs.base();\n-    }\n+      friend difference_type\n+      operator-(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() - __rhs.base();\n+      }\n \n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // According to the resolution of DR179 not only the various comparison\n-  // operators but also operator- must accept mixed iterator/const_iterator\n-  // parameters.\n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline typename _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\tstd::random_access_iterator_tag>::difference_type\n-    operator-(const _Safe_iterator<_IteratorL, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_IteratorR, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_distance_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_distance_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() - __rhs.base();\n-    }\n+      friend _Self\n+      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(__x._M_can_advance(__n),\n+\t\t\t      _M_message(__msg_advance_oob)\n+\t\t\t      ._M_iterator(__x)._M_integer(__n));\n+\treturn _Safe_iterator(__x.base() + __n, __x._M_sequence);\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline typename _Safe_iterator<_Iterator, _Sequence,\n-\t\t\tstd::random_access_iterator_tag>::difference_type\n-    operator-(const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __lhs,\n-\t      const _Safe_iterator<_Iterator, _Sequence,\n-\t\t\t\t   std::random_access_iterator_tag>& __rhs)\n-    _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_distance_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_distance_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() - __rhs.base();\n-    }\n+      friend _Self\n+      operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(__x._M_can_advance(__n),\n+\t\t\t      _M_message(__msg_advance_oob)\n+\t\t\t      ._M_iterator(__x)._M_integer(__n));\n+\treturn _Safe_iterator(__n + __x.base(), __x._M_sequence);\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline _Safe_iterator<_Iterator, _Sequence, std::random_access_iterator_tag>\n-    operator+(typename _Safe_iterator<_Iterator,_Sequence,\n-\t\tstd::random_access_iterator_tag>::difference_type __n,\n-\t      const _Safe_iterator<_Iterator, _Sequence,\n-\t\tstd::random_access_iterator_tag>& __i)\n-    _GLIBCXX_NOEXCEPT\n-    { return __i + __n; }\n+      friend _Self\n+      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(__x._M_can_advance(-__n),\n+\t\t\t      _M_message(__msg_retreat_oob)\n+\t\t\t      ._M_iterator(__x)._M_integer(__n));\n+\treturn _Safe_iterator(__x.base() - __n, __x._M_sequence);\n+      }\n+    };\n \n   /** Safe iterators know how to check if they form a valid range. */\n   template<typename _Iterator, typename _Sequence, typename _Category>\n@@ -1076,6 +950,11 @@ namespace __gnu_debug\n \n } // namespace __gnu_debug\n \n+#undef _GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS\n+#undef _GLIBCXX_DEBUG_VERIFY_REL_OPERANDS\n+#undef _GLIBCXX_DEBUG_VERIFY_EQ_OPERANDS\n+#undef _GLIBCXX_DEBUG_VERIFY_OPERANDS\n+\n #include <debug/safe_iterator.tcc>\n \n #endif"}, {"sha": "2bfe134a3a45cdb76dc2c68c668dcc4047b77541", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -82,7 +82,7 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence, typename _Category>\n     bool\n     _Safe_iterator<_Iterator, _Sequence, _Category>::\n-    _M_can_advance(const difference_type& __n) const\n+    _M_can_advance(difference_type __n) const\n     {\n       if (this->_M_singular())\n \treturn false;"}, {"sha": "8e3ae443e9c8dc463be40194b69a98be7d6a8c30", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 44, "deletions": 77, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -31,6 +31,20 @@\n \n #include <debug/safe_unordered_base.h>\n \n+#define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs) \\\n+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),\t\\\n+\t\t\t_M_message(__msg_iter_compare_bad)\t\t\\\n+\t\t\t._M_iterator(_Lhs, \"lhs\")\t\t\t\\\n+\t\t\t._M_iterator(_Rhs, \"rhs\"));\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_Lhs._M_can_compare(_Rhs),\t\t\t\\\n+\t\t\t_M_message(__msg_compare_different)\t\t\\\n+\t\t\t._M_iterator(_Lhs, \"lhs\")\t\t\t\\\n+\t\t\t._M_iterator(_Rhs, \"rhs\"));\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_Lhs._M_in_same_bucket(_Rhs),\t\t\t\\\n+\t\t\t_M_message(__msg_local_iter_compare_bad)\t\\\n+\t\t\t._M_iterator(_Lhs, \"lhs\")\t\t\t\\\n+\t\t\t._M_iterator(_Rhs, \"rhs\"))\n+\n namespace __gnu_debug\n {\n   /** \\brief Safe iterator wrapper.\n@@ -65,6 +79,9 @@ namespace __gnu_debug\n \ttypename _Sequence::_Base::const_local_iterator>::__type\n       _OtherIterator;\n \n+      typedef _Safe_local_iterator _Self;\n+      typedef _Safe_local_iterator<_OtherIterator, _Sequence> _OtherSelf;\n+\n       struct _Attach_single\n       { };\n \n@@ -354,87 +371,35 @@ namespace __gnu_debug\n \t_M_in_same_bucket(const _Safe_local_iterator<_Other,\n \t\t\t\t\t\t     _Sequence>& __other) const\n \t{ return bucket() == __other.bucket(); }\n-    };\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator==(const _Safe_local_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_local_iterator<_IteratorR, _Sequence>& __rhs)\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_in_same_bucket(__rhs),\n-\t\t\t    _M_message(__msg_local_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base();\n-    }\n+      friend inline bool\n+      operator==(const _Self& __lhs, const _OtherSelf& __rhs) noexcept\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() == __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator==(const _Safe_local_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_local_iterator<_Iterator, _Sequence>& __rhs)\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_in_same_bucket(__rhs),\n-\t\t\t    _M_message(__msg_local_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() == __rhs.base();\n-    }\n+      friend inline bool\n+      operator==(const _Self& __lhs, const _Self& __rhs) noexcept\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() == __rhs.base();\n+      }\n \n-  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-    inline bool\n-    operator!=(const _Safe_local_iterator<_IteratorL, _Sequence>& __lhs,\n-\t       const _Safe_local_iterator<_IteratorR, _Sequence>& __rhs)\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_in_same_bucket(__rhs),\n-\t\t\t    _M_message(__msg_local_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base();\n-    }\n+      friend inline bool\n+      operator!=(const _Self& __lhs, const _OtherSelf& __rhs) noexcept\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() != __rhs.base();\n+      }\n \n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    operator!=(const _Safe_local_iterator<_Iterator, _Sequence>& __lhs,\n-\t       const _Safe_local_iterator<_Iterator, _Sequence>& __rhs)\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n-\t\t\t    _M_message(__msg_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_in_same_bucket(__rhs),\n-\t\t\t    _M_message(__msg_local_iter_compare_bad)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      return __lhs.base() != __rhs.base();\n-    }\n+      friend inline bool\n+      operator!=(const _Self& __lhs, const _Self& __rhs) noexcept\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_OPERANDS(__lhs, __rhs);\n+\treturn __lhs.base() != __rhs.base();\n+      }\n+    };\n \n   /** Safe local iterators know how to check if they form a valid range. */\n   template<typename _Iterator, typename _Sequence>\n@@ -466,6 +431,8 @@ namespace __gnu_debug\n \n } // namespace __gnu_debug\n \n+#undef _GLIBCXX_DEBUG_VERIFY_OPERANDS\n+\n #include <debug/safe_local_iterator.tcc>\n \n #endif"}, {"sha": "164b9c4a14b29ac41b0ad4e3a4805355338cbbb7", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/types/1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Ftypes%2F1.cc?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <forward_list>\n+#include <testsuite_greedy_ops.h>\n+\n+int main()\n+{\n+  std::forward_list<greedy_ops::X> fl;\n+  const std::forward_list<greedy_ops::X> cfl;\n+\n+  fl.insert_after(fl.before_begin(), greedy_ops::X());\n+  fl.insert_after(fl.before_begin(), 1, greedy_ops::X());\n+  fl.insert_after(fl.before_begin(), cfl.begin(), cfl.end());\n+  fl = cfl;\n+\n+  return 0;\n+}"}, {"sha": "a7bb217c6239755b59f24cbe8891c0bbea4b980d", "filename": "libstdc++-v3/testsuite/23_containers/list/types/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <list>\n+#include <testsuite_greedy_ops.h>\n+\n+int main()\n+{\n+  std::list<greedy_ops::X> l;\n+  const std::list<greedy_ops::X> cl;\n+\n+  l.size();\n+  l.insert(l.begin(), greedy_ops::X());\n+  l.insert(l.begin(), 1, greedy_ops::X());\n+  l.insert(l.begin(), cl.begin(), cl.end());\n+  l = cl;\n+\n+  return 0;\n+}"}, {"sha": "eadd43768d2b3887303dcc2ecec53c04e3640576", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 98, "deletions": 20, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b101633fa6b8d7f47943857587c6f83c277482f7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=b101633fa6b8d7f47943857587c6f83c277482f7", "patch": "@@ -23,6 +23,7 @@\n #include <bits/boost_concept_check.h>\n #include <cassert>\n #include <testsuite_container_traits.h>\n+#include <utility> // for rel_ops.\n \n // Container requirement testing.\n namespace __gnu_test\n@@ -170,33 +171,38 @@ namespace __gnu_test\n       reverse_members(_Tp& container) { }\n     };\n \n+  template<typename _Iterator,\n+\t   bool _Mutable,\n+\t   typename = typename std::iterator_traits<_Iterator>::iterator_category>\n+    struct iterator_concept_checks;\n+\n   // DR 691.\n-  template<typename _Tp, bool = traits<_Tp>::is_unordered::value>\n+  template<typename _Tp>\n     struct forward_members_unordered\n     {\n       forward_members_unordered(typename _Tp::value_type& v)\n       {\n+\t// Make sure that even if rel_ops is injected there is no ambiguity\n+\t// when comparing iterators.\n+\tusing namespace std::rel_ops;\n+\n \ttypedef _Tp\t\t\t\t\ttest_type;\n \ttest_type container;\n \tcontainer.insert(v);\n+\n+\titerator_concept_checks<typename _Tp::local_iterator, false> cc;\n+\titerator_concept_checks<typename _Tp::const_local_iterator,\n+\t\t\t\tfalse> ccc;\n+\n \tassert( container.cbegin(0) == container.begin(0) );\n \tassert( container.cend(0) == container.end(0) );\n \tconst typename test_type::size_type bn = container.bucket(1);\n \tassert( container.cbegin(bn) != container.cend(bn) );\n+\tassert( container.cbegin(bn) != container.end(bn) );\n+\tassert( container.begin(bn) != container.cend(bn) );\n       }\n     };\n \n-  template<typename _Tp>\n-    struct forward_members_unordered<_Tp, false>\n-    {\n-      forward_members_unordered(_Tp& container) { }\n-    };\n-\n-  template<typename _Iterator,\n-\t   bool _Mutable,\n-\t   typename = typename std::iterator_traits<_Iterator>::iterator_category>\n-    struct iterator_concept_checks;\n-\n   template<typename _Iterator>\n     struct iterator_concept_checks<_Iterator, false,\n \t\t\t\t   std::forward_iterator_tag>\n@@ -263,6 +269,82 @@ namespace __gnu_test\n       }\n     };\n \n+  template<typename _Tp>\n+    struct forward_members\n+    {\n+      forward_members(_Tp& container)\n+      {\n+\t// Make sure that even if rel_ops is injected there is no ambiguity\n+\t// when comparing iterators.\n+\tusing namespace std::rel_ops;\n+\n+\ttypedef traits<_Tp> traits_type;\n+\titerator_concept_checks<typename _Tp::iterator,\n+\t\t\t\t!(traits_type::is_associative::value\n+\t\t\t\t  || traits_type::is_unordered::value)> cc;\n+\titerator_concept_checks<typename _Tp::const_iterator, false> ccc;\n+\n+\tassert( container.cbegin() == container.begin() );\n+\tassert( container.end() == container.cend() );\n+\tassert( container.cbegin() != container.cend() );\n+\tassert( container.cbegin() != container.end() );\n+\tassert( container.begin() != container.cend() );\n+      }\n+  };\n+\n+  template<typename _Tp,\n+\t   typename\n+    = typename std::iterator_traits<typename _Tp::iterator>::iterator_category>\n+    struct category_members : forward_members<_Tp>\n+    {\n+      category_members(_Tp& container)\n+\t: forward_members<_Tp>(container)\n+      { };\n+    };\n+\n+  template<typename _Tp>\n+    struct category_members<_Tp, std::random_access_iterator_tag>\n+    : forward_members<_Tp>\n+    {\n+      category_members(_Tp& container)\n+\t: forward_members<_Tp>(container)\n+      {\n+\t// Make sure that even if rel_ops is injected there is no ambiguity\n+\t// when comparing iterators.\n+\tusing namespace std::rel_ops;\n+\n+\tassert( !(container.begin() < container.begin()) );\n+\tassert( !(container.cbegin() < container.cbegin()) );\n+\tassert( !(container.cbegin() < container.begin()) );\n+\tassert( !(container.begin() < container.cbegin()) );\n+\tassert( container.begin() <= container.begin() );\n+\tassert( container.cbegin() <= container.cbegin() );\n+\tassert( container.cbegin() <= container.begin() );\n+\tassert( container.begin() <= container.cbegin() );\n+\n+\tassert( !(container.begin() > container.begin()) );\n+\tassert( !(container.cbegin() > container.cbegin()) );\n+\tassert( !(container.cbegin() > container.begin()) );\n+\tassert( !(container.begin() > container.cbegin()) );\n+\tassert( container.begin() >= container.begin() );\n+\tassert( container.cbegin() >= container.cbegin() );\n+\tassert( container.cbegin() >= container.begin() );\n+\tassert( container.begin() >= container.cbegin() );\n+\n+\tassert( container.begin() - container.begin() == 0 );\n+\tassert( container.cbegin() - container.cbegin() == 0 );\n+\tassert( container.cbegin() - container.begin() == 0 );\n+\tassert( container.begin() - container.cbegin() == 0 );\n+\n+\tassert( container.begin() + 0 == container.begin() );\n+\tassert( container.cbegin() + 0 == container.cbegin() );\n+\tassert( 0 + container.begin() == container.begin() );\n+\tassert( 0 + container.cbegin() == container.cbegin() );\n+\tassert( container.begin() - 0 == container.begin() );\n+\tassert( container.cbegin() - 0 == container.cbegin() );\n+      }\n+  };\n+\n   template<typename _Tp>\n     struct citerator\n     {\n@@ -273,21 +355,17 @@ namespace __gnu_test\n       static test_type _S_container;\n \n       // Unconditional.\n-      struct forward_members\n+      struct members : category_members<_Tp>\n       {\n-\tforward_members()\n-\t{\n-\t  assert( _S_container.cbegin() == _S_container.begin() );\n-\t  assert( _S_container.cend() == _S_container.end() );\n-\t  assert( _S_container.cbegin() != _S_container.cend() );\n-\t}\n+\tmembers() : category_members<_Tp>(_S_container)\n+\t{ }\n       };\n \n       // Run test.\n       citerator()\n       {\n \tpopulate<test_type> p(_S_container);\n-\tforward_members m1;\n+\tmembers m1;\n \treverse_members<test_type> m2(_S_container);\n       }\n   };"}]}