{"sha": "253a921b41ddb028244531c5b7f4039caf9fcbda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzYTkyMWI0MWRkYjAyODI0NDUzMWM1YjdmNDAzOWNhZjlmY2JkYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-12-02T17:23:34Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-12-02T17:23:34Z"}, "message": "constexpr.c (cxx_eval_check_shift_p): New function.\n\n\t* constexpr.c (cxx_eval_check_shift_p): New function.\n\t(cxx_eval_binary_expression): Call it.  Set NON_CONSTANT_P if it\n\treturns true.\n\n\t* g++.dg/cpp0x/constexpr-shift1.C: New test.\n\t* g++.dg/cpp1y/constexpr-shift1.C: New test.\n\t* g++.dg/ubsan/pr63956.C: Add dg-errors.\n\nFrom-SVN: r218279", "tree": {"sha": "03e39b9b966b035070baec1018ed17c536b705a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e39b9b966b035070baec1018ed17c536b705a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253a921b41ddb028244531c5b7f4039caf9fcbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253a921b41ddb028244531c5b7f4039caf9fcbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253a921b41ddb028244531c5b7f4039caf9fcbda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253a921b41ddb028244531c5b7f4039caf9fcbda/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73bd83290ace3d8e3256103a59d79e6ec3946964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bd83290ace3d8e3256103a59d79e6ec3946964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bd83290ace3d8e3256103a59d79e6ec3946964"}], "stats": {"total": 183, "additions": 176, "deletions": 7}, "files": [{"sha": "f6ea911b747016c3f81260b0e027c2854be1b0de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -1,3 +1,9 @@\n+2014-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_check_shift_p): New function.\n+\t(cxx_eval_binary_expression): Call it.  Set NON_CONSTANT_P if it\n+\treturns true.\n+\n 2014-12-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60859"}, {"sha": "48bc8f19442d9839d85739155f4278a0932f3c86", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -1470,6 +1470,79 @@ verify_constant (tree t, bool allow_non_constant, bool *non_constant_p,\n   return *non_constant_p;\n }\n \n+/* Check whether the shift operation with code CODE and type TYPE on LHS\n+   and RHS is undefined.  If it is, give an error with an explanation,\n+   and return true; return false otherwise.  */\n+\n+static bool\n+cxx_eval_check_shift_p (location_t loc, const constexpr_ctx *ctx,\n+\t\t\tenum tree_code code, tree type, tree lhs, tree rhs)\n+{\n+  if ((code != LSHIFT_EXPR && code != RSHIFT_EXPR)\n+      || TREE_CODE (lhs) != INTEGER_CST\n+      || TREE_CODE (rhs) != INTEGER_CST)\n+    return false;\n+\n+  tree lhstype = TREE_TYPE (lhs);\n+  unsigned HOST_WIDE_INT uprec = TYPE_PRECISION (TREE_TYPE (lhs));\n+\n+  /* [expr.shift] The behavior is undefined if the right operand\n+     is negative, or greater than or equal to the length in bits\n+     of the promoted left operand.  */\n+  if (tree_int_cst_sgn (rhs) == -1)\n+    {\n+      if (!ctx->quiet)\n+\terror_at (loc, \"right operand of shift expression %q+E is negative\",\n+\t\t  build2_loc (loc, code, type, lhs, rhs));\n+      return true;\n+    }\n+  if (compare_tree_int (rhs, uprec) >= 0)\n+    {\n+      if (!ctx->quiet)\n+\terror_at (loc, \"right operand of shift expression %q+E is >= than \"\n+\t\t  \"the precision of the left operand\",\n+\t\t  build2_loc (loc, code, type, lhs, rhs));\n+      return true;\n+    }\n+\n+  /* The value of E1 << E2 is E1 left-shifted E2 bit positions; [...]\n+     if E1 has a signed type and non-negative value, and E1x2^E2 is\n+     representable in the corresponding unsigned type of the result type,\n+     then that value, converted to the result type, is the resulting value;\n+     otherwise, the behavior is undefined.  */\n+  if (code == LSHIFT_EXPR && !TYPE_UNSIGNED (lhstype)\n+      && (cxx_dialect >= cxx11))\n+    {\n+      if (tree_int_cst_sgn (lhs) == -1)\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (loc, \"left operand of shift expression %q+E is negative\",\n+\t\t      build2_loc (loc, code, type, lhs, rhs));\n+\t  return true;\n+\t}\n+      /* For signed x << y the following:\n+\t (unsigned) x >> ((prec (lhs) - 1) - y)\n+\t if > 1, is undefined.  The right-hand side of this formula\n+\t is the highest bit of the LHS that can be set (starting from 0),\n+\t so that the shift doesn't overflow.  We then right-shift the LHS\n+\t to see whether any other bit is set making the original shift\n+\t undefined -- the result is not representable in the corresponding\n+\t unsigned type.  */\n+      tree t = build_int_cst (unsigned_type_node, uprec - 1);\n+      t = fold_build2 (MINUS_EXPR, unsigned_type_node, t, rhs);\n+      tree ulhs = fold_convert (unsigned_type_for (lhstype), lhs);\n+      t = fold_build2 (RSHIFT_EXPR, TREE_TYPE (ulhs), ulhs, t);\n+      if (tree_int_cst_lt (integer_one_node, t))\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (loc, \"shift expression %q+E overflows\",\n+\t\t      build2_loc (loc, code, type, lhs, rhs));\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Attempt to reduce the unary expression tree T to a compile time value.\n    If successful, return the value.  Otherwise issue a diagnostic\n@@ -1532,6 +1605,8 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n       else\n \tr = build2_loc (loc, code, type, lhs, rhs);\n     }\n+  else if (cxx_eval_check_shift_p (loc, ctx, code, type, lhs, rhs))\n+    *non_constant_p = true;\n   VERIFY_CONSTANT (r);\n   return r;\n }"}, {"sha": "c367f53a383abdf4028851fb7b7a599d27d2da23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -1,3 +1,9 @@\n+2014-12-02  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-shift1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-shift1.C: New test.\n+\t* g++.dg/ubsan/pr63956.C: Add dg-errors.\n+\n 2014-12-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/64108"}, {"sha": "1f4ee73d1b7abdae7e7568f4ca0428fb22d82393", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-shift1.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -0,0 +1,73 @@\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int\n+fn1 (int i, int j)\n+{\n+  return i << j; // { dg-error \"is negative\" }\n+}\n+\n+constexpr int i1 = fn1 (1, -1);\n+\n+constexpr int\n+fn2 (int i, int j)\n+{\n+  return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n+}\n+\n+constexpr int i2 = fn2 (1, 200);\n+\n+constexpr int\n+fn3 (int i, int j)\n+{\n+  return i << j; // { dg-error \"is negative\" }\n+}\n+\n+constexpr int i3 = fn3 (-1, 2);\n+\n+constexpr int\n+fn4 (int i, int j)\n+{\n+  return i << j; // { dg-error \"overflows\" }\n+}\n+\n+constexpr int i4 = fn4 (__INT_MAX__, 2);\n+\n+constexpr int\n+fn5 (int i, int j)\n+{\n+  return i << j;\n+}\n+\n+constexpr int i5 = fn5 (__INT_MAX__, 1);\n+\n+constexpr int\n+fn6 (unsigned int i, unsigned int j)\n+{\n+  return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n+}\n+\n+constexpr int i6 = fn6 (1, -1);\n+\n+constexpr int\n+fn7 (int i, int j)\n+{\n+  return i >> j; // { dg-error \"is negative\" }\n+}\n+\n+constexpr int i7 = fn7 (1, -1);\n+\n+constexpr int\n+fn8 (int i, int j)\n+{\n+  return i >> j;\n+}\n+\n+constexpr int i8 = fn8 (-1, 1);\n+\n+constexpr int\n+fn9 (int i, int j)\n+{\n+  return i >> j;  // { dg-error \"is >= than the precision of the left operand\" }\n+}\n+\n+constexpr int i9 = fn9 (1, 200);"}, {"sha": "a739fd2dfae24780517302cd968d9f35d5e29ac8", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-shift1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int p = 1;\n+constexpr __PTRDIFF_TYPE__ bar (int a)\n+{\n+  return ((__PTRDIFF_TYPE__) &p) << a; // { dg-error \"is not a constant expression\" }\n+}\n+constexpr __PTRDIFF_TYPE__ r = bar (2);\n+constexpr __PTRDIFF_TYPE__ s = bar (0); // { dg-error \"conversion from pointer\" }"}, {"sha": "185a719c8c47cf8cf08a06eb9081843bbd66ea23", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253a921b41ddb028244531c5b7f4039caf9fcbda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=253a921b41ddb028244531c5b7f4039caf9fcbda", "patch": "@@ -14,11 +14,11 @@ fn1 (int a, int b)\n }\n \n constexpr int i1 = fn1 (5, 3);\n-constexpr int i2 = fn1 (5, -2);\n-constexpr int i3 = fn1 (5, sizeof (int) * __CHAR_BIT__);\n-constexpr int i4 = fn1 (5, 256);\n+constexpr int i2 = fn1 (5, -2); // { dg-error \"is negative\" }\n+constexpr int i3 = fn1 (5, sizeof (int) * __CHAR_BIT__); // { dg-error \"is >= than the precision of the left operand\" }\n+constexpr int i4 = fn1 (5, 256); // { dg-error \"is >= than the precision of the left operand\" }\n constexpr int i5 = fn1 (5, 2);\n-constexpr int i6 = fn1 (-2, 4);\n+constexpr int i6 = fn1 (-2, 4); // { dg-error \"is negative\" }\n constexpr int i7 = fn1 (0, 2);\n \n SA (i1 == 40);\n@@ -34,9 +34,9 @@ fn2 (int a, int b)\n }\n \n constexpr int j1 = fn2 (4, 1);\n-constexpr int j2 = fn2 (4, -1);\n-constexpr int j3 = fn2 (10, sizeof (int) * __CHAR_BIT__);\n-constexpr int j4 = fn2 (1, 256);\n+constexpr int j2 = fn2 (4, -1); // { dg-error \"is negative\" }\n+constexpr int j3 = fn2 (10, sizeof (int) * __CHAR_BIT__); // { dg-error \"is >= than the precision of the left operand\" }\n+constexpr int j4 = fn2 (1, 256); // { dg-error \"is >= than the precision of the left operand\" }\n constexpr int j5 = fn2 (5, 2);\n constexpr int j6 = fn2 (-2, 4);\n constexpr int j7 = fn2 (0, 4);"}]}