{"sha": "a7edae0a639463d706436863293c9f52632492b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlZGFlMGE2Mzk0NjNkNzA2NDM2ODYzMjkzYzlmNTI2MzI0OTJiNg==", "commit": {"author": {"name": "Mike Stump", "email": "mikestump@comcast.net", "date": "2011-01-14T19:37:16Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-01-14T19:37:16Z"}, "message": "alpha.md (umk_mismatch_args): Don't put a mode on set.\n\n\t* config/alpha/alpha.md (umk_mismatch_args): Don't put a mode on set.\n\t* config/fr30/fr30.md: Likweise\n\t(movsi_push): Likewise.\n\t(movsi_pop): Likewise.\n\t(enter_func): Likewise.\n\t* config/moxie/moxie.md (movsi_push): Likewise.\n\t(movsi_pop): Likewise.\n\nFrom-SVN: r168817", "tree": {"sha": "a222fb6ddff04eb30c76246f8073c1279c62f133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a222fb6ddff04eb30c76246f8073c1279c62f133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7edae0a639463d706436863293c9f52632492b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7edae0a639463d706436863293c9f52632492b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7edae0a639463d706436863293c9f52632492b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7edae0a639463d706436863293c9f52632492b6/comments", "author": null, "committer": null, "parents": [{"sha": "ed4ebabc902c38b6d93c8d88405fa38cbb081498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4ebabc902c38b6d93c8d88405fa38cbb081498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4ebabc902c38b6d93c8d88405fa38cbb081498"}], "stats": {"total": 198, "additions": 104, "deletions": 94}, "files": [{"sha": "5405de5823979c7603093af2e6fc85bfb0ea8f24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7edae0a639463d706436863293c9f52632492b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7edae0a639463d706436863293c9f52632492b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7edae0a639463d706436863293c9f52632492b6", "patch": "@@ -1,3 +1,13 @@\n+2011-01-14  Mike Stump  <mikestump@comcast.net>\n+\n+\t* config/alpha/alpha.md (umk_mismatch_args): Don't put a mode on set.\n+\t* config/fr30/fr30.md: Likweise\n+\t(movsi_push): Likewise.\n+\t(movsi_pop): Likewise.\n+\t(enter_func): Likewise.\n+\t* config/moxie/moxie.md (movsi_push): Likewise.\n+\t(movsi_pop): Likewise.\n+\n 2011-01-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/linux64.h (LINK_SPEC): Remove %{bestGnum}"}, {"sha": "04f3ff8cfe521ee3431e079adb776bd3b3cfaea4", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=a7edae0a639463d706436863293c9f52632492b6", "patch": "@@ -6910,13 +6910,13 @@\n ;; Load the CIW into r2 for calling __T3E_MISMATCH\n \n (define_expand \"umk_mismatch_args\"\n-  [(set:DI (match_dup 1) (mem:DI (plus:DI (reg:DI 15) (const_int -16))))\n-   (set:DI (match_dup 2) (mem:DI (plus:DI (match_dup 1) (const_int -32))))\n-   (set:DI (reg:DI 1) (match_operand:DI 0 \"const_int_operand\" \"\"))\n-   (set:DI (match_dup 3) (plus:DI (mult:DI (reg:DI 25)\n-\t\t\t\t\t   (const_int 8))\n-\t\t\t\t  (match_dup 2)))\n-   (set:DI (reg:DI 2) (mem:DI (match_dup 3)))]\n+  [(set (match_dup 1) (mem:DI (plus:DI (reg:DI 15) (const_int -16))))\n+   (set (match_dup 2) (mem:DI (plus:DI (match_dup 1) (const_int -32))))\n+   (set (reg:DI 1) (match_operand:DI 0 \"const_int_operand\" \"\"))\n+   (set (match_dup 3) (plus:DI (mult:DI (reg:DI 25)\n+\t\t\t\t\t(const_int 8))\n+\t\t\t       (match_dup 2)))\n+   (set (reg:DI 2) (mem:DI (match_dup 3)))]\n   \"TARGET_ABI_UNICOSMK\"\n {\n   operands[1] = gen_reg_rtx (DImode);"}, {"sha": "7f13ae49b9ba3091473be0822c442f8bcbc2b928", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=a7edae0a639463d706436863293c9f52632492b6", "patch": "@@ -551,7 +551,7 @@\n ;;\n ;; Note - you cannot use patterns like these here:\n ;;\n-;;   (set:<vector> (match:<vector>) (<comparator>:<vector> (match:<vector>) (match:<vector>)))\n+;;   (set (match:<vector>) (<comparator>:<vector> (match:<vector>) (match:<vector>)))\n ;;\n ;; Because GCC will assume that the truth value (1 or 0) is installed\n ;; into the entire destination vector, (with the '1' going into the least"}, {"sha": "f95559f3d4615cb9976165bb34761e715103ab8e", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=a7edae0a639463d706436863293c9f52632492b6", "patch": "@@ -140,16 +140,16 @@\n \n ;; Push a register onto the stack\n (define_insn \"movsi_push\"\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"register_operand\" \"a\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"register_operand\" \"a\"))]\n   \"\"\n   \"st\t%0, @-r15\"\n )\n \n ;; Pop a register off the stack\n (define_insn \"movsi_pop\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t   (mem:SI (post_inc:SI (reg:SI 15))))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))]\n   \"\"\n   \"ld\t@r15+, %0\"\n )\n@@ -292,8 +292,8 @@\n    \"INTVAL (operands[1]) <= -1 && INTVAL (operands[1]) >= -128\n     && (GET_CODE (operands[0]) != SUBREG\n \t|| SCALAR_INT_MODE_P (GET_MODE (XEXP (operands[0], 0))))\"\n-   [(set:SI (match_dup 0) (match_dup 1))\n-    (set:SI (match_dup 0) (sign_extend:SI (match_dup 2)))]\n+   [(set (match_dup 0) (match_dup 1))\n+    (set (match_dup 0) (sign_extend:SI (match_dup 2)))]\n    \"{\n    operands[1] = GEN_INT (INTVAL (operands[1]) & 0xff);\n    operands[2] = gen_lowpart (QImode, operands[0]);\n@@ -307,8 +307,8 @@\n   [(set (match_operand:SI 0 \"register_operand\"  \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n    \"(INTVAL (operands[1]) < 0) && ((INTVAL (operands[1]) & 0x00ffffff) == 0)\"\n-   [(set:SI (match_dup 0) (match_dup 2))\n-    (parallel [(set:SI (match_dup 0) (ashift:SI (match_dup 0) (const_int 24)))\n+   [(set (match_dup 0) (match_dup 2))\n+    (parallel [(set (match_dup 0) (ashift:SI (match_dup 0) (const_int 24)))\n \t       (clobber (reg:CC 16))])]\n    \"{\n    HOST_WIDE_INT val = INTVAL (operands[1]);\n@@ -325,8 +325,8 @@\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n    \"(INTVAL (operands[1]) > 0x00ffffff)\n    && ((INTVAL (operands[1]) >> exact_log2 (INTVAL (operands[1]) & (- INTVAL (operands[1])))) < 0x100)\"\n-   [(set:SI (match_dup 0) (match_dup 2))\n-    (parallel [(set:SI (match_dup 0) (ashift:SI (match_dup 0) (match_dup 3)))\n+   [(set (match_dup 0) (match_dup 2))\n+    (parallel [(set (match_dup 0) (ashift:SI (match_dup 0) (match_dup 3)))\n \t       (clobber (reg:CC 16))])]\n    \"{\n    HOST_WIDE_INT val = INTVAL (operands[1]);\n@@ -417,108 +417,108 @@\n ;; is during function prologues and epilogues.\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 2 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 3 \"high_register_operand\" \"h\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 2 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 3 \"high_register_operand\" \"h\"))]\n   \"fr30_check_multiple_regs (operands, 4, 1)\"\n   \"stm1\t(%0, %1, %2, %3)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 2 \"high_register_operand\" \"h\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 2 \"high_register_operand\" \"h\"))]\n   \"fr30_check_multiple_regs (operands, 3, 1)\"\n   \"stm1\t(%0, %1, %2)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"high_register_operand\" \"h\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"high_register_operand\" \"h\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"high_register_operand\" \"h\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"high_register_operand\" \"h\"))]\n   \"fr30_check_multiple_regs (operands, 2, 1)\"\n   \"stm1\t(%0, %1)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (match_operand:SI 0 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 1 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 2 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 3 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))]\n+  [(set (match_operand:SI 0 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 1 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 2 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 3 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))]\n   \"fr30_check_multiple_regs (operands, 4, 0)\"\n   \"ldm1\t(%0, %1, %2, %3)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (match_operand:SI 0 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 1 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 2 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))]\n+  [(set (match_operand:SI 0 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 1 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 2 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))]\n   \"fr30_check_multiple_regs (operands, 3, 0)\"\n   \"ldm1\t(%0, %1, %2)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (match_operand:SI 0 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))\n-   (set:SI (match_operand:SI 1 \"high_register_operand\" \"h\")\n-           (mem:SI (post_inc:SI (reg:SI 15))))]\n+  [(set (match_operand:SI 0 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))\n+   (set (match_operand:SI 1 \"high_register_operand\" \"h\")\n+\t(mem:SI (post_inc:SI (reg:SI 15))))]\n   \"fr30_check_multiple_regs (operands, 2, 0)\"\n   \"ldm1\t(%0, %1)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 2 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 3 \"low_register_operand\" \"l\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 2 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 3 \"low_register_operand\" \"l\"))]\n   \"fr30_check_multiple_regs (operands, 4, 1)\"\n   \"stm0\t(%0, %1, %2, %3)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 2 \"low_register_operand\" \"l\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 2 \"low_register_operand\" \"l\"))]\n   \"fr30_check_multiple_regs (operands, 3, 1)\"\n   \"stm0\t(%0, %1, %2)\"\n   [(set_attr \"delay_type\" \"other\")]\n )\n \n (define_peephole\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-\t   (match_operand:SI 0 \"low_register_operand\" \"l\"))\n-   (set:SI (mem:SI (pre_dec:SI (reg:SI 15)))\n-           (match_operand:SI 1 \"low_register_operand\" \"l\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 0 \"low_register_operand\" \"l\"))\n+   (set (mem:SI (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SI 1 \"low_register_operand\" \"l\"))]\n   \"fr30_check_multiple_regs (operands, 2, 1)\"\n   \"stm0\t(%0, %1)\"\n   [(set_attr \"delay_type\" \"other\")]\n@@ -1210,15 +1210,15 @@\n \n (define_expand \"enter_func\"\n   [(parallel\n-  [(set:SI (mem:SI (minus:SI (match_dup 1)\n-\t\t\t     (const_int 4)))\n-\t   (match_dup 2))\n-   (set:SI (match_dup 2)\n-\t   (minus:SI (match_dup 1)\n-\t\t     (const_int 4)))\n-   (set:SI (match_dup 1)\n-\t   (minus:SI (match_dup 1)\n-\t\t     (match_operand:SI 0 \"immediate_operand\")))]\n+  [(set (mem:SI (minus:SI (match_dup 1)\n+\t\t\t  (const_int 4)))\n+\t(match_dup 2))\n+   (set (match_dup 2)\n+\t(minus:SI (match_dup 1)\n+\t\t  (const_int 4)))\n+   (set (match_dup 1)\n+\t(minus:SI (match_dup 1)\n+\t\t  (match_operand:SI 0 \"immediate_operand\")))]\n   )]\n   \"\"\n {\n@@ -1227,15 +1227,15 @@\n })\n \n (define_insn \"*enter_func\"\n-  [(set:SI (mem:SI (minus:SI (reg:SI 15)\n-\t\t\t     (const_int 4)))\n-\t   (reg:SI 14))\n-   (set:SI (reg:SI 14)\n-\t   (minus:SI (reg:SI 15)\n-\t\t     (const_int 4)))\n-   (set:SI (reg:SI 15)\n-\t   (minus:SI (reg:SI 15)\n-\t\t     (match_operand 0 \"immediate_operand\" \"i\")))]\n+  [(set (mem:SI (minus:SI (reg:SI 15)\n+\t\t\t  (const_int 4)))\n+\t(reg:SI 14))\n+   (set (reg:SI 14)\n+\t(minus:SI (reg:SI 15)\n+\t\t  (const_int 4)))\n+   (set (reg:SI 15)\n+\t(minus:SI (reg:SI 15)\n+\t\t  (match_operand 0 \"immediate_operand\" \"i\")))]\n   \"reload_completed\"\n   \"enter\t#%0\"\n   [(set_attr \"delay_type\" \"other\")]"}, {"sha": "64f8395cb7ba3715b0e610668c70140098ae6cfa", "filename": "gcc/config/moxie/moxie.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7edae0a639463d706436863293c9f52632492b6/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.md?ref=a7edae0a639463d706436863293c9f52632492b6", "patch": "@@ -188,15 +188,15 @@\n \n ;; Push a register onto the stack\n (define_insn \"movsi_push\"\n-  [(set:SI (mem:SI (pre_dec:SI (reg:SI 1)))\n-\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n+  [(set (mem:SI (pre_dec:SI (reg:SI 1)))\n+  \t(match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"push   $sp, %0\")\n \n ;; Pop a register from the stack\n (define_insn \"movsi_pop\"\n-  [(set:SI (match_operand:SI 1 \"register_operand\" \"=r\")\n-\t(mem:SI (post_inc:SI (match_operand:SI 0 \"register_operand\" \"r\"))))]\n+  [(set (match_operand:SI 1 \"register_operand\" \"=r\")\n+  \t(mem:SI (post_inc:SI (match_operand:SI 0 \"register_operand\" \"r\"))))]\n   \"\"\n   \"pop    %0, %1\")\n "}]}