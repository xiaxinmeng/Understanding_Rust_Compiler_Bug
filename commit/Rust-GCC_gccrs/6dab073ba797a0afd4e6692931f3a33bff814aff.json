{"sha": "6dab073ba797a0afd4e6692931f3a33bff814aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhYjA3M2JhNzk3YTBhZmQ0ZTY2OTI5MzFmM2EzM2JmZjgxNGFmZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-04-13T01:41:26Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-04-13T01:41:26Z"}, "message": "* configure: Regenerate.\n\nFrom-SVN: r98065", "tree": {"sha": "9cddf2af3790ca14b177c7d404d73aa11e55a25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cddf2af3790ca14b177c7d404d73aa11e55a25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dab073ba797a0afd4e6692931f3a33bff814aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dab073ba797a0afd4e6692931f3a33bff814aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dab073ba797a0afd4e6692931f3a33bff814aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dab073ba797a0afd4e6692931f3a33bff814aff/comments", "author": null, "committer": null, "parents": [{"sha": "bf070c29a3b852d9bd53afaff84c691a44365a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf070c29a3b852d9bd53afaff84c691a44365a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf070c29a3b852d9bd53afaff84c691a44365a6c"}], "stats": {"total": 544, "additions": 532, "deletions": 12}, "files": [{"sha": "bc73cc4f86c65943c750e8d3598b5333748275f4", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-04-12  Richard Henderson  <rth@redhat.com>\n \n \t* include/private/gcconfig.h (alpha-linux): Use LINUX_STACKBOTTOM."}, {"sha": "5b5490562629f77848f35b2ffee2f719c9c2216f", "filename": "boehm-gc/configure", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -4379,6 +4379,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -4712,7 +4773,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4715 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4776 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "a9c2c070104e7690d8d7f520520109b82c0b803e", "filename": "libffi/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-03-30  Hans Boehm  <Hans.Boehm@hp.com>\n \n \t* src/ia64/ffitarget.h (ffi_arg): Use long long instead of DI."}, {"sha": "9de0e6f6d0522e4db901537382a0467b48ff5e13", "filename": "libffi/configure", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -3516,6 +3516,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -3849,7 +3910,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 3852 \"configure\"' > conftest.$ac_ext\n+  echo '#line 3913 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "5553575a8b3d5c794c1dd5df10355634cca251fd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-04-13  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/19106"}, {"sha": "15c5cdfe7ed3840f5673e380ecd7866f332cbab5", "filename": "libgfortran/configure", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -3692,6 +3692,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -4025,7 +4086,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4028 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4089 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4411,7 +4472,7 @@ fi\n \n \n # Provide some information about the compiler.\n-echo \"$as_me:4414:\" \\\n+echo \"$as_me:4475:\" \\\n      \"checking for Fortran compiler version\" >&5\n ac_compiler=`set X $ac_compile; echo $2`\n { (eval echo \"$as_me:$LINENO: \\\"$ac_compiler --version </dev/null >&5\\\"\") >&5"}, {"sha": "c432f76bfb913188f100d50c00da0dde4f9b2b4d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-04-12  Aaron Luchko  <aluchko@redhat.com>\n \n \tPR libgcj/20958"}, {"sha": "3770c8e715ab649922c2f8b3c9ba7a178ef57d15", "filename": "libjava/configure", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -4435,6 +4435,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -4768,7 +4829,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4771 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4832 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5812,7 +5873,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 5815 \"configure\"\n+#line 5876 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "f8a5162af24c4d4e183b35d5bbfced453a245129", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-04-12  Frank Ch. Eigler  <fche@redhat.com>\n \n \tPR mudflap/19266"}, {"sha": "de032ecd2cb901385196c75e8b13687fee142776", "filename": "libmudflap/configure", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -5437,6 +5437,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -5770,7 +5831,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 5773 \"configure\"' > conftest.$ac_ext\n+  echo '#line 5834 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "3588ed8838fed4a2fbc047ac1e6fdb5194bbdbe5", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-03-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in: Set gcc_version here."}, {"sha": "5b7c9b958d5f4c641e81d82653a1414741792035", "filename": "libobjc/configure", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -3362,6 +3362,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -3695,7 +3756,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 3698 \"configure\"' > conftest.$ac_ext\n+  echo '#line 3759 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5123,7 +5184,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 5126 \"configure\"\n+#line 5187 \"configure\"\n @interface Frob\n @end\n @implementation Frob"}, {"sha": "341ef0b2cbae859e36a2e57635610e2a76491990", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2005-04-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/Makefile.am: Remove libv3test.a."}, {"sha": "4cf3a523d94f80e9641b2204820af5f71df91170", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -4045,6 +4045,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -4378,7 +4439,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4381 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4442 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4998,7 +5059,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5001 \"configure\"\n+#line 5062 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "f8680bdcb5424683be871faacc59d33eed26ecf2", "filename": "zlib/ChangeLog.gcj", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/zlib%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/zlib%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog.gcj?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -1,3 +1,7 @@\n+2005-04-12  Mike Stump  <mrs@apple.com>\n+\n+\t* configure: Regenerate.\n+\n 2004-11-24  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* configure: Regenerate for libtool change."}, {"sha": "684655dce1b8492ffb1387dab699ceba8816e6a3", "filename": "zlib/configure", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dab073ba797a0afd4e6692931f3a33bff814aff/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dab073ba797a0afd4e6692931f3a33bff814aff/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=6dab073ba797a0afd4e6692931f3a33bff814aff", "patch": "@@ -3485,6 +3485,67 @@ deplibs_check_method=$lt_cv_deplibs_check_method\n \n # Autoconf 2.13's AC_OBJEXT and AC_EXEEXT macros only works for C compilers!\n \n+# find the maximum length of command line arguments\n+echo \"$as_me:$LINENO: checking the maximum length of command line arguments\" >&5\n+echo $ECHO_N \"checking the maximum length of command line arguments... $ECHO_C\" >&6\n+if test \"${lt_cv_sys_max_cmd_len+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+    i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  esac\n+\n+fi\n+\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  echo \"$as_me:$LINENO: result: $lt_cv_sys_max_cmd_len\" >&5\n+echo \"${ECHO_T}$lt_cv_sys_max_cmd_len\" >&6\n+else\n+  echo \"$as_me:$LINENO: result: none\" >&5\n+echo \"${ECHO_T}none\" >&6\n+fi\n+\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -3818,7 +3879,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 3821 \"configure\"' > conftest.$ac_ext\n+  echo '#line 3882 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}]}