{"sha": "0dd498e41740b36910ba6688dfbc7dfb683493e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkNDk4ZTQxNzQwYjM2OTEwYmE2Njg4ZGZiYzdkZmI2ODM0OTNlOQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-26T15:47:05Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-26T15:47:05Z"}, "message": "[ARM/AArch64][testsuite] Add vpadd, vpmax and vpmin tests.\n\n2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpadd.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpmax.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpmin.c: New file.\n\nFrom-SVN: r220119", "tree": {"sha": "9dc3b3c18e572d9eb3ab327827f4b4e4a06a8f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc3b3c18e572d9eb3ab327827f4b4e4a06a8f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd498e41740b36910ba6688dfbc7dfb683493e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd498e41740b36910ba6688dfbc7dfb683493e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd498e41740b36910ba6688dfbc7dfb683493e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd498e41740b36910ba6688dfbc7dfb683493e9/comments", "author": null, "committer": null, "parents": [{"sha": "a9f53b60f16ea7db457e996b039587fa0b2b6213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f53b60f16ea7db457e996b039587fa0b2b6213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f53b60f16ea7db457e996b039587fa0b2b6213"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "7c9ed94460175c94b01d41087e716acccb8a49f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dd498e41740b36910ba6688dfbc7dfb683493e9", "patch": "@@ -1,3 +1,10 @@\n+2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpadd.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpmax.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpmin.c: New file.\n+\n 2015-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vmlX_n.inc: New file."}, {"sha": "c1b723526ba725e6ec1a3da67cdb41c6a52ccb3b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc?ref=0dd498e41740b36910ba6688dfbc7dfb683493e9", "patch": "@@ -0,0 +1,67 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=OP(x), then store the result.  */\n+#define TEST_VPXXX1(INSN, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n+\t\t   VECT_VAR(vector, T1, W, N));\t\t\t\t\\\n+  vst1##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_VPXXX(INSN, T1, T2, W, N)\t\t\\\n+  TEST_VPXXX1(INSN, T1, T2, W, N)\t\t\\\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, uint, 8, 8);\n+  DECL_VARIABLE(vector, uint, 16, 4);\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  VLOAD(vector, buffer, , int, s, 8, 8);\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, , uint, u, 8, 8);\n+  VLOAD(vector, buffer, , uint, u, 16, 4);\n+  VLOAD(vector, buffer, , uint, u, 32, 2);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+\n+  /* Apply a binary operator named INSN_NAME.  */\n+  TEST_VPXXX(INSN_NAME, int, s, 8, 8);\n+  TEST_VPXXX(INSN_NAME, int, s, 16, 4);\n+  TEST_VPXXX(INSN_NAME, int, s, 32, 2);\n+  TEST_VPXXX(INSN_NAME, uint, u, 8, 8);\n+  TEST_VPXXX(INSN_NAME, uint, u, 16, 4);\n+  TEST_VPXXX(INSN_NAME, uint, u, 32, 2);\n+  TEST_VPXXX(INSN_NAME, float, f, 32, 2);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "5ddfd3d8456faf67b4296c74ce19e8e9cb81ede0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpadd.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c?ref=0dd498e41740b36910ba6688dfbc7dfb683493e9", "patch": "@@ -0,0 +1,19 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vpadd\n+#define TEST_MSG \"VPADD\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t       0xe1, 0xe5, 0xe9, 0xed };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffe1, 0xffe5, 0xffe1, 0xffe5 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffe1, 0xffffffe1 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t\t0xe1, 0xe5, 0xe9, 0xed };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffe1, 0xffe5, 0xffe1, 0xffe5 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffe1, 0xffffffe1 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1f80000, 0xc1f80000 };\n+\n+#include \"vpXXX.inc\""}, {"sha": "f27a9a9ec592ebfe97728d48347de61e5c44af98", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpmax.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c?ref=0dd498e41740b36910ba6688dfbc7dfb683493e9", "patch": "@@ -0,0 +1,20 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+\n+#define INSN_NAME vpmax\n+#define TEST_MSG \"VPMAX\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf1, 0xf3, 0xf5, 0xf7,\n+\t\t\t\t       0xf1, 0xf3, 0xf5, 0xf7 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff1, 0xfff3, 0xfff1, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf1, 0xf3, 0xf5, 0xf7,\n+\t\t\t\t\t0xf1, 0xf3, 0xf5, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff3, 0xfff1, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n+\n+#include \"vpXXX.inc\""}, {"sha": "a7cb6966c6ef0c8ed681775e54851268d2f567cc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpmin.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd498e41740b36910ba6688dfbc7dfb683493e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c?ref=0dd498e41740b36910ba6688dfbc7dfb683493e9", "patch": "@@ -0,0 +1,20 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+\n+#define INSN_NAME vpmin\n+#define TEST_MSG \"VPMIN\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf2, 0xf4, 0xf6,\n+\t\t\t\t       0xf0, 0xf2, 0xf4, 0xf6 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff2, 0xfff0, 0xfff2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf2, 0xf4, 0xf6,\n+\t\t\t\t\t0xf0, 0xf2, 0xf4, 0xf6 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff2, 0xfff0, 0xfff2 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1800000 };\n+\n+#include \"vpXXX.inc\""}]}