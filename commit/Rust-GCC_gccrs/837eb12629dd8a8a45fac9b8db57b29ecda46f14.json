{"sha": "837eb12629dd8a8a45fac9b8db57b29ecda46f14", "node_id": "C_kwDOANBUbNoAKDgzN2ViMTI2MjlkZDhhOGE0NWZhYzliOGRiNTdiMjllY2RhNDZmMTQ", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-17T04:18:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-17T04:21:48Z"}, "message": "libbacktrace: gather address ranges from skeleton units\n\n\t* dwarf.c (find_address_ranges): Handle skeleton units.\n\t(read_function_entry): Likewise.", "tree": {"sha": "a690b84e725e0c8c3ab35c53f16f3e156d1f10d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a690b84e725e0c8c3ab35c53f16f3e156d1f10d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837eb12629dd8a8a45fac9b8db57b29ecda46f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837eb12629dd8a8a45fac9b8db57b29ecda46f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837eb12629dd8a8a45fac9b8db57b29ecda46f14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837eb12629dd8a8a45fac9b8db57b29ecda46f14/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "687e57d7ac741d1c48ac030f87041aa56b888532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687e57d7ac741d1c48ac030f87041aa56b888532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687e57d7ac741d1c48ac030f87041aa56b888532"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "45cc9e77e402928e89a94a53020aec136f531dec", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837eb12629dd8a8a45fac9b8db57b29ecda46f14/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837eb12629dd8a8a45fac9b8db57b29ecda46f14/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=837eb12629dd8a8a45fac9b8db57b29ecda46f14", "patch": "@@ -1989,42 +1989,48 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \t      break;\n \n \t    case DW_AT_stmt_list:\n-\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t      if ((abbrev->tag == DW_TAG_compile_unit\n+\t\t   || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t  && (val.encoding == ATTR_VAL_UINT\n \t\t      || val.encoding == ATTR_VAL_REF_SECTION))\n \t\tu->lineoff = val.u.uint;\n \t      break;\n \n \t    case DW_AT_name:\n-\t      if (abbrev->tag == DW_TAG_compile_unit)\n+\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t\t  || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t{\n \t\t  name_val = val;\n \t\t  have_name_val = 1;\n \t\t}\n \t      break;\n \n \t    case DW_AT_comp_dir:\n-\t      if (abbrev->tag == DW_TAG_compile_unit)\n+\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t\t  || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t{\n \t\t  comp_dir_val = val;\n \t\t  have_comp_dir_val = 1;\n \t\t}\n \t      break;\n \n \t    case DW_AT_str_offsets_base:\n-\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t      if ((abbrev->tag == DW_TAG_compile_unit\n+\t\t   || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t  && val.encoding == ATTR_VAL_REF_SECTION)\n \t\tu->str_offsets_base = val.u.uint;\n \t      break;\n \n \t    case DW_AT_addr_base:\n-\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t      if ((abbrev->tag == DW_TAG_compile_unit\n+\t\t   || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t  && val.encoding == ATTR_VAL_REF_SECTION)\n \t\tu->addr_base = val.u.uint;\n \t      break;\n \n \t    case DW_AT_rnglists_base:\n-\t      if (abbrev->tag == DW_TAG_compile_unit\n+\t      if ((abbrev->tag == DW_TAG_compile_unit\n+\t\t   || abbrev->tag == DW_TAG_skeleton_unit)\n \t\t  && val.encoding == ATTR_VAL_REF_SECTION)\n \t\tu->rnglists_base = val.u.uint;\n \t      break;\n@@ -2052,17 +2058,19 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \t}\n \n       if (abbrev->tag == DW_TAG_compile_unit\n-\t  || abbrev->tag == DW_TAG_subprogram)\n+\t  || abbrev->tag == DW_TAG_subprogram\n+\t  || abbrev->tag == DW_TAG_skeleton_unit)\n \t{\n \t  if (!add_ranges (state, dwarf_sections, base_address,\n \t\t\t   is_bigendian, u, pcrange.lowpc, &pcrange,\n \t\t\t   add_unit_addr, (void *) u, error_callback, data,\n \t\t\t   (void *) addrs))\n \t    return 0;\n \n-\t  /* If we found the PC range in the DW_TAG_compile_unit, we\n-\t     can stop now.  */\n-\t  if (abbrev->tag == DW_TAG_compile_unit\n+\t  /* If we found the PC range in the DW_TAG_compile_unit or\n+\t     DW_TAG_skeleton_unit, we can stop now.  */\n+\t  if ((abbrev->tag == DW_TAG_compile_unit\n+\t       || abbrev->tag == DW_TAG_skeleton_unit)\n \t      && (pcrange.have_ranges\n \t\t  || (pcrange.have_lowpc && pcrange.have_highpc)))\n \t    return 1;\n@@ -3274,7 +3282,8 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \n \t  /* The compile unit sets the base address for any address\n \t     ranges in the function entries.  */\n-\t  if (abbrev->tag == DW_TAG_compile_unit\n+\t  if ((abbrev->tag == DW_TAG_compile_unit\n+\t       || abbrev->tag == DW_TAG_skeleton_unit)\n \t      && abbrev->attrs[i].name == DW_AT_low_pc)\n \t    {\n \t      if (val.encoding == ATTR_VAL_ADDRESS)"}]}