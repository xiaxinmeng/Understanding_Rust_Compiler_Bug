{"sha": "aa45967f76ad4641556288a415eaceaf2269c9d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0NTk2N2Y3NmFkNDY0MTU1NjI4OGE0MTVlYWNlYWYyMjY5YzlkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-28T01:53:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-28T01:53:50Z"}, "message": "call.c (add_function_candidate): Treat conversion functions as coming from the argument's class.\n\n\t* call.c (add_function_candidate): Treat conversion functions\n\tas coming from the argument's class.\n\t* cp-tree.h (DECL_CONV_FN_P): New fn.\n\t(DECL_DESTRUCTOR_P): Also check DECL_LANGUAGE.\n\t* class.c (add_method): Use DECL_CONV_FN_P.\n\t* decl2.c (check_classfn): Likewise.\n\t* error.c (dump_function_name): Likewise.\n\t(dump_function_decl): Likewise.\n\t* pt.c (fn_type_unification): Likewise.\n\t* search.c (add_conversions): Likewise.\n\nFrom-SVN: r23387", "tree": {"sha": "7eef74f4242089b2072e082e3cc77e5aef19ad5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eef74f4242089b2072e082e3cc77e5aef19ad5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa45967f76ad4641556288a415eaceaf2269c9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa45967f76ad4641556288a415eaceaf2269c9d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa45967f76ad4641556288a415eaceaf2269c9d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa45967f76ad4641556288a415eaceaf2269c9d5/comments", "author": null, "committer": null, "parents": [{"sha": "b58c9a790af44c27c4bdc15106d4685f8d38f831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58c9a790af44c27c4bdc15106d4685f8d38f831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b58c9a790af44c27c4bdc15106d4685f8d38f831"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "b47514b0563fb49c5c840141e0bf107672ba253c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -1,3 +1,16 @@\n+1998-10-28  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (add_function_candidate): Treat conversion functions\n+\tas coming from the argument's class.\n+\t* cp-tree.h (DECL_CONV_FN_P): New fn.\n+\t(DECL_DESTRUCTOR_P): Also check DECL_LANGUAGE.\n+\t* class.c (add_method): Use DECL_CONV_FN_P.\n+\t* decl2.c (check_classfn): Likewise.\n+\t* error.c (dump_function_name): Likewise.\n+\t(dump_function_decl): Likewise.\n+\t* pt.c (fn_type_unification): Likewise.\n+\t* search.c (add_conversions): Likewise.\n+\n 1998-10-27  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* lex.c (do_identifier): Also generate LOOKUP_EXPR for RESULT_DECL."}, {"sha": "37847845b37042dfee178df5ba9c394ceefe2846", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -1150,8 +1150,28 @@ add_function_candidate (candidates, fn, arglist, flags)\n \n       if (parmnode == void_list_node)\n \tbreak;\n-      else if (parmnode)\n-\tt = implicit_conversion (TREE_VALUE (parmnode), argtype, arg, flags);\n+\n+      if (parmnode)\n+\t{\n+\t  tree parmtype = TREE_VALUE (parmnode);\n+\n+\t  /* [over.match.funcs] For conversion functions, the function is\n+\t     considered to be a member of the class of the implicit object\n+\t     argument for the purpose of defining the type of the implicit\n+\t     object parameter.\n+\n+\t     Since build_over_call ignores the ICS for the `this' parameter,\n+\t     we can just change the parm type.  */\n+\t  if (DECL_CONV_FN_P (fn) && i == 0)\n+\t    {\n+\t      parmtype\n+\t\t= build_qualified_type (TREE_TYPE (argtype),\n+\t\t\t\t\tTYPE_QUALS (TREE_TYPE (parmtype)));\n+\t      parmtype = build_pointer_type (parmtype);\n+\t    }\n+\n+\t  t = implicit_conversion (parmtype, argtype, arg, flags);\n+\t}\n       else\n \t{\n \t  t = build1 (IDENTITY_CONV, argtype, arg);"}, {"sha": "9180e64c9e4f82eb500ecfdd4cce12a1fabc4912", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -1229,7 +1229,7 @@ add_method (type, fields, method)\n \t\t}\n \t    }\n \n-\t  if (IDENTIFIER_TYPENAME_P (DECL_NAME (method)))\n+\t  if (DECL_CONV_FN_P (method))\n \t    {\n \t      /* Type conversion operators have to come before\n \t\t ordinary methods; add_conversions depends on this to\n@@ -1240,15 +1240,13 @@ add_method (type, fields, method)\n \t      for (i = 2; i < len; ++i)\n \t\t{\n \t\t  tree fn = TREE_VEC_ELT (method_vec, i);\n-\t\t  tree name;\n \n \t\t  if (!fn)\n \t\t    /* There are no more entries in the vector, so we\n \t\t       can insert the new conversion operator here.  */\n \t\t    break;\n \t\t  \n-\t\t  name = DECL_NAME (OVL_CURRENT (fn));\n-\t\t  if (!IDENTIFIER_TYPENAME_P (name))\n+\t\t  if (! DECL_CONV_FN_P (OVL_CURRENT (fn)))\n \t\t    /* We can insert the new function right at the Ith\n \t\t       position.  */\n \t\t    break;"}, {"sha": "61593d58dfee361e85f5cba133114a3aa53a4ddc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -1128,7 +1128,15 @@ struct lang_decl\n \n /* For FUNCTION_DECLs: nonzero means that this function is a constructor.  */\n #define DECL_CONSTRUCTOR_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.constructor_attr)\n-#define DECL_DESTRUCTOR_P(NODE) (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME(NODE)))\n+\n+/* There ought to be a better way to find out whether or not something is\n+   a destructor.  */\n+#define DECL_DESTRUCTOR_P(NODE)\t\t\t\t\\\n+  (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (NODE))\t\\\n+   && DECL_LANGUAGE (NODE) == lang_cplusplus)\n+\n+#define DECL_CONV_FN_P(NODE)\t\t\t\t\t\t     \\\n+  (IDENTIFIER_TYPENAME_P (DECL_NAME (NODE)) && TREE_TYPE (DECL_NAME (NODE)))\n \n /* For FUNCTION_DECLs: nonzero means that this function is a constructor\n    for an object with virtual baseclasses.  */"}, {"sha": "b16eb04648c0af8f8b486344add133ca1a309303", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -1426,8 +1426,8 @@ check_classfn (ctype, function)\n \t      break;\t\t/* loser */\n \t    }\n \t  else if (TREE_CODE (fndecl) == TEMPLATE_DECL \n-\t\t   && IDENTIFIER_TYPENAME_P (DECL_NAME (fndecl))\n-\t\t   && IDENTIFIER_TYPENAME_P (fn_name))\n+\t\t   && DECL_CONV_FN_P (fndecl)\n+\t\t   && DECL_CONV_FN_P (function))\n \t    /* The method in the class is a member template\n \t       conversion operator.  We are declaring another\n \t       conversion operator.  It is possible that even though"}, {"sha": "13469c0e1eaf999d166bd4dcc959042b1798ce2b", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -978,9 +978,9 @@ dump_function_decl (t, v)\n       if (DECL_STATIC_FUNCTION_P (t))\n \tOB_PUTS (\"static \");\n     \n-      if (! IDENTIFIER_TYPENAME_P (name)\n+      if (! DECL_CONV_FN_P (t)\n \t  && ! DECL_CONSTRUCTOR_P (t)\n-\t  && ! DESTRUCTOR_NAME_P (name))\n+\t  && ! DECL_DESTRUCTOR_P (t))\n \t{\n \t  dump_type_prefix (TREE_TYPE (fntype), 1, 0);\n \t  OB_PUTC (' ');\n@@ -1012,7 +1012,7 @@ dump_function_decl (t, v)\n \n   OB_PUTC (')');\n \n-  if (v && ! IDENTIFIER_TYPENAME_P (name))\n+  if (v && ! DECL_CONV_FN_P (t))\n     dump_type_suffix (TREE_TYPE (fntype), 1, 0);\n \n   if (TREE_CODE (fntype) == METHOD_TYPE)\n@@ -1036,15 +1036,12 @@ dump_function_name (t)\n {\n   tree name = DECL_NAME (t);\n \n-  /* There ought to be a better way to find out whether or not something is\n-     a destructor.  */\n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (t))\n-      && DECL_LANGUAGE (t) == lang_cplusplus)\n+  if (DECL_DESTRUCTOR_P (t))\n     {\n       OB_PUTC ('~');\n       dump_decl (name, 0);\n     }\n-  else if (IDENTIFIER_TYPENAME_P (name))\n+  else if (DECL_CONV_FN_P (t))\n     {\n       /* This cannot use the hack that the operator's return\n \t type is stashed off of its name because it may be"}, {"sha": "c0726b74e9ab355a277132227578f148b861d75a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -6565,7 +6565,7 @@ fn_type_unification (fn, explicit_targs, targs, args, return_type,\n \n   parms = TYPE_ARG_TYPES (TREE_TYPE (fn));\n \n-  if (IDENTIFIER_TYPENAME_P (DECL_NAME (fn))) \n+  if (DECL_CONV_FN_P (fn))\n     {\n       /* This is a template conversion operator.  Use the return types\n          as well as the argument types.  */"}, {"sha": "26599f12ec0383717210707a602b43540eac3673", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa45967f76ad4641556288a415eaceaf2269c9d5/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=aa45967f76ad4641556288a415eaceaf2269c9d5", "patch": "@@ -3295,8 +3295,7 @@ add_conversions (binfo)\n     {\n       tree tmp = TREE_VEC_ELT (method_vec, i);\n \n-      if (!tmp\n-\t  || !IDENTIFIER_TYPENAME_P (DECL_NAME (OVL_CURRENT (tmp))))\n+      if (!tmp || ! DECL_CONV_FN_P (OVL_CURRENT (tmp)))\n \tbreak;\n       conversions = scratch_tree_cons (binfo, tmp, conversions);\n     }"}]}