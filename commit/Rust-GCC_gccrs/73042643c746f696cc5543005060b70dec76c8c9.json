{"sha": "73042643c746f696cc5543005060b70dec76c8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwNDI2NDNjNzQ2ZjY5NmNjNTU0MzAwNTA2MGI3MGRlYzc2YzhjOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-06-10T17:35:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-06-10T17:35:37Z"}, "message": "re PR c++/10611 (operations on vector mode not recognized in C++)\n\n        PR c++/10611\n        * cvt.c (build_expr_type_conversion): Same.\n        * typeck.c (build_binary_op): Handle vectors.\n        (common_type): Same.\n        (type_after_usual_arithmetic_conversions): Same.\n        * testsuite/g++.dg/conversion/simd2.C: New.\n\nFrom-SVN: r100823", "tree": {"sha": "8e76f474f73f6ace9abd341e328bd05c0145618f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e76f474f73f6ace9abd341e328bd05c0145618f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73042643c746f696cc5543005060b70dec76c8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73042643c746f696cc5543005060b70dec76c8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73042643c746f696cc5543005060b70dec76c8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73042643c746f696cc5543005060b70dec76c8c9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8103b9fe2ecc084b253fd0780ff5344703dfb7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8103b9fe2ecc084b253fd0780ff5344703dfb7a"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "82b0ee281fd2ee1e2dadc63701cc712aed9bea2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73042643c746f696cc5543005060b70dec76c8c9", "patch": "@@ -1,3 +1,12 @@\n+2005-06-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR c++/10611\n+\t* cvt.c (build_expr_type_conversion): Same.\n+\t* typeck.c (build_binary_op): Handle vectors.\n+\t(common_type): Same.\n+\t(type_after_usual_arithmetic_conversions): Same.\n+\t* testsuite/g++.dg/conversion/simd2.C: New.\n+\n 2005-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/19497"}, {"sha": "c7ffb166f8135c9b00703c8afa1e017e7d433010", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=73042643c746f696cc5543005060b70dec76c8c9", "patch": "@@ -1061,6 +1061,7 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \t  return expr;\n \t/* else fall through...  */\n \n+      case VECTOR_TYPE:\n       case BOOLEAN_TYPE:\n \treturn (desires & WANT_INT) ? expr : NULL_TREE;\n       case ENUMERAL_TYPE:"}, {"sha": "bddae511ae64e32e37d6531daeb8e526875e3a63", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=73042643c746f696cc5543005060b70dec76c8c9", "patch": "@@ -249,9 +249,11 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n   /* FIXME: Attributes.  */\n   gcc_assert (ARITHMETIC_TYPE_P (t1) \n \t      || TREE_CODE (t1) == COMPLEX_TYPE\n+\t      || TREE_CODE (t1) == VECTOR_TYPE\n \t      || TREE_CODE (t1) == ENUMERAL_TYPE);\n   gcc_assert (ARITHMETIC_TYPE_P (t2) \n \t      || TREE_CODE (t2) == COMPLEX_TYPE\n+\t      || TREE_CODE (t1) == VECTOR_TYPE\n \t      || TREE_CODE (t2) == ENUMERAL_TYPE);\n \n   /* In what follows, we slightly generalize the rules given in [expr] so\n@@ -278,6 +280,16 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n \t\t\t\t\t     attributes);\n     }\n \n+  if (code1 == VECTOR_TYPE)\n+    {\n+      /* When we get here we should have two vectors of the same size.\n+\t Just prefer the unsigned one if present.  */\n+      if (TYPE_UNSIGNED (t1))\n+\treturn build_type_attribute_variant (t1, attributes);\n+      else\n+\treturn build_type_attribute_variant (t2, attributes);\n+    }\n+\n   /* If only one is real, use it as the result.  */\n   if (code1 == REAL_TYPE && code2 != REAL_TYPE)\n     return build_type_attribute_variant (t1, attributes);\n@@ -735,9 +747,9 @@ common_type (tree t1, tree t2)\n   code2 = TREE_CODE (t2);\n \n   if ((ARITHMETIC_TYPE_P (t1) || code1 == ENUMERAL_TYPE\n-       || code1 == COMPLEX_TYPE)\n+       || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE)\n       && (ARITHMETIC_TYPE_P (t2) || code2 == ENUMERAL_TYPE\n-\t  || code2 == COMPLEX_TYPE))\n+\t  || code2 == COMPLEX_TYPE || code2 == VECTOR_TYPE))\n     return type_after_usual_arithmetic_conversions (t1, t2);\n \n   else if ((TYPE_PTR_P (t1) && TYPE_PTR_P (t2))\n@@ -2902,7 +2914,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case BIT_AND_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n-      if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+      if ((code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n+\t  || (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE))\n \tshorten = -1;\n       break;\n \n@@ -3158,10 +3171,21 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       break;\n     }\n \n-  arithmetic_types_p = \n-    ((code0 == INTEGER_TYPE || code0 == REAL_TYPE || code0 == COMPLEX_TYPE)\n-     && (code1 == INTEGER_TYPE || code1 == REAL_TYPE \n-\t || code1 == COMPLEX_TYPE));\n+  if (((code0 == INTEGER_TYPE || code0 == REAL_TYPE || code0 == COMPLEX_TYPE)\n+       && (code1 == INTEGER_TYPE || code1 == REAL_TYPE \n+\t   || code1 == COMPLEX_TYPE)))\n+    arithmetic_types_p = 1;\n+  else\n+    {\n+      arithmetic_types_p = 0;\n+      /* Vector arithmetic is only allowed when both sides are vectors.  */\n+      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n+\t{\n+\t  if (!tree_int_cst_equal (TYPE_SIZE (type0), TYPE_SIZE (type1)))\n+\t    error (\"can't convert between vector values of different size\");\n+\t  arithmetic_types_p = 1;\n+\t}\n+    }\n   /* Determine the RESULT_TYPE, if it is not already known.  */\n   if (!result_type\n       && arithmetic_types_p "}, {"sha": "a67df561ebd42a6493304b898b0ebb397955ea24", "filename": "gcc/testsuite/g++.dg/conversion/simd2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73042643c746f696cc5543005060b70dec76c8c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd2.C?ref=73042643c746f696cc5543005060b70dec76c8c9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+/* Test generic operations on vectors.  */\n+\n+int __attribute__((vector_size(16))) a, b, c;\n+int __attribute__((vector_size(8))) d;\n+void foo()\n+{\n+     a = b ^ c;\n+     a = b + c;\n+     a = b - c;\n+     a = b * c;\n+     a = b / c;\n+     a = -b;\n+     a = d + b;\t\t/* { dg-error \"can't convert between vector\" } */\n+} "}]}