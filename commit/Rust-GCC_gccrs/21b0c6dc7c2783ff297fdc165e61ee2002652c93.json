{"sha": "21b0c6dc7c2783ff297fdc165e61ee2002652c93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiMGM2ZGM3YzI3ODNmZjI5N2ZkYzE2NWU2MWVlMjAwMjY1MmM5Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-11-27T18:01:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-11-27T18:01:48Z"}, "message": "decl2.c (finish_file): Call expand_body for inline functions that will be written out but that do not...\n\n\t* decl2.c (finish_file): Call expand_body for inline functions\n\tthat will be written out but that do not yet have RTL.\n\t* semantics.c (expand_body): Do not generate RTL For inline\n\tfunctions that do not yet need to be written out.\n\nFrom-SVN: r30678", "tree": {"sha": "8240beab16a885e012e1e56a3a68ce074be6b981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8240beab16a885e012e1e56a3a68ce074be6b981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21b0c6dc7c2783ff297fdc165e61ee2002652c93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b0c6dc7c2783ff297fdc165e61ee2002652c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b0c6dc7c2783ff297fdc165e61ee2002652c93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b0c6dc7c2783ff297fdc165e61ee2002652c93/comments", "author": null, "committer": null, "parents": [{"sha": "9f887d05bb41e10e50f7fab20f492c1b49a7bb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f887d05bb41e10e50f7fab20f492c1b49a7bb44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f887d05bb41e10e50f7fab20f492c1b49a7bb44"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "f07c715c56297635d9928aa84a0e39e9880e28e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21b0c6dc7c2783ff297fdc165e61ee2002652c93", "patch": "@@ -1,3 +1,10 @@\n+1999-11-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (finish_file): Call expand_body for inline functions\n+\tthat will be written out but that do not yet have RTL.\n+\t* semantics.c (expand_body): Do not generate RTL For inline\n+\tfunctions that do not yet need to be written out.\n+\n 1999-11-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Make-lang.in (CXX_SRCS): Add optimize.c.  "}, {"sha": "23917cd739190005f1a58f533de5575e6bf344de", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=21b0c6dc7c2783ff297fdc165e61ee2002652c93", "patch": "@@ -3531,6 +3531,36 @@ finish_file ()\n \t      && DECL_INITIAL (decl)\n \t      && (DECL_NEEDED_P (decl) || !DECL_COMDAT (decl)))\n \t    DECL_EXTERNAL (decl) = 0;\n+\n+\t  /* If we're going to need to write this function out, and\n+\t     there's already a body for it, create RTL for it now.\n+\t     (There might be no body if this is a method we haven't\n+\t     gotten around to synthesizing yet.)  */\n+\t  if (!DECL_EXTERNAL (decl)\n+\t      && (DECL_NEEDED_P (decl) || !DECL_COMDAT (decl))\n+\t      && DECL_SAVED_TREE (decl)\n+\t      && !DECL_SAVED_INSNS (decl)\n+\t      && !TREE_ASM_WRITTEN (decl))\n+\t    {\n+\t      int saved_not_really_extern;\n+\n+\t      /* When we call finish_function in expand_body, it will\n+\t\t try to reset DECL_NOT_REALLY_EXTERN so we save and\n+\t\t restore it here.  */\n+\t      saved_not_really = DECL_NOT_REALLY_EXTERN (decl);\n+\t      /* Generate RTL for this function now that we know we\n+\t\t need it.  */\n+\t      expand_body (decl);\n+\t      /* Undo the damage done by finish_function.  */\n+\t      DECL_EXTERNAL (decl) = 0;\n+\t      DECL_NOT_REALLY_EXTERN (decl) = saved_not_really_extern;\n+\t      /* If we're compiling -fsyntax-only pretend that this\n+\t\t function has been written out so that we don't try to\n+\t\t expand it again.  */\n+\t      if (flag_syntax_only)\n+\t\tTREE_ASM_WRITTEN (decl) = 1;\n+\t      reconsider = 1;\n+\t    }\n \t}\n \n       if (saved_inlines_used"}, {"sha": "fa69540ca3a49fdd73e8fc5585d7ca3d1881fcbf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b0c6dc7c2783ff297fdc165e61ee2002652c93/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=21b0c6dc7c2783ff297fdc165e61ee2002652c93", "patch": "@@ -2535,6 +2535,39 @@ expand_body (fn)\n   if (flag_syntax_only)\n     return;\n \n+  /* If possible, avoid generating RTL for this function.  Instead,\n+     just record it as an inline function, and wait until end-of-file\n+     to decide whether to write it out or not.  */\n+  if (/* We have to generate RTL if we can't inline trees.  */\n+      flag_inline_trees\n+      /* Or if it's not an inline function.  */\n+      && DECL_INLINE (fn)\n+      /* Or if we have to keep all inline functions anyhow.  */\n+      && !flag_keep_inline_functions\n+      /* Or if we actually have a reference to the function.  */\n+      && !DECL_NEEDED_P (fn)\n+      /* Or if we're at the end-of-file, and this function is not\n+\t DECL_COMDAT.  */\n+      && (!at_eof || DECL_COMDAT (fn))\n+      /* Or if this is a nested function.  */\n+      && !hack_decl_function_context (fn))\n+    {\n+      /* Give the function RTL now so that we can assign it to a\n+\t function pointer, etc.  */\n+      make_function_rtl (fn);\n+      /* Set DECL_EXTERNAL so that assemble_external will be called as\n+\t necessary.  We'll clear it again in finish_file.  */\n+      if (!DECL_EXTERNAL (fn))\n+\t{\n+\t  DECL_NOT_REALLY_EXTERN (fn) = 1;\n+\t  DECL_EXTERNAL (fn) = 1;\n+\t}\n+      /* Remember this function.  In finish_file we'll decide if\n+\t we actually need to write this function out.  */\n+      mark_inline_for_output (fn);\n+      return;\n+    }\n+\n   /* Optimize the body of the function before expanding it.  */\n   optimize_function (fn);\n "}]}