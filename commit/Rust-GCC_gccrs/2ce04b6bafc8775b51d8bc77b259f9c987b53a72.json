{"sha": "2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlMDRiNmJhZmM4Nzc1YjUxZDhiYzc3YjI1OWY5Yzk4N2I1M2E3Mg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-04T05:36:40Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-04T05:36:40Z"}, "message": "sparc-protos.h (sparc_rtx_costs): New.\n\n2002-05-03  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc-protos.h (sparc_rtx_costs): New.\n\t* config/sparc/sparc.c (sparc_rtx_costs): New function\n\timplementing RTX_COSTS and CONST_COSTS.\n\t* config/sparc/sparc.h (CONST_COSTS): Delete.\n\t(RTX_COSTS_CASES): Define.\n\t(RTX_COSTS): Expand RTX_COSTS_CASES and use sparc_rtx_costs to do\n\tthe work.\n\nFrom-SVN: r53147", "tree": {"sha": "992960f5f3bec737872394785ac833cb45924f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/992960f5f3bec737872394785ac833cb45924f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/comments", "author": null, "committer": null, "parents": [{"sha": "a1d9bd0c06f3b079ce0061f383403877a84126ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d9bd0c06f3b079ce0061f383403877a84126ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d9bd0c06f3b079ce0061f383403877a84126ed"}], "stats": {"total": 142, "additions": 87, "deletions": 55}, "files": [{"sha": "144f74499d5bc55587ebfa8ba46a1de13e5b3c63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "patch": "@@ -1,5 +1,13 @@\n 2002-05-03  David S. Miller  <davem@redhat.com>\n \n+\t* config/sparc/sparc-protos.h (sparc_rtx_costs): New.\n+\t* config/sparc/sparc.c (sparc_rtx_costs): New function\n+\timplementing RTX_COSTS and CONST_COSTS.\n+\t* config/sparc/sparc.h (CONST_COSTS): Delete.\n+\t(RTX_COSTS_CASES): Define.\n+\t(RTX_COSTS): Expand RTX_COSTS_CASES and use sparc_rtx_costs to do\n+\tthe work.\n+\n \t* config/sparc/sparc.md (DFA schedulers): Split out...\n \t* config/sparc/cypress.md, config/sparc/hypersparc.md,\n \tconfig/sparc/sparclet.md, config/sparc/supersparc.md,"}, {"sha": "427aaba18640bd4108df1e77c60549b57c480179", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "patch": "@@ -121,6 +121,7 @@ extern char *sparc_v8plus_shift PARAMS ((rtx *, rtx, const char *));\n extern int sparc_check_64 PARAMS ((rtx, rtx));\n extern rtx gen_df_reg PARAMS ((rtx, int));\n extern int sparc_extra_constraint_check PARAMS ((rtx, int, int));\n+extern int sparc_rtx_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n #endif /* RTX_CODE */\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "0405726969f1284eceaf958852261d7bf0091e3a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "patch": "@@ -8085,3 +8085,68 @@ sparc_extra_constraint_check (op, c, strict)\n \n   return reload_ok_mem;\n }\n+\n+int\n+sparc_rtx_costs (x, code, outer_code)\n+     rtx x;\n+     enum rtx_code code, outer_code;\n+{\n+  switch (code)\n+    {\n+    case MULT:\n+      if (sparc_cpu == PROCESSOR_ULTRASPARC)\n+\treturn (GET_MODE (x) == DImode ?\n+\t\tCOSTS_N_INSNS (34) : COSTS_N_INSNS (19));\n+\n+      if (sparc_cpu == PROCESSOR_ULTRASPARC3)\n+\treturn COSTS_N_INSNS (6);\n+\n+      return (TARGET_HARD_MUL\n+\t      ? COSTS_N_INSNS (5)\n+\t      : COSTS_N_INSNS (25));\n+\n+    case DIV:\n+    case UDIV:\n+    case MOD:\n+    case UMOD:\n+      if (sparc_cpu == PROCESSOR_ULTRASPARC)\n+\treturn (GET_MODE (x) == DImode ?\n+\t\tCOSTS_N_INSNS (68) : COSTS_N_INSNS (37));\n+      if (sparc_cpu == PROCESSOR_ULTRASPARC3)\n+\treturn (GET_MODE (x) == DImode ?\n+\t\tCOSTS_N_INSNS (71) : COSTS_N_INSNS (40));\n+      return COSTS_N_INSNS (25);\n+\n+      /* Make FLOAT and FIX more expensive than CONST_DOUBLE,\n+\t so that cse will favor the latter.  */\n+    case FLOAT:\n+    case FIX:\n+      return 19;\n+\n+    case CONST_INT:\n+      if (INTVAL (x) < 0x1000 && INTVAL (x) >= -0x1000)\n+\treturn 0;\n+\n+    /* fallthru */\n+    case HIGH:\n+      return 2;\n+\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      return 4;\n+\n+    case CONST_DOUBLE:\n+      if (GET_MODE (x) == DImode)\n+\tif ((XINT (x, 3) == 0\n+\t     && (unsigned) XINT (x, 2) < 0x1000)\n+\t    || (XINT (x, 3) == -1\n+\t\t&& XINT (x, 2) < 0\n+\t\t&& XINT (x, 2) >= -0x1000))\n+\t  return 0;\n+      return 8;\n+\n+    default:\n+      abort();\n+    };\n+}"}, {"sha": "fd6312a6b45f2e12f0ed05b0ddebcad795521e8b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 13, "deletions": 55, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce04b6bafc8775b51d8bc77b259f9c987b53a72/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2ce04b6bafc8775b51d8bc77b259f9c987b53a72", "patch": "@@ -2645,33 +2645,6 @@ do {                                                                    \\\n    of the libgcc2 functions is used.  */\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)\n \n-/* Compute the cost of computing a constant rtl expression RTX\n-   whose rtx-code is CODE.  The body of this macro is a portion\n-   of a switch statement.  If the code is computed here,\n-   return it with a return statement.  Otherwise, break from the switch.  */\n-\n-#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n-  case CONST_INT:\t\t\t\t\t\t\\\n-    if (INTVAL (RTX) < 0x1000 && INTVAL (RTX) >= -0x1000)\t\\\n-      return 0;\t\t\t\t\t\t\t\\\n-  case HIGH:\t\t\t\t\t\t\t\\\n-    return 2;\t\t\t\t\t\t\t\\\n-  case CONST:\t\t\t\t\t\t\t\\\n-  case LABEL_REF:\t\t\t\t\t\t\\\n-  case SYMBOL_REF:\t\t\t\t\t\t\\\n-    return 4;\t\t\t\t\t\t\t\\\n-  case CONST_DOUBLE:\t\t\t\t\t\t\\\n-    if (GET_MODE (RTX) == DImode)\t\t\t\t\\\n-      if ((XINT (RTX, 3) == 0\t\t\t\t\t\\\n-\t   && (unsigned) XINT (RTX, 2) < 0x1000)\t\t\\\n-\t  || (XINT (RTX, 3) == -1\t\t\t\t\\\n-\t      && XINT (RTX, 2) < 0\t\t\t\t\\\n-\t      && XINT (RTX, 2) >= -0x1000))\t\t\t\\\n-\treturn 0;\t\t\t\t\t\t\\\n-    return 8;\n-\n-#define ADDRESS_COST(RTX)  1\n-\n /* Compute extra cost of moving data between one register class\n    and another.  */\n #define GENERAL_OR_I64(C) ((C) == GENERAL_REGS || (C) == I64_REGS)\n@@ -2699,37 +2672,22 @@ do {                                                                    \\\n          : (sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n             ? 9 : 3))\n \n-/* Provide the costs of a rtl expression.  This is in the body of a\n-   switch on CODE.  The purpose for the cost of MULT is to encourage\n-   `synth_mult' to find a synthetic multiply when reasonable.\n+/* The cases that RTX_COSTS handles.  */\n \n-   If we need more than 12 insns to do a multiply, then go out-of-line,\n-   since the call overhead will be < 10% of the cost of the multiply.  */\n+#define RTX_COSTS_CASES\t\\\n+case MULT: case DIV: case UDIV: case MOD: case UMOD: \\\n+case FLOAT: case FIX: \\\n+case CONST_INT: case HIGH: case CONST: \\\n+case LABEL_REF: case SYMBOL_REF: case CONST_DOUBLE:\n+\n+/* Provide the costs of a rtl expression.  This is in the body of a\n+   switch on CODE.  */\n \n #define RTX_COSTS(X,CODE,OUTER_CODE)\t\t\t\\\n-  case MULT:\t\t\t\t\t\t\\\n-    if (sparc_cpu == PROCESSOR_ULTRASPARC)\t\t\\\n-      return (GET_MODE (X) == DImode ?\t\t\t\\\n-              COSTS_N_INSNS (34) : COSTS_N_INSNS (19));\t\\\n-    if (sparc_cpu == PROCESSOR_ULTRASPARC3)\t\t\\\n-      return COSTS_N_INSNS (6);\t\t\t\t\\\n-    return TARGET_HARD_MUL ? COSTS_N_INSNS (5) : COSTS_N_INSNS (25); \\\n-  case DIV:\t\t\t\t\t\t\\\n-  case UDIV:\t\t\t\t\t\t\\\n-  case MOD:\t\t\t\t\t\t\\\n-  case UMOD:\t\t\t\t\t\t\\\n-    if (sparc_cpu == PROCESSOR_ULTRASPARC)\t\t\\\n-      return (GET_MODE (X) == DImode ?\t\t\t\\\n-              COSTS_N_INSNS (68) : COSTS_N_INSNS (37));\t\\\n-    if (sparc_cpu == PROCESSOR_ULTRASPARC3)\t\t\\\n-      return (GET_MODE (X) == DImode ?\t\t\t\\\n-              COSTS_N_INSNS (71) : COSTS_N_INSNS (40));\t\\\n-    return COSTS_N_INSNS (25);\t\t\t\t\\\n-  /* Make FLOAT and FIX more expensive than CONST_DOUBLE,\\\n-     so that cse will favor the latter.  */\t\t\\\n-  case FLOAT:\t\t\t\t\t\t\\\n-  case FIX:\t\t\t\t\t\t\\\n-    return 19;\n+  RTX_COSTS_CASES\t\t\t\t\t\\\n+    return sparc_rtx_costs(X,CODE,OUTER_CODE);\n+\n+#define ADDRESS_COST(RTX)  1\n \n #define PREFETCH_BLOCK \\\n \t((sparc_cpu == PROCESSOR_ULTRASPARC \\"}]}