{"sha": "eee8ed2f22b36dfe64a9516171871476e8ede477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlOGVkMmYyMmIzNmRmZTY0YTk1MTYxNzE4NzE0NzZlOGVkZTQ3Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-22T14:44:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-22T14:44:22Z"}, "message": "testsuite: Uniquify test names [PR 98795]\n\nHeader unit names come from the path the preprocessor determines, and\nthus can be absolute.  This tweaks the testsuite to elide that\nabsoluteness when embedded in a CMI name.  We were also not\ndistinguishing link and execute tests by the $std flags, so append\nthem when necessary.\n\n\tPR testsuite/98795\n\tgcc/testsuite/\n\t* g++.dg/modules/modules.exp (module_cmi_p): Avoid\n\tembedded absolute paths.\n\t(module_do_it): Append $std to test name.", "tree": {"sha": "e2a49ea0adfa5cff1aaf4e085acaf050264648a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a49ea0adfa5cff1aaf4e085acaf050264648a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eee8ed2f22b36dfe64a9516171871476e8ede477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee8ed2f22b36dfe64a9516171871476e8ede477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee8ed2f22b36dfe64a9516171871476e8ede477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee8ed2f22b36dfe64a9516171871476e8ede477/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be156d6bef317b8704052f11431457a577ed564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be156d6bef317b8704052f11431457a577ed564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be156d6bef317b8704052f11431457a577ed564"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "8c9a00e68e9d4bf1d96e84903e7cc2875bdfd2bb", "filename": "gcc/testsuite/g++.dg/modules/modules.exp", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee8ed2f22b36dfe64a9516171871476e8ede477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee8ed2f22b36dfe64a9516171871476e8ede477/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmodules.exp?ref=eee8ed2f22b36dfe64a9516171871476e8ede477", "patch": "@@ -118,10 +118,12 @@ proc module_cmi_p { src ifs } {\n \t}\n \tset not [lindex $if_arg 2]\n \tset cmi [lindex $if_arg 3]\n+\tglobal srcdir\n+\tset relcmi [string map [list $srcdir \"/\\$srcdir\"] $cmi]\n \tif { $not != [file_on_host exists $cmi] } {\n-\t    pass \"$src module-cmi $spec ($cmi)\"\n+\t    pass \"$src module-cmi $spec ($relcmi)\"\n \t} else {\n-\t    fail \"$src module-cmi $spec ($cmi)\"\n+\t    fail \"$src module-cmi $spec ($relcmi)\"\n \t    set not [expr ! $not ]\n \t}\n \tif { ! $not } {\n@@ -210,8 +212,10 @@ proc module_do_it { do_what testcase std asm_list } {\n     }\n \n     set options { }\n+    set ident $testcase\n     if { $std != \"\" } {\n \tlappend options \"additional_flags=$std\"\n+\tset ident \"$ident $std\"\n     }\n     if { [llength $do_what] > 3 } {\n \tlappend options \"additional_flags=[lindex $do_what 3]\"\n@@ -222,28 +226,28 @@ proc module_do_it { do_what testcase std asm_list } {\n     # link it\n     verbose \"Linking $asm_list\" 1\n     if { !$ok } {\n-\tunresolved \"$testcase link\"\n+\tunresolved \"$identlink\"\n     } else {\n \tset out [${tool}_target_compile $asm_list \\\n \t\t     $execname executable $options]\n \teval $xfail\n \tif { $out == \"\" } {\n-\t    pass \"$testcase link\"\n+\t    pass \"$ident link\"\n \t} else {\n-\t    fail \"$testcase link\"\n+\t    fail \"$ident link\"\n \t    set ok 0\n \t}\n     }\n \n     # run it?\n     if { !$run } {\n     } elseif { !$ok } {\n-\tunresolved \"$testcase execute\"\n+\tunresolved \"$ident execute\"\n     } else {\n \tset out [${tool}_load $execname \"\" \"\"]\n \tset status [lindex $out 0]\n \teval $xfail\n-\t$status \"$testcase execute\"\n+\t$status \"$ident execute\"\n \tif { $status != \"pass\" } {\n \t    set $ok 0\n \t}"}]}