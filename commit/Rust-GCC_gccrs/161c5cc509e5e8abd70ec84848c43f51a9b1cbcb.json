{"sha": "161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxYzVjYzUwOWU1ZThhYmQ3MGVjODQ4NDhjNDNmNTFhOWIxY2JjYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:53:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:53:02Z"}, "message": "[multiple changes]\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (Find_Stream_Subprogram): Optimize\n\tStorage_Array stream handling.\n\t(Find_Stream_Subprogram): Optimize Stream_Element_Array stream handling\n\t* rtsfind.ads: Add entry for Stream_Element_Array Add\n\tentries for RE_Storage_Array subprograms Add entries for\n\tRE_Stream_Element_Array subprograms\n\t* s-ststop.ads, s-ststop.adb: Add processing for System.Storage_Array.\n\tAdd processing for Ada.Stream_Element_Array.\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-except-2005.ads, a-except-2005.adb:\n\t(Get_Exception_Machine_Occurrence): New function.\n\t* raise-gcc.c (__gnat_unwind_exception_size): New constant.\n\nFrom-SVN: r203560", "tree": {"sha": "ef04c8f1c5d0d38bf962a2310fac94d96a929607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef04c8f1c5d0d38bf962a2310fac94d96a929607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/comments", "author": null, "committer": null, "parents": [{"sha": "2590ef129b3c7fa8dd899eed69e97b418411f40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2590ef129b3c7fa8dd899eed69e97b418411f40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2590ef129b3c7fa8dd899eed69e97b418411f40e"}], "stats": {"total": 721, "additions": 620, "deletions": 101}, "files": [{"sha": "aa7004b15e26b74b01cd7f15ed87e7bf2d97436e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -1,3 +1,20 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb (Find_Stream_Subprogram): Optimize\n+\tStorage_Array stream handling.\n+\t(Find_Stream_Subprogram): Optimize Stream_Element_Array stream handling\n+\t* rtsfind.ads: Add entry for Stream_Element_Array Add\n+\tentries for RE_Storage_Array subprograms Add entries for\n+\tRE_Stream_Element_Array subprograms\n+\t* s-ststop.ads, s-ststop.adb: Add processing for System.Storage_Array.\n+\tAdd processing for Ada.Stream_Element_Array.\n+\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-except-2005.ads, a-except-2005.adb:\n+\t(Get_Exception_Machine_Occurrence): New function.\n+\t* raise-gcc.c (__gnat_unwind_exception_size): New constant.\n+\n 2013-10-14  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb: Minor fix to error message text."}, {"sha": "29ecf391d80b5226f09b3756ca617b4067ec5a1d", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -861,6 +861,16 @@ package body Ada.Exceptions is\n    --  in case we do not want any exception tracing support. This is\n    --  why this package is separated.\n \n+   --------------------------------------\n+   -- Get_Exception_Machine_Occurrence --\n+   --------------------------------------\n+\n+   function Get_Exception_Machine_Occurrence (X : Exception_Occurrence)\n+                                             return System.Address is\n+   begin\n+      return X.Machine_Occurrence;\n+   end Get_Exception_Machine_Occurrence;\n+\n    -----------\n    -- Image --\n    -----------"}, {"sha": "ecc5ca8ad1c8133ea389509ae0b99e547aabfdd7", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -51,12 +51,8 @@ with System.Standard_Library;\n with System.Traceback_Entries;\n \n package Ada.Exceptions is\n-   pragma Warnings (Off);\n    pragma Preelaborate_05;\n-   pragma Warnings (On);\n-   --  In accordance with Ada 2005 AI-362. The warnings pragmas are so that we\n-   --  can compile this using older compiler versions, which will ignore the\n-   --  pragma, which is fine for the bootstrap.\n+   --  In accordance with Ada 2005 AI-362.\n \n    type Exception_Id is private;\n    pragma Preelaborable_Initialization (Exception_Id);\n@@ -337,6 +333,15 @@ private\n    --  this, and it would not work right, because of the Msg and Tracebacks\n    --  fields which have unused entries not copied by Save_Occurrence.\n \n+   function Get_Exception_Machine_Occurrence (X : Exception_Occurrence)\n+                                             return System.Address;\n+   pragma Export (Ada, Get_Exception_Machine_Occurrence,\n+                    \"__gnat_get_exception_machine_occurrence\");\n+   --  Get the machine occurrence corresponding to an exception occurrence.\n+   --  It is Null_Address if there is no machine occurrence (in runtimes that\n+   --  doesn't use GCC mechanism) or if it has been lost (Save_Occurrence\n+   --  doesn't save the machine occurrence).\n+\n    function EO_To_String (X : Exception_Occurrence) return String;\n    function String_To_EO (S : String) return Exception_Occurrence;\n    pragma Stream_Convert (Exception_Occurrence, String_To_EO, EO_To_String);"}, {"sha": "7458ddf4a806fd5d8607a7a9a67f967ce1f4bc04", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 168, "deletions": 17, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -6885,7 +6885,7 @@ package body Exp_Attr is\n       --  Function to check whether the specified run-time call is available\n       --  in the run time used. In the case of a configurable run time, it\n       --  is normal that some subprograms are not there.\n-\n+      --\n       --  I don't understand this routine at all, why is this not just a\n       --  call to RTE_Available? And if for some reason we need a different\n       --  routine with different semantics, why is not in Rtsfind ???\n@@ -6899,8 +6899,7 @@ package body Exp_Attr is\n          --  Assume that the unit will always be available when using a\n          --  \"normal\" (not configurable) run time.\n \n-         return not Configurable_Run_Time_Mode\n-           or else RTE_Available (Entity);\n+         return not Configurable_Run_Time_Mode or else RTE_Available (Entity);\n       end Is_Available;\n \n    --  Start of processing for Find_Stream_Subprogram\n@@ -6935,9 +6934,148 @@ package body Exp_Attr is\n         and then\n           not Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit))\n       then\n+         --  Storage_Array as defined in package System.Storage_Elements\n+\n+         if Is_RTE (Base_Typ, RE_Storage_Array) then\n+\n+            --  Case of No_Stream_Optimizations restriction active\n+\n+            if Restriction_Active (No_Stream_Optimizations) then\n+               if Nam = TSS_Stream_Input\n+                 and then Is_Available (RE_Storage_Array_Input)\n+               then\n+                  return RTE (RE_Storage_Array_Input);\n+\n+               elsif Nam = TSS_Stream_Output\n+                 and then Is_Available (RE_Storage_Array_Output)\n+               then\n+                  return RTE (RE_Storage_Array_Output);\n+\n+               elsif Nam = TSS_Stream_Read\n+                 and then Is_Available (RE_Storage_Array_Read)\n+               then\n+                  return RTE (RE_Storage_Array_Read);\n+\n+               elsif Nam = TSS_Stream_Write\n+                 and then Is_Available (RE_Storage_Array_Write)\n+               then\n+                  return RTE (RE_Storage_Array_Write);\n+\n+               elsif Nam /= TSS_Stream_Input  and then\n+                     Nam /= TSS_Stream_Output and then\n+                     Nam /= TSS_Stream_Read   and then\n+                     Nam /= TSS_Stream_Write\n+               then\n+                  raise Program_Error;\n+               end if;\n+\n+            --  Restriction No_Stream_Optimizations is not set, so we can go\n+            --  ahead and optimize using the block IO forms of the routines.\n+\n+            else\n+               if Nam = TSS_Stream_Input\n+                 and then Is_Available (RE_Storage_Array_Input_Blk_IO)\n+               then\n+                  return RTE (RE_Storage_Array_Input_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Output\n+                 and then Is_Available (RE_Storage_Array_Output_Blk_IO)\n+               then\n+                  return RTE (RE_Storage_Array_Output_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Read\n+                 and then Is_Available (RE_Storage_Array_Read_Blk_IO)\n+               then\n+                  return RTE (RE_Storage_Array_Read_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Write\n+                 and then Is_Available (RE_Storage_Array_Write_Blk_IO)\n+               then\n+                  return RTE (RE_Storage_Array_Write_Blk_IO);\n+\n+               elsif Nam /= TSS_Stream_Input  and then\n+                     Nam /= TSS_Stream_Output and then\n+                     Nam /= TSS_Stream_Read   and then\n+                     Nam /= TSS_Stream_Write\n+               then\n+                  raise Program_Error;\n+               end if;\n+            end if;\n+\n+         --  Stream_Element_Array as defined in package Ada.Streams\n+\n+         elsif Is_RTE (Base_Typ, RE_Stream_Element_Array) then\n+\n+            --  Case of No_Stream_Optimizations restriction active\n+\n+            if Restriction_Active (No_Stream_Optimizations) then\n+               if Nam = TSS_Stream_Input\n+                 and then Is_Available (RE_Stream_Element_Array_Input)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Input);\n+\n+               elsif Nam = TSS_Stream_Output\n+                 and then Is_Available (RE_Stream_Element_Array_Output)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Output);\n+\n+               elsif Nam = TSS_Stream_Read\n+                 and then Is_Available (RE_Stream_Element_Array_Read)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Read);\n+\n+               elsif Nam = TSS_Stream_Write\n+                 and then Is_Available (RE_Stream_Element_Array_Write)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Write);\n+\n+               elsif Nam /= TSS_Stream_Input  and then\n+                     Nam /= TSS_Stream_Output and then\n+                     Nam /= TSS_Stream_Read   and then\n+                     Nam /= TSS_Stream_Write\n+               then\n+                  raise Program_Error;\n+               end if;\n+\n+            --  Restriction No_Stream_Optimizations is not set, so we can go\n+            --  ahead and optimize using the block IO forms of the routines.\n+\n+            else\n+               if Nam = TSS_Stream_Input\n+                 and then Is_Available (RE_Stream_Element_Array_Input_Blk_IO)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Input_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Output\n+                 and then Is_Available (RE_Stream_Element_Array_Output_Blk_IO)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Output_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Read\n+                 and then Is_Available (RE_Stream_Element_Array_Read_Blk_IO)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Read_Blk_IO);\n+\n+               elsif Nam = TSS_Stream_Write\n+                 and then Is_Available (RE_Stream_Element_Array_Write_Blk_IO)\n+               then\n+                  return RTE (RE_Stream_Element_Array_Write_Blk_IO);\n+\n+               elsif Nam /= TSS_Stream_Input  and then\n+                     Nam /= TSS_Stream_Output and then\n+                     Nam /= TSS_Stream_Read   and then\n+                     Nam /= TSS_Stream_Write\n+               then\n+                  raise Program_Error;\n+               end if;\n+            end if;\n+\n          --  String as defined in package Ada\n \n-         if Base_Typ = Standard_String then\n+         elsif Base_Typ = Standard_String then\n+\n+            --  Case of No_Stream_Optimizations restriction active\n+\n             if Restriction_Active (No_Stream_Optimizations) then\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_String_Input)\n@@ -6967,6 +7105,9 @@ package body Exp_Attr is\n                   raise Program_Error;\n                end if;\n \n+            --  Restriction No_Stream_Optimizations is not set, so we can go\n+            --  ahead and optimize using the block IO forms of the routines.\n+\n             else\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_String_Input_Blk_IO)\n@@ -6988,9 +7129,9 @@ package body Exp_Attr is\n                then\n                   return RTE (RE_String_Write_Blk_IO);\n \n-               elsif Nam /= TSS_Stream_Input and then\n+               elsif Nam /= TSS_Stream_Input  and then\n                      Nam /= TSS_Stream_Output and then\n-                     Nam /= TSS_Stream_Read and then\n+                     Nam /= TSS_Stream_Read   and then\n                      Nam /= TSS_Stream_Write\n                then\n                   raise Program_Error;\n@@ -7000,6 +7141,9 @@ package body Exp_Attr is\n          --  Wide_String as defined in package Ada\n \n          elsif Base_Typ = Standard_Wide_String then\n+\n+            --  Case of No_Stream_Optimizations restriction active\n+\n             if Restriction_Active (No_Stream_Optimizations) then\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_Wide_String_Input)\n@@ -7021,14 +7165,17 @@ package body Exp_Attr is\n                then\n                   return RTE (RE_Wide_String_Write);\n \n-               elsif Nam /= TSS_Stream_Input and then\n+               elsif Nam /= TSS_Stream_Input  and then\n                      Nam /= TSS_Stream_Output and then\n-                     Nam /= TSS_Stream_Read and then\n+                     Nam /= TSS_Stream_Read   and then\n                      Nam /= TSS_Stream_Write\n                then\n                   raise Program_Error;\n                end if;\n \n+            --  Restriction No_Stream_Optimizations is not set, so we can go\n+            --  ahead and optimize using the block IO forms of the routines.\n+\n             else\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_Wide_String_Input_Blk_IO)\n@@ -7050,9 +7197,9 @@ package body Exp_Attr is\n                then\n                   return RTE (RE_Wide_String_Write_Blk_IO);\n \n-               elsif Nam /= TSS_Stream_Input and then\n+               elsif Nam /= TSS_Stream_Input  and then\n                      Nam /= TSS_Stream_Output and then\n-                     Nam /= TSS_Stream_Read and then\n+                     Nam /= TSS_Stream_Read   and then\n                      Nam /= TSS_Stream_Write\n                then\n                   raise Program_Error;\n@@ -7062,6 +7209,9 @@ package body Exp_Attr is\n          --  Wide_Wide_String as defined in package Ada\n \n          elsif Base_Typ = Standard_Wide_Wide_String then\n+\n+            --  Case of No_Stream_Optimizations restriction active\n+\n             if Restriction_Active (No_Stream_Optimizations) then\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_Wide_Wide_String_Input)\n@@ -7083,14 +7233,17 @@ package body Exp_Attr is\n                then\n                   return RTE (RE_Wide_Wide_String_Write);\n \n-               elsif Nam /= TSS_Stream_Input and then\n+               elsif Nam /= TSS_Stream_Input  and then\n                      Nam /= TSS_Stream_Output and then\n-                     Nam /= TSS_Stream_Read and then\n+                     Nam /= TSS_Stream_Read   and then\n                      Nam /= TSS_Stream_Write\n                then\n                   raise Program_Error;\n                end if;\n \n+            --  Restriction No_Stream_Optimizations is not set, so we can go\n+            --  ahead and optimize using the block IO forms of the routines.\n+\n             else\n                if Nam = TSS_Stream_Input\n                  and then Is_Available (RE_Wide_Wide_String_Input_Blk_IO)\n@@ -7112,9 +7265,9 @@ package body Exp_Attr is\n                then\n                   return RTE (RE_Wide_Wide_String_Write_Blk_IO);\n \n-               elsif Nam /= TSS_Stream_Input and then\n+               elsif Nam /= TSS_Stream_Input  and then\n                      Nam /= TSS_Stream_Output and then\n-                     Nam /= TSS_Stream_Read and then\n+                     Nam /= TSS_Stream_Read   and then\n                      Nam /= TSS_Stream_Write\n                then\n                   raise Program_Error;\n@@ -7123,9 +7276,7 @@ package body Exp_Attr is\n          end if;\n       end if;\n \n-      if Is_Tagged_Type (Typ)\n-        and then Is_Derived_Type (Typ)\n-      then\n+      if Is_Tagged_Type (Typ) and then Is_Derived_Type (Typ) then\n          return Find_Prim_Op (Typ, Nam);\n       else\n          return Find_Inherited_TSS (Typ, Nam);"}, {"sha": "ca1e84afa9a162f606251351b1050066eb60e492", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -1463,3 +1463,10 @@ __gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,\n \t\t\t\tms_disp, __gnat_personality_imp);\n }\n #endif /* SEH */\n+\n+#if !defined (__USING_SJLJ_EXCEPTIONS__)\n+/* Size of the _Unwind_Exception structure.  This is used by g-cppexc to get\n+   the offset to the C++ object.  */\n+\n+const int __gnat_unwind_exception_size = sizeof (_Unwind_Exception);\n+#endif"}, {"sha": "5ae85f32b966a73817f083dbb340032c777e783c", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -591,6 +591,7 @@ package Rtsfind is\n \n      RE_Root_Stream_Type,                -- Ada.Streams\n      RE_Stream_Element,                  -- Ada.Streams\n+     RE_Stream_Element_Array,            -- Ada.Streams\n      RE_Stream_Element_Offset,           -- Ada.Streams\n \n      RE_Stream_Access,                   -- Ada.Streams.Stream_IO\n@@ -1477,6 +1478,24 @@ package Rtsfind is\n      RE_W_WC,                            -- System.Stream_Attributes\n      RE_W_WWC,                           -- System.Stream_Attributes\n \n+     RE_Storage_Array_Input,             -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Input_Blk_IO,      -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Output,            -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Output_Blk_IO,     -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Read,              -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Read_Blk_IO,       -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Write,             -- System.Strings.Stream_Ops\n+     RE_Storage_Array_Write_Blk_IO,      -- System.Strings.Stream_Ops\n+\n+     RE_Stream_Element_Array_Input,         -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Input_Blk_IO,  -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Output,        -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Output_Blk_IO, -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Read,          -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Read_Blk_IO,   -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Write,         -- System.Strings.Stream_Ops\n+     RE_Stream_Element_Array_Write_Blk_IO,  -- System.Strings.Stream_Ops\n+\n      RE_String_Input,                    -- System.Strings.Stream_Ops\n      RE_String_Input_Blk_IO,             -- System.Strings.Stream_Ops\n      RE_String_Output,                   -- System.Strings.Stream_Ops\n@@ -1485,6 +1504,7 @@ package Rtsfind is\n      RE_String_Read_Blk_IO,              -- System.Strings.Stream_Ops\n      RE_String_Write,                    -- System.Strings.Stream_Ops\n      RE_String_Write_Blk_IO,             -- System.Strings.Stream_Ops\n+\n      RE_Wide_String_Input,               -- System.Strings.Stream_Ops\n      RE_Wide_String_Input_Blk_IO,        -- System.Strings.Stream_Ops\n      RE_Wide_String_Output,              -- System.Strings.Stream_Ops\n@@ -1493,6 +1513,7 @@ package Rtsfind is\n      RE_Wide_String_Read_Blk_IO,         -- System.Strings.Stream_Ops\n      RE_Wide_String_Write,               -- System.Strings.Stream_Ops\n      RE_Wide_String_Write_Blk_IO,        -- System.Strings.Stream_Ops\n+\n      RE_Wide_Wide_String_Input,          -- System.Strings.Stream_Ops\n      RE_Wide_Wide_String_Input_Blk_IO,   -- System.Strings.Stream_Ops\n      RE_Wide_Wide_String_Output,         -- System.Strings.Stream_Ops\n@@ -1844,6 +1865,7 @@ package Rtsfind is\n \n      RE_Root_Stream_Type                 => Ada_Streams,\n      RE_Stream_Element                   => Ada_Streams,\n+     RE_Stream_Element_Array             => Ada_Streams,\n      RE_Stream_Element_Offset            => Ada_Streams,\n \n      RE_Stream_Access                    => Ada_Streams_Stream_IO,\n@@ -2734,6 +2756,24 @@ package Rtsfind is\n      RE_W_WC                             => System_Stream_Attributes,\n      RE_W_WWC                            => System_Stream_Attributes,\n \n+     RE_Storage_Array_Input              =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Input_Blk_IO       =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Output             =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Output_Blk_IO      =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Read               =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Read_Blk_IO        =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Write              =>  System_Strings_Stream_Ops,\n+     RE_Storage_Array_Write_Blk_IO       =>  System_Strings_Stream_Ops,\n+\n+     RE_Stream_Element_Array_Input          =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Input_Blk_IO   =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Output         =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Output_Blk_IO  =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Read           =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Read_Blk_IO    =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Write          =>  System_Strings_Stream_Ops,\n+     RE_Stream_Element_Array_Write_Blk_IO   =>  System_Strings_Stream_Ops,\n+\n      RE_String_Input                     => System_Strings_Stream_Ops,\n      RE_String_Input_Blk_IO              => System_Strings_Stream_Ops,\n      RE_String_Output                    => System_Strings_Stream_Ops,\n@@ -2742,13 +2782,15 @@ package Rtsfind is\n      RE_String_Read_Blk_IO               => System_Strings_Stream_Ops,\n      RE_String_Write                     => System_Strings_Stream_Ops,\n      RE_String_Write_Blk_IO              => System_Strings_Stream_Ops,\n+\n      RE_Wide_String_Input                => System_Strings_Stream_Ops,\n      RE_Wide_String_Input_Blk_IO         => System_Strings_Stream_Ops,\n      RE_Wide_String_Output               => System_Strings_Stream_Ops,\n      RE_Wide_String_Output_Blk_IO        => System_Strings_Stream_Ops,\n      RE_Wide_String_Read                 => System_Strings_Stream_Ops,\n      RE_Wide_String_Read_Blk_IO          => System_Strings_Stream_Ops,\n      RE_Wide_String_Write                => System_Strings_Stream_Ops,\n+\n      RE_Wide_String_Write_Blk_IO         => System_Strings_Stream_Ops,\n      RE_Wide_Wide_String_Input           => System_Strings_Stream_Ops,\n      RE_Wide_Wide_String_Input_Blk_IO    => System_Strings_Stream_Ops,"}, {"sha": "f57ff09fa6a693597f6bc84ea94b7166d248dba3", "filename": "gcc/ada/s-ststop.adb", "status": "modified", "additions": 278, "deletions": 71, "changes": 349, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fs-ststop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fs-ststop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.adb?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2008-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,9 @@ with Ada.Streams;              use Ada.Streams;\n with Ada.Streams.Stream_IO;    use Ada.Streams.Stream_IO;\n with Ada.Unchecked_Conversion;\n \n-with System.Stream_Attributes; use System;\n+with System;                   use System;\n+with System.Storage_Elements;  use System.Storage_Elements;\n+with System.Stream_Attributes;\n \n package body System.Strings.Stream_Ops is\n \n@@ -46,31 +48,32 @@ package body System.Strings.Stream_Ops is\n \n    --  The following package provides an IO framework for strings. Depending\n    --  on the version of System.Stream_Attributes as well as the size of\n-   --  formal parameter Character_Type, the package will either utilize block\n-   --  IO or character-by-character IO.\n+   --  formal parameter Element_Type, the package will either utilize block\n+   --  IO or element-by-element IO.\n \n    generic\n-      type Character_Type is private;\n-      type String_Type is array (Positive range <>) of Character_Type;\n+      type Element_Type is private;\n+      type Index_Type is range <>;\n+      type Array_Type is array (Index_Type range <>) of Element_Type;\n \n    package Stream_Ops_Internal is\n       function Input\n         (Strm : access Root_Stream_Type'Class;\n-         IO   : IO_Kind) return String_Type;\n+         IO   : IO_Kind) return Array_Type;\n \n       procedure Output\n         (Strm : access Root_Stream_Type'Class;\n-         Item : String_Type;\n+         Item : Array_Type;\n          IO   : IO_Kind);\n \n       procedure Read\n         (Strm : access Root_Stream_Type'Class;\n-         Item : out String_Type;\n+         Item : out Array_Type;\n          IO   : IO_Kind);\n \n       procedure Write\n         (Strm : access Root_Stream_Type'Class;\n-         Item : String_Type;\n+         Item : Array_Type;\n          IO   : IO_Kind);\n    end Stream_Ops_Internal;\n \n@@ -86,63 +89,66 @@ package body System.Strings.Stream_Ops is\n \n       Default_Block_Size : constant := 512 * 8;\n \n-      --  Shorthand notation for stream element and character sizes\n+      --  Shorthand notation for stream element and element type sizes\n \n-      C_Size  : constant Integer := Character_Type'Size;\n+      ET_Size : constant Integer := Element_Type'Size;\n       SE_Size : constant Integer := Stream_Element'Size;\n \n-      --  The following constants describe the number of stream elements or\n-      --  characters that can fit into a default block.\n+      --  The following constants describe the number of array elements or\n+      --  stream elements that can fit into a default block.\n+\n+      AE_In_Default_Block : constant Index_Type :=\n+                              Index_Type (Default_Block_Size / ET_Size);\n+      --  Number of array elements in a default block\n \n-      C_In_Default_Block  : constant Integer := Default_Block_Size / C_Size;\n       SE_In_Default_Block : constant Integer := Default_Block_Size / SE_Size;\n+      --  Number of storage elements in a default block\n \n       --  Buffer types\n \n       subtype Default_Block is Stream_Element_Array\n         (1 .. Stream_Element_Offset (SE_In_Default_Block));\n \n-      subtype String_Block is String_Type (1 .. C_In_Default_Block);\n+      subtype Array_Block is\n+        Array_Type (Index_Type range 1 .. AE_In_Default_Block);\n \n       --  Conversions to and from Default_Block\n \n       function To_Default_Block is\n-        new Ada.Unchecked_Conversion (String_Block, Default_Block);\n+        new Ada.Unchecked_Conversion (Array_Block, Default_Block);\n \n-      function To_String_Block is\n-        new Ada.Unchecked_Conversion (Default_Block, String_Block);\n+      function To_Array_Block is\n+        new Ada.Unchecked_Conversion (Default_Block, Array_Block);\n \n       -----------\n       -- Input --\n       -----------\n \n       function Input\n         (Strm : access Root_Stream_Type'Class;\n-         IO   : IO_Kind) return String_Type\n+         IO   : IO_Kind) return Array_Type\n       is\n       begin\n          if Strm = null then\n             raise Constraint_Error;\n          end if;\n \n          declare\n-            Low  : Positive;\n-            High : Positive;\n+            Low  : Index_Type;\n+            High : Index_Type;\n \n          begin\n             --  Read the bounds of the string\n \n-            Positive'Read (Strm, Low);\n-            Positive'Read (Strm, High);\n+            Index_Type'Read (Strm, Low);\n+            Index_Type'Read (Strm, High);\n \n-            declare\n-               Item : String_Type (Low .. High);\n+            --  Read the character content of the string\n \n+            declare\n+               Item : Array_Type (Low .. High);\n             begin\n-               --  Read the character content of the string\n-\n                Read (Strm, Item, IO);\n-\n                return Item;\n             end;\n          end;\n@@ -154,7 +160,7 @@ package body System.Strings.Stream_Ops is\n \n       procedure Output\n         (Strm : access Root_Stream_Type'Class;\n-         Item : String_Type;\n+         Item : Array_Type;\n          IO   : IO_Kind)\n       is\n       begin\n@@ -164,8 +170,8 @@ package body System.Strings.Stream_Ops is\n \n          --  Write the bounds of the string\n \n-         Positive'Write (Strm, Item'First);\n-         Positive'Write (Strm, Item'Last);\n+         Index_Type'Write (Strm, Item'First);\n+         Index_Type'Write (Strm, Item'Last);\n \n          --  Write the character content of the string\n \n@@ -178,7 +184,7 @@ package body System.Strings.Stream_Ops is\n \n       procedure Read\n         (Strm : access Root_Stream_Type'Class;\n-         Item : out String_Type;\n+         Item : out Array_Type;\n          IO   : IO_Kind)\n       is\n       begin\n@@ -194,15 +200,13 @@ package body System.Strings.Stream_Ops is\n \n          --  Block IO\n \n-         if IO = Block_IO\n-           and then Stream_Attributes.Block_IO_OK\n-         then\n+         if IO = Block_IO and then Stream_Attributes.Block_IO_OK then\n             declare\n                --  Determine the size in BITS of the block necessary to contain\n                --  the whole string.\n \n                Block_Size : constant Natural :=\n-                              (Item'Last - Item'First + 1) * C_Size;\n+                              Integer (Item'Last - Item'First + 1) * ET_Size;\n \n                --  Item can be larger than what the default block can store,\n                --  determine the number of whole reads necessary to read the\n@@ -218,8 +222,8 @@ package body System.Strings.Stream_Ops is\n \n                --  String indexes\n \n-               Low  : Positive := Item'First;\n-               High : Positive := Low + C_In_Default_Block - 1;\n+               Low  : Index_Type := Item'First;\n+               High : Index_Type := Low + AE_In_Default_Block - 1;\n \n                --  End of stream error detection\n \n@@ -237,10 +241,10 @@ package body System.Strings.Stream_Ops is\n                   begin\n                      for Counter in 1 .. Blocks loop\n                         Read (Strm.all, Block, Last);\n-                        Item (Low .. High) := To_String_Block (Block);\n+                        Item (Low .. High) := To_Array_Block (Block);\n \n                         Low  := High + 1;\n-                        High := Low + C_In_Default_Block - 1;\n+                        High := Low + AE_In_Default_Block - 1;\n                         Sum  := Sum + Last;\n                         Last := 0;\n                      end loop;\n@@ -254,17 +258,18 @@ package body System.Strings.Stream_Ops is\n                      subtype Rem_Block is Stream_Element_Array\n                        (1 .. Stream_Element_Offset (Rem_Size / SE_Size));\n \n-                     subtype Rem_String_Block is\n-                       String_Type (1 .. Rem_Size / C_Size);\n+                     subtype Rem_Array_Block is\n+                       Array_Type (Index_Type range\n+                                    1 .. Index_Type (Rem_Size / ET_Size));\n \n-                     function To_Rem_String_Block is new\n-                       Ada.Unchecked_Conversion (Rem_Block, Rem_String_Block);\n+                     function To_Rem_Array_Block is new\n+                       Ada.Unchecked_Conversion (Rem_Block, Rem_Array_Block);\n \n                      Block : Rem_Block;\n \n                   begin\n                      Read (Strm.all, Block, Last);\n-                     Item (Low .. Item'Last) := To_Rem_String_Block (Block);\n+                     Item (Low .. Item'Last) := To_Rem_Array_Block (Block);\n \n                      Sum := Sum + Last;\n                   end;\n@@ -275,7 +280,7 @@ package body System.Strings.Stream_Ops is\n                --  words, the stream does not contain enough elements to fully\n                --  populate Item.\n \n-               if (Integer (Sum) * SE_Size) / C_Size < Item'Length then\n+               if (Integer (Sum) * SE_Size) / ET_Size < Item'Length then\n                   raise End_Error;\n                end if;\n             end;\n@@ -284,12 +289,11 @@ package body System.Strings.Stream_Ops is\n \n          else\n             declare\n-               C : Character_Type;\n-\n+               E : Element_Type;\n             begin\n                for Index in Item'First .. Item'Last loop\n-                  Character_Type'Read (Strm, C);\n-                  Item (Index) := C;\n+                  Element_Type'Read (Strm, E);\n+                  Item (Index) := E;\n                end loop;\n             end;\n          end if;\n@@ -301,7 +305,7 @@ package body System.Strings.Stream_Ops is\n \n       procedure Write\n         (Strm : access Root_Stream_Type'Class;\n-         Item : String_Type;\n+         Item : Array_Type;\n          IO   : IO_Kind)\n       is\n       begin\n@@ -317,14 +321,12 @@ package body System.Strings.Stream_Ops is\n \n          --  Block IO\n \n-         if IO = Block_IO\n-           and then Stream_Attributes.Block_IO_OK\n-         then\n+         if IO = Block_IO and then Stream_Attributes.Block_IO_OK then\n             declare\n                --  Determine the size in BITS of the block necessary to contain\n                --  the whole string.\n \n-               Block_Size : constant Natural := Item'Length * C_Size;\n+               Block_Size : constant Natural := Item'Length * ET_Size;\n \n                --  Item can be larger than what the default block can store,\n                --  determine the number of whole writes necessary to output the\n@@ -340,18 +342,17 @@ package body System.Strings.Stream_Ops is\n \n                --  String indexes\n \n-               Low  : Positive := Item'First;\n-               High : Positive := Low + C_In_Default_Block - 1;\n+               Low  : Index_Type := Item'First;\n+               High : Index_Type := Low + AE_In_Default_Block - 1;\n \n             begin\n                --  Step 1: If the string is too large, write out individual\n                --  chunks the size of the default block.\n \n                for Counter in 1 .. Blocks loop\n                   Write (Strm.all, To_Default_Block (Item (Low .. High)));\n-\n                   Low  := High + 1;\n-                  High := Low + C_In_Default_Block - 1;\n+                  High := Low + AE_In_Default_Block - 1;\n                end loop;\n \n                --  Step 2: Write out any remaining elements\n@@ -361,11 +362,12 @@ package body System.Strings.Stream_Ops is\n                      subtype Rem_Block is Stream_Element_Array\n                        (1 .. Stream_Element_Offset (Rem_Size / SE_Size));\n \n-                     subtype Rem_String_Block is\n-                       String_Type (1 .. Rem_Size / C_Size);\n+                     subtype Rem_Array_Block is\n+                       Array_Type (Index_Type range\n+                                     1 .. Index_Type (Rem_Size / ET_Size));\n \n                      function To_Rem_Block is new\n-                       Ada.Unchecked_Conversion (Rem_String_Block, Rem_Block);\n+                       Ada.Unchecked_Conversion (Rem_Array_Block, Rem_Block);\n \n                   begin\n                      Write (Strm.all, To_Rem_Block (Item (Low .. Item'Last)));\n@@ -377,28 +379,233 @@ package body System.Strings.Stream_Ops is\n \n          else\n             for Index in Item'First .. Item'Last loop\n-               Character_Type'Write (Strm, Item (Index));\n+               Element_Type'Write (Strm, Item (Index));\n             end loop;\n          end if;\n       end Write;\n    end Stream_Ops_Internal;\n \n-   --  Specific instantiations for all Ada string types\n+   --  Specific instantiations for all Ada array types handled\n+\n+   package Storage_Array_Ops is\n+     new Stream_Ops_Internal\n+       (Element_Type => Storage_Element,\n+        Index_Type   => Storage_Offset,\n+        Array_Type   => Storage_Array);\n+\n+   package Stream_Element_Array_Ops is\n+     new Stream_Ops_Internal\n+       (Element_Type => Stream_Element,\n+        Index_Type   => Stream_Element_Offset,\n+        Array_Type   => Stream_Element_Array);\n \n    package String_Ops is\n      new Stream_Ops_Internal\n-       (Character_Type => Character,\n-        String_Type    => String);\n+       (Element_Type => Character,\n+        Index_Type   => Positive,\n+        Array_Type   => String);\n \n    package Wide_String_Ops is\n      new Stream_Ops_Internal\n-       (Character_Type => Wide_Character,\n-        String_Type    => Wide_String);\n+       (Element_Type => Wide_Character,\n+        Index_Type   => Positive,\n+        Array_Type   => Wide_String);\n \n    package Wide_Wide_String_Ops is\n      new Stream_Ops_Internal\n-       (Character_Type => Wide_Wide_Character,\n-        String_Type    => Wide_Wide_String);\n+       (Element_Type => Wide_Wide_Character,\n+        Index_Type   => Positive,\n+        Array_Type   => Wide_Wide_String);\n+\n+   -------------------------\n+   -- Storage_Array_Input --\n+   -------------------------\n+\n+   function Storage_Array_Input\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class) return Storage_Array\n+   is\n+   begin\n+      return Storage_Array_Ops.Input (Strm, Byte_IO);\n+   end Storage_Array_Input;\n+\n+   --------------------------------\n+   -- Storage_Array_Input_Blk_IO --\n+   --------------------------------\n+\n+   function Storage_Array_Input_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class) return Storage_Array\n+   is\n+   begin\n+      return Storage_Array_Ops.Input (Strm, Block_IO);\n+   end Storage_Array_Input_Blk_IO;\n+\n+   --------------------------\n+   -- Storage_Array_Output --\n+   --------------------------\n+\n+   procedure Storage_Array_Output\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Output (Strm, Item, Byte_IO);\n+   end Storage_Array_Output;\n+\n+   ---------------------------------\n+   -- Storage_Array_Output_Blk_IO --\n+   ---------------------------------\n+\n+   procedure Storage_Array_Output_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Output (Strm, Item, Block_IO);\n+   end Storage_Array_Output_Blk_IO;\n+\n+   ------------------------\n+   -- Storage_Array_Read --\n+   ------------------------\n+\n+   procedure Storage_Array_Read\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Read (Strm, Item, Byte_IO);\n+   end Storage_Array_Read;\n+\n+   -------------------------------\n+   -- Storage_Array_Read_Blk_IO --\n+   -------------------------------\n+\n+   procedure Storage_Array_Read_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Read (Strm, Item, Block_IO);\n+   end Storage_Array_Read_Blk_IO;\n+\n+   -------------------------\n+   -- Storage_Array_Write --\n+   -------------------------\n+\n+   procedure Storage_Array_Write\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Write (Strm, Item, Byte_IO);\n+   end Storage_Array_Write;\n+\n+   --------------------------------\n+   -- Storage_Array_Write_Blk_IO --\n+   --------------------------------\n+\n+   procedure Storage_Array_Write_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Storage_Array)\n+   is\n+   begin\n+      Storage_Array_Ops.Write (Strm, Item, Block_IO);\n+   end Storage_Array_Write_Blk_IO;\n+\n+   --------------------------------\n+   -- Stream_Element_Array_Input --\n+   --------------------------------\n+\n+   function Stream_Element_Array_Input\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return Stream_Element_Array\n+   is\n+   begin\n+      return Stream_Element_Array_Ops.Input (Strm, Byte_IO);\n+   end Stream_Element_Array_Input;\n+\n+   ---------------------------------------\n+   -- Stream_Element_Array_Input_Blk_IO --\n+   ---------------------------------------\n+\n+   function Stream_Element_Array_Input_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return Stream_Element_Array\n+   is\n+   begin\n+      return Stream_Element_Array_Ops.Input (Strm, Block_IO);\n+   end Stream_Element_Array_Input_Blk_IO;\n+\n+   ---------------------------------\n+   -- Stream_Element_Array_Output --\n+   ---------------------------------\n+\n+   procedure Stream_Element_Array_Output\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Output (Strm, Item, Byte_IO);\n+   end Stream_Element_Array_Output;\n+\n+   ----------------------------------------\n+   -- Stream_Element_Array_Output_Blk_IO --\n+   ----------------------------------------\n+\n+   procedure Stream_Element_Array_Output_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Output (Strm, Item, Block_IO);\n+   end Stream_Element_Array_Output_Blk_IO;\n+\n+   -------------------------------\n+   -- Stream_Element_Array_Read --\n+   -------------------------------\n+\n+   procedure Stream_Element_Array_Read\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Read (Strm, Item, Byte_IO);\n+   end Stream_Element_Array_Read;\n+\n+   --------------------------------------\n+   -- Stream_Element_Array_Read_Blk_IO --\n+   --------------------------------------\n+\n+   procedure Stream_Element_Array_Read_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Read (Strm, Item, Block_IO);\n+   end Stream_Element_Array_Read_Blk_IO;\n+\n+   --------------------------------\n+   -- Stream_Element_Array_Write --\n+   --------------------------------\n+\n+   procedure Stream_Element_Array_Write\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Write (Strm, Item, Byte_IO);\n+   end Stream_Element_Array_Write;\n+\n+   ---------------------------------------\n+   -- Stream_Element_Array_Write_Blk_IO --\n+   ---------------------------------------\n+\n+   procedure Stream_Element_Array_Write_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Stream_Element_Array)\n+   is\n+   begin\n+      Stream_Element_Array_Ops.Write (Strm, Item, Block_IO);\n+   end Stream_Element_Array_Write_Blk_IO;\n \n    ------------------\n    -- String_Input --"}, {"sha": "a3fb3c6e6b2dd8b3d20933da0f22a8f2a61388ea", "filename": "gcc/ada/s-ststop.ads", "status": "modified", "additions": 87, "deletions": 7, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fs-ststop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161c5cc509e5e8abd70ec84848c43f51a9b1cbcb/gcc%2Fada%2Fs-ststop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ststop.ads?ref=161c5cc509e5e8abd70ec84848c43f51a9b1cbcb", "patch": "@@ -33,9 +33,14 @@\n --  the following types using a \"block IO\" approach in which the entire data\n --  item is written in one operation, instead of writing individual characters.\n \n+--     Ada.Stream_Element_Array\n --     Ada.String\n --     Ada.Wide_String\n --     Ada.Wide_Wide_String\n+--     System.Storage_Array\n+\n+--  Note: this routine is in Ada.Strings because historically it handled only\n+--  the string types. It is not worth moving it at this stage.\n \n --  The compiler will generate references to the subprograms in this package\n --  when expanding stream attributes for the above mentioned types. Example:\n@@ -48,21 +53,96 @@\n --       or\n --     String_Output_Blk_IO (Some_Stream, Some_String);\n \n---  This expansion occurs only if System.Stream_Attributes.Block_IO_OK returns\n---  True, indicating that this approach is compatible with the expectations of\n---  System.Stream_Attributes. For the default implementation of this package,\n---  there is no difference between writing the elements one by one using the\n---  default output routine for the element type and writing the whole array\n---  using block IO.\n+--  String_Output form is used if pragma Restrictions (No_String_Optimziations)\n+--  is active, which requires element by element operations. The BLK_IO form\n+--  is used if this restriction is not set, allowing block optimization.\n \n---  In addition,\n+--  Note that if System.Stream_Attributes.Block_IO_OK is False, then the BLK_IO\n+--  form is treated as equivalent to the normal case, so that the optimization\n+--  is inhibited anyway, regardless of the setting of the restriction. This\n+--  handles versions of System.Stream_Attributes (in particular the XDR version\n+--  found in s-stratt-xdr) which do not permit block io optimization.\n \n pragma Compiler_Unit;\n \n with Ada.Streams;\n \n+with System.Storage_Elements;\n+\n package System.Strings.Stream_Ops is\n \n+   -------------------------------------\n+   -- Storage_Array stream operations --\n+   -------------------------------------\n+\n+   function Storage_Array_Input\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return System.Storage_Elements.Storage_Array;\n+\n+   function Storage_Array_Input_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return System.Storage_Elements.Storage_Array;\n+\n+   procedure Storage_Array_Output\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : System.Storage_Elements.Storage_Array);\n+\n+   procedure Storage_Array_Output_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : System.Storage_Elements.Storage_Array);\n+\n+   procedure Storage_Array_Read\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out System.Storage_Elements.Storage_Array);\n+\n+   procedure Storage_Array_Read_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out System.Storage_Elements.Storage_Array);\n+\n+   procedure Storage_Array_Write\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : System.Storage_Elements.Storage_Array);\n+\n+   procedure Storage_Array_Write_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : System.Storage_Elements.Storage_Array);\n+\n+   --------------------------------------------\n+   -- Stream_Element_Array stream operations --\n+   --------------------------------------------\n+\n+   function Stream_Element_Array_Input\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return Ada.Streams.Stream_Element_Array;\n+\n+   function Stream_Element_Array_Input_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class)\n+      return Ada.Streams.Stream_Element_Array;\n+\n+   procedure Stream_Element_Array_Output\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Ada.Streams.Stream_Element_Array);\n+\n+   procedure Stream_Element_Array_Output_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Ada.Streams.Stream_Element_Array);\n+\n+   procedure Stream_Element_Array_Read\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Ada.Streams.Stream_Element_Array);\n+\n+   procedure Stream_Element_Array_Read_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : out Ada.Streams.Stream_Element_Array);\n+\n+   procedure Stream_Element_Array_Write\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Ada.Streams.Stream_Element_Array);\n+\n+   procedure Stream_Element_Array_Write_Blk_IO\n+     (Strm : access Ada.Streams.Root_Stream_Type'Class;\n+      Item : Ada.Streams.Stream_Element_Array);\n+\n    ------------------------------\n    -- String stream operations --\n    ------------------------------"}]}