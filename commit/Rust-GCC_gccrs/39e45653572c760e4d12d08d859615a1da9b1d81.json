{"sha": "39e45653572c760e4d12d08d859615a1da9b1d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllNDU2NTM1NzJjNzYwZTRkMTJkMDhkODU5NjE1YTFkYTliMWQ4MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-03-25T19:05:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-03-25T19:05:57Z"}, "message": "tree-ssa-dom.c (record_equivalences_from_incoming_edge): Rework slightly to avoid creating and folding useless trees.\n\n        * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Rework\n\tslightly to avoid creating and folding useless trees.  Simplify\n        slightly by restricting to INTEGER_CSTs and using int_fits_type_p.\n\nFrom-SVN: r197060", "tree": {"sha": "badb3924bcf639adf7313e2d437082f425cefaed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/badb3924bcf639adf7313e2d437082f425cefaed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e45653572c760e4d12d08d859615a1da9b1d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e45653572c760e4d12d08d859615a1da9b1d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e45653572c760e4d12d08d859615a1da9b1d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e45653572c760e4d12d08d859615a1da9b1d81/comments", "author": null, "committer": null, "parents": [{"sha": "85d8c21edbcdf3915c6bd0d72429329ef760ff2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d8c21edbcdf3915c6bd0d72429329ef760ff2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d8c21edbcdf3915c6bd0d72429329ef760ff2b"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "9db06293e448e2d24daab80d091d9eeee84b8f45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e45653572c760e4d12d08d859615a1da9b1d81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e45653572c760e4d12d08d859615a1da9b1d81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39e45653572c760e4d12d08d859615a1da9b1d81", "patch": "@@ -1,3 +1,9 @@\n+2013-03-25  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Rework\n+\tslightly to avoid creating and folding useless trees.  Simplify\n+\tslightly by restricting to INTEGER_CSTs and using int_fits_type_p.\n+\n 2013-03-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*zero_extendsidi2): Merge with"}, {"sha": "a71c6dcdfbbf0e9531f9bf62c3af45d288023cdd", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e45653572c760e4d12d08d859615a1da9b1d81/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e45653572c760e4d12d08d859615a1da9b1d81/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=39e45653572c760e4d12d08d859615a1da9b1d81", "patch": "@@ -1135,12 +1135,13 @@ record_equivalences_from_incoming_edge (basic_block bb)\n \t  if (lhs)\n \t    record_equality (lhs, rhs);\n \n-\t  /* If LHS is an SSA_NAME and RHS is a constant and LHS was set\n-\t     via a widening type conversion, then we may be able to record\n+\t  /* If LHS is an SSA_NAME and RHS is a constant integer and LHS was\n+\t     set via a widening type conversion, then we may be able to record\n \t     additional equivalences.  */\n \t  if (lhs\n \t      && TREE_CODE (lhs) == SSA_NAME\n-\t      && is_gimple_constant (rhs))\n+\t      && is_gimple_constant (rhs)\n+\t      && TREE_CODE (rhs) == INTEGER_CST)\n \t    {\n \t      gimple defstmt = SSA_NAME_DEF_STMT (lhs);\n \n@@ -1149,16 +1150,14 @@ record_equivalences_from_incoming_edge (basic_block bb)\n \t\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (defstmt)))\n \t\t{\n \t\t  tree old_rhs = gimple_assign_rhs1 (defstmt);\n-\t\t  tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);\n-\n-\t\t  /* If this was a widening conversion and if RHS is converted\n-\t\t     to the type of OLD_RHS and has the same value, then we\n-\t\t     can record an equivalence between OLD_RHS and the\n-\t\t     converted representation of RHS.  */\n-\t\t  if ((TYPE_PRECISION (TREE_TYPE (lhs))\n-\t\t       > TYPE_PRECISION (TREE_TYPE (old_rhs)))\n-\t\t      && operand_equal_p (rhs, newval, 0))\n-\t\t    record_equality (old_rhs, newval);\n+\n+\t\t  /* If the constant is in the range of the type of OLD_RHS,\n+\t\t     then convert the constant and record the equivalence.  */\n+\t\t  if (int_fits_type_p (rhs, TREE_TYPE (old_rhs)))\n+\t\t    {\n+\t\t      tree newval = fold_convert (TREE_TYPE (old_rhs), rhs);\n+\t\t      record_equality (old_rhs, newval);\n+\t\t    }\n \t\t}\n \t    }\n "}]}