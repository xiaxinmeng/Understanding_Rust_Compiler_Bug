{"sha": "5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjYjNiNGQ4MGQ5ZDk3M2FjYWZlOWQ1YTFjMTJkMTUxYjRiOTlmYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-11-02T10:45:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-02T10:45:25Z"}, "message": "re PR libstdc++/55169 (std::discrete_distribution::operator(generator&) makes unnecessary copy of parameter vector)\n\n2012-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/55169\n\t* include/bits/random.h: Remove all uses of param().\n\t(chi_squared_distribution<>::__generate_impl(_ForwardIterator,\n\t_ForwardIterator, _UniformRandomNumberGenerator&): Declare\n\t* include/bits/random.tcc: ... define.\n\t* include/ext/random: Remove all uses of param().\n\nFrom-SVN: r193092", "tree": {"sha": "d54af44b8ee5ba85ab8df357749ea2eb1793fdb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54af44b8ee5ba85ab8df357749ea2eb1793fdb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/comments", "author": null, "committer": null, "parents": [{"sha": "e570b479ae5a8b733348724368f13c5d465fc3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e570b479ae5a8b733348724368f13c5d465fc3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e570b479ae5a8b733348724368f13c5d465fc3e6"}], "stats": {"total": 390, "additions": 202, "deletions": 188}, "files": [{"sha": "907fa7c7fc64cfbc4838a8726236c88af470f985", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "patch": "@@ -1,3 +1,12 @@\n+2012-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/55169\n+\t* include/bits/random.h: Remove all uses of param().\n+\t(chi_squared_distribution<>::__generate_impl(_ForwardIterator,\n+\t_ForwardIterator, _UniformRandomNumberGenerator&): Declare\n+\t* include/bits/random.tcc: ... define.\n+\t* include/ext/random: Remove all uses of param().\n+\n 2012-11-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/allocator.xml: Update reference to Hoard.\n@@ -27,7 +36,7 @@\n \t* testsuite/23_containers/forward_list/cons/14.cc: New.\n \n 2012-11-02  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* doc/xml/manual/codecvt.xml: Fix reference to Austin Common\n \tStandards Revision Group.\n \t* doc/xml/manual/messages.xml: Ditto.\n@@ -39,7 +48,7 @@\n \tSTL at SGI.\n \tUpdate reference to COM at Microsoft.\n \tUpdate reference to Worst-case efficient priority queues at ACM.\n-\t\n+\n 2012-11-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/18_support/initializer_list/range_access.cc: Fix copying"}, {"sha": "d87a35e539d0a9b07463c84709d24e7baad66c02", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 151, "deletions": 157, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "patch": "@@ -1767,7 +1767,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-        { return this->operator()(__urng, this->param()); }\n+        { return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -1779,7 +1779,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1796,6 +1796,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two uniform integer distributions have\n+       *        the same parameters.\n+       */\n+      friend bool\n+      operator==(const uniform_int_distribution& __d1,\n+\t\t const uniform_int_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1807,16 +1816,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two uniform integer distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::uniform_int_distribution<_IntType>& __d1,\n-\t       const std::uniform_int_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two uniform integer distributions have\n    *        different parameters.\n@@ -1972,7 +1971,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-        { return this->operator()(__urng, this->param()); }\n+        { return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -1989,7 +1988,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2006,6 +2005,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two uniform real distributions have\n+       *        the same parameters.\n+       */\n+      friend bool\n+      operator==(const uniform_real_distribution& __d1,\n+\t\t const uniform_real_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2017,16 +2025,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two uniform real distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::uniform_real_distribution<_IntType>& __d1,\n-\t       const std::uniform_real_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two uniform real distributions have\n    *        different parameters.\n@@ -2195,7 +2193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -2207,7 +2205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2397,7 +2395,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+        { return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -2410,7 +2408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2435,7 +2433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const lognormal_distribution& __d1,\n \t\t const lognormal_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_nd == __d2._M_nd); }\n \n       /**\n@@ -2619,7 +2617,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -2631,7 +2629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2656,7 +2654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const gamma_distribution& __d1,\n \t\t const gamma_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_nd == __d2._M_nd); }\n \n       /**\n@@ -2824,7 +2822,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate_impl(__f, __t, __urng, _M_gd.param()); }\n+        { this->__generate_impl(__f, __t, __urng); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2840,9 +2838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(result_type* __f, result_type* __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ typename std::gamma_distribution<result_type>::param_type\n-\t    __p2(_M_gd.param());\n-\t  this->__generate_impl(__f, __t, __urng, __p2); }\n+        { this->__generate_impl(__f, __t, __urng); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tvoid\n@@ -2861,7 +2857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const chi_squared_distribution& __d1,\n \t\t const chi_squared_distribution& __d2)\n-      { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }\n+      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }\n \n       /**\n        * @brief Inserts a %chi_squared_distribution random number distribution\n@@ -2894,13 +2890,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   std::chi_squared_distribution<_RealType1>& __x);\n \n     private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng);\n+\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n \tvoid\n \t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n \t\t\t_UniformRandomNumberGenerator& __urng,\n-\t\t\ttypename std::gamma_distribution<result_type>::param_type&\n-\t\t\t__p);\n+\t\t\tconst typename\n+\t\t\tstd::gamma_distribution<result_type>::param_type& __p);\n \n       param_type _M_param;\n \n@@ -3024,7 +3026,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -3036,7 +3038,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -3053,6 +3055,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two Cauchy distributions have\n+       *        the same parameters.\n+       */\n+      friend bool\n+      operator==(const cauchy_distribution& __d1,\n+\t\t const cauchy_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -3064,16 +3075,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two Cauchy distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::cauchy_distribution<_RealType>& __d1,\n-\t       const std::cauchy_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two Cauchy distributions have\n    *        different parameters.\n@@ -3278,7 +3279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const fisher_f_distribution& __d1,\n \t\t const fisher_f_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_gd_x == __d2._M_gd_x\n \t\t&& __d1._M_gd_y == __d2._M_gd_y); }\n \n@@ -3492,7 +3493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const student_t_distribution& __d1,\n \t\t const student_t_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }\n \n       /**\n@@ -3664,7 +3665,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _UniformRandomNumberGenerator>\n       result_type\n       operator()(_UniformRandomNumberGenerator& __urng)\n-      { return this->operator()(__urng, this->param()); }\n+      { return this->operator()(__urng, _M_param); }\n \n     template<typename _UniformRandomNumberGenerator>\n       result_type\n@@ -3684,7 +3685,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       __generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t _UniformRandomNumberGenerator& __urng)\n-      { this->__generate(__f, __t, __urng, this->param()); }\n+      { this->__generate(__f, __t, __urng, _M_param); }\n \n     template<typename _ForwardIterator,\n \t     typename _UniformRandomNumberGenerator>\n@@ -3700,6 +3701,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t const param_type& __p)\n       { this->__generate_impl(__f, __t, __urng, __p); }\n \n+    /**\n+     * @brief Return true if two Bernoulli distributions have\n+     *        the same parameters.\n+     */\n+    friend bool\n+    operator==(const bernoulli_distribution& __d1,\n+\t       const bernoulli_distribution& __d2)\n+    { return __d1._M_param == __d2._M_param; }\n+\n   private:\n     template<typename _ForwardIterator,\n \t     typename _UniformRandomNumberGenerator>\n@@ -3711,15 +3721,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     param_type _M_param;\n   };\n \n-  /**\n-   * @brief Return true if two Bernoulli distributions have\n-   *        the same parameters.\n-   */\n-  inline bool\n-  operator==(const std::bernoulli_distribution& __d1,\n-\t     const std::bernoulli_distribution& __d2)\n-  { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two Bernoulli distributions have\n    *        different parameters.\n@@ -3892,7 +3893,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -3904,7 +3905,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -3930,9 +3931,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         operator==(const binomial_distribution& __d1,\n \t\t   const binomial_distribution& __d2)\n #ifdef _GLIBCXX_USE_C99_MATH_TR1\n-\t{ return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }\n+\t{ return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }\n #else\n-        { return __d1.param() == __d2.param(); }\n+        { return __d1._M_param == __d2._M_param; }\n #endif\n \n       /**\n@@ -4104,7 +4105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -4116,7 +4117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4133,6 +4134,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two geometric distributions have\n+       *        the same parameters.\n+       */\n+      friend bool\n+      operator==(const geometric_distribution& __d1,\n+\t\t const geometric_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4144,16 +4154,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two geometric distributions have\n-   *        the same parameters.\n-   */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::geometric_distribution<_IntType>& __d1,\n-\t       const std::geometric_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two geometric distributions have\n    *        different parameters.\n@@ -4349,7 +4349,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const negative_binomial_distribution& __d1,\n \t\t const negative_binomial_distribution& __d2)\n-      { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }\n+      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }\n \n       /**\n        * @brief Inserts a %negative_binomial_distribution random\n@@ -4529,7 +4529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -4541,7 +4541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4567,9 +4567,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator==(const poisson_distribution& __d1,\n \t\t const poisson_distribution& __d2)\n #ifdef _GLIBCXX_USE_C99_MATH_TR1\n-      { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }\n+      { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }\n #else\n-      { return __d1.param() == __d2.param(); }\n+      { return __d1._M_param == __d2._M_param; }\n #endif\n \n       /**\n@@ -4739,7 +4739,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-        { return this->operator()(__urng, this->param()); }\n+        { return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -4756,7 +4756,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4773,6 +4773,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two exponential distributions have the same\n+       *        parameters.\n+       */\n+      friend bool\n+      operator==(const exponential_distribution& __d1,\n+\t\t const exponential_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4784,16 +4793,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two exponential distributions have the same\n-   *        parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::exponential_distribution<_RealType>& __d1,\n-\t       const std::exponential_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two exponential distributions have different\n    *        parameters.\n@@ -4948,7 +4947,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -4960,7 +4959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4977,6 +4976,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two Weibull distributions have the same\n+       *        parameters.\n+       */\n+      friend bool\n+      operator==(const weibull_distribution& __d1,\n+\t\t const weibull_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -4988,16 +4996,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-   /**\n-    * @brief Return true if two Weibull distributions have the same\n-    *        parameters.\n-    */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::weibull_distribution<_RealType>& __d1,\n-\t       const std::weibull_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n    /**\n     * @brief Return true if two Weibull distributions have different\n     *        parameters.\n@@ -5152,7 +5150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -5164,7 +5162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -5181,6 +5179,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two extreme value distributions have the same\n+       *        parameters.\n+       */\n+      friend bool\n+      operator==(const extreme_value_distribution& __d1,\n+\t\t const extreme_value_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n     private:\n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -5192,16 +5199,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-    * @brief Return true if two extreme value distributions have the same\n-    *        parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::extreme_value_distribution<_RealType>& __d1,\n-\t       const std::extreme_value_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n     * @brief Return true if two extreme value distributions have different\n     *        parameters.\n@@ -5382,7 +5379,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -5394,7 +5391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -5411,6 +5408,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two discrete distributions have the same\n+       *        parameters.\n+       */\n+      friend bool\n+      operator==(const discrete_distribution& __d1,\n+\t\t const discrete_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n       /**\n        * @brief Inserts a %discrete_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -5453,16 +5459,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-    * @brief Return true if two discrete distributions have the same\n-    *        parameters.\n-    */\n-  template<typename _IntType>\n-    inline bool\n-    operator==(const std::discrete_distribution<_IntType>& __d1,\n-\t       const std::discrete_distribution<_IntType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n     * @brief Return true if two discrete distributions have different\n     *        parameters.\n@@ -5649,7 +5645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -5661,7 +5657,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -5678,6 +5674,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two piecewise constant distributions have the\n+       *        same parameters.\n+       */\n+      friend bool\n+      operator==(const piecewise_constant_distribution& __d1,\n+\t\t const piecewise_constant_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n       /**\n        * @brief Inserts a %piecewise_constan_distribution random\n        *        number distribution @p __x into the output stream @p __os.\n@@ -5721,16 +5726,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-    * @brief Return true if two piecewise constant distributions have the\n-    *        same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,\n-\t       const std::piecewise_constant_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n     * @brief Return true if two piecewise constant distributions have \n     *        different parameters.\n@@ -5920,7 +5915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -5932,7 +5927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -5949,6 +5944,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two piecewise linear distributions have the\n+       *        same parameters.\n+       */\n+      friend bool\n+      operator==(const piecewise_linear_distribution& __d1,\n+\t\t const piecewise_linear_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n       /**\n        * @brief Inserts a %piecewise_linear_distribution random number\n        *        distribution @p __x into the output stream @p __os.\n@@ -5992,16 +5996,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-    * @brief Return true if two piecewise linear distributions have the\n-    *        same parameters.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,\n-\t       const std::piecewise_linear_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n     * @brief Return true if two piecewise linear distributions have\n     *        different parameters."}, {"sha": "0f44ee8522907abc88711065d192c69a94291173", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "patch": "@@ -2150,6 +2150,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+  template<typename _RealType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      std::chi_squared_distribution<_RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\twhile (__f != __t)\n+\t  *__f++ = 2 * _M_gd(__urng);\n+      }\n \n   template<typename _RealType>\n     template<typename _ForwardIterator,\n@@ -2158,8 +2170,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::chi_squared_distribution<_RealType>::\n       __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n \t\t      _UniformRandomNumberGenerator& __urng,\n-\t\t      typename std::gamma_distribution<result_type>::param_type&\n-\t\t      __p)\n+\t\t      const typename\n+\t\t      std::gamma_distribution<result_type>::param_type& __p)\n       {\n \t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n \twhile (__f != __t)"}, {"sha": "79ee5994a3a56cf6ab0c52bf40db6a82b4360006", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=5bcb3b4d80d9d973acafe9d5a1c12d151b4b99fa", "patch": "@@ -510,7 +510,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -522,7 +522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -539,6 +539,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const param_type& __p)\n \t{ this->__generate_impl(__f, __t, __urng, __p); }\n \n+      /**\n+       * @brief Return true if two beta distributions have the same\n+       *        parameters and the sequences that would be generated\n+       *        are equal.\n+       */\n+      friend bool\n+      operator==(const beta_distribution& __d1,\n+\t\t const beta_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n       /**\n        * @brief Inserts a %beta_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -579,17 +589,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type _M_param;\n     };\n \n-  /**\n-   * @brief Return true if two beta distributions have the same\n-   *        parameters and the sequences that would be generated\n-   *        are equal.\n-   */\n-  template<typename _RealType>\n-    inline bool\n-    operator==(const __gnu_cxx::beta_distribution<_RealType>& __d1,\n-\t       const __gnu_cxx::beta_distribution<_RealType>& __d2)\n-    { return __d1.param() == __d2.param(); }\n-\n   /**\n    * @brief Return true if two beta distributions are different.\n    */\n@@ -809,7 +808,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return this->operator()(__urng, _M_param); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -821,7 +820,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ return this->__generate_impl(__f, __t, __urng, this->param()); }\n+\t{ return this->__generate_impl(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1073,7 +1072,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1098,7 +1097,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const rice_distribution& __d1,\n \t\t const rice_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_ndx == __d2._M_ndx\n \t\t&& __d1._M_ndy == __d2._M_ndy); }\n \n@@ -1296,7 +1295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1321,7 +1320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const nakagami_distribution& __d1,\n \t\t const nakagami_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_gd == __d2._M_gd); }\n \n       /**\n@@ -1532,7 +1531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1557,7 +1556,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const pareto_distribution& __d1,\n \t\t const pareto_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_ud == __d2._M_ud); }\n \n       /**\n@@ -1774,7 +1773,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -1799,7 +1798,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const k_distribution& __d1,\n \t\t const k_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_gd1 == __d2._M_gd1\n \t\t&& __d1._M_gd2 == __d2._M_gd2); }\n \n@@ -2006,7 +2005,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2031,7 +2030,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const arcsine_distribution& __d1,\n \t\t const arcsine_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_ud == __d2._M_ud); }\n \n       /**\n@@ -2241,7 +2240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t__generate(_ForwardIterator __f, _ForwardIterator __t,\n \t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -2266,7 +2265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend bool\n       operator==(const hoyt_distribution& __d1,\n \t\t const hoyt_distribution& __d2)\n-      { return (__d1.param() == __d2.param()\n+      { return (__d1._M_param == __d2._M_param\n \t\t&& __d1._M_ad == __d2._M_ad\n \t\t&& __d1._M_ed == __d2._M_ed); }\n "}]}