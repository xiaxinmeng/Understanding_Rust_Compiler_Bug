{"sha": "2390451ede49fa09bc0d9692802651aff66ae8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5MDQ1MWVkZTQ5ZmEwOWJjMGQ5NjkyODAyNjUxYWZmNjZhZThhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-11T07:11:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:29Z"}, "message": "[Ada] Fix invalid JSON for derived variant record with -gnatRj\n\ngcc/ada/\n\n\t* repinfo.ads (JSON output format): Document adjusted key name.\n\t* repinfo.adb (List_Record_Layout): Use Original_Record_Component\n\tif the normalized position of the component is not known.\n\t(List_Structural_Record_Layout): Rename Outer_Ent parameter into\n\tExt_End and add Ext_Level parameter. In an extension, if the parent\n\tsubtype has static discriminants, call List_Record_Layout on it.\n\tOutput \"parent_\" prefixes before \"variant\" according to Ext_Level.\n\tAdjust recursive calls throughout the procedure.", "tree": {"sha": "286003a293ba8de1824f3a86d90b282c31f9cf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286003a293ba8de1824f3a86d90b282c31f9cf79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2390451ede49fa09bc0d9692802651aff66ae8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2390451ede49fa09bc0d9692802651aff66ae8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2390451ede49fa09bc0d9692802651aff66ae8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2390451ede49fa09bc0d9692802651aff66ae8a6/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fd120d19d2636a812c9ffe4b8871f3733ae213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fd120d19d2636a812c9ffe4b8871f3733ae213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06fd120d19d2636a812c9ffe4b8871f3733ae213"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "25b52376905209436b242b8f463a67051330cdab", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2390451ede49fa09bc0d9692802651aff66ae8a6/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2390451ede49fa09bc0d9692802651aff66ae8a6/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=2390451ede49fa09bc0d9692802651aff66ae8a6", "patch": "@@ -963,10 +963,15 @@ package body Repinfo is\n \n       procedure List_Structural_Record_Layout\n         (Ent       : Entity_Id;\n-         Outer_Ent : Entity_Id;\n+         Ext_Ent   : Entity_Id;\n+         Ext_Level : Nat := 0;\n          Variant   : Node_Id := Empty;\n          Indent    : Natural := 0);\n-      --  Internal recursive procedure to display the structural layout\n+      --  Internal recursive procedure to display the structural layout.\n+      --  If Ext_Ent is not equal to Ent, it is an extension of Ent and\n+      --  Ext_Level is the number of successive extensions between them.\n+      --  If Variant is present, it's for a variant in the variant part\n+      --  instead of the common part of Ent. Indent is the indentation.\n \n       Incomplete_Layout : exception;\n       --  Exception raised if the layout is incomplete in -gnatc mode\n@@ -1319,7 +1324,12 @@ package body Repinfo is\n                   end if;\n                end if;\n \n-               List_Component_Layout (Comp,\n+               --  The Parent_Subtype in an extension is not back-annotated\n+\n+               List_Component_Layout (\n+                 (if Known_Normalized_Position (Comp)\n+                  then Comp\n+                  else Original_Record_Component (Comp)),\n                  Starting_Position, Starting_First_Bit, Prefix);\n             end;\n \n@@ -1334,15 +1344,16 @@ package body Repinfo is\n \n       procedure List_Structural_Record_Layout\n         (Ent       : Entity_Id;\n-         Outer_Ent : Entity_Id;\n+         Ext_Ent   : Entity_Id;\n+         Ext_Level : Nat := 0;\n          Variant   : Node_Id := Empty;\n          Indent    : Natural := 0)\n       is\n          function Derived_Discriminant (Disc : Entity_Id) return Entity_Id;\n-         --  This function assumes that Outer_Ent is an extension of Ent.\n+         --  This function assumes that Ext_Ent is an extension of Ent.\n          --  Disc is a discriminant of Ent that does not itself constrain a\n          --  discriminant of the parent type of Ent. Return the discriminant\n-         --  of Outer_Ent that ultimately constrains Disc, if any.\n+         --  of Ext_Ent that ultimately constrains Disc, if any.\n \n          ----------------------------\n          --  Derived_Discriminant  --\n@@ -1353,7 +1364,7 @@ package body Repinfo is\n             Derived_Disc : Entity_Id;\n \n          begin\n-            Derived_Disc := First_Discriminant (Outer_Ent);\n+            Derived_Disc := First_Discriminant (Ext_Ent);\n \n             --  Loop over the discriminants of the extension\n \n@@ -1380,7 +1391,7 @@ package body Repinfo is\n                Next_Discriminant (Derived_Disc);\n             end loop;\n \n-            --  Disc is not constrained by a discriminant of Outer_Ent\n+            --  Disc is not constrained by a discriminant of Ext_Ent\n \n             return Empty;\n          end Derived_Discriminant;\n@@ -1432,12 +1443,21 @@ package body Repinfo is\n                      pragma Assert (Present (Parent_Type));\n                   end if;\n \n-                  Parent_Type := Base_Type (Parent_Type);\n-                  if not In_Extended_Main_Source_Unit (Parent_Type) then\n-                     raise Not_In_Extended_Main;\n+                  --  Do not list variants if one of them has been selected\n+\n+                  if Has_Static_Discriminants (Parent_Type) then\n+                     List_Record_Layout (Parent_Type);\n+\n+                  else\n+                     Parent_Type := Base_Type (Parent_Type);\n+                     if not In_Extended_Main_Source_Unit (Parent_Type) then\n+                        raise Not_In_Extended_Main;\n+                     end if;\n+\n+                     List_Structural_Record_Layout\n+                       (Parent_Type, Ext_Ent, Ext_Level + 1);\n                   end if;\n \n-                  List_Structural_Record_Layout (Parent_Type, Outer_Ent);\n                   First := False;\n \n                   if Present (Record_Extension_Part (Definition)) then\n@@ -1467,7 +1487,7 @@ package body Repinfo is\n                      --  If this is the parent type of an extension, retrieve\n                      --  the derived discriminant from the extension, if any.\n \n-                     if Ent /= Outer_Ent then\n+                     if Ent /= Ext_Ent then\n                         Listed_Disc := Derived_Discriminant (Disc);\n \n                         if No (Listed_Disc) then\n@@ -1544,7 +1564,11 @@ package body Repinfo is\n          Spaces (Indent);\n          Write_Line (\"  ],\");\n          Spaces (Indent);\n-         Write_Str (\"  \"\"variant\"\" : [\");\n+         Write_Str (\"  \"\"\");\n+         for J in 1 .. Ext_Level loop\n+            Write_Str (\"parent_\");\n+         end loop;\n+         Write_Str (\"variant\"\" : [\");\n \n          --  Otherwise we recurse on each variant\n \n@@ -1567,7 +1591,8 @@ package body Repinfo is\n             Spaces (Indent);\n             Write_Str (\"      \"\"record\"\": [\");\n \n-            List_Structural_Record_Layout (Ent, Outer_Ent, Var, Indent + 4);\n+            List_Structural_Record_Layout\n+              (Ent, Ext_Ent, Ext_Level, Var, Indent + 4);\n \n             Write_Eol;\n             Spaces (Indent);"}, {"sha": "606bba45cd1a57afdddfee45d40de29ce401332d", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2390451ede49fa09bc0d9692802651aff66ae8a6/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2390451ede49fa09bc0d9692802651aff66ae8a6/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=2390451ede49fa09bc0d9692802651aff66ae8a6", "patch": "@@ -189,7 +189,7 @@ package Repinfo is\n    --    \"name\"                 :  string\n    --    \"location\"             :  string\n    --    \"record\"               :  array of components\n-   --    \"variant\"              :  array of variants\n+   --    \"[parent_]*variant\"    :  array of variants\n    --    \"formal\"               :  array of formal parameters\n    --    \"mechanism\"            :  string\n    --    \"Size\"                 :  numerical expression\n@@ -209,8 +209,9 @@ package Repinfo is\n    --    fully qualified Ada name. The value of \"location\" is the expanded\n    --    chain of instantiation locations that contains the entity.\n    --    \"record\" is present for every record type and its value is the list of\n-   --    components. \"variant\" is present only if the record type has a variant\n-   --    part and its value is the list of variants.\n+   --    components. \"[parent_]*variant\" is present only if the record type, or\n+   --    one of its ancestors (parent, grand-parent, etc) if it's an extension,\n+   --    has a variant part and its value is the list of variants.\n    --    \"formal\" is present for every subprogram and entry, and its value is\n    --    the list of formal parameters. \"mechanism\" is present for functions\n    --    only and its value is the return mechanim."}]}