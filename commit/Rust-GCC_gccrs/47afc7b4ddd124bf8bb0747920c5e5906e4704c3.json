{"sha": "47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhZmM3YjRkZGQxMjRiZjhiYjA3NDc5MjBjNWU1OTA2ZTQ3MDRjMw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-12-09T22:52:56Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-12-09T22:52:56Z"}, "message": "[PR92116, PR92877] [OpenACC] Replace 'openacc.data_environ' by standard libgomp mechanics\n\n\tlibgomp/\n\tPR libgomp/92116\n\tPR libgomp/92877\n\t* oacc-mem.c (lookup_dev): Reimplement.  Adjust all users.\n\t* libgomp.h (struct acc_dispatch_t): Remove 'data_environ' member.\n\tAdjust all users.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4-2.c:\n\tRemove XFAIL.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr92877-1.c: New file.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\n\nFrom-SVN: r279147", "tree": {"sha": "ab50a6d8c9d2d8c3ce075a07fc9d2d8c32a5a207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab50a6d8c9d2d8c3ce075a07fc9d2d8c32a5a207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cec41816c18f2857f8362825222ef4de0a6e596e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec41816c18f2857f8362825222ef4de0a6e596e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec41816c18f2857f8362825222ef4de0a6e596e"}], "stats": {"total": 176, "additions": 64, "deletions": 112}, "files": [{"sha": "83227032f8875f52b595b1ce460727214caf2c0a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -1,3 +1,18 @@\n+2019-12-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\tPR libgomp/92116\n+\tPR libgomp/92877\n+\n+\t* oacc-mem.c (lookup_dev): Reimplement.  Adjust all users.\n+\t* libgomp.h (struct acc_dispatch_t): Remove 'data_environ' member.\n+\tAdjust all users.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4-2.c:\n+\tRemove XFAIL.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92877-1.c: New file.\n+\n 2019-12-09  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR libgomp/92503"}, {"sha": "a35aa07c80be34589b4c2d84fb2e425466cd9bed", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -1025,13 +1025,6 @@ splay_compare (splay_tree_key x, splay_tree_key y)\n \n typedef struct acc_dispatch_t\n {\n-  /* This is a linked list of data mapped using the\n-     acc_map_data/acc_unmap_data or \"acc enter data\"/\"acc exit data\" pragmas.\n-     Unlike mapped_data in the goacc_thread struct, unmapping can\n-     happen out-of-order with respect to mapping.  */\n-  /* This is guarded by the lock in the \"outer\" struct gomp_device_descr.  */\n-  struct target_mem_desc *data_environ;\n-\n   /* Execute.  */\n   __typeof (GOMP_OFFLOAD_openacc_exec) *exec_func;\n \n@@ -1132,8 +1125,7 @@ struct gomp_device_descr\n   enum gomp_device_state state;\n \n   /* OpenACC-specific data and functions.  */\n-  /* This is mutable because of its mutable data_environ and target_data\n-     members.  */\n+  /* This is mutable because of its mutable target_data member.  */\n   acc_dispatch_t openacc;\n };\n "}, {"sha": "e9cd4bfcd4a70200f9a5c5daebc80719f87c48a7", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -264,8 +264,6 @@ static struct gomp_device_descr host_dispatch =\n     .state = GOMP_DEVICE_UNINITIALIZED,\n \n     .openacc = {\n-      .data_environ = NULL,\n-\n       .exec_func = host_openacc_exec,\n \n       .create_thread_data_func = host_openacc_create_thread_data,"}, {"sha": "369a11696dae411928d28d6ae3f03315516c25d1", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 27, "deletions": 94, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -50,44 +50,42 @@ lookup_host (struct gomp_device_descr *dev, void *h, size_t s)\n   return key;\n }\n \n-/* Return block containing [D->S), or NULL if not contained.\n-   The list isn't ordered by device address, so we have to iterate\n-   over the whole array.  This is not expected to be a common\n-   operation.  The device lock associated with TGT must be locked on entry, and\n-   remains locked on exit.  */\n+/* Helper for lookup_dev.  Iterate over splay tree.  */\n \n static splay_tree_key\n-lookup_dev (struct target_mem_desc *tgt, void *d, size_t s)\n+lookup_dev_1 (splay_tree_node node, uintptr_t d, size_t s)\n {\n-  int i;\n-  struct target_mem_desc *t;\n+  splay_tree_key key = &node->key;\n+  if (d >= key->tgt->tgt_start && d + s <= key->tgt->tgt_end)\n+    return key;\n \n-  if (!tgt)\n-    return NULL;\n+  key = NULL;\n+  if (node->left)\n+    key = lookup_dev_1 (node->left, d, s);\n+  if (!key && node->right)\n+    key = lookup_dev_1 (node->right, d, s);\n \n-  for (t = tgt; t != NULL; t = t->prev)\n-    {\n-      if (t->tgt_start <= (uintptr_t) d && t->tgt_end >= (uintptr_t) d + s)\n-        break;\n-    }\n+  return key;\n+}\n \n-  if (!t)\n-    return NULL;\n+/* Return block containing [D->S), or NULL if not contained.\n \n-  for (i = 0; i < t->list_count; i++)\n-    {\n-      void * offset;\n+   This iterates over the splay tree.  This is not expected to be a common\n+   operation.\n \n-      splay_tree_key k = &t->array[i].key;\n-      offset = d - t->tgt_start + k->tgt_offset;\n+   The device lock associated with MEM_MAP must be locked on entry, and remains\n+   locked on exit.  */\n \n-      if (k->host_start + offset <= (void *) k->host_end)\n-        return k;\n-    }\n+static splay_tree_key\n+lookup_dev (splay_tree mem_map, void *d, size_t s)\n+{\n+  if (!mem_map || !mem_map->root)\n+    return NULL;\n \n-  return NULL;\n+  return lookup_dev_1 (mem_map->root, (uintptr_t) d, s);\n }\n \n+\n /* OpenACC is silent on how memory exhaustion is indicated.  We return\n    NULL.  */\n \n@@ -147,7 +145,7 @@ acc_free (void *d)\n   /* We don't have to call lazy open here, as the ptr value must have\n      been returned by acc_malloc.  It's not permitted to pass NULL in\n      (unless you got that null from acc_malloc).  */\n-  if ((k = lookup_dev (acc_dev->openacc.data_environ, d, 1)))\n+  if ((k = lookup_dev (&acc_dev->mem_map, d, 1)))\n     {\n       void *offset = d - k->tgt->tgt_start + k->tgt_offset;\n       void *h = k->host_start + offset;\n@@ -300,7 +298,7 @@ acc_hostptr (void *d)\n \n   gomp_mutex_lock (&acc_dev->lock);\n \n-  n = lookup_dev (acc_dev->openacc.data_environ, d, 1);\n+  n = lookup_dev (&acc_dev->mem_map, d, 1);\n \n   if (!n)\n     {\n@@ -395,7 +393,7 @@ acc_map_data (void *h, void *d, size_t s)\n \t\t      (int)s);\n \t}\n \n-      if (lookup_dev (thr->dev->openacc.data_environ, d, s))\n+      if (lookup_dev (&thr->dev->mem_map, d, s))\n         {\n \t  gomp_mutex_unlock (&acc_dev->lock);\n \t  gomp_fatal (\"device address [%p, +%d] is already mapped\", (void *)d,\n@@ -418,11 +416,6 @@ acc_map_data (void *h, void *d, size_t s)\n \t  thr->api_info = NULL;\n \t}\n     }\n-\n-  gomp_mutex_lock (&acc_dev->lock);\n-  tgt->prev = acc_dev->openacc.data_environ;\n-  acc_dev->openacc.data_environ = tgt;\n-  gomp_mutex_unlock (&acc_dev->lock);\n }\n \n void\n@@ -482,25 +475,11 @@ acc_unmap_data (void *h)\n \n   if (t->refcount == 2)\n     {\n-      struct target_mem_desc *tp;\n-\n       /* This is the last reference, so pull the descriptor off the\n          chain. This avoids gomp_unmap_vars via gomp_unmap_tgt from\n          freeing the device memory. */\n       t->tgt_end = 0;\n       t->to_free = 0;\n-\n-      for (tp = NULL, t = acc_dev->openacc.data_environ; t != NULL;\n-\t   tp = t, t = t->prev)\n-\tif (n->tgt == t)\n-\t  {\n-\t    if (tp)\n-\t      tp->prev = t->prev;\n-\t    else\n-\t      acc_dev->openacc.data_environ = t->prev;\n-\n-\t    break;\n-\t  }\n     }\n \n   gomp_mutex_unlock (&acc_dev->lock);\n@@ -597,13 +576,7 @@ present_create_copy (unsigned f, void *h, size_t s, int async)\n       /* Initialize dynamic refcount.  */\n       tgt->list[0].key->dynamic_refcount = 1;\n \n-      gomp_mutex_lock (&acc_dev->lock);\n-\n       d = tgt->to_free;\n-      tgt->prev = acc_dev->openacc.data_environ;\n-      acc_dev->openacc.data_environ = tgt;\n-\n-      gomp_mutex_unlock (&acc_dev->lock);\n     }\n \n   if (profiling_p)\n@@ -749,21 +722,6 @@ delete_copyout (unsigned f, void *h, size_t s, int async, const char *libfnname)\n \n   if (n->refcount == 0)\n     {\n-      if (n->tgt->refcount == 2)\n-\t{\n-\t  struct target_mem_desc *tp, *t;\n-\t  for (tp = NULL, t = acc_dev->openacc.data_environ; t != NULL;\n-\t       tp = t, t = t->prev)\n-\t    if (n->tgt == t)\n-\t      {\n-\t\tif (tp)\n-\t\t  tp->prev = t->prev;\n-\t\telse\n-\t\t  acc_dev->openacc.data_environ = t->prev;\n-\t\tbreak;\n-\t      }\n-\t}\n-\n       if (f & FLAG_COPYOUT)\n \t{\n \t  goacc_aq aq = get_goacc_asyncqueue (async);\n@@ -954,11 +912,6 @@ gomp_acc_insert_pointer (size_t mapnum, void **hostaddrs, size_t *sizes,\n \n   /* Initialize dynamic refcount.  */\n   tgt->list[0].key->dynamic_refcount = 1;\n-\n-  gomp_mutex_lock (&acc_dev->lock);\n-  tgt->prev = acc_dev->openacc.data_environ;\n-  acc_dev->openacc.data_environ = tgt;\n-  gomp_mutex_unlock (&acc_dev->lock);\n }\n \n void\n@@ -1009,26 +962,6 @@ gomp_acc_remove_pointer (void *h, size_t s, bool force_copyfrom, int async,\n \n   if (n->refcount == 0)\n     {\n-      if (t->refcount == minrefs)\n-\t{\n-\t  /* This is the last reference, so pull the descriptor off the\n-\t     chain. This prevents gomp_unmap_vars via gomp_unmap_tgt from\n-\t     freeing the device memory. */\n-\t  struct target_mem_desc *tp;\n-\t  for (tp = NULL, t = acc_dev->openacc.data_environ; t != NULL;\n-\t       tp = t, t = t->prev)\n-\t    {\n-\t      if (n->tgt == t)\n-\t\t{\n-\t\t  if (tp)\n-\t\t    tp->prev = t->prev;\n-\t\t  else\n-\t\t    acc_dev->openacc.data_environ = t->prev;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t}\n-\n       /* Set refcount to 1 to allow gomp_unmap_vars to unmap it.  */\n       n->refcount = 1;\n       t->refcount = minrefs;"}, {"sha": "39a24f56395578decf9865d5801d4efe86cc487a", "filename": "libgomp/target.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -2897,7 +2897,6 @@ gomp_target_init (void)\n \t\tcurrent_device.type = current_device.get_type_func ();\n \t\tcurrent_device.mem_map.root = NULL;\n \t\tcurrent_device.state = GOMP_DEVICE_UNINITIALIZED;\n-\t\tcurrent_device.openacc.data_environ = NULL;\n \t\tfor (i = 0; i < new_num_devices; i++)\n \t\t  {\n \t\t    current_device.target_id = i;"}, {"sha": "48226cf64c744f154a52c96247bec7fdfbf37c11", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4-2.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -25,7 +25,5 @@ main ()\n }\n \n /* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" }\n-   TODO PR92877\n-   { dg-output \"libgomp: cuMemGetAddressRange_v2 error: named symbol not found\" { target openacc_nvidia_accel_selected } }\n-   { dg-output \"refusing to free device memory space at \\[0-9a-fA-FxX\\]+ that is still mapped at \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+64\\\\\\]\" { xfail *-*-* } }\n+   { dg-output \"refusing to free device memory space at \\[0-9a-fA-FxX\\]+ that is still mapped at \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+64\\\\\\]\" }\n    { dg-shouldfail \"\" } */"}, {"sha": "7638d5285755ed29bf30424305a1d2bf7b36290d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_free-pr92503-4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_free-pr92503-4.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -26,7 +26,5 @@ main ()\n }\n \n /* { dg-output \"CheCKpOInT(\\n|\\r\\n|\\r).*\" }\n-   TODO PR92877\n-   { dg-output \"libgomp: cuMemGetAddressRange_v2 error: named symbol not found\" { target openacc_nvidia_accel_selected } }\n-   { dg-output \"refusing to free device memory space at \\[0-9a-fA-FxX\\]+ that is still mapped at \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+87\\\\\\]\" { xfail *-*-* } }\n+   { dg-output \"refusing to free device memory space at \\[0-9a-fA-FxX\\]+ that is still mapped at \\\\\\[\\[0-9a-fA-FxX\\]+,\\\\\\+87\\\\\\]\" }\n    { dg-shouldfail \"\" } */"}, {"sha": "02595a9c0e59f942799d3dc90248d9c870f6bc0f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr92877-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92877-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47afc7b4ddd124bf8bb0747920c5e5906e4704c3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92877-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92877-1.c?ref=47afc7b4ddd124bf8bb0747920c5e5906e4704c3", "patch": "@@ -0,0 +1,19 @@\n+/* Make sure that we can resolve back via 'acc_hostptr' an 'acc_deviceptr'\n+   retrieved for a structured mapping.  */\n+\n+#include <assert.h>\n+#include <openacc.h>\n+\n+int\n+main ()\n+{\n+  int var;\n+\n+#pragma acc data create (var)\n+  {\n+    void *var_p_d = acc_deviceptr (&var);\n+    assert (acc_hostptr (var_p_d) == &var);\n+  }\n+\n+  return 0;\n+}"}]}