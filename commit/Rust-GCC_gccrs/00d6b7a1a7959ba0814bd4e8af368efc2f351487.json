{"sha": "00d6b7a1a7959ba0814bd4e8af368efc2f351487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkNmI3YTFhNzk1OWJhMDgxNGJkNGU4YWYzNjhlZmMyZjM1MTQ4Nw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-07T10:25:18Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-07T10:25:18Z"}, "message": "Introduce tests for -fsanitize-address-use-after-scope\n\n\t* c-c++-common/asan/force-inline-opt0-1.c: Disable\n\t-f-sanitize-address-use-after-scope.\n\t* c-c++-common/asan/inc.c: Change number of expected ASAN_CHECK\n\tinternal fn calls.\n\t* g++.dg/asan/use-after-scope-1.C: New test.\n\t* g++.dg/asan/use-after-scope-2.C: Likewise.\n\t* g++.dg/asan/use-after-scope-3.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types-1.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types-2.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types-3.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types-4.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types-5.C: Likewise.\n\t* g++.dg/asan/use-after-scope-types.h: Likewise.\n\t* gcc.dg/asan/use-after-scope-1.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-2.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-3.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-4.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-5.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-6.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-7.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-8.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-9.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-1.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-2.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-switch-3.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-goto-1.c: Likewise.\n\t* gcc.dg/asan/use-after-scope-goto-2.c: Likewise.\n\nFrom-SVN: r241897", "tree": {"sha": "7034f0088795989e898fafc5afc5995edaf506e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7034f0088795989e898fafc5afc5995edaf506e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d6b7a1a7959ba0814bd4e8af368efc2f351487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d6b7a1a7959ba0814bd4e8af368efc2f351487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d6b7a1a7959ba0814bd4e8af368efc2f351487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d6b7a1a7959ba0814bd4e8af368efc2f351487/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dc4a6045089adc9ec9efbbc07db25c4a21fc0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc4a6045089adc9ec9efbbc07db25c4a21fc0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc4a6045089adc9ec9efbbc07db25c4a21fc0ff"}], "stats": {"total": 590, "additions": 589, "deletions": 1}, "files": [{"sha": "cbc051f0acb6587c064c5eb9a09b6f598322097a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -1,3 +1,33 @@\n+2016-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/asan/force-inline-opt0-1.c: Disable\n+\t-f-sanitize-address-use-after-scope.\n+\t* c-c++-common/asan/inc.c: Change number of expected ASAN_CHECK\n+\tinternal fn calls.\n+\t* g++.dg/asan/use-after-scope-1.C: New test.\n+\t* g++.dg/asan/use-after-scope-2.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-3.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types-1.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types-2.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types-3.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types-4.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types-5.C: Likewise.\n+\t* g++.dg/asan/use-after-scope-types.h: Likewise.\n+\t* gcc.dg/asan/use-after-scope-1.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-2.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-3.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-4.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-5.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-6.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-7.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-8.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-9.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-1.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-2.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-switch-3.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-goto-1.c: Likewise.\n+\t* gcc.dg/asan/use-after-scope-goto-2.c: Likewise.\n+\n 2016-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78189"}, {"sha": "2e156f70d06952b4b0e00add8ece5d64c35e406f", "filename": "gcc/testsuite/c-c++-common/asan/force-inline-opt0-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fforce-inline-opt0-1.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -2,6 +2,7 @@\n    (before and after inlining) */\n \n /* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize-address-use-after-scope\" } */\n /* { dg-final { scan-assembler-not \"__asan_report_load\" } } */\n \n __attribute__((always_inline))"}, {"sha": "98121d2d2b40130f98fcff5cb508ebd712624f02", "filename": "gcc/testsuite/c-c++-common/asan/inc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finc.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -16,5 +16,6 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ASAN_\" 1 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_\" 4 \"asan0\" } }  */\n /* { dg-final { scan-tree-dump \"ASAN_CHECK \\\\(.*, 4\\\\);\" \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump \"ASAN_CHECK \\\\(.*, 8\\\\);\" \"asan0\" } }  */"}, {"sha": "fd875ad7a13cb57635cb6c336aec75a87f1137d3", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-1.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <functional>\n+\n+int main() {\n+  std::function<int()> function;\n+  {\n+    int v = 0;\n+    function = [&v]()\n+    {\n+      return v;\n+    };\n+  }\n+  return function();\n+}\n+\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at.*\" }\n+// { dg-output \".*'v' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "92a4bd13029058c70c0b9735762f8be96e7f00bc", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-2.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include <stdio.h>\n+\n+struct Test\n+{\n+  Test ()\n+    {\n+      my_value = 0;\n+    }\n+\n+  ~Test ()\n+    {\n+      fprintf (stderr, \"Value: %d\\n\", *my_value);\n+    }\n+\n+  void init (int *v)\n+    {\n+      my_value = v;\n+    }\n+\n+  int *my_value;\n+};\n+\n+int main(int argc, char **argv)\n+{\n+  Test t;\n+\n+  {\n+    int x = argc;\n+    t.init(&x);\n+  }\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at.*\" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "172f374704bb5566e6f3137ef5ea5eab1751a371", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-3.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+struct IntHolder {\n+  int val;\n+};\n+\n+const IntHolder *saved;\n+\n+void save(const IntHolder &holder) {\n+  saved = &holder;\n+}\n+\n+int main(int argc, char *argv[]) {\n+  save({10});\n+  int x = saved->val;  // BOOM\n+  return x;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at.*\" }\n+// { dg-output \".*'<unknown>' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "bedcfa4edb92081b38ee7cc9fade7278d2f66274", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-1.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include \"use-after-scope-types.h\"\n+\n+int main()\n+{\n+  using Tests = void (*)();\n+  Tests t = &test<bool>;\n+  t();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size \" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "75a01d9eb3674d8e539d7f488bd877beff0255e3", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-2.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include \"use-after-scope-types.h\"\n+\n+int main()\n+{\n+  using Tests = void (*)();\n+  Tests t = &test<float>;\n+  t();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size \" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "3350c69c6ae68d8df7bfc4409e154b9b7273c9e0", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-3.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include \"use-after-scope-types.h\"\n+\n+int main()\n+{\n+  using Tests = void (*)();\n+  Tests t = &test<void *>;\n+  t();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size \" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "dd06e9419b187c2031df69df74f9aa935ce49925", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-4.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include \"use-after-scope-types.h\"\n+\n+int main()\n+{\n+  using Tests = void (*)();\n+  Tests t = &test<std::vector<std::string>>;\n+  t();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 8 at\" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "42abc2a0ccd7e5ed63deaf47851e26417d6ecf7d", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types-5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types-5.C?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+#include \"use-after-scope-types.h\"\n+\n+int main()\n+{\n+  using Tests = void (*)();\n+  Tests t = &test<char[1000]>;\n+  t();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size \" }\n+// { dg-output \".*'x' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "b96b02ba88c803243ba9beac0db8d44e51d3c3ec", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-types.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-types.h?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+#include <string>\n+#include <vector>\n+\n+template <class T> struct Ptr {\n+  void Store(T *ptr) { t = ptr; }\n+\n+  void Access() { *t = {}; }\n+\n+  T *t;\n+};\n+\n+template <class T, size_t N> struct Ptr<T[N]> {\n+  using Type = T[N];\n+  void Store(Type *ptr) { t = *ptr; }\n+\n+  void Access() { *t = {}; }\n+\n+  T *t;\n+};\n+\n+template <class T> __attribute__((noinline)) void test() {\n+  Ptr<T> ptr;\n+  {\n+    T x;\n+    ptr.Store(&x);\n+  }\n+\n+  ptr.Access();\n+}"}, {"sha": "bdbc97becae979d281b8c40bcfa56d621a6652dd", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-1.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+int\n+main (void)\n+{\n+  char *ptr;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+  }\n+\n+  return *(ptr+8);\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 1 at.*\" }\n+// { dg-output \".*'my_char' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "dedb73400cdcaa8de856ef9866fb78d1547cee77", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-2.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+int *bar (int *x, int *y) { return y; }\n+\n+int foo (void)\n+{\n+  char *p;\n+  {\n+    char a = 0;\n+    p = &a;\n+  }\n+\n+  if (*p)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  char *ptr;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+  }\n+\n+  int a[16];\n+  int *p, *q = a;\n+  {\n+    int b[16];\n+    p = bar (a, b);\n+  }\n+  bar (a, q);\n+  {\n+    int c[16];\n+    q = bar (a, c);\n+  }\n+  int v = *bar (a, q);\n+  return v;\n+}\n+\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at.*\" }\n+// { dg-output \".*'c' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "9aeed51a770d0908f5ce56c5f65d7cfbfd969670", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+int\n+main (void)\n+{\n+  char *ptr;\n+  char *ptr2;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+    __builtin_memcpy (&ptr2, &ptr, sizeof (ptr2));\n+  }\n+\n+  *(ptr2+9) = 'c';\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size 1 at.*\" }\n+// { dg-output \".*'my_char' <== Memory access at offset \\[0-9\\]* overflows this variable.*\" }"}, {"sha": "77d7052bd19a8873a00472a0427cea071d0505fe", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-4.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run }\n+\n+int\n+__attribute__((no_sanitize_address))\n+main (void)\n+{\n+  char *ptr;\n+  char *ptr2;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+    __builtin_memcpy (&ptr2, &ptr, sizeof (ptr2));\n+  }\n+\n+  *(ptr2+9) = 'c';\n+}"}, {"sha": "b53712daa34ae0b59cae3749afb7cc712f2b29c9", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-5.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+int *ptr;\n+\n+__attribute__((always_inline))\n+inline static void\n+foo(int v)\n+{\n+  int values[10];\n+  for (unsigned i = 0; i < 10; i++)\n+    values[i] = v;\n+\n+  ptr = &values[3];\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  foo (argc);\n+\n+  return *ptr;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size 4 at.*\" }\n+// { dg-output \".*'values' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "bb13cecbd1a6b55fddf431134111eb002c092ca3", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-6.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run }\n+// { dg-additional-options \"--param asan-stack=0\" }\n+\n+int\n+main (void)\n+{\n+  char *ptr;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+  }\n+\n+  *ptr = 'c';\n+  return 0;\n+}"}, {"sha": "4115205916063e10eb5c4c9fc220388bc1dfccb4", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-7.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fno-sanitize-address-use-after-scope\" }\n+\n+int\n+main (void)\n+{\n+  char *ptr;\n+  {\n+    char my_char[9];\n+    ptr = &my_char[0];\n+  }\n+\n+  *ptr = 'c';\n+  return 0;\n+}"}, {"sha": "b20420684ab99cabf77e505c366bbc38ce8ae9cd", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-8.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fdump-tree-asan0\" }\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+int\n+fn1 ()\n+{\n+  int x = 123;\n+  register int a asm(\"rdi\") = 123;\n+\n+  return x * x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"ASAN_CHECK\" \"asan0\" } }  */"}, {"sha": "2e30deffa1899e530542ea779c123d9fc4dcc2fc", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int *ptr = 0;\n+\n+  {\n+    int a;\n+    ptr = &a;\n+    *ptr = 12345;\n+  }\n+\n+  return *ptr;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"READ of size .*\" }\n+// { dg-output \".*'a' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "c47a5e8db023a7e87fa5f583898beb07b12d0622", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-goto-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-1.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fdump-tree-asan0\" }\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+int main(int argc, char **argv)\n+{\n+  int a = 123;\n+  int b = 123;\n+  int c = 123;\n+  int d = 123;\n+  int e = 123;\n+  int f = 123;\n+\n+  if (argc == 0)\n+  {\n+    int *ptr;\n+    int *ptr2;\n+    int *ptr3;\n+    int *ptr4;\n+    int *ptr5;\n+    int *ptr6;\n+    label:\n+      {\n+\tptr = &a;\n+        *ptr = 1;\n+\tptr2 = &b;\n+        *ptr2 = 1;\n+\tptr3 = &c;\n+        *ptr3 = 1;\n+\tptr4 = &d;\n+        *ptr4 = 1;\n+\tptr5 = &e;\n+        *ptr5 = 1;\n+\tptr6 = &f;\n+        *ptr6 = 1;\n+\treturn 0;\n+      }\n+  }\n+  else\n+    goto label;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, 4\\\\);\" 2 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &c, 4\\\\);\" 2 \"asan0\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &e, 4\\\\);\" 2 \"asan0\" } }  */"}, {"sha": "73ef4e0eb1ed4ca427b79e6f06c4b1b67023dfdc", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-goto-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-goto-2.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fdump-tree-asan0\" }\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+int main(int argc, char **argv)\n+{\n+  int a = 123;\n+\n+  if (argc == 0)\n+  {\n+    int *ptr;\n+    /* The label is not used in &label or goto label.  Thus '&a' should be\n+       marked just once.  */\n+    label:\n+      {\n+\tptr = &a;\n+        *ptr = 1;\n+\treturn 0;\n+      }\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, 4\\\\);\" 1 \"asan0\" } }  */"}, {"sha": "a8342686d4eb66ad8efb84100c965b2af18f0dba", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-1.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int *ptr = 0;\n+\n+  for (unsigned i = 0; i < 2; i++)\n+    {\n+      switch (argc)\n+\t{\n+\tint a;\n+      default:\n+\tptr = &a;\n+\t*ptr = 12345;\n+\tbreak;\n+      }\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}, {"sha": "8aeca5a3b7ad7805500e86288040ba50cbabccbe", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-2.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int *ptr = 0;\n+  int *ptr2 = 0;\n+  int *ptr3 = 0;\n+\n+  for (unsigned i = 0; i < 2; i++)\n+    {\n+      switch (argc)\n+\t{\n+\tcase 1111:;\n+\t  int a, b, c;\n+\tdefault:\n+\t  ptr = &a;\n+\t  ptr2 = &b;\n+\t  ptr3 = &c;\n+\t  break;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &b, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &c, \\[0-9\\]\\\\);\" 2 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &b, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &c, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}, {"sha": "828cb7c3b2abc5f9da31601b7dde3258a8129f59", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-switch-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d6b7a1a7959ba0814bd4e8af368efc2f351487/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-switch-3.c?ref=00d6b7a1a7959ba0814bd4e8af368efc2f351487", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run }\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int *ptr = 0;\n+\n+  for (unsigned i = 0; i < 2; i++)\n+    {\n+      switch (argc)\n+\t{\n+\tcase 11111:;\n+\t  int a;\n+\t  ptr = &a;\n+\t  break;\n+\t  {\n+\t    default:\n+\t      ptr = &a;\n+\t      *ptr = 12345;\n+\t    case 222222:\n+\t    my_label:\n+\t      ptr = &a;\n+\t      break;\n+\t  }\n+\t}\n+    }\n+\n+  if (argc == 333333)\n+    goto my_label;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(2, &a, \\[0-9\\]\\\\);\" 4 \"gimple\" } }  */\n+/* { dg-final { scan-tree-dump-times \"ASAN_MARK \\\\(1, &a, \\[0-9\\]\\\\);\" 1 \"gimple\" } }  */"}]}