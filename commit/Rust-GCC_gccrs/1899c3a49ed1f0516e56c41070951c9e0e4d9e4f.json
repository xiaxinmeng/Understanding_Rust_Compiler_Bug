{"sha": "1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5OWMzYTQ5ZWQxZjA1MTZlNTZjNDEwNzA5NTFjOWUwZTRkOWU0Zg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@scf.usc.edu", "date": "2000-06-23T06:49:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-23T06:49:45Z"}, "message": "parse.y (template_arg): Convert TEMPLATE_DECL that is a template template paramter to...\n\n        * parse.y (template_arg): Convert TEMPLATE_DECL\n        that is a template template paramter to\n        TEMPLATE_TEMPLATE_PARM here.\n\n        * cp-tree.def (TEMPLATE_TEMPLATE_PARM): Adjust comment.\n        * cp-tree.h (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL): New macro.\n        (copy_template_template_parm): Adjust prototype.\n        * decl.c (grokdeclarator): Remove dead code.\n        * pt.c (process_template_parm): Tidy.\n        (lookup_template_class): Construct nodes in\n        copy_template_template_parm.\n        (tsubst): Pass TEMPLATE_DECL rather than IDENTIFIER_NODE to\n        lookup_template_class.  Use TYPE_TI_TEMPLATE.\n        * tree.c (copy_template_template_parm): Add NEWARGS\n        parameter.\n        (mapcar): Adjust call to copy_template_template_parm.\n        * typeck.c (comptypes): Use TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL.\n        * method.c (build_template_template_parm_names): Change error\n        code to avoid compilation warning.\n\n        * gxxint.texi: Document template template parameter\n        name mangling.\n\nFrom-SVN: r34659", "tree": {"sha": "1031c3579a6b908c1508fb505a7aab1f459c9611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1031c3579a6b908c1508fb505a7aab1f459c9611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/comments", "author": null, "committer": null, "parents": [{"sha": "691125710d580d96e6c94f04fe0e1205507ee899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691125710d580d96e6c94f04fe0e1205507ee899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691125710d580d96e6c94f04fe0e1205507ee899"}], "stats": {"total": 1435, "additions": 752, "deletions": 683}, "files": [{"sha": "913e8533d0686bb35c3038236fb751cabf424172", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -1,3 +1,28 @@\n+2000-06-23  Kriang Lerdsuwanakij <lerdsuwa@scf.usc.edu>\n+\n+\t* parse.y (template_arg): Convert TEMPLATE_DECL\n+\tthat is a template template paramter to\n+\tTEMPLATE_TEMPLATE_PARM here.\n+\n+\t* cp-tree.def (TEMPLATE_TEMPLATE_PARM): Adjust comment.\n+\t* cp-tree.h (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL): New macro.\n+\t(copy_template_template_parm): Adjust prototype.\n+\t* decl.c (grokdeclarator): Remove dead code.\n+\t* pt.c (process_template_parm): Tidy.\n+\t(lookup_template_class): Construct nodes in\n+\tcopy_template_template_parm.\n+\t(tsubst): Pass TEMPLATE_DECL rather than IDENTIFIER_NODE to\n+\tlookup_template_class.  Use TYPE_TI_TEMPLATE.\n+\t* tree.c (copy_template_template_parm): Add NEWARGS\n+\tparameter.\n+\t(mapcar): Adjust call to copy_template_template_parm.\n+\t* typeck.c (comptypes): Use TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL.\n+\t* method.c (build_template_template_parm_names): Change error\n+\tcode to avoid compilation warning.\n+\n+\t* gxxint.texi: Document template template parameter\n+\tname mangling.\n+\n 2000-06-21  Alex Samuel  <samuel@codesourcery.com>\n \n \t* Make-lang.in (CXX_LIB2FUNCS): Add cp-demangle.o and dyn-string.o."}, {"sha": "53855f34dca875f285a3f2ae0cdc05d5f26d2b87", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -140,10 +140,17 @@ DEFTREECODE (TEMPLATE_PARM_INDEX, \"template_parm_index\", 'x',\n    The TYPE_FIELDS value will be a TEMPLATE_PARM_INDEX.  */\n DEFTREECODE (TEMPLATE_TYPE_PARM, \"template_type_parm\", 't', 0)\n \n-/* Index into a template parameter list.  This parameter must be a type.\n-   If it is used in signature of a template, TEMPLATE_INFO is NULL_TREE.\n-   Otherwise it is used to declare a type like TT<int>.\n-   The TYPE_FIELDS value will be a TEMPLATE_PARM_INDEX.  */\n+/* Index into a template parameter list for template template parameters.\n+   This parameter must be a type.  The TYPE_FIELDS value will be a \n+   TEMPLATE_PARM_INDEX.\n+\n+   If it is used without template arguments like TT in C<TT>, \n+   TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO is NULL_TREE\n+   and TYPE_NAME is a TEMPLATE_DECL.\n+\n+   Otherwise it is used with bound template arguments like TT<int>.  In this case,\n+   TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO contains the template name\n+   and its bound arguments.  TYPE_NAME is a TYPE_DECL.  */\n DEFTREECODE (TEMPLATE_TEMPLATE_PARM, \"template_template_parm\", 't', 0)\n \n /* A type designated by `typename T::t'.  TYPE_CONTEXT is `T',"}, {"sha": "03a90db708f85c0a681a4a759dc84493fef42a19", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -3802,6 +3802,13 @@ enum tree_string_flags\n     TS_NEXT_BIT       = 13       /* next available bit */\n };\n \n+/* Returns the TEMPLATE_DECL associated to a TEMPLATE_TEMPLATE_PARM\n+   node.  */\n+#define TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL(NODE) \t\\\n+  (TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (NODE) \t\t\\\n+   ? TYPE_TI_TEMPLATE (NODE) \t\t\t\t\\\n+   : TYPE_NAME (NODE))\n+\n /* in lex.c  */\n /* Indexed by TREE_CODE, these tables give C-looking names to\n    operators represented by TREE_CODES.  For example,\n@@ -4574,7 +4581,7 @@ extern int promotes_to_aggr_type\t\tPARAMS ((tree, enum tree_code));\n extern int is_aggr_type_2\t\t\tPARAMS ((tree, tree));\n extern const char *lang_printable_name\t\tPARAMS ((tree, int));\n extern tree build_exception_variant\t\tPARAMS ((tree, tree));\n-extern tree copy_template_template_parm\t\tPARAMS ((tree));\n+extern tree copy_template_template_parm\t\tPARAMS ((tree, tree));\n extern void print_lang_statistics\t\tPARAMS ((void));\n extern tree array_type_nelts_total\t\tPARAMS ((tree));\n extern tree array_type_nelts_top\t\tPARAMS ((tree));"}, {"sha": "80e69fa337e96484ea4ff09de664d9cd86ae100e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -10111,7 +10111,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    }\n \t}\n       /* C++ aggregate types.  */\n-      else if (TREE_CODE (id) == TYPE_DECL || TREE_CODE (id) == TEMPLATE_DECL)\n+      else if (TREE_CODE (id) == TYPE_DECL)\n \t{\n \t  if (type)\n \t    cp_error (\"multiple declarations `%T' and `%T'\", type,"}, {"sha": "492b995c938c5c6ab2b55ddb3e546be08ae1363c", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -1655,7 +1655,9 @@ A class template instantiation is encoded as the letter @samp{t},\n followed by the encoding of the template name, followed\n the number of template parameters, followed by encoding of the template\n parameters.  If a template parameter is a type, it is written\n-as a @samp{Z} followed by the encoding of the type.\n+as a @samp{Z} followed by the encoding of the type.  If it is a\n+template, it is encoded as @samp{z} followed by the parameter\n+of the template template parameter and the template name.\n \n A function template specialization (either an instantiation or an\n explicit specialization) is encoded by an @samp{H} followed by the\n@@ -1664,8 +1666,9 @@ encoding of the template parameters, as described above, followed by an\n (not the specialization), another @samp{_}, and the return type.  (Like\n the argument types, the return type is the return type of the function\n template, not the specialization.)  Template parameters in the argument\n-and return types are encoded by an @samp{X} for type parameters, or a\n-@samp{Y} for constant parameters, an index indicating their position\n+and return types are encoded by an @samp{X} for type parameters, \n+@samp{zX} for template parameters, \n+or a @samp{Y} for constant parameters, an index indicating their position\n in the template parameter list declaration, and their template depth.\n \n @subsection Arrays\n@@ -1831,6 +1834,9 @@ Encodes a template type parameter, when part of a function type.\n @item Y\n Encodes a template constant parameter, when part of a function type.\n \n+@item z\n+Used for template template parameters. \n+\n @item Z\n Used for template type parameters. \n "}, {"sha": "07543fc2d21f6a1a85a942eeb0cb1ce9fdb03eda", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -919,7 +919,7 @@ build_template_template_parm_names (parmlist)\n {\n   int i, nparms;\n \n-  my_friendly_assert (TREE_CODE (parmlist) == TREE_VEC, 246.5);\n+  my_friendly_assert (TREE_CODE (parmlist) == TREE_VEC, 990228);\n   nparms = TREE_VEC_LENGTH (parmlist);\n   icat (nparms);\n   for (i = 0; i < nparms; i++)"}, {"sha": "819d2473130d393a08657efc9e12685c1d69dc91", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 653, "deletions": 649, "changes": 1302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f"}, {"sha": "2a7a347d658fc6ceab0907792b4a8e67456c526e", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -1060,7 +1060,11 @@ template_arg:\n \t  type_id\n \t\t{ $$ = groktypename ($1.t); }\n \t| PTYPENAME\n-\t\t{ $$ = lastiddecl; }\n+\t\t{\n+\t\t  $$ = lastiddecl;\n+\t\t  if (DECL_TEMPLATE_TEMPLATE_PARM_P ($$))\n+\t\t    $$ = TREE_TYPE ($$);\n+\t\t}\n \t| expr_no_commas  %prec ARITHCOMPARE\n \t;\n "}, {"sha": "8da3dd56268c51196e45379a46a2f5d7f0fff81a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -1797,10 +1797,8 @@ process_template_parm (list, next)\n     {\n       tree p = TREE_VALUE (tree_last (list));\n \n-      if (TREE_CODE (p) == TYPE_DECL)\n+      if (TREE_CODE (p) == TYPE_DECL || TREE_CODE (p) == TEMPLATE_DECL)\n \tidx = TEMPLATE_TYPE_IDX (TREE_TYPE (p));\n-      else if (TREE_CODE (p) == TEMPLATE_DECL)\n-\tidx = TEMPLATE_TYPE_IDX (TREE_TYPE (DECL_TEMPLATE_RESULT (p)));\n       else\n \tidx = TEMPLATE_PARM_IDX (DECL_INITIAL (p));\n       ++idx;\n@@ -3803,8 +3801,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       /* Create a new TEMPLATE_DECL and TEMPLATE_TEMPLATE_PARM node to store\n          template arguments */\n \n-      tree parm = copy_template_template_parm (TREE_TYPE (template));\n-      tree template2 = TYPE_STUB_DECL (parm);\n+      tree parm;\n       tree arglist2;\n \n       parmlist = DECL_INNERMOST_TEMPLATE_PARMS (template);\n@@ -3813,8 +3810,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       if (arglist2 == error_mark_node)\n \treturn error_mark_node;\n \n-      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (parm)\n-\t= tree_cons (template2, arglist2, NULL_TREE);\n+      parm = copy_template_template_parm (TREE_TYPE (template), arglist2);\n       TYPE_SIZE (parm) = 0;\n       return parm;\n     }\n@@ -6333,7 +6329,7 @@ tsubst (t, args, complain, in_decl)\n \t\t\tif (TREE_CODE (arg) == TEMPLATE_TEMPLATE_PARM)\n \t\t\t  arg = TYPE_NAME (arg);\n \n-\t\t\tr = lookup_template_class (DECL_NAME (arg), \n+\t\t\tr = lookup_template_class (arg, \n \t\t\t\t\t\t   argvec, in_decl, \n \t\t\t\t\t\t   DECL_CONTEXT (arg),\n \t\t\t\t\t\t   /*entering_scope=*/0);\n@@ -6383,7 +6379,7 @@ tsubst (t, args, complain, in_decl)\n \t\t  return error_mark_node;\n \n \t\tTEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (r)\n-\t\t  = tree_cons (TYPE_NAME (t), argvec, NULL_TREE);\n+\t\t  = tree_cons (TYPE_TI_TEMPLATE (t), argvec, NULL_TREE);\n \t      }\n \t    break;\n "}, {"sha": "f0558999815a8ca44875d7e16baad16bf4ec948b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -1173,26 +1173,45 @@ build_exception_variant (type, raises)\n }\n \n /* Given a TEMPLATE_TEMPLATE_PARM node T, create a new one together with its \n-   lang_specific field and its corresponding TEMPLATE_DECL node */\n+   lang_specific field and its corresponding *_DECL node.\n+   If NEWARGS is not NULL_TREE, this parameter is bound with new set of\n+   arguments.  */\n \n tree\n-copy_template_template_parm (t)\n+copy_template_template_parm (t, newargs)\n      tree t;\n+     tree newargs;\n {\n-  tree template = TYPE_NAME (t);\n+  tree decl = TYPE_NAME (t);\n   tree t2;\n \n   t2 = make_aggr_type (TEMPLATE_TEMPLATE_PARM);\n-  template = copy_decl (template);\n+  if (newargs == NULL_TREE)\n+    {\n+      decl = copy_decl (decl);\n+\n+      /* No need to copy these.  */\n+      TEMPLATE_TYPE_PARM_INDEX (t2) = TEMPLATE_TYPE_PARM_INDEX (t);\n+      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2) \n+\t= TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t);\n+    }\n+  else\n+    {\n+      decl = build_decl (TYPE_DECL, DECL_NAME (decl), NULL_TREE);\n+\n+      /* These nodes have to be created to reflect new TYPE_DECL and template\n+         arguments.  */\n+      TEMPLATE_TYPE_PARM_INDEX (t2) = copy_node (TEMPLATE_TYPE_PARM_INDEX (t));\n+      TEMPLATE_PARM_DECL (TEMPLATE_TYPE_PARM_INDEX (t2)) = decl;\n+      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2)\n+\t= tree_cons (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (t), \n+\t\t\t  newargs, NULL_TREE);\n+    }\n \n-  TREE_TYPE (template) = t2;\n-  TYPE_NAME (t2) = template;\n-  TYPE_STUB_DECL (t2) = template;\n+  TREE_TYPE (decl) = t2;\n+  TYPE_NAME (t2) = decl;\n+  TYPE_STUB_DECL (t2) = decl;\n \n-  /* No need to copy these */\n-  TYPE_FIELDS (t2) = TYPE_FIELDS (t);\n-  TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2) \n-    = TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t);\n   return t2;\n }\n \n@@ -1496,7 +1515,7 @@ copy_tree_r (tp, walk_subtrees, data)\n     }\n   else if (code == TEMPLATE_TEMPLATE_PARM)\n     /* These must be copied specially.  */\n-    *tp = copy_template_template_parm (*tp);\n+    *tp = copy_template_template_parm (*tp, NULL_TREE);\n   else if (TREE_CODE_CLASS (code) == 't')\n     /* There's no need to copy types, or anything beneath them.  */\n     *walk_subtrees = 0;"}, {"sha": "44bdf6ca719840423dc5525f3b55ed088ba3ade5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1899c3a49ed1f0516e56c41070951c9e0e4d9e4f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1899c3a49ed1f0516e56c41070951c9e0e4d9e4f", "patch": "@@ -994,8 +994,9 @@ comptypes (t1, t2, strict)\n       if (TEMPLATE_TYPE_IDX (t1) != TEMPLATE_TYPE_IDX (t2)\n \t  || TEMPLATE_TYPE_LEVEL (t1) != TEMPLATE_TYPE_LEVEL (t2))\n \treturn 0;\n-      if (! comp_template_parms (DECL_TEMPLATE_PARMS (TYPE_NAME (t1)),\n-\t\t\t\t DECL_TEMPLATE_PARMS (TYPE_NAME (t2))))\n+      if (! comp_template_parms\n+\t      (DECL_TEMPLATE_PARMS (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (t1)),\n+\t       DECL_TEMPLATE_PARMS (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (t2))))\n \treturn 0;\n       if (!TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t1) \n \t  && ! TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t2))"}]}