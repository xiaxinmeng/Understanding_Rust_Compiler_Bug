{"sha": "44affdae265bcadbdf427891e0fd5b19482c2527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhZmZkYWUyNjViY2FkYmRmNDI3ODkxZTBmZDViMTk0ODJjMjUyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-02-10T17:43:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-02-10T17:43:55Z"}, "message": "function.c (assign_temp): Change zero-sized arrays to size 1.\n\n\t* function.c (assign_temp): Change zero-sized arrays to size 1.\n\t* integrate.c (expand_inline_function): Do not update\n\tstack_alignment_needed\n\t* i386.c (compute_frame_size): Remove #ifdef PREFERRED_FRAME_BOUNDARY,\n\tadd some sanity checking, remove optimization for function with\n\tzero frame size.\n\nFrom-SVN: r31898", "tree": {"sha": "02119dfa6dac153abf42977119e842424bfe64f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02119dfa6dac153abf42977119e842424bfe64f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44affdae265bcadbdf427891e0fd5b19482c2527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44affdae265bcadbdf427891e0fd5b19482c2527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44affdae265bcadbdf427891e0fd5b19482c2527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44affdae265bcadbdf427891e0fd5b19482c2527/comments", "author": null, "committer": null, "parents": [{"sha": "715bdd81177d2e691d07c19c1a4e48d63474ed81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715bdd81177d2e691d07c19c1a4e48d63474ed81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715bdd81177d2e691d07c19c1a4e48d63474ed81"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "5be98c7f8f1202787be3f1d8960d9771035171d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44affdae265bcadbdf427891e0fd5b19482c2527", "patch": "@@ -1,3 +1,12 @@\n+Thu Feb 10 18:28:59 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* function.c (assign_temp): Change zero-sized arrays to size 1.\n+\t* integrate.c (expand_inline_function): Do not update\n+\tstack_alignment_needed\n+\t* i386.c (compute_frame_size): Remove #ifdef PREFERRED_FRAME_BOUNDARY,\n+\tadd some sanity checking, remove optimization for function with\n+\tzero frame size.\n+\n 2000-02-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* flow.c (mark_regs_live_at_end): Delete unused variables."}, {"sha": "730594a9aec6e2fdecd3e8fbd1ab7f7f86e499d5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=44affdae265bcadbdf427891e0fd5b19482c2527", "patch": "@@ -1769,44 +1769,43 @@ ix86_compute_frame_size (size, nregs_on_stack, rpadding1, rpadding2)\n   int padding2 = 0;\n   HOST_WIDE_INT total_size;\n   int stack_alignment_needed = cfun->stack_alignment_needed / BITS_PER_UNIT;\n+  int offset;\n+  int preferred_alignment = cfun->preferred_stack_boundary / BITS_PER_UNIT;\n \n   nregs = ix86_nsaved_regs ();\n   total_size = size;\n \n-#ifdef PREFERRED_STACK_BOUNDARY\n-  {\n-    int offset;\n-    int preferred_alignment = cfun->preferred_stack_boundary / BITS_PER_UNIT;\n-\n-    offset = frame_pointer_needed ? 8 : 4;\n+  offset = frame_pointer_needed ? 8 : 4;\n \n-    /* When frame is not empty we ought to have recorded the alignment.  */\n-    if (size && !stack_alignment_needed)\n-      abort ();\n+  /* Do some sanity checking of stack_alignment_needed and preferred_alignment,\n+     since i386 port is the only using those features that may break easilly.  */\n \n-    if (stack_alignment_needed < 4)\n-      stack_alignment_needed = 4;\n+  if (size && !stack_alignment_needed)\n+    abort ();\n+  if (!size && stack_alignment_needed)\n+    abort ();\n+  if (preferred_alignment < STACK_BOUNDARY / BITS_PER_UNIT)\n+    abort ();\n+  if (preferred_alignment > PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n+    abort ();\n+  if (stack_alignment_needed > PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n+    abort ();\n \n-    if (stack_alignment_needed > PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)\n-      abort ();\n+  if (stack_alignment_needed < 4)\n+    stack_alignment_needed = 4;\n \n-    offset += nregs * UNITS_PER_WORD;\n+  offset += nregs * UNITS_PER_WORD;\n \n-    total_size += offset;\n+  total_size += offset;\n \n-    /* Align start of frame for local function.  */\n-    if (size > 0)\n-      {\n-        padding1 = ((offset + stack_alignment_needed - 1)\n-\t\t    & -stack_alignment_needed) - offset;\n-        total_size += padding1;\n-      }\n+  /* Align start of frame for local function.  */\n+  padding1 = ((offset + stack_alignment_needed - 1)\n+\t      & -stack_alignment_needed) - offset;\n+  total_size += padding1;\n \n-    /* Align stack boundary. */\n-    padding2 = ((total_size + preferred_alignment - 1)\n-\t\t& -preferred_alignment) - total_size;\n-  }\n-#endif\n+  /* Align stack boundary. */\n+  padding2 = ((total_size + preferred_alignment - 1)\n+\t      & -preferred_alignment) - total_size;\n \n   if (nregs_on_stack)\n     *nregs_on_stack = nregs;"}, {"sha": "117074287f679ca81b694e2a6bff9f3d481277d2", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=44affdae265bcadbdf427891e0fd5b19482c2527", "patch": "@@ -837,6 +837,11 @@ assign_temp (type, keep, memory_required, dont_promote)\n       HOST_WIDE_INT size = int_size_in_bytes (type);\n       rtx tmp;\n \n+      /* Zero sized arrays are GNU C extension.  Set size to 1 to avoid\n+\t problems with allocating the stack space.  */\n+      if (size == 0)\n+\tsize = 1;\n+\n       /* Unfortunately, we don't yet know how to allocate variable-sized\n \t temporaries.  However, sometimes we have a fixed upper limit on\n \t the size (which is stored in TYPE_ARRAY_MAX_SIZE) and can use that"}, {"sha": "cea4bda787436ce46632f3809e05e79de510b6a9", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44affdae265bcadbdf427891e0fd5b19482c2527/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=44affdae265bcadbdf427891e0fd5b19482c2527", "patch": "@@ -605,9 +605,6 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   if (cfun->preferred_stack_boundary < inl_f->preferred_stack_boundary)\n     cfun->preferred_stack_boundary = inl_f->preferred_stack_boundary;\n \n-  if (cfun->stack_alignment_needed < inl_f->stack_alignment_needed)\n-    cfun->stack_alignment_needed = inl_f->stack_alignment_needed;\n-\n   /* Check that the parms type match and that sufficient arguments were\n      passed.  Since the appropriate conversions or default promotions have\n      already been applied, the machine modes should match exactly.  */"}]}