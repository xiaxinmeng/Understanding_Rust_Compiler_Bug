{"sha": "0a775f1a4b4f95182b801969178c2dea7aeac3bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3NzVmMWE0YjRmOTUxODJiODAxOTY5MTc4YzJkZWE3YWVhYzNiZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T00:17:22Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T00:17:22Z"}, "message": "re PR target/67126 ([SH] gcc.target/sh/pr51244-12.c failures)\n\ngcc/\n\tPR target/67126\n\t* config/sh/sh.md (*reg_lsb_t): Emit bld insn on SH2A.\n\t(*mov_t_msb_neg): Rewrite negc pattern.\n\ngcc/testsuite/\n\tPR target/67126\n\t* gcc.target/sh/pr51244-12.c: Adjust testcase.\n\t* gcc.target/sh/pr54236-2.c: Likewise.\n\nFrom-SVN: r227957", "tree": {"sha": "6bda7e516cb9d402a5aab722e4fb5c4d620160bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bda7e516cb9d402a5aab722e4fb5c4d620160bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a775f1a4b4f95182b801969178c2dea7aeac3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a775f1a4b4f95182b801969178c2dea7aeac3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a775f1a4b4f95182b801969178c2dea7aeac3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a775f1a4b4f95182b801969178c2dea7aeac3bf/comments", "author": null, "committer": null, "parents": [{"sha": "625c33c4e875d3bc2b1d6063abba57aeff7bc8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625c33c4e875d3bc2b1d6063abba57aeff7bc8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625c33c4e875d3bc2b1d6063abba57aeff7bc8da"}], "stats": {"total": 125, "additions": 68, "deletions": 57}, "files": [{"sha": "14d6927de6b384e2ba7e656c29bda3e8949f1f8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a775f1a4b4f95182b801969178c2dea7aeac3bf", "patch": "@@ -1,3 +1,9 @@\n+2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/67126\n+\t* config/sh/sh.md (*reg_lsb_t): Emit bld insn on SH2A.\n+\t(*mov_t_msb_neg): Rewrite negc pattern.\n+\n 2015-09-20  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_internal_mov_immediate): Cleanup"}, {"sha": "e0fc90368eef9d7f020dc0ef569ebb212cabe4c9", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=0a775f1a4b4f95182b801969178c2dea7aeac3bf", "patch": "@@ -4204,7 +4204,7 @@ label:\n ;; Let combine see that we can get the MSB and LSB into the T bit\n ;; via shll and shlr.  This allows it to plug it into insns that can have\n ;; the T bit as an input (e.g. addc).\n-;; FIXME: On SH2A use bld #0,Rn instead of shlr to avoid mutating the input.\n+;; On SH2A use bld #0,Rn instead of shlr to avoid mutating the input.\n (define_insn_and_split \"*reg_lsb_t\"\n   [(set (reg:SI T_REG)\n \t(and:SI (match_operand:SI 0 \"arith_reg_operand\")\n@@ -4214,7 +4214,8 @@ label:\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  emit_insn (gen_shlr (gen_reg_rtx (SImode), operands[0]));\n+  emit_insn (TARGET_SH2A ? gen_bldsi_reg (operands[0], const0_rtx)\n+\t\t\t : gen_shlr (gen_reg_rtx (SImode), operands[0]));\n })\n \n (define_insn_and_split \"*reg_msb_t\"\n@@ -11979,41 +11980,31 @@ label:\n   [(set (match_dup 0) (reg:SI T_REG))\n    (set (match_dup 0) (xor:SI (match_dup 0) (const_int 1)))])\n \n-;; Use negc to store the T bit in a MSB of a reg in the following way:\n-;;\tT = 0: 0x80000000 -> reg\n-;;\tT = 1: 0x7FFFFFFF -> reg\n-;; This works because 0 - 0x80000000 = 0x80000000.\n+;; 0x7fffffff + T\n+;; 0x7fffffff + (1-T) = 0 - 0x80000000 - T\n+;;\n+;; Notice that 0 - 0x80000000 = 0x80000000.\n+\n+;; Single bit tests are usually done with zero_extract.  On non-SH2A this\n+;; will use a tst-negc sequence.  On SH2A it will use a bld-addc sequence.\n+;; The zeroth bit requires a special pattern, otherwise we get a shlr-addc.\n+;; This is a special case of the generic treg_set_expr pattern and thus has\n+;; to come first or it will never match.\n (define_insn_and_split \"*mov_t_msb_neg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n-\t(minus:SI (const_int -2147483648)  ;; 0x80000000\n-\t\t  (match_operand 1 \"treg_set_expr\")))\n+\t(plus:SI (and:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t\t (const_int 1))\n+\t\t (const_int 2147483647)))\n    (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1 && can_create_pseudo_p ()\"\n+  \"TARGET_SH1\"\n   \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n-{\n-  if (negt_reg_operand (operands[1], VOIDmode))\n-    {\n-      emit_insn (gen_addc (operands[0],\n-\t\t\t   force_reg (SImode, const0_rtx),\n-\t\t\t   force_reg (SImode, GEN_INT (2147483647))));\n-      DONE;\n-    }\n-\n-  sh_treg_insns ti = sh_split_treg_set_expr (operands[1], curr_insn);\n-  if (ti.remove_trailing_nott ())\n-    emit_insn (gen_addc (operands[0],\n-\t\t\t force_reg (SImode, const0_rtx),\n-\t\t\t force_reg (SImode, GEN_INT (2147483647))));\n-  else\n-    emit_insn (gen_negc (operands[0],\n-\t\t\t force_reg (SImode, GEN_INT (-2147483648LL))));\n-  DONE;\n-})\n+  \"&& can_create_pseudo_p ()\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (zero_extract:SI (match_dup 1)\n+\t\t\t\t\t     (const_int 1) (const_int 0))\n+\t\t\t    (const_int 2147483647)))\n+\t      (clobber (reg:SI T_REG))])])\n \n-;; 0x7fffffff + T\n-;; 0x7fffffff + (1-T) = 0 - 0x80000000 - T\n (define_insn_and_split \"*mov_t_msb_neg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n \t(plus:SI (match_operand 1 \"treg_set_expr\")"}, {"sha": "752bac6be3b5d736a5d4f9fc5dbd1e800f6687f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a775f1a4b4f95182b801969178c2dea7aeac3bf", "patch": "@@ -1,3 +1,9 @@\n+2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/67126\n+\t* gcc.target/sh/pr51244-12.c: Adjust testcase.\n+\t* gcc.target/sh/pr54236-2.c: Likewise.\n+\n 2015-09-20  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/pr43417.c: Move target independent test to ..."}, {"sha": "027c5ab975ff2e57f1c5909050faa7f0c5be1742", "filename": "gcc/testsuite/gcc.target/sh/pr51244-12.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-12.c?ref=0a775f1a4b4f95182b801969178c2dea7aeac3bf", "patch": "@@ -4,8 +4,14 @@\n /* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } } */\n-/* { dg-final { scan-assembler-times \"negc\" 15 } } */\n-/* { dg-final { scan-assembler-times \"addc\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"negc\" 15 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"addc\" 3 { target { ! sh2a } } } } */\n+\n+/* { dg-final { scan-assembler-times \"negc\" 13 { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"addc\" 5 { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"bld\" 2 { target { sh2a } } } } */\n+\n /* { dg-final { scan-assembler-not \"movrt|#-1|add\\t|sub\\t|movt\" } } */\n \n int"}, {"sha": "b6c249395665b3d5e78103d502e7b4ee3c1b5ece", "filename": "gcc/testsuite/gcc.target/sh/pr54236-2.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a775f1a4b4f95182b801969178c2dea7aeac3bf/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-2.c?ref=0a775f1a4b4f95182b801969178c2dea7aeac3bf", "patch": "@@ -5,7 +5,6 @@\n /* { dg-options \"-O1\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n /* { dg-final { scan-assembler-times \"addc\" 36 } } */\n-/* { dg-final { scan-assembler-times \"shlr\" 22 } } */\n /* { dg-final { scan-assembler-times \"shll\" 14 } } */\n /* { dg-final { scan-assembler-times \"add\\tr\" 12 } } */\n /* { dg-final { scan-assembler-not \"movt\" } } */\n@@ -17,115 +16,118 @@\n \n /* { dg-final { scan-assembler-times \"bclr\\t#0\" 1 { target { sh2a } } } } */\n \n+/* { dg-final { scan-assembler-times \"shlr\" 22 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-not \"shlr\" { target { sh2a } } } } */\n+\n int\n test_000 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + (b & 1);\n }\n \n int\n test_001 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + b + (c & 1);\n }\n \n int\n test_002 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + b + c + (d & 1);\n }\n \n int\n test_003 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return (b & 1) + a;\n }\n \n int\n test_004 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + (c & 1) + b;\n }\n \n int\n test_005 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + b + (d & 1) + c;\n }\n \n int\n test_006 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return (c & 1) + a + b;\n }\n \n int\n test_007 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + (d & 1) + b + c;\n }\n \n int\n test_008 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return (d & 1) + a + b + c;\n }\n \n int\n test_009 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + b + (b & 1);\n }\n \n int\n test_010 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + (b & 1) + b;\n }\n \n int\n test_011 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return (b & 1) + a + b;\n }\n \n int\n test_012 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + b + d + (b & 1);\n }\n \n int\n test_013 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + d + (b & 1) + b;\n }\n \n int\n test_014 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return a + (b & 1) + d + b;\n }\n \n int\n test_015 (int a, int c, int b, int d)\n {\n-  // 1x shlr, 1x add, 1x addc\n+  // 1x shlr/bld, 1x add, 1x addc\n   return (b & 1) + a + d + b;\n }\n \n@@ -140,42 +142,42 @@ test_016 (int a, int b, int c, int d)\n int\n test_017 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + a + (a & 1);\n }\n \n int\n test_018 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return a + (a & 1) + a;\n }\n \n int\n test_019 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return (a & 1) + a + a;\n }\n \n int\n test_020 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return b + b + (a & 1);\n }\n \n int\n test_021 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return b + (a & 1) + b;\n }\n \n int\n test_022 (int a, int b, int c, int d)\n {\n-  // 1x shlr, 1x addc\n+  // 1x shlr/bld, 1x addc\n   return (a & 1) + b + b;\n }\n "}]}