{"sha": "0b371c72fe94d563b0f2c49288177872f04cc32a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzNzFjNzJmZTk0ZDU2M2IwZjJjNDkyODgxNzc4NzJmMDRjYzMyYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-27T18:33:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-27T18:33:26Z"}, "message": "tree-cfg.c (thread_jumps): Speed up by reordering the two conditions for entering basic blocks into worklist.\n\n\t* tree-cfg.c (thread_jumps): Speed up by reordering the two\n\tconditions for entering basic blocks into worklist.\n\nFrom-SVN: r89700", "tree": {"sha": "f3f18d5f8a5ac126ea9ba6a73f3750852fca6d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3f18d5f8a5ac126ea9ba6a73f3750852fca6d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b371c72fe94d563b0f2c49288177872f04cc32a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b371c72fe94d563b0f2c49288177872f04cc32a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b371c72fe94d563b0f2c49288177872f04cc32a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b371c72fe94d563b0f2c49288177872f04cc32a/comments", "author": null, "committer": null, "parents": [{"sha": "af88d4ec96defc06ac0b7ae3e5122f14ba148509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af88d4ec96defc06ac0b7ae3e5122f14ba148509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af88d4ec96defc06ac0b7ae3e5122f14ba148509"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "ca2253e9e2593b81648ef43a550d1bfe5bf90843", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b371c72fe94d563b0f2c49288177872f04cc32a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b371c72fe94d563b0f2c49288177872f04cc32a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b371c72fe94d563b0f2c49288177872f04cc32a", "patch": "@@ -1,3 +1,8 @@\n+2004-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (thread_jumps): Speed up by reordering the two\n+\tconditions for entering basic blocks into worklist.\n+\n 2004-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-cfg.c (thread_jumps): Speed up by pretending to have"}, {"sha": "e606749fa9d51909043b26295bc5bc2ce3bb6ac4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b371c72fe94d563b0f2c49288177872f04cc32a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b371c72fe94d563b0f2c49288177872f04cc32a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0b371c72fe94d563b0f2c49288177872f04cc32a", "patch": "@@ -3974,11 +3974,11 @@ thread_jumps (void)\n \t among BB's predecessors.  */\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n-\t  /* We are not interested in threading jumps from a forwarder\n-\t     block.  */\n-\t  if (!bb_ann (e->src)->forwardable\n-\t      /* We don't want to put a duplicate into WORKLIST.  */\n-\t      && (e->src->flags & BB_VISITED) == 0)\n+\t  /* We don't want to put a duplicate into WORKLIST.  */\n+\t  if ((e->src->flags & BB_VISITED) == 0\n+\t      /* We are not interested in threading jumps from a forwarder\n+\t\t block.  */\n+\t      && !bb_ann (e->src)->forwardable)\n \t    {\n \t      e->src->flags |= BB_VISITED;\n \t      worklist[size] = e->src;\n@@ -4013,11 +4013,11 @@ thread_jumps (void)\n \t\t predecessors.  */\n \t      FOR_EACH_EDGE (f, ej, bb->preds)\n \t\t{\n-\t\t  /* We are not interested in threading jumps from a\n-\t\t     forwarder block.  */\n-\t\t  if (!bb_ann (f->src)->forwardable\n-\t\t      /* We don't want to put a duplicate into WORKLIST.  */\n-\t\t      && (f->src->flags & BB_VISITED) == 0)\n+\t\t  /* We don't want to put a duplicate into WORKLIST.  */\n+\t\t  if ((f->src->flags & BB_VISITED) == 0\n+\t\t      /* We are not interested in threading jumps from a\n+\t\t\t forwarder block.  */\n+\t\t      && !bb_ann (f->src)->forwardable)\n \t\t    {\n \t\t      f->src->flags |= BB_VISITED;\n \t\t      worklist[size] = f->src;"}]}