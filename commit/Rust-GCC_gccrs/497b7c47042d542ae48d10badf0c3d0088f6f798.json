{"sha": "497b7c47042d542ae48d10badf0c3d0088f6f798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3YjdjNDcwNDJkNTQyYWU0OGQxMGJhZGYwYzNkMDA4OGY2Zjc5OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-18T16:11:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-18T16:11:40Z"}, "message": "final.c (last_columnnum, [...]): New variables.\n\n\t* final.c (last_columnnum, override_columnnum): New variables.\n\t(final_start_function): Set last_columnnum, pass it to begin_prologue\n\thook and pass 0 to dwarf2out_begin_prologue.\n\t(final_scan_insn): Update override_columnnum.  Pass last_columnnum\n\tto source_line debug hook.\n\t(notice_source_line): Compute last_columnnum and for debug_column_info\n\treturn true on column changes.\n\t* debug.h (struct gcc_debug_hooks): Add column argument to\n\tsource_line and begin_prologue hooks.\n\t(debug_nothing_int_charstar_int_bool): Remove prototype.\n\t(debug_nothing_int_int_charstar,\n\tdebug_nothing_int_int_charstar_int_bool): New prototypes.\n\t(dwarf2out_begin_prologue): Add column argument.\n\t* debug.c (do_nothing_debug_hooks): Adjust source_line and\n\tbegin_prologue hooks.\n\t(debug_nothing_int_charstar_int_bool): Remove.\n\t(debug_nothing_int_int_charstar,\n\tdebug_nothing_int_int_charstar_int_bool): New functions.\n\t* dwarf2out.c (dwarf2out_begin_prologue): Add column argument, pass it\n\tthrough to dwarf2out_source_line.\n\t(dwarf2_lineno_debug_hooks): Adjust begin_prologue hook.\n\t(dwarf2out_source_line): Add column argument, emit it if requested.\n\t* sdbout.c (sdbout_source_line, sdbout_begin_prologue): Add column\n\targuments.\n\t* xcoffout.h (xcoffout_begin_prologue, xcoffout_source_line): Likewise.\n\t* xcoffout.c (xcoffout_begin_prologue, xcoffout_source_line): Likewise.\n\t* vmsdbgout.c (vmsdbgout_begin_prologue): Add column argument, pass it\n\tthrough to dwarf2out_begin_prologue.\n\t(vmsdbgout_source_line): Add column argument, pass it through to\n\tdwarf2out_source_line.\n\t* dbxout.c (dbxout_begin_prologue): Add column argument, adjust\n\tdbxout_source_line caller.\n\t(dbxout_source_line): Add column argument.\n\nFrom-SVN: r245564", "tree": {"sha": "2b11d442aa53364fdd68052928947d8d48479c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b11d442aa53364fdd68052928947d8d48479c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/497b7c47042d542ae48d10badf0c3d0088f6f798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497b7c47042d542ae48d10badf0c3d0088f6f798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497b7c47042d542ae48d10badf0c3d0088f6f798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497b7c47042d542ae48d10badf0c3d0088f6f798/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0029b929c9719a9794492915206314308fbdf03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0029b929c9719a9794492915206314308fbdf03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0029b929c9719a9794492915206314308fbdf03a"}], "stats": {"total": 190, "additions": 143, "deletions": 47}, "files": [{"sha": "86a4938edd1ad88beb51cc973ae2a7ae311db732", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -1,5 +1,39 @@\n 2017-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* final.c (last_columnnum, override_columnnum): New variables.\n+\t(final_start_function): Set last_columnnum, pass it to begin_prologue\n+\thook and pass 0 to dwarf2out_begin_prologue.\n+\t(final_scan_insn): Update override_columnnum.  Pass last_columnnum\n+\tto source_line debug hook.\n+\t(notice_source_line): Compute last_columnnum and for debug_column_info\n+\treturn true on column changes.\n+\t* debug.h (struct gcc_debug_hooks): Add column argument to\n+\tsource_line and begin_prologue hooks.\n+\t(debug_nothing_int_charstar_int_bool): Remove prototype.\n+\t(debug_nothing_int_int_charstar,\n+\tdebug_nothing_int_int_charstar_int_bool): New prototypes.\n+\t(dwarf2out_begin_prologue): Add column argument.\n+\t* debug.c (do_nothing_debug_hooks): Adjust source_line and\n+\tbegin_prologue hooks.\n+\t(debug_nothing_int_charstar_int_bool): Remove.\n+\t(debug_nothing_int_int_charstar,\n+\tdebug_nothing_int_int_charstar_int_bool): New functions.\n+\t* dwarf2out.c (dwarf2out_begin_prologue): Add column argument, pass it\n+\tthrough to dwarf2out_source_line.\n+\t(dwarf2_lineno_debug_hooks): Adjust begin_prologue hook.\n+\t(dwarf2out_source_line): Add column argument, emit it if requested.\n+\t* sdbout.c (sdbout_source_line, sdbout_begin_prologue): Add column\n+\targuments.\n+\t* xcoffout.h (xcoffout_begin_prologue, xcoffout_source_line): Likewise.\n+\t* xcoffout.c (xcoffout_begin_prologue, xcoffout_source_line): Likewise.\n+\t* vmsdbgout.c (vmsdbgout_begin_prologue): Add column argument, pass it\n+\tthrough to dwarf2out_begin_prologue.\n+\t(vmsdbgout_source_line): Add column argument, pass it through to\n+\tdwarf2out_source_line.\n+\t* dbxout.c (dbxout_begin_prologue): Add column argument, adjust\n+\tdbxout_source_line caller.\n+\t(dbxout_source_line): Add column argument.\n+\n \t* common.opt (gno-column-info, gcolumn-info): New options.\n \t* dwarf2out.c (dwarf2_lineno_debug_hooks): Formatting fix.\n \t(check_die): Also test for multiple DW_AT_decl_column attributes."}, {"sha": "b5c5a4ff64f39d06acc4a1664b751069f3413555", "filename": "gcc/dbxout.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -332,8 +332,9 @@ static void debug_free_queue (void);\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n \n-static void dbxout_source_line (unsigned int, const char *, int, bool);\n-static void dbxout_begin_prologue (unsigned int, const char *);\n+static void dbxout_source_line (unsigned int, unsigned int, const char *,\n+\t\t\t\tint, bool);\n+static void dbxout_begin_prologue (unsigned int, unsigned int, const char *);\n static void dbxout_source_file (const char *);\n static void dbxout_function_end (tree);\n static void dbxout_begin_function (tree);\n@@ -1241,7 +1242,9 @@ dbxout_source_file (const char *filename)\n    function scope  */\n \n static void\n-dbxout_begin_prologue (unsigned int lineno, const char *filename)\n+dbxout_begin_prologue (unsigned int lineno,\n+\t\t       unsigned int column ATTRIBUTE_UNUSED,\n+\t\t       const char *filename)\n {\n   if (use_gnu_debug_info_extensions\n       && !NO_DBX_FUNCTION_END\n@@ -1252,7 +1255,7 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n   /* pre-increment the scope counter */\n   scope_labelno++;\n \n-  dbxout_source_line (lineno, filename, 0, true);\n+  dbxout_source_line (lineno, 0, filename, 0, true);\n   /* Output function begin block at function scope, referenced\n      by dbxout_block, dbxout_source_line and dbxout_function_end.  */\n   emit_pending_bincls_if_required ();\n@@ -1263,8 +1266,8 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n    number LINENO.  */\n \n static void\n-dbxout_source_line (unsigned int lineno, const char *filename,\n-                    int discriminator ATTRIBUTE_UNUSED,\n+dbxout_source_line (unsigned int lineno, unsigned int column ATTRIBUTE_UNUSED,\n+\t\t    const char *filename, int discriminator ATTRIBUTE_UNUSED,\n                     bool is_stmt ATTRIBUTE_UNUSED)\n {\n   dbxout_source_file (filename);"}, {"sha": "860f1e312b995567e9ba4e9ab31ba180fcaa04a9", "filename": "gcc/debug.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -35,8 +35,8 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_int,\t         /* begin_block */\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n-  debug_nothing_int_charstar_int_bool,\t /* source_line */\n-  debug_nothing_int_charstar,\t         /* begin_prologue */\n+  debug_nothing_int_int_charstar_int_bool, /* source_line */\n+  debug_nothing_int_int_charstar,\t /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n@@ -115,10 +115,18 @@ debug_nothing_int_charstar (unsigned int line ATTRIBUTE_UNUSED,\n }\n \n void\n-debug_nothing_int_charstar_int_bool (unsigned int line ATTRIBUTE_UNUSED,\n-\t\t\t             const char *text ATTRIBUTE_UNUSED,\n-\t\t\t             int discriminator ATTRIBUTE_UNUSED,\n-\t\t\t             bool is_stmt ATTRIBUTE_UNUSED)\n+debug_nothing_int_int_charstar (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t\tunsigned int column ATTRIBUTE_UNUSED,\n+\t\t\t\tconst char *text ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+void\n+debug_nothing_int_int_charstar_int_bool (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t\t\t unsigned int column ATTRIBUTE_UNUSED,\n+\t\t\t\t\t const char *text ATTRIBUTE_UNUSED,\n+\t\t\t\t\t int discriminator ATTRIBUTE_UNUSED,\n+\t\t\t\t\t bool is_stmt ATTRIBUTE_UNUSED)\n {\n }\n "}, {"sha": "395365861f78a3845710e81679d483d60ab504b5", "filename": "gcc/debug.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -65,13 +65,14 @@ struct gcc_debug_hooks\n      though the BLOCK information is messed up.  Defaults to true.  */\n   bool (* ignore_block) (const_tree);\n \n-  /* Record a source file location at (FILE, LINE, DISCRIMINATOR).  */\n-  void (* source_line) (unsigned int line, const char *file,\n-                        int discriminator, bool is_stmt);\n+  /* Record a source file location at (FILE, LINE, COLUMN, DISCRIMINATOR).  */\n+  void (* source_line) (unsigned int line, unsigned int column,\n+\t\t\tconst char *file, int discriminator, bool is_stmt);\n \n   /* Called at start of prologue code.  LINE is the first line in the\n      function.  */\n-  void (* begin_prologue) (unsigned int line, const char *file);\n+  void (* begin_prologue) (unsigned int line, unsigned int column,\n+\t\t\t   const char *file);\n \n   /* Called at end of prologue code.  LINE is the first line in the\n      function.  */\n@@ -193,9 +194,13 @@ extern const struct gcc_debug_hooks *debug_hooks;\n /* The do-nothing hooks.  */\n extern void debug_nothing_void (void);\n extern void debug_nothing_charstar (const char *);\n+extern void debug_nothing_int_int_charstar (unsigned int, unsigned int,\n+\t\t\t\t\t    const char *);\n extern void debug_nothing_int_charstar (unsigned int, const char *);\n-extern void debug_nothing_int_charstar_int_bool (unsigned int, const char *,\n-                                                 int, bool);\n+extern void debug_nothing_int_int_charstar_int_bool (unsigned int,\n+\t\t\t\t\t\t     unsigned int,\n+\t\t\t\t\t\t     const char *,\n+\t\t\t\t\t\t     int, bool);\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);\n@@ -217,7 +222,8 @@ extern const struct gcc_debug_hooks vmsdbg_debug_hooks;\n \n /* Dwarf2 frame information.  */\n \n-extern void dwarf2out_begin_prologue (unsigned int, const char *);\n+extern void dwarf2out_begin_prologue (unsigned int, unsigned int,\n+\t\t\t\t      const char *);\n extern void dwarf2out_vms_end_prologue (unsigned int, const char *);\n extern void dwarf2out_vms_begin_epilogue (unsigned int, const char *);\n extern void dwarf2out_end_epilogue (unsigned int, const char *);"}, {"sha": "14c14f3c9ec72aefde5b5f58d942b1f5fbe4b4d7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -93,7 +93,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gdb/gdb-index.h\"\n #include \"rtl-iter.h\"\n \n-static void dwarf2out_source_line (unsigned int, const char *, int, bool);\n+static void dwarf2out_source_line (unsigned int, unsigned int, const char *,\n+\t\t\t\t   int, bool);\n static rtx_insn *last_var_location_insn;\n static rtx_insn *cached_next_real_insn;\n static void dwarf2out_decl (tree);\n@@ -1023,6 +1024,7 @@ dwarf2out_alloc_current_fde (void)\n \n void\n dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t  unsigned int column ATTRIBUTE_UNUSED,\n \t\t\t  const char *file ATTRIBUTE_UNUSED)\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -1073,7 +1075,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n      prologue case, not the eh frame case.  */\n #ifdef DWARF2_DEBUGGING_INFO\n   if (file)\n-    dwarf2out_source_line (line, file, 0, true);\n+    dwarf2out_source_line (line, column, file, 0, true);\n #endif\n \n   if (dwarf2out_do_cfi_asm ())\n@@ -1099,7 +1101,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \n void\n dwarf2out_vms_end_prologue (unsigned int line ATTRIBUTE_UNUSED,\n-\t\t\tconst char *file ATTRIBUTE_UNUSED)\n+\t\t\t    const char *file ATTRIBUTE_UNUSED)\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n@@ -2733,7 +2735,7 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n   dwarf2out_source_line,\t\t /* source_line */\n-  debug_nothing_int_charstar,\t         /* begin_prologue */\n+  debug_nothing_int_int_charstar,\t /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n@@ -26534,7 +26536,8 @@ push_dw_line_info_entry (dw_line_info_table *table,\n /* ??? The discriminator parameter ought to be unsigned.  */\n \n static void\n-dwarf2out_source_line (unsigned int line, const char *filename,\n+dwarf2out_source_line (unsigned int line, unsigned int column,\n+\t\t       const char *filename,\n                        int discriminator, bool is_stmt)\n {\n   unsigned int file_num;\n@@ -26548,6 +26551,9 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n   if (dwarf_version < 4 && dwarf_strict)\n     discriminator = 0;\n \n+  if (!debug_column_info)\n+    column = 0;\n+\n   table = cur_line_info_table;\n   file_num = maybe_emit_file (lookup_filename (filename));\n \n@@ -26567,6 +26573,7 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n \n   if (0 && file_num == table->file_num\n       && line == table->line_num\n+      && column == table->column_num\n       && discriminator == table->discrim_num\n       && is_stmt == table->is_stmt)\n     return;\n@@ -26575,7 +26582,14 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n \n   /* If requested, emit something human-readable.  */\n   if (flag_debug_asm)\n-    fprintf (asm_out_file, \"\\t%s %s:%d\\n\", ASM_COMMENT_START, filename, line);\n+    {\n+      if (debug_column_info)\n+\tfprintf (asm_out_file, \"\\t%s %s:%d:%d\\n\", ASM_COMMENT_START,\n+\t\t filename, line, column);\n+      else\n+\tfprintf (asm_out_file, \"\\t%s %s:%d\\n\", ASM_COMMENT_START,\n+\t\t filename, line);\n+    }\n \n   if (DWARF2_ASM_LINE_DEBUG_INFO)\n     {\n@@ -26587,7 +26601,10 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n       putc (' ', asm_out_file);\n       fprint_ul (asm_out_file, line);\n       putc (' ', asm_out_file);\n-      putc ('0', asm_out_file);\n+      if (debug_column_info)\n+\tfprint_ul (asm_out_file, column);\n+      else\n+\tputc ('0', asm_out_file);\n \n       if (is_stmt != table->is_stmt)\n \t{\n@@ -26616,10 +26633,13 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n       if (is_stmt != table->is_stmt)\n \tpush_dw_line_info_entry (table, LI_negate_stmt, 0);\n       push_dw_line_info_entry (table, LI_set_line, line);\n+      if (debug_column_info)\n+\tpush_dw_line_info_entry (table, LI_set_column, column);\n     }\n \n   table->file_num = file_num;\n   table->line_num = line;\n+  table->column_num = column;\n   table->discrim_num = discriminator;\n   table->is_stmt = is_stmt;\n   table->in_use = true;"}, {"sha": "820162b2d28d734901375017cf0c7a3095e8903e", "filename": "gcc/final.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -118,6 +118,9 @@ rtx_insn *current_output_insn;\n /* Line number of last NOTE.  */\n static int last_linenum;\n \n+/* Column number of last NOTE.  */\n+static int last_columnnum;\n+\n /* Last discriminator written to assembly.  */\n static int last_discriminator;\n \n@@ -133,9 +136,10 @@ static int high_function_linenum;\n /* Filename of last NOTE.  */\n static const char *last_filename;\n \n-/* Override filename and line number.  */\n+/* Override filename, line and column number.  */\n static const char *override_filename;\n static int override_linenum;\n+static int override_columnnum;\n \n /* Whether to force emission of a line note before the next insn.  */\n static bool force_source_line = false;\n@@ -1763,6 +1767,7 @@ final_start_function (rtx_insn *first, FILE *file,\n \n   last_filename = LOCATION_FILE (prologue_location);\n   last_linenum = LOCATION_LINE (prologue_location);\n+  last_columnnum = LOCATION_COLUMN (prologue_location);\n   last_discriminator = discriminator = 0;\n \n   high_block_linenum = high_function_linenum = last_linenum;\n@@ -1771,10 +1776,10 @@ final_start_function (rtx_insn *first, FILE *file,\n     asan_function_start ();\n \n   if (!DECL_IGNORED_P (current_function_decl))\n-    debug_hooks->begin_prologue (last_linenum, last_filename);\n+    debug_hooks->begin_prologue (last_linenum, last_columnnum, last_filename);\n \n   if (!dwarf2_debug_info_emitted_p (current_function_decl))\n-    dwarf2out_begin_prologue (0, NULL);\n+    dwarf2out_begin_prologue (0, 0, NULL);\n \n #ifdef LEAF_REG_REMAP\n   if (crtl->uses_only_leaf_regs)\n@@ -2335,6 +2340,7 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t{\n \t\t  override_filename = LOCATION_FILE (*locus_ptr);\n \t\t  override_linenum = LOCATION_LINE (*locus_ptr);\n+\t\t  override_columnnum = LOCATION_COLUMN (*locus_ptr);\n \t\t}\n \t    }\n \t  break;\n@@ -2370,11 +2376,13 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t{\n \t\t  override_filename = LOCATION_FILE (*locus_ptr);\n \t\t  override_linenum = LOCATION_LINE (*locus_ptr);\n+\t\t  override_columnnum = LOCATION_COLUMN (*locus_ptr);\n \t\t}\n \t      else\n \t\t{\n \t\t  override_filename = NULL;\n \t\t  override_linenum = 0;\n+\t\t  override_columnnum = 0;\n \t\t}\n \t    }\n \t  break;\n@@ -2592,8 +2600,9 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  {\n \t    if (flag_verbose_asm)\n \t      asm_show_source (last_filename, last_linenum);\n-\t    (*debug_hooks->source_line) (last_linenum, last_filename,\n-\t\t\t\t\t last_discriminator, is_stmt);\n+\t    (*debug_hooks->source_line) (last_linenum, last_columnnum,\n+\t\t\t\t\t last_filename, last_discriminator,\n+\t\t\t\t\t is_stmt);\n \t  }\n \n \tif (GET_CODE (body) == PARALLEL\n@@ -3078,35 +3087,40 @@ static bool\n notice_source_line (rtx_insn *insn, bool *is_stmt)\n {\n   const char *filename;\n-  int linenum;\n+  int linenum, columnnum;\n \n   if (override_filename)\n     {\n       filename = override_filename;\n       linenum = override_linenum;\n+      columnnum = override_columnnum;\n     }\n   else if (INSN_HAS_LOCATION (insn))\n     {\n       expanded_location xloc = insn_location (insn);\n       filename = xloc.file;\n       linenum = xloc.line;\n+      columnnum = xloc.column;\n     }\n   else\n     {\n       filename = NULL;\n       linenum = 0;\n+      columnnum = 0;\n     }\n \n   if (filename == NULL)\n     return false;\n \n   if (force_source_line\n       || filename != last_filename\n-      || last_linenum != linenum)\n+      || last_linenum != linenum\n+      || (debug_column_info && last_columnnum != columnnum))\n     {\n       force_source_line = false;\n       last_filename = filename;\n       last_linenum = linenum;\n+      last_columnnum = columnnum;\n       last_discriminator = discriminator;\n       *is_stmt = true;\n       high_block_linenum = MAX (last_linenum, high_block_linenum);"}, {"sha": "84798ac9fb3eb1cbe539c0764c92e1db34954c59", "filename": "gcc/sdbout.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -116,11 +116,13 @@ static void sdbout_start_source_file\t(unsigned int, const char *);\n static void sdbout_end_source_file\t(unsigned int);\n static void sdbout_begin_block\t\t(unsigned int, unsigned int);\n static void sdbout_end_block\t\t(unsigned int, unsigned int);\n-static void sdbout_source_line\t\t(unsigned int, const char *, int, bool);\n+static void sdbout_source_line\t\t(unsigned int, unsigned int,\n+\t\t\t\t\t const char *, int, bool);\n static void sdbout_end_epilogue\t\t(unsigned int, const char *);\n static void sdbout_early_global_decl\t(tree);\n static void sdbout_late_global_decl\t(tree);\n-static void sdbout_begin_prologue\t(unsigned int, const char *);\n+static void sdbout_begin_prologue\t(unsigned int, unsigned int,\n+\t\t\t\t\t const char *);\n static void sdbout_end_prologue\t\t(unsigned int, const char *);\n static void sdbout_begin_function\t(tree);\n static void sdbout_end_function\t\t(unsigned int);\n@@ -1519,7 +1521,8 @@ sdbout_end_block (unsigned int line, unsigned int n ATTRIBUTE_UNUSED)\n    number LINE.  */\n \n static void\n-sdbout_source_line (unsigned int line, const char *filename ATTRIBUTE_UNUSED,\n+sdbout_source_line (unsigned int line, unsigned int column ATTRIBUTE_UNUSED,\n+\t\t    const char *filename ATTRIBUTE_UNUSED,\n                     int discriminator ATTRIBUTE_UNUSED,\n                     bool is_stmt ATTRIBUTE_UNUSED)\n {\n@@ -1551,7 +1554,8 @@ sdbout_begin_function (tree decl ATTRIBUTE_UNUSED)\n    describe the parameter list.  */\n \n static void\n-sdbout_begin_prologue (unsigned int line, const char *file ATTRIBUTE_UNUSED)\n+sdbout_begin_prologue (unsigned int line, unsigned int column ATTRIBUTE_UNUSED,\n+\t\t       const char *file ATTRIBUTE_UNUSED)\n {\n   sdbout_end_prologue (line, file);\n }"}, {"sha": "41928a400a921434db0183764907f3e9a38cd3d6", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -155,9 +155,11 @@ static void vmsdbgout_end_source_file (unsigned int);\n static void vmsdbgout_begin_block (unsigned int, unsigned int);\n static void vmsdbgout_end_block (unsigned int, unsigned int);\n static bool vmsdbgout_ignore_block (const_tree);\n-static void vmsdbgout_source_line (unsigned int, const char *, int, bool);\n+static void vmsdbgout_source_line (unsigned int, unsigned int, const char *,\n+\t\t\t\t   int, bool);\n static void vmsdbgout_write_source_line (unsigned, const char *, int , bool);\n-static void vmsdbgout_begin_prologue (unsigned int, const char *);\n+static void vmsdbgout_begin_prologue (unsigned int, unsigned int,\n+\t\t\t\t      const char *);\n static void vmsdbgout_end_prologue (unsigned int, const char *);\n static void vmsdbgout_end_function (unsigned int);\n static void vmsdbgout_begin_epilogue (unsigned int, const char *);\n@@ -1114,12 +1116,13 @@ write_srccorrs (int dosizeonly)\n    the prologue.  */\n \n static void\n-vmsdbgout_begin_prologue (unsigned int line, const char *file)\n+vmsdbgout_begin_prologue (unsigned int line, unsigned int column,\n+\t\t\t  const char *file)\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n   if (write_symbols == VMS_AND_DWARF2_DEBUG)\n-    (*dwarf2_debug_hooks.begin_prologue) (line, file);\n+    (*dwarf2_debug_hooks.begin_prologue) (line, column, file);\n \n   if (debug_info_level > DINFO_LEVEL_NONE)\n     {\n@@ -1397,11 +1400,13 @@ vmsdbgout_write_source_line (unsigned line, const char *filename,\n }\n \n static void\n-vmsdbgout_source_line (register unsigned line, register const char *filename,\n+vmsdbgout_source_line (register unsigned line, unsigned int column,\n+\t\t       register const char *filename,\n                        int discriminator, bool is_stmt)\n {\n   if (write_symbols == VMS_AND_DWARF2_DEBUG)\n-    (*dwarf2_debug_hooks.source_line) (line, filename, discriminator, is_stmt);\n+    (*dwarf2_debug_hooks.source_line) (line, column, filename, discriminator,\n+\t\t\t\t       is_stmt);\n \n   if (debug_info_level >= DINFO_LEVEL_TERSE)\n     vmsdbgout_write_source_line (line, filename, discriminator, is_stmt);"}, {"sha": "c6eab21a55d644963361066c595a04e8e9cd877f", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -327,8 +327,8 @@ xcoffout_source_file (FILE *file, const char *filename, int inline_p)\n /* Output a line number symbol entry for location (FILENAME, LINE).  */\n \n void\n-xcoffout_source_line (unsigned int line, const char *filename,\n-                      int discriminator ATTRIBUTE_UNUSED,\n+xcoffout_source_line (unsigned int line, unsigned int column ATTRIBUTE_UNUSED,\n+\t\t      const char *filename, int discriminator ATTRIBUTE_UNUSED,\n                       bool is_stmt ATTRIBUTE_UNUSED)\n {\n   bool inline_p = (strcmp (xcoff_current_function_file, filename) != 0\n@@ -446,6 +446,7 @@ xcoffout_declare_function (FILE *file, tree decl, const char *name)\n \n void\n xcoffout_begin_prologue (unsigned int line,\n+\t\t\t unsigned int column ATTRIBUTE_UNUSED,\n \t\t\t const char *file ATTRIBUTE_UNUSED)\n {\n   ASM_OUTPUT_LFB (asm_out_file, line);"}, {"sha": "6b0b0a07d8bcfb376e3dcc31c1b80d16624c6347", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497b7c47042d542ae48d10badf0c3d0088f6f798/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=497b7c47042d542ae48d10badf0c3d0088f6f798", "patch": "@@ -181,13 +181,14 @@ do {\t\t\t\t\t\t\t\\\n /* Prototype functions in xcoffout.c.  */\n \n extern int stab_to_sclass (int);\n-extern void xcoffout_begin_prologue (unsigned int, const char *);\n+extern void xcoffout_begin_prologue (unsigned int, unsigned int, const char *);\n extern void xcoffout_begin_block (unsigned, unsigned);\n extern void xcoffout_end_epilogue (unsigned int, const char *);\n extern void xcoffout_end_function (unsigned int);\n extern void xcoffout_end_block (unsigned, unsigned);\n extern int xcoff_assign_fundamental_type_number (tree);\n extern void xcoffout_declare_function (FILE *, tree, const char *);\n-extern void xcoffout_source_line (unsigned int, const char *, int, bool);\n+extern void xcoffout_source_line (unsigned int, unsigned int, const char *,\n+\t\t\t\t  int, bool);\n \n #endif /* GCC_XCOFFOUT_H */"}]}