{"sha": "878cdb7b38f5487d0ab7933377174a552b5f7d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4Y2RiN2IzOGY1NDg3ZDBhYjc5MzMzNzcxNzRhNTUyYjVmN2Q4MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-20T20:03:48Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-20T20:03:48Z"}, "message": "re PR fortran/48858 (Incorrect error for same binding label on two generic interface specifics)\n\n2013-05-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48858\n        * decl.c (gfc_match_bind_c_stmt): Add gfc_notify_std.\n        * match.c (gfc_match_common): Don't add commons to gsym.\n        * resolve.c (resolve_common_blocks): Add to gsym and\n        add checks.\n        (resolve_bind_c_comms): Remove.\n        (resolve_types): Remove call to the latter.\n        * trans-common.c (gfc_common_ns): Remove static var.\n        (gfc_map_of_all_commons): Add static var.\n        (build_common_decl): Correctly handle binding label.\n\n2013-05-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48858\n        * gfortran.dg/test_common_binding_labels.f03: Update dg-error.\n        * gfortran.dg/test_common_binding_labels_2_main.f03: Ditto.\n        * gfortran.dg/test_common_binding_labels_3_main.f03: Ditto.\n        * gfortran.dg/common_18.f90: New.\n        * gfortran.dg/common_19.f90: New.\n        * gfortran.dg/common_20.f90: New.\n        * gfortran.dg/common_21.f90: New.\n\nFrom-SVN: r199118", "tree": {"sha": "73668c05f30962cb8036747eb6744fb502ce15b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73668c05f30962cb8036747eb6744fb502ce15b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878cdb7b38f5487d0ab7933377174a552b5f7d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cdb7b38f5487d0ab7933377174a552b5f7d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878cdb7b38f5487d0ab7933377174a552b5f7d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cdb7b38f5487d0ab7933377174a552b5f7d80/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bbc95654de572e68a6afe4dd892721d34304ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbc95654de572e68a6afe4dd892721d34304ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbc95654de572e68a6afe4dd892721d34304ed6"}], "stats": {"total": 348, "additions": 206, "deletions": 142}, "files": [{"sha": "fca9761697b100075d4f2eaf67a4f23511a282f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -1,3 +1,16 @@\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\t* decl.c (gfc_match_bind_c_stmt): Add gfc_notify_std.\n+\t* match.c (gfc_match_common): Don't add commons to gsym.\n+\t* resolve.c (resolve_common_blocks): Add to gsym and\n+\tadd checks.\n+\t(resolve_bind_c_comms): Remove.\n+\t(resolve_types): Remove call to the latter.\n+\t* trans-common.c (gfc_common_ns): Remove static var.\n+\t(gfc_map_of_all_commons): Add static var.\n+\t(build_common_decl): Correctly handle binding label.\n+\n 2013-05-16  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (f951$(exeext)): Use link mutex."}, {"sha": "06a049c6fdd5db46201fc47214bf5c4264fcaac9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -4208,6 +4208,9 @@ gfc_match_bind_c_stmt (void)\n \n   if (found_match == MATCH_YES)\n     {\n+      if (!gfc_notify_std (GFC_STD_F2003, \"BIND(C) statement at %C\"))\n+\treturn MATCH_ERROR;\n+\n       /* Look for the :: now, but it is not required.  */\n       gfc_match (\" :: \");\n "}, {"sha": "b44d8157717a8fa9fda961888a6e613d47024c31", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -4332,7 +4332,6 @@ gfc_match_common (void)\n   gfc_array_spec *as;\n   gfc_equiv *e1, *e2;\n   match m;\n-  gfc_gsymbol *gsym;\n \n   old_blank_common = gfc_current_ns->blank_common.head;\n   if (old_blank_common)\n@@ -4349,23 +4348,6 @@ gfc_match_common (void)\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n \n-      gsym = gfc_get_gsymbol (name);\n-      if (gsym->type != GSYM_UNKNOWN && gsym->type != GSYM_COMMON)\n-\t{\n-\t  gfc_error (\"Symbol '%s' at %C is already an external symbol that \"\n-\t\t     \"is not COMMON\", name);\n-\t  goto cleanup;\n-\t}\n-\n-      if (gsym->type == GSYM_UNKNOWN)\n-\t{\n-\t  gsym->type = GSYM_COMMON;\n-\t  gsym->where = gfc_current_locus;\n-\t  gsym->defined = 1;\n-\t}\n-\n-      gsym->used = 1;\n-\n       if (name[0] == '\\0')\n \t{\n \t  t = &gfc_current_ns->blank_common;"}, {"sha": "06fa3018f4c36ecd760998097c021ef9856439cc", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 79, "deletions": 100, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -947,6 +947,7 @@ static void\n resolve_common_blocks (gfc_symtree *common_root)\n {\n   gfc_symbol *sym;\n+  gfc_gsymbol * gsym;\n \n   if (common_root == NULL)\n     return;\n@@ -958,6 +959,84 @@ resolve_common_blocks (gfc_symtree *common_root)\n \n   resolve_common_vars (common_root->n.common->head, true);\n \n+  /* The common name is a global name - in Fortran 2003 also if it has a\n+     C binding name, since Fortran 2008 only the C binding name is a global\n+     identifier.  */\n+  if (!common_root->n.common->binding_label\n+      || gfc_notification_std (GFC_STD_F2008))\n+    {\n+      gsym = gfc_find_gsymbol (gfc_gsym_root,\n+\t\t\t       common_root->n.common->name);\n+\n+      if (gsym && gfc_notification_std (GFC_STD_F2008)\n+\t  && gsym->type == GSYM_COMMON\n+\t  && ((common_root->n.common->binding_label\n+\t       && (!gsym->binding_label\n+\t\t   || strcmp (common_root->n.common->binding_label,\n+\t\t\t      gsym->binding_label) != 0))\n+\t      || (!common_root->n.common->binding_label\n+\t\t  && gsym->binding_label)))\n+\t{\n+\t  gfc_error (\"In Fortran 2003 COMMON '%s' block at %L is a global \"\n+\t\t     \"identifier and must thus have the same binding name \"\n+\t\t     \"as the same-named COMMON block at %L: %s vs %s\",\n+\t\t     common_root->n.common->name, &common_root->n.common->where,\n+\t\t     &gsym->where,\n+\t\t     common_root->n.common->binding_label\n+\t\t     ? common_root->n.common->binding_label : \"(blank)\",\n+\t\t     gsym->binding_label ? gsym->binding_label : \"(blank)\");\n+\t  return;\n+\t}\n+\n+      if (gsym && gsym->type != GSYM_COMMON\n+\t  && !common_root->n.common->binding_label)\n+\t{\n+\t  gfc_error (\"COMMON block '%s' at %L uses the same global identifier \"\n+\t\t     \"as entity at %L\",\n+\t\t     common_root->n.common->name, &common_root->n.common->where,\n+\t\t     &gsym->where);\n+\t  return;\n+\t}\n+      if (gsym && gsym->type != GSYM_COMMON)\n+\t{\n+\t  gfc_error (\"Fortran 2008: COMMON block '%s' with binding label at \"\n+\t\t     \"%L sharing the identifier with global non-COMMON-block \"\n+\t\t     \"entity at %L\", common_root->n.common->name,\n+\t\t     &common_root->n.common->where, &gsym->where);\n+\t  return;\n+\t}\n+      if (!gsym)\n+\t{\n+\t  gsym = gfc_get_gsymbol (common_root->n.common->name);\n+\t  gsym->type = GSYM_COMMON;\n+\t  gsym->where = common_root->n.common->where;\n+\t  gsym->defined = 1;\n+\t}\n+      gsym->used = 1;\n+    }\n+\n+  if (common_root->n.common->binding_label)\n+    {\n+      gsym = gfc_find_gsymbol (gfc_gsym_root,\n+\t\t\t       common_root->n.common->binding_label);\n+      if (gsym && gsym->type != GSYM_COMMON)\n+\t{\n+\t  gfc_error (\"COMMON block at %L with binding label %s uses the same \"\n+\t\t     \"global identifier as entity at %L\",\n+\t\t     &common_root->n.common->where,\n+\t\t     common_root->n.common->binding_label, &gsym->where);\n+\t  return;\n+\t}\n+      if (!gsym)\n+\t{\n+\t  gsym = gfc_get_gsymbol (common_root->n.common->binding_label);\n+\t  gsym->type = GSYM_COMMON;\n+\t  gsym->where = common_root->n.common->where;\n+\t  gsym->defined = 1;\n+\t}\n+      gsym->used = 1;\n+    }\n+\n   gfc_find_symbol (common_root->name, gfc_current_ns, 0, &sym);\n   if (sym == NULL)\n     return;\n@@ -9929,103 +10008,6 @@ resolve_values (gfc_symbol *sym)\n }\n \n \n-/* Verify the binding labels for common blocks that are BIND(C).  The label\n-   for a BIND(C) common block must be identical in all scoping units in which\n-   the common block is declared.  Further, the binding label can not collide\n-   with any other global entity in the program.  */\n-\n-static void\n-resolve_bind_c_comms (gfc_symtree *comm_block_tree)\n-{\n-  if (comm_block_tree->n.common->is_bind_c == 1)\n-    {\n-      gfc_gsymbol *binding_label_gsym;\n-      gfc_gsymbol *comm_name_gsym;\n-      const char * bind_label = comm_block_tree->n.common->binding_label\n-\t? comm_block_tree->n.common->binding_label : \"\";\n-\n-      /* See if a global symbol exists by the common block's name.  It may\n-         be NULL if the common block is use-associated.  */\n-      comm_name_gsym = gfc_find_gsymbol (gfc_gsym_root,\n-                                         comm_block_tree->n.common->name);\n-      if (comm_name_gsym != NULL && comm_name_gsym->type != GSYM_COMMON)\n-        gfc_error (\"Binding label '%s' for common block '%s' at %L collides \"\n-                   \"with the global entity '%s' at %L\",\n-                   bind_label,\n-                   comm_block_tree->n.common->name,\n-                   &(comm_block_tree->n.common->where),\n-                   comm_name_gsym->name, &(comm_name_gsym->where));\n-      else if (comm_name_gsym != NULL\n-\t       && strcmp (comm_name_gsym->name,\n-\t\t\t  comm_block_tree->n.common->name) == 0)\n-        {\n-          /* TODO: Need to make sure the fields of gfc_gsymbol are initialized\n-             as expected.  */\n-          if (comm_name_gsym->binding_label == NULL)\n-            /* No binding label for common block stored yet; save this one.  */\n-            comm_name_gsym->binding_label = bind_label;\n-          else if (strcmp (comm_name_gsym->binding_label, bind_label) != 0)\n-              {\n-                /* Common block names match but binding labels do not.  */\n-                gfc_error (\"Binding label '%s' for common block '%s' at %L \"\n-                           \"does not match the binding label '%s' for common \"\n-                           \"block '%s' at %L\",\n-                           bind_label,\n-                           comm_block_tree->n.common->name,\n-                           &(comm_block_tree->n.common->where),\n-                           comm_name_gsym->binding_label,\n-                           comm_name_gsym->name,\n-                           &(comm_name_gsym->where));\n-                return;\n-              }\n-        }\n-\n-      /* There is no binding label (NAME=\"\") so we have nothing further to\n-         check and nothing to add as a global symbol for the label.  */\n-      if (!comm_block_tree->n.common->binding_label)\n-        return;\n-\n-      binding_label_gsym =\n-        gfc_find_gsymbol (gfc_gsym_root,\n-                          comm_block_tree->n.common->binding_label);\n-      if (binding_label_gsym == NULL)\n-        {\n-          /* Need to make a global symbol for the binding label to prevent\n-             it from colliding with another.  */\n-          binding_label_gsym =\n-            gfc_get_gsymbol (comm_block_tree->n.common->binding_label);\n-          binding_label_gsym->sym_name = comm_block_tree->n.common->name;\n-          binding_label_gsym->type = GSYM_COMMON;\n-        }\n-      else\n-        {\n-          /* If comm_name_gsym is NULL, the name common block is use\n-             associated and the name could be colliding.  */\n-          if (binding_label_gsym->type != GSYM_COMMON)\n-            gfc_error (\"Binding label '%s' for common block '%s' at %L \"\n-                       \"collides with the global entity '%s' at %L\",\n-                       comm_block_tree->n.common->binding_label,\n-                       comm_block_tree->n.common->name,\n-                       &(comm_block_tree->n.common->where),\n-                       binding_label_gsym->name,\n-                       &(binding_label_gsym->where));\n-          else if (comm_name_gsym != NULL\n-\t\t   && (strcmp (binding_label_gsym->name,\n-\t\t\t       comm_name_gsym->binding_label) != 0)\n-\t\t   && (strcmp (binding_label_gsym->sym_name,\n-\t\t\t       comm_name_gsym->name) != 0))\n-            gfc_error (\"Binding label '%s' for common block '%s' at %L \"\n-                       \"collides with global entity '%s' at %L\",\n-                       binding_label_gsym->name, binding_label_gsym->sym_name,\n-                       &(comm_block_tree->n.common->where),\n-                       comm_name_gsym->name, &(comm_name_gsym->where));\n-        }\n-    }\n-\n-  return;\n-}\n-\n-\n /* Verify any BIND(C) derived types in the namespace so we can report errors\n    for them once, rather than for each variable declared of that type.  */\n \n@@ -14425,9 +14407,6 @@ resolve_types (gfc_namespace *ns)\n \n   gfc_traverse_ns (ns, gfc_verify_binding_labels);\n \n-  if (ns->common_root != NULL)\n-    gfc_traverse_symtree (ns->common_root, resolve_bind_c_comms);\n-\n   for (eq = ns->equiv; eq; eq = eq->next)\n     resolve_equivalence (eq);\n "}, {"sha": "e2234b1ae0cadf9e0ecf3610b1fa6893438d5b37", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -92,6 +92,7 @@ along with GCC; see the file COPYING3.  If not see\n    is examined for still-unused equivalence conditions.  We create a\n    block for each merged equivalence list.  */\n \n+#include <map>\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -116,7 +117,10 @@ typedef struct segment_info\n } segment_info;\n \n static segment_info * current_segment;\n-static gfc_namespace *gfc_common_ns = NULL;\n+\n+/* Store decl of all common blocks in this translation unit; the first\n+   tree is the identifier.  */\n+static std::map<tree, tree> gfc_map_of_all_commons;\n \n \n /* Make a segment_info based on a symbol.  */\n@@ -374,15 +378,11 @@ build_equiv_decl (tree union_type, bool is_init, bool is_saved)\n static tree\n build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n {\n-  gfc_symbol *common_sym;\n-  tree decl;\n+  tree decl, identifier;\n \n-  /* Create a namespace to store symbols for common blocks.  */\n-  if (gfc_common_ns == NULL)\n-    gfc_common_ns = gfc_get_namespace (NULL, 0);\n-\n-  gfc_get_symbol (com->name, gfc_common_ns, &common_sym);\n-  decl = common_sym->backend_decl;\n+  identifier = gfc_sym_mangled_common_id (com);\n+  decl = gfc_map_of_all_commons.count(identifier)\n+\t ? gfc_map_of_all_commons[identifier] : NULL_TREE;\n \n   /* Update the size of this common block as needed.  */\n   if (decl != NULL_TREE)\n@@ -419,9 +419,15 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n   /* If there is no backend_decl for the common block, build it.  */\n   if (decl == NULL_TREE)\n     {\n-      decl = build_decl (input_location,\n-\t\t\t VAR_DECL, get_identifier (com->name), union_type);\n-      gfc_set_decl_assembler_name (decl, gfc_sym_mangled_common_id (com));\n+      if (com->is_bind_c == 1 && com->binding_label)\n+\tdecl = build_decl (input_location, VAR_DECL, identifier, union_type);\n+      else\n+\t{\n+\t  decl = build_decl (input_location, VAR_DECL, get_identifier (com->name),\n+\t\t\t     union_type);\n+\t  gfc_set_decl_assembler_name (decl, identifier);\n+\t}\n+\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;\n@@ -449,7 +455,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n \n       /* Place the back end declaration for this common block in\n          GLOBAL_BINDING_LEVEL.  */\n-      common_sym->backend_decl = pushdecl_top_level (decl);\n+      gfc_map_of_all_commons[identifier] = pushdecl_top_level (decl);\n     }\n \n   /* Has no initial values.  */"}, {"sha": "a86119337157d0bfd0d49ec72e5eb793bcbcd855", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -1,3 +1,14 @@\n+2013-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48858\n+\t* gfortran.dg/test_common_binding_labels.f03: Update dg-error.\n+\t* gfortran.dg/test_common_binding_labels_2_main.f03: Ditto.\n+\t* gfortran.dg/test_common_binding_labels_3_main.f03: Ditto.\n+\t* gfortran.dg/common_18.f90: New.\n+\t* gfortran.dg/common_19.f90: New.\n+\t* gfortran.dg/common_20.f90: New.\n+\t* gfortran.dg/common_21.f90: New.\n+\n 2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/12288"}, {"sha": "374eda8eee12d95bbed60b23a302c1d9769a0042", "filename": "gcc/testsuite/gfortran.dg/common_18.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_18.f90?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48858\n+!\n+!\n+use iso_c_binding\n+contains\n+subroutine one()\n+  bind(C, name=\"com1\") :: /foo/\n+  integer(c_int) :: a\n+  common /foo/ a\n+end subroutine\n+subroutine two()\n+  integer(c_long) :: a\n+  common /foo/ a\n+end subroutine two\n+end\n+\n+! { dg-final { scan-assembler \"com1\" } }\n+! { dg-final { scan-assembler \"foo_\" } }"}, {"sha": "020420193e7003c8ca03999a95a4e5f35bc66772", "filename": "gcc/testsuite/gfortran.dg/common_19.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_19.f90?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/48858\n+!\n+integer :: i\n+common /foo/ i\n+bind(C) :: /foo/ ! { dg-error \"Fortran 2003: BIND.C. statement\" }\n+end"}, {"sha": "836a9ecb3e4ebaf34338f0041f155292baac8a79", "filename": "gcc/testsuite/gfortran.dg/common_20.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_20.f90?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/48858\n+!\n+subroutine test\n+  integer :: l, m\n+  common /g/ l ! { dg-error \"Fortran 2008: COMMON block 'g' with binding label at .1. sharing the identifier with global non-COMMON-block entity at .2.\" }\n+  common /jj/ m ! { dg-error \"Global name 'jj' at .1. is already being used as a COMMON at .2.\" }\n+  bind(C,name=\"bar\") :: /g/\n+  bind(C,name=\"foo\") :: /jj/\n+end\n+\n+subroutine g ! { dg-error \"Fortran 2008: COMMON block 'g' with binding label at .1. sharing the identifier with global non-COMMON-block entity at .2.\" }\n+  call jj()  ! { dg-error \"Global name 'jj' at .1. is already being used as a COMMON at .2.\" }\n+end\n+\n+"}, {"sha": "73a1b58a1ab525c89a4977c70db6adc728ebf4c4", "filename": "gcc/testsuite/gfortran.dg/common_21.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_21.f90?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! PR fortran/48858\n+!\n+subroutine test\n+  integer :: l, m\n+  common /g/ l\n+  common /jj/ m\n+  bind(C,name=\"bar\") :: /g/\n+  bind(C,name=\"foo\") :: /jj/\n+end\n+\n+subroutine g\n+  call jj()\n+end\n+\n+"}, {"sha": "8936fa87a8973f7bef70c67690014a9e2d9b7636", "filename": "gcc/testsuite/gfortran.dg/test_common_binding_labels.f03", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels.f03?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -1,9 +1,11 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n module x\n   use, intrinsic :: iso_c_binding, only: c_double\n   implicit none\n \n-  common /mycom/ r, s ! { dg-error \"does not match\" }\n+  common /mycom/ r, s ! { dg-error \"In Fortran 2003 COMMON 'mycom' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: my_common_block vs .blank.|In Fortran 2003 COMMON 'mycom' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: my_common_block_2 vs .blank.\" }\n   real(c_double) :: r\n   real(c_double) :: s\n   bind(c, name=\"my_common_block\") :: /mycom/\n@@ -13,12 +15,12 @@ module y\n   use, intrinsic :: iso_c_binding, only: c_double, c_int\n   implicit none\n   \n-  common /mycom/ r, s\n+  common /mycom/ r, s ! { dg-error \"In Fortran 2003 COMMON 'mycom' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: my_common_block vs .blank.\" }\n   real(c_double) :: r\n   real(c_double) :: s\n   bind(c, name=\"my_common_block\") :: /mycom/\n \n-  common /com2/ i ! { dg-error \"does not match\" }\n+  common /com2/ i ! { dg-error \" In Fortran 2003 COMMON 'com2' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: mycom2 vs .blank.\" }\n   integer(c_int) :: i\n   bind(c, name=\"\") /com2/\n end module y\n@@ -27,14 +29,14 @@ module z\n   use, intrinsic :: iso_c_binding, only: c_double, c_int\n   implicit none\n   \n-  common /mycom/ r, s ! { dg-error \"does not match\" }\n+  common /mycom/ r, s ! { dg-error \"In Fortran 2003 COMMON 'mycom' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: my_common_block_2 vs .blank.\" }\n   real(c_double) :: r\n   real(c_double) :: s\n   ! this next line is an error; if a common block is bind(c), the binding label\n   ! for it must match across all scoping units that declare it.\n   bind(c, name=\"my_common_block_2\") :: /mycom/ \n \n-  common /com2/ i ! { dg-error \"does not match\" }\n+  common /com2/ i ! { dg-error \" In Fortran 2003 COMMON 'com2' block at .1. is a global identifier and must thus have the same binding name as the same-named COMMON block at .2.: mycom2 vs .blank.\" }\n   integer(c_int) :: i\n   bind(c, name=\"mycom2\") /com2/\n end module z"}, {"sha": "fb7778effa0e0567e13c13a87a3934c1041c04d0", "filename": "gcc/testsuite/gfortran.dg/test_common_binding_labels_2_main.f03", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_2_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_2_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_2_main.f03?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -1,24 +1,27 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+!\n ! This file depends on the module test_common_binding_labels_2.  That module\n ! must be compiled first and not be removed until after this test.\n module test_common_binding_labels_2_main\n   use, intrinsic :: iso_c_binding, only: c_double, c_int\n   implicit none\n   \n-  common /mycom/ r, s ! { dg-error \"does not match\" }\n+  common /mycom/ r, s ! { dg-error \"same binding name\" }\n   real(c_double) :: r\n   real(c_double) :: s\n   ! this next line is an error; if a common block is bind(c), the binding label\n   ! for it must match across all scoping units that declare it.\n   bind(c, name=\"my_common_block_2\") :: /mycom/ \n \n-  common /com2/ i ! { dg-error \"does not match\" }\n+  common /com2/ i ! { dg-error \"same binding name\" }\n   integer(c_int) :: i\n   bind(c, name=\"mycom2\") /com2/\n end module test_common_binding_labels_2_main\n \n program main\n-  use test_common_binding_labels_2 ! { dg-error \"does not match\" }\n-  use test_common_binding_labels_2_main\n+  use test_common_binding_labels_2 ! { dg-error \"same binding name\" }\n+  use test_common_binding_labels_2_main ! { dg-error \"same binding name\" }\n end program main\n ! { dg-final { cleanup-modules \"test_common_binding_labels_2\" } }"}, {"sha": "3ccab0c89fe866768924f2f53442f8209dc08856", "filename": "gcc/testsuite/gfortran.dg/test_common_binding_labels_3_main.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878cdb7b38f5487d0ab7933377174a552b5f7d80/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftest_common_binding_labels_3_main.f03?ref=878cdb7b38f5487d0ab7933377174a552b5f7d80", "patch": "@@ -3,11 +3,11 @@\n ! must be compiled first and not be removed until after this test.\n module test_common_binding_labels_3_main\n   use, intrinsic :: iso_c_binding, only: c_int\n-  integer(c_int), bind(c, name=\"my_common_block\") :: my_int ! { dg-error \"collides\" }\n+  integer(c_int), bind(c, name=\"my_common_block\") :: my_int ! { dg-error \"COMMON block at .1. with binding label my_common_block uses the same global identifier as entity at .2.\" }\n end module test_common_binding_labels_3_main\n \n program main\n   use test_common_binding_labels_3_main\n-  use test_common_binding_labels_3 ! { dg-error \"collides\" }\n+  use test_common_binding_labels_3 ! { dg-error \"COMMON block at .1. with binding label my_common_block uses the same global identifier as entity at .2.\" }\n end program main\n ! { dg-final { cleanup-modules \"test_common_binding_labels_3\" } }"}]}