{"sha": "99f17e996f21d0ed64c36ed1e52977b705143522", "node_id": "C_kwDOANBUbNoAKDk5ZjE3ZTk5NmYyMWQwZWQ2NGMzNmVkMWU1Mjk3N2I3MDUxNDM1MjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-28T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-28T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "1e24a0cf5cc85653732bab9e686c86e321c76032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e24a0cf5cc85653732bab9e686c86e321c76032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f17e996f21d0ed64c36ed1e52977b705143522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f17e996f21d0ed64c36ed1e52977b705143522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f17e996f21d0ed64c36ed1e52977b705143522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f17e996f21d0ed64c36ed1e52977b705143522/comments", "author": null, "committer": null, "parents": [{"sha": "eae41b4d2cc30327f9f15c7390438c46aa09ed3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae41b4d2cc30327f9f15c7390438c46aa09ed3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae41b4d2cc30327f9f15c7390438c46aa09ed3f"}], "stats": {"total": 281, "additions": 280, "deletions": 1}, "files": [{"sha": "42029e88bc6b997447039bd9a588116d5ec210ab", "filename": "contrib/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,16 @@\n+2022-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* git-undescr.sh: Support full output of git-descr.sh.\n+\n+2022-01-27  Martin Liska  <mliska@suse.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* git-descr.sh: New file.\n+\t* git-undescr.sh: New file.\n+\tSupport optional arguments --long, --short and default\n+\tto 14 characters of git hash.\n+\t* gcc-git-customization.sh: Use the created files.\n+\n 2022-01-24  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: New files in toplev must"}, {"sha": "7b9ef630d92ac0b511064766bdcc2a8584404653", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,50 @@\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99895\n+\t* tree.cc (build_call_vec): Add const to second parameter.\n+\t* tree.h (build_call_vec): Likewise.\n+\n+2022-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR web/104254\n+\t* diagnostic.cc (diagnostic_initialize):\n+\tInitialize report_bug flag.\n+\t(diagnostic_action_after_output):\n+\tExplain that -freport-bug option can be used for pre-processed\n+\tfile creation.  Make the message shorter.\n+\t(error_recursion): Rename Internal to internal.\n+\t* diagnostic.h (struct diagnostic_context): New field.\n+\t* opts.cc (common_handle_option): Init the field here.\n+\n+2022-01-27  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/103702\n+\t* config/rs6000/rs6000.cc\n+\t(rs6000_cost_data::update_target_cost_per_stmt): Fix one wrong\n+\tassertion with early return.\n+\n+2022-01-27  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/103642\n+\t* gimplify.cc (gimplify_scan_omp_clauses): Do not do indir_p handling\n+\tfor non-pointer or non-reference-to-pointer cases.\n+\n+2022-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104196\n+\t* gimple-fold.h (rewrite_to_defined_overflow): Add IN_PLACE argument.\n+\t* gimple-fold.cc (rewrite_to_defined_overflow): Likewise.  If true,\n+\treturn NULL and emit needed stmts before and after stmt.\n+\t* tree-ssa-reassoc.cc (update_range_test): For inter-bb range opt\n+\tpick as operand_entry that will hold the merged test the one feeding\n+\tearliest condition, ensure that by swapping range->idx with some\n+\tother range's idx if needed.  If seq is non-NULL, don't actually swap\n+\tit but instead rewrite stmts with undefined overflow in between\n+\tthe two locations.\n+\t(maybe_optimize_range_tests): Set ops[]->id to bb->index with the\n+\tcorresponding condition even if they have non-NULL ops[]->op.\n+\tFormatting fix.\n+\n 2022-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/104239"}, {"sha": "5f741186d8efbf0f76b033eda4b512efc3f5890a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1 +1 @@\n-20220127\n+20220128"}, {"sha": "167f1b80f8cd13c230754bd5865a72cf8d81127f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,57 @@\n+2022-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (event_kind_to_string): Handle\n+\tEK_REGION_CREATION.\n+\t(region_creation_event::region_creation_event): New.\n+\t(region_creation_event::get_desc): New.\n+\t(checker_path::add_region_creation_event): New.\n+\t* checker-path.h (enum event_kind): Add EK_REGION_CREATION.\n+\t(class region_creation_event): New subclass.\n+\t(checker_path::add_region_creation_event): New decl.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::emit_saved_diagnostic): Pass NULL for new\n+\tparam to add_events_for_eedge when handling trailing eedge.\n+\t(diagnostic_manager::build_emission_path): Create an interesting_t\n+\tinstance, allow the pending diagnostic to populate it, and pass it\n+\tto the calls to add_events_for_eedge.\n+\t(diagnostic_manager::add_events_for_eedge): Add \"interest\" param.\n+\tUse it to add region_creation_events for on-stack regions created\n+\twithin at function entry, and when pertinent dynamically-sized\n+\tregions are created.\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Add case for\n+\tEK_REGION_CREATION.\n+\t* diagnostic-manager.h (diagnostic_manager::add_events_for_eedge):\n+\tAdd \"interest\" param.\n+\t* pending-diagnostic.cc: Include \"selftest.h\", \"tristate.h\",\n+\t\"analyzer/call-string.h\", \"analyzer/program-point.h\",\n+\t\"analyzer/store.h\", and \"analyzer/region-model.h\".\n+\t(interesting_t::add_region_creation): New.\n+\t(interesting_t::dump_to_pp): New.\n+\t* pending-diagnostic.h (struct interesting_t): New.\n+\t(pending_diagnostic::mark_interesting_stuff): New vfunc.\n+\t* region-model.cc\n+\t(poisoned_value_diagnostic::poisoned_value_diagnostic): Add\n+\t(poisoned_value_diagnostic::operator==): Compare m_pkind and\n+\tm_src_region fields.\n+\t(poisoned_value_diagnostic::mark_interesting_stuff): New.\n+\t(poisoned_value_diagnostic::m_src_region): New.\n+\t(region_model::check_for_poison): Call\n+\tget_region_for_poisoned_expr for uninit values and pass the resul\n+\tto the diagnostic.\n+\t(region_model::get_region_for_poisoned_expr): New.\n+\t(region_model::deref_rvalue): Pass NULL for\n+\tpoisoned_value_diagnostic's src_region.\n+\t* region-model.h (region_model::get_region_for_poisoned_expr): New\n+\tdecl.\n+\t* region.h (frame_region::get_fndecl): New.\n+\n+2022-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR analyzer/104247\n+\t* constraint-manager.cc (bounded_ranges_manager::log_stats):\n+\tCast to long for format purpose.\n+\t* region-model-manager.cc (log_uniq_map): Likewise.\n+\n 2022-01-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104224"}, {"sha": "4301b5c81a94b6db2c7a9f1e4897392bfdf4c1f7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,37 @@\n+2022-01-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104245\n+\tPR c++/51344\n+\t* decl2.cc (save_template_attributes): Take late attrs as parm.\n+\t(cplus_decl_attributes): Call it after decl_attributes,\n+\tsplice_template_attributes before.\n+\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99895\n+\t* call.cc (build_over_call): For a non-dependent member call,\n+\tbuild up a CALL_EXPR using a COMPONENT_REF callee, as in\n+\tbuild_new_method_call.\n+\t* pt.cc (build_non_dependent_expr): Don't wrap PARM_DECL either.\n+\t* tree.cc (build_min_non_dep_op_overload): Adjust accordingly\n+\tafter the build_over_call change.\n+\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92944\n+\tPR c++/103678\n+\t* parser.cc (cp_parser_class_head): Update 'type' with the result\n+\tof maybe_process_partial_specialization in the\n+\tnested_name_specifier branch.  Refactor nearby code to accomodate\n+\tthat maybe_process_partial_specialization returns a _TYPE, not a\n+\tTYPE_DECL, and eliminate local variable 'class_type' in passing.\n+\n+2022-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101988\n+\t* decl.cc (create_array_type_for_decl): Reject forming an array of\n+\tplaceholder for a deduced class type.\n+\n 2022-01-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/104206"}, {"sha": "877f345dbfb04a9e0fc738848e5cea43eedd8417", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,20 @@\n+2022-01-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104128\n+\t* expr.cc (gfc_copy_expr): Convert internal representation of\n+\tstring to wide char in value only for default character kind.\n+\t* target-memory.cc (interpret_array): Pass flag for conversion of\n+\twide chars.\n+\t(gfc_target_interpret_expr): Likewise.\n+\n+2022-01-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/84784\n+\t* trans-intrinsic.cc (conv_intrinsic_image_status): Convert result\n+\tto resulting (default) integer type.\n+\t(conv_intrinsic_team_number): Likewise.\n+\t(gfc_conv_intrinsic_popcnt_poppar): Likewise.\n+\n 2022-01-25  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104227"}, {"sha": "012e2c3cf92d851a926c7d91b41f60caedb2c04b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,93 @@\n+2022-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/data-model-1.c: Add dg-message directives for\n+\texpected region creation events.\n+\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n+\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: Likewise.\n+\t* gcc.dg/analyzer/pr101547.c: Likewise.\n+\t* gcc.dg/analyzer/pr101875.c: Likewise.\n+\t* gcc.dg/analyzer/pr101962.c: Likewise.\n+\t* gcc.dg/analyzer/pr104224.c: Likewise.\n+\t* gcc.dg/analyzer/pr94047.c: Likewise.\n+\t* gcc.dg/analyzer/symbolic-1.c: Likewise.\n+\t* gcc.dg/analyzer/uninit-1.c: Likewise.\n+\t* gcc.dg/analyzer/uninit-4.c: Likewise.\n+\t* gcc.dg/analyzer/uninit-alloca.c: New test.\n+\t* gcc.dg/analyzer/uninit-pr94713.c: Add dg-message directive for\n+\texpected region creation event.\n+\t* gcc.dg/analyzer/uninit-pr94714.c: Likewise.\n+\t* gcc.dg/analyzer/zlib-3.c: Likewise.\n+\n+2022-01-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104245\n+\tPR c++/51344\n+\t* g++.dg/lto/alignas1_0.C: New test.\n+\n+2022-01-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gfortran.dg/ieee/signaling_1.f90 (dg-do):\n+\tRun only on non-ia32 targets.\n+\t* gfortran.dg/ieee/signaling_2.f90 (dg-do): Ditto.\n+\t* gfortran.dg/ieee/signaling_3.f90 (dg-do): Ditto.\n+\n+2022-01-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104128\n+\t* gfortran.dg/transfer_simplify_14.f90: New test.\n+\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/82632\n+\t* g++.dg/cpp1z/class-deduction104.C: New test.\n+\t* g++.dg/cpp1z/class-deduction105.C: New test.\n+\n+2022-01-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/84784\n+\t* gfortran.dg/pr84784.f90: New test.\n+\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99895\n+\t* g++.dg/cpp2a/consteval-memfn1.C: New test.\n+\t* g++.dg/cpp2a/consteval-memfn2.C: New test.\n+\t* g++.dg/cpp2a/consteval28.C: New test.\n+\n+2022-01-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92944\n+\tPR c++/103678\n+\t* g++.dg/cpp2a/concepts-partial-spec10.C: New test.\n+\t* g++.dg/cpp2a/concepts-partial-spec11.C: New test.\n+\n+2022-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101988\n+\t* g++.dg/cpp1z/class-deduction-new1.C: New test.\n+\t* g++.dg/cpp23/auto-array2.C: New test.\n+\n+2022-01-27  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/103702\n+\t* gcc.target/powerpc/pr103702.c: New test.\n+\n+2022-01-27  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/103642\n+\t* c-c++-common/gomp/pr103642.c: New test.\n+\n+2022-01-27  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/104201\n+\t* gcc.target/aarch64/branch-protection-attr.c: Fix quoting for\n+\tthe expected error message on line 5 of leaf.\n+\n+2022-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104196\n+\t* gcc.c-torture/execute/pr104196.c: New test.\n+\n 2022-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/104239"}, {"sha": "c3ebcb3b6ddd6d0f624977c8c9d89bf6da1e76a5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,7 @@\n+2022-01-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.0): Update implementation status.\n+\n 2022-01-21  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Strengthen."}, {"sha": "a31413c97f2709fe11b90e6f093e37dc433e690d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f17e996f21d0ed64c36ed1e52977b705143522/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f17e996f21d0ed64c36ed1e52977b705143522/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=99f17e996f21d0ed64c36ed1e52977b705143522", "patch": "@@ -1,3 +1,23 @@\n+2022-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100516\n+\t* include/bits/deque.tcc (_M_range_initialize<ForwardIterator>):\n+\tAdd __builtin_unreachable to loop.\n+\t* testsuite/23_containers/deque/100516.cc: New test.\n+\n+2022-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (ranges::advance): Avoid signed\n+\toverflow. Do nothing if already equal to desired result.\n+\t* testsuite/24_iterators/range_operations/advance_overflow.cc:\n+\tNew test.\n+\n+2022-01-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR libstdc++/104259\n+\t* acinclude.m4: Fix typo.\n+\t* configure: Regenerate.\n+\n 2022-01-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/104019"}]}