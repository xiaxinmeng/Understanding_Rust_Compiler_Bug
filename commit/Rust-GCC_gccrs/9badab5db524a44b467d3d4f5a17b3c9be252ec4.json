{"sha": "9badab5db524a44b467d3d4f5a17b3c9be252ec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhZGFiNWRiNTI0YTQ0YjQ2N2QzZDRmNWExN2IzYzliZTI1MmVjNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-02T01:39:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-02T01:39:19Z"}, "message": "compiler: refactoring in Export class to encapsulate type refs map\n    \n    Convert the Export::type_refs map from a static object to a field\n    contained (indirectly, via an impl class) in Export itself, for better\n    encapsulation and to be able to reclaim its memory when exporting is\n    done. No change in compiler functionality.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/184170\n\nFrom-SVN: r272919", "tree": {"sha": "9107a0e2ee18a9d20e6b3e71da0f017675e79319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9107a0e2ee18a9d20e6b3e71da0f017675e79319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9badab5db524a44b467d3d4f5a17b3c9be252ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9badab5db524a44b467d3d4f5a17b3c9be252ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9badab5db524a44b467d3d4f5a17b3c9be252ec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9badab5db524a44b467d3d4f5a17b3c9be252ec4/comments", "author": null, "committer": null, "parents": [{"sha": "b731572b8a1ef42bd21574ddc95616a26e719264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b731572b8a1ef42bd21574ddc95616a26e719264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b731572b8a1ef42bd21574ddc95616a26e719264"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "7ee3e11df447150c15ef6ed472f4574a6089a89a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9badab5db524a44b467d3d4f5a17b3c9be252ec4", "patch": "@@ -1,4 +1,4 @@\n-d3d0f3c5bbe9d272178d55bdb907b07c188800e1\n+1e042a49d6f2e95d371301aa7b911522dc5877f4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a1bd8cc5364987e90aed6b26eb32ed8847a65030", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=9badab5db524a44b467d3d4f5a17b3c9be252ec4", "patch": "@@ -41,14 +41,6 @@ const char Export::v2_magic[Export::magic_len] =\n \n const int Export::checksum_len;\n \n-// Constructor.\n-\n-Export::Export(Stream* stream)\n-  : stream_(stream), type_index_(1), packages_()\n-{\n-  go_assert(Export::checksum_len == Go_sha1_helper::checksum_len);\n-}\n-\n // Type hash table operations, treating aliases as distinct.\n \n class Type_hash_alias_identical\n@@ -80,14 +72,31 @@ class Type_alias_identical\n   }\n };\n \n-// Mapping from Type objects to a constant index.  This would be nicer\n-// as a field in Export, but then export.h would have to #include\n-// types.h.\n-\n+// Mapping from Type objects to a constant index.\n typedef Unordered_map_hash(const Type*, int, Type_hash_alias_identical,\n-\t\t\t   Type_alias_identical) Type_refs;\n+                           Type_alias_identical) Type_refs;\n+\n+// Implementation object for class Export.  Hidden implementation avoids\n+// having to #include types.h in export.h, or use a static map.\n+\n+struct Export_impl {\n+  Type_refs type_refs;\n+};\n \n-static Type_refs type_refs;\n+// Constructor.\n+\n+Export::Export(Stream* stream)\n+    : stream_(stream), type_index_(1), packages_(), impl_(new Export_impl)\n+{\n+  go_assert(Export::checksum_len == Go_sha1_helper::checksum_len);\n+}\n+\n+// Destructor.\n+\n+Export::~Export()\n+{\n+  delete this->impl_;\n+}\n \n // A traversal class to collect functions and global variables\n // referenced by inlined functions.\n@@ -635,7 +644,7 @@ Export::set_type_index(Type* type)\n   type = type->forwarded();\n \n   std::pair<Type_refs::iterator, bool> ins =\n-    type_refs.insert(std::make_pair(type, 0));\n+    this->impl_->type_refs.insert(std::make_pair(type, 0));\n   if (!ins.second)\n     {\n       // We've already seen this type.\n@@ -1011,8 +1020,8 @@ Export::write_types(int unexported_type_index)\n {\n   // Map from type index to type.\n   std::vector<const Type*> types(static_cast<size_t>(this->type_index_));\n-  for (Type_refs::const_iterator p = type_refs.begin();\n-       p != type_refs.end();\n+  for (Type_refs::const_iterator p = this->impl_->type_refs.begin();\n+       p != this->impl_->type_refs.end();\n        ++p)\n     {\n       if (p->second >= 0)\n@@ -1152,8 +1161,8 @@ int\n Export::type_index(const Type* type)\n {\n   type = type->forwarded();\n-  Type_refs::const_iterator p = type_refs.find(type);\n-  go_assert(p != type_refs.end());\n+  Type_refs::const_iterator p = this->impl_->type_refs.find(type);\n+  go_assert(p != this->impl_->type_refs.end());\n   int index = p->second;\n   go_assert(index != 0);\n   return index;\n@@ -1231,15 +1240,15 @@ Export::register_builtin_type(Gogo* gogo, const char* name, Builtin_code code)\n   Named_object* named_object = gogo->lookup_global(name);\n   go_assert(named_object != NULL && named_object->is_type());\n   std::pair<Type_refs::iterator, bool> ins =\n-    type_refs.insert(std::make_pair(named_object->type_value(), code));\n+    this->impl_->type_refs.insert(std::make_pair(named_object->type_value(), code));\n   go_assert(ins.second);\n \n   // We also insert the underlying type.  We can see the underlying\n   // type at least for string and bool.  It's OK if this insert\n   // fails--we expect duplications here, and it doesn't matter when\n   // they occur.\n   Type* real_type = named_object->type_value()->real_type();\n-  type_refs.insert(std::make_pair(real_type, code));\n+  this->impl_->type_refs.insert(std::make_pair(real_type, code));\n }\n \n // Class Export::Stream."}, {"sha": "74bdd9415b6cfeb561cc3211c54339b3ab9f37e0", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9badab5db524a44b467d3d4f5a17b3c9be252ec4/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=9badab5db524a44b467d3d4f5a17b3c9be252ec4", "patch": "@@ -22,6 +22,7 @@ class Import_init_set;\n class Backend;\n class Temporary_statement;\n class Unnamed_label;\n+struct Export_impl;\n \n // Codes used for the builtin types.  These are all negative to make\n // them easily distinct from the codes assigned by Export::write_type.\n@@ -121,6 +122,7 @@ class Export : public String_dump\n   };\n \n   Export(Stream*);\n+  ~Export();\n \n   // Size of export data magic string (which includes version number).\n   static const int magic_len = 4;\n@@ -262,6 +264,8 @@ class Export : public String_dump\n   int type_index_;\n   // Packages we have written out.\n   Unordered_map(const Package*, int) packages_;\n+  // Hidden implementation-specific state.\n+  Export_impl* impl_;\n };\n \n // An export streamer that puts the export stream in a named section."}]}