{"sha": "eb1485a68b1413b3db7c2cb67efb378658c4ff37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxNDg1YTY4YjE0MTNiM2RiN2MyY2I2N2VmYjM3ODY1OGM0ZmYzNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-09T12:11:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-09T12:11:25Z"}, "message": "re PR rtl-optimization/48927 (Issues with \"enable\" attribute and IRA register preferences)\n\n\tPR rtl-optimization/48927\n\t* ira-conflicts.c (commutative_constraint_p): Use\n\trecog_data.alternative_enabled_p to disable alternatives where\n\t\"enabled\" attribute is false.\n\t(get_dup_num): Ditto.\n\t* ira-lives.c (single_reg_class): Ditto.\n\t(ira_implicitly_set_insn_hard_regs): Ditto.\n\nFrom-SVN: r173568", "tree": {"sha": "d5aea3efc3350bea77719c98422be119161392a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5aea3efc3350bea77719c98422be119161392a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1485a68b1413b3db7c2cb67efb378658c4ff37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1485a68b1413b3db7c2cb67efb378658c4ff37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1485a68b1413b3db7c2cb67efb378658c4ff37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1485a68b1413b3db7c2cb67efb378658c4ff37/comments", "author": null, "committer": null, "parents": [{"sha": "c46d001a91568c9fd19ee74c73d34f87ebd4aef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46d001a91568c9fd19ee74c73d34f87ebd4aef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46d001a91568c9fd19ee74c73d34f87ebd4aef5"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "db6700416d946175109ccdb071c9b0cc43eb6b54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb1485a68b1413b3db7c2cb67efb378658c4ff37", "patch": "@@ -1,3 +1,13 @@\n+2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/48927\n+\t* ira-conflicts.c (commutative_constraint_p): Use\n+\trecog_data.alternative_enabled_p to disable alternatives where\n+\t\"enabled\" attribute is false.\n+\t(get_dup_num): Ditto.\n+\t* ira-lives.c (single_reg_class): Ditto.\n+\t(ira_implicitly_set_insn_hard_regs): Ditto.\n+\n 2011-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* var-tracking.c (find_mem_expr_in_1pdv): Fix thinko.\n@@ -12,8 +22,7 @@\n \n \t* config/mips/genopt.sh, config/mips/mips-cpus.def: New files.\n \t* config/mips/mips-tables.opt: New file (generated).\n-\t* config.gcc (mips*-*-*): Add mips/mips-tables.opt to\n-\textra_options.\n+\t* config.gcc (mips*-*-*): Add mips/mips-tables.opt to extra_options.\n \t* config/mips/mips-opts.h (MIPS_ARCH_OPTION_FROM_ABI,\n \tMIPS_ARCH_OPTION_NATIVE): Define.\n \t* config/mips/mips.c (mips_cpu_info_table): Move contents to\n@@ -24,8 +33,7 @@\n \t(mips_handle_option): Don't assert that global structures are in\n \tuse.  Don't handle OPT_march_, OPT_mtune_ and OPT_mips here.\n \t(mips_option_override): Use new variables and functions to set\n-\tstate of these options.  Use strcmp to check for individual CPU\n-\tnames.\n+\tstate of these options.  Use strcmp to check for individual CPU names.\n \t* config/mips/mips.h (MIPS_CPU_STRING_DEFAULT): Remove default\n \tdefinition.\n \t* config/mips/mips.opt (march=): Use ToLower and Enum.\n@@ -59,9 +67,11 @@\n 2011-05-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_clone_node): Add call_duplication_hook parameter.\n-\t(cgraph_create_virtual_clone): Call hooks once virtual clone is finished.\n+\t(cgraph_create_virtual_clone): Call hooks once virtual clone\n+\tis finished.\n \t* cgraph.h (cgraph_clone_node): Update prototype.\n-\t* ipa-cp.c (ipcp_estimate_growth): Use estimate_ipcp_clone_size_and_time.\n+\t* ipa-cp.c (ipcp_estimate_growth): Use\n+\testimate_ipcp_clone_size_and_time.\n \t* ipa-inline-transform.c (clone_inlined_nodes): Update.\n \t* lto-cgraph.c (input_node): Update.\n \t* ipa-inline.c (recursive_inlining): Update.\n@@ -127,7 +137,7 @@\n \n \t* i386.h (ix86_tune_indices): Add\n \tX86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL.\n-\t(TARGET_SOFTWARE_PREFETCHING_BENEFICIAL): New macor.\n+\t(TARGET_SOFTWARE_PREFETCHING_BENEFICIAL): New macro.\n \t* i386.c (initial_ix86_tune_features): Add\n \tX86_SOFTARE_PREFETCHING_BENEFICIAL.\n \t(software_prefetching_beneficial_p): Remove predicate.\n@@ -227,9 +237,9 @@\n \n 2011-05-06  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n-      PR target/47930\n-      * config/arm/arm.opt (marm): Document it.\n-      (mthumb): Reject negative variant.\n+\tPR target/47930\n+\t* config/arm/arm.opt (marm): Document it.\n+\t(mthumb): Reject negative variant.\n \n 2011-05-06  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "be002839fa267074e44441baf0e0611922fc4e0d", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=eb1485a68b1413b3db7c2cb67efb378658c4ff37", "patch": "@@ -213,19 +213,22 @@ allocnos_conflict_for_copy_p (ira_allocno_t a1, ira_allocno_t a2)\n static bool\n commutative_constraint_p (const char *str)\n {\n+  int curr_alt, c;\n   bool ignore_p;\n-  int c;\n \n-  for (ignore_p = false;;)\n+  for (ignore_p = false, curr_alt = 0;;)\n     {\n       c = *str;\n       if (c == '\\0')\n \tbreak;\n       str += CONSTRAINT_LEN (c, str);\n-      if (c == '#')\n+      if (c == '#' || !recog_data.alternative_enabled_p[curr_alt])\n \tignore_p = true;\n       else if (c == ',')\n-\tignore_p = false;\n+\t{\n+\t  curr_alt++;\n+\t  ignore_p = false;\n+\t}\n       else if (! ignore_p)\n \t{\n \t  /* Usually `%' is the first constraint character but the\n@@ -270,7 +273,7 @@ get_dup_num (int op_num, bool use_commut_op_p)\n       c = *str;\n       if (c == '\\0')\n \tbreak;\n-      if (c == '#')\n+      if (c == '#' || !recog_data.alternative_enabled_p[curr_alt])\n \tignore_p = true;\n       else if (c == ',')\n \t{"}, {"sha": "d308bb39de2a255f9c31b639bef8b72ba973e879", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1485a68b1413b3db7c2cb67efb378658c4ff37/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=eb1485a68b1413b3db7c2cb67efb378658c4ff37", "patch": "@@ -726,18 +726,21 @@ mark_hard_reg_early_clobbers (rtx insn, bool live_p)\n static enum reg_class\n single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n {\n-  int ignore_p;\n+  int curr_alt, c;\n+  bool ignore_p;\n   enum reg_class cl, next_cl;\n-  int c;\n \n   cl = NO_REGS;\n-  for (ignore_p = false;\n+  for (ignore_p = false, curr_alt = 0;\n        (c = *constraints);\n        constraints += CONSTRAINT_LEN (c, constraints))\n-    if (c == '#')\n+    if (c == '#' || !recog_data.alternative_enabled_p[curr_alt])\n       ignore_p = true;\n     else if (c == ',')\n-      ignore_p = false;\n+      {\n+\tcurr_alt++;\n+\tignore_p = false;\n+      }\n     else if (! ignore_p)\n       switch (c)\n \t{\n@@ -873,7 +876,7 @@ single_reg_operand_class (int op_num)\n void\n ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set)\n {\n-  int i, c, regno = 0;\n+  int i, curr_alt, c, regno = 0;\n   bool ignore_p;\n   enum reg_class cl;\n   rtx op;\n@@ -895,11 +898,16 @@ ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set)\n \t  mode = (GET_CODE (op) == SCRATCH\n \t\t  ? GET_MODE (op) : PSEUDO_REGNO_MODE (regno));\n \t  cl = NO_REGS;\n-\t  for (ignore_p = false; (c = *p); p += CONSTRAINT_LEN (c, p))\n-\t    if (c == '#')\n+\t  for (ignore_p = false, curr_alt = 0;\n+\t       (c = *p);\n+\t       p += CONSTRAINT_LEN (c, p))\n+\t    if (c == '#' || !recog_data.alternative_enabled_p[curr_alt])\n \t      ignore_p = true;\n \t    else if (c == ',')\n-\t      ignore_p = false;\n+\t      {\n+\t\tcurr_alt++;\n+\t\tignore_p = false;\n+\t      }\n \t    else if (! ignore_p)\n \t      switch (c)\n \t\t{"}]}