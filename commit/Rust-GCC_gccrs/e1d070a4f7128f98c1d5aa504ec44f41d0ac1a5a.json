{"sha": "e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkMDcwYTRmNzEyOGY5OGMxZDVhYTUwNGVjNDRmNDFkMGFjMWE1YQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-01-06T03:34:37Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-01-06T03:34:37Z"}, "message": "[bootstrap-O3,fortran] silence warning in simplify_transformation_to_array\n\nsimplify_transformation_to_array had the nested loop unrolled 7 times,\nwhich is reasonable given that it iterates over arrays of size\nGFC_MAX_DIMENSIONS == 7.\n\nThe problem is that the last iteration increments the index, tests\nthat it's less than result->rank, and then accesses the arrays with\nthe incremented index.\n\nWe did not optimize out that part in the 7th iteration, so VRP flagged\nthe unreachable code as accessing arrays past the end.\n\nIt couldn't possibly know that we'd never reach that part, since the\ntest was on result->rank, and it's not obvious (for the compiler) that\nresult->rank <= GFC_MAX_DIMENSIONS.\n\nEven an assert to that effect before the enclosing loop didn't avoid\nthe warning turned to error, though; I suppose there might be some\naliasing at play, because moving the assert into the loop does.  An\nassert on the index itself would also work, even more efficiently, but\nwe're just silencing the warning instead.\n\nfor  gcc/fortran/ChangeLog\n\n\t* simplify.c (simplify_transformation_to_array): Silence\n\tarray bounds warning.  Fix whitespace.\n\nFrom-SVN: r244122", "tree": {"sha": "7b466ed0799e625e763641ce9cfaf53ee9cde2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b466ed0799e625e763641ce9cfaf53ee9cde2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a/comments", "author": null, "committer": null, "parents": [{"sha": "435f3f7adf6c1ae34547c4859205f4ec7beb8a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435f3f7adf6c1ae34547c4859205f4ec7beb8a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435f3f7adf6c1ae34547c4859205f4ec7beb8a93"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "d1892de8bb1f502d1b3da38f5305d3f815d05ada", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "patch": "@@ -1,3 +1,8 @@\n+2017-01-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* simplify.c (simplify_transformation_to_array): Silence\n+\tarray bounds warning.  Fix whitespace.\n+\n 2017-01-04  Alexandre Oliva <aoliva@redhat.com>\n \n \t* module.c (load_omp_udrs): Initialize name."}, {"sha": "c5e7b671691da81d404d7857e0b3cf630f213084", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=e1d070a4f7128f98c1d5aa504ec44f41d0ac1a5a", "patch": "@@ -610,9 +610,18 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n \t  n++;\n \t  if (n < result->rank)\n \t    {\n-\t      count [n]++;\n+#pragma GCC diagnostic push\n+\t      /* If the nested loop is unrolled GFC_MAX_DIMENSIONS\n+\t\t times, we'd warn for the last iteration, because the\n+\t\t array index will have already been incremented to the\n+\t\t array sizes, and we can't tell that this must make\n+\t\t the test against result->rank false, because ranks\n+\t\t must not exceed GFC_MAX_DIMENSIONS.  */\n+#pragma GCC diagnostic ignored \"-Warray-bounds\"\n+\t      count[n]++;\n \t      base += sstride[n];\n \t      dest += dstride[n];\n+#pragma GCC diagnostic pop\n \t    }\n \t  else\n \t    done = true;"}]}