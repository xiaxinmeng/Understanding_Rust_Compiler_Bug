{"sha": "2373aba2643216289611d854c14e3e93acff7feb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3M2FiYTI2NDMyMTYyODk2MTFkODU0YzE0ZTNlOTNhY2ZmN2ZlYg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "message": "JIS0201.h: New file, generated from Unicode table.\n\n \n\t* gnu/gcj/convert/JIS0201.h:  New file, generated from Unicode table.\n\t* gnu/gcj/convert/Input_JavaSrc.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Input_SJIS.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Output_EUCJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/Output_SJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/natInput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natInput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/make-trie.c:  New file: functions to make a trie.\n\t* gnu/gcj/convert/gen-from-JIS.c:  Invoke make-trie for output.\n\t* gnu/gcj/convert/Unicode_to_JIS.cc:  New generated trie table.\n\nFrom-SVN: r26503", "tree": {"sha": "93ee8cf5f7bba1ad058dca34c2012ea4d3a9a233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93ee8cf5f7bba1ad058dca34c2012ea4d3a9a233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2373aba2643216289611d854c14e3e93acff7feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2373aba2643216289611d854c14e3e93acff7feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2373aba2643216289611d854c14e3e93acff7feb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2373aba2643216289611d854c14e3e93acff7feb/comments", "author": null, "committer": null, "parents": [{"sha": "0ff6b2f10b96f79eeb088d4e77df272c60b04385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff6b2f10b96f79eeb088d4e77df272c60b04385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff6b2f10b96f79eeb088d4e77df272c60b04385"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "66be27b46353c3953b34a5c1f294c34a0a35b929", "filename": "libjava/gnu/gcj/convert/natOutput_SJIS.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2373aba2643216289611d854c14e3e93acff7feb/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_SJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2373aba2643216289611d854c14e3e93acff7feb/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_SJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatOutput_SJIS.cc?ref=2373aba2643216289611d854c14e3e93acff7feb", "patch": "@@ -0,0 +1,72 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <cni.h>\n+#include <gnu/gcj/convert/Output_SJIS.h>\n+\n+extern unsigned short Unicode_to_JIS[];\n+\n+extern int trie_lookup (unsigned short *trie, unsigned short key);\n+\n+static jint\n+convert_TO_SJIS (gnu::gcj::convert::Output_SJIS *encoder,\n+\t\t\t  jchar *ptr, jint inlength)\n+{\n+  int orig_inlength = inlength;\n+  jint outbuf_length = encoder->buf->length;\n+  for (;;)\n+    {\n+      if (encoder->count >= outbuf_length)\n+\tbreak;\n+      if (encoder->pending >= 0)\n+\t{\n+\t  elements(encoder->buf)[encoder->count++] = encoder->pending;\n+\t  encoder->pending = -1;\n+\t  continue;\n+\t}\n+      if (inlength == 0)\n+\tbreak;\n+      jchar ch = *ptr++;\n+      inlength--;\n+      unsigned short val = trie_lookup(Unicode_to_JIS, ch);\n+      if (val < 0xFF)\n+\t{\n+\t  if (val == 0xffff)\n+\t    val = '?';\n+\t}\n+      else\n+\t{\n+\t  int b1 = val >> 8;\n+\t  int b2 = val & 0xff;\n+\t  // From Lunde: \"CJKV Informatio Processing\", O'Reilly, 1999:\n+\t  int rowOffset = b1 < 95 ? 112 : 176;\n+\t  int cellOffset = (b1 & 1) != 0 ? (b2 > 95 ? 32 : 31) : 126;\n+\t  b1 = ((b1 + 1) >> 1) + rowOffset;\n+\t  b2 += cellOffset;\n+\t  val = b1;\n+\t  encoder->pending = b2;\n+\t}\n+      elements(encoder->buf)[encoder->count++] = val;\n+    }\n+  return orig_inlength - inlength;\n+}\n+\n+jint\n+gnu::gcj::convert::Output_SJIS::write (jcharArray inbuffer,\n+\t\t\t\t\t jint inpos, jint inlength)\n+{\n+  return convert_TO_SJIS(this, &elements(inbuffer)[inpos], inlength);\n+}\n+\n+jint\n+gnu::gcj::convert::Output_SJIS::write (jstring str, jint inpos,\n+\t\t\t\t\t jint inlength, jcharArray)\n+{\n+  return convert_TO_SJIS(this, _Jv_GetStringChars(str)+inpos, inlength);\n+}"}]}