{"sha": "8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmOWI0ODk4NDVhNmIwYjQ2MmM2ZDJhOGUyYTE3Y2Q0MmQ5MDAyMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-26T06:37:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-26T06:37:54Z"}, "message": "lra-constraints.c (valid_address_p): New function, split out from...\n\ngcc/\n\t* lra-constraints.c (valid_address_p): New function, split out from...\n\t(process_address): ...here.\n\nFrom-SVN: r192834", "tree": {"sha": "4631f76b691a31987ec823d1a90b14bcfe88c1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4631f76b691a31987ec823d1a90b14bcfe88c1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "f24eae362ce4728dc59d25000da34fc653f17bc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "patch": "@@ -1,3 +1,8 @@\n+2012-10-26  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* lra-constraints.c (valid_address_p): New function, split out from...\n+\t(process_address): ...here.\n+\n 2012-10-26  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* lra-constraints.c (process_address): Describe the kinds of address"}, {"sha": "13d7a3de0342b09cb159b2a917973dd17cd5faac", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf9b489845a6b0b462c6d2a8e2a17cd42d90023/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=8bf9b489845a6b0b462c6d2a8e2a17cd42d90023", "patch": "@@ -2377,6 +2377,41 @@ valid_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* Return whether address X, described by AD, is valid for mode MODE\n+   and address space AS.  */\n+\n+static bool\n+valid_address_p (struct address *ad, enum machine_mode mode, rtx x,\n+\t\t addr_space_t as)\n+{\n+  /* Some ports do not check displacements for eliminable registers,\n+     so we replace them temporarily with the elimination target.  */\n+  rtx saved_base_reg = NULL_RTX;\n+  rtx saved_index_reg = NULL_RTX;\n+  if (ad->base_reg_loc != NULL)\n+    {\n+      saved_base_reg = *ad->base_reg_loc;\n+      lra_eliminate_reg_if_possible (ad->base_reg_loc);\n+      if (ad->base_reg_loc2 != NULL)\n+\t*ad->base_reg_loc2 = *ad->base_reg_loc;\n+    }\n+  if (ad->index_reg_loc != NULL)\n+    {\n+      saved_index_reg = *ad->index_reg_loc;\n+      lra_eliminate_reg_if_possible (ad->index_reg_loc);\n+    }\n+  bool ok_p = valid_address_p (mode, x, as);\n+  if (saved_base_reg != NULL_RTX)\n+    {\n+      *ad->base_reg_loc = saved_base_reg;\n+      if (ad->base_reg_loc2 != NULL)\n+\t*ad->base_reg_loc2 = saved_base_reg;\n+    }\n+  if (saved_index_reg != NULL_RTX)\n+    *ad->index_reg_loc = saved_index_reg;\n+  return ok_p;\n+}\n+\n /* Make reload base reg + disp from address AD in space AS of memory\n    with MODE into a new pseudo.\t Return the new pseudo.\t */\n static rtx\n@@ -2518,8 +2553,7 @@ process_address (int nop, rtx *before, rtx *after)\n {\n   struct address ad;\n   enum machine_mode mode;\n-  rtx new_reg, *addr_loc, saved_index_reg, saved_base_reg;\n-  bool ok_p;\n+  rtx new_reg, *addr_loc;\n   addr_space_t as;\n   rtx op = *curr_id->operand_loc[nop];\n   const char *constraint = curr_static_id->operand[nop].constraint;\n@@ -2585,38 +2619,7 @@ process_address (int nop, rtx *before, rtx *after)\n \n      All these cases involve a displacement, so there is no point\n      revalidating when there is no displacement.  */\n-  if (ad.disp_loc == NULL)\n-    return change_p;\n-\n-  /* See whether the address is still valid.  Some ports do not check\n-     displacements for eliminable registers, so we replace them\n-     temporarily with the elimination target.  */\n-  saved_base_reg = saved_index_reg = NULL_RTX;\n-  if (ad.base_reg_loc != NULL)\n-    {\n-      saved_base_reg = *ad.base_reg_loc;\n-      lra_eliminate_reg_if_possible (ad.base_reg_loc);\n-      if (ad.base_reg_loc2 != NULL)\n-\t*ad.base_reg_loc2 = *ad.base_reg_loc;\n-    }\n-  if (ad.index_reg_loc != NULL)\n-    {\n-      saved_index_reg = *ad.index_reg_loc;\n-      lra_eliminate_reg_if_possible (ad.index_reg_loc);\n-    }\n-  /* Some ports do not check displacements for virtual registers -- so\n-     we substitute them temporarily by real registers.\t*/\n-  ok_p = valid_address_p (mode, *addr_loc, as);\n-  if (saved_base_reg != NULL_RTX)\n-    {\n-      *ad.base_reg_loc = saved_base_reg;\n-      if (ad.base_reg_loc2 != NULL)\n-\t*ad.base_reg_loc2 = saved_base_reg;\n-    }\n-  if (saved_index_reg != NULL_RTX)\n-    *ad.index_reg_loc = saved_index_reg;\n-\n-  if (ok_p)\n+  if (ad.disp_loc == NULL || valid_address_p (&ad, mode, *addr_loc, as))\n     return change_p;\n \n   /* Any index existed before LRA started, so we can assume that the"}]}