{"sha": "8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3ZWEyNmFlMzI1Zjc5NmM0ODczMDg5YWNkZmQyYjFmMWQyNTIwZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-29T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-29T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "f40af20a8fba6f5dd1f311c66727fad3ab4ffe3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40af20a8fba6f5dd1f311c66727fad3ab4ffe3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/comments", "author": null, "committer": null, "parents": [{"sha": "f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec"}], "stats": {"total": 241, "additions": 240, "deletions": 1}, "files": [{"sha": "6d9084327a2d02ea2c828b5ec46fd8bb8df7ad5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,114 @@\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* attribs.c (init_attr_rdwr_indices): Use global access_mode.\n+\t* attribs.h (struct attr_access): Same.\n+\t* builtins.c (fold_builtin_strlen): Add argument.\n+\t(compute_objsize): Declare.\n+\t(get_range): Declare.\n+\t(check_read_access): New function.\n+\t(access_ref::access_ref): Define ctor.\n+\t(warn_string_no_nul): Add arguments.  Handle -Wstrintop-overread.\n+\t(check_nul_terminated_array): Handle source strings of different\n+\tranges of sizes.\n+\t(expand_builtin_strlen): Remove warning code, call check_read_access\n+\tinstead.  Declare locals closer to their initialization.\n+\t(expand_builtin_strnlen): Same.\n+\t(maybe_warn_for_bound): New function.\n+\t(warn_for_access): Remove argument.  Handle -Wstrintop-overread.\n+\t(inform_access): Change argument type.\n+\t(get_size_range): New function.\n+\t(check_access): Remove unused arguments.  Add new arguments.  Handle\n+\t-Wstrintop-overread.  Move warning code to helpers and call them.\n+\tCall check_nul_terminated_array.\n+\t(check_memop_access): Remove unnecessary and provide additional\n+\targuments in calls.\n+\t(expand_builtin_memchr): Call check_read_access.\n+\t(expand_builtin_strcat): Remove unnecessary and provide additional\n+\targuments in calls.\n+\t(expand_builtin_strcpy): Same.\n+\t(expand_builtin_strcpy_args): Same.  Avoid testing no-warning bit.\n+\t(expand_builtin_stpcpy_1): Remove unnecessary and provide additional\n+\targuments in calls.\n+\t(expand_builtin_stpncpy): Same.\n+\t(check_strncat_sizes): Same.\n+\t(expand_builtin_strncat): Remove unnecessary and provide additional\n+\targuments in calls.  Adjust comments.\n+\t(expand_builtin_strncpy): Remove unnecessary and provide additional\n+\targuments in calls.\n+\t(expand_builtin_memcmp): Remove warning code.  Call check_access.\n+\t(expand_builtin_strcmp): Call check_access instead of\n+\tcheck_nul_terminated_array.\n+\t(expand_builtin_strncmp): Handle -Wstrintop-overread.\n+\t(expand_builtin_fork_or_exec): Call check_access instead of\n+\tcheck_nul_terminated_array.\n+\t(expand_builtin): Same.\n+\t(fold_builtin_1): Pass additional argument.\n+\t(fold_builtin_n): Same.\n+\t(fold_builtin_strpbrk): Remove calls to check_nul_terminated_array.\n+\t(expand_builtin_memory_chk): Add comments.\n+\t(maybe_emit_chk_warning): Remove unnecessary and provide additional\n+\targuments in calls.\n+\t(maybe_emit_sprintf_chk_warning): Same.  Adjust comments.\n+\t* builtins.h (warn_string_no_nul): Add arguments.\n+\t(struct access_ref): Add member and ctor argument.\n+\t(struct access_data): Add members and ctor.\n+\t(check_access): Adjust signature.\n+\t* calls.c (maybe_warn_nonstring_arg): Return an indication of\n+\twhether a warning was issued.  Issue -Wstrintop-overread instead\n+\tof -Wstringop-overflow.\n+\t(append_attrname): Adjust to naming changes.\n+\t(maybe_warn_rdwr_sizes): Same.  Remove unnecessary and provide\n+\tadditional arguments in calls.\n+\t* calls.h (maybe_warn_nonstring_arg): Return bool.\n+\t* doc/invoke.texi (-Wstringop-overread): Document new option.\n+\t* gimple-fold.c (gimple_fold_builtin_strcpy): Provide an additional\n+\targument in call.\n+\t(gimple_fold_builtin_stpcpy): Same.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Adjust to naming\n+\tchanges.\n+\t* tree.h (enum access_mode): New type.\n+\n+2020-08-28  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_call_aix): Remove test for r12.\n+\t(rs6000_sibcall_aix): Likewise.\n+\n+2020-08-28  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-tree.c (gcn_goacc_get_worker_red_decl): Add \"true\"\n+\tparameter to vec_safe_grow_cleared.\n+\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* ggc-common.c (gt_pch_save): Add argument to a call.\n+\n+2020-08-28  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\tPR target/96357\n+\t* config/aarch64/aarch64-sve.md\n+\t(cond_sub<mode>_relaxed_const): Updated and renamed from\n+\tcond_sub<mode>_any_const pattern.\n+\t(cond_sub<mode>_strict_const): New pattern.\n+\n+2020-08-28  Wei Wentao  <weiwt.fnst@cn.fujitsu.com>\n+\n+\t* doc/rtl.texi: Fix typo.\n+\n+2020-08-28  Uros Bizjak    <ubizjak@gmail.com>\n+\n+\tPR target/96744\n+\t* config/i386/i386-expand.c (split_double_mode): Also handle\n+\tE_P2HImode and E_P2QImode.\n+\t* config/i386/sse.md (MASK_DWI): New define_mode_iterator.\n+\t(mov<mode>): New expander for P2HI,P2QI.\n+\t(*mov<mode>_internal): New define_insn_and_split to split\n+\tmovement of P2QI/P2HI to 2 movqi/movhi patterns after reload.\n+\n+2020-08-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* common/config/i386/i386-common.c (ix86_handle_option): Set\n+\tAVX512DQ when AVX512VP2INTERSECT exists.\n+\n 2020-08-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65146"}, {"sha": "cb50c2bdf0d4799ed76852e351038acdd29d693b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1 +1 @@\n-20200828\n+20200829"}, {"sha": "54f661f6c887c619de5708689a88dbaa52540773", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,7 @@\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c.opt (Wstringop-overread): New option.\n+\n 2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/96545"}, {"sha": "da8ad54fe9db0b5f363cbc1685aa595488817891", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,9 @@\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/96596\n+\t* c-decl.c (match_builtin_function_types): Avoid dealing with erroneous\n+\targument type.\n+\n 2020-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* gimple-parser.c (c_parser_gimple_compound_statement): Set exact argument of a vector"}, {"sha": "c431561aab2886399a9f85a5c5ce9fe3c3ef0da8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,15 @@\n+2020-08-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94672\n+\t* trans-array.c (gfc_trans_g77_array): Check against the parm decl and\n+\tset the nonparm decl used for the is-present check to NULL if absent.\n+\n+2020-08-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96624\n+\t* simplify.c (gfc_simplify_reshape): Detect zero shape and\n+\tclear index if found.\n+\n 2020-08-27  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/95882"}, {"sha": "0191ebf8b8dda46cd50a64bcca0cf0b69efb9854", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,8 @@\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* jit-recording.c (recording::switch_::make_debug_string): Add argument\n+\tto a call.\n+\n 2020-08-22  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* libgccjit.c:"}, {"sha": "074ca6f3bff6db9cc7d76e9adc44913813fb37ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,76 @@\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-c++-common/Warray-bounds-7.c: Adjust expected warnings.\n+\t* c-c++-common/Wrestrict.c: Remove xfail.\n+\t* c-c++-common/attr-nonstring-3.c: Adjust text of expected warnings.\n+\t* c-c++-common/attr-nonstring-6.c: Suppress -Wstringop-overread\n+\tinstead of -Wstringop-overflow.\n+\t* c-c++-common/attr-nonstring-8.c: Adjust text of expected warnings.\n+\t* g++.dg/torture/Wsizeof-pointer-memaccess1.C: Also suppress\n+\t -Wstringop-overread.\n+\t* g++.dg/torture/Wsizeof-pointer-memaccess2.C: Same.\n+\t* gcc.dg/Warray-bounds-39.c: Adjust expected warnings.\n+\t* gcc.dg/Warray-bounds-40.c: Also suppress -Wstringop-overread.\n+\t* gcc.dg/Warray-bounds-58.c: Remove xfail.  Also expect\n+\t-Wstringop-overread.  Adjust text of expected warnings.\n+\t* gcc.dg/Wsizeof-pointer-memaccess1.c: Also suppress\n+\t -Wstringop-overread.\n+\t* gcc.dg/Wstringop-overflow-22.c: Adjust text of expected warnings.\n+\t* gcc.dg/Wstringop-overflow-33.c: Expect -Wstringop-overread.\n+\t* gcc.dg/Wstringop-overflow-9.c: Expect -Wstringop-overread.\n+\t* gcc.dg/attr-nonstring-2.c: Adjust text of expected warnings.\n+\t* gcc.dg/attr-nonstring-3.c: Same.\n+\t* gcc.dg/attr-nonstring-4.c: Same.\n+\t* gcc.dg/attr-nonstring.c: Expect -Wstringop-overread.\n+\t* gcc.dg/builtin-stringop-chk-5.c: Adjust comment.\n+\t* gcc.dg/builtin-stringop-chk-8.c: Enable -Wstringop-overread instead\n+\tof -Wstringop-overflow.\n+\t* gcc.dg/pr78902.c: Also expect -Wstringop-overread.\n+\t* gcc.dg/pr79214.c: Adjust text of expected warnings.\n+\t* gcc.dg/strcmpopt_10.c: Suppress valid -Wno-stringop-overread.\n+\t* gcc.dg/strlenopt-57.c: Also expect -Wstringop-overread.\n+\t* gcc.dg/torture/Wsizeof-pointer-memaccess1.c: Also suppress valid\n+\t-Wno-stringop-overread.\n+\t* gcc.dg/tree-ssa/builtins-folding-gimple-ub.c: Same.\n+\t* gcc.dg/uninit-33.c: Same.\n+\t* gcc.dg/warn-strnlen-no-nul-2.c: Adjust text of expected warning.\n+\t* gcc.dg/warn-strnlen-no-nul.c: Same.\n+\t* gcc.target/i386/strcmpopt_6.c: Suppress -Wstringop-overread.\n+\t* gcc.dg/Wstringop-overread-2.c: New test.\n+\t* gcc.dg/Wstringop-overread.c: New test.\n+\n+2020-08-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/96596\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-16.c: New test.\n+\n+2020-08-28  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94672\n+\t* gfortran.dg/optional_assumed_charlen_2.f90: New test.\n+\n+2020-08-28  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\tPR target/96357\n+\t* gcc.target/aarch64/sve/pr96357.c: New test.\n+\n+2020-08-28  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/mem-shift-canonical.c: Skip on ILP32.\n+\n+2020-08-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96624\n+\t* gfortran.dg/reshape_8.f90 : New test.\n+\n+2020-08-28  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.dg/pr96579.c: Compile only with target dfp.\n+\n+2020-08-28  Uros Bizjak    <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/double_mask_reg-1.c: New test.\n+\n 2020-08-27  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.target/hppa/shadd-2.c: Adjust times to 4."}, {"sha": "fa32bdee1057d6244270e2a6db10a505b1c0caf9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ea26ae325f796c4873089acdfd2b1f1d2520f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f7ea26ae325f796c4873089acdfd2b1f1d2520f", "patch": "@@ -1,3 +1,31 @@\n+2020-08-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (common_type): Fix partial specializations\n+\tfor a single duration type to use the common_type of the rep.\n+\t(duration::operator+, duration::operator-): Fix return types\n+\tto also use the common_type of the rep.\n+\t* testsuite/20_util/duration/requirements/reduced_period.cc:\n+\tCheck duration using a rep that has common_type specialized.\n+\n+2020-08-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92978\n+\t* include/std/numeric (__abs_integral): Replace with ...\n+\t(__detail::__absu): New function template that returns an\n+\tunsigned type, guaranteeing it can represent the most\n+\tnegative signed value.\n+\t(__detail::__gcd, __detail::__lcm): Require arguments to\n+\tbe unsigned and therefore already non-negative.\n+\t(gcd, lcm): Convert arguments to absolute value as unsigned\n+\ttype before calling __detail::__gcd or __detail::__lcm.\n+\t* include/experimental/numeric (gcd, lcm): Likewise.\n+\t* testsuite/26_numerics/gcd/gcd_neg.cc: Adjust expected\n+\terrors.\n+\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n+\t* testsuite/26_numerics/gcd/92978.cc: New test.\n+\t* testsuite/26_numerics/lcm/92978.cc: New test.\n+\t* testsuite/experimental/numeric/92978.cc: New test.\n+\n 2020-08-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/chrono (__duration_common_type): Ensure the"}]}