{"sha": "eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViMDg1ZjM0MTY2Yzc0MTFhOTU5MTNiM2ZmOWM3ZGMwYWFkMzRmMQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2016-01-27T13:03:45Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2016-01-27T13:03:45Z"}, "message": "re PR target/69245 (ICE in extract_insn, at recog.c:2286 on arm-linux-gnueabihf)\n\n2016-01-20  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/69245\n\t* config/arm/arm-c.c (arm_pragma_target_parse): Add comments.\n\tMove arm_reset_previous_fndecl and set_target_option_current_node in\n\tthe conditional part.  Call save_restore_target_globals.\n\t* config/arm/arm.c (arm_set_current_function):\n\tRefactor to better support #pragma target and attribute mix.\n\tCall save_restore_target_globals.\n\t* config/arm/arm-protos.h (save_restore_target_globals): New function.\n\nFrom-SVN: r232872", "tree": {"sha": "894ce561eca6774f5039accc83c2303245a3c273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/894ce561eca6774f5039accc83c2303245a3c273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/comments", "author": null, "committer": null, "parents": [{"sha": "4ecbadc72896ca5fa7a3cdeea84f4faafd3b0be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecbadc72896ca5fa7a3cdeea84f4faafd3b0be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ecbadc72896ca5fa7a3cdeea84f4faafd3b0be3"}], "stats": {"total": 119, "additions": 87, "deletions": 32}, "files": [{"sha": "76a2ccfc681d39d12b09231ac38d1dad725c3899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -1,3 +1,14 @@\n+2016-01-20  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/69245\n+\t* config/arm/arm-c.c (arm_pragma_target_parse): Add comments.\n+\tMove arm_reset_previous_fndecl and set_target_option_current_node in\n+\tthe conditional part.  Call save_restore_target_globals.\n+\t* config/arm/arm.c (arm_set_current_function):\n+\tRefactor to better support #pragma target and attribute mix.\n+\tCall save_restore_target_globals.\n+\t* config/arm/arm-protos.h (save_restore_target_globals): New function.\n+\n 2016-01-27  Martin Liska  <mliska@suse.cz>\n \n \t* hsa.c (hsa_summary_t::link_functions): Create IPA_REF_ADDR"}, {"sha": "195905fa25b36cd35fe9bc843c695333892106be", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -221,9 +221,6 @@ arm_pragma_target_parse (tree args, tree pop_target)\n \t}\n     }\n \n-  target_option_current_node = cur_tree;\n-  arm_reset_previous_fndecl ();\n-\n   /* Figure out the previous mode.  */\n   prev_opt  = TREE_TARGET_OPTION (prev_tree);\n   cur_opt   = TREE_TARGET_OPTION (cur_tree);\n@@ -259,6 +256,18 @@ arm_pragma_target_parse (tree args, tree pop_target)\n       arm_cpu_builtins (parse_in);\n \n       cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n+\n+      /* Make sure that target_reinit is called for next function, since\n+\t TREE_TARGET_OPTION might change with the #pragma even if there is\n+\t no target attribute attached to the function.  */\n+      arm_reset_previous_fndecl ();\n+\n+      /* If going to the default mode, we restore the initial states.\n+\t if cur_tree is a new target, states will be saved/restored on a per\n+\t function basis in arm_set_current_function.  */\n+      if (cur_tree == target_option_default_node)\n+\tsave_restore_target_globals (cur_tree);\n+\n     }\n \n   return true;"}, {"sha": "8261ed802901cd0f1551e49497db3fde1cca59ee", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -332,6 +332,7 @@ extern bool arm_autoinc_modes_ok_p (machine_mode, enum arm_auto_incmodes);\n extern void arm_emit_eabi_attribute (const char *, int, int);\n \n extern void arm_reset_previous_fndecl (void);\n+extern void save_restore_target_globals (tree);\n \n /* Defined in gcc/common/config/arm-common.c.  */\n extern const char *arm_rewrite_selected_cpu (const char *name);"}, {"sha": "d8a2745f86b3d36af3bc620429fabbae852c07d4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -3446,8 +3446,7 @@ arm_option_override (void)\n \n   /* Save the initial options in case the user does function specific\n      options.  */\n-  target_option_default_node = target_option_current_node\n-    = build_target_option_node (&global_options);\n+  target_option_default_node = build_target_option_node (&global_options);\n \n   /* Init initial mode for testing.  */\n   thumb_flipper = TARGET_THUMB;\n@@ -29750,6 +29749,25 @@ arm_is_constant_pool_ref (rtx x)\n /* Remember the last target of arm_set_current_function.  */\n static GTY(()) tree arm_previous_fndecl;\n \n+/* Restore or save the TREE_TARGET_GLOBALS from or to NEW_TREE.  */\n+\n+void\n+save_restore_target_globals (tree new_tree)\n+{\n+  /* If we have a previous state, use it.  */\n+  if (TREE_TARGET_GLOBALS (new_tree))\n+    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+  else if (new_tree == target_option_default_node)\n+    restore_target_globals (&default_target_globals);\n+  else\n+    {\n+      /* Call target_reinit and save the state for TARGET_GLOBALS.  */\n+      TREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\n+    }\n+\n+  arm_option_params_internal ();\n+}\n+\n /* Invalidate arm_previous_fndecl.  */\n void\n arm_reset_previous_fndecl (void)\n@@ -29772,38 +29790,23 @@ arm_set_current_function (tree fndecl)\n \n   tree new_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n \n-  arm_previous_fndecl = fndecl;\n+  /* If current function has no attributes but previous one did,\n+     use the default node.\"  */\n+  if (! new_tree && old_tree)\n+    new_tree = target_option_default_node;\n+\n+  /* If nothing to do return.  #pragma GCC reset or #pragma GCC pop to\n+     the default have been handled by save_restore_target_globals from\n+     arm_pragma_target_parse.  */\n   if (old_tree == new_tree)\n     return;\n \n-  if (new_tree && new_tree != target_option_default_node)\n-    {\n-      cl_target_option_restore (&global_options,\n-\t\t\t\tTREE_TARGET_OPTION (new_tree));\n-\n-      if (TREE_TARGET_GLOBALS (new_tree))\n-\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-      else\n-\tTREE_TARGET_GLOBALS (new_tree)\n-\t  = save_target_globals_default_opts ();\n-    }\n-\n-  else if (old_tree && old_tree != target_option_default_node)\n-    {\n-      new_tree = target_option_current_node;\n+  arm_previous_fndecl = fndecl;\n \n-      cl_target_option_restore (&global_options,\n-\t\t\t\tTREE_TARGET_OPTION (new_tree));\n-      if (TREE_TARGET_GLOBALS (new_tree))\n-\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-      else if (new_tree == target_option_default_node)\n-\trestore_target_globals (&default_target_globals);\n-      else\n-\tTREE_TARGET_GLOBALS (new_tree)\n-\t  = save_target_globals_default_opts ();\n-    }\n+  /* First set the target options.  */\n+  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n \n-  arm_option_params_internal ();\n+  save_restore_target_globals (new_tree);\n }\n \n /* Implement TARGET_OPTION_PRINT.  */"}, {"sha": "8559a787fa034b8ebefa5333a55e79d89cb4c6b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -1,3 +1,8 @@\n+2016-01-20  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/69245\n+\t* gcc.target/arm/pr69245.c: New test.\n+\n 2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69399"}, {"sha": "bd505187728d6cdf1fcecb45b2fb61bccca7e222", "filename": "gcc/testsuite/gcc.target/arm/pr69245.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69245.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb085f34166c7411a95913b3ff9c7dc0aad34f1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69245.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr69245.c?ref=eeb085f34166c7411a95913b3ff9c7dc0aad34f1", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/69245 */\n+/* Test that pop_options restores the vfp fpu mode.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n+\n+#pragma GCC target \"fpu=vfp\"\n+\n+#pragma GCC push_options\n+#pragma GCC target \"fpu=neon-vfpv4\"\n+int a, c, d;\n+float b;\n+static int fn1 ()\n+{\n+  return 0;\n+}\n+#pragma GCC pop_options\n+\n+void fn2 ()\n+{\n+  d = b * c + a;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\.fpu vfp\" 1 } } */"}]}