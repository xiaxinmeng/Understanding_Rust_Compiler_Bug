{"sha": "e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0ZjY0MDhkZjFlNGM1ZThjMDk3ODVkN2I0ODhjNDkyZGZiNjhiMw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2019-12-17T15:43:07Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-12-17T15:43:07Z"}, "message": "[ARM] Add support for -mpure-code in thumb-1 (v6m)\n\nThis patch extends support for -mpure-code to all thumb-1 processors,\nby removing the need for MOVT.\n\nSymbol addresses are built using upper8_15, upper0_7, lower8_15 and\nlower0_7 relocations, and constants are built using sequences of\nmovs/adds and lsls instructions.\n\nThe extension of the *thumb1_movhf pattern uses always the same size\n(6) although it can emit a shorter sequence when possible. This is\nsimilar to what *arm32_movhf already does.\n\nCASE_VECTOR_PC_RELATIVE is now false with -mpure-code, to avoid\ngenerating invalid assembly code with differences from symbols from\ntwo different sections (the difference cannot be computed by the\nassembler).\n\nTests pr45701-[12].c needed a small adjustment to avoid matching\nupper8_15 when looking for the r8 register.\n\nTest no-literal-pool.c is augmented with __fp16, so it now uses\n-mfp16-format=ieee.\n\nTest thumb1-Os-mult.c generates an inline code sequence with\n-mpure-code and computes the multiplication by using a sequence of\nadd/shift rather than using the multiply instruction, so we skip it in\npresence of -mpure-code.\n\nWith -mcpu=cortex-m0, the pure-code/no-literal-pool.c fails because\ncode like:\nstatic char *p = \"Hello World\";\nchar *\ntestchar ()\n{\n  return p + 4;\n}\n\ngenerates 2 indirections (I removed non-essential directives/code)\n          .section        .rodata\n\t  .LC0:\n\t  .ascii  \"Hello World\\000\"\n\t  .data\n\t  p:\n\t  .word   .LC0\n\t  .section        .rodata\n\t  .LC2:\n\t  .word   p\n\t  .section .text,\"0x20000006\",%progbits\n\t  testchar:\n\t  push    {r7, lr}\n\t  add     r7, sp, #0\n\t  movs    r3, #:upper8_15:#.LC2\n\t  lsls    r3, #8\n\t  adds    r3, #:upper0_7:#.LC2\n\t  lsls    r3, #8\n\t  adds    r3, #:lower8_15:#.LC2\n\t  lsls    r3, #8\n\t  adds    r3, #:lower0_7:#.LC2\n\t  ldr     r3, [r3]\n\t  ldr     r3, [r3]\n\t  adds    r3, r3, #4\n\t  movs    r0, r3\n\t  mov     sp, r7\n\t  @ sp needed\n\t  pop     {r7, pc}\n\nBy contrast, when using -mcpu=cortex-m4, the code looks like:\n        .section        .rodata\n\t.LC0:\n\t.ascii  \"Hello World\\000\"\n\t.data\n\tp:\n\t.word   .LC0\n\ttestchar:\n\tpush    {r7}\n\tadd     r7, sp, #0\n\tmovw    r3, #:lower16:p\n\tmovt    r3, #:upper16:p\n\tldr     r3, [r3]\n\tadds    r3, r3, #4\n\tmov     r0, r3\n\tmov     sp, r7\n\tpop     {r7}\n\tbx      lr\n\nI haven't found yet how to make code for cortex-m0 apply upper/lower\nrelocations to \"p\" instead of .LC2. The current code looks functional,\nbut could be improved.\n\n2019-10-18  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm-protos.h (thumb1_gen_const_int): Add new prototype.\n\t* config/arm/arm.c (arm_option_check_internal): Remove restriction\n\ton MOVT for -mpure-code.\n\t(thumb1_gen_const_int): New function.\n\t(thumb1_legitimate_address_p): Support -mpure-code.\n\t(thumb1_rtx_costs): Likewise.\n\t(thumb1_size_rtx_costs): Likewise.\n\t(arm_thumb1_mi_thunk): Likewise.\n\t* config/arm/arm.h (CASE_VECTOR_PC_RELATIVE): Likewise.\n\t* config/arm/thumb1.md (thumb1_movsi_symbol_ref): New.\n\t(*thumb1_movhf): Support -mpure-code.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/pr45701-1.c: Adjust for -mpure-code.\n\t* gcc.target/arm/pr45701-2.c: Likewise.\n\t* gcc.target/arm/pure-code/no-literal-pool.c: Add tests for\n\t__fp16.\n\t* gcc.target/arm/pure-code/pure-code.exp: Remove thumb2 and movt\n\tconditions.\n\t* gcc.target/arm/thumb1-Os-mult.c: Skip if -mpure-code is used.\n\nFrom-SVN: r279463", "tree": {"sha": "58ad218f0fd8dd5e1d77439068746807bc7e2acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58ad218f0fd8dd5e1d77439068746807bc7e2acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/comments", "author": null, "committer": null, "parents": [{"sha": "6226f5925fe40e6269b5d70d07a07bcbc83733f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6226f5925fe40e6269b5d70d07a07bcbc83733f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6226f5925fe40e6269b5d70d07a07bcbc83733f4"}], "stats": {"total": 222, "additions": 192, "deletions": 30}, "files": [{"sha": "1be2ae9607d49d4d9aac1c1c1f9395e831c67c71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -1,3 +1,18 @@\n+2019-12-17  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm-protos.h (thumb1_gen_const_int): Add new prototype.\n+\t* config/arm/arm.c (arm_option_check_internal): Remove restriction\n+\ton MOVT for -mpure-code.\n+\t(thumb1_gen_const_int): New function.\n+\t(thumb1_legitimate_address_p): Support -mpure-code.\n+\t(thumb1_rtx_costs): Likewise.\n+\t(thumb1_size_rtx_costs): Likewise.\n+\t(arm_thumb1_mi_thunk): Likewise.\n+\t* config/arm/arm.h (CASE_VECTOR_PC_RELATIVE): Likewise.\n+\t* config/arm/thumb1.md (thumb1_movsi_symbol_ref): New.\n+\t(*thumb1_movhf): Support -mpure-code.\n+\t* doc/invoke.texi (-mpure-code): Remove restriction on MOVT.\n+\n 2019-12-17  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Mention pr92772"}, {"sha": "2b61daca0cc721fc6a3100f052f1d8239e92f44e", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -71,6 +71,7 @@ extern bool arm_small_register_classes_for_mode_p (machine_mode);\n extern int const_ok_for_arm (HOST_WIDE_INT);\n extern int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n extern int const_ok_for_dimode_op (HOST_WIDE_INT, enum rtx_code);\n+extern void thumb1_gen_const_int (rtx, HOST_WIDE_INT);\n extern int arm_split_constant (RTX_CODE, machine_mode, rtx,\n \t\t\t       HOST_WIDE_INT, rtx, rtx, int);\n extern int legitimate_pic_operand_p (rtx);"}, {"sha": "44d6d5281bcfd209726bbdaeef068953303a095a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 79, "deletions": 9, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -2893,13 +2893,18 @@ arm_option_check_internal (struct gcc_options *opts)\n     {\n       const char *flag = (target_pure_code ? \"-mpure-code\" :\n \t\t\t\t\t     \"-mslow-flash-data\");\n+      bool common_unsupported_modes = arm_arch_notm || flag_pic || TARGET_NEON;\n \n-      /* We only support -mpure-code and -mslow-flash-data on M-profile targets\n-\t with MOVT.  */\n-      if (!TARGET_HAVE_MOVT || arm_arch_notm || flag_pic || TARGET_NEON)\n+      /* We only support -mslow-flash-data on M-profile targets with\n+\t MOVT.  */\n+      if (target_slow_flash_data && (!TARGET_HAVE_MOVT || common_unsupported_modes))\n \terror (\"%s only supports non-pic code on M-profile targets with the \"\n \t       \"MOVT instruction\", flag);\n \n+      /* We only support -mpure-code on M-profile targets.  */\n+      if (target_pure_code && common_unsupported_modes)\n+\terror (\"%s only supports non-pic code on M-profile targets\", flag);\n+\n       /* Cannot load addresses: -mslow-flash-data forbids literal pool and\n \t -mword-relocations forbids relocation of MOVT/MOVW.  */\n       if (target_word_relocations)\n@@ -4421,6 +4426,38 @@ const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n     }\n }\n \n+/* Emit a sequence of movs/adds/shift to produce a 32-bit constant.\n+   Avoid generating useless code when one of the bytes is zero.  */\n+void\n+thumb1_gen_const_int (rtx op0, HOST_WIDE_INT op1)\n+{\n+  bool mov_done_p = false;\n+  int i;\n+\n+  /* Emit upper 3 bytes if needed.  */\n+  for (i = 0; i < 3; i++)\n+    {\n+      int byte = (op1 >> (8 * (3 - i))) & 0xff;\n+\n+      if (byte)\n+\t{\n+\t  emit_set_insn (op0, mov_done_p\n+\t\t\t ? gen_rtx_PLUS (SImode,op0, GEN_INT (byte))\n+\t\t\t : GEN_INT (byte));\n+\t  mov_done_p = true;\n+\t}\n+\n+      if (mov_done_p)\n+\temit_set_insn (op0, gen_rtx_ASHIFT (SImode, op0, GEN_INT (8)));\n+    }\n+\n+  /* Emit lower byte if needed.  */\n+  if (!mov_done_p)\n+    emit_set_insn (op0, GEN_INT (op1 & 0xff));\n+  else if (op1 & 0xff)\n+    emit_set_insn (op0, gen_rtx_PLUS (SImode, op0, GEN_INT (op1 & 0xff)));\n+}\n+\n /* Emit a sequence of insns to handle a large constant.\n    CODE is the code of the operation required, it can be any of SET, PLUS,\n    IOR, AND, XOR, MINUS;\n@@ -8576,7 +8613,8 @@ thumb1_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n   /* This is PC relative data before arm_reorg runs.  */\n   else if (GET_MODE_SIZE (mode) >= 4 && CONSTANT_P (x)\n \t   && GET_CODE (x) == SYMBOL_REF\n-           && CONSTANT_POOL_ADDRESS_P (x) && !flag_pic)\n+\t   && CONSTANT_POOL_ADDRESS_P (x) && !flag_pic\n+\t   && !arm_disable_literal_pool)\n     return 1;\n \n   /* This is PC relative data after arm_reorg runs.  */\n@@ -8644,6 +8682,7 @@ thumb1_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n \t   && GET_MODE_SIZE (mode) == 4\n \t   && GET_CODE (x) == SYMBOL_REF\n \t   && CONSTANT_POOL_ADDRESS_P (x)\n+\t   && !arm_disable_literal_pool\n \t   && ! (flag_pic\n \t\t && symbol_mentioned_p (get_pool_constant (x))\n \t\t && ! pcrel_constant_p (get_pool_constant (x))))\n@@ -9322,7 +9361,9 @@ thumb1_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n \t    return 0;\n \t  if (thumb_shiftable_const (INTVAL (x)))\n \t    return COSTS_N_INSNS (2);\n-\t  return COSTS_N_INSNS (3);\n+\t  return arm_disable_literal_pool\n+\t    ? COSTS_N_INSNS (8)\n+\t    : COSTS_N_INSNS (3);\n \t}\n       else if ((outer == PLUS || outer == COMPARE)\n \t       && INTVAL (x) < 256 && INTVAL (x) > -256)\n@@ -9479,7 +9520,9 @@ thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n \t  /* See split \"TARGET_THUMB1 && satisfies_constraint_K\".  */\n           if (thumb_shiftable_const (INTVAL (x)))\n             return COSTS_N_INSNS (2);\n-          return COSTS_N_INSNS (3);\n+\t  return arm_disable_literal_pool\n+\t    ? COSTS_N_INSNS (8)\n+\t    : COSTS_N_INSNS (3);\n         }\n       else if ((outer == PLUS || outer == COMPARE)\n                && INTVAL (x) < 256 && INTVAL (x) > -256)\n@@ -27465,14 +27508,41 @@ arm_thumb1_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n \t  /* push r3 so we can use it as a temporary.  */\n \t  /* TODO: Omit this save if r3 is not used.  */\n \t  fputs (\"\\tpush {r3}\\n\", file);\n-\t  fputs (\"\\tldr\\tr3, \", file);\n+\n+\t  /* With -mpure-code, we cannot load the address from the\n+\t     constant pool: we build it explicitly.  */\n+\t  if (target_pure_code)\n+\t    {\n+\t      fputs (\"\\tmovs\\tr3, #:upper8_15:#\", file);\n+\t      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+\t      fputc ('\\n', file);\n+\t      fputs (\"\\tlsls r3, #8\\n\", file);\n+\t      fputs (\"\\tadds\\tr3, #:upper0_7:#\", file);\n+\t      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+\t      fputc ('\\n', file);\n+\t      fputs (\"\\tlsls r3, #8\\n\", file);\n+\t      fputs (\"\\tadds\\tr3, #:lower8_15:#\", file);\n+\t      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+\t      fputc ('\\n', file);\n+\t      fputs (\"\\tlsls r3, #8\\n\", file);\n+\t      fputs (\"\\tadds\\tr3, #:lower0_7:#\", file);\n+\t      assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+\t      fputc ('\\n', file);\n+\t    }\n+\t  else\n+\t    fputs (\"\\tldr\\tr3, \", file);\n \t}\n       else\n \t{\n \t  fputs (\"\\tldr\\tr12, \", file);\n \t}\n-      assemble_name (file, label);\n-      fputc ('\\n', file);\n+\n+      if (!target_pure_code)\n+\t{\n+\t  assemble_name (file, label);\n+\t  fputc ('\\n', file);\n+\t}\n+\n       if (flag_pic)\n \t{\n \t  /* If we are generating PIC, the ldr instruction below loads"}, {"sha": "29a66bccfd6a62d16329e2a90130869ff82ff926", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -1857,9 +1857,11 @@ enum arm_auto_incmodes\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-#define CASE_VECTOR_PC_RELATIVE (TARGET_THUMB2\t\t\t\t\\\n-\t\t\t\t || (TARGET_THUMB1\t\t\t\\\n-\t\t\t\t     && (optimize_size || flag_pic)))\n+#define CASE_VECTOR_PC_RELATIVE ((TARGET_THUMB2\t\t\t\t\\\n+\t\t\t\t  || (TARGET_THUMB1\t\t\t\\\n+\t\t\t\t      && (optimize_size || flag_pic)))\t\\\n+\t\t\t\t && (!target_pure_code))\n+\n \n #define CASE_VECTOR_SHORTEN_MODE(min, max, body)\t\t\t\\\n   (TARGET_THUMB1\t\t\t\t\t\t\t\\"}, {"sha": "3319b385cba9c5918ad18fcbc6a544a745567967", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -43,6 +43,41 @@\n \n \n \n+(define_insn \"thumb1_movsi_symbol_ref\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n+\t(match_operand:SI 1 \"general_operand\" \"\"))\n+   ]\n+  \"TARGET_THUMB1\n+   && arm_disable_literal_pool\n+   && GET_CODE (operands[1]) == SYMBOL_REF\"\n+  \"*\n+  output_asm_insn (\\\"movs\\\\t%0, #:upper8_15:%1\\\", operands);\n+  output_asm_insn (\\\"lsls\\\\t%0, #8\\\", operands);\n+  output_asm_insn (\\\"adds\\\\t%0, #:upper0_7:%1\\\", operands);\n+  output_asm_insn (\\\"lsls\\\\t%0, #8\\\", operands);\n+  output_asm_insn (\\\"adds\\\\t%0, #:lower8_15:%1\\\", operands);\n+  output_asm_insn (\\\"lsls\\\\t%0, #8\\\", operands);\n+  output_asm_insn (\\\"adds\\\\t%0, #:lower0_7:%1\\\", operands);\n+  return \\\"\\\";\n+  \"\n+  [(set_attr \"length\" \"14\")\n+   (set_attr \"conds\" \"clob\")]\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n+  \"TARGET_THUMB1\n+   && arm_disable_literal_pool\n+   && GET_CODE (operands[1]) == CONST_INT\n+   && !satisfies_constraint_I (operands[1])\"\n+  [(clobber (const_int 0))]\n+  \"\n+    thumb1_gen_const_int (operands[0], INTVAL (operands[1]));\n+    DONE;\n+  \"\n+)\n+\n (define_insn \"*thumb1_adddi3\"\n   [(set (match_operand:DI          0 \"register_operand\" \"=l\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n@@ -829,8 +864,8 @@\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n \n (define_insn \"*thumb1_movhf\"\n-  [(set (match_operand:HF     0 \"nonimmediate_operand\" \"=l,l,m,*r,*h\")\n-\t(match_operand:HF     1 \"general_operand\"      \"l,mF,l,*h,*r\"))]\n+  [(set (match_operand:HF     0 \"nonimmediate_operand\" \"=l,l,l,m,*r,*h\")\n+\t(match_operand:HF     1 \"general_operand\"      \"l, m,F,l,*h,*r\"))]\n   \"TARGET_THUMB1\n    && (\t  s_register_operand (operands[0], HFmode)\n        || s_register_operand (operands[1], HFmode))\"\n@@ -855,14 +890,34 @@\n \t  }\n \treturn \\\"ldrh\\\\t%0, %1\\\";\n       }\n-    case 2: return \\\"strh\\\\t%1, %0\\\";\n+    case 2:\n+    {\n+      int bits;\n+      int high;\n+      rtx ops[3];\n+\n+      bits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (operands[1]),\n+\t\t\t     HFmode);\n+      ops[0] = operands[0];\n+      high = (bits >> 8) & 0xff;\n+      ops[1] = GEN_INT (high);\n+      ops[2] = GEN_INT (bits & 0xff);\n+      if (high != 0)\n+\toutput_asm_insn (\\\"movs\\\\t%0, %1\\;lsls\\\\t%0, #8\\;adds\\\\t%0, %2\\\", ops);\n+      else\n+\toutput_asm_insn (\\\"movs\\\\t%0, %2\\\", ops);\n+\n+      return \\\"\\\";\n+    }\n+    case 3: return \\\"strh\\\\t%1, %0\\\";\n     default: return \\\"mov\\\\t%0, %1\\\";\n     }\n   \"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"mov_reg,load_4,store_4,mov_reg,mov_reg\")\n-   (set_attr \"pool_range\" \"*,1018,*,*,*\")\n-   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond\")])\n+  [(set_attr \"length\" \"2,2,6,2,2,2\")\n+   (set_attr \"type\" \"mov_reg,load_4,mov_reg,store_4,mov_reg,mov_reg\")\n+   (set_attr \"pool_range\" \"*,1018,*,*,*,*\")\n+   (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,nocond\")])\n+\n ;;; ??? This should have alternatives for constants.\n (define_insn \"*thumb1_movsf_insn\"\n   [(set (match_operand:SF     0 \"nonimmediate_operand\" \"=l,l,>,l, m,*r,*h\")"}, {"sha": "fe5db99d4fc25bb54c1e17f4ae4a61a165a56f8d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -18227,8 +18227,7 @@ provided for use in debugging the compiler.\n Do not allow constant data to be placed in code sections.\n Additionally, when compiling for ELF object format give all text sections the\n ELF processor-specific section attribute @code{SHF_ARM_PURECODE}.  This option\n-is only available when generating non-pic code for M-profile targets with the\n-MOVT instruction.\n+is only available when generating non-pic code for M-profile targets.\n \n @item -mcmse\n @opindex mcmse"}, {"sha": "3794eba80ee45db46892b4ee28404d335673e1c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -1,3 +1,13 @@\n+2019-12-17  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/pr45701-1.c: Adjust for -mpure-code.\n+\t* gcc.target/arm/pr45701-2.c: Likewise.\n+\t* gcc.target/arm/pure-code/no-literal-pool.c: Add tests for\n+\t__fp16.\n+\t* gcc.target/arm/pure-code/pure-code.exp: Remove thumb2 and movt\n+\tconditions.\n+\t* gcc.target/arm/thumb1-Os-mult.c: Skip if -mpure-code is used.\n+\n 2019-12-17  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* lib/target-supports.exp"}, {"sha": "15913d8d6b12af638819f7032c4832c0623ddd1f", "filename": "gcc/testsuite/gcc.target/arm/pr45701-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-1.c?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n /* { dg-options \"-mthumb -Os\" }  */\n /* { dg-final { scan-assembler \"push\\t\\{r3\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n-/* { dg-final { scan-assembler-not \"\\[^\\-\\]r8\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n+/* { dg-final { scan-assembler-not \"\\[^\\-e\\]r8\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n \n extern int hist_verify;\n extern int a1;"}, {"sha": "bb2d36e0e0ab9f5a90c935380d3666bf50f551c6", "filename": "gcc/testsuite/gcc.target/arm/pr45701-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr45701-2.c?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n /* { dg-options \"-mthumb -Os\" }  */\n /* { dg-final { scan-assembler \"push\\t\\{r3\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n-/* { dg-final { scan-assembler-not \"\\[^\\-\\]r8\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n+/* { dg-final { scan-assembler-not \"\\[^\\-e\\]r8\" { target { ! arm*-*-uclinuxfdpiceabi } } } } */\n \n extern int hist_verify;\n extern int a1;"}, {"sha": "3de162091d9d955c4db7a133b34d67a3d12a3aed", "filename": "gcc/testsuite/gcc.target/arm/pure-code/no-literal-pool.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -1,12 +1,24 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mpure-code\" } */\n+/* { dg-options \"-mpure-code -mfp16-format=ieee\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-fpic\" \"-fPIC\" } { \"\" } } */\n \n+__fp16 hf;\n float sf;\n double df;\n long long l;\n static char *p = \"Hello World\";\n \n+__fp16\n+testsfp16 (__fp16 *p)\n+{\n+  hf = 1.3;\n+  *p += hf;\n+  if (*p > 1.1234f)\n+    return 2.1234f;\n+  else\n+    return 3.1234f;\n+}\n+\n float\n testsf (float *p)\n {"}, {"sha": "b05cfd6a28cdbb9c25c1c44a8da2a02d239be776", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pure-code.exp", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -25,11 +25,8 @@ if ![info exists DEFAULT_CFLAGS] then {\n     set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n }\n \n-# The -mpure-code option is only available for M-profile targets that support\n-# the MOVT instruction.\n-if {([check_effective_target_arm_thumb2_ok]\n-     || [check_effective_target_arm_thumb1_movt_ok])\n-    && [check_effective_target_arm_cortex_m]} then {\n+# The -mpure-code option is only available for M-profile targets.\n+if {[check_effective_target_arm_cortex_m]} then {\n # Initialize `dg'.\n dg-init\n \n@@ -56,4 +53,4 @@ set LTO_TORTURE_OPTIONS ${saved-lto_torture_options}\n \n # All done.\n dg-finish\n-}\n+#}"}, {"sha": "92772d414a709b6ee76aeb38936e62c6cd2a313e", "filename": "gcc/testsuite/gcc.target/arm/thumb1-Os-mult.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24f6408df1e4c5e8c09785d7b488c492dfb68b3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-Os-mult.c?ref=e24f6408df1e4c5e8c09785d7b488c492dfb68b3", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_thumb1_ok } */\n /* { dg-options \"-Os\" } */\n+/* { dg-skip-if \"-mpure-code generates an inline multiplication code sequence\" { *-*-* } { \"-mpure-code\" } } */\n /* { dg-skip-if \"\" { ! { arm_thumb1 } } } */\n \n int"}]}