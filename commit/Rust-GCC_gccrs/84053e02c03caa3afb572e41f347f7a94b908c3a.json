{"sha": "84053e02c03caa3afb572e41f347f7a94b908c3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwNTNlMDJjMDNjYWEzYWZiNTcyZTQxZjM0N2Y3YTk0YjkwOGMzYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-25T08:59:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-25T08:59:10Z"}, "message": "re PR middle-end/60291 (slow compile times for any mode (-O0/-O1/-O2) on large .c source file (30MBs))\n\n2014-02-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/60291\n\t* emit-rtl.c (mem_attrs_htab): Remove.\n\t(mem_attrs_htab_hash): Likewise.\n\t(mem_attrs_htab_eq): Likewise.\n\t(set_mem_attrs): Always allocate new mem-attrs when something\n\tchanged.\n\t(init_emit_once): Do not allocate mem_attrs_htab.\n\nFrom-SVN: r208113", "tree": {"sha": "3865f08b7dd05cdeedbb9072627f9628d56e0850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3865f08b7dd05cdeedbb9072627f9628d56e0850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84053e02c03caa3afb572e41f347f7a94b908c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84053e02c03caa3afb572e41f347f7a94b908c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84053e02c03caa3afb572e41f347f7a94b908c3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84053e02c03caa3afb572e41f347f7a94b908c3a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4094757e4be196c5a0f059e96ad149263c60555e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4094757e4be196c5a0f059e96ad149263c60555e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4094757e4be196c5a0f059e96ad149263c60555e"}], "stats": {"total": 54, "additions": 14, "deletions": 40}, "files": [{"sha": "499fb33339bf9624f128eb340b6ee85eefef4831", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84053e02c03caa3afb572e41f347f7a94b908c3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84053e02c03caa3afb572e41f347f7a94b908c3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84053e02c03caa3afb572e41f347f7a94b908c3a", "patch": "@@ -1,3 +1,13 @@\n+2014-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60291\n+\t* emit-rtl.c (mem_attrs_htab): Remove.\n+\t(mem_attrs_htab_hash): Likewise.\n+\t(mem_attrs_htab_eq): Likewise.\n+\t(set_mem_attrs): Always allocate new mem-attrs when something\n+\tchanged.\n+\t(init_emit_once): Do not allocate mem_attrs_htab.\n+\n 2014-02-25  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/60319"}, {"sha": "4736f8d0dccdcbab1a6da41620df64243ab7e61f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84053e02c03caa3afb572e41f347f7a94b908c3a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84053e02c03caa3afb572e41f347f7a94b908c3a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=84053e02c03caa3afb572e41f347f7a94b908c3a", "patch": "@@ -126,10 +126,6 @@ rtx cc0_rtx;\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n      htab_t const_int_htab;\n \n-/* A hash table storing memory attribute structures.  */\n-static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct mem_attrs)))\n-     htab_t mem_attrs_htab;\n-\n /* A hash table storing register attribute structures.  */\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct reg_attrs)))\n      htab_t reg_attrs_htab;\n@@ -157,8 +153,6 @@ static rtx lookup_const_double (rtx);\n static hashval_t const_fixed_htab_hash (const void *);\n static int const_fixed_htab_eq (const void *, const void *);\n static rtx lookup_const_fixed (rtx);\n-static hashval_t mem_attrs_htab_hash (const void *);\n-static int mem_attrs_htab_eq (const void *, const void *);\n static hashval_t reg_attrs_htab_hash (const void *);\n static int reg_attrs_htab_eq (const void *, const void *);\n static reg_attrs *get_reg_attrs (tree, int);\n@@ -249,20 +243,6 @@ const_fixed_htab_eq (const void *x, const void *y)\n   return fixed_identical (CONST_FIXED_VALUE (a), CONST_FIXED_VALUE (b));\n }\n \n-/* Returns a hash code for X (which is a really a mem_attrs *).  */\n-\n-static hashval_t\n-mem_attrs_htab_hash (const void *x)\n-{\n-  const mem_attrs *const p = (const mem_attrs *) x;\n-\n-  return (p->alias ^ (p->align * 1000)\n-\t  ^ (p->addrspace * 4000)\n-\t  ^ ((p->offset_known_p ? p->offset : 0) * 50000)\n-\t  ^ ((p->size_known_p ? p->size : 0) * 2500000)\n-\t  ^ (size_t) iterative_hash_expr (p->expr, 0));\n-}\n-\n /* Return true if the given memory attributes are equal.  */\n \n static bool\n@@ -280,38 +260,24 @@ mem_attrs_eq_p (const struct mem_attrs *p, const struct mem_attrs *q)\n \t\t  && operand_equal_p (p->expr, q->expr, 0))));\n }\n \n-/* Returns nonzero if the value represented by X (which is really a\n-   mem_attrs *) is the same as that given by Y (which is also really a\n-   mem_attrs *).  */\n-\n-static int\n-mem_attrs_htab_eq (const void *x, const void *y)\n-{\n-  return mem_attrs_eq_p ((const mem_attrs *) x, (const mem_attrs *) y);\n-}\n-\n /* Set MEM's memory attributes so that they are the same as ATTRS.  */\n \n static void\n set_mem_attrs (rtx mem, mem_attrs *attrs)\n {\n-  void **slot;\n-\n   /* If everything is the default, we can just clear the attributes.  */\n   if (mem_attrs_eq_p (attrs, mode_mem_attrs[(int) GET_MODE (mem)]))\n     {\n       MEM_ATTRS (mem) = 0;\n       return;\n     }\n \n-  slot = htab_find_slot (mem_attrs_htab, attrs, INSERT);\n-  if (*slot == 0)\n+  if (!MEM_ATTRS (mem)\n+      || !mem_attrs_eq_p (attrs, MEM_ATTRS (mem)))\n     {\n-      *slot = ggc_alloc_mem_attrs ();\n-      memcpy (*slot, attrs, sizeof (mem_attrs));\n+      MEM_ATTRS (mem) = ggc_alloc_mem_attrs ();\n+      memcpy (MEM_ATTRS (mem), attrs, sizeof (mem_attrs));\n     }\n-\n-  MEM_ATTRS (mem) = (mem_attrs *) *slot;\n }\n \n /* Returns a hash code for X (which is a really a reg_attrs *).  */\n@@ -5665,8 +5631,6 @@ init_emit_once (void)\n   const_fixed_htab = htab_create_ggc (37, const_fixed_htab_hash,\n \t\t\t\t      const_fixed_htab_eq, NULL);\n \n-  mem_attrs_htab = htab_create_ggc (37, mem_attrs_htab_hash,\n-\t\t\t\t    mem_attrs_htab_eq, NULL);\n   reg_attrs_htab = htab_create_ggc (37, reg_attrs_htab_hash,\n \t\t\t\t    reg_attrs_htab_eq, NULL);\n "}]}