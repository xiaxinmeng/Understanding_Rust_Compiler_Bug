{"sha": "c47dcb95666ce0b48f0ff09aa99483fd12df8714", "node_id": "C_kwDOANBUbNoAKGM0N2RjYjk1NjY2Y2UwYjQ4ZjBmZjA5YWE5OTQ4M2ZkMTJkZjg3MTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T13:39:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-14T18:06:07Z"}, "message": "libstdc++: Disable unwanted code for --with-libstdcxx-zoneinfo=no\n\nThis allows most of the tzdb functionality to be disabled by\nconfiguring with --with-libstdcxx-zoneinfo=no. This might be desirable\nfor small targets that don't need the time zone support.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++20/tzdb.cc (TZDB_DISABLED): Disable all code for\n\tloading tzdb.\n\t* testsuite/std/time/tzdb/leap_seconds.cc: Require tzdb\n\teffective target.\n\t* testsuite/std/time/tzdb_list/1.cc: Likewise.", "tree": {"sha": "cdc2ff3bbed44f0ac284fefdd553b408de0961ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc2ff3bbed44f0ac284fefdd553b408de0961ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c47dcb95666ce0b48f0ff09aa99483fd12df8714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47dcb95666ce0b48f0ff09aa99483fd12df8714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47dcb95666ce0b48f0ff09aa99483fd12df8714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47dcb95666ce0b48f0ff09aa99483fd12df8714/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "559993b85744ae09d33eedb1cb062392ac482f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559993b85744ae09d33eedb1cb062392ac482f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559993b85744ae09d33eedb1cb062392ac482f94"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "a37859dffdb9846f06bd50c42869f537bfc86a20", "filename": "libstdc++-v3/src/c++20/tzdb.cc", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc?ref=c47dcb95666ce0b48f0ff09aa99483fd12df8714", "patch": "@@ -82,6 +82,14 @@ namespace __gnu_cxx\n #endif\n }\n \n+#if ! defined _GLIBCXX_ZONEINFO_DIR && ! defined _GLIBCXX_STATIC_TZDATA\n+# define TZDB_DISABLED\n+  [[noreturn]] void __throw_disabled()\n+  {\n+    std::__throw_runtime_error(\"tzdb: support for loading tzdata is disabled\");\n+  }\n+#endif\n+\n namespace std::chrono\n {\n   namespace\n@@ -105,7 +113,9 @@ namespace std::chrono\n   {\n     shared_ptr<_Node> next;\n     tzdb db;\n+#ifndef TZDB_DISABLED\n     vector<Rule> rules;\n+#endif\n \n     // The following static members are here because making them members\n     // of this type gives them access to the private members of time_zone\n@@ -175,6 +185,7 @@ namespace std::chrono\n   // assume that setting failbit will throw an exception, so individual\n   // input operations are not always checked for success.\n \n+#ifndef TZDB_DISABLED\n   namespace\n   {\n     // Used for reading a possibly-quoted string from a stream.\n@@ -582,6 +593,7 @@ namespace std::chrono\n #endif\n     };\n   } // namespace\n+#endif // TZDB_DISABLED\n \n   // Private constructor used by reload_tzdb() to create time_zone objects.\n   time_zone::time_zone(unique_ptr<_Impl> __p) : _M_impl(std::move(__p)) { }\n@@ -591,6 +603,7 @@ namespace std::chrono\n   // The opaque pimpl class stored in a time_zone object.\n   struct time_zone::_Impl\n   {\n+#ifndef TZDB_DISABLED\n     explicit\n     _Impl(weak_ptr<tzdb_list::_Node> node) : node(std::move(node)) { }\n \n@@ -677,11 +690,19 @@ namespace std::chrono\n \t  }\n \t}\n       };\n-#endif\n+#endif // __GTHREADS && __cpp_lib_atomic_wait\n \n     RulesCounter<atomic_signed_lock_free> rules_counter;\n+#else // TZDB_DISABLED\n+    _Impl(weak_ptr<tzdb_list::_Node>) { }\n+    struct {\n+      sys_info info;\n+      void push_back(sys_info i) { info = std::move(i); }\n+    } infos;\n+#endif // TZDB_DISABLED\n   };\n \n+#ifndef TZDB_DISABLED\n   namespace\n   {\n     bool\n@@ -731,11 +752,13 @@ namespace std::chrono\n \tselect_std_or_dst_abbrev(info.abbrev, info.save);\n     }\n   }\n+#endif // TZDB_DISABLED\n \n   // Implementation of std::chrono::time_zone::get_info(const sys_time<D>&)\n   sys_info\n   time_zone::_M_get_sys_info(sys_seconds tp) const\n   {\n+#ifndef TZDB_DISABLED\n     // This gives us access to the node->rules vector, but also ensures\n     // that the tzdb node won't get erased while we're still using it.\n     const auto node = _M_impl->node.lock();\n@@ -934,17 +957,20 @@ namespace std::chrono\n \t// Decrement count of rule-based infos (might also release lock).\n \t_M_impl->rules_counter.decrement();\n       }\n-\n     return info;\n+#else\n+    return _M_impl->infos.info;\n+#endif // TZDB_DISABLED\n   }\n \n   // Implementation of std::chrono::time_zone::get_info(const local_time<D>&)\n   local_info\n   time_zone::_M_get_local_info(local_seconds tp) const\n   {\n+    local_info info{};\n+#ifndef TZDB_DISABLED\n     const auto node = _M_impl->node.lock();\n \n-    local_info info{};\n     // Get sys_info assuming no offset between local time and UTC:\n     info.first = _M_get_sys_info(sys_seconds(tp.time_since_epoch()));\n \n@@ -1007,9 +1033,13 @@ namespace std::chrono\n \t  }\n \t// else tp is a unique local time, info.first is the correct sys_info.\n       }\n+#else\n+    info.first = _M_impl->infos.info;\n+#endif // TZDB_DISABLED\n     return info;\n   }\n \n+#ifndef TZDB_DISABLED\n   namespace\n   {\n     // If a zoneinfo directory is defined (either when the library was built,\n@@ -1088,14 +1118,13 @@ namespace std::chrono\n       bool using_static_data() const { return this->rdbuf() == &sb; }\n     };\n   }\n+#endif // TZDB_DISABLED\n \n   // Return leap_second values, and a bool indicating whether the values are\n   // current (true), or potentially out of date (false).\n   pair<vector<leap_second>, bool>\n   tzdb_list::_Node::_S_read_leap_seconds()\n   {\n-    const string filename = zoneinfo_file(leaps_file);\n-\n     // This list is valid until at least 2023-06-28 00:00:00 UTC.\n     auto expires = sys_days{2023y/6/28};\n     vector<leap_second> leaps\n@@ -1137,10 +1166,10 @@ namespace std::chrono\n       return {std::move(leaps), true};\n #endif\n \n-    auto exp_year = year_month_day(expires).year();\n-\n-    if (ifstream ls{filename})\n+#ifndef TZDB_DISABLED\n+    if (ifstream ls{zoneinfo_file(leaps_file)})\n       {\n+\tauto exp_year = year_month_day(expires).year();\n \tstd::string s, w;\n \ts.reserve(80); // Avoid later reallocations.\n \twhile (std::getline(ls, s))\n@@ -1183,10 +1212,11 @@ namespace std::chrono\n \t  }\n \treturn {std::move(leaps), true};\n       }\n-    else\n-      return {std::move(leaps), false};\n+#endif\n+    return {std::move(leaps), false};\n   }\n \n+#ifndef TZDB_DISABLED\n   namespace\n   {\n     // Read the version number from a tzdata.zi file.\n@@ -1213,12 +1243,17 @@ namespace std::chrono\n       __throw_runtime_error(\"tzdb: no version found in tzdata.zi\");\n     }\n   }\n+#endif\n \n   // Definition of std::chrono::remote_version()\n   string remote_version()\n   {\n+#ifndef TZDB_DISABLED\n     tzdata_stream zif;\n     return remote_version(zif);\n+#else\n+    __throw_disabled();\n+#endif\n   }\n \n   // Used by chrono::reload_tzdb() to add a new node to the front of the list.\n@@ -1255,11 +1290,13 @@ namespace std::chrono\n   const tzdb&\n   tzdb_list::_Node::_S_init_tzdb()\n   {\n+#ifndef TZDB_DISABLED\n     __try\n       {\n \treturn reload_tzdb();\n       }\n     __catch (const std::exception&)\n+#endif\n       {\n \tauto [leaps, ok] = _S_read_leap_seconds();\n \n@@ -1349,6 +1386,7 @@ namespace std::chrono\n   const tzdb&\n   reload_tzdb()\n   {\n+#ifndef TZDB_DISABLED\n     using Node = tzdb_list::_Node;\n \n     tzdata_stream zif;\n@@ -1458,6 +1496,9 @@ namespace std::chrono\n     shared_ptr<Node> head;\n #endif\n     return Node::_S_replace_head(std::move(head), std::move(node));\n+#else\n+    __throw_disabled();\n+#endif // TZDB_DISABLED\n   }\n \n   // Any call to tzdb_list::front() or tzdb_list::begin() must follow\n@@ -1641,6 +1682,7 @@ namespace std::chrono\n     return get_tzdb_list().begin()->current_zone();\n   }\n \n+#ifndef TZDB_DISABLED\n   namespace\n   {\n     istream& operator>>(istream& in, abbrev_month& am)\n@@ -1933,5 +1975,5 @@ namespace std::chrono\n       return in;\n     }\n   } // namespace\n-\n+#endif // TZDB_DISABLED\n } // namespace std::chrono"}, {"sha": "d27038225c8f53cf6b9d4d033f1eedbed4455080", "filename": "libstdc++-v3/testsuite/std/time/tzdb/leap_seconds.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2Fleap_seconds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2Fleap_seconds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2Fleap_seconds.cc?ref=c47dcb95666ce0b48f0ff09aa99483fd12df8714", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++20\" }\n // { dg-do run { target c++20 } }\n+// { dg-require-effective-target tzdb }\n // { dg-require-effective-target cxx11_abi }\n // { dg-xfail-run-if \"no weak override on AIX\" { powerpc-ibm-aix* } }\n "}, {"sha": "2b121ff219d22278b58d9d63d7e9f28639fe2e40", "filename": "libstdc++-v3/testsuite/std/time/tzdb_list/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb_list%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c47dcb95666ce0b48f0ff09aa99483fd12df8714/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb_list%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb_list%2F1.cc?ref=c47dcb95666ce0b48f0ff09aa99483fd12df8714", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++20\" }\n // { dg-do run { target c++20 } }\n+// { dg-require-effective-target tzdb }\n // { dg-require-effective-target cxx11_abi }\n // { dg-xfail-run-if \"no weak override on AIX\" { powerpc-ibm-aix* } }\n "}]}