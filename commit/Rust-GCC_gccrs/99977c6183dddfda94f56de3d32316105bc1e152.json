{"sha": "99977c6183dddfda94f56de3d32316105bc1e152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5NzdjNjE4M2RkZGZkYTk0ZjU2ZGUzZDMyMzE2MTA1YmMxZTE1Mg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T05:11:00Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T05:11:00Z"}, "message": "(TARGET_SHARED_LIBS): Define as 1.\n\n(FUNCTION_ARG): If this is a call through a function pointer, then\nthe caller passes all arguments in general registers.\n\n(FUNCTION_ARG_REGNO_P): Account for registers which may\nbe unavailable on particular cpu models.  Fix indentation.\n\nFrom-SVN: r4517", "tree": {"sha": "07c0734c2649bec395f7043bea8153dbf598262f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c0734c2649bec395f7043bea8153dbf598262f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99977c6183dddfda94f56de3d32316105bc1e152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99977c6183dddfda94f56de3d32316105bc1e152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99977c6183dddfda94f56de3d32316105bc1e152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99977c6183dddfda94f56de3d32316105bc1e152/comments", "author": null, "committer": null, "parents": [{"sha": "de3ab9df04cdea6645ab3d36f61087641a993290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3ab9df04cdea6645ab3d36f61087641a993290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3ab9df04cdea6645ab3d36f61087641a993290"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "2e286dbc8819dddb370ec136d9b6fd8e779aa1e8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99977c6183dddfda94f56de3d32316105bc1e152/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99977c6183dddfda94f56de3d32316105bc1e152/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=99977c6183dddfda94f56de3d32316105bc1e152", "patch": "@@ -57,7 +57,7 @@ extern int target_flags;\n /* Generate code that will link against HPUX 8.0 shared libraries.\n    Older linkers and assemblers might not support this. */\n \n-#define TARGET_SHARED_LIBS (target_flags & 8)\n+#define TARGET_SHARED_LIBS 1 /* was (target_flags & 8) */\n \n /* Force all function calls to indirect addressing via a register.  This\n    avoids lossage when the function is very far away from the current PC.\n@@ -720,9 +720,10 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n \n /* 1 if N is a possible register number for function argument passing.  */\n \n-#define FUNCTION_ARG_REGNO_P(N) (((N) >= 23 && (N) <= 26) || \\\n-\t\t\t\t ((N) >= 32 && (N) <= 35) || \\\n-\t\t\t\t ((N) >= 44 && (N) <= 51))\n+#define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\\\n+  (((N) >= 23 && (N) <= 26) \t\t\t\t\\\n+   || ((N) >= 32 && (N) <= 35 && ! TARGET_SNAKE)\t\\\n+   || ((N) >= 44 && (N) <= 51 && TARGET_SNAKE))\n \f\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n@@ -774,19 +775,26 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n    and the rest are pushed.  But any arg that won't entirely fit in regs\n    is pushed.\n \n-   Arguments passed in registers are either 1 or 2 words long. */\n+   Arguments passed in registers are either 1 or 2 words long.\n+\n+   The caller must make a distinction between calls to explicitly named\n+   functions and calls through pointers to functions -- the conventions\n+   are different!  Calls through pointers to functions only use general\n+   registers for the first four argument words.  */\n \n #define FUNCTION_ARG_PADDING(MODE, TYPE) function_arg_padding ((MODE), (TYPE))\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t      \t\t\\\n   (4 >= ((CUM) + FUNCTION_ARG_SIZE ((MODE), (TYPE)))\t\t\t\\\n    ? gen_rtx (REG, (MODE),\t\t\t\t\t\t\\\n \t      (FUNCTION_ARG_SIZE ((MODE), (TYPE)) > 1\t\t\t\\\n-\t       ? ((MODE) == DFmode\t\t\t\t\t\\\n+\t       ? ((! (TARGET_SHARED_LIBS && current_call_is_indirect)\t\\\n+\t\t   && (MODE) == DFmode)\t\t\t\t\t\\\n \t\t  ? ((CUM) ? (TARGET_SNAKE ? 50 : 35)\t\t\t\\\n \t\t     : (TARGET_SNAKE ? 46 : 33))\t\t\t\\\n \t\t  : ((CUM) ? 23 : 25))\t\t\t\t\t\\\n-\t       : ((MODE) == SFmode\t\t\t\t\t\\\n+\t       : ((! (TARGET_SHARED_LIBS && current_call_is_indirect)\t\\\n+\t\t   && (MODE) == SFmode)\t\t\t\t\t\\\n \t\t  ? (TARGET_SNAKE ? 44 + 2 * (CUM) : 32  + (CUM))\t\\\n \t\t  : (27 - (CUM) - FUNCTION_ARG_SIZE ((MODE), (TYPE))))))\\\n    : 0)"}]}