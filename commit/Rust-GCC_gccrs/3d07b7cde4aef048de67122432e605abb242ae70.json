{"sha": "3d07b7cde4aef048de67122432e605abb242ae70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwN2I3Y2RlNGFlZjA0OGRlNjcxMjI0MzJlNjA1YWJiMjQyYWU3MA==", "commit": {"author": {"name": "Le-Chun Wu", "email": "lcwu@google.com", "date": "2010-07-23T22:20:45Z"}, "committer": {"name": "Le-Chun Wu", "email": "lcwu@gcc.gnu.org", "date": "2010-07-23T22:20:45Z"}, "message": "Fix violations of self-assignment check in GCC source.\n\nFrom-SVN: r162492", "tree": {"sha": "2200f086b87ec4327e90dbe8235ec8840de254cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2200f086b87ec4327e90dbe8235ec8840de254cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d07b7cde4aef048de67122432e605abb242ae70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d07b7cde4aef048de67122432e605abb242ae70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d07b7cde4aef048de67122432e605abb242ae70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d07b7cde4aef048de67122432e605abb242ae70/comments", "author": null, "committer": null, "parents": [{"sha": "df161b697cfa29a387deeea64c57e3d8512edbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df161b697cfa29a387deeea64c57e3d8512edbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df161b697cfa29a387deeea64c57e3d8512edbe3"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "3b9aa266bb2c6321bcabe58621605fb702cb0d0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d07b7cde4aef048de67122432e605abb242ae70", "patch": "@@ -1,3 +1,13 @@\n+2010-07-23  Le-Chun Wu  <lcwu@google.com>\n+\n+\t* omega.c (omega_eliminate_redundant): Remove a self-assign statement.\n+\t* tree-ssa-ccp.c (ccp_lattice_meet): Remove a self-assign statement\n+\tand an unnecessary assignment.\n+\t* dbxout.c (DEBUGGER_ARG_OFFSET): Change OFFSET to OFFSET+0 to avoid\n+\tself-assign warning.\n+\t* config/i386/i386.c (ix86_vectorize_builtin_vec_perm): Remove\n+\tunnecessary self-init.\n+\n 2010-07-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43071"}, {"sha": "dbb89497321d5e3c3afa3d5783dc071831147b07", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3d07b7cde4aef048de67122432e605abb242ae70", "patch": "@@ -30012,7 +30012,7 @@ ix86_vectorize_builtin_vec_perm (tree vec_type, tree *mask_type)\n   tree itype = TREE_TYPE (vec_type);\n   bool u = TYPE_UNSIGNED (itype);\n   enum machine_mode vmode = TYPE_MODE (vec_type);\n-  enum ix86_builtins fcode = fcode; /* Silence bogus warning.  */\n+  enum ix86_builtins fcode;\n   bool ok = TARGET_SSE2;\n \n   switch (vmode)"}, {"sha": "2de3fcbda3693a6d909785fa6f3f677ad6509310", "filename": "gcc/dbxout.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=3d07b7cde4aef048de67122432e605abb242ae70", "patch": "@@ -289,9 +289,12 @@ static const char *base_input_file;\n #endif\n \n /* A C expression for the integer offset value of an argument (N_PSYM)\n-   having address X (an RTX).  The nominal offset is OFFSET.  */\n+   having address X (an RTX).  The nominal offset is OFFSET.\n+   Note that we use OFFSET + 0 here to avoid the self-assign warning\n+   when the macro is called in a context like\n+   number = DEBUGGER_ARG_OFFSET(number, X)  */\n #ifndef DEBUGGER_ARG_OFFSET\n-#define DEBUGGER_ARG_OFFSET(OFFSET, X) (OFFSET)\n+#define DEBUGGER_ARG_OFFSET(OFFSET, X) (OFFSET + 0)\n #endif\n \n /* This obstack holds the stab string currently being constructed.  We"}, {"sha": "fff3a299c0dbc26ebc994ac9f7bb1a936c921e54", "filename": "gcc/omega.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=3d07b7cde4aef048de67122432e605abb242ae70", "patch": "@@ -2213,7 +2213,6 @@ omega_eliminate_redundant (omega_pb pb, bool expensive)\n \t\t\t  || pb->geqs[e3].color == omega_red)\n \t\t\tgoto nextE3;\n \n-\t\t      alpha3 = alpha3;\n \t\t      /* verify alpha1*v1+alpha2*v2 = alpha3*v3 */\n \t\t      for (k = pb->num_vars; k >= 1; k--)\n \t\t\tif (alpha3 * pb->geqs[e3].coef[k]"}, {"sha": "27e09396860edf5bf43797f184f9750227cc9aed", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d07b7cde4aef048de67122432e605abb242ae70/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3d07b7cde4aef048de67122432e605abb242ae70", "patch": "@@ -730,9 +730,8 @@ ccp_lattice_meet (prop_value_t *val1, prop_value_t *val2)\n \t Ci M Cj = VARYING\tif (i != j)\n \n          If these two values come from memory stores, make sure that\n-\t they come from the same memory reference.  */\n-      val1->lattice_val = CONSTANT;\n-      val1->value = val1->value;\n+\t they come from the same memory reference.\n+         Nothing to do.  VAL1 already contains the value we want.  */\n     }\n   else\n     {"}]}