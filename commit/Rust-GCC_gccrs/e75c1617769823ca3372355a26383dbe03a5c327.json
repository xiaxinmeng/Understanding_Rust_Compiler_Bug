{"sha": "e75c1617769823ca3372355a26383dbe03a5c327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1YzE2MTc3Njk4MjNjYTMzNzIzNTVhMjYzODNkYmUwM2E1YzMyNw==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2014-04-07T15:07:33Z"}, "committer": {"name": "Yvan Roux", "email": "yroux@gcc.gnu.org", "date": "2014-04-07T15:07:33Z"}, "message": "re PR target/60609 (Error: value of 256 too large for field of 1 bytes at 68242)\n\n2014-04-07  Charles Baylis  <charles.baylis@linaro.org>\n\n        PR target/60609\n        * config/arm/arm.h (ASM_OUTPUT_CASE_END): Remove.\n        (LABEL_ALIGN_AFTER_BARRIER): Align barriers which occur after\n        ADDR_DIFF_VEC.\n\n\n2014-04-07  Charles Baylis  <charles.baylis@linaro.org>\n\n        PR target/60609\n        * g++.dg/torture/pr60609.C: New test.\n\nFrom-SVN: r209191", "tree": {"sha": "8e73afe6be7d2939b82adb5b15fa84f448ab17a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e73afe6be7d2939b82adb5b15fa84f448ab17a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75c1617769823ca3372355a26383dbe03a5c327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75c1617769823ca3372355a26383dbe03a5c327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75c1617769823ca3372355a26383dbe03a5c327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75c1617769823ca3372355a26383dbe03a5c327/comments", "author": null, "committer": null, "parents": [{"sha": "d6adff07f12460e7c6de668c40d0fafabe737051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6adff07f12460e7c6de668c40d0fafabe737051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6adff07f12460e7c6de668c40d0fafabe737051"}], "stats": {"total": 275, "additions": 267, "deletions": 8}, "files": [{"sha": "12fc17fdc20d08670600c954fa5a65d20e99dafd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e75c1617769823ca3372355a26383dbe03a5c327", "patch": "@@ -1,3 +1,10 @@\n+2014-04-07  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/60609\n+\t* config/arm/arm.h (ASM_OUTPUT_CASE_END): Remove.\n+\t(LABEL_ALIGN_AFTER_BARRIER): Align barriers which occur after\n+\tADDR_DIFF_VEC.\n+\n 2014-04-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60766"}, {"sha": "a4bbd12c2a0375a3c77c0ecd27f3033315b4ade0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e75c1617769823ca3372355a26383dbe03a5c327", "patch": "@@ -2194,14 +2194,9 @@ extern int making_const_table;\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) /* Empty.  */\n \n-/* Make sure subsequent insns are aligned after a TBB.  */\n-#define ASM_OUTPUT_CASE_END(FILE, NUM, JUMPTABLE)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (GET_MODE (PATTERN (JUMPTABLE)) == QImode)\t\\\n-\tASM_OUTPUT_ALIGN (FILE, 1);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n+#define LABEL_ALIGN_AFTER_BARRIER(LABEL)                \\\n+   (GET_CODE (PATTERN (prev_active_insn (LABEL))) == ADDR_DIFF_VEC \\\n+   ? 1 : 0)\n \n #define ARM_DECLARE_FUNCTION_NAME(STREAM, NAME, DECL) \t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "cd07b283e3cb78fb5ad02bb31d3486a90b37e51a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e75c1617769823ca3372355a26383dbe03a5c327", "patch": "@@ -1,3 +1,8 @@\n+2014-04-07  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/60609\n+\t* g++.dg/torture/pr60609.C: New test.\n+\n 2014-04-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60766"}, {"sha": "9ddec0b601da24406b879baba240e2e9c6c3425f", "filename": "gcc/testsuite/g++.dg/torture/pr60609.C", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60609.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75c1617769823ca3372355a26383dbe03a5c327/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60609.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60609.C?ref=e75c1617769823ca3372355a26383dbe03a5c327", "patch": "@@ -0,0 +1,252 @@\n+/* { dg-do assemble } */\n+\n+class exception\n+{\n+};\n+class bad_alloc:exception\n+{\n+};\n+class logic_error:exception\n+{\n+};\n+class domain_error:logic_error\n+{\n+};\n+class invalid_argument:logic_error\n+{\n+};\n+class length_error:logic_error\n+{\n+};\n+class overflow_error:exception\n+{\n+};\n+typedef int mpz_t[];\n+template < class > class __gmp_expr;\n+template <> class __gmp_expr < mpz_t >\n+{\n+    ~__gmp_expr ();\n+};\n+\n+class PIP_Solution_Node;\n+class internal_exception\n+{\n+    ~internal_exception ();\n+};\n+class not_an_integer:internal_exception\n+{\n+};\n+class not_a_variable:internal_exception\n+{\n+};\n+class not_an_optimization_mode:internal_exception\n+{\n+};\n+class not_a_bounded_integer_type_width:internal_exception\n+{\n+};\n+class not_a_bounded_integer_type_representation:internal_exception\n+{\n+};\n+class not_a_bounded_integer_type_overflow:internal_exception\n+{\n+};\n+class not_a_complexity_class:internal_exception\n+{\n+};\n+class not_a_control_parameter_name:internal_exception\n+{\n+};\n+class not_a_control_parameter_value:internal_exception\n+{\n+};\n+class not_a_pip_problem_control_parameter_name:internal_exception\n+{\n+};\n+class not_a_pip_problem_control_parameter_value:internal_exception\n+{\n+};\n+class not_a_relation:internal_exception\n+{\n+};\n+class ppl_handle_mismatch:internal_exception\n+{\n+};\n+class timeout_exception\n+{\n+    ~timeout_exception ();\n+};\n+class deterministic_timeout_exception:timeout_exception\n+{\n+};\n+void __assert_fail (const char *, const char *, int, int *)\n+__attribute__ ((__noreturn__));\n+void PL_get_pointer (void *);\n+int Prolog_is_address ();\n+inline int\n+Prolog_get_address (void **p1)\n+{\n+    Prolog_is_address ()? static_cast <\n+    void >(0) : __assert_fail (\"Prolog_is_address\", \"./swi_cfli.hh\", 0, 0);\n+    PL_get_pointer (p1);\n+    return 0;\n+}\n+\n+class non_linear:internal_exception\n+{\n+};\n+class not_unsigned_integer:internal_exception\n+{\n+};\n+class not_universe_or_empty:internal_exception\n+{\n+};\n+class not_a_nil_terminated_list:internal_exception\n+{\n+};\n+class PPL_integer_out_of_range\n+{\n+    __gmp_expr < mpz_t > n;\n+};\n+void handle_exception ();\n+template < typename T > T * term_to_handle (int, const char *)\n+{\n+    if (Prolog_is_address ())\n+    {\n+        void *p;\n+        Prolog_get_address (&p);\n+        return static_cast < T * >(0);\n+    }\n+    throw;\n+}\n+\n+void\n+ppl_new_MIP_Problem_from_MIP_Problem ()\n+try\n+{\n+    term_to_handle < int >(0, \"ppl_new_MIP_Problem_from_MIP_Problem/2\");\n+}\n+\n+catch (exception &)\n+{\n+}\n+\n+int\n+ppl_PIP_Tree_Node_parametric_values ()\n+{\n+    try\n+    {\n+        PIP_Solution_Node *a = term_to_handle < PIP_Solution_Node > (0, 0);\n+\t(void)a;\n+        return 1;\n+    }\n+    catch (internal_exception &)\n+    {\n+    }\n+    catch (not_unsigned_integer &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (non_linear &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_variable &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_an_integer &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (ppl_handle_mismatch &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_an_optimization_mode &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_complexity_class &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_bounded_integer_type_width &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_bounded_integer_type_representation &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_bounded_integer_type_overflow &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_control_parameter_name &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_control_parameter_value &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_pip_problem_control_parameter_name &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_pip_problem_control_parameter_value &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_universe_or_empty &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_relation &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (not_a_nil_terminated_list &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (PPL_integer_out_of_range &)\n+    {\n+        handle_exception ();\n+    }\n+    catch (int &)\n+    {\n+    } catch (timeout_exception &)\n+    {\n+        handle_exception ();\n+    } catch (deterministic_timeout_exception &)\n+    {\n+        handle_exception ();\n+    } catch (overflow_error &)\n+    {\n+        handle_exception ();\n+    } catch (domain_error &)\n+    {\n+        handle_exception ();\n+    } catch (length_error &)\n+    {\n+        handle_exception ();\n+    } catch (invalid_argument &)\n+    {\n+        handle_exception ();\n+    } catch (logic_error &)\n+    {\n+        handle_exception ();\n+    } catch (bad_alloc &)\n+    {\n+        handle_exception ();\n+    } catch (exception &)\n+    {\n+        handle_exception ();\n+    } catch ( ...)\n+    {\n+        handle_exception ();\n+    }\n+    return 0;\n+}"}]}