{"sha": "8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5Y2I2ZTY1MmM3MDZlYzg0NmNhODM2NTFhN2ExYzY4MDY3Y2M4Zg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-09-04T19:22:24Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-09-04T19:22:24Z"}, "message": "m32r.c (m32r_function_value, [...]): New functions.\n\n\t* config/m32r/m32r.c (m32r_function_value, m32r_libcall_value,\n\tm32r_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Declare.\n\t* config/m32r/m32r.h: (FUNCTION_VALUE, LIBCALL_VALUE,\n\tFUNCTION_VALUE_REGNO_P): Remove.\n\nFrom-SVN: r163864", "tree": {"sha": "d710d9f436235f6acb4bfdad8605ec4f0af34d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d710d9f436235f6acb4bfdad8605ec4f0af34d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/comments", "author": null, "committer": null, "parents": [{"sha": "e060847174c062531afd9061761b516cb6229960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e060847174c062531afd9061761b516cb6229960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e060847174c062531afd9061761b516cb6229960"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "e3d4233a456fbdf7bf3a5c08f1644f25c957dcf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "patch": "@@ -1,3 +1,12 @@\n+2010-09-04  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/m32r/m32r.c (m32r_function_value, m32r_libcall_value,\n+\tm32r_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Declare.\n+\t* config/m32r/m32r.h: (FUNCTION_VALUE, LIBCALL_VALUE,\n+\tFUNCTION_VALUE_REGNO_P): Remove.\n+\n 2010-09-04  Jan Hubicka  <jh@suse.cz>\n \n \t* gimple-fold.c (maybe_fold_reference): Use fold_const_aggregate_ref."}, {"sha": "33e3bfb482e9393698f23f3b42d4abbdb47740de", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "patch": "@@ -82,6 +82,9 @@ static int    m32r_issue_rate (void);\n static void m32r_encode_section_info (tree, rtx, int);\n static bool m32r_in_small_data_p (const_tree);\n static bool m32r_return_in_memory (const_tree, const_tree);\n+static rtx m32r_function_value (const_tree, const_tree, bool);\n+static rtx m32r_libcall_value (enum machine_mode, const_rtx);\n+static bool m32r_function_value_regno_p (const unsigned int);\n static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n@@ -158,6 +161,14 @@ static const struct attribute_spec m32r_attribute_table[] =\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n #undef  TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY m32r_return_in_memory\n+\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE m32r_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE m32r_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P m32r_function_value_regno_p\n+\n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS m32r_setup_incoming_varargs\n #undef  TARGET_MUST_PASS_IN_STACK\n@@ -1246,6 +1257,35 @@ m32r_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   return m32r_pass_by_reference (NULL, TYPE_MODE (type), type, false);\n }\n \n+/* Worker function for TARGET_FUNCTION_VALUE.  */\n+\n+static rtx\n+m32r_function_value (const_tree valtype,\n+\t\tconst_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\tbool outgoing ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (TYPE_MODE (valtype), 0);\n+}\n+\n+/* Worker function for TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+m32r_libcall_value (enum machine_mode mode,\n+\t\tconst_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, 0);\n+}\n+\n+/* Worker function for TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+  ??? What about r1 in DI/DF values.  */\n+\n+static bool\n+m32r_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == 0);\n+}\n+\n /* Do any needed setup for a variadic function.  For the M32R, we must\n    create a register parameter block, and then copy any anonymous arguments\n    in registers to memory."}, {"sha": "2ea0d31a842552d6569c3fd7f15b78fb3521164b", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9cb6e652c706ec846ca83651a7a1c68067cc8f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=8c9cb6e652c706ec846ca83651a7a1c68067cc8f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, Renesas M32R cpu.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -855,21 +855,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Function results.  */\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.  */\n-#define FUNCTION_VALUE(VALTYPE, FUNC) gen_rtx_REG (TYPE_MODE (VALTYPE), 0)\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, 0)\n-\n-/* 1 if N is a possible register number for a function value\n-   as seen by the caller.  */\n-/* ??? What about r1 in DI/DF values.  */\n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n-\n /* Tell GCC to use TARGET_RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \f"}]}