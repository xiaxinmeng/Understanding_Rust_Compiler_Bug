{"sha": "0bcd172e9d3dd38b4dff32f089e943da293682ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjZDE3MmU5ZDNkZDM4YjRkZmYzMmYwODllOTQzZGEyOTM2ODJmZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-02T01:33:39Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-02T01:33:39Z"}, "message": "rs6000: Improve fusion assembler output\n\nThis improves the output for load and store fusion a little.  In most\ncases it removes the comment output, because that makes the generated\nassembler code hard to read, and equivalent info is available with -dp\nanyway.  For the vector loads it puts the comment on the second insn,\nwhere it doesn't interfere with other debug comments.\n\n\n\t* config/rs6000/rs6000-protos.h (emit_fusion_addis): Remove last two\n\tparameters from prototype.\n\t* config/rs6000/rs6000.c (emit_fusion_addis): Remove last two\n\tparameters.  Don't print a comment.\n\t(emit_fusion_gpr_load): Adjust.\n\t(emit_fusion_load_store): Adjust.\n\t* config/rs6000/rs6000.md (*fusion_p9_<mode>_constant): Adjust.\n\t* config/rs6000/vsx.md (two peepholes): Print the \"vector load fusion\"\n\tcomment on the second line.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/fusion.c: Add -dp to options.  Adjust the expected\n\toutput.\n\t* gcc.target/powerpc/fusion3.c: Ditto.\n\t* gcc.target/powerpc/fusion4.c: Ditto.\n\nFrom-SVN: r255350", "tree": {"sha": "45474a5213e717176c18e4a93349931c0c926a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45474a5213e717176c18e4a93349931c0c926a86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bcd172e9d3dd38b4dff32f089e943da293682ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcd172e9d3dd38b4dff32f089e943da293682ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcd172e9d3dd38b4dff32f089e943da293682ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcd172e9d3dd38b4dff32f089e943da293682ff/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81094bcb458cd005474156b5e0bc0c7c72387bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81094bcb458cd005474156b5e0bc0c7c72387bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81094bcb458cd005474156b5e0bc0c7c72387bbc"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "3795d2c23bcd37c09e94f1b08e5130fcfe395410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -1,3 +1,15 @@\n+2017-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000-protos.h (emit_fusion_addis): Remove last two\n+\tparameters from prototype.\n+\t* config/rs6000/rs6000.c (emit_fusion_addis): Remove last two\n+\tparameters.  Don't print a comment.\n+\t(emit_fusion_gpr_load): Adjust.\n+\t(emit_fusion_load_store): Adjust.\n+\t* config/rs6000/rs6000.md (*fusion_p9_<mode>_constant): Adjust.\n+\t* config/rs6000/vsx.md (two peepholes): Print the \"vector load fusion\"\n+\tcomment on the second line.\n+\n 2017-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/43871"}, {"sha": "9264aa2fd26d647b9c76eacd44ce2b4ba1608bf3", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -96,7 +96,7 @@ extern bool quad_address_p (rtx, machine_mode, bool);\n extern bool quad_load_store_p (rtx, rtx);\n extern bool fusion_gpr_load_p (rtx, rtx, rtx, rtx);\n extern void expand_fusion_gpr_load (rtx *);\n-extern void emit_fusion_addis (rtx, rtx, const char *, const char *);\n+extern void emit_fusion_addis (rtx, rtx);\n extern void emit_fusion_load_store (rtx, rtx, rtx, const char *);\n extern const char *emit_fusion_gpr_load (rtx, rtx);\n extern bool fusion_p9_p (rtx, rtx, rtx, rtx);"}, {"sha": "ed668d05eea6a2ba2688a4aa20058dd516963125", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -38630,16 +38630,10 @@ expand_fusion_gpr_load (rtx *operands)\n    sequence.  */\n \n void\n-emit_fusion_addis (rtx target, rtx addis_value, const char *comment,\n-\t\t   const char *mode_name)\n+emit_fusion_addis (rtx target, rtx addis_value)\n {\n   rtx fuse_ops[10];\n-  char insn_template[80];\n   const char *addis_str = NULL;\n-  const char *comment_str = ASM_COMMENT_START;\n-\n-  if (*comment_str == ' ')\n-    comment_str++;\n \n   /* Emit the addis instruction.  */\n   fuse_ops[0] = target;\n@@ -38719,9 +38713,7 @@ emit_fusion_addis (rtx target, rtx addis_value, const char *comment,\n   if (!addis_str)\n     fatal_insn (\"Could not generate addis value for fusion\", addis_value);\n \n-  sprintf (insn_template, \"%s\\t\\t%s %s, type %s\", addis_str, comment_str,\n-\t   comment, mode_name);\n-  output_asm_insn (insn_template, fuse_ops);\n+  output_asm_insn (addis_str, fuse_ops);\n }\n \n /* Emit a D-form load or store instruction that is the second instruction\n@@ -38854,7 +38846,6 @@ emit_fusion_gpr_load (rtx target, rtx mem)\n   rtx addr;\n   rtx load_offset;\n   const char *load_str = NULL;\n-  const char *mode_name = NULL;\n   machine_mode mode;\n \n   if (GET_CODE (mem) == ZERO_EXTEND)\n@@ -38870,25 +38861,21 @@ emit_fusion_gpr_load (rtx target, rtx mem)\n   switch (mode)\n     {\n     case E_QImode:\n-      mode_name = \"char\";\n       load_str = \"lbz\";\n       break;\n \n     case E_HImode:\n-      mode_name = \"short\";\n       load_str = \"lhz\";\n       break;\n \n     case E_SImode:\n     case E_SFmode:\n-      mode_name = (mode == SFmode) ? \"float\" : \"int\";\n       load_str = \"lwz\";\n       break;\n \n     case E_DImode:\n     case E_DFmode:\n       gcc_assert (TARGET_POWERPC64);\n-      mode_name = (mode == DFmode) ? \"double\" : \"long\";\n       load_str = \"ld\";\n       break;\n \n@@ -38897,7 +38884,7 @@ emit_fusion_gpr_load (rtx target, rtx mem)\n     }\n \n   /* Emit the addis instruction.  */\n-  emit_fusion_addis (target, addis_value, \"gpr load fusion\", mode_name);\n+  emit_fusion_addis (target, addis_value);\n \n   /* Emit the D-form load instruction.  */\n   emit_fusion_load_store (target, target, load_offset, load_str);\n@@ -39166,7 +39153,7 @@ emit_fusion_p9_load (rtx reg, rtx mem, rtx tmp_reg)\n   fusion_split_address (addr, &hi, &lo);\n \n   /* Emit the addis instruction.  */\n-  emit_fusion_addis (tmp_reg, hi, \"power9 load fusion\", GET_MODE_NAME (mode));\n+  emit_fusion_addis (tmp_reg, hi);\n \n   /* Emit the D-form load instruction.  */\n   emit_fusion_load_store (reg, tmp_reg, lo, load_string);\n@@ -39253,7 +39240,7 @@ emit_fusion_p9_store (rtx mem, rtx reg, rtx tmp_reg)\n   fusion_split_address (addr, &hi, &lo);\n \n   /* Emit the addis instruction.  */\n-  emit_fusion_addis (tmp_reg, hi, \"power9 store fusion\", GET_MODE_NAME (mode));\n+  emit_fusion_addis (tmp_reg, hi);\n \n   /* Emit the D-form load instruction.  */\n   emit_fusion_load_store (reg, tmp_reg, lo, store_string);"}, {"sha": "56be70373e40441c58744f330494234bb1bd05bd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -14110,7 +14110,7 @@\n \t\t    UNSPEC_FUSION_P9))]\t\n   \"TARGET_P9_FUSION\"\n {\n-  emit_fusion_addis (operands[0], operands[1], \"constant\", \"<MODE>\");\n+  emit_fusion_addis (operands[0], operands[1]);\n   return \"ori %0,%0,%2\";\n }\n   [(set_attr \"type\" \"two\")"}, {"sha": "f6f2bd483635975fe88a35ac20f31e822e98a9c3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -4160,7 +4160,7 @@\n \t(mem:VSX_M (plus:P (match_dup 0)\n \t\t\t   (match_operand:P 3 \"int_reg_operand\" \"\"))))]\n   \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n-  \"li %0,%1\\t\\t\\t# vector load fusion\\;lx<VSX_M:VSm>x %x2,%0,%3\"  \n+  \"li %0,%1\\;lx<VSX_M:VSm>x %x2,%0,%3\\t\\t\\t# vector load fusion\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])\n \n@@ -4171,7 +4171,7 @@\n \t(mem:VSX_M (plus:P (match_operand:P 3 \"int_reg_operand\" \"\")\n \t\t\t   (match_dup 0))))]\n   \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n-  \"li %0,%1\\t\\t\\t# vector load fusion\\;lx<VSX_M:VSm>x %x2,%0,%3\"  \n+  \"li %0,%1\\;lx<VSX_M:VSm>x %x2,%0,%3\\t\\t\\t# vector load fusion\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])\n "}, {"sha": "8133e8af91a014a9f5dc4406463f9fe1d6226d70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -1,3 +1,10 @@\n+2017-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/fusion.c: Add -dp to options.  Adjust the expected\n+\toutput.\n+\t* gcc.target/powerpc/fusion3.c: Ditto.\n+\t* gcc.target/powerpc/fusion4.c: Ditto.\n+\n 2017-12-01  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/81959"}, {"sha": "3c75be4a292dd2c66a5b3e158e2f7de6bbef6940", "filename": "gcc/testsuite/gcc.target/powerpc/fusion.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion.c?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -mtune=power8 -O3\" } */\n+/* { dg-options \"-mcpu=power7 -mtune=power8 -O3 -dp\" } */\n \n #define LARGE 0x12345\n \n@@ -13,7 +13,7 @@ int fusion_short (short *p){ return p[LARGE]; }\n int fusion_int (int *p){ return p[LARGE]; }\n unsigned fusion_uns (unsigned *p){ return p[LARGE]; }\n \n-/* { dg-final { scan-assembler-times \"gpr load fusion\"    6 } } */\n+/* { dg-final { scan-assembler-times \"fusion_gpr_load\"    6 } } */\n /* { dg-final { scan-assembler-times \"lbz\"                2 } } */\n /* { dg-final { scan-assembler-times \"extsb\"              1 } } */\n /* { dg-final { scan-assembler-times \"lhz\"                2 } } */"}, {"sha": "0d9f3182586c7809882c404f6f93fad143df45c9", "filename": "gcc/testsuite/gcc.target/powerpc/fusion3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion3.c?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -mtune=power9 -O3\" } */\n+/* { dg-options \"-mcpu=power7 -mtune=power9 -O3 -dp\" } */\n \n #define LARGE 0x12345\n \n@@ -12,7 +12,7 @@ int fusion_double_read (double *p){ return p[LARGE]; }\n void fusion_float_write (float *p, float f){ p[LARGE] = f; }\n void fusion_double_write (double *p, double d){ p[LARGE] = d; }\n \n-/* { dg-final { scan-assembler \"load fusion, type SF\"  } } */\n-/* { dg-final { scan-assembler \"load fusion, type DF\"  } } */\n-/* { dg-final { scan-assembler \"store fusion, type SF\" } } */\n-/* { dg-final { scan-assembler \"store fusion, type DF\" } } */\n+/* { dg-final { scan-assembler {fusion_vsx_[sd]i_sf_load}  } } */\n+/* { dg-final { scan-assembler {fusion_vsx_[sd]i_df_load}  } } */\n+/* { dg-final { scan-assembler {fusion_vsx_[sd]i_sf_store}  } } */\n+/* { dg-final { scan-assembler {fusion_vsx_[sd]i_df_store}  } } */"}, {"sha": "703c06cbfa4d4afd22fc763267e7fe857ebcb9b7", "filename": "gcc/testsuite/gcc.target/powerpc/fusion4.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcd172e9d3dd38b4dff32f089e943da293682ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion4.c?ref=0bcd172e9d3dd38b4dff32f089e943da293682ff", "patch": "@@ -1,13 +1,12 @@\n-/* { dg-do compile { target { powerpc*-*-* && ilp32 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-options \"-mcpu=power7 -mtune=power9 -O3 -msoft-float\" } */\n+/* { dg-options \"-mcpu=power7 -mtune=power9 -O3 -msoft-float -dp\" } */\n \n #define LARGE 0x12345\n \n float fusion_float_read (float *p){ return p[LARGE]; }\n \n void fusion_float_write (float *p, float f){ p[LARGE] = f; }\n \n-/* { dg-final { scan-assembler \"store fusion, type SF\" } } */\n+/* { dg-final { scan-assembler {fusion_gpr_[sd]i_sf_store}  } } */"}]}