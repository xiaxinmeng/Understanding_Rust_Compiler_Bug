{"sha": "4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0M2RjZGViNTdkNThhZDVlM2FhZGU0NGI5M2ZhNDhkMDUxYzc3MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-01-21T01:58:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-01-21T01:58:53Z"}, "message": "re PR c++/42338 ([c++0x] ICE on decltype usage with templates)\n\n\tPR c++/42338\n\t* mangle.c (write_expression): Handle tree codes that have extra\n\targuments in the middle-end.\n\t* cp-demangle.c (d_print_comp): Fix array index printing.\n\nFrom-SVN: r156103", "tree": {"sha": "7f36d32b649117c432fd4d50913d0ac71b47d393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f36d32b649117c432fd4d50913d0ac71b47d393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f827f65933319275c46eccf2aa1df4f1d21d6783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f827f65933319275c46eccf2aa1df4f1d21d6783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f827f65933319275c46eccf2aa1df4f1d21d6783"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "a6a3eb215d82764e722af8ede0180aa997ad16c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "patch": "@@ -1,3 +1,9 @@\n+2010-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42338\n+\t* mangle.c (write_expression): Handle tree codes that have extra\n+\targuments in the middle-end.\n+\n 2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/42038"}, {"sha": "7e4cf668e9c48ec831d1c1cbbbbc93ca2fe7f24d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "patch": "@@ -2481,7 +2481,7 @@ write_expression (tree expr)\n     }\n   else\n     {\n-      int i;\n+      int i, len;\n       const char *name;\n \n       /* When we bind a variable or function to a non-type template\n@@ -2582,7 +2582,27 @@ write_expression (tree expr)\n \t  break;\n \n \tdefault:\n-\t  for (i = 0; i < TREE_OPERAND_LENGTH (expr); ++i)\n+\t  /* In the middle-end, some expressions have more operands than\n+\t     they do in templates (and mangling).  */\n+\t  switch (code)\n+\t    {\n+\t    case PREINCREMENT_EXPR:\n+\t    case PREDECREMENT_EXPR:\n+\t    case POSTINCREMENT_EXPR:\n+\t    case POSTDECREMENT_EXPR:\n+\t      len = 1;\n+\t      break;\n+\n+\t    case ARRAY_REF:\n+\t      len = 2;\n+\t      break;\n+\n+\t    default:\n+\t      len = TREE_OPERAND_LENGTH (expr);\n+\t      break;\n+\t    }\n+\n+\t  for (i = 0; i < len; ++i)\n \t    {\n \t      tree operand = TREE_OPERAND (expr, i);\n \t      /* As a GNU extension, the middle operand of a"}, {"sha": "30a08b0c32f948983840437833986a33fea61732", "filename": "gcc/testsuite/g++.dg/abi/mangle39.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle39.C?ref=4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/42338\n+// { dg-options \"-std=c++0x\" }\n+// { dg-final { scan-assembler \"_Z1fIPiEDTcmppfp_Li0EET_\" } }\n+// { dg-final { scan-assembler \"_Z1gIiEvRK1AIT_EDTixfp_Li0EE\" } }\n+\n+template<typename T>\n+auto f(T t) -> decltype(++t, 0)\n+{\n+  ++t;\n+  return 0;\n+}\n+\n+template <class T>\n+struct A\n+{\n+  T operator[](int) const { return 0; }\n+};\n+\n+template< typename T >\n+void g(const A<T> &a, decltype(a[0]) t) { }\n+\n+int main()\n+{\n+  f((int*)0);\n+\n+  A<int> a;\n+  g(a,1);\n+}"}, {"sha": "1e2fbffdf74c11ffa46c95dfdf3a15e9c7f2a3f0", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42338\n+\t* cp-demangle.c (d_print_comp): Fix array index printing.\n+\n 2010-01-11  Tristan Gingold  <gingold@adacore.com>\n \n \t* cplus-dem.c (ada_demangle): Remove prototype."}, {"sha": "f28e1636921a2c3f7a3b46b8f2cd3a76ce3dd7a0", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d43dcdeb57d58ad5e3aade44b93fa48d051c770/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=4d43dcdeb57d58ad5e3aade44b93fa48d051c770", "patch": "@@ -4037,9 +4037,18 @@ d_print_comp (struct d_print_info *dpi,\n \td_append_char (dpi, '(');\n \n       d_print_subexpr (dpi, d_left (d_right (dc)));\n-      if (strcmp (d_left (dc)->u.s_operator.op->code, \"cl\") != 0)\n-\td_print_expr_op (dpi, d_left (dc));\n-      d_print_subexpr (dpi, d_right (d_right (dc)));\n+      if (strcmp (d_left (dc)->u.s_operator.op->code, \"ix\") == 0)\n+\t{\n+\t  d_append_char (dpi, '[');\n+\t  d_print_comp (dpi, d_right (d_right (dc)));\n+\t  d_append_char (dpi, ']');\n+\t}\n+      else\n+\t{\n+\t  if (strcmp (d_left (dc)->u.s_operator.op->code, \"cl\") != 0)\n+\t    d_print_expr_op (dpi, d_left (dc));\n+\t  d_print_subexpr (dpi, d_right (d_right (dc)));\n+\t}\n \n       if (d_left (dc)->type == DEMANGLE_COMPONENT_OPERATOR\n \t  && d_left (dc)->u.s_operator.op->len == 1"}]}