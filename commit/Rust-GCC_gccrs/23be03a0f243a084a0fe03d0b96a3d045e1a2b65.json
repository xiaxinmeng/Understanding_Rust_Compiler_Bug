{"sha": "23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiZTAzYTBmMjQzYTA4NGEwZmUwM2QwYjk2YTNkMDQ1ZTFhMmI2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-02T18:49:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-03T05:54:03Z"}, "message": "c++: dependent attribute on parameter [PR97900]\n\nWe were copying attributes from the template to the instantiation without\nconsidering that they might be dependent.  To make sure that the new parms\nhave the appropriate properties for the code pattern, let's just regenerate\nthem.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97900\n\t* pt.c (regenerate_decl_from_template): tsubst_decl\n\tthe parms.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97900\n\t* g++.dg/ext/vector40.C: New test.", "tree": {"sha": "3da73ac6f1e7c53f9cf75a1852453ffe966db3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da73ac6f1e7c53f9cf75a1852453ffe966db3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23be03a0f243a084a0fe03d0b96a3d045e1a2b65/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c1f3d66cfc171bc4e779068530101fb2f197f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c1f3d66cfc171bc4e779068530101fb2f197f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c1f3d66cfc171bc4e779068530101fb2f197f1"}], "stats": {"total": 81, "additions": 21, "deletions": 60}, "files": [{"sha": "68ee71397d0f798edc66a32900de46fff1e3824c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 60, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23be03a0f243a084a0fe03d0b96a3d045e1a2b65/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23be03a0f243a084a0fe03d0b96a3d045e1a2b65/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "patch": "@@ -25364,8 +25364,6 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      tree decl_parm;\n-      tree pattern_parm;\n       tree specs;\n       int args_depth;\n       int parms_depth;\n@@ -25389,65 +25387,18 @@ regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n \t  }\n \n       /* Merge parameter declarations.  */\n-      decl_parm = skip_artificial_parms_for (decl,\n-\t\t\t\t\t     DECL_ARGUMENTS (decl));\n-      pattern_parm\n-\t= skip_artificial_parms_for (code_pattern,\n-\t\t\t\t     DECL_ARGUMENTS (code_pattern));\n-      while (decl_parm && !DECL_PACK_P (pattern_parm))\n-\t{\n-\t  tree parm_type;\n-\t  tree attributes;\n-\n-\t  if (DECL_NAME (decl_parm) != DECL_NAME (pattern_parm))\n-\t    DECL_NAME (decl_parm) = DECL_NAME (pattern_parm);\n-\t  parm_type = tsubst (TREE_TYPE (pattern_parm), args, tf_error,\n-\t\t\t      NULL_TREE);\n-\t  parm_type = type_decays_to (parm_type);\n-\t  if (!same_type_p (TREE_TYPE (decl_parm), parm_type))\n-\t    TREE_TYPE (decl_parm) = parm_type;\n-\t  attributes = DECL_ATTRIBUTES (pattern_parm);\n-\t  if (DECL_ATTRIBUTES (decl_parm) != attributes)\n-\t    {\n-\t      DECL_ATTRIBUTES (decl_parm) = attributes;\n-\t      cplus_decl_attributes (&decl_parm, attributes, /*flags=*/0);\n-\t    }\n-\t  decl_parm = DECL_CHAIN (decl_parm);\n-\t  pattern_parm = DECL_CHAIN (pattern_parm);\n+      if (tree pattern_parm\n+\t  = skip_artificial_parms_for (code_pattern,\n+\t\t\t\t       DECL_ARGUMENTS (code_pattern)))\n+\t{\n+\t  tree *p = &DECL_ARGUMENTS (decl);\n+\t  for (int skip = num_artificial_parms_for (decl); skip; --skip)\n+\t    p = &DECL_CHAIN (*p);\n+\t  *p = tsubst_decl (pattern_parm, args, tf_error);\n+\t  for (tree t = *p; t; t = DECL_CHAIN (t))\n+\t    DECL_CONTEXT (t) = decl;\n \t}\n-      /* Merge any parameters that match with the function parameter\n-         pack.  */\n-      if (pattern_parm && DECL_PACK_P (pattern_parm))\n-        {\n-          int i, len;\n-          tree expanded_types;\n-          /* Expand the TYPE_PACK_EXPANSION that provides the types for\n-             the parameters in this function parameter pack.  */\n-          expanded_types = tsubst_pack_expansion (TREE_TYPE (pattern_parm), \n-                                                 args, tf_error, NULL_TREE);\n-          len = TREE_VEC_LENGTH (expanded_types);\n-          for (i = 0; i < len; i++)\n-            {\n-              tree parm_type;\n-              tree attributes;\n-\n-              if (DECL_NAME (decl_parm) != DECL_NAME (pattern_parm))\n-                /* Rename the parameter to include the index.  */\n-                DECL_NAME (decl_parm) = \n-                  make_ith_pack_parameter_name (DECL_NAME (pattern_parm), i);\n-              parm_type = TREE_VEC_ELT (expanded_types, i);\n-              parm_type = type_decays_to (parm_type);\n-              if (!same_type_p (TREE_TYPE (decl_parm), parm_type))\n-                TREE_TYPE (decl_parm) = parm_type;\n-              attributes = DECL_ATTRIBUTES (pattern_parm);\n-              if (DECL_ATTRIBUTES (decl_parm) != attributes)\n-                {\n-                  DECL_ATTRIBUTES (decl_parm) = attributes;\n-                  cplus_decl_attributes (&decl_parm, attributes, /*flags=*/0);\n-                }\n-              decl_parm = DECL_CHAIN (decl_parm);\n-            }\n-        }\n+\n       /* Merge additional specifiers from the CODE_PATTERN.  */\n       if (DECL_DECLARED_INLINE_P (code_pattern)\n \t  && !DECL_DECLARED_INLINE_P (decl))"}, {"sha": "885afb058a5364e0819a86896373af20d586c31e", "filename": "gcc/testsuite/g++.dg/ext/vector40.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23be03a0f243a084a0fe03d0b96a3d045e1a2b65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23be03a0f243a084a0fe03d0b96a3d045e1a2b65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector40.C?ref=23be03a0f243a084a0fe03d0b96a3d045e1a2b65", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/97900\n+\n+template<typename T>\n+T test(T __attribute__((vector_size(2 * sizeof(T)))) vec) {\n+    return vec[0] + vec[1];\n+}\n+typedef int v2si __attribute__((vector_size(2 * sizeof(int))));\n+int run(v2si vec) {\n+    return test<int>(vec);\n+}"}]}