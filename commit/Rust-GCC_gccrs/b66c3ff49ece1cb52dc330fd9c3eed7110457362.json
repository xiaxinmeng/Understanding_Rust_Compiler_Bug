{"sha": "b66c3ff49ece1cb52dc330fd9c3eed7110457362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2YzNmZjQ5ZWNlMWNiNTJkYzMzMGZkOWMzZWVkNzExMDQ1NzM2Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:39:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T14:39:18Z"}, "message": "[multiple changes]\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document that postconditions are tested on implicit\n\treturns.\n\n\t* sem_aux.adb: Minor reformatting\n\n2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* itypes.adb (Create_Null_Excluding_Itype): Apply Base_Type when\n\tsetting Etype.\n\t\n\t* par-ch3.adb (P_Access_Type_Definition): Set new attribute\n\tNull_Exclusion_In_Return_Present when an access-to-function type has a\n\tresult type with an explicit not null.\n\n\t* sem_ch3.adb (Access_Subprogram_Definition): If a null exclusion is\n\tgiven on the result type, then create a null-excluding itype for the\n\tfunction.\n\n\t* sem_ch6.adb (Analyze_Return_Type): Create a null-excluding itype in\n\tthe case where a null exclusion is imposed on a named access type.\n\t(Analyze_Subprogram_Specification): Push and pop the scope of the\n\tfunction around the call to Analyze_Return_Type in the case of no\n\tformals, for consistency with handling when formals are present\n\t(Process_Formals does this). Ensures that any itype created for the\n\treturn type will be associated with the proper scope.\n\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): If a null\n\texclusion is given on a generic function's result type, then create a\n\tnull-excluding itype for the generic function.\n\t(Instantiate_Object): Set Null_Exclusion_Present of a constant created\n\tfor an actual for a formal in object according to the setting on the\n\tformal. Ensures null exclusion checks are done when the association is\n\telaborated.\n\n\t* sinfo.ads: Add new flag Null_Exclusion_In_Return_Present on\n\tN_Access_Function_Definition.\n\n\t* sinfo.adb: Add Get_ and Set_ operations for\n\tNull_Exclusion_In_Return_Present.\n\nFrom-SVN: r145912", "tree": {"sha": "10be45611439a9dc1345244140d4d64df444b229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10be45611439a9dc1345244140d4d64df444b229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b66c3ff49ece1cb52dc330fd9c3eed7110457362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66c3ff49ece1cb52dc330fd9c3eed7110457362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66c3ff49ece1cb52dc330fd9c3eed7110457362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66c3ff49ece1cb52dc330fd9c3eed7110457362/comments", "author": null, "committer": null, "parents": [{"sha": "886b9612f2912fb6b9efb4b028371757d5df0908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886b9612f2912fb6b9efb4b028371757d5df0908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886b9612f2912fb6b9efb4b028371757d5df0908"}], "stats": {"total": 203, "additions": 173, "deletions": 30}, "files": [{"sha": "0849bdab92178b5bdda9acc19022dcca15032688", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -1,3 +1,45 @@\n+2009-04-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document that postconditions are tested on implicit\n+\treturns.\n+\n+\t* sem_aux.adb: Minor reformatting\n+\n+2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* itypes.adb (Create_Null_Excluding_Itype): Apply Base_Type when\n+\tsetting Etype.\n+\t\n+\t* par-ch3.adb (P_Access_Type_Definition): Set new attribute\n+\tNull_Exclusion_In_Return_Present when an access-to-function type has a\n+\tresult type with an explicit not null.\n+\n+\t* sem_ch3.adb (Access_Subprogram_Definition): If a null exclusion is\n+\tgiven on the result type, then create a null-excluding itype for the\n+\tfunction.\n+\n+\t* sem_ch6.adb (Analyze_Return_Type): Create a null-excluding itype in\n+\tthe case where a null exclusion is imposed on a named access type.\n+\t(Analyze_Subprogram_Specification): Push and pop the scope of the\n+\tfunction around the call to Analyze_Return_Type in the case of no\n+\tformals, for consistency with handling when formals are present\n+\t(Process_Formals does this). Ensures that any itype created for the\n+\treturn type will be associated with the proper scope.\n+\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): If a null\n+\texclusion is given on a generic function's result type, then create a\n+\tnull-excluding itype for the generic function.\n+\t(Instantiate_Object): Set Null_Exclusion_Present of a constant created\n+\tfor an actual for a formal in object according to the setting on the\n+\tformal. Ensures null exclusion checks are done when the association is\n+\telaborated.\n+\n+\t* sinfo.ads: Add new flag Null_Exclusion_In_Return_Present on\n+\tN_Access_Function_Definition.\n+\n+\t* sinfo.adb: Add Get_ and Set_ operations for\n+\tNull_Exclusion_In_Return_Present.\n+\n 2009-04-10  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch5.adb, exp_ch6.adb, sem_ch6.adb: Move the code that creates a"}, {"sha": "adb319341f47dd92d41cbc13ba7a9f8a9e830f50", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -3738,8 +3738,11 @@ pragma Postcondition (\n The @code{Postcondition} pragma allows specification of automatic\n postcondition checks for subprograms. These checks are similar to\n assertions, but are automatically inserted just prior to the return\n-statements of the subprogram with which they are associated.\n-Furthermore, the boolean expression which is the condition which\n+statements of the subprogram with which they are associated (including\n+implicit returns at the end of procedure bodies and associated\n+exception handlers).\n+\n+In addition, the boolean expression which is the condition which\n must be true may contain references to function'Result in the case\n of a function to refer to the returned value.\n "}, {"sha": "1c43032534d7b4e63678b20d6abcc068b7d3bff8", "filename": "gcc/ada/itypes.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fitypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fitypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -102,7 +102,7 @@ package body Itypes is\n                              Scope_Id    => Scope_Id);\n \n       Set_Directly_Designated_Type (I_Typ, Directly_Designated_Type (T));\n-      Set_Etype                    (I_Typ, T);\n+      Set_Etype                    (I_Typ, Base_Type (T));\n       Set_Depends_On_Private       (I_Typ, Depends_On_Private (T));\n       Set_Is_Public                (I_Typ, Is_Public          (T));\n       Set_From_With_Type           (I_Typ, From_With_Type     (T));"}, {"sha": "a7e6fb65c2859813728c9b14aeb981c5863d7044", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -3827,13 +3827,14 @@ package body Ch3 is\n          else\n             Result_Node := P_Subtype_Mark;\n             No_Constraint;\n-         end if;\n \n-         --  Note: A null exclusion given on the result type needs to\n-         --  be coded by a distinct flag, since Null_Exclusion_Present\n-         --  on an access-to-function type pertains to a null exclusion\n-         --  on the access type itself (as set above). ???\n-         --  Set_Null_Exclusion_Present??? (Type_Def_Node, Result_Not_Null);\n+            --  A null exclusion on the result type must be recorded in a flag\n+            --  distinct from the one used for the access-to-subprogram type's\n+            --  null exclusion.\n+\n+            Set_Null_Exclusion_In_Return_Present\n+              (Type_Def_Node, Result_Not_Null);\n+         end if;\n \n          Set_Result_Definition (Type_Def_Node, Result_Node);\n "}, {"sha": "8d111a84a939f66186a7504b21ab7fdf63d869bf", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -120,8 +120,7 @@ package body Sem_Aux is\n          return Renamed_Object (Ent);\n \n       --  If this is a component declaration whose entity is constant, it is\n-      --  a prival within a protected function. It does not have a constant\n-      --  value.\n+      --  a prival within a protected function (and so has no constant value).\n \n       elsif Nkind (D) = N_Component_Declaration then\n          return Empty;"}, {"sha": "24d6b4dbdc2d85db17c471ed3221fa406870e9fa", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -32,6 +32,7 @@ with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Freeze;   use Freeze;\n with Hostparm;\n+with Itypes;   use Itypes;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Lib.Xref; use Lib.Xref;\n@@ -2740,6 +2741,7 @@ package body Sem_Ch12 is\n       New_N       : Node_Id;\n       Result_Type : Entity_Id;\n       Save_Parent : Node_Id;\n+      Typ         : Entity_Id;\n \n    begin\n       --  Create copy of generic unit, and save for instantiation. If the unit\n@@ -2788,7 +2790,23 @@ package body Sem_Ch12 is\n             Set_Etype (Id, Result_Type);\n          else\n             Find_Type (Result_Definition (Spec));\n-            Set_Etype (Id, Entity (Result_Definition (Spec)));\n+            Typ := Entity (Result_Definition (Spec));\n+\n+            --  If a null exclusion is imposed on the result type, then create\n+            --  a null-excluding itype (an access subtype) and use it as the\n+            --  function's Etype.\n+\n+            if Is_Access_Type (Typ)\n+              and then Null_Exclusion_Present (Spec)\n+            then\n+               Set_Etype  (Id,\n+                 Create_Null_Excluding_Itype\n+                   (T           => Typ,\n+                    Related_Nod => Spec,\n+                    Scope_Id    => Defining_Unit_Name (Spec)));\n+            else\n+               Set_Etype (Id, Typ);\n+            end if;\n          end if;\n \n       else\n@@ -8310,10 +8328,11 @@ package body Sem_Ch12 is\n \n             Decl_Node :=\n               Make_Object_Declaration (Loc,\n-                Defining_Identifier => New_Copy (Formal_Id),\n-                Constant_Present    => True,\n-                Object_Definition   => New_Copy_Tree (Def),\n-                Expression          => Actual);\n+                Defining_Identifier    => New_Copy (Formal_Id),\n+                Constant_Present       => True,\n+                Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n+                Object_Definition      => New_Copy_Tree (Def),\n+                Expression             => Actual);\n \n             Set_Corresponding_Generic_Association (Decl_Node, Act_Assoc);\n \n@@ -8379,11 +8398,12 @@ package body Sem_Ch12 is\n \n             Decl_Node :=\n               Make_Object_Declaration (Sloc (Formal),\n-                Defining_Identifier => New_Copy (Formal_Id),\n-                Constant_Present    => True,\n-                Object_Definition   => New_Copy (Def),\n-                Expression          => New_Copy_Tree\n-                                         (Default_Expression (Formal)));\n+                Defining_Identifier    => New_Copy (Formal_Id),\n+                Constant_Present       => True,\n+                Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n+                Object_Definition      => New_Copy (Def),\n+                Expression             => New_Copy_Tree\n+                                            (Default_Expression (Formal)));\n \n             Append (Decl_Node, List);\n             Set_Analyzed (Expression (Decl_Node), False);\n@@ -8410,10 +8430,11 @@ package body Sem_Ch12 is\n \n                Decl_Node :=\n                  Make_Object_Declaration (Loc,\n-                   Defining_Identifier => New_Copy (Formal_Id),\n-                   Constant_Present    => True,\n-                   Object_Definition   => New_Copy (Def),\n-                   Expression          =>\n+                   Defining_Identifier    => New_Copy (Formal_Id),\n+                   Constant_Present       => True,\n+                   Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n+                   Object_Definition      => New_Copy (Def),\n+                   Expression             =>\n                      Make_Attribute_Reference (Sloc (Formal_Id),\n                        Attribute_Name => Name_First,\n                        Prefix         => New_Copy (Def)));"}, {"sha": "bc3ffadca9cccc2a1850e64e4b8367f4205fd5ab", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -1118,7 +1118,27 @@ package body Sem_Ch3 is\n \n          else\n             Analyze (Result_Definition (T_Def));\n-            Set_Etype (Desig_Type, Entity (Result_Definition (T_Def)));\n+\n+            declare\n+               Typ : constant Entity_Id := Entity (Result_Definition (T_Def));\n+\n+            begin\n+               --  If a null exclusion is imposed on the result type, then\n+               --  create a null-excluding itype (an access subtype) and use\n+               --  it as the function's Etype.\n+\n+               if Is_Access_Type (Typ)\n+                 and then Null_Exclusion_In_Return_Present (T_Def)\n+               then\n+                  Set_Etype  (Desig_Type,\n+                    Create_Null_Excluding_Itype\n+                      (T           => Typ,\n+                       Related_Nod => T_Def,\n+                       Scope_Id    => Current_Scope));\n+               else\n+                  Set_Etype (Desig_Type, Typ);\n+               end if;\n+            end;\n          end if;\n \n          if not (Is_Type (Etype (Desig_Type))) then"}, {"sha": "9f1761e8c992e733021e5e716e401e3f1ccacd08", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -1282,13 +1282,39 @@ package body Sem_Ch6 is\n             Set_Is_Local_Anonymous_Access (Typ);\n             Set_Etype (Designator, Typ);\n \n+            --  Ada 2005 (AI-231): Ensure proper usage of null exclusion\n+\n+            Null_Exclusion_Static_Checks (N);\n+\n          --  Subtype_Mark case\n \n          else\n             Find_Type (Result_Definition (N));\n             Typ := Entity (Result_Definition (N));\n             Set_Etype (Designator, Typ);\n \n+            --  Ada 2005 (AI-231): Ensure proper usage of null exclusion\n+\n+            Null_Exclusion_Static_Checks (N);\n+\n+            --  If a null exclusion is imposed on the result type, then create\n+            --  a null-excluding itype (an access subtype) and use it as the\n+            --  function's Etype. Note that the null exclusion checks are done\n+            --  right before this, because they don't get applied to types that\n+            --  do not come from source.\n+\n+            if Is_Access_Type (Typ)\n+              and then Null_Exclusion_Present (N)\n+            then\n+               Set_Etype  (Designator,\n+                 Create_Null_Excluding_Itype\n+                   (T           => Typ,\n+                    Related_Nod => N,\n+                    Scope_Id    => Scope (Current_Scope)));\n+            else\n+               Set_Etype (Designator, Typ);\n+            end if;\n+\n             if Ekind (Typ) = E_Incomplete_Type\n               and then Is_Value_Type (Typ)\n             then\n@@ -1304,10 +1330,6 @@ package body Sem_Ch6 is\n             end if;\n          end if;\n \n-         --  Ada 2005 (AI-231): Ensure proper usage of null exclusion\n-\n-         Null_Exclusion_Static_Checks (N);\n-\n       --  Case where result definition does indicate an error\n \n       else\n@@ -2731,8 +2753,18 @@ package body Sem_Ch6 is\n \n          End_Scope;\n \n+      --  The subprogram scope is pushed and popped around the processing of\n+      --  the return type for consistency with call above to Process_Formals\n+      --  (which itself can call Analyze_Return_Type), and to ensure that any\n+      --  itype created for the return type will be associated with the proper\n+      --  scope.\n+\n       elsif Nkind (N) = N_Function_Specification then\n+         Push_Scope (Designator);\n+\n          Analyze_Return_Type (N);\n+\n+         End_Scope;\n       end if;\n \n       if Nkind (N) = N_Function_Specification then"}, {"sha": "59ddd5ceabc6919643271e90ee54f25c98ade81a", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -2088,6 +2088,14 @@ package body Sinfo is\n       return Flag11 (N);\n    end Null_Exclusion_Present;\n \n+   function Null_Exclusion_In_Return_Present\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_Function_Definition);\n+      return Flag14 (N);\n+   end Null_Exclusion_In_Return_Present;\n+\n    function Null_Record_Present\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4860,6 +4868,14 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Null_Exclusion_Present;\n \n+   procedure Set_Null_Exclusion_In_Return_Present\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_Function_Definition);\n+      Set_Flag14 (N, Val);\n+   end Set_Null_Exclusion_In_Return_Present;\n+\n    procedure Set_Null_Record_Present\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "90c10f90575829053458da029e34aed4a4b6cca4", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66c3ff49ece1cb52dc330fd9c3eed7110457362/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=b66c3ff49ece1cb52dc330fd9c3eed7110457362", "patch": "@@ -2883,6 +2883,7 @@ package Sinfo is\n       --  N_Access_Function_Definition\n       --  Sloc points to ACCESS\n       --  Null_Exclusion_Present (Flag11)\n+      --  Null_Exclusion_In_Return_Present (Flag14)\n       --  Protected_Present (Flag6)\n       --  Parameter_Specifications (List3) (set to No_List if no formal part)\n       --  Result_Definition (Node4) result subtype (subtype mark or access def)\n@@ -8088,6 +8089,9 @@ package Sinfo is\n    function Null_Exclusion_Present\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Null_Exclusion_In_Return_Present\n+     (N : Node_Id) return Boolean;    -- Flag14\n+\n    function Null_Record_Present\n      (N : Node_Id) return Boolean;    -- Flag17\n \n@@ -8970,6 +8974,9 @@ package Sinfo is\n    procedure Set_Null_Exclusion_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Null_Exclusion_In_Return_Present\n+     (N : Node_Id; Val : Boolean := True);    -- Flag14\n+\n    procedure Set_Null_Record_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag17\n \n@@ -11062,6 +11069,7 @@ package Sinfo is\n    pragma Inline (No_Truncation);\n    pragma Inline (Null_Present);\n    pragma Inline (Null_Exclusion_Present);\n+   pragma Inline (Null_Exclusion_In_Return_Present);\n    pragma Inline (Null_Record_Present);\n    pragma Inline (Object_Definition);\n    pragma Inline (Original_Discriminant);\n@@ -11353,6 +11361,7 @@ package Sinfo is\n    pragma Inline (Set_No_Truncation);\n    pragma Inline (Set_Null_Present);\n    pragma Inline (Set_Null_Exclusion_Present);\n+   pragma Inline (Set_Null_Exclusion_In_Return_Present);\n    pragma Inline (Set_Null_Record_Present);\n    pragma Inline (Set_Object_Definition);\n    pragma Inline (Set_Original_Discriminant);"}]}