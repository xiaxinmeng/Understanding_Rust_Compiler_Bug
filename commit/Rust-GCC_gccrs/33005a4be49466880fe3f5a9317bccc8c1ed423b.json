{"sha": "33005a4be49466880fe3f5a9317bccc8c1ed423b", "node_id": "C_kwDOANBUbNoAKDMzMDA1YTRiZTQ5NDY2ODgwZmUzZjVhOTMxN2JjY2M4YzFlZDQyM2I", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-01T11:32:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-01T19:31:00Z"}, "message": "libstdc++: Add specializations for some variable templates\n\nThis avoids having to instantiate a class template when we can detect\nthe true cases easily with a partial specialization.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_lvalue_reference_v)\n\t(is_rvalue_reference_v, is_reference_v, is_const_v)\n\t(is_volatile_v): Define using partial specializations instead\n\tof instantiating class templates.", "tree": {"sha": "cb0cda5fb50c540387592f44f49e3b7920191aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0cda5fb50c540387592f44f49e3b7920191aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33005a4be49466880fe3f5a9317bccc8c1ed423b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33005a4be49466880fe3f5a9317bccc8c1ed423b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33005a4be49466880fe3f5a9317bccc8c1ed423b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33005a4be49466880fe3f5a9317bccc8c1ed423b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd20d9482a1f10ddf1c398c1a1d8421f97dfdefa"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e4b9b59ce08ef6e6a4147a474c79d7924e3e3f1f", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33005a4be49466880fe3f5a9317bccc8c1ed423b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33005a4be49466880fe3f5a9317bccc8c1ed423b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=33005a4be49466880fe3f5a9317bccc8c1ed423b", "patch": "@@ -3153,11 +3153,13 @@ template <typename _Tp, size_t _Num>\n template <typename _Tp>\n   inline constexpr bool is_pointer_v = is_pointer<_Tp>::value;\n template <typename _Tp>\n-  inline constexpr bool is_lvalue_reference_v =\n-    is_lvalue_reference<_Tp>::value;\n+  inline constexpr bool is_lvalue_reference_v = false;\n template <typename _Tp>\n-  inline constexpr bool is_rvalue_reference_v =\n-    is_rvalue_reference<_Tp>::value;\n+  inline constexpr bool is_lvalue_reference_v<_Tp&> = true;\n+template <typename _Tp>\n+  inline constexpr bool is_rvalue_reference_v = false;\n+template <typename _Tp>\n+  inline constexpr bool is_rvalue_reference_v<_Tp&&> = true;\n template <typename _Tp>\n   inline constexpr bool is_member_object_pointer_v =\n     is_member_object_pointer<_Tp>::value;\n@@ -3173,7 +3175,11 @@ template <typename _Tp>\n template <typename _Tp>\n   inline constexpr bool is_function_v = is_function<_Tp>::value;\n template <typename _Tp>\n-  inline constexpr bool is_reference_v = is_reference<_Tp>::value;\n+  inline constexpr bool is_reference_v = false;\n+template <typename _Tp>\n+  inline constexpr bool is_reference_v<_Tp&> = true;\n+template <typename _Tp>\n+  inline constexpr bool is_reference_v<_Tp&&> = true;\n template <typename _Tp>\n   inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;\n template <typename _Tp>\n@@ -3187,9 +3193,13 @@ template <typename _Tp>\n template <typename _Tp>\n   inline constexpr bool is_member_pointer_v = is_member_pointer<_Tp>::value;\n template <typename _Tp>\n-  inline constexpr bool is_const_v = is_const<_Tp>::value;\n+  inline constexpr bool is_const_v = false;\n+template <typename _Tp>\n+  inline constexpr bool is_const_v<const _Tp> = true;\n+template <typename _Tp>\n+  inline constexpr bool is_volatile_v = false;\n template <typename _Tp>\n-  inline constexpr bool is_volatile_v = is_volatile<_Tp>::value;\n+  inline constexpr bool is_volatile_v<volatile _Tp> = true;\n template <typename _Tp>\n   inline constexpr bool is_trivial_v = is_trivial<_Tp>::value;\n template <typename _Tp>"}]}