{"sha": "82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJjMmYxYmJkMzhlZmRlNGE1ODkxNjU5ZWUxZWVmZmJiZmFlNTZmNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-22T15:28:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-22T15:28:02Z"}, "message": "re PR libstdc++/44630 (profiler_trace.h defines functions __max and __min which causes portability problems)\n\n2010-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/44630\n\t* include/profile/impl/profiler_trace.h (__min, __max): Remove,\n\tuse std::min, std::max everywhere.\n\t* include/profile/impl/profiler_container_size.h: Use std::min and\n\tstd::max.\n\t* include/profile/impl/profiler_hash_func.h: Likewise.\n\t* include/profile/impl/profiler_list_to_vector.h: Likewise.\n\nFrom-SVN: r161192", "tree": {"sha": "64c49d16b2ca22b00b2f9b4465754d7c7ad31467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c49d16b2ca22b00b2f9b4465754d7c7ad31467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/comments", "author": null, "committer": null, "parents": [{"sha": "41195c94583a5f2da9178234bbcdacee27db69ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41195c94583a5f2da9178234bbcdacee27db69ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41195c94583a5f2da9178234bbcdacee27db69ff"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "c1f218daa9d8e6ed517989b6c4c03d526aa923d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "patch": "@@ -1,3 +1,13 @@\n+2010-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/44630\n+\t* include/profile/impl/profiler_trace.h (__min, __max): Remove,\n+\tuse std::min, std::max everywhere.\n+\t* include/profile/impl/profiler_container_size.h: Use std::min and\n+\tstd::max.\n+\t* include/profile/impl/profiler_hash_func.h: Likewise.\n+\t* include/profile/impl/profiler_list_to_vector.h: Likewise.\n+\n 2010-06-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c.cc:"}, {"sha": "f70463cb4b75f2fd90cc7b0707eab81a83f727b8", "filename": "libstdc++-v3/include/profile/impl/profiler_container_size.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h?ref=82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -102,14 +102,14 @@ inline const char* __container_size_info::__advice() const\n \n inline void __container_size_info::__destruct(size_t __num, size_t __inum) \n {\n-  _M_max = __max(_M_max, __num);\n-  _M_item_max = __max(_M_item_max, __inum);\n+  _M_max = std::max(_M_max, __num);\n+  _M_item_max = std::max(_M_item_max, __inum);\n   if (_M_min == 0) {\n     _M_min = __num; \n     _M_item_min = __inum;\n   } else {\n-    _M_min = __min(_M_min, __num);\n-    _M_item_min = __min(_M_item_min, __inum);\n+    _M_min = std::min(_M_min, __num);\n+    _M_item_min = std::min(_M_item_min, __inum);\n   }\n   _M_total += __num;\n   _M_item_total += __inum;\n@@ -120,7 +120,7 @@ inline void __container_size_info::__resize(size_t __from, size_t __to)\n {\n   _M_cost += this->__resize_cost(__from, __to);\n   _M_resize += 1;\n-  _M_max = __max(_M_max, __to);\n+  _M_max = std::max(_M_max, __to);\n }\n \n inline __container_size_info::__container_size_info(__stack_t __stack, \n@@ -138,11 +138,11 @@ inline __container_size_info::__container_size_info(__stack_t __stack,\n \n inline void __container_size_info::__merge(const __container_size_info& __o)\n {\n-  _M_init        = __max(_M_init, __o._M_init);\n-  _M_max         = __max(_M_max, __o._M_max);\n-  _M_item_max    = __max(_M_item_max, __o._M_item_max);\n-  _M_min         = __min(_M_min, __o._M_min);\n-  _M_item_min    = __min(_M_item_min, __o._M_item_min);\n+  _M_init        = std::max(_M_init, __o._M_init);\n+  _M_max         = std::max(_M_max, __o._M_max);\n+  _M_item_max    = std::max(_M_item_max, __o._M_item_max);\n+  _M_min         = std::min(_M_min, __o._M_min);\n+  _M_item_min    = std::min(_M_item_min, __o._M_item_min);\n   _M_total      += __o._M_total;\n   _M_item_total += __o._M_item_total;\n   _M_count      += __o._M_count;"}, {"sha": "22c26bfa8485fc46c9e0fad1deca93136d59b776", "filename": "libstdc++-v3/include/profile/impl/profiler_hash_func.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h?ref=82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -87,15 +87,15 @@ inline __hashfunc_info::__hashfunc_info(const __hashfunc_info& __o)\n \n inline void __hashfunc_info::__merge(const __hashfunc_info& __o)\n {\n-  _M_longest_chain  = __max(_M_longest_chain, __o._M_longest_chain);\n+  _M_longest_chain  = std::max(_M_longest_chain, __o._M_longest_chain);\n   _M_accesses      += __o._M_accesses;\n   _M_hops          += __o._M_hops;\n }\n \n inline void __hashfunc_info::__destruct(size_t __chain, size_t __accesses, \n                                         size_t __hops)\n { \n-  _M_longest_chain  = __max(_M_longest_chain, __chain);\n+  _M_longest_chain  = std::max(_M_longest_chain, __chain);\n   _M_accesses      += __accesses;\n   _M_hops          += __hops;\n }"}, {"sha": "690d335660b036bdf9077dd2469af11b9a26e299", "filename": "libstdc++-v3/include/profile/impl/profiler_list_to_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h?ref=82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -124,13 +124,13 @@ inline void __list2vector_info::__merge(const __list2vector_info& __o)\n   _M_list_cost    += __o._M_list_cost;\n   _M_valid        &= __o._M_valid;\n   _M_resize       += __o._M_resize;\n-  _M_max_size     = __max( _M_max_size, __o._M_max_size);\n+  _M_max_size     = std::max( _M_max_size, __o._M_max_size);\n }\n \n inline void __list2vector_info::__opr_insert(size_t __shift, size_t __size) \n {\n   _M_shift_count += __shift;\n-  _M_max_size = __max(_M_max_size, __size);\n+  _M_max_size = std::max(_M_max_size, __size);\n }\n \n inline void __list2vector_info::__resize(size_t __from, size_t __to)"}, {"sha": "0541339c2a13e0a21b4d4ee1e2186b6153c2f92f", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "patch": "@@ -122,17 +122,6 @@ void __trace_list_to_slist_report(FILE*, __warning_vector_t&);\n void __trace_list_to_vector_report(FILE*, __warning_vector_t&);\n void __trace_map_to_unordered_map_report(FILE*, __warning_vector_t&);\n \n-// Utility functions.\n-inline size_t __max(size_t __a, size_t __b)\n-{\n-  return __a >= __b ? __a : __b;\n-}\n-\n-inline size_t __min(size_t __a, size_t __b)\n-{\n-  return __a <= __b ? __a : __b;\n-}\n-\n struct __cost_factor\n {\n   const char* __env_var;\n@@ -439,8 +428,8 @@ inline void __report(void)\n   fclose(__raw_file);\n \n   // Sort data by magnitude, keeping just top N.\n-  size_t __cutoff = __min(_GLIBCXX_PROFILE_DATA(_S_max_warn_count),\n-                          __warnings.size());\n+  size_t __cutoff = std::min(_GLIBCXX_PROFILE_DATA(_S_max_warn_count),\n+\t\t\t     __warnings.size());\n   __top_n(__warnings, __top_warnings, __cutoff);\n \n   FILE* __warn_file = __open_output_file(\"txt\");"}]}