{"sha": "29453a9ffd873b2e463727bc93bad48c9535b99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0NTNhOWZmZDg3M2IyZTQ2MzcyN2JjOTNiYWQ0OGM5NTM1Yjk5Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-27T17:49:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-27T17:49:29Z"}, "message": "Remove noexcept from filesystem iterators and operations (LWG 3013, 3014)\n\n\t* include/bits/fs_dir.h (directory_iterator): Remove noexcept from\n\tconstructors and increment member (LWG 3013).\n\t(recursive_directory_iterator): Likewise.\n\t* include/bits/fs_ops.h (copy, copy_file, create_directories)\n\t(is_empty, remove_all): Remove noexcept (LWG 3013 and LWG 3014).\n\t* src/filesystem/std-dir.cc (directory_iterator::increment)\n\t(recursive_directory_iterator::increment): Remove noexcept.\n\t* src/filesystem/std-ops.cc (copy, copy_file, create_directories)\n\t(is_empty, remove_all): Remove noexcept\n\nFrom-SVN: r254160", "tree": {"sha": "1981426f4b12529f29e5a484e5b0c9728cce4f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1981426f4b12529f29e5a484e5b0c9728cce4f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29453a9ffd873b2e463727bc93bad48c9535b99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29453a9ffd873b2e463727bc93bad48c9535b99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29453a9ffd873b2e463727bc93bad48c9535b99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29453a9ffd873b2e463727bc93bad48c9535b99c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a3effa4116764731c0820b34d27dbef5d251e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3effa4116764731c0820b34d27dbef5d251e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3effa4116764731c0820b34d27dbef5d251e74"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "efd8546561fac27aa9b921bb7fd5028de472b590", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29453a9ffd873b2e463727bc93bad48c9535b99c", "patch": "@@ -1,5 +1,15 @@\n 2017-10-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_dir.h (directory_iterator): Remove noexcept from\n+\tconstructors and increment member (LWG 3013).\n+\t(recursive_directory_iterator): Likewise.\n+\t* include/bits/fs_ops.h (copy, copy_file, create_directories)\n+\t(is_empty, remove_all): Remove noexcept (LWG 3013 and LWG 3014).\n+\t* src/filesystem/std-dir.cc (directory_iterator::increment)\n+\t(recursive_directory_iterator::increment): Remove noexcept.\n+\t* src/filesystem/std-ops.cc (copy, copy_file, create_directories)\n+\t(is_empty, remove_all): Remove noexcept\n+\n \t* include/bits/fs_dir.h (file_status): Make default constructor\n \tnon-explicit (LWG 2787).\n \t* testsuite/27_io/filesystem/file_status/1.cc: New test."}, {"sha": "579a269711e715143e63308279d0108046d41699", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=29453a9ffd873b2e463727bc93bad48c9535b99c", "patch": "@@ -355,12 +355,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     directory_iterator(const path& __p, directory_options __options)\n     : directory_iterator(__p, __options, nullptr) { }\n \n-    directory_iterator(const path& __p, error_code& __ec) noexcept\n+    directory_iterator(const path& __p, error_code& __ec)\n     : directory_iterator(__p, directory_options::none, __ec) { }\n \n-    directory_iterator(const path& __p,\n-\t\t       directory_options __options,\n-\t\t       error_code& __ec) noexcept\n+    directory_iterator(const path& __p, directory_options __options,\n+\t\t       error_code& __ec)\n     : directory_iterator(__p, __options, &__ec) { }\n \n     directory_iterator(const directory_iterator& __rhs) = default;\n@@ -378,7 +377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     const directory_entry& operator*() const;\n     const directory_entry* operator->() const { return &**this; }\n     directory_iterator&    operator++();\n-    directory_iterator&    increment(error_code& __ec) noexcept;\n+    directory_iterator&    increment(error_code& __ec);\n \n     __directory_iterator_proxy operator++(int)\n     {\n@@ -436,12 +435,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     recursive_directory_iterator(const path& __p, directory_options __options)\n     : recursive_directory_iterator(__p, __options, nullptr) { }\n \n-    recursive_directory_iterator(const path& __p,\n-                                 directory_options __options,\n-                                 error_code& __ec) noexcept\n+    recursive_directory_iterator(const path& __p, directory_options __options,\n+                                 error_code& __ec)\n     : recursive_directory_iterator(__p, __options, &__ec) { }\n \n-    recursive_directory_iterator(const path& __p, error_code& __ec) noexcept\n+    recursive_directory_iterator(const path& __p, error_code& __ec)\n     : recursive_directory_iterator(__p, directory_options::none, &__ec) { }\n \n     recursive_directory_iterator(\n@@ -466,7 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     operator=(recursive_directory_iterator&& __rhs) noexcept;\n \n     recursive_directory_iterator& operator++();\n-    recursive_directory_iterator& increment(error_code& __ec) noexcept;\n+    recursive_directory_iterator& increment(error_code& __ec);\n \n     __directory_iterator_proxy operator++(int)\n     {"}, {"sha": "075d61e2a63702464397b366e53d23dfa8714a69", "filename": "libstdc++-v3/include/bits/fs_ops.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h?ref=29453a9ffd873b2e463727bc93bad48c9535b99c", "patch": "@@ -56,31 +56,31 @@ namespace filesystem\n   { copy(__from, __to, copy_options::none); }\n \n   inline void\n-  copy(const path& __from, const path& __to, error_code& __ec) noexcept\n+  copy(const path& __from, const path& __to, error_code& __ec)\n   { copy(__from, __to, copy_options::none, __ec); }\n \n   void copy(const path& __from, const path& __to, copy_options __options);\n   void copy(const path& __from, const path& __to, copy_options __options,\n-\t    error_code& __ec) noexcept;\n+\t    error_code& __ec);\n \n   inline bool\n   copy_file(const path& __from, const path& __to)\n   { return copy_file(__from, __to, copy_options::none); }\n \n   inline bool\n-  copy_file(const path& __from, const path& __to, error_code& __ec) noexcept\n+  copy_file(const path& __from, const path& __to, error_code& __ec)\n   { return copy_file(__from, __to, copy_options::none, __ec); }\n \n   bool copy_file(const path& __from, const path& __to, copy_options __option);\n   bool copy_file(const path& __from, const path& __to, copy_options __option,\n-\t\t error_code& __ec) noexcept;\n+\t\t error_code& __ec);\n \n   void copy_symlink(const path& __existing_symlink, const path& __new_symlink);\n   void copy_symlink(const path& __existing_symlink, const path& __new_symlink,\n \t\t    error_code& __ec) noexcept;\n \n   bool create_directories(const path& __p);\n-  bool create_directories(const path& __p, error_code& __ec) noexcept;\n+  bool create_directories(const path& __p, error_code& __ec);\n \n   bool create_directory(const path& __p);\n   bool create_directory(const path& __p, error_code& __ec) noexcept;\n@@ -172,7 +172,7 @@ namespace filesystem\n   { return is_directory(status(__p, __ec)); }\n \n   bool is_empty(const path& __p);\n-  bool is_empty(const path& __p, error_code& __ec) noexcept;\n+  bool is_empty(const path& __p, error_code& __ec);\n \n   inline bool\n   is_fifo(file_status __s) noexcept\n@@ -274,7 +274,7 @@ namespace filesystem\n   bool remove(const path& __p, error_code& __ec) noexcept;\n \n   uintmax_t remove_all(const path& __p);\n-  uintmax_t remove_all(const path& __p, error_code& __ec) noexcept;\n+  uintmax_t remove_all(const path& __p, error_code& __ec);\n \n   void rename(const path& __from, const path& __to);\n   void rename(const path& __from, const path& __to, error_code& __ec) noexcept;"}, {"sha": "553128e909698032c477954bf6bd2c8b4a7cd9f7", "filename": "libstdc++-v3/src/filesystem/std-dir.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-dir.cc?ref=29453a9ffd873b2e463727bc93bad48c9535b99c", "patch": "@@ -158,7 +158,7 @@ fs::directory_iterator::operator++()\n }\n \n fs::directory_iterator&\n-fs::directory_iterator::increment(error_code& ec) noexcept\n+fs::directory_iterator::increment(error_code& ec)\n {\n   if (!_M_dir)\n     {\n@@ -243,7 +243,7 @@ fs::recursive_directory_iterator::operator++()\n }\n \n fs::recursive_directory_iterator&\n-fs::recursive_directory_iterator::increment(error_code& ec) noexcept\n+fs::recursive_directory_iterator::increment(error_code& ec)\n {\n   if (!_M_dirs)\n     {"}, {"sha": "fa5e19a36ba3bb0c9ec9e88b683e01beb4488f32", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29453a9ffd873b2e463727bc93bad48c9535b99c/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=29453a9ffd873b2e463727bc93bad48c9535b99c", "patch": "@@ -430,7 +430,7 @@ fs::do_copy_file(const char* from, const char* to,\n \n void\n fs::copy(const path& from, const path& to, copy_options options,\n-\t error_code& ec) noexcept\n+\t error_code& ec)\n {\n   const bool skip_symlinks = is_set(options, copy_options::skip_symlinks);\n   const bool create_symlinks = is_set(options, copy_options::create_symlinks);\n@@ -544,7 +544,7 @@ fs::copy_file(const path& from, const path& to, copy_options option)\n \n bool\n fs::copy_file(const path& from, const path& to, copy_options options,\n-\t      error_code& ec) noexcept\n+\t      error_code& ec)\n {\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   return do_copy_file(from.c_str(), to.c_str(), copy_file_options(options),\n@@ -596,7 +596,7 @@ fs::create_directories(const path& p)\n }\n \n bool\n-fs::create_directories(const path& p, error_code& ec) noexcept\n+fs::create_directories(const path& p, error_code& ec)\n {\n   if (p.empty())\n     {\n@@ -1008,7 +1008,7 @@ fs::is_empty(const path& p)\n }\n \n bool\n-fs::is_empty(const path& p, error_code& ec) noexcept\n+fs::is_empty(const path& p, error_code& ec)\n {\n   auto s = status(p, ec);\n   if (ec)\n@@ -1268,7 +1268,7 @@ fs::remove_all(const path& p)\n }\n \n std::uintmax_t\n-fs::remove_all(const path& p, error_code& ec) noexcept\n+fs::remove_all(const path& p, error_code& ec)\n {\n   auto fs = symlink_status(p, ec);\n   uintmax_t count = 0;"}]}