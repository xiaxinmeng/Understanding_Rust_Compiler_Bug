{"sha": "918d445f1fe08cb05228e1b12052a55dfcd5401a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4ZDQ0NWYxZmUwOGNiMDUyMjhlMWIxMjA1MmE1NWRmY2Q1NDAxYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-01-04T18:19:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-04T18:19:22Z"}, "message": "i386.c (ix86_legitimize_address): Call convert_to_mode unconditionally.\n\n\t* config/i386/i386.c (ix86_legitimize_address): Call convert_to_mode\n\tunconditionally.\n\t(ix86_expand_move): Ditto.\n\t(ix86_zero_extend_to_Pmode): Ditto.\n\t(ix86_expand_call): Ditto.\n\t(ix86_expand_special_args_builtin): Ditto.\n\t(ix86_expand_builtin): Ditto.\n\nFrom-SVN: r194913", "tree": {"sha": "367cce20c7718b2089de1e00d65a291515ad71cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/367cce20c7718b2089de1e00d65a291515ad71cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918d445f1fe08cb05228e1b12052a55dfcd5401a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918d445f1fe08cb05228e1b12052a55dfcd5401a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918d445f1fe08cb05228e1b12052a55dfcd5401a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918d445f1fe08cb05228e1b12052a55dfcd5401a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82f2836c6e0eab99dc2ed4d761fbc611408902a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f2836c6e0eab99dc2ed4d761fbc611408902a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f2836c6e0eab99dc2ed4d761fbc611408902a1"}], "stats": {"total": 71, "additions": 27, "deletions": 44}, "files": [{"sha": "be15aa3b938b4d2153d4fbcb48a7c3f13302cd26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918d445f1fe08cb05228e1b12052a55dfcd5401a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918d445f1fe08cb05228e1b12052a55dfcd5401a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=918d445f1fe08cb05228e1b12052a55dfcd5401a", "patch": "@@ -1,3 +1,13 @@\n+2013-01-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_legitimize_address): Call convert_to_mode\n+\tunconditionally.\n+\t(ix86_expand_move): Ditto.\n+\t(ix86_zero_extend_to_Pmode): Ditto.\n+\t(ix86_expand_call): Ditto.\n+\t(ix86_expand_special_args_builtin): Ditto.\n+\t(ix86_expand_builtin): Ditto.\n+\n 2013-01-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/55862"}, {"sha": "39c24a497a8dda0be0ed39387e54cd92c40e7816", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918d445f1fe08cb05228e1b12052a55dfcd5401a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918d445f1fe08cb05228e1b12052a55dfcd5401a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=918d445f1fe08cb05228e1b12052a55dfcd5401a", "patch": "@@ -13247,8 +13247,7 @@ ix86_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t  rtx val  = force_operand (XEXP (x, 1), temp);\n \t  if (val != temp)\n \t    {\n-\t      if (GET_MODE (val) != Pmode)\n-\t\tval = convert_to_mode (Pmode, val, 1);\n+\t      val = convert_to_mode (Pmode, val, 1);\n \t      emit_move_insn (temp, val);\n \t    }\n \n@@ -13262,8 +13261,7 @@ ix86_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t  rtx val  = force_operand (XEXP (x, 0), temp);\n \t  if (val != temp)\n \t    {\n-\t      if (GET_MODE (val) != Pmode)\n-\t\tval = convert_to_mode (Pmode, val, 1);\n+\t      val = convert_to_mode (Pmode, val, 1);\n \t      emit_move_insn (temp, val);\n \t    }\n \n@@ -15931,8 +15929,7 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t  op1 = force_operand (op1, op0);\n \t  if (op1 == op0)\n \t    return;\n-\t  if (GET_MODE (op1) != mode)\n-\t    op1 = convert_to_mode (mode, op1, 1);\n+\t  op1 = convert_to_mode (mode, op1, 1);\n \t}\n       else if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \t       && SYMBOL_REF_DLLIMPORT_P (op1))\n@@ -16013,8 +16010,7 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t      op1 = legitimize_pic_address (op1, reg);\n \t      if (op0 == op1)\n \t\treturn;\n-\t      if (GET_MODE (op1) != mode)\n-\t\top1 = convert_to_mode (mode, op1, 1);\n+\t      op1 = convert_to_mode (mode, op1, 1);\n \t    }\n \t}\n     }\n@@ -21650,9 +21646,7 @@ ix86_adjust_counter (rtx countreg, HOST_WIDE_INT value)\n rtx\n ix86_zero_extend_to_Pmode (rtx exp)\n {\n-  if (GET_MODE (exp) != Pmode)\n-    exp = convert_to_mode (Pmode, exp, 1);\n-  return force_reg (Pmode, exp);\n+  return force_reg (Pmode, convert_to_mode (Pmode, exp, 1));\n }\n \n /* Divide COUNTREG by SCALE.  */\n@@ -23624,9 +23618,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t   ? !sibcall_insn_operand (XEXP (fnaddr, 0), word_mode)\n \t   : !call_insn_operand (XEXP (fnaddr, 0), word_mode))\n     {\n-      fnaddr = XEXP (fnaddr, 0);\n-      if (GET_MODE (fnaddr) != word_mode)\n-\tfnaddr = convert_to_mode (word_mode, fnaddr, 1);\n+      fnaddr = convert_to_mode (word_mode, XEXP (fnaddr, 0), 1);\n       fnaddr = gen_rtx_MEM (QImode, copy_to_mode_reg (word_mode, fnaddr));\n     }\n \n@@ -31276,9 +31268,8 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       gcc_assert (target == 0);\n       if (memory)\n \t{\n-\t  if (GET_MODE (op) != Pmode)\n-\t    op = convert_to_mode (Pmode, op, 1);\n-\t  target = gen_rtx_MEM (tmode, force_reg (Pmode, op));\n+\t  op = force_reg (Pmode, convert_to_mode (Pmode, op, 1));\n+\t  target = gen_rtx_MEM (tmode, op);\n \t}\n       else\n \ttarget = force_reg (tmode, op);\n@@ -31322,9 +31313,8 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  if (i == memory)\n \t    {\n \t      /* This must be the memory operand.  */\n-\t      if (GET_MODE (op) != Pmode)\n-\t\top = convert_to_mode (Pmode, op, 1);\n-\t      op = gen_rtx_MEM (mode, force_reg (Pmode, op));\n+\t      op = force_reg (Pmode, convert_to_mode (Pmode, op, 1));\n+\t      op = gen_rtx_MEM (mode, op);\n \t      gcc_assert (GET_MODE (op) == mode\n \t\t\t  || GET_MODE (op) == VOIDmode);\n \t    }\n@@ -31572,9 +31562,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n \n-      if (GET_MODE (op0) != Pmode)\n-\top0 = convert_to_mode (Pmode, op0, 1);\n-      op0 = gen_rtx_MEM (mode1, force_reg (Pmode, op0));\n+      op0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n+      op0 = gen_rtx_MEM (mode1, op0);\n \n       if (!insn_data[icode].operand[0].predicate (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n@@ -31605,11 +31594,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \top0 = expand_normal (arg0);\n \ticode = CODE_FOR_sse2_clflush;\n \tif (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\t  {\n-\t    if (GET_MODE (op0) != Pmode)\n-\t      op0 = convert_to_mode (Pmode, op0, 1);\n-\t    op0 = force_reg (Pmode, op0);\n-\t  }\n+\t  op0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n \n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n@@ -31622,11 +31607,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op1 = expand_normal (arg1);\n       op2 = expand_normal (arg2);\n       if (!REG_P (op0))\n-\t{\n-\t  if (GET_MODE (op0) != Pmode)\n-\t    op0 = convert_to_mode (Pmode, op0, 1);\n-\t  op0 = force_reg (Pmode, op0);\n-\t}\n+\top0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n       if (!REG_P (op1))\n \top1 = copy_to_mode_reg (SImode, op1);\n       if (!REG_P (op2))\n@@ -31863,11 +31844,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op0 = expand_normal (arg0);\n       icode = CODE_FOR_lwp_llwpcb;\n       if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\t{\n-\t  if (GET_MODE (op0) != Pmode)\n-\t    op0 = convert_to_mode (Pmode, op0, 1);\n-\t  op0 = force_reg (Pmode, op0);\n-\t}\n+\top0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n       emit_insn (gen_lwp_llwpcb (op0));\n       return 0;\n \n@@ -32013,9 +31990,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n       /* Generate CF from input operand.  */\n       op1 = expand_normal (arg0);\n-      if (GET_MODE (op1) != QImode)\n-\top1 = convert_to_mode (QImode, op1, 1);\n-      op1 = copy_to_mode_reg (QImode, op1);\n+      op1 = copy_to_mode_reg (QImode, convert_to_mode (QImode, op1, 1));\n       emit_insn (gen_addqi3_cc (op0, op1, constm1_rtx));\n \n       /* Gen ADCX instruction to compute X+Y+CF.  */\n@@ -32165,9 +32140,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       /* Force memory operand only with base register here.  But we\n \t don't want to do it on memory operand for other builtin\n \t functions.  */\n-      if (GET_MODE (op1) != Pmode)\n-\top1 = convert_to_mode (Pmode, op1, 1);\n-      op1 = force_reg (Pmode, op1);\n+      op1 = force_reg (Pmode, convert_to_mode (Pmode, op1, 1));\n \n       if (!insn_data[icode].operand[1].predicate (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);"}]}