{"sha": "0a52177612f6e855732c6ded77a04ba40dfb0d19", "node_id": "C_kwDOANBUbNoAKDBhNTIxNzc2MTJmNmU4NTU3MzJjNmRlZDc3YTA0YmE0MGRmYjBkMTk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T10:35:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-17T10:37:23Z"}, "message": "Add check for recursive trait cycles\n\nThis adds a new RAII style TraitQueryGuard so that we can manage the query\nlifetime when resolving a trait. This adds in a DefId into a set when we\nbegin to resolve and then finally removes it when completed. This allows\nus to add in a check at the start if this DefId is already within the set\nwhich means this is a trait cycle.\n\nFixes #1589", "tree": {"sha": "f5f5a48029b5a03dd651cb78e2ae8c880c74e0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5f5a48029b5a03dd651cb78e2ae8c880c74e0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a52177612f6e855732c6ded77a04ba40dfb0d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a52177612f6e855732c6ded77a04ba40dfb0d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a52177612f6e855732c6ded77a04ba40dfb0d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a52177612f6e855732c6ded77a04ba40dfb0d19/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "381e061438836b7ca360c7741e9a13ec6d643b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381e061438836b7ca360c7741e9a13ec6d643b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381e061438836b7ca360c7741e9a13ec6d643b1d"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "6bd3cc1a9e948f59767f95135bf4a23608c6124a", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=0a52177612f6e855732c6ded77a04ba40dfb0d19", "patch": "@@ -141,6 +141,14 @@ TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n       return tref;\n     }\n \n+  DefId trait_id = trait_reference->get_mappings ().get_defid ();\n+  if (context->trait_query_in_progress (trait_id))\n+    {\n+      rust_error_at (trait_reference->get_locus (), \"trait cycle detected\");\n+      return &TraitReference::error_node ();\n+    }\n+\n+  TraitQueryGuard guard (trait_id);\n   TyTy::BaseType *self = nullptr;\n   std::vector<TyTy::SubstitutionParamMapping> substitutions;\n   for (auto &generic_param : trait_reference->get_generic_params ())\n@@ -201,8 +209,10 @@ TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n \t      HIR::TraitBound *b\n \t\t= static_cast<HIR::TraitBound *> (bound.get ());\n \n-\t      // FIXME this might be recursive we need a check for that\n \t      auto predicate = get_predicate_from_bound (b->get_path ());\n+\t      if (predicate.is_error ())\n+\t\treturn &TraitReference::error_node ();\n+\n \t      specified_bounds.push_back (predicate);\n \t      super_traits.push_back (predicate.get ());\n \t    }"}, {"sha": "de3467b27ce08dc67c6357eb427ed957dc5ba2cd", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=0a52177612f6e855732c6ded77a04ba40dfb0d19", "patch": "@@ -381,6 +381,19 @@ class TypeCheckContext\n     return querys_in_progress.find (id) != querys_in_progress.end ();\n   }\n \n+  void insert_trait_query (DefId id) { trait_queries_in_progress.insert (id); }\n+\n+  void trait_query_completed (DefId id)\n+  {\n+    trait_queries_in_progress.erase (id);\n+  }\n+\n+  bool trait_query_in_progress (DefId id) const\n+  {\n+    return trait_queries_in_progress.find (id)\n+\t   != trait_queries_in_progress.end ();\n+  }\n+\n private:\n   TypeCheckContext ();\n \n@@ -418,6 +431,7 @@ class TypeCheckContext\n \n   // query context lookups\n   std::set<HirId> querys_in_progress;\n+  std::set<DefId> trait_queries_in_progress;\n };\n \n class TypeResolution\n@@ -426,6 +440,21 @@ class TypeResolution\n   static void Resolve (HIR::Crate &crate);\n };\n \n+class TraitQueryGuard\n+{\n+public:\n+  TraitQueryGuard (DefId id) : id (id), ctx (*TypeCheckContext::get ())\n+  {\n+    ctx.insert_trait_query (id);\n+  }\n+\n+  ~TraitQueryGuard () { ctx.trait_query_completed (id); }\n+\n+private:\n+  DefId id;\n+  TypeCheckContext &ctx;\n+};\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "79a5866e4aff1143c8d0a72cb58902b1b5241002", "filename": "gcc/testsuite/rust/compile/issue-1589.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1589.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a52177612f6e855732c6ded77a04ba40dfb0d19/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1589.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1589.rs?ref=0a52177612f6e855732c6ded77a04ba40dfb0d19", "patch": "@@ -0,0 +1,5 @@\n+pub trait A: B {}\n+// { dg-error \"trait cycle detected\" \"\" { target *-*-* } .-1 }\n+\n+pub trait B: A {}\n+// { dg-error \"trait cycle detected\" \"\" { target *-*-* } .-1 }"}]}