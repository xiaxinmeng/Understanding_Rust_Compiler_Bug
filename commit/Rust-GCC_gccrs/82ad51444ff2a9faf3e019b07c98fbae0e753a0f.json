{"sha": "82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhZDUxNDQ0ZmYyYTlmYWYzZTAxOWIwN2M5OGZiYWUwZTc1M2EwZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-11-24T21:23:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-11-24T21:23:25Z"}, "message": "shrink-wrap: Fix thinko (PR68520)\n\nPart of the shrink-wrapping algorithm has this comment:\n\n  /* Now see if we can put the prologue at the start of PRO.  Putting it\n     there might require duplicating a block that cannot be duplicated,\n     or in some cases we cannot insert the prologue there at all.  If PRO\n     wont't do, try again with the immediate dominator of PRO, and so on.\n\n     The blocks that need duplicating are those reachable from PRO but\n     not dominated by it.  We keep in BB_WITH a bitmap of the blocks\n     reachable from PRO that we already found, and in VEC a stack of\n     those we still need to consider (to find successors).  */\n\nTwo of the cases that push to that stack do not actually check the\nbitmap first.  Either I thought those blocks could not be on the stack\nalready, or more likely I didn't think and it just didn't crash during\nany testing.  But of course those blocks *can* already be on the stack\n(if you have a hideous loop structure), and then we end up with the\nsame block on the stack more than once.  This is harmless, except that\n(like in the PR) this can overflow the stack.\n\nThis fixes it, by doing the necessary bitmap checks before pushing.\n\n\n\tPR rtl-optimization/68520\n\t* shrink-wrap.c (try_shrink_wrapping): Don't push a block to VEC if\n\tits bit was already set in BB_WITH.\n\nFrom-SVN: r230843", "tree": {"sha": "1445a123125a0829b42a3d6c4cd0f912707bbf35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1445a123125a0829b42a3d6c4cd0f912707bbf35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ad51444ff2a9faf3e019b07c98fbae0e753a0f/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "688c4de0a35ea5b0743faa7f8f6435fe82498332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688c4de0a35ea5b0743faa7f8f6435fe82498332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688c4de0a35ea5b0743faa7f8f6435fe82498332"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "6333faa94f3a22c771637d9766feee3b4959dcd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ad51444ff2a9faf3e019b07c98fbae0e753a0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ad51444ff2a9faf3e019b07c98fbae0e753a0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "patch": "@@ -1,3 +1,9 @@\n+2015-11-24  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/68520\n+\t* shrink-wrap.c (try_shrink_wrapping): Don't push a block to VEC if\n+\tits bit was already set in BB_WITH.\n+\n 2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* alias.c (get_alias_set): Before checking TYPE_ALIAS_SET_KNOWN_P"}, {"sha": "3a1df845e2089c1c70a18966e6b41a3cdfaa2895", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ad51444ff2a9faf3e019b07c98fbae0e753a0f/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ad51444ff2a9faf3e019b07c98fbae0e753a0f/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=82ad51444ff2a9faf3e019b07c98fbae0e753a0f", "patch": "@@ -722,8 +722,8 @@ try_shrink_wrapping (edge *entry_edge, bitmap_head *bb_with,\n \t{\n \t  pro = get_immediate_dominator (CDI_DOMINATORS, pro);\n \n-\t  bitmap_set_bit (bb_with, pro->index);\n-\t  vec.quick_push (pro);\n+\t  if (bitmap_set_bit (bb_with, pro->index))\n+\t    vec.quick_push (pro);\n \t}\n \n       basic_block bb = vec.pop ();\n@@ -734,8 +734,8 @@ try_shrink_wrapping (edge *entry_edge, bitmap_head *bb_with,\n \n \t    pro = get_immediate_dominator (CDI_DOMINATORS, pro);\n \n-\t    bitmap_set_bit (bb_with, pro->index);\n-\t    vec.quick_push (pro);\n+\t    if (bitmap_set_bit (bb_with, pro->index))\n+\t      vec.quick_push (pro);\n \t  }\n \n       FOR_EACH_EDGE (e, ei, bb->succs)"}]}