{"sha": "2ab20654a24e909b0e44cf3b25e53e64a0a76193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFiMjA2NTRhMjRlOTA5YjBlNDRjZjNiMjVlNTNlNjRhMGE3NjE5Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-18T15:58:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-18T15:58:33Z"}, "message": "[multiple changes]\n\n2004-05-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h:(__mt_alloc::allocate): Minor\n\ttweaks.\n\n2004-05-18  Dhruv Matani  <dhruvbird@gmx.net>\n\n\t* include/ext/mt_allocator.h:(__mt_alloc::allocate): Re-write\n\tallocation loop which removes blocks from the global free list\n\tfrom O(N) to O(1) when the required blocks are <= the number\n\tavailable.\n\nFrom-SVN: r81992", "tree": {"sha": "ed15eac84fcc4b31104f3857ff3dd70bd32b03d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed15eac84fcc4b31104f3857ff3dd70bd32b03d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ab20654a24e909b0e44cf3b25e53e64a0a76193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab20654a24e909b0e44cf3b25e53e64a0a76193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab20654a24e909b0e44cf3b25e53e64a0a76193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab20654a24e909b0e44cf3b25e53e64a0a76193/comments", "author": null, "committer": null, "parents": [{"sha": "70315fcdde3a60e23d39586a9b5a237ff9334a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70315fcdde3a60e23d39586a9b5a237ff9334a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70315fcdde3a60e23d39586a9b5a237ff9334a9e"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "7ec7e3c057d05aa374104e0883b477ff05ff4cb5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab20654a24e909b0e44cf3b25e53e64a0a76193/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab20654a24e909b0e44cf3b25e53e64a0a76193/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ab20654a24e909b0e44cf3b25e53e64a0a76193", "patch": "@@ -1,3 +1,15 @@\n+2004-05-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h:(__mt_alloc::allocate): Minor\n+\ttweaks.\n+\n+2004-05-18  Dhruv Matani  <dhruvbird@gmx.net>\n+\n+\t* include/ext/mt_allocator.h:(__mt_alloc::allocate): Re-write\n+\tallocation loop which removes blocks from the global free list\n+\tfrom O(N) to O(1) when the required blocks are <= the number\n+\tavailable.\n+\n 2004-05-18  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/ext/enc_filebuf.h: Move concept-check macro to class scope."}, {"sha": "9737700bda74d6929f644a3afbab398349ab56ac", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab20654a24e909b0e44cf3b25e53e64a0a76193/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab20654a24e909b0e44cf3b25e53e64a0a76193/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=2ab20654a24e909b0e44cf3b25e53e64a0a76193", "patch": "@@ -342,23 +342,32 @@ namespace __gnu_cxx\n \t\t      __block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t\t      __block = __block->_M_next;\n \t\t    }\n+\t\t  __block->_M_next = NULL;\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (__block_count > __bin._M_free[0])\n-\t\t    __block_count = __bin._M_free[0];\n-\t\t  const size_t __added = __block_count;\n-\t\t  _Block_record* __first = __bin._M_first[0];\n-\t\t  __block = __first;\n-\t\t  --__block_count;\n-\t\t  while (__block_count-- > 0)\n-\t\t    __block = __block->_M_next;\n-\t\t  __bin._M_first[0] = __block->_M_next;\n-\t\t  __bin._M_free[0] -= __added;\n+\t\t  // Is the number of required blocks greater than or\n+\t\t  // equal to the number that can be provided by the\n+\t\t  // global free list?\n+\t\t  __bin._M_first[__thread_id] = __bin._M_first[0];\n+\t\t  if (__block_count >= __bin._M_free[0])\n+\t\t    {\n+\t\t      __bin._M_free[__thread_id] = __bin._M_free[0];\n+\t\t      __bin._M_free[0] = 0;\n+\t\t      __bin._M_first[0] = NULL;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __bin._M_free[__thread_id] = __block_count;\n+\t\t      __bin._M_free[0] -= __block_count;\n+\t\t      --__block_count;\n+\t\t      __block = __bin._M_first[0];\n+\t\t      while (__block_count-- > 0)\n+\t\t\t__block = __block->_M_next;\n+\t\t      __bin._M_first[0] = __block->_M_next;\n+\t\t      __block->_M_next = NULL;\n+\t\t    }\n \t\t  __gthread_mutex_unlock(__bin._M_mutex);\n-\n-\t\t  __bin._M_first[__thread_id] = __first;\n-\t\t  __bin._M_free[__thread_id] += __added;\n \t\t}\n \t    }\n \t  else\n@@ -375,9 +384,8 @@ namespace __gnu_cxx\n \t\t  __block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t\t  __block = __block->_M_next;\n \t\t}\n+\t      __block->_M_next = NULL;\n \t    }\n-\n-\t  __block->_M_next = NULL;\n \t}\n \n       __block = __bin._M_first[__thread_id];"}]}