{"sha": "452aa9c5105180110e7e80aa74044426ca8271cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUyYWE5YzUxMDUxODAxMTBlN2U4MGFhNzQwNDQ0MjZjYTgyNzFjZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-12T15:11:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-12T15:11:17Z"}, "message": "Makefile.in (cgraphunit.o): Add $(EXCEPT_H) dependency.\n\n2012-04-12  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (cgraphunit.o): Add $(EXCEPT_H) dependency.\n\t* cgraph.h (tree_rest_of_compilation): Remove.\n\t* cgraph.c (cgraph_add_new_function): Move ...\n\t* cgraphunit.c (cgraph_add_new_function): ... here.\n\t(tree_rest_of_compilation): Make static.\n\t(cgraph_expand_function): Do not set cgraph_function_flags_ready.\n\t* tree-optimize.c (gate_all_optimizations, pass_all_optimizations,\n\tgate_all_early_local_passes, execute_all_early_local_passes,\n\tpass_early_local_passes, gate_all_early_optimizations,\n\tpass_all_early_optimizations): Move ...\n\t* passes.c (gate_all_optimizations, pass_all_optimizations,\n\tgate_all_early_local_passes, execute_all_early_local_passes,\n\tpass_early_local_passes, gate_all_early_optimizations,\n\tpass_all_early_optimizations): ... here.\n\t* tree-optimize.c (execute_free_datastructures): Remove.\n\t* tree-flow.h (execute_free_datastructures): Remove.\n\t* tree-optimize.c (execute_init_datastructures,\n\tpass_init_datastructures): Move ...\n\t* tree-ssa.c (execute_init_datastructures,\n\tpass_init_datastructures): ... here.\n\t* cfgexpand.c (gimple_expand_cfg): Inline-expand call to\n\texecute_free_datastructures.\n\nFrom-SVN: r186381", "tree": {"sha": "f31f422093f6f8e431012dab5b39fd2c1509b3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31f422093f6f8e431012dab5b39fd2c1509b3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/452aa9c5105180110e7e80aa74044426ca8271cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452aa9c5105180110e7e80aa74044426ca8271cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452aa9c5105180110e7e80aa74044426ca8271cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452aa9c5105180110e7e80aa74044426ca8271cf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acf41a74a832b7225d9e2b60e7294a7c750e9b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf41a74a832b7225d9e2b60e7294a7c750e9b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf41a74a832b7225d9e2b60e7294a7c750e9b97"}], "stats": {"total": 490, "additions": 252, "deletions": 238}, "files": [{"sha": "dbaf800433ff323d865118da67c30733df680d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -1,3 +1,28 @@\n+2012-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (cgraphunit.o): Add $(EXCEPT_H) dependency.\n+\t* cgraph.h (tree_rest_of_compilation): Remove.\n+\t* cgraph.c (cgraph_add_new_function): Move ...\n+\t* cgraphunit.c (cgraph_add_new_function): ... here.\n+\t(tree_rest_of_compilation): Make static.\n+\t(cgraph_expand_function): Do not set cgraph_function_flags_ready.\n+\t* tree-optimize.c (gate_all_optimizations, pass_all_optimizations,\n+\tgate_all_early_local_passes, execute_all_early_local_passes,\n+\tpass_early_local_passes, gate_all_early_optimizations,\n+\tpass_all_early_optimizations): Move ...\n+\t* passes.c (gate_all_optimizations, pass_all_optimizations,\n+\tgate_all_early_local_passes, execute_all_early_local_passes,\n+\tpass_early_local_passes, gate_all_early_optimizations,\n+\tpass_all_early_optimizations): ... here.\n+\t* tree-optimize.c (execute_free_datastructures): Remove.\n+\t* tree-flow.h (execute_free_datastructures): Remove.\n+\t* tree-optimize.c (execute_init_datastructures,\n+\tpass_init_datastructures): Move ...\n+\t* tree-ssa.c (execute_init_datastructures,\n+\tpass_init_datastructures): ... here.\n+\t* cfgexpand.c (gimple_expand_cfg): Inline-expand call to\n+\texecute_free_datastructures.\n+\n 2012-04-12  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* dbgcnt.def (ira_move): New counter."}, {"sha": "0f87ea36a697b3896a6dfa8711d8568af48e85cf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -2922,7 +2922,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H) \\\n    tree-pretty-print.h gimple-pretty-print.h ipa-inline.h $(IPA_UTILS_H) \\\n-   $(LTO_STREAMER_H) output.h $(REGSET_H)\n+   $(LTO_STREAMER_H) output.h $(REGSET_H) $(EXCEPT_H)\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H) \\"}, {"sha": "0c027e298bc90905c9e484ebb26e1c63b159f477", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -4555,7 +4555,11 @@ gimple_expand_cfg (void)\n   if (MAY_HAVE_DEBUG_INSNS)\n     expand_debug_locations ();\n \n-  execute_free_datastructures ();\n+  /* Free stuff we no longer need after GIMPLE optimizations.  */\n+  free_dominance_info (CDI_DOMINATORS);\n+  free_dominance_info (CDI_POST_DOMINATORS);\n+  delete_tree_cfg_annotations ();\n+\n   timevar_push (TV_OUT_OF_SSA);\n   finish_out_of_ssa (&SA);\n   timevar_pop (TV_OUT_OF_SSA);"}, {"sha": "9a2c491a28e442e4bc49e27a56df4b2ea715beb6", "filename": "gcc/cgraph.c", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -2397,89 +2397,6 @@ cgraph_function_body_availability (struct cgraph_node *node)\n   return avail;\n }\n \n-/* Add the function FNDECL to the call graph.\n-   Unlike cgraph_finalize_function, this function is intended to be used\n-   by middle end and allows insertion of new function at arbitrary point\n-   of compilation.  The function can be either in high, low or SSA form\n-   GIMPLE.\n-\n-   The function is assumed to be reachable and have address taken (so no\n-   API breaking optimizations are performed on it).\n-\n-   Main work done by this function is to enqueue the function for later\n-   processing to avoid need the passes to be re-entrant.  */\n-\n-void\n-cgraph_add_new_function (tree fndecl, bool lowered)\n-{\n-  struct cgraph_node *node;\n-  switch (cgraph_state)\n-    {\n-      case CGRAPH_STATE_CONSTRUCTION:\n-\t/* Just enqueue function to be processed at nearest occurrence.  */\n-\tnode = cgraph_create_node (fndecl);\n-\tnode->next_needed = cgraph_new_nodes;\n-\tif (lowered)\n-\t  node->lowered = true;\n-\tcgraph_new_nodes = node;\n-        break;\n-\n-      case CGRAPH_STATE_IPA:\n-      case CGRAPH_STATE_IPA_SSA:\n-      case CGRAPH_STATE_EXPANSION:\n-\t/* Bring the function into finalized state and enqueue for later\n-\t   analyzing and compilation.  */\n-\tnode = cgraph_get_create_node (fndecl);\n-\tnode->local.local = false;\n-\tnode->local.finalized = true;\n-\tnode->reachable = node->needed = true;\n-\tif (!lowered && cgraph_state == CGRAPH_STATE_EXPANSION)\n-\t  {\n-\t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n-\t    current_function_decl = fndecl;\n-\t    gimple_register_cfg_hooks ();\n-\t    bitmap_obstack_initialize (NULL);\n-\t    execute_pass_list (all_lowering_passes);\n-\t    execute_pass_list (pass_early_local_passes.pass.sub);\n-\t    bitmap_obstack_release (NULL);\n-\t    pop_cfun ();\n-\t    current_function_decl = NULL;\n-\n-\t    lowered = true;\n-\t  }\n-\tif (lowered)\n-\t  node->lowered = true;\n-\tnode->next_needed = cgraph_new_nodes;\n-\tcgraph_new_nodes = node;\n-        break;\n-\n-      case CGRAPH_STATE_FINISHED:\n-\t/* At the very end of compilation we have to do all the work up\n-\t   to expansion.  */\n-\tnode = cgraph_create_node (fndecl);\n-\tif (lowered)\n-\t  node->lowered = true;\n-\tcgraph_analyze_function (node);\n-\tpush_cfun (DECL_STRUCT_FUNCTION (fndecl));\n-\tcurrent_function_decl = fndecl;\n-\tgimple_register_cfg_hooks ();\n-\tbitmap_obstack_initialize (NULL);\n-\tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n-\t  execute_pass_list (pass_early_local_passes.pass.sub);\n-\tbitmap_obstack_release (NULL);\n-\ttree_rest_of_compilation (node);\n-\tpop_cfun ();\n-\tcurrent_function_decl = NULL;\n-\tbreak;\n-    }\n-\n-  /* Set a personality if required and we already passed EH lowering.  */\n-  if (lowered\n-      && (function_needs_eh_personality (DECL_STRUCT_FUNCTION (fndecl))\n-\t  == eh_personality_lang))\n-    DECL_FUNCTION_PERSONALITY (fndecl) = lang_hooks.eh_personality ();\n-}\n-\n /* Worker for cgraph_node_can_be_local_p.  */\n static bool\n cgraph_node_cannot_be_local_p_1 (struct cgraph_node *node,"}, {"sha": "8c0c882ac8b3c797a6647f096e9c37735684b7e4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -583,7 +583,6 @@ void cgraph_mark_if_needed (tree);\n void cgraph_analyze_function (struct cgraph_node *);\n void cgraph_finalize_compilation_unit (void);\n void cgraph_optimize (void);\n-void tree_rest_of_compilation (struct cgraph_node *);\n void cgraph_mark_needed_node (struct cgraph_node *);\n void cgraph_mark_address_taken_node (struct cgraph_node *);\n void cgraph_mark_reachable_node (struct cgraph_node *);"}, {"sha": "f603bf500ffbc24a7fda7e7804e23058ec207338", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 91, "deletions": 5, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -142,12 +142,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\"\n #include \"lto-streamer.h\"\n+#include \"except.h\"\n #include \"regset.h\"     /* FIXME: For reg_obstack.  */\n \n static void cgraph_expand_all_functions (void);\n static void cgraph_mark_functions_to_output (void);\n static void cgraph_expand_function (struct cgraph_node *);\n static void cgraph_output_pending_asms (void);\n+static void tree_rest_of_compilation (struct cgraph_node *);\n \n FILE *cgraph_dump_file;\n \n@@ -365,6 +367,92 @@ cgraph_finalize_function (tree decl, bool nested)\n     ggc_collect ();\n }\n \n+/* Add the function FNDECL to the call graph.\n+   Unlike cgraph_finalize_function, this function is intended to be used\n+   by middle end and allows insertion of new function at arbitrary point\n+   of compilation.  The function can be either in high, low or SSA form\n+   GIMPLE.\n+\n+   The function is assumed to be reachable and have address taken (so no\n+   API breaking optimizations are performed on it).\n+\n+   Main work done by this function is to enqueue the function for later\n+   processing to avoid need the passes to be re-entrant.  */\n+\n+void\n+cgraph_add_new_function (tree fndecl, bool lowered)\n+{\n+  struct cgraph_node *node;\n+  switch (cgraph_state)\n+    {\n+      case CGRAPH_STATE_CONSTRUCTION:\n+\t/* Just enqueue function to be processed at nearest occurrence.  */\n+\tnode = cgraph_create_node (fndecl);\n+\tnode->next_needed = cgraph_new_nodes;\n+\tif (lowered)\n+\t  node->lowered = true;\n+\tcgraph_new_nodes = node;\n+        break;\n+\n+      case CGRAPH_STATE_IPA:\n+      case CGRAPH_STATE_IPA_SSA:\n+      case CGRAPH_STATE_EXPANSION:\n+\t/* Bring the function into finalized state and enqueue for later\n+\t   analyzing and compilation.  */\n+\tnode = cgraph_get_create_node (fndecl);\n+\tnode->local.local = false;\n+\tnode->local.finalized = true;\n+\tnode->reachable = node->needed = true;\n+\tif (!lowered && cgraph_state == CGRAPH_STATE_EXPANSION)\n+\t  {\n+\t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n+\t    current_function_decl = fndecl;\n+\t    gimple_register_cfg_hooks ();\n+\t    bitmap_obstack_initialize (NULL);\n+\t    execute_pass_list (all_lowering_passes);\n+\t    execute_pass_list (pass_early_local_passes.pass.sub);\n+\t    bitmap_obstack_release (NULL);\n+\t    pop_cfun ();\n+\t    current_function_decl = NULL;\n+\n+\t    lowered = true;\n+\t  }\n+\tif (lowered)\n+\t  node->lowered = true;\n+\tnode->next_needed = cgraph_new_nodes;\n+\tcgraph_new_nodes = node;\n+        break;\n+\n+      case CGRAPH_STATE_FINISHED:\n+\t/* At the very end of compilation we have to do all the work up\n+\t   to expansion.  */\n+\tnode = cgraph_create_node (fndecl);\n+\tif (lowered)\n+\t  node->lowered = true;\n+\tcgraph_analyze_function (node);\n+\tpush_cfun (DECL_STRUCT_FUNCTION (fndecl));\n+\tcurrent_function_decl = fndecl;\n+\tgimple_register_cfg_hooks ();\n+\tbitmap_obstack_initialize (NULL);\n+\tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n+\t  execute_pass_list (pass_early_local_passes.pass.sub);\n+\tbitmap_obstack_release (NULL);\n+\ttree_rest_of_compilation (node);\n+\tpop_cfun ();\n+\tcurrent_function_decl = NULL;\n+\tbreak;\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  /* Set a personality if required and we already passed EH lowering.  */\n+  if (lowered\n+      && (function_needs_eh_personality (DECL_STRUCT_FUNCTION (fndecl))\n+\t  == eh_personality_lang))\n+    DECL_FUNCTION_PERSONALITY (fndecl) = lang_hooks.eh_personality ();\n+}\n+\n /* C99 extern inline keywords allow changing of declaration after function\n    has been finalized.  We need to re-decide if we want to mark the function as\n    needed then.   */\n@@ -1770,10 +1858,10 @@ assemble_thunks_and_aliases (struct cgraph_node *node)\n       }\n }\n \n-/* For functions-as-trees languages, this performs all optimization and\n-   compilation for FNDECL.  */\n+/* Perform IPA transforms and all further optimizations and compilation\n+   for FNDECL.  */\n \n-void\n+static void\n tree_rest_of_compilation (struct cgraph_node *node)\n {\n   tree fndecl = node->decl;\n@@ -1891,8 +1979,6 @@ cgraph_expand_function (struct cgraph_node *node)\n   /* Eliminate all call edges.  This is important so the GIMPLE_CALL no longer\n      points to the dead function body.  */\n   cgraph_node_remove_callees (node);\n-\n-  cgraph_function_flags_ready = true;\n }\n \n /* Return true when CALLER_DECL should be inlined into CALLEE_DECL.  */"}, {"sha": "ad9307042995e828919bba09d657c5fceffe7431", "filename": "gcc/passes.c", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -281,6 +281,107 @@ finish_optimization_passes (void)\n   timevar_pop (TV_DUMP);\n }\n \n+static unsigned int\n+execute_all_early_local_passes (void)\n+{\n+  /* Once this pass (and its sub-passes) are complete, all functions\n+     will be in SSA form.  Technically this state change is happening\n+     a tad early, since the sub-passes have not yet run, but since\n+     none of the sub-passes are IPA passes and do not create new\n+     functions, this is ok.  We're setting this value for the benefit\n+     of IPA passes that follow.  */\n+  if (cgraph_state < CGRAPH_STATE_IPA_SSA)\n+    cgraph_state = CGRAPH_STATE_IPA_SSA;\n+  return 0;\n+}\n+\n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_early_local_passes (void)\n+{\n+\t  /* Don't bother doing anything if the program has errors.  */\n+  return (!seen_error () && !in_lto_p);\n+}\n+\n+struct simple_ipa_opt_pass pass_early_local_passes =\n+{\n+ {\n+  SIMPLE_IPA_PASS,\n+  \"early_local_cleanups\",\t\t/* name */\n+  gate_all_early_local_passes,\t\t/* gate */\n+  execute_all_early_local_passes,\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_EARLY_LOCAL,\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_remove_functions\t \t\t/* todo_flags_finish */\n+ }\n+};\n+\n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_early_optimizations (void)\n+{\n+  return (optimize >= 1\n+\t  /* Don't bother doing anything if the program has errors.  */\n+\t  && !seen_error ());\n+}\n+\n+struct gimple_opt_pass pass_all_early_optimizations =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"early_optimizations\",\t\t/* name */\n+  gate_all_early_optimizations,\t\t/* gate */\n+  NULL,\t\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_NONE,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n+};\n+\n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_optimizations (void)\n+{\n+  return (optimize >= 1\n+\t  /* Don't bother doing anything if the program has errors.\n+\t     We have to pass down the queue if we already went into SSA */\n+\t  && (!seen_error () || gimple_in_ssa_p (cfun)));\n+}\n+\n+struct gimple_opt_pass pass_all_optimizations =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"*all_optimizations\",\t\t\t/* name */\n+  gate_all_optimizations,\t\t/* gate */\n+  NULL,\t\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_OPTIMIZE,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n+};\n+\n static bool\n gate_rest_of_compilation (void)\n {"}, {"sha": "ba3adb0e059a23e8603d2581823d1c0e67e9ca8c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -853,7 +853,6 @@ rtx addr_for_mem_ref (struct mem_address *, addr_space_t, bool);\n void get_address_description (tree, struct mem_address *);\n tree maybe_fold_tmr (tree);\n \n-unsigned int execute_free_datastructures (void);\n unsigned int execute_fixup_cfg (void);\n bool fixup_noreturn_call (gimple stmt);\n "}, {"sha": "d69a504d7de60c9d550e0b2d9e3ebaa865f71024", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -46,107 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"plugin.h\"\n \n-/* Gate: execute, or not, all of the non-trivial optimizations.  */\n-\n-static bool\n-gate_all_optimizations (void)\n-{\n-  return (optimize >= 1\n-\t  /* Don't bother doing anything if the program has errors.\n-\t     We have to pass down the queue if we already went into SSA */\n-\t  && (!seen_error () || gimple_in_ssa_p (cfun)));\n-}\n-\n-struct gimple_opt_pass pass_all_optimizations =\n-{\n- {\n-  GIMPLE_PASS,\n-  \"*all_optimizations\",\t\t\t/* name */\n-  gate_all_optimizations,\t\t/* gate */\n-  NULL,\t\t\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_OPTIMIZE,\t\t\t\t/* tv_id */\n-  0,\t\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n- }\n-};\n-\n-/* Gate: execute, or not, all of the non-trivial optimizations.  */\n-\n-static bool\n-gate_all_early_local_passes (void)\n-{\n-\t  /* Don't bother doing anything if the program has errors.  */\n-  return (!seen_error () && !in_lto_p);\n-}\n-\n-static unsigned int\n-execute_all_early_local_passes (void)\n-{\n-  /* Once this pass (and its sub-passes) are complete, all functions\n-     will be in SSA form.  Technically this state change is happening\n-     a tad early, since the sub-passes have not yet run, but since\n-     none of the sub-passes are IPA passes and do not create new\n-     functions, this is ok.  We're setting this value for the benefit\n-     of IPA passes that follow.  */\n-  if (cgraph_state < CGRAPH_STATE_IPA_SSA)\n-    cgraph_state = CGRAPH_STATE_IPA_SSA;\n-  return 0;\n-}\n-\n-struct simple_ipa_opt_pass pass_early_local_passes =\n-{\n- {\n-  SIMPLE_IPA_PASS,\n-  \"early_local_cleanups\",\t\t/* name */\n-  gate_all_early_local_passes,\t\t/* gate */\n-  execute_all_early_local_passes,\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_EARLY_LOCAL,\t\t\t/* tv_id */\n-  0,\t\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_remove_functions\t \t\t/* todo_flags_finish */\n- }\n-};\n-\n-/* Gate: execute, or not, all of the non-trivial optimizations.  */\n-\n-static bool\n-gate_all_early_optimizations (void)\n-{\n-  return (optimize >= 1\n-\t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !seen_error ());\n-}\n-\n-struct gimple_opt_pass pass_all_early_optimizations =\n-{\n- {\n-  GIMPLE_PASS,\n-  \"early_optimizations\",\t\t/* name */\n-  gate_all_early_optimizations,\t\t/* gate */\n-  NULL,\t\t\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_NONE,\t\t\t\t/* tv_id */\n-  0,\t\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n- }\n-};\n-\n \n /* Pass: cleanup the CFG just before expanding trees to RTL.\n    This is just a round of label cleanups and case node grouping\n@@ -213,21 +112,6 @@ struct gimple_opt_pass pass_cleanup_cfg_post_optimizing =\n  }\n };\n \n-/* Pass: do the actions required to finish with tree-ssa optimization\n-   passes.  */\n-\n-unsigned int\n-execute_free_datastructures (void)\n-{\n-  free_dominance_info (CDI_DOMINATORS);\n-  free_dominance_info (CDI_POST_DOMINATORS);\n-\n-  /* And get rid of annotations we no longer need.  */\n-  delete_tree_cfg_annotations ();\n-\n-  return 0;\n-}\n-\n /* IPA passes, compilation of earlier functions or inlining\n    might have changed some properties, such as marked functions nothrow,\n    pure, const or noreturn.\n@@ -335,33 +219,3 @@ struct gimple_opt_pass pass_fixup_cfg =\n   0\t\t\t\t\t/* todo_flags_finish */\n  }\n };\n-\n-/* Do the actions required to initialize internal data structures used\n-   in tree-ssa optimization passes.  */\n-\n-static unsigned int\n-execute_init_datastructures (void)\n-{\n-  /* Allocate hash tables, arrays and other structures.  */\n-  init_tree_ssa (cfun);\n-  return 0;\n-}\n-\n-struct gimple_opt_pass pass_init_datastructures =\n-{\n- {\n-  GIMPLE_PASS,\n-  \"*init_datastructures\",\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  execute_init_datastructures,\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_NONE,\t\t\t\t/* tv_id */\n-  PROP_cfg,\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  0\t\t\t\t\t/* todo_flags_finish */\n- }\n-};"}, {"sha": "f399833c5460799508d9893cda013f0a910d2ed3", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/452aa9c5105180110e7e80aa74044426ca8271cf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=452aa9c5105180110e7e80aa74044426ca8271cf", "patch": "@@ -1120,6 +1120,35 @@ init_tree_ssa (struct function *fn)\n   init_phinodes ();\n }\n \n+/* Do the actions required to initialize internal data structures used\n+   in tree-ssa optimization passes.  */\n+\n+static unsigned int\n+execute_init_datastructures (void)\n+{\n+  /* Allocate hash tables, arrays and other structures.  */\n+  init_tree_ssa (cfun);\n+  return 0;\n+}\n+\n+struct gimple_opt_pass pass_init_datastructures =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"*init_datastructures\",\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  execute_init_datastructures,\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_NONE,\t\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n+};\n \n /* Deallocate memory associated with SSA data structures for FNDECL.  */\n "}]}