{"sha": "29c5134ac901bba223eb66866cd4be7d30194dc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljNTEzNGFjOTAxYmJhMjIzZWI2Njg2NmNkNGJlN2QzMDE5NGRjMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-07T14:20:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-07T14:20:16Z"}, "message": "tree-vrp.c (simplify_conversion_using_ranges): New function.\n\n2011-07-07  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (simplify_conversion_using_ranges): New function.\n\t(simplify_stmt_using_ranges): Call it.\n\n\t* gcc.dg/tree-ssa/vrp58.c: New testcase.\n\t* gcc.dg/tree-ssa/scev-cast.c: Adjust.\n\nFrom-SVN: r175975", "tree": {"sha": "f136ffc88ee435e9cda3b37d111d3f10497c5b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f136ffc88ee435e9cda3b37d111d3f10497c5b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c5134ac901bba223eb66866cd4be7d30194dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c5134ac901bba223eb66866cd4be7d30194dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c5134ac901bba223eb66866cd4be7d30194dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c5134ac901bba223eb66866cd4be7d30194dc3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0816a42a1fa5f3fa99d5756b35c9e7a94cbdb86e"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "f3b7c1106c52831e7c4bb54d4d9a583d4541ae62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c5134ac901bba223eb66866cd4be7d30194dc3", "patch": "@@ -1,3 +1,8 @@\n+2011-07-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (simplify_conversion_using_ranges): New function.\n+\t(simplify_stmt_using_ranges): Call it.\n+\n 2011-07-07  Kai Tietz  <ktietz@redhat.com>\n \n \t* tree-ssa-forwprop.c (truth_valued_ssa_name): New function."}, {"sha": "910a33368f699a126b16c9938cbd919730034357", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29c5134ac901bba223eb66866cd4be7d30194dc3", "patch": "@@ -1,3 +1,8 @@\n+2011-07-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/vrp58.c: New testcase.\n+\t* gcc.dg/tree-ssa/scev-cast.c: Adjust.\n+\n 2011-07-07  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/binop-notxor1.c: New test."}, {"sha": "ff645fac2ca471f5642d03451faa729490a093e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-cast.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-cast.c?ref=29c5134ac901bba223eb66866cd4be7d30194dc3", "patch": "@@ -12,7 +12,7 @@ void tst(void)\n \n   for (i = 0; i < 129; i++) /* This truncation to char has to be preserved.  */\n     blas ((signed char) i);\n-  for (i = 0; i < 128; i++) /* This one is not necessary, but nothing eliminates it.  */\n+  for (i = 0; i < 128; i++) /* This one is not necessary, VRP eliminates it.  */\n     blas ((signed char) i);\n   for (i = 0; i < 127; i++) /* This one is not necessary, IVOPTS eliminates it.  */\n     blas ((signed char) i);\n@@ -23,6 +23,6 @@ void tst(void)\n }\n \n /* { dg-final { scan-tree-dump-times \"& 255\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"= \\\\(signed char\\\\)\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\\\(signed char\\\\)\" 1 \"optimized\" } } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "7da3896b5b26fe955018a61d5c5072d65cc57004", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp58.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp58.c?ref=29c5134ac901bba223eb66866cd4be7d30194dc3", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+\n+long long\n+foo (long long a, signed char b, signed char c)\n+{\n+  int bc = b * c;\n+  return a + (short)bc;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Folded into\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "68998b379919ea2aed8bcdc14050858fda843087", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5134ac901bba223eb66866cd4be7d30194dc3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=29c5134ac901bba223eb66866cd4be7d30194dc3", "patch": "@@ -7342,6 +7342,39 @@ simplify_switch_using_ranges (gimple stmt)\n   return false;\n }\n \n+/* Simplify an integral conversion from an SSA name in STMT.  */\n+\n+static bool\n+simplify_conversion_using_ranges (gimple stmt)\n+{\n+  tree rhs1 = gimple_assign_rhs1 (stmt);\n+  gimple def_stmt = SSA_NAME_DEF_STMT (rhs1);\n+  value_range_t *final, *inner;\n+\n+  /* Obtain final and inner value-ranges for a conversion\n+     sequence (final-type)(intermediate-type)inner-type.  */\n+  final = get_value_range (gimple_assign_lhs (stmt));\n+  if (final->type != VR_RANGE)\n+    return false;\n+  if (!is_gimple_assign (def_stmt)\n+      || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+    return false;\n+  rhs1 = gimple_assign_rhs1 (def_stmt);\n+  if (TREE_CODE (rhs1) != SSA_NAME)\n+    return false;\n+  inner = get_value_range (rhs1);\n+  if (inner->type != VR_RANGE)\n+    return false;\n+  /* If the value-range is preserved by the conversion sequence strip\n+     the intermediate conversion.  */\n+  if (!tree_int_cst_equal (final->min, inner->min)\n+      || !tree_int_cst_equal (final->max, inner->max))\n+    return false;\n+  gimple_assign_set_rhs1 (stmt, rhs1);\n+  update_stmt (stmt);\n+  return true;\n+}\n+\n /* Simplify STMT using ranges if possible.  */\n \n static bool\n@@ -7351,6 +7384,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n   if (is_gimple_assign (stmt))\n     {\n       enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n+      tree rhs1 = gimple_assign_rhs1 (stmt);\n \n       switch (rhs_code)\n \t{\n@@ -7364,7 +7398,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t     or identity if the RHS is zero or one, and the LHS are known\n \t     to be boolean values.  Transform all TRUTH_*_EXPR into\n              BIT_*_EXPR if both arguments are known to be boolean values.  */\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t    return simplify_truth_ops_using_ranges (gsi, stmt);\n \t  break;\n \n@@ -7373,15 +7407,15 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t than zero and the second operand is an exact power of two.  */\n \tcase TRUNC_DIV_EXPR:\n \tcase TRUNC_MOD_EXPR:\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt)))\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n \t      && integer_pow2p (gimple_assign_rhs2 (stmt)))\n \t    return simplify_div_or_mod_using_ranges (stmt);\n \t  break;\n \n       /* Transform ABS (X) into X or -X as appropriate.  */\n \tcase ABS_EXPR:\n-\t  if (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n-\t      && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n+\t  if (TREE_CODE (rhs1) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t    return simplify_abs_using_ranges (stmt);\n \t  break;\n \n@@ -7390,10 +7424,16 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t  /* Optimize away BIT_AND_EXPR and BIT_IOR_EXPR\n \t     if all the bits being cleared are already cleared or\n \t     all the bits being set are already set.  */\n-\t  if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t    return simplify_bit_ops_using_ranges (gsi, stmt);\n \t  break;\n \n+\tCASE_CONVERT:\n+\t  if (TREE_CODE (rhs1) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n+\t    return simplify_conversion_using_ranges (stmt);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}]}