{"sha": "cede9502322f2707ea29212fb115116be3c7d5a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkZTk1MDIzMjJmMjcwN2VhMjkyMTJmYjExNTExNmJlM2M3ZDVhOA==", "commit": {"author": {"name": "Jim Meyering", "email": "meyering@redhat.com", "date": "2011-04-18T19:20:53Z"}, "committer": {"name": "Jim Meyering", "email": "meyering@gcc.gnu.org", "date": "2011-04-18T19:20:53Z"}, "message": "convert each use of gfc_free (p) to free (p)\n\nDo that by running this command:\n  perl -pi -e    's/\\bgfc_free ?\\(/free (/' \\\n    $(git grep -El '\\bgfc_free ?\\(')\nwhich also corrects the few uses that lacked a space between\nthe function name and the open parenthesis.\nManually undo the change to the function definition itself\nand its prototype.  They'll be removed next.\n* array.c (gfc_free_array_spec, gfc_set_array_spec): s/gfc_free/free/\n* constructor.c (node_free): Likewise.\n* cpp.c (dump_queued_macros): Likewise.\n* data.c (gfc_assign_data_value): Likewise.\n* decl.c (free_variable, free_value, gfc_free_data): Likewise.\n(gfc_free_data_all, match_old_style_init): Likewise.\n(gfc_set_constant_character_len, gfc_free_enum_history, NUM_DECL):\nLikewise.\n(gfc_match_modproc): Likewise.\n* dependency.c (check_section_vs_section): Likewise.\n* error.c (gfc_pop_error, gfc_free_error): Likewise.\n* expr.c (free_expr0, gfc_free_expr, gfc_free_actual_arglist): Likewise.\n(gfc_free_ref_list, gfc_replace_expr, gfc_copy_ref): Likewise.\n(find_substring_ref, gfc_simplify_expr, gfc_check_assign_symbol):\nLikewise.\n* frontend-passes.c (gfc_run_passes, cfe_expr_0): Likewise.\n(strip_function_call, optimize_comparison): Likewise.\n* interface.c (gfc_free_interface, arginfo, check_interface0): Likewise.\n(CHECK_OS_COMPARISON, gfc_extend_assign, gfc_free_formal_arglist):\nLikewise.\n* intrinsic.c (gfc_intrinsic_done_1, gfc_convert_type_warn): Likewise.\n(gfc_convert_chartype): Likewise.\n* io.c (gfc_free_open, compare_to_allowed_values, gfc_free_close):\nLikewise.\n(gfc_free_filepos, gfc_free_dt, gfc_free_inquire): Likewise.\n* match.c (gfc_free_iterator, gfc_match_associate): Likewise.\n(gfc_free_alloc_list, gfc_free_namelist, gfc_free_equiv_until):\nLikewise.\n(free_case, gfc_free_forall_iterator): Likewise.\n* misc.c: Likewise.\n* module.c (free_pi_tree, resolve_fixups, free_rename): Likewise.\n(free_true_name, peek_atom, mio_allocated_wide_string): Likewise.\n(mio_pool_string, mio_internal_string, mio_gmp_integer): Likewise.\n(mio_gmp_real, mio_expr, mio_typebound_proc): Likewise.\n(mio_full_typebound_tree, skip_list, load_equiv): Likewise.\n(free_written_common, gfc_use_module, gfc_free_use_stmts): Likewise.\n* openmp.c (gfc_free_omp_clauses): Likewise.\n* options.c (gfc_post_options): Likewise.\n* parse.c (select_type_pop, parse_omp_structured_block): Likewise.\n* primary.c (gfc_free_structure_ctor_component): Likewise.\n* resolve.c (resolve_structure_cons, check_host_association): Likewise.\n(gfc_resolve_forall, resolve_equivalence): Likewise.\n* scanner.c (gfc_scanner_done_1, gfc_release_include_path): Likewise.\n(gfc_define_undef_line, preprocessor_line, include_line): Likewise.\n(load_file, gfc_read_orig_filename): Likewise.\n* simplify.c (simplify_transformation_to_array): Likewise.\n(gfc_simplify_ibits, simplify_shift, gfc_simplify_ishftc, STRING):\nLikewise.\n(gfc_simplify_compiler_options): Likewise.\n* st.c (gfc_free_statement, gfc_free_statements): Likewise.\n(gfc_free_association_list): Likewise.\n* symbol.c (free_components, gfc_free_st_label, free_st_labels):\nLikewise.\n(gfc_delete_symtree, gfc_free_symbol, gfc_undo_symbols): Likewise.\n(free_old_symbol, gfc_commit_symbols, free_tb_tree): Likewise.\n(free_common_tree, free_uop_tree, free_sym_tree): Likewise.\n(gfc_free_dt_list, gfc_free_equiv_infos, gfc_free_equiv_lists):\nLikewise.\n(gfc_free_finalizer, gfc_free_charlen, free_entry_list): Likewise.\n(gfc_free_namespace): Likewise.\n* trans-array.c (gfc_free_ss, gfc_trans_array_bound_check): Likewise.\n(gfc_conv_array_ref, gfc_conv_ss_startstride): Likewise.\n(gfc_trans_dummy_array_bias, gfc_conv_array_parameter): Likewise.\n* trans-common.c (get_init_field, create_common): Likewise.\n* trans-const.c (gfc_build_wide_string_const): Likewise.\n(gfc_conv_string_init): Likewise.\n* trans-decl.c (gfc_generate_function_code): Likewise.\n* trans-expr.c (gfc_conv_substring, gfc_free_interface_mapping):\nLikewise.\n(SCALAR_POINTER, gfc_conv_statement_function): Likewise.\n(gfc_trans_subarray_assign): Likewise.\n* trans-intrinsic.c (conv_generic_with_optional_char_arg): Likewise.\n* trans-io.c (gfc_trans_io_runtime_check, set_string): Likewise.\n(transfer_namelist_element, transfer_array_component): Likewise.\n* trans-openmp.c (gfc_trans_omp_array_reduction): Likewise.\n* trans-stmt.c (cleanup_forall_symtrees, gfc_trans_forall_1): Likewise.\n* trans.c (trans_runtime_error_vararg, gfc_restore_backend_locus):\nLikewise.\n\nFrom-SVN: r172666", "tree": {"sha": "0f2ea5a4a2af7b9e975f9465ef49db548807aa8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2ea5a4a2af7b9e975f9465ef49db548807aa8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cede9502322f2707ea29212fb115116be3c7d5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cede9502322f2707ea29212fb115116be3c7d5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cede9502322f2707ea29212fb115116be3c7d5a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cede9502322f2707ea29212fb115116be3c7d5a8/comments", "author": null, "committer": null, "parents": [{"sha": "5cc124fe7db7ef72ecf8be72c23c2a78dce7f9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc124fe7db7ef72ecf8be72c23c2a78dce7f9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc124fe7db7ef72ecf8be72c23c2a78dce7f9e8"}], "stats": {"total": 513, "additions": 301, "deletions": 212}, "files": [{"sha": "51e2515244a05ff851e949fb783c1c9b9e26536c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1,3 +1,92 @@\n+2011-04-18  Jim Meyering  <meyering@redhat.com>\n+\n+\tconvert each use of gfc_free (p) to free (p)\n+\tDo that by running this command:\n+\t  perl -pi -e    's/\\bgfc_free ?\\(/free (/' \\\n+\t    $(git grep -El '\\bgfc_free ?\\(')\n+\twhich also corrects the few uses that lacked a space between\n+\tthe function name and the open parenthesis.\n+\tManually undo the change to the function definition itself\n+\tand its prototype.  They'll be removed next.\n+\t* array.c (gfc_free_array_spec, gfc_set_array_spec): s/gfc_free/free/\n+\t* constructor.c (node_free): Likewise.\n+\t* cpp.c (dump_queued_macros): Likewise.\n+\t* data.c (gfc_assign_data_value): Likewise.\n+\t* decl.c (free_variable, free_value, gfc_free_data): Likewise.\n+\t(gfc_free_data_all, match_old_style_init): Likewise.\n+\t(gfc_set_constant_character_len, gfc_free_enum_history, NUM_DECL):\n+\tLikewise.\n+\t(gfc_match_modproc): Likewise.\n+\t* dependency.c (check_section_vs_section): Likewise.\n+\t* error.c (gfc_pop_error, gfc_free_error): Likewise.\n+\t* expr.c (free_expr0, gfc_free_expr, gfc_free_actual_arglist): Likewise.\n+\t(gfc_free_ref_list, gfc_replace_expr, gfc_copy_ref): Likewise.\n+\t(find_substring_ref, gfc_simplify_expr, gfc_check_assign_symbol):\n+\tLikewise.\n+\t* frontend-passes.c (gfc_run_passes, cfe_expr_0): Likewise.\n+\t(strip_function_call, optimize_comparison): Likewise.\n+\t* interface.c (gfc_free_interface, arginfo, check_interface0): Likewise.\n+\t(CHECK_OS_COMPARISON, gfc_extend_assign, gfc_free_formal_arglist):\n+\tLikewise.\n+\t* intrinsic.c (gfc_intrinsic_done_1, gfc_convert_type_warn): Likewise.\n+\t(gfc_convert_chartype): Likewise.\n+\t* io.c (gfc_free_open, compare_to_allowed_values, gfc_free_close):\n+\tLikewise.\n+\t(gfc_free_filepos, gfc_free_dt, gfc_free_inquire): Likewise.\n+\t* match.c (gfc_free_iterator, gfc_match_associate): Likewise.\n+\t(gfc_free_alloc_list, gfc_free_namelist, gfc_free_equiv_until):\n+\tLikewise.\n+\t(free_case, gfc_free_forall_iterator): Likewise.\n+\t* misc.c: Likewise.\n+\t* module.c (free_pi_tree, resolve_fixups, free_rename): Likewise.\n+\t(free_true_name, peek_atom, mio_allocated_wide_string): Likewise.\n+\t(mio_pool_string, mio_internal_string, mio_gmp_integer): Likewise.\n+\t(mio_gmp_real, mio_expr, mio_typebound_proc): Likewise.\n+\t(mio_full_typebound_tree, skip_list, load_equiv): Likewise.\n+\t(free_written_common, gfc_use_module, gfc_free_use_stmts): Likewise.\n+\t* openmp.c (gfc_free_omp_clauses): Likewise.\n+\t* options.c (gfc_post_options): Likewise.\n+\t* parse.c (select_type_pop, parse_omp_structured_block): Likewise.\n+\t* primary.c (gfc_free_structure_ctor_component): Likewise.\n+\t* resolve.c (resolve_structure_cons, check_host_association): Likewise.\n+\t(gfc_resolve_forall, resolve_equivalence): Likewise.\n+\t* scanner.c (gfc_scanner_done_1, gfc_release_include_path): Likewise.\n+\t(gfc_define_undef_line, preprocessor_line, include_line): Likewise.\n+\t(load_file, gfc_read_orig_filename): Likewise.\n+\t* simplify.c (simplify_transformation_to_array): Likewise.\n+\t(gfc_simplify_ibits, simplify_shift, gfc_simplify_ishftc, STRING):\n+\tLikewise.\n+\t(gfc_simplify_compiler_options): Likewise.\n+\t* st.c (gfc_free_statement, gfc_free_statements): Likewise.\n+\t(gfc_free_association_list): Likewise.\n+\t* symbol.c (free_components, gfc_free_st_label, free_st_labels):\n+\tLikewise.\n+\t(gfc_delete_symtree, gfc_free_symbol, gfc_undo_symbols): Likewise.\n+\t(free_old_symbol, gfc_commit_symbols, free_tb_tree): Likewise.\n+\t(free_common_tree, free_uop_tree, free_sym_tree): Likewise.\n+\t(gfc_free_dt_list, gfc_free_equiv_infos, gfc_free_equiv_lists):\n+\tLikewise.\n+\t(gfc_free_finalizer, gfc_free_charlen, free_entry_list): Likewise.\n+\t(gfc_free_namespace): Likewise.\n+\t* trans-array.c (gfc_free_ss, gfc_trans_array_bound_check): Likewise.\n+\t(gfc_conv_array_ref, gfc_conv_ss_startstride): Likewise.\n+\t(gfc_trans_dummy_array_bias, gfc_conv_array_parameter): Likewise.\n+\t* trans-common.c (get_init_field, create_common): Likewise.\n+\t* trans-const.c (gfc_build_wide_string_const): Likewise.\n+\t(gfc_conv_string_init): Likewise.\n+\t* trans-decl.c (gfc_generate_function_code): Likewise.\n+\t* trans-expr.c (gfc_conv_substring, gfc_free_interface_mapping):\n+\tLikewise.\n+\t(SCALAR_POINTER, gfc_conv_statement_function): Likewise.\n+\t(gfc_trans_subarray_assign): Likewise.\n+\t* trans-intrinsic.c (conv_generic_with_optional_char_arg): Likewise.\n+\t* trans-io.c (gfc_trans_io_runtime_check, set_string): Likewise.\n+\t(transfer_namelist_element, transfer_array_component): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_array_reduction): Likewise.\n+\t* trans-stmt.c (cleanup_forall_symtrees, gfc_trans_forall_1): Likewise.\n+\t* trans.c (trans_runtime_error_vararg, gfc_restore_backend_locus):\n+\tLikewise.\n+\n 2011-04-15  Jim Meyering  <meyering@redhat.com>\n \n \tgfortran: remove cpp definition of free, ..."}, {"sha": "e93cf9bcc9f991cc73027cdbd7c8a5e4f67a7b48", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -289,7 +289,7 @@ gfc_free_array_spec (gfc_array_spec *as)\n       gfc_free_expr (as->upper[i]);\n     }\n \n-  gfc_free (as);\n+  free (as);\n }\n \n \n@@ -757,7 +757,7 @@ gfc_set_array_spec (gfc_symbol *sym, gfc_array_spec *as, locus *error_loc)\n \t}\n     }\n \n-  gfc_free (as);\n+  free (as);\n   return SUCCESS;\n }\n "}, {"sha": "97399812d32c528f6c776bb9fd965138c3ae486c", "filename": "gcc/fortran/constructor.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fconstructor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fconstructor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fconstructor.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -37,7 +37,7 @@ node_free (splay_tree_value value)\n \n   mpz_clear (c->offset);\n \n-  gfc_free (c);\n+  free (c);\n }\n \n "}, {"sha": "0dece6cd536fb7b7e45b3a6bc0518bfbd5342eae", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1109,8 +1109,8 @@ dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       print.src_line++;\n       oq = q;\n       q = q->next;\n-      gfc_free (oq->macro);\n-      gfc_free (oq);\n+      free (oq->macro);\n+      free (oq);\n     }\n   cpp_define_queue = NULL;\n   for (q = cpp_undefine_queue; q;)\n@@ -1120,8 +1120,8 @@ dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       print.src_line++;\n       oq = q;\n       q = q->next;\n-      gfc_free (oq->macro);\n-      gfc_free (oq);\n+      free (oq->macro);\n+      free (oq);\n     }\n   cpp_undefine_queue = NULL;\n }"}, {"sha": "137a939d505f7117ad3f664715b79d16e7fa3a2a", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -235,7 +235,7 @@ gfc_assign_data_value (gfc_expr *lvalue, gfc_expr *rvalue, mpz_t index)\n \t    {\n \t      gcc_assert (ref->u.ar.as->corank > 0);\n \t      if (init == NULL)\n-\t\tgfc_free (expr);\n+\t\tfree (expr);\n \t      continue;\n \t    }\n "}, {"sha": "9efe01aac2c1c084b3b6fe172339b5948b1dfdfc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -119,7 +119,7 @@ free_variable (gfc_data_variable *p)\n       gfc_free_expr (p->expr);\n       gfc_free_iterator (&p->iter, 0);\n       free_variable (p->list);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -136,7 +136,7 @@ free_value (gfc_data_value *p)\n       q = p->next;\n       mpz_clear (p->repeat);\n       gfc_free_expr (p->expr);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -153,7 +153,7 @@ gfc_free_data (gfc_data *p)\n       q = p->next;\n       free_variable (p->var);\n       free_value (p->value);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -168,7 +168,7 @@ gfc_free_data_all (gfc_namespace *ns)\n   for (;ns->data;)\n     {\n       d = ns->data->next;\n-      gfc_free (ns->data);\n+      free (ns->data);\n       ns->data = d;\n     }\n }\n@@ -491,14 +491,14 @@ match_old_style_init (const char *name)\n   m = top_val_list (newdata);\n   if (m != MATCH_YES)\n     {\n-      gfc_free (newdata);\n+      free (newdata);\n       return m;\n     }\n \n   if (gfc_pure (NULL))\n     {\n       gfc_error (\"Initialization at %C is not allowed in a PURE procedure\");\n-      gfc_free (newdata);\n+      free (newdata);\n       return MATCH_ERROR;\n     }\n \n@@ -508,7 +508,7 @@ match_old_style_init (const char *name)\n   /* Mark the variable as having appeared in a data statement.  */\n   if (gfc_add_data (&sym->attr, sym->name, &sym->declared_at) == FAILURE)\n     {\n-      gfc_free (newdata);\n+      free (newdata);\n       return MATCH_ERROR;\n     }\n \n@@ -1220,7 +1220,7 @@ gfc_set_constant_character_len (int len, gfc_expr *expr, int check_len)\n \t\t\t&expr->where, slen, check_len);\n \n       s[len] = '\\0';\n-      gfc_free (expr->value.character.string);\n+      free (expr->value.character.string);\n       expr->value.character.string = s;\n       expr->value.character.length = len;\n     }\n@@ -1275,7 +1275,7 @@ gfc_free_enum_history (void)\n   while (current != NULL)\n     {\n       next = current->next;\n-      gfc_free (current);\n+      free (current);\n       current = next;\n     }\n   max_enum = NULL;\n@@ -3335,7 +3335,7 @@ match_attr_spec (void)\n \t  else if (m == MATCH_YES)\n \t    {\n \t      merge_array_spec (as, current_as, false);\n-\t      gfc_free (as);\n+\t      free (as);\n \t    }\n \n \t  if (m == MATCH_NO)\n@@ -7080,7 +7080,7 @@ gfc_match_modproc (void)\n   while (interface != old_interface_head)\n   {\n     gfc_interface *i = interface->next;\n-    gfc_free (interface);\n+    free (interface);\n     interface = i;\n   }\n "}, {"sha": "d237a92a62e5093e62292320ff3566d86a98fc7f", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1159,7 +1159,7 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n   else\n     start_comparison = -2;\n       \n-  gfc_free (one_expr);\n+  free (one_expr);\n \n   /* Determine LHS upper and lower bounds.  */\n   if (l_dir == 1)"}, {"sha": "aee9173b66973844248229666edc7a4a66cdd4d5", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1050,7 +1050,7 @@ gfc_pop_error (gfc_error_buf *err)\n       size_t len = strlen (err->message) + 1;\n       gcc_assert (len <= error_buffer.allocated);\n       memcpy (error_buffer.message, err->message, len);\n-      gfc_free (err->message);\n+      free (err->message);\n     }\n }\n \n@@ -1061,7 +1061,7 @@ void\n gfc_free_error (gfc_error_buf *err)\n {\n   if (err->flag)\n-    gfc_free (err->message);\n+    free (err->message);\n }\n \n "}, {"sha": "1e316534388f7db6b1b20d4aef23186a1ee82d87", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -421,7 +421,7 @@ free_expr0 (gfc_expr *e)\n \t  break;\n \n \tcase BT_CHARACTER:\n-\t  gfc_free (e->value.character.string);\n+\t  free (e->value.character.string);\n \t  break;\n \n \tcase BT_COMPLEX:\n@@ -434,7 +434,7 @@ free_expr0 (gfc_expr *e)\n \n       /* Free the representation.  */\n       if (e->representation.string)\n-\tgfc_free (e->representation.string);\n+\tfree (e->representation.string);\n \n       break;\n \n@@ -463,7 +463,7 @@ free_expr0 (gfc_expr *e)\n       break;\n \n     case EXPR_SUBSTRING:\n-      gfc_free (e->value.character.string);\n+      free (e->value.character.string);\n       break;\n \n     case EXPR_NULL:\n@@ -479,7 +479,7 @@ free_expr0 (gfc_expr *e)\n       for (n = 0; n < e->rank; n++)\n \tmpz_clear (e->shape[n]);\n \n-      gfc_free (e->shape);\n+      free (e->shape);\n     }\n \n   gfc_free_ref_list (e->ref);\n@@ -496,7 +496,7 @@ gfc_free_expr (gfc_expr *e)\n   if (e == NULL)\n     return;\n   free_expr0 (e);\n-  gfc_free (e);\n+  free (e);\n }\n \n \n@@ -511,7 +511,7 @@ gfc_free_actual_arglist (gfc_actual_arglist *a1)\n     {\n       a2 = a1->next;\n       gfc_free_expr (a1->expr);\n-      gfc_free (a1);\n+      free (a1);\n       a1 = a2;\n     }\n }\n@@ -579,7 +579,7 @@ gfc_free_ref_list (gfc_ref *p)\n \t  break;\n \t}\n \n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -591,7 +591,7 @@ gfc_replace_expr (gfc_expr *dest, gfc_expr *src)\n {\n   free_expr0 (dest);\n   *dest = *src;\n-  gfc_free (src);\n+  free (src);\n }\n \n \n@@ -640,7 +640,7 @@ gfc_copy_ref (gfc_ref *src)\n     case REF_ARRAY:\n       ar = gfc_copy_array_ref (&src->u.ar);\n       dest->u.ar = *ar;\n-      gfc_free (ar);\n+      free (ar);\n       break;\n \n     case REF_COMPONENT:\n@@ -1566,7 +1566,7 @@ find_substring_ref (gfc_expr *p, gfc_expr **newp)\n     return FAILURE;\n \n   *newp = gfc_copy_expr (p);\n-  gfc_free ((*newp)->value.character.string);\n+  free ((*newp)->value.character.string);\n \n   end = (int) mpz_get_ui (p->ref->u.ss.end->value.integer);\n   start = (int) mpz_get_ui (p->ref->u.ss.start->value.integer);\n@@ -1840,7 +1840,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t  memcpy (s, p->value.character.string + start,\n \t\t  (end - start) * sizeof (gfc_char_t));\n \t  s[end - start + 1] = '\\0';  /* TODO: C-style string.  */\n-\t  gfc_free (p->value.character.string);\n+\t  free (p->value.character.string);\n \t  p->value.character.string = s;\n \t  p->value.character.length = end - start;\n \t  p->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n@@ -3594,7 +3594,7 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   else\n     r = gfc_check_assign (&lvalue, rvalue, 1);\n \n-  gfc_free (lvalue.symtree);\n+  free (lvalue.symtree);\n \n   if (r == FAILURE)\n     return r;"}, {"sha": "9d1cc3aac149977966e5c44b5f1888c1ee27aa92", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -73,7 +73,7 @@ gfc_run_passes (gfc_namespace *ns)\n \n       /* FIXME: The following should be XDELETEVEC(expr_array);\n       but we cannot do that because it depends on free.  */\n-      gfc_free (expr_array);\n+      free (expr_array);\n     }\n }\n \n@@ -333,7 +333,7 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n \t      if (gfc_option.warn_function_elimination)\n \t\twarn_function_elimination (*(expr_array[j]));\n \n-\t      gfc_free (*(expr_array[j]));\n+\t      free (*(expr_array[j]));\n \t      *(expr_array[j]) = gfc_copy_expr (newvar);\n \t    }\n \t}\n@@ -501,7 +501,7 @@ strip_function_call (gfc_expr *e)\n \n   /* Graft the argument expression onto the original function.  */\n   *e = *e1;\n-  gfc_free (e1);\n+  free (e1);\n \n }\n \n@@ -656,8 +656,8 @@ optimize_comparison (gfc_expr *e, gfc_intrinsic_op op)\n \t\t    return false;\n \t\t  else\n \t\t    {\n-\t\t      gfc_free (op1_left);\n-\t\t      gfc_free (op2_left);\n+\t\t      free (op1_left);\n+\t\t      free (op2_left);\n \t\t      if (firstarg)\n \t\t\t{\n \t\t\t  firstarg->expr = op1_right;\n@@ -674,8 +674,8 @@ optimize_comparison (gfc_expr *e, gfc_intrinsic_op op)\n \t\t}\n \t      if (gfc_dep_compare_expr (op1_right, op2_right) == 0)\n \t\t{\n-\t\t  gfc_free (op1_right);\n-\t\t  gfc_free (op2_right);\n+\t\t  free (op1_right);\n+\t\t  free (op2_right);\n \t\t  if (firstarg)\n \t\t    {\n \t\t      firstarg->expr = op1_left;\n@@ -734,8 +734,8 @@ optimize_comparison (gfc_expr *e, gfc_intrinsic_op op)\n \n \t  /* Replace the expression by a constant expression.  The typespec\n \t     and where remains the way it is.  */\n-\t  gfc_free (op1);\n-\t  gfc_free (op2);\n+\t  free (op1);\n+\t  free (op2);\n \t  e->expr_type = EXPR_CONSTANT;\n \t  e->value.logical = result;\n \t  return true;"}, {"sha": "872d4898ff668025fa8484daa644d682a366d3db", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -87,7 +87,7 @@ gfc_free_interface (gfc_interface *intr)\n   for (; intr; intr = next)\n     {\n       next = intr->next;\n-      gfc_free (intr);\n+      free (intr);\n     }\n }\n \n@@ -912,7 +912,7 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n       k++;\n     }\n \n-  gfc_free (arg);\n+  free (arg);\n \n   return rc;\n }\n@@ -1147,7 +1147,7 @@ check_interface0 (gfc_interface *p, const char *interface_name)\n \t    {\n \t      /* Duplicate interface.  */\n \t      qlast->next = q->next;\n-\t      gfc_free (q);\n+\t      free (q);\n \t      q = qlast->next;\n \t    }\n \t}\n@@ -3142,8 +3142,8 @@ gfc_extend_expr (gfc_expr *e, bool *real_error)\n \n       /* Don't use gfc_free_actual_arglist().  */\n       if (actual->next != NULL)\n-\tgfc_free (actual->next);\n-      gfc_free (actual);\n+\tfree (actual->next);\n+      free (actual);\n \n       return FAILURE;\n     }\n@@ -3234,8 +3234,8 @@ gfc_extend_assign (gfc_code *c, gfc_namespace *ns)\n \t  return SUCCESS;\n \t}\n \n-      gfc_free (actual->next);\n-      gfc_free (actual);\n+      free (actual->next);\n+      free (actual);\n       return FAILURE;\n     }\n \n@@ -3436,6 +3436,6 @@ gfc_free_formal_arglist (gfc_formal_arglist *p)\n   for (; p; p = q)\n     {\n       q = p->next;\n-      gfc_free (p);\n+      free (p);\n     }\n }"}, {"sha": "c0eeb6dd297818170d105028161e521952326672", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -3408,9 +3408,9 @@ gfc_intrinsic_init_1 (void)\n void\n gfc_intrinsic_done_1 (void)\n {\n-  gfc_free (functions);\n-  gfc_free (conversion);\n-  gfc_free (char_conversions);\n+  free (functions);\n+  free (conversion);\n+  free (char_conversions);\n   gfc_free_namespace (gfc_intrinsic_namespace);\n }\n \n@@ -4368,7 +4368,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \n   *expr = *new_expr;\n \n-  gfc_free (new_expr);\n+  free (new_expr);\n   expr->ts = *ts;\n \n   if (gfc_is_constant_expr (expr->value.function.actual->expr)\n@@ -4437,7 +4437,7 @@ gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n \n   *expr = *new_expr;\n \n-  gfc_free (new_expr);\n+  free (new_expr);\n   expr->ts = *ts;\n \n   if (gfc_is_constant_expr (expr->value.function.actual->expr)"}, {"sha": "df9ee1e979357ef204ae67ff24bc851476b3ca68", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1640,7 +1640,7 @@ gfc_free_open (gfc_open *open)\n   gfc_free_expr (open->convert);\n   gfc_free_expr (open->asynchronous);\n   gfc_free_expr (open->newunit);\n-  gfc_free (open);\n+  free (open);\n }\n \n \n@@ -1764,15 +1764,15 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n       char *s = gfc_widechar_to_char (value, -1);\n       gfc_warning (\"%s specifier in %s statement at %C has invalid value '%s'\",\n \t\t   specifier, statement, s);\n-      gfc_free (s);\n+      free (s);\n       return 1;\n     }\n   else\n     {\n       char *s = gfc_widechar_to_char (value, -1);\n       gfc_error (\"%s specifier in %s statement at %C has invalid value '%s'\",\n \t\t specifier, statement, s);\n-      gfc_free (s);\n+      free (s);\n       return 0;\n     }\n }\n@@ -2085,7 +2085,7 @@ gfc_match_open (void)\n \t\t\t\t\t  -1);\n \t  warn_or_error (\"The STATUS specified in OPEN statement at %C is \"\n \t\t\t \"'%s' and no FILE specifier is present\", s);\n-\t  gfc_free (s);\n+\t  free (s);\n \t}\n \n       /* F2003, 9.4.5: If the STATUS= specifier has the value SCRATCH,\n@@ -2162,7 +2162,7 @@ gfc_free_close (gfc_close *close)\n   gfc_free_expr (close->iomsg);\n   gfc_free_expr (close->iostat);\n   gfc_free_expr (close->status);\n-  gfc_free (close);\n+  free (close);\n }\n \n \n@@ -2306,7 +2306,7 @@ gfc_free_filepos (gfc_filepos *fp)\n   gfc_free_expr (fp->unit);\n   gfc_free_expr (fp->iomsg);\n   gfc_free_expr (fp->iostat);\n-  gfc_free (fp);\n+  free (fp);\n }\n \n \n@@ -2740,7 +2740,7 @@ gfc_free_dt (gfc_dt *dt)\n   gfc_free_expr (dt->pos);\n   gfc_free_expr (dt->dt_io_kind);\n   /* dt->extra_comma is a link to dt_io_kind if it is set.  */\n-  gfc_free (dt);\n+  free (dt);\n }\n \n \n@@ -3822,7 +3822,7 @@ gfc_free_inquire (gfc_inquire *inquire)\n   gfc_free_expr (inquire->sign);\n   gfc_free_expr (inquire->size);\n   gfc_free_expr (inquire->round);\n-  gfc_free (inquire);\n+  free (inquire);\n }\n \n "}, {"sha": "f1c953adcbe40ec4b413a78a3135d22d7bd7fb26", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1715,7 +1715,7 @@ gfc_free_iterator (gfc_iterator *iter, int flag)\n   gfc_free_expr (iter->step);\n \n   if (flag)\n-    gfc_free (iter);\n+    free (iter);\n }\n \n \n@@ -1868,7 +1868,7 @@ gfc_match_associate (void)\n       continue;\n \n assocListError:\n-      gfc_free (newAssoc);\n+      free (newAssoc);\n       goto error;\n     }\n   if (gfc_match_char (')') != MATCH_YES)\n@@ -2710,7 +2710,7 @@ gfc_free_alloc_list (gfc_alloc *p)\n     {\n       q = p->next;\n       gfc_free_expr (p->expr);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -3967,7 +3967,7 @@ gfc_free_namelist (gfc_namelist *name)\n   for (; name; name = n)\n     {\n       n = name->next;\n-      gfc_free (name);\n+      free (name);\n     }\n }\n \n@@ -4105,7 +4105,7 @@ gfc_free_equiv_until (gfc_equiv *eq, gfc_equiv *stop)\n   gfc_free_equiv (eq->eq);\n   gfc_free_equiv_until (eq->next, stop);\n   gfc_free_expr (eq->expr);\n-  gfc_free (eq);\n+  free (eq);\n }\n \n \n@@ -4368,7 +4368,7 @@ free_case (gfc_case *p)\n     p->high = NULL;\n   gfc_free_expr (p->low);\n   gfc_free_expr (p->high);\n-  gfc_free (p);\n+  free (p);\n }\n \n \n@@ -5005,7 +5005,7 @@ gfc_free_forall_iterator (gfc_forall_iterator *iter)\n       gfc_free_expr (iter->start);\n       gfc_free_expr (iter->end);\n       gfc_free_expr (iter->stride);\n-      gfc_free (iter);\n+      free (iter);\n       iter = next;\n     }\n }"}, {"sha": "76dd2ef3f87530aedf6ad3a386ef1d3635d02781", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1,5 +1,5 @@\n /* Miscellaneous stuff that doesn't fit anywhere else.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n "}, {"sha": "e97354f713f29980600de126ca94b822525132c7", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -229,7 +229,7 @@ free_pi_tree (pointer_info *p)\n   free_pi_tree (p->left);\n   free_pi_tree (p->right);\n \n-  gfc_free (p);\n+  free (p);\n }\n \n \n@@ -424,7 +424,7 @@ resolve_fixups (fixup_t *f, void *gp)\n     {\n       next = f->next;\n       *(f->pointer) = gp;\n-      gfc_free (f);\n+      free (f);\n     }\n }\n \n@@ -496,7 +496,7 @@ free_rename (void)\n   for (; gfc_rename_list; gfc_rename_list = next)\n     {\n       next = gfc_rename_list->next;\n-      gfc_free (gfc_rename_list);\n+      free (gfc_rename_list);\n     }\n }\n \n@@ -891,7 +891,7 @@ free_true_name (true_name *t)\n   free_true_name (t->left);\n   free_true_name (t->right);\n \n-  gfc_free (t);\n+  free (t);\n }\n \n \n@@ -1225,7 +1225,7 @@ peek_atom (void)\n \n   a = parse_atom ();\n   if (a == ATOM_STRING)\n-    gfc_free (atom_string);\n+    free (atom_string);\n \n   set_module_locus (&m);\n   return a;\n@@ -1609,7 +1609,7 @@ mio_allocated_wide_string (const gfc_char_t *s, const size_t length)\n     {\n       char *quoted = quote_string (s, length);\n       write_atom (ATOM_STRING, quoted);\n-      gfc_free (quoted);\n+      free (quoted);\n       return s;\n     }\n   else\n@@ -1618,7 +1618,7 @@ mio_allocated_wide_string (const gfc_char_t *s, const size_t length)\n \n       require_atom (ATOM_STRING);\n       unquoted = unquote_string (atom_string);\n-      gfc_free (atom_string);\n+      free (atom_string);\n       return unquoted;\n     }\n }\n@@ -1644,7 +1644,7 @@ mio_pool_string (const char **stringp)\n     {\n       require_atom (ATOM_STRING);\n       *stringp = atom_string[0] == '\\0' ? NULL : gfc_get_string (atom_string);\n-      gfc_free (atom_string);\n+      free (atom_string);\n     }\n }\n \n@@ -1661,7 +1661,7 @@ mio_internal_string (char *string)\n     {\n       require_atom (ATOM_STRING);\n       strcpy (string, atom_string);\n-      gfc_free (atom_string);\n+      free (atom_string);\n     }\n }\n \n@@ -2813,13 +2813,13 @@ mio_gmp_integer (mpz_t *integer)\n       if (mpz_set_str (*integer, atom_string, 10))\n \tbad_module (\"Error converting integer\");\n \n-      gfc_free (atom_string);\n+      free (atom_string);\n     }\n   else\n     {\n       p = mpz_get_str (NULL, 10, *integer);\n       write_atom (ATOM_STRING, p);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -2837,7 +2837,7 @@ mio_gmp_real (mpfr_t *real)\n \n       mpfr_init (*real);\n       mpfr_set_str (*real, atom_string, 16, GFC_RND_MODE);\n-      gfc_free (atom_string);\n+      free (atom_string);\n     }\n   else\n     {\n@@ -2846,7 +2846,7 @@ mio_gmp_real (mpfr_t *real)\n       if (mpfr_nan_p (*real) || mpfr_inf_p (*real))\n \t{\n \t  write_atom (ATOM_STRING, p);\n-\t  gfc_free (p);\n+\t  free (p);\n \t  return;\n \t}\n \n@@ -2864,8 +2864,8 @@ mio_gmp_real (mpfr_t *real)\n \n       write_atom (ATOM_STRING, atom_string);\n \n-      gfc_free (atom_string);\n-      gfc_free (p);\n+      free (atom_string);\n+      free (p);\n     }\n }\n \n@@ -3128,7 +3128,7 @@ mio_expr (gfc_expr **ep)\n \t{\n \t  require_atom (ATOM_STRING);\n \t  e->value.function.name = gfc_get_string (atom_string);\n-\t  gfc_free (atom_string);\n+\t  free (atom_string);\n \n \t  mio_integer (&flag);\n \t  if (flag)\n@@ -3137,7 +3137,7 @@ mio_expr (gfc_expr **ep)\n \t    {\n \t      require_atom (ATOM_STRING);\n \t      e->value.function.isym = gfc_find_function (atom_string);\n-\t      gfc_free (atom_string);\n+\t      free (atom_string);\n \t    }\n \t}\n \n@@ -3419,7 +3419,7 @@ mio_typebound_proc (gfc_typebound_proc** proc)\n \t      require_atom (ATOM_STRING);\n \t      sym_root = &current_f2k_derived->tb_sym_root;\n \t      g->specific_st = gfc_get_tbp_symtree (sym_root, atom_string);\n-\t      gfc_free (atom_string);\n+\t      free (atom_string);\n \n \t      g->next = (*proc)->u.generic;\n \t      (*proc)->u.generic = g;\n@@ -3470,7 +3470,7 @@ mio_full_typebound_tree (gfc_symtree** root)\n \n \t  require_atom (ATOM_STRING);\n \t  st = gfc_get_tbp_symtree (root, atom_string);\n-\t  gfc_free (atom_string);\n+\t  free (atom_string);\n \n \t  mio_typebound_symtree (st);\n \t}\n@@ -3753,7 +3753,7 @@ skip_list (void)\n \t  break;\n \n \tcase ATOM_STRING:\n-\t  gfc_free (atom_string);\n+\t  free (atom_string);\n \t  break;\n \n \tcase ATOM_NAME:\n@@ -4061,7 +4061,7 @@ load_equiv (void)\n \t  {\n \t    head = eq->eq;\n \t    gfc_free_expr (eq->expr);\n-\t    gfc_free (eq);\n+\t    free (eq);\n \t  }\n       }\n \n@@ -4663,7 +4663,7 @@ free_written_common (struct written_common *w)\n   if (w->right)\n     free_written_common (w->right);\n \n-  gfc_free (w);\n+  free (w);\n }\n \n /* Write a common block to the module -- recursive helper function.  */\n@@ -5742,7 +5742,7 @@ gfc_use_module (void)\n \t\t\t       MOD_VERSION, filename);\n \t    }\n \n-\t  gfc_free (atom_string);\n+\t  free (atom_string);\n \t}\n \n       if (c == '\\n')\n@@ -5789,10 +5789,10 @@ gfc_free_use_stmts (gfc_use_list *use_stmts)\n       for (; use_stmts->rename; use_stmts->rename = next_rename)\n \t{\n \t  next_rename = use_stmts->rename->next;\n-\t  gfc_free (use_stmts->rename);\n+\t  free (use_stmts->rename);\n \t}\n       next = use_stmts->next;\n-      gfc_free (use_stmts);\n+      free (use_stmts);\n     }\n }\n "}, {"sha": "69a6bca352e6d314f33ae14b1af57c7b87ab6ad7", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -70,7 +70,7 @@ gfc_free_omp_clauses (gfc_omp_clauses *c)\n   gfc_free_expr (c->chunk_size);\n   for (i = 0; i < OMP_LIST_NUM; i++)\n     gfc_free_namelist (c->lists[i]);\n-  gfc_free (c);\n+  free (c);\n }\n \n /* Match a variable/common block list and construct a namelist from it.  */"}, {"sha": "a4d9a66062c11aaa56492e1dae334b0df0e91ff1", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -331,7 +331,7 @@ gfc_post_options (const char **pfilename)\n     gfc_add_include_path (\".\", true, true);\n \n   if (canon_source_file != gfc_source_file)\n-    gfc_free (CONST_CAST (char *, canon_source_file));\n+    free (CONST_CAST (char *, canon_source_file));\n \n   /* Decide which form the file will be read in as.  */\n "}, {"sha": "c09589b88e01fa1f2d29d9c938bb239fb29afe4e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -2925,7 +2925,7 @@ select_type_pop (void)\n {\n   gfc_select_type_stack *old = select_type_stack;\n   select_type_stack = old->prev;\n-  gfc_free (old);\n+  free (old);\n }\n \n \n@@ -3576,7 +3576,7 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n \t      && strcmp (cp->ext.omp_name, new_st.ext.omp_name) != 0))\n \tgfc_error (\"Name after !$omp critical and !$omp end critical does \"\n \t\t   \"not match at %C\");\n-      gfc_free (CONST_CAST (char *, new_st.ext.omp_name));\n+      free (CONST_CAST (char *, new_st.ext.omp_name));\n       break;\n     case EXEC_OMP_END_SINGLE:\n       cp->ext.omp_clauses->lists[OMP_LIST_COPYPRIVATE]"}, {"sha": "15cb9a47c5f5710172a7852488547b8a56dff7f2", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -2179,9 +2179,9 @@ gfc_structure_ctor_component;\n static void\n gfc_free_structure_ctor_component (gfc_structure_ctor_component *comp)\n {\n-  gfc_free (comp->name);\n+  free (comp->name);\n   gfc_free_expr (comp->val);\n-  gfc_free (comp);\n+  free (comp);\n }\n \n "}, {"sha": "09cfe78de78047e2f9cb20d8bbf76d95633c2824", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1091,7 +1091,7 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t\t    cl2->next = cl->next;\n \n \t\t  gfc_free_expr (cl->length);\n-\t\t  gfc_free (cl);\n+\t\t  free (cl);\n \t\t}\n \n \t      cons->expr->ts.u.cl = gfc_new_charlen (gfc_current_ns, NULL);\n@@ -5194,7 +5194,7 @@ check_host_association (gfc_expr *e)\n \t      for (n = 0; n < e->rank; n++)\n \t\tmpz_clear (e->shape[n]);\n \n-\t      gfc_free (e->shape);\n+\t      free (e->shape);\n \t    }\n \n \t  /* Give the expression the right symtree!  */\n@@ -8643,7 +8643,7 @@ gfc_resolve_forall (gfc_code *code, gfc_namespace *ns, int forall_save)\n       gcc_assert (forall_save == 0);\n \n       /* VAR_EXPR is not needed any more.  */\n-      gfc_free (var_expr);\n+      free (var_expr);\n       total_var = 0;\n     }\n }\n@@ -13184,7 +13184,7 @@ resolve_equivalence (gfc_equiv *eq)\n \t\t  e->ts.u.cl = NULL;\n \t\t}\n \t      ref = ref->next;\n-\t      gfc_free (mem);\n+\t      free (mem);\n \t    }\n \n \t  /* Any further ref is an error.  */"}, {"sha": "7f99eb8b9133daffd8b82e2cd2e3d88c07b32dcb", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -288,15 +288,15 @@ gfc_scanner_done_1 (void)\n   while(line_head != NULL) \n     {\n       lb = line_head->next;\n-      gfc_free(line_head);\n+      free (line_head);\n       line_head = lb;\n     }\n      \n   while(file_head != NULL) \n     {\n       f = file_head->next;\n-      gfc_free(file_head->filename);\n-      gfc_free(file_head);\n+      free (file_head->filename);\n+      free (file_head);\n       file_head = f;    \n     }\n }\n@@ -371,19 +371,19 @@ gfc_release_include_path (void)\n     {\n       p = include_dirs;\n       include_dirs = include_dirs->next;\n-      gfc_free (p->path);\n-      gfc_free (p);\n+      free (p->path);\n+      free (p);\n     }\n \n   while (intrinsic_modules_dirs != NULL)\n     {\n       p = intrinsic_modules_dirs;\n       intrinsic_modules_dirs = intrinsic_modules_dirs->next;\n-      gfc_free (p->path);\n-      gfc_free (p);\n+      free (p->path);\n+      free (p);\n     }\n \n-  gfc_free (gfc_option.module_dir);\n+  free (gfc_option.module_dir);\n }\n \n \n@@ -659,15 +659,15 @@ gfc_define_undef_line (void)\n       tmp = gfc_widechar_to_char (&gfc_current_locus.nextc[8], -1);\n       (*debug_hooks->define) (gfc_linebuf_linenum (gfc_current_locus.lb),\n \t\t\t      tmp);\n-      gfc_free (tmp);\n+      free (tmp);\n     }\n \n   if (wide_strncmp (gfc_current_locus.nextc, \"#undef \", 7) == 0)\n     {\n       tmp = gfc_widechar_to_char (&gfc_current_locus.nextc[7], -1);\n       (*debug_hooks->undef) (gfc_linebuf_linenum (gfc_current_locus.lb),\n \t\t\t     tmp);\n-      gfc_free (tmp);\n+      free (tmp);\n     }\n \n   /* Skip the rest of the line.  */\n@@ -1760,8 +1760,8 @@ preprocessor_line (gfc_char_t *c)\n \t\t\t   current_file->filename, current_file->line,\n \t\t\t   filename);\n \t  if (unescape)\n-\t    gfc_free (wide_filename);\n-\t  gfc_free (filename);\n+\t    free (wide_filename);\n+\t  free (filename);\n \t  return;\n \t}\n \n@@ -1785,8 +1785,8 @@ preprocessor_line (gfc_char_t *c)\n   /* Set new line number.  */\n   current_file->line = line;\n   if (unescape)\n-    gfc_free (wide_filename);\n-  gfc_free (filename);\n+    free (wide_filename);\n+  free (filename);\n   return;\n \n  bad_cpp_line:\n@@ -1870,7 +1870,7 @@ include_line (gfc_char_t *line)\n   if (load_file (filename, NULL, false) == FAILURE)\n     exit (FATAL_EXIT_CODE);\n \n-  gfc_free (filename);\n+  free (filename);\n   return true;\n }\n \n@@ -1939,12 +1939,12 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n   if (initial && gfc_src_preprocessor_lines[0])\n     {\n       preprocessor_line (gfc_src_preprocessor_lines[0]);\n-      gfc_free (gfc_src_preprocessor_lines[0]);\n+      free (gfc_src_preprocessor_lines[0]);\n       gfc_src_preprocessor_lines[0] = NULL;\n       if (gfc_src_preprocessor_lines[1])\n \t{\n \t  preprocessor_line (gfc_src_preprocessor_lines[1]);\n-\t  gfc_free (gfc_src_preprocessor_lines[1]);\n+\t  free (gfc_src_preprocessor_lines[1]);\n \t  gfc_src_preprocessor_lines[1] = NULL;\n \t}\n     }\n@@ -1975,7 +1975,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \t  gfc_char_t *new_char = gfc_get_wide_string (line_len);\n \n \t  wide_strcpy (new_char, &line[n]);\n-\t  gfc_free (line);\n+\t  free (line);\n \t  line = new_char;\n \t  len -= n;\n \t}\n@@ -2033,7 +2033,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n     }\n \n   /* Release the line buffer allocated in load_line.  */\n-  gfc_free (line);\n+  free (line);\n \n   fclose (input);\n \n@@ -2145,7 +2145,7 @@ gfc_read_orig_filename (const char *filename, const char **canon_source_file)\n \n   tmp = gfc_widechar_to_char (&gfc_src_preprocessor_lines[0][5], -1);\n   filename = unescape_filename (tmp);\n-  gfc_free (tmp);\n+  free (tmp);\n   if (filename == NULL)\n     return NULL;\n \n@@ -2162,14 +2162,14 @@ gfc_read_orig_filename (const char *filename, const char **canon_source_file)\n \n   tmp = gfc_widechar_to_char (&gfc_src_preprocessor_lines[1][5], -1);\n   dirname = unescape_filename (tmp);\n-  gfc_free (tmp);\n+  free (tmp);\n   if (dirname == NULL)\n     return filename;\n \n   len = strlen (dirname);\n   if (len < 3 || dirname[len - 1] != '/' || dirname[len - 2] != '/')\n     {\n-      gfc_free (dirname);\n+      free (dirname);\n       return filename;\n     }\n   dirname[len - 2] = '\\0';\n@@ -2185,6 +2185,6 @@ gfc_read_orig_filename (const char *filename, const char **canon_source_file)\n       *canon_source_file = p;\n     }\n \n-  gfc_free (dirname);\n+  free (dirname);\n   return filename;\n }"}, {"sha": "c2ece959a8f891c3ea2f618f6f1361441c9f1b54", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -616,8 +616,8 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n       result_ctor = gfc_constructor_next (result_ctor);\n     }\n \n-  gfc_free (arrayvec);\n-  gfc_free (resultvec);\n+  free (arrayvec);\n+  free (resultvec);\n   return result;\n }\n \n@@ -2595,7 +2595,7 @@ gfc_simplify_ibits (gfc_expr *x, gfc_expr *y, gfc_expr *z)\n \tgfc_internal_error (\"IBITS: Bad bit\");\n     }\n \n-  gfc_free (bits);\n+  free (bits);\n \n   convert_mpz_to_signed (result->value.integer,\n \t\t\t gfc_integer_kinds[k].bit_size);\n@@ -3087,7 +3087,7 @@ simplify_shift (gfc_expr *e, gfc_expr *s, const char *name,\n     }\n \n   convert_mpz_to_signed (result->value.integer, bitsize);\n-  gfc_free (bits);\n+  free (bits);\n \n   return result;\n }\n@@ -3246,7 +3246,7 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n \n   convert_mpz_to_signed (result->value.integer, isize);\n \n-  gfc_free (bits);\n+  free (bits);\n   return result;\n }\n \n@@ -4076,12 +4076,12 @@ min_max_choose (gfc_expr *arg, gfc_expr *extremum, int sign)\n \t\t\t       LENGTH(arg) - LENGTH(extremum));\n \t    STRING(extremum)[LENGTH(arg)] = '\\0';  /* For debugger  */\n \t    LENGTH(extremum) = LENGTH(arg);\n-\t    gfc_free (tmp);\n+\t    free (tmp);\n \t  }\n \n \tif (gfc_compare_string (arg, extremum) * sign > 0)\n \t  {\n-\t    gfc_free (STRING(extremum));\n+\t    free (STRING(extremum));\n \t    STRING(extremum) = gfc_get_wide_string (LENGTH(extremum) + 1);\n \t    memcpy (STRING(extremum), STRING(arg),\n \t\t      LENGTH(arg) * sizeof (gfc_char_t));\n@@ -6799,7 +6799,7 @@ gfc_simplify_compiler_options (void)\n   str = gfc_get_option_string ();\n   result = gfc_get_character_expr (gfc_default_character_kind,\n \t\t\t\t   &gfc_current_locus, str, strlen (str));\n-  gfc_free (str);\n+  free (str);\n   return result;\n }\n "}, {"sha": "6f8a234c50d2e645fe23c17265756f879585ec73", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -193,7 +193,7 @@ gfc_free_statement (gfc_code *p)\n       break;\n \n     case EXEC_OMP_CRITICAL:\n-      gfc_free (CONST_CAST (char *, p->ext.omp_name));\n+      free (CONST_CAST (char *, p->ext.omp_name));\n       break;\n \n     case EXEC_OMP_FLUSH:\n@@ -228,7 +228,7 @@ gfc_free_statements (gfc_code *p)\n       if (p->block)\n \tgfc_free_statements (p->block);\n       gfc_free_statement (p);\n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -242,5 +242,5 @@ gfc_free_association_list (gfc_association_list* assoc)\n     return;\n \n   gfc_free_association_list (assoc->next);\n-  gfc_free (assoc);\n+  free (assoc);\n }"}, {"sha": "4b4f75fe827f19c6ecbbcaa1d85765bf72fa6468", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -2060,7 +2060,7 @@ free_components (gfc_component *p)\n       gfc_free_formal_arglist (p->formal);\n       gfc_free_namespace (p->formal_ns);\n \n-      gfc_free (p);\n+      free (p);\n     }\n }\n \n@@ -2096,7 +2096,7 @@ gfc_free_st_label (gfc_st_label *label)\n   if (label->format != NULL)\n     gfc_free_expr (label->format);\n \n-  gfc_free (label);\n+  free (label);\n }\n \n \n@@ -2114,7 +2114,7 @@ free_st_labels (gfc_st_label *label)\n   \n   if (label->format != NULL)\n     gfc_free_expr (label->format);\n-  gfc_free (label);\n+  free (label);\n }\n \n \n@@ -2375,7 +2375,7 @@ gfc_delete_symtree (gfc_symtree **root, const char *name)\n   st.name = gfc_get_string (name);\n   gfc_delete_bbt (root, &st, compare_symtree);\n \n-  gfc_free (st0);\n+  free (st0);\n }\n \n \n@@ -2481,7 +2481,7 @@ gfc_free_symbol (gfc_symbol *sym)\n \n   gfc_free_namespace (sym->f2k_derived);\n \n-  gfc_free (sym);\n+  free (sym);\n }\n \n \n@@ -2918,7 +2918,7 @@ gfc_undo_symbols (void)\n \t  p->formal = old->formal;\n \t}\n \n-      gfc_free (p->old_symbol);\n+      free (p->old_symbol);\n       p->old_symbol = NULL;\n       p->tlink = NULL;\n     }\n@@ -2929,7 +2929,7 @@ gfc_undo_symbols (void)\n     {\n       tbq = tbp->next;\n       /* Procedure is already marked `error' by default.  */\n-      gfc_free (tbp);\n+      free (tbp);\n     }\n   tentative_tbp_list = NULL;\n }\n@@ -2957,7 +2957,7 @@ free_old_symbol (gfc_symbol *sym)\n   if (sym->old_symbol->formal != sym->formal)\n     gfc_free_formal_arglist (sym->old_symbol->formal);\n \n-  gfc_free (sym->old_symbol);\n+  free (sym->old_symbol);\n   sym->old_symbol = NULL;\n }\n \n@@ -2985,7 +2985,7 @@ gfc_commit_symbols (void)\n     {\n       tbq = tbp->next;\n       tbp->proc->error = 0;\n-      gfc_free (tbp);\n+      free (tbp);\n     }\n   tentative_tbp_list = NULL;\n }\n@@ -3033,7 +3033,7 @@ free_tb_tree (gfc_symtree *t)\n   /* TODO: Free type-bound procedure structs themselves; probably needs some\n      sort of ref-counting mechanism.  */\n \n-  gfc_free (t);\n+  free (t);\n }\n \n \n@@ -3049,7 +3049,7 @@ free_common_tree (gfc_symtree * common_tree)\n   free_common_tree (common_tree->left);\n   free_common_tree (common_tree->right);\n \n-  gfc_free (common_tree);\n+  free (common_tree);\n }  \n \n \n@@ -3066,8 +3066,8 @@ free_uop_tree (gfc_symtree *uop_tree)\n   free_uop_tree (uop_tree->right);\n \n   gfc_free_interface (uop_tree->n.uop->op);\n-  gfc_free (uop_tree->n.uop);\n-  gfc_free (uop_tree);\n+  free (uop_tree->n.uop);\n+  free (uop_tree);\n }\n \n \n@@ -3084,7 +3084,7 @@ free_sym_tree (gfc_symtree *sym_tree)\n   free_sym_tree (sym_tree->right);\n \n   gfc_release_symbol (sym_tree->n.sym);\n-  gfc_free (sym_tree);\n+  free (sym_tree);\n }\n \n \n@@ -3098,7 +3098,7 @@ gfc_free_dt_list (void)\n   for (dt = gfc_derived_types; dt; dt = n)\n     {\n       n = dt->next;\n-      gfc_free (dt);\n+      free (dt);\n     }\n \n   gfc_derived_types = NULL;\n@@ -3113,7 +3113,7 @@ gfc_free_equiv_infos (gfc_equiv_info *s)\n   if (s == NULL)\n     return;\n   gfc_free_equiv_infos (s->next);\n-  gfc_free (s);\n+  free (s);\n }\n \n \n@@ -3126,7 +3126,7 @@ gfc_free_equiv_lists (gfc_equiv_list *l)\n     return;\n   gfc_free_equiv_lists (l->next);\n   gfc_free_equiv_infos (l->equiv);\n-  gfc_free (l);\n+  free (l);\n }\n \n \n@@ -3138,7 +3138,7 @@ gfc_free_finalizer (gfc_finalizer* el)\n   if (el)\n     {\n       gfc_release_symbol (el->proc_sym);\n-      gfc_free (el);\n+      free (el);\n     }\n }\n \n@@ -3204,7 +3204,7 @@ void gfc_free_charlen (gfc_charlen *cl, gfc_charlen *end)\n \n       cl2 = cl->next;\n       gfc_free_expr (cl->length);\n-      gfc_free (cl);\n+      free (cl);\n     }\n }\n \n@@ -3220,7 +3220,7 @@ free_entry_list (gfc_entry_list *el)\n     return;\n \n   next = el->next;\n-  gfc_free (el);\n+  free (el);\n   free_entry_list (next);\n }\n \n@@ -3264,7 +3264,7 @@ gfc_free_namespace (gfc_namespace *ns)\n \n   gfc_free_data (ns->data);\n   p = ns->contained;\n-  gfc_free (ns);\n+  free (ns);\n \n   /* Recursively free any contained namespaces.  */\n   while (p != NULL)"}, {"sha": "20138e2603741230946cbcc3ab091a59ccc50d3b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -486,7 +486,7 @@ gfc_free_ss (gfc_ss * ss)\n       break;\n     }\n \n-  gfc_free (ss);\n+  free (ss);\n }\n \n \n@@ -2430,7 +2430,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n \t\t\t       fold_convert (long_integer_type_node, index),\n \t\t\t       fold_convert (long_integer_type_node, tmp_lo),\n \t\t\t       fold_convert (long_integer_type_node, tmp_up));\n-      gfc_free (msg);\n+      free (msg);\n     }\n   else\n     {\n@@ -2448,7 +2448,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n       gfc_trans_runtime_check (true, false, fault, &se->pre, where, msg,\n \t\t\t       fold_convert (long_integer_type_node, index),\n \t\t\t       fold_convert (long_integer_type_node, tmp_lo));\n-      gfc_free (msg);\n+      free (msg);\n     }\n \n   return index;\n@@ -2669,7 +2669,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t\t\t\t   fold_convert (long_integer_type_node,\n \t\t\t\t\t\t indexse.expr),\n \t\t\t\t   fold_convert (long_integer_type_node, tmp));\n-\t  gfc_free (msg);\n+\t  free (msg);\n \n \t  /* Upper bound, but not for the last dimension of assumed-size\n \t     arrays.  */\n@@ -2693,7 +2693,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t\t\t\t   fold_convert (long_integer_type_node,\n \t\t\t\t\t\t indexse.expr),\n \t\t\t\t   fold_convert (long_integer_type_node, tmp));\n-\t      gfc_free (msg);\n+\t      free (msg);\n \t    }\n \t}\n \n@@ -3315,7 +3315,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\"of array '%s'\", dim + 1, ss->expr->symtree->name);\n \t      gfc_trans_runtime_check (true, false, tmp, &inner,\n \t\t\t\t       &ss->expr->where, msg);\n-\t      gfc_free (msg);\n+\t      free (msg);\n \n \t      desc = ss->data.info.descriptor;\n \n@@ -3382,7 +3382,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t     fold_convert (long_integer_type_node, info->start[dim]),\n \t\t     fold_convert (long_integer_type_node, lbound),\n \t\t     fold_convert (long_integer_type_node, ubound));\n-\t\t  gfc_free (msg);\n+\t\t  free (msg);\n \t\t}\n \t      else\n \t\t{\n@@ -3398,7 +3398,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\t\t   &ss->expr->where, msg,\n \t\t     fold_convert (long_integer_type_node, info->start[dim]),\n \t\t     fold_convert (long_integer_type_node, lbound));\n-\t\t  gfc_free (msg);\n+\t\t  free (msg);\n \t\t}\n \t      \n \t      /* Compute the last element of the range, which is not\n@@ -3436,7 +3436,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t     fold_convert (long_integer_type_node, tmp),\n \t\t     fold_convert (long_integer_type_node, ubound), \n \t\t     fold_convert (long_integer_type_node, lbound));\n-\t\t  gfc_free (msg);\n+\t\t  free (msg);\n \t\t}\n \t      else\n \t\t{\n@@ -3447,7 +3447,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\t\t   &ss->expr->where, msg,\n \t\t     fold_convert (long_integer_type_node, tmp),\n \t\t     fold_convert (long_integer_type_node, lbound));\n-\t\t  gfc_free (msg);\n+\t\t  free (msg);\n \t\t}\n \n \t      /* Check the section sizes match.  */\n@@ -3478,7 +3478,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\tfold_convert (long_integer_type_node, tmp),\n \t\t\tfold_convert (long_integer_type_node, size[n]));\n \n-\t\t  gfc_free (msg);\n+\t\t  free (msg);\n \t\t}\n \t      else\n \t\tsize[n] = gfc_evaluate_now (tmp, &inner);\n@@ -5127,7 +5127,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n \t\t\tfold_convert (long_integer_type_node, temp),\n \t\t\tfold_convert (long_integer_type_node, stride2));\n \n-\t      gfc_free (msg);\n+\t      free (msg);\n \t    }\n \t}\n       else\n@@ -6310,7 +6310,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, bool g77,\n \n \t  gfc_trans_runtime_check (false, true, tmp, &se->pre,\n \t\t\t\t   &expr->where, msg);\n-\t  gfc_free (msg);\n+\t  free (msg);\n \t}\n \n       gfc_start_block (&block);"}, {"sha": "a2b260546653717abdd1a0006ab8f4d19415c067", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -521,8 +521,8 @@ get_init_field (segment_info *head, tree union_type, tree *field_init,\n   for (i = 0; i < length; i++)\n     CONSTRUCTOR_APPEND_ELT (v, NULL, build_int_cst (type, data[i]));\n \n-  gfc_free (data);\n-  gfc_free (chk);\n+  free (data);\n+  free (chk);\n \n   /* Build a char[length] array to hold the initializers.  Much of what\n      follows is borrowed from build_field, above.  */\n@@ -720,7 +720,7 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n       s->sym->backend_decl = var_decl;\n \n       next_s = s->next;\n-      gfc_free (s);\n+      free (s);\n     }\n }\n "}, {"sha": "30739d8305f4a080be656786a06e9279e9582b92", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -102,7 +102,7 @@ gfc_build_wide_string_const (int kind, int length, const gfc_char_t *string)\n   gfc_encode_character (kind, length, string, (unsigned char *) s, size);\n \n   str = build_string (size, s);\n-  gfc_free (s);\n+  free (s);\n \n   len = build_int_cst (NULL_TREE, length);\n   TREE_TYPE (str) =\n@@ -164,7 +164,7 @@ gfc_conv_string_init (tree length, gfc_expr * expr)\n   str = gfc_build_wide_string_const (expr->ts.kind, len, s);\n \n   if (free_s)\n-    gfc_free (s);\n+    free (s);\n \n   return str;\n }"}, {"sha": "29010467454d2e0636873f8f0079c5b92875f0f4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -4906,7 +4906,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_trans_runtime_check (true, false, recurcheckvar, &init,\n \t\t\t       &sym->declared_at, msg);\n       gfc_add_modify (&init, recurcheckvar, boolean_true_node);\n-      gfc_free (msg);\n+      free (msg);\n     }\n \n   /* Now generate the code for the body of this function.  */"}, {"sha": "af19d32867a37e49767437631b0dbfcb67f6efa5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -449,7 +449,7 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n       gfc_trans_runtime_check (true, false, fault, &se->pre, where, msg,\n \t\t\t       fold_convert (long_integer_type_node,\n \t\t\t\t\t     start.expr));\n-      gfc_free (msg);\n+      free (msg);\n \n       /* Check upper bound.  */\n       fault = fold_build2_loc (input_location, GT_EXPR, boolean_type_node,\n@@ -466,7 +466,7 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n \t\t\t       fold_convert (long_integer_type_node, end.expr),\n \t\t\t       fold_convert (long_integer_type_node,\n \t\t\t\t\t     se->string_length));\n-      gfc_free (msg);\n+      free (msg);\n     }\n \n   /* If the start and end expressions are equal, the length is one.  */\n@@ -1736,14 +1736,14 @@ gfc_free_interface_mapping (gfc_interface_mapping * mapping)\n       sym->new_sym->n.sym->formal = NULL;\n       gfc_free_symbol (sym->new_sym->n.sym);\n       gfc_free_expr (sym->expr);\n-      gfc_free (sym->new_sym);\n-      gfc_free (sym);\n+      free (sym->new_sym);\n+      free (sym);\n     }\n   for (cl = mapping->charlens; cl; cl = nextcl)\n     {\n       nextcl = cl->next;\n       gfc_free_expr (cl->length);\n-      gfc_free (cl);\n+      free (cl);\n     }\n }\n \n@@ -3335,7 +3335,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n  \n \t  gfc_trans_runtime_check (true, false, cond, &se->pre, &e->where,\n \t\t\t\t   msg);\n-\t  gfc_free (msg);\n+\t  free (msg);\n         }\n       end_pointer_check:\n \n@@ -4042,7 +4042,7 @@ gfc_conv_statement_function (gfc_se * se, gfc_expr * expr)\n   /* Restore the original variables.  */\n   for (fargs = sym->formal, n = 0; fargs; fargs = fargs->next, n++)\n     gfc_restore_sym (fargs->sym, &saved_vars[n]);\n-  gfc_free (saved_vars);\n+  free (saved_vars);\n }\n \n \n@@ -4311,7 +4311,7 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \n   for (n = 0; n < cm->as->rank; n++)\n     mpz_clear (lss->shape[n]);\n-  gfc_free (lss->shape);\n+  free (lss->shape);\n \n   gfc_cleanup_loop (&loop);\n "}, {"sha": "180aba18b1764d6be76f7fdcdb8acc4c2ff4e1f3", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -4215,7 +4215,7 @@ conv_generic_with_optional_char_arg (gfc_se* se, gfc_expr* expr,\n   sym = gfc_get_symbol_for_expr (expr);\n   gfc_conv_procedure_call (se, sym, expr->value.function.actual, expr,\n \t\t\t  append_args);\n-  gfc_free (sym);\n+  free (sym);\n }\n \n "}, {"sha": "a9ad4a68cae27a602114dd8a3612645441c813b8", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -252,7 +252,7 @@ gfc_trans_io_runtime_check (tree cond, tree var, int error_code,\n   asprintf (&message, \"%s\", _(msgid));\n   arg3 = gfc_build_addr_expr (pchar_type_node,\n \t\t\t      gfc_build_localized_cstring_const (message));\n-  gfc_free(message);\n+  free (message);\n   \n   tmp = build_call_expr_loc (input_location,\n \t\t\t gfor_fndecl_generate_error, 3, arg1, arg2, arg3);\n@@ -711,7 +711,7 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n \t       \"label\", e->symtree->name);\n       gfc_trans_runtime_check (true, false, cond, &se.pre, &e->where, msg,\n \t\t\t       fold_convert (long_integer_type_node, tmp));\n-      gfc_free (msg);\n+      free (msg);\n \n       gfc_add_modify (&se.pre, io,\n \t\t fold_convert (TREE_TYPE (io), GFC_DECL_ASSIGN_ADDR (se.expr)));\n@@ -1627,7 +1627,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n \t  transfer_namelist_element (block,\n \t\t\t\t     full_name,\n \t\t\t\t     NULL, cmp, expr);\n-\t  gfc_free (full_name);\n+\t  free (full_name);\n \t}\n     }\n }\n@@ -2001,7 +2001,7 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n \n   for (n = 0; n < cm->as->rank; n++)\n     mpz_clear (ss->shape[n]);\n-  gfc_free (ss->shape);\n+  free (ss->shape);\n \n   gfc_cleanup_loop (&loop);\n "}, {"sha": "d709fdf4c4e1a5309bdcf9261e7f123b9e582c5d", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -1,5 +1,5 @@\n /* OpenMP directive translation -- generate GCC trees from gfc_code.\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>\n \n@@ -711,11 +711,11 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n   gfc_free_expr (e2);\n   gfc_free_expr (e3);\n   gfc_free_expr (e4);\n-  gfc_free (symtree1);\n-  gfc_free (symtree2);\n-  gfc_free (symtree3);\n+  free (symtree1);\n+  free (symtree2);\n+  free (symtree3);\n   if (symtree4)\n-    gfc_free (symtree4);\n+    free (symtree4);\n   gfc_free_array_spec (outer_sym.as);\n }\n "}, {"sha": "7d72b7e4df842573febca2a2043208b8745df113", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -2484,8 +2484,8 @@ cleanup_forall_symtrees (gfc_code *c)\n {\n   forall_restore_symtree (c->expr1);\n   forall_restore_symtree (c->expr2);\n-  gfc_free (new_symtree->n.sym);\n-  gfc_free (new_symtree);\n+  free (new_symtree->n.sym);\n+  free (new_symtree);\n }\n \n \n@@ -3705,22 +3705,22 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n     gfc_restore_sym (fa->var->symtree->n.sym, &saved_vars[n]);\n \n   /* Free the space for var, start, end, step, varexpr.  */\n-  gfc_free (var);\n-  gfc_free (start);\n-  gfc_free (end);\n-  gfc_free (step);\n-  gfc_free (varexpr);\n-  gfc_free (saved_vars);\n+  free (var);\n+  free (start);\n+  free (end);\n+  free (step);\n+  free (varexpr);\n+  free (saved_vars);\n \n   for (this_forall = info->this_loop; this_forall;)\n     {\n       iter_info *next = this_forall->next;\n-      gfc_free (this_forall);\n+      free (this_forall);\n       this_forall = next;\n     }\n \n   /* Free the space for this forall_info.  */\n-  gfc_free (info);\n+  free (info);\n \n   if (pmask)\n     {"}, {"sha": "1b3a6b0ba720e34009b90ff305a8a991a5410b93", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cede9502322f2707ea29212fb115116be3c7d5a8/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=cede9502322f2707ea29212fb115116be3c7d5a8", "patch": "@@ -407,12 +407,12 @@ trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n \n   arg = gfc_build_addr_expr (pchar_type_node,\n \t\t\t     gfc_build_localized_cstring_const (message));\n-  gfc_free(message);\n+  free (message);\n   \n   asprintf (&message, \"%s\", _(msgid));\n   arg2 = gfc_build_addr_expr (pchar_type_node,\n \t\t\t      gfc_build_localized_cstring_const (message));\n-  gfc_free(message);\n+  free (message);\n \n   /* Build the argument array.  */\n   argarray = XALLOCAVEC (tree, nargs + 2);\n@@ -1149,7 +1149,7 @@ void\n gfc_restore_backend_locus (locus * loc)\n {\n   gfc_set_backend_locus (loc);\n-  gfc_free (loc->lb);\n+  free (loc->lb);\n }\n \n "}]}