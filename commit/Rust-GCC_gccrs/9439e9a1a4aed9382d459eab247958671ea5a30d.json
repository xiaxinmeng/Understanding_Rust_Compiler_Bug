{"sha": "9439e9a1a4aed9382d459eab247958671ea5a30d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzOWU5YTFhNGFlZDkzODJkNDU5ZWFiMjQ3OTU4NjcxZWE1YTMwZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:52:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:52:03Z"}, "message": "c-common.c, [...]: Replace tree_low_cst (..., 0) with tree_to_shwi throughout.\n\ngcc/c-family/\n\t* c-common.c, c-format.c, c-omp.c, c-pretty-print.c: Replace\n\ttree_low_cst (..., 0) with tree_to_shwi throughout.\n\ngcc/c/\n\t* c-parser.c: Replace tree_low_cst (..., 0) with tree_to_shwi\n\tthroughout.\n\ngcc/cp/\n\t* class.c, dump.c, error.c, init.c, method.c, parser.c, semantics.c:\n\tReplace tree_low_cst (..., 0) with tree_to_shwi throughout.\n\ngcc/go/\n\t* gofrontend/expressions.cc: Replace tree_low_cst (..., 0) with\n\ttree_to_shwi throughout.\n\ngcc/java/\n\t* class.c, expr.c: Replace tree_low_cst (..., 0) with tree_to_shwi\n\tthroughout.\n\ngcc/objc/\n\t* objc-next-runtime-abi-02.c: Replace tree_low_cst (..., 0) with\n\ttree_to_shwi throughout.\n\ngcc/\n\t* builtins.c, cilk-common.c, config/aarch64/aarch64.c,\n\tconfig/alpha/alpha.c, config/arm/arm.c, config/c6x/predicates.md,\n\tconfig/i386/i386.c, config/ia64/predicates.md, config/s390/s390.c,\n\tcoverage.c, dbxout.c, dwarf2out.c, except.c, explow.c, expr.c, expr.h,\n\tfold-const.c, gimple-fold.c, godump.c, ipa-prop.c, omp-low.c,\n\tpredict.c, rtlanal.c, sdbout.c, stmt.c, stor-layout.c, targhooks.c,\n\ttree-cfg.c, tree-data-ref.c, tree-inline.c, tree-ssa-forwprop.c,\n\ttree-ssa-loop-prefetch.c, tree-ssa-phiopt.c, tree-ssa-sccvn.c,\n\ttree-ssa-strlen.c, tree-stdarg.c, tree-vect-data-refs.c,\n\ttree-vect-patterns.c, tree.c, tree.h, var-tracking.c, varasm.c:\n\tReplace tree_low_cst (..., 0) with tree_to_shwi throughout.\n\nFrom-SVN: r204959", "tree": {"sha": "bbf1b784a6f03f045b5a0765d5dccfb9df0eab5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbf1b784a6f03f045b5a0765d5dccfb9df0eab5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9439e9a1a4aed9382d459eab247958671ea5a30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9439e9a1a4aed9382d459eab247958671ea5a30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9439e9a1a4aed9382d459eab247958671ea5a30d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9439e9a1a4aed9382d459eab247958671ea5a30d/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c5efc1206d99472b0a1615b9da8f31cd849014b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5efc1206d99472b0a1615b9da8f31cd849014b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5efc1206d99472b0a1615b9da8f31cd849014b"}], "stats": {"total": 348, "additions": 196, "deletions": 152}, "files": [{"sha": "3ee623c70fea6f0ee549cb1e3c6ce4983a6cb20e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,17 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* builtins.c, cilk-common.c, config/aarch64/aarch64.c,\n+\tconfig/alpha/alpha.c, config/arm/arm.c, config/c6x/predicates.md,\n+\tconfig/i386/i386.c, config/ia64/predicates.md, config/s390/s390.c,\n+\tcoverage.c, dbxout.c, dwarf2out.c, except.c, explow.c, expr.c, expr.h,\n+\tfold-const.c, gimple-fold.c, godump.c, ipa-prop.c, omp-low.c,\n+\tpredict.c, rtlanal.c, sdbout.c, stmt.c, stor-layout.c, targhooks.c,\n+\ttree-cfg.c, tree-data-ref.c, tree-inline.c, tree-ssa-forwprop.c,\n+\ttree-ssa-loop-prefetch.c, tree-ssa-phiopt.c, tree-ssa-sccvn.c,\n+\ttree-ssa-strlen.c, tree-stdarg.c, tree-vect-data-refs.c,\n+\ttree-vect-patterns.c, tree.c, tree.h, var-tracking.c, varasm.c:\n+\tReplace tree_low_cst (..., 0) with tree_to_shwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree.h (tree_to_shwi, tree_to_uhwi): Declare, with inline expansions."}, {"sha": "a50cfc6ddff7a43aa059474129846a4ec6021bcc", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -620,7 +620,7 @@ c_strlen (tree src, int only_value)\n   else if (! tree_fits_shwi_p (offset_node))\n     offset = -1;\n   else\n-    offset = tree_low_cst (offset_node, 0);\n+    offset = tree_to_shwi (offset_node);\n \n   /* If the offset is known to be out of bounds, warn, and call strlen at\n      runtime.  */\n@@ -5288,7 +5288,7 @@ expand_builtin_atomic_compare_exchange (enum machine_mode mode, tree exp,\n \n   weak = CALL_EXPR_ARG (exp, 3);\n   is_weak = false;\n-  if (tree_fits_shwi_p (weak) && tree_low_cst (weak, 0) != 0)\n+  if (tree_fits_shwi_p (weak) && tree_to_shwi (weak) != 0)\n     is_weak = true;\n \n   oldval = expect;\n@@ -9855,7 +9855,7 @@ fold_builtin_load_exponent (location_t loc, tree arg0, tree arg1,\n \t\t - REAL_MODE_FORMAT (TYPE_MODE (type))->emin);\n \n \t  /* Get the user-requested adjustment.  */\n-\t  const HOST_WIDE_INT req_exp_adj = tree_low_cst (arg1, 0);\n+\t  const HOST_WIDE_INT req_exp_adj = tree_to_shwi (arg1);\n \n \t  /* The requested adjustment must be inside this range.  This\n \t     is a preliminary cap to avoid things like overflow, we\n@@ -12366,7 +12366,7 @@ expand_builtin_object_size (tree exp)\n       return const0_rtx;\n     }\n \n-  object_size_type = tree_low_cst (ost, 0);\n+  object_size_type = tree_to_shwi (ost);\n \n   return object_size_type < 2 ? constm1_rtx : const0_rtx;\n }\n@@ -12660,7 +12660,7 @@ fold_builtin_object_size (tree ptr, tree ost)\n       || compare_tree_int (ost, 3) > 0)\n     return NULL_TREE;\n \n-  object_size_type = tree_low_cst (ost, 0);\n+  object_size_type = tree_to_shwi (ost);\n \n   /* __builtin_object_size doesn't evaluate side-effects in its arguments;\n      if there are any side-effects, it returns (size_t) -1 for types 0 and 1\n@@ -13844,7 +13844,7 @@ do_mpfr_bessel_n (tree arg1, tree arg2, tree type,\n       && tree_fits_shwi_p (arg1)\n       && TREE_CODE (arg2) == REAL_CST && !TREE_OVERFLOW (arg2))\n     {\n-      const HOST_WIDE_INT n = tree_low_cst (arg1, 0);\n+      const HOST_WIDE_INT n = tree_to_shwi (arg1);\n       const REAL_VALUE_TYPE *const ra = &TREE_REAL_CST (arg2);\n \n       if (n == (long)n"}, {"sha": "6a5c401461b13f1dbd0c02444308ed84a508b46c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-common.c, c-format.c, c-omp.c, c-pretty-print.c: Replace\n+\ttree_low_cst (..., 0) with tree_to_shwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-ada-spec.c, c-common.c, c-pretty-print.c: Replace"}, {"sha": "b3995bef7b590c16b6701f6d7904f93a3c43cec6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -7003,7 +7003,7 @@ get_priority (tree args, bool is_destructor)\n       || !INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n     goto invalid;\n \n-  pri = tree_low_cst (arg, /*pos=*/0);\n+  pri = tree_to_shwi (arg);\n   if (pri < 0 || pri > MAX_INIT_PRIORITY)\n     goto invalid;\n \n@@ -11254,13 +11254,13 @@ warn_for_sign_compare (location_t location,\n             {\n               primop = op1;\n               unsignedp = unsignedp1;\n-              constant = tree_low_cst (op0, 0);\n+              constant = tree_to_shwi (op0);\n             }\n           else\n             {\n               primop = op0;\n               unsignedp = unsignedp0;\n-              constant = tree_low_cst (op1, 0);\n+              constant = tree_to_shwi (op1);\n             }\n \n           bits = TYPE_PRECISION (TREE_TYPE (primop));"}, {"sha": "b3e1e399353262c137471217170216728dd9e5e3", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1460,7 +1460,7 @@ check_format_arg (void *ctx, tree format_tree,\n \t  return;\n \t}\n       if (!tree_fits_shwi_p (arg1)\n-\t  || (offset = tree_low_cst (arg1, 0)) < 0)\n+\t  || (offset = tree_to_shwi (arg1)) < 0)\n \t{\n \t  res->number_non_literal++;\n \t  return;\n@@ -1507,7 +1507,7 @@ check_format_arg (void *ctx, tree format_tree,\n     }\n   if (TREE_CODE (format_tree) == ARRAY_REF\n       && tree_fits_shwi_p (TREE_OPERAND (format_tree, 1))\n-      && (offset += tree_low_cst (TREE_OPERAND (format_tree, 1), 0)) >= 0)\n+      && (offset += tree_to_shwi (TREE_OPERAND (format_tree, 1))) >= 0)\n     format_tree = TREE_OPERAND (format_tree, 0);\n   if (TREE_CODE (format_tree) == VAR_DECL\n       && TREE_CODE (TREE_TYPE (format_tree)) == ARRAY_TYPE"}, {"sha": "3ccf8f915215c0b6c87c3cf2d1bf949aae5a81bc", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -921,8 +921,8 @@ c_omp_declare_simd_clause_cmp (const void *p, const void *q)\n       && OMP_CLAUSE_CODE (a) != OMP_CLAUSE_INBRANCH\n       && OMP_CLAUSE_CODE (a) != OMP_CLAUSE_NOTINBRANCH)\n     {\n-      int c = tree_low_cst (OMP_CLAUSE_DECL (a), 0);\n-      int d = tree_low_cst (OMP_CLAUSE_DECL (b), 0);\n+      int c = tree_to_shwi (OMP_CLAUSE_DECL (a));\n+      int d = tree_to_shwi (OMP_CLAUSE_DECL (b));\n       if (c < d)\n \treturn 1;\n       if (c > d)\n@@ -987,7 +987,7 @@ c_omp_declare_simd_clauses_to_decls (tree fndecl, tree clauses)\n \t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_INBRANCH\n \t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_NOTINBRANCH)\n       {\n-\tint idx = tree_low_cst (OMP_CLAUSE_DECL (c), 0), i;\n+\tint idx = tree_to_shwi (OMP_CLAUSE_DECL (c)), i;\n \ttree arg;\n \tfor (arg = DECL_ARGUMENTS (fndecl), i = 0; arg;\n \t     arg = TREE_CHAIN (arg), i++)"}, {"sha": "7898f13172c9c8eee4390adf627f6e465fde8cd3", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -587,7 +587,7 @@ c_pretty_printer::direct_abstract_declarator (tree t)\n \t  tree type = TREE_TYPE (maxval);\n \n \t  if (tree_fits_shwi_p (maxval))\n-\t    pp_wide_integer (this, tree_low_cst (maxval, 0) + 1);\n+\t    pp_wide_integer (this, tree_to_shwi (maxval) + 1);\n \t  else\n \t    expression (fold_build2 (PLUS_EXPR, type, maxval,\n                                      build_int_cst (type, 1)));\n@@ -1599,8 +1599,8 @@ c_pretty_printer::postfix_expression (tree e)\n \tif (type\n \t    && tree_int_cst_equal (TYPE_SIZE (type), TREE_OPERAND (e, 1)))\n \t  {\n-\t    HOST_WIDE_INT bitpos = tree_low_cst (TREE_OPERAND (e, 2), 0);\n-\t    HOST_WIDE_INT size = tree_low_cst (TYPE_SIZE (type), 0);\n+\t    HOST_WIDE_INT bitpos = tree_to_shwi (TREE_OPERAND (e, 2));\n+\t    HOST_WIDE_INT size = tree_to_shwi (TYPE_SIZE (type));\n \t    if ((bitpos % size) == 0)\n \t      {\n \t\tpp_c_left_paren (this);"}, {"sha": "dd01c639f7f913482cc05456d1f7fd70845ee55a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-parser.c: Replace tree_low_cst (..., 0) with tree_to_shwi\n+\tthroughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-parser.c: Replace host_integerp (..., 0) with tree_fits_shwi_p"}, {"sha": "74eb13a3f7e0e15b9c64bc7afecfe6437ec1de78", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -9737,7 +9737,7 @@ c_parser_omp_clause_collapse (c_parser *parser, tree list)\n   num = c_fully_fold (num, false, NULL);\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (num))\n       || !tree_fits_shwi_p (num)\n-      || (n = tree_low_cst (num, 0)) <= 0\n+      || (n = tree_to_shwi (num)) <= 0\n       || (int) n != n)\n     {\n       error_at (loc,\n@@ -11463,7 +11463,7 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n     if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_COLLAPSE)\n-      collapse = tree_low_cst (OMP_CLAUSE_COLLAPSE_EXPR (cl), 0);\n+      collapse = tree_to_shwi (OMP_CLAUSE_COLLAPSE_EXPR (cl));\n \n   gcc_assert (collapse >= 1);\n "}, {"sha": "98b85988764eb7a2dc6d9389a6040ddc60343a65", "filename": "gcc/cilk-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcilk-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcilk-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk-common.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -340,8 +340,8 @@ expand_builtin_cilk_detach (tree exp)\n      WORKER.TAIL <- TMP   */\n \n   HOST_WIDE_INT worker_tail_offset =\n-    tree_low_cst (DECL_FIELD_OFFSET (cilk_trees[CILK_TI_WORKER_TAIL]), 0) +\n-    tree_low_cst (DECL_FIELD_BIT_OFFSET (cilk_trees[CILK_TI_WORKER_TAIL]), 0) /\n+    tree_to_shwi (DECL_FIELD_OFFSET (cilk_trees[CILK_TI_WORKER_TAIL])) +\n+    tree_to_shwi (DECL_FIELD_BIT_OFFSET (cilk_trees[CILK_TI_WORKER_TAIL])) /\n     BITS_PER_UNIT;\n   rtx tmem0 = gen_rtx_MEM (Pmode,\n \t\t\t   plus_constant (Pmode, wreg, worker_tail_offset));"}, {"sha": "6116986e8254b33f908ce2f883d3ce9099bcd287", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -6863,7 +6863,7 @@ aarch64_simd_attr_length_move (rtx insn)\n static HOST_WIDE_INT\n aarch64_simd_vector_alignment (const_tree type)\n {\n-  HOST_WIDE_INT align = tree_low_cst (TYPE_SIZE (type), 0);\n+  HOST_WIDE_INT align = tree_to_shwi (TYPE_SIZE (type));\n   return MIN (align, 128);\n }\n "}, {"sha": "e710b0c3717221c17ee0a6bd35f439585837a0a1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -5989,7 +5989,7 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, const_gimple stmt)\n \t  if (!tree_fits_shwi_p (gimple_assign_rhs2 (arg2_stmt)))\n \t    goto escapes;\n \n-\t  sub = tree_low_cst (gimple_assign_rhs2 (arg2_stmt), 0);\n+\t  sub = tree_to_shwi (gimple_assign_rhs2 (arg2_stmt));\n \t  if (code2 == MINUS_EXPR)\n \t    sub = -sub;\n \t  if (sub < -48 || sub > -32)"}, {"sha": "6e9faedd8f00c1c70acd96c03946e65bcc979183", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -28807,7 +28807,7 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n static HOST_WIDE_INT\n arm_vector_alignment (const_tree type)\n {\n-  HOST_WIDE_INT align = tree_low_cst (TYPE_SIZE (type), 0);\n+  HOST_WIDE_INT align = tree_to_shwi (TYPE_SIZE (type));\n \n   if (TARGET_AAPCS_BASED)\n     align = MIN (align, 64);"}, {"sha": "fbcbdd02457f8857669cd4b896565c4ffb05a6d2", "filename": "gcc/config/c6x/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fpredicates.md?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -212,7 +212,7 @@\n \tt = TYPE_SIZE_UNIT (TREE_TYPE (t));\n       if (t && tree_fits_shwi_p (t))\n \t{\n-\t  size = tree_low_cst (t, 0);\n+\t  size = tree_to_shwi (t);\n \t  if (size < 0)\n \t    size = 0;\n \t}"}, {"sha": "4937b35b6936b0b538b214df593fc457f86dd0e2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -6270,7 +6270,7 @@ classify_argument (enum machine_mode mode, const_tree type,\n \t\t      for (i = (int_bit_position (field)\n \t\t\t\t+ (bit_offset % 64)) / 8 / 8;\n \t\t\t   i < ((int_bit_position (field) + (bit_offset % 64))\n-\t\t\t        + tree_low_cst (DECL_SIZE (field), 0)\n+\t\t\t        + tree_to_shwi (DECL_SIZE (field))\n \t\t\t\t+ 63) / 8 / 8; i++)\n \t\t\tclasses[i] =\n \t\t\t  merge_classes (X86_64_INTEGER_CLASS,"}, {"sha": "31530be906d0e9dc2b88226f2e3d7ec8750601b6", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -74,7 +74,7 @@\n \t    t = TYPE_SIZE_UNIT (TREE_TYPE (t));\n \t  if (t && tree_fits_shwi_p (t))\n \t    {\n-\t      size = tree_low_cst (t, 0);\n+\t      size = tree_to_shwi (t);\n \t      if (size < 0)\n \t\tsize = 0;\n \t    }"}, {"sha": "39453038fe7d430d0ec15635760632d1fc69ef58", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -10195,7 +10195,7 @@ s390_encode_section_info (tree decl, rtx rtl, int first)\n \t  || !DECL_ALIGN (decl)\n \t  || !tree_fits_shwi_p (DECL_SIZE (decl))\n \t  || (DECL_ALIGN (decl) <= 64\n-\t      && DECL_ALIGN (decl) != tree_low_cst (DECL_SIZE (decl), 0)))\n+\t      && DECL_ALIGN (decl) != tree_to_shwi (DECL_SIZE (decl))))\n \tSYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_NOT_NATURALLY_ALIGNED;\n     }\n "}, {"sha": "43f9c0cb6f13fa11022b10292ca6e85bfd149061", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -830,7 +830,7 @@ build_fn_info (const struct coverage_data *data, tree type, tree key)\n \n \tif (var)\n \t  count\n-\t    = tree_low_cst (TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (var))), 0)\n+\t    = tree_to_shwi (TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (var))))\n \t    + 1;\n \n \tCONSTRUCTOR_APPEND_ELT (ctr, TYPE_FIELDS (ctr_type),"}, {"sha": "c15f42ce10ecb5c571bfa561a548c6b13448d498", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* class.c, dump.c, error.c, init.c, method.c, parser.c, semantics.c:\n+\tReplace tree_low_cst (..., 0) with tree_to_shwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* decl.c: Replace host_integerp (..., 1) with tree_fits_uhwi_p"}, {"sha": "4fc65da2e3bcf60ceed147cc3f433edd65095904", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -8041,7 +8041,7 @@ dump_class_hierarchy_r (FILE *stream,\n   igo = TREE_CHAIN (binfo);\n \n   fprintf (stream, HOST_WIDE_INT_PRINT_DEC,\n-\t   tree_low_cst (BINFO_OFFSET (binfo), 0));\n+\t   tree_to_shwi (BINFO_OFFSET (binfo)));\n   if (is_empty_class (BINFO_TYPE (binfo)))\n     fprintf (stream, \" empty\");\n   else if (CLASSTYPE_NEARLY_EMPTY_P (BINFO_TYPE (binfo)))\n@@ -8117,10 +8117,10 @@ dump_class_hierarchy_1 (FILE *stream, int flags, tree t)\n {\n   fprintf (stream, \"Class %s\\n\", type_as_string (t, TFF_PLAIN_IDENTIFIER));\n   fprintf (stream, \"   size=%lu align=%lu\\n\",\n-\t   (unsigned long)(tree_low_cst (TYPE_SIZE (t), 0) / BITS_PER_UNIT),\n+\t   (unsigned long)(tree_to_shwi (TYPE_SIZE (t)) / BITS_PER_UNIT),\n \t   (unsigned long)(TYPE_ALIGN (t) / BITS_PER_UNIT));\n   fprintf (stream, \"   base size=%lu base align=%lu\\n\",\n-\t   (unsigned long)(tree_low_cst (TYPE_SIZE (CLASSTYPE_AS_BASE (t)), 0)\n+\t   (unsigned long)(tree_to_shwi (TYPE_SIZE (CLASSTYPE_AS_BASE (t)))\n \t\t\t   / BITS_PER_UNIT),\n \t   (unsigned long)(TYPE_ALIGN (CLASSTYPE_AS_BASE (t))\n \t\t\t   / BITS_PER_UNIT));\n@@ -8157,7 +8157,7 @@ dump_array (FILE * stream, tree decl)\n   HOST_WIDE_INT elt;\n   tree size = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (decl)));\n \n-  elt = (tree_low_cst (TYPE_SIZE (TREE_TYPE (TREE_TYPE (decl))), 0)\n+  elt = (tree_to_shwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (decl))))\n \t / BITS_PER_UNIT);\n   fprintf (stream, \"%s:\", decl_as_string (decl, TFF_PLAIN_IDENTIFIER));\n   fprintf (stream, \" %s entries\",\n@@ -8246,10 +8246,10 @@ dump_thunk (FILE *stream, int indent, tree thunk)\n \t/*NOP*/;\n       else if (DECL_THIS_THUNK_P (thunk))\n \tfprintf (stream, \" vcall=\"  HOST_WIDE_INT_PRINT_DEC,\n-\t\t tree_low_cst (virtual_adjust, 0));\n+\t\t tree_to_shwi (virtual_adjust));\n       else\n \tfprintf (stream, \" vbase=\" HOST_WIDE_INT_PRINT_DEC \"(%s)\",\n-\t\t tree_low_cst (BINFO_VPTR_FIELD (virtual_adjust), 0),\n+\t\t tree_to_shwi (BINFO_VPTR_FIELD (virtual_adjust)),\n \t\t type_as_string (BINFO_TYPE (virtual_adjust), TFF_SCOPE));\n       if (THUNK_ALIAS (thunk))\n \tfprintf (stream, \" alias to %p\", (void *)THUNK_ALIAS (thunk));"}, {"sha": "cc888339af94c10cd8129cfed05cb78fb4fb6d5a", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -346,7 +346,7 @@ cp_dump_tree (void* dump_info, tree t)\n \t    }\n \t  dump_int (di, \"fixd\", THUNK_FIXED_OFFSET (t));\n \t  if (virt)\n-\t    dump_int (di, \"virt\", tree_low_cst (virt, 0));\n+\t    dump_int (di, \"virt\", tree_to_shwi (virt));\n \t  dump_child (\"fn\", DECL_INITIAL (t));\n \t}\n       break;"}, {"sha": "d5b42e7d013bc7a2f81d6f0ac503aab324eba77e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -852,7 +852,7 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n \t  if (integer_all_onesp (max))\n \t    pp_character (pp, '0');\n \t  else if (tree_fits_shwi_p (max))\n-\t    pp_wide_integer (pp, tree_low_cst (max, 0) + 1);\n+\t    pp_wide_integer (pp, tree_to_shwi (max) + 1);\n \t  else\n \t    {\n \t      STRIP_NOPS (max);\n@@ -2294,7 +2294,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \t      t = TYPE_METHOD_BASETYPE (t);\n \t      virtuals = BINFO_VIRTUALS (TYPE_BINFO (TYPE_MAIN_VARIANT (t)));\n \n-\t      n = tree_low_cst (idx, 0);\n+\t      n = tree_to_shwi (idx);\n \n \t      /* Map vtable index back one, to allow for the null pointer to\n \t\t member.  */"}, {"sha": "7eac6f52d095cf3ba4b968e7cc2c55836614d701", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3664,7 +3664,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       || ((type_build_ctor_call (type) || init || explicit_value_init_p)\n \t  && ! (tree_fits_shwi_p (maxindex)\n \t\t&& (num_initialized_elts\n-\t\t    == tree_low_cst (maxindex, 0) + 1))))\n+\t\t    == tree_to_shwi (maxindex) + 1))))\n     {\n       /* If the ITERATOR is equal to -1, then we don't have to loop;\n \t we've already initialized all the elements.  */"}, {"sha": "d15d0a4d6f6d35f0d70a0a5a3ace325d9208a41e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -95,7 +95,7 @@ make_thunk (tree function, bool this_adjusting,\n \t\t    convert (ssizetype,\n \t\t\t     TYPE_SIZE_UNIT (vtable_entry_type)));\n \n-  d = tree_low_cst (fixed_offset, 0);\n+  d = tree_to_shwi (fixed_offset);\n \n   /* See if we already have the thunk in question.  For this_adjusting\n      thunks VIRTUAL_OFFSET will be an INTEGER_CST, for covariant thunks it\n@@ -323,7 +323,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n     {\n       if (!this_adjusting)\n \tvirtual_offset = BINFO_VPTR_FIELD (virtual_offset);\n-      virtual_value = tree_low_cst (virtual_offset, /*pos=*/0);\n+      virtual_value = tree_to_shwi (virtual_offset);\n       gcc_assert (virtual_value);\n     }\n   else"}, {"sha": "d37924851ed92fdec93e29eb7f81403aa5c53ee5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -26963,7 +26963,7 @@ cp_parser_omp_clause_collapse (cp_parser *parser, tree list, location_t location\n   num = fold_non_dependent_expr (num);\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (num))\n       || !tree_fits_shwi_p (num)\n-      || (n = tree_low_cst (num, 0)) <= 0\n+      || (n = tree_to_shwi (num)) <= 0\n       || (int) n != n)\n     {\n       error_at (loc, \"collapse argument needs positive constant integer expression\");\n@@ -28929,7 +28929,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \n   for (cl = clauses; cl; cl = OMP_CLAUSE_CHAIN (cl))\n     if (OMP_CLAUSE_CODE (cl) == OMP_CLAUSE_COLLAPSE)\n-      collapse = tree_low_cst (OMP_CLAUSE_COLLAPSE_EXPR (cl), 0);\n+      collapse = tree_to_shwi (OMP_CLAUSE_COLLAPSE_EXPR (cl));\n \n   gcc_assert (collapse >= 1);\n "}, {"sha": "dce2b3749fccd2dc8e5dff8f9d76fd972ec1391e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -8611,7 +8611,7 @@ cxx_eval_array_reference (const constexpr_call *call, tree t,\n       *non_constant_p = true;\n       return t;\n     }\n-  i = tree_low_cst (index, 0);\n+  i = tree_to_shwi (index);\n   if (TREE_CODE (ary) == CONSTRUCTOR)\n     return (*CONSTRUCTOR_ELTS (ary))[i].value;\n   else if (elem_nchars == 1)\n@@ -8726,8 +8726,8 @@ cxx_eval_bit_field_ref (const constexpr_call *call, tree t,\n \t\t\t TREE_OPERAND (t, 1), TREE_OPERAND (t, 2));\n \n   start = TREE_OPERAND (t, 2);\n-  istart = tree_low_cst (start, 0);\n-  isize = tree_low_cst (TREE_OPERAND (t, 1), 0);\n+  istart = tree_to_shwi (start);\n+  isize = tree_to_shwi (TREE_OPERAND (t, 1));\n   utype = TREE_TYPE (t);\n   if (!TYPE_UNSIGNED (utype))\n     utype = build_nonstandard_integer_type (TYPE_PRECISION (utype), 1);\n@@ -8742,8 +8742,8 @@ cxx_eval_bit_field_ref (const constexpr_call *call, tree t,\n \t  && tree_fits_shwi_p (bitpos)\n \t  && tree_fits_shwi_p (DECL_SIZE (field)))\n \t{\n-\t  HOST_WIDE_INT bit = tree_low_cst (bitpos, 0);\n-\t  HOST_WIDE_INT sz = tree_low_cst (DECL_SIZE (field), 0);\n+\t  HOST_WIDE_INT bit = tree_to_shwi (bitpos);\n+\t  HOST_WIDE_INT sz = tree_to_shwi (DECL_SIZE (field));\n \t  HOST_WIDE_INT shift;\n \t  if (bit >= istart && bit + sz <= istart + isize)\n \t    {\n@@ -8900,7 +8900,7 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n \t\t     bool *non_constant_p, bool *overflow_p)\n {\n   tree elttype = TREE_TYPE (atype);\n-  int max = tree_low_cst (array_type_nelts (atype), 0);\n+  int max = tree_to_shwi (array_type_nelts (atype));\n   vec<constructor_elt, va_gc> *n;\n   vec_alloc (n, max + 1);\n   bool pre_init = false;\n@@ -9119,9 +9119,9 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t      && (same_type_ignoring_top_level_qualifiers_p\n \t\t  (type, TREE_TYPE (op00type))))\n \t    {\n-\t      HOST_WIDE_INT offset = tree_low_cst (op01, 0);\n+\t      HOST_WIDE_INT offset = tree_to_shwi (op01);\n \t      tree part_width = TYPE_SIZE (type);\n-\t      unsigned HOST_WIDE_INT part_widthi = tree_low_cst (part_width, 0)/BITS_PER_UNIT;\n+\t      unsigned HOST_WIDE_INT part_widthi = tree_to_shwi (part_width)/BITS_PER_UNIT;\n \t      unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n \t      tree index = bitsize_int (indexi);\n "}, {"sha": "b56a4689463139493c7c53a129e25f1873b783c1", "filename": "gcc/dbxout.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1612,7 +1612,7 @@ dbxout_type_method_1 (tree decl)\n \n   if (DECL_VINDEX (decl) && tree_fits_shwi_p (DECL_VINDEX (decl)))\n     {\n-      stabstr_D (tree_low_cst (DECL_VINDEX (decl), 0));\n+      stabstr_D (tree_to_shwi (DECL_VINDEX (decl)));\n       stabstr_C (';');\n       dbxout_type (DECL_CONTEXT (decl), 0);\n       stabstr_C (';');\n@@ -1723,7 +1723,7 @@ dbxout_range_type (tree type, tree low, tree high)\n       if (print_int_cst_bounds_in_octal_p (type, low, high))\n         stabstr_O (low);\n       else\n-        stabstr_D (tree_low_cst (low, 0));\n+        stabstr_D (tree_to_shwi (low));\n     }\n   else\n     stabstr_C ('0');\n@@ -1734,7 +1734,7 @@ dbxout_range_type (tree type, tree low, tree high)\n       if (print_int_cst_bounds_in_octal_p (type, low, high))\n         stabstr_O (high);\n       else\n-        stabstr_D (tree_low_cst (high, 0));\n+        stabstr_D (tree_to_shwi (high));\n       stabstr_C (';');\n     }\n   else\n@@ -2210,10 +2210,10 @@ dbxout_type (tree type, int full)\n \t\t     \t offset within the vtable where we must look\n \t\t     \t to find the necessary adjustment.  */\n \t\t      stabstr_D\n-\t\t\t(tree_low_cst (BINFO_VPTR_FIELD (child), 0)\n+\t\t\t(tree_to_shwi (BINFO_VPTR_FIELD (child))\n \t\t\t * BITS_PER_UNIT);\n \t\t    else\n-\t\t      stabstr_D (tree_low_cst (BINFO_OFFSET (child), 0)\n+\t\t      stabstr_D (tree_to_shwi (BINFO_OFFSET (child))\n \t\t\t\t       * BITS_PER_UNIT);\n \t\t    stabstr_C (',');\n \t\t    dbxout_type (BINFO_TYPE (child), 0);\n@@ -2228,11 +2228,11 @@ dbxout_type (tree type, int full)\n \t\t    stabstr_C (':');\n \t\t    dbxout_type (BINFO_TYPE (child), full);\n \t\t    stabstr_C (',');\n-\t\t    stabstr_D (tree_low_cst (BINFO_OFFSET (child), 0)\n+\t\t    stabstr_D (tree_to_shwi (BINFO_OFFSET (child))\n \t\t\t\t     * BITS_PER_UNIT);\n \t\t    stabstr_C (',');\n \t\t    stabstr_D\n-\t\t      (tree_low_cst (TYPE_SIZE (BINFO_TYPE (child)), 0)\n+\t\t      (tree_to_shwi (TYPE_SIZE (BINFO_TYPE (child)))\n \t\t       * BITS_PER_UNIT);\n \t\t    stabstr_C (';');\n \t\t  }\n@@ -2518,7 +2518,7 @@ dbxout_expand_expr (tree expr)\n \t  {\n \t    if (!tree_fits_shwi_p (offset))\n \t      return NULL;\n-\t    x = adjust_address_nv (x, mode, tree_low_cst (offset, 0));\n+\t    x = adjust_address_nv (x, mode, tree_to_shwi (offset));\n \t  }\n \tif (bitpos != 0)\n \t  x = adjust_address_nv (x, mode, bitpos / BITS_PER_UNIT);"}, {"sha": "f313b2ded1a38513bf1ed7234d8822f7386e593c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -14253,10 +14253,10 @@ loc_list_from_tree (tree loc, int want_address)\n \t       && tree_fits_shwi_p (loc)\n \t       && (ret = address_of_int_loc_descriptor\n \t       \t\t   (int_size_in_bytes (TREE_TYPE (loc)),\n-\t       \t\t    tree_low_cst (loc, 0))))\n+\t       \t\t    tree_to_shwi (loc))))\n \thave_address = 1;\n       else if (tree_fits_shwi_p (loc))\n-\tret = int_loc_descriptor (tree_low_cst (loc, 0));\n+\tret = int_loc_descriptor (tree_to_shwi (loc));\n       else\n \t{\n \t  expansion_failed (loc, NULL_RTX,\n@@ -14351,7 +14351,7 @@ loc_list_from_tree (tree loc, int want_address)\n \t  if (list_ret == 0)\n \t    return 0;\n \n-\t  loc_list_plus_const (list_ret, tree_low_cst (TREE_OPERAND (loc, 1), 0));\n+\t  loc_list_plus_const (list_ret, tree_to_shwi (TREE_OPERAND (loc, 1)));\n \t  break;\n \t}\n \n@@ -14855,7 +14855,7 @@ add_data_member_location_attribute (dw_die_ref die, tree decl)\n \t  add_loc_descr (&loc_descr, tmp);\n \n \t  /* Calculate the address of the offset.  */\n-\t  offset = tree_low_cst (BINFO_VPTR_FIELD (decl), 0);\n+\t  offset = tree_to_shwi (BINFO_VPTR_FIELD (decl));\n \t  gcc_assert (offset < 0);\n \n \t  tmp = int_loc_descriptor (-offset);\n@@ -14872,7 +14872,7 @@ add_data_member_location_attribute (dw_die_ref die, tree decl)\n \t  add_loc_descr (&loc_descr, tmp);\n \t}\n       else\n-\toffset = tree_low_cst (BINFO_OFFSET (decl), 0);\n+\toffset = tree_to_shwi (BINFO_OFFSET (decl));\n     }\n   else\n     offset = field_byte_offset (decl);\n@@ -15528,7 +15528,7 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n     {\n       if (!tree_fits_shwi_p (offset))\n \treturn NULL_TREE;\n-      *value = tree_low_cst (offset, 0);\n+      *value = tree_to_shwi (offset);\n     }\n   if (bitpos != 0)\n     *value += bitpos / BITS_PER_UNIT;\n@@ -15701,18 +15701,18 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n \t  if (fieldsize <= 0)\n \t    return false;\n \n-\t  min_index = tree_low_cst (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), 0);\n+\t  min_index = tree_to_shwi (TYPE_MIN_VALUE (TYPE_DOMAIN (type)));\n \t  memset (array, '\\0', size);\n \t  FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (init), cnt, ce)\n \t    {\n \t      tree val = ce->value;\n \t      tree index = ce->index;\n \t      int pos = curpos;\n \t      if (index && TREE_CODE (index) == RANGE_EXPR)\n-\t\tpos = (tree_low_cst (TREE_OPERAND (index, 0), 0) - min_index)\n+\t\tpos = (tree_to_shwi (TREE_OPERAND (index, 0)) - min_index)\n \t\t      * fieldsize;\n \t      else if (index)\n-\t\tpos = (tree_low_cst (index, 0) - min_index) * fieldsize;\n+\t\tpos = (tree_to_shwi (index) - min_index) * fieldsize;\n \n \t      if (val)\n \t\t{\n@@ -15723,8 +15723,8 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n \t      curpos = pos + fieldsize;\n \t      if (index && TREE_CODE (index) == RANGE_EXPR)\n \t\t{\n-\t\t  int count = tree_low_cst (TREE_OPERAND (index, 1), 0)\n-\t\t\t      - tree_low_cst (TREE_OPERAND (index, 0), 0);\n+\t\t  int count = tree_to_shwi (TREE_OPERAND (index, 1))\n+\t\t\t      - tree_to_shwi (TREE_OPERAND (index, 0));\n \t\t  while (count-- > 0)\n \t\t    {\n \t\t      if (val)\n@@ -15770,7 +15770,7 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n \t      else if (DECL_SIZE_UNIT (field) == NULL_TREE\n \t\t       || !tree_fits_shwi_p (DECL_SIZE_UNIT (field)))\n \t\treturn false;\n-\t      fieldsize = tree_low_cst (DECL_SIZE_UNIT (field), 0);\n+\t      fieldsize = tree_to_shwi (DECL_SIZE_UNIT (field));\n \t      pos = int_byte_position (field);\n \t      gcc_assert (pos + fieldsize <= size);\n \t      if (val\n@@ -16162,7 +16162,7 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \tif (bound_attr == DW_AT_lower_bound\n \t    && tree_fits_shwi_p (bound)\n \t    && (dflt = lower_bound_default ()) != -1\n-\t    && tree_low_cst (bound, 0) == dflt)\n+\t    && tree_to_shwi (bound) == dflt)\n \t  ;\n \n \t/* Otherwise represent the bound as an unsigned value with the\n@@ -16410,7 +16410,7 @@ add_bit_offset_attribute (dw_die_ref die, tree decl)\n \n   if (! BYTES_BIG_ENDIAN)\n     {\n-      highest_order_field_bit_offset += tree_low_cst (DECL_SIZE (decl), 0);\n+      highest_order_field_bit_offset += tree_to_shwi (DECL_SIZE (decl));\n       highest_order_object_bit_offset += simple_type_size_in_bits (type);\n     }\n \n@@ -16508,7 +16508,7 @@ add_pure_or_virtual_attribute (dw_die_ref die, tree func_decl)\n       if (tree_fits_shwi_p (DECL_VINDEX (func_decl)))\n \tadd_AT_loc (die, DW_AT_vtable_elem_location,\n \t\t    new_loc_descr (DW_OP_constu,\n-\t\t\t\t   tree_low_cst (DECL_VINDEX (func_decl), 0),\n+\t\t\t\t   tree_to_shwi (DECL_VINDEX (func_decl)),\n \t\t\t\t   0));\n \n       /* GNU extension: Record what type this method came from originally.  */\n@@ -17056,7 +17056,7 @@ descr_info_loc (tree val, tree base_decl)\n       return loc_descriptor_from_tree (val, 0);\n     case INTEGER_CST:\n       if (tree_fits_shwi_p (val))\n-\treturn int_loc_descriptor (tree_low_cst (val, 0));\n+\treturn int_loc_descriptor (tree_to_shwi (val));\n       break;\n     case INDIRECT_REF:\n       size = int_size_in_bytes (TREE_TYPE (val));\n@@ -17079,7 +17079,7 @@ descr_info_loc (tree val, tree base_decl)\n \t  loc = descr_info_loc (TREE_OPERAND (val, 0), base_decl);\n \t  if (!loc)\n \t    break;\n-\t  loc_descr_plus_const (&loc, tree_low_cst (TREE_OPERAND (val, 1), 0));\n+\t  loc_descr_plus_const (&loc, tree_to_shwi (TREE_OPERAND (val, 1)));\n \t}\n       else\n \t{\n@@ -17121,7 +17121,7 @@ add_descr_info_field (dw_die_ref die, enum dwarf_attribute attr,\n \n   if (tree_fits_shwi_p (val))\n     {\n-      add_AT_unsigned (die, attr, tree_low_cst (val, 0));\n+      add_AT_unsigned (die, attr, tree_to_shwi (val));\n       return;\n     }\n \n@@ -17174,7 +17174,7 @@ gen_descr_array_type_die (tree type, struct array_descr_info *info,\n \n \t  if (tree_fits_shwi_p (info->dimen[dim].lower_bound)\n \t      && (dflt = lower_bound_default ()) != -1\n-\t      && tree_low_cst (info->dimen[dim].lower_bound, 0) == dflt)\n+\t      && tree_to_shwi (info->dimen[dim].lower_bound) == dflt)\n \t    ;\n \t  else\n \t    add_descr_info_field (subrange_die, DW_AT_lower_bound,\n@@ -23114,7 +23114,7 @@ optimize_location_into_implicit_ptr (dw_die_ref die, tree decl)\n   if (TREE_CODE (init) == POINTER_PLUS_EXPR\n       && tree_fits_shwi_p (TREE_OPERAND (init, 1)))\n     {\n-      offset = tree_low_cst (TREE_OPERAND (init, 1), 0);\n+      offset = tree_to_shwi (TREE_OPERAND (init, 1));\n       init = TREE_OPERAND (init, 0);\n       STRIP_NOPS (init);\n     }"}, {"sha": "a4481d60e6a4258105cfc0e24a11fcfcd3936468", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -2051,7 +2051,7 @@ expand_builtin_eh_common (tree region_nr_t)\n   eh_region region;\n \n   gcc_assert (tree_fits_shwi_p (region_nr_t));\n-  region_nr = tree_low_cst (region_nr_t, 0);\n+  region_nr = tree_to_shwi (region_nr_t);\n \n   region = (*cfun->eh->region_array)[region_nr];\n "}, {"sha": "3a78a6513607100ff9d7dfe223e7a01924b095e8", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -285,7 +285,7 @@ int_expr_size (tree exp)\n   if (size == 0 || !tree_fits_shwi_p (size))\n     return -1;\n \n-  return tree_low_cst (size, 0);\n+  return tree_to_shwi (size);\n }\n \f\n /* Return a copy of X in which all memory references"}, {"sha": "422030b4a0f2cf31202fc4f7afafd2c23554f8b6", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -5925,7 +5925,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\toffset = 0;\n \t      }\n \t    else\n-\t      bitpos = tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 0);\n+\t      bitpos = tree_to_shwi (DECL_FIELD_BIT_OFFSET (field));\n \n \t    if (offset)\n \t      {\n@@ -6014,8 +6014,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t/* If we have constant bounds for the range of the type, get them.  */\n \tif (const_bounds_p)\n \t  {\n-\t    minelt = tree_low_cst (TYPE_MIN_VALUE (domain), 0);\n-\t    maxelt = tree_low_cst (TYPE_MAX_VALUE (domain), 0);\n+\t    minelt = tree_to_shwi (TYPE_MIN_VALUE (domain));\n+\t    maxelt = tree_to_shwi (TYPE_MAX_VALUE (domain));\n \t  }\n \n \t/* If the constructor has fewer elements than the array, clear\n@@ -6120,8 +6120,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\tif (const_bounds_p\n \t\t    && tree_fits_shwi_p (lo_index)\n \t\t    && tree_fits_shwi_p (hi_index)\n-\t\t    && (lo = tree_low_cst (lo_index, 0),\n-\t\t\thi = tree_low_cst (hi_index, 0),\n+\t\t    && (lo = tree_to_shwi (lo_index),\n+\t\t\thi = tree_to_shwi (hi_index),\n \t\t\tcount = hi - lo + 1,\n \t\t\t(!MEM_P (target)\n \t\t\t || count <= 2\n@@ -6132,7 +6132,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    lo -= minelt;  hi -= minelt;\n \t\t    for (; lo <= hi; lo++)\n \t\t      {\n-\t\t\tbitpos = lo * tree_low_cst (TYPE_SIZE (elttype), 0);\n+\t\t\tbitpos = lo * tree_to_shwi (TYPE_SIZE (elttype));\n \n \t\t\tif (MEM_P (target)\n \t\t\t    && !MEM_KEEP_ALIAS_SET_P (target)\n@@ -6235,7 +6235,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    else\n \t      {\n \t\tif (index != 0)\n-\t\t  bitpos = ((tree_low_cst (index, 0) - minelt)\n+\t\t  bitpos = ((tree_to_shwi (index) - minelt)\n \t\t\t    * tree_low_cst (TYPE_SIZE (elttype), 1));\n \t\telse\n \t\t  bitpos = (i * tree_low_cst (TYPE_SIZE (elttype), 1));\n@@ -8551,7 +8551,7 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t    op0 = copy_to_mode_reg (mode, op0);\n \n \t  return REDUCE_BIT_FIELD (gen_rtx_MULT (mode, op0,\n-\t\t\t       gen_int_mode (tree_low_cst (exp1, 0),\n+\t\t\t       gen_int_mode (tree_to_shwi (exp1),\n \t\t\t\t\t     TYPE_MODE (TREE_TYPE (exp1)))));\n \t}\n "}, {"sha": "fd7a1d48dec619e46839f966dd586de58edba168", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -95,7 +95,7 @@ struct locate_and_pad_arg_data\n do {\t\t\t\t\t\t\t\t\\\n   tree inc = (INC);\t\t\t\t\t\t\\\n   if (tree_fits_shwi_p (inc))\t\t\t\t\t\\\n-    (TO).constant += tree_low_cst (inc, 0);\t\t\t\\\n+    (TO).constant += tree_to_shwi (inc);\t\t\t\\\n   else if ((TO).var == 0)\t\t\t\t\t\\\n     (TO).var = fold_convert (ssizetype, inc);\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n@@ -107,7 +107,7 @@ do {\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   tree dec = (DEC);\t\t\t\t\t\t\\\n   if (tree_fits_shwi_p (dec))\t\t\t\t\t\\\n-    (TO).constant -= tree_low_cst (dec, 0);\t\t\t\\\n+    (TO).constant -= tree_to_shwi (dec);\t\t\t\\\n   else if ((TO).var == 0)\t\t\t\t\t\\\n     (TO).var = size_binop (MINUS_EXPR, ssize_int (0),\t\t\\\n \t\t\t   fold_convert (ssizetype, dec));\t\\"}, {"sha": "46c66d369488d2c6901fffdbee3da21a95792f62", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3421,7 +3421,7 @@ make_bit_field_ref (location_t loc, tree inner, tree type,\n       if ((INTEGRAL_TYPE_P (TREE_TYPE (inner))\n \t   || POINTER_TYPE_P (TREE_TYPE (inner)))\n \t  && tree_fits_shwi_p (size)\n-\t  && tree_low_cst (size, 0) == bitsize)\n+\t  && tree_to_shwi (size) == bitsize)\n \treturn fold_convert_loc (loc, type, inner);\n     }\n \n@@ -7490,7 +7490,7 @@ native_encode_string (const_tree expr, unsigned char *ptr, int len)\n       || GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (type))) != BITS_PER_UNIT\n       || !tree_fits_shwi_p (TYPE_SIZE_UNIT (type)))\n     return 0;\n-  total_bytes = tree_low_cst (TYPE_SIZE_UNIT (type), 0);\n+  total_bytes = tree_to_shwi (TYPE_SIZE_UNIT (type));\n   if (total_bytes > len)\n     return 0;\n   if (TREE_STRING_LENGTH (expr) < total_bytes)\n@@ -16706,9 +16706,9 @@ fold_indirect_ref_1 (location_t loc, tree type, tree op0)\n \t  if (TREE_CODE (op00type) == VECTOR_TYPE\n \t      && type == TREE_TYPE (op00type))\n \t    {\n-\t      HOST_WIDE_INT offset = tree_low_cst (op01, 0);\n+\t      HOST_WIDE_INT offset = tree_to_shwi (op01);\n \t      tree part_width = TYPE_SIZE (type);\n-\t      unsigned HOST_WIDE_INT part_widthi = tree_low_cst (part_width, 0)/BITS_PER_UNIT;\n+\t      unsigned HOST_WIDE_INT part_widthi = tree_to_shwi (part_width)/BITS_PER_UNIT;\n \t      unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n \t      tree index = bitsize_int (indexi);\n "}, {"sha": "a28be3333acb837c4bd1592d610ad6d8fadb2bac", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3406,7 +3406,7 @@ gimple_fold_indirect_ref (tree t)\n           unsigned HOST_WIDE_INT offset = tree_low_cst (off, 1);\n           tree part_width = TYPE_SIZE (type);\n           unsigned HOST_WIDE_INT part_widthi\n-            = tree_low_cst (part_width, 0) / BITS_PER_UNIT;\n+            = tree_to_shwi (part_width) / BITS_PER_UNIT;\n           unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n           tree index = bitsize_int (indexi);\n           if (offset / part_widthi"}, {"sha": "6f6b53e58a060055f349403b0d51e9cbb673f49c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gofrontend/expressions.cc: Replace tree_low_cst (..., 0) with\n+\ttree_to_shwi throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gofrontend/expressions.cc: Replace host_integerp (..., 0) with"}, {"sha": "823c5e1a4c8c85f95fb8c9dcd2135c119fac7e25", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3345,7 +3345,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n       expr_tree = fold_convert(int_type_tree, expr_tree);\n       if (tree_fits_shwi_p (expr_tree))\n \t{\n-\t  HOST_WIDE_INT intval = tree_low_cst(expr_tree, 0);\n+\t  HOST_WIDE_INT intval = tree_to_shwi (expr_tree);\n \t  std::string s;\n \t  Lex::append_char(intval, true, &s, this->location());\n \t  Expression* se = Expression::make_string(s, this->location());"}, {"sha": "4f2d82a4e1da23a8ca1d3088ddfe22e1fe322b83", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -733,7 +733,7 @@ go_format_type (struct godump_container *container, tree type,\n \t  char buf[100];\n \n \t  snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DEC \"+1\",\n-\t\t    tree_low_cst (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), 0));\n+\t\t    tree_to_shwi (TYPE_MAX_VALUE (TYPE_DOMAIN (type))));\n \t  obstack_grow (ob, buf, strlen (buf));\n \t}\n       obstack_1grow (ob, ']');\n@@ -983,7 +983,7 @@ go_output_typedef (struct godump_container *container, tree decl)\n \n \t  if (tree_fits_shwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DEC,\n-\t\t     tree_low_cst (TREE_VALUE (element), 0));\n+\t\t     tree_to_shwi (TREE_VALUE (element)));\n \t  else if (tree_fits_uhwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     ((unsigned HOST_WIDE_INT)"}, {"sha": "f065370c881428fe15088fd51b762bc44483c8d9", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -4610,7 +4610,7 @@ ipcp_transform_function (struct cgraph_node *node)\n \t    break;\n \tif (!v\n \t    || v->by_ref != by_ref\n-\t    || tree_low_cst (TYPE_SIZE (TREE_TYPE (v->value)), 0) != size)\n+\t    || tree_to_shwi (TYPE_SIZE (TREE_TYPE (v->value))) != size)\n \t  continue;\n \n \tgcc_checking_assert (is_gimple_ip_invariant (v->value));"}, {"sha": "3ffa76da8c298f95332c049d1b4311b312239c73", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* class.c, expr.c: Replace tree_low_cst (..., 0) with tree_to_shwi\n+\tthroughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* class.c, expr.c: Replace host_integerp (..., 0) with"}, {"sha": "251873e08110314343c910842be7271a605d1104", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1576,14 +1576,14 @@ get_dispatch_vector (tree type)\n       HOST_WIDE_INT i;\n       tree method;\n       tree super = CLASSTYPE_SUPER (type);\n-      HOST_WIDE_INT nvirtuals = tree_low_cst (TYPE_NVIRTUALS (type), 0);\n+      HOST_WIDE_INT nvirtuals = tree_to_shwi (TYPE_NVIRTUALS (type));\n       vtable = make_tree_vec (nvirtuals);\n       TYPE_VTABLE (type) = vtable;\n       if (super != NULL_TREE)\n \t{\n \t  tree super_vtable = get_dispatch_vector (super);\n \n-\t  for (i = tree_low_cst (TYPE_NVIRTUALS (super), 0); --i >= 0; )\n+\t  for (i = tree_to_shwi (TYPE_NVIRTUALS (super)); --i >= 0; )\n \t    TREE_VEC_ELT (vtable, i) = TREE_VEC_ELT (super_vtable, i);\n \t}\n \n@@ -1593,7 +1593,7 @@ get_dispatch_vector (tree type)\n \t  tree method_index = get_method_index (method);\n \t  if (method_index != NULL_TREE\n \t      && tree_fits_shwi_p (method_index))\n-\t    TREE_VEC_ELT (vtable, tree_low_cst (method_index, 0)) = method;\n+\t    TREE_VEC_ELT (vtable, tree_to_shwi (method_index)) = method;\n \t}\n     }\n "}, {"sha": "6dc00c6fc5d38113799830869c4e641e66369662", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1050,7 +1050,7 @@ build_newarray (int atype_value, tree length)\n   tree type\n     = build_java_array_type (prim_type,\n \t\t\t     tree_fits_shwi_p (length) == INTEGER_CST\n-\t\t\t     ? tree_low_cst (length, 0) : -1);\n+\t\t\t     ? tree_to_shwi (length) : -1);\n \n   /* Pass a reference to the primitive type class and save the runtime\n      some work.  */\n@@ -1070,7 +1070,7 @@ build_anewarray (tree class_type, tree length)\n   tree type\n     = build_java_array_type (class_type,\n \t\t\t     tree_fits_shwi_p (length)\n-\t\t\t     ? tree_low_cst (length, 0) : -1);\n+\t\t\t     ? tree_to_shwi (length) : -1);\n \n   return build_call_nary (promote_type (type),\n \t\t\t  build_address_of (soft_anewarray_node),"}, {"sha": "42a4600f5190b62594d1dddd0871625dbac6ab10", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* objc-next-runtime-abi-02.c: Replace tree_low_cst (..., 0) with\n+\ttree_to_shwi throughout.\n+\n 2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objc-act.c: Include only gimplify.h and gimple.h as needed."}, {"sha": "885047705d48d3c2268f963bfff65cf5a7ec3732", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3267,7 +3267,7 @@ generate_v2_class_structs (struct imp_entry *impent)\n \n   if (field && TREE_CODE (field) == FIELD_DECL)\n     instanceSize = int_byte_position (field) * BITS_PER_UNIT\n-\t\t   + tree_low_cst (DECL_SIZE (field), 0);\n+\t\t   + tree_to_shwi (DECL_SIZE (field));\n   else\n     instanceSize = 0;\n   instanceSize /= BITS_PER_UNIT;"}, {"sha": "e18f9ff772dcd379f172c8ce404362744c7ecd1c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -2291,7 +2291,7 @@ check_omp_nesting_restrictions (gimple stmt, omp_context *ctx)\n \t      return false;\n \t    }\n \t  switch (tree_fits_shwi_p (gimple_call_arg (stmt, 0))\n-\t\t  ? tree_low_cst (gimple_call_arg (stmt, 0), 0)\n+\t\t  ? tree_to_shwi (gimple_call_arg (stmt, 0))\n \t\t  : 0)\n \t    {\n \t    case 1:\n@@ -2954,7 +2954,7 @@ lower_rec_simd_input_clauses (tree new_var, omp_context *ctx, int &max_vf,\n \t\t\t\t    OMP_CLAUSE_SAFELEN);\n \t  if (c\n \t      && compare_tree_int (OMP_CLAUSE_SAFELEN_EXPR (c), max_vf) == -1)\n-\t    max_vf = tree_low_cst (OMP_CLAUSE_SAFELEN_EXPR (c), 0);\n+\t    max_vf = tree_to_shwi (OMP_CLAUSE_SAFELEN_EXPR (c));\n \t}\n       if (max_vf > 1)\n \t{"}, {"sha": "95d3774d6977f32b2e4fe723eafba0b7b05999ef", "filename": "gcc/predict.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1054,14 +1054,14 @@ strips_small_constant (tree t1, tree t2)\n   else if (TREE_CODE (t1) == SSA_NAME)\n     ret = t1;\n   else if (tree_fits_shwi_p (t1))\n-    value = tree_low_cst (t1, 0);\n+    value = tree_to_shwi (t1);\n   else\n     return NULL;\n \n   if (!t2)\n     return ret;\n   else if (tree_fits_shwi_p (t2))\n-    value = tree_low_cst (t2, 0);\n+    value = tree_to_shwi (t2);\n   else if (TREE_CODE (t2) == SSA_NAME)\n     {\n       if (ret)\n@@ -1674,7 +1674,7 @@ predict_loops (void)\n \t  if (loop_bound_var)\n \t    predict_iv_comparison (loop, bb, loop_bound_var, loop_iv_base,\n \t\t\t\t   loop_bound_code,\n-\t\t\t\t   tree_low_cst (loop_bound_step, 0));\n+\t\t\t\t   tree_to_shwi (loop_bound_step));\n \t}\n \n       /* Free basic blocks from get_loop_body.  */"}, {"sha": "0cd0c7e1a74be6d16d676d3496343d008270b092", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -280,7 +280,7 @@ rtx_addr_can_trap_p_1 (const_rtx x, HOST_WIDE_INT offset, HOST_WIDE_INT size,\n \t    decl_size = -1;\n \t  else if (DECL_P (decl) && DECL_SIZE_UNIT (decl))\n \t    decl_size = (tree_fits_shwi_p (DECL_SIZE_UNIT (decl))\n-\t\t\t ? tree_low_cst (DECL_SIZE_UNIT (decl), 0)\n+\t\t\t ? tree_to_shwi (DECL_SIZE_UNIT (decl))\n \t\t\t : -1);\n \t  else if (TREE_CODE (decl) == STRING_CST)\n \t    decl_size = TREE_STRING_LENGTH (decl);"}, {"sha": "6706789331f406a07d29edc7c671aeeff1ce3cea", "filename": "gcc/sdbout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -537,8 +537,8 @@ plain_type_1 (tree type, int level)\n \t       && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != 0\n \t       && tree_fits_shwi_p (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n \t       && tree_fits_shwi_p (TYPE_MIN_VALUE (TYPE_DOMAIN (type)))\n-\t       ? (tree_low_cst (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), 0)\n-\t\t  - tree_low_cst (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), 0) + 1)\n+\t       ? (tree_to_shwi (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n+\t\t  - tree_to_shwi (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1)\n \t       : 0);\n \n \treturn PUSH_DERIVED_LEVEL (DT_ARY, m);\n@@ -1134,7 +1134,7 @@ sdbout_one_type (tree type)\n \t\t  continue;\n \n \t\tPUT_SDB_DEF (IDENTIFIER_POINTER (child_type_name));\n-\t\tPUT_SDB_INT_VAL (tree_low_cst (BINFO_OFFSET (child), 0));\n+\t\tPUT_SDB_INT_VAL (tree_to_shwi (BINFO_OFFSET (child)));\n \t\tPUT_SDB_SCL (member_scl);\n \t\tsdbout_type (BINFO_TYPE (child));\n \t\tPUT_SDB_ENDEF;\n@@ -1155,7 +1155,7 @@ sdbout_one_type (tree type)\n \t        if (tree_fits_shwi_p (value))\n \t\t  {\n \t\t    PUT_SDB_DEF (IDENTIFIER_POINTER (TREE_PURPOSE (tem)));\n-\t\t    PUT_SDB_INT_VAL (tree_low_cst (value, 0));\n+\t\t    PUT_SDB_INT_VAL (tree_to_shwi (value));\n \t\t    PUT_SDB_SCL (C_MOE);\n \t\t    PUT_SDB_TYPE (T_MOE);\n \t\t    PUT_SDB_ENDEF;"}, {"sha": "04d9586697b5970bf6a543fb1f436a8d61e56930", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -776,8 +776,8 @@ dump_case_nodes (FILE *f, struct case_node *root,\n \n   dump_case_nodes (f, root->left, indent_step, indent_level);\n \n-  low = tree_low_cst (root->low, 0);\n-  high = tree_low_cst (root->high, 0);\n+  low = tree_to_shwi (root->low);\n+  high = tree_to_shwi (root->high);\n \n   fputs (\";; \", f);\n   if (high == low)\n@@ -1019,7 +1019,7 @@ emit_case_dispatch_table (tree index_expr, tree index_type,\n \n   /* Get table of labels to jump to, in order of case index.  */\n \n-  ncases = tree_low_cst (range, 0) + 1;\n+  ncases = tree_to_shwi (range) + 1;\n   labelvec = XALLOCAVEC (rtx, ncases);\n   memset (labelvec, 0, ncases * sizeof (rtx));\n "}, {"sha": "48c6c783a142a671f15fc099887add96d1625c04", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1201,8 +1201,8 @@ place_field (record_layout_info rli, tree field)\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n       HOST_WIDE_INT field_size = tree_low_cst (dsize, 1);\n-      HOST_WIDE_INT offset = tree_low_cst (rli->offset, 0);\n-      HOST_WIDE_INT bit_offset = tree_low_cst (rli->bitpos, 0);\n+      HOST_WIDE_INT offset = tree_to_shwi (rli->offset);\n+      HOST_WIDE_INT bit_offset = tree_to_shwi (rli->bitpos);\n \n #ifdef ADJUST_FIELD_ALIGN\n       if (! TYPE_USER_ALIGN (type))\n@@ -1245,8 +1245,8 @@ place_field (record_layout_info rli, tree field)\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n       HOST_WIDE_INT field_size = tree_low_cst (dsize, 1);\n-      HOST_WIDE_INT offset = tree_low_cst (rli->offset, 0);\n-      HOST_WIDE_INT bit_offset = tree_low_cst (rli->bitpos, 0);\n+      HOST_WIDE_INT offset = tree_to_shwi (rli->offset);\n+      HOST_WIDE_INT bit_offset = tree_to_shwi (rli->bitpos);\n \n #ifdef ADJUST_FIELD_ALIGN\n       if (! TYPE_USER_ALIGN (type))"}, {"sha": "cddc439546f0a63b38f91049a8d6584102b66202", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -994,7 +994,7 @@ tree default_mangle_decl_assembler_name (tree decl ATTRIBUTE_UNUSED,\n HOST_WIDE_INT\n default_vector_alignment (const_tree type)\n {\n-  return tree_low_cst (TYPE_SIZE (type), 0);\n+  return tree_to_shwi (TYPE_SIZE (type));\n }\n \n bool"}, {"sha": "dbcf20ca2b8f987c0c97fd8e98d322bbd52c9208", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -282,7 +282,7 @@ replace_loop_annotate ()\n \t  if (!gimple_call_internal_p (stmt)\n \t\t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n \t    continue;\n-\t  if ((annot_expr_kind) tree_low_cst (gimple_call_arg (stmt, 1), 0)\n+\t  if ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1))\n \t      != annot_expr_ivdep_kind)\n \t    continue;\n \t  stmt = gimple_build_assign (gimple_call_lhs (stmt),\n@@ -307,7 +307,7 @@ replace_loop_annotate ()\n       if (!gimple_call_internal_p (stmt)\n \t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n \tcontinue;\n-      if ((annot_expr_kind) tree_low_cst (gimple_call_arg (stmt, 1), 0)\n+      if ((annot_expr_kind) tree_to_shwi (gimple_call_arg (stmt, 1))\n \t  != annot_expr_ivdep_kind)\n \tcontinue;\n       warning_at (gimple_location (stmt), 0, \"ignoring %<GCC ivdep%> \"\n@@ -6273,7 +6273,7 @@ move_stmt_eh_region_tree_nr (tree old_t_nr, struct move_stmt_d *p)\n {\n   int old_nr, new_nr;\n \n-  old_nr = tree_low_cst (old_t_nr, 0);\n+  old_nr = tree_to_shwi (old_t_nr);\n   new_nr = move_stmt_eh_region_nr (old_nr, p);\n \n   return build_int_cst (integer_type_node, new_nr);"}, {"sha": "dde08bb47eb8bd940aca267865dfcf748613a9bc", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -2840,14 +2840,14 @@ gcd_of_steps_may_divide_p (const_tree chrec, const_tree cst)\n \n   if (!tree_fits_shwi_p (cst))\n     return true;\n-  val = tree_low_cst (cst, 0);\n+  val = tree_to_shwi (cst);\n \n   while (TREE_CODE (chrec) == POLYNOMIAL_CHREC)\n     {\n       step = CHREC_RIGHT (chrec);\n       if (!tree_fits_shwi_p (step))\n \treturn true;\n-      cd = gcd (cd, tree_low_cst (step, 0));\n+      cd = gcd (cd, tree_to_shwi (step));\n       chrec = CHREC_LEFT (chrec);\n     }\n "}, {"sha": "caecbf27ee71e91f2a518fbc1fe2af1bc2cfc83b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1221,7 +1221,7 @@ remap_eh_region_tree_nr (tree old_t_nr, copy_body_data *id)\n {\n   int old_nr, new_nr;\n \n-  old_nr = tree_low_cst (old_t_nr, 0);\n+  old_nr = tree_to_shwi (old_t_nr);\n   new_nr = remap_eh_region_nr (old_nr, id);\n \n   return build_int_cst (integer_type_node, new_nr);"}, {"sha": "af84ad86cd05f5f7a57db9521edf59870d002cb3", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1631,9 +1631,9 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t\t    TREE_STRING_POINTER (str1) + tree_low_cst (off1, 1),\n \t\t    tree_low_cst (len1, 1));\n \t  else\n-\t    src_buf[0] = tree_low_cst (src1, 0);\n+\t    src_buf[0] = tree_to_shwi (src1);\n \t  memset (src_buf + tree_low_cst (diff, 1),\n-\t\t  tree_low_cst (val2, 0), tree_low_cst (len2, 1));\n+\t\t  tree_to_shwi (val2), tree_low_cst (len2, 1));\n \t  src_buf[src_len] = '\\0';\n \t  /* Neither builtin_strncpy_read_str nor builtin_memcpy_read_str\n \t     handle embedded '\\0's.  */\n@@ -2355,7 +2355,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t   with optional casts.  */\n \tif (cdef_code[i] == MINUS_EXPR\n \t    && tree_fits_shwi_p (cdef_arg1[i])\n-\t    && tree_low_cst (cdef_arg1[i], 0) == TYPE_PRECISION (rtype)\n+\t    && tree_to_shwi (cdef_arg1[i]) == TYPE_PRECISION (rtype)\n \t    && TREE_CODE (cdef_arg2[i]) == SSA_NAME)\n \t  {\n \t    tree tem;\n@@ -2387,7 +2387,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t   One shift count is Y and the other (-Y) & (B - 1).  */\n \telse if (cdef_code[i] == BIT_AND_EXPR\n \t\t && tree_fits_shwi_p (cdef_arg2[i])\n-\t\t && tree_low_cst (cdef_arg2[i], 0)\n+\t\t && tree_to_shwi (cdef_arg2[i])\n \t\t    == TYPE_PRECISION (rtype) - 1\n \t\t && TREE_CODE (cdef_arg1[i]) == SSA_NAME\n \t\t && gimple_assign_rhs_code (stmt) == BIT_IOR_EXPR)"}, {"sha": "94e17e53437d7bf312458a0863d8c5995a36eafb", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1459,7 +1459,7 @@ add_subscript_strides (tree access_fn, unsigned stride,\n \tcontinue;\n \n       if (tree_fits_shwi_p (step))\n-\tastep = tree_low_cst (step, 0);\n+\tastep = tree_to_shwi (step);\n       else\n \tastep = L1_CACHE_LINE_SIZE;\n "}, {"sha": "dd0ebc170eabbae27d58f5d6bf70a6c954ed4580", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -1375,7 +1375,7 @@ add_or_mark_expr (basic_block bb, tree exp,\n       map.phase = 0;\n       map.bb = 0;\n       map.store = store;\n-      map.offset = tree_low_cst (TREE_OPERAND (exp, 1), 0);\n+      map.offset = tree_to_shwi (TREE_OPERAND (exp, 1));\n       map.size = size;\n \n       slot = seen_ssa_names.find_slot (&map, INSERT);"}, {"sha": "8742e267ddb4c7cd056c76aa13e122176a33a1ac", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -995,7 +995,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \n \t/* And now the usual component-reference style ops.  */\n \tcase BIT_FIELD_REF:\n-\t  offset += tree_low_cst (op->op1, 0);\n+\t  offset += tree_to_shwi (op->op1);\n \t  break;\n \n \tcase COMPONENT_REF:"}, {"sha": "842db122d772169a87ad6af84723fe436b7e826f", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -218,7 +218,7 @@ get_stridx (tree exp)\n       && (o == NULL_TREE || tree_fits_shwi_p (o))\n       && TREE_STRING_LENGTH (s) > 0)\n     {\n-      HOST_WIDE_INT offset = o ? tree_low_cst (o, 0) : 0;\n+      HOST_WIDE_INT offset = o ? tree_to_shwi (o) : 0;\n       const char *p = TREE_STRING_POINTER (s);\n       int max = TREE_STRING_LENGTH (s) - 1;\n "}, {"sha": "66655d818f265a7f754e8af07d8d414890e80ad3", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -596,7 +596,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t      tree access_size = TYPE_SIZE_UNIT (TREE_TYPE (rhs));\n \n \t\t      gpr_size = si->offsets[SSA_NAME_VERSION (use)]\n-\t\t\t  \t + tree_low_cst (TREE_OPERAND (rhs, 1), 0)\n+\t\t\t  \t + tree_to_shwi (TREE_OPERAND (rhs, 1))\n \t\t\t\t + tree_low_cst (access_size, 1);\n \t\t      if (gpr_size >= VA_LIST_MAX_GPR_SIZE)\n \t\t\tcfun->va_list_gpr_size = VA_LIST_MAX_GPR_SIZE;"}, {"sha": "83d1f4546bdbfd09aca6bee636c6913217bba6a1", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -3071,7 +3071,7 @@ vect_check_gather (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n \tcase MULT_EXPR:\n \t  if (scale == 1 && tree_fits_shwi_p (op1))\n \t    {\n-\t      scale = tree_low_cst (op1, 0);\n+\t      scale = tree_to_shwi (op1);\n \t      off = op0;\n \t      continue;\n \t    }"}, {"sha": "17411cd5ff79d83469e7d20ce0e804c53e2597f5", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -784,7 +784,7 @@ vect_recog_pow_pattern (vec<gimple> *stmts, tree *type_in,\n \n   /* Catch squaring.  */\n   if ((tree_fits_shwi_p (exp)\n-       && tree_low_cst (exp, 0) == 2)\n+       && tree_to_shwi (exp) == 2)\n       || (TREE_CODE (exp) == REAL_CST\n           && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst2)))\n     {"}, {"sha": "4fc92e848a9b176c0669966a19238b88026e3a32", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -2709,7 +2709,7 @@ bit_position (const_tree field)\n HOST_WIDE_INT\n int_bit_position (const_tree field)\n {\n-  return tree_low_cst (bit_position (field), 0);\n+  return tree_to_shwi (bit_position (field));\n }\n \f\n /* Return the byte position of FIELD, in bytes from the start of the record.\n@@ -2729,7 +2729,7 @@ byte_position (const_tree field)\n HOST_WIDE_INT\n int_byte_position (const_tree field)\n {\n-  return tree_low_cst (byte_position (field), 0);\n+  return tree_to_shwi (byte_position (field));\n }\n \f\n /* Return the strictest alignment, in bits, that T is known to have.  */"}, {"sha": "e61f6d403f78bb1a6b14a54e5b8b88bbe2547421", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -604,7 +604,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define SET_PREDICT_EXPR_OUTCOME(NODE, OUTCOME) \\\n   (PREDICT_EXPR_CHECK (NODE)->base.addressable_flag = (int) OUTCOME)\n #define PREDICT_EXPR_PREDICTOR(NODE) \\\n-  ((enum br_predictor)tree_low_cst (TREE_OPERAND (PREDICT_EXPR_CHECK (NODE), 0), 0))\n+  ((enum br_predictor)tree_to_shwi (TREE_OPERAND (PREDICT_EXPR_CHECK (NODE), 0)))\n \n /* In a VAR_DECL, nonzero means allocate static storage.\n    In a FUNCTION_DECL, nonzero if function has been defined."}, {"sha": "edffd8b024cd25a5b926aac7920a8ea2580112c6", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -6292,7 +6292,7 @@ prepare_call_arguments (basic_block bb, rtx insn)\n \t\t\t  initial = DECL_INITIAL (SYMBOL_REF_DECL (l->loc));\n \t\t\t  if (tree_fits_shwi_p (initial))\n \t\t\t    {\n-\t\t\t      item = GEN_INT (tree_low_cst (initial, 0));\n+\t\t\t      item = GEN_INT (tree_to_shwi (initial));\n \t\t\t      item = gen_rtx_CONCAT (indmode, mem, item);\n \t\t\t      call_arguments\n \t\t\t\t= gen_rtx_EXPR_LIST (VOIDmode, item,\n@@ -6371,7 +6371,7 @@ prepare_call_arguments (basic_block bb, rtx insn)\n \t= TYPE_MODE (TREE_TYPE (OBJ_TYPE_REF_EXPR (obj_type_ref)));\n       rtx clobbered = gen_rtx_MEM (mode, this_arg);\n       HOST_WIDE_INT token\n-\t= tree_low_cst (OBJ_TYPE_REF_TOKEN (obj_type_ref), 0);\n+\t= tree_to_shwi (OBJ_TYPE_REF_TOKEN (obj_type_ref));\n       if (token)\n \tclobbered = plus_constant (mode, clobbered,\n \t\t\t\t   token * GET_MODE_SIZE (mode));"}, {"sha": "fc519f34d950f75cbda1f1179307f082298c80db", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9439e9a1a4aed9382d459eab247958671ea5a30d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9439e9a1a4aed9382d459eab247958671ea5a30d", "patch": "@@ -2718,7 +2718,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n \t       || TREE_CODE (target) == ARRAY_RANGE_REF)\n \t{\n \t  offset += (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (target)), 1)\n-\t\t     * tree_low_cst (TREE_OPERAND (target, 1), 0));\n+\t\t     * tree_to_shwi (TREE_OPERAND (target, 1)));\n \t  target = TREE_OPERAND (target, 0);\n \t}\n       else if (TREE_CODE (target) == MEM_REF\n@@ -4664,7 +4664,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n   if (TREE_CODE (exp) == FDESC_EXPR)\n     {\n #ifdef ASM_OUTPUT_FDESC\n-      HOST_WIDE_INT part = tree_low_cst (TREE_OPERAND (exp, 1), 0);\n+      HOST_WIDE_INT part = tree_to_shwi (TREE_OPERAND (exp, 1));\n       tree decl = TREE_OPERAND (exp, 0);\n       ASM_OUTPUT_FDESC (asm_out_file, decl, part);\n #else\n@@ -4833,9 +4833,9 @@ output_constructor_array_range (oc_local_state *local)\n     = int_size_in_bytes (TREE_TYPE (local->type));\n \n   HOST_WIDE_INT lo_index\n-    = tree_low_cst (TREE_OPERAND (local->index, 0), 0);\n+    = tree_to_shwi (TREE_OPERAND (local->index, 0));\n   HOST_WIDE_INT hi_index\n-    = tree_low_cst (TREE_OPERAND (local->index, 1), 0);\n+    = tree_to_shwi (TREE_OPERAND (local->index, 1));\n   HOST_WIDE_INT index;\n \n   unsigned int align2\n@@ -4958,8 +4958,8 @@ output_constructor_bitfield (oc_local_state *local, unsigned int bit_offset)\n   HOST_WIDE_INT relative_index\n     = (!local->field\n        ? (local->index\n-\t  ? (tree_low_cst (local->index, 0)\n-\t     - tree_low_cst (local->min_index, 0))\n+\t  ? (tree_to_shwi (local->index)\n+\t     - tree_to_shwi (local->min_index))\n \t  : local->last_relative_index + 1)\n        : 0);\n "}]}