{"sha": "403f0dac0cb24184631e175836766a3a1da165a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzZjBkYWMwY2IyNDE4NDYzMWUxNzU4MzY3NjZhM2ExZGExNjVhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-05T09:16:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-05T13:13:38Z"}, "message": "Fix SLP vectorization of stores from boolean vectors\n\nThe following fixes SLP vectorization of stores that were\npattern recognized.  Since in SLP vectorization pattern analysis\nhappens after dataref group analysis we have to adjust the groups\nwith the pattern stmts.  This has some effects down the pipeline\nand exposes cases where we looked at the wrong pattern/non-pattern\nstmts.\n\n2020-11-05  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n\tUse the original stmts.\n\t(vect_slp_analyze_node_alignment): Use the pattern stmt.\n\t* tree-vect-slp.c (vect_fixup_store_groups_with_patterns):\n\tNew function.\n\t(vect_slp_analyze_bb_1): Call it.\n\n\t* gcc.dg/vect/bb-slp-69.c: New testcase.", "tree": {"sha": "8677b341f940e393dbff05e53fae1f385f5c2540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8677b341f940e393dbff05e53fae1f385f5c2540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/403f0dac0cb24184631e175836766a3a1da165a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403f0dac0cb24184631e175836766a3a1da165a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403f0dac0cb24184631e175836766a3a1da165a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403f0dac0cb24184631e175836766a3a1da165a5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199988774d74091e467aef695d0d985528360613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199988774d74091e467aef695d0d985528360613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199988774d74091e467aef695d0d985528360613"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "ca72a6804b733731c256ce903d8dde9f8360e7d2", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-69.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-69.c?ref=403f0dac0cb24184631e175836766a3a1da165a5", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+_Bool arr[16];\n+\n+void foo(char *q)\n+{\n+  char *p = __builtin_assume_aligned (q, 16);\n+  _Bool b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15;\n+  b0 = p[0] != 0;\n+  b1 = p[1] != 0;\n+  b2 = p[2] != 0;\n+  b3 = p[3] != 0;\n+  b4 = p[4] != 0;\n+  b5 = p[5] != 0;\n+  b6 = p[6] != 0;\n+  b7 = p[7] != 0;\n+  b8 = p[8] != 0;\n+  b9 = p[9] != 0;\n+  b10 = p[10] != 0;\n+  b11 = p[11] != 0;\n+  b12 = p[12] != 0;\n+  b13 = p[13] != 0;\n+  b14 = p[14] != 0;\n+  b15 = p[15] != 0;\n+  arr[0] = b0;\n+  arr[1] = b1;\n+  arr[2] = b2;\n+  arr[3] = b3;\n+  arr[4] = b4;\n+  arr[5] = b5;\n+  arr[6] = b6;\n+  arr[7] = b7;\n+  arr[8] = b8;\n+  arr[9] = b9;\n+  arr[10] = b10;\n+  arr[11] = b11;\n+  arr[12] = b12;\n+  arr[13] = b13;\n+  arr[14] = b14;\n+  arr[15] = b15;\n+}\n+\n+/* { dg-final { scan-tree-dump \"transform load\" \"slp2\" } } */\n+/* { dg-final { scan-tree-dump \"optimized: basic block\" \"slp2\" } } */"}, {"sha": "8afd3044461cd5ec51058ae6aadfd89a02854fea", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=403f0dac0cb24184631e175836766a3a1da165a5", "patch": "@@ -688,7 +688,8 @@ vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n       stmt_vec_info last_access_info = vect_find_last_scalar_stmt_in_slp (node);\n       for (unsigned k = 0; k < SLP_TREE_SCALAR_STMTS (node).length (); ++k)\n \t{\n-\t  stmt_vec_info access_info = SLP_TREE_SCALAR_STMTS (node)[k];\n+\t  stmt_vec_info access_info\n+\t    = vect_orig_stmt (SLP_TREE_SCALAR_STMTS (node)[k]);\n \t  if (access_info == last_access_info)\n \t    continue;\n \t  data_reference *dr_a = STMT_VINFO_DATA_REF (access_info);\n@@ -759,7 +760,8 @@ vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n \t= vect_find_first_scalar_stmt_in_slp (node);\n       for (unsigned k = 0; k < SLP_TREE_SCALAR_STMTS (node).length (); ++k)\n \t{\n-\t  stmt_vec_info access_info = SLP_TREE_SCALAR_STMTS (node)[k];\n+\t  stmt_vec_info access_info\n+\t    = vect_orig_stmt (SLP_TREE_SCALAR_STMTS (node)[k]);\n \t  if (access_info == first_access_info)\n \t    continue;\n \t  data_reference *dr_a = STMT_VINFO_DATA_REF (access_info);\n@@ -2444,7 +2446,8 @@ vect_slp_analyze_node_alignment (vec_info *vinfo, slp_tree node)\n \n   /* For creating the data-ref pointer we need alignment of the\n      first element as well.  */\n-  first_stmt_info = vect_find_first_scalar_stmt_in_slp (node);\n+  first_stmt_info\n+    = vect_stmt_to_vectorize (vect_find_first_scalar_stmt_in_slp (node));\n   if (first_stmt_info != SLP_TREE_SCALAR_STMTS (node)[0])\n     {\n       first_dr_info = STMT_VINFO_DR_INFO (first_stmt_info);"}, {"sha": "9c63983b625939571b5d804bd8ee87c534f052cb", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403f0dac0cb24184631e175836766a3a1da165a5/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=403f0dac0cb24184631e175836766a3a1da165a5", "patch": "@@ -4035,6 +4035,48 @@ vect_slp_check_for_constructors (bb_vec_info bb_vinfo)\n     }\n }\n \n+/* Walk the grouped store chains and replace entries with their\n+   pattern variant if any.  */\n+\n+static void\n+vect_fixup_store_groups_with_patterns (vec_info *vinfo)\n+{\n+  stmt_vec_info first_element;\n+  unsigned i;\n+\n+  FOR_EACH_VEC_ELT (vinfo->grouped_stores, i, first_element)\n+    {\n+      /* We also have CTORs in this array.  */\n+      if (!STMT_VINFO_GROUPED_ACCESS (first_element))\n+\tcontinue;\n+      if (STMT_VINFO_IN_PATTERN_P (first_element))\n+\t{\n+\t  stmt_vec_info orig = first_element;\n+\t  first_element = STMT_VINFO_RELATED_STMT (first_element);\n+\t  DR_GROUP_FIRST_ELEMENT (first_element) = first_element;\n+\t  DR_GROUP_SIZE (first_element) = DR_GROUP_SIZE (orig);\n+\t  DR_GROUP_GAP (first_element) = DR_GROUP_GAP (orig);\n+\t  DR_GROUP_NEXT_ELEMENT (first_element) = DR_GROUP_NEXT_ELEMENT (orig);\n+\t  vinfo->grouped_stores[i] = first_element;\n+\t}\n+      stmt_vec_info prev = first_element;\n+      while (DR_GROUP_NEXT_ELEMENT (prev))\n+\t{\n+\t  stmt_vec_info elt = DR_GROUP_NEXT_ELEMENT (prev);\n+\t  if (STMT_VINFO_IN_PATTERN_P (elt))\n+\t    {\n+\t      stmt_vec_info orig = elt;\n+\t      elt = STMT_VINFO_RELATED_STMT (elt);\n+\t      DR_GROUP_NEXT_ELEMENT (prev) = elt;\n+\t      DR_GROUP_GAP (elt) = DR_GROUP_GAP (orig);\n+\t      DR_GROUP_NEXT_ELEMENT (elt) = DR_GROUP_NEXT_ELEMENT (orig);\n+\t    }\n+\t  DR_GROUP_FIRST_ELEMENT (elt) = first_element;\n+\t  prev = elt;\n+\t}\n+    }\n+}\n+\n /* Check if the region described by BB_VINFO can be vectorized, returning\n    true if so.  When returning false, set FATAL to true if the same failure\n    would prevent vectorization at other vector sizes, false if it is still\n@@ -4093,6 +4135,9 @@ vect_slp_analyze_bb_1 (bb_vec_info bb_vinfo, int n_stmts, bool &fatal,\n \n   vect_pattern_recog (bb_vinfo);\n \n+  /* Update store groups from pattern processing.  */\n+  vect_fixup_store_groups_with_patterns (bb_vinfo);\n+\n   /* Check the SLP opportunities in the basic block, analyze and build SLP\n      trees.  */\n   if (!vect_analyze_slp (bb_vinfo, n_stmts))"}]}