{"sha": "26f1a658e6308da5a7b804391c624acc3b1bee74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmMWE2NThlNjMwOGRhNWE3YjgwNDM5MWM2MjRhY2MzYjFiZWU3NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-05-04T13:57:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-05-04T13:57:35Z"}, "message": "ipa-cp.c (perform_estimation_of_a_value): Drop base_time parameter; update use of estimate_ipcp_clone_size_and_time.\n\n\n\t* ipa-cp.c (perform_estimation_of_a_value): Drop base_time parameter;\n\tupdate use of estimate_ipcp_clone_size_and_time.\n\t(estimate_local_effects): Update use of\n\testimate_ipcp_clone_size_and_time and perform_estimation_of_a_value.\n\t* ipa-inline.h (estimate_ipcp_clone_size_and_time): Update prototype.\n\t* ipa-inline-analysis.c (estimate_ipcp_clone_size_and_time):\n\tReturn nonspecialized time.\n\n\t* gcc.dg/ipa/ipcp-2.c: Decrease ipcp threshold\n\t* gcc.dg/tree-ssa/ipa-cp-1.c: Likewise.\n\nFrom-SVN: r247597", "tree": {"sha": "4dab4f19629014b0e1a03b4b402d4da8ae4749e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dab4f19629014b0e1a03b4b402d4da8ae4749e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f1a658e6308da5a7b804391c624acc3b1bee74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f1a658e6308da5a7b804391c624acc3b1bee74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f1a658e6308da5a7b804391c624acc3b1bee74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f1a658e6308da5a7b804391c624acc3b1bee74/comments", "author": null, "committer": null, "parents": [{"sha": "4d147bca3f0f1fadac32d4306a654e975b364341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d147bca3f0f1fadac32d4306a654e975b364341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d147bca3f0f1fadac32d4306a654e975b364341"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "c9e34c017b9232b56a48fad9bb94d49e75c7395f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -1,3 +1,13 @@\n+2017-05-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (perform_estimation_of_a_value): Drop base_time parameter;\n+\tupdate use of estimate_ipcp_clone_size_and_time.\n+\t(estimate_local_effects): Update use of\n+\testimate_ipcp_clone_size_and_time and perform_estimation_of_a_value.\n+\t* ipa-inline.h (estimate_ipcp_clone_size_and_time): Update prototype.\n+\t* ipa-inline-analysis.c (estimate_ipcp_clone_size_and_time):\n+\tReturn nonspecialized time.\n+\n 2017-05-04  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (get_continuation_for_phi): Improve looking"}, {"sha": "5e1d94c67c731b6f95e9bb250533f7c03cee50e1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -2792,16 +2792,16 @@ static void\n perform_estimation_of_a_value (cgraph_node *node, vec<tree> known_csts,\n \t\t\t       vec<ipa_polymorphic_call_context> known_contexts,\n \t\t\t       vec<ipa_agg_jump_function_p> known_aggs_ptrs,\n-\t\t\t       sreal base_time, int removable_params_cost,\n+\t\t\t       int removable_params_cost,\n \t\t\t       int est_move_cost, ipcp_value_base *val)\n {\n   int size, time_benefit;\n-  sreal time;\n+  sreal time, base_time;\n   inline_hints hints;\n \n   estimate_ipcp_clone_size_and_time (node, known_csts, known_contexts,\n \t\t\t\t     known_aggs_ptrs, &size, &time,\n-\t\t\t\t     &hints);\n+\t\t\t\t     &base_time, &hints);\n   base_time -= time;\n   if (base_time > 65535)\n     base_time = 65535;\n@@ -2836,15 +2836,14 @@ estimate_local_effects (struct cgraph_node *node)\n   vec<ipa_agg_jump_function> known_aggs;\n   vec<ipa_agg_jump_function_p> known_aggs_ptrs;\n   bool always_const;\n-  sreal base_time = inline_summaries->get (node)->time.to_int ();\n   int removable_params_cost;\n \n   if (!count || !ipcp_versionable_function_p (node))\n     return;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"\\nEstimating effects for %s/%i, base_time: %f.\\n\",\n-\t     node->name (), node->order, base_time.to_double ());\n+    fprintf (dump_file, \"\\nEstimating effects for %s/%i.\\n\",\n+\t     node->name (), node->order);\n \n   always_const = gather_context_independent_values (info, &known_csts,\n \t\t\t\t\t\t    &known_contexts, &known_aggs,\n@@ -2857,14 +2856,15 @@ estimate_local_effects (struct cgraph_node *node)\n     {\n       struct caller_statistics stats;\n       inline_hints hints;\n-      sreal time;\n+      sreal time, base_time;\n       int size;\n \n       init_caller_stats (&stats);\n       node->call_for_symbol_thunks_and_aliases (gather_caller_stats, &stats,\n \t\t\t\t\t      false);\n       estimate_ipcp_clone_size_and_time (node, known_csts, known_contexts,\n-\t\t\t\t\t known_aggs_ptrs, &size, &time, &hints);\n+\t\t\t\t\t known_aggs_ptrs, &size, &time,\n+\t\t\t\t\t &base_time, &hints);\n       time -= devirt_bonus;\n       time -= hint_time_bonus (hints);\n       time -= removable_params_cost;\n@@ -2877,20 +2877,20 @@ estimate_local_effects (struct cgraph_node *node)\n       if (size <= 0 || node->local.local)\n \t{\n \t  info->do_clone_for_all_contexts = true;\n-\t  base_time = time;\n \n \t  if (dump_file)\n \t    fprintf (dump_file, \"     Decided to specialize for all \"\n \t\t     \"known contexts, code not going to grow.\\n\");\n \t}\n-      else if (good_cloning_opportunity_p (node, (base_time - time).to_int (),\n+      else if (good_cloning_opportunity_p (node,\n+\t\t\t\t\t   MAX ((base_time - time).to_int (),\n+\t\t\t\t\t\t65536),\n \t\t\t\t\t   stats.freq_sum, stats.count_sum,\n \t\t\t\t\t   size))\n \t{\n \t  if (size + overall_size <= max_new_size)\n \t    {\n \t      info->do_clone_for_all_contexts = true;\n-\t      base_time = time;\n \t      overall_size += size;\n \n \t      if (dump_file)\n@@ -2926,7 +2926,7 @@ estimate_local_effects (struct cgraph_node *node)\n \n \t  int emc = estimate_move_cost (TREE_TYPE (val->value), true);\n \t  perform_estimation_of_a_value (node, known_csts, known_contexts,\n-\t\t\t\t\t known_aggs_ptrs, base_time,\n+\t\t\t\t\t known_aggs_ptrs,\n \t\t\t\t\t removable_params_cost, emc, val);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2961,7 +2961,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t{\n \t  known_contexts[i] = val->value;\n \t  perform_estimation_of_a_value (node, known_csts, known_contexts,\n-\t\t\t\t\t known_aggs_ptrs, base_time,\n+\t\t\t\t\t known_aggs_ptrs,\n \t\t\t\t\t removable_params_cost, 0, val);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -3005,7 +3005,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t      vec_safe_push (ajf->items, item);\n \n \t      perform_estimation_of_a_value (node, known_csts, known_contexts,\n-\t\t\t\t\t     known_aggs_ptrs, base_time,\n+\t\t\t\t\t     known_aggs_ptrs,\n \t\t\t\t\t     removable_params_cost, 0, val);\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "ec6f2ac69722f9df066e59c44d5269e18046ee07", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -3478,17 +3478,17 @@ estimate_ipcp_clone_size_and_time (struct cgraph_node *node,\n \t\t\t\t   known_contexts,\n \t\t\t\t   vec<ipa_agg_jump_function_p> known_aggs,\n \t\t\t\t   int *ret_size, sreal *ret_time,\n+\t\t\t\t   sreal *ret_nonspec_time,\n \t\t\t\t   inline_hints *hints)\n {\n   clause_t clause, nonspec_clause;\n-  sreal nonspec_time;\n \n   evaluate_conditions_for_known_args (node, false, known_vals, known_aggs,\n \t\t\t\t      &clause, &nonspec_clause);\n   estimate_node_size_and_time (node, clause, nonspec_clause,\n \t\t\t       known_vals, known_contexts,\n \t\t\t       known_aggs, ret_size, NULL, ret_time,\n-\t\t\t       &nonspec_time, hints, vNULL);\n+\t\t\t       ret_nonspec_time, hints, vNULL);\n }\n \n /* Translate all conditions from callee representation into caller"}, {"sha": "ef52ca2eac993aa0bbfe2f0627fd403417ad3f3c", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -272,7 +272,8 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n \t\t\t\t\tvec<tree>,\n \t\t\t\t\tvec<ipa_polymorphic_call_context>,\n \t\t\t\t\tvec<ipa_agg_jump_function_p>,\n-\t\t\t\t\tint *, sreal *, inline_hints *);\n+\t\t\t\t\tint *, sreal *, sreal *,\n+\t\t\t\t        inline_hints *);\n int estimate_growth (struct cgraph_node *);\n bool growth_likely_positive (struct cgraph_node *, int);\n void inline_merge_summary (struct cgraph_edge *edge);"}, {"sha": "00f1cf245b989a220d38f06371e474dabd5a8ca6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -1,3 +1,8 @@\n+2017-05-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/ipcp-2.c: Decrease ipcp threshold\n+\t* gcc.dg/tree-ssa/ipa-cp-1.c: Likewise.\n+\n 2017-05-04  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-58.c: New testcase."}, {"sha": "c9e71eb810a0bc6b76471cc8d2c1577cabdfe404", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-2.c?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone -fdump-ipa-cp -fno-early-inlining\"  } */\n+/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone -fdump-ipa-cp -fno-early-inlining --param ipa-cp-eval-threshold=100\"  } */\n /* { dg-add-options bind_pic_locally } */\n \n extern int get_stuff (int);"}, {"sha": "61878b79313fe3e3e3dd604dc0572214f27023c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-cp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f1a658e6308da5a7b804391c624acc3b1bee74/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c?ref=26f1a658e6308da5a7b804391c624acc3b1bee74", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-optimized -fno-inline\" } */\n+/* { dg-options \"-O3 -fdump-tree-optimized -fno-inline --param ipa-cp-eval-threshold=100\" } */\n /* { dg-add-options bind_pic_locally } */\n \n int"}]}