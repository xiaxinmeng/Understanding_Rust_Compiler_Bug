{"sha": "54dcdb88954b1192b004f8b91fc17a42765c20eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkY2RiODg5NTRiMTE5MmIwMDRmOGI5MWZjMTdhNDI3NjVjMjBlYg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-09-12T20:18:16Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-09-12T20:18:16Z"}, "message": "re PR c++/77496 (ICE in instantiate_type, at cp/class.c:8270)\n\ngcc/c-family:\n2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/77496\n        * c-common.c (warn_for_omitted_condop): Also warn for boolean data.\n\ngcc/c:\n2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/77496\n        * c-parser.c (c_parser_conditional_expression): Pass the rightmost\n        COMPOUND_EXPR to warn_for_omitted_condop.\n\ngcc/cp:\n2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/77496\n        * call.c (build_conditional_expr_1): Call warn_for_omitted_condop.\n        * class.c (instantiate_type): Look through the SAVE_EXPR.\n\ngcc/testsuite:\n2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c++/77496\n        * c-c++-common/warn-ommitted-condop.c: Add more test cases.\n        * g++.dg/ext/pr77496.C: New test.\n        * g++.dg/warn/pr77496.C: New test.\n\nFrom-SVN: r240098", "tree": {"sha": "06828e718304e9c4c4e9aa0de02496b72d3bff1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06828e718304e9c4c4e9aa0de02496b72d3bff1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54dcdb88954b1192b004f8b91fc17a42765c20eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dcdb88954b1192b004f8b91fc17a42765c20eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54dcdb88954b1192b004f8b91fc17a42765c20eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dcdb88954b1192b004f8b91fc17a42765c20eb/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a313485bbdcdee77b1bf891823f9da8984d76bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a313485bbdcdee77b1bf891823f9da8984d76bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a313485bbdcdee77b1bf891823f9da8984d76bcc"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "71c5e50a32f44641bccd5ae583823e7e5d77e2dc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -1,3 +1,8 @@\n+2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/77496\n+\t* c-common.c (warn_for_omitted_condop): Also warn for boolean data.\n+\n 2016-09-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/72858"}, {"sha": "2215e294315af3da4f1ae6fee12f8550c39454fd", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -10602,17 +10602,21 @@ fold_offsetof (tree expr)\n   return convert (size_type_node, fold_offsetof_1 (expr));\n }\n \n-/* Warn for A ?: C expressions (with B omitted) where A is a boolean \n+/* Warn for A ?: C expressions (with B omitted) where A is a boolean\n    expression, because B will always be true. */\n \n void\n-warn_for_omitted_condop (location_t location, tree cond) \n-{ \n-  if (truth_value_p (TREE_CODE (cond))) \n-      warning_at (location, OPT_Wparentheses, \n+warn_for_omitted_condop (location_t location, tree cond)\n+{\n+  /* In C++ template declarations it can happen that the type is dependent\n+     and not yet known, thus TREE_TYPE (cond) == NULL_TREE.  */\n+  if (truth_value_p (TREE_CODE (cond))\n+      || (TREE_TYPE (cond) != NULL_TREE\n+\t  && TREE_CODE (TREE_TYPE (cond)) == BOOLEAN_TYPE))\n+      warning_at (location, OPT_Wparentheses,\n \t\t\"the omitted middle operand in ?: will always be %<true%>, \"\n \t\t\"suggest explicit middle operand\");\n-} \n+}\n \n /* Give an error for storing into ARG, which is 'const'.  USE indicates\n    how ARG was being used.  */"}, {"sha": "b474de193a5df01cab26b511f925c5bb7ab9d7bc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -1,3 +1,9 @@\n+2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/77496\n+\t* c-parser.c (c_parser_conditional_expression): Pass the rightmost\n+\tCOMPOUND_EXPR to warn_for_omitted_condop.\n+\n 2016-09-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-lang.c (LANG_HOOKS_GET_SUBSTRING_LOCATION): Use"}, {"sha": "a3044244f6cbacf928408fb52a0d47482070cb75", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -6425,14 +6425,17 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n       tree eptype = NULL_TREE;\n \n       middle_loc = c_parser_peek_token (parser)->location;\n-      pedwarn (middle_loc, OPT_Wpedantic, \n+      pedwarn (middle_loc, OPT_Wpedantic,\n \t       \"ISO C forbids omitting the middle term of a ?: expression\");\n-      warn_for_omitted_condop (middle_loc, cond.value);\n       if (TREE_CODE (cond.value) == EXCESS_PRECISION_EXPR)\n \t{\n \t  eptype = TREE_TYPE (cond.value);\n \t  cond.value = TREE_OPERAND (cond.value, 0);\n \t}\n+      tree e = cond.value;\n+      while (TREE_CODE (e) == COMPOUND_EXPR)\n+\te = TREE_OPERAND (e, 1);\n+      warn_for_omitted_condop (middle_loc, e);\n       /* Make sure first operand is calculated only once.  */\n       exp1.value = c_save_expr (default_conversion (cond.value));\n       if (eptype)"}, {"sha": "f572c851b6263add01650373f3c8c838a5cc0bfe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -1,3 +1,9 @@\n+2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/77496\n+\t* call.c (build_conditional_expr_1): Call warn_for_omitted_condop.\n+\t* class.c (instantiate_type): Look through the SAVE_EXPR.\n+\n 2016-09-09  Jason Merrill  <jason@redhat.com>\n \n \tImplement P0035R4, C++17 new of over-aligned types."}, {"sha": "393aab91bee18560fa1fa1e80c5aa3e5d118b024", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -4665,9 +4665,12 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n   if (!arg2)\n     {\n       if (complain & tf_error)\n-\tpedwarn (loc, OPT_Wpedantic, \n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C++ forbids omitting the middle term of a ?: expression\");\n \n+      if ((complain & tf_warning) && !truth_value_p (TREE_CODE (arg1)))\n+\twarn_for_omitted_condop (loc, arg1);\n+\n       /* Make sure that lvalues remain lvalues.  See g++.oliva/ext1.C.  */\n       if (lvalue_p (arg1))\n \targ2 = arg1 = cp_stabilize_reference (arg1);"}, {"sha": "f7147e629bda1bae5a60b434b8c5c6101ed54e02", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -8262,7 +8262,12 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t complain)\n       return error_mark_node;\n     }\n \n-  /* There only a few kinds of expressions that may have a type\n+  /* If we instantiate a template, and it is a A ?: C expression\n+     with omitted B, look through the SAVE_EXPR.  */\n+  if (TREE_CODE (rhs) == SAVE_EXPR)\n+    rhs = TREE_OPERAND (rhs, 0);\n+\n+  /* There are only a few kinds of expressions that may have a type\n      dependent on overload resolution.  */\n   gcc_assert (TREE_CODE (rhs) == ADDR_EXPR\n \t      || TREE_CODE (rhs) == COMPONENT_REF"}, {"sha": "4fc83772bb86716048464eec0f746ca218bea998", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -1,3 +1,10 @@\n+2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/77496\n+\t* c-c++-common/warn-ommitted-condop.c: Add more test cases.\n+\t* g++.dg/ext/pr77496.C: New test.\n+\t* g++.dg/warn/pr77496.C: New test.\n+\n 2016-09-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/72858"}, {"sha": "678373f3d704d8cd8ba1b034ad49e61f22daef57", "filename": "gcc/testsuite/c-c++-common/warn-ommitted-condop.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -1,11 +1,15 @@\n /* { dg-options \"-Wparentheses -ftrack-macro-expansion=0\" } */\n \n+#ifndef __cplusplus\n+#define bool _Bool\n+#endif\n+\n extern void f2 (int);\n \n-void bar (int x, int y, int z)\n+void bar (int x, int y, int z, bool b)\n {\n-#define T(op) f2 (x op y ? : 1) \n-#define T2(op) f2 (x op y ? 2 : 1) \n+#define T(op) f2 (x op y ? : 1)\n+#define T2(op) f2 (x op y ? 2 : 1)\n \n   T(<); /* { dg-warning \"omitted middle operand\" } */\n   T(>); /* { dg-warning \"omitted middle operand\" } */\n@@ -16,6 +20,8 @@ void bar (int x, int y, int z)\n   T(||); /* { dg-warning \"omitted middle operand\" } */\n   T(&&); /* { dg-warning \"omitted middle operand\" } */\n   f2 (!x ? : 1);  /* { dg-warning \"omitted middle operand\" } */\n+  f2 ((x,!x) ? : 1);  /* { dg-warning \"omitted middle operand\" } */\n+  f2 ((x,y,!x) ? : 1);  /* { dg-warning \"omitted middle operand\" } */\n   T2(<); /* { dg-bogus \"omitted middle operand\" } */\n   T2(>); /* { dg-bogus \"omitted middle operand\" } */\n   T2(==); /* { dg-bogus \"omitted middle operand\" } */\n@@ -26,4 +32,5 @@ void bar (int x, int y, int z)\n   T(*); /* { dg-bogus \"omitted middle operand\" } */\n   T(/); /* { dg-bogus \"omitted middle operand\" } */\n   T(^); /* { dg-bogus \"omitted middle operand\" } */\n+  f2 (b ? : 1);  /* { dg-warning \"omitted middle operand\" } */\n }"}, {"sha": "0b21e0cee3936aa4f7f60016e34b551d01f0166a", "filename": "gcc/testsuite/g++.dg/ext/pr77496.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr77496.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr77496.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr77496.C?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template <class x>\n+class z : x\n+{\n+public:\n+  bool zz () { return false; }\n+  int f () { return zz ? : 1; } // { dg-error \"cannot convert\" }\n+};\n+\n+class t\n+{\n+};\n+\n+int\n+main ()\n+{\n+  z<t> x;\n+  return x.f ();\n+}"}, {"sha": "4b97d0990cc9507187967f83d07e5ab5ca6897dd", "filename": "gcc/testsuite/g++.dg/warn/pr77496.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr77496.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54dcdb88954b1192b004f8b91fc17a42765c20eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr77496.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr77496.C?ref=54dcdb88954b1192b004f8b91fc17a42765c20eb", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-Wparentheses\" }\n+\n+template <class x>\n+class z : x\n+{\n+public:\n+  bool zz () { return false; }\n+  int f () { return zz () ? : 1; } // { dg-warning \"omitted middle operand\" }\n+};\n+\n+class t\n+{\n+};\n+\n+int\n+main ()\n+{\n+  z<t> x;\n+  return x.f ();\n+}"}]}