{"sha": "c4b30920c7427fc57181d91f17e9998502fe1866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiMzA5MjBjNzQyN2ZjNTcxODFkOTFmMTdlOTk5ODUwMmZlMTg2Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-07T10:15:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-07T10:15:43Z"}, "message": "Don't mangle attributes that have a space in their name\n\nThe SVE port needs to maintain a different type identity for\nGNU vectors and \"SVE vectors\" even during LTO, since the types\nuse different ABIs.  The easiest way of doing that seemed to be\nto use type attributes.  However, these type attributes shouldn't\nbe user-facing; they're just a convenient way of representing the\ntypes internally in GCC.\n\nThere are already several internal-only attributes, such as \"fn spec\"\nand \"omp declare simd\".  They're distinguished from normal user-facing\nattributes by having a space in their name, which means that it isn't\npossible to write them directly in C or C++.\n\nTaking the same approach mostly works well for SVE.  The only snag\nI've hit so far is that the new attribute needs to (and only exists to)\naffect type identity.  This means that it would normally get included\nin mangled names, to distinguish it from types without the attribute.\n\nHowever, the SVE ABI specifies a separate mangling for SVE vector types,\nrather than using an attribute mangling + a normal vector mangling.\nSo we need some way of suppressing the attribute mangling for this case.\n\nThere are currently no other target-independent or target-specific\ninternal-only attributes that affect type identity, so this patch goes\nfor the simplest fix of skipping mangling for attributes whose names\ncontain a space (which usually wouldn't give a valid symbol anyway).\nOther options I thought about were:\n\n(1) Also make sure that targetm.mangled_type returns nonnull.\n\n(2) Check directly for the target-specific name.\n\n(3) Add a new target hook.\n\n(4) Add new information to attribute_spec.  This would be very invasive\n    at this stage, but maybe we should consider replacing all the boolean\n    fields with flags?  That should make the tables slightly easier to\n    read and would make adding new flags much simpler in future.\n\n2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/cp/\n\t* mangle.c (mangle_type_attribute_p): New function, split out from...\n\t(write_CV_qualifiers_for_type): ...here.  Don't mangle attributes\n\tthat contain a space.\n\nFrom-SVN: r279952", "tree": {"sha": "2cd20b0a5bdfb7f81e30407fd50c2393a8a9f074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cd20b0a5bdfb7f81e30407fd50c2393a8a9f074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4b30920c7427fc57181d91f17e9998502fe1866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b30920c7427fc57181d91f17e9998502fe1866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b30920c7427fc57181d91f17e9998502fe1866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b30920c7427fc57181d91f17e9998502fe1866/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb862fdfb53ecb189f8bd74b66de573a78045916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb862fdfb53ecb189f8bd74b66de573a78045916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb862fdfb53ecb189f8bd74b66de573a78045916"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "a82b6cf2f2192d2dcadd91ba194f1ba6a06e3e0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b30920c7427fc57181d91f17e9998502fe1866/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b30920c7427fc57181d91f17e9998502fe1866/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4b30920c7427fc57181d91f17e9998502fe1866", "patch": "@@ -1,3 +1,9 @@\n+2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* mangle.c (mangle_type_attribute_p): New function, split out from...\n+\t(write_CV_qualifiers_for_type): ...here.  Don't mangle attributes\n+\tthat contain a space.\n+\n 2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369"}, {"sha": "23baa382ed9facd92e6c37a28b0f165c9f6dcee1", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b30920c7427fc57181d91f17e9998502fe1866/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b30920c7427fc57181d91f17e9998502fe1866/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=c4b30920c7427fc57181d91f17e9998502fe1866", "patch": "@@ -2348,6 +2348,34 @@ attr_strcmp (const void *p1, const void *p2)\n   return strcmp (as1->name, as2->name);\n }\n \n+/* Return true if we should mangle a type attribute with name NAME.  */\n+\n+static bool\n+mangle_type_attribute_p (tree name)\n+{\n+  const attribute_spec *as = lookup_attribute_spec (name);\n+  if (!as || !as->affects_type_identity)\n+    return false;\n+\n+  /* Skip internal-only attributes, which are distinguished from others\n+     by having a space.  At present, all internal-only attributes that\n+     affect type identity are target-specific and are handled by\n+     targetm.mangle_type instead.\n+\n+     Another reason to do this is that a space isn't a valid identifier\n+     character for most file formats.  */\n+  if (strchr (IDENTIFIER_POINTER (name), ' '))\n+    return false;\n+\n+  /* The following attributes are mangled specially.  */\n+  if (is_attribute_p (\"transaction_safe\", name))\n+    return false;\n+  if (is_attribute_p (\"abi_tag\", name))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Non-terminal <CV-qualifiers> for type nodes.  Returns the number of\n    CV-qualifiers written for TYPE.\n \n@@ -2373,14 +2401,8 @@ write_CV_qualifiers_for_type (const tree type)\n     {\n       auto_vec<tree> vec;\n       for (tree a = TYPE_ATTRIBUTES (type); a; a = TREE_CHAIN (a))\n-\t{\n-\t  tree name = get_attribute_name (a);\n-\t  const attribute_spec *as = lookup_attribute_spec (name);\n-\t  if (as && as->affects_type_identity\n-\t      && !is_attribute_p (\"transaction_safe\", name)\n-\t      && !is_attribute_p (\"abi_tag\", name))\n-\t    vec.safe_push (a);\n-\t}\n+\tif (mangle_type_attribute_p (get_attribute_name (a)))\n+\t  vec.safe_push (a);\n       if (abi_warn_or_compat_version_crosses (10) && !vec.is_empty ())\n \tG.need_abi_warning = true;\n       if (abi_version_at_least (10))"}]}