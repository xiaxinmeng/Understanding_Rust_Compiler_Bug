{"sha": "dc236397e4d96647c5d72fd9b6d503ca0b187bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyMzYzOTdlNGQ5NjY0N2M1ZDcyZmQ5YjZkNTAzY2EwYjE4N2JlZQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2017-12-08T17:41:58Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2017-12-08T17:41:58Z"}, "message": "re PR tree-optimization/83323 (186.crafty miscompares)\n\nFix PR83323\n\n\t* gimple-loop-jam (unroll_jam_possible_p): Correct test for\n\thead-controlled loops and loop BBs.\n\t* common.opt (funroll-and-jam): Remove, instead ...\n\t(floop-unroll-and-jam): ... reuse this option.\n\t* opts.c (default_options_table): Use OPT_floop_unroll_and_jam.\n\t* doc/invoke.texi (-funroll-and-jam): Move docu to ...\n\t(-floop-unroll-and-jam): ... this option.\n\ntestsuite/\n\t* gcc.dg/pr83323.c: New test.\n\t* gcc.dg/unroll-and-jam.c: Use -floop-unroll-and-jam.\n\nFrom-SVN: r255514", "tree": {"sha": "8625f7c609a77a4bd2a6ce6d24c8844af0a66513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8625f7c609a77a4bd2a6ce6d24c8844af0a66513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc236397e4d96647c5d72fd9b6d503ca0b187bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc236397e4d96647c5d72fd9b6d503ca0b187bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc236397e4d96647c5d72fd9b6d503ca0b187bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc236397e4d96647c5d72fd9b6d503ca0b187bee/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "450aa0ee3d0f65be4288e8355d8923db5915baa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450aa0ee3d0f65be4288e8355d8923db5915baa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450aa0ee3d0f65be4288e8355d8923db5915baa6"}], "stats": {"total": 101, "additions": 67, "deletions": 34}, "files": [{"sha": "35c27beeeb5c2c07ad975d84cabbcf5f72150105", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -1,3 +1,14 @@\n+2017-12-08  Michael Matz  <matz@suse.de>\n+\n+\tFix PR tree-optimization/83323\n+\t* gimple-loop-jam (unroll_jam_possible_p): Correct test for\n+\thead-controlled loops and loop BBs.\n+\t* common.opt (funroll-and-jam): Remove, instead ...\n+\t(floop-unroll-and-jam): ... reuse this option.\n+\t* opts.c (default_options_table): Use OPT_floop_unroll_and_jam.\n+\t* doc/invoke.texi (-funroll-and-jam): Move docu to ...\n+\t(-floop-unroll-and-jam): ... this option.\n+\n 2017-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* ipa-polymorphic-call.c (noncall_stmt_may_be_vtbl_ptr_store): Fix"}, {"sha": "57b3cd7304abdd2f775931422983bb96333ed97a", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -1512,8 +1512,8 @@ Common Alias(floop-nest-optimize)\n Enable loop nest transforms.  Same as -floop-nest-optimize.\n \n floop-unroll-and-jam\n-Common Alias(floop-nest-optimize)\n-Enable loop nest transforms.  Same as -floop-nest-optimize.\n+Common Report Var(flag_unroll_jam) Optimization\n+Perform unroll-and-jam on loops.\n \n fgnu-tm\n Common Report Var(flag_tm)\n@@ -2695,10 +2695,6 @@ fsplit-loops\n Common Report Var(flag_split_loops) Optimization\n Perform loop splitting.\n \n-funroll-and-jam\n-Common Report Var(flag_unroll_jam) Optimization\n-Perform unroll-and-jam on loops.\n-\n funwind-tables\n Common Report Var(flag_unwind_tables) Optimization\n Just generate unwind tables for exception handling."}, {"sha": "1413095dd6c30f98e341358d504387472d923fe8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -437,7 +437,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-reassoc  -ftree-sink  -ftree-slsr  -ftree-sra @gol\n -ftree-switch-conversion  -ftree-tail-merge @gol\n -ftree-ter  -ftree-vectorize  -ftree-vrp  -funconstrained-commons @gol\n--funit-at-a-time  -funroll-all-loops  -funroll-loops -funroll-and-jam @gol\n+-funit-at-a-time  -funroll-all-loops  -funroll-loops @gol\n -funsafe-math-optimizations  -funswitch-loops @gol\n -fipa-ra  -fvariable-expansion-in-unroller  -fvect-cost-model  -fvpt @gol\n -fweb  -fwhole-program  -fwpa  -fuse-linker-plugin @gol\n@@ -8511,11 +8511,9 @@ at @option{-O} and higher.\n @item -ftree-loop-linear\n @itemx -floop-strip-mine\n @itemx -floop-block\n-@itemx -floop-unroll-and-jam\n @opindex ftree-loop-linear\n @opindex floop-strip-mine\n @opindex floop-block\n-@opindex floop-unroll-and-jam\n Perform loop nest optimizations.  Same as\n @option{-floop-nest-optimize}.  To use this code transformation, GCC has\n to be configured with @option{--with-isl} to enable the Graphite loop\n@@ -9789,8 +9787,8 @@ for one side of the iteration space and false for the other.\n Move branches with loop invariant conditions out of the loop, with duplicates\n of the loop on both branches (modified according to result of the condition).\n \n-@item -funroll-and-jam\n-@opindex funroll-and-jam\n+@item -floop-unroll-and-jam\n+@opindex floop-unroll-and-jam\n Apply unroll and jam transoformations on feasible loops.  In a loop\n nest this unrolls the outer loop by some factor and fuses the resulting\n multiple inner loops."}, {"sha": "8ed1bef8f77f3119832dd6d2dd6f4361118d0578", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -152,17 +152,18 @@ merge_loop_tree (struct loop *loop, struct loop *old)\n   free (bbs);\n }\n \n-/* BB exits the outer loop of an unroll-and-jam situation.\n+/* BB is part of the outer loop of an unroll-and-jam situation.\n    Check if any statements therein would prevent the transformation.  */\n \n static bool\n bb_prevents_fusion_p (basic_block bb)\n {\n   gimple_stmt_iterator gsi;\n   /* BB is duplicated by outer unrolling and then all N-1 first copies\n-     move into the body of the fused inner loop.  The last copy remains\n-     the exit block of the outer loop and is still outside the inner loop\n-     also after fusion.  We can't allow this for some effects of BB:\n+     move into the body of the fused inner loop.  If BB exits the outer loop\n+     the last copy still doess so, and the first N-1 copies are cancelled\n+     by loop unrolling, so also after fusion it's the exit block.\n+     But there might be other reasons that prevent fusion:\n        * stores or unknown side-effects prevent fusion\n        * loads don't\n        * computations into SSA names: these aren't problematic.  Their\n@@ -204,6 +205,19 @@ unroll_jam_possible_p (struct loop *outer, struct loop *loop)\n   if (outer->inner != loop || loop->next)\n     return false;\n \n+  /* Prevent head-controlled inner loops, that we usually have.\n+     The guard block would need to be accepted\n+     (invariant condition either entering or skipping the loop),\n+     without also accepting arbitrary control flow.  When unswitching\n+     ran before us (as with -O3) this won't be a problem because its\n+     outer loop unswitching will have moved out the invariant condition.\n+\n+     If we do that we need to extend fuse_loops() to cope with this\n+     by threading through the (still invariant) copied condition\n+     between the two loop copies.  */\n+  if (!dominated_by_p (CDI_DOMINATORS, outer->latch, loop->header))\n+    return false;\n+\n   /* The number of iterations of the inner loop must be loop invariant\n      with respect to the outer loop.  */\n   if (!number_of_iterations_exit (loop, single_exit (loop), &niter,\n@@ -218,23 +232,8 @@ unroll_jam_possible_p (struct loop *outer, struct loop *loop)\n   n = get_loop_body_with_size (outer, bbs, n_basic_blocks_for_fn (cfun));\n \n   for (i = 0; i < n; i++)\n-    {\n-      if (bbs[i]->loop_father == outer\n-\t  && bbs[i] != outer->latch && bbs[i] != outer->header\n-\t  && (!loop_exits_from_bb_p (outer, bbs[i])\n-\t      || bb_prevents_fusion_p (bbs[i])))\n-\tbreak;\n-      /* XXX Note that the above disallows head-controlled inner loops,\n-         that we usually have.  The guard block would need to be accepted\n-\t (invariant condition either entering or skipping the loop),\n-\t without also accepting arbitrary control flow.  When unswitching\n-\t ran before us (as with -O3) this won't be a problem because its\n-\t outer loop unswitching will have moved out the invariant condition.\n-\t \n-\t If we do that we need to extend fuse_loops() to cope with this\n-\t by threading through the (still invariant) copied condition\n-\t between the two loop copies.  */\n-    }\n+    if (bbs[i]->loop_father == outer && bb_prevents_fusion_p (bbs[i]))\n+      break;\n   free (bbs);\n   if (i != n)\n     return false;"}, {"sha": "a157b5f8816e1ec658bed789c1e5d7e7a25a2090", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -536,7 +536,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_finline_functions_called_once, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fsplit_loops, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_funswitch_loops, NULL, 1 },\n-    { OPT_LEVELS_3_PLUS, OPT_funroll_and_jam, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_floop_unroll_and_jam, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fgcse_after_reload, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_vectorize, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_slp_vectorize, NULL, 1 },"}, {"sha": "396e26a61361ef7ee45c3b3421f0ffef19b7cd83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -1,3 +1,9 @@\n+2017-12-08  Michael Matz  <matz@suse.de>\n+\n+\tFix PR tree-optimization/83323\n+\t* gcc.dg/pr83323.c: New test.\n+\t* gcc.dg/unroll-and-jam.c: Use -floop-unroll-and-jam.\n+\n 2017-12-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/81782"}, {"sha": "6111745550f5eeb45c452eab32e32514872d8557", "filename": "gcc/testsuite/gcc.dg/pr83323.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83323.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83323.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83323.c?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -floop-unroll-and-jam --param unroll-jam-min-percent=0\" } */\n+int x[1024], y[1024];\n+\n+void __attribute__((noipa)) foo ()\n+{\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      for (int j = 0; j < 1024; ++j)\n+        if (!y[j])\n+          x[i] = 1;\n+    }\n+}\n+\n+int main()\n+{\n+  y[1023] = 1;\n+  foo ();\n+  if (x[1] != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "70910d318cbc703986ede1adf62a6a16645db6fc", "filename": "gcc/testsuite/gcc.dg/unroll-and-jam.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-and-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236397e4d96647c5d72fd9b6d503ca0b187bee/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-and-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-and-jam.c?ref=dc236397e4d96647c5d72fd9b6d503ca0b187bee", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O3 -funroll-and-jam --param unroll-jam-min-percent=0 -fdump-tree-unrolljam-details\" } */\n+/* { dg-options \"-O3 -floop-unroll-and-jam --param unroll-jam-min-percent=0 -fdump-tree-unrolljam-details\" } */\n /* { dg-require-effective-target int32plus } */\n \n #include <stdio.h>"}]}