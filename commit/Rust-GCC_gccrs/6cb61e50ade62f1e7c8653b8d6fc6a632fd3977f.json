{"sha": "6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "node_id": "C_kwDOANBUbNoAKDZjYjYxZTUwYWRlNjJmMWU3Yzg2NTNiOGQ2ZmM2YTYzMmZkMzk3N2Y", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-01-17T17:41:07Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-01-17T17:41:07Z"}, "message": "Enable -Wuninitialized + -ftrivial-auto-var-init for address taken variables.\n\nWith -ftrivial-auto-var-init, the address taken auto variable is replaced with\na temporary variable during gimplification, and the original auto variable might\nbe eliminated by compiler optimization completely. As a result, the current\nuninitialized warning analysis cannot get enough information from the IR,\ntherefore the uninitialized warnings for address taken variable cannot be\nissued based on the current implemenation of -ftrival-auto-var-init.\n\nFor more info please refer to:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/577431.html\n\nIn order to improve this situation, we can improve uninitialized analysis\nfor address taken auto variables with -ftrivial-auto-var-init as following:\n\nfor the following stmt:\n\n    _1 = .DEFERRED_INIT (4, 2, &\"alt_reloc\"[0]);\n    if (_1 != 0)\n\nThe original variable DECL has been eliminated from the IR, all the necessary\ninformation that is needed for reporting the warnings for DECL can be acquired\nfrom the call to .DEFERRED_INIT.\n\n    A. the name string of DECL from the 3rd parameter of the call;\n    B. the location of the DECL from the location of the call;\n    C. the call can also be used to hold the information on whether the warning\n       has been issued or not to suppress warning messages when needed;\n\nThe current testing cases for uninitialized warnings + -ftrivial-auto-var-init\nare adjusted to reflect the fact that we can issue warnings for address taken\nvariables.\n\ngcc/ChangeLog:\n\n2022-01-17  qing zhao  <qing.zhao@oracle.com>\n\n\t* tree-ssa-uninit.c (warn_uninit): Delete the 4th parameter. Handle\n\t.DEFERRED_INIT call with an anonymous SSA_NAME specially.\n\t(check_defs): Handle .DEFERRED_INIT call with an anonymous SSA_NAME\n\tspecially.\n\t(warn_uninit_phi_uses): Delete the 4th actual when call warn_uninit.\n\t(warn_uninitialized_vars): Likewise.\n\t(warn_uninitialized_phi): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-17  qing zhao  <qing.zhao@oracle.com>\n\n\t* gcc.dg/auto-init-uninit-16.c (testfunc): Delete xfail to reflect\n\tthe fact that address taken variable can be warned.\n\t* gcc.dg/auto-init-uninit-34.c (warn_scalar_1): Likewise.\n\t(warn_scalar_2): Likewise.\n\t* gcc.dg/auto-init-uninit-37.c (T1): Likewise.\n\t(T2): Likewise.\n\t* gcc.dg/auto-init-uninit-B.c (baz): Likewise.", "tree": {"sha": "f6d73e01f4e4c0cab5eb81a441e587d7b3832e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d73e01f4e4c0cab5eb81a441e587d7b3832e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeca44768d54b089243004d1ef00d34dfa9f6530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeca44768d54b089243004d1ef00d34dfa9f6530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeca44768d54b089243004d1ef00d34dfa9f6530"}], "stats": {"total": 201, "additions": 141, "deletions": 60}, "files": [{"sha": "f14864be901f4b33d10108446c268561deae3aee", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-16.c?ref=6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n-/* -ftrivial-auto-var-init will make the uninitialized warning for address\n-   taken auto var going away, FIXME later.  */\n \n int foo, bar;\n \n@@ -20,6 +18,6 @@ void testfunc()\n \n   decode_reloc(foo, &alt_reloc);\n \n-  if (alt_reloc) /* { dg-warning \"may be used uninitialized\" \"\" { xfail *-*-* }  }  */\n+  if (alt_reloc) /* { dg-warning \"may be used uninitialized\" \"\" }  */\n     bar = 42;\n }"}, {"sha": "d6e7ed3e8600191a1b2b4589cfa66f5502167843", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-34.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-34.c?ref=6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "patch": "@@ -4,8 +4,6 @@\n    to functions declared with attribute access is diagnosed where expected.\n    { dg-do compile }\n    { dg-options \"-O -Wall -ftrivial-auto-var-init=zero\" } */\n-/* -ftrivial-auto-var-init will make the uninitialized warning for address\n-   taken auto var going away, FIXME later.  */\n \n #define RW(...) __attribute__ ((access (read_write, __VA_ARGS__)))\n \n@@ -21,18 +19,18 @@ void nowarn_scalar (void)\n \n void warn_scalar_1 (void)\n {\n-  int i1;                         // { dg-message \"declared here\" \"\" { xfail *-*-* } }\n+  int i1;                         // { dg-message \"declared here\" \"\" }\n   int i2, i3 = 1, i4;\n \n-  f4pi (&i1, &i2, &i3, &i4);      // { dg-warning \"'i1' may be used uninitialized\" \"\" { xfail *-*-* } }\n+  f4pi (&i1, &i2, &i3, &i4);      // { dg-warning \"'i1' may be used uninitialized\" \"\" }\n }\n \n void warn_scalar_2 (void)\n {\n   int j1 = 0, j2, j4;\n   int j3;\n \n-  f4pi (&j1, &j2, &j3, &j4);      // { dg-warning \"'j3' may be used uninitialized\" \"\" { xfail *-*-* } }\n+  f4pi (&j1, &j2, &j3, &j4);      // { dg-warning \"'j3' may be used uninitialized\" \"\" }\n }\n \n "}, {"sha": "aea554262f8e3d0e33102098e1c693ff759d3f10", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-37.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-37.c?ref=6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "patch": "@@ -5,8 +5,6 @@\n    arguments of array, VLA, or pointer types.\n    { dg-do compile }\n    { dg-options \"-O2 -Wall -ftrack-macro-expansion=0 -ftrivial-auto-var-init=zero\" } */\n-/* -ftrivial-auto-var-init will make the uninitialized warning for address\n-   taken auto var going away, FIXME later.  */\n \n #define NONE    /* none */\n #define RO(...) __attribute__ ((access (read_only, __VA_ARGS__)))\n@@ -42,9 +40,9 @@ typedef int IA_[];\n typedef const int CIA_[];\n \n T1 (NONE,   fia_,   IA_);\n-T1 (NONE,   fcia_,  CIA_);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froia_, IA_);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwia_, IA_);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fcia_,  CIA_);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froia_, IA_);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwia_, IA_);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoia_, IA_);\n T1 (X (1),  fxia_,  IA_);\n \n@@ -53,9 +51,9 @@ typedef int IA1[1];\n typedef const int CIA1[1];\n \n T1 (NONE,   fia1,   IA1);\n-T1 (NONE,   fcia1,  CIA1);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froia1, IA1);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwia1, IA1);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fcia1,  CIA1);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froia1, IA1);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwia1, IA1);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoia1, IA1);\n T1 (X (1),  fxia1,  IA1);\n \n@@ -64,9 +62,9 @@ T1 (X (1),  fxia1,  IA1);\n #define CIARS1 const int[restrict static 1]\n \n T1 (NONE,   fiars1,   IARS1);\n-T1 (NONE,   fciars1,  CIARS1);// { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froiars1, IARS1); // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwiars1, IARS1); // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fciars1,  CIARS1);// { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froiars1, IARS1); // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwiars1, IARS1); // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoiars1, IARS1);\n T1 (X (1),  fxiars1,  IARS1);\n \n@@ -75,9 +73,9 @@ T1 (X (1),  fxiars1,  IARS1);\n #define CIAS1 const int[static 1]\n \n T1 (NONE,   fias1,   IAS1);\n-T1 (NONE,   fcias1,  CIAS1);   // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froias1, IAS1);    // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwias1, IAS1);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fcias1,  CIAS1);   // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froias1, IAS1);    // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwias1, IAS1);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoias1, IAS1);\n T1 (X (1),  fxias1,  IAS1);\n \n@@ -86,9 +84,9 @@ T1 (X (1),  fxias1,  IAS1);\n #define CIAX const int[*]\n \n T1 (NONE,   fiax,   IAX);\n-T1 (NONE,   fciax,  CIAX);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froiax, IAX);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwiax, IAX);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fciax,  CIAX);    // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froiax, IAX);     // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwiax, IAX);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoiax, IAX);\n T1 (X (1),  fxiax,  IAX);\n \n@@ -97,9 +95,9 @@ T1 (X (1),  fxiax,  IAX);\n #define CIAN int n, const int[n]\n \n T2 (NONE,      fian,   IAN);\n-T2 (NONE,      fcian,  CIAN); // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T2 (RO (2, 1), froian, IAN);  // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T2 (RW (2, 1), frwian, IAN);  // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T2 (NONE,      fcian,  CIAN); // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T2 (RO (2, 1), froian, IAN);  // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T2 (RW (2, 1), frwian, IAN);  // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T2 (WO (2, 1), fwoian, IAN);\n T2 (X (2, 1),  fxian,  IAN);\n \n@@ -108,9 +106,9 @@ typedef int* IP;\n typedef const int* CIP;\n \n T1 (NONE,   fip,   IP);\n-T1 (NONE,   fcip,  CIP);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n-T1 (RO (1), froip, IP);      // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { xfail *-*-* } }\n-T1 (RW (1), frwip, IP);      // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" { xfail *-*-* } }\n+T1 (NONE,   fcip,  CIP);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n+T1 (RO (1), froip, IP);      // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" }\n+T1 (RW (1), frwip, IP);      // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" \"\" }\n T1 (WO (1), fwoip, IP);\n T1 (X (1),  fxip,  IP);\n "}, {"sha": "40d3196ea47f2022a9fb4728b1c957cd29eabd4e", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-B.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-B.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-B.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-B.c?ref=6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "patch": "@@ -1,7 +1,5 @@\n /* Origin: PR c/179 from Gray Watson <gray@256.com>, adapted as a testcase\n    by Joseph Myers <jsm28@cam.ac.uk>.  */\n-/* -ftrivial-auto-var-init will make the uninitialized warning for address\n-   taken auto var going away, FIXME later.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n extern void foo (int *);\n@@ -11,7 +9,7 @@ void\n baz (void)\n {\n   int i;\n-  if (i) /* { dg-warning \"is used uninitialized\" \"uninit i warning\" { xfail *-*-* } }  */\n+  if (i) /* { dg-warning \"is used uninitialized\" \"uninit i warning\" }  */\n     bar (i);\n   foo (&i);\n }"}, {"sha": "02e88d58e1f8e99c35d7a054db7b78541505f058", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 115, "deletions": 26, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=6cb61e50ade62f1e7c8653b8d6fc6a632fd3977f", "patch": "@@ -132,8 +132,8 @@ uninit_undefined_value_p (tree t)\n    or UNKNOWN_LOCATION otherwise.  */\n \n static void\n-warn_uninit (opt_code opt, tree t, tree var, const char *gmsgid,\n-\t     gimple *context, location_t phi_arg_loc = UNKNOWN_LOCATION)\n+warn_uninit (opt_code opt, tree t, tree var, gimple *context,\n+\t     location_t phi_arg_loc = UNKNOWN_LOCATION)\n {\n   /* Bail if the value isn't provably uninitialized.  */\n   if (!has_undefined_value_p (t))\n@@ -182,61 +182,137 @@ warn_uninit (opt_code opt, tree t, tree var, const char *gmsgid,\n     }\n \n   /* Anonymous SSA_NAMEs shouldn't be uninitialized, but ssa_undefined_value_p\n-     can return true if the def stmt of an anonymous SSA_NAME is COMPLEX_EXPR\n-     created for conversion from scalar to complex.  Use the underlying var of\n-     the COMPLEX_EXPRs real part in that case.  See PR71581.  */\n+     can return true if the def stmt of an anonymous SSA_NAME is\n+     1. A COMPLEX_EXPR created for conversion from scalar to complex.  Use the\n+     underlying var of the COMPLEX_EXPRs real part in that case.  See PR71581.\n+\n+     Or\n+\n+     2. A call to .DEFERRED_INIT internal function. Since the original variable\n+     has been eliminated by optimziation, we need to get the variable name,\n+     and variable declaration location from this call.  We recorded variable\n+     name into VAR_NAME_STR, and will get location info and record warning\n+     suppressed info to VAR_DEF_STMT, which is the .DEFERRED_INIT call.  */\n+\n+  const char *var_name_str = NULL;\n+  gimple *var_def_stmt = NULL;\n+\n   if (!var && !SSA_NAME_VAR (t))\n     {\n-      gimple *def_stmt = SSA_NAME_DEF_STMT (t);\n-      if (is_gimple_assign (def_stmt)\n-\t  && gimple_assign_rhs_code (def_stmt) == COMPLEX_EXPR)\n+      var_def_stmt = SSA_NAME_DEF_STMT (t);\n+\n+      if (is_gimple_assign (var_def_stmt)\n+\t  && gimple_assign_rhs_code (var_def_stmt) == COMPLEX_EXPR)\n \t{\n-\t  tree v = gimple_assign_rhs1 (def_stmt);\n+\t  tree v = gimple_assign_rhs1 (var_def_stmt);\n \t  if (TREE_CODE (v) == SSA_NAME\n \t      && has_undefined_value_p (v)\n-\t      && zerop (gimple_assign_rhs2 (def_stmt)))\n+\t      && zerop (gimple_assign_rhs2 (var_def_stmt)))\n \t    var = SSA_NAME_VAR (v);\n \t}\n+\n+      if (gimple_call_internal_p (var_def_stmt, IFN_DEFERRED_INIT))\n+\t{\n+\t  /* Ignore the call to .DEFERRED_INIT that define the original\n+\t     var itself as the following case:\n+\t\ttemp = .DEFERRED_INIT (4, 2, \u201calt_reloc\");\n+\t\talt_reloc = temp;\n+\t     In order to avoid generating warning for the fake usage\n+\t     at alt_reloc = temp.\n+\t  */\n+\t  tree lhs_var = NULL_TREE;\n+\t  tree lhs_var_name = NULL_TREE;\n+\t  const char *lhs_var_name_str = NULL;\n+\n+\t  /* Get the variable name from the 3rd argument of call.  */\n+\t  tree var_name = gimple_call_arg (var_def_stmt, 2);\n+\t  var_name = TREE_OPERAND (TREE_OPERAND (var_name, 0), 0);\n+\t  var_name_str = TREE_STRING_POINTER (var_name);\n+\n+\t  if (is_gimple_assign (context))\n+\t    {\n+\t      if (TREE_CODE (gimple_assign_lhs (context)) == VAR_DECL)\n+\t\tlhs_var = gimple_assign_lhs (context);\n+\t      else if (TREE_CODE (gimple_assign_lhs (context)) == SSA_NAME)\n+\t\tlhs_var = SSA_NAME_VAR (gimple_assign_lhs (context));\n+\t    }\n+\t  if (lhs_var\n+\t      && (lhs_var_name = DECL_NAME (lhs_var))\n+\t      && (lhs_var_name_str = IDENTIFIER_POINTER (lhs_var_name))\n+\t      && (strcmp (lhs_var_name_str, var_name_str) == 0))\n+\t    return;\n+\t  gcc_assert (var_name_str && var_def_stmt);\n+\t}\n     }\n \n-  if (var == NULL_TREE)\n+  if (var == NULL_TREE && var_name_str == NULL)\n     return;\n \n   /* Avoid warning if we've already done so or if the warning has been\n      suppressed.  */\n   if (((warning_suppressed_p (context, OPT_Wuninitialized)\n \t|| (gimple_assign_single_p (context)\n \t    && get_no_uninit_warning (gimple_assign_rhs1 (context)))))\n-      || get_no_uninit_warning (var))\n+      || (var && get_no_uninit_warning (var))\n+      || (var_name_str\n+\t  && warning_suppressed_p (var_def_stmt, OPT_Wuninitialized)))\n     return;\n \n   /* Use either the location of the read statement or that of the PHI\n      argument, or that of the uninitialized variable, in that order,\n      whichever is valid.  */\n-  location_t location;\n+  location_t location = UNKNOWN_LOCATION;\n   if (gimple_has_location (context))\n     location = gimple_location (context);\n   else if (phi_arg_loc != UNKNOWN_LOCATION)\n     location = phi_arg_loc;\n-  else\n+  else if (var)\n     location = DECL_SOURCE_LOCATION (var);\n+  else if (var_name_str)\n+    location = gimple_location (var_def_stmt);\n+\n   location = linemap_resolve_location (line_table, location,\n \t\t\t\t       LRK_SPELLING_LOCATION, NULL);\n \n   auto_diagnostic_group d;\n-  if (!warning_at (location, opt, gmsgid, var))\n-    return;\n+  gcc_assert (opt == OPT_Wuninitialized || opt == OPT_Wmaybe_uninitialized);\n+  if (var)\n+    {\n+      if ((opt == OPT_Wuninitialized\n+\t   && !warning_at (location, opt, \"%qD is used uninitialized\", var))\n+\t  || (opt == OPT_Wmaybe_uninitialized\n+\t      && !warning_at (location, opt, \"%qD may be used uninitialized\",\n+\t\t\t      var)))\n+      return;\n+    }\n+  else if (var_name_str)\n+    {\n+      if ((opt == OPT_Wuninitialized\n+\t   && !warning_at (location, opt, \"%qs is used uninitialized\",\n+\t\t\t   var_name_str))\n+\t  || (opt == OPT_Wmaybe_uninitialized\n+\t      && !warning_at (location, opt, \"%qs may be used uninitialized\",\n+\t\t\t      var_name_str)))\n+      return;\n+    }\n \n   /* Avoid subsequent warnings for reads of the same variable again.  */\n-  suppress_warning (var, opt);\n+  if (var)\n+    suppress_warning (var, opt);\n+  else if (var_name_str)\n+    suppress_warning (var_def_stmt, opt);\n \n   /* Issue a note pointing to the read variable unless the warning\n      is at the same location.  */\n-  location_t var_loc = DECL_SOURCE_LOCATION (var);\n+  location_t var_loc = var ? DECL_SOURCE_LOCATION (var)\n+\t\t\t: gimple_location (var_def_stmt);\n   if (location == var_loc)\n     return;\n \n-  inform (var_loc, \"%qD was declared here\", var);\n+  if (var)\n+    inform (var_loc, \"%qD was declared here\", var);\n+  else if (var_name_str)\n+    inform (var_loc, \"%qs was declared here\", var_name_str);\n }\n \n struct check_defs_data\n@@ -380,6 +456,20 @@ check_defs (ao_ref *ref, tree vdef, void *data_)\n   if (gimple_call_internal_p (def_stmt, IFN_DEFERRED_INIT))\n     return false;\n \n+  /* For address taken variable, a temporary variable is added between\n+     the variable and the call to .DEFERRED_INIT function as:\n+      _1 = .DEFERRED_INIT (4, 2, &\"i1\"[0]);\n+      i1 = _1;\n+     Ignore this vdef as well.  */\n+  if (is_gimple_assign (def_stmt)\n+      && gimple_assign_rhs_code (def_stmt) == SSA_NAME)\n+    {\n+      tree tmp_var = gimple_assign_rhs1 (def_stmt);\n+      if (gimple_call_internal_p (SSA_NAME_DEF_STMT (tmp_var),\n+\t\t\t\t  IFN_DEFERRED_INIT))\n+\treturn false;\n+    }\n+\n   /* The ASAN_MARK intrinsic doesn't modify the variable.  */\n   if (is_gimple_call (def_stmt))\n     {\n@@ -877,8 +967,8 @@ warn_uninit_phi_uses (basic_block bb)\n \t  use_stmt = NULL;\n \t}\n       if (use_stmt)\n-\twarn_uninit (OPT_Wuninitialized, def, SSA_NAME_VAR (def),\n-\t\t     \"%qD is used uninitialized\", use_stmt);\n+\twarn_uninit (OPT_Wuninitialized, def,\n+\t\t     SSA_NAME_VAR (def), use_stmt);\n     }\n }\n \n@@ -931,11 +1021,11 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n \t\t}\n \t      tree use = USE_FROM_PTR (use_p);\n \t      if (wlims.always_executed)\n-\t\twarn_uninit (OPT_Wuninitialized, use, SSA_NAME_VAR (use),\n-\t\t\t     \"%qD is used uninitialized\", stmt);\n+\t\twarn_uninit (OPT_Wuninitialized, use,\n+\t\t\t     SSA_NAME_VAR (use), stmt);\n \t      else if (wmaybe_uninit)\n-\t\twarn_uninit (OPT_Wmaybe_uninitialized, use, SSA_NAME_VAR (use),\n-\t\t\t     \"%qD may be used uninitialized\", stmt);\n+\t\twarn_uninit (OPT_Wmaybe_uninitialized, use,\n+\t\t\t     SSA_NAME_VAR (use), stmt);\n \t    }\n \n \t  /* For limiting the alias walk below we count all\n@@ -1182,7 +1272,6 @@ warn_uninitialized_phi (gphi *phi, vec<gphi *> *worklist,\n \n   warn_uninit (OPT_Wmaybe_uninitialized, uninit_op,\n \t       SSA_NAME_VAR (uninit_op),\n-\t       \"%qD may be used uninitialized in this function\",\n \t       uninit_use_stmt, loc);\n }\n "}]}