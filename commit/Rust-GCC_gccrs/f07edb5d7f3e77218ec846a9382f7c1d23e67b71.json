{"sha": "f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3ZWRiNWQ3ZjNlNzcyMThlYzg0NmE5MzgyZjdjMWQyM2U2N2I3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-16T15:13:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-08T03:55:04Z"}, "message": "c++: alias with same name as base fn [PR91706]\n\nThis is a bit complex.  Looking up c<T> in the definition of D::c finds\nC::c, OK.  Looking up c in the definition of E finds D::c, OK.  Since the\nalias is not dependent, we strip it from the template argument, leaving\n\nusing E = A<decltype(c<T>())>;\n\nwhere 'c' still refers to C::c.  But instantiating E looks up 'c' again and\nfinds D::c, which isn't a function, and sadness ensues.\n\nI think the bug here is looking up 'c' in D at instantiation time; the\ndeclaration we found before is not dependent.  This seems to happen because\nbaselink_for_fns gets BASELINK_BINFO wrong; it is supposed to be the base\nwhere lookup found the functions, C in this case.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91706\n\t* semantics.c (baselink_for_fns): Fix BASELINK_BINFO.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/91706\n\t* g++.dg/template/lookup17.C: New test.", "tree": {"sha": "da1e0a78879e276c05375527a16e59507fa64c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da1e0a78879e276c05375527a16e59507fa64c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07edb5d7f3e77218ec846a9382f7c1d23e67b71/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715614ec3ec5390293e508bb190335d28db1fa8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715614ec3ec5390293e508bb190335d28db1fa8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715614ec3ec5390293e508bb190335d28db1fa8b"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "f506a239864d6f79597c4352c16a1a9365739b33", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07edb5d7f3e77218ec846a9382f7c1d23e67b71/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07edb5d7f3e77218ec846a9382f7c1d23e67b71/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "patch": "@@ -3663,8 +3663,10 @@ baselink_for_fns (tree fns)\n   cl = currently_open_derived_class (scope);\n   if (!cl)\n     cl = scope;\n-  cl = TYPE_BINFO (cl);\n-  return build_baselink (cl, cl, fns, /*optype=*/NULL_TREE);\n+  tree access_path = TYPE_BINFO (cl);\n+  tree conv_path = (cl == scope ? access_path\n+\t\t    : lookup_base (cl, scope, ba_any, NULL, tf_none));\n+  return build_baselink (conv_path, access_path, fns, /*optype=*/NULL_TREE);\n }\n \n /* Returns true iff DECL is a variable from a function outside"}, {"sha": "b8571b9f1eb2dfb96d91c16820eb83c202f9349a", "filename": "gcc/testsuite/g++.dg/template/lookup17.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07edb5d7f3e77218ec846a9382f7c1d23e67b71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07edb5d7f3e77218ec846a9382f7c1d23e67b71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup17.C?ref=f07edb5d7f3e77218ec846a9382f7c1d23e67b71", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/91706\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -g }\n+\n+template <bool> struct A;\n+\n+struct B { static constexpr bool g = false; };\n+\n+struct C {\n+  template <typename> static B c ();\n+};\n+\n+template <class T> struct D : C {\n+  using c = decltype (c<T>());\n+  using E = A<c::g>;\n+};\n+\n+D<int> g;"}]}