{"sha": "489f2598af821da1157ec21cd484fcb32a5193e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5ZjI1OThhZjgyMWRhMTE1N2VjMjFjZDQ4NGZjYjMyYTUxOTNlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-10-29T22:26:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-10-29T22:26:59Z"}, "message": "re PR tree-optimization/33723 (Inefficient code with compound literals)\n\n\tPR tree-optimization/33723\n\t* c-gimplify.c (c_gimplify_expr): Optimize INIT_EXPR or\n\tMODIFY_EXPR with non-addressable COMPOUND_LITERAL_EXPR as source.\n\n\t* gcc.c-torture/execute/20071029-1.c: New test.\n\t* gcc.dg/tree-ssa/pr33723.c: New test.\n\nFrom-SVN: r129743", "tree": {"sha": "2b6f28406d370623a5e985861bc9536a99083bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6f28406d370623a5e985861bc9536a99083bfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/489f2598af821da1157ec21cd484fcb32a5193e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489f2598af821da1157ec21cd484fcb32a5193e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489f2598af821da1157ec21cd484fcb32a5193e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489f2598af821da1157ec21cd484fcb32a5193e9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1da821e6de1d5068d8c03cd46d1b05aab799f1"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "ab0ee0fa5c8f927895eaf12c2ebc24ccc05ef932", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=489f2598af821da1157ec21cd484fcb32a5193e9", "patch": "@@ -1,3 +1,9 @@\n+2007-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33723\n+\t* c-gimplify.c (c_gimplify_expr): Optimize INIT_EXPR or\n+\tMODIFY_EXPR with non-addressable COMPOUND_LITERAL_EXPR as source.\n+\n 2007-10-29  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR tree-optimization/33614"}, {"sha": "a1ee27bfb70e19eb9b68bb20301ab928c16220d9", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=489f2598af821da1157ec21cd484fcb32a5193e9", "patch": "@@ -233,6 +233,29 @@ c_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n     case COMPOUND_LITERAL_EXPR:\n       return gimplify_compound_literal_expr (expr_p, pre_p);\n \n+    case INIT_EXPR:\n+    case MODIFY_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (*expr_p, 1)) == COMPOUND_LITERAL_EXPR)\n+\t{\n+\t  tree complit = TREE_OPERAND (*expr_p, 1);\n+\t  tree decl_s = COMPOUND_LITERAL_EXPR_DECL_STMT (complit);\n+\t  tree decl = DECL_EXPR_DECL (decl_s);\n+\t  tree init = DECL_INITIAL (decl);\n+\n+\t  /* struct T x = (struct T) { 0, 1, 2 } can be optimized\n+\t     into struct T x = { 0, 1, 2 } if the address of the\n+\t     compound literal has never been taken.  */\n+\t  if (!TREE_ADDRESSABLE (complit)\n+\t      && !TREE_ADDRESSABLE (decl)\n+\t      && init)\n+\t    {\n+\t      *expr_p = copy_node (*expr_p);\n+\t      TREE_OPERAND (*expr_p, 1) = init;\n+\t      return GS_OK;\n+\t    }\n+\t}\n+      return GS_UNHANDLED;\n+\n     default:\n       return GS_UNHANDLED;\n     }"}, {"sha": "b60bf928784f6cdff4f35b8326287e4266c04bfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=489f2598af821da1157ec21cd484fcb32a5193e9", "patch": "@@ -1,3 +1,9 @@\n+2007-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33723\n+\t* gcc.c-torture/execute/20071029-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr33723.c: New test.\n+\n 2007-10-29  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR tree-optimization/33614"}, {"sha": "6b895d60a5e336fe2ece03a03a44009a4b888bbc", "filename": "gcc/testsuite/gcc.c-torture/execute/20071029-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071029-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071029-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071029-1.c?ref=489f2598af821da1157ec21cd484fcb32a5193e9", "patch": "@@ -0,0 +1,56 @@\n+extern void exit (int);\n+extern void abort (void);\n+\n+typedef union\n+{\n+  struct\n+  {\n+    int f1, f2, f3, f4, f5, f6, f7, f8;\n+    long int f9, f10;\n+    int f11;\n+  } f;\n+  char s[56];\n+  long int a;\n+} T;\n+\n+__attribute__((noinline))\n+void\n+test (T *t)\n+{\n+  static int i = 11;\n+  if (t->f.f1 != i++)\n+    abort ();\n+  if (t->f.f2 || t->f.f3 || t->f.f4 || t->f.f5 || t->f.f6\n+      || t->f.f7 || t->f.f8 || t->f.f9 || t->f.f10 || t->f.f11)\n+    abort ();\n+  if (i == 20)\n+    exit (0);\n+}\n+\n+__attribute__((noinline))\n+void\n+foo (int i)\n+{\n+  T t;\n+again:\n+  t = (T) { { ++i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };\n+  test (&t);\n+  goto again;\n+}\n+\n+int\n+main (void)\n+{\n+  T *t1, *t2;\n+  int cnt = 0;\n+  t1 = (T *) 0;\n+loop:\n+  t2 = t1;\n+  t1 = & (T) { .f.f9 = cnt++ };\n+  if (cnt < 3)\n+    goto loop;\n+  if (t1 != t2 || t1->f.f9 != 2)\n+    abort ();\n+  foo (10);\n+  return 0;\n+}"}, {"sha": "b11623fbb63c5e73f5f338ddda6fcd74725b8d01", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33723.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489f2598af821da1157ec21cd484fcb32a5193e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c?ref=489f2598af821da1157ec21cd484fcb32a5193e9", "patch": "@@ -0,0 +1,74 @@\n+/* PR tree-optimization/33723 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple\" } */\n+\n+typedef union\n+{\n+  struct\n+  {\n+    int f1, f2, f3, f4, f5, f6, f7, f8;\n+    long int f9, f10;\n+    int f11;\n+  } f;\n+  char s[56];\n+  long int a;\n+} T;\n+\n+void\n+foo1 (void)\n+{\n+  T t;\n+  t = (T) { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };\n+  test (&t);\n+}\n+\n+void\n+bar1 (void)\n+{\n+  T t = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };\n+  test (&t);\n+}\n+\n+void\n+baz1 (void)\n+{\n+  T t;\n+  t = (const T) { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };\n+  test (&t);\n+}\n+\n+void\n+foo2 (void)\n+{\n+  T t;\n+  t = (T) { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 } };\n+  test (&t);\n+}\n+\n+void\n+bar2 (void)\n+{\n+  T t = { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 } };\n+  test (&t);\n+}\n+\n+void\n+baz2 (void)\n+{\n+  T t;\n+  t = (const T) { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 } };\n+  test (&t);\n+}\n+\n+void\n+baz3 (void)\n+{\n+  T t;\n+  t = (const T) (T) { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 } };\n+  test (&t);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"t = {}\" 3 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"t.f.f1 = 1\" 4 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"t.f.f8 = 8\" 4 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}