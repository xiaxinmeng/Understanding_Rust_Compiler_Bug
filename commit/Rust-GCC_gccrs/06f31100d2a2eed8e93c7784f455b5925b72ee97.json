{"sha": "06f31100d2a2eed8e93c7784f455b5925b72ee97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmMzExMDBkMmEyZWVkOGU5M2M3Nzg0ZjQ1NWI1OTI1YjcyZWU5Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-14T21:47:45Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-14T21:47:45Z"}, "message": "rtl.h (STORE_FLAG_VALUE): Remove default definition from here.\n\n\n\t* rtl.h (STORE_FLAG_VALUE): Remove default definition from here.\n\t* defaults.h (STORE_FLAG_VALUE): Move default definition to here.\n\t* doc/tm.texi (STORE_FLAG_VALUE): Document the default value.\n\n\t* config/alpha/alpha.h (STORE_FLAG_VALUE): Remove definition.\n\t* config/arc/arc.h (STORE_FLAG_VALUE): Likewise.\n\t* config/arm/arm.h (STORE_FLAG_VALUE): Likewise.\n\t* config/cris/cris.h (STORE_FLAG_VALUE): Likewise.\n\t* config/i370/i370.h (STORE_FLAG_VALUE): Likewise.\n\t* config/i386/i386.h (STORE_FLAG_VALUE): Likewise.\n\t* config/i960/i960.h (STORE_FLAG_VALUE): Likewise.\n\t* config/ia64/ia64.h (STORE_FLAG_VALUE): Likewise.\n\t* config/ip2k/ip2k.h (STORE_FLAG_VALUE): Likewise.\n\t* config/m32r/m32r.h (STORE_FLAG_VALUE): Likewise.\n\t* config/mcore/mcore.h (STORE_FLAG_VALUE): Likewise.\n\t* config/mips/mips.h (STORE_FLAG_VALUE): Likewise.\n\t* config/mmix/mmix.h (STORE_FLAG_VALUE): Likewise.\n\t* config/ns32k/ns32k.h (STORE_FLAG_VALUE): Likewise.\n\t* config/pa/pa.h (STORE_FLAG_VALUE): Likewise.\n\t* config/pdp11/pdp11.h (STORE_FLAG_VALUE): Likewise.\n\t* config/sh/sh.h (STORE_FLAG_VALUE): Likewise.\n\t* config/sparc/sparc.h (STORE_FLAG_VALUE): Likewise.\n\t* config/v850/v850.h (STORE_FLAG_VALUE): Likewise.\n\t* config/xtensa/xtensa.h (STORE_FLAG_VALUE): Likewise.\n\nCo-Authored-By: Zack Weinberg <zack@codesourcery.com>\n\nFrom-SVN: r67957", "tree": {"sha": "fa9882a13a8acd24f7113752447301736a903e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9882a13a8acd24f7113752447301736a903e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06f31100d2a2eed8e93c7784f455b5925b72ee97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f31100d2a2eed8e93c7784f455b5925b72ee97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f31100d2a2eed8e93c7784f455b5925b72ee97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f31100d2a2eed8e93c7784f455b5925b72ee97/comments", "author": null, "committer": null, "parents": [{"sha": "b7a7058884e0671a712b73b6c85274200d40f4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a7058884e0671a712b73b6c85274200d40f4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a7058884e0671a712b73b6c85274200d40f4df"}], "stats": {"total": 136, "additions": 44, "deletions": 92}, "files": [{"sha": "15030b1aa9b7ad1ed8ff7b0f7f25f7552335e2ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1,3 +1,31 @@\n+2003-06-14  Roger Sayle  <roger@eyesopen.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* rtl.h (STORE_FLAG_VALUE): Remove default definition from here.\n+\t* defaults.h (STORE_FLAG_VALUE): Move default definition to here.\n+\t* doc/tm.texi (STORE_FLAG_VALUE): Document the default value.\n+\n+\t* config/alpha/alpha.h (STORE_FLAG_VALUE): Remove definition.\n+\t* config/arc/arc.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/arm/arm.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/cris/cris.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/i370/i370.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/i386/i386.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/i960/i960.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/ia64/ia64.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/ip2k/ip2k.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/m32r/m32r.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/mcore/mcore.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/mips/mips.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/mmix/mmix.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/ns32k/ns32k.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/pa/pa.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/pdp11/pdp11.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/sh/sh.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/sparc/sparc.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/v850/v850.h (STORE_FLAG_VALUE): Likewise.\n+\t* config/xtensa/xtensa.h (STORE_FLAG_VALUE): Likewise.\n+\n 2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* opts.sh (POSIXLY_CORRECT): Unset it."}, {"sha": "b8bcba915b653ebbafdf63f078fa0c044563afab", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1432,11 +1432,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* The CIX ctlz and cttz instructions return 64 for zero.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 64, TARGET_CIX)\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 64, TARGET_CIX)"}, {"sha": "7bb9231d67b9259d290c2b54be04e17f363a0f50", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1295,10 +1295,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-#define STORE_FLAG_VALUE 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "65e816608d90cdabb0e26a43c8a5fc3677c5d39e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2260,8 +2260,6 @@ extern int making_const_table;\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define STORE_FLAG_VALUE 1\n-\n /* The arm5 clz instruction returns 32.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n \f"}, {"sha": "a517830e10350397794f2dd3b7c88c472944ad27", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1679,8 +1679,6 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-#define STORE_FLAG_VALUE 1\n-\n #define Pmode SImode\n \n #define FUNCTION_MODE QImode"}, {"sha": "dd82a6f677f55b2a97f9fc679fc8b8b3d924c293", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -877,10 +877,7 @@ enum reg_class\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)\t(OUTPREC != 16)\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-/* #define STORE_FLAG_VALUE (-1) */\n+/* ??? Investigate defining STORE_FLAG_VALUE to (-1).  */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n "}, {"sha": "b8a6b7b035d24ce410c8ac4a2f352526f3db2a15", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2577,11 +2577,6 @@ enum ix86_builtins\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* When a prototype says `char' or `short', really pass an `int'.\n    (The 386 can't easily push less than an int.)  */\n "}, {"sha": "59719776bce36f67731bb14e27185d0f67d3a2ff", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1115,11 +1115,6 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n \n #define SLOW_BYTE_ACCESS 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 0"}, {"sha": "9e1a5133582af59f8069d96204608c58c28a0fad", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2265,9 +2265,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    an integral mode and stored by a store-flag instruction (`sCOND') when the\n    condition is true.  */\n \n-/* ??? Investigate using -1 instead of 1.  */\n-\n-#define STORE_FLAG_VALUE 1\n+/* ??? Investigate using STORE_FLAG_VALUE of -1 instead of 1.  */\n \n /* An alias for the machine mode for pointers.  */\n "}, {"sha": "937cf4bba691fc13b5b5d16c28f79a001231c308", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2365,8 +2365,6 @@ extern int ip2k_reorg_merge_qimode;\n \n /* Miscellaneous macros to describe machine specifics. */\n \n-#define STORE_FLAG_VALUE\t1\n-\n #define IS_PSEUDO_P(R)\t(REGNO (R) >= FIRST_PSEUDO_REGISTER)\n \n /* Default calculations would cause DWARF address sizes to be 2 bytes,"}, {"sha": "8c82589552ee38fb260ccafde564627bea8a8e3c", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1765,10 +1765,6 @@ extern char m32r_punct_chars[256];\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-#define STORE_FLAG_VALUE 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "822dfbea0f34f1a8ace4c910df1c72ffad1d57ec", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -977,10 +977,6 @@ extern const enum reg_class reg_class_from_letter[];\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS TARGET_SLOW_BYTES\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-#define STORE_FLAG_VALUE 1\n-\n /* Immediate shift counts are truncated by the output routines (or was it\n    the assembler?).  Shift counts in a register are truncated by ARM.  Note\n    that the native compiler puts too large (> 32) immediate shift counts"}, {"sha": "9dd5dc688659ac60c47da8f3a0b0f51b7811e1ee", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -3153,11 +3153,6 @@ typedef struct mips_args {\n    this as 1, since it avoids making a QI or HI mode register.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1"}, {"sha": "9ff4e97e52e11a14e7579c19d1e0d9d0e95e5254", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1144,11 +1144,8 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We have a choice here too.  */\n-#if 0\n-/* FIXME:  Revisit, we don't have scc expanders yet.  */\n-#define STORE_FLAG_VALUE 1\n-#endif\n+/* ??? MMIX allows a choice of STORE_FLAG_VALUE.  Revisit later,\n+   we don't have scc expanders yet.  */\n \n #define Pmode DImode\n "}, {"sha": "17979fb8680189ded4f20ab9481d653ed843ed2b", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1148,11 +1148,6 @@ __transfer_from_trampoline ()\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "4d71cdc3ad8c72f3920d1b9a7991eda68f118ab0", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1585,11 +1585,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES 1\n #define PROMOTE_FUNCTION_RETURN 1"}, {"sha": "5016145e1927af546a3acfd1e250e7ca0604d3f3", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -918,11 +918,6 @@ extern int may_call_alloca;\n #define SELECT_CC_MODE(OP,X,Y)\t\\\n (GET_MODE_CLASS(GET_MODE(X)) == MODE_FLOAT? CCFPmode : CCmode)\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-/* #define STORE_FLAG_VALUE 1 */\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "28c9db79c7e5406da6225a7afef5bad836102785", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2713,11 +2713,6 @@ while (0)\n /* Nonzero if access to memory by bytes is no faster than for words.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* Immediate shift counts are truncated by the output routines (or was it\n    the assembler?).  Shift counts in a register are truncated by SH.  Note\n    that the native compiler puts too large (> 32) immediate shift counts"}, {"sha": "fdbd0fdbaf66a5b51c03193f817e9839111c219c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -2489,11 +2489,6 @@ do {                                                                    \\\n    and maybe make use of that.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n-#define STORE_FLAG_VALUE 1\n-\n /* When a prototype says `char' or `short', really pass an `int'.  */\n #define PROMOTE_PROTOTYPES (TARGET_ARCH32)\n "}, {"sha": "68c0d3f47482acc5c8859824ecba6551f1085b5d", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1313,8 +1313,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-#define STORE_FLAG_VALUE 1\n-\n #define MULDI3_LIBCALL  \"__muldi3\"\n #define UCMPDI2_LIBCALL \"__ucmpdi2\"\n #define CMPDI2_LIBCALL  \"__cmpdi2\""}, {"sha": "b2ac4454406b6515f2500a66e3734d8f60cca2ef", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1279,13 +1279,10 @@ typedef struct xtensa_args {\n /* Prefer word-sized loads.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Xtensa doesn't have any instructions that set integer values based on the\n-   results of comparisons, but the simplification code in the combiner also\n-   uses this macro.  The value should be either 1 or -1 to enable some\n-   optimizations in the combiner; I'm not sure which is better for us.\n-   Since we've been using 1 for a while, it should probably stay that way for\n-   compatibility.  */\n-#define STORE_FLAG_VALUE 1\n+/* ??? Xtensa doesn't have any instructions that set integer values\n+   based on the results of comparisons, but the simplification code in\n+   the combiner also uses STORE_FLAG_VALUE.  The default value (1) is\n+   fine for us, but (-1) might be better.  */\n \n /* Shift instructions ignore all but the low-order few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1"}, {"sha": "b34fab8f8b833b52f11277724f5ef3db392ccc5d", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -633,4 +633,9 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0\n #endif\n \n+/* Provide a default value for STORE_FLAG_VALUE.  */\n+#ifndef STORE_FLAG_VALUE\n+#define STORE_FLAG_VALUE  1\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "24775b2837c9cae868b163b551081943a6910330", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -8797,8 +8797,9 @@ and @code{decscc}, respectively, for the patterns which perform\n @file{rs6000.md} for some examples.  The GNU Superoptizer can be used to\n find such instruction sequences on other machines.\n \n-You need not define @code{STORE_FLAG_VALUE} if the machine has no store-flag\n-instructions.\n+If this macro is not defined, the default value, 1, is used.  You need\n+not define @code{STORE_FLAG_VALUE} if the machine has no store-flag\n+instructions, or if the value generated by these instructions is 1.\n \n @findex FLOAT_STORE_FLAG_VALUE\n @item FLOAT_STORE_FLAG_VALUE (@var{mode})"}, {"sha": "2b40dc9085487ed81e0ebf218f3bcdf79d1e97ae", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f31100d2a2eed8e93c7784f455b5925b72ee97/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=06f31100d2a2eed8e93c7784f455b5925b72ee97", "patch": "@@ -1952,12 +1952,6 @@ extern rtx output_constant_def\t\tPARAMS ((tree, int));\n /* Called from integrate.c when a deferred constant is inlined.  */\n extern void notice_rtl_inlining_of_deferred_constant PARAMS ((void));\n \n-/* Define a default value for STORE_FLAG_VALUE.  */\n-\n-#ifndef STORE_FLAG_VALUE\n-#define STORE_FLAG_VALUE 1\n-#endif\n-\n /* Nonzero after the second flow pass has completed.\n    Set to 1 or 0 by toplev.c  */\n extern int flow2_completed;"}]}