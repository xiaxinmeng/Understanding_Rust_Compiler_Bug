{"sha": "2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ5MjczY2EyNTUxMTE3NjgwYzBkODliZDA0ZWJjMGM5NGJmNGU5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-18T19:34:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-18T19:34:02Z"}, "message": "Improve duplicate [[likely]] diagnostic.\n\n\t* parser.c (cp_parser_statement): Make attrs_loc a range.  Pass it\n\tto process_stmt_hotness_attribute.\n\t* cp-gimplify.c (process_stmt_hotness_attribute): Take attrs_loc.\n\t(genericize_if_stmt): Use likely/unlikely instead of predictor_name.\n\nFrom-SVN: r268994", "tree": {"sha": "9a67286dd2f8c6e856d2b988573cf4e131f84e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a67286dd2f8c6e856d2b988573cf4e131f84e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84fdd8f4632fa5a833e97a0c0b4aa95b9533e087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fdd8f4632fa5a833e97a0c0b4aa95b9533e087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fdd8f4632fa5a833e97a0c0b4aa95b9533e087"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "d820e94109329035e3a62f3607cef4edd67c6c2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "patch": "@@ -1,3 +1,11 @@\n+2019-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\tImprove duplicate [[likely]] diagnostic.\n+\t* parser.c (cp_parser_statement): Make attrs_loc a range.  Pass it\n+\tto process_stmt_hotness_attribute.\n+\t* cp-gimplify.c (process_stmt_hotness_attribute): Take attrs_loc.\n+\t(genericize_if_stmt): Use likely/unlikely instead of predictor_name.\n+\n 2019-02-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89217 - ICE with list-initialization in range-based for loop."}, {"sha": "56f717de85dbdfb2ecec90dab0b65f2e04bd7073", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "patch": "@@ -206,7 +206,7 @@ genericize_if_stmt (tree *stmt_p)\n \t  richloc.add_range (EXPR_LOC_OR_LOC (fe, locus));\n \t  warning_at (&richloc, OPT_Wattributes,\n \t\t      \"both branches of %<if%> statement marked as %qs\",\n-\t\t      predictor_name (pr));\n+\t\t      pr == PRED_HOT_LABEL ? \"likely\" : \"unlikely\");\n \t}\n     }\n \n@@ -2765,7 +2765,7 @@ remove_hotness_attribute (tree list)\n    PREDICT_EXPR.  */\n \n tree\n-process_stmt_hotness_attribute (tree std_attrs)\n+process_stmt_hotness_attribute (tree std_attrs, location_t attrs_loc)\n {\n   if (std_attrs == error_mark_node)\n     return std_attrs;\n@@ -2776,7 +2776,7 @@ process_stmt_hotness_attribute (tree std_attrs)\n \t\t  || is_attribute_p (\"likely\", name));\n       tree pred = build_predict_expr (hot ? PRED_HOT_LABEL : PRED_COLD_LABEL,\n \t\t\t\t      hot ? TAKEN : NOT_TAKEN);\n-      SET_EXPR_LOCATION (pred, input_location);\n+      SET_EXPR_LOCATION (pred, attrs_loc);\n       add_stmt (pred);\n       if (tree other = lookup_hotness_attribute (TREE_CHAIN (attr)))\n \twarning (OPT_Wattributes, \"ignoring attribute %qE after earlier %qE\","}, {"sha": "ac3654467aceb8e449f3153cb16412e424f87877", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "patch": "@@ -7576,7 +7576,7 @@ extern tree cp_fully_fold\t\t\t(tree);\n extern tree cp_fully_fold_init\t\t\t(tree);\n extern void clear_fold_cache\t\t\t(void);\n extern tree lookup_hotness_attribute\t\t(tree);\n-extern tree process_stmt_hotness_attribute\t(tree);\n+extern tree process_stmt_hotness_attribute\t(tree, location_t);\n \n /* in name-lookup.c */\n extern tree strip_using_decl                    (tree);"}, {"sha": "adb5f6f27a189585d1af9a197452da0a29a250fe", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9273ca2551117680c0d89bd04ebc0c94bf4e96/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2d9273ca2551117680c0d89bd04ebc0c94bf4e96", "patch": "@@ -11060,7 +11060,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n {\n   tree statement, std_attrs = NULL_TREE;\n   cp_token *token;\n-  location_t statement_location, attrs_location;\n+  location_t statement_location, attrs_loc;\n \n  restart:\n   if (if_p != NULL)\n@@ -11069,13 +11069,19 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n   statement = NULL_TREE;\n \n   saved_token_sentinel saved_tokens (parser->lexer);\n-  attrs_location = cp_lexer_peek_token (parser->lexer)->location;\n+  attrs_loc = cp_lexer_peek_token (parser->lexer)->location;\n   if (c_dialect_objc ())\n     /* In obj-c++, seeing '[[' might be the either the beginning of\n        c++11 attributes, or a nested objc-message-expression.  So\n        let's parse the c++11 attributes tentatively.  */\n     cp_parser_parse_tentatively (parser);\n   std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+  if (std_attrs)\n+    {\n+      location_t end_loc\n+\t= cp_lexer_previous_token (parser->lexer)->location;\n+      attrs_loc = make_location (attrs_loc, attrs_loc, end_loc);\n+    }\n   if (c_dialect_objc ())\n     {\n       if (!cp_parser_parse_definitely (parser))\n@@ -11107,22 +11113,22 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n \tcase RID_IF:\n \tcase RID_SWITCH:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_selection_statement (parser, if_p, chain);\n \t  break;\n \n \tcase RID_WHILE:\n \tcase RID_DO:\n \tcase RID_FOR:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_iteration_statement (parser, if_p, false, 0);\n \t  break;\n \n \tcase RID_BREAK:\n \tcase RID_CONTINUE:\n \tcase RID_RETURN:\n \tcase RID_GOTO:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_jump_statement (parser);\n \t  break;\n \n@@ -11132,12 +11138,12 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \tcase RID_AT_FINALLY:\n \tcase RID_AT_SYNCHRONIZED:\n \tcase RID_AT_THROW:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_objc_statement (parser);\n \t  break;\n \n \tcase RID_TRY:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_try_block (parser);\n \t  break;\n \n@@ -11158,11 +11164,11 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \tcase RID_SYNCHRONIZED:\n \tcase RID_ATOMIC_NOEXCEPT:\n \tcase RID_ATOMIC_CANCEL:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_transaction (parser, token);\n \t  break;\n \tcase RID_TRANSACTION_CANCEL:\n-\t  std_attrs = process_stmt_hotness_attribute (std_attrs);\n+\t  std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \t  statement = cp_parser_transaction_cancel (parser);\n \t  break;\n \n@@ -11239,7 +11245,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n       if (loc_after_labels != NULL)\n \t*loc_after_labels = statement_location;\n \n-      std_attrs = process_stmt_hotness_attribute (std_attrs);\n+      std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);\n \n       /* Look for an expression-statement instead.  */\n       statement = cp_parser_expression_statement (parser, in_statement_expr);\n@@ -11269,7 +11275,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n   /* Allow \"[[fallthrough]];\", but warn otherwise.  */\n   if (std_attrs != NULL_TREE)\n-    warning_at (attrs_location,\n+    warning_at (attrs_loc,\n \t\tOPT_Wattributes,\n \t\t\"attributes at the beginning of statement are ignored\");\n }"}]}