{"sha": "ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwZjNmMzk0OTA5MGVlYjE2ODczNDViY2QzZjhkZDlhNWFlZjFjZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-07-24T03:39:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-07-24T03:39:23Z"}, "message": "Makefile.in (STRICT2_WARN): Add -Wmissing-format-attribute.\n\n\t* Makefile.in (STRICT2_WARN): Add -Wmissing-format-attribute.\n\t* configure.ac: Check for -Wmissing-format-attribute.\n\n\t* configure: Regenerate.\n\nFrom-SVN: r102326", "tree": {"sha": "194da3a00d4ac85c633617f0842a6b6fd04e781f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194da3a00d4ac85c633617f0842a6b6fd04e781f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/comments", "author": null, "committer": null, "parents": [{"sha": "4cf507fc166e4070c9eed83d1891678bf9d39331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf507fc166e4070c9eed83d1891678bf9d39331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf507fc166e4070c9eed83d1891678bf9d39331"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "96be539d024e01d484905cf5e4c9bb51052a71f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "patch": "@@ -1,3 +1,10 @@\n+2005-07-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (STRICT2_WARN): Add -Wmissing-format-attribute.\n+\t* configure.ac: Check for -Wmissing-format-attribute.\n+\t\n+\t* configure: Regenerate.\n+\n 2005-07-23  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-optimization/22623"}, {"sha": "30b95eed94b0b7fc61e649c55ba27cb0d9c4a7c4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "patch": "@@ -176,7 +176,7 @@ LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n STRICT_WARN = @strict1_warn@\n WERROR_FLAGS = @WERROR@\n STRICT2_WARN = -pedantic -Wno-long-long -Wno-variadic-macros \\\n-  -Wold-style-definition $(WERROR_FLAGS)\n+  -Wold-style-definition -Wmissing-format-attribute $(WERROR_FLAGS)\n \n # This is set by --enable-checking.  The idea is to catch forgotten\n # \"extern\" tags in header files."}, {"sha": "0828617dfeb3f608367d2a6e72395880d902b686", "filename": "gcc/configure", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "patch": "@@ -6164,7 +6164,6 @@ if test $ac_cv_prog_cc_w_no_long_long = yes \\\n   strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros\"\n fi\n \n-\n # Add -Wold-style-definition if it's accepted\n echo \"$as_me:$LINENO: checking whether ${CC} accepts -Wold-style-definition\" >&5\n echo $ECHO_N \"checking whether ${CC} accepts -Wold-style-definition... $ECHO_C\" >&6\n@@ -6220,6 +6219,61 @@ if test $ac_cv_prog_cc_w_old_style_definition = yes ; then\n   strict1_warn=\"${strict1_warn} -Wold-style-definition\"\n fi\n \n+# Add -Wmissing-format-attribute if it's accepted\n+echo \"$as_me:$LINENO: checking whether ${CC} accepts -Wmissing-format-attribute\" >&5\n+echo $ECHO_N \"checking whether ${CC} accepts -Wmissing-format-attribute... $ECHO_C\" >&6\n+if test \"${ac_cv_prog_cc_w_missing_format_attribute+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-Wmissing-format-attribute\"\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_prog_cc_w_missing_format_attribute=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_prog_cc_w_missing_format_attribute=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n+\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_prog_cc_w_missing_format_attribute\" >&5\n+echo \"${ECHO_T}$ac_cv_prog_cc_w_missing_format_attribute\" >&6\n+if test $ac_cv_prog_cc_w_missing_format_attribute = yes ; then\n+  strict1_warn=\"${strict1_warn} -Wmissing-format-attribute\"\n+fi\n+\n # Enable -Werror, period.\n # Check whether --enable-werror_always or --disable-werror_always was given.\n if test \"${enable_werror_always+set}\" = set; then\n@@ -6233,6 +6287,8 @@ if test x${enable_werror_always} = xyes ; then\n   WERROR=-Werror\n fi\n \n+\n+\n # If the native compiler is GCC, we can enable warnings even in stage1.\n # That's useful for people building cross-compilers, or just running a\n # quick `make'.\n@@ -7408,7 +7464,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7411: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7467: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)"}, {"sha": "9cc51d5c99f786b05c525df9bf2a1b9ec1f616de", "filename": "gcc/configure.ac", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ac0f3f3949090eeb1687345bcd3f8dd9a5aef1cd", "patch": "@@ -330,7 +330,6 @@ if test $ac_cv_prog_cc_w_no_long_long = yes \\\n    && test $ac_cv_prog_cc_w_no_variadic_macros = yes ; then\n   strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros\"\n fi\n-AC_SUBST(strict1_warn)\n \n # Add -Wold-style-definition if it's accepted\n AC_CACHE_CHECK(\n@@ -347,6 +346,21 @@ if test $ac_cv_prog_cc_w_old_style_definition = yes ; then\n   strict1_warn=\"${strict1_warn} -Wold-style-definition\"\n fi\n \n+# Add -Wmissing-format-attribute if it's accepted\n+AC_CACHE_CHECK(\n+  [whether ${CC} accepts -Wmissing-format-attribute],\n+  [ac_cv_prog_cc_w_missing_format_attribute],\n+  [save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-Wmissing-format-attribute\"\n+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[]])],\n+                    [ac_cv_prog_cc_w_missing_format_attribute=yes],\n+                    [ac_cv_prog_cc_w_missing_format_attribute=no])\n+  CFLAGS=\"$save_CFLAGS\"\n+  ])\n+if test $ac_cv_prog_cc_w_missing_format_attribute = yes ; then\n+  strict1_warn=\"${strict1_warn} -Wmissing-format-attribute\"\n+fi\n+\n # Enable -Werror, period.\n AC_ARG_ENABLE(werror_always, \n [  --enable-werror-always         enable -Werror always], [],\n@@ -356,6 +370,8 @@ if test x${enable_werror_always} = xyes ; then\n   WERROR=-Werror\n fi\n \n+AC_SUBST(strict1_warn)\n+\n # If the native compiler is GCC, we can enable warnings even in stage1.  \n # That's useful for people building cross-compilers, or just running a\n # quick `make'."}]}