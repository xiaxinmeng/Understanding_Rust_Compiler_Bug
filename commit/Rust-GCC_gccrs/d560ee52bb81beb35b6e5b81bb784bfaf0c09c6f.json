{"sha": "d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2MGVlNTJiYjgxYmViMzViNmU1YjgxYmI3ODRiZmFmMGMwOWM2Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-10T13:28:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-10T13:28:24Z"}, "message": "dwarf2out.c (dwarf2out_frame_debug_expr, [...]): Add static prototype.\n\n        * dwarf2out.c (dwarf2out_frame_debug_expr, add_incomplete_type,\n        retry_incomplete_types): Add static prototype.\n        (stripattributes, dwarf_cfi_name, ASM_OUTPUT_DWARF_STRING,\n        dwarf_tag_name, dwarf_attr_name, dwarf_form_name,\n        dwarf_stack_op_name, dwarf_type_encoding_name, add_AT_string,\n        dwarf2_name, add_name_attribute, lookup_filename, dwarf2out_line,\n        dwarf2out_start_source_file, dwarf2out_define, dwarf2out_undef):\n        Constify a char*.\n\n        * dwarf2out.h (dwarf2out_define, dwarf2out_undef,\n        dwarf2out_start_source_file, dwarf2out_line): Likewise.\n\nFrom-SVN: r28645", "tree": {"sha": "69b99bc295bd422af09eaa9c06f45a7aa9ffca98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b99bc295bd422af09eaa9c06f45a7aa9ffca98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/comments", "author": null, "committer": null, "parents": [{"sha": "ec940faa538ae7a3992b53f24627d89f67a6ff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec940faa538ae7a3992b53f24627d89f67a6ff61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec940faa538ae7a3992b53f24627d89f67a6ff61"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "8b2a3db3d3cf289fa0b9e6188144d706354dbe43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "patch": "@@ -1,3 +1,17 @@\n+Tue Aug 10 09:26:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* dwarf2out.c (dwarf2out_frame_debug_expr, add_incomplete_type,\n+\tretry_incomplete_types): Add static prototype.\n+\t(stripattributes, dwarf_cfi_name, ASM_OUTPUT_DWARF_STRING,\n+\tdwarf_tag_name, dwarf_attr_name, dwarf_form_name,\n+\tdwarf_stack_op_name, dwarf_type_encoding_name, add_AT_string,\n+\tdwarf2_name, add_name_attribute, lookup_filename, dwarf2out_line,\n+\tdwarf2out_start_source_file, dwarf2out_define, dwarf2out_undef):\n+\tConstify a char*.\n+\n+\t* dwarf2out.h (dwarf2out_define, dwarf2out_undef,\n+\tdwarf2out_start_source_file, dwarf2out_line): Likewise.\n+\n Tue Aug 10 09:21:46 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* output.h (assemble_name): Constify a char*."}, {"sha": "500d41e81461af9dcfdb615fe0aaed26d318fad2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "patch": "@@ -186,8 +186,8 @@ static unsigned current_funcdef_fde;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static char *stripattributes\t\tPROTO((char *));\n-static char *dwarf_cfi_name\t\tPROTO((unsigned));\n+static char *stripattributes\t\tPROTO((const char *));\n+static const char *dwarf_cfi_name\tPROTO((unsigned));\n static dw_cfi_ref new_cfi\t\tPROTO((void));\n static void add_cfi\t\t\tPROTO((dw_cfi_ref *, dw_cfi_ref));\n static unsigned long size_of_uleb128\tPROTO((unsigned long));\n@@ -205,6 +205,7 @@ static void output_cfi\t\t\tPROTO((dw_cfi_ref, dw_fde_ref));\n static void output_call_frame_info\tPROTO((int));\n static unsigned reg_number\t\tPROTO((rtx));\n static void dwarf2out_stack_adjust\tPROTO((rtx));\n+static void dwarf2out_frame_debug_expr\tPROTO((rtx, char *));\n \n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -471,7 +472,7 @@ static void dwarf2out_stack_adjust\tPROTO((rtx));\n #define ASM_OUTPUT_DWARF_STRING(FILE,P) \\\n   do {\t\t\t\t\t\t\t\t\t      \\\n     register int slen = strlen(P);                                            \\\n-    register char *p = (P);  \t                                              \\\n+    register const char *p = (P);  \t                                      \\\n     register int i;\t\t\t\t\t                      \\\n     fprintf (FILE, \"\\t.ascii \\\"\");\t\t\t\t              \\\n     for (i = 0; i < slen; i++)\t\t\t\t\t              \\\n@@ -527,7 +528,7 @@ expand_builtin_dwarf_fp_regnum ()\n \n static inline char *\n stripattributes (s)\n-     char *s;\n+     const char *s;\n {\n   char *stripped = xmalloc (strlen (s) + 2);\n   char *p = stripped;\n@@ -667,7 +668,7 @@ expand_builtin_dwarf_reg_size (reg_tree, target)\n \n /* Convert a DWARF call frame info. operation to its string name */\n \n-static char *\n+static const char *\n dwarf_cfi_name (cfi_opc)\n      register unsigned cfi_opc;\n {\n@@ -2461,12 +2462,12 @@ static char *addr_to_string\t\tPROTO((rtx));\n static int is_pseudo_reg\t\tPROTO((rtx));\n static tree type_main_variant\t\tPROTO((tree));\n static int is_tagged_type\t\tPROTO((tree));\n-static char *dwarf_tag_name\t\tPROTO((unsigned));\n-static char *dwarf_attr_name\t\tPROTO((unsigned));\n-static char *dwarf_form_name\t\tPROTO((unsigned));\n-static char *dwarf_stack_op_name\tPROTO((unsigned));\n+static const char *dwarf_tag_name\tPROTO((unsigned));\n+static const char *dwarf_attr_name\tPROTO((unsigned));\n+static const char *dwarf_form_name\tPROTO((unsigned));\n+static const char *dwarf_stack_op_name\tPROTO((unsigned));\n #if 0\n-static char *dwarf_type_encoding_name\tPROTO((unsigned));\n+static const char *dwarf_type_encoding_name PROTO((unsigned));\n #endif\n static tree decl_ultimate_origin\tPROTO((tree));\n static tree block_ultimate_origin\tPROTO((tree));\n@@ -2487,7 +2488,8 @@ static void add_AT_float\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute,\n \t\t\t\t\t       unsigned, long *));\n static void add_AT_string\t\tPROTO((dw_die_ref,\n-\t\t\t\t\t       enum dwarf_attribute, char *));\n+\t\t\t\t\t       enum dwarf_attribute,\n+\t\t\t\t\t       const char *));\n static void add_AT_die_ref\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute,\n \t\t\t\t\t       dw_die_ref));\n@@ -2551,7 +2553,7 @@ static void output_loc_operands\t\tPROTO((dw_loc_descr_ref));\n static unsigned long sibling_offset\tPROTO((dw_die_ref));\n static void output_die\t\t\tPROTO((dw_die_ref));\n static void output_compilation_unit_header PROTO((void));\n-static char *dwarf2_name\t\tPROTO((tree, int));\n+static const char *dwarf2_name\t\tPROTO((tree, int));\n static void add_pubname\t\t\tPROTO((tree, dw_die_ref));\n static void output_pubnames\t\tPROTO((void));\n static void add_arange\t\t\tPROTO((tree, dw_die_ref));\n@@ -2579,7 +2581,7 @@ static void add_AT_location_description\tPROTO((dw_die_ref,\n static void add_data_member_location_attribute PROTO((dw_die_ref, tree));\n static void add_const_value_attribute\tPROTO((dw_die_ref, rtx));\n static void add_location_or_const_value_attribute PROTO((dw_die_ref, tree));\n-static void add_name_attribute\t\tPROTO((dw_die_ref, char *));\n+static void add_name_attribute\t\tPROTO((dw_die_ref, const char *));\n static void add_bound_info\t\tPROTO((dw_die_ref,\n \t\t\t\t\t       enum dwarf_attribute, tree));\n static void add_subscript_info\t\tPROTO((dw_die_ref, tree));\n@@ -2635,7 +2637,9 @@ static void gen_block_die\t\tPROTO((tree, dw_die_ref, int));\n static void decls_for_scope\t\tPROTO((tree, dw_die_ref, int));\n static int is_redundant_typedef\t\tPROTO((tree));\n static void gen_decl_die\t\tPROTO((tree, dw_die_ref));\n-static unsigned lookup_filename\t\tPROTO((char *));\n+static unsigned lookup_filename\t\tPROTO((const char *));\n+static void add_incomplete_type\t\tPROTO((tree));\n+static void retry_incomplete_types\tPROTO((void));\n \n /* Section names used to hold DWARF debugging information.  */\n #ifndef DEBUG_INFO_SECTION\n@@ -2936,7 +2940,7 @@ is_tagged_type (type)\n \n /* Convert a DIE tag into its string name.  */\n \n-static char *\n+static const char *\n dwarf_tag_name (tag)\n      register unsigned tag;\n {\n@@ -3053,7 +3057,7 @@ dwarf_tag_name (tag)\n \n /* Convert a DWARF attribute code into its string name.  */\n \n-static char *\n+static const char *\n dwarf_attr_name (attr)\n      register unsigned attr;\n {\n@@ -3226,7 +3230,7 @@ dwarf_attr_name (attr)\n \n /* Convert a DWARF value form code into its string name.  */\n \n-static char *\n+static const char *\n dwarf_form_name (form)\n      register unsigned form;\n {\n@@ -3281,7 +3285,7 @@ dwarf_form_name (form)\n \n /* Convert a DWARF stack opcode into its string name.  */\n \n-static char *\n+static const char *\n dwarf_stack_op_name (op)\n      register unsigned op;\n {\n@@ -3585,7 +3589,7 @@ dwarf_stack_op_name (op)\n /* Convert a DWARF type code into its string name.  */\n \n #if 0\n-static char *\n+static const char *\n dwarf_type_encoding_name (enc)\n      register unsigned enc;\n {\n@@ -3804,7 +3808,7 @@ static inline void\n add_AT_string (die, attr_kind, str)\n      register dw_die_ref die;\n      register enum dwarf_attribute attr_kind;\n-     register char *str;\n+     register const char *str;\n {\n   register dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n \n@@ -5518,7 +5522,7 @@ output_compilation_unit_header ()\n    of decl_printable_name for C++ looks like \"A::f(int)\".  Let's drop the\n    argument list, and maybe the scope.  */\n \n-static char *\n+static const char *\n dwarf2_name (decl, scope)\n      tree decl;\n      int scope;\n@@ -7269,7 +7273,7 @@ add_location_or_const_value_attribute (die, decl)\n static inline void\n add_name_attribute (die, name_string)\n      register dw_die_ref die;\n-     register char *name_string;\n+     register const char *name_string;\n {\n   if (name_string != NULL && *name_string != 0)\n     add_AT_string (die, DW_AT_name, name_string);\n@@ -9793,7 +9797,7 @@ dwarf2out_label (insn)\n \n static unsigned\n lookup_filename (file_name)\n-     char *file_name;\n+     const char *file_name;\n {\n   static unsigned last_file_lookup_index = 0;\n   register unsigned i;\n@@ -9835,7 +9839,7 @@ lookup_filename (file_name)\n \n void\n dwarf2out_line (filename, line)\n-     register char *filename;\n+     register const char *filename;\n      register unsigned line;\n {\n   if (debug_info_level >= DINFO_LEVEL_NORMAL)\n@@ -9904,7 +9908,7 @@ dwarf2out_line (filename, line)\n \n void\n dwarf2out_start_source_file (filename)\n-     register char *filename ATTRIBUTE_UNUSED;\n+     register const char *filename ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -9923,7 +9927,7 @@ dwarf2out_end_source_file ()\n void\n dwarf2out_define (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n-     register char *buffer ATTRIBUTE_UNUSED;\n+     register const char *buffer ATTRIBUTE_UNUSED;\n {\n   static int initialized = 0;\n   if (!initialized)\n@@ -9940,7 +9944,7 @@ dwarf2out_define (lineno, buffer)\n void\n dwarf2out_undef (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n-     register char *buffer ATTRIBUTE_UNUSED;\n+     register const char *buffer ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "b32fefb4230b1b41ab77a5a1aad9d46e69ce0673", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=d560ee52bb81beb35b6e5b81bb784bfaf0c09c6f", "patch": "@@ -22,16 +22,16 @@ extern void dwarf2out_init \t\tPROTO ((FILE *asm_out_file,\n \t\t\t\t\t\tchar *main_input_filename));\n extern void dwarf2out_finish\t\tPROTO ((void));\n \n-extern void dwarf2out_define\t\tPROTO ((unsigned, char *));\n-extern void dwarf2out_undef \t\tPROTO ((unsigned, char *));                                       \n-extern void dwarf2out_start_source_file \tPROTO ((char *));\n+extern void dwarf2out_define\t\tPROTO ((unsigned, const char *));\n+extern void dwarf2out_undef \t\tPROTO ((unsigned, const char *));\n+extern void dwarf2out_start_source_file\tPROTO ((const char *));\n extern void dwarf2out_end_source_file \tPROTO ((void));\n \n extern void dwarf2out_begin_block\tPROTO ((unsigned));\n extern void dwarf2out_end_block\t\tPROTO ((unsigned));\n extern void dwarf2out_label\t\tPROTO ((rtx));\t\t\t\n extern void dwarf2out_decl\t\tPROTO ((tree));\t\n-extern void dwarf2out_line\t\tPROTO ((char *, unsigned));\t\t\t\n+extern void dwarf2out_line\t\tPROTO ((const char *, unsigned));\n extern void dwarf2out_frame_init\tPROTO ((void));\n extern void dwarf2out_frame_debug\tPROTO ((rtx));\n extern void dwarf2out_frame_finish\tPROTO ((void));"}]}