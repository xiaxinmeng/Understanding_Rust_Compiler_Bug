{"sha": "3a01d8eec23091dc24c2fb14a621ea92a262ff50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwMWQ4ZWVjMjMwOTFkYzI0YzJmYjE0YTYyMWVhOTJhMjYyZmY1MA==", "commit": {"author": {"name": "Michael Forney", "email": "mforney@mforney.org", "date": "2021-06-14T02:24:06Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-06-14T02:26:03Z"}, "message": "[PATCH] config: Backport \"Rely less on internal symbols\" (serial 69) to gettext.m4\n\nconfig\n\n\t* gettext.m4 (AM_GNU_GETTEXT): Skip checks for the internal\n\tsymbols _nl_msg_cat_cntr, _nl_domain_bindings, and\n\t_nl_expand_alias, if __GNU_GETTEXT_SUPPORTED_REVISION is defined.\n\tBackport of gettext serial 68 patch.", "tree": {"sha": "c40e829823873400ef6f92ad110318e1e7f59e6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c40e829823873400ef6f92ad110318e1e7f59e6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a01d8eec23091dc24c2fb14a621ea92a262ff50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a01d8eec23091dc24c2fb14a621ea92a262ff50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a01d8eec23091dc24c2fb14a621ea92a262ff50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a01d8eec23091dc24c2fb14a621ea92a262ff50/comments", "author": {"login": "michaelforney", "id": 52851, "node_id": "MDQ6VXNlcjUyODUx", "avatar_url": "https://avatars.githubusercontent.com/u/52851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelforney", "html_url": "https://github.com/michaelforney", "followers_url": "https://api.github.com/users/michaelforney/followers", "following_url": "https://api.github.com/users/michaelforney/following{/other_user}", "gists_url": "https://api.github.com/users/michaelforney/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelforney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelforney/subscriptions", "organizations_url": "https://api.github.com/users/michaelforney/orgs", "repos_url": "https://api.github.com/users/michaelforney/repos", "events_url": "https://api.github.com/users/michaelforney/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelforney/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e70c34e5ce6fefba22015bd4fe0df33a13567d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e70c34e5ce6fefba22015bd4fe0df33a13567d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e70c34e5ce6fefba22015bd4fe0df33a13567d4"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "5b42bb1652318092df643e20e8ade2d49148fa46", "filename": "config/gettext.m4", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a01d8eec23091dc24c2fb14a621ea92a262ff50/config%2Fgettext.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a01d8eec23091dc24c2fb14a621ea92a262ff50/config%2Fgettext.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fgettext.m4?ref=3a01d8eec23091dc24c2fb14a621ea92a262ff50", "patch": "@@ -128,17 +128,23 @@ AC_DEFUN([AM_GNU_GETTEXT],\n \n         AC_CACHE_CHECK([for GNU gettext in libc], gt_cv_func_gnugettext_libc,\n          [AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern int *_nl_domain_bindings;\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_domain_bindings)\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern int *_nl_domain_bindings;],\n+], []),\n             [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_domain_bindings],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n             gt_cv_func_gnugettext_libc=yes,\n             gt_cv_func_gnugettext_libc=no)])\n \n@@ -160,42 +166,54 @@ return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\",\n             LIBS=\"$LIBS $LIBINTL\"\n             dnl Now see whether libintl exists and does not depend on libiconv.\n             AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-const char *_nl_expand_alias ();],\n+], []),\n               [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_expand_alias (0)],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n               gt_cv_func_gnugettext_libintl=yes,\n               gt_cv_func_gnugettext_libintl=no)\n             dnl Now see whether libintl exists and depends on libiconv.\n             if test \"$gt_cv_func_gnugettext_libintl\" != yes && test -n \"$LIBICONV\"; then\n               LIBS=\"$LIBS $LIBICONV\"\n               AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-const char *_nl_expand_alias ();],\n+], []),\n                 [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_expand_alias (0)],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n                [LIBINTL=\"$LIBINTL $LIBICONV\"\n                 LTLIBINTL=\"$LTLIBINTL $LTLIBICONV\"\n                 gt_cv_func_gnugettext_libintl=yes"}]}