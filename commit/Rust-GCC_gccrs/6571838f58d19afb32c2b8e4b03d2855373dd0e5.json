{"sha": "6571838f58d19afb32c2b8e4b03d2855373dd0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MTgzOGY1OGQxOWFmYjMyYzJiOGU0YjAzZDI4NTUzNzNkZDBlNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-11-09T14:33:32Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-09T14:33:32Z"}, "message": "re PR java/15576 (Class initialization optimization is disabled)\n\n2004-11-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR java/15576\n        * check-init.c (check_init): Ignore DECL_EXPR.\n        * expr.c (always_initialize_class_p): Reenable.\n        (build_class_init): Use a variable to store the decl.  Also use\n        boolean_false_node instead of integer_zero_node.\n        * parse.y (attach_init_test_initialization_flags): Add a decl_expr\n        to the block.\n\nFrom-SVN: r90343", "tree": {"sha": "9fec2c29b67ab06ca92cbad5fd005cc167f78685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fec2c29b67ab06ca92cbad5fd005cc167f78685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6571838f58d19afb32c2b8e4b03d2855373dd0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6571838f58d19afb32c2b8e4b03d2855373dd0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6571838f58d19afb32c2b8e4b03d2855373dd0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6571838f58d19afb32c2b8e4b03d2855373dd0e5/comments", "author": null, "committer": null, "parents": [{"sha": "a0eca485f44e435aeffd11c28a10ba6ddc97dc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0eca485f44e435aeffd11c28a10ba6ddc97dc45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0eca485f44e435aeffd11c28a10ba6ddc97dc45"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "7342e8c2104ae3611f8b1d33ef821ba89b6e360a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6571838f58d19afb32c2b8e4b03d2855373dd0e5", "patch": "@@ -1,3 +1,13 @@\n+2004-11-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR java/15576\n+\t* check-init.c (check_init): Ignore DECL_EXPR.\n+\t* expr.c (always_initialize_class_p): Reenable.\n+\t(build_class_init): Use a variable to store the decl.  Also use\n+\tboolean_false_node instead of integer_zero_node.\n+\t* parse.y (attach_init_test_initialization_flags): Add a decl_expr\n+\tto the block.\n+\n 2004-11-08  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/16843:"}, {"sha": "dacc4b914b53fd4c8cd7afbedd75ee766958339c", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=6571838f58d19afb32c2b8e4b03d2855373dd0e5", "patch": "@@ -844,6 +844,7 @@ check_init (tree exp, words before)\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:\n+    case DECL_EXPR:\n     case JAVA_EXC_OBJ_EXPR:\n       break;\n "}, {"sha": "deb75a9e7f9f86d39db36201d40e92d8191e9435", "filename": "gcc/java/expr.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6571838f58d19afb32c2b8e4b03d2855373dd0e5", "patch": "@@ -95,8 +95,7 @@ tree dtable_ident = NULL_TREE;\n \n /* Set to nonzero value in order to emit class initialization code\n    before static field references.  */\n-/* FIXME: Make this work with gimplify.  */\n-int always_initialize_class_p = 1;\n+int always_initialize_class_p = 0;\n \n /* We store the stack state in two places:\n    Within a basic block, we use the quick_stack, which is a\n@@ -1768,26 +1767,28 @@ build_class_init (tree clas, tree expr)\n   else\n     {\n       tree *init_test_decl;\n+      tree decl;\n       init_test_decl = java_treetreehash_new\n \t(DECL_FUNCTION_INIT_TEST_TABLE (current_function_decl), clas);\n \n       if (*init_test_decl == NULL)\n \t{\n \t  /* Build a declaration and mark it as a flag used to track\n \t     static class initializations. */\n-\t  *init_test_decl = build_decl (VAR_DECL, NULL_TREE,\n-\t\t\t\t       boolean_type_node);\n-\t  MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (*init_test_decl);\n-\t  LOCAL_CLASS_INITIALIZATION_FLAG (*init_test_decl) = 1;\n-\t  DECL_CONTEXT (*init_test_decl) = current_function_decl;\n-\t  DECL_FUNCTION_INIT_TEST_CLASS (*init_test_decl) = clas;\n+\t  decl = build_decl (VAR_DECL, NULL_TREE,\n+\t\t\t     boolean_type_node);\n+\t  MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n+\t  LOCAL_CLASS_INITIALIZATION_FLAG (decl) = 1;\n+\t  DECL_CONTEXT (decl) = current_function_decl;\n+\t  DECL_FUNCTION_INIT_TEST_CLASS (decl) = clas;\n \t  /* Tell the check-init code to ignore this decl when not\n              optimizing class initialization. */\n \t  if (!STATIC_CLASS_INIT_OPT_P ())\n-\t    DECL_BIT_INDEX(*init_test_decl) = -1;\n-\t  DECL_INITIAL (*init_test_decl) = integer_zero_node;\n+\t    DECL_BIT_INDEX (decl) = -1;\n+\t  DECL_INITIAL (decl) = boolean_false_node;\n \t  /* Don't emit any symbolic debugging info for this decl.  */\n-\t  DECL_IGNORED_P (*init_test_decl) = 1;\n+\t  DECL_IGNORED_P (decl) = 1;\t  \n+\t  *init_test_decl = decl;\n \t}\n \n       init = build3 (CALL_EXPR, void_type_node,"}, {"sha": "d02a448c7907caaf51b0d6c266b085f9669588cf", "filename": "gcc/java/parse.y", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6571838f58d19afb32c2b8e4b03d2855373dd0e5/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=6571838f58d19afb32c2b8e4b03d2855373dd0e5", "patch": "@@ -16350,8 +16350,12 @@ attach_init_test_initialization_flags (void **entry, void *ptr)\n \n   if (block != error_mark_node)\n     {\n+      tree body = BLOCK_SUBBLOCKS (block);\n       TREE_CHAIN (ite->value) = BLOCK_EXPR_DECLS (block);\n       BLOCK_EXPR_DECLS (block) = ite->value;\n+      body = build2 (COMPOUND_EXPR, void_type_node,\n+                     build1 (DECL_EXPR, void_type_node, ite->value), body);\n+      BLOCK_SUBBLOCKS (block) = body;\n     }\n   return true;\n }"}]}