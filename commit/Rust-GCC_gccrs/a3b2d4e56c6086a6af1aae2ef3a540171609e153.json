{"sha": "a3b2d4e56c6086a6af1aae2ef3a540171609e153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiMmQ0ZTU2YzYwODZhNmFmMWFhZTJlZjNhNTQwMTcxNjA5ZTE1Mw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-22T15:03:24Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-22T15:03:24Z"}, "message": "re PR fortran/33502 (gfortran with .F suffix and -g3 option chokes on preprocessor syntax)\n\n\tPR fortran/33502\n\t* scanner.c (gfc_advance_line): Call debug_hooks->start_source_file\n\tand debug_hooks->end_source_file when entering and exiting\n\tincluded files.\n\t(gfc_define_undef_line): New function.\n\t(load_file): Ignore #define and #undef preprocessor lines\n\twhile reading source files.\n\t* parse.c (next_statement): Handle #define and #undef\n\tpreprocessor lines.\n\t(gfc_parse_file): Call debug_hooks->start_source_file and\n\tdebug_hooks->end_source_file for the main source file if\n\trequested by the debug format.\n\t* gfortran.h (gfc_define_undef_line): Add prototype.\n\nFrom-SVN: r128671", "tree": {"sha": "2389a4ad99837b8fe86ec6a45f7d52d1eb8796e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2389a4ad99837b8fe86ec6a45f7d52d1eb8796e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3b2d4e56c6086a6af1aae2ef3a540171609e153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b2d4e56c6086a6af1aae2ef3a540171609e153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b2d4e56c6086a6af1aae2ef3a540171609e153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b2d4e56c6086a6af1aae2ef3a540171609e153/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa6cfec03275391d93cf67e1691f11c053f1220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa6cfec03275391d93cf67e1691f11c053f1220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa6cfec03275391d93cf67e1691f11c053f1220"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "36904b2766ccb851945e3a18f3644a757c7ba708", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a3b2d4e56c6086a6af1aae2ef3a540171609e153", "patch": "@@ -1,3 +1,19 @@\n+2007-09-22  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33502\n+\t* scanner.c (gfc_advance_line): Call debug_hooks->start_source_file\n+\tand debug_hooks->end_source_file when entering and exiting\n+\tincluded files.\n+\t(gfc_define_undef_line): New function.\n+\t(load_file): Ignore #define and #undef preprocessor lines\n+\twhile reading source files.\n+\t* parse.c (next_statement): Handle #define and #undef\n+\tpreprocessor lines.\n+\t(gfc_parse_file): Call debug_hooks->start_source_file and\n+\tdebug_hooks->end_source_file for the main source file if\n+\trequested by the debug format.\n+\t* gfortran.h (gfc_define_undef_line): Add prototype.\n+\n 2007-09-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33445"}, {"sha": "7f6179424fb1c1c62efe3175e866408bc1c7cbc9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a3b2d4e56c6086a6af1aae2ef3a540171609e153", "patch": "@@ -1935,6 +1935,7 @@ int gfc_at_bol (void);\n int gfc_at_eol (void);\n void gfc_advance_line (void);\n int gfc_check_include (void);\n+int gfc_define_undef_line (void);\n \n void gfc_skip_comments (void);\n int gfc_next_char_literal (int);"}, {"sha": "9fd43758024143ccd11531f8a740d4968286b287", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=a3b2d4e56c6086a6af1aae2ef3a540171609e153", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n #include \"match.h\"\n #include \"parse.h\"\n+#include \"debug.h\"\n \n /* Current statement label.  Zero means no statement label.  Because new_st\n    can get wiped during statement matching, we have to keep it separate.  */\n@@ -673,6 +674,9 @@ next_statement (void)\n \t  break;\n \t}\n \n+      if (gfc_define_undef_line ())\n+\tcontinue;\n+\n       st = (gfc_current_form == FORM_FIXED) ? next_fixed () : next_free ();\n \n       if (st != ST_NONE)\n@@ -3219,6 +3223,11 @@ gfc_parse_file (void)\n   gfc_statement st;\n   locus prog_locus;\n \n+  /* If the debugger wants the name of the main source file,\n+     we give it.  */\n+  if (debug_hooks->start_end_main_source_file)\n+    (*debug_hooks->start_source_file) (0, gfc_source_file);\n+\n   top.state = COMP_NONE;\n   top.sym = NULL;\n   top.previous = NULL;\n@@ -3329,6 +3338,9 @@ gfc_parse_file (void)\n   goto loop;\n \n done:\n+  if (debug_hooks->start_end_main_source_file)\n+    (*debug_hooks->end_source_file) (0);\n+\n   return SUCCESS;\n \n duplicate_main:"}, {"sha": "ef2bbcd921e2cf4ecc14646f1b11bd87c13ed526", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3b2d4e56c6086a6af1aae2ef3a540171609e153/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=a3b2d4e56c6086a6af1aae2ef3a540171609e153", "patch": "@@ -45,6 +45,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"gfortran.h\"\n #include \"toplev.h\"\n+#include \"debug.h\"\n+#include \"flags.h\"\n \n /* Structure for holding module and include file search path.  */\n typedef struct gfc_directorylist\n@@ -312,6 +314,20 @@ gfc_advance_line (void)\n       return;\n     } \n \n+  if (gfc_current_locus.lb->next)\n+    {\n+      if (gfc_current_locus.lb->file->next\n+\t  && gfc_current_locus.lb->file->up == gfc_current_locus.lb->file->next)\n+\t/* We exit from an included file. */\n+\t(*debug_hooks->end_source_file)\n+\t\t(gfc_linebuf_linenum (gfc_current_locus.lb->next));\n+      else if (gfc_current_locus.lb->next->file != gfc_current_locus.lb->file)\n+\t/* We enter into a new file.  */\n+\t(*debug_hooks->start_source_file)\n+\t\t(gfc_linebuf_linenum (gfc_current_locus.lb),\n+\t\t gfc_current_locus.lb->next->file->filename);\n+    }\n+\n   gfc_current_locus.lb = gfc_current_locus.lb->next;\n \n   if (gfc_current_locus.lb != NULL)\t \n@@ -372,6 +388,31 @@ skip_comment_line (void)\n }\n \n \n+int\n+gfc_define_undef_line (void)\n+{\n+  /* All lines beginning with '#' are either #define or #undef.  */\n+  if (! (debug_info_level == DINFO_LEVEL_VERBOSE\n+\t && (write_symbols == DWARF2_DEBUG\n+\t     || write_symbols == VMS_AND_DWARF2_DEBUG))\n+      || gfc_peek_char () != '#')\n+    return 0;\n+\n+  if (strncmp (gfc_current_locus.nextc, \"#define \", 8) == 0)\n+    (*debug_hooks->define) (gfc_linebuf_linenum (gfc_current_locus.lb),\n+\t\t\t    &(gfc_current_locus.nextc[8]));\n+\n+  if (strncmp (gfc_current_locus.nextc, \"#undef \", 7) == 0)\n+    (*debug_hooks->undef) (gfc_linebuf_linenum (gfc_current_locus.lb),\n+\t\t\t   &(gfc_current_locus.nextc[7]));\n+\n+  /* Skip the rest of the line.  */\n+  skip_comment_line ();\n+\n+  return 1;\n+}\n+\n+\n /* Comment lines are null lines, lines containing only blanks or lines\n    on which the first nonblank line is a '!'.\n    Return true if !$ openmp conditional compilation sentinel was\n@@ -1500,8 +1541,20 @@ load_file (const char *filename, bool initial)\n \n       if (line[0] == '#')\n \t{\n-\t  preprocessor_line (line);\n-\t  continue;\n+\t  /* When -g3 is specified, it's possible that we emit #define\n+\t     and #undef lines, which we need to pass to the middle-end\n+\t     so that it can emit correct debug info.  */\n+\t  if (debug_info_level == DINFO_LEVEL_VERBOSE\n+\t      && (write_symbols == DWARF2_DEBUG\n+\t\t  || write_symbols == VMS_AND_DWARF2_DEBUG)\n+\t      && (strncmp (line, \"#define \", 8) == 0\n+\t\t  || strncmp (line, \"#undef \", 7) == 0))\n+\t    ;\n+\t  else\n+\t    {\n+\t      preprocessor_line (line);\n+\t      continue;\n+\t    }\n \t}\n \n       /* Preprocessed files have preprocessor lines added before the byte"}]}