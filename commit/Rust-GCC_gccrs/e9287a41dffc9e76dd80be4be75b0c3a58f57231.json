{"sha": "e9287a41dffc9e76dd80be4be75b0c3a58f57231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyODdhNDFkZmZjOWU3NmRkODBiZTRiZTc1YjBjM2E1OGY1NzIzMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-27T15:18:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-27T15:18:23Z"}, "message": "re PR middle-end/58723 (ICE in lto_output_edge, at lto-cgraph.c:300 for OpenMP's simd reduction)\n\n2013-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/58723\n\t* cgraphbuild.c (build_cgraph_edges): Do not build edges\n\tfor internal calls.\n\t(rebuild_cgraph_edges): Likewise.\n\t* ipa-inline-analysis.c (estimate_function_body_sizes):\n\tSkip internal calls.\n\t* tree-inline.c (estimate_num_insns): Estimate size of internal\n\tcalls as 0.\n\t(gimple_expand_calls_inline): Do not try inline-expanding\n\tinternal calls.\n\t* lto-streamer-in.c (input_cfg): Stream loop safelen,\n\tforce_vect and simduid.\n\t(input_struct_function_base): Stream has_force_vect_loops\n\tand has_simduid_loops.\n\t(input_function): Adjust.\n\t* lto-streamer-out.c (output_cfg): Stream loop safelen,\n\tforce_vect and simduid.\n\t(output_struct_function_base): Stream has_force_vect_loops\n\tand has_simduid_loops.\n\nFrom-SVN: r205447", "tree": {"sha": "a420c4091323d45ede618fbe00f2bb1785f9edf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a420c4091323d45ede618fbe00f2bb1785f9edf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9287a41dffc9e76dd80be4be75b0c3a58f57231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9287a41dffc9e76dd80be4be75b0c3a58f57231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9287a41dffc9e76dd80be4be75b0c3a58f57231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9287a41dffc9e76dd80be4be75b0c3a58f57231/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3745a526d6e978059a3de751e302ecd2af88c0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3745a526d6e978059a3de751e302ecd2af88c0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3745a526d6e978059a3de751e302ecd2af88c0de"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "3899f7e40c5ca287e1f8d5c235b04442c72e07da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -1,3 +1,25 @@\n+2013-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/58723\n+\t* cgraphbuild.c (build_cgraph_edges): Do not build edges\n+\tfor internal calls.\n+\t(rebuild_cgraph_edges): Likewise.\n+\t* ipa-inline-analysis.c (estimate_function_body_sizes):\n+\tSkip internal calls.\n+\t* tree-inline.c (estimate_num_insns): Estimate size of internal\n+\tcalls as 0.\n+\t(gimple_expand_calls_inline): Do not try inline-expanding\n+\tinternal calls.\n+\t* lto-streamer-in.c (input_cfg): Stream loop safelen,\n+\tforce_vect and simduid.\n+\t(input_struct_function_base): Stream has_force_vect_loops\n+\tand has_simduid_loops.\n+\t(input_function): Adjust.\n+\t* lto-streamer-out.c (output_cfg): Stream loop safelen,\n+\tforce_vect and simduid.\n+\t(output_struct_function_base): Stream has_force_vect_loops\n+\tand has_simduid_loops.\n+\n 2013-11-27  Kai Tietz  <ktietz@redhat.com>\n \n \t* config/i386/winnt.c (i386_pe_section_type_flags): Use const"}, {"sha": "9a63982d9cbdc0bed4f315e1c10ea9d3ab96f281", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -335,6 +335,8 @@ build_cgraph_edges (void)\n \t      if (decl)\n \t\tcgraph_create_edge (node, cgraph_get_create_node (decl),\n \t\t\t\t    stmt, bb->count, freq);\n+\t      else if (gimple_call_internal_p (stmt))\n+\t\t;\n \t      else\n \t\tcgraph_create_indirect_edge (node, stmt,\n \t\t\t\t\t     gimple_call_flags (stmt),\n@@ -464,6 +466,8 @@ rebuild_cgraph_edges (void)\n \t      if (decl)\n \t\tcgraph_create_edge (node, cgraph_get_create_node (decl), stmt,\n \t\t\t\t    bb->count, freq);\n+\t      else if (gimple_call_internal_p (stmt))\n+\t\t;\n \t      else\n \t\tcgraph_create_indirect_edge (node, stmt,\n \t\t\t\t\t     gimple_call_flags (stmt),"}, {"sha": "ad6fe8febb65a3adb911155836b19652be547c44", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -2502,7 +2502,8 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t    }\n \n \n-\t  if (is_gimple_call (stmt))\n+\t  if (is_gimple_call (stmt)\n+\t      && !gimple_call_internal_p (stmt))\n \t    {\n \t      struct cgraph_edge *edge = cgraph_edge (node, stmt);\n \t      struct inline_edge_summary *es = inline_edge_summary (edge);"}, {"sha": "c5cb23c95d3203fc84b67ebf1947ae11d3aca692", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -598,7 +598,8 @@ make_new_block (struct function *fn, unsigned int index)\n /* Read the CFG for function FN from input block IB.  */\n \n static void\n-input_cfg (struct lto_input_block *ib, struct function *fn,\n+input_cfg (struct lto_input_block *ib, struct data_in *data_in,\n+\t   struct function *fn,\n \t   int count_materialization_scale)\n {\n   unsigned int bb_count;\n@@ -714,6 +715,11 @@ input_cfg (struct lto_input_block *ib, struct function *fn,\n \t  loop->nb_iterations_estimate.high = streamer_read_hwi (ib);\n \t}\n \n+      /* Read OMP SIMD related info.  */\n+      loop->safelen = streamer_read_hwi (ib);\n+      loop->force_vect = streamer_read_hwi (ib);\n+      loop->simduid = stream_read_tree (ib, data_in);\n+\n       place_new_loop (fn, loop);\n \n       /* flow_loops_find doesn't like loops not in the tree, hook them\n@@ -877,6 +883,8 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->has_nonlocal_label = bp_unpack_value (&bp, 1);\n   fn->calls_alloca = bp_unpack_value (&bp, 1);\n   fn->calls_setjmp = bp_unpack_value (&bp, 1);\n+  fn->has_force_vect_loops = bp_unpack_value (&bp, 1);\n+  fn->has_simduid_loops = bp_unpack_value (&bp, 1);\n   fn->va_list_fpr_size = bp_unpack_value (&bp, 8);\n   fn->va_list_gpr_size = bp_unpack_value (&bp, 8);\n \n@@ -923,7 +931,7 @@ input_function (tree fn_decl, struct data_in *data_in,\n   if (!node)\n     node = cgraph_create_node (fn_decl);\n   input_struct_function_base (fn, data_in, ib);\n-  input_cfg (ib_cfg, fn, node->count_materialization_scale);\n+  input_cfg (ib_cfg, data_in, fn, node->count_materialization_scale);\n \n   /* Read all the SSA names.  */\n   input_ssa_names (ib, data_in, fn);"}, {"sha": "94dc13172a5ddb98aaa8e26040547b7fa6d0b54b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -1642,6 +1642,11 @@ output_cfg (struct output_block *ob, struct function *fn)\n \t  streamer_write_uhwi (ob, loop->nb_iterations_estimate.low);\n \t  streamer_write_hwi (ob, loop->nb_iterations_estimate.high);\n \t}\n+\n+      /* Write OMP SIMD related info.  */\n+      streamer_write_hwi (ob, loop->safelen);\n+      streamer_write_hwi (ob, loop->force_vect);\n+      stream_write_tree (ob, loop->simduid, true);\n     }\n \n   ob->main_stream = tmp_stream;\n@@ -1735,6 +1740,8 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->has_nonlocal_label, 1);\n   bp_pack_value (&bp, fn->calls_alloca, 1);\n   bp_pack_value (&bp, fn->calls_setjmp, 1);\n+  bp_pack_value (&bp, fn->has_force_vect_loops, 1);\n+  bp_pack_value (&bp, fn->has_simduid_loops, 1);\n   bp_pack_value (&bp, fn->va_list_fpr_size, 8);\n   bp_pack_value (&bp, fn->va_list_gpr_size, 8);\n "}, {"sha": "f42ade0214539fb9346daf73d9bcf6cb9d5cf236", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9287a41dffc9e76dd80be4be75b0c3a58f57231/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e9287a41dffc9e76dd80be4be75b0c3a58f57231", "patch": "@@ -3797,12 +3797,16 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \n     case GIMPLE_CALL:\n       {\n-\ttree decl = gimple_call_fndecl (stmt);\n+\ttree decl;\n \tstruct cgraph_node *node = NULL;\n \n \t/* Do not special case builtins where we see the body.\n \t   This just confuse inliner.  */\n-\tif (!decl || !(node = cgraph_get_node (decl)) || node->definition)\n+\tif (gimple_call_internal_p (stmt))\n+\t  return 0;\n+\telse if (!(decl = gimple_call_fndecl (stmt))\n+\t\t || !(node = cgraph_get_node (decl))\n+\t\t || node->definition)\n \t  ;\n \t/* For buitins that are likely expanded to nothing or\n \t   inlined do not account operand costs.  */\n@@ -4423,6 +4427,7 @@ gimple_expand_calls_inline (basic_block bb, copy_body_data *id)\n       gimple stmt = gsi_stmt (gsi);\n \n       if (is_gimple_call (stmt)\n+\t  && !gimple_call_internal_p (stmt)\n \t  && expand_call_inline (bb, stmt, id))\n \treturn true;\n     }"}]}