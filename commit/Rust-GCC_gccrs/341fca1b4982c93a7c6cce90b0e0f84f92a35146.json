{"sha": "341fca1b4982c93a7c6cce90b0e0f84f92a35146", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxZmNhMWI0OTgyYzkzYTdjNmNjZTkwYjBlMGY4NGY5MmEzNTE0Ng==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-02-22T16:35:22Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-02-22T16:35:22Z"}, "message": "Handle stack pointer with SUBS/ADDS instructions.\n\nIn general the stack pointer was not handled for many SUBS/ADDS patterns in\naarch64.md.\nBoth the \"extended register\" and \"immediate\" forms allow the stack pointer to be\nused as the source register, while no form allows the stack pointer for the\ndestination register.\n\nThe define_insn patterns generating ADDS/SUBS did not allow the stack pointer\nfor any operand, while the define_peephole2 patterns that generated RTX to be\nmatched by these patterns allowed the stack pointer for any operand.\n\nThe patterns are fixed by adding the 'k' constraint for the first source operand\nto all define_insns that generate the ADDS/SUBS \"extended register\" and\n\"immediate\" forms (but not the \"shifted register\" form).\n\nIn peephole optimizations, constraint strings are ignored (see \"(gccint) C\nConstraint Interface\" info node in the documentation), so the decision to act or\nnot is based solely on the predicate and condition.\nThis patch introduces a new predicate \"aarch64_general_reg\" to be used in\ndefine_peephole2 patterns where only GENERAL_REGS registers are acceptable and\nuses that predicate in the peepholes that generate patterns for ADDS/SUBS.\n\nFull bootstrap and regtest done on aarch64-none-linux-gnu.\nRegression tests done on aarch64-none-linux-gnu and aarch64-none-elf cross\ncompiler.\n\nOK for trunk?\n\n\ngcc/ChangeLog:\n\n2019-02-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\tPR target/89324\n\t* config/aarch64/aarch64.md: Use aarch64_general_reg predicate on\n\tdestination register in peepholes generating patterns for ADDS/SUBS.\n\t(add<mode>3_compare0,\n\t*addsi3_compare0_uxtw, add<mode>3_compareC,\n\tadd<mode>3_compareV_imm, add<mode>3_compareV,\n\t*adds_<optab><ALLX:mode>_<GPI:mode>,\n\t*subs_<optab><ALLX:mode>_<GPI:mode>,\n\t*adds_<optab><ALLX:mode>_shift_<GPI:mode>,\n\t*subs_<optab><ALLX:mode>_shift_<GPI:mode>,\n\t*adds_<optab><mode>_multp2, *subs_<optab><mode>_multp2,\n\t*sub<mode>3_compare0, *subsi3_compare0_uxtw,\n\tsub<mode>3_compare1): Allow stack pointer for source register.\n\t* config/aarch64/predicates.md (aarch64_general_reg): New predicate.\n\n\ngcc/testsuite/ChangeLog:\n\n2019-02-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\tPR target/89324\n\t* gcc.dg/rtl/aarch64/subs_adds_sp.c: New test.\n\t* gfortran.fortran-torture/compile/pr89324.f90: New test.\n\nFrom-SVN: r269122", "tree": {"sha": "034169e57790c6f7a247df657e043b654516c585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/034169e57790c6f7a247df657e043b654516c585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/341fca1b4982c93a7c6cce90b0e0f84f92a35146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341fca1b4982c93a7c6cce90b0e0f84f92a35146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/341fca1b4982c93a7c6cce90b0e0f84f92a35146", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/341fca1b4982c93a7c6cce90b0e0f84f92a35146/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c2a70cb1414b10ab3d52286087398cd03a70413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2a70cb1414b10ab3d52286087398cd03a70413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2a70cb1414b10ab3d52286087398cd03a70413"}], "stats": {"total": 233, "additions": 214, "deletions": 19}, "files": [{"sha": "8b283d5014bb59ca8abbdcff9dc9f6937646c0b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -1,3 +1,20 @@\n+2019-02-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\tPR target/89324\n+\t* config/aarch64/aarch64.md: Use aarch64_general_reg predicate on\n+\tdestination register in peepholes generating patterns for ADDS/SUBS.\n+\t(add<mode>3_compare0,\n+\t*addsi3_compare0_uxtw, add<mode>3_compareC,\n+\tadd<mode>3_compareV_imm, add<mode>3_compareV,\n+\t*adds_<optab><ALLX:mode>_<GPI:mode>,\n+\t*subs_<optab><ALLX:mode>_<GPI:mode>,\n+\t*adds_<optab><ALLX:mode>_shift_<GPI:mode>,\n+\t*subs_<optab><ALLX:mode>_shift_<GPI:mode>,\n+\t*adds_<optab><mode>_multp2, *subs_<optab><mode>_multp2,\n+\t*sub<mode>3_compare0, *subsi3_compare0_uxtw,\n+\tsub<mode>3_compare1): Allow stack pointer for source register.\n+\t* config/aarch64/predicates.md (aarch64_general_reg): New predicate.\n+\n 2019-02-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/89425"}, {"sha": "b7cd9fc787b8526cc7b11b9430fbfcd73103328a", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -1985,7 +1985,7 @@\n (define_insn \"add<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (plus:GPI (match_operand:GPI 1 \"register_operand\" \"%r,r,r\")\n+\t (plus:GPI (match_operand:GPI 1 \"register_operand\" \"%rk,rk,rk\")\n \t\t   (match_operand:GPI 2 \"aarch64_plus_operand\" \"r,I,J\"))\n \t (const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r,r,r\")\n@@ -2002,7 +2002,7 @@\n (define_insn \"*addsi3_compare0_uxtw\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r,r\")\n+\t (plus:SI (match_operand:SI 1 \"register_operand\" \"%rk,rk,rk\")\n \t\t  (match_operand:SI 2 \"aarch64_plus_operand\" \"r,I,J\"))\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n@@ -2034,7 +2034,7 @@\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n \t  (plus:GPI\n-\t    (match_operand:GPI 1 \"register_operand\" \"r,r,r\")\n+\t    (match_operand:GPI 1 \"register_operand\" \"rk,rk,rk\")\n \t    (match_operand:GPI 2 \"aarch64_plus_operand\" \"r,I,J\"))\n \t  (match_dup 1)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r,r,r\")\n@@ -2081,7 +2081,7 @@\n \t(compare:CC_V\n \t  (plus:<DWI>\n \t    (sign_extend:<DWI>\n-\t      (match_operand:GPI 1 \"register_operand\" \"r,r\"))\n+\t      (match_operand:GPI 1 \"register_operand\" \"rk,rk\"))\n \t    (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\"))\n \t  (sign_extend:<DWI>\n \t    (plus:GPI (match_dup 1) (match_dup 2)))))\n@@ -2098,7 +2098,7 @@\n   [(set (reg:CC_V CC_REGNUM)\n \t(compare:CC_V\n \t  (plus:<DWI>\n-\t    (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t    (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"rk\"))\n \t    (sign_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n \t  (sign_extend:<DWI> (plus:GPI (match_dup 1) (match_dup 2)))))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2177,7 +2177,7 @@\n \t(compare:CC_NZ\n \t (plus:GPI\n \t  (ANY_EXTEND:GPI (match_operand:ALLX 1 \"register_operand\" \"r\"))\n-\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:GPI 2 \"register_operand\" \"rk\"))\n \t(const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(plus:GPI (ANY_EXTEND:GPI (match_dup 1)) (match_dup 2)))]\n@@ -2189,7 +2189,7 @@\n (define_insn \"*subs_<optab><ALLX:mode>_<GPI:mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"rk\")\n \t\t    (ANY_EXTEND:GPI\n \t\t     (match_operand:ALLX 2 \"register_operand\" \"r\")))\n \t(const_int 0)))\n@@ -2207,7 +2207,7 @@\n \t\t    (ANY_EXTEND:GPI \n \t\t     (match_operand:ALLX 1 \"register_operand\" \"r\"))\n \t\t    (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n-\t\t   (match_operand:GPI 3 \"register_operand\" \"r\"))\n+\t\t   (match_operand:GPI 3 \"register_operand\" \"rk\"))\n \t (const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (ashift:GPI (ANY_EXTEND:GPI (match_dup 1))\n@@ -2221,7 +2221,7 @@\n (define_insn \"*subs_<optab><ALLX:mode>_shift_<GPI:mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"rk\")\n \t\t    (ashift:GPI \n \t\t     (ANY_EXTEND:GPI\n \t\t      (match_operand:ALLX 2 \"register_operand\" \"r\"))\n@@ -2244,7 +2244,7 @@\n \t\t\t      (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n \t\t    (match_operand 3 \"const_int_operand\" \"n\")\n \t\t    (const_int 0))\n-\t\t   (match_operand:GPI 4 \"register_operand\" \"r\"))\n+\t\t   (match_operand:GPI 4 \"register_operand\" \"rk\"))\n \t(const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(plus:GPI (ANY_EXTRACT:GPI (mult:GPI (match_dup 1) (match_dup 2))\n@@ -2259,7 +2259,7 @@\n (define_insn \"*subs_<optab><mode>_multp2\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (minus:GPI (match_operand:GPI 4 \"register_operand\" \"r\")\n+\t (minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")\n \t\t    (ANY_EXTRACT:GPI\n \t\t     (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t       (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n@@ -2923,7 +2923,7 @@\n \n (define_insn \"*sub<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t(compare:CC_NZ (minus:GPI (match_operand:GPI 1 \"register_operand\" \"rk\")\n \t\t\t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -2936,7 +2936,7 @@\n ;; zero_extend version of above\n (define_insn \"*subsi3_compare0_uxtw\"\n   [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t(compare:CC_NZ (minus:SI (match_operand:SI 1 \"register_operand\" \"rk\")\n \t\t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -2949,7 +2949,7 @@\n (define_insn \"sub<mode>3_compare1_imm\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ,rZ\")\n+\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rkZ,rkZ\")\n \t  (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n \t(plus:GPI\n@@ -2965,7 +2965,7 @@\n (define_insn \"sub<mode>3_compare1\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n+\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rkZ\")\n \t  (match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(minus:GPI (match_dup 1) (match_dup 2)))]\n@@ -2975,7 +2975,7 @@\n )\n \n (define_peephole2\n-  [(set (match_operand:GPI 0 \"register_operand\")\n+  [(set (match_operand:GPI 0 \"aarch64_general_reg\")\n \t(minus:GPI (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n \t\t    (match_operand:GPI 2 \"aarch64_reg_or_zero\")))\n    (set (reg:CC CC_REGNUM)\n@@ -3000,7 +3000,7 @@\n \t(compare:CC\n \t  (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n \t  (match_operand:GPI 2 \"aarch64_reg_or_zero\")))\n-   (set (match_operand:GPI 0 \"register_operand\")\n+   (set (match_operand:GPI 0 \"aarch64_general_reg\")\n \t(minus:GPI (match_dup 1)\n \t\t   (match_dup 2)))]\n   \"\"\n@@ -3013,7 +3013,7 @@\n )\n \n (define_peephole2\n-  [(set (match_operand:GPI 0 \"register_operand\")\n+  [(set (match_operand:GPI 0 \"aarch64_general_reg\")\n \t(plus:GPI (match_operand:GPI 1 \"register_operand\")\n \t\t  (match_operand:GPI 2 \"aarch64_plus_immediate\")))\n    (set (reg:CC CC_REGNUM)\n@@ -3038,7 +3038,7 @@\n \t(compare:CC\n \t  (match_operand:GPI 1 \"register_operand\")\n \t  (match_operand:GPI 3 \"const_int_operand\")))\n-   (set (match_operand:GPI 0 \"register_operand\")\n+   (set (match_operand:GPI 0 \"aarch64_general_reg\")\n \t(plus:GPI (match_dup 1)\n \t\t  (match_operand:GPI 2 \"aarch64_plus_immediate\")))]\n   \"INTVAL (operands[3]) == -INTVAL (operands[2])\""}, {"sha": "8e1b784217b0367dc647a87024e14e36de781008", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -30,6 +30,10 @@\n   (ior (match_code \"symbol_ref\")\n        (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"aarch64_general_reg\"\n+  (and (match_operand 0 \"register_operand\")\n+       (match_test \"REGNO_REG_CLASS (REGNO (op)) == GENERAL_REGS\")))\n+\n ;; Return true if OP a (const_int 0) operand.\n (define_predicate \"const0_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "555dc4aebfb78fde3c33dbc2f42fb18b95a547d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -1,3 +1,9 @@\n+2019-02-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\tPR target/89324\n+\t* gcc.dg/rtl/aarch64/subs_adds_sp.c: New test.\n+\t* gfortran.fortran-torture/compile/pr89324.f90: New test.\n+\n 2019-02-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/89425"}, {"sha": "f537771a271e1d33df29561a4b687d621e090bab", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/subs_adds_sp.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fsubs_adds_sp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fsubs_adds_sp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fsubs_adds_sp.c?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -0,0 +1,153 @@\n+/* { dg-do compile { target aarch64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/*\n+   Tests are:\n+      Patterns allow subs/adds with a stack pointer source.\n+      define_peephole2's don't generate patterns for subs/adds with a stack\n+      pointer destination.\n+ */\n+\n+/* These functions used to ICE due to using the stack pointer as a source\n+   register.  */\n+\n+int __RTL (startwith (\"final\"))\n+adds ()\n+{\n+(function \"adds\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 101 (parallel [\n+\t    (set (reg:CC cc)\n+\t\t(compare:CC (reg/f:DI sp)\n+\t\t    (const_int -3)))\n+\t    (set (reg/f:DI x19)\n+\t\t(plus:DI (reg/f:DI sp)\n+\t\t    (const_int 3)))\n+\t]))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 10 (use (reg/i:SI x19)))\n+      (cinsn 11 (use (reg/i:SI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+int __RTL (startwith (\"final\"))\n+subs ()\n+{\n+(function \"subs\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 101 (parallel [\n+\t    (set (reg:CC cc)\n+\t\t(compare:CC (reg/f:DI sp)\n+\t\t    (const_int 3)))\n+\t    (set (reg/f:DI x19)\n+\t\t(plus:DI (reg/f:DI sp)\n+\t\t    (const_int -3)))\n+\t]))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 10 (use (reg/i:SI x19)))\n+      (cinsn 11 (use (reg/i:SI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+/* These functions used to trigger peepholes generating invalid SUBS patterns\n+   that used the stack pointer for the destination register.  */\n+\n+int __RTL (startwith (\"peephole2\")) sub3_compare1_peephole_1 ()\n+{\n+(function \"sub3_compare1_peephole_1\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 89 (set (reg:DI sp)\n+\t\t (minus:DI (reg:DI x2) (reg:DI x5))))\n+      (cinsn 90 (set (reg:CC cc)\n+\t\t (compare:CC (reg:DI x2) (reg:DI x5))))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 12 (use (reg/i:DI cc)))\n+      (cinsn 11 (use (reg/i:DI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+int __RTL (startwith (\"peephole2\")) sub3_compare1_peephole_2 ()\n+{\n+(function \"sub3_compare1_peephole_2\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 90 (set (reg:CC cc)\n+\t\t (compare:CC (reg:DI x2) (reg:DI x5))))\n+      (cinsn 89 (set (reg:DI sp)\n+\t\t (minus:DI (reg:DI x2) (reg:DI x5))))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 12 (use (reg/i:DI cc)))\n+      (cinsn 11 (use (reg/i:DI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+int __RTL (startwith (\"peephole2\")) sub3_compare1_imm_peephole_1 ()\n+{\n+(function \"sub3_compare1_imm_peephole_1\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 90 (set (reg:CC cc)\n+\t\t (compare:CC (reg:DI x2) (reg:DI x5))))\n+      (cinsn 89 (set (reg:DI sp)\n+\t\t (minus:DI (reg:DI x2) (reg:DI x5))))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 12 (use (reg/i:DI cc)))\n+      (cinsn 11 (use (reg/i:DI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+int __RTL (startwith (\"peephole2\")) sub3_compare1_imm_peephole_2 ()\n+{\n+(function \"sub3_compare1_imm_peephole_1\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+      (cinsn 89 (set (reg:DI sp)\n+\t\t (minus:DI (reg:DI x2) (reg:DI x5))))\n+      (cinsn 90 (set (reg:CC cc)\n+\t\t (compare:CC (reg:DI x2) (reg:DI x5))))\n+      ;; Extra insn to avoid the above being deleted by DCE.\n+      (cinsn 12 (use (reg/i:DI cc)))\n+      (cinsn 11 (use (reg/i:DI sp)))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function \"main\"\n+}\n+\n+/* Verify that the adds and subs functions generated their respective\n+   instructions, and that none of the other functions generated either since\n+   they are setting the stack pointer.  */\n+/* { dg-final { scan-assembler-times {adds\\tx[0-9]+, sp} 1 } }  */\n+/* { dg-final { scan-assembler-not {adds\\tsp} } }  */\n+/* { dg-final { scan-assembler-times {subs\\tx[0-9]+, sp} 1 } }  */\n+/* { dg-final { scan-assembler-not {subs\\tsp} } }  */\n+"}, {"sha": "014b655d5edae26689ff57eda808e2a0f6146d5b", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr89324.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr89324.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/341fca1b4982c93a7c6cce90b0e0f84f92a35146/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr89324.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr89324.f90?ref=341fca1b4982c93a7c6cce90b0e0f84f92a35146", "patch": "@@ -0,0 +1,15 @@\n+module a\n+contains\n+  pure function myotherlen()\n+    myotherlen = 99\n+  end  \n+  subroutine b\n+    characterx\n+    block\n+       character(myotherlen()) c\n+       c = \"abc\"\n+       x = c\n+    end block\n+  \n+    end  \n+end"}]}