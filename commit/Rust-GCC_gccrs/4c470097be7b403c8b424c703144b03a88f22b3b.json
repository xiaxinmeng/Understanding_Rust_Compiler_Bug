{"sha": "4c470097be7b403c8b424c703144b03a88f22b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0NzAwOTdiZTdiNDAzYzhiNDI0YzcwMzE0NGIwM2E4OGYyMmIzYg==", "commit": {"author": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2015-01-09T14:22:19Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2015-01-09T14:22:19Z"}, "message": "unwind-arm-common.h: Revert previous commit.\n\ngcc:\n    * ginclude/unwind-arm-common.h: Revert previous commit.\n\nlibstdc++-v3:\n    * libsupc++/unwind-cxx.h: Revert previous commit.\n\nFrom-SVN: r219392", "tree": {"sha": "369ffc00ab216799703aae584754898634fa45fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369ffc00ab216799703aae584754898634fa45fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c470097be7b403c8b424c703144b03a88f22b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c470097be7b403c8b424c703144b03a88f22b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c470097be7b403c8b424c703144b03a88f22b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c470097be7b403c8b424c703144b03a88f22b3b/comments", "author": null, "committer": null, "parents": [{"sha": "82a19768cb55aa06dc6aac858012cf40125a3d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a19768cb55aa06dc6aac858012cf40125a3d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a19768cb55aa06dc6aac858012cf40125a3d9f"}], "stats": {"total": 53, "additions": 16, "deletions": 37}, "files": [{"sha": "a22c073f58aecb42068d3e8a2ac8ed3ddbd30435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c470097be7b403c8b424c703144b03a88f22b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c470097be7b403c8b424c703144b03a88f22b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c470097be7b403c8b424c703144b03a88f22b3b", "patch": "@@ -1,3 +1,7 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t * ginclude/unwind-arm-common.h: Revert previous commit.\n+\n 2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* config.gcc (arm*-*-freebsd*): New configuration."}, {"sha": "833786f01b36e8cc44080ffcae706c7e58ba1861", "filename": "gcc/ginclude/unwind-arm-common.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c470097be7b403c8b424c703144b03a88f22b3b/gcc%2Fginclude%2Funwind-arm-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c470097be7b403c8b424c703144b03a88f22b3b/gcc%2Fginclude%2Funwind-arm-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Funwind-arm-common.h?ref=4c470097be7b403c8b424c703144b03a88f22b3b", "patch": "@@ -82,11 +82,7 @@ extern \"C\" {\n \n   struct _Unwind_Control_Block\n     {\n-#ifdef __FreeBSD__\n-      unsigned exception_class __attribute__((__mode__(__DI__)));\n-#else\n       char exception_class[8];\n-#endif\n       void (*exception_cleanup)(_Unwind_Reason_Code, _Unwind_Control_Block *);\n       /* Unwinder cache, private fields for the unwinder's use */\n       struct\n@@ -185,11 +181,7 @@ extern \"C\" {\n \n   /* Support functions for the PR.  */\n #define _Unwind_Exception _Unwind_Control_Block\n-#ifdef __FreeBSD__\n-  typedef unsigned _Unwind_Exception_Class __attribute__((__mode__(__DI__)));\n-#else\n   typedef char _Unwind_Exception_Class[8];\n-#endif\n \n   void * _Unwind_GetLanguageSpecificData (_Unwind_Context *);\n   _Unwind_Ptr _Unwind_GetRegionStart (_Unwind_Context *);"}, {"sha": "83c1add18a55ee223e11de26bc2ecdcebd098848", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c470097be7b403c8b424c703144b03a88f22b3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c470097be7b403c8b424c703144b03a88f22b3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c470097be7b403c8b424c703144b03a88f22b3b", "patch": "@@ -1,3 +1,7 @@\n+2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\t* libsupc++/unwind-cxx.h: Revert previous commit.\n+\n 2015-01-09  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* configure.host: Add arm*-*-freebsd* port_specific_symbol_files."}, {"sha": "e60159643901975cad2622bd403cb0cf8dd0a59e", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c470097be7b403c8b424c703144b03a88f22b3b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c470097be7b403c8b424c703144b03a88f22b3b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=4c470097be7b403c8b424c703144b03a88f22b3b", "patch": "@@ -235,7 +235,7 @@ __get_dependent_exception_from_ue (_Unwind_Exception *exc)\n   return reinterpret_cast<__cxa_dependent_exception *>(exc + 1) - 1;\n }\n \n-#if defined (__ARM_EABI_UNWINDER__) && !defined (__FreeBSD__)\n+#ifdef __ARM_EABI_UNWINDER__\n static inline bool\n __is_gxx_exception_class(_Unwind_Exception_Class c)\n {\n@@ -309,7 +309,13 @@ __GXX_INIT_FORCED_UNWIND_CLASS(_Unwind_Exception_Class c)\n   c[6] = 'R';\n   c[7] = '\\0';\n }\n-#else // !__ARM_EABI_UNWINDER__ || __FreeBSD__\n+\n+static inline void*\n+__gxx_caught_object(_Unwind_Exception* eo)\n+{\n+  return (void*)eo->barrier_cache.bitpattern[0];\n+}\n+#else // !__ARM_EABI_UNWINDER__\n // This is the primary exception class we report -- \"GNUCC++\\0\".\n const _Unwind_Exception_Class __gxx_primary_exception_class\n = ((((((((_Unwind_Exception_Class) 'G' \n@@ -333,29 +339,13 @@ const _Unwind_Exception_Class __gxx_dependent_exception_class\n     << 8 | (_Unwind_Exception_Class) '+')\n    << 8 | (_Unwind_Exception_Class) '\\x01');\n \n-const _Unwind_Exception_Class __gxx_forced_unwind_class\n-= ((((((((_Unwind_Exception_Class) 'G'\n-        << 8 | (_Unwind_Exception_Class) 'N')\n-       << 8 | (_Unwind_Exception_Class) 'U')\n-      << 8 | (_Unwind_Exception_Class) 'C')\n-     << 8 | (_Unwind_Exception_Class) 'F')\n-    << 8 | (_Unwind_Exception_Class) 'O')\n-   << 8 | (_Unwind_Exception_Class) 'R')\n-  << 8 | (_Unwind_Exception_Class) '\\0');\n-\n static inline bool\n __is_gxx_exception_class(_Unwind_Exception_Class c)\n {\n   return c == __gxx_primary_exception_class\n       || c == __gxx_dependent_exception_class;\n }\n \n-static inline bool\n-__is_gxx_forced_unwind_class(_Unwind_Exception_Class c)\n-{\n-  return c ==  __gxx_forced_unwind_class;\n-}\n-\n // Only checks for primary or dependent, but not that it is a C++ exception at\n // all.\n static inline bool\n@@ -367,17 +357,6 @@ __is_dependent_exception(_Unwind_Exception_Class c)\n #define __GXX_INIT_PRIMARY_EXCEPTION_CLASS(c) c = __gxx_primary_exception_class\n #define __GXX_INIT_DEPENDENT_EXCEPTION_CLASS(c) \\\n   c = __gxx_dependent_exception_class\n-#define __GXX_INIT_FORCED_UNWIND_CLASS(c) c = __gxx_forced_unwind_class\n-#endif // __ARM_EABI_UNWINDER__ && !__FreeBSD__\n-\n-#ifdef __ARM_EABI_UNWINDER__\n-static inline void*\n-__gxx_caught_object(_Unwind_Exception* eo)\n-{\n-    return (void*)eo->barrier_cache.bitpattern[0];\n-}\n-\n-#else // !__ARM_EABI_UNWINDER__\n \n // GNU C++ personality routine, Version 0.\n extern \"C\" _Unwind_Reason_Code __gxx_personality_v0"}]}