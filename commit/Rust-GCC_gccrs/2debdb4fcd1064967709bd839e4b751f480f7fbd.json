{"sha": "2debdb4fcd1064967709bd839e4b751f480f7fbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRlYmRiNGZjZDEwNjQ5Njc3MDliZDgzOWU0Yjc1MWY0ODBmN2ZiZA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-01T22:54:35Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-01T22:54:35Z"}, "message": "In gcc/c-family/: 2010-11-01 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/c-family/:\n2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented format and noreturn attributes for Objective-C methods.\n        * c-common.c (handle_noreturn_attribute): Recognize 'noreturn'\n        attribute for Objective-C methods.\n\nIn gcc/objc/:\n2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented format and noreturn attributes for Objective-C methods.\n        * objc-act.c (objc_start_method_definition): If method attributes\n        are specified emit a warning and ignore them.\n        (build_objc_method_call): Moved deprecation warnings from here ...\n        (objc_finish_message_expr): to here.  Do not emit deprecation\n        warnings if the receiver is of type 'id'.\n        (really_start_method): Install 'deprecation' and 'noreturn'\n        attributes.\n        (objc_decl_method_attributes): Carefully filter out the list of\n        attributes, allowing only \"noreturn\", \"format\", \"sentinel\" and\n        \"deprecated\".  In the case of \"format\", adjust the arguments.\n        Always process the attributes in the same way no matter if\n        \"sentinel\" is in the list or not.\n\nIn gcc/testsuite/:\n2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented format and noreturn attributes for Objective-C methods.\n        * objc.dg/attributes/method-attribute-2.m: Updated warnings.\n        * objc.dg/attributes/method-deprecated-1.m: New.\n        * objc.dg/attributes/method-deprecated-2.m: New.\n        * objc.dg/attributes/method-deprecated-3.m: New.\n        * objc.dg/attributes/method-noreturn-1.m: New.\n        * objc.dg/attributes/method-sentinel-1.m: New.\n        * objc.dg/attributes/method-format-1.m: New.\n        * obj-c++.dg/attributes/method-attribute-2.mm: Updated warnings.\n        * obj-c++.dg/attributes/method-deprecated-1.mm: New.\n        * obj-c++.dg/attributes/method-deprecated-2.mm: New.\n        * obj-c++.dg/attributes/method-deprecated-3.mm: New.\n        * obj-c++.dg/attributes/method-noreturn-1.mm: New.\n        * obj-c++.dg/attributes/method-sentinel-1.mm: New.\n        * obj-c++.dg/attributes/method-format-1.mm: New.\n\nFrom-SVN: r166153", "tree": {"sha": "9e084aedbf6e31a6763dd3a170066bbe479e30e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e084aedbf6e31a6763dd3a170066bbe479e30e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2debdb4fcd1064967709bd839e4b751f480f7fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2debdb4fcd1064967709bd839e4b751f480f7fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2debdb4fcd1064967709bd839e4b751f480f7fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2debdb4fcd1064967709bd839e4b751f480f7fbd/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db4e59bb2b2d8449f1eb836d5075cf0dd9875159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4e59bb2b2d8449f1eb836d5075cf0dd9875159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4e59bb2b2d8449f1eb836d5075cf0dd9875159"}], "stats": {"total": 596, "additions": 577, "deletions": 19}, "files": [{"sha": "b2c90110feff59c5b931e240f3b2664c51cec946", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -1,3 +1,9 @@\n+2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented format and noreturn attributes for Objective-C methods.\n+\t* c-common.c (handle_noreturn_attribute): Recognize 'noreturn'\n+\tattribute for Objective-C methods.\n+\n 2010-10-31  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (conversion_warning, warn_for_collisions_1): Use"}, {"sha": "ab050ab2e68ef0070de830fbfe33f9e876d3cfdc", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -5729,7 +5729,8 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   tree type = TREE_TYPE (*node);\n \n   /* See FIXME comment in c_common_attribute_table.  */\n-  if (TREE_CODE (*node) == FUNCTION_DECL)\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      || objc_method_decl (TREE_CODE (*node)))\n     TREE_THIS_VOLATILE (*node) = 1;\n   else if (TREE_CODE (type) == POINTER_TYPE\n \t   && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)"}, {"sha": "e9e559214a2701c7a6b02cdd84cb0e6acdff0011", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -1,3 +1,19 @@\n+2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented format and noreturn attributes for Objective-C methods.\n+\t* objc-act.c (objc_start_method_definition): If method attributes\n+\tare specified emit a warning and ignore them.\n+\t(build_objc_method_call): Moved deprecation warnings from here ...\n+\t(objc_finish_message_expr): to here.  Do not emit deprecation\n+\twarnings if the receiver is of type 'id'.\n+\t(really_start_method): Install 'deprecation' and 'noreturn'\n+\tattributes.\n+\t(objc_decl_method_attributes): Carefully filter out the list of\n+\tattributes, allowing only \"noreturn\", \"format\", \"sentinel\" and\n+\t\"deprecated\".  In the case of \"format\", adjust the arguments.\n+\tAlways process the attributes in the same way no matter if\n+\t\"sentinel\" is in the list or not.\n+\t\n 2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_maybe_build_component_ref): Warn about using"}, {"sha": "768215e7257a0dc2b42b4850f50e983bc667e569", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 157, "deletions": 16, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -1261,7 +1261,11 @@ objc_start_method_definition (bool is_class_method, tree decl, tree attributes)\n   c_break_label = c_cont_label = size_zero_node;\n #endif\n \n-  objc_decl_method_attributes (&decl, attributes, 0);\n+  if (attributes)\n+    warning_at (input_location, 0, \"method attributes can not be specified in @implementation context\");\n+  else\n+    objc_decl_method_attributes (&decl, attributes, 0);\n+\n   objc_add_method (objc_implementation_context,\n \t\t   decl,\n \t\t   is_class_method,\n@@ -6598,6 +6602,11 @@ build_method_decl (enum tree_code code, tree ret_type, tree selector,\n   /* If no type is specified, default to \"id\".  */\n   ret_type = adjust_type_for_id_default (ret_type);\n \n+  /* Note how a method_decl has a TREE_TYPE which is not the function\n+     type of the function implementing the method, but only the return\n+     type of the method.  We may want to change this, and store the\n+     entire function type in there (eg, it may be used to simplify\n+     dealing with attributes below).  */\n   method_decl = make_node (code);\n   TREE_TYPE (method_decl) = ret_type;\n \n@@ -6628,19 +6637,119 @@ build_method_decl (enum tree_code code, tree ret_type, tree selector,\n static void\n objc_decl_method_attributes (tree *node, tree attributes, int flags)\n {\n-  tree sentinel_attr = lookup_attribute (\"sentinel\", attributes);\n-  if (sentinel_attr)\n+  /* TODO: Replace the hackery below.  An idea would be to store the\n+     full function type in the method declaration (for example in\n+     TREE_TYPE) and then expose ObjC method declarations to c-family\n+     and they could deal with them by simply treating them as\n+     functions.  */\n+\n+  /* Because of the dangers in the hackery below, we filter out any\n+     attribute that we do not know about.  For the ones we know about,\n+     we know that they work with the hackery.  For the other ones,\n+     there is no guarantee, so we have to filter them out.  */\n+  tree filtered_attributes = NULL_TREE;\n+\n+  if (attributes)\n     {\n-      /* hackery to make an obj method look like a function type. */\n-      tree rettype = TREE_TYPE (*node);\n-      TREE_TYPE (*node) = build_function_type (TREE_VALUE (rettype), \n-\t\t       \t    get_arg_type_list (*node, METHOD_REF, 0));\n-      decl_attributes (node, attributes, flags);\n+      tree attribute;\n+      for (attribute = attributes; attribute; attribute = TREE_CHAIN (attribute))\n+\t{\n+\t  tree name = TREE_PURPOSE (attribute);\n+\t  \n+\t  if (is_attribute_p  (\"deprecated\", name)\n+\t      || is_attribute_p (\"sentinel\", name)\n+\t      || is_attribute_p (\"noreturn\", name))\n+\t    {\n+\t      /* An attribute that we support; add it to the filtered\n+\t\t attributes.  */\n+\t      filtered_attributes = chainon (filtered_attributes, \n+\t\t\t\t\t     copy_node (attribute));\n+\t    }\n+\t  else if (is_attribute_p (\"format\", name))\n+\t    {\n+\t      /* \"format\" is special because before adding it to the\n+\t\t filtered attributes we need to adjust the specified\n+\t\t format by adding the hidden function parameters for\n+\t\t an Objective-C method (self, _cmd).  */\n+\t      tree new_attribute = copy_node (attribute);\n+\n+\t      /* Check the arguments specified with the attribute, and\n+\t\t modify them adding 2 for the two hidden arguments.\n+\t\t Note how this differs from C++; according to the\n+\t\t specs, C++ does not do it so you have to add the +1\n+\t\t yourself.  For Objective-C, instead, the compiler\n+\t\t adds the +2 for you.  */\n+\n+\t      /* The attribute arguments have not been checked yet, so\n+\t\t we need to be careful as they could be missing or\n+\t\t invalid.  If anything looks wrong, we skip the\n+\t\t process and the compiler will complain about it later\n+\t\t when it validates the attribute.  */\n+\t      /* Check that we have at least three arguments.  */\n+\t      if (TREE_VALUE (new_attribute)\n+\t\t  && TREE_CHAIN (TREE_VALUE (new_attribute))\n+\t\t  && TREE_CHAIN (TREE_CHAIN (TREE_VALUE (new_attribute))))\n+\t\t{\n+\t\t  tree second_argument = TREE_CHAIN (TREE_VALUE (new_attribute));\n+\t\t  tree third_argument = TREE_CHAIN (second_argument);\n+\t\t  tree number;\n+\n+\t\t  /* This is the second argument, the \"string-index\",\n+\t\t     which specifies the index of the format string\n+\t\t     argument.  Add 2.  */\n+\t\t  number = TREE_VALUE (second_argument);\n+\t\t  if (number\n+\t\t      && TREE_CODE (number) == INTEGER_CST\n+\t\t      && TREE_INT_CST_HIGH (number) == 0)\n+\t\t    {\n+\t\t      TREE_VALUE (second_argument) \n+\t\t\t= build_int_cst (integer_type_node,\n+\t\t\t\t\t TREE_INT_CST_LOW (number) + 2);\n+\t\t    }\n+\t\t  \n+\t\t  /* This is the third argument, the \"first-to-check\",\n+\t\t     which specifies the index of the first argument to\n+\t\t     check.  This could be 0, meaning it is not available,\n+\t\t     in which case we don't need to add 2.  Add 2 if not\n+\t\t     0.  */\n+\t\t  number = TREE_VALUE (third_argument);\n+\t\t  if (number\n+\t\t      && TREE_CODE (number) == INTEGER_CST\n+\t\t      && TREE_INT_CST_HIGH (number) == 0\n+\t\t      && TREE_INT_CST_LOW (number) != 0)\n+\t\t    {\n+\t\t      TREE_VALUE (third_argument) \n+\t\t\t= build_int_cst (integer_type_node,\n+\t\t\t\t\t TREE_INT_CST_LOW (number) + 2);\n+\t\t    }\n+\t\t}\n+\t      filtered_attributes = chainon (filtered_attributes,\n+\t\t\t\t\t     new_attribute);\n+\t    }\n+\t  else\n+\t    warning (OPT_Wattributes, \"%qE attribute directive ignored\", name);\n+\t}\n+    }\n+\n+  if (filtered_attributes)\n+    {\n+      /* This hackery changes the TREE_TYPE of the ObjC method\n+\t declaration to be a function type, so that decl_attributes\n+\t will treat the ObjC method as if it was a function.  Some\n+\t attributes (sentinel, format) will be applied to the function\n+\t type, changing it in place; so after calling decl_attributes,\n+\t we extract the function type attributes and store them in\n+\t METHOD_TYPE_ATTRIBUTES.  Some other attributes (noreturn,\n+\t deprecated) are applied directly to the method declaration\n+\t (by setting TREE_DEPRECATED and TREE_THIS_VOLATILE) so there\n+\t is nothing to do.  */\n+      tree saved_type = TREE_TYPE (*node);\n+      TREE_TYPE (*node) = build_function_type \n+\t(TREE_VALUE (saved_type), get_arg_type_list (*node, METHOD_REF, 0));\n+      decl_attributes (node, filtered_attributes, flags);\n       METHOD_TYPE_ATTRIBUTES (*node) = TYPE_ATTRIBUTES (TREE_TYPE (*node));\n-      TREE_TYPE (*node) = rettype;\n+      TREE_TYPE (*node) = saved_type;\n     }\n-  else\n-    decl_attributes (node, attributes, flags);\n }\n \n bool \n@@ -7149,6 +7258,26 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t  warn_missing_methods = true;\n \t}\n     }\n+  else\n+    {\n+      /* Warn if the method is deprecated, but not if the receiver is\n+\t a generic 'id'.  'id' is used to cast an object to a generic\n+\t object of an unspecified class; in that case, we'll use\n+\t whatever method prototype we can find to get the method\n+\t argument and return types, but it is not appropriate to\n+\t produce deprecation warnings since we don't know the class\n+\t that the object will be of at runtime.  The @interface(s) for\n+\t that class may not even be available to the compiler right\n+\t now, and it is perfectly possible that the method is marked\n+\t as non-deprecated in such @interface(s).\n+\n+\t In practice this makes sense since casting an object to 'id'\n+\t is often used precisely to turn off warnings associated with\n+\t the object being of a particular class.  */\n+      if (TREE_DEPRECATED (method_prototype)  &&  rtype != NULL_TREE)\n+\twarn_deprecated_use (method_prototype, NULL_TREE);\n+    }\n+\n \n   /* Save the selector name for printing error messages.  */\n   current_objc_message_selector = sel_name;\n@@ -7209,14 +7338,12 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n   tree method, t;\n \n   if (method_prototype && METHOD_TYPE_ATTRIBUTES (method_prototype))\n-    ftype = build_type_attribute_variant (\n-\t      ftype, METHOD_TYPE_ATTRIBUTES (method_prototype));\n+    ftype = build_type_attribute_variant (ftype, \n+\t\t\t\t\t  METHOD_TYPE_ATTRIBUTES \n+\t\t\t\t\t  (method_prototype));\n \n   sender_cast = build_pointer_type (ftype);\n \n-  if (method_prototype && TREE_DEPRECATED (method_prototype))\n-    warn_deprecated_use (method_prototype, NULL_TREE);\n-\n   lookup_object = build_c_cast (loc, rcv_p, lookup_object);\n \n   /* Use SAVE_EXPR to avoid evaluating the receiver twice.  */\n@@ -10636,6 +10763,20 @@ really_start_method (tree method,\n \t\t      (type ? '-' : '+'),\n \t\t      identifier_to_locale (gen_method_decl (proto)));\n \t    }\n+\t  else\n+\t    {\n+\t      /* If the method in the @interface was deprecated, mark\n+\t\t the implemented method as deprecated too.  It should\n+\t\t never be used for messaging (when the deprecation\n+\t\t warnings are produced), but just in case.  */\n+\t      if (TREE_DEPRECATED (proto))\n+\t\tTREE_DEPRECATED (method) = 1;\n+\n+\t      /* If the method in the @interface was marked as\n+\t\t 'noreturn', mark the function implementing the method\n+\t\t as 'noreturn' too.  */\n+\t      TREE_THIS_VOLATILE (current_function_decl) = TREE_THIS_VOLATILE (proto);\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "ea07278fd778842377b51d0f1ec61a484ba49cee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -1,3 +1,21 @@\n+2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented format and noreturn attributes for Objective-C methods.\n+\t* objc.dg/attributes/method-attribute-2.m: Updated warnings.\n+\t* objc.dg/attributes/method-deprecated-1.m: New.\n+\t* objc.dg/attributes/method-deprecated-2.m: New.\n+\t* objc.dg/attributes/method-deprecated-3.m: New.\n+\t* objc.dg/attributes/method-noreturn-1.m: New.\n+\t* objc.dg/attributes/method-sentinel-1.m: New.\n+\t* objc.dg/attributes/method-format-1.m: New.\n+\t* obj-c++.dg/attributes/method-attribute-2.mm: Updated warnings.\n+\t* obj-c++.dg/attributes/method-deprecated-1.mm: New.\n+\t* obj-c++.dg/attributes/method-deprecated-2.mm: New.\n+\t* obj-c++.dg/attributes/method-deprecated-3.mm: New.\n+\t* obj-c++.dg/attributes/method-noreturn-1.mm: New.\n+\t* obj-c++.dg/attributes/method-sentinel-1.mm: New.\n+\t* obj-c++.dg/attributes/method-format-1.mm: New.\t\n+\t\n 2010-11-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/property/at-property-deprecated-1.m: New."}, {"sha": "4a56b3aa8f6f57dad69f9418657f0bdf1be726e6", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -14,7 +14,7 @@ - (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecate\n @end\n \n @implementation obj\n-- (int) depmth __attribute__((deprecated)) { return var; }  \n+- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes can not be specified in @implementation context\" } */\n - (int) depmtharg:(int) iarg { return var + iarg ; }\n - (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n - (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }"}, {"sha": "8343856a5c6f1a610997025096744bd863e7d802", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-deprecated-1.mm", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-1.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,33 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) method;\n+- (int) method;\n++ (int) deprecatedClassMethod __attribute__((deprecated));\n+- (int) deprecatedInstanceMethod __attribute__((deprecated));\n+@end\n+\n+/* Test that deprecation warnings are produced, but not if the\n+   receiver is of type 'id'.  */\n+void foo (void)\n+{\n+  Class c;\n+  id object;\n+  MyClass *another_object;\n+\n+  [c method];\n+  [object method];\n+  [c deprecatedClassMethod];\n+  [object deprecatedInstanceMethod];\n+\n+  [object method];\n+  [another_object method];\n+  [MyClass deprecatedClassMethod];           /* { dg-warning \"is deprecated\" } */\n+  [another_object deprecatedInstanceMethod]; /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "1e5d87f3e632a08aab67aa8eabd0b2091e1a2b99", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-deprecated-2.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-2.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,23 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) deprecatedClassMethod: (id)firstObject, ...    __attribute__((sentinel)) __attribute__((deprecated));\n+- (int) deprecatedInstanceMethod: (id)firstobject, ... __attribute__((sentinel)) __attribute__((deprecated));\n+@end\n+\n+/* Test that deprecation warnings are produced even if the method is\n+   also marked with another attribute too (this is to test the\n+   processing of multiple attributes).  */\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass deprecatedClassMethod: object, nil];           /* { dg-warning \"is deprecated\" } */\n+  [object deprecatedInstanceMethod: object, nil];         /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "5c715a20b683450d7aecb92f1795f087767c9f5b", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-deprecated-3.mm", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-deprecated-3.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,21 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that __attribute__ ((__deprecated__)) works as well as __attribute__ ((deprecated)).  */\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) deprecatedClassMethod: (id)firstObject, ...    __attribute__((__deprecated__));\n+- (int) deprecatedInstanceMethod: (id)firstobject, ... __attribute__((__deprecated__));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass deprecatedClassMethod: object, nil];           /* { dg-warning \"is deprecated\" } */\n+  [object deprecatedInstanceMethod: object, nil];         /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "0a078ff0a3a62e5eb3ebfe68a0564724e3a2d44b", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-format-1.mm", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-format-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-format-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-format-1.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,43 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface LogObject\n+{\n+  Class isa;\n+} \n++ (void) log: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2, 3)));\n+- (void) log: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2, 3)));\n+\n++ (void) debug: (const char *) my_format, ...  __attribute__ ((format (printf, 1, 2)));\n+- (void) debug: (const char *) my_format, ...  __attribute__ ((format (printf, 1, 2)));\n+\n+/* Just make sure a missing or invalid attribute won't crash the compiler.  */\n+- (void) log2: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2)));    /* { dg-error \"wrong\" } */\n++ (void) debug2: (const char *) my_format, ...  __attribute__ ((format (printf))); /* { dg-error \"wrong\" } */\n+- (void) debug2: (const char *) my_format, ...  __attribute__ ((format (printf))); /* { dg-error \"wrong\" } */\n++ (void) alert: (const char *) my_format __attribute__ ((format (printf, 1, 2))); /* { dg-error \"args to be formatted is not ...\" } */\n+- (void) alert: (const char *) my_format __attribute__ ((format (printf, 1, 2))); /* { dg-error \"args to be formatted is not ...\" } */\n+@end\n+\n+void test (LogObject *object)\n+{\n+  [object log: 2  message: \"attribute only applies to variadic functions\"];\n+  [object log: 2  message: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [object log: 2  message: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [object debug: \"attribute only applies to variadic functions\"];\n+  [object debug: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [object debug: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [LogObject log: 2  message: \"attribute only applies to variadic functions\"];\n+  [LogObject log: 2  message: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [LogObject log: 2  message: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [LogObject debug: \"attribute only applies to variadic functions\"];\n+  [LogObject debug: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [LogObject debug: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+}"}, {"sha": "af051a61d34b0d0b6d9a0009661ad02440e5e9ad", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-noreturn-1.mm", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-noreturn-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-noreturn-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-noreturn-1.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,34 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (id) method1 __attribute__ ((noreturn));\n+- (id) method2 __attribute__ ((noreturn));\n++ (id) method3 __attribute__ ((noreturn));\n+- (id) method4 __attribute__ ((noreturn));\n+@end\n+\n+@implementation MyClass\n++ (id) method1\n+{\n+  return self;  /* { dg-warning \"function declared .noreturn. has a .return. statement\" } */\n+}               /* { dg-warning \".noreturn. function does return\" } */\n+- (id) method2\n+{\n+  return self;  /* { dg-warning \"function declared .noreturn. has a .return. statement\" } */\n+}               /* { dg-warning \".noreturn. function does return\" } */\n++ (id) method3\n+{\n+  abort ();\n+}\n+- (id) method4\n+{\n+  abort ();\n+}\n+@end"}, {"sha": "ecaa36c21f8e94a70c539788729e3352d2ecf159", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-sentinel-1.mm", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-sentinel-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-sentinel-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-sentinel-1.mm?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,34 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface NSArray\n+{\n+  Class isa;\n+} \n++ (id) arrayWithObject: (id)object __attribute__ ((sentinel));            /* { dg-warning \"attribute only applies to variadic functions\" } */\n++ (id) arrayWithObjects: (id)firstObject, ... __attribute__ ((sentinel));\n+\n+- (id) initWithObject: (id)object __attribute__ ((sentinel));            /* { dg-warning \"attribute only applies to variadic functions\" } */\n+- (id) initWithObjects: (id)firstObject, ... __attribute__ ((sentinel));\n+@end\n+\n+void test (id object)\n+{\n+  NSArray *array;\n+\n+  array = [NSArray arrayWithObject: object];\n+  array = [NSArray arrayWithObjects: object, nil];\n+  array = [NSArray arrayWithObjects: object, object, nil];\n+  array = [NSArray arrayWithObjects: object];               /* { dg-warning \"not enough variable arguments\" } */\n+  array = [NSArray arrayWithObjects: object, object];       /* { dg-warning \"missing sentinel\" } */\n+\n+  [array initWithObject: object];\n+  [array initWithObjects: object, nil];\n+  [array initWithObjects: object, object, nil];\n+  [array initWithObjects: object];               /* { dg-warning \"not enough variable arguments\" } */\n+  [array initWithObjects: object, object];       /* { dg-warning \"missing sentinel\" } */\n+}"}, {"sha": "4a56b3aa8f6f57dad69f9418657f0bdf1be726e6", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -14,7 +14,7 @@ - (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecate\n @end\n \n @implementation obj\n-- (int) depmth __attribute__((deprecated)) { return var; }  \n+- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes can not be specified in @implementation context\" } */\n - (int) depmtharg:(int) iarg { return var + iarg ; }\n - (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n - (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }"}, {"sha": "8343856a5c6f1a610997025096744bd863e7d802", "filename": "gcc/testsuite/objc.dg/attributes/method-deprecated-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-1.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,33 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) method;\n+- (int) method;\n++ (int) deprecatedClassMethod __attribute__((deprecated));\n+- (int) deprecatedInstanceMethod __attribute__((deprecated));\n+@end\n+\n+/* Test that deprecation warnings are produced, but not if the\n+   receiver is of type 'id'.  */\n+void foo (void)\n+{\n+  Class c;\n+  id object;\n+  MyClass *another_object;\n+\n+  [c method];\n+  [object method];\n+  [c deprecatedClassMethod];\n+  [object deprecatedInstanceMethod];\n+\n+  [object method];\n+  [another_object method];\n+  [MyClass deprecatedClassMethod];           /* { dg-warning \"is deprecated\" } */\n+  [another_object deprecatedInstanceMethod]; /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "1e5d87f3e632a08aab67aa8eabd0b2091e1a2b99", "filename": "gcc/testsuite/objc.dg/attributes/method-deprecated-2.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-2.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,23 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) deprecatedClassMethod: (id)firstObject, ...    __attribute__((sentinel)) __attribute__((deprecated));\n+- (int) deprecatedInstanceMethod: (id)firstobject, ... __attribute__((sentinel)) __attribute__((deprecated));\n+@end\n+\n+/* Test that deprecation warnings are produced even if the method is\n+   also marked with another attribute too (this is to test the\n+   processing of multiple attributes).  */\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass deprecatedClassMethod: object, nil];           /* { dg-warning \"is deprecated\" } */\n+  [object deprecatedInstanceMethod: object, nil];         /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "5c715a20b683450d7aecb92f1795f087767c9f5b", "filename": "gcc/testsuite/objc.dg/attributes/method-deprecated-3.m", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-deprecated-3.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,21 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that __attribute__ ((__deprecated__)) works as well as __attribute__ ((deprecated)).  */\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) deprecatedClassMethod: (id)firstObject, ...    __attribute__((__deprecated__));\n+- (int) deprecatedInstanceMethod: (id)firstobject, ... __attribute__((__deprecated__));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass deprecatedClassMethod: object, nil];           /* { dg-warning \"is deprecated\" } */\n+  [object deprecatedInstanceMethod: object, nil];         /* { dg-warning \"is deprecated\" } */ \n+}"}, {"sha": "0a078ff0a3a62e5eb3ebfe68a0564724e3a2d44b", "filename": "gcc/testsuite/objc.dg/attributes/method-format-1.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-format-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-format-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-format-1.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,43 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface LogObject\n+{\n+  Class isa;\n+} \n++ (void) log: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2, 3)));\n+- (void) log: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2, 3)));\n+\n++ (void) debug: (const char *) my_format, ...  __attribute__ ((format (printf, 1, 2)));\n+- (void) debug: (const char *) my_format, ...  __attribute__ ((format (printf, 1, 2)));\n+\n+/* Just make sure a missing or invalid attribute won't crash the compiler.  */\n+- (void) log2: (int)level  message: (const char *) my_format, ...  __attribute__ ((format (printf, 2)));    /* { dg-error \"wrong\" } */\n++ (void) debug2: (const char *) my_format, ...  __attribute__ ((format (printf))); /* { dg-error \"wrong\" } */\n+- (void) debug2: (const char *) my_format, ...  __attribute__ ((format (printf))); /* { dg-error \"wrong\" } */\n++ (void) alert: (const char *) my_format __attribute__ ((format (printf, 1, 2))); /* { dg-error \"args to be formatted is not ...\" } */\n+- (void) alert: (const char *) my_format __attribute__ ((format (printf, 1, 2))); /* { dg-error \"args to be formatted is not ...\" } */\n+@end\n+\n+void test (LogObject *object)\n+{\n+  [object log: 2  message: \"attribute only applies to variadic functions\"];\n+  [object log: 2  message: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [object log: 2  message: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [object debug: \"attribute only applies to variadic functions\"];\n+  [object debug: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [object debug: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [LogObject log: 2  message: \"attribute only applies to variadic functions\"];\n+  [LogObject log: 2  message: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [LogObject log: 2  message: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+\n+  [LogObject debug: \"attribute only applies to variadic functions\"];\n+  [LogObject debug: \"attribute %s only applies to variadic functions\", \"'format'\"];\n+  [LogObject debug: \"attribute %s only applies to variadic functions\"]; /* { dg-warning \"too few arguments for format\" } */\n+}"}, {"sha": "af051a61d34b0d0b6d9a0009661ad02440e5e9ad", "filename": "gcc/testsuite/objc.dg/attributes/method-noreturn-1.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-noreturn-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-noreturn-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-noreturn-1.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,34 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (id) method1 __attribute__ ((noreturn));\n+- (id) method2 __attribute__ ((noreturn));\n++ (id) method3 __attribute__ ((noreturn));\n+- (id) method4 __attribute__ ((noreturn));\n+@end\n+\n+@implementation MyClass\n++ (id) method1\n+{\n+  return self;  /* { dg-warning \"function declared .noreturn. has a .return. statement\" } */\n+}               /* { dg-warning \".noreturn. function does return\" } */\n+- (id) method2\n+{\n+  return self;  /* { dg-warning \"function declared .noreturn. has a .return. statement\" } */\n+}               /* { dg-warning \".noreturn. function does return\" } */\n++ (id) method3\n+{\n+  abort ();\n+}\n+- (id) method4\n+{\n+  abort ();\n+}\n+@end"}, {"sha": "ecaa36c21f8e94a70c539788729e3352d2ecf159", "filename": "gcc/testsuite/objc.dg/attributes/method-sentinel-1.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-sentinel-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2debdb4fcd1064967709bd839e4b751f480f7fbd/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-sentinel-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-sentinel-1.m?ref=2debdb4fcd1064967709bd839e4b751f480f7fbd", "patch": "@@ -0,0 +1,34 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#include <objc/objc.h>\n+#include <stdlib.h>\n+\n+@interface NSArray\n+{\n+  Class isa;\n+} \n++ (id) arrayWithObject: (id)object __attribute__ ((sentinel));            /* { dg-warning \"attribute only applies to variadic functions\" } */\n++ (id) arrayWithObjects: (id)firstObject, ... __attribute__ ((sentinel));\n+\n+- (id) initWithObject: (id)object __attribute__ ((sentinel));            /* { dg-warning \"attribute only applies to variadic functions\" } */\n+- (id) initWithObjects: (id)firstObject, ... __attribute__ ((sentinel));\n+@end\n+\n+void test (id object)\n+{\n+  NSArray *array;\n+\n+  array = [NSArray arrayWithObject: object];\n+  array = [NSArray arrayWithObjects: object, nil];\n+  array = [NSArray arrayWithObjects: object, object, nil];\n+  array = [NSArray arrayWithObjects: object];               /* { dg-warning \"not enough variable arguments\" } */\n+  array = [NSArray arrayWithObjects: object, object];       /* { dg-warning \"missing sentinel\" } */\n+\n+  [array initWithObject: object];\n+  [array initWithObjects: object, nil];\n+  [array initWithObjects: object, object, nil];\n+  [array initWithObjects: object];               /* { dg-warning \"not enough variable arguments\" } */\n+  [array initWithObjects: object, object];       /* { dg-warning \"missing sentinel\" } */\n+}"}]}