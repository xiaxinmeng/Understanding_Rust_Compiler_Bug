{"sha": "6ae81785e54e593a369b9e0b92594f6ff474bc83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlODE3ODVlNTRlNTkzYTM2OWI5ZTBiOTI1OTRmNmZmNDc0YmM4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-08T02:03:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-08T02:03:25Z"}, "message": "re PR c++/48451 ([C++0x][SFINAE] Failures with n-ary initialization expressions (with template default argument))\n\n\tPR c++/48451\n\t* pt.c (fn_type_unification): Don't clear incomplete pack flag.\n\t(type_unification_real): Clear it here instead.\n\nFrom-SVN: r172159", "tree": {"sha": "00df76aaabd2c67288dc77219d6f51835dd8d11e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00df76aaabd2c67288dc77219d6f51835dd8d11e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae81785e54e593a369b9e0b92594f6ff474bc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae81785e54e593a369b9e0b92594f6ff474bc83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae81785e54e593a369b9e0b92594f6ff474bc83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae81785e54e593a369b9e0b92594f6ff474bc83/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca1c6ce3adf35f9007219ae8612004d686953619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1c6ce3adf35f9007219ae8612004d686953619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1c6ce3adf35f9007219ae8612004d686953619"}], "stats": {"total": 139, "additions": 83, "deletions": 56}, "files": [{"sha": "fcb5232af729f0ec60e97606d76661e7cdaf68e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ae81785e54e593a369b9e0b92594f6ff474bc83", "patch": "@@ -1,5 +1,9 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48451\n+\t* pt.c (fn_type_unification): Don't clear incomplete pack flag.\n+\t(type_unification_real): Clear it here instead.\n+\n \tPR c++/48468\n \t* except.c (build_noexcept_spec): Propagate error_mark_node.\n \t(finish_noexcept_expr): Likewise."}, {"sha": "4edd4045ca9f0f1df3e062c7b93f7880f1da2118", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6ae81785e54e593a369b9e0b92594f6ff474bc83", "patch": "@@ -13719,7 +13719,8 @@ fn_type_unification (tree fn,\n               template_parm_level_and_index (parm, &level, &idx);\n \n               /* Mark the argument pack as \"incomplete\". We could\n-                 still deduce more arguments during unification.  */\n+                 still deduce more arguments during unification.\n+\t         We remove this mark in type_unification_real.  */\n               targ = TMPL_ARG (converted_args, level, idx);\n               if (targ)\n                 {\n@@ -13776,22 +13777,6 @@ fn_type_unification (tree fn,\n \t\t\t\t  targs, parms, args, nargs, /*subr=*/0,\n \t\t\t\t  strict, flags);\n \n-  if (result == 0 && incomplete_argument_packs_p)\n-    {\n-      int i, len = NUM_TMPL_ARGS (targs);\n-\n-      /* Clear the \"incomplete\" flags on all argument packs.  */\n-      for (i = 0; i < len; i++)\n-        {\n-          tree arg = TREE_VEC_ELT (targs, i);\n-          if (ARGUMENT_PACK_P (arg))\n-            {\n-              ARGUMENT_PACK_INCOMPLETE_P (arg) = 0;\n-              ARGUMENT_PACK_EXPLICIT_ARGS (arg) = NULL_TREE;\n-            }\n-        }\n-    }\n-\n   /* Now that we have bindings for all of the template arguments,\n      ensure that the arguments deduced for the template template\n      parameters have compatible template parameter lists.  We cannot\n@@ -14136,15 +14121,17 @@ type_unification_real (tree tparms,\n     return 1;\n \n   if (!subr)\n-    for (i = 0; i < ntparms; i++)\n-      if (!TREE_VEC_ELT (targs, i))\n+    {\n+      /* Check to see if we need another pass before we start clearing\n+\t ARGUMENT_PACK_INCOMPLETE_P.  */\n+      for (i = 0; i < ntparms; i++)\n \t{\n-\t  tree tparm;\n-\n-          if (TREE_VEC_ELT (tparms, i) == error_mark_node)\n-            continue;\n+\t  tree targ = TREE_VEC_ELT (targs, i);\n+\t  tree tparm = TREE_VEC_ELT (tparms, i);\n \n-          tparm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n+\t  if (targ || tparm == error_mark_node)\n+\t    continue;\n+\t  tparm = TREE_VALUE (tparm);\n \n \t  /* If this is an undeduced nontype parameter that depends on\n \t     a type parameter, try another pass; its type may have been\n@@ -14154,59 +14141,78 @@ type_unification_real (tree tparms,\n \t      && uses_template_parms (TREE_TYPE (tparm))\n \t      && !saw_undeduced++)\n \t    goto again;\n+\t}\n \n-          /* Core issue #226 (C++0x) [temp.deduct]:\n+      for (i = 0; i < ntparms; i++)\n+\t{\n+\t  tree targ = TREE_VEC_ELT (targs, i);\n+\t  tree tparm = TREE_VEC_ELT (tparms, i);\n \n-               If a template argument has not been deduced, its\n-               default template argument, if any, is used. \n+\t  /* Clear the \"incomplete\" flags on all argument packs now so that\n+\t     substituting them into later default arguments works.  */\n+\t  if (targ && ARGUMENT_PACK_P (targ))\n+            {\n+              ARGUMENT_PACK_INCOMPLETE_P (targ) = 0;\n+              ARGUMENT_PACK_EXPLICIT_ARGS (targ) = NULL_TREE;\n+            }\n \n-             When we are in C++98 mode, TREE_PURPOSE will either\n+\t  if (targ || tparm == error_mark_node)\n+\t    continue;\n+\t  tparm = TREE_VALUE (tparm);\n+\n+\t  /* Core issue #226 (C++0x) [temp.deduct]:\n+\n+\t     If a template argument has not been deduced, its\n+\t     default template argument, if any, is used. \n+\n+\t     When we are in C++98 mode, TREE_PURPOSE will either\n \t     be NULL_TREE or ERROR_MARK_NODE, so we do not need\n \t     to explicitly check cxx_dialect here.  */\n-          if (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)))\n-            {\n+\t  if (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)))\n+\t    {\n \t      tree parm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n \t      tree arg = TREE_PURPOSE (TREE_VEC_ELT (tparms, i));\n-              arg = tsubst_template_arg (arg, targs, tf_none, NULL_TREE);\n+\t      arg = tsubst_template_arg (arg, targs, tf_none, NULL_TREE);\n \t      arg = convert_template_argument (parm, arg, targs, tf_none,\n \t\t\t\t\t       i, NULL_TREE);\n-              if (arg == error_mark_node)\n-                return 1;\n-              else\n-                {\n-                  TREE_VEC_ELT (targs, i) = arg;\n+\t      if (arg == error_mark_node)\n+\t\treturn 1;\n+\t      else\n+\t\t{\n+\t\t  TREE_VEC_ELT (targs, i) = arg;\n \t\t  /* The position of the first default template argument,\n \t\t     is also the number of non-defaulted arguments in TARGS.\n \t\t     Record that.  */\n \t\t  if (!NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs))\n \t\t    SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs, i);\n-                  continue;\n-                }\n-            }\n+\t\t  continue;\n+\t\t}\n+\t    }\n \n-          /* If the type parameter is a parameter pack, then it will\n-             be deduced to an empty parameter pack.  */\n-          if (template_parameter_pack_p (tparm))\n-            {\n-              tree arg;\n+\t  /* If the type parameter is a parameter pack, then it will\n+\t     be deduced to an empty parameter pack.  */\n+\t  if (template_parameter_pack_p (tparm))\n+\t    {\n+\t      tree arg;\n \n-              if (TREE_CODE (tparm) == TEMPLATE_PARM_INDEX)\n-                {\n-                  arg = make_node (NONTYPE_ARGUMENT_PACK);\n-                  TREE_TYPE (arg)  = TREE_TYPE (TEMPLATE_PARM_DECL (tparm));\n-                  TREE_CONSTANT (arg) = 1;\n-                }\n-              else\n-                arg = cxx_make_type (TYPE_ARGUMENT_PACK);\n+\t      if (TREE_CODE (tparm) == TEMPLATE_PARM_INDEX)\n+\t\t{\n+\t\t  arg = make_node (NONTYPE_ARGUMENT_PACK);\n+\t\t  TREE_TYPE (arg)  = TREE_TYPE (TEMPLATE_PARM_DECL (tparm));\n+\t\t  TREE_CONSTANT (arg) = 1;\n+\t\t}\n+\t      else\n+\t\targ = cxx_make_type (TYPE_ARGUMENT_PACK);\n \n-              SET_ARGUMENT_PACK_ARGS (arg, make_tree_vec (0));\n+\t      SET_ARGUMENT_PACK_ARGS (arg, make_tree_vec (0));\n \n-              TREE_VEC_ELT (targs, i) = arg;\n-              continue;\n-            }\n+\t      TREE_VEC_ELT (targs, i) = arg;\n+\t      continue;\n+\t    }\n \n \t  return 2;\n \t}\n+    }\n #ifdef ENABLE_CHECKING\n   if (!NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs))\n     SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs, TREE_VEC_LENGTH (targs));"}, {"sha": "8f52da21e08e1b92a322d8f6ae027aacad8867da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ae81785e54e593a369b9e0b92594f6ff474bc83", "patch": "@@ -1,5 +1,7 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/variadic107.C: New.\n+\n \t* g++.dg/cpp0x/sfinae11.C: New.\n \t* g++.dg/cpp0x/noexcept02.C: Fix.\n "}, {"sha": "5c3f468515d3b773a0151b1ea251a1e829c6cc6b", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic107.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae81785e54e593a369b9e0b92594f6ff474bc83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic107.C?ref=6ae81785e54e593a369b9e0b92594f6ff474bc83", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/48451\n+// { dg-options -std=c++0x }\n+\n+namespace std {\n+  template <class T> T&& declval();\n+}\n+\n+template<class T, class... Args,\n+ class = decltype(T(std::declval<Args>()...))\n+ >\n+char f(int);\n+\n+struct From2Ints { From2Ints(int, int); };\n+\n+static_assert(sizeof(f<From2Ints, int, int>(0)) == 1, \"Error\"); // b"}]}