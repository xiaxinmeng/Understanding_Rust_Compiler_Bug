{"sha": "d32969898e113e86e1c42b0c6f096f8228cbf1ff", "node_id": "C_kwDOANBUbNoAKGQzMjk2OTg5OGUxMTNlODZlMWM0MmIwYzZmMDk2ZjgyMjhjYmYxZmY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-19T12:27:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-19T14:00:48Z"}, "message": "[PR tree-optimization/107312] Make range_true_and_false work with 1-bit signed types.\n\nrange_true_and_false() returns a range of [0,1], which for a 1-bit\nsigned integer gets passed to the irange setter as [0, -1].  These\nendpoints are out of order and cause an ICE.  Through some dumb luck,\nthe legacy code swaps out of order endpoints, because old VRP would\nsometimes pass endpoints reversed, depending on the setter to fix\nthem.  This swapping does not happen for non-legacy, hence the ICE.\n\nThe right thing to do (apart from killing legacy and 1-bit signed\nintegers ;-)), is to avoid passing out of order endpoints for 1-bit\nsigned integers.  For that matter, a range of [-1, 0] (signed) or\n[0, 1] (unsigned) is just varying.\n\n\tPR tree-optimization/107312\n\ngcc/ChangeLog:\n\n\t* range.h (range_true_and_false): Special case 1-bit signed types.\n\t* value-range.cc (range_tests_misc): New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107312.c: New test.", "tree": {"sha": "d400ccaa0e9fa8128b9d6a55ff147020c16ae26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d400ccaa0e9fa8128b9d6a55ff147020c16ae26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32969898e113e86e1c42b0c6f096f8228cbf1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32969898e113e86e1c42b0c6f096f8228cbf1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32969898e113e86e1c42b0c6f096f8228cbf1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32969898e113e86e1c42b0c6f096f8228cbf1ff/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f036d759ecee538555fa8c6b11963e4033732463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f036d759ecee538555fa8c6b11963e4033732463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f036d759ecee538555fa8c6b11963e4033732463"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "ba3a6b2516fb97f472a5073938e4c119dfdf4b1b", "filename": "gcc/range.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Frange.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Frange.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange.h?ref=d32969898e113e86e1c42b0c6f096f8228cbf1ff", "patch": "@@ -50,6 +50,8 @@ static inline int_range<1>\n range_true_and_false (tree type)\n {\n   unsigned prec = TYPE_PRECISION (type);\n+  if (prec == 1)\n+    return int_range<2> (type);\n   return int_range<2> (type, wi::zero (prec), wi::one (prec));\n }\n "}, {"sha": "b4180e3bd7d5565abb16663bd7537471286587cd", "filename": "gcc/testsuite/gcc.target/i386/pr107312.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107312.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107312.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107312.c?ref=d32969898e113e86e1c42b0c6f096f8228cbf1ff", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-mavx512vbmi -O1 -ftree-loop-vectorize\" }\n+\n+void\n+foo (_Float16 *r, short int *a)\n+{\n+  int i;\n+\n+  for (i = 0; i < 32; ++i)\n+    r[i] = !!a[i];\n+}"}, {"sha": "511cd0ad7679394ad60e861162a3ba7a158e9f55", "filename": "gcc/value-range.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32969898e113e86e1c42b0c6f096f8228cbf1ff/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=d32969898e113e86e1c42b0c6f096f8228cbf1ff", "patch": "@@ -3437,6 +3437,8 @@ range_tests_misc ()\n     max.union_ (min);\n     ASSERT_TRUE (max.varying_p ());\n   }\n+  // Test that we can set a range of true+false for a 1-bit signed int.\n+  r0 = range_true_and_false (one_bit_type);\n \n   // Test inversion of 1-bit signed integers.\n   {"}]}