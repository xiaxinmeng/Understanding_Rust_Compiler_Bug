{"sha": "fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyYWQ5M2Q4ZjMyNTYxMjI1NGFjOWM0ZTQzNGU0NDJiYzZhYmE0YQ==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-12-14T01:52:40Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-12-14T01:52:40Z"}, "message": "below100.S: Remove DOS line endings.\n\n2004-12-13  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* gcc.target/xstormy16/below100.S: Remove DOS line endings.\n\nFrom-SVN: r92118", "tree": {"sha": "c75d96ed1b877994d90637ee387722ae267b1266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75d96ed1b877994d90637ee387722ae267b1266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2ad93d8f325612254ac9c4e434e442bc6aba4a/comments", "author": null, "committer": null, "parents": [{"sha": "b3f332c6b47788bc4b3ecffd2236f6b1333755bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f332c6b47788bc4b3ecffd2236f6b1333755bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f332c6b47788bc4b3ecffd2236f6b1333755bd"}], "stats": {"total": 380, "additions": 192, "deletions": 188}, "files": [{"sha": "2341decdbef7ea37a4a79896e21361f982dcbc20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ad93d8f325612254ac9c4e434e442bc6aba4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ad93d8f325612254ac9c4e434e442bc6aba4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "patch": "@@ -1,3 +1,7 @@\n+2004-12-13  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* gcc.target/xstormy16/below100.S: Remove DOS line endings.\n+\n 2004-12-13  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/18928"}, {"sha": "f85c6d603106fc9445c7a25bebdb0b52f5cb2400", "filename": "gcc/testsuite/gcc.target/xstormy16/below100.S", "status": "modified", "additions": 188, "deletions": 188, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ad93d8f325612254ac9c4e434e442bc6aba4a/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ad93d8f325612254ac9c4e434e442bc6aba4a/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxstormy16%2Fbelow100.S?ref=fd2ad93d8f325612254ac9c4e434e442bc6aba4a", "patch": "@@ -1,188 +1,188 @@\n-/******************************************************************\r\n-***                                                             ***\r\n-***     crt0 for __BELOW100__ attribute test with SID           ***\r\n-***                                                             ***\r\n-******************************************************************/\r\n-\r\n-                                /*************************************/\r\n-                                /** Interrupt vectors at 0x8000     **/\r\n-                                /*************************************/\r\n-        .section .int_vec,\"ax\"\r\n-        .global _start\r\n-        .align 1\r\n-_start:\r\n-        jmpf _int_reset\r\n-        //jmpf _int_basetimer\r\n-        //jmpf _int_timer0\r\n-        //jmpf _int_timer1\r\n-        //jmpf _int_irq_4\r\n-        //jmpf _int_irq_5\r\n-        //jmpf _int_port0\r\n-        //jmpf _int_port1\r\n-        //jmpf _int_irq_8\r\n-        //jmpf _int_irq_9\r\n-        //jmpf _int_irq_a\r\n-        //jmpf _int_irq_b\r\n-        //jmpf _int_irq_c\r\n-        //jmpf _int_irq_d\r\n-        //jmpf _int_irq_e\r\n-        //jmpf _int_irq_f\r\n-                                /*************************************/\r\n-                                /** reset code                      **/\r\n-                                /*************************************/\r\n-        .text\r\n-_int_reset:\r\n-                                /*************************************/\r\n-                                /** setup stack pointer             **/\r\n-                                /*************************************/\r\n-        mov sp,#__stack\r\n-                                /*************************************/\r\n-                                /** zero .bss section               **/\r\n-                                /*************************************/\r\n-        mov r0,#__bss_start\r\n-        mov r1,#__bss_end\r\n-        mov r2,#0\r\n-1:      mov.w (r0++),r2\r\n-        blt r0,r1,1b\r\n-                                /*************************************/\r\n-                                /** copy inital value for .data     **/\r\n-                                /*************************************/\r\n-        mov r1,#__data_start\r\n-        mov r3,#__data_end\r\n-        mov r0,#@lo(__rdata)\r\n-        mov r8,#@hi(__rdata)\r\n-2:      movf.w r2,(r0++)\r\n-        bnz r0,#0,3f\r\n-        add r8,#1\r\n-3:      mov.w (r1++),r2\r\n-        blt r1,r3,2b\r\n-                                /*************************************/\r\n-                                /** call hardware init routine      **/\r\n-                                /*************************************/\r\n-        callf _hwinit\r\n-                                /*************************************/\r\n-                                /** call initializaton routines     **/\r\n-                                /*************************************/\r\n-        callf _init\r\n-                                /*************************************/\r\n-                                /** setup fini routines to be       **/\r\n-                                /**  called from exit               **/\r\n-                                /*************************************/\r\n-        mov r2,#@fptr(_fini)\r\n-        callf atexit\r\n-                                /*************************************/\r\n-                                /** call main() with empty          **/\r\n-                                /**  argc/argv/envp                 **/\r\n-                                /*************************************/\r\n-        mov r2,#0\r\n-        mov r3,#0\r\n-        mov r4,#0\r\n-        callf main\r\n-                                /*************************************/\r\n-                                /** return from main()              **/\r\n-                                /*************************************/\r\n-        callf exit\r\n-                                /*************************************/\r\n-                                /** should never reach this code    **/\r\n-                                /*************************************/\r\n-        jmpf _start\r\n-                                /*************************************/\r\n-                                /** default h/w initialize routine  **/\r\n-                                /** and default _init/_finit for    **/\r\n-                                /**  -nostartfiles option           **/\r\n-                                /*************************************/\r\n-        .globl _hwinit\r\n-        .weak _hwinit\r\n-_hwinit:\r\n-        .globl _init\r\n-        .weak _init\r\n-_init:\r\n-        .globl _fini\r\n-        .weak _fini\r\n-_fini:\r\n-        ret\r\n-\r\n-/******************************************************************\r\n-*******************************************************************\r\n-***                                                             ***\r\n-***       Chip information data for LC59_32K                    ***\r\n-***                 Written by T.Matsukawa                      ***\r\n-***                                                             ***\r\n-*******************************************************************\r\n-******************************************************************/\r\n-\r\n-                                /*************************************/\r\n-                                /** Define convenient macros        **/\r\n-                                /*************************************/\r\n-#define BCD(x)  (((x)/10)%10)*0x10+((x)%10)\r\n-#define BCD4(x) BCD((x)/100),BCD(x)\r\n-#define BCD6(x) BCD((x)/10000),BCD((x)/100),BCD(x)\r\n-                                /*************************************/\r\n-                                /** Define memory sizes             **/\r\n-                                /*************************************/\r\n-#define RAM_SIZE 0x7E00\r\n-#define ROM_SIZE 0x78000\r\n-#define VRAM_SIZE 0x0000\r\n-#define VRAM_ROW 0\r\n-#define VRAM_COLUMN 0\r\n-#define CGROM_SIZE 0x0000\r\n-#define PROTECT_SIZE 0x0000\r\n-\r\n-                                /*************************************/\r\n-                                /** section \".chip_info\"            **/\r\n-                                /*************************************/\r\n-        .section .chip_info,\"a\"\r\n-        .space  0xb8,0x00\r\n-                                /*************************************/\r\n-                                /** B8-BB : User option address     **/\r\n-                                /*************************************/\r\n-        .word   0x00000\r\n-        .global __reset_vector\r\n-#if 0x00000==0\r\n-        .equ    __reset_vector,0x08000\r\n-#else\r\n-        .equ    __reset_vector,0x00000\r\n-#endif\r\n-                                /*************************************/\r\n-                                /** BC-BF : Flash Protect address   **/\r\n-                                /*************************************/\r\n-#if PROTECT_SIZE==0\r\n-        .word   0x00000000\r\n-#else\r\n-        .word   0x08000+ROM_SIZE-PROTECT_SIZE\r\n-#endif\r\n-                                /*************************************/\r\n-                                /** C0-CF : Fixed string            **/\r\n-                                /*************************************/\r\n-        .ascii  \"CHIPINFORMATION\"\r\n-1:      .space  (0xd0-1b),0x00\r\n-                                /*************************************/\r\n-                                /** D0-DF : Chipname                **/\r\n-                                /*************************************/\r\n-        .ascii  \"LC59_32K\"\r\n-2:      .space  (0xe0-2b),0x00\r\n-                                /*************************************/\r\n-                                /** E0-E1 : Format version(BCD4)    **/\r\n-                                /*************************************/\r\n-        .byte   0x10, 0x00\r\n-        .space  6, 0x00\r\n-                                /*************************************/\r\n-                                /** E8-F5 : Memory sizes            **/\r\n-                                /*************************************/\r\n-        .byte   BCD4(ROM_SIZE/1024)\r\n-        .byte   BCD6(RAM_SIZE)\r\n-        .byte   BCD6(VRAM_SIZE)\r\n-        .byte   BCD4(VRAM_ROW)\r\n-        .byte   BCD4(VRAM_COLUMN)\r\n-        .byte   BCD4(CGROM_SIZE/1024)\r\n-        .space  3, 0x00\r\n-                                /*************************************/\r\n-                                /** F9 : Package type               **/\r\n-                                /*************************************/\r\n-        .byte   0xff\r\n-        .space  6, 0x00\r\n-\r\n-                                /*************************************/\r\n-                                /** In order to link BIOS in library**/\r\n-                                /*************************************/\r\n-        .equ    dummy,__bios_entry\r\n+/******************************************************************\n+***                                                             ***\n+***     crt0 for __BELOW100__ attribute test with SID           ***\n+***                                                             ***\n+******************************************************************/\n+\n+                                /*************************************/\n+                                /** Interrupt vectors at 0x8000     **/\n+                                /*************************************/\n+        .section .int_vec,\"ax\"\n+        .global _start\n+        .align 1\n+_start:\n+        jmpf _int_reset\n+        //jmpf _int_basetimer\n+        //jmpf _int_timer0\n+        //jmpf _int_timer1\n+        //jmpf _int_irq_4\n+        //jmpf _int_irq_5\n+        //jmpf _int_port0\n+        //jmpf _int_port1\n+        //jmpf _int_irq_8\n+        //jmpf _int_irq_9\n+        //jmpf _int_irq_a\n+        //jmpf _int_irq_b\n+        //jmpf _int_irq_c\n+        //jmpf _int_irq_d\n+        //jmpf _int_irq_e\n+        //jmpf _int_irq_f\n+                                /*************************************/\n+                                /** reset code                      **/\n+                                /*************************************/\n+        .text\n+_int_reset:\n+                                /*************************************/\n+                                /** setup stack pointer             **/\n+                                /*************************************/\n+        mov sp,#__stack\n+                                /*************************************/\n+                                /** zero .bss section               **/\n+                                /*************************************/\n+        mov r0,#__bss_start\n+        mov r1,#__bss_end\n+        mov r2,#0\n+1:      mov.w (r0++),r2\n+        blt r0,r1,1b\n+                                /*************************************/\n+                                /** copy inital value for .data     **/\n+                                /*************************************/\n+        mov r1,#__data_start\n+        mov r3,#__data_end\n+        mov r0,#@lo(__rdata)\n+        mov r8,#@hi(__rdata)\n+2:      movf.w r2,(r0++)\n+        bnz r0,#0,3f\n+        add r8,#1\n+3:      mov.w (r1++),r2\n+        blt r1,r3,2b\n+                                /*************************************/\n+                                /** call hardware init routine      **/\n+                                /*************************************/\n+        callf _hwinit\n+                                /*************************************/\n+                                /** call initializaton routines     **/\n+                                /*************************************/\n+        callf _init\n+                                /*************************************/\n+                                /** setup fini routines to be       **/\n+                                /**  called from exit               **/\n+                                /*************************************/\n+        mov r2,#@fptr(_fini)\n+        callf atexit\n+                                /*************************************/\n+                                /** call main() with empty          **/\n+                                /**  argc/argv/envp                 **/\n+                                /*************************************/\n+        mov r2,#0\n+        mov r3,#0\n+        mov r4,#0\n+        callf main\n+                                /*************************************/\n+                                /** return from main()              **/\n+                                /*************************************/\n+        callf exit\n+                                /*************************************/\n+                                /** should never reach this code    **/\n+                                /*************************************/\n+        jmpf _start\n+                                /*************************************/\n+                                /** default h/w initialize routine  **/\n+                                /** and default _init/_finit for    **/\n+                                /**  -nostartfiles option           **/\n+                                /*************************************/\n+        .globl _hwinit\n+        .weak _hwinit\n+_hwinit:\n+        .globl _init\n+        .weak _init\n+_init:\n+        .globl _fini\n+        .weak _fini\n+_fini:\n+        ret\n+\n+/******************************************************************\n+*******************************************************************\n+***                                                             ***\n+***       Chip information data for LC59_32K                    ***\n+***                 Written by T.Matsukawa                      ***\n+***                                                             ***\n+*******************************************************************\n+******************************************************************/\n+\n+                                /*************************************/\n+                                /** Define convenient macros        **/\n+                                /*************************************/\n+#define BCD(x)  (((x)/10)%10)*0x10+((x)%10)\n+#define BCD4(x) BCD((x)/100),BCD(x)\n+#define BCD6(x) BCD((x)/10000),BCD((x)/100),BCD(x)\n+                                /*************************************/\n+                                /** Define memory sizes             **/\n+                                /*************************************/\n+#define RAM_SIZE 0x7E00\n+#define ROM_SIZE 0x78000\n+#define VRAM_SIZE 0x0000\n+#define VRAM_ROW 0\n+#define VRAM_COLUMN 0\n+#define CGROM_SIZE 0x0000\n+#define PROTECT_SIZE 0x0000\n+\n+                                /*************************************/\n+                                /** section \".chip_info\"            **/\n+                                /*************************************/\n+        .section .chip_info,\"a\"\n+        .space  0xb8,0x00\n+                                /*************************************/\n+                                /** B8-BB : User option address     **/\n+                                /*************************************/\n+        .word   0x00000\n+        .global __reset_vector\n+#if 0x00000==0\n+        .equ    __reset_vector,0x08000\n+#else\n+        .equ    __reset_vector,0x00000\n+#endif\n+                                /*************************************/\n+                                /** BC-BF : Flash Protect address   **/\n+                                /*************************************/\n+#if PROTECT_SIZE==0\n+        .word   0x00000000\n+#else\n+        .word   0x08000+ROM_SIZE-PROTECT_SIZE\n+#endif\n+                                /*************************************/\n+                                /** C0-CF : Fixed string            **/\n+                                /*************************************/\n+        .ascii  \"CHIPINFORMATION\"\n+1:      .space  (0xd0-1b),0x00\n+                                /*************************************/\n+                                /** D0-DF : Chipname                **/\n+                                /*************************************/\n+        .ascii  \"LC59_32K\"\n+2:      .space  (0xe0-2b),0x00\n+                                /*************************************/\n+                                /** E0-E1 : Format version(BCD4)    **/\n+                                /*************************************/\n+        .byte   0x10, 0x00\n+        .space  6, 0x00\n+                                /*************************************/\n+                                /** E8-F5 : Memory sizes            **/\n+                                /*************************************/\n+        .byte   BCD4(ROM_SIZE/1024)\n+        .byte   BCD6(RAM_SIZE)\n+        .byte   BCD6(VRAM_SIZE)\n+        .byte   BCD4(VRAM_ROW)\n+        .byte   BCD4(VRAM_COLUMN)\n+        .byte   BCD4(CGROM_SIZE/1024)\n+        .space  3, 0x00\n+                                /*************************************/\n+                                /** F9 : Package type               **/\n+                                /*************************************/\n+        .byte   0xff\n+        .space  6, 0x00\n+\n+                                /*************************************/\n+                                /** In order to link BIOS in library**/\n+                                /*************************************/\n+        .equ    dummy,__bios_entry"}]}