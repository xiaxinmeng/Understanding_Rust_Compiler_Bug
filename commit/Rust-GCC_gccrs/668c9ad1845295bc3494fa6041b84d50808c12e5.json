{"sha": "668c9ad1845295bc3494fa6041b84d50808c12e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4YzlhZDE4NDUyOTViYzM0OTRmYTYwNDFiODRkNTA4MDhjMTJlNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-06-10T19:23:26Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-06-10T19:23:26Z"}, "message": "lambda-code.c (replace_uses_of_x_with_y): Renamed and rewritten slightly.\n\n2005-06-10  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* lambda-code.c (replace_uses_of_x_with_y): Renamed and rewritten\n        slightly.\n\t(exit_phi_for_loop_p): New function.\n\t(can_put_in_inner_loop): Ditto.\n\t(can_convert_to_perfect_nest): Ditto.\n\t(perfect_nestify): Create iv with right type.\n\tRewrite statements in correct order.\n\nFrom-SVN: r100827", "tree": {"sha": "d2cc271cafea0f4eb7437fe8ad0f2d2543cd867b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2cc271cafea0f4eb7437fe8ad0f2d2543cd867b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668c9ad1845295bc3494fa6041b84d50808c12e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668c9ad1845295bc3494fa6041b84d50808c12e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668c9ad1845295bc3494fa6041b84d50808c12e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668c9ad1845295bc3494fa6041b84d50808c12e5/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51540eba26906f4d395187d65d0627494a9aaccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51540eba26906f4d395187d65d0627494a9aaccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51540eba26906f4d395187d65d0627494a9aaccd"}], "stats": {"total": 210, "additions": 175, "deletions": 35}, "files": [{"sha": "5ec8206ef413b49a99b89ccb27ba19850feaf963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668c9ad1845295bc3494fa6041b84d50808c12e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668c9ad1845295bc3494fa6041b84d50808c12e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=668c9ad1845295bc3494fa6041b84d50808c12e5", "patch": "@@ -1,3 +1,13 @@\n+2005-06-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* lambda-code.c (replace_uses_of_x_with_y): Renamed and rewritten\n+        slightly.\n+\t(exit_phi_for_loop_p): New function.\n+\t(can_put_in_inner_loop): Ditto.\n+\t(can_convert_to_perfect_nest): Ditto.\n+\t(perfect_nestify): Create iv with right type.\n+\tRewrite statements in correct order.\t\n+\n 2005-06-10  Keith Besaw  <kbesaw@us.ibm.com>\n \n \t* tree-ssa-alias.c (new_type_alias): Use existing type"}, {"sha": "cedc8cd129f10ef8bcb128967f797ab2d0072415", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 165, "deletions": 35, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668c9ad1845295bc3494fa6041b84d50808c12e5/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668c9ad1845295bc3494fa6041b84d50808c12e5/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=668c9ad1845295bc3494fa6041b84d50808c12e5", "patch": "@@ -2164,17 +2164,28 @@ perfect_nest_p (struct loop *loop)\n   return true;\n }\n \n-/* Replace the USES of tree X in STMT with tree Y */\n+/* Replace the USES of X in STMT, or uses with the same step as X  with Y.  */\n \n static void\n-replace_uses_of_x_with_y (tree stmt, tree x, tree y)\n+replace_uses_equiv_to_x_with_y (struct loop *loop, tree stmt, tree x, \n+\t\t\t\tint xstep, tree y)\n {\n   ssa_op_iter iter;\n   use_operand_p use_p;\n \n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n     {\n-      if (USE_FROM_PTR (use_p) == x)\n+      tree use = USE_FROM_PTR (use_p);\n+      tree step = NULL_TREE;\n+      tree access_fn = NULL_TREE;\n+      \n+      \n+      access_fn = instantiate_parameters\n+\t(loop, analyze_scalar_evolution (loop, use));\n+      if (access_fn != NULL_TREE)\n+\tstep = evolution_part_in_loop_num (access_fn, loop->num);\n+      if ((step && int_cst_value (step) == xstep)\n+\t  || USE_FROM_PTR (use_p) == x)\n \tSET_USE (use_p, y);\n     }\n }\n@@ -2195,6 +2206,56 @@ stmt_uses_op (tree stmt, tree op)\n   return false;\n }\n \n+/* Return true if STMT is an exit PHI for LOOP */\n+\n+static bool\n+exit_phi_for_loop_p (struct loop *loop, tree stmt)\n+{\n+  \n+  if (TREE_CODE (stmt) != PHI_NODE\n+      || PHI_NUM_ARGS (stmt) != 1\n+      || bb_for_stmt (stmt) != loop->single_exit->dest)\n+    return false;\n+  \n+  return true;\n+}\n+\n+/* Return true if STMT can be put back into INNER, a loop by moving it to the \n+   beginning of that loop.  */\n+\n+static bool\n+can_put_in_inner_loop (struct loop *inner, tree stmt)\n+{\n+  imm_use_iterator imm_iter;\n+  use_operand_p use_p;\n+  basic_block use_bb = NULL;\n+  \n+  gcc_assert (TREE_CODE (stmt) == MODIFY_EXPR);\n+  if (!ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS)\n+      || !expr_invariant_in_loop_p (inner, TREE_OPERAND (stmt, 1)))\n+    return false;\n+  \n+  /* We require that the basic block of all uses be the same, or the use be an\n+     exit phi.  */\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, TREE_OPERAND (stmt, 0))\n+    {\n+      if (!exit_phi_for_loop_p (inner, USE_STMT (use_p)))\n+\t{\n+\t  basic_block immbb = bb_for_stmt (USE_STMT (use_p));\n+\n+\t  if (!flow_bb_inside_loop_p (inner, immbb))\n+\t    return false;\n+\t  if (use_bb == NULL)\n+\t    use_bb = immbb;\n+\t  else if (immbb != use_bb)\n+\t    return false;\n+\t}\n+    }\n+  return true;\n+  \n+}\n+\n+\n /* Return TRUE if LOOP is an imperfect nest that we can convert to a perfect\n    one.  LOOPIVS is a vector of induction variables, one per loop.  \n    ATM, we only handle imperfect nests of depth 2, where all of the statements\n@@ -2214,8 +2275,6 @@ can_convert_to_perfect_nest (struct loop *loop,\n   if (!loop->inner || loop->inner->inner)\n     return false;\n   \n-  /* We only handle moving the after-inner-body statements right now, so make\n-     sure all the statements we need to move are located in that position.  */\n   bbs = get_loop_body (loop);\n   exit_condition = get_loop_exit_condition (loop);\n   for (i = 0; i < loop->num_nodes; i++)\n@@ -2237,8 +2296,24 @@ can_convert_to_perfect_nest (struct loop *loop,\n \t\tif (stmt_uses_op (stmt, iv))\n \t\t  goto fail;\n \t      \n-\t      /* If the bb of a statement we care about isn't dominated by \n-\t\t the header of the inner loop, then we are also screwed.  */\n+\t      /* If this is a simple operation like a cast that is invariant\n+\t\t in the inner loop, only used there, and we can place it\n+\t\t there, then it's not going to hurt us.\n+\t\t This means that we will propagate casts and other cheap\n+\t\t invariant operations *back*\n+\t\t into the inner loop if we can interchange the loop, on the\n+\t\t theory that we are going to gain a lot more by interchanging\n+\t\t the loop than we are by leaving some invariant code there for\n+\t\t some other pass to clean up.  */\n+\t      if (TREE_CODE (stmt) == MODIFY_EXPR\n+\t\t  && is_gimple_cast (TREE_OPERAND (stmt, 1))\n+\t\t  && can_put_in_inner_loop (loop->inner, stmt))\n+\t\tcontinue;\n+\n+\t      /* Otherwise, if the bb of a statement we care about isn't\n+\t\t dominated by the header of the inner loop, then we can't\n+\t\t handle this case right now.  This test ensures that the\n+\t\t statement comes completely *after* the inner loop.  */\n \t      if (!dominated_by_p (CDI_DOMINATORS,\n \t\t\t\t   bb_for_stmt (stmt), \n \t\t\t\t   loop->inner->header))\n@@ -2300,6 +2375,7 @@ can_convert_to_perfect_nest (struct loop *loop,\n    }\n \n    Return FALSE if we can't make this loop into a perfect nest.  */\n+\n static bool\n perfect_nestify (struct loops *loops,\n \t\t struct loop *loop,\n@@ -2312,7 +2388,7 @@ perfect_nestify (struct loops *loops,\n   tree exit_condition;\n   tree then_label, else_label, cond_stmt;\n   basic_block preheaderbb, headerbb, bodybb, latchbb, olddest;\n-  size_t i;\n+  int i;\n   block_stmt_iterator bsi;\n   bool insert_after;\n   edge e;\n@@ -2393,11 +2469,12 @@ perfect_nestify (struct loops *loops,\n   set_immediate_dominator (CDI_DOMINATORS, latchbb, bodybb);\n   set_immediate_dominator (CDI_DOMINATORS, olddest, bodybb);\n   /* Create the new iv.  */\n-  ivvar = create_tmp_var (integer_type_node, \"perfectiv\");\n+  oldivvar = VEC_index (tree, loopivs, 0);\n+  ivvar = create_tmp_var (TREE_TYPE (oldivvar), \"perfectiv\");\n   add_referenced_tmp_var (ivvar);\n   standard_iv_increment_position (newloop, &bsi, &insert_after);\n   create_iv (VEC_index (tree, lbounds, 0),\n-\t     build_int_cst (integer_type_node, VEC_index (int, steps, 0)),\n+\t     build_int_cst (TREE_TYPE (oldivvar), VEC_index (int, steps, 0)),\n \t     ivvar, newloop, &bsi, insert_after, &ivvar, &ivvarinced);\t     \n \n   /* Create the new upper bound.  This may be not just a variable, so we copy\n@@ -2421,40 +2498,93 @@ perfect_nestify (struct loops *loops,\n \t\t\t\t\t   uboundvar,\n \t\t\t\t\t   ivvarinced);\n   update_stmt (exit_condition);\n-  bbs = get_loop_body (loop); \n-  /* Now replace the induction variable in the moved statements with the\n-     correct loop induction variable.  */\n+  bbs = get_loop_body_in_dom_order (loop); \n+  /* Now move the statements, and replace the induction variable in the moved\n+     statements with the correct loop induction variable.  */\n   oldivvar = VEC_index (tree, loopivs, 0);\n-  for (i = 0; i < loop->num_nodes; i++)\n+  for (i = loop->num_nodes - 1; i >= 0 ; i--)\n     {\n       block_stmt_iterator tobsi = bsi_last (bodybb);\n       if (bbs[i]->loop_father == loop)\n \t{\n-\t  /* Note that the bsi only needs to be explicitly incremented\n-\t     when we don't move something, since it is automatically\n-\t     incremented when we do.  */\n-\t  for (bsi = bsi_start (bbs[i]); !bsi_end_p (bsi);)\n-\t    { \n-\t      ssa_op_iter i;\n-\t      tree n, stmt = bsi_stmt (bsi);\n+\t  /* If this is true, we are *before* the inner loop.\n+\t     If this isn't true, we are *after* it.\n \n-\t      if (stmt == exit_condition\n-\t\t  || not_interesting_stmt (stmt)\n-\t\t  || stmt_is_bumper_for_loop (loop, stmt))\n-\t\t{\n-\t\t  bsi_next (&bsi);\n-\t\t  continue;\n-\t\t}\n+\t     The only time can_convert_to_perfect_nest returns true when we\n+\t     have statements before the inner loop is if they can be moved\n+\t     into the inner loop. \n \n-\t      replace_uses_of_x_with_y (stmt, oldivvar, ivvar);\n-\t      bsi_move_before (&bsi, &tobsi);\n+\t     The only time can_convert_to_perfect_nest returns true when we\n+\t     have statements after the inner loop is if they can be moved into\n+\t     the new split loop.  */\n \n-\t      /* If the statement has any virtual operands, they may\n-\t\t need to be rewired because the original loop may\n-\t\t still reference them.  */\n-\t      FOR_EACH_SSA_TREE_OPERAND (n, stmt, i, SSA_OP_ALL_VIRTUALS)\n-\t\tmark_sym_for_renaming (SSA_NAME_VAR (n));\n+\t  if (dominated_by_p (CDI_DOMINATORS, loop->inner->header, bbs[i]))\n+\t    {\n+\t      for (bsi = bsi_last (bbs[i]); !bsi_end_p (bsi);)\n+\t\t{ \n+\t\t  use_operand_p use_p;\n+\t\t  imm_use_iterator imm_iter;\n+\t\t  tree stmt = bsi_stmt (bsi);\n+\n+\t\t  if (stmt == exit_condition\n+\t\t      || not_interesting_stmt (stmt)\n+\t\t      || stmt_is_bumper_for_loop (loop, stmt))\n+\t\t    {\n+\t\t      if (!bsi_end_p (bsi))\n+\t\t\tbsi_prev (&bsi);\n+\t\t      continue;\n+\t\t    }\n+\t\t  /* Move this statement back into the inner loop.\n+\t\t     This looks a bit confusing, but we are really just\n+\t\t     finding the first non-exit phi use and moving the\n+\t\t     statement to the beginning of that use's basic\n+\t\t     block.  */\n+\t\t  FOR_EACH_IMM_USE_SAFE (use_p, imm_iter, \n+\t\t\t\t\t TREE_OPERAND (stmt, 0))\n+\t\t    {\n+\t\t      tree imm_stmt = USE_STMT (use_p);\n+\t\t      if (!exit_phi_for_loop_p (loop->inner, imm_stmt))\n+\t\t\t{\n+\t\t\t  block_stmt_iterator tobsi = bsi_after_labels (bb_for_stmt (imm_stmt));\n+\t\t\t  bsi_move_after (&bsi, &tobsi);\n+\t\t\t  update_stmt (stmt);\n+\t\t\t  BREAK_FROM_SAFE_IMM_USE (imm_iter);\n+\t\t\t} \n+\t\t    }\n+\t\t}\n+\t    }\n+\t  else\n+\t    { \n+\t      /* Note that the bsi only needs to be explicitly incremented\n+\t\t when we don't move something, since it is automatically\n+\t\t incremented when we do.  */\n+\t      for (bsi = bsi_start (bbs[i]); !bsi_end_p (bsi);)\n+\t\t{ \n+\t\t  ssa_op_iter i;\n+\t\t  tree n, stmt = bsi_stmt (bsi);\n+\t\t  \n+\t\t  if (stmt == exit_condition\n+\t\t      || not_interesting_stmt (stmt)\n+\t\t      || stmt_is_bumper_for_loop (loop, stmt))\n+\t\t    {\n+\t\t      bsi_next (&bsi);\n+\t\t      continue;\n+\t\t    }\n+\t\t  \n+\t\t  replace_uses_equiv_to_x_with_y (loop, stmt, \n+\t\t\t\t\t\t  oldivvar,  \n+\t\t\t\t\t\t  VEC_index (int, steps, 0),\n+\t\t\t\t\t\t  ivvar);\n+\t\t  bsi_move_before (&bsi, &tobsi);\n+\t\t  \n+\t\t  /* If the statement has any virtual operands, they may\n+\t\t     need to be rewired because the original loop may\n+\t\t     still reference them.  */\n+\t\t  FOR_EACH_SSA_TREE_OPERAND (n, stmt, i, SSA_OP_ALL_VIRTUALS)\n+\t\t    mark_sym_for_renaming (SSA_NAME_VAR (n));\n+\t\t}\n \t    }\n+\t  \n \t}\n     }\n "}]}