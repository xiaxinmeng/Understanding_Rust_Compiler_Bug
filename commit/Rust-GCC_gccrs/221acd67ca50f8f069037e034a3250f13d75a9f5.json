{"sha": "221acd67ca50f8f069037e034a3250f13d75a9f5", "node_id": "C_kwDOANBUbNoAKDIyMWFjZDY3Y2E1MGY4ZjA2OTAzN2UwMzRhMzI1MGYxM2Q3NWE5ZjU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-27T02:43:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-28T03:43:54Z"}, "message": "c++: lambda in concept [PR105652]\n\nWe currently check satisfaction in the context of the constrained\ndeclaration (which may be wrong, see PR104111).  When checking C<int>\nfor S<int>, we currently substitute into the lambda in the context of\nS<T> (rather than S<int>, which seems wrong if the above isn't wrong), so\nthe new closure type thinks its context is S<T>, which confuses debug\noutput.  For the moment, let's work around all of this by overriding the\ncontext of the closure.\n\n\tPR c++/105652\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_lambda_expr): Don't let a namespace-scope lambda\n\tinstantiate into a class-scope lambda.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-lambda20.C: New test.", "tree": {"sha": "3ea19b804a58d1514f5dd303d2cb234fd750ec3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea19b804a58d1514f5dd303d2cb234fd750ec3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/221acd67ca50f8f069037e034a3250f13d75a9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221acd67ca50f8f069037e034a3250f13d75a9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221acd67ca50f8f069037e034a3250f13d75a9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221acd67ca50f8f069037e034a3250f13d75a9f5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9176e643f385c3ef3b8c28cbc0468776fd8a14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9176e643f385c3ef3b8c28cbc0468776fd8a14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9176e643f385c3ef3b8c28cbc0468776fd8a14f"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "f1f080531a67543a8437123a1f45e72122757983", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221acd67ca50f8f069037e034a3250f13d75a9f5/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221acd67ca50f8f069037e034a3250f13d75a9f5/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=221acd67ca50f8f069037e034a3250f13d75a9f5", "patch": "@@ -19740,11 +19740,18 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     return error_mark_node;\n \n   if (LAMBDA_EXPR_EXTRA_SCOPE (t) == NULL_TREE)\n-    /* A lambda in a default argument outside a class gets no\n-       LAMBDA_EXPR_EXTRA_SCOPE, as specified by the ABI.  But\n-       tsubst_default_argument calls start_lambda_scope, so we need to\n-       specifically ignore it here, and use the global scope.  */\n-    record_null_lambda_scope (r);\n+    {\n+      /* A lambda in a default argument outside a class gets no\n+\t LAMBDA_EXPR_EXTRA_SCOPE, as specified by the ABI.  But\n+\t tsubst_default_argument calls start_lambda_scope, so we need to\n+\t specifically ignore it here, and use the global scope.  */\n+      record_null_lambda_scope (r);\n+\n+      /* If we're pushed into another scope (PR105652), fix it.  */\n+      if (TYPE_NAMESPACE_SCOPE_P (TREE_TYPE (t)))\n+\tTYPE_CONTEXT (type) = DECL_CONTEXT (TYPE_NAME (type))\n+\t  = TYPE_CONTEXT (TREE_TYPE (t));\n+    }\n   else\n     record_lambda_scope (r);\n "}, {"sha": "40e5973176eaa33be70ef136c1f7947211627ea0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda20.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221acd67ca50f8f069037e034a3250f13d75a9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221acd67ca50f8f069037e034a3250f13d75a9f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda20.C?ref=221acd67ca50f8f069037e034a3250f13d75a9f5", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/105652\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options -g }\n+\n+template<int>\n+struct I {};\n+\n+template<class T>\n+concept C = []<int N>(I<N>) { return true; } (I<0>{});\n+\n+template<class T>\n+struct S { };\n+\n+template<C T>\n+struct S<T> { constexpr static bool value = true; };\n+\n+static_assert(S<int>::value);"}]}