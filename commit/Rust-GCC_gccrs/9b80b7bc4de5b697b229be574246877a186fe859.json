{"sha": "9b80b7bc4de5b697b229be574246877a186fe859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4MGI3YmM0ZGU1YjY5N2IyMjliZTU3NDI0Njg3N2ExODZmZTg1OQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2015-02-27T10:13:07Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-02-27T10:13:07Z"}, "message": "S/390: Define TARGET_BUILTIN_DECL\n\ngcc/ChangeLog:\n\t* config/s390/s390.c: (enum s390_builtin, s390_expand_builtin):\n\tRename S390_BUILTIN_max to S390_BUILTIN_MAX.\n\t(s390_builtin_decls): New array.\n\t(s390_init_builtins): Put builtin decls into s390_builtin_decls.\n\t(s390_builtin_decl): New function.\n\t(TARGET_BUILTIN_DECL): Define macro.\n\nFrom-SVN: r221046", "tree": {"sha": "9a17381b8c96eacfda1ea52d3d8ba45db23bb088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a17381b8c96eacfda1ea52d3d8ba45db23bb088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b80b7bc4de5b697b229be574246877a186fe859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80b7bc4de5b697b229be574246877a186fe859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b80b7bc4de5b697b229be574246877a186fe859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80b7bc4de5b697b229be574246877a186fe859/comments", "author": null, "committer": null, "parents": [{"sha": "4ceae7e9576c605219f2da69e2450476330548a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceae7e9576c605219f2da69e2450476330548a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ceae7e9576c605219f2da69e2450476330548a7"}], "stats": {"total": 103, "additions": 71, "deletions": 32}, "files": [{"sha": "6f2ce1988c75cca781a89d6cb8a3a185b4c36d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80b7bc4de5b697b229be574246877a186fe859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80b7bc4de5b697b229be574246877a186fe859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b80b7bc4de5b697b229be574246877a186fe859", "patch": "@@ -1,3 +1,12 @@\n+2015-02-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c: (enum s390_builtin, s390_expand_builtin):\n+\tRename S390_BUILTIN_max to S390_BUILTIN_MAX.\n+\t(s390_builtin_decls): New array.\n+\t(s390_init_builtins): Put builtin decls into s390_builtin_decls.\n+\t(s390_builtin_decl): New function.\n+\t(TARGET_BUILTIN_DECL): Define macro.\n+\n 2015-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63175"}, {"sha": "a4fb4c7522fec9a2582ed966307061c45e7e1b07", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 62, "deletions": 32, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b80b7bc4de5b697b229be574246877a186fe859/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b80b7bc4de5b697b229be574246877a186fe859/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9b80b7bc4de5b697b229be574246877a186fe859", "patch": "@@ -9982,10 +9982,12 @@ enum s390_builtin\n   S390_BUILTIN_TX_NESTING_DEPTH,\n   S390_BUILTIN_TX_ASSIST,\n \n-  S390_BUILTIN_max\n+  S390_BUILTIN_MAX\n };\n \n-static enum insn_code const code_for_builtin[S390_BUILTIN_max] = {\n+tree s390_builtin_decls[S390_BUILTIN_MAX];\n+\n+static enum insn_code const code_for_builtin[S390_BUILTIN_MAX] = {\n   CODE_FOR_tbegin,\n   CODE_FOR_tbegin_nofloat,\n   CODE_FOR_tbegin_retry,\n@@ -10008,57 +10010,71 @@ s390_init_builtins (void)\n \n   /* void foo (void) */\n   ftype = build_function_type_list (void_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_tbeginc\", ftype, S390_BUILTIN_TBEGINC,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_TBEGINC] =\n+    add_builtin_function (\"__builtin_tbeginc\", ftype, S390_BUILTIN_TBEGINC,\n+\t\t\t  BUILT_IN_MD, NULL, NULL_TREE);\n \n   /* void foo (int) */\n   ftype = build_function_type_list (void_type_node, integer_type_node,\n \t\t\t\t    NULL_TREE);\n-  add_builtin_function (\"__builtin_tabort\", ftype,\n-\t\t\tS390_BUILTIN_TABORT, BUILT_IN_MD, NULL, noreturn_attr);\n-  add_builtin_function (\"__builtin_tx_assist\", ftype,\n-\t\t\tS390_BUILTIN_TX_ASSIST, BUILT_IN_MD, NULL, NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_TABORT] =\n+    add_builtin_function (\"__builtin_tabort\", ftype,\n+\t\t\t  S390_BUILTIN_TABORT, BUILT_IN_MD, NULL,\n+\t\t\t  noreturn_attr);\n+  s390_builtin_decls[S390_BUILTIN_TX_ASSIST] =\n+    add_builtin_function (\"__builtin_tx_assist\", ftype,\n+\t\t\t  S390_BUILTIN_TX_ASSIST, BUILT_IN_MD, NULL, NULL_TREE);\n+\n \n   /* int foo (void *) */\n-  ftype = build_function_type_list (integer_type_node, ptr_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_tbegin\", ftype, S390_BUILTIN_TBEGIN,\n-\t\t\tBUILT_IN_MD, NULL, returns_twice_attr);\n-  add_builtin_function (\"__builtin_tbegin_nofloat\", ftype,\n-\t\t\tS390_BUILTIN_TBEGIN_NOFLOAT,\n-\t\t\tBUILT_IN_MD, NULL, returns_twice_attr);\n+  ftype = build_function_type_list (integer_type_node, ptr_type_node,\n+\t\t\t\t    NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_TBEGIN] =\n+    add_builtin_function (\"__builtin_tbegin\", ftype, S390_BUILTIN_TBEGIN,\n+\t\t\t  BUILT_IN_MD, NULL, returns_twice_attr);\n+  s390_builtin_decls[S390_BUILTIN_TBEGIN_NOFLOAT] =\n+    add_builtin_function (\"__builtin_tbegin_nofloat\", ftype,\n+\t\t\t  S390_BUILTIN_TBEGIN_NOFLOAT,\n+\t\t\t  BUILT_IN_MD, NULL, returns_twice_attr);\n \n   /* int foo (void *, int) */\n   ftype = build_function_type_list (integer_type_node, ptr_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_tbegin_retry\", ftype,\n-\t\t\tS390_BUILTIN_TBEGIN_RETRY,\n-\t\t\tBUILT_IN_MD,\n-\t\t\tNULL, returns_twice_attr);\n-  add_builtin_function (\"__builtin_tbegin_retry_nofloat\", ftype,\n-\t\t\tS390_BUILTIN_TBEGIN_RETRY_NOFLOAT,\n-\t\t\tBUILT_IN_MD,\n-\t\t\tNULL, returns_twice_attr);\n+  s390_builtin_decls[S390_BUILTIN_TBEGIN_RETRY] =\n+    add_builtin_function (\"__builtin_tbegin_retry\", ftype,\n+\t\t\t  S390_BUILTIN_TBEGIN_RETRY,\n+\t\t\t  BUILT_IN_MD,\n+\t\t\t  NULL, returns_twice_attr);\n+  s390_builtin_decls[S390_BUILTIN_TBEGIN_RETRY_NOFLOAT] =\n+    add_builtin_function (\"__builtin_tbegin_retry_nofloat\", ftype,\n+\t\t\t  S390_BUILTIN_TBEGIN_RETRY_NOFLOAT,\n+\t\t\t  BUILT_IN_MD,\n+\t\t\t  NULL, returns_twice_attr);\n \n   /* int foo (void) */\n   ftype = build_function_type_list (integer_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_tx_nesting_depth\", ftype,\n-\t\t\tS390_BUILTIN_TX_NESTING_DEPTH,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_tend\", ftype,\n-\t\t\tS390_BUILTIN_TEND, BUILT_IN_MD,\tNULL, NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_TX_NESTING_DEPTH] =\n+    add_builtin_function (\"__builtin_tx_nesting_depth\", ftype,\n+\t\t\t  S390_BUILTIN_TX_NESTING_DEPTH,\n+\t\t\t  BUILT_IN_MD, NULL, NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_TEND] =\n+    add_builtin_function (\"__builtin_tend\", ftype,\n+\t\t\t  S390_BUILTIN_TEND, BUILT_IN_MD, NULL, NULL_TREE);\n+\n \n   /* void foo (uint64_t *, uint64_t) */\n   if (TARGET_64BIT)\n     uint64_type = long_unsigned_type_node;\n   else\n     uint64_type = long_long_unsigned_type_node;\n \n-   ftype = build_function_type_list (void_type_node,\n+  ftype = build_function_type_list (void_type_node,\n  \t\t\t\t    build_pointer_type (uint64_type),\n \t\t\t\t    uint64_type, NULL_TREE);\n-  add_builtin_function (\"__builtin_non_tx_store\", ftype,\n-\t\t\tS390_BUILTIN_NON_TX_STORE,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  s390_builtin_decls[S390_BUILTIN_NON_TX_STORE] =\n+    add_builtin_function (\"__builtin_non_tx_store\", ftype,\n+\t\t\t  S390_BUILTIN_NON_TX_STORE,\n+\t\t\t  BUILT_IN_MD, NULL, NULL_TREE);\n }\n \n /* Expand an expression EXP that calls a built-in function,\n@@ -10083,7 +10099,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   tree arg;\n   call_expr_arg_iterator iter;\n \n-  if (fcode >= S390_BUILTIN_max)\n+  if (fcode >= S390_BUILTIN_MAX)\n     internal_error (\"bad builtin fcode\");\n   icode = code_for_builtin[fcode];\n   if (icode == 0)\n@@ -10170,6 +10186,18 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     return const0_rtx;\n }\n \n+/* Return the decl for the target specific builtin with the function\n+   code FCODE.  */\n+\n+static tree\n+s390_builtin_decl (unsigned fcode, bool initialized_p ATTRIBUTE_UNUSED)\n+{\n+  if (fcode >= S390_BUILTIN_MAX)\n+    return error_mark_node;\n+\n+  return s390_builtin_decls[fcode];\n+}\n+\n /* We call mcount before the function prologue.  So a profiled leaf\n    function should stay a leaf function.  */\n \n@@ -12138,6 +12166,8 @@ s390_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n #define TARGET_INIT_BUILTINS s390_init_builtins\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN s390_expand_builtin\n+#undef  TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL s390_builtin_decl\n \n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA s390_output_addr_const_extra"}]}