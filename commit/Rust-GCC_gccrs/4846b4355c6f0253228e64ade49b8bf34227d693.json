{"sha": "4846b4355c6f0253228e64ade49b8bf34227d693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0NmI0MzU1YzZmMDI1MzIyOGU2NGFkZTQ5YjhiZjM0MjI3ZDY5Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-04-02T10:01:43Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-04-02T10:01:43Z"}, "message": "expr.c (expand_var): Delete it.\n\n2008-04-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expr.c (expand_var): Delete it.\n\t* expr.h (expand_var): Delete prototype.\n\t* function.c (expand_function_start): Use expand_decl instead.\n\t* cfgexpand.c (expand_one_static_var, expand_one_var): Don't call\n\tlanghook.\n\nFrom-SVN: r133830", "tree": {"sha": "bc6023893acaf15675538b0e59d69e987ad58feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc6023893acaf15675538b0e59d69e987ad58feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4846b4355c6f0253228e64ade49b8bf34227d693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4846b4355c6f0253228e64ade49b8bf34227d693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4846b4355c6f0253228e64ade49b8bf34227d693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4846b4355c6f0253228e64ade49b8bf34227d693/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fefbcdbe559d35de023ef4456ffbacba9bc37ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fefbcdbe559d35de023ef4456ffbacba9bc37ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fefbcdbe559d35de023ef4456ffbacba9bc37ad"}], "stats": {"total": 57, "additions": 12, "deletions": 45}, "files": [{"sha": "8efd317842efd839f15cb6351be0c797cc177cb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4846b4355c6f0253228e64ade49b8bf34227d693", "patch": "@@ -1,3 +1,11 @@\n+2008-04-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expr.c (expand_var): Delete it.\n+\t* expr.h (expand_var): Delete prototype.\n+\t* function.c (expand_function_start): Use expand_decl instead.\n+\t* cfgexpand.c (expand_one_static_var, expand_one_var): Don't call\n+\tlanghook.\n+\n 2008-04-02  Andy Hutchinson <hutchinsonamdy@aim.com>\n \n \tPR rtl-optimization/35542"}, {"sha": "f50ab4ab964e15e693c0cdba3b3d622ab3f4cf6e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=4846b4355c6f0253228e64ade49b8bf34227d693", "patch": "@@ -643,11 +643,6 @@ expand_one_static_var (tree var)\n   if (TREE_ASM_WRITTEN (var))\n     return;\n \n-  /* Give the front end a chance to do whatever.  In practice, this is\n-     resolving duplicate names for IMA in C.  */\n-  if (lang_hooks.expand_decl (var))\n-    return;\n-\n   /* Otherwise, just emit the variable.  */\n   rest_of_decl_compilation (var, 0, 0);\n }\n@@ -749,10 +744,7 @@ static HOST_WIDE_INT\n expand_one_var (tree var, bool toplevel, bool really_expand)\n {\n   if (TREE_CODE (var) != VAR_DECL)\n-    {\n-      if (really_expand)\n-        lang_hooks.expand_decl (var);\n-    }\n+    ;\n   else if (DECL_EXTERNAL (var))\n     ;\n   else if (DECL_HAS_VALUE_EXPR_P (var))"}, {"sha": "dbb2b4c468ccc2be97b9ea131a9d79b7eb65f755", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4846b4355c6f0253228e64ade49b8bf34227d693", "patch": "@@ -6649,39 +6649,6 @@ emutls_var_address (tree var)\n   return fold_convert (build_pointer_type (TREE_TYPE (var)), call);\n }\n \f\n-/* Expands variable VAR.  */\n-\n-void\n-expand_var (tree var)\n-{\n-  if (DECL_EXTERNAL (var))\n-    return;\n-\n-  if (TREE_STATIC (var))\n-    /* If this is an inlined copy of a static local variable,\n-       look up the original decl.  */\n-    var = DECL_ORIGIN (var);\n-\n-  if (TREE_STATIC (var)\n-      ? !TREE_ASM_WRITTEN (var)\n-      : !DECL_RTL_SET_P (var))\n-    {\n-      if (TREE_CODE (var) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (var))\n-\t/* Should be ignored.  */;\n-      else if (lang_hooks.expand_decl (var))\n-\t/* OK.  */;\n-      else if (TREE_CODE (var) == VAR_DECL && !TREE_STATIC (var))\n-\texpand_decl (var);\n-      else if (TREE_CODE (var) == VAR_DECL && TREE_STATIC (var))\n-\trest_of_decl_compilation (var, 0, 0);\n-      else\n-\t/* No expansion needed.  */\n-\tgcc_assert (TREE_CODE (var) == TYPE_DECL\n-\t\t    || TREE_CODE (var) == CONST_DECL\n-\t\t    || TREE_CODE (var) == FUNCTION_DECL\n-\t\t    || TREE_CODE (var) == LABEL_DECL);\n-    }\n-}\n \n /* Subroutine of expand_expr.  Expand the two operands of a binary\n    expression EXP0 and EXP1 placing the results in OP0 and OP1."}, {"sha": "a1352a1ee50dcbc42ee87eb17f89286849371285", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=4846b4355c6f0253228e64ade49b8bf34227d693", "patch": "@@ -520,8 +520,6 @@ expand_normal (tree exp)\n   return expand_expr_real (exp, NULL_RTX, VOIDmode, EXPAND_NORMAL, NULL);\n }\n \n-extern void expand_var (tree);\n-\n /* At the start of a function, record that we have no previously-pushed\n    arguments waiting to be popped.  */\n extern void init_pending_stack_adjust (void);"}, {"sha": "56f9865be626380711bc0570f7f5e30110a057e2", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4846b4355c6f0253228e64ade49b8bf34227d693/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4846b4355c6f0253228e64ade49b8bf34227d693", "patch": "@@ -4259,7 +4259,9 @@ expand_function_start (tree subr)\n \n       /* ??? We need to do this save early.  Unfortunately here is\n \t before the frame variable gets declared.  Help out...  */\n-      expand_var (TREE_OPERAND (cfun->nonlocal_goto_save_area, 0));\n+      tree var = TREE_OPERAND (cfun->nonlocal_goto_save_area, 0);\n+      if (!DECL_RTL_SET_P (var))\n+\texpand_decl (var);\n \n       t_save = build4 (ARRAY_REF, ptr_type_node,\n \t\t       cfun->nonlocal_goto_save_area,"}]}