{"sha": "691eeb65a01dab3084b6ce381737adf097bd2e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxZWViNjVhMDFkYWIzMDg0YjZjZTM4MTczN2FkZjA5N2JkMmU2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T20:41:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-29T20:41:47Z"}, "message": "diagnostics: Add %{...%} pretty-format support for URLs and use it in -Wpsabi diagnostics\n\nThe following patch attempts to use the diagnostics URL support if available\nto provide more information about the C++17 empty base and C++20\n[[no_unique_address]] empty class ABI changes in -Wpsabi diagnostics.\n\nin GCC 10.1 at the end of the diagnostics is then in some terminals\nunderlined with a dotted line and points to a (to be written) anchor in\ngcc-10/changes.html which we need to write anyway.\n\n2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac (-with-changes-root-url): New configure option,\n\tdefaulting to https://gcc.gnu.org/.\n\t* Makefile.in (CFLAGS-opts.o): Define CHANGES_ROOT_URL for\n\topts.c.\n\t* pretty-print.c (get_end_url_string): New function.\n\t(pp_format): Handle %{ and %} for URLs.\n\t(pp_begin_url): Use pp_string instead of pp_printf.\n\t(pp_end_url): Use get_end_url_string.\n\t* opts.h (get_changes_url): Declare.\n\t* opts.c (get_changes_url): New function.\n\t* config/rs6000/rs6000-call.c: Include opts.h.\n\t(rs6000_discover_homogeneous_aggregate): Use %{in GCC 10.1%} instead\n\tof just in GCC 10.1 in diagnostics and add URL.\n\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_vfp_is_call_or_return_candidate):\n\tLikewise.\n\t* config/s390/s390.c (s390_function_arg_vector,\n\ts390_function_arg_float): Likewise.\n\t* configure: Regenerated.\n\n\t* c-format.c (PP_FORMAT_CHAR_TABLE): Add %{ and %}.", "tree": {"sha": "0d1b729fa533287e181c110c95c7543f9571e358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d1b729fa533287e181c110c95c7543f9571e358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/691eeb65a01dab3084b6ce381737adf097bd2e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691eeb65a01dab3084b6ce381737adf097bd2e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691eeb65a01dab3084b6ce381737adf097bd2e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691eeb65a01dab3084b6ce381737adf097bd2e65/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e54fea7ba4a7cb7b3d1505951383120220e394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e54fea7ba4a7cb7b3d1505951383120220e394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e54fea7ba4a7cb7b3d1505951383120220e394"}], "stats": {"total": 204, "additions": 161, "deletions": 43}, "files": [{"sha": "fc15925aa56f74af7ae87a9a6d7f81ed76a2e3c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -1,5 +1,25 @@\n 2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* configure.ac (-with-changes-root-url): New configure option,\n+\tdefaulting to https://gcc.gnu.org/.\n+\t* Makefile.in (CFLAGS-opts.o): Define CHANGES_ROOT_URL for\n+\topts.c.\n+\t* pretty-print.c (get_end_url_string): New function.\n+\t(pp_format): Handle %{ and %} for URLs.\n+\t(pp_begin_url): Use pp_string instead of pp_printf.\n+\t(pp_end_url): Use get_end_url_string.\n+\t* opts.h (get_changes_url): Declare.\n+\t* opts.c (get_changes_url): New function.\n+\t* config/rs6000/rs6000-call.c: Include opts.h.\n+\t(rs6000_discover_homogeneous_aggregate): Use %{in GCC 10.1%} instead\n+\tof just in GCC 10.1 in diagnostics and add URL.\n+\t* config/arm/arm.c (aapcs_vfp_is_call_or_return_candidate): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_vfp_is_call_or_return_candidate):\n+\tLikewise.\n+\t* config/s390/s390.c (s390_function_arg_vector,\n+\ts390_function_arg_float): Likewise.\n+\t* configure: Regenerated.\n+\n \tPR target/94704\n \t* config/s390/s390.c (s390_function_arg_vector,\n \ts390_function_arg_float): Use DECL_FIELD_ABI_IGNORED instead of"}, {"sha": "85f30bf03912941c2cbca5f4ef8f2cbbc7944ba9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -2187,6 +2187,7 @@ lto-wrapper$(exeext): $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBDEPS)\n \tmv -f T$@ $@\n \n CFLAGS-opts.o += -DDOCUMENTATION_ROOT_URL=\\\"@DOCUMENTATION_ROOT_URL@\\\"\n+CFLAGS-opts.o += -DCHANGES_ROOT_URL=\\\"@CHANGES_ROOT_URL@\\\"\n \n # Files used by all variants of C or by the stand-alone pre-processor.\n "}, {"sha": "c429b49e68c70178a74d0fa9409610b758b229c4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -1,3 +1,7 @@\n+2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-format.c (PP_FORMAT_CHAR_TABLE): Add %{ and %}.\n+\n 2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/94755"}, {"sha": "33a5b6d3965b30d29234abe7f9c9033ed367589b", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -757,6 +757,8 @@ static const format_char_info asm_fprintf_char_table[] =\n   { \"<\",   0, STD_C89, NOARGUMENTS, \"\",      \"<\",   NULL }, \\\n   { \">\",   0, STD_C89, NOARGUMENTS, \"\",      \">\",   NULL }, \\\n   { \"'\" ,  0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL }, \\\n+  { \"{\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"cR\", NULL }, \\\n+  { \"}\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",    NULL }, \\\n   { \"R\",   0, STD_C89, NOARGUMENTS, \"\",     \"\\\\\",   NULL }, \\\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL }, \\\n   { \"Z\",   1, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\", &gcc_diag_char_table[0] }"}, {"sha": "c1a050fbf2a03f0a4ed3d6fc4506024beca8c3fd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -16883,18 +16883,22 @@ aarch64_vfp_is_call_or_return_candidate (machine_mode mode,\n \t      && ((alt = aapcs_vfp_sub_candidate (type, &new_mode, NULL))\n \t\t  != ag_count))\n \t    {\n+\t      char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n \t      gcc_assert (alt == -1);\n \t      last_reported_type_uid = uid;\n \t      /* Use TYPE_MAIN_VARIANT to strip any redundant const\n \t\t qualification.  */\n \t      if (warn_psabi_flags & WARN_PSABI_NO_UNIQUE_ADDRESS)\n \t\tinform (input_location, \"parameter passing for argument of \"\n \t\t\t\"type %qT with %<[[no_unique_address]]%> members \"\n-\t\t\t\"changed in GCC 10.1\", TYPE_MAIN_VARIANT (type));\n+\t\t\t\"changed %{in GCC 10.1%}\",\n+\t\t\tTYPE_MAIN_VARIANT (type), url);\n \t      else if (warn_psabi_flags & WARN_PSABI_EMPTY_CXX17_BASE)\n \t\tinform (input_location, \"parameter passing for argument of \"\n \t\t\t\"type %qT when C++17 is enabled changed to match \"\n-\t\t\t\"C++14 in GCC 10.1\", TYPE_MAIN_VARIANT (type));\n+\t\t\t\"C++14 %{in GCC 10.1%}\",\n+\t\t\tTYPE_MAIN_VARIANT (type), url);\n+\t      free (url);\n \t    }\n \n \t  if (is_ha != NULL) *is_ha = true;"}, {"sha": "9087e6c2ab4d37101cb6ae0e80270d3ccfa076e7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -6416,18 +6416,22 @@ aapcs_vfp_is_call_or_return_candidate (enum arm_pcs pcs_variant,\n \t      && ((alt = aapcs_vfp_sub_candidate (type, &new_mode, NULL))\n \t\t  != ag_count))\n \t    {\n+\t      char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n \t      gcc_assert (alt == -1);\n \t      last_reported_type_uid = uid;\n \t      /* Use TYPE_MAIN_VARIANT to strip any redundant const\n \t\t qualification.  */\n \t      if (warn_psabi_flags & WARN_PSABI_NO_UNIQUE_ADDRESS)\n \t\tinform (input_location, \"parameter passing for argument of \"\n \t\t\t\"type %qT with %<[[no_unique_address]]%> members \"\n-\t\t\t\"changed in GCC 10.1\", TYPE_MAIN_VARIANT (type));\n+\t\t\t\"changed %{in GCC 10.1%}\",\n+\t\t\tTYPE_MAIN_VARIANT (type), url);\n \t      else if (warn_psabi_flags & WARN_PSABI_EMPTY_CXX17_BASE)\n \t\tinform (input_location, \"parameter passing for argument of \"\n \t\t\t\"type %qT when C++17 is enabled changed to match \"\n-\t\t\t\"C++14 in GCC 10.1\", TYPE_MAIN_VARIANT (type));\n+\t\t\t\"C++14 %{in GCC 10.1%}\",\n+\t\t\tTYPE_MAIN_VARIANT (type), url);\n+\t      free (url);\n \t    }\n \t  *count = ag_count;\n \t}"}, {"sha": "4e6dd34f446ee6e51f25397d49e65849ca2ef7c0", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -68,6 +68,7 @@\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"targhooks.h\"\n+#include \"opts.h\"\n \n #include \"rs6000-internal.h\"\n \n@@ -5747,17 +5748,20 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n \t\t  unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (type));\n \t\t  if (uid != last_reported_type_uid)\n \t\t    {\n+\t\t      char *url\n+\t\t\t= get_changes_url (\"gcc-10/changes.html#empty_base\");\n \t\t      if (empty_base_seen & 1)\n \t\t\tinform (input_location,\n \t\t\t\t\"parameter passing for argument of type %qT \"\n \t\t\t\t\"when C++17 is enabled changed to match C++14 \"\n-\t\t\t\t\"in GCC 10.1\", type);\n+\t\t\t\t\"%{in GCC 10.1%}\", type, url);\n \t\t      else\n \t\t\tinform (input_location,\n \t\t\t\t\"parameter passing for argument of type %qT \"\n \t\t\t\t\"with %<[[no_unique_address]]%> members \"\n-\t\t\t\t\"changed in GCC 10.1\", type);\n+\t\t\t\t\"changed %{in GCC 10.1%}\", type, url);\n \t\t      last_reported_type_uid = uid;\n+\t\t      free (url);\n \t\t    }\n \t\t}\n \t      return true;"}, {"sha": "40281e87254e2fbfc1e45e68de4b9e4d2177f10f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -11960,17 +11960,19 @@ s390_function_arg_vector (machine_mode mode, const_tree type)\n       unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n+\t  char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n \t  last_reported_type_uid = uid;\n \t  if (empty_base_seen & 1)\n \t    inform (input_location,\n \t\t    \"parameter passing for argument of type %qT when C++17 \"\n-\t\t    \"is enabled changed to match C++14 in GCC 10.1\",\n-\t\t    orig_type);\n+\t\t    \"is enabled changed to match C++14 %{in GCC 10.1%}\",\n+\t\t    orig_type, url);\n \t  else\n \t    inform (input_location,\n \t\t    \"parameter passing for argument of type %qT with \"\n-\t\t    \"%<[[no_unique_address]]%> members changed in GCC 10.1\",\n-\t\t    orig_type);\n+\t\t    \"%<[[no_unique_address]]%> members changed \"\n+\t\t    \"%{in GCC 10.1%}\", orig_type, url);\n+\t  free (url);\n \t}\n     }\n   return true;\n@@ -12036,17 +12038,19 @@ s390_function_arg_float (machine_mode mode, const_tree type)\n       unsigned uid = TYPE_UID (TYPE_MAIN_VARIANT (orig_type));\n       if (uid != last_reported_type_uid)\n \t{\n+\t  char *url = get_changes_url (\"gcc-10/changes.html#empty_base\");\n \t  last_reported_type_uid = uid;\n \t  if (empty_base_seen & 1)\n \t    inform (input_location,\n \t\t    \"parameter passing for argument of type %qT when C++17 \"\n-\t\t    \"is enabled changed to match C++14 in GCC 10.1\",\n-\t\t    orig_type);\n+\t\t    \"is enabled changed to match C++14 %{in GCC 10.1%}\",\n+\t\t    orig_type, url);\n \t  else\n \t    inform (input_location,\n \t\t    \"parameter passing for argument of type %qT with \"\n-\t\t    \"%<[[no_unique_address]]%> members changed in GCC 10.1\",\n-\t\t    orig_type);\n+\t\t    \"%<[[no_unique_address]]%> members changed \"\n+\t\t    \"%{in GCC 10.1%}\", orig_type, url);\n+\t  free (url);\n \t}\n     }\n "}, {"sha": "c8fb7a8a7ac4af45b740a850812f073378b1181e", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -819,6 +819,7 @@ accel_dir_suffix\n real_target_noncanonical\n enable_as_accelerator\n gnat_install_lib\n+CHANGES_ROOT_URL\n DOCUMENTATION_ROOT_URL\n REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n@@ -967,6 +968,7 @@ with_specs\n with_pkgversion\n with_bugurl\n with_documentation_root_url\n+with_changes_root_url\n enable_languages\n with_multilib_list\n with_zstd\n@@ -1803,6 +1805,8 @@ Optional Packages:\n   --with-bugurl=URL       Direct users to URL to report a bug\n   --with-documentation-root-url=URL\n                           Root for documentation URLs\n+  --with-changes-root-url=URL\n+                          Root for GCC changes URLs\n   --with-multilib-list    select multilibs (AArch64, SH and x86-64 only)\n   --with-zstd=PATH        specify prefix directory for installed zstd library.\n                           Equivalent to --with-zstd-include=PATH/include plus\n@@ -7857,6 +7861,23 @@ fi\n \n \n \n+# Allow overriding the default URL for GCC changes\n+\n+# Check whether --with-changes-root-url was given.\n+if test \"${with_changes_root_url+set}\" = set; then :\n+  withval=$with_changes_root_url; case \"$withval\" in\n+      yes) as_fn_error $? \"changes root URL not specified\" \"$LINENO\" 5 ;;\n+      no)  as_fn_error $? \"changes root URL not specified\" \"$LINENO\" 5 ;;\n+      *)   CHANGES_ROOT_URL=\"$withval\"\n+\t   ;;\n+     esac\n+else\n+  CHANGES_ROOT_URL=\"https://gcc.gnu.org/\"\n+\n+fi\n+\n+\n+\n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n # Check whether --enable-languages was given.\n@@ -18988,7 +19009,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18991 \"configure\"\n+#line 19012 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19094,7 +19115,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19097 \"configure\"\n+#line 19118 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "330e3285dce49e73228a04624deff2415a8fb124", "filename": "gcc/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -986,6 +986,20 @@ AC_ARG_WITH(documentation-root-url,\n )\n AC_SUBST(DOCUMENTATION_ROOT_URL)\n \n+# Allow overriding the default URL for GCC changes\n+AC_ARG_WITH(changes-root-url,\n+    AS_HELP_STRING([--with-changes-root-url=URL],\n+                   [Root for GCC changes URLs]),\n+    [case \"$withval\" in\n+      yes) AC_MSG_ERROR([changes root URL not specified]) ;;\n+      no)  AC_MSG_ERROR([changes root URL not specified]) ;;\n+      *)   CHANGES_ROOT_URL=\"$withval\"\n+\t   ;;\n+     esac],\n+     CHANGES_ROOT_URL=\"https://gcc.gnu.org/\"\n+)\n+AC_SUBST(CHANGES_ROOT_URL)\n+\n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n AC_ARG_ENABLE(languages,"}, {"sha": "12c0098f6b8e023753b0178f868150682ef3d0f7", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -3190,6 +3190,16 @@ get_option_url (diagnostic_context *, int option_index)\n     return NULL;\n }\n \n+/* Given \"gcc-10/changes.html#foobar\", return that URL under\n+   CHANGES_ROOT_URL (see --with-changes-root-url).\n+   The caller is responsible for freeing the returned string.  */\n+\n+char *\n+get_changes_url (const char *str)\n+{\n+  return concat (CHANGES_ROOT_URL, str, NULL);\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "b9c535049d24dc1baf60d9670dccfe85d2004adc", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -464,6 +464,7 @@ extern void parse_options_from_collect_gcc_options (const char *, obstack *,\n \t\t\t\t\t\t    int *);\n \n extern void prepend_xassembler_to_collect_as_options (const char *, obstack *);\n+extern char *get_changes_url (const char *);\n \n /* Set OPTION in OPTS to VALUE if the option is not set in OPTS_SET.  */\n "}, {"sha": "d0dd9cbd4165c6021f054c52dda001937c302667", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 56, "deletions": 27, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/691eeb65a01dab3084b6ce381737adf097bd2e65/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=691eeb65a01dab3084b6ce381737adf097bd2e65", "patch": "@@ -1020,6 +1020,8 @@ pp_indent (pretty_printer *pp)\n     pp_space (pp);\n }\n \n+static const char *get_end_url_string (pretty_printer *);\n+\n /* The following format specifiers are recognized as being client independent:\n    %d, %i: (signed) integer in base ten.\n    %u: unsigned integer in base ten.\n@@ -1038,6 +1040,8 @@ pp_indent (pretty_printer *pp)\n    %%: '%'.\n    %<: opening quote.\n    %>: closing quote.\n+   %{: URL start.  Consumes a const char * argument for the URL.\n+   %}: URL end.    Does not consume any arguments.\n    %': apostrophe (should only be used in untranslated messages;\n        translations should use appropriate punctuation directly).\n    %@: diagnostic_event_id_ptr, for which event_id->known_p () must be true.\n@@ -1051,7 +1055,7 @@ pp_indent (pretty_printer *pp)\n    Arguments can be used sequentially, or through %N$ resp. *N$\n    notation Nth argument after the format string.  If %N$ / *N$\n    notation is used, it must be used for all arguments, except %m, %%,\n-   %<, %> and %', which may not have a number, as they do not consume\n+   %<, %>, %} and %', which may not have a number, as they do not consume\n    an argument.  When %M$.*N$s is used, M must be N + 1.  (This may\n    also be written %M$.*s, provided N is not otherwise used.)  The\n    format string must have conversion specifiers with argument numbers\n@@ -1084,7 +1088,7 @@ pp_format (pretty_printer *pp, text_info *text)\n   /* Formatting phase 1: split up TEXT->format_spec into chunks in\n      pp_buffer (PP)->args[].  Even-numbered chunks are to be output\n      verbatim, odd-numbered chunks are format specifiers.\n-     %m, %%, %<, %>, and %' are replaced with the appropriate text at\n+     %m, %%, %<, %>, %} and %' are replaced with the appropriate text at\n      this point.  */\n \n   memset (formatters, 0, sizeof formatters);\n@@ -1133,6 +1137,15 @@ pp_format (pretty_printer *pp, text_info *text)\n \t  p++;\n \t  continue;\n \n+\tcase '}':\n+\t  {\n+\t    const char *endurlstr = get_end_url_string (pp);\n+\t    obstack_grow (&buffer->chunk_obstack, endurlstr,\n+\t\t\t  strlen (endurlstr));\n+\t  }\n+\t  p++;\n+\t  continue;\n+\n \tcase 'R':\n \t  {\n \t    const char *colorstr = colorize_stop (pp_show_color (pp));\n@@ -1445,6 +1458,10 @@ pp_format (pretty_printer *pp, text_info *text)\n \t  }\n \t  break;\n \n+\tcase '{':\n+\t  pp_begin_url (pp, va_arg (*text->args_ptr, const char *));\n+\t  break;\n+\n \tdefault:\n \t  {\n \t    bool ok;\n@@ -2172,38 +2189,50 @@ void\n pp_begin_url (pretty_printer *pp, const char *url)\n {\n   switch (pp->url_format)\n-  {\n-  case URL_FORMAT_NONE:\n-    break;\n-  case URL_FORMAT_ST:\n-    pp_printf (pp, \"\\33]8;;%s\\33\\\\\", url);\n-    break;\n-  case URL_FORMAT_BEL:\n-    pp_printf (pp, \"\\33]8;;%s\\a\", url);\n-    break;\n-  default:\n-    gcc_unreachable ();\n-  }\n+    {\n+    case URL_FORMAT_NONE:\n+      break;\n+    case URL_FORMAT_ST:\n+      pp_string (pp, \"\\33]8;;\");\n+      pp_string (pp, url);\n+      pp_string (pp, \"\\33\\\\\");\n+      break;\n+    case URL_FORMAT_BEL:\n+      pp_string (pp, \"\\33]8;;\");\n+      pp_string (pp, url);\n+      pp_string (pp, \"\\a\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Helper function for pp_end_url and pp_format, return the \"close URL\" escape\n+   sequence string.  */\n+\n+static const char *\n+get_end_url_string (pretty_printer *pp)\n+{\n+  switch (pp->url_format)\n+    {\n+    case URL_FORMAT_NONE:\n+      return \"\";\n+    case URL_FORMAT_ST:\n+      return \"\\33]8;;\\33\\\\\";\n+    case URL_FORMAT_BEL:\n+      return \"\\33]8;;\\a\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n /* If URL-printing is enabled, write a \"close URL\" escape sequence to PP.  */\n \n void\n pp_end_url (pretty_printer *pp)\n {\n-  switch (pp->url_format)\n-  {\n-  case URL_FORMAT_NONE:\n-    break;\n-  case URL_FORMAT_ST:\n-    pp_string (pp, \"\\33]8;;\\33\\\\\");\n-    break;\n-  case URL_FORMAT_BEL:\n-    pp_string (pp, \"\\33]8;;\\a\");\n-    break;\n-  default:\n-    gcc_unreachable ();\n-  }\n+  if (pp->url_format != URL_FORMAT_NONE)\n+    pp_string (pp, get_end_url_string (pp));\n }\n \n #if CHECKING_P"}]}