{"sha": "8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwZDYwNTE5NmViZjQ1NTZlZjEzYjNhNWE2MmQ2OWYyMGVkMmUzNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-03-13T06:54:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-03-13T06:54:25Z"}, "message": "allocator: New.\n\n\n2004-03-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/allocator: New.\n\t* config/allocator/bitmap_allocator_base.h: New.\n\t* config/allocator/malloc_allocator_base.h: New.\n\t* config/allocator/mt_allocator_base.h: New.\n\t* config/allocator/new_allocator_base.h: New.\n\t* include/bits/allocator.h: Include c++allocator.h.\n\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): New.\n\t* aclocal.m4: Regenerate.\n\t* configure.ac: Use GLIBCXX_ENABLE_ALLOCATOR.\n\t* configure: Regenerate.\n\t* include/Makefile.am (host_headers_extra): Add c++allocator.h.\n\t* include/Makefile.in: Regenerate.\n\t* docs/html/configopts.html: Add enable-libstdcxx-allocator.\n\nFrom-SVN: r79435", "tree": {"sha": "61365023920e49ff4fc09d8899c129b6beac5a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61365023920e49ff4fc09d8899c129b6beac5a51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/comments", "author": null, "committer": null, "parents": [{"sha": "992ab1225db9e73dc4a793b9d4831967a51250f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992ab1225db9e73dc4a793b9d4831967a51250f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992ab1225db9e73dc4a793b9d4831967a51250f9"}], "stats": {"total": 376, "additions": 364, "deletions": 12}, "files": [{"sha": "022a726c1ecd1ef40139c1937136365e42a6dbab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -1,3 +1,19 @@\n+2004-03-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/allocator: New.\n+\t* config/allocator/bitmap_allocator_base.h: New.\n+\t* config/allocator/malloc_allocator_base.h: New.\n+\t* config/allocator/mt_allocator_base.h: New.\n+\t* config/allocator/new_allocator_base.h: New.\n+\t* include/bits/allocator.h: Include c++allocator.h.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): New.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.ac: Use GLIBCXX_ENABLE_ALLOCATOR. \n+\t* configure: Regenerate.\n+\t* include/Makefile.am (host_headers_extra): Add c++allocator.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* docs/html/configopts.html: Add enable-libstdcxx-allocator.\n+\n 2004-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/allocator.h: Revert."}, {"sha": "0e7a5f59ac72a81dabfe46181c4b38a849ced68f", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -87,6 +87,8 @@ GZIP_ENV = --best\n distuninstallcheck_listfiles = find . -type f -print\n distcleancheck_listfiles = find . -type f -print\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}, {"sha": "e9ba13ff179381e24787e04d15e9b99b9ac7222d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -1170,6 +1170,79 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n ])\n \n \n+dnl\n+dnl Check for which std::allocator base class to use.  The choice is\n+dnl mapped from a subdirectory of include/ext.\n+dnl\n+dnl Default is new.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n+  AC_MSG_CHECKING([for std::allocator base class to use])\n+  GLIBCXX_ENABLE(libstdcxx-allocator,auto,[=KIND],\n+    [use KIND for target std::allocator base],\n+    [permit new|malloc|mt|bitmap|yes|no|auto])\n+  # If they didn't use this option switch, or if they specified --enable\n+  # with no specific model, we'll have to look for one.  If they\n+  # specified --disable (???), do likewise.\n+  if test $enable_libstdcxx_allocator = no || test $enable_libstdcxx_allocator = yes; then\n+     enable_libstdcxx_allocator=auto\n+  fi\n+\n+  # Either a known package, or \"auto\"\n+  enable_libstdcxx_allocator_flag=$enable_libstdcxx_allocator\n+\n+  # Probe for host-specific support if no specific model is specified.\n+  # Default to \"new\".\n+  if test $enable_libstdcxx_allocator_flag = auto; then\n+    case ${target_os} in\n+      freebsd*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      hpux11*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      irix6*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      linux* | gnu* | kfreebsd*-gnu | knetbsd*-gnu)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      solaris*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      *)\n+        enable_libstdcxx_allocator_flag=new\n+        ;;\n+    esac\n+  fi\n+  AC_MSG_RESULT($enable_libstdcxx_allocator_flag)\n+  \n+\n+  # Set configure bits for specified locale package\n+  case ${enable_libstdcxx_allocator_flag} in\n+    bitmap)\n+      ALLOCATOR_H=config/allocator/bitmap_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::bitmap_allocator\n+      ;;\n+    malloc)\n+      ALLOCATOR_H=config/allocator/malloc_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::malloc_allocator\n+      ;;\n+    mt)\n+      ALLOCATOR_H=config/allocator/mt_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::__mt_alloc\n+      ;;\n+    new)\n+      ALLOCATOR_H=config/allocator/new_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::new_allocator\n+      ;;\n+  esac\n+\n+  AC_SUBST(ALLOCATOR_H)\n+  AC_SUBST(ALLOCATOR_NAME)\n+])\n+\n+\n dnl\n dnl Check for whether the Boost-derived checks should be turned on.\n dnl"}, {"sha": "bf84ae06d7f4ce360edce78774d37fc4d379b7e9", "filename": "libstdc++-v3/config/allocator/bitmap_allocator_base.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fbitmap_allocator_base.h?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -0,0 +1,37 @@\n+// Base to std::allocator -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CXX_ALLOCATOR_H\n+#define _CXX_ALLOCATOR_H 1\n+\n+// Define bitmap_allocator as the base class to std::allocator.\n+#include <ext/bitmap_allocator.h>\n+#define ___glibcxx_base_allocator  __gnu_cxx::bitmap_allocator\n+\n+#endif"}, {"sha": "4a82ec362c5cb69ef0e7a704c6f3f6017b5de620", "filename": "libstdc++-v3/config/allocator/malloc_allocator_base.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmalloc_allocator_base.h?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -0,0 +1,37 @@\n+// Base to std::allocator -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CXX_ALLOCATOR_H\n+#define _CXX_ALLOCATOR_H 1\n+\n+// Define new_allocator as the base class to std::allocator.\n+#include <ext/malloc_allocator.h>\n+#define ___glibcxx_base_allocator  __gnu_cxx::malloc_allocator\n+\n+#endif"}, {"sha": "52b4421a4392d8fd66e388dc8f8d04b3cc0db6da", "filename": "libstdc++-v3/config/allocator/mt_allocator_base.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fmt_allocator_base.h?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -0,0 +1,37 @@\n+// Base to std::allocator -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CXX_ALLOCATOR_H\n+#define _CXX_ALLOCATOR_H 1\n+\n+// Define mt_allocator as the base class to std::allocator.\n+#include <ext/mt_allocator.h>\n+#define ___glibcxx_base_allocator  __gnu_cxx::__mt_alloc\n+\n+#endif"}, {"sha": "442f89cc535d8250f3006d97fd29e1780f3a3c9b", "filename": "libstdc++-v3/config/allocator/new_allocator_base.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -0,0 +1,37 @@\n+// Base to std::allocator -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CXX_ALLOCATOR_H\n+#define _CXX_ALLOCATOR_H 1\n+\n+// Define new_allocator as the base class to std::allocator.\n+#include <ext/new_allocator.h>\n+#define ___glibcxx_base_allocator  __gnu_cxx::new_allocator\n+\n+#endif"}, {"sha": "c82bf3f07989495a074dfaf12987776f9fe0f318", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 87, "deletions": 3, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -864,6 +864,9 @@ Optional Features:\n                           use MODEL for target locale package\n                           [default=auto]\n   --enable-nls            use Native Language Support (default)\n+  --enable-libstdcxx-allocator=KIND\n+                          use KIND for target std::allocator base\n+                          [default=auto]\n   --enable-cheaders=KIND  construct \"C\" headers for g++\n                           [default=$c_model]\n   --enable-c-mbchar       enable multibyte (wide) characters\n@@ -4422,7 +4425,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4425 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4428 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5036,7 +5039,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5039 \"configure\"\n+#line 5042 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -6257,6 +6260,85 @@ _ACEOF\n \n \n \n+  echo \"$as_me:$LINENO: checking for std::allocator base class to use\" >&5\n+echo $ECHO_N \"checking for std::allocator base class to use... $ECHO_C\" >&6\n+   # Check whether --enable-libstdcxx-allocator or --disable-libstdcxx-allocator was given.\n+if test \"${enable_libstdcxx_allocator+set}\" = set; then\n+  enableval=\"$enable_libstdcxx_allocator\"\n+\n+      case \"$enableval\" in\n+       new|malloc|mt|bitmap|yes|no|auto) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable libstdcxx-allocator\" >&5\n+echo \"$as_me: error: Unknown argument to enable/disable libstdcxx-allocator\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+                          esac\n+\n+else\n+  enable_libstdcxx_allocator=auto\n+fi;\n+\n+  # If they didn't use this option switch, or if they specified --enable\n+  # with no specific model, we'll have to look for one.  If they\n+  # specified --disable (???), do likewise.\n+  if test $enable_libstdcxx_allocator = no || test $enable_libstdcxx_allocator = yes; then\n+     enable_libstdcxx_allocator=auto\n+  fi\n+\n+  # Either a known package, or \"auto\"\n+  enable_libstdcxx_allocator_flag=$enable_libstdcxx_allocator\n+\n+  # Probe for host-specific support if no specific model is specified.\n+  # Default to \"new\".\n+  if test $enable_libstdcxx_allocator_flag = auto; then\n+    case ${target_os} in\n+      freebsd*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      hpux11*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      irix6*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      linux* | gnu* | kfreebsd*-gnu | knetbsd*-gnu)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      solaris*)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n+      *)\n+        enable_libstdcxx_allocator_flag=new\n+        ;;\n+    esac\n+  fi\n+  echo \"$as_me:$LINENO: result: $enable_libstdcxx_allocator_flag\" >&5\n+echo \"${ECHO_T}$enable_libstdcxx_allocator_flag\" >&6\n+\n+\n+  # Set configure bits for specified locale package\n+  case ${enable_libstdcxx_allocator_flag} in\n+    bitmap)\n+      ALLOCATOR_H=config/allocator/bitmap_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::bitmap_allocator\n+      ;;\n+    malloc)\n+      ALLOCATOR_H=config/allocator/malloc_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::malloc_allocator\n+      ;;\n+    mt)\n+      ALLOCATOR_H=config/allocator/mt_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::__mt_alloc\n+      ;;\n+    new)\n+      ALLOCATOR_H=config/allocator/new_allocator_base.h\n+      ALLOCATOR_NAME=__gnu_cxx::new_allocator\n+      ;;\n+  esac\n+\n+\n+\n+\n+\n    # Check whether --enable-cheaders or --disable-cheaders was given.\n if test \"${enable_cheaders+set}\" = set; then\n   enableval=\"$enable_cheaders\"\n@@ -73754,6 +73836,8 @@ s,@CTIME_H@,$CTIME_H,;t t\n s,@CTIME_CC@,$CTIME_CC,;t t\n s,@CLOCALE_CC@,$CLOCALE_CC,;t t\n s,@CLOCALE_INTERNAL_H@,$CLOCALE_INTERNAL_H,;t t\n+s,@ALLOCATOR_H@,$ALLOCATOR_H,;t t\n+s,@ALLOCATOR_NAME@,$ALLOCATOR_NAME,;t t\n s,@C_INCLUDE_DIR@,$C_INCLUDE_DIR,;t t\n s,@GLIBCXX_C_HEADERS_C_TRUE@,$GLIBCXX_C_HEADERS_C_TRUE,;t t\n s,@GLIBCXX_C_HEADERS_C_FALSE@,$GLIBCXX_C_HEADERS_C_FALSE,;t t"}, {"sha": "a7533f86a323fbb27371c51ef46e73c0d2e82686", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -84,6 +84,7 @@ GLIBCXX_ENABLE_PCH($is_hosted)\n # NB: C_MBCHAR must come early.\n GLIBCXX_ENABLE_CSTDIO\n GLIBCXX_ENABLE_CLOCALE\n+GLIBCXX_ENABLE_ALLOCATOR\n GLIBCXX_ENABLE_CHEADERS($c_model)  dnl c_model from configure.host\n GLIBCXX_ENABLE_C_MBCHAR([yes])\n GLIBCXX_ENABLE_C99([yes])"}, {"sha": "6a2e214b39ea748029cab8929a1a971d3c18d68f", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -124,6 +124,23 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n+ <dt><code>--enable-libstdcxx-allocator  </code></dt>\n+ <dd><p>This is an abbreviated form of\n+        <code>'--enable-libstdcxx-allocator=auto'</code> (described\n+        next). This option can change the library ABI.\n+     </p>\n+ </dd>\n+\n+ <dt><code>--enable-libstdcxx-allocator=OPTION  </code></dt>\n+ <dd><p>Select a target-specific underlying std::allocator.  The\n+        choices are 'new' to specify a wrapper for new, 'malloc' to\n+        specify a wrapper for malloc, 'mt' for a fixed power of two allocator\n+        (More <a href=\"http://sources.redhat.com/glibc/\">info</a>) or\n+        'bitmap' for a bitmap allocator. This option can change the\n+        library ABI.\n+     </p>\n+ </dd>\n+\n  <dt><code>--enable-cheaders=OPTION  </code></dt>\n  <dd><p>This allows the user to define what kind of C headers are\n         used.  Options are: c, c_std, and c_shadow. These correspond"}, {"sha": "34e20338ae6f8dab9b9ba804237e9c217f1186d3", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -351,6 +351,7 @@ host_headers_noinst = \\\n host_headers_extra = \\\n \t${host_builddir}/basic_file.h \\\n \t${host_builddir}/c++config.h \\\n+\t${host_builddir}/c++allocator.h \\\n \t${host_builddir}/c++io.h \\\n \t${host_builddir}/c++locale.h \\\n \t${host_builddir}/messages_members.h \\\n@@ -480,6 +481,7 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t  (cd ${host_builddir} ;\\\n \t  $(LN_S) ${host_headers} . || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_H) basic_file.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(ALLOCATOR_H) c++allocator.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CSTDIO_H) c++io.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_H) c++locale.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H) . || true ;\\"}, {"sha": "b22acf2a5123e038464c25132c0ba6a26c54affe", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -55,6 +55,8 @@ SOURCES =\n DIST_SOURCES =\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@\n@@ -559,6 +561,7 @@ host_headers_noinst = \\\n host_headers_extra = \\\n \t${host_builddir}/basic_file.h \\\n \t${host_builddir}/c++config.h \\\n+\t${host_builddir}/c++allocator.h \\\n \t${host_builddir}/c++io.h \\\n \t${host_builddir}/c++locale.h \\\n \t${host_builddir}/messages_members.h \\\n@@ -854,6 +857,7 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t  (cd ${host_builddir} ;\\\n \t  $(LN_S) ${host_headers} . || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_H) basic_file.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(ALLOCATOR_H) c++allocator.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CSTDIO_H) c++io.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_H) c++locale.h || true ;\\\n \t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H) . || true ;\\"}, {"sha": "c9200ecd9949def928d9fbc6ba3f52fa9c4f3495", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -49,12 +49,7 @@\n #define _ALLOCATOR_H 1\n \n // Define the base class to std::allocator.\n-\n-#include <ext/new_allocator.h>\n-#define __glibcxx_default_allocator  __gnu_cxx::new_allocator\n-\n-//#include <ext/mt_allocator.h>\n-//#define __glibcxx_default_allocator  __gnu_cxx::__mt_alloc\n+#include <bits/c++allocator.h>\n \n namespace std\n {\n@@ -82,7 +77,7 @@ namespace std\n    *  (See @link Allocators allocators info @endlink for more.)\n    */\n   template<typename _Tp>\n-    class allocator: public __glibcxx_default_allocator<_Tp>\n+    class allocator: public ___glibcxx_base_allocator<_Tp>\n     {\n    public:\n       typedef size_t     size_type;\n@@ -100,7 +95,7 @@ namespace std\n       allocator() throw() { }\n \n       allocator(const allocator& a) throw()\n-      : __glibcxx_default_allocator<_Tp>(a) { }\n+      : ___glibcxx_base_allocator<_Tp>(a) { }\n \n       template<typename _Tp1>\n         allocator(const allocator<_Tp1>&) throw() { }\n@@ -129,7 +124,7 @@ namespace std\n #endif\n \n   // Undefine.\n-#undef __glibcxx_default_allocator\n+#undef ___glibcxx_base_allocator\n } // namespace std\n \n #endif"}, {"sha": "279443dbf43d77c2856538a697ec06eedbe71a7d", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -72,6 +72,8 @@ ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}, {"sha": "95a4be34b6297bca6c04422dea471d08a5b7a7a7", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -90,6 +90,8 @@ ETAGS = etags\n CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}, {"sha": "e0090667fdfd89155622a050a01ada2b5af28acd", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -55,6 +55,8 @@ SOURCES =\n DIST_SOURCES =\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}, {"sha": "fccb39ea053141134f275d6e1725c1e7fd2a126f", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -83,6 +83,8 @@ CTAGS = ctags\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n VPATH = $(top_srcdir)/src:$(top_srcdir)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}, {"sha": "78c6b7c81b2b8c41fd7fdc99e2fac73c1c4fd2c4", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0d605196ebf4556ef13b3a5a62d69f20ed2e36/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=8b0d605196ebf4556ef13b3a5a62d69f20ed2e36", "patch": "@@ -84,6 +84,8 @@ EXPECT = expect\n RUNTEST = runtest\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@"}]}