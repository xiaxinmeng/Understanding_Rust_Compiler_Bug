{"sha": "3e6711046ae71601a40636e768c8d9d7def57add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NzExMDQ2YWU3MTYwMWE0MDYzNmU3NjhjOGQ5ZDdkZWY1N2FkZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-01T15:07:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:06Z"}, "message": "[Ada] Improve handling of null unbounded strings\n\n2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-strunb__shared.ads, libgnat/a-strunb__shared.adb\n\t(Reference, Unreference): No-op for Empty_Shared_String.\n\tRemove unneeded calls to Reference.", "tree": {"sha": "5ff48fc2e8c9c1fa46e76db82275a482707e7ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ff48fc2e8c9c1fa46e76db82275a482707e7ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e6711046ae71601a40636e768c8d9d7def57add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6711046ae71601a40636e768c8d9d7def57add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6711046ae71601a40636e768c8d9d7def57add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6711046ae71601a40636e768c8d9d7def57add/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7748ad4c356f37d324a36c21054735f2ca6f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7748ad4c356f37d324a36c21054735f2ca6f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7748ad4c356f37d324a36c21054735f2ca6f89"}], "stats": {"total": 55, "additions": 13, "deletions": 42}, "files": [{"sha": "272ef43d260dea73e0982ba3676c13a19e4a552e", "filename": "gcc/ada/libgnat/a-strunb__shared.adb", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6711046ae71601a40636e768c8d9d7def57add/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6711046ae71601a40636e768c8d9d7def57add/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb?ref=3e6711046ae71601a40636e768c8d9d7def57add", "patch": "@@ -73,7 +73,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Left string is empty, return Right string\n@@ -112,7 +111,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Right is an empty string, return Left string\n@@ -145,7 +143,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared one\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Left is empty string, return Right string\n@@ -214,7 +211,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared empty string\n \n       if Left = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Otherwise, allocate new shared string and fill it\n@@ -244,7 +240,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Otherwise, allocate new shared string and fill it\n@@ -277,7 +272,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Coefficient is one, just return string itself\n@@ -506,7 +500,6 @@ package body Ada.Strings.Unbounded is\n       --  Empty string requested, return shared empty string\n \n       if Max_Length = 0 then\n-         Reference (Empty_Shared_String'Access);\n          return Empty_Shared_String'Access;\n \n       --  Otherwise, allocate requested space (and probably some more room)\n@@ -701,7 +694,6 @@ package body Ada.Strings.Unbounded is\n          --  Result is an empty string, reuse shared empty string\n \n          if DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             DR := Empty_Shared_String'Access;\n \n          --  Otherwise, allocate new shared string and fill it\n@@ -743,7 +735,6 @@ package body Ada.Strings.Unbounded is\n          --  Result is empty, reuse shared empty string\n \n          if DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             Source.Reference := Empty_Shared_String'Access;\n             Unreference (SR);\n \n@@ -801,7 +792,6 @@ package body Ada.Strings.Unbounded is\n          --  effects if a program references an already-finalized object.\n \n          Object.Reference := Null_Unbounded_String.Reference;\n-         Reference (Object.Reference);\n          Unreference (SR);\n       end if;\n    end Finalize;\n@@ -862,7 +852,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty, reuse shared empty string\n \n       if Count = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Length of the string is the same as requested, reuse source shared\n@@ -912,7 +901,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty, reuse empty shared string\n \n       if Count = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1090,7 +1078,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty, reuse empty shared string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Inserted string is empty, reuse source shared string\n@@ -1132,7 +1119,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty string, reuse empty shared string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1197,7 +1183,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty string, reuse empty shared string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Result is same as source string, reuse source shared string\n@@ -1241,7 +1226,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty string, reuse empty shared string\n \n       if DL = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1276,6 +1260,10 @@ package body Ada.Strings.Unbounded is\n \n    procedure Reference (Item : not null Shared_String_Access) is\n    begin\n+      if Item = Empty_Shared_String'Access then\n+         return;\n+      end if;\n+\n       System.Atomic_Counters.Increment (Item.Counter);\n    end Reference;\n \n@@ -1348,7 +1336,6 @@ package body Ada.Strings.Unbounded is\n          --  Result is empty string, reuse empty shared string\n \n          if DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             DR := Empty_Shared_String'Access;\n \n          --  Otherwise allocate new shared string and fill it\n@@ -1397,7 +1384,6 @@ package body Ada.Strings.Unbounded is\n          --  Result is empty string, reuse empty shared string\n \n          if DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             Source.Reference := Empty_Shared_String'Access;\n             Unreference (SR);\n \n@@ -1442,7 +1428,6 @@ package body Ada.Strings.Unbounded is\n       --  In case of empty string, reuse empty shared string\n \n       if Source'Length = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Target.Reference := Empty_Shared_String'Access;\n \n       else\n@@ -1504,7 +1489,6 @@ package body Ada.Strings.Unbounded is\n       --  For empty result reuse empty shared string\n \n       if Count = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Result is whole source string, reuse source shared string\n@@ -1576,7 +1560,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty string, reuse empty shared string\n \n       if Count = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1619,7 +1602,6 @@ package body Ada.Strings.Unbounded is\n \n    begin\n       if Source'Length = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       else\n@@ -1636,7 +1618,6 @@ package body Ada.Strings.Unbounded is\n \n    begin\n       if Length = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       else\n@@ -1662,7 +1643,6 @@ package body Ada.Strings.Unbounded is\n       --  Nothing to translate, reuse empty shared string\n \n       if SR.Last = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Otherwise, allocate new shared string and fill it\n@@ -1726,7 +1706,6 @@ package body Ada.Strings.Unbounded is\n       --  Nothing to translate, reuse empty shared string\n \n       if SR.Last = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Otherwise, allocate new shared string and fill it\n@@ -1813,7 +1792,6 @@ package body Ada.Strings.Unbounded is\n       --  All blanks, reuse empty shared string\n \n       if Low = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       else\n@@ -1867,7 +1845,6 @@ package body Ada.Strings.Unbounded is\n       --  All blanks, reuse empty shared string\n \n       if Low = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1929,7 +1906,6 @@ package body Ada.Strings.Unbounded is\n       --  string.\n \n       if Low = 0 then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       else\n@@ -1940,7 +1916,6 @@ package body Ada.Strings.Unbounded is\n          --  is empty, reuse empty shared string.\n \n          if High = 0 or else DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             DR := Empty_Shared_String'Access;\n \n          --  Otherwise, allocate new shared string and fill it\n@@ -1973,7 +1948,6 @@ package body Ada.Strings.Unbounded is\n       --  string.\n \n       if Low = 0 then\n-         Reference (Empty_Shared_String'Access);\n          Source.Reference := Empty_Shared_String'Access;\n          Unreference (SR);\n \n@@ -1985,7 +1959,6 @@ package body Ada.Strings.Unbounded is\n          --  is empty, reuse empty shared string.\n \n          if High = 0 or else DL = 0 then\n-            Reference (Empty_Shared_String'Access);\n             Source.Reference := Empty_Shared_String'Access;\n             Unreference (SR);\n \n@@ -2029,7 +2002,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty slice, reuse empty shared string\n \n       elsif Low > High then\n-         Reference (Empty_Shared_String'Access);\n          DR := Empty_Shared_String'Access;\n \n       --  Otherwise, allocate new shared string and fill it\n@@ -2064,7 +2036,6 @@ package body Ada.Strings.Unbounded is\n       --  Result is empty slice, reuse empty shared string\n \n       elsif Low > High then\n-         Reference (Empty_Shared_String'Access);\n          Target.Reference := Empty_Shared_String'Access;\n          Unreference (TR);\n \n@@ -2101,14 +2072,12 @@ package body Ada.Strings.Unbounded is\n       Aux : Shared_String_Access := Item;\n \n    begin\n-      if System.Atomic_Counters.Decrement (Aux.Counter) then\n-\n-         --  Reference counter of Empty_Shared_String should never reach\n-         --  zero. We check here in case it wraps around.\n+      if Aux = Empty_Shared_String'Access then\n+         return;\n+      end if;\n \n-         if Aux /= Empty_Shared_String'Access then\n-            Free (Aux);\n-         end if;\n+      if System.Atomic_Counters.Decrement (Aux.Counter) then\n+         Free (Aux);\n       end if;\n    end Unreference;\n "}, {"sha": "5a5ad93a6e40b7e1d5888dcb0e47692582762572", "filename": "gcc/ada/libgnat/a-strunb__shared.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6711046ae71601a40636e768c8d9d7def57add/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6711046ae71601a40636e768c8d9d7def57add/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads?ref=3e6711046ae71601a40636e768c8d9d7def57add", "patch": "@@ -708,10 +708,12 @@ private\n    type Shared_String_Access is access all Shared_String;\n \n    procedure Reference (Item : not null Shared_String_Access);\n-   --  Increment reference counter\n+   --  Increment reference counter.\n+   --  Do nothing if Item points to Empty_Shared_String.\n \n    procedure Unreference (Item : not null Shared_String_Access);\n-   --  Decrement reference counter, deallocate Item when counter goes to zero\n+   --  Decrement reference counter, deallocate Item when counter goes to zero.\n+   --  Do nothing if Item points to Empty_Shared_String.\n \n    function Can_Be_Reused\n      (Item   : not null Shared_String_Access;"}]}