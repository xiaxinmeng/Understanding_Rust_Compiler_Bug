{"sha": "af95276348b27767973ac9c461cfbbd9b87d0ba1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5NTI3NjM0OGIyNzc2Nzk3M2FjOWM0NjFjZmJiZDliODdkMGJhMQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-04-29T10:44:57Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-04-29T10:44:57Z"}, "message": "longlong.h (umul_ppmm): Remove SHMEDIA checks.\n\ninclude/\n\t* longlong.h (umul_ppmm): Remove SHMEDIA checks.\n\t(__umulsidi3, count_leading_zeros): Remove SHMEDIA implementations.\n\ngcc/\n\t* common/config/sh/sh-common.c (sh_option_optimization_table): Remove\n\tremaining SH5 related settings.\n\t* config/sh/sh-protos.h (shmedia_cleanup_truncate,\n\tshmedia_prepare_call_address): Delete.\n\t* config/sh/sh.c (sh_print_operand, output_stack_adjust,\n\tDWARF_CIE_DATA_ALIGNMENT, LOCAL_ALIGNMENT): Update comments.\n\t* config/sh/sh.h (SUBTARGET_ASM_RELAX_SPEC,\n\tUNSUPPORTED_SH2A): Remove m5 checks.\n\t(sh_divide_strategy_e): Remove SH5 division strategies.\n\t(TARGET_PTRMEMFUNC_VBIT_LOCATION): Remove and use default.\n\t* config/sh/sh.md (divsf3): Reinstate define_expand pattern.\n\nFrom-SVN: r235632", "tree": {"sha": "3b7b5030425fe930e8c4d09102b473840491f667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b7b5030425fe930e8c4d09102b473840491f667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af95276348b27767973ac9c461cfbbd9b87d0ba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af95276348b27767973ac9c461cfbbd9b87d0ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af95276348b27767973ac9c461cfbbd9b87d0ba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af95276348b27767973ac9c461cfbbd9b87d0ba1/comments", "author": null, "committer": null, "parents": [{"sha": "1ab06af64c0115cb97c05780ab3ef6c6dab43bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab06af64c0115cb97c05780ab3ef6c6dab43bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab06af64c0115cb97c05780ab3ef6c6dab43bbb"}], "stats": {"total": 101, "additions": 39, "deletions": 62}, "files": [{"sha": "e79318d1045fad50139221685d1a1f5893bd73d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -1,3 +1,17 @@\n+2016-04-29  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* common/config/sh/sh-common.c (sh_option_optimization_table): Remove\n+\tremaining SH5 related settings.\n+\t* config/sh/sh-protos.h (shmedia_cleanup_truncate,\n+\tshmedia_prepare_call_address): Delete.\n+\t* config/sh/sh.c (sh_print_operand, output_stack_adjust,\n+\tDWARF_CIE_DATA_ALIGNMENT, LOCAL_ALIGNMENT): Update comments.\n+\t* config/sh/sh.h (SUBTARGET_ASM_RELAX_SPEC,\n+\tUNSUPPORTED_SH2A): Remove m5 checks.\n+\t(sh_divide_strategy_e): Remove SH5 division strategies.\n+\t(TARGET_PTRMEMFUNC_VBIT_LOCATION): Remove and use default.\n+\t* config/sh/sh.md (divsf3): Reinstate define_expand pattern.\n+\n 2016-04-29  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_rtx_costs): Update documentation."}, {"sha": "d7c91b8985d771fa5552449c82b89a1f319ed0cf", "filename": "gcc/common/config/sh/sh-common.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -31,15 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n static const struct default_options sh_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS_SPEED_ONLY, OPT_mdiv_, \"inv:minlat\", 1 },\n     { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n     { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n-    /* We can't meaningfully test TARGET_SHMEDIA here, because -m\n-       options haven't been parsed yet, hence we'd read only the\n-       default.  sh_target_reg_class will return NO_REGS if this is\n-       not SHMEDIA, so it's OK to always set\n-       flag_branch_target_load_optimize.  */\n-    { OPT_LEVELS_2_PLUS, OPT_fbranch_target_load_optimize, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "ea7e847300ded8fea39963f8efd3d4a0fc7ab4fc", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -392,11 +392,8 @@ extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree,\n \t\t\t\t     signed int, machine_mode);\n extern rtx sh_dwarf_register_span (rtx);\n \n-extern int shmedia_cleanup_truncate (rtx);\n-\n extern bool sh_contains_memref_p (rtx);\n extern bool sh_loads_bankedreg_p (rtx);\n-extern rtx shmedia_prepare_call_address (rtx fnaddr, int is_sibcall);\n extern int sh2a_get_function_vector_number (rtx);\n extern bool sh2a_is_function_vector_call (rtx);\n extern void sh_fix_range (const char *);"}, {"sha": "3d9ce9d9ecae1f851f323e5e1f4ed53ff8a3c39d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -1177,9 +1177,6 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       output_addr_const (stream, x);\n       break;\n     /* N.B.: %R / %S / %T adjust memory addresses by four.\n-       For SHMEDIA, that means they can be used to access the first and\n-       second 32 bit part of a 64 bit (or larger) value that\n-       might be held in floating point registers or memory.\n        While they can be used to access 64 bit parts of a larger value\n        held in general purpose registers, that won't work with memory -\n        neither for fp registers, since the frxx names are used.  */\n@@ -6748,15 +6745,12 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      rtx adj_reg, tmp_reg, mem;\n \t      \n \t      /* If we reached here, the most likely case is the (sibcall)\n-\t\t epilogue for non SHmedia.  Put a special push/pop sequence\n-\t\t for such case as the last resort.  This looks lengthy but\n-\t\t would not be problem because it seems to be very\n-\t\t rare.  */\n-\t      \n+\t\t epilogue.  Put a special push/pop sequence for such case as\n+\t\t the last resort.  This looks lengthy but would not be problem\n+\t\t because it seems to be very rare.  */\n \t      gcc_assert (epilogue_p);\n-\t      \n \n-\t       /* ??? There is still the slight possibility that r4 or\n+\t      /* ??? There is still the slight possibility that r4 or\n \t\t  r5 have been reserved as fixed registers or assigned\n \t\t  as global registers, and they change during an\n \t\t  interrupt.  There are possible ways to handle this:"}, {"sha": "9f104f0bc38dad6cd008d9314e27c2f2b3b22433", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -206,7 +206,7 @@ extern int code_for_indirect_jump_scratch;\n   SUBTARGET_EXTRA_SPECS\n \n #if TARGET_CPU_DEFAULT & MASK_HARD_SH4\n-#define SUBTARGET_ASM_RELAX_SPEC \"%{!m1:%{!m2:%{!m3*:%{!m5*:-isa=sh4-up}}}}\"\n+#define SUBTARGET_ASM_RELAX_SPEC \"%{!m1:%{!m2:%{!m3*::-isa=sh4-up}}}\"\n #else\n #define SUBTARGET_ASM_RELAX_SPEC \"%{m4*:-isa=sh4-up}\"\n #endif\n@@ -250,7 +250,7 @@ extern int code_for_indirect_jump_scratch;\n /* Strict nofpu means that the compiler should tell the assembler\n    to reject FPU instructions. E.g. from ASM inserts.  */\n #if TARGET_CPU_DEFAULT & MASK_HARD_SH4 && !(TARGET_CPU_DEFAULT & MASK_SH_E)\n-#define SUBTARGET_ASM_ISA_SPEC \"%{!m1:%{!m2:%{!m3*:%{m4-nofpu|!m4*:%{!m5:-isa=sh4-nofpu}}}}}\"\n+#define SUBTARGET_ASM_ISA_SPEC \"%{!m1:%{!m2:%{!m3*:%{m4-nofpu|!m4*::-isa=sh4-nofpu}}}}\"\n #else\n \n #define SUBTARGET_ASM_ISA_SPEC \\\n@@ -299,7 +299,7 @@ extern int code_for_indirect_jump_scratch;\n  \n #if TARGET_CPU_DEFAULT & MASK_HARD_SH2A\n #define UNSUPPORTED_SH2A IS_LITTLE_ENDIAN_OPTION \\\n-\"%{m2a*|!m1:%{!m2*:%{!m3*:%{!m4*:{!m5*:%eSH2a does not support little-endian}}}}}}\"\n+\"%{m2a*|!m1:%{!m2*:%{!m3*:%{!m4*:%eSH2a does not support little-endian}}}}}\"\n #else\n #define UNSUPPORTED_SH2A IS_LITTLE_ENDIAN_OPTION \\\n \"%{m2a*:%eSH2a does not support little-endian}}\"\n@@ -323,17 +323,6 @@ extern int code_for_indirect_jump_scratch;\n extern int assembler_dialect;\n \n enum sh_divide_strategy_e {\n-  /* SH5 strategies.  */\n-  SH_DIV_CALL,\n-  SH_DIV_CALL2,\n-  SH_DIV_FP, /* We could do this also for SH4.  */\n-  SH_DIV_INV,\n-  SH_DIV_INV_MINLAT,\n-  SH_DIV_INV20U,\n-  SH_DIV_INV20L,\n-  SH_DIV_INV_CALL,\n-  SH_DIV_INV_CALL2,\n-  SH_DIV_INV_FP,\n   /* SH1 .. SH4 strategies.  Because of the small number of registers\n      available, the compiler uses knowledge of the actual set of registers\n      being clobbered by the different functions called.  */\n@@ -390,10 +379,7 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n #define MIN_UNITS_PER_WORD 4\n \n /* Scaling factor for Dwarf data offsets for CFI information.\n-   The dwarf2out.c default would use -UNITS_PER_WORD, which is -8 for\n-   SHmedia; however, since we do partial register saves for the registers\n-   visible to SHcompact, and for target registers for SHMEDIA32, we have\n-   to allow saves that are only 4-byte aligned.  */\n+   The dwarf2out.c default would use -UNITS_PER_WORD.  */\n #define DWARF_CIE_DATA_ALIGNMENT -4\n \n /* Width in bits of a pointer.\n@@ -415,11 +401,6 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n    code of a function.  */\n #define FUNCTION_BOUNDARY (16)\n \n-/* On SH5, the lowest bit is used to indicate SHmedia functions, so\n-   the vbit must go into the delta field of\n-   pointers-to-member-functions.  */\n-#define TARGET_PTRMEMFUNC_VBIT_LOCATION (ptrmemfunc_vbit_in_pfn)\n-\n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY  32\n \n@@ -437,9 +418,7 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \n /* get_mode_alignment assumes complex values are always held in multiple\n    registers, but that is not the case on the SH; CQImode and CHImode are\n-   held in a single integer register.  SH5 also holds CSImode and SCmode\n-   values in integer registers.  This is relevant for argument passing on\n-   SHcompact as we use a stack temp in order to pass CSImode by reference.  */\n+   held in a single integer register.  */\n #define LOCAL_ALIGNMENT(TYPE, ALIGN) \\\n   ((GET_MODE_CLASS (TYPE_MODE (TYPE)) == MODE_COMPLEX_INT \\\n     || GET_MODE_CLASS (TYPE_MODE (TYPE)) == MODE_COMPLEX_FLOAT) \\"}, {"sha": "ef903034616ff401e65865396871084a7f4b8310", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -9300,6 +9300,16 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n+(define_expand \"divsf3\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\")\n+\t(div:SF (match_operand:SF 1 \"fp_arith_reg_operand\")\n+\t\t(match_operand:SF 2 \"fp_arith_reg_operand\")))]\n+  \"TARGET_SH2E\"\n+{\n+  emit_insn (gen_divsf3_i (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n (define_insn \"divsf3_i\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")"}, {"sha": "92f4090d41388bcaabf0ca08d1c7a88a344eae7c", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -1,3 +1,8 @@\n+2016-04-29  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* longlong.h (umul_ppmm): Remove SHMEDIA checks.\n+\t(__umulsidi3, count_leading_zeros): Remove SHMEDIA implementations.\n+\n 2016-04-29  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* longlong.h (add_ssaaaa): Replace obsolete 'J' constraint with"}, {"sha": "b25a594620559b2016e3e72ed4377b4a8462edec", "filename": "include/longlong.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95276348b27767973ac9c461cfbbd9b87d0ba1/include%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95276348b27767973ac9c461cfbbd9b87d0ba1/include%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flonglong.h?ref=af95276348b27767973ac9c461cfbbd9b87d0ba1", "patch": "@@ -1086,7 +1086,7 @@ extern UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif\n \n-#if defined(__sh__) && (!defined (__SHMEDIA__) || !__SHMEDIA__) && W_TYPE_SIZE == 32\n+#if defined(__sh__) && W_TYPE_SIZE == 32\n #ifndef __sh1__\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\t\t\t\t\t\t\t\t\\\n@@ -1159,21 +1159,6 @@ extern UDItype __umulsidi3 (USItype, USItype);\n \n #endif /* __sh__ */\n \n-#if defined (__SH5__) && defined (__SHMEDIA__) && __SHMEDIA__ && W_TYPE_SIZE == 32\n-#define __umulsidi3(u,v) ((UDItype)(USItype)u*(USItype)v)\n-#define count_leading_zeros(count, x) \\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      UDItype x_ = (USItype)(x);\t\t\t\t\t\\\n-      SItype c_;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      __asm__ (\"nsb %1, %0\" : \"=r\" (c_) : \"r\" (x_));\t\t\t\\\n-      (count) = c_ - 31;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-#define COUNT_LEADING_ZEROS_0 32\n-#endif\n-\n #if defined (__sparc__) && !defined (__arch64__) && !defined (__sparcv9) \\\n     && W_TYPE_SIZE == 32\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\"}]}