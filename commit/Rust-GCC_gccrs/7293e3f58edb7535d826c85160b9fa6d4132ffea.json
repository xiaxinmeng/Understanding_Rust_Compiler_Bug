{"sha": "7293e3f58edb7535d826c85160b9fa6d4132ffea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5M2UzZjU4ZWRiNzUzNWQ4MjZjODUxNjBiOWZhNmQ0MTMyZmZlYQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-03-16T18:48:26Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-03-16T18:48:26Z"}, "message": "re PR target/84876 (ICE on invalid code in lra_assign at gcc/lra-assigns.c:1601 since r258504)\n\n2018-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/84876\n\t* lra-assigns.c (lra_split_hard_reg_for): Don't use\n\tregno_allocno_class_array and sorted_pseudos.\n\t* lra-constraints.c (spill_hard_reg_in_range): Ignore hard regs in\n\tinsns where regno is used.\n\n2018-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/84876\n\t* gcc.target/i386/pr84876.c: New test.\n\nFrom-SVN: r258602", "tree": {"sha": "e912a6237dfa23ea59dabc33b01717104a47b0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e912a6237dfa23ea59dabc33b01717104a47b0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7293e3f58edb7535d826c85160b9fa6d4132ffea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7293e3f58edb7535d826c85160b9fa6d4132ffea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7293e3f58edb7535d826c85160b9fa6d4132ffea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7293e3f58edb7535d826c85160b9fa6d4132ffea/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c011faee33f1f52a28b561d6879b253ddc86c9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c011faee33f1f52a28b561d6879b253ddc86c9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c011faee33f1f52a28b561d6879b253ddc86c9a4"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "b6037d27c80ad9d7fb7376cd5df202c40d8867ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7293e3f58edb7535d826c85160b9fa6d4132ffea", "patch": "@@ -1,3 +1,11 @@\n+2018-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/84876\n+\t* lra-assigns.c (lra_split_hard_reg_for): Don't use\n+\tregno_allocno_class_array and sorted_pseudos.\n+\t* lra-constraints.c (spill_hard_reg_in_range): Ignore hard regs in\n+\tinsns where regno is used.\n+\n 2018-03-16  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/84833"}, {"sha": "c0e370bbab025f5a9ba8f04ec6776d5c4e7c23ef", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=7293e3f58edb7535d826c85160b9fa6d4132ffea", "patch": "@@ -1737,41 +1737,46 @@ find_reload_regno_insns (int regno, rtx_insn * &start, rtx_insn * &finish)\n bool\n lra_split_hard_reg_for (void)\n {\n-  int i, regno, n;\n+  int i, regno;\n   rtx_insn *insn, *first, *last;\n   unsigned int u;\n   bitmap_iterator bi;\n+  enum reg_class rclass;\n   int max_regno = max_reg_num ();\n   /* We did not assign hard regs to reload pseudos after two\n      iterations.  Either it's an asm and something is wrong with the\n      constraints, or we have run out of spill registers; error out in\n      either case.  */\n   bool asm_p = false;\n-  bitmap_head failed_reload_insns;\n+  bitmap_head failed_reload_insns, failed_reload_pseudos;\n   \n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file,\n \t     \"\\n****** Splitting a hard reg after assignment #%d: ******\\n\\n\",\n \t     lra_assignment_iter);\n-  for (n = 0, i = lra_constraint_new_regno_start; i < max_regno; i++)\n+  bitmap_initialize (&failed_reload_pseudos, &reg_obstack);\n+  for (i = lra_constraint_new_regno_start; i < max_regno; i++)\n     if (reg_renumber[i] < 0 && lra_reg_info[i].nrefs != 0\n-\t&& regno_allocno_class_array[i] != NO_REGS\n+\t&& (rclass = lra_get_allocno_class (i)) != NO_REGS\n \t&& ! bitmap_bit_p (&non_reload_pseudos, i))\n       {\n-\tsorted_pseudos[n++] = i;\n \tif (! find_reload_regno_insns (i, first, last))\n \t  continue;\n-\tif (spill_hard_reg_in_range (i, regno_allocno_class_array[i],\n-\t\t\t\t     first, last))\n-\t  return true;\n+\tif (spill_hard_reg_in_range (i, rclass, first, last))\n+\t  {\n+\t    bitmap_clear (&failed_reload_pseudos);\n+\t    return true;\n+\t  }\n+\tbitmap_set_bit (&failed_reload_pseudos, i);\n       }\n   bitmap_initialize (&failed_reload_insns, &reg_obstack);\n-  for (i = 0; i < n; i++)\n+  EXECUTE_IF_SET_IN_BITMAP (&failed_reload_pseudos, 0, u, bi)\n     {\n-      regno = sorted_pseudos[i];\n+      regno = u;\n       bitmap_ior_into (&failed_reload_insns,\n \t\t       &lra_reg_info[regno].insn_bitmap);\n-      lra_setup_reg_renumber (regno, ira_class_hard_regs[regno_allocno_class_array[regno]][0], false);\n+      lra_setup_reg_renumber\n+\t(regno, ira_class_hard_regs[lra_get_allocno_class (regno)][0], false);\n     }\n   EXECUTE_IF_SET_IN_BITMAP (&failed_reload_insns, 0, u, bi)\n     {\n@@ -1805,5 +1810,7 @@ lra_split_hard_reg_for (void)\n \t  fatal_insn (\"this is the insn:\", insn);\n \t}\n     }\n+  bitmap_clear (&failed_reload_pseudos);\n+  bitmap_clear (&failed_reload_insns);\n   return false;\n }"}, {"sha": "31faefab9c2a083167a0786c3dca819135d41d40", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=7293e3f58edb7535d826c85160b9fa6d4132ffea", "patch": "@@ -5680,13 +5680,30 @@ spill_hard_reg_in_range (int regno, enum reg_class rclass, rtx_insn *from, rtx_i\n   int i, hard_regno;\n   int rclass_size;\n   rtx_insn *insn;\n+  unsigned int uid;\n+  bitmap_iterator bi;\n+  HARD_REG_SET ignore;\n   \n   lra_assert (from != NULL && to != NULL);\n+  CLEAR_HARD_REG_SET (ignore);\n+  EXECUTE_IF_SET_IN_BITMAP (&lra_reg_info[regno].insn_bitmap, 0, uid, bi)\n+    {\n+      lra_insn_recog_data_t id = lra_insn_recog_data[uid];\n+      struct lra_static_insn_data *static_id = id->insn_static_data;\n+      struct lra_insn_reg *reg;\n+      \n+      for (reg = id->regs; reg != NULL; reg = reg->next)\n+\tif (reg->regno <= FIRST_PSEUDO_REGISTER)\n+\t  SET_HARD_REG_BIT (ignore, reg->regno);\n+      for (reg = static_id->hard_regs; reg != NULL; reg = reg->next)\n+\tSET_HARD_REG_BIT (ignore, reg->regno);\n+    }\n   rclass_size = ira_class_hard_regs_num[rclass];\n   for (i = 0; i < rclass_size; i++)\n     {\n       hard_regno = ira_class_hard_regs[rclass][i];\n-      if (! TEST_HARD_REG_BIT (lra_reg_info[regno].conflict_hard_regs, hard_regno))\n+      if (! TEST_HARD_REG_BIT (lra_reg_info[regno].conflict_hard_regs, hard_regno)\n+\t  || TEST_HARD_REG_BIT (ignore, hard_regno))\n \tcontinue;\n       for (insn = from; insn != NEXT_INSN (to); insn = NEXT_INSN (insn))\n \tif (bitmap_bit_p (&lra_reg_info[hard_regno].insn_bitmap,"}, {"sha": "5d353f4e41f98c8d914a16864188e4810333af8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7293e3f58edb7535d826c85160b9fa6d4132ffea", "patch": "@@ -1,3 +1,8 @@\n+2018-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/84876\n+\t* gcc.target/i386/pr84876.c: New test.\n+\n 2018-03-16  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/84833"}, {"sha": "f2d8430100326a6d4fec7ae18e7d8c3f4f3375e6", "filename": "gcc/testsuite/gcc.target/i386/pr84876.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84876.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7293e3f58edb7535d826c85160b9fa6d4132ffea/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84876.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84876.c?ref=7293e3f58edb7535d826c85160b9fa6d4132ffea", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-w\" } */\n+\n+__int128 test (__int128 a)\n+{\n+  asm (\"\" : \"+v\" (a) : : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", /* { dg-error \"'asm' operand has impossible constraints\" } */\n+\t\t\t \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\",\n+\t\t\t \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\",\n+\t\t\t \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n+  return a;\n+}"}]}