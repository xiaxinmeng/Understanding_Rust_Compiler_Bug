{"sha": "354b734b2c57333ecddf35bca8f4d81c87f0c34d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0YjczNGIyYzU3MzMzZWNkZGYzNWJjYThmNGQ4MWM4N2YwYzM0ZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-25T22:06:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-25T22:06:56Z"}, "message": "Fix Windows NT problem\n\nFrom-SVN: r11105", "tree": {"sha": "2f49c30e77ab42e38eec92c62065bd087bc6a205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f49c30e77ab42e38eec92c62065bd087bc6a205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354b734b2c57333ecddf35bca8f4d81c87f0c34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354b734b2c57333ecddf35bca8f4d81c87f0c34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354b734b2c57333ecddf35bca8f4d81c87f0c34d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354b734b2c57333ecddf35bca8f4d81c87f0c34d/comments", "author": null, "committer": null, "parents": [{"sha": "e98bb98212164b1c7485ee93f011a3e8860eb54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98bb98212164b1c7485ee93f011a3e8860eb54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98bb98212164b1c7485ee93f011a3e8860eb54d"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "08fa566eb0479477f673568690558e966c5c2737", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b734b2c57333ecddf35bca8f4d81c87f0c34d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b734b2c57333ecddf35bca8f4d81c87f0c34d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=354b734b2c57333ecddf35bca8f4d81c87f0c34d", "patch": "@@ -1774,17 +1774,15 @@ typedef struct rs6000_args\n { if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\t\\\n     && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n     && (unsigned) (INTVAL (XEXP (X, 1)) + 0x8000) >= 0x10000)\t\t\\\n-    { int high_int, low_int;\t\t\t\t\t\t\\\n-      high_int = INTVAL (XEXP (X, 1)) >> 16;\t\t\t\t\\\n+    { HOST_WIDE_INT high_int, low_int;\t\t\t\t\t\\\n+      rtx sum;\t\t\t\t\t\t\t\t\\\n+      high_int = INTVAL (XEXP (X, 1)) & (~ (HOST_WIDE_INT) 0xffff);\t\\\n       low_int = INTVAL (XEXP (X, 1)) & 0xffff;\t\t\t\t\\\n       if (low_int & 0x8000)\t\t\t\t\t\t\\\n-\thigh_int += 1, low_int |= 0xffff0000;\t\t\t\t\\\n-      (X) = gen_rtx (PLUS, Pmode,\t\t\t\t\t\\\n-\t\t     force_operand\t\t\t\t\t\\\n-\t\t     \t(gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\\\n-\t\t\t\t  gen_rtx (CONST_INT, VOIDmode,\t\t\\\n-\t\t\t\t\t\t      high_int << 16)), 0), \\\n-\t\t     gen_rtx (CONST_INT, VOIDmode, low_int));\t\t\\\n+\thigh_int += 0x10000, low_int |= ((HOST_WIDE_INT) -1) << 16;\t\\\n+      sum = force_operand (gen_rtx (PLUS, Pmode, XEXP (X, 0),\t\t\\\n+\t\t\t\t    GEN_INT (high_int)), 0);\t\t\\\n+      (X) = gen_rtx (PLUS, Pmode, sum, GEN_INT (low_int));\t\t\\\n       goto WIN;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n@@ -2772,6 +2770,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n    (no need to use the default) */\n #define MACHINE_issue_rate\n \n+/* General optimization flags.  */\n+extern int optimize;\n+extern int flag_expensive_optimizations;\n+\n /* Declare functions in rs6000.c */\n extern void output_options ();\n extern void rs6000_override_options ();"}, {"sha": "abb6043fb0d19d098dee5325782cb7742770e1bc", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b734b2c57333ecddf35bca8f4d81c87f0c34d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b734b2c57333ecddf35bca8f4d81c87f0c34d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=354b734b2c57333ecddf35bca8f4d81c87f0c34d", "patch": "@@ -4780,20 +4780,30 @@\n       if (sym && GET_CODE (const_term) == CONST_INT\n \t  && (GET_CODE (sym) == SYMBOL_REF || GET_CODE (sym) == LABEL_REF))\n \t{\n-\t  emit_insn (gen_movsi (operands[0], sym));\n+\t  unsigned HOST_WIDE_INT value = INTVAL (const_term);\n+\t  int new_reg_p = (flag_expensive_optimizations\n+\t\t\t   && !reload_completed\n+\t\t\t   && !reload_in_progress);\n+\t  rtx tmp1 = (new_reg_p && value != 0) ? gen_reg_rtx (SImode) : operands[0];\n+\n+\t  emit_insn (gen_movsi (tmp1, sym));\n \t  if (INTVAL (const_term) != 0)\n \t    {\n-\t      unsigned HOST_WIDE_INT value = INTVAL (const_term);\n \t      if (value + 0x8000 < 0x10000)\n-\t\temit_insn (gen_addsi3 (operands[0], operands[0], GEN_INT (value)));\n+\t\temit_insn (gen_addsi3 (operands[0], tmp1, GEN_INT (value)));\n+\n \t      else\n \t\t{\n-\t\t  emit_insn (gen_addsi3 (operands[0], operands[0],\n-\t\t\t\t\t GEN_INT ((value >> 16) + ((value >> 15) & 1))));\n+\t\t  HOST_WIDE_INT high_int = value & (~ (HOST_WIDE_INT) 0xffff);\n+\t\t  HOST_WIDE_INT low_int = value & 0xffff;\n+\t\t  rtx tmp2 = (!new_reg_p || !low_int) ? operands[0] : gen_reg_rtx (Pmode);\n+\n+\t\t  if (low_int & 0x8000)\n+\t\t    high_int += 0x10000, low_int |= ((HOST_WIDE_INT) -1) << 16;\n \n-\t\t  if ((value & 0xffff) != 0)\n-\t\t    emit_insn (gen_addsi3 (operands[0], operands[0],\n-\t\t\t\t\t   GEN_INT (value & 0xffff)));\n+\t\t  emit_insn (gen_addsi3 (tmp2, tmp1, GEN_INT (high_int)));\n+\t\t  if (low_int)\n+\t\t    emit_insn (gen_addsi3 (operands[0], tmp2, GEN_INT (low_int)));\n \t\t}\n \t    }\n \t  DONE;"}]}