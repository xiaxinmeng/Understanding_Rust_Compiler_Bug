{"sha": "84a900c9665efdb29d2a80275928fa40e2ab42a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhOTAwYzk2NjVlZmRiMjlkMmE4MDI3NTkyOGZhNDBlMmFiNDJhNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2009-07-13T16:15:55Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2009-07-13T16:15:55Z"}, "message": "re PR c++/22154 ([DR 382] qualified names should allow typename keyword in front of it (even in non-templates))\n\n2009-07-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/22154\n        * parser.c (cp_parser_elaborated_type_specifier): Accept typename in\n        front of qualified names.\n\n2009-07-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/22154\n        * g++.old-deja/g++.pt/typename10.C: Update for DR 382, typename in\n        front of qualified names are allowed.\n        * g++.dg/parse/crash10.C: Likewise.\n        * g++.dg/parse/error15.C: Likewise.\n        * g++.dg/parse/typename9.C: Likewise.\n        * g++.dg/parse/error8.C: Likewise.\n\nFrom-SVN: r149590", "tree": {"sha": "16d05628c5042c8f85ea33665d228fbcde12321d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d05628c5042c8f85ea33665d228fbcde12321d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84a900c9665efdb29d2a80275928fa40e2ab42a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a900c9665efdb29d2a80275928fa40e2ab42a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a900c9665efdb29d2a80275928fa40e2ab42a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a900c9665efdb29d2a80275928fa40e2ab42a4/comments", "author": null, "committer": null, "parents": [{"sha": "acbdc378b68627af9126064e556981989cff13c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbdc378b68627af9126064e556981989cff13c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbdc378b68627af9126064e556981989cff13c3"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "97e5b3b01718acdcb4b5c0496c20c6ac031e2b19", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/22154\n+\t* parser.c (cp_parser_elaborated_type_specifier): Accept typename in\n+\tfront of qualified names.\n+\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36628"}, {"sha": "94fba02aa343cfa9e990f3b421f71db57a033624", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -11591,6 +11591,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n   tree identifier;\n   tree type = NULL_TREE;\n   tree attributes = NULL_TREE;\n+  tree globalscope;\n   cp_token *token = NULL;\n \n   /* See if we're looking at the `enum' keyword.  */\n@@ -11622,9 +11623,6 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n       cp_lexer_consume_token (parser->lexer);\n       /* Remember that it's a `typename' type.  */\n       tag_type = typename_type;\n-      /* The `typename' keyword is only allowed in templates.  */\n-      if (!processing_template_decl)\n-\tpermerror (input_location, \"using %<typename%> outside of template\");\n     }\n   /* Otherwise it must be a class-key.  */\n   else\n@@ -11637,10 +11635,10 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n     }\n \n   /* Look for the `::' operator.  */\n-  cp_parser_global_scope_opt (parser,\n-\t\t\t      /*current_scope_valid_p=*/false);\n+  globalscope =  cp_parser_global_scope_opt (parser,\n+\t\t\t\t\t     /*current_scope_valid_p=*/false);\n   /* Look for the nested-name-specifier.  */\n-  if (tag_type == typename_type)\n+  if (tag_type == typename_type && !globalscope)\n     {\n       if (!cp_parser_nested_name_specifier (parser,\n \t\t\t\t\t   /*typename_keyword_p=*/true,"}, {"sha": "15c06b49e08aaecdbcaf2acee0e9459cef9f9673", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -1,3 +1,13 @@\n+2009-07-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/22154\n+\t* g++.old-deja/g++.pt/typename10.C: Update for DR 382, typename in\n+\tfront of qualified names are allowed.\n+\t* g++.dg/parse/crash10.C: Likewise.\n+\t* g++.dg/parse/error15.C: Likewise.\n+\t* g++.dg/parse/typename9.C: Likewise.\n+\t* g++.dg/parse/error8.C: Likewise.\n+\n 2009-07-13  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40646"}, {"sha": "712e876748749b6146ae1e6915a165502a02e15f", "filename": "gcc/testsuite/g++.dg/parse/crash10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -9,5 +9,5 @@\n \n class \n {\n-  typename::  // { dg-error \"\" \"\" }\n+  typename::\n ; // { dg-error \"\" \"\" }"}, {"sha": "2352193bcd681e2ffb3e9d6a09a9c3158f913360", "filename": "gcc/testsuite/g++.dg/parse/error15.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror15.C?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -14,7 +14,7 @@ N::A f2;              // { dg-error \"1:invalid use of template-name 'N::A' witho\n N::INVALID f3;        // { dg-error \"1:'INVALID' in namespace 'N' does not name a type\" }\n N::C::INVALID f4;     // { dg-error \"1:'INVALID' in class 'N::C' does not name a type\" }\n N::K f6;              // { dg-error \"1:'K' in namespace 'N' does not name a type\" }\n-typename N::A f7;     // { dg-error \"1:using 'typename' outside of template\" \"1\" }\n+typename N::A f7;\n // { dg-error \"13:invalid use of template-name 'N::A' without an argument list\" \"13\" { target *-*-* } 17 }\n // { dg-error \"17:invalid type in declaration before ';' token\" \"17\" { target *-*-* } 17 }\n \n@@ -24,7 +24,7 @@ struct B\n   N::INVALID f3;      // { dg-error \"3:'INVALID' in namespace 'N' does not name a type\" }\n   N::C::INVALID f4;   // { dg-error \"3:'INVALID' in class 'N::C' does not name a type\" }\n   N::K f6;            // { dg-error \"3:'K' in namespace 'N' does not name a type\" }\n-  typename N::A f7;   // { dg-error \"3:using 'typename' outside of template\" }\n+  typename N::A f7;\n // { dg-error \"15:invalid use of template-name 'N::A' without an argument list\" \"15\" { target *-*-* } 27 }\n };\n "}, {"sha": "6d3bf5a856ad1296db8faa8c2ce1be6f87b2ba77", "filename": "gcc/testsuite/g++.dg/parse/error8.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -4,7 +4,6 @@\n struct A { friend typename struct B; };\n \n \n-// { dg-error \"19:using 'typename' outside of template\" \"\" { target *-*-* } 4 }\n // { dg-error \"28:expected nested-name-specifier before 'struct'\" \"\" { target *-*-* } 4 }\n // { dg-error \"35:multiple types in one declaration\" \"\" { target *-*-* } 4 }\n // { dg-error \"12:friend declaration does not name a class or function\" \"\" { target *-*-* } 4 }"}, {"sha": "8d77072197b27f5547956bfa0db89ffbbf81e4b8", "filename": "gcc/testsuite/g++.dg/parse/typename9.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename9.C?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -1,3 +1,6 @@\n+// check that using a qualified name with a typename does\n+// not report an error.\n+\n struct A { typedef int X; };\n \n-int i = typename A::X(); // { dg-error \"typename\" }\n+int i = typename A::X();"}, {"sha": "cdd9850ac0dbe8a3a9daa6bd7c84a6f7d43644d2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a900c9665efdb29d2a80275928fa40e2ab42a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename10.C?ref=84a900c9665efdb29d2a80275928fa40e2ab42a4", "patch": "@@ -4,4 +4,4 @@ struct S {\n   typedef int I;\n };\n \n-void f(typename S::I); // { dg-error \"\" } using typename outside of template\n+void f(typename S::I);"}]}