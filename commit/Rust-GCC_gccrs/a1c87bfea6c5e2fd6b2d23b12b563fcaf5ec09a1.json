{"sha": "a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjODdiZmVhNmM1ZTJmZDZiMmQyM2IxMmI1NjNmY2FmNWVjMDlhMQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T11:14:33Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T12:47:51Z"}, "message": "Add initial support to specify Super Traits\n\nSuper Traits are simply TraitBounds upon the implict Self TypeParameter,\nsuch that a trait with a super trait bound almost ends up looking like this\n\n  trait A : B { } -> trait A where Self: B { }", "tree": {"sha": "1294bbc35cc86fffd2ef15e66f3b9fbce55eee06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1294bbc35cc86fffd2ef15e66f3b9fbce55eee06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68a772a4a3010b62dae7231b1d841654dbb66d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68a772a4a3010b62dae7231b1d841654dbb66d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68a772a4a3010b62dae7231b1d841654dbb66d3"}], "stats": {"total": 134, "additions": 129, "deletions": 5}, "files": [{"sha": "b0e2c0d93ec7814bccd33c8971b5bfcaf0e66534", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -113,10 +113,6 @@ class TraitResolver : public TypeCheckBase\n \treturn tref;\n       }\n \n-    // Check if there is a super-trait, and apply this bound to the Self\n-    // TypeParam\n-    // FIXME\n-\n     TyTy::BaseType *self = nullptr;\n     std::vector<TyTy::SubstitutionParamMapping> substitutions;\n     for (auto &generic_param : trait_reference->get_generic_params ())\n@@ -147,6 +143,38 @@ class TraitResolver : public TypeCheckBase\n \n     rust_assert (self != nullptr);\n \n+    // Check if there is a super-trait, and apply this bound to the Self\n+    // TypeParam\n+    std::vector<TyTy::TypeBoundPredicate> specified_bounds;\n+\n+    // They also inherit themselves as a bound this enables a trait item to\n+    // reference other Self::trait_items\n+    specified_bounds.push_back (\n+      TyTy::TypeBoundPredicate (trait_reference->get_mappings ().get_defid (),\n+\t\t\t\ttrait_reference->get_locus ()));\n+\n+    if (trait_reference->has_type_param_bounds ())\n+      {\n+\tfor (auto &bound : trait_reference->get_type_param_bounds ())\n+\t  {\n+\t    if (bound->get_bound_type ()\n+\t\t== HIR::TypeParamBound::BoundType::TRAITBOUND)\n+\t      {\n+\t\tHIR::TraitBound *b\n+\t\t  = static_cast<HIR::TraitBound *> (bound.get ());\n+\n+\t\t// FIXME this might be recursive we need a check for that\n+\n+\t\tTraitReference *trait = resolve_trait_path (b->get_path ());\n+\t\tTyTy::TypeBoundPredicate predicate (\n+\t\t  trait->get_mappings ().get_defid (), bound->get_locus ());\n+\n+\t\tspecified_bounds.push_back (std::move (predicate));\n+\t      }\n+\t  }\n+      }\n+    self->inherit_bounds (specified_bounds);\n+\n     std::vector<TraitItemReference> item_refs;\n     for (auto &item : trait_reference->get_trait_items ())\n       {"}, {"sha": "398b531ede1b9919c8ad88fb514ca961b55c938f", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -99,7 +99,14 @@ BaseType::bounds_compatible (const BaseType &other, Location locus) const\n void\n BaseType::inherit_bounds (const BaseType &other)\n {\n-  for (auto &bound : other.get_specified_bounds ())\n+  inherit_bounds (other.get_specified_bounds ());\n+}\n+\n+void\n+BaseType::inherit_bounds (\n+  const std::vector<TyTy::TypeBoundPredicate> &specified_bounds)\n+{\n+  for (auto &bound : specified_bounds)\n     {\n       add_bound (bound);\n     }"}, {"sha": "867dc379775a13392d52484cc3ce73debbde9247", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -257,6 +257,9 @@ class BaseType : public TypeBoundsMappings\n \n   void inherit_bounds (const BaseType &other);\n \n+  void inherit_bounds (\n+    const std::vector<TyTy::TypeBoundPredicate> &specified_bounds);\n+\n   virtual bool is_unit () const { return false; }\n \n   virtual bool is_concrete () const { return true; }"}, {"sha": "afc4a86de6d5ed496b26417cc5add5964b959f20", "filename": "gcc/testsuite/rust/compile/torture/traits16.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits16.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits16.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits16.rs?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -0,0 +1,20 @@\n+trait A {\n+    fn a() -> i32 {\n+        123\n+    }\n+\n+    fn b() -> i32 {\n+        Self::a() + 456\n+    }\n+}\n+\n+struct S;\n+impl A for S {}\n+\n+fn main() {\n+    let a;\n+    a = S::a();\n+\n+    let b;\n+    b = S::b();\n+}"}, {"sha": "6da8bcb0082d600598031c24efb731f0d7f92a74", "filename": "gcc/testsuite/rust/compile/torture/traits17.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits17.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits17.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits17.rs?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -0,0 +1,23 @@\n+trait A {\n+    fn a() -> i32 {\n+        123\n+    }\n+}\n+\n+trait B: A {\n+    fn b() -> i32 {\n+        Self::a() + 456\n+    }\n+}\n+\n+struct S;\n+impl A for S {}\n+impl B for S {}\n+\n+fn main() {\n+    let a;\n+    a = S::a();\n+\n+    let b;\n+    b = S::b();\n+}"}, {"sha": "accfa9d0a36b628f7156802bc866f1cb1bfb76b8", "filename": "gcc/testsuite/rust/execute/torture/trait3.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait3.rs?ref=a1c87bfea6c5e2fd6b2d23b12b563fcaf5ec09a1", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-output \"123, 777\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait A {\n+    fn a() -> i32 {\n+        123\n+    }\n+}\n+\n+trait B: A {\n+    fn b() -> i32 {\n+        <T as A>::a() + 456\n+    }\n+}\n+\n+struct T;\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+\n+impl A for T {\n+    fn a() -> i32 {\n+        321\n+    }\n+}\n+\n+struct S;\n+impl A for S {}\n+impl B for S {}\n+\n+fn main() -> i32 {\n+    let aa = S::a();\n+    let bb = S::b();\n+\n+    unsafe {\n+        let a = \"%i, %i\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, aa, bb);\n+    }\n+    0\n+}"}]}