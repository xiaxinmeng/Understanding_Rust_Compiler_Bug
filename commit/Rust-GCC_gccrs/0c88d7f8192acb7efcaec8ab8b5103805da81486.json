{"sha": "0c88d7f8192acb7efcaec8ab8b5103805da81486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4OGQ3ZjgxOTJhY2I3ZWZjYWVjOGFiOGI1MTAzODA1ZGE4MTQ4Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-04T23:54:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-04T23:54:43Z"}, "message": "verify.cc (_Jv_BytecodeVerifier::linked_utf8): New structure.\n\n\t* verify.cc (_Jv_BytecodeVerifier::linked_utf8): New structure.\n\t(_Jv_BytecodeVerifier::utf8_list): New field.\n\t(_Jv_BytecodeVerifier::_Jv_BytecodeVerifier): Initialize it.\n\t(_Jv_BytecodeVerifier::~_Jv_BytecodeVerifier): Free it.\n\t(_Jv_BytecodeVerifier::make_utf8_const): New method.\n\t(_Jv_BytecodeVerifier::get_one_type): Use it.\n\t(_Jv_BytecodeVerifier::type::merge): When using local semantics,\n\tif the destination type is already unsuitable then we didn't\n\tchange.\n\nFrom-SVN: r47634", "tree": {"sha": "7895ca4152480f8409c79ab85fc6a7bf4b5b78aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7895ca4152480f8409c79ab85fc6a7bf4b5b78aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c88d7f8192acb7efcaec8ab8b5103805da81486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c88d7f8192acb7efcaec8ab8b5103805da81486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c88d7f8192acb7efcaec8ab8b5103805da81486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c88d7f8192acb7efcaec8ab8b5103805da81486/comments", "author": null, "committer": null, "parents": [{"sha": "7c1e833675a2de199291f5a2a1949b2e2d1b157a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1e833675a2de199291f5a2a1949b2e2d1b157a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1e833675a2de199291f5a2a1949b2e2d1b157a"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "e2b46288c578ce1282a8b1d1f11881ae68755615", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d7f8192acb7efcaec8ab8b5103805da81486/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d7f8192acb7efcaec8ab8b5103805da81486/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0c88d7f8192acb7efcaec8ab8b5103805da81486", "patch": "@@ -1,5 +1,15 @@\n 2001-12-04  Tom Tromey  <tromey@redhat.com>\n \n+\t* verify.cc (_Jv_BytecodeVerifier::linked_utf8): New structure.\n+\t(_Jv_BytecodeVerifier::utf8_list): New field.\n+\t(_Jv_BytecodeVerifier::_Jv_BytecodeVerifier): Initialize it.\n+\t(_Jv_BytecodeVerifier::~_Jv_BytecodeVerifier): Free it.\n+\t(_Jv_BytecodeVerifier::make_utf8_const): New method.\n+\t(_Jv_BytecodeVerifier::get_one_type): Use it.\n+\t(_Jv_BytecodeVerifier::type::merge): When using local semantics,\n+\tif the destination type is already unsuitable then we didn't\n+\tchange.\n+\n \t* defineclass.cc (read_one_method_attribute): `end_pc' for an\n \texception can be equal to code length.\n \t* verify.cc (_Jv_BytecodeVerifier::verify_instructions_0): Removed"}, {"sha": "a00c4d49448401818dc4d906ab1db162135b142c", "filename": "libjava/verify.cc", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c88d7f8192acb7efcaec8ab8b5103805da81486/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c88d7f8192acb7efcaec8ab8b5103805da81486/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=0c88d7f8192acb7efcaec8ab8b5103805da81486", "patch": "@@ -50,6 +50,7 @@ class _Jv_BytecodeVerifier\n   struct state;\n   struct type;\n   struct subr_info;\n+  struct linked_utf8;\n \n   // The current PC.\n   int PC;\n@@ -93,6 +94,34 @@ class _Jv_BytecodeVerifier\n   // This method.\n   _Jv_InterpMethod *current_method;\n \n+  // A linked list of utf8 objects we allocate.  This is really ugly,\n+  // but without this our utf8 objects would be collected.\n+  linked_utf8 *utf8_list;\n+\n+  struct linked_utf8\n+  {\n+    _Jv_Utf8Const *val;\n+    linked_utf8 *next;\n+  };\n+\n+  _Jv_Utf8Const *make_utf8_const (char *s, int len)\n+  {\n+    _Jv_Utf8Const *val = _Jv_makeUtf8Const (s, len);\n+    _Jv_Utf8Const *r = (_Jv_Utf8Const *) _Jv_Malloc (sizeof (_Jv_Utf8Const)\n+\t\t\t\t\t\t     + val->length\n+\t\t\t\t\t\t     + 1);\n+    r->length = val->length;\n+    r->hash = val->hash;\n+    memcpy (r->data, val->data, val->length + 1);\n+\n+    linked_utf8 *lu = (linked_utf8 *) _Jv_Malloc (sizeof (linked_utf8));\n+    lu->val = r;\n+    lu->next = utf8_list;\n+    utf8_list = lu;\n+\n+    return r;\n+  }\n+\n   // This enum holds a list of tags for all the different types we\n   // need to handle.  Reference types are treated specially by the\n   // type class.\n@@ -632,8 +661,13 @@ class _Jv_BytecodeVerifier\n \t{\n \t  if (local_semantics)\n \t    {\n-\t      key = unsuitable_type;\n-\t      changed = true;\n+\t      // If we already have an `unsuitable' type, then we\n+\t      // don't need to change again.\n+\t      if (key != unsuitable_type)\n+\t\t{\n+\t\t  key = unsuitable_type;\n+\t\t  changed = true;\n+\t\t}\n \t    }\n \t  else\n \t    verify_fail (\"unmergeable type\");\n@@ -1640,8 +1674,7 @@ class _Jv_BytecodeVerifier\n \twhile (*p != ';')\n \t  ++p;\n \t++p;\n-\t// FIXME!  This will get collected!\n-\t_Jv_Utf8Const *name = _Jv_makeUtf8Const (start, p - start);\n+\t_Jv_Utf8Const *name = make_utf8_const (start, p - start);\n \treturn type (name);\n       }\n \n@@ -2604,6 +2637,7 @@ class _Jv_BytecodeVerifier\n     states = NULL;\n     flags = NULL;\n     jsr_ptrs = NULL;\n+    utf8_list = NULL;\n   }\n \n   ~_Jv_BytecodeVerifier ()\n@@ -2614,6 +2648,13 @@ class _Jv_BytecodeVerifier\n       _Jv_Free (flags);\n     if (jsr_ptrs)\n       _Jv_Free (jsr_ptrs);\n+    while (utf8_list != NULL)\n+      {\n+\tlinked_utf8 *n = utf8_list->next;\n+\t_Jv_Free (utf8_list->val);\n+\t_Jv_Free (utf8_list);\n+\tutf8_list = n;\n+      }\n   }\n };\n "}]}