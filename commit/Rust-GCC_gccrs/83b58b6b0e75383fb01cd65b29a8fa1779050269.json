{"sha": "83b58b6b0e75383fb01cd65b29a8fa1779050269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiNThiNmIwZTc1MzgzZmIwMWNkNjViMjlhOGZhMTc3OTA1MDI2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-04T16:23:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-04T16:23:27Z"}, "message": "re PR tree-optimization/68671 (gcc.dg/torture/pr66952.c FAILs with -fno-tree-dce)\n\n\tPR tree-optimization/68671\n\t* tree-ssa-reassoc.c (maybe_optimize_range_tests): For basic\n\tblocks starting with the successor of first bb we've modified\n\tand ending with last_bb call reset_flow_sensitive_info_in_bb.\n\n\t* gcc.dg/pr68671.c: New test.\n\nFrom-SVN: r231278", "tree": {"sha": "1e012432e093346394401bae2a8ceb22a3b7896f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e012432e093346394401bae2a8ceb22a3b7896f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b58b6b0e75383fb01cd65b29a8fa1779050269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b58b6b0e75383fb01cd65b29a8fa1779050269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b58b6b0e75383fb01cd65b29a8fa1779050269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b58b6b0e75383fb01cd65b29a8fa1779050269/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8010f31fc7b621810797354bb56093ae171494a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8010f31fc7b621810797354bb56093ae171494a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8010f31fc7b621810797354bb56093ae171494a3"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "446e74b34682ec0b6c69860a4aafa878e7c2700c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83b58b6b0e75383fb01cd65b29a8fa1779050269", "patch": "@@ -1,3 +1,10 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68671\n+\t* tree-ssa-reassoc.c (maybe_optimize_range_tests): For basic\n+\tblocks starting with the successor of first bb we've modified\n+\tand ending with last_bb call reset_flow_sensitive_info_in_bb.\n+\n 2015-12-04  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-reassoc.c (maybe_optimize_range_tests): Return boolean"}, {"sha": "1a037e6c1dcfbf50366a86b01938b86373d057ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83b58b6b0e75383fb01cd65b29a8fa1779050269", "patch": "@@ -1,3 +1,8 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/68671\n+\t* gcc.dg/pr68671.c: New test.\n+\n 2015-12-02  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/reassoc-43.c: New test."}, {"sha": "bec4639f80a865ead8d7f26c7516b8ba45d1d2d6", "filename": "gcc/testsuite/gcc.dg/pr68671.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68671.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68671.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68671.c?ref=83b58b6b0e75383fb01cd65b29a8fa1779050269", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/68671 */\n+/* { dg-do run } */\n+/* { dg-options \" -O2 -fno-tree-dce\" } */\n+\n+volatile int a = -1;\n+volatile int b;\n+\n+static inline int\n+fn1 (signed char p1, int p2)\n+{\n+  return (p1 < 0) || (p1 > (1 >> p2)) ? 0 : (p1 << 1);\n+}\n+\n+int\n+main ()\n+{\n+  signed char c = a;\n+  b = fn1 (c, 1);\n+  c = ((128 | c) < 0 ? 1 : 0);\n+  if (c != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e54700e2271e1829e03a5e94bd931fb87a23bbba", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b58b6b0e75383fb01cd65b29a8fa1779050269/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=83b58b6b0e75383fb01cd65b29a8fa1779050269", "patch": "@@ -3211,7 +3211,7 @@ maybe_optimize_range_tests (gimple *stmt)\n     any_changes = optimize_range_tests (ERROR_MARK, &ops);\n   if (any_changes)\n     {\n-      unsigned int idx;\n+      unsigned int idx, max_idx = 0;\n       /* update_ops relies on has_single_use predicates returning the\n \t same values as it did during get_ops earlier.  Additionally it\n \t never removes statements, only adds new ones and it should walk\n@@ -3227,6 +3227,7 @@ maybe_optimize_range_tests (gimple *stmt)\n \t    {\n \t      tree new_op;\n \n+\t      max_idx = idx;\n \t      stmt = last_stmt (bb);\n \t      new_op = update_ops (bbinfo[idx].op,\n \t\t\t\t   (enum tree_code)\n@@ -3296,6 +3297,10 @@ maybe_optimize_range_tests (gimple *stmt)\n \t      && ops[bbinfo[idx].first_idx]->op != NULL_TREE)\n \t    {\n \t      gcond *cond_stmt = as_a <gcond *> (last_stmt (bb));\n+\n+\t      if (idx > max_idx)\n+\t\tmax_idx = idx;\n+\n \t      /* If we collapse the conditional to a true/false\n \t\t condition, then bubble that knowledge up to our caller.  */\n \t      if (integer_zerop (ops[bbinfo[idx].first_idx]->op))\n@@ -3320,6 +3325,17 @@ maybe_optimize_range_tests (gimple *stmt)\n \t  if (bb == first_bb)\n \t    break;\n \t}\n+\n+      /* The above changes could result in basic blocks after the first\n+\t modified one, up to and including last_bb, to be executed even if\n+\t they would not be in the original program.  If the value ranges of\n+\t assignment lhs' in those bbs were dependent on the conditions\n+\t guarding those basic blocks which now can change, the VRs might\n+\t be incorrect.  As no_side_effect_bb should ensure those SSA_NAMEs\n+\t are only used within the same bb, it should be not a big deal if\n+\t we just reset all the VRs in those bbs.  See PR68671.  */\n+      for (bb = last_bb, idx = 0; idx < max_idx; bb = single_pred (bb), idx++)\n+\treset_flow_sensitive_info_in_bb (bb);\n     }\n   return cfg_cleanup_needed;\n }"}]}