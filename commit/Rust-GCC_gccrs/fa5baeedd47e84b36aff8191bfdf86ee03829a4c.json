{"sha": "fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1YmFlZWRkNDdlODRiMzZhZmY4MTkxYmZkZjg2ZWUwMzgyOWE0Yw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-07-24T20:34:03Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-07-24T20:34:03Z"}, "message": "PR driver/80545 - option -Wstringop-overflow not recognized by Fortran\n\ngcc/cp/ChangeLog:\n\n\tPR driver/80545\n\t* decl.c (finish_function): Use lang_mask.\n\ngcc/testsuite/ChangeLog:\n\n\tPR driver/80545\n\t* gcc.misc-tests/help.exp: Add tests.\n\t* lib/options.exp: Handle C++.\n\ngcc/ChangeLog:\n\n\tPR driver/80545\n\t* diagnostic.c (diagnostic_classify_diagnostic): Use lang_mask.\n\t(diagnostic_report_diagnostic): Same.\n\t* diagnostic.h (diagnostic_context::option_enabled): Add an argument.\n\t(diagnostic_context::lang_mask): New data member.\n\t* ipa-pure-const.c (suggest_attribute): Use\n\tlang_hooks.option_lang_mask ().\n\t* opts-common.c (option_enabled): Handle new argument.\n\t(get_option_state): Pass an additional argument.\n\t* opts.c (print_filtered_help): Print supported languages for\n\tunsupported options.  Adjust printing of current state.\n\t* opts.h (option_enabled): Add argument.\n\t* toplev.c (print_switch_values): Use lang_mask.\n\t(general_init): Set global_dc->lang_mask.\n\nFrom-SVN: r273771", "tree": {"sha": "555ecd4cee3204df4576e6ad2ed71999246dd69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555ecd4cee3204df4576e6ad2ed71999246dd69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e34616747028ebeb0be867dc6a23682539bfab60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34616747028ebeb0be867dc6a23682539bfab60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34616747028ebeb0be867dc6a23682539bfab60"}], "stats": {"total": 187, "additions": 167, "deletions": 20}, "files": [{"sha": "5cd80e8c7a1609e17d1e3d5d683c0201e3b4f17d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -1,3 +1,20 @@\n+2019-07-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR driver/80545\n+\t* diagnostic.c (diagnostic_classify_diagnostic): Use lang_mask.\n+\t(diagnostic_report_diagnostic): Same.\n+\t* diagnostic.h (diagnostic_context::option_enabled): Add an argument.\n+\t(diagnostic_context::lang_mask): New data member.\n+\t* ipa-pure-const.c (suggest_attribute): Use\n+\tlang_hooks.option_lang_mask ().\n+\t* opts-common.c (option_enabled): Handle new argument.\n+\t(get_option_state): Pass an additional argument.\n+\t* opts.c (print_filtered_help): Print supported languages for\n+\tunsupported options.  Adjust printing of current state.\n+\t* opts.h (option_enabled): Add argument.\n+\t* toplev.c (print_switch_values): Use lang_mask.\n+\t(general_init): Set global_dc->lang_mask.\n+\n 2019-07-24  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR bootstrap/87030"}, {"sha": "925b9efdfd963b28c43f60392a2f1dae9c730091", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -1,3 +1,8 @@\n+2019-07-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR driver/80545\n+\t* decl.c (finish_function): Use lang_mask.\n+\n 2019-07-20  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (ovl_iterator::using_p): A USING_DECL by itself was also"}, {"sha": "76bb58371404df07b038450e34856567ac4027af", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -16301,6 +16301,7 @@ finish_function (bool inline_p)\n \t      && same_type_ignoring_top_level_qualifiers_p\n \t\t  (TREE_TYPE (valtype), TREE_TYPE (current_class_ref))\n \t      && global_dc->option_enabled (OPT_Wreturn_type,\n+\t\t\t\t\t    global_dc->lang_mask,\n \t\t\t\t\t    global_dc->option_state))\n \t    add_return_star_this_fixit (&richloc, fndecl);\n \t}"}, {"sha": "96b6fa300527dfde069baf1726479877d8d9f0d3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"edit-context.h\"\n #include \"selftest.h\"\n #include \"selftest-diagnostic.h\"\n+#include \"opts.h\"\n \n #ifdef HAVE_TERMIOS_H\n # include <termios.h>\n@@ -696,6 +697,7 @@ diagnostic_classify_diagnostic (diagnostic_context *context,\n       if (old_kind == DK_UNSPECIFIED)\n \t{\n \t  old_kind = !context->option_enabled (option_index,\n+\t\t\t\t\t       context->lang_mask,\n \t\t\t\t\t       context->option_state)\n \t    ? DK_IGNORED : (context->warning_as_error_requested\n \t\t\t    ? DK_ERROR : DK_WARNING);\n@@ -957,6 +959,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       /* This tests if the user provided the appropriate -Wfoo or\n \t -Wno-foo option.  */\n       if (! context->option_enabled (diagnostic->option_index,\n+\t\t\t\t     context->lang_mask,\n \t\t\t\t     context->option_state))\n \treturn false;\n "}, {"sha": "530acb45b386e880990d60c843d98ae42b3ca148", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -180,7 +180,7 @@ struct diagnostic_context\n \n   /* Client hook to say whether the option controlling a diagnostic is\n      enabled.  Returns nonzero if enabled, zero if disabled.  */\n-  int (*option_enabled) (int, void *);\n+  int (*option_enabled) (int, unsigned, void *);\n \n   /* Client information to pass as second argument to\n      option_enabled.  */\n@@ -206,6 +206,9 @@ struct diagnostic_context\n \n   int lock;\n \n+  /* A copy of lang_hooks.option_lang_mask ().  */\n+  unsigned lang_mask;\n+\n   bool inhibit_notes_p;\n \n   /* When printing source code, should the characters at carets and ranges"}, {"sha": "4b2a79f18a986cc8a158d907665879b1ecfd7bee", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -199,7 +199,7 @@ suggest_attribute (int option, tree decl, bool known_finite,\n \t\t   hash_set<tree> *warned_about,\n \t\t   const char * attrib_name)\n {\n-  if (!option_enabled (option, &global_options))\n+  if (!option_enabled (option, lang_hooks.option_lang_mask (), &global_options))\n     return warned_about;\n   if (TREE_THIS_VOLATILE (decl)\n       || (known_finite && function_always_visible_to_compiler_p (decl)))"}, {"sha": "e2a315ba229f6510a1ca7e633bee1fcc95f7352f", "filename": "gcc/opts-common.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -1526,9 +1526,15 @@ option_flag_var (int opt_index, struct gcc_options *opts)\n    or -1 if it isn't a simple on-off switch.  */\n \n int\n-option_enabled (int opt_idx, void *opts)\n+option_enabled (int opt_idx, unsigned lang_mask, void *opts)\n {\n   const struct cl_option *option = &(cl_options[opt_idx]);\n+\n+  /* A language-specific option can only be considered enabled when it's\n+     valid for the current language.  */\n+  if (option->flags & CL_LANG_ALL && !(option->flags | lang_mask))\n+    return 0;\n+\n   struct gcc_options *optsg = (struct gcc_options *) opts;\n   void *flag_var = option_flag_var (opt_idx, optsg);\n \n@@ -1598,7 +1604,7 @@ get_option_state (struct gcc_options *opts, int option,\n \n     case CLVC_BIT_CLEAR:\n     case CLVC_BIT_SET:\n-      state->ch = option_enabled (option, opts);\n+      state->ch = option_enabled (option, -1, opts);\n       state->data = &state->ch;\n       state->size = 1;\n       break;"}, {"sha": "296f0f618027c9448a0b096091c87361aac21ded", "filename": "gcc/opts.c", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"spellcheck.h\"\n #include \"opt-suggestions.h\"\n+#include \"diagnostic-color.h\"\n \n static void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \n@@ -1460,10 +1461,37 @@ print_filtered_help (unsigned int include_flags,\n \t  else\n \t    strcpy (new_help, \"\\t\");\n \n+\t  /* Set to print whether the option is enabled or disabled,\n+\t     or, if it's an alias for another option, the name of\n+\t     the aliased option.  */\n+\t  bool print_state = false;\n+\n \t  if (flag_var != NULL\n \t      && option->var_type != CLVC_DEFER)\n \t    {\n-\t      if (option->flags & CL_JOINED)\n+\t      /* If OPTION is only available for a specific subset\n+\t\t of languages other than this one, mention them.  */\n+\t      bool avail_for_lang = true;\n+\t      if (unsigned langset = option->flags & CL_LANG_ALL)\n+\t\t{\n+\t\t  if (!(langset & lang_mask))\n+\t\t    {\n+\t\t      avail_for_lang = false;\n+\t\t      strcat (new_help, _(\"[available in \"));\n+\t\t      for (unsigned i = 0, n = 0; (1U << i) < CL_LANG_ALL; ++i)\n+\t\t\tif (langset & (1U << i))\n+\t\t\t  {\n+\t\t\t    if (n++)\n+\t\t\t      strcat (new_help, \", \");\n+\t\t\t    strcat (new_help, lang_names[i]);\n+\t\t\t  }\n+\t\t      strcat (new_help, \"]\");\n+\t\t    }\n+\t\t}\n+\t      if (!avail_for_lang)\n+\t\t; /* Print nothing else if the option is not available\n+\t\t     in the current language.  */\n+\t      else if (option->flags & CL_JOINED)\n \t\t{\n \t\t  if (option->var_type == CLVC_STRING)\n \t\t    {\n@@ -1487,12 +1515,50 @@ print_filtered_help (unsigned int include_flags,\n \t\t\t\t\"%s\", arg);\n \t\t    }\n \t\t  else\n-\t\t    sprintf (new_help + strlen (new_help),\n-\t\t\t     \"%d\", * (int *) flag_var);\n+\t\t    {\n+\t\t      if (option->cl_host_wide_int)\n+\t\t\tsprintf (new_help + strlen (new_help),\n+\t\t\t\t _(\"%llu bytes\"), (unsigned long long)\n+\t\t\t\t *(unsigned HOST_WIDE_INT *) flag_var);\n+\t\t      else\n+\t\t\tsprintf (new_help + strlen (new_help),\n+\t\t\t\t \"%i\", * (int *) flag_var);\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tprint_state = true;\n+\t    }\n+\t  else\n+\t    /* When there is no argument, print the option state only\n+\t       if the option takes no argument.  */\n+\t    print_state = !(option->flags & CL_JOINED);\n+\n+\t  if (print_state)\n+\t    {\n+\t      if (option->alias_target < N_OPTS\n+\t\t  && option->alias_target != OPT_SPECIAL_deprecated\n+\t\t  && option->alias_target != OPT_SPECIAL_ignore\n+\t\t  && option->alias_target != OPT_SPECIAL_input_file\n+\t\t  && option->alias_target != OPT_SPECIAL_program_name\n+\t\t  && option->alias_target != OPT_SPECIAL_unknown)\n+\t\t{\n+\t\t  const struct cl_option *target\n+\t\t    = &cl_options[option->alias_target];\n+\t\t  sprintf (new_help + strlen (new_help), \"%s%s\",\n+\t\t\t   target->opt_text,\n+\t\t\t   option->alias_arg ? option->alias_arg : \"\");\n \t\t}\n+\t      else if (option->alias_target == OPT_SPECIAL_ignore)\n+\t\tstrcat (new_help, (\"[ignored]\"));\n \t      else\n-\t\tstrcat (new_help, option_enabled (i, opts)\n-\t\t\t? _(\"[enabled]\") : _(\"[disabled]\"));\n+\t\t{\n+\t\t  /* Print the state for an on/off option.  */\n+\t\t  int ena = option_enabled (i, lang_mask, opts);\n+\t\t  if (ena > 0)\n+\t\t    strcat (new_help, _(\"[enabled]\"));\n+\t\t  else if (ena == 0)\n+\t\t    strcat (new_help, _(\"[disabled]\"));\n+\t\t}\n \t    }\n \n \t  help = new_help;"}, {"sha": "472232293881beb17d5771f35b416c0628ee192d", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -359,7 +359,8 @@ extern void decode_options (struct gcc_options *opts,\n \t\t\t    location_t loc,\n \t\t\t    diagnostic_context *dc,\n \t\t\t    void (*target_option_override_hook) (void));\n-extern int option_enabled (int opt_idx, void *opts);\n+extern int option_enabled (int opt_idx, unsigned lang_mask, void *opts);\n+\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);\n extern void set_option (struct gcc_options *opts,"}, {"sha": "4749b0cef36a5ce5d3d377c46bf097e64166b82f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -1,3 +1,9 @@\n+2019-07-24  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR driver/80545\n+\t* gcc.misc-tests/help.exp: Add tests.\n+\t* lib/options.exp: Handle C++.\n+\n 2019-07-24  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/arc.exp (check_effective_target_accregs): New"}, {"sha": "b8a09fcd5ab6bbe85bf64522da9a33b31591fe9c", "filename": "gcc/testsuite/gcc.misc-tests/help.exp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -91,6 +91,34 @@ maximum number of\n -O\n } \"\" \"\"\n \n+# Verify that a C++/Objective C++ only option is indicated as such\n+# by the C compiler.\n+check_for_options c \"-Q --help=warnings\" {\n+-Wclass-memaccess[ \\t]+\\[available in C\\+\\+, ObjC\\+\\+\\]\n+} \"\" \"\"\n+\n+# Do the same for a C/Objective C only option and the C++ compiler.\n+check_for_options c++ \"-Q --help=warnings\" {\n+-Wabsolute-value[ \\t]+\\[available in C, ObjC\\]\n+} \"\" \"\"\n+\n+# Verify that an option that's an alias for another option is shown\n+# with the other option as the value.\n+check_for_options c \"-Q --help=warnings\" {\n+--all-warnings[ \\t]+\\-Wall\n+-W[ \\t]+-Wextra\n+-Wmissing-format-attribute[ \\t]+-Wsuggest-attribute=format\n+-Wno-alloc-size-larger-than[ \\t]+-Walloc-size-larger-than=[1-9][0-9]+\n+-Wno-vla-larger-than[ \\t]+-Wvla-larger-than=[1-9][0-9]+\n+} \"\" \"\"\n+\n+# Verify that an option that expects a byte-size argument is shown with\n+# a meaningful byte-size argument as the value.\n+check_for_options c \"-Q --help=warnings\" {\n+-Walloc-size-larger-than=[ \\t]+[1-9][0-9]+ bytes\n+-Wlarger-than=[^\\n\\r]+[1-9][0-9]+ bytes\n+} \"\" \"\"\n+\n # Ensure PR 37805 is fixed.\n # Specify patterns (arguments 3 and later) that match option names\n # at the beginning of the line and not when they are referenced by"}, {"sha": "c8f0c705e40e3526f2bceea1a947ab88e3fb2bf9", "filename": "gcc/testsuite/lib/options.exp", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2Flib%2Foptions.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftestsuite%2Flib%2Foptions.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Foptions.exp?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -34,21 +34,30 @@ proc check_for_options_with_filter { language gcc_options exclude \\\n \t\t\t\t\t compiler_patterns \\\n \t\t\t\t\t compiler_non_patterns \\\n \t\t\t\t\t expected_failure } {\n-    set filename test-[pid]\n-    set fd [open $filename.c w]\n-    puts $fd \"int main (void) { return 0; }\"\n-    close $fd\n-    remote_download host $filename.c\n-\n     set test \"compiler driver $gcc_options option(s):\"\n     set gcc_options \"\\{additional_flags=$gcc_options\\}\"\n \n     switch \"$language\" {\n-\t\"c\" { set compiler cc1 }\n+\t\"c\" {\n+\t    set compiler cc1\n+\t    set suffix c\n+\t}\n+\t\"c++\" {\n+\t    set compiler cc1plus\n+\t    set suffix cc\n+\t}\n \tdefault { error \"unknown language\" }\n     }\n-    set gcc_output [gcc_target_compile $filename.c $filename.x executable $gcc_options]\n-    remote_file build delete $filename.c $filename.x $filename.gcno\n+\n+    set filebase test-[pid]\n+    set srcfname $filebase.$suffix\n+    set fd [open $srcfname w]\n+    puts $fd \"int main (void) { return 0; }\"\n+    close $fd\n+    remote_download host $srcfname\n+\n+    set gcc_output [gcc_target_compile $srcfname $filebase.x executable $gcc_options]\n+    remote_file build delete $srcfname $filebase.x $filebase.gcno\n \n     if { $exclude != \"\" } {\n \tset lines [split $gcc_output \"\\n\"]"}, {"sha": "7e0b9216dea6c3c7e18261ea36ae2bc66c52f459", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5baeedd47e84b36aff8191bfdf86ee03829a4c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fa5baeedd47e84b36aff8191bfdf86ee03829a4c", "patch": "@@ -815,9 +815,10 @@ print_switch_values (print_switch_fn_type print_fn)\n   pos = print_single_switch (print_fn, 0,\n \t\t\t     SWITCH_TYPE_DESCRIPTIVE, _(\"options enabled: \"));\n \n+  unsigned lang_mask = lang_hooks.option_lang_mask ();\n   for (j = 0; j < cl_options_count; j++)\n     if (cl_options[j].cl_report\n-\t&& option_enabled (j, &global_options) > 0)\n+\t&& option_enabled (j, lang_mask, &global_options) > 0)\n       pos = print_single_switch (print_fn, pos,\n \t\t\t\t SWITCH_TYPE_ENABLED, cl_options[j].opt_text);\n \n@@ -1088,6 +1089,7 @@ general_init (const char *argv0, bool init_signals)\n   /* Initialize the diagnostics reporting machinery, so option parsing\n      can give warnings and errors.  */\n   diagnostic_initialize (global_dc, N_OPTS);\n+  global_dc->lang_mask = lang_hooks.option_lang_mask ();\n   /* Set a default printer.  Language specific initializations will\n      override it later.  */\n   tree_diagnostics_defaults (global_dc);"}]}