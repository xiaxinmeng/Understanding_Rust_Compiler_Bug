{"sha": "416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2ZjU1NTkzMGMyZWIyZmJmYjZlZGI4MjE5Y2YwOTBkMGJkNWU3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-08T23:15:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-08T23:15:49Z"}, "message": "Pretty printer test fixes and improvements\n\nTest that StdUniquePtrPrinter correctly prints std::unique_ptr objects\nusing the old layout, prior to the PR libstdc++/77990 changes.\n\nThe printer test for a valueless std::variant started to fail because\nthe PR libstdc++/87431 fix meant it no longer became valueless. Change\nthe test to use a type that is not trivially copyable, so that the\nexception causes it to become valueless.\n\n\t* testsuite/libstdc++-prettyprinters/compat.cc: Test printer support\n\tfor old std::unique_ptr layout.\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Fix std::variant test\n\tto become valueless. Add filesystem::path tests.\n\nFrom-SVN: r267743", "tree": {"sha": "9764ddb234997b1419caac7700530b89d4f862e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9764ddb234997b1419caac7700530b89d4f862e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d942bc80e4e99f26df39b8c03e8fb03e7c7e91bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d942bc80e4e99f26df39b8c03e8fb03e7c7e91bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d942bc80e4e99f26df39b8c03e8fb03e7c7e91bc"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "f1aa1c326d798842550d78f7b26eb663322b3ab2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "patch": "@@ -1,5 +1,10 @@\n 2019-01-08  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/libstdc++-prettyprinters/compat.cc: Test printer support\n+\tfor old std::unique_ptr layout.\n+\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Fix std::variant test\n+\tto become valueless. Add filesystem::path tests.\n+\n \tPR libstdc++/87855\n \t* include/std/optional (_Optional_payload_base): New class template\n \tfor common code hoisted from _Optional_payload specializations. Use"}, {"sha": "a538b8540388dfcf34624b7e2ca11c5ef00046d5", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/compat.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcompat.cc?ref=416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "patch": "@@ -23,6 +23,22 @@\n \n namespace std\n {\n+  template<typename T, typename U>\n+    struct tuple\n+    {\n+      T _M_head_impl;\n+    };\n+\n+  template<typename T> struct default_delete { };\n+\n+  template<typename T, typename D = default_delete<T>>\n+    struct unique_ptr\n+    {\n+      unique_ptr(T* p) { _M_t._M_head_impl = p; }\n+\n+      tuple<T*, D> _M_t;\n+    };\n+\n   // Old representation of std::optional, before GCC 9\n   template<typename T>\n     struct _Optional_payload\n@@ -58,6 +74,12 @@ namespace std\n int\n main()\n {\n+  struct datum { };\n+  std::unique_ptr<datum> uptr (new datum);\n+// { dg-final { regexp-test uptr {std::unique_ptr.datum. = {get\\(\\) = 0x.*}} } }\n+  std::unique_ptr<datum> &ruptr = uptr;\n+// { dg-final { regexp-test ruptr {std::unique_ptr.datum. = {get\\(\\) = 0x.*}} } }\n+\n   using std::optional;\n \n   optional<int> o;"}, {"sha": "c550cbd61bd56a542c51c30c2417365e301f7c44", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx17.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416f555930c2eb2fbfb6edb8219cf090d0bd5e74/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc?ref=416f555930c2eb2fbfb6edb8219cf090d0bd5e74", "patch": "@@ -22,6 +22,7 @@\n // Type printers only recognize the old std::string for now.\n #define _GLIBCXX_USE_CXX11_ABI 0\n \n+#include <filesystem>\n #include <any>\n #include <optional>\n #include <variant>\n@@ -41,6 +42,11 @@ using std::unordered_set;\n using std::shared_ptr;\n using std::weak_ptr;\n \n+struct X {\n+  X(int) { }\n+  X(const X&) { } // not trivially-copyable\n+};\n+\n int\n main()\n {\n@@ -84,11 +90,11 @@ main()\n // { dg-final { note-test v0 {std::variant<float, int, std::string_view> [index 0] = {0}} } }\n   variant<float, int, string_view> v1{ 0.5f };\n // { dg-final { note-test v1 {std::variant<float, int, std::string_view> [index 0] = {0.5}} } }\n-  variant<float, int, string_view> v2;\n+  variant<float, X, string_view> v2;\n   try {\n     v2.emplace<1>(S());\n   } catch (int) { }\n-// { dg-final { note-test v2 {std::variant<float, int, std::string_view> [no contained value]} } }\n+// { dg-final { note-test v2 {std::variant<float, X, std::string_view> [no contained value]} } }\n   variant<float, int, string_view> v3{ 3 };\n // { dg-final { note-test v3 {std::variant<float, int, std::string_view> [index 1] = {3}} } }\n   variant<float, int, string_view> v4{ str };\n@@ -118,6 +124,13 @@ main()\n // { dg-final { regexp-test q {std::shared_ptr.int \\[2\\]. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n // { dg-final { regexp-test wq {std::weak_ptr.int \\[2\\]. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n \n+  std::filesystem::path p0;\n+// { dg-final { note-test p0 {filesystem::path \"\"} } }\n+  std::filesystem::path p1(\"filename\");\n+// { dg-final { note-test p1 {filesystem::path \"filename\"} } }\n+  std::filesystem::path p2(\"/dir/.\");\n+// { dg-final { note-test p2 {filesystem::path \"/dir/file\" = {[root-directory] = \"/\", [1] = \"dir\", [2] = \".\"}} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}]}