{"sha": "74dc11ed84af069ad388d919d47cf553b83c9f60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkYzExZWQ4NGFmMDY5YWQzODhkOTE5ZDQ3Y2Y1NTNiODNjOWY2MA==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-04-22T08:39:48Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T08:39:48Z"}, "message": "[AArch64] vrnd<*>_f64 patch\n\nThis patch adds vrnd<*>_f64 aarch64 intrinsics.  A testcase for those\nintrinsics is added.  Run a complete LE and BE regression run with no\nregressions.\n\nFrom-SVN: r209559", "tree": {"sha": "ae63973026daef067473992d9e12353e89194191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae63973026daef067473992d9e12353e89194191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74dc11ed84af069ad388d919d47cf553b83c9f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74dc11ed84af069ad388d919d47cf553b83c9f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74dc11ed84af069ad388d919d47cf553b83c9f60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74dc11ed84af069ad388d919d47cf553b83c9f60/comments", "author": null, "committer": null, "parents": [{"sha": "b716608c3d85fb871cc64d9728006f601d9ca236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b716608c3d85fb871cc64d9728006f601d9ca236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b716608c3d85fb871cc64d9728006f601d9ca236"}], "stats": {"total": 177, "additions": 174, "deletions": 3}, "files": [{"sha": "4eab80869f5f31cb26807d8a59ef380808c2610b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -1,3 +1,20 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (BUILTIN_VDQF_DF): Macro\n+\tadded.\n+\t* config/aarch64/aarch64-simd-builtins.def (frintn): Use added\n+\tmacro.\n+\t* config/aarch64/aarch64-simd.md (<frint_pattern>): Comment\n+\tcorrected.\n+\t* config/aarch64/aarch64.md (<frint_pattern>): Likewise.\n+\t* config/aarch64/arm_neon.h (vrnd_f64): Added.\n+\t(vrnda_f64): Likewise.\n+\t(vrndi_f64): Likewise.\n+\t(vrndm_f64): Likewise.\n+\t(vrndn_f64): Likewise.\n+\t(vrndp_f64): Likewise.\n+\t(vrndx_f64): Likewise.\n+\n 2014-04-22  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/arm/arm.c (arm_print_operand, thumb_exit): Make sure"}, {"sha": "cd46260b6ac46fce31b1c56f2ffce5871cfb6cac", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -311,6 +311,8 @@ aarch64_types_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   VAR7 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di)\n #define BUILTIN_VDQF(T, N, MAP) \\\n   VAR3 (T, N, MAP, v2sf, v4sf, v2df)\n+#define BUILTIN_VDQF_DF(T, N, MAP) \\\n+  VAR4 (T, N, MAP, v2sf, v4sf, v2df, df)\n #define BUILTIN_VDQH(T, N, MAP) \\\n   VAR2 (T, N, MAP, v4hi, v8hi)\n #define BUILTIN_VDQHS(T, N, MAP) \\"}, {"sha": "c5e3b3e9fb3f3ba95ab6066e518d10c6b78c4ecf", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -265,7 +265,7 @@\n   BUILTIN_VDQF (UNOP, nearbyint, 2)\n   BUILTIN_VDQF (UNOP, rint, 2)\n   BUILTIN_VDQF (UNOP, round, 2)\n-  BUILTIN_VDQF (UNOP, frintn, 2)\n+  BUILTIN_VDQF_DF (UNOP, frintn, 2)\n \n   /* Implemented by l<fcvt_pattern><su_optab><VQDF:mode><vcvt_target>2.  */\n   VAR1 (UNOP, lbtruncv2sf, 2, v2si)"}, {"sha": "7fa76be9ae8e7519daaea0a2bb99dea274ffa9d4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -1452,7 +1452,7 @@\n )\n \n ;; Vector versions of the floating-point frint patterns.\n-;; Expands to btrunc, ceil, floor, nearbyint, rint, round.\n+;; Expands to btrunc, ceil, floor, nearbyint, rint, round, frintn.\n (define_insn \"<frint_pattern><mode>2\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n \t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]"}, {"sha": "9368742ca3d310ba7a38ed18ff957bd36733b236", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -3188,7 +3188,7 @@\n ;; -------------------------------------------------------------------\n \n ;; frint floating-point round to integral standard patterns.\n-;; Expands to btrunc, ceil, floor, nearbyint, rint, round.\n+;; Expands to btrunc, ceil, floor, nearbyint, rint, round, frintn.\n \n (define_insn \"<frint_pattern><mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")"}, {"sha": "a3c15ac3da2c0fab9f12b1ddad3d34b591cf8e11", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -22481,6 +22481,12 @@ vrnd_f32 (float32x2_t __a)\n   return __builtin_aarch64_btruncv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrnd_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_trunc (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndq_f32 (float32x4_t __a)\n {\n@@ -22501,6 +22507,12 @@ vrnda_f32 (float32x2_t __a)\n   return __builtin_aarch64_roundv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrnda_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_round (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndaq_f32 (float32x4_t __a)\n {\n@@ -22521,6 +22533,12 @@ vrndi_f32 (float32x2_t __a)\n   return __builtin_aarch64_nearbyintv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrndi_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_nearbyint (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndiq_f32 (float32x4_t __a)\n {\n@@ -22541,6 +22559,12 @@ vrndm_f32 (float32x2_t __a)\n   return __builtin_aarch64_floorv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrndm_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_floor (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndmq_f32 (float32x4_t __a)\n {\n@@ -22560,6 +22584,13 @@ vrndn_f32 (float32x2_t __a)\n {\n   return __builtin_aarch64_frintnv2sf (__a);\n }\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrndn_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_frintndf (__a);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndnq_f32 (float32x4_t __a)\n {\n@@ -22580,6 +22611,12 @@ vrndp_f32 (float32x2_t __a)\n   return __builtin_aarch64_ceilv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrndp_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_ceil (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndpq_f32 (float32x4_t __a)\n {\n@@ -22600,6 +22637,12 @@ vrndx_f32 (float32x2_t __a)\n   return __builtin_aarch64_rintv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrndx_f64 (float64x1_t __a)\n+{\n+  return vset_lane_f64 (__builtin_rint (vget_lane_f64 (__a, 0)), __a, 0);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vrndxq_f32 (float32x4_t __a)\n {"}, {"sha": "2b060294f39a8d7b2e9855d4a9c1779c04374155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -1,3 +1,7 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vrnd_f64_1.c : New file.\n+\n 2014-04-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/60735"}, {"sha": "2451ecdcfb6440c100675d34342ee1f5d517c2d5", "filename": "gcc/testsuite/gcc.target/aarch64/vrnd_f64_1.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc11ed84af069ad388d919d47cf553b83c9f60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrnd_f64_1.c?ref=74dc11ed84af069ad388d919d47cf553b83c9f60", "patch": "@@ -0,0 +1,105 @@\n+/* Test vrnd_f64 works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+/* Bit offset to round mode field in FPCR.  */\n+#define RMODE_START 22\n+\n+#define FPROUNDING_ZERO 3\n+\n+/* Set RMODE field of FPCR control register\n+   to rounding mode passed.  */\n+void __inline __attribute__ ((__always_inline__))\n+set_rounding_mode (uint32_t mode)\n+{\n+  uint32_t r;\n+\n+  /* Read current FPCR.  */\n+  asm volatile (\"mrs %[r], fpcr\" : [r] \"=r\" (r) : :);\n+\n+  /* Clear rmode.  */\n+  r &= ~(3 << RMODE_START);\n+  /* Calculate desired FPCR.  */\n+  r |= mode << RMODE_START;\n+\n+  /* Write desired FPCR back.  */\n+  asm volatile (\"msr fpcr, %[r]\" : : [r] \"r\" (r) :);\n+}\n+\n+float64x1_t __attribute__ ((noinline))\n+compare_f64 (float64x1_t passed, float64_t expected)\n+{\n+  return (__builtin_fabs (vget_lane_f64 (passed, 0) - expected)\n+\t  > __DBL_EPSILON__);\n+}\n+\n+void __attribute__ ((noinline))\n+run_round_tests (float64x1_t *tests,\n+\t\t float64_t expectations[][6])\n+{\n+  int i;\n+\n+  for (i = 0; i < 6; i++)\n+    {\n+      if (compare_f64 (vrnd_f64 (tests[i]), expectations[0][i]))\n+\tabort ();\n+      if (compare_f64 (vrndx_f64 (tests[i]), expectations[1][i]))\n+\tabort ();\n+      if (compare_f64 (vrndp_f64 (tests[i]), expectations[2][i]))\n+\tabort ();\n+      if (compare_f64 (vrndn_f64 (tests[i]), expectations[3][i]))\n+\tabort ();\n+      if (compare_f64 (vrndm_f64 (tests[i]), expectations[4][i]))\n+\tabort ();\n+      if (compare_f64 (vrndi_f64 (tests[i]), expectations[5][i]))\n+\tabort ();\n+      if (compare_f64 (vrnda_f64 (tests[i]), expectations[6][i]))\n+\tabort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float64x1_t tests[6] =\n+    {\n+      vcreate_f64 (0x3FE0000000000000), /* Hex for: 0.5.  */\n+      vcreate_f64 (0x3FD999999999999A), /* Hex for: 0.4.  */\n+      vcreate_f64 (0x3FE3333333333333), /* Hex for: 0.6.  */\n+      vcreate_f64 (0xBFE0000000000000), /* Hex for: -0.5.  */\n+      vcreate_f64 (0xBFD999999999999A), /* Hex for: -0.4.  */\n+      vcreate_f64 (0xBFE3333333333333), /* Hex for: -0.6.  */\n+    };\n+\n+  float64_t expectations[7][6] =\n+  {\n+    { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },    /* vrnd - round towards zero.  */\n+    { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },    /* vrndx - round using FPCR mode.  */\n+    { 1.0, 1.0, 1.0, 0.0, 0.0, 0.0 },    /* vrndp - round to plus infinity.  */\n+    { 0.0, 0.0, 1.0, 0.0, 0.0, -1.0 },   /* vrndn - round ties to even.  */\n+    { 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 }, /* vrndm - round to minus infinity.  */\n+    { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },    /* vrndi - round using FPCR mode.  */\n+    { 1.0, 0.0, 1.0, -1.0, 0.0, -1.0 },  /* vrnda - round ties away from 0.  */\n+  };\n+\n+  /* Set floating point control register\n+     to have predictable vrndx and vrndi behaviour.  */\n+  set_rounding_mode (FPROUNDING_ZERO);\n+\n+  run_round_tests (tests, expectations);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"frintz\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frintp\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frintn\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frintm\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frinti\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"frinta\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}