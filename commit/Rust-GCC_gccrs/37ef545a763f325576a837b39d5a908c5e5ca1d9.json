{"sha": "37ef545a763f325576a837b39d5a908c5e5ca1d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlZjU0NWE3NjNmMzI1NTc2YTgzN2IzOWQ1YTkwOGM1ZTVjYTFkOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-19T05:57:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-19T05:57:52Z"}, "message": "re PR c++/51489 (constexpr not working consistently)\n\n\tPR c++/51489\n\t* semantics.c (cxx_eval_outermost_constant_expr): Check for\n\tconversion from pointer to integer here.\n\t(cxx_eval_constant_expression) [NOP_EXPR]: Not here.\n\nFrom-SVN: r182470", "tree": {"sha": "63d5f57ed50f1cb0252282dcfd003c083ac7482b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d5f57ed50f1cb0252282dcfd003c083ac7482b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ef545a763f325576a837b39d5a908c5e5ca1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ef545a763f325576a837b39d5a908c5e5ca1d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ef545a763f325576a837b39d5a908c5e5ca1d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ef545a763f325576a837b39d5a908c5e5ca1d9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a733dd3dedf9f193e23f11947d9b2a0bb1d68bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a733dd3dedf9f193e23f11947d9b2a0bb1d68bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a733dd3dedf9f193e23f11947d9b2a0bb1d68bcf"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "6f1bc26c9a91614274fb86200b4f248219cca2c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37ef545a763f325576a837b39d5a908c5e5ca1d9", "patch": "@@ -1,3 +1,10 @@\n+2011-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51489\n+\t* semantics.c (cxx_eval_outermost_constant_expr): Check for\n+\tconversion from pointer to integer here.\n+\t(cxx_eval_constant_expression) [NOP_EXPR]: Not here.\n+\n 2011-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* semantics.c (finish_compound_literal): Don't call check_narrowing"}, {"sha": "e73b40a0e4f17ef462cd751875b6a99c846ef336", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=37ef545a763f325576a837b39d5a908c5e5ca1d9", "patch": "@@ -7704,17 +7704,6 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \ttree oldop = TREE_OPERAND (t, 0);\n \ttree op = oldop;\n \ttree to = TREE_TYPE (t);\n-\ttree source = TREE_TYPE (op);\n-        if (TYPE_PTR_P (source) && ARITHMETIC_TYPE_P (to)\n-\t    && !(TREE_CODE (op) == COMPONENT_REF\n-\t\t && TYPE_PTRMEMFUNC_P (TREE_TYPE (TREE_OPERAND (op, 0)))))\n-          {\n-            if (!allow_non_constant)\n-              error (\"conversion of expression %qE of pointer type \"\n-                     \"cannot yield a constant expression\", op);\n-\t    *non_constant_p = true;\n-\t    return t;\n-          }\n \top = cxx_eval_constant_expression (call, TREE_OPERAND (t, 0),\n \t\t\t\t\t   allow_non_constant, addr,\n \t\t\t\t\t   non_constant_p);\n@@ -7803,6 +7792,20 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant)\n       non_constant_p = true;\n     }\n \n+  /* Technically we should check this for all subexpressions, but that\n+     runs into problems with our internal representation of pointer\n+     subtraction and the 5.19 rules are still in flux.  */\n+  if (CONVERT_EXPR_CODE_P (TREE_CODE (r))\n+      && ARITHMETIC_TYPE_P (TREE_TYPE (r))\n+      && TREE_CODE (TREE_OPERAND (r, 0)) == ADDR_EXPR)\n+    {\n+      if (!allow_non_constant)\n+\terror (\"conversion from pointer type %qT \"\n+\t       \"to arithmetic type %qT in a constant-expression\",\n+\t       TREE_TYPE (TREE_OPERAND (r, 0)), TREE_TYPE (r));\n+      non_constant_p = true;\n+    }\n+\n   if (non_constant_p && !allow_non_constant)\n     return error_mark_node;\n   else if (non_constant_p && TREE_CONSTANT (t))\n@@ -8110,25 +8113,10 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case VIEW_CONVERT_EXPR:\n-      /* -- an array-to-pointer conversion that is applied to an lvalue\n-            that designates an object with thread or automatic storage\n-            duration;  FIXME not implemented as it breaks constexpr arrays;\n-\t    need to fix the standard\n-         -- a type conversion from a pointer or pointer-to-member type\n-            to a literal type.  */\n+      /* -- a reinterpret_cast.  FIXME not implemented, and this rule\n+\t may change to something more specific to type-punning (DR 1312).  */\n       {\n         tree from = TREE_OPERAND (t, 0);\n-        tree source = TREE_TYPE (from);\n-        tree target = TREE_TYPE (t);\n-        if (TYPE_PTR_P (source) && ARITHMETIC_TYPE_P (target)\n-\t    && !(TREE_CODE (from) == COMPONENT_REF\n-\t\t && TYPE_PTRMEMFUNC_P (TREE_TYPE (TREE_OPERAND (from, 0)))))\n-          {\n-            if (flags & tf_error)\n-              error (\"conversion of expression %qE of pointer type \"\n-                     \"cannot yield a constant expression\", from);\n-            return false;\n-          }\n         return (potential_constant_expression_1\n \t\t(from, TREE_CODE (t) != VIEW_CONVERT_EXPR, flags));\n       }"}, {"sha": "dc77cbec441171d158085895a02a6ad9c89f5489", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37ef545a763f325576a837b39d5a908c5e5ca1d9", "patch": "@@ -1,3 +1,8 @@\n+2011-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51489\n+\t* g++.dg/cpp0x/constexpr-ptrsub.C: New.\n+\n 2011-12-18  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/pr51491-2.c: Fix \"cleanup-treee-dump\" typo."}, {"sha": "bccec73bb0b7b87d3683de5b54a471791bfed2c8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ptrsub.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ef545a763f325576a837b39d5a908c5e5ca1d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrsub.C?ref=37ef545a763f325576a837b39d5a908c5e5ca1d9", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/51489\n+// DR 1313\n+// { dg-options \"-std=c++0x\" }\n+\n+struct array\n+{\n+  constexpr array() :x(0) {}\n+  constexpr int const* begin() { return &x; }\n+  int x;\n+};\n+constexpr array aa;\n+constexpr auto b = aa.begin();\n+static_assert(b-b == 0, \"compiles just fine\");\n+static_assert(aa.begin()-aa.begin() == 0, \"compiler thinks it's not a constant expression\");"}]}