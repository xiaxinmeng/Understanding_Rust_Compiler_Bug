{"sha": "b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmYzQzZDdjNzQ3ZDE5MGUxOTdjYTg5Y2ZjZTRmMWQ5ZGVmN2M3ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-12-16T09:40:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-12-16T09:40:03Z"}, "message": "re PR c++/71694 (store-data race with bitfields and tail-padding in C++)\n\n2016-12-16  Richard Biener  <rguenther@suse.de>\n\n\tPR c++/71694\n\t* langhooks-def.h (lhd_unit_size_without_reusable_padding): Declare.\n\t(LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Adjust.\n\t* langhooks.h (struct lang_hooks_for_types): Add\n\tunit_size_without_reusable_padding.\n\t* langhooks.c (lhd_unit_size_without_reusable_padding): New.\n\t* stor-layout.c (finish_bitfield_representative): Use\n\tunit_size_without_reusable_padding langhook to decide on the\n\tlast representatives size.\n\n\tcp/\n\t* cp-objcp-common.h (cp_unit_size_without_reusable_padding): Declare.\n\t(LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING): Define.\n\t* cp-objcp-common.c (cp_unit_size_without_reusable_padding): New.\n\n\t* g++.dg/pr71694.C: New testcase.\n\nFrom-SVN: r243738", "tree": {"sha": "e7a4831ca7b46e08d1f5bc38c1d4f221aa7cfbbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a4831ca7b46e08d1f5bc38c1d4f221aa7cfbbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4d5c5e6ac73cac2b89d039eff9874ff80742589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d5c5e6ac73cac2b89d039eff9874ff80742589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d5c5e6ac73cac2b89d039eff9874ff80742589"}], "stats": {"total": 100, "additions": 92, "deletions": 8}, "files": [{"sha": "cf4e49a24869d51df9b30056bc00257e55f69f48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -1,3 +1,16 @@\n+2016-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/71694\n+\t* langhooks-def.h (lhd_unit_size_without_reusable_padding): Declare.\n+\t(LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING): Define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Adjust.\n+\t* langhooks.h (struct lang_hooks_for_types): Add\n+\tunit_size_without_reusable_padding.\n+\t* langhooks.c (lhd_unit_size_without_reusable_padding): New.\n+\t* stor-layout.c (finish_bitfield_representative): Use\n+\tunit_size_without_reusable_padding langhook to decide on the\n+\tlast representatives size.\n+\n 2016-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71632"}, {"sha": "757bcef99d50c794a26a7d10c67f1c13efcdc2d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -1,3 +1,10 @@\n+2016-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/71694\n+\t* cp-objcp-common.h (cp_unit_size_without_reusable_padding): Declare.\n+\t(LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING): Define.\n+\t* cp-objcp-common.c (cp_unit_size_without_reusable_padding): New.\n+\n 2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0490R0 GB 20: decomposition declaration should commit to tuple"}, {"sha": "b78d24d139402a5dae14064608f05e8507027887", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -252,6 +252,16 @@ cp_type_dwarf_attribute (const_tree type, int attr)\n   return -1;\n }\n \n+/* Return the unit size of TYPE without reusable tail padding.  */\n+\n+tree\n+cp_unit_size_without_reusable_padding (tree type)\n+{\n+  if (CLASS_TYPE_P (type))\n+    return CLASSTYPE_SIZE_UNIT (type);\n+  return TYPE_SIZE_UNIT (type);\n+}\n+\n /* Stubs to keep c-opts.c happy.  */\n void\n push_file_scope (void)"}, {"sha": "f0e45c58f2100c23c8a444a6345001b12b1c25ea", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -30,6 +30,7 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n extern int cp_decl_dwarf_attribute (const_tree, int);\n extern int cp_type_dwarf_attribute (const_tree, int);\n extern void cp_common_init_ts (void);\n+extern tree cp_unit_size_without_reusable_padding (tree);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n@@ -137,6 +138,9 @@ extern void cp_common_init_ts (void);\n #define LANG_HOOKS_DECL_DWARF_ATTRIBUTE cp_decl_dwarf_attribute\n #undef LANG_HOOKS_TYPE_DWARF_ATTRIBUTE\n #define LANG_HOOKS_TYPE_DWARF_ATTRIBUTE cp_type_dwarf_attribute\n+#undef LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING\n+#define LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING cp_unit_size_without_reusable_padding\n+\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING cxx_omp_predetermined_sharing\n #undef LANG_HOOKS_OMP_CLAUSE_DEFAULT_CTOR"}, {"sha": "b25c5a787c731af6994695e310c36b048f4d9359", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -161,6 +161,8 @@ extern tree lhd_make_node (enum tree_code);\n \n /* Types hooks.  There are no reasonable defaults for most of them,\n    so we create a compile-time error instead.  */\n+extern tree lhd_unit_size_without_reusable_padding (tree);\n+\n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n@@ -189,6 +191,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GET_DEBUG_TYPE\tNULL\n #define LANG_HOOKS_GET_FIXED_POINT_TYPE_INFO NULL\n #define LANG_HOOKS_TYPE_DWARF_ATTRIBUTE\tlhd_type_dwarf_attribute\n+#define LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING lhd_unit_size_without_reusable_padding\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -212,7 +215,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE, \\\n   LANG_HOOKS_GET_DEBUG_TYPE, \\\n   LANG_HOOKS_GET_FIXED_POINT_TYPE_INFO, \\\n-  LANG_HOOKS_TYPE_DWARF_ATTRIBUTE \\\n+  LANG_HOOKS_TYPE_DWARF_ATTRIBUTE, \\\n+  LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "260d33c3ffe958a5960ea1a005895f17c3f826da", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -729,6 +729,15 @@ lhd_type_dwarf_attribute (const_tree, int)\n   return -1;\n }\n \n+/* Default implementation of LANG_HOOKS_UNIT_SIZE_WITHOUT_REUSABLE_PADDING.\n+   Just return TYPE_SIZE_UNIT unadjusted.  */\n+\n+tree\n+lhd_unit_size_without_reusable_padding (tree t)\n+{\n+  return TYPE_SIZE_UNIT (t);\n+}\n+\n /* Returns true if the current lang_hooks represents the GNU C frontend.  */\n \n bool"}, {"sha": "19e3fa1e99773cb76ec323e8f49b75ad0bd019db", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -166,6 +166,10 @@ struct lang_hooks_for_types\n   /* Returns -1 if dwarf ATTR shouldn't be added for TYPE, or the attribute\n      value otherwise.  */\n   int (*type_dwarf_attribute) (const_tree, int);\n+\n+  /* Returns a tree for the unit size of T excluding tail padding that\n+     might be used by objects inheriting from T.  */\n+  tree (*unit_size_without_reusable_padding) (tree);\n };\n \n /* Language hooks related to decls and the symbol table.  */"}, {"sha": "0aa3861d941e5579dbac832ef421b1a36a053cb3", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -1864,13 +1864,14 @@ finish_bitfield_representative (tree repr, tree field)\n     }\n   else\n     {\n-      /* ???  If you consider that tail-padding of this struct might be\n-         re-used when deriving from it we cannot really do the following\n-\t and thus need to set maxsize to bitsize?  Also we cannot\n-\t generally rely on maxsize to fold to an integer constant, so\n-\t use bitsize as fallback for this case.  */\n-      tree maxsize = size_diffop (TYPE_SIZE_UNIT (DECL_CONTEXT (field)),\n-\t\t\t\t  DECL_FIELD_OFFSET (repr));\n+      /* Note that if the C++ FE sets up tail-padding to be re-used it\n+         creates a as-base variant of the type with TYPE_SIZE adjusted\n+\t accordingly.  So it is safe to include tail-padding here.  */\n+      tree aggsize = lang_hooks.types.unit_size_without_reusable_padding\n+\t\t\t\t\t\t\t(DECL_CONTEXT (field));\n+      tree maxsize = size_diffop (aggsize, DECL_FIELD_OFFSET (repr));\n+      /* We cannot generally rely on maxsize to fold to an integer constant,\n+\t so use bitsize as fallback for this case.  */\n       if (tree_fits_uhwi_p (maxsize))\n \tmaxbitsize = (tree_to_uhwi (maxsize) * BITS_PER_UNIT\n \t\t      - tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr)));"}, {"sha": "8aa1ad9fd5bee896819522eb02d41bb2d0b580d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -1,3 +1,8 @@\n+2016-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/71694\n+\t* g++.dg/pr71694.C: New testcase.\n+\n 2016-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71632"}, {"sha": "e79f62aeb13a3e4863404459a9ad77ee3c025707", "filename": "gcc/testsuite/g++.dg/pr71694.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc43d7c747d190e197ca89cfce4f1d9def7c7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71694.C?ref=b7fc43d7c747d190e197ca89cfce4f1d9def7c7e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct B {\n+    B() {}\n+    int x;\n+    int a : 6;\n+    int b : 6;\n+    int c : 6;\n+};\n+\n+struct C : B {\n+    char d;\n+};\n+\n+C c;\n+\n+int main()\n+{\n+  /* We have to make sure to not cause a store data race between\n+     c.c and c.d residing in the tail padding of B.  */\n+  c.c = 1;\n+  c.d = 2;\n+}\n+\n+/* In particular on x86 c.d should not be loaded/stored via movl.  */\n+/* { dg-final { scan-assembler-not \"movl\" { target { x86_64-*-* i?86-*-* } } } } */"}]}