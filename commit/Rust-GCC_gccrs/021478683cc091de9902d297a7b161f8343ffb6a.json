{"sha": "021478683cc091de9902d297a7b161f8343ffb6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxNDc4NjgzY2MwOTFkZTk5MDJkMjk3YTdiMTYxZjgzNDNmZmI2YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-10-17T06:00:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-10-17T06:00:58Z"}, "message": "cpuid.h (__cpuid): Remove definitions that handle %ebx register in a special way.\n\n\t* config/i386/cpuid.h (__cpuid): Remove definitions that handle %ebx\n\tregister in a special way.\n\t(__cpuid_count): Ditto.\n\t* config/i386/driver-i386.h: Protect with\n\t\"#if defined(__GNUC__) && (__GNUC__ >= 5 || !defined(__PIC__))\".\n\t(host_detect_local_cpu): Mention that GCC with non-fixed %ebx\n\tis required to compile the function.\n\nFrom-SVN: r216362", "tree": {"sha": "b404567433f66e5efbdf52b2c5b60ac1234314e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b404567433f66e5efbdf52b2c5b60ac1234314e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021478683cc091de9902d297a7b161f8343ffb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021478683cc091de9902d297a7b161f8343ffb6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021478683cc091de9902d297a7b161f8343ffb6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021478683cc091de9902d297a7b161f8343ffb6a/comments", "author": null, "committer": null, "parents": [{"sha": "5fcffe51f0feba3b795e6668582c63760db8389a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcffe51f0feba3b795e6668582c63760db8389a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcffe51f0feba3b795e6668582c63760db8389a"}], "stats": {"total": 59, "additions": 5, "deletions": 54}, "files": [{"sha": "133e356c2eb92ee69e03871efebac72790559e91", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021478683cc091de9902d297a7b161f8343ffb6a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021478683cc091de9902d297a7b161f8343ffb6a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=021478683cc091de9902d297a7b161f8343ffb6a", "patch": "@@ -146,55 +146,6 @@\n #define signature_VORTEX_ecx\t0x436f5320\n #define signature_VORTEX_edx\t0x36387865\n \n-#if defined(__i386__) && defined(__PIC__)\n-/* %ebx may be the PIC register.  */\n-#if __GNUC__ >= 3\n-#define __cpuid(level, a, b, c, d)\t\t\t\\\n-  __asm__ (\"xchg{l}\\t{%%}ebx, %k1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchg{l}\\t{%%}ebx, %k1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level))\n-\n-#define __cpuid_count(level, count, a, b, c, d)\t\t\\\n-  __asm__ (\"xchg{l}\\t{%%}ebx, %k1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchg{l}\\t{%%}ebx, %k1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level), \"2\" (count))\n-#else\n-/* Host GCCs older than 3.0 weren't supporting Intel asm syntax\n-   nor alternatives in i386 code.  */\n-#define __cpuid(level, a, b, c, d)\t\t\t\\\n-  __asm__ (\"xchgl\\t%%ebx, %k1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchgl\\t%%ebx, %k1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level))\n-\n-#define __cpuid_count(level, count, a, b, c, d)\t\t\\\n-  __asm__ (\"xchgl\\t%%ebx, %k1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchgl\\t%%ebx, %k1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level), \"2\" (count))\n-#endif\n-#elif defined(__x86_64__) && (defined(__code_model_medium__) || defined(__code_model_large__)) && defined(__PIC__)\n-/* %rbx may be the PIC register.  */\n-#define __cpuid(level, a, b, c, d)\t\t\t\\\n-  __asm__ (\"xchg{q}\\t{%%}rbx, %q1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchg{q}\\t{%%}rbx, %q1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level))\n-\n-#define __cpuid_count(level, count, a, b, c, d)\t\t\\\n-  __asm__ (\"xchg{q}\\t{%%}rbx, %q1\\n\\t\"\t\t\t\\\n-\t   \"cpuid\\n\\t\"\t\t\t\t\t\\\n-\t   \"xchg{q}\\t{%%}rbx, %q1\\n\\t\"\t\t\t\\\n-\t   : \"=a\" (a), \"=&r\" (b), \"=c\" (c), \"=d\" (d)\t\\\n-\t   : \"0\" (level), \"2\" (count))\n-#else\n #define __cpuid(level, a, b, c, d)\t\t\t\\\n   __asm__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n \t   : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n@@ -204,7 +155,7 @@\n   __asm__ (\"cpuid\\n\\t\"\t\t\t\t\t\\\n \t   : \"=a\" (a), \"=b\" (b), \"=c\" (c), \"=d\" (d)\t\\\n \t   : \"0\" (level), \"2\" (count))\n-#endif\n+\n \n /* Return highest supported input value for cpuid instruction.  ext can\n    be either 0x0 or 0x8000000 to return highest supported value for"}, {"sha": "c913113e1a13d64880952796adcf15a575d1a638", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021478683cc091de9902d297a7b161f8343ffb6a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021478683cc091de9902d297a7b161f8343ffb6a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=021478683cc091de9902d297a7b161f8343ffb6a", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n const char *host_detect_local_cpu (int argc, const char **argv);\n \n-#ifdef __GNUC__\n+#if defined(__GNUC__) && (__GNUC__ >= 5 || !defined(__PIC__))\n #include \"cpuid.h\"\n \n struct cache_desc\n@@ -942,9 +942,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n }\n #else\n \n-/* If we aren't compiling with GCC then the driver will just ignore\n-   -march and -mtune \"native\" target and will leave to the newly\n-   built compiler to generate code for its default target.  */\n+/* If we are compiling with GCC where %EBX register is fixed, then the\n+   driver will just ignore -march and -mtune \"native\" target and will leave\n+   to the newly built compiler to generate code for its default target.  */\n \n const char *host_detect_local_cpu (int, const char **)\n {"}]}