{"sha": "974348eec712f2e48e683c6e577011ac49241e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0MzQ4ZWVjNzEyZjJlNDhlNjgzYzZlNTc3MDExYWM0OTI0MWUwZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-09-25T11:19:11Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-09-25T11:19:11Z"}, "message": "c-ubsan.c (ubsan_instrument_division): Remove unnecessary code.\n\n\t* c-ubsan.c (ubsan_instrument_division): Remove unnecessary code.\n\t(ubsan_instrument_shift): Likewise.\n\n\t* c-c++-common/ubsan/bounds-11.c: New test.\n\t* c-c++-common/ubsan/bounds-12.c: New test.\n\nFrom-SVN: r228114", "tree": {"sha": "6379955efb32fbe80ad10202d9860a24ae8cfb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6379955efb32fbe80ad10202d9860a24ae8cfb3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974348eec712f2e48e683c6e577011ac49241e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974348eec712f2e48e683c6e577011ac49241e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974348eec712f2e48e683c6e577011ac49241e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974348eec712f2e48e683c6e577011ac49241e0f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15dbc1a6df73343e769a8e310c1ed89829b61613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dbc1a6df73343e769a8e310c1ed89829b61613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15dbc1a6df73343e769a8e310c1ed89829b61613"}], "stats": {"total": 86, "additions": 58, "deletions": 28}, "files": [{"sha": "32d0d2575dc55fb32745eabd43012b398c8a29bd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=974348eec712f2e48e683c6e577011ac49241e0f", "patch": "@@ -1,3 +1,8 @@\n+2015-09-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_division): Remove unnecessary code.\n+\t(ubsan_instrument_shift): Likewise.\n+\n 2015-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/64906"}, {"sha": "672762c2aa0ab3753b1e6b9be157ec26a83510fb", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=974348eec712f2e48e683c6e577011ac49241e0f", "patch": "@@ -89,20 +89,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n     return NULL_TREE;\n \n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n-     make sure it gets evaluated before the condition.  If the OP0 is\n-     an instrumented array reference, mark it as having side effects so\n-     it's not folded away.  */\n-  if (flag_sanitize & SANITIZE_BOUNDS)\n-    {\n-      tree xop0 = op0;\n-      while (CONVERT_EXPR_P (xop0))\n-\txop0 = TREE_OPERAND (xop0, 0);\n-      if (TREE_CODE (xop0) == ARRAY_REF)\n-\t{\n-\t  TREE_SIDE_EFFECTS (xop0) = 1;\n-\t  TREE_SIDE_EFFECTS (op0) = 1;\n-\t}\n-    }\n+     make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op0), t);\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op1), t);\n   if (flag_sanitize_undefined_trap_on_error)\n@@ -187,20 +174,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n     return NULL_TREE;\n \n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n-     make sure it gets evaluated before the condition.  If the OP0 is\n-     an instrumented array reference, mark it as having side effects so\n-     it's not folded away.  */\n-  if (flag_sanitize & SANITIZE_BOUNDS)\n-    {\n-      tree xop0 = op0;\n-      while (CONVERT_EXPR_P (xop0))\n-\txop0 = TREE_OPERAND (xop0, 0);\n-      if (TREE_CODE (xop0) == ARRAY_REF)\n-\t{\n-\t  TREE_SIDE_EFFECTS (xop0) = 1;\n-\t  TREE_SIDE_EFFECTS (op0) = 1;\n-\t}\n-    }\n+     make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op0), t);\n   t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t,\n \t\t   tt ? tt : integer_zero_node);"}, {"sha": "ee4661ac6b9cdcc840ba894abcf6cdaa97aa483a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=974348eec712f2e48e683c6e577011ac49241e0f", "patch": "@@ -1,3 +1,8 @@\n+2015-09-25  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/bounds-11.c: New test.\n+\t* c-c++-common/ubsan/bounds-12.c: New test.\n+\n 2015-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/64906"}, {"sha": "c3e0f220dc4a0b7dc9add3c38dfa135f5989182a", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-11.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-11.c?ref=974348eec712f2e48e683c6e577011ac49241e0f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+\n+struct S\n+{\n+  unsigned long a[1];\n+  int l;\n+};\n+\n+static inline unsigned long\n+fn (const struct S *s, int i)\n+{\n+  return s->a[i] / i;\n+}\n+\n+int\n+main ()\n+{\n+  struct S s;\n+  fn (&s, 1);\n+}\n+\n+/* { dg-output \"index 1 out of bounds for type 'long unsigned int \\\\\\[1\\\\\\]'\" } */"}, {"sha": "3cd3a4abb497b0149230881cf6683ef64e50c74b", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-12.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974348eec712f2e48e683c6e577011ac49241e0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-12.c?ref=974348eec712f2e48e683c6e577011ac49241e0f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+\n+struct S\n+{\n+  unsigned long a[1];\n+  int l;\n+};\n+\n+static inline unsigned long\n+fn (const struct S *s, int i)\n+{\n+  return s->a[i] << i;\n+}\n+\n+int\n+main ()\n+{\n+  struct S s;\n+  fn (&s, 1);\n+}\n+\n+/* { dg-output \"index 1 out of bounds for type 'long unsigned int \\\\\\[1\\\\\\]'\" } */"}]}