{"sha": "74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkODZmNGZjMWM1OTY2ZTg4ZjBjZjk3N2UzM2JiMjZjMGNkNjQzZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-20T07:30:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-20T07:30:04Z"}, "message": "c-common.c (c_common_get_alias_set): Correctly handle characters.\n\n        * c-common.c (c_common_get_alias_set): Correctly handle characters.\n        Rearrange order of expressions; don't handle vectors here.\n        * alias.c (get_alias_set): Let vectors match their components.\n\nFrom-SVN: r54821", "tree": {"sha": "0c4e881b9c304c27324e19124ed29268823cef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4e881b9c304c27324e19124ed29268823cef27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/comments", "author": null, "committer": null, "parents": [{"sha": "3b4008995c857e733ea4d998f1228acacc13dafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4008995c857e733ea4d998f1228acacc13dafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4008995c857e733ea4d998f1228acacc13dafe"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "710e2cd3d473b13b27cb19823edde6ca9a95a120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "patch": "@@ -1,3 +1,9 @@\n+2002-05-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (c_common_get_alias_set): Correctly handle characters.\n+\tRearrange order of expressions; don't handle vectors here.\n+\t* alias.c (get_alias_set): Let vectors match their components.\n+\n 2002-06-19  Chris Demetriou  <cgd@broadcom.com>\n \n         * config/mips/mips.c (mips_emit_prefetch): Use hints which"}, {"sha": "2e6a2b084e154f51998ce7afa46d442f3924e93f", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "patch": "@@ -575,6 +575,14 @@ get_alias_set (t)\n      and references to functions, but that's different.)  */\n   else if (TREE_CODE (t) == FUNCTION_TYPE)\n     set = 0;\n+\n+  /* Unless the language specifies otherwise, let vector types alias\n+     their components.  This avoids some nasty type punning issues in\n+     normal usage.  And indeed lets vectors be treated more like an\n+     array slice.  */\n+  else if (TREE_CODE (t) == VECTOR_TYPE)\n+    set = get_alias_set (TREE_TYPE (t));\n+\n   else\n     /* Otherwise make a new alias set for this type.  */\n     set = new_alias_set ();"}, {"sha": "c71f75270066cc78194a5e22bf13f2fc8915cfd6", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "patch": "@@ -2527,10 +2527,6 @@ c_common_get_alias_set (t)\n {\n   tree u;\n   \n-  /* We know nothing about vector types */\n-  if (TREE_CODE (t) == VECTOR_TYPE)\n-    return 0;          \n-  \n   /* Permit type-punning when accessing a union, provided the access\n      is directly through the union.  For example, this code does not\n      permit taking the address of a union member and then storing\n@@ -2544,21 +2540,21 @@ c_common_get_alias_set (t)\n \t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (u, 0))) == UNION_TYPE)\n       return 0;\n \n-  /* If this is a char *, the ANSI C standard says it can alias\n-     anything.  Note that all references need do this.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (t)) == 'r'\n-      && TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE\n-      && TYPE_PRECISION (TREE_TYPE (t)) == TYPE_PRECISION (char_type_node))\n+  /* That's all the expressions we handle specially.  */\n+  if (! TYPE_P (t))\n+    return -1;\n+\n+  /* The C standard guarantess that any object may be accessed via an\n+     lvalue that has character type.  */\n+  if (t == char_type_node\n+      || t == signed_char_type_node\n+      || t == unsigned_char_type_node)\n     return 0;\n \n   /* If it has the may_alias attribute, it can alias anything.  */\n-  if (TYPE_P (t) && lookup_attribute (\"may_alias\", TYPE_ATTRIBUTES (t)))\n+  if (lookup_attribute (\"may_alias\", TYPE_ATTRIBUTES (t)))\n     return 0;\n \n-  /* That's all the expressions we handle specially.  */\n-  if (! TYPE_P (t))\n-    return -1;\n-\n   /* The C standard specifically allows aliasing between signed and\n      unsigned variants of the same type.  We treat the signed\n      variant as canonical.  */"}, {"sha": "5ed4d00b01d0877ad5d27d10838db30d9ccf4c3c", "filename": "gcc/testsuite/gcc.c-torture/execute/20020619-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d86f4fc1c5966e88f0cf977e33bb26c0cd643e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020619-1.c?ref=74d86f4fc1c5966e88f0cf977e33bb26c0cd643e", "patch": "@@ -0,0 +1,32 @@\n+static int ref(void)\n+{\n+  union {\n+    char c[5];\n+    int i;\n+  } u;\n+\n+  __builtin_memset (&u, 0, sizeof(u));\n+  u.c[0] = 1;\n+  u.c[1] = 2;\n+  u.c[2] = 3;\n+  u.c[3] = 4;\n+\n+  return u.i;\n+}\n+\n+#define MAX(a,b)  (a < b ? b : a)\n+\n+static int test(void)\n+{\n+  char c[MAX(5, sizeof(int))] __attribute__((aligned)) = { 1, 2, 3, 4 };\n+  return *(int *)c;\n+}\n+\n+int main()\n+{\n+  int a = test();\n+  int b = ref();\n+  if (a != b)\n+    abort ();\n+  return 0;\n+}"}]}