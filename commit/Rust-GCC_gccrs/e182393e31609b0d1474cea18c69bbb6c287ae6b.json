{"sha": "e182393e31609b0d1474cea18c69bbb6c287ae6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4MjM5M2UzMTYwOWIwZDE0NzRjZWExOGM2OWJiYjZjMjg3YWU2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-19T09:34:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-19T09:34:57Z"}, "message": "PR77990 refactor unique_ptr to encapsulate tuple\n\n\tPR libstdc++/77990\n\t* include/bits/unique_ptr.h (__uniq_ptr_impl): New type to\n\tencapsulate implementation details.\n\t(unique_ptr::unique_ptr(_Up)): Don't copy deleter object.\n\t(unique_ptr::get, unique_ptr::get_deleter, unique_ptr::release):\n\tCall member functions of implementation object.\n\t(unique_ptr<T[], D>): Likewise.\n\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter): Adjust for\n\tnew implementation.\n\t* python/libstdcxx/v6/xmethods.py (UniquePtrGetWorker): Likewise.\n\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust dg-error\n\tlines.\n\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/cons/cv_qual.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/cons/77990.cc: New test.\n\nFrom-SVN: r241330", "tree": {"sha": "5bd7a9125561990d1679f5f2e5d2216001012d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd7a9125561990d1679f5f2e5d2216001012d16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e182393e31609b0d1474cea18c69bbb6c287ae6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182393e31609b0d1474cea18c69bbb6c287ae6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e182393e31609b0d1474cea18c69bbb6c287ae6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182393e31609b0d1474cea18c69bbb6c287ae6b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a3e0c653be4bd32f116dae06438896b7dc915b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a3e0c653be4bd32f116dae06438896b7dc915b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a3e0c653be4bd32f116dae06438896b7dc915b"}], "stats": {"total": 177, "additions": 117, "deletions": 60}, "files": [{"sha": "378d8177bac8f6ed5b830d909b594195574d3a88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -1,3 +1,21 @@\n+2016-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/77990\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl): New type to\n+\tencapsulate implementation details.\n+\t(unique_ptr::unique_ptr(_Up)): Don't copy deleter object.\n+\t(unique_ptr::get, unique_ptr::get_deleter, unique_ptr::release):\n+\tCall member functions of implementation object.\n+\t(unique_ptr<T[], D>): Likewise.\n+\t* python/libstdcxx/v6/printers.py (UniquePointerPrinter): Adjust for\n+\tnew implementation.\n+\t* python/libstdcxx/v6/xmethods.py (UniquePtrGetWorker): Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Adjust dg-error\n+\tlines.\n+\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/cv_qual.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/77990.cc: New test.\n+\n 2016-10-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/bits/shared_ptr.h: Fix indentation."}, {"sha": "e32b6c959b3cff0dc795f12b00113d56962a5889", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 56, "deletions": 55, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -111,33 +111,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  /// 20.7.1.2 unique_ptr for single objects.\n-  template <typename _Tp, typename _Dp = default_delete<_Tp> >\n-    class unique_ptr\n+  template <typename _Tp, typename _Dp>\n+    class __uniq_ptr_impl\n     {\n-      // use SFINAE to determine whether _Del::pointer exists\n-      class _Pointer\n-      {\n-\ttemplate<typename _Up>\n-\t  static typename _Up::pointer __test(typename _Up::pointer*);\n+      template <typename _Up, typename _Ep, typename = void>\n+\tstruct _Ptr\n+\t{\n+\t  using type = _Up*;\n+\t};\n+\n+      template <typename _Up, typename _Ep>\n+\tstruct\n+\t_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>\n+\t{\n+\t  using type = typename remove_reference<_Ep>::type::pointer;\n+\t};\n \n-\ttemplate<typename _Up>\n-\t  static _Tp* __test(...);\n+    public:\n+      using pointer = typename _Ptr<_Tp, _Dp>::type;\n \n-\ttypedef typename remove_reference<_Dp>::type _Del;\n+      __uniq_ptr_impl() = default;\n+      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }\n \n-      public:\n-\ttypedef decltype(__test<_Del>(0)) type;\n-      };\n+      template<typename _Del>\n+      __uniq_ptr_impl(pointer __p, _Del&& __d)\n+\t: _M_t(__p, std::forward<_Del>(__d)) { }\n \n-      typedef std::tuple<typename _Pointer::type, _Dp>  __tuple_type;\n-      __tuple_type                                      _M_t;\n+      pointer&   _M_ptr() { return std::get<0>(_M_t); }\n+      pointer    _M_ptr() const { return std::get<0>(_M_t); }\n+      _Dp&       _M_deleter() { return std::get<1>(_M_t); }\n+      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }\n \n-    public:\n-      typedef typename _Pointer::type   pointer;\n-      typedef _Tp                       element_type;\n-      typedef _Dp                       deleter_type;\n+    private:\n+      tuple<pointer, _Dp> _M_t;\n+    };\n+\n+  /// 20.7.1.2 unique_ptr for single objects.\n+  template <typename _Tp, typename _Dp = default_delete<_Tp>>\n+    class unique_ptr\n+    {\n+      __uniq_ptr_impl<_Tp, _Dp> _M_t;\n \n+    public:\n+      using pointer\t  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;\n+      using element_type  = _Tp;\n+      using deleter_type  = _Dp;\n \n       // helper template for detecting a safe conversion from another\n       // unique_ptr\n@@ -168,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       explicit\n       unique_ptr(pointer __p) noexcept\n-      : _M_t(__p, deleter_type())\n+      : _M_t(__p)\n       { static_assert(!is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n@@ -231,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Destructor, invokes the deleter if the stored pointer is not null.\n       ~unique_ptr() noexcept\n       {\n-\tauto& __ptr = std::get<0>(_M_t);\n+\tauto& __ptr = _M_t._M_ptr();\n \tif (__ptr != nullptr)\n \t  get_deleter()(__ptr);\n \t__ptr = pointer();\n@@ -302,17 +320,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Return the stored pointer.\n       pointer\n       get() const noexcept\n-      { return std::get<0>(_M_t); }\n+      { return _M_t._M_ptr(); }\n \n       /// Return a reference to the stored deleter.\n       deleter_type&\n       get_deleter() noexcept\n-      { return std::get<1>(_M_t); }\n+      { return _M_t._M_deleter(); }\n \n       /// Return a reference to the stored deleter.\n       const deleter_type&\n       get_deleter() const noexcept\n-      { return std::get<1>(_M_t); }\n+      { return _M_t._M_deleter(); }\n \n       /// Return @c true if the stored pointer is not null.\n       explicit operator bool() const noexcept\n@@ -325,7 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       release() noexcept\n       {\n \tpointer __p = get();\n-\tstd::get<0>(_M_t) = pointer();\n+\t_M_t._M_ptr() = pointer();\n \treturn __p;\n       }\n \n@@ -339,7 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       reset(pointer __p = pointer()) noexcept\n       {\n \tusing std::swap;\n-\tswap(std::get<0>(_M_t), __p);\n+\tswap(_M_t._M_ptr(), __p);\n \tif (__p != pointer())\n \t  get_deleter()(__p);\n       }\n@@ -364,23 +382,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Dp>\n     class unique_ptr<_Tp[], _Dp>\n     {\n-      // use SFINAE to determine whether _Del::pointer exists\n-      class _Pointer\n-      {\n-\ttemplate<typename _Up>\n-\t  static typename _Up::pointer __test(typename _Up::pointer*);\n-\n-\ttemplate<typename _Up>\n-\t  static _Tp* __test(...);\n-\n-\ttypedef typename remove_reference<_Dp>::type _Del;\n-\n-      public:\n-\ttypedef decltype(__test<_Del>(0)) type;\n-      };\n-\n-      typedef std::tuple<typename _Pointer::type, _Dp>  __tuple_type;\n-      __tuple_type                                      _M_t;\n+      __uniq_ptr_impl<_Tp, _Dp> _M_t;\n \n       template<typename _Up>\n \tusing __remove_cv = typename remove_cv<_Up>::type;\n@@ -391,11 +393,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = __and_< is_base_of<_Tp, _Up>,\n \t\t    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;\n \n-\n     public:\n-      typedef typename _Pointer::type\tpointer;\n-      typedef _Tp\t\t \telement_type;\n-      typedef _Dp                       deleter_type;\n+      using pointer\t  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;\n+      using element_type  = _Tp;\n+      using deleter_type  = _Dp;\n \n       // helper template for detecting a safe conversion from another\n       // unique_ptr\n@@ -446,7 +447,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                  __safe_conversion_raw<_Up>::value, bool>::type>\n       explicit\n       unique_ptr(_Up __p) noexcept\n-      : _M_t(__p, deleter_type())\n+      : _M_t(__p)\n       { static_assert(!is_pointer<deleter_type>::value,\n \t\t      \"constructed with null function pointer deleter\"); }\n \n@@ -499,7 +500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Destructor, invokes the deleter if the stored pointer is not null.\n       ~unique_ptr()\n       {\n-\tauto& __ptr = std::get<0>(_M_t);\n+\tauto& __ptr = _M_t._M_ptr();\n \tif (__ptr != nullptr)\n \t  get_deleter()(__ptr);\n \t__ptr = pointer();\n@@ -562,17 +563,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Return the stored pointer.\n       pointer\n       get() const noexcept\n-      { return std::get<0>(_M_t); }\n+      { return _M_t._M_ptr(); }\n \n       /// Return a reference to the stored deleter.\n       deleter_type&\n       get_deleter() noexcept\n-      { return std::get<1>(_M_t); }\n+      { return _M_t._M_deleter(); }\n \n       /// Return a reference to the stored deleter.\n       const deleter_type&\n       get_deleter() const noexcept\n-      { return std::get<1>(_M_t); }\n+      { return _M_t._M_deleter(); }\n \n       /// Return @c true if the stored pointer is not null.\n       explicit operator bool() const noexcept\n@@ -585,7 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       release() noexcept\n       {\n \tpointer __p = get();\n-\tstd::get<0>(_M_t) = pointer();\n+\t_M_t._M_ptr() = pointer();\n \treturn __p;\n       }\n \n@@ -612,7 +613,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tpointer __ptr = __p;\n \tusing std::swap;\n-\tswap(std::get<0>(_M_t), __ptr);\n+\tswap(_M_t._M_ptr(), __ptr);\n \tif (__ptr != nullptr)\n \t  get_deleter()(__ptr);\n       }"}, {"sha": "bad42b472a90e3b8aa05132dcc585146022bae37", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -126,7 +126,13 @@ def __init__ (self, typename, val):\n         self.val = val\n \n     def to_string (self):\n-        v = self.val['_M_t']['_M_head_impl']\n+        impl_type = self.val.type.fields()[0].type.tag\n+        if impl_type.startswith('std::__uniq_ptr_impl<'): # New implementation\n+            v = self.val['_M_t']['_M_t']['_M_head_impl']\n+        elif impl_type.startswith('std::tuple<'):\n+            v = self.val['_M_t']['_M_head_impl']\n+        else:\n+            raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % self.val.type.fields()[0].type.tag)\n         return ('std::unique_ptr<%s> containing %s' % (str(v.type.target()),\n                                                        str(v)))\n "}, {"sha": "045b66176372448a81b9b20801206783e3e265f9", "filename": "libstdc++-v3/python/libstdcxx/v6/xmethods.py", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -575,7 +575,12 @@ def get_result_type(self, obj):\n         return self._elem_type.pointer()\n \n     def __call__(self, obj):\n-        return obj['_M_t']['_M_head_impl']\n+        impl_type = obj.dereference().type.fields()[0].type.tag\n+        if impl_type.startswith('std::__uniq_ptr_impl<'): # New implementation\n+            return obj['_M_t']['_M_t']['_M_head_impl']\n+        elif impl_type.startswith('std::tuple<'):\n+            return obj['_M_t']['_M_head_impl']\n+        return None\n \n class UniquePtrDerefWorker(UniquePtrGetWorker):\n     def __init__(self, elem_type):"}, {"sha": "311e8d55f5cf58948db70219fbd5aaeb1c3827cb", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -42,10 +42,10 @@ void f()\n   std::unique_ptr<int, D&> ud(nullptr, d);\n   ub = std::move(ud); // { dg-error \"no match\" }\n   ub2 = ud; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 269 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 287 }\n \n   std::unique_ptr<int[], B&> uba(nullptr, b);\n   std::unique_ptr<int[], D&> uda(nullptr, d);\n   uba = std::move(uda); // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 537 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 538 }\n }"}, {"sha": "e3e9a208de8a191c40699270b704f22690d6798e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/77990.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2F77990.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2F77990.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2F77990.cc?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+struct D {\n+  D() = default;\n+  D(const D&) = delete;\n+  void operator()(int*);\n+};\n+std::unique_ptr<int, D> p((int*)nullptr);  // PR libstdc++/77990"}, {"sha": "829d11283cfd5456ae0a36139976ac538156218b", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/cv_qual.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182393e31609b0d1474cea18c69bbb6c287ae6b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc?ref=e182393e31609b0d1474cea18c69bbb6c287ae6b", "patch": "@@ -105,7 +105,7 @@ test07()\n   std::unique_ptr<const A[]> cA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<volatile A[]> vA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<const volatile A[]> cvA3(p); // { dg-error \"no matching function\" }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 445 }\n+  // { dg-error \"no type\" \"\" { target *-*-* } 446 }\n }\n \n template<typename T>"}]}