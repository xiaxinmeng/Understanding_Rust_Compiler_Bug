{"sha": "0efa4029c4390bacd5ac9659cbb30238d0975880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmYTQwMjljNDM5MGJhY2Q1YWM5NjU5Y2JiMzAyMzhkMDk3NTg4MA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-01-16T18:20:32Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-01-16T18:20:32Z"}, "message": "combine.c (record_value_for_reg): Invalidate registers if INSN is null.\n\n2005-01-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* combine.c (record_value_for_reg): Invalidate registers\n\tif INSN is null.\n\t(record_dead_and_set_regs_1): Likewise, by passing them to\n\trecord_value_for_reg.\n\t(record_dead_and_set_regs): Invalidate stores made by a\n\tcall.  We do not combine across a call, but we still\n\trelied on equivalences.\n\nFrom-SVN: r109759", "tree": {"sha": "09fe661a6f25ff56550e333ac12b26e02d767733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09fe661a6f25ff56550e333ac12b26e02d767733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0efa4029c4390bacd5ac9659cbb30238d0975880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efa4029c4390bacd5ac9659cbb30238d0975880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efa4029c4390bacd5ac9659cbb30238d0975880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efa4029c4390bacd5ac9659cbb30238d0975880/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61ead1351f094cfab41940ea093b88d1ec6dcde6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ead1351f094cfab41940ea093b88d1ec6dcde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ead1351f094cfab41940ea093b88d1ec6dcde6"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "057ad9240cd592422c3a6561e45f58b15d218655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efa4029c4390bacd5ac9659cbb30238d0975880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efa4029c4390bacd5ac9659cbb30238d0975880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0efa4029c4390bacd5ac9659cbb30238d0975880", "patch": "@@ -1,3 +1,13 @@\n+2005-01-16  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* combine.c (record_value_for_reg): Invalidate registers\n+\tif INSN is null.\n+\t(record_dead_and_set_regs_1): Likewise, by passing them to\n+\trecord_value_for_reg.\n+\t(record_dead_and_set_regs): Invalidate stores made by a\n+\tcall.  We do not combine across a call, but we still\n+\trelied on equivalences.\n+\n 2006-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-vrp.c (extract_range_from_binary_expr): Cope with"}, {"sha": "69b9c1022d8e37c84c5a0fb5cda0a2b70e40c6e7", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efa4029c4390bacd5ac9659cbb30238d0975880/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efa4029c4390bacd5ac9659cbb30238d0975880/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0efa4029c4390bacd5ac9659cbb30238d0975880", "patch": "@@ -10927,7 +10927,7 @@ record_value_for_reg (rtx reg, rtx insn, rtx value)\n   for (i = regno; i < endregno; i++)\n     {\n       reg_stat[i].last_set_label = label_tick;\n-      if (value && reg_stat[i].last_set_table_tick == label_tick)\n+      if (!insn || (value && reg_stat[i].last_set_table_tick == label_tick))\n \treg_stat[i].last_set_invalid = 1;\n       else\n \treg_stat[i].last_set_invalid = 0;\n@@ -10976,6 +10976,13 @@ record_dead_and_set_regs_1 (rtx dest, rtx setter, void *data)\n   if (GET_CODE (dest) == SUBREG)\n     dest = SUBREG_REG (dest);\n \n+  if (!record_dead_insn)\n+    {\n+      if (REG_P (dest))\n+\trecord_value_for_reg (dest, NULL_RTX, NULL_RTX);\n+      return;\n+    }\n+\n   if (REG_P (dest))\n     {\n       /* If we are setting the whole register, we know its value.  Otherwise\n@@ -11049,15 +11056,14 @@ record_dead_and_set_regs (rtx insn)\n \n       last_call_cuid = mem_last_set = INSN_CUID (insn);\n \n-      /* Don't bother recording what this insn does.  It might set the\n-\t return value register, but we can't combine into a call\n-\t pattern anyway, so there's no point trying (and it may cause\n-\t a crash, if e.g. we wind up asking for last_set_value of a\n-\t SUBREG of the return value register).  */\n-      return;\n+      /* We can't combine into a call pattern.  Remember, though, that\n+\t the return value register is set at this CUID.  We could\n+\t still replace a register with the return value from the\n+\t wrong subroutine call!  */\n+      note_stores (PATTERN (insn), record_dead_and_set_regs_1, NULL_RTX);\n     }\n-\n-  note_stores (PATTERN (insn), record_dead_and_set_regs_1, insn);\n+  else\n+    note_stores (PATTERN (insn), record_dead_and_set_regs_1, insn);\n }\n \n /* If a SUBREG has the promoted bit set, it is in fact a property of the"}]}