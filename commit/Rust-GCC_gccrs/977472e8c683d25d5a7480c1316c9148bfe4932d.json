{"sha": "977472e8c683d25d5a7480c1316c9148bfe4932d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NDcyZThjNjgzZDI1ZDVhNzQ4MGMxMzE2YzkxNDhiZmU0OTMyZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-14T07:58:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-14T07:58:12Z"}, "message": "re PR tree-optimization/79432 (ICE: verify_ssa failed)\n\n2017-02-14  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/79432\n\t* tree-into-ssa.c (insert_phi_nodes): When the function can\n\thave abnormal edges rewrite SSA names with broken use-def\n\tdominance out of SSA and register them for PHI insertion.\n\n\t* gcc.dg/torture/pr79432.c: New testcase.\n\nFrom-SVN: r245417", "tree": {"sha": "00d9b5b514ba04a02ff9a1d309aa10dae4b1389a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00d9b5b514ba04a02ff9a1d309aa10dae4b1389a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/977472e8c683d25d5a7480c1316c9148bfe4932d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977472e8c683d25d5a7480c1316c9148bfe4932d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977472e8c683d25d5a7480c1316c9148bfe4932d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977472e8c683d25d5a7480c1316c9148bfe4932d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee75687bc64b31bb3561ba77d2660f90a1be4a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee75687bc64b31bb3561ba77d2660f90a1be4a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee75687bc64b31bb3561ba77d2660f90a1be4a75"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "03c28084add7efe37972ae75814c7550c0db84a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=977472e8c683d25d5a7480c1316c9148bfe4932d", "patch": "@@ -1,3 +1,10 @@\n+2017-02-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/79432\n+\t* tree-into-ssa.c (insert_phi_nodes): When the function can\n+\thave abnormal edges rewrite SSA names with broken use-def\n+\tdominance out of SSA and register them for PHI insertion.\n+\n 2017-02-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79496"}, {"sha": "7881615f6b1520f47b292d62b97f5e01efaa0a0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=977472e8c683d25d5a7480c1316c9148bfe4932d", "patch": "@@ -1,3 +1,8 @@\n+2017-02-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/79432\n+\t* gcc.dg/torture/pr79432.c: New testcase.\n+\n 2017-02-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79496"}, {"sha": "47fef0d48c354b612c7eb3182a67e982fa0ed0a5", "filename": "gcc/testsuite/gcc.dg/torture/pr79432.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79432.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79432.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79432.c?ref=977472e8c683d25d5a7480c1316c9148bfe4932d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+int fn1 (void);\n+int __attribute__((returns_twice)) vfork (void);\n+\n+void fn2 ()\n+{\n+  int a;\n+  a = fn1() + 2 + (vfork() + 1 + vfork());\n+}\n+void fn3 ()\n+{\n+  int a;\n+  a = fn1() + 1 + vfork();\n+}\n+void fn4 ()\n+{\n+  int a;\n+  a = fn1() + vfork();\n+}"}, {"sha": "eebb8047442cc2aea92c83b03ecff484b2ac3abd", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/977472e8c683d25d5a7480c1316c9148bfe4932d/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=977472e8c683d25d5a7480c1316c9148bfe4932d", "patch": "@@ -1066,6 +1066,59 @@ insert_phi_nodes (bitmap_head *dfs)\n \n   timevar_push (TV_TREE_INSERT_PHI_NODES);\n \n+  /* When the gimplifier introduces SSA names it cannot easily avoid\n+     situations where abnormal edges added by CFG construction break\n+     the use-def dominance requirement.  For this case rewrite SSA\n+     names with broken use-def dominance out-of-SSA and register them\n+     for PHI insertion.  We only need to do this if abnormal edges\n+     can appear in the function.  */\n+  tree name;\n+  if (cfun->calls_setjmp\n+      || cfun->has_nonlocal_label)\n+    FOR_EACH_SSA_NAME (i, name, cfun)\n+      {\n+\tgimple *def_stmt = SSA_NAME_DEF_STMT (name);\n+\tif (SSA_NAME_IS_DEFAULT_DEF (name))\n+\t  continue;\n+\n+\tbasic_block def_bb = gimple_bb (def_stmt);\n+\timm_use_iterator it;\n+\tgimple *use_stmt;\n+\tbool need_phis = false;\n+\tFOR_EACH_IMM_USE_STMT (use_stmt, it, name)\n+\t  {\n+\t    basic_block use_bb = gimple_bb (use_stmt);\n+\t    if (use_bb != def_bb\n+\t\t&& ! dominated_by_p (CDI_DOMINATORS, use_bb, def_bb))\n+\t      need_phis = true;\n+\t  }\n+\tif (need_phis)\n+\t  {\n+\t    tree var = create_tmp_reg (TREE_TYPE (name));\n+\t    use_operand_p use_p;\n+\t    FOR_EACH_IMM_USE_STMT (use_stmt, it, name)\n+\t      {\n+\t\tbasic_block use_bb = gimple_bb (use_stmt);\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, it)\n+\t\t    SET_USE (use_p, var);\n+\t\tupdate_stmt (use_stmt);\n+\t\tset_livein_block (var, use_bb);\n+\t\tset_rewrite_uses (use_stmt, true);\n+\t\tbitmap_set_bit (interesting_blocks, use_bb->index);\n+\t      }\n+\t    def_operand_p def_p;\n+\t    ssa_op_iter dit;\n+\t    FOR_EACH_SSA_DEF_OPERAND (def_p, def_stmt, dit, SSA_OP_DEF)\n+\t      if (DEF_FROM_PTR (def_p) == name)\n+\t\tSET_DEF (def_p, var);\n+\t    update_stmt (def_stmt);\n+\t    set_def_block (var, def_bb, false);\n+\t    set_register_defs (def_stmt, true);\n+\t    bitmap_set_bit (interesting_blocks, def_bb->index);\n+\t    release_ssa_name (name);\n+\t  }\n+      }\n+\n   auto_vec<var_info *> vars (var_infos->elements ());\n   FOR_EACH_HASH_TABLE_ELEMENT (*var_infos, info, var_info_p, hi)\n     if (info->info.need_phi_state != NEED_PHI_STATE_NO)"}]}