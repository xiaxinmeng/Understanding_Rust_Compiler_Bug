{"sha": "fda0b0eb4f744f012f21c6976c2e42df87c313bb", "node_id": "C_kwDOANBUbNoAKGZkYTBiMGViNGY3NDRmMDEyZjIxYzY5NzZjMmU0MmRmODdjMzEzYmI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-01T13:57:38Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-04T13:13:45Z"}, "message": "Update 'c-c++-common/goacc/classify-*', 'gfortran.dg/goacc/classify-*'\n\n... to use 'dg-line', simplifying later changes.  Also some minor miscellaneous\ndiagnostics scanning maintenance.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-kernels-parloops.c: Update.\n\t* c-c++-common/goacc/classify-kernels-unparallelized-parloops.c:\n\tLikewise.\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Likewise.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine-nohost.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* c-c++-common/goacc/classify-serial.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-parloops.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized-parloops.f95:\n\tLikewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine-nohost.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\t* gfortran.dg/goacc/classify-serial.f95: Likewise.", "tree": {"sha": "d69b3cf008d8b97ac6d706ff7477fe5fb87679d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d69b3cf008d8b97ac6d706ff7477fe5fb87679d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fda0b0eb4f744f012f21c6976c2e42df87c313bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda0b0eb4f744f012f21c6976c2e42df87c313bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda0b0eb4f744f012f21c6976c2e42df87c313bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda0b0eb4f744f012f21c6976c2e42df87c313bb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289f65d643e18210433e0f08ccaaf5b08b3d6f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289f65d643e18210433e0f08ccaaf5b08b3d6f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289f65d643e18210433e0f08ccaaf5b08b3d6f39"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "5f470eb86bc00b31b64585b0ac9c47741f1fdd10", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-parloops.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-parloops.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -20,7 +20,8 @@ extern unsigned int *__restrict c;\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute1 } */\n+  /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "06c70fb9d9f6a060f1305f8ed2aac0325cc74343", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized-parloops.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -24,7 +24,8 @@ extern unsigned int f (unsigned int);\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute1 } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[f (i)] + b[f (i)];\n }"}, {"sha": "4ee8e9d5f39dce432f9e259a4274d10a67b5adca", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -24,7 +24,8 @@ extern unsigned int f (unsigned int);\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute1 } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[f (i)] + b[f (i)];"}, {"sha": "74acca8b4a6ebfb4fe113fa1defc49d84771484d", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -20,7 +20,8 @@ extern unsigned int *__restrict c;\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute1 } */\n+  /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute1 } */\n   /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];"}, {"sha": "61d03c0a5c45b72484dddb59a70f4bf91d80eb0d", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,7 +17,8 @@ extern unsigned int *__restrict c;\n \n void PARALLEL ()\n {\n-#pragma acc parallel loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+#pragma acc parallel loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute_loop_i1 } */\n+  /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_compute_loop_i1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "24dc1b271d7d3f1d2095b48149d8a41e68b02091", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine-nohost.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine-nohost.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -19,7 +19,8 @@ extern unsigned int *__restrict c;\n #pragma acc routine nohost worker\n void ROUTINE ()\n {\n-#pragma acc loop /* { dg-bogus \"assigned OpenACC .* loop parallelism\" } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+  /* { dg-bogus {optimized: assigned OpenACC [^\\n\\r]+ loop parallelism} {} { target *-*-* } l_loop_i1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "075822e81b6d499442154ea864683a1ae5c7d3f0", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -19,7 +19,8 @@ extern unsigned int *__restrict c;\n #pragma acc routine worker\n void ROUTINE ()\n {\n-#pragma acc loop /* { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" } */\n+#pragma acc loop /* { dg-line l_loop_i1 } */\n+  /* { dg-optimized {assigned OpenACC worker vector loop parallelism} {} { target *-*-* } l_loop_i1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "71b8c727cdf388a79593b5f5ee8bbafbaec1ed2c", "filename": "gcc/testsuite/c-c++-common/goacc/classify-serial.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,12 +17,13 @@ extern unsigned int *__restrict c;\n \n void SERIAL ()\n {\n-#pragma acc serial loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n-  /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n-     { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n-     { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+#pragma acc serial loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-line l_compute_loop_i1 } */\n+  /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } l_compute_loop_i1 }\n+     { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } l_compute_loop_i1 }\n+     { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } l_compute_loop_i1 }\n      TODO Should we really diagnose this if the user explicitly requested 'serial'?\n      TODO Should we instead diagnose ('-Wextra' category?) that the user may enable use of parallelism if replacing 'serial' with 'parallel', if applicable?  */\n+  /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_compute_loop_i1 } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "96814a1697d3c99bd57b85f2ea810515d5d9d4df", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-parloops.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-parloops.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -20,7 +20,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute1 }\n+  ! { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "e858617bbc6b758d4b118745dc204ccd082ffbd4", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized-parloops.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized-parloops.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -24,7 +24,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute1 }\n+  ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 }\n   do i = 0, n - 1\n      c(i) = a(f (i)) + b(f (i))\n   end do"}, {"sha": "f8897fc5b3402a87603d4b038762f2389e1cd739", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -24,7 +24,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute1 }\n+  ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 0, n - 1\n      c(i) = a(f (i)) + b(f (i))"}, {"sha": "3fe9b34c9c80b416d61b70112b967c77fb191e5e", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -20,7 +20,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute1 }\n+  ! { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_compute1 }\n   ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)"}, {"sha": "adc38465d52f2dee58c797d0d70e9f02fc70e955", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,7 +17,8 @@ program main\n \n   call setup(a, b)\n \n-  !$acc parallel loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+  !$acc parallel loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute_loop_i1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_compute_loop_i1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "b02fbec89c0b7729d93ce190a0b78cac821a373b", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine-nohost.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine-nohost.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,7 +17,8 @@ subroutine ROUTINE\n \n   call setup(a, b)\n \n-  !$acc loop ! { dg-bogus \"assigned OpenACC .* loop parallelism\" }\n+  !$acc loop ! { dg-line l_loop_i1 }\n+  ! { dg-bogus {optimized: assigned OpenACC [^\\n\\r]+ loop parallelism} {} { target *-*-* } l_loop_i1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "e991783da1ea0c80971d97403b48d25e69f91978", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,7 +17,8 @@ subroutine ROUTINE\n \n   call setup(a, b)\n \n-  !$acc loop ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+  !$acc loop ! { dg-line l_loop_i1 }\n+  ! { dg-optimized {assigned OpenACC worker vector loop parallelism} {} { target *-*-* } l_loop_i1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "21015879703139e47dfba905d08a1cd34cbda033", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-serial.f95", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda0b0eb4f744f012f21c6976c2e42df87c313bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95?ref=fda0b0eb4f744f012f21c6976c2e42df87c313bb", "patch": "@@ -17,10 +17,11 @@ program main\n \n   call setup(a, b)\n \n-  !$acc serial loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n-  ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n-  ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n-  ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+  !$acc serial loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-line l_compute_loop_i1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } l_compute_loop_i1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } l_compute_loop_i1 }\n+  ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } l_compute_loop_i1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_compute_loop_i1 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}]}