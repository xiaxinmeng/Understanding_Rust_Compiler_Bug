{"sha": "558ef0f7716522e45be93106f33e07cf90f72b7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4ZWYwZjc3MTY1MjJlNDViZTkzMTA2ZjMzZTA3Y2Y5MGY3MmI3Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-05T01:15:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-05T01:15:46Z"}, "message": "stl_raw_storage_iter.h (class raw_storage_iterator): Adjust template parameter name.\n\n2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_raw_storage_iter.h (class raw_storage_iterator):\n\tAdjust template parameter name.\n\nFrom-SVN: r124459", "tree": {"sha": "c890111d96d926d722a754590d266855fc885a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c890111d96d926d722a754590d266855fc885a10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/558ef0f7716522e45be93106f33e07cf90f72b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558ef0f7716522e45be93106f33e07cf90f72b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558ef0f7716522e45be93106f33e07cf90f72b7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558ef0f7716522e45be93106f33e07cf90f72b7f/comments", "author": null, "committer": null, "parents": [{"sha": "88e6c94714fac98e4f077f57932d786930124d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e6c94714fac98e4f077f57932d786930124d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e6c94714fac98e4f077f57932d786930124d1c"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "a78bb09ec28d5463a00a6820dff08d01c15a6d1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ef0f7716522e45be93106f33e07cf90f72b7f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ef0f7716522e45be93106f33e07cf90f72b7f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=558ef0f7716522e45be93106f33e07cf90f72b7f", "patch": "@@ -1,3 +1,8 @@\n+2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_raw_storage_iter.h (class raw_storage_iterator):\n+\tAdjust template parameter name.\n+\n 2007-05-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/cxxabi.h (__cxa_atexit): Conditionalize exception"}, {"sha": "08e6c58f6b41a818853bd76bfc644ff6ed187562", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558ef0f7716522e45be93106f33e07cf90f72b7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558ef0f7716522e45be93106f33e07cf90f72b7f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=558ef0f7716522e45be93106f33e07cf90f72b7f", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -67,16 +68,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  This iterator class lets algorithms store their results into\n    *  uninitialized memory.\n   */\n-  template <class _ForwardIterator, class _Tp>\n+  template <class _OutputIterator, class _Tp>\n     class raw_storage_iterator\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-      _ForwardIterator _M_iter;\n+      _OutputIterator _M_iter;\n \n     public:\n       explicit\n-      raw_storage_iterator(_ForwardIterator __x)\n+      raw_storage_iterator(_OutputIterator __x)\n       : _M_iter(__x) {}\n \n       raw_storage_iterator&\n@@ -89,17 +90,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn *this;\n       }\n \n-      raw_storage_iterator<_ForwardIterator, _Tp>&\n+      raw_storage_iterator<_OutputIterator, _Tp>&\n       operator++()\n       {\n \t++_M_iter;\n \treturn *this;\n       }\n \n-      raw_storage_iterator<_ForwardIterator, _Tp>\n+      raw_storage_iterator<_OutputIterator, _Tp>\n       operator++(int)\n       {\n-\traw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;\n+\traw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;\n \t++_M_iter;\n \treturn __tmp;\n       }"}]}