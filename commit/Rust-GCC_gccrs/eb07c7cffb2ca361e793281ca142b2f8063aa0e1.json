{"sha": "eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwN2M3Y2ZmYjJjYTM2MWU3OTMyODFjYTE0MmIyZjgwNjNhYTBlMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-10T21:54:15Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-10T21:54:15Z"}, "message": "PR middle-end/78245 - missing -Wformat-length on an overflow of a dynamically allocated buffer\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/78245\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Add tests.\n\ngcc/ChangeLog:\n\n\tPR middle-end/78245\n\t* gimple-ssa-sprintf.c (get_destination_size): Call\n\t{init,fini}object_sizes.\n\t* tree-object-size.c (addr_object_size): Adjust.\n\t(pass_through_call): Adjust.\n\t(pass_object_sizes::execute): Adjust.\n\t* tree-object-size.h (fini_object_sizes): Declare.\n\nFrom-SVN: r244293", "tree": {"sha": "082ec7518c01c45d3ae0445135abb05700e30116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082ec7518c01c45d3ae0445135abb05700e30116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/comments", "author": null, "committer": null, "parents": [{"sha": "b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f4757f8eb94d4b145613ee5047f3f95452f9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f4757f8eb94d4b145613ee5047f3f95452f9d2"}], "stats": {"total": 132, "additions": 118, "deletions": 14}, "files": [{"sha": "9b327f67fa91b2fc5deecd672841fdd096c1bdec", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "patch": "@@ -2723,6 +2723,9 @@ get_destination_size (tree dest)\n      a member array as opposed to the whole enclosing object), otherwise\n      use type-zero object size to determine the size of the enclosing\n      object (the function fails without optimization in this type).  */\n+\n+  init_object_sizes ();\n+\n   int ost = optimize > 0;\n   unsigned HOST_WIDE_INT size;\n   if (compute_builtin_object_size (dest, ost, &size))\n@@ -3120,6 +3123,8 @@ pass_sprintf_length::execute (function *fun)\n \t}\n     }\n \n+  fini_object_sizes ();\n+\n   return 0;\n }\n "}, {"sha": "eb5978180f1f5adcab4fa5986123fcdf21029ab3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 111, "deletions": 13, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "patch": "@@ -1,5 +1,10 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Wformat -Wformat-length=1 -ftrack-macro-expansion=0\" } */\n+/* Verify that all sprintf built-ins detect overflow involving directives\n+   with non-constant arguments known to be constrained by some range of\n+   values, and even when writing into dynamically allocated buffers.\n+   -O2 (-ftree-vrp) is necessary for the tests involving ranges to pass,\n+   otherwise -O1 is sufficient.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wformat -Wformat-length=1 -ftrack-macro-expansion=0\" } */\n \n typedef __SIZE_TYPE__ size_t;\n \n@@ -9,18 +14,26 @@ typedef __SIZE_TYPE__ size_t;\n \n #define bos(x) __builtin_object_size (x, 0)\n \n-#define T(bufsize, fmt, ...)\t\t\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-      if (!LINE || __LINE__ == LINE)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  char *d = (char *)__builtin_malloc (bufsize);\t\t\t\\\n-\t  __builtin___sprintf_chk (d, 0, bos (d), fmt, __VA_ARGS__);\t\\\n-\t  sink (d);\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    } while (0)\n+/* Defined (and redefined) to the allocation function to use, either\n+   malloc, or alloca, or a VLA.  */\n+#define ALLOC(p, n)   (p) = __builtin_malloc (n)\n \n-void\n-sink (void*);\n+/* Defined (and redefined) to the sprintf function to exercise.  */\n+#define TEST_SPRINTF(d, maxsize, objsize, fmt, ...)\t\t\\\n+  __builtin___sprintf_chk (d, 0, objsize, fmt, __VA_ARGS__)\n+\n+#define T(bufsize, fmt, ...)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    if (!LINE || __LINE__ == LINE)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tchar *d;\t\t\t\t\t\\\n+\tALLOC (d, bufsize);\t\t\t\t\\\n+\tTEST_SPRINTF (d, 0, bos (d), fmt, __VA_ARGS__);\t\\\n+\tsink (d);\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+void sink (void*);\n \n /* Identity function to verify that the checker figures out the value\n    of the operand even when it's not constant (i.e., makes use of\n@@ -362,3 +375,88 @@ void test_too_large (char *d, int x, __builtin_va_list va)\n   __builtin___vsnprintf_chk (d, ptrmax_m1, 0, ptrmax_m1, \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX - 1\" { target lp64 } } */\n   __builtin___vsnprintf_chk (d, ptrmax,    0, ptrmax,    \"%c\", va);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds .INT_MAX.\" \"PTRDIFF_MAX\" { target lp64 } } */\n }\n+\n+/* Exercise ordinary sprintf with malloc.  */\n+#undef TEST_SPRINTF\n+#define TEST_SPRINTF(d, maxsize, objsize, fmt, ...)\t\\\n+  __builtin_sprintf (d, fmt, __VA_ARGS__)\n+\n+void test_sprintf_malloc (const char *s, const char *t)\n+{\n+#define x x ()\n+\n+  T (1, \"%-s\", x ? \"\" : \"1\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : \"\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : \"1\");        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : s);        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : t);\n+\n+  T (2, \"%-s\", x ? \"\" : \"1\");\n+  T (2, \"%-s\", x ? \"\" : s);\n+  T (2, \"%-s\", x ? \"1\" : \"\");\n+  T (2, \"%-s\", x ? s : \"\");\n+  T (2, \"%-s\", x ? \"1\" : \"2\");\n+  T (2, \"%-s\", x ? \"\" : \"12\");      /* { dg-warning \"nul past the end\" } */\n+  T (2, \"%-s\", x ? \"12\" : \"\");      /* { dg-warning \"nul past the end\" } */\n+\n+  T (2, \"%-s\", x ? \"\" : \"123\");     /* { dg-warning \"into a region\" } */\n+  T (2, \"%-s\", x ? \"123\" : \"\");     /* { dg-warning \"into a region\" } */\n+\n+#undef x\n+}\n+\n+/* Exercise ordinary sprintf with alloca.  */\n+#undef ALLOC\n+#define ALLOC(p, n) (p) = __builtin_alloca (n)\n+\n+void test_sprintf_alloca (const char *s, const char *t)\n+{\n+#define x x ()\n+\n+  T (1, \"%-s\", x ? \"\" : \"1\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : \"\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : \"1\");        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : s);        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : t);\n+\n+  T (2, \"%-s\", x ? \"\" : \"1\");\n+  T (2, \"%-s\", x ? \"\" : s);\n+  T (2, \"%-s\", x ? \"1\" : \"\");\n+  T (2, \"%-s\", x ? s : \"\");\n+  T (2, \"%-s\", x ? \"1\" : \"2\");\n+  T (2, \"%-s\", x ? \"\" : \"12\");      /* { dg-warning \"nul past the end\" } */\n+  T (2, \"%-s\", x ? \"12\" : \"\");      /* { dg-warning \"nul past the end\" } */\n+\n+  T (2, \"%-s\", x ? \"\" : \"123\");     /* { dg-warning \"into a region\" } */\n+  T (2, \"%-s\", x ? \"123\" : \"\");     /* { dg-warning \"into a region\" } */\n+\n+#undef x\n+}\n+\n+/* Exercise ordinary sprintf with a VLA.  */\n+#undef ALLOC\n+#define ALLOC(p, n) char vla [i (n)]; (p) = vla\n+\n+void test_sprintf_vla (const char *s, const char *t)\n+{\n+#define x x ()\n+\n+  T (1, \"%-s\", x ? \"\" : \"1\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : \"\");       /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : \"1\");        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? \"1\" : s);        /* { dg-warning \"nul past the end\" } */\n+  T (1, \"%-s\", x ? s : t);\n+\n+  T (2, \"%-s\", x ? \"\" : \"1\");\n+  T (2, \"%-s\", x ? \"\" : s);\n+  T (2, \"%-s\", x ? \"1\" : \"\");\n+  T (2, \"%-s\", x ? s : \"\");\n+  T (2, \"%-s\", x ? \"1\" : \"2\");\n+  T (2, \"%-s\", x ? \"\" : \"12\");      /* { dg-warning \"nul past the end\" } */\n+  T (2, \"%-s\", x ? \"12\" : \"\");      /* { dg-warning \"nul past the end\" } */\n+\n+  T (2, \"%-s\", x ? \"\" : \"123\");     /* { dg-warning \"into a region\" } */\n+  T (2, \"%-s\", x ? \"123\" : \"\");     /* { dg-warning \"into a region\" } */\n+\n+#undef x\n+}"}, {"sha": "eb08b33316c3dc965748eb0ee4db0dac88a6f39c", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "patch": "@@ -1235,7 +1235,7 @@ init_object_sizes (void)\n \n /* Destroy data structures after the object size computation.  */\n \n-static void\n+void\n fini_object_sizes (void)\n {\n   int object_size_type;"}, {"sha": "1b5580573294e94b7af314a36638a01693ff7c26", "filename": "gcc/tree-object-size.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftree-object-size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07c7cffb2ca361e793281ca142b2f8063aa0e1/gcc%2Ftree-object-size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.h?ref=eb07c7cffb2ca361e793281ca142b2f8063aa0e1", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_OBJECT_SIZE_H\n \n extern void init_object_sizes (void);\n+extern void fini_object_sizes (void);\n extern bool compute_builtin_object_size (tree, int, unsigned HOST_WIDE_INT *);\n \n #endif  // GCC_TREE_OBJECT_SIZE_H"}]}