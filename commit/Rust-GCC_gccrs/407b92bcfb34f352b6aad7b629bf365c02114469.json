{"sha": "407b92bcfb34f352b6aad7b629bf365c02114469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3YjkyYmNmYjM0ZjM1MmI2YWFkN2I2MjliZjM2NWMwMjExNDQ2OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-08-27T23:31:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-08-27T23:31:44Z"}, "message": "PR tree-optimization/91567 - Spurious -Wformat-overflow warnings building glibc (32-bit only)\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/91567\n\t* gimple-ssa-sprintf.c (get_string_length): Handle more forms of lengths\n\tof unknown strings.\n\t* vr-values.c (vr_values::extract_range_basic): Set strlen upper bound\n\tto PTRDIFF_MAX - 2.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/91567\n\t* gcc.dg/tree-ssa/builtin-snprintf-6.c: Xfail a subset of assertions\n\ton targets other than x86_64 to work around PR 83543.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-22.c: New test.\n\nFrom-SVN: r274976", "tree": {"sha": "aae733d110df9ec932c4b6e87ca9b79a1ae4305b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae733d110df9ec932c4b6e87ca9b79a1ae4305b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/407b92bcfb34f352b6aad7b629bf365c02114469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407b92bcfb34f352b6aad7b629bf365c02114469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/407b92bcfb34f352b6aad7b629bf365c02114469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407b92bcfb34f352b6aad7b629bf365c02114469/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d8ba44101028f4be534a20a0d2146695e1dc4fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8ba44101028f4be534a20a0d2146695e1dc4fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8ba44101028f4be534a20a0d2146695e1dc4fd"}], "stats": {"total": 106, "additions": 101, "deletions": 5}, "files": [{"sha": "1213e958bb8a2d0b3bda43c7c4bbf99c87e85230", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -1,3 +1,11 @@\n+2019-08-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/91567\n+\t* gimple-ssa-sprintf.c (get_string_length): Handle more forms of lengths\n+\tof unknown strings.\n+\t* vr-values.c (vr_values::extract_range_basic): Set strlen upper bound\n+\tto PTRDIFF_MAX - 2.\n+\n 2019-08-27  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-strlen.c (printf_strlen_execute): Initialize"}, {"sha": "b11d7989d5e866cd8cb8f62d41c95657bc91ad79", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -1994,10 +1994,21 @@ get_string_length (tree str, unsigned eltsize, const vr_values *vr)\n      or it's SIZE_MAX otherwise.  */\n \n   /* Return the default result when nothing is known about the string.  */\n-  if (lendata.maxbound\n-      && integer_all_onesp (lendata.maxbound)\n-      && integer_all_onesp (lendata.maxlen))\n-    return fmtresult ();\n+  if (lendata.maxbound)\n+    {\n+      if (integer_all_onesp (lendata.maxbound)\n+      \t  && integer_all_onesp (lendata.maxlen))\n+      \treturn fmtresult ();\n+\n+      if (!tree_fits_uhwi_p (lendata.maxbound)\n+\t  || !tree_fits_uhwi_p (lendata.maxlen))\n+      \treturn fmtresult ();\n+\n+      unsigned HOST_WIDE_INT lenmax = tree_to_uhwi (max_object_size ()) - 2;\n+      if (lenmax <= tree_to_uhwi (lendata.maxbound)\n+\t  && lenmax <= tree_to_uhwi (lendata.maxlen))\n+\treturn fmtresult ();\n+    }\n \n   HOST_WIDE_INT min\n     = (tree_fits_uhwi_p (lendata.minlen)"}, {"sha": "cd6fb7fc8f6a4a633da73008e6842edbb190d1f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -1,3 +1,10 @@\n+2019-08-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/91567\n+\t* gcc.dg/tree-ssa/builtin-snprintf-6.c: Xfail a subset of assertions\n+\ton targets other than x86_64 to work around PR 83543.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-22.c: New test.\n+\n 2019-08-27  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/20190827-1.c: New test."}, {"sha": "df0e6b7d19c89f96f30c909487b502ccf0202746", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-6.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-6.c?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -65,6 +65,10 @@ void test_assign_init_list (void)\n   T (5, ARGS ({ 1, 2, 3, 4, 5, 6, 0 }), \"s=%.*s\", 3, &a[2]);\n }\n \n+#if __x86_64__\n+\n+/* Enabled only on x86_64 to work around PR 83543.  */\n+\n #undef T\n #define T(expect, init, fmt, ...)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n@@ -87,6 +91,9 @@ void test_assign_aggregate (void)\n   T (5, \"123456\", \"s=%.*s\", 3, &s.a[2]);\n }\n \n+/* { dg-final { scan-tree-dump-times \"Function test_assign_aggregate\" 1 \"optimized\" { xfail { { ! x86_64-*-* } || { ilp32 } } } } } */\n+\n+#endif   /* x86_64 */\n \n #undef T\n #define T(expect, init, fmt, ...)\t\t\t\\"}, {"sha": "6fd1bca3c7bf447e2b26f22b6857992ca6ee6d35", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-22.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-22.c?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -0,0 +1,58 @@\n+/* PR tree-optimization/91567 - Spurious -Wformat-overflow warnings building\n+   glibc (32-bit only)\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int sprintf (char*, const char*, ...);\n+extern size_t strlen (const char*);\n+\n+void f (char *);\n+\n+void g (char *s1, char *s2)\n+{\n+  char b[1025];\n+  size_t n = __builtin_strlen (s1), d = __builtin_strlen (s2);\n+  if (n + d + 1 >= 1025)\n+    return;\n+\n+  sprintf (b, \"%s.%s\", s1, s2);     // { dg-bogus \"\\\\\\[-Wformat-overflow\" }\n+\n+  f (b);\n+}\n+\n+/* Extracted from gcc/c-cppbuiltin.c.  */\n+\n+void cpp_define (char*);\n+\n+static void\n+builtin_define_type_minmax (const char *min_macro, const char *max_macro,\n+\t\t\t    void *type)\n+{\n+  extern const char *suffix;\n+  char *buf;\n+\n+  if (type)\n+    {\n+      buf = (char *) __builtin_alloca (__builtin_strlen (min_macro) + 2\n+\t\t\t\t       + __builtin_strlen (suffix) + 1);\n+      sprintf (buf, \"%s=0%s\", min_macro, suffix);      // { dg-bogus \"\\\\\\[-Wformat-overflow\" }\n+    }\n+  else\n+    {\n+      buf = (char *) __builtin_alloca (__builtin_strlen (min_macro) + 3\n+\t\t\t\t       + __builtin_strlen (max_macro) + 6);\n+      sprintf (buf, \"%s=(-%s - 1)\", min_macro, max_macro);  // { dg-bogus \"\\\\\\[-Wformat-overflow\" }\n+    }\n+\n+  cpp_define (buf);\n+}\n+\n+void\n+c_cpp_builtins (void *type)\n+{\n+\n+  builtin_define_type_minmax (\"__WCHAR_MIN__\", \"__WCHAR_MAX__\", type);\n+  builtin_define_type_minmax (\"__WINT_MIN__\", \"__WINT_MAX__\", type);\n+}"}, {"sha": "256cae73ebb88abf9b0bd00fe355405185cac627", "filename": "gcc/vr-values.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/407b92bcfb34f352b6aad7b629bf365c02114469/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=407b92bcfb34f352b6aad7b629bf365c02114469", "patch": "@@ -1319,7 +1319,12 @@ vr_values::extract_range_basic (value_range *vr, gimple *stmt)\n \t\ttree max = vrp_val_max (ptrdiff_type_node);\n \t\twide_int wmax = wi::to_wide (max, TYPE_PRECISION (TREE_TYPE (max)));\n \t\ttree range_min = build_zero_cst (type);\n-\t\ttree range_max = wide_int_to_tree (type, wmax - 1);\n+\t\t/* To account for the terminating NUL, the maximum length\n+\t\t   is one less than the maximum array size, which in turn\n+\t\t   is one  less than PTRDIFF_MAX (or SIZE_MAX where it's\n+\t\t   smaller than the former type).\n+\t\t   FIXME: Use max_object_size() - 1 here.  */\n+\t\ttree range_max = wide_int_to_tree (type, wmax - 2);\n \t\tvr->set (VR_RANGE, range_min, range_max);\n \t\treturn;\n \t      }"}]}