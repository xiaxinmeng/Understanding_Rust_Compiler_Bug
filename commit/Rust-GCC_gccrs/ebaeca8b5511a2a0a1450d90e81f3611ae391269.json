{"sha": "ebaeca8b5511a2a0a1450d90e81f3611ae391269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhZWNhOGI1NTExYTJhMGExNDUwZDkwZTgxZjM2MTFhZTM5MTI2OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-24T14:24:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-24T14:24:00Z"}, "message": "basic_ios.tcc (copyfmt(const basic_ios&)): Tweak my fix for libstdc++/12657.\n\n2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_ios.tcc (copyfmt(const basic_ios&)):\n\tTweak my fix for libstdc++/12657.\n\nFrom-SVN: r72895", "tree": {"sha": "687ec98bea5e95a432e9d9929a0427ec5b517632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687ec98bea5e95a432e9d9929a0427ec5b517632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebaeca8b5511a2a0a1450d90e81f3611ae391269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaeca8b5511a2a0a1450d90e81f3611ae391269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebaeca8b5511a2a0a1450d90e81f3611ae391269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaeca8b5511a2a0a1450d90e81f3611ae391269/comments", "author": null, "committer": null, "parents": [{"sha": "f9225794387f19498aa5dfbd505736d1267d66e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9225794387f19498aa5dfbd505736d1267d66e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9225794387f19498aa5dfbd505736d1267d66e1"}], "stats": {"total": 94, "additions": 49, "deletions": 45}, "files": [{"sha": "eecb7bc594040d07de9b8305c066b97b53d75984", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaeca8b5511a2a0a1450d90e81f3611ae391269/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaeca8b5511a2a0a1450d90e81f3611ae391269/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ebaeca8b5511a2a0a1450d90e81f3611ae391269", "patch": "@@ -1,3 +1,8 @@\n+2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_ios.tcc (copyfmt(const basic_ios&)):\n+\tTweak my fix for libstdc++/12657.\n+\n 2003-10-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get::do_get(...,"}, {"sha": "45cc894f67c70f8f83e62b08bfdbcd0076277a5a", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaeca8b5511a2a0a1450d90e81f3611ae391269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaeca8b5511a2a0a1450d90e81f3611ae391269/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=ebaeca8b5511a2a0a1450d90e81f3611ae391269", "patch": "@@ -62,53 +62,52 @@ namespace std\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 292. effects of a.copyfmt (a)\n-      if (this == &__rhs)\n-\treturn *this;\n-\n-      // Per 27.1.1, do not call imbue, yet must trash all caches\n-      // associated with imbue()\n-\n-      // Alloc any new word array first, so if it fails we have \"rollback\".\n-      _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n-\t                 _M_local_word : new _Words[__rhs._M_word_size];\n-\n-      // Bump refs before doing callbacks, for safety.\n-      _Callback_list* __cb = __rhs._M_callbacks;\n-      if (__cb) \n-\t__cb->_M_add_reference();\n-      _M_call_callbacks(erase_event);\n-      if (_M_word != _M_local_word) \n+      if (this != &__rhs)\n \t{\n-\t  delete [] _M_word;\n-\t  _M_word = 0;\n+\t  // Per 27.1.1, do not call imbue, yet must trash all caches\n+\t  // associated with imbue()\n+\t  \n+\t  // Alloc any new word array first, so if it fails we have \"rollback\".\n+\t  _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n+\t                     _M_local_word : new _Words[__rhs._M_word_size];\n+\n+\t  // Bump refs before doing callbacks, for safety.\n+\t  _Callback_list* __cb = __rhs._M_callbacks;\n+\t  if (__cb) \n+\t    __cb->_M_add_reference();\n+\t  _M_call_callbacks(erase_event);\n+\t  if (_M_word != _M_local_word) \n+\t    {\n+\t      delete [] _M_word;\n+\t      _M_word = 0;\n+\t    }\n+\t  _M_dispose_callbacks();\n+\n+\t  // NB: Don't want any added during above.\n+\t  _M_callbacks = __cb;  \n+\t  for (int __i = 0; __i < __rhs._M_word_size; ++__i)\n+\t    __words[__i] = __rhs._M_word[__i];\n+\t  if (_M_word != _M_local_word) \n+\t    {\n+\t      delete [] _M_word;\n+\t      _M_word = 0;\n+\t    }\n+\t  _M_word = __words;\n+\t  _M_word_size = __rhs._M_word_size;\n+\t  \n+\t  this->flags(__rhs.flags());\n+\t  this->width(__rhs.width());\n+\t  this->precision(__rhs.precision());\n+\t  this->tie(__rhs.tie());\n+\t  this->fill(__rhs.fill());\n+\t  _M_ios_locale = __rhs.getloc();\n+\t  _M_cache_locale(_M_ios_locale);\n+\t  \n+\t  _M_call_callbacks(copyfmt_event);\n+\t  \n+\t  // The next is required to be the last assignment.\n+\t  this->exceptions(__rhs.exceptions());\n \t}\n-      _M_dispose_callbacks();\n-\n-      // NB: Don't want any added during above.\n-      _M_callbacks = __cb;  \n-      for (int __i = 0; __i < __rhs._M_word_size; ++__i)\n-\t__words[__i] = __rhs._M_word[__i];\n-      if (_M_word != _M_local_word) \n-\t{\n-\t  delete [] _M_word;\n-\t  _M_word = 0;\n-\t}\n-      _M_word = __words;\n-      _M_word_size = __rhs._M_word_size;\n-\n-      this->flags(__rhs.flags());\n-      this->width(__rhs.width());\n-      this->precision(__rhs.precision());\n-      this->tie(__rhs.tie());\n-      this->fill(__rhs.fill());\n-      _M_ios_locale = __rhs.getloc();\n-      _M_cache_locale(_M_ios_locale);\n-\n-      _M_call_callbacks(copyfmt_event);\n-\n-      // The next is required to be the last assignment.\n-      this->exceptions(__rhs.exceptions());\n-\n       return *this;\n     }\n "}]}