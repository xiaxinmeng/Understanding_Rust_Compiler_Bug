{"sha": "3b2b3556c17b4423f2f1d3249790735e4856d53e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IyYjM1NTZjMTdiNDQyM2YyZjFkMzI0OTc5MDczNWU0ODU2ZDUzZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-05-02T23:20:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-05-02T23:20:38Z"}, "message": "faq.xml: Update outdated allocator documentation.\n\n\t* doc/xml/faq.xml: Update outdated allocator documentation.\n\t* doc/xml/manual/allocator.xml: Likewise.\n\t* doc/xml/manual/debug.xml: Likewise.\n\t* doc/xml/manual/evolution.xml: Likewise.\n\t* doc/xml/manual/using.xml: Likewise.\n\nFrom-SVN: r187068", "tree": {"sha": "914ded801fe137c4ce42ca45814bd9c1326b66f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914ded801fe137c4ce42ca45814bd9c1326b66f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b2b3556c17b4423f2f1d3249790735e4856d53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2b3556c17b4423f2f1d3249790735e4856d53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2b3556c17b4423f2f1d3249790735e4856d53e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2b3556c17b4423f2f1d3249790735e4856d53e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d632488ae0c52c1cd08cc6a94dc2df1276bc3106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d632488ae0c52c1cd08cc6a94dc2df1276bc3106"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "d9961cc18f37a8f3efdb48e08b73e57f7f19cb80", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -1,3 +1,11 @@\n+2012-05-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/faq.xml: Update outdated allocator documentation.\n+\t* doc/xml/manual/allocator.xml: Likewise.\n+\t* doc/xml/manual/debug.xml: Likewise.\n+\t* doc/xml/manual/evolution.xml: Likewise.\n+\t* doc/xml/manual/using.xml: Likewise.\n+\n 2012-05-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/44015\n@@ -21,7 +29,7 @@\n \t* Same.  include/std/sstream: Same.\n \t* include/std/streambuf: Same.\n \t* testsuite/23_containers/deque/requirements/dr438/*:\n-          Adjust line numbers.\n+\tAdjust line numbers.\n \t* testsuite/23_containers/list/requirements/dr438/*: Same.\n \t* testsuite/23_containers/vector/requirements/dr438/*: Same.\n "}, {"sha": "1408bd2461071adf759779e6f637e0e4c3e1c249", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -935,8 +935,8 @@\n     A few people have reported that the standard containers appear\n     to leak memory when tested with memory checkers such as\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://valgrind.org/\">valgrind</link>.\n-    The library's default allocators keep free memory in a pool\n-    for later reuse, rather than returning it to the OS.  Although\n+    Under some configurations the library's allocators keep free memory in a\n+    pool for later reuse, rather than returning it to the OS.  Although\n     this memory is always reachable by the library and is never\n     lost, memory debugging tools can report it as a leak.  If you\n     want to test the library for memory leaks please read"}, {"sha": "911aaf5831bbd0930accd4613ad4ea14e15acb6f", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -103,7 +103,7 @@\n     implements the simple operator new and operator delete semantics,\n     while <classname>__gnu_cxx::malloc_allocator</classname>\n     implements much the same thing, only with the C language functions\n-    <function>std::malloc</function> and <function>free</function>.\n+    <function>std::malloc</function> and <function>std::free</function>.\n   </para>\n \n   <para>\n@@ -236,12 +236,12 @@\n \n     <para>\n       In use, <classname>allocator</classname> may allocate and\n-      deallocate using implementation-specified strategies and\n-      heuristics. Because of this, every call to an allocator object's\n+      deallocate using implementation-specific strategies and\n+      heuristics. Because of this, a given call to an allocator object's\n       <function>allocate</function> member function may not actually\n-      call the global operator new. This situation is also duplicated\n-      for calls to the <function>deallocate</function> member\n-      function.\n+      call the global <code>operator new</code> and a given call to\n+      to the <function>deallocate</function> member function may not\n+      call <code>operator delete</code>.\n     </para>\n \n    <para>\n@@ -250,17 +250,17 @@\n \n    <para>\n      In particular, this can make debugging memory errors more\n-     difficult, especially when using third party tools like valgrind or\n+     difficult, especially when using third-party tools like valgrind or\n      debug versions of <function>new</function>.\n    </para>\n \n    <para>\n      There are various ways to solve this problem. One would be to use\n      a custom allocator that just called operators\n      <function>new</function> and <function>delete</function>\n-     directly, for every allocation. (See\n+     directly, for every allocation. (See the default allocator,\n      <filename>include/ext/new_allocator.h</filename>, for instance.)\n-     However, that option would involve changing source code to use\n+     However, that option may involve changing source code to use\n      a non-default allocator. Another option is to force the\n      default allocator to remove caching and pools, and to directly\n      allocate with every call of <function>allocate</function> and\n@@ -271,8 +271,8 @@\n \n \n    <para>\n-     To globally disable memory caching within the library for the\n-     default allocator, merely set\n+     To globally disable memory caching within the library for some of\n+     the optional non-default allocators, merely set\n      <constant>GLIBCXX_FORCE_NEW</constant> (with any value) in the\n      system's environment before running the program. If your program\n      crashes with <constant>GLIBCXX_FORCE_NEW</constant> in the\n@@ -472,7 +472,8 @@\n        <para>\n \t A high-performance fixed-size allocator with\n \t exponentially-increasing allocations. It has its own\n-\t documentation, found <link linkend=\"manual.ext.allocator.mt\">here</link>.\n+\t <link linkend=\"manual.ext.allocator.mt\">chapter</link> \n+         in the documentation.\n        </para>\n      </listitem>\n \n@@ -483,7 +484,8 @@\n        <para>\n \t A high-performance allocator that uses a bit-map to keep track\n \t of the used and unused memory locations. It has its own\n-\t documentation, found <link linkend=\"manual.ext.allocator.bitmap\">here</link>.\n+\t <link linkend=\"manual.ext.allocator.bitmap\">chapter</link>\n+         in the documentation.\n        </para>\n      </listitem>\n    </orderedlist>"}, {"sha": "7a984bbd243e409782c00df9089cd68882f7d977", "filename": "libstdc++-v3/doc/xml/manual/debug.xml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -116,13 +116,13 @@\n   thing of great importance to keep in mind when debugging C++ code\n   that uses <code>new</code> and <code>delete</code>: there are\n   different kinds of allocation schemes that can be used by <code>\n-  std::allocator </code>. For implementation details, see the <link linkend=\"manual.ext.allocator.mt\">mt allocator</link> documentation and\n+  std::allocator</code>. For implementation details, see the <link linkend=\"manual.ext.allocator.mt\">mt allocator</link> documentation and\n   look specifically for <code>GLIBCXX_FORCE_NEW</code>.\n </para>\n \n <para>\n-  In a nutshell, the default allocator used by <code>\n-  std::allocator</code> is a high-performance pool allocator, and can\n+  In a nutshell, the optional <classname>mt_allocator</classname>\n+  is a high-performance pool allocator, and can\n   give the mistaken impression that in a suspect executable, memory is\n   being leaked, when in reality the memory \"leak\" is a pool being used\n   by the library's allocator and is reclaimed after program"}, {"sha": "ce8c14e9435f83bd8ce9cc4924c92df8f63b5ef8", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -81,8 +81,11 @@ Removal of <filename class=\"headerfile\">ext/tree</filename>, moved to <filename\n    <para> For GCC releases from 2.95 through the 3.1 series, defining\n    <literal>__USE_MALLOC</literal> on the gcc command line would change the\n    default allocation strategy to instead use <code> malloc</code> and\n-   <function>free</function>. (This same functionality is now spelled <literal>_GLIBCXX_FORCE_NEW</literal>, see\n-   <link linkend=\"manual.intro.using.macros\">this page</link>\n+   <function>free</function>. For the 3.2 and 3.3 release series the same\n+   functionality was spelled <literal>_GLIBCXX_FORCE_NEW</literal>. From\n+   GCC 3.4 onwards the functionality is enabled by setting\n+   <literal>GLIBCXX_FORCE_NEW</literal> in the environment, see\n+   <link linkend=\"manual.ext.allocator.mt\">the mt allocator chapter</link>\n    for details.\n    </para>\n "}, {"sha": "61190f5d17b651b54e78a15903abd48fecc03884", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2b3556c17b4423f2f1d3249790735e4856d53e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=3b2b3556c17b4423f2f1d3249790735e4856d53e", "patch": "@@ -847,17 +847,6 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n     </para>\n     </listitem></varlistentry>\n \n-    <varlistentry><term><code>_GLIBCXX_FORCE_NEW</code></term>\n-    <listitem>\n-      <para>\n-\tUndefined by default. When defined, memory allocation and\n-\tallocators controlled by libstdc++ call operator new/delete\n-\twithout caching and pooling. Configurable via\n-\t<code>--enable-libstdcxx-allocator</code>. ABI-changing.\n-      </para>\n-    </listitem></varlistentry>\n-\n-\n     <varlistentry><term><code>_GLIBCXX_CONCEPT_CHECKS</code></term>\n     <listitem>\n       <para>"}]}