{"sha": "d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY0YWY2OWZkNThlM2IwMmFjM2E0ZjEwYmY1ZTJkYzZmMGIxYWExNw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-11-15T15:42:17Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-11-15T15:42:17Z"}, "message": "[ARC] [libgcc] Fix defines\n\nlibgcc/\n2016-11-15  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/lib1funcs.S (__mulsi3): Use feature defines instead\n\tof checking for cpus.\n\t(__umulsidi3, __umulsi3_highpart, __udivmodsi4, __divsi3)\n\t(__modsi3, __clzsi2): Likewise.\n\nFrom-SVN: r242428", "tree": {"sha": "26ce4b7825daa3f7bf18f3b2959c8fcf180dbd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26ce4b7825daa3f7bf18f3b2959c8fcf180dbd82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c8a8fe248a0a50e279be7780dfd7c5126c9143c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8a8fe248a0a50e279be7780dfd7c5126c9143c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8a8fe248a0a50e279be7780dfd7c5126c9143c"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "cca3de50eb657b1f8f2ddb814ee29f0ad75d2f5e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "patch": "@@ -1,3 +1,10 @@\n+2016-11-15  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/lib1funcs.S (__mulsi3): Use feature defines instead\n+\tof checking for cpus.\n+\t(__umulsidi3, __umulsi3_highpart, __udivmodsi4, __divsi3)\n+\t(__modsi3, __clzsi2): Likewise.\n+\n 2016-11-11  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config.host (i[3456]86-*-musl*, x86_64-*-musl*): Use"}, {"sha": "1b196f5eccb7fdfe27a45758efc88a7e5764c5d2", "filename": "libgcc/config/arc/lib1funcs.S", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flib1funcs.S?ref=d64af69fd58e3b02ac3a4f10bf5e2dc6f0b1aa17", "patch": "@@ -79,7 +79,7 @@ SYM(__mulsi3):\n \tj_s.d [blink]\n \tmov_s r0,mlo\n \tENDFUNC(__mulsi3)\n-#elif defined (__ARC700__) || defined (__HS__)\n+#elif defined (__ARC_MPY__)\n \tHIDDEN_FUNC(__mulsi3)\n \tmpyu\tr0,r0,r1\n \tnop_s\n@@ -98,7 +98,7 @@ SYM(__mulsi3):\n \tadd_s\tr1,r1,r1\n .Lend:\tj_s [blink]\n \tENDFUNC(__mulsi3)\n-#elif !defined (__OPTIMIZE_SIZE__) && !defined(__ARC601__)\n+#elif !defined (__OPTIMIZE_SIZE__) && defined (__ARC_BARREL_SHIFTER__)\n \t/* Up to 3.5 times faster than the simpler code below, but larger.  */\n \tFUNC(__mulsi3)\n \tror.f\tr2,r0,4\n@@ -170,7 +170,8 @@ SYM(__umulsidi3):\n    umulsi3_highpart implementation; the use of the latter label doesn't\n    actually benefit ARC601 platforms, but is useful when ARC601 code is linked\n    against other libraries.  */\n-#if defined (__ARC700__) || defined (__ARC_MUL64__) || defined (__ARC601__)\n+#if defined (__ARC_MPY__) || defined (__ARC_MUL64__) \\\n+\t|| !defined (__ARC_BARREL_SHIFTER__)\n \t.global SYM(__umulsi3_highpart)\n SYM(__umulsi3_highpart):\n \tHIDDEN_FUNC(__umulsi3_highpart)\n@@ -188,18 +189,18 @@ SYM(__umulsi3_highpart):\n */\n #include \"ieee-754/arc-ieee-754.h\"\n \n-#ifdef __ARC700__\n+#ifdef __ARC_MPY__\n \tmov_s\tr12,DBL0L\n \tmpyu\tDBL0L,r12,DBL0H\n \tj_s.d\t[blink]\n-\tmpyhu\tDBL0H,r12,DBL0H\n+\tMPYHU\tDBL0H,r12,DBL0H\n #elif defined (__ARC_MUL64__)\n /* Likewise for __ARC_MUL64__ */\n \tmulu64 r0,r1\n \tmov_s DBL0L,mlo\n \tj_s.d [blink]\n \tmov_s DBL0H,mhi\n-#else /* !__ARC700__ && !__ARC_MUL64__ */\n+#else /* !__ARC_MPY__ && !__ARC_MUL64__ */\n /* Although it might look tempting to extend this to handle muldi3,\n    using mulsi3 twice with 2.25 cycles per 32 bit add is faster\n    than one loop with 3 or four cycles per 32 bit add.  */\n@@ -223,9 +224,10 @@ SYM(__umulsi3_highpart):\n \tmov_s DBL0L,r3\n \tj_s.d [blink]\n \tmov DBL0H,r2\n-#endif /* !__ARC700__*/\n+#endif /* !__ARC_MPY__*/\n \tENDFUNC(__umulsidi3)\n-#if defined (__ARC700__) || defined (__ARC_MUL64__) || defined (__ARC601__)\n+#if defined (__ARC_MPY__) || defined (__ARC_MUL64__) \\\n+\t|| !defined (__ARC_BARREL_SHIFTER__)\n \tENDFUNC(__umulsi3_highpart)\n #endif\n #endif /* L_umulsidi3 */\n@@ -235,7 +237,8 @@ SYM(__umulsi3_highpart):\n /* For use without a barrel shifter, and for ARC700 / ARC_MUL64, the\n    mulsidi3 algorithms above look better, so for these, there is an\n    extra label up there.  */\n-#if !defined (__ARC700__) && !defined (__ARC_MUL64__) && !defined (__ARC601__)\n+#if !defined (__ARC_MPY__) && !defined (__ARC_MUL64__) \\\n+\t&& defined (__ARC_BARREL_SHIFTER__)\n \t.global SYM(__umulsi3_highpart)\n SYM(__umulsi3_highpart):\n \tHIDDEN_FUNC(__umulsi3_highpart)\n@@ -251,7 +254,7 @@ SYM(__umulsi3_highpart):\n /* Make the result register peephole-compatible with mulsidi3.  */\n \tlsr DBL0H,r2,r3\n \tENDFUNC(__umulsi3_highpart)\n-#endif /* !__ARC700__  && !__ARC601__ */\n+#endif /* !__ARC_MPY__  && __ARC_BARREL_SHIFTER__ */\n #endif /* L_umulsi3_highpart */\n \n #ifdef L_divmod_tools\n@@ -295,7 +298,7 @@ udivmodsi4(int modwanted, unsigned long num, unsigned long den)\n \tFUNC(__udivmodsi4)\n SYM(__udivmodsi4):\n \n-#if defined (__ARC700__)\n+#if defined (__ARC_EA__)\n /* Normalize divisor and divident, and then use the appropriate number of\n    divaw (the number of result bits, or one more) to produce the result.\n    There are some special conditions that need to be tested:\n@@ -368,7 +371,7 @@ SYM(__udivmodsi4):\n \tj_s.d\t[blink]\n \tmov.c\tr0,0\n #elif !defined (__OPTIMIZE_SIZE__)\n-#ifdef __ARC_NORM__\n+#if defined (__ARC_NORM__) && defined (__ARC_BARREL_SHIFTER__)\n \tlsr_s r2,r0\n \tbrhs.d r1,r2,.Lret0_3\n \tnorm r2,r2\n@@ -393,17 +396,17 @@ SYM(__udivmodsi4):\n \tlsr_s r1,r1\n \tcmp_s r0,r1\n \txor.f r2,lp_count,31\n-#if !defined (__EM__)\n+#if !defined (__ARCEM__) && !defined (__ARCHS__)\n \tmov_s lp_count,r2\n #else\n \tmov lp_count,r2\n \tnop_s\n-#endif /* !__EM__ */\n+#endif /* !__ARCEM__ && !__ARCHS__ */\n #endif /* !__ARC_NORM__ */\n \tsub.cc r0,r0,r1\n \tmov_s r3,3\n \tsbc r3,r3,0\n-#ifndef __ARC601__\n+#if defined (__ARC_BARREL_SHIFTER__)\n \tasl_s r3,r3,r2\n \trsub r1,r1,1\n \tlpne @.Lloop2_end\n@@ -503,7 +506,7 @@ SYM(__udivsi3):\n \t.global SYM(__divsi3)\n \tFUNC(__divsi3)\n \n-#ifndef __ARC700__\n+#ifndef __ARC_EA__\n SYM(__divsi3):\n \t/* A5 / ARC60? */\n \tmov r7,blink\n@@ -514,7 +517,7 @@ SYM(__divsi3):\n \ttst r6,r6\n \tj.d [r7]\n \t neg.mi r0,r0\n-#else \t/* !ifndef __ARC700__ */\n+#else \t/* !ifndef __ARC_EA__ */\n \t;; We can use the abs, norm, divaw and mpy instructions for ARC700\n #define MULDIV\n #ifdef MULDIV\n@@ -907,7 +910,7 @@ SYM(__umodsi3):\n \t.global SYM (__modsi3)\n \tFUNC(__modsi3)\n SYM(__modsi3):\n-#ifndef __ARC700__\n+#ifndef __ARC_EA__\n \t/* A5 / ARC60? */\n \tmov_s r12,blink\n \tmov_s r6,r0\n@@ -918,7 +921,7 @@ SYM(__modsi3):\n \tneg_s r0,r1\n \tj_s.d [r12]\n \t mov.pl r0,r1\n-#else /* __ARC700__ */\n+#else /* __ARC_EA__ */\n \tabs_s\tr2,r1\n \tnorm.f\tr4,r0\n \tneg\tr5,r2\n@@ -942,7 +945,7 @@ SYM(__modsi3):\n \tcmp_s\tr12,r2\n \tj_s.d\t[blink]\n \tsub.hs\tr0,r0,r5\n-#endif /* __ARC700__ */\n+#endif /* !__ARC_EA__ */\n \tENDFUNC(__modsi3)\n \n #endif /* L_modsi3 */\n@@ -959,7 +962,7 @@ SYM(__clzsi2):\n \tj_s.d\t[blink]\n \tadd.pl\tr0,r0,1\n \tENDFUNC(__clzsi2)\n-#elif defined (__ARC601__)\n+#elif !defined (__ARC_BARREL_SHIFTER__)\n \tFUNC(__clzsi2)\n \tmov lp_count,10\n \tmov_l r1,0"}]}