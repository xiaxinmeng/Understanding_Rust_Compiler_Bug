{"sha": "40fcf31b2f6ddd6c3b604620446e6447b8942745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmY2YzMWIyZjZkZGQ2YzNiNjA0NjIwNDQ2ZTY0NDdiODk0Mjc0NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-27T03:21:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-27T03:21:16Z"}, "message": "[multiple changes]\n\n\n2004-02-26  Ian Lance Taylor  <ian@wasabisystems.com>\n\n\t* testsuite/demangle/abi_examples/01.cc: Expect error -2.\n\t* testsuite/demangle/abi_examples/02.cc: Likewise.\n\t* testsuite/demangle/regression/cw-11.cc: Likewise.\n\t* testsuite/demangle/regression/cw-16.cc: Change two expected\n\tresults to match libiberty demangler output.\n\n2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/10246\n        * libsupc++/Makefile.am: Use libiberty demangler.\n        (c_sources): Add cp-demangle.c.\n        * libsupc++/Makefile.in: Regenerate.\n        * src/Makefile.am (sources): Remove demangle.cc.\n        * src/Makefile.in: Regenerate.\n        * include/Makefile.am (bits_headers): Move demangle.h.\n\t(ext_headers): ...here.\n        * include/Makefile.in: Regenerate.\n        * include/bits/demangle.h: Move...\n\t* include/ext/demangle.h: ...here.\n        * src/demangle.cc: Remove.\n\n2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * include/bits/demangle.h: Add type template parameter to all\n        templates with just an Allocator template parameter.\n\nFrom-SVN: r78553", "tree": {"sha": "fe0ba0e6197315103bb3bc7ff1e72710a636d5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe0ba0e6197315103bb3bc7ff1e72710a636d5ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fcf31b2f6ddd6c3b604620446e6447b8942745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fcf31b2f6ddd6c3b604620446e6447b8942745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fcf31b2f6ddd6c3b604620446e6447b8942745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fcf31b2f6ddd6c3b604620446e6447b8942745/comments", "author": null, "committer": null, "parents": [{"sha": "d095928f0f2c1e502891273fd3ea0867c9ae8004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d095928f0f2c1e502891273fd3ea0867c9ae8004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d095928f0f2c1e502891273fd3ea0867c9ae8004"}], "stats": {"total": 511, "additions": 206, "deletions": 305}, "files": [{"sha": "00f732891108bab8ad2a6490ded0d9038f4e3dd7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -1,3 +1,31 @@\n+2004-02-26  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* testsuite/demangle/abi_examples/01.cc: Expect error -2.\n+\t* testsuite/demangle/abi_examples/02.cc: Likewise.\n+\t* testsuite/demangle/regression/cw-11.cc: Likewise.\n+\t* testsuite/demangle/regression/cw-16.cc: Change two expected\n+\tresults to match libiberty demangler output.\n+\n+2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/10246\n+        * libsupc++/Makefile.am: Use libiberty demangler.\n+        (c_sources): Add cp-demangle.c.\n+        * libsupc++/Makefile.in: Regenerate.\n+        * src/Makefile.am (sources): Remove demangle.cc.\n+        * src/Makefile.in: Regenerate.\n+        * include/Makefile.am (bits_headers): Move demangle.h.\n+\t(ext_headers): ...here.\n+        * include/Makefile.in: Regenerate.\n+        * include/bits/demangle.h: Move...\n+\t* include/ext/demangle.h: ...here.\n+        * src/demangle.cc: Remove.\n+\n+2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n+ \n+        * include/bits/demangle.h: Add type template parameter to all\n+        templates with just an Allocator template parameter.\n+ \n 2004-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/atomicity.h: New, forward declarations for __atomic_add"}, {"sha": "63867322f6a791bf0fc2234d9ff27e946c99ca51", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -103,7 +103,6 @@ bits_headers = \\\n \t${bits_srcdir}/concept_check.h \\\n \t${bits_srcdir}/concurrence.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/demangle.h \\\n \t${bits_srcdir}/deque.tcc \\\n \t${bits_srcdir}/fstream.tcc \\\n \t${bits_srcdir}/functexcept.h \\\n@@ -204,6 +203,7 @@ ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/debug_allocator.h \\\n+\t${ext_srcdir}/demangle.h \\\n \t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\"}, {"sha": "d79cded347fd2ef353c36f7892a923fa09836c1f", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -299,7 +299,6 @@ bits_headers = \\\n \t${bits_srcdir}/concept_check.h \\\n \t${bits_srcdir}/concurrence.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/demangle.h \\\n \t${bits_srcdir}/deque.tcc \\\n \t${bits_srcdir}/fstream.tcc \\\n \t${bits_srcdir}/functexcept.h \\\n@@ -402,6 +401,7 @@ ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n \t${ext_srcdir}/debug_allocator.h \\\n+\t${ext_srcdir}/demangle.h \\\n \t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n@@ -526,9 +526,9 @@ debug_headers = \\\n # For --enable-cheaders=c_std\n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n @GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n-@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n+@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits"}, {"sha": "5de4f04a22461e88fcaa15f9009f9fa9182b6cc9", "filename": "libstdc++-v3/include/ext/demangle.h", "status": "renamed", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdemangle.h?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -1,6 +1,6 @@\n // C++ IA64 / g++ v3 demangler  -*- C++ -*-\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n // Written by Carlo Wood <carlo@alinoe.com>\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,6 +37,7 @@\n \n #include <vector>\n #include <string>\n+#include <ext/new_allocator.h>\n \n #ifndef _GLIBCXX_DEMANGLER_DEBUG\n #define _GLIBCXX_DEMANGLER_CWDEBUG 0\n@@ -58,7 +59,6 @@ namespace __gnu_cxx\n {\n   namespace demangler\n   {\n-\n     enum substitution_nt\n     {\n       type,\n@@ -101,16 +101,16 @@ namespace __gnu_cxx\n       pointer_to_member = 'M'\n     };\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator = __gnu_cxx::new_allocator<Tp> >\n       class qualifier;\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator = __gnu_cxx::new_allocator<Tp> >\n       class qualifier_list;\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator = __gnu_cxx::new_allocator<Tp> >\n       class session;\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       class qualifier\n       {\n \ttypedef typename Allocator::template rebind<char>::other\n@@ -205,7 +205,7 @@ namespace __gnu_cxx\n #endif\n       };\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       class qualifier_list\n       {\n \ttypedef typename Allocator::template rebind<char>::other\n@@ -215,18 +215,18 @@ namespace __gnu_cxx\n \n       private:\n \tmutable bool M_printing_suppressed;\n-\ttypedef qualifier<Allocator> qual;\n+\ttypedef qualifier<Tp, Allocator> qual;\n         typedef typename Allocator::template rebind<qual>::other qual_Allocator;\n \ttypedef std::vector<qual, qual_Allocator> qual_vector;\n \tqual_vector M_qualifier_starts;\n-\tsession<Allocator>& M_demangler;\n+\tsession<Tp, Allocator>& M_demangler;\n \n \tvoid decode_KVrA(string_type& prefix, string_type& postfix, int cvq,\n \t\t\t typename qual_vector::\n \t\t\t   const_reverse_iterator const& iter_array) const;\n \n       public:\n-\tqualifier_list(session<Allocator>& demangler_obj)\n+\tqualifier_list(session<Tp, Allocator>& demangler_obj)\n \t: M_printing_suppressed(false), M_demangler(demangler_obj)\n \t{ }\n \n@@ -235,7 +235,7 @@ namespace __gnu_cxx\n \t\t\t    int start_pos,\n \t\t\t    int inside_substitution)\n \t{ M_qualifier_starts.\n-\t      push_back(qualifier<Allocator>(start_pos,\n+\t      push_back(qualifier<Tp, Allocator>(start_pos,\n \t\t  simple_qualifier, inside_substitution)); }\n \n \tvoid\n@@ -244,7 +244,7 @@ namespace __gnu_cxx\n \t\t\t    int count,\n \t\t\t    int inside_substitution)\n \t{ M_qualifier_starts.\n-\t      push_back(qualifier<Allocator>(start_pos,\n+\t      push_back(qualifier<Tp, Allocator>(start_pos,\n \t\t    cv_qualifier, &M_demangler.M_str[start_pos],\n \t\t    count, inside_substitution)); }\n \n@@ -254,7 +254,7 @@ namespace __gnu_cxx\n \t\t\t    string_type optional_type,\n \t\t\t    int inside_substitution)\n \t{ M_qualifier_starts.\n-\t      push_back(qualifier<Allocator>(start_pos,\n+\t      push_back(qualifier<Tp, Allocator>(start_pos,\n \t\t    param_qualifier, optional_type, inside_substitution)); }\n \n \tvoid\n@@ -347,10 +347,11 @@ namespace __gnu_cxx\n             { return false; }\n     };\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       class session\n       {\n-\tfriend class qualifier_list<Allocator>;\n+      public:\n+\tfriend class qualifier_list<Tp, Allocator>;\n \ttypedef typename Allocator::template rebind<char>::other\n \t    char_Allocator;\n \ttypedef std::basic_string<char, std::char_traits<char>, char_Allocator>\n@@ -406,7 +407,7 @@ namespace __gnu_cxx\n \n \tbool\n \tdecode_type(string_type& output,\n-\t            qualifier_list<Allocator>* qualifiers = NULL)\n+\t            qualifier_list<Tp, Allocator>* qualifiers = NULL)\n \t{\n \t  string_type postfix;\n \t  bool res = decode_type_with_postfix(output, postfix, qualifiers);\n@@ -449,7 +450,7 @@ namespace __gnu_cxx\n \t\t\t int number_of_prefixes);\n \n \tbool decode_type_with_postfix(string_type& prefix,\n-\t    string_type& postfix, qualifier_list<Allocator>* qualifiers = NULL);\n+\t    string_type& postfix, qualifier_list<Tp, Allocator>* qualifiers = NULL);\n \tbool decode_bare_function_type(string_type& output);\n \tbool decode_builtin_type(string_type& output);\n \tbool decode_call_offset(string_type& output);\n@@ -465,23 +466,23 @@ namespace __gnu_cxx\n \tbool decode_operator_name(string_type& output);\n \tbool decode_source_name(string_type& output);\n \tbool decode_substitution(string_type& output,\n-\t    qualifier_list<Allocator>* qualifiers = NULL);\n+\t    qualifier_list<Tp, Allocator>* qualifiers = NULL);\n \tbool decode_template_args(string_type& output);\n \tbool decode_template_param(string_type& output,\n-\t    qualifier_list<Allocator>* qualifiers = NULL);\n+\t    qualifier_list<Tp, Allocator>* qualifiers = NULL);\n \tbool decode_unqualified_name(string_type& output);\n \tbool decode_unscoped_name(string_type& output);\n \tbool decode_non_negative_decimal_integer(string_type& output);\n \tbool decode_special_name(string_type& output);\n         bool decode_real(string_type& output, size_t size_of_real);\n       };\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n #if !_GLIBCXX_DEMANGLER_CWDEBUG\n       inline\n #endif\n       void\n-      session<Allocator>::add_substitution(int start_pos,\n+      session<Tp, Allocator>::add_substitution(int start_pos,\n \t\t\t\t\t   substitution_nt sub_type,\n \t\t\t\t\t   int number_of_prefixes = 0)\n       {\n@@ -572,9 +573,9 @@ namespace __gnu_cxx\n     //                                ::= 1|2|3|4|5|6|7|8|9 [<digit>+]\n     // <digit>                        ::= 0|1|2|3|4|5|6|7|8|9\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::\n+      session<Tp, Allocator>::\n \t  decode_non_negative_decimal_integer(string_type& output)\n       {\n \tchar c = current();\n@@ -598,9 +599,9 @@ namespace __gnu_cxx\n \n     // <number> ::= [n] <non-negative decimal integer>\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_number(string_type& output)\n+      session<Tp, Allocator>::decode_number(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_number\");\n \tif (current() != 'n')\n@@ -668,9 +669,9 @@ namespace __gnu_cxx\n     };\n \n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_builtin_type(string_type& output)\n+      session<Tp, Allocator>::decode_builtin_type(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_builtin_type\");\n \tchar const* bt;\n@@ -683,9 +684,9 @@ namespace __gnu_cxx\n \n     // <class-enum-type> ::= <name>\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_class_enum_type(string_type& output)\n+      session<Tp, Allocator>::decode_class_enum_type(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_class_enum_type\");\n \tstring_type nested_name_qualifiers;\n@@ -711,10 +712,10 @@ namespace __gnu_cxx\n     //   0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\n     //       [<seq-id>]\t# Base 36 number\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_substitution(string_type& output,\n-\t  qualifier_list<Allocator>* qualifiers)\n+      session<Tp, Allocator>::decode_substitution(string_type& output,\n+\t  qualifier_list<Tp, Allocator>* qualifiers)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_substitution\");\n \tunsigned int value = 0;\n@@ -885,10 +886,10 @@ namespace __gnu_cxx\n     // <template-param> ::= T_\t\t\t# first template parameter\n     //                  ::= T <parameter-2 non-negative number> _\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_template_param(string_type& output,\n-\t  qualifier_list<Allocator>* qualifiers)\n+      session<Tp, Allocator>::decode_template_param(string_type& output,\n+\t  qualifier_list<Tp, Allocator>* qualifiers)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_template_parameter\");\n \tif (current() != 'T')\n@@ -928,9 +929,9 @@ namespace __gnu_cxx\n \t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_real(string_type& output, size_t size_of_real)\n+      session<Tp, Allocator>::decode_real(string_type& output, size_t size_of_real)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_real\");\n \n@@ -988,9 +989,9 @@ namespace __gnu_cxx\n \t_GLIBCXX_DEMANGLER_RETURN;\n       }\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_literal(string_type& output)\n+      session<Tp, Allocator>::decode_literal(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_literal\");\n \teat_current();\t// Eat the 'L'.\n@@ -1222,9 +1223,9 @@ namespace __gnu_cxx\n       { \"ix\",  \"operator[]\", unary }\n     };\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_operator_name(string_type& output)\n+      session<Tp, Allocator>::decode_operator_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_operator_name\");\n \n@@ -1292,9 +1293,9 @@ namespace __gnu_cxx\n     //                ::= L <type> <value float> E\t# floating literal\n     //                ::= L <mangled-name> E\t\t# external name\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_expression(string_type& output)\n+      session<Tp, Allocator>::decode_expression(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_expression\");\n \tif (current() == 'T')\n@@ -1479,9 +1480,9 @@ namespace __gnu_cxx\n     //                ::= L <type> <value float> E\t# floating literal\n     //                ::= L <mangled-name> E\t\t# external name\n     //                ::= X <expression> E\t\t# expression\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_template_args(string_type& output)\n+      session<Tp, Allocator>::decode_template_args(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_template_args\");\n \tif (eat_current() != 'I')\n@@ -1542,9 +1543,9 @@ namespace __gnu_cxx\n     // our <bare-function-type> slightly different from the one in\n     // the C++-ABI description.\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_bare_function_type(string_type& output)\n+      session<Tp, Allocator>::decode_bare_function_type(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_bare_function_type\");\n \tif (M_saw_destructor)\n@@ -1702,9 +1703,9 @@ namespace __gnu_cxx\n \t\t\t\t\t//   number of A's in the series.\n     // In the function below, iter_array points to the first (right most)\n     // A in the series, if any.\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       void\n-      qualifier_list<Allocator>::decode_KVrA(\n+      qualifier_list<Tp, Allocator>::decode_KVrA(\n           string_type& prefix, string_type& postfix, int cvq,\n           typename qual_vector::const_reverse_iterator const& iter_array) const\n \t{\n@@ -1750,9 +1751,9 @@ namespace __gnu_cxx\n \t  _GLIBCXX_DEMANGLER_RETURN3;\n \t}\n \n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       void\n-      qualifier_list<Allocator>::decode_qualifiers(\n+      qualifier_list<Tp, Allocator>::decode_qualifiers(\n \t  string_type& prefix,\n \t  string_type& postfix,\n \t  bool member_function_pointer_qualifiers = false) const\n@@ -1842,11 +1843,11 @@ namespace __gnu_cxx\n       }\n \n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_type_with_postfix(\n+      session<Tp, Allocator>::decode_type_with_postfix(\n \t  string_type& prefix, string_type& postfix,\n-\t  qualifier_list<Allocator>* qualifiers)\n+\t  qualifier_list<Tp, Allocator>* qualifiers)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING2(\"decode_type\");\n \t++M_inside_type;\n@@ -1953,7 +1954,7 @@ namespace __gnu_cxx\n \t\t  ++count;\n \t\t  c = next();\n \t\t}\n-\t\tqualifier_list<Allocator> class_type_qualifiers(*this);\n+\t\tqualifier_list<Tp, Allocator> class_type_qualifiers(*this);\n \t\tif (count)\n \t\t  class_type_qualifiers.\n \t\t      add_qualifier_start(cv_qualifier, Q2_start_pos,\n@@ -2209,9 +2210,9 @@ namespace __gnu_cxx\n     //                   ::= <template-param>\n     //                   ::= <substitution>\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_nested_name(string_type& output,\n+      session<Tp, Allocator>::decode_nested_name(string_type& output,\n \t\t\t\t\t     string_type& qualifiers)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_nested_name\");\n@@ -2295,9 +2296,9 @@ namespace __gnu_cxx\n     //              := Z <function encoding> E s [<discriminator>]\n     // <discriminator> := _ <non-negative number>\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_local_name(string_type& output)\n+      session<Tp, Allocator>::decode_local_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_local_name\");\n \tif (current() != 'Z' || M_pos >= M_maxpos)\n@@ -2327,9 +2328,9 @@ namespace __gnu_cxx\n \n     // <source-name> ::= <positive length number> <identifier>\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_source_name(string_type& output)\n+      session<Tp, Allocator>::decode_source_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_source_name\");\n \tint length = current() - '0';\n@@ -2359,9 +2360,9 @@ namespace __gnu_cxx\n     //                    ::= <ctor-dtor-name>  # Starts with 'C' or 'D'.\n     //                    ::= <source-name>\t# Starts with a digit.\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_unqualified_name(string_type& output)\n+      session<Tp, Allocator>::decode_unqualified_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_unqualified_name\");\n \tif (M_inside_template_args)\n@@ -2434,9 +2435,9 @@ namespace __gnu_cxx\n     //   <unqualified-name>\t\t# Starts not with an 'S'\n     //   St <unqualified-name>\t\t# ::std::\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_unscoped_name(string_type& output)\n+      session<Tp, Allocator>::decode_unscoped_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_unscoped_name\");\n \tif (current() == 'S')\n@@ -2460,9 +2461,9 @@ namespace __gnu_cxx\n     //\n     // <unscoped-template-name> ::= <unscoped-name>\n     //                          ::= <substitution>\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_name(string_type& output,\n+      session<Tp, Allocator>::decode_name(string_type& output,\n \t\t\t\t      string_type& nested_name_qualifiers)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_name\");\n@@ -2502,9 +2503,9 @@ namespace __gnu_cxx\n     //\n     // <v-offset>    ::= <offset number> _ <virtual offset number>\n     //     virtual base override, with vcall offset\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_call_offset(string_type&\n+      session<Tp, Allocator>::decode_call_offset(string_type&\n #if _GLIBCXX_DEMANGLER_CWDEBUG\n \t  output\n #endif\n@@ -2557,9 +2558,9 @@ namespace __gnu_cxx\n     //\t\t\t\t\t  second call-offset is result\n     //\t\t\t\t\t  adjustment\n     //\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       bool\n-      session<Allocator>::decode_special_name(string_type& output)\n+      session<Tp, Allocator>::decode_special_name(string_type& output)\n       {\n \t_GLIBCXX_DEMANGLER_DOUT_ENTERING(\"decode_special_name\");\n \tif (current() == 'G')\n@@ -2642,9 +2643,9 @@ namespace __gnu_cxx\n     //\t\t\t\t\t\t  character.\n     //   <data name>\t\t\t\t# Idem.\n     //   <special-name>\t\t\t\t# Starts with 'T' or 'G'.\n-    template<typename Allocator>\n+    template<typename Tp, typename Allocator>\n       int\n-      session<Allocator>::decode_encoding(string_type& output,\n+      session<Tp, Allocator>::decode_encoding(string_type& output,\n           char const* in, int len, implementation_details const& id)\n       {\n #if _GLIBCXX_DEMANGLER_CWDEBUG\n@@ -2656,7 +2657,7 @@ namespace __gnu_cxx\n #endif\n \tif (len <= 0)\n \t  return INT_MIN;\n-\tsession<Allocator> demangler_session(in, len, id);\n+\tsession<Tp, Allocator> demangler_session(in, len, id);\n \tstring_type nested_name_qualifiers;\n \tint saved_pos;\n \tdemangler_session.store(saved_pos);\n@@ -2696,7 +2697,7 @@ namespace __gnu_cxx\n     } // namespace demangler\n \n   // Public interface\n-  template<typename Allocator>\n+  template<typename Tp, typename Allocator>\n     struct demangle\n     {\n       typedef typename Allocator::template rebind<char>::other char_Allocator;\n@@ -2712,15 +2713,15 @@ namespace __gnu_cxx\n   //\n   // Demangle `input' which should be a mangled function name as for\n   // instance returned by nm(1).\n-  template<typename Allocator>\n-    typename demangle<Allocator>::string_type\n-    demangle<Allocator>::symbol(char const* input,\n+  template<typename Tp, typename Allocator>\n+    typename demangle<Tp, Allocator>::string_type\n+    demangle<Tp, Allocator>::symbol(char const* input,\n                                 demangler::implementation_details const& id)\n     {\n       // <mangled-name> ::= _Z <encoding>\n       // <mangled-name> ::= _GLOBAL_ _<type>_ <disambiguation part>\n       //                    <type> can be I or D (GNU extension)\n-      typedef demangler::session<Allocator> demangler_type;\n+      typedef demangler::session<Tp, Allocator> demangler_type;\n       string_type result;\n       bool failure = (input[0] != '_');\n \n@@ -2763,17 +2764,17 @@ namespace __gnu_cxx\n   // demangle::type()\n   // Demangle `input' which must be a zero terminated mangled type\n   // name as for instance returned by std::type_info::name().\n-  template<typename Allocator>\n-    typename demangle<Allocator>::string_type\n-    demangle<Allocator>::type(char const* input,\n+  template<typename Tp, typename Allocator>\n+    typename demangle<Tp, Allocator>::string_type\n+    demangle<Tp, Allocator>::type(char const* input,\n                               demangler::implementation_details const& id)\n     {\n       std::basic_string<char, std::char_traits<char>, Allocator> result;\n       if (input == NULL)\n \tresult = \"(null)\";\n       else\n       {\n-\tdemangler::session<Allocator> demangler_session(input, INT_MAX, id);\n+\tdemangler::session<Tp, Allocator> demangler_session(input, INT_MAX, id);\n \tif (!demangler_session.decode_type(result)\n \t    || demangler_session.remaining_input_characters())\n \t{\n@@ -2783,7 +2784,6 @@ namespace __gnu_cxx\n       }\n       return result;\n     }\n-\n } // namespace __gnu_cxx\n \n #endif // __DEMANGLE_H", "previous_filename": "libstdc++-v3/include/bits/demangle.h"}, {"sha": "5550686728ac633e8e48af2857033ef43b29ff6e", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the GNU C++ Support library.\n ##\n-## Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+## Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n ##\n ## Process this file with automake to produce Makefile.in.\n ##\n@@ -34,6 +34,9 @@ noinst_LTLIBRARIES = libsupc++convenience.la\n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h\n \n+c_sources = \\\n+\tcp-demangle.c \n+\n sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n@@ -62,8 +65,8 @@ sources = \\\n \tvec.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources)\n-libsupc__convenience_la_SOURCES = $(sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources)\n+libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n \n glibcxxinstalldir = $(gxx_include_dir)\n glibcxxinstall_HEADERS = $(headers)\n@@ -83,6 +86,29 @@ AM_CXXFLAGS = \\\n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n \n+\n+# Use special rules for pulling things out of libiberty.  These\n+# objects should be compiled with the \"C\" compiler, not the C++\n+# compiler, and also should not use the C++ includes.\n+C_INCLUDES = -I.. -I$(toplevel_srcdir)/libiberty -I$(toplevel_srcdir)/include\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(C_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n+# LTCOMPILE is copied from LTCXXCOMPILE below.\n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(C_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n+cp-demangle.c:\n+\trm -f $@\n+\t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n+cp-demangle.lo: cp-demangle.c\n+\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+cp-demangle.o: cp-demangle.c\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\n+\n # libstdc++ libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is"}, {"sha": "9945e8295ca3c3dc21469b48e046e2b39c1a7591", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.7.9 from Makefile.am.\n+# Makefile.in generated by automake 1.7.8 from Makefile.am.\n # @configure_input@\n \n # Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n@@ -42,7 +42,8 @@ ACLOCAL = @ACLOCAL@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@\n-ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+ATOMICITY_SRCDIR = @ATOMICITY_SRCDIR@\n+ATOMIC_WORD_SRCDIR = @ATOMIC_WORD_SRCDIR@\n AUTOCONF = @AUTOCONF@\n AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n@@ -227,6 +228,10 @@ headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h\n \n \n+c_sources = \\\n+\tcp-demangle.c \n+\n+\n sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n@@ -256,8 +261,8 @@ sources = \\\n \tvterminate.cc\n \n \n-libsupc___la_SOURCES = $(sources)\n-libsupc__convenience_la_SOURCES = $(sources)\n+libsupc___la_SOURCES = $(sources) $(c_sources)\n+libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n \n glibcxxinstalldir = $(gxx_include_dir)\n glibcxxinstall_HEADERS = $(headers)\n@@ -279,6 +284,21 @@ AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n \n \n+# Use special rules for pulling things out of libiberty.  These\n+# objects should be compiled with the \"C\" compiler, not the C++\n+# compiler, and also should not use the C++ includes.\n+C_INCLUDES = -I.. -I$(toplevel_srcdir)/libiberty -I$(toplevel_srcdir)/include\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(C_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n+\n+# LTCOMPILE is copied from LTCXXCOMPILE below.\n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(C_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\n+\n # libstdc++ libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n@@ -329,16 +349,22 @@ am__objects_1 = del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n \teh_terminate.lo eh_throw.lo eh_type.lo eh_unex_handler.lo \\\n \tguard.lo new_handler.lo new_op.lo new_opnt.lo new_opv.lo \\\n \tnew_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo vterminate.lo\n-am_libsupc___la_OBJECTS = $(am__objects_1)\n+am__objects_2 = cp-demangle.lo\n+am_libsupc___la_OBJECTS = $(am__objects_1) $(am__objects_2)\n libsupc___la_OBJECTS = $(am_libsupc___la_OBJECTS)\n libsupc__convenience_la_LDFLAGS =\n libsupc__convenience_la_LIBADD =\n-am_libsupc__convenience_la_OBJECTS = $(am__objects_1)\n+am_libsupc__convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n libsupc__convenience_la_OBJECTS = $(am_libsupc__convenience_la_OBJECTS)\n \n DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)\n depcomp =\n am__depfiles_maybe =\n+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n+\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+CCLD = $(CC)\n+LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n+\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -353,7 +379,7 @@ SOURCES = $(libsupc___la_SOURCES) $(libsupc__convenience_la_SOURCES)\n all: all-am\n \n .SUFFIXES:\n-.SUFFIXES: .cc .lo .o .obj\n+.SUFFIXES: .c .cc .lo .o .obj\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/fragment.am $(top_srcdir)/configure.ac $(ACLOCAL_M4)\n \tcd $(top_srcdir) && \\\n \t  $(AUTOMAKE) --foreign  libsupc++/Makefile\n@@ -407,6 +433,15 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+.c.o:\n+\t$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<\n+\n+.c.obj:\n+\t$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`\n+\n+.c.lo:\n+\t$(LTCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<\n+\n .cc.o:\n \t$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<\n \n@@ -530,7 +565,7 @@ install-am: all-am\n installcheck: installcheck-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t  INSTALL_STRIP_FLAG=-s \\\n \t  `test -z '$(STRIP)' || \\\n \t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n mostlyclean-generic:\n@@ -606,6 +641,14 @@ uninstall-am: uninstall-glibcxxinstallHEADERS uninstall-info-am \\\n \tuninstall-info-am uninstall-toolexeclibLTLIBRARIES\n \n \n+cp-demangle.c:\n+\trm -f $@\n+\t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n+cp-demangle.lo: cp-demangle.c\n+\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+cp-demangle.o: cp-demangle.c\n+\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n+\n # We have to have rules modified from the default to counteract SUN make\n # prepending each of $(glibcxxinstall_HEADERS) with VPATH below.\n install-glibcxxinstallHEADERS: $(glibcxxinstall_HEADERS)"}, {"sha": "d70d1af3ad130f7b429ae9e9819e307516114806", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -101,7 +101,6 @@ sources = \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n-\tdemangle.cc \\\n \tfunctexcept.cc \\\n \tglobals_locale.cc \\\n \tglobals_io.cc \\"}, {"sha": "99a6eb641244b5aaceee7dc3ca8a9833e14fe1ff", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -220,12 +220,12 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # Cross compiler support.\n toolexeclib_LTLIBRARIES = libstdc++.la\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Symbol versioning for shared libraries.\n @GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n-@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n-@GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_dep = libstdc++-symbol.ver\n @GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_dep = \n+@GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_dep = libstdc++-symbol.ver\n \n # Source files linked in via configuration/make substitution for a\n # particular host.\n@@ -256,7 +256,6 @@ sources = \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n-\tdemangle.cc \\\n \tfunctexcept.cc \\\n \tglobals_locale.cc \\\n \tglobals_io.cc \\\n@@ -366,9 +365,9 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tnumeric_members.lo time_members.lo\n am__objects_2 = basic_file.lo c++locale.lo\n am__objects_3 = allocator.lo codecvt.lo complex_io.lo ctype.lo debug.lo \\\n-\tdemangle.lo functexcept.lo globals_locale.lo globals_io.lo \\\n-\tios.lo ios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n-\tlist.lo locale.lo locale_init.lo locale_facets.lo localename.lo \\\n+\tfunctexcept.lo globals_locale.lo globals_io.lo ios.lo \\\n+\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n+\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n \tstdexcept.lo strstream.lo tree.lo allocator-inst.lo \\\n \tconcept-inst.lo fstream-inst.lo ext-inst.lo io-inst.lo \\\n \tistream-inst.lo locale-inst.lo locale-misc-inst.lo misc-inst.lo \\"}, {"sha": "779076d3554b22a295139dff140562a0f6251a9e", "filename": "libstdc++-v3/src/demangle.cc", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d095928f0f2c1e502891273fd3ea0867c9ae8004/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d095928f0f2c1e502891273fd3ea0867c9ae8004/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc?ref=d095928f0f2c1e502891273fd3ea0867c9ae8004", "patch": "@@ -1,195 +0,0 @@\n-// C++ IA64 / g++ v3 demangler  -*- C++ -*-\n-\n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n-// Written by Carlo Wood <carlo@alinoe.com>\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <bits/demangle.h>\n-#include <cxxabi.h>\n-\n-// __cxa_demangle\n-//\n-// Demangle a C++ symbol or type name.\n-//\n-// `mangled-name' is a pointer to a null-terminated array of characters.\n-// It may be either an external name, i.e. with a \"_Z\" prefix, or an\n-// internal NTBS mangling, e.g. of a type for type_info.\n-//\n-// `buf' may be null.  If it is non-null, then n must also be non-null,\n-// and buf is a pointer to an array, of at least *n characters, that\n-// was allocated using malloc.\n-//\n-// `status' points to an int that is used as an error indicator. It is\n-// permitted to be null, in which case the user just doesn't get any\n-// detailed error information. \n-//\n-// Returns: a pointer to a null-terminated array of characters, the\n-//          demangled name.  Or NULL in case of failure.\n-//\n-// If there is an error in demangling, the return value is a null pointer.\n-// The user can examine *status to find out what kind of error occurred.\n-// Meaning of error indications:\n-//\n-//     *  0: success\n-//     * -1: memory allocation failure\n-//     * -2: invalid mangled name\n-//     * -3: invalid arguments (e.g. buf nonnull and n null) \n-//\n-\n-namespace __cxxabiv1 \n-{\n-  namespace \n-  {\n-    char* const error = 0;\n-\n-    enum status_codes \n-    {\n-      success = 0,\n-      memory_allocation_failure = -1,\n-      invalid_mangled_name = -2,\n-      invalid_argument = -3\n-    };\n-\n-    inline char*\n-    failure(status_codes error_code, int* status)\n-    {\n-      if (status)\n-\t*status = error_code;\n-      return error;\n-    }\n-\n-    char*\n-    finish(char const* demangled_name, size_t demangled_name_size,\n-\t   char* buf, size_t* n, int* status)\n-    {\n-      if (!buf || *n < demangled_name_size + 1)\n-      {\n-\tif (n)\n-\t  *n = demangled_name_size + 1;\n-\tbuf = (char*)realloc(buf, demangled_name_size + 1);\n-\tif (!buf)\n-\t  return failure(memory_allocation_failure, status);\n-      }\n-      if (status)\n-\t*status = success;\n-      std::strncpy(buf, demangled_name, demangled_name_size);\n-      buf[demangled_name_size] = 0;\n-      return buf;\n-    }\n-  } // namespace\n-\n-  char*\n-  __cxa_demangle(char const* mangled_name, char* buf, std::size_t* n, \n-\t\t int* status)\n-  {\n-    try {\n-      using namespace __gnu_cxx;\n-      typedef demangler::session<std::allocator<char> > session_type;\n-\n-      if (!mangled_name || (buf && !n))\n-\treturn failure(invalid_argument, status);\n-\n-      std::string result;\n-      if (mangled_name[0] == '_')\t\t\n-      {\n-\t// External name?\n-\tif (mangled_name[1] == 'Z')\t\t\n-\t{\n-\t  // C++ name?\n-\t  int cnt = session_type::\n-\t      decode_encoding(result, mangled_name + 2, INT_MAX);\n-\t  if (cnt < 0 || mangled_name[cnt + 2] != 0)\n-\t    return failure(invalid_mangled_name, status);\n-\t  return finish(result.data(), result.size(), buf, n, status);\n-\t}\n-\telse if (mangled_name[1] == 'G')\t\n-\t{\n-\t  // Possible _GLOBAL__ extension?\n-\t  if (!std::strncmp(mangled_name, \"_GLOBAL__\", 9) \n-\t      && (mangled_name[9] == 'D' || mangled_name[9] == 'I')\n-\t      && mangled_name[10] == '_')\n-\t  {\n-\t    if (mangled_name[9] == 'D')\n-\t      result.assign(\"global destructors keyed to \", 28);\n-\t    else\n-\t      result.assign(\"global constructors keyed to \", 29);\n-\t    // Output the disambiguation part as-is.\n-\t    result += mangled_name + 11;\n-\t    return finish(result.data(), result.size(), buf, n, status);\n-\t  }\n-\t}\n-      }\n-\n-      // Ambiguities are possible between extern \"C\" object names and\n-      // internal built-in type names, e.g. \"i\" may be either an object\n-      // named \"i\" or the built-in \"int\" type.  Such ambiguities should\n-      // be resolved to user names over built-in names.  Builtin types\n-      // are any single lower case character.  Any other single\n-      // character is not a mangled type so we can treat those the same\n-      // here.\n-      if (mangled_name[1] == 0)\n-\treturn finish(mangled_name, 1, buf, n, status);\n-\n-      // Not a built-in type or external name, try to demangle input as\n-      // NTBS mangled type name.\n-      session_type demangler_session(mangled_name, INT_MAX);\n-      if (!demangler_session.decode_type(result) \n-\t  || demangler_session.remaining_input_characters())\n-      {\n-\t// Failure to demangle, assume extern \"C\" name.\n-\tresult = mangled_name;\t\t\n-      }\n-      return finish(result.data(), result.size(), buf, n, status);\n-    } catch (std::bad_alloc&) {\n-      return failure(memory_allocation_failure, status);\n-    }\n-  }\n-} // namespace __cxxabiv1\n-\n-// Explicit instantiations.\n-namespace __gnu_cxx\n-{\n-  template class demangler::qualifier_list<std::allocator<char> >;\n-  template class demangler::session<std::allocator<char> >;\n-} // namespace __gnu_cxx\n-\n-namespace std\n-{\n-  template\n-    void vector<int>::_M_insert_aux(vector<int>::iterator, const int&);\n-\n-  typedef __gnu_cxx::demangler::substitution_st value_type1;\n-  template\n-    void vector<value_type1>::_M_insert_aux(vector<value_type1>::iterator, \n-\t\t\t\t\t    const value_type1&);\n-\n-  typedef __gnu_cxx::demangler::qualifier<std::allocator<char> > value_type2;\n-  template\n-    void vector<value_type2>::_M_insert_aux(vector<value_type2>::iterator, \n-\t\t\t\t\t    const value_type2&);\n-}\n-"}, {"sha": "e7c41e7b966f7fa3fd7ca3842dc64bc9ff748914", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/01.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -31,7 +31,7 @@ int main()\n   // extern \"C\" function \n   // extern \"C\" float f(void) { };\n   // T f\n-  verify_demangle(\"f\", \"f\");\n+  verify_demangle(\"f\", \"error code = -2: invalid mangled name\");\n \n   return 0;\n }"}, {"sha": "bbae9381e7d8a7284eac113cd4661cd1aa54762c", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/02.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -31,7 +31,7 @@ int main()\n   // or variable \"f\" \n   // int f;\n   // B f\n-  verify_demangle(\"f\", \"f\");  \n+  verify_demangle(\"f\", \"error code = -2: invalid mangled name\");\n \n   return 0;\n }"}, {"sha": "6fef1314d993e03de2b2b6418cdd6053ccbb4c0a", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-11.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -28,7 +28,8 @@ int main()\n   using namespace __gnu_test;\n \n   // cplus-dem CORE\n-  verify_demangle(\"_X11TransParseAddress\", \"_X11TransParseAddress\");\n+  verify_demangle(\"_X11TransParseAddress\",\n+\t\t  \"error code = -2: invalid mangled name\");\n \n   return 0;\n }"}, {"sha": "78ae363a62b611b42502da4260c11bc3d6f10bdc", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-16.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fcf31b2f6ddd6c3b604620446e6447b8942745/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-16.cc?ref=40fcf31b2f6ddd6c3b604620446e6447b8942745", "patch": "@@ -29,14 +29,14 @@ int main()\n \n // 2003/11/07, libstdc++/12736\n verify_demangle(\"_Z3fooIA6_KiEvA9_KT_rVPrS4_\",\n-\t\t\"void foo<int const [6]>(int const [9][6], int const restrict (* volatile restrict) [9][6])\");\n+\t\t\"void foo<int const [6]>(int const [9][6], int restrict const (* volatile restrict) [9][6])\");\n // 2003/11/12, libstdc++/12947\n verify_demangle(\"_Z1fILi5E1AEvN1CIXqugtT_Li0ELi1ELi2EEE1qE\",\n                 \"void f<5, A>(C<(((5) > (0))) ? (1) : (2)>::q)\");\n verify_demangle(\"_Z1fILi5EEvN1AIXcvimlT_Li22EEE1qE\",\n                 \"void f<5>(A<(int)((5) * (22))>::q)\");\n verify_demangle(\"_Z1fPFYPFiiEiE\",\n-                \"f(int (*(*) [extern \\\"C\\\"] (int))(int))\");\n+                \"f(int (*(*)(int))(int))\");\n verify_demangle(\"_Z1fI1XENT_1tES2_\",\n                 \"X::t f<X>(X::t)\");\n verify_demangle(\"_Z1fILi5E1AEvN1CIXstN1T1tEEXszsrS2_1tEE1qE\","}]}