{"sha": "80d0198b739660305da17e12072578b7a99cb777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkMDE5OGI3Mzk2NjAzMDVkYTE3ZTEyMDcyNTc4YjdhOTljYjc3Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:54:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:54:55Z"}, "message": "poly_int: ipa_parm_adjustment\n\nThis patch changes the type of ipa_parm_adjustment::offset from\nHOST_WIDE_INT to poly_int64 and updates uses accordingly.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* ipa-param-manipulation.h (ipa_parm_adjustment::offset): Change from\n\tHOST_WIDE_INT to poly_int64_pod.\n\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Track\n\tpolynomail parameter offsets.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255885", "tree": {"sha": "2b56e16dd6fb7e90402b63ade8a9ac88011615d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b56e16dd6fb7e90402b63ade8a9ac88011615d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d0198b739660305da17e12072578b7a99cb777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d0198b739660305da17e12072578b7a99cb777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d0198b739660305da17e12072578b7a99cb777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d0198b739660305da17e12072578b7a99cb777/comments", "author": null, "committer": null, "parents": [{"sha": "21810de45dcfec0ac4141dfa6a59e0f0859aed3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21810de45dcfec0ac4141dfa6a59e0f0859aed3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21810de45dcfec0ac4141dfa6a59e0f0859aed3e"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "a909fa79349de6b807135b7c98562b73ebe90c5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d0198b739660305da17e12072578b7a99cb777/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d0198b739660305da17e12072578b7a99cb777/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80d0198b739660305da17e12072578b7a99cb777", "patch": "@@ -1,3 +1,12 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* ipa-param-manipulation.h (ipa_parm_adjustment::offset): Change from\n+\tHOST_WIDE_INT to poly_int64_pod.\n+\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Track\n+\tpolynomail parameter offsets.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3d559f5b5a429e3943ec8d3294a0e545c7a07250", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d0198b739660305da17e12072578b7a99cb777/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d0198b739660305da17e12072578b7a99cb777/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=80d0198b739660305da17e12072578b7a99cb777", "patch": "@@ -293,15 +293,14 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n \t     simply taking the address of a reference inside the original\n \t     aggregate.  */\n \n-\t  gcc_checking_assert (adj->offset % BITS_PER_UNIT == 0);\n+\t  poly_int64 byte_offset = exact_div (adj->offset, BITS_PER_UNIT);\n \t  base = gimple_call_arg (stmt, adj->base_index);\n \t  loc = DECL_P (base) ? DECL_SOURCE_LOCATION (base)\n \t\t\t      : EXPR_LOCATION (base);\n \n \t  if (TREE_CODE (base) != ADDR_EXPR\n \t      && POINTER_TYPE_P (TREE_TYPE (base)))\n-\t    off = build_int_cst (adj->alias_ptr_type,\n-\t\t\t\t adj->offset / BITS_PER_UNIT);\n+\t    off = build_int_cst (adj->alias_ptr_type, byte_offset);\n \t  else\n \t    {\n \t      HOST_WIDE_INT base_offset;\n@@ -321,8 +320,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n \t      if (!base)\n \t\t{\n \t\t  base = build_fold_addr_expr (prev_base);\n-\t\t  off = build_int_cst (adj->alias_ptr_type,\n-\t\t\t\t       adj->offset / BITS_PER_UNIT);\n+\t\t  off = build_int_cst (adj->alias_ptr_type, byte_offset);\n \t\t}\n \t      else if (TREE_CODE (base) == MEM_REF)\n \t\t{\n@@ -332,17 +330,15 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n \t\t      deref_align = TYPE_ALIGN (TREE_TYPE (base));\n \t\t    }\n \t\t  off = build_int_cst (adj->alias_ptr_type,\n-\t\t\t\t       base_offset\n-\t\t\t\t       + adj->offset / BITS_PER_UNIT);\n+\t\t\t\t       base_offset + byte_offset);\n \t\t  off = int_const_binop (PLUS_EXPR, TREE_OPERAND (base, 1),\n \t\t\t\t\t off);\n \t\t  base = TREE_OPERAND (base, 0);\n \t\t}\n \t      else\n \t\t{\n \t\t  off = build_int_cst (adj->alias_ptr_type,\n-\t\t\t\t       base_offset\n-\t\t\t\t       + adj->offset / BITS_PER_UNIT);\n+\t\t\t\t       base_offset + byte_offset);\n \t\t  base = build_fold_addr_expr (base);\n \t\t}\n \t    }\n@@ -655,7 +651,7 @@ ipa_get_adjustment_candidate (tree **expr, bool *convert,\n       struct ipa_parm_adjustment *adj = &adjustments[i];\n \n       if (adj->base == base\n-\t  && (adj->offset == offset || adj->op == IPA_PARM_OP_REMOVE))\n+\t  && (known_eq (adj->offset, offset) || adj->op == IPA_PARM_OP_REMOVE))\n \t{\n \t  cand = adj;\n \t  break;\n@@ -756,7 +752,10 @@ ipa_dump_param_adjustments (FILE *file, ipa_parm_adjustment_vec adjustments,\n       else if (adj->op == IPA_PARM_OP_REMOVE)\n \tfprintf (file, \", remove_param\");\n       else\n-\tfprintf (file, \", offset %li\", (long) adj->offset);\n+\t{\n+\t  fprintf (file, \", offset \");\n+\t  print_dec (adj->offset, file);\n+\t}\n       if (adj->by_ref)\n \tfprintf (file, \", by_ref\");\n       print_node_brief (file, \", type: \", adj->type, 0);"}, {"sha": "7bf942fe2c36e94fafa5db765f634f40223be108", "filename": "gcc/ipa-param-manipulation.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d0198b739660305da17e12072578b7a99cb777/gcc%2Fipa-param-manipulation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d0198b739660305da17e12072578b7a99cb777/gcc%2Fipa-param-manipulation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.h?ref=80d0198b739660305da17e12072578b7a99cb777", "patch": "@@ -84,7 +84,7 @@ struct ipa_parm_adjustment\n \n   /* Offset into the original parameter (for the cases when the new parameter\n      is a component of an original one).  */\n-  HOST_WIDE_INT offset;\n+  poly_int64_pod offset;\n \n   /* Zero based index of the original parameter this one is based on.  */\n   int base_index;"}]}