{"sha": "331e1a56adf1a81c3544a8034d9e0a413ea35435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxZTFhNTZhZGYxYTgxYzM1NDRhODAzNGQ5ZTBhNDEzZWEzNTQzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:18:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:18:59Z"}, "message": "Add a vect_align_stack_vars target selector\n\nThis patch adds a target selector to say whether it's possible to\nalign a local variable to the target's preferred vector alignment.\nThis can be false for large vectors if the alignment is only\na preference and not a hard requirement (and thus if there is no\nneed to support a stack realignment mechanism).\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_align_stack_vars): Document.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_align_stack_vars): New proc.\n\t* gcc.dg/vect/vect-23.c: Only expect the array to be aligned if\n\tvect_align_stack_vars.\n\t* gcc.dg/vect/vect-24.c: Likewise.\n\t* gcc.dg/vect/vect-25.c: Likewise.\n\t* gcc.dg/vect/vect-26.c: Likewise.\n\t* gcc.dg/vect/vect-32-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-32.c: Likewise.\n\t* gcc.dg/vect/vect-40.c: Likewise.\n\t* gcc.dg/vect/vect-42.c: Likewise.\n\t* gcc.dg/vect/vect-46.c: Likewise.\n\t* gcc.dg/vect/vect-48.c: Likewise.\n\t* gcc.dg/vect/vect-52.c: Likewise.\n\t* gcc.dg/vect/vect-54.c: Likewise.\n\t* gcc.dg/vect/vect-62.c: Likewise.\n\t* gcc.dg/vect/vect-67.c: Likewise.\n\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-75.c: Likewise.\n\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n\t* gcc.dg/vect/vect-89-big-array.c: Likewise.\n\t* gcc.dg/vect/vect-89.c: Likewise.\n\t* gcc.dg/vect/vect-96.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254596", "tree": {"sha": "a6aa3cbb8debe625481c050ffec0fb5d85ef23f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6aa3cbb8debe625481c050ffec0fb5d85ef23f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/331e1a56adf1a81c3544a8034d9e0a413ea35435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331e1a56adf1a81c3544a8034d9e0a413ea35435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331e1a56adf1a81c3544a8034d9e0a413ea35435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331e1a56adf1a81c3544a8034d9e0a413ea35435/comments", "author": null, "committer": null, "parents": [{"sha": "32c7bafd50e6553f2f79858cf365907979d5eb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c7bafd50e6553f2f79858cf365907979d5eb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c7bafd50e6553f2f79858cf365907979d5eb2a"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "84e788f735caea4f853c6efa0a3cc51bbadd2dcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -1,3 +1,9 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* doc/sourcebuild.texi (vect_align_stack_vars): Document.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "d200f7135bea27e83e4db975c781cb650e0fc89f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -1373,6 +1373,10 @@ Target supports Fortran @code{real} kinds larger than @code{real(8)}.\n @subsubsection Vector-specific attributes\n \n @table @code\n+@item vect_align_stack_vars\n+The target's ABI allows stack variables to be aligned to the preferred\n+vector alignment.\n+\n @item vect_condition\n Target supports vector conditional operations.\n "}, {"sha": "8d7ad64cdca77ff6a309cd13a44d38ec1095fb0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -1,3 +1,34 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_align_stack_vars): New proc.\n+\t* gcc.dg/vect/vect-23.c: Only expect the array to be aligned if\n+\tvect_align_stack_vars.\n+\t* gcc.dg/vect/vect-24.c: Likewise.\n+\t* gcc.dg/vect/vect-25.c: Likewise.\n+\t* gcc.dg/vect/vect-26.c: Likewise.\n+\t* gcc.dg/vect/vect-32-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-32.c: Likewise.\n+\t* gcc.dg/vect/vect-40.c: Likewise.\n+\t* gcc.dg/vect/vect-42.c: Likewise.\n+\t* gcc.dg/vect/vect-46.c: Likewise.\n+\t* gcc.dg/vect/vect-48.c: Likewise.\n+\t* gcc.dg/vect/vect-52.c: Likewise.\n+\t* gcc.dg/vect/vect-54.c: Likewise.\n+\t* gcc.dg/vect/vect-62.c: Likewise.\n+\t* gcc.dg/vect/vect-67.c: Likewise.\n+\t* gcc.dg/vect/vect-75-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-75.c: Likewise.\n+\t* gcc.dg/vect/vect-77-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-78-alignchecks.c: Likewise.\n+\t* gcc.dg/vect/vect-89-big-array.c: Likewise.\n+\t* gcc.dg/vect/vect-89.c: Likewise.\n+\t* gcc.dg/vect/vect-96.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-3.c: Likewise.\n+\t* gcc.dg/vect/vect-multitypes-6.c: Likewise.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "69e0848c8eca10661d85a2f0b17b9a3d99319135", "filename": "gcc/testsuite/gcc.dg/vect/vect-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-23.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -125,4 +125,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "3abf7c8453b873f5606db9ce27b2a8183d9d26ec", "filename": "gcc/testsuite/gcc.dg/vect/vect-24.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-24.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -123,4 +123,4 @@ int main (void)\n   return main1 ();\n }\n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail { { ! aarch64*-*-* } && { ! arm-*-* } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "904eea8a17b7572ffa335dcf60d27df648f01f18", "filename": "gcc/testsuite/gcc.dg/vect/vect-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-25.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -51,4 +51,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "4f0472b5d0f33dfaac536b2eda9b1fd971ca8f50", "filename": "gcc/testsuite/gcc.dg/vect/vect-26.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-26.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -36,5 +36,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_element_align_preferred || { ! vect_align_stack_vars } } } } } */"}, {"sha": "3e1403bbe96948188e7544d05f183a271828640f", "filename": "gcc/testsuite/gcc.dg/vect/vect-32-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32-big-array.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -36,4 +36,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "2684cf2e0d390406e4c6c2ac30ac178ecfe70d5c", "filename": "gcc/testsuite/gcc.dg/vect/vect-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -40,4 +40,4 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "c74703268f913194119e89982092ec4ce7fa0fde", "filename": "gcc/testsuite/gcc.dg/vect/vect-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -59,4 +59,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "a65b4a622764ddb12fa986d0c70128df5804336e", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -67,5 +67,5 @@ int main (void)\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { { ! vector_alignment_reachable } && { ! vect_element_align } } } } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" { xfail { vect_no_align || { { !  vector_alignment_reachable } || vect_element_align  } } } } }  */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target vect_element_align xfail { ! { vect_unaligned_possible && vect_align_stack_vars } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align || { { ! vector_alignment_reachable } || vect_element_align } } } } } */"}, {"sha": "185ac1424f94956fbcd5b26d0f4e6d36fd5f708b", "filename": "gcc/testsuite/gcc.dg/vect/vect-46.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -61,4 +61,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "bac6ef6b8dd6c457769881f357d97f23bc9a9a9d", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -55,6 +55,7 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "0343d9a24d156cb6b565bde3529be297e705b21e", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -56,6 +56,7 @@ int main (void)\n    (The store is aligned).  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}, {"sha": "58201abe069e8cc244eef6173cedadbbc1728201", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -60,5 +60,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */"}, {"sha": "abd3d700668b019a075c52edfaff16061200305b", "filename": "gcc/testsuite/gcc.dg/vect/vect-62.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -65,4 +65,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "12183a233c273d8ae3932fa312e1734b48f8c7b0", "filename": "gcc/testsuite/gcc.dg/vect/vect-67.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -49,4 +49,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */"}, {"sha": "42b2b8d91aacd87128385d41d6a288ab452b37ef", "filename": "gcc/testsuite/gcc.dg/vect/vect-75-big-array.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75-big-array.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -50,4 +50,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */"}, {"sha": "2cdd703224284c1f1adf85331ca99f697c277778", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -50,4 +50,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */"}, {"sha": "56ee797d10bfed44beb3229da0cde7e52ac58207", "filename": "gcc/testsuite/gcc.dg/vect/vect-77-alignchecks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77-alignchecks.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -54,7 +54,8 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && {! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */"}, {"sha": "c3ef8a36591a10b3600ad6ca96e2a3180f041779", "filename": "gcc/testsuite/gcc.dg/vect/vect-78-alignchecks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78-alignchecks.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -55,7 +55,8 @@ int main (void)\n    both for the load and the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target vect_align_stack_vars xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { ! vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { {! vect_no_align} && { unaligned_stack && vector_alignment_reachable } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { {! unaligned_stack} && { vect_no_align && { ! vect_hw_misalign } } } || {unaligned_stack && { {! vector_alignment_reachable} && { ! vect_no_align } } } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 2 \"vect\" { target { { unaligned_stack && { vector_alignment_reachable && vect_no_align } } || {unaligned_stack && { {! vector_alignment_reachable} && vect_no_align } } } } } } */"}, {"sha": "decfbee318ae80936b7bf10ca2efadd3c9e1097f", "filename": "gcc/testsuite/gcc.dg/vect/vect-89-big-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89-big-array.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -45,5 +45,5 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_element_align_preferred || { ! vect_align_stack_vars } } } } } */"}, {"sha": "051698eada2d296afdc388a9e811259e6798a3d3", "filename": "gcc/testsuite/gcc.dg/vect/vect-89.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -49,5 +49,5 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_element_align_preferred } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { xfail { ! vect_align_stack_vars } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_element_align_preferred || { ! vect_align_stack_vars } } } } } */"}, {"sha": "0cb935b9f162233a3c3e35b5fbc9e22f177a81f2", "filename": "gcc/testsuite/gcc.dg/vect/vect-96.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -48,6 +48,7 @@ int main (void)\n    For targets that don't support unaligned loads, version for the store.  */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { {! vect_no_align} && vector_alignment_reachable } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { target { { {! vect_no_align} && vector_alignment_reachable } && { ! vect_align_stack_vars } } xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { target { { {! vect_no_align} && vector_alignment_reachable } && vect_align_stack_vars } xfail { ! vect_unaligned_possible } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { { vect_no_align } || { { ! vector_alignment_reachable} || vect_element_align } } } } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 1 \"vect\" { target { { vect_no_align && { ! vect_hw_misalign } } || { {! vector_alignment_reachable} && {! vect_element_align} } } } } } */"}, {"sha": "18bf5e80917ab38a56dfc7fbc0875b9b72683c62", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -59,5 +59,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" { xfail { ! { vect_unaligned_possible && vect_align_stack_vars } } } } } */\n "}, {"sha": "b47a93ab326be666ba2037c2dead5703c5f2a229", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -66,5 +66,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { sparc*-*-* && ilp32 } }} } */\n /* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 6 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" { xfail { ! vect_unaligned_possible } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 6 \"vect\" { xfail { ! { vect_unaligned_possible && vect_align_stack_vars } } } } } */\n "}, {"sha": "9ef40198d1bb68edeb032c10389c9ec46479b356", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331e1a56adf1a81c3544a8034d9e0a413ea35435/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=331e1a56adf1a81c3544a8034d9e0a413ea35435", "patch": "@@ -6350,6 +6350,12 @@ proc check_effective_target_vect_element_align_preferred { } {\n     return [check_effective_target_vect_variable_length]\n }\n \n+# Return 1 if we can align stack data to the preferred vector alignment.\n+\n+proc check_effective_target_vect_align_stack_vars { } {\n+    return 1\n+}\n+\n # Return 1 if vector alignment (for types of size 32 bit or less) is reachable, 0 otherwise.\n \n proc check_effective_target_vector_alignment_reachable { } {"}]}