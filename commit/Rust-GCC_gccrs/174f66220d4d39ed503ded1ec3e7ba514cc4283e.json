{"sha": "174f66220d4d39ed503ded1ec3e7ba514cc4283e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0ZjY2MjIwZDRkMzllZDUwM2RlZDFlYzNlN2JhNTE0Y2M0MjgzZQ==", "commit": {"author": {"name": "Eduard Sanou", "email": "dhole@openmailbox.org", "date": "2016-04-28T09:12:05Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2016-04-28T09:12:05Z"}, "message": "c-common.c (get_source_date_epoch): New function...\n\ngcc/c-family/ChangeLog:\n\n2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n\t    Matthias Klose  <doko@debian.org>\n\n\t* c-common.c (get_source_date_epoch): New function, gets the environment\n\tvariable SOURCE_DATE_EPOCH and parses it as long long with error \n\thandling.\n\t* c-common.h (get_source_date_epoch): Prototype.\n\t* c-lex.c (c_lex_with_flags): set parse_in->source_date_epoch.\n\ngcc/ChangeLog:\n\n2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n\t    Matthias Klose  <doko@debian.org>\n\n\t* doc/cppenv.texi: Document SOURCE_DATE_EPOCH environment variable.\n\nlibcpp/ChangeLog:\n\n2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n\t    Matthias Klose  <doko@debian.org>\n\n\t* include/cpplib.h (cpp_init_source_date_epoch): Prototype.\n\t* init.c (cpp_init_source_date_epoch): New function.\n\t* internal.h: Added source_date_epoch variable to struct\n\tcpp_reader to store a reproducible date.\n\t* macro.c (_cpp_builtin_macro_text): Set pfile->date timestamp from \n\tpfile->source_date_epoch instead of localtime if source_date_epoch is \n\tset, to be used for __DATE__ and __TIME__ macros to help reproducible \n\tbuilds.\n\nCo-Authored-By: Matthias Klose <doko@debian.org>\n\nFrom-SVN: r235550", "tree": {"sha": "a72db5c4b6147a63f588b215e341061ba7b18de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72db5c4b6147a63f588b215e341061ba7b18de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/174f66220d4d39ed503ded1ec3e7ba514cc4283e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174f66220d4d39ed503ded1ec3e7ba514cc4283e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174f66220d4d39ed503ded1ec3e7ba514cc4283e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174f66220d4d39ed503ded1ec3e7ba514cc4283e/comments", "author": null, "committer": null, "parents": [{"sha": "a564d350951a990136fe6a5010b7eaa165f17c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a564d350951a990136fe6a5010b7eaa165f17c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a564d350951a990136fe6a5010b7eaa165f17c58"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "a41b8e0841cd92902e1b850cc803303e2421785c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -1,3 +1,8 @@\n+2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n+\t    Matthias Klose  <doko@debian.org>\n+\n+\t* doc/cppenv.texi: Document SOURCE_DATE_EPOCH environment variable.\n+\n 2016-04-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70777"}, {"sha": "8b1e76457b739a416ac955de484ed41ee2d1406b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -1,3 +1,12 @@\n+2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n+\t    Matthias Klose  <doko@debian.org>\n+\n+\t* c-common.c (get_source_date_epoch): New function, gets the environment\n+\tvariable SOURCE_DATE_EPOCH and parses it as long long with error \n+\thandling.\n+\t* c-common.h (get_source_date_epoch): Prototype.\n+\t* c-lex.c (c_lex_with_flags): set parse_in->source_date_epoch.\n+\n 2015-04-27  Ryan Burn  <contact@rnburn.com>\n \n \tPR c++/69024"}, {"sha": "c086dee6ec881e72ae87bde3e40c7d1f63e46495", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -12784,4 +12784,37 @@ valid_array_size_p (location_t loc, tree type, tree name)\n   return true;\n }\n \n+/* Read SOURCE_DATE_EPOCH from environment to have a deterministic\n+   timestamp to replace embedded current dates to get reproducible\n+   results.  Returns -1 if SOURCE_DATE_EPOCH is not defined.  */\n+time_t\n+get_source_date_epoch ()\n+{\n+  char *source_date_epoch;\n+  long long epoch;\n+  char *endptr;\n+\n+  source_date_epoch = getenv (\"SOURCE_DATE_EPOCH\");\n+  if (!source_date_epoch)\n+    return (time_t) -1;\n+\n+  errno = 0;\n+  epoch = strtoll (source_date_epoch, &endptr, 10);\n+  if ((errno == ERANGE && (epoch == LLONG_MAX || epoch == LLONG_MIN))\n+      || (errno != 0 && epoch == 0))\n+    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n+\t\t \"strtoll: %s\\n\", xstrerror(errno));\n+  if (endptr == source_date_epoch)\n+    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n+\t\t \"no digits were found: %s\\n\", endptr);\n+  if (*endptr != '\\0')\n+    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n+\t\t \"trailing garbage: %s\\n\", endptr);\n+  if (epoch < 0)\n+    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n+\t\t \"value must be nonnegative: %lld \\n\", epoch);\n+\n+  return (time_t) epoch;\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "3a7805f10a584970c65bf8ac248efade1d4fc897", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -1471,4 +1471,9 @@ extern bool valid_array_size_p (location_t, tree, tree);\n extern bool cilk_ignorable_spawn_rhs_op (tree);\n extern bool cilk_recognize_spawn (tree, tree *);\n \n+/* Read SOURCE_DATE_EPOCH from environment to have a deterministic\n+   timestamp to replace embedded current dates to get reproducible\n+   results.  Returns -1 if SOURCE_DATE_EPOCH is not defined.  */\n+extern time_t get_source_date_epoch (void);\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "ff7eb25b9f7c81e35a597ad624a8cc2d350f2768", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -388,6 +388,9 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n   enum cpp_ttype type;\n   unsigned char add_flags = 0;\n   enum overflow_type overflow = OT_NONE;\n+  time_t source_date_epoch = get_source_date_epoch ();\n+\n+  cpp_init_source_date_epoch (parse_in, source_date_epoch);\n \n   timevar_push (TV_CPP);\n  retry:"}, {"sha": "e958e93e97e8eaa7a725429c916fd1ef58d2766a", "filename": "gcc/doc/cppenv.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fdoc%2Fcppenv.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/gcc%2Fdoc%2Fcppenv.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppenv.texi?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -79,4 +79,21 @@ main input file is omitted.\n @ifclear cppmanual\n @xref{Preprocessor Options}.\n @end ifclear\n+\n+@item SOURCE_DATE_EPOCH\n+\n+If this variable is set, its value specifies a UNIX timestamp to be\n+used in replacement of the current date and time in the @code{__DATE__}\n+and @code{__TIME__} macros, so that the embedded timestamps become\n+reproducible.\n+\n+The value of @env{SOURCE_DATE_EPOCH} must be a UNIX timestamp,\n+defined as the number of seconds (excluding leap seconds) since\n+01 Jan 1970 00:00:00 represented in ASCII, identical to the output of\n+@samp{@command{date +%s}}.\n+\n+The value should be a known timestamp such as the last modification\n+time of the source or package and it should be set by the build\n+process.\n+\n @end vtable"}, {"sha": "1dc1c73bff23d3316ab77405f096dd8bf7bc03d3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -1,3 +1,15 @@\n+2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n+\t    Matthias Klose  <doko@debian.org>\n+\n+\t* include/cpplib.h (cpp_init_source_date_epoch): Prototype.\n+\t* init.c (cpp_init_source_date_epoch): New function.\n+\t* internal.h: Added source_date_epoch variable to struct\n+\tcpp_reader to store a reproducible date.\n+\t* macro.c (_cpp_builtin_macro_text): Set pfile->date timestamp from \n+\tpfile->source_date_epoch instead of localtime if source_date_epoch is \n+\tset, to be used for __DATE__ and __TIME__ macros to help reproducible \n+\tbuilds.\n+\n 2016-04-13  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPatch from Roger Orr <rogero@howzatt.demon.co.uk>"}, {"sha": "4998b3a8ab8b6633961ffc89b3c4956a5a8ea11d", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -784,6 +784,9 @@ extern void cpp_init_special_builtins (cpp_reader *);\n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);\n \n+/* Initialize the source_date_epoch value.  */\n+extern void cpp_init_source_date_epoch (cpp_reader *, time_t);\n+\n /* This is called after options have been parsed, and partially\n    processed.  */\n extern void cpp_post_options (cpp_reader *);"}, {"sha": "f5ff85b3baebaa66933e6122355c81c2b13eb021", "filename": "libcpp/init.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -533,8 +533,15 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n }\n \n+/* Initialize the source_date_epoch value.  */\n+void\n+cpp_init_source_date_epoch (cpp_reader *pfile, time_t source_date_epoch)\n+{\n+  pfile->source_date_epoch = source_date_epoch; \n+}\n+\n /* Sanity-checks are dependent on command-line options, so it is\n-   called as a subroutine of cpp_read_main_file ().  */\n+   called as a subroutine of cpp_read_main_file.  */\n #if CHECKING_P\n static void sanity_checks (cpp_reader *);\n static void sanity_checks (cpp_reader *pfile)"}, {"sha": "e3eb26b1f27ccce4cd684eada1051a5556b63f39", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -502,6 +502,10 @@ struct cpp_reader\n   const unsigned char *date;\n   const unsigned char *time;\n \n+  /* Externally set timestamp to replace current date and time useful for\n+     reproducibility.  */\n+  time_t source_date_epoch;\n+\n   /* EOF token, and a token forcing paste avoidance.  */\n   cpp_token avoid_paste;\n   cpp_token eof;"}, {"sha": "c2a83764660d1f8ceccfe3ce767cd349c151c818", "filename": "libcpp/macro.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174f66220d4d39ed503ded1ec3e7ba514cc4283e/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=174f66220d4d39ed503ded1ec3e7ba514cc4283e", "patch": "@@ -357,13 +357,20 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n \t  time_t tt;\n \t  struct tm *tb = NULL;\n \n-\t  /* (time_t) -1 is a legitimate value for \"number of seconds\n-\t     since the Epoch\", so we have to do a little dance to\n-\t     distinguish that from a genuine error.  */\n-\t  errno = 0;\n-\t  tt = time(NULL);\n-\t  if (tt != (time_t)-1 || errno == 0)\n-\t    tb = localtime (&tt);\n+\t  /* Set a reproducible timestamp for __DATE__ and __TIME__ macro\n+\t     usage if SOURCE_DATE_EPOCH is defined.  */\n+\t  if (pfile->source_date_epoch != (time_t) -1)\n+\t     tb = gmtime (&pfile->source_date_epoch);\n+\t  else\n+\t    {\n+\t      /* (time_t) -1 is a legitimate value for \"number of seconds\n+\t\t since the Epoch\", so we have to do a little dance to\n+\t\t distinguish that from a genuine error.  */\n+\t      errno = 0;\n+\t      tt = time (NULL);\n+\t      if (tt != (time_t)-1 || errno == 0)\n+\t\ttb = localtime (&tt);\n+\t    }\n \n \t  if (tb)\n \t    {"}]}