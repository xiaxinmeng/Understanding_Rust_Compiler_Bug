{"sha": "4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyNmVhNDAxYWNkZmFjNWZjZGE1OGY4OTFlZmU4YzliM2VkNGU2ZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-07-26T14:26:45Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-07-26T14:26:45Z"}, "message": "collect2.c (symkind): New enum.\n\n\t* collect2.c (symkind): New enum.  Symbol kinds we care about.\n\t(is_ctor_dtor): Return symkind instead of int.  Adjust prototype,\n\tcode and head comment accordingly.\n\t(scan_prog_file): Use symkind names instead of bare integers.\n\nFrom-SVN: r138179", "tree": {"sha": "1682d4c4b09bbdd2bec925f7503f038a81e40d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1682d4c4b09bbdd2bec925f7503f038a81e40d08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19f0452d2bad880e2aa4feb734d0a6e9d7824d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f0452d2bad880e2aa4feb734d0a6e9d7824d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f0452d2bad880e2aa4feb734d0a6e9d7824d07"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "6870a420d48ba19518848057777b4307cdad3dc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "patch": "@@ -1,3 +1,10 @@\n+2008-07-26  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* collect2.c (symkind): New enum.  Symbol kinds we care about.\n+\t(is_ctor_dtor): Return symkind instead of int.  Adjust prototype,\n+\tcode and head comment accordingly.\n+\t(scan_prog_file): Use symkind names instead of bare integers.\n+\t\n 2008-07-25  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_function_possibly_inlined_p): Do not rely on DECL_INLINE."}, {"sha": "cdfe4e6be6d61aee8bf499e14e106cf22086cdd6", "filename": "gcc/collect2.c", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4326ea401acdfac5fcda58f891efe8c9b3ed4e6e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4326ea401acdfac5fcda58f891efe8c9b3ed4e6e", "patch": "@@ -236,8 +236,21 @@ static struct path_prefix *libpaths[3] = {&cmdline_lib_dirs,\n \t\t\t\t\t  &libpath_lib_dirs, NULL};\n #endif\n \n+/* Special kinds of symbols that a name may denote.  */\n+\n+typedef enum {\n+  SYM_REGULAR = 0,  /* nothing special  */\n+\n+  SYM_CTOR = 1,  /* constructor */\n+  SYM_DTOR = 2,  /* destructor  */\n+  SYM_INIT = 3,  /* shared object routine that calls all the ctors  */\n+  SYM_FINI = 4,  /* shared object routine that calls all the dtors  */\n+  SYM_DWEH = 5   /* DWARF exception handling table  */\n+} symkind;\n+\n+static symkind is_ctor_dtor (const char *);\n+\n static void handler (int);\n-static int is_ctor_dtor (const char *);\n static char *find_a_file (struct path_prefix *, const char *);\n static void add_prefix (struct path_prefix *, const char *);\n static void prefix_from_env (const char *, struct path_prefix *);\n@@ -519,12 +532,9 @@ dump_file (const char *name, FILE *to)\n   fclose (stream);\n }\n \f\n-/* Decide whether the given symbol is: a constructor (1), a destructor\n-   (2), a routine in a shared object that calls all the constructors\n-   (3) or destructors (4), a DWARF exception-handling table (5), or\n-   nothing special (0).  */\n+/* Return the kind of symbol denoted by name S.  */\n \n-static int\n+static symkind\n is_ctor_dtor (const char *s)\n {\n   struct names { const char *const name; const int len; const int ret;\n@@ -536,27 +546,27 @@ is_ctor_dtor (const char *s)\n \n   static const struct names special[] = {\n #ifndef NO_DOLLAR_IN_LABEL\n-    { \"GLOBAL__I$\", sizeof (\"GLOBAL__I$\")-1, 1, 0 },\n-    { \"GLOBAL__D$\", sizeof (\"GLOBAL__D$\")-1, 2, 0 },\n+    { \"GLOBAL__I$\", sizeof (\"GLOBAL__I$\")-1, SYM_CTOR, 0 },\n+    { \"GLOBAL__D$\", sizeof (\"GLOBAL__D$\")-1, SYM_DTOR, 0 },\n #else\n #ifndef NO_DOT_IN_LABEL\n-    { \"GLOBAL__I.\", sizeof (\"GLOBAL__I.\")-1, 1, 0 },\n-    { \"GLOBAL__D.\", sizeof (\"GLOBAL__D.\")-1, 2, 0 },\n+    { \"GLOBAL__I.\", sizeof (\"GLOBAL__I.\")-1, SYM_CTOR, 0 },\n+    { \"GLOBAL__D.\", sizeof (\"GLOBAL__D.\")-1, SYM_DTOR, 0 },\n #endif /* NO_DOT_IN_LABEL */\n #endif /* NO_DOLLAR_IN_LABEL */\n-    { \"GLOBAL__I_\", sizeof (\"GLOBAL__I_\")-1, 1, 0 },\n-    { \"GLOBAL__D_\", sizeof (\"GLOBAL__D_\")-1, 2, 0 },\n-    { \"GLOBAL__F_\", sizeof (\"GLOBAL__F_\")-1, 5, 0 },\n-    { \"GLOBAL__FI_\", sizeof (\"GLOBAL__FI_\")-1, 3, 0 },\n-    { \"GLOBAL__FD_\", sizeof (\"GLOBAL__FD_\")-1, 4, 0 },\n-    { NULL, 0, 0, 0 }\n+    { \"GLOBAL__I_\", sizeof (\"GLOBAL__I_\")-1, SYM_CTOR, 0 },\n+    { \"GLOBAL__D_\", sizeof (\"GLOBAL__D_\")-1, SYM_DTOR, 0 },\n+    { \"GLOBAL__F_\", sizeof (\"GLOBAL__F_\")-1, SYM_DWEH, 0 },\n+    { \"GLOBAL__FI_\", sizeof (\"GLOBAL__FI_\")-1, SYM_INIT, 0 },\n+    { \"GLOBAL__FD_\", sizeof (\"GLOBAL__FD_\")-1, SYM_FINI, 0 },\n+    { NULL, 0, SYM_REGULAR, 0 }\n   };\n \n   while ((ch = *s) == '_')\n     ++s;\n \n   if (s == orig_s)\n-    return 0;\n+    return SYM_REGULAR;\n \n   for (p = &special[0]; p->len > 0; p++)\n     {\n@@ -567,7 +577,7 @@ is_ctor_dtor (const char *s)\n \t  return p->ret;\n \t}\n     }\n-  return 0;\n+  return SYM_REGULAR;\n }\n \f\n /* We maintain two prefix lists: one from COMPILER_PATH environment variable\n@@ -2171,33 +2181,33 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n       *end = '\\0';\n       switch (is_ctor_dtor (name))\n \t{\n-\tcase 1:\n+\tcase SYM_CTOR:\n \t  if (which_pass != PASS_LIB)\n \t    add_to_list (&constructors, name);\n \t  break;\n \n-\tcase 2:\n+\tcase SYM_DTOR:\n \t  if (which_pass != PASS_LIB)\n \t    add_to_list (&destructors, name);\n \t  break;\n \n-\tcase 3:\n+\tcase SYM_INIT:\n \t  if (which_pass != PASS_LIB)\n \t    fatal (\"init function found in object %s\", prog_name);\n #ifndef LD_INIT_SWITCH\n \t  add_to_list (&constructors, name);\n #endif\n \t  break;\n \n-\tcase 4:\n+\tcase SYM_FINI:\n \t  if (which_pass != PASS_LIB)\n \t    fatal (\"fini function found in object %s\", prog_name);\n #ifndef LD_FINI_SWITCH\n \t  add_to_list (&destructors, name);\n #endif\n \t  break;\n \n-\tcase 5:\n+\tcase SYM_DWEH:\n \t  if (which_pass != PASS_LIB)\n \t    add_to_list (&frame_tables, name);\n \t  break;\n@@ -2516,7 +2526,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \n \t\t      switch (is_ctor_dtor (name))\n \t\t\t{\n-\t\t\tcase 1:\n+\t\t\tcase SYM_CTOR:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&constructors, name);\n #if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)\n@@ -2525,7 +2535,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n #endif\n \t\t\t  break;\n \n-\t\t\tcase 2:\n+\t\t\tcase SYM_DTOR:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&destructors, name);\n #if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)\n@@ -2535,22 +2545,22 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \t\t\t  break;\n \n #ifdef COLLECT_EXPORT_LIST\n-\t\t\tcase 3:\n+\t\t\tcase SYM_INIT:\n #ifndef LD_INIT_SWITCH\n \t\t\t  if (is_shared)\n \t\t\t    add_to_list (&constructors, name);\n #endif\n \t\t\t  break;\n \n-\t\t\tcase 4:\n+\t\t\tcase SYM_FINI:\n #ifndef LD_INIT_SWITCH\n \t\t\t  if (is_shared)\n \t\t\t    add_to_list (&destructors, name);\n #endif\n \t\t\t  break;\n #endif\n \n-\t\t\tcase 5:\n+\t\t\tcase SYM_DWEH:\n \t\t\t  if (! is_shared)\n \t\t\t    add_to_list (&frame_tables, name);\n #if defined (COLLECT_EXPORT_LIST) && !defined (LD_INIT_SWITCH)"}]}