{"sha": "e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkZjRmYjFmYWJhNzY4OWVlNTBlNGIwOGMwZGM5YmJlYjQ1YmRlMg==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-01-27T06:01:00Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-01-27T06:01:00Z"}, "message": "demangle.h (demangle_component_type): Add DEMANGLE_COMPONENT_JAVA_RESOURCE...\n\ninclude/\n2008-01-26  David Daney  <ddaney@avtrex.com>\n\n\t* demangle.h (demangle_component_type):  Add\n\tDEMANGLE_COMPONENT_JAVA_RESOURCE,\n\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n\tDEMANGLE_COMPONENT_CHARACTER as new enum values.\n\t(demangle_component): Add struct s_character to union u.\n\nlibiberty/\n2008-01-26  David Daney  <ddaney@avtrex.com>\n\n\t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,\n\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n\tDEMANGLE_COMPONENT_CHARACTER cases.\n\t(d_make_comp): Handle DEMANGLE_COMPONENT_COMPOUND_NAME and\n\tDEMANGLE_COMPONENT_JAVA_RESOURCE cases.\n\t(d_make_character): New function.\n\t(d_java_resource): Same.\n\t(d_special_name): Handle \"Gr\" case.\n\t(d_print_comp): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,\n\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n\tDEMANGLE_COMPONENT_CHARACTER cases.\n\t* testsuite/demangle-expected: Add test for java resource name\n\tmangling.\n\nFrom-SVN: r131883", "tree": {"sha": "659232b5a52424e32b1df6a8d3effbc466250392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/659232b5a52424e32b1df6a8d3effbc466250392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/comments", "author": null, "committer": null, "parents": [{"sha": "0d13ee0d41a42d2f6f5801b2808b98fafc974527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d13ee0d41a42d2f6f5801b2808b98fafc974527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d13ee0d41a42d2f6f5801b2808b98fafc974527"}], "stats": {"total": 169, "additions": 168, "deletions": 1}, "files": [{"sha": "de8c03285aa7ce9751a22be63c4c8148477ff930", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "patch": "@@ -1,3 +1,11 @@\n+2008-01-26  David Daney  <ddaney@avtrex.com>\n+\n+\t* demangle.h (demangle_component_type):  Add\n+\tDEMANGLE_COMPONENT_JAVA_RESOURCE,\n+\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n+\tDEMANGLE_COMPONENT_CHARACTER as new enum values.\n+\t(demangle_component): Add struct s_character to union u.\n+\n 2007-11-07  Joseph Myers  <joseph@codesourcery.com>\n \t    Daniel Jacobowitz  <dan@codesourcery.com>\n "}, {"sha": "78e022dffe8d13fb14cdfe89931e6047d9a8cdf7", "filename": "include/demangle.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "patch": "@@ -362,7 +362,15 @@ enum demangle_component_type\n      using 'n' instead of '-', we want a way to indicate a negative\n      number which involves neither modifying the mangled string nor\n      allocating a new copy of the literal in memory.  */\n-  DEMANGLE_COMPONENT_LITERAL_NEG\n+  DEMANGLE_COMPONENT_LITERAL_NEG,\n+  /* A libgcj compiled resource.  The left subtree is the name of the\n+     resource.  */\n+  DEMANGLE_COMPONENT_JAVA_RESOURCE,\n+  /* A name formed by the concatenation of two parts.  The left\n+     subtree is the first part and the right subtree the second.  */\n+  DEMANGLE_COMPONENT_COMPOUND_NAME,\n+  /* A name formed by a single character.  */\n+  DEMANGLE_COMPONENT_CHARACTER\n };\n \n /* Types which are only used internally.  */\n@@ -448,6 +456,12 @@ struct demangle_component\n       long number;\n     } s_number;\n \n+    /* For DEMANGLE_COMPONENT_CHARACTER.  */\n+    struct\n+    {\n+      int character;\n+    } s_character;\n+\n     /* For other types.  */\n     struct\n     {"}, {"sha": "f533060f9759bfaf6a6ef7f6dc9f7a19538edc0d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "patch": "@@ -1,3 +1,19 @@\n+2008-01-26  David Daney  <ddaney@avtrex.com>\n+\n+\t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,\n+\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n+\tDEMANGLE_COMPONENT_CHARACTER cases.\n+\t(d_make_comp): Handle DEMANGLE_COMPONENT_COMPOUND_NAME and\n+\tDEMANGLE_COMPONENT_JAVA_RESOURCE cases.\n+\t(d_make_character): New function.\n+\t(d_java_resource): Same.\n+\t(d_special_name): Handle \"Gr\" case.\n+\t(d_print_comp): Handle DEMANGLE_COMPONENT_JAVA_RESOURCE,\n+\tDEMANGLE_COMPONENT_COMPOUND_NAME, and\n+\tDEMANGLE_COMPONENT_CHARACTER cases.\n+\t* testsuite/demangle-expected: Add test for java resource name\n+\tmangling.\n+\n 2008-01-23  Thiago Jung Bauermann  <bauerman@br.ibm.com>\n \n \t* cplus-dem.c (demangle_function_name): Changed to return value"}, {"sha": "edcfedca7a59f338a4a44afd3d298410a7f1ee85", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "patch": "@@ -650,6 +650,15 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n       printf (\"negative literal\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n+      printf (\"java resource\\n\");\n+      break;\n+    case DEMANGLE_COMPONENT_COMPOUND_NAME:\n+      printf (\"compound name\\n\");\n+      break;\n+    case DEMANGLE_COMPONENT_CHARACTER:\n+      printf (\"character '%c'\\n\",  dc->u.s_character.character);\n+      return;\n     }\n \n   d_dump (d_left (dc), indent + 2);\n@@ -769,6 +778,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_TRINARY_ARG2:\n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n+    case DEMANGLE_COMPONENT_COMPOUND_NAME:\n       if (left == NULL || right == NULL)\n \treturn NULL;\n       break;\n@@ -795,6 +805,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_ARGLIST:\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n     case DEMANGLE_COMPONENT_CAST:\n+    case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n       if (left == NULL)\n \treturn NULL;\n       break;\n@@ -1501,6 +1512,102 @@ d_operator_name (struct d_info *di)\n     }\n }\n \n+static struct demangle_component *\n+d_make_character (struct d_info *di, int c)\n+{\n+  struct demangle_component *p;\n+  p = d_make_empty (di);\n+  if (p != NULL)\n+    {\n+      p->type = DEMANGLE_COMPONENT_CHARACTER;\n+      p->u.s_character.character = c;\n+    }\n+  return p;\n+}\n+\n+static struct demangle_component *\n+d_java_resource (struct d_info *di)\n+{\n+  struct demangle_component *p = NULL;\n+  struct demangle_component *next = NULL;\n+  long len, i;\n+  char c;\n+  const char *str;\n+\n+  len = d_number (di);\n+  if (len <= 1)\n+    return NULL;\n+\n+  /* Eat the leading '_'.  */\n+  if (d_next_char (di) != '_')\n+    return NULL;\n+  len--;\n+\n+  str = d_str (di);\n+  i = 0;\n+\n+  while (len > 0)\n+    {\n+      c = str[i];\n+      if (!c)\n+\treturn NULL;\n+\n+      /* Each chunk is either a '$' escape...  */\n+      if (c == '$')\n+\t{\n+\t  i++;\n+\t  switch (str[i++])\n+\t    {\n+\t    case 'S':\n+\t      c = '/';\n+\t      break;\n+\t    case '_':\n+\t      c = '.';\n+\t      break;\n+\t    case '$':\n+\t      c = '$';\n+\t      break;\n+\t    default:\n+\t      return NULL;\n+\t    }\n+\t  next = d_make_character (di, c);\n+\t  d_advance (di, i);\n+\t  str = d_str (di);\n+\t  len -= i;\n+\t  i = 0;\n+\t  if (next == NULL)\n+\t    return NULL;\n+\t}\n+      /* ... or a sequence of characters.  */\n+      else\n+\t{\n+\t  while (i < len && str[i] && str[i] != '$')\n+\t    i++;\n+\n+\t  next = d_make_name (di, str, i);\n+\t  d_advance (di, i);\n+\t  str = d_str (di);\n+\t  len -= i;\n+\t  i = 0;\n+\t  if (next == NULL)\n+\t    return NULL;\n+\t}\n+\n+      if (p == NULL)\n+\tp = next;\n+      else\n+\t{\n+\t  p = d_make_comp (di, DEMANGLE_COMPONENT_COMPOUND_NAME, p, next);\n+\t  if (p == NULL)\n+\t    return NULL;\n+\t}\n+    }\n+\n+  p = d_make_comp (di, DEMANGLE_COMPONENT_JAVA_RESOURCE, p, NULL);\n+\n+  return p;\n+}\n+\n /* <special-name> ::= TV <type>\n                   ::= TT <type>\n                   ::= TI <type>\n@@ -1514,6 +1621,7 @@ d_operator_name (struct d_info *di)\n                   ::= TJ <type>\n                   ::= GR <name>\n \t\t  ::= GA <encoding>\n+\t\t  ::= Gr <resource name>\n */\n \n static struct demangle_component *\n@@ -1605,6 +1713,9 @@ d_special_name (struct d_info *di)\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_HIDDEN_ALIAS,\n \t\t\t      d_encoding (di, 0), NULL);\n \n+\tcase 'r':\n+\t  return d_java_resource (di);\n+\n \tdefault:\n \t  return NULL;\n \t}\n@@ -3552,6 +3663,20 @@ d_print_comp (struct d_print_info *dpi,\n       }\n       return;\n \n+    case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n+      d_append_string (dpi, \"java resource \");\n+      d_print_comp (dpi, d_left (dc));\n+      return;\n+\n+    case DEMANGLE_COMPONENT_COMPOUND_NAME:\n+      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, d_right (dc));\n+      return;\n+\n+    case DEMANGLE_COMPONENT_CHARACTER:\n+      d_append_char (dpi, dc->u.s_character.character);\n+      return;\n+\n     default:\n       d_print_error (dpi);\n       return;"}, {"sha": "7f9bc61f7b446ccdc4467bbb26baa7238eb60598", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=e5df4fb1faba7689ee50e4b08c0dc9bbeb45bde2", "patch": "@@ -3858,3 +3858,7 @@ foo()::var1\n --format=gnu-v3\n _ZZN7myspaceL3foo_1EvEN11localstruct1fEZNS_3fooEvE16otherlocalstruct\n myspace::foo()::localstruct::f(myspace::foo()::otherlocalstruct)\n+# Java resource name\n+--format=gnu-v3\n+_ZGr32_java$Sutil$Siso4217$_properties\n+java resource java/util/iso4217.properties"}]}