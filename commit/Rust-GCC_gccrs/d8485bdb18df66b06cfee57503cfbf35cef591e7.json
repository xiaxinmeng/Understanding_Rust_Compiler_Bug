{"sha": "d8485bdb18df66b06cfee57503cfbf35cef591e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0ODViZGIxOGRmNjZiMDZjZmVlNTc1MDNjZmJmMzVjZWY1OTFlNw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-11-21T06:14:52Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-11-21T06:14:52Z"}, "message": "use rtx_insn * more places where it is obvious\n\ngcc/ChangeLog:\n\n2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/arm/arm.c (legitimize_pic_address): Change to use\n\trtx_insn * as the type of variables.\n\t(arm_pic_static_addr): Likewise.\n\t(arm_emit_movpair): Likewise.\n\t* config/c6x/c6x.c (reorg_split_calls): Likewise.\n\t* config/darwin.c (machopic_legitimize_pic_address): Likewise.\n\t* config/frv/frv.c (frv_optimize_membar_local): Likewise.\n\t* config/frv/frv.md: Likewise.\n\t* config/i386/i386-protos.h: Likewise.\n\t* config/i386/i386.c (ix86_expand_split_stack_prologue):\n\tLikewise.\n\t(ix86_split_fp_branch): Likewise.\n\t(predict_jump): Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address):\n\tLikewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/s390/s390.md: Likewise.\n\t* config/spu/spu.md: Likewise.\n\t* config/tilegx/tilegx.c (tilegx_legitimize_tls_address):\n\tLikewise.\n\t* lower-subreg.c (resolve_simple_move): Likewise.\n\nFrom-SVN: r242649", "tree": {"sha": "452c6eb6d6685980e14850d901b06e63ef076f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/452c6eb6d6685980e14850d901b06e63ef076f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8485bdb18df66b06cfee57503cfbf35cef591e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8485bdb18df66b06cfee57503cfbf35cef591e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8485bdb18df66b06cfee57503cfbf35cef591e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8485bdb18df66b06cfee57503cfbf35cef591e7/comments", "author": null, "committer": null, "parents": [{"sha": "fe12d76c19ad3eef5a4ac555a519bc14f09d7326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe12d76c19ad3eef5a4ac555a519bc14f09d7326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe12d76c19ad3eef5a4ac555a519bc14f09d7326"}], "stats": {"total": 138, "additions": 82, "deletions": 56}, "files": [{"sha": "98151600a307ad9ddc99062b1f1807e7dbd3582b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -1,3 +1,29 @@\n+2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/arm/arm.c (legitimize_pic_address): Change to use\n+\trtx_insn * as the type of variables.\n+\t(arm_pic_static_addr): Likewise.\n+\t(arm_emit_movpair): Likewise.\n+\t* config/c6x/c6x.c (reorg_split_calls): Likewise.\n+\t* config/darwin.c (machopic_legitimize_pic_address): Likewise.\n+\t* config/frv/frv.c (frv_optimize_membar_local): Likewise.\n+\t* config/frv/frv.md: Likewise.\n+\t* config/i386/i386-protos.h: Likewise.\n+\t* config/i386/i386.c (ix86_expand_split_stack_prologue):\n+\tLikewise.\n+\t(ix86_split_fp_branch): Likewise.\n+\t(predict_jump): Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address):\n+\tLikewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/s390/s390.md: Likewise.\n+\t* config/spu/spu.md: Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_legitimize_tls_address):\n+\tLikewise.\n+\t* lower-subreg.c (resolve_simple_move): Likewise.\n+\n 2016-11-20  Jeff Law  <law@redhat.com>\n \n \tPR target/48551"}, {"sha": "1935810d469810b1cbe763011c42ba903bca01ac", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -252,7 +252,7 @@ static bool arm_can_eliminate (const int, const int);\n static void arm_asm_trampoline_template (FILE *);\n static void arm_trampoline_init (rtx, tree, rtx);\n static rtx arm_trampoline_adjust_address (rtx);\n-static rtx arm_pic_static_addr (rtx orig, rtx reg);\n+static rtx_insn *arm_pic_static_addr (rtx orig, rtx reg);\n static bool cortex_a9_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n static bool xscale_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n static bool fa726te_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n@@ -6903,8 +6903,6 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n   if (GET_CODE (orig) == SYMBOL_REF\n       || GET_CODE (orig) == LABEL_REF)\n     {\n-      rtx insn;\n-\n       if (reg == 0)\n \t{\n \t  gcc_assert (can_create_pseudo_p ());\n@@ -6917,6 +6915,7 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t same segment as the GOT.  Unfortunately, the flexibility of linker\n \t scripts means that we can't be sure of that in general, so assume\n \t that GOTOFF is never valid on VxWorks.  */\n+      rtx_insn *insn;\n       if ((GET_CODE (orig) == LABEL_REF\n \t   || (GET_CODE (orig) == SYMBOL_REF &&\n \t       SYMBOL_REF_LOCAL_P (orig)))\n@@ -7155,10 +7154,10 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n }\n \n /* Generate code to load the address of a static var when flag_pic is set.  */\n-static rtx\n+static rtx_insn *\n arm_pic_static_addr (rtx orig, rtx reg)\n {\n-  rtx l1, labelno, offset_rtx, insn;\n+  rtx l1, labelno, offset_rtx;\n \n   gcc_assert (flag_pic);\n \n@@ -7175,8 +7174,7 @@ arm_pic_static_addr (rtx orig, rtx reg)\n                                UNSPEC_SYMBOL_OFFSET);\n   offset_rtx = gen_rtx_CONST (Pmode, offset_rtx);\n \n-  insn = emit_insn (gen_pic_load_addr_unified (reg, offset_rtx, labelno));\n-  return insn;\n+  return emit_insn (gen_pic_load_addr_unified (reg, offset_rtx, labelno));\n }\n \n /* Return nonzero if X is valid as an ARM state addressing register.  */\n@@ -16928,8 +16926,6 @@ output_mov_long_double_arm_from_arm (rtx *operands)\n void\n arm_emit_movpair (rtx dest, rtx src)\n  {\n-  rtx insn;\n-\n   /* If the src is an immediate, simplify it.  */\n   if (CONST_INT_P (src))\n     {\n@@ -16940,14 +16936,14 @@ arm_emit_movpair (rtx dest, rtx src)\n \t  emit_set_insn (gen_rtx_ZERO_EXTRACT (SImode, dest, GEN_INT (16),\n \t\t\t\t\t       GEN_INT (16)),\n \t\t\t GEN_INT ((val >> 16) & 0x0000ffff));\n-\t  insn = get_last_insn ();\n+\t  rtx_insn *insn = get_last_insn ();\n \t  set_unique_reg_note (insn, REG_EQUAL, copy_rtx (src));\n \t}\n       return;\n     }\n    emit_set_insn (dest, gen_rtx_HIGH (SImode, src));\n    emit_set_insn (dest, gen_rtx_LO_SUM (SImode, dest, src));\n-   insn = get_last_insn ();\n+   rtx_insn *insn = get_last_insn ();\n    set_unique_reg_note (insn, REG_EQUAL, copy_rtx (src));\n  }\n "}, {"sha": "4d7dd72f1ca55ecaaae6b82ba813574cc56fbed9", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -4729,7 +4729,7 @@ c6x_gen_bundles (void)\n /* Emit a NOP instruction for CYCLES cycles after insn AFTER.  Return it.  */\n \n static rtx_insn *\n-emit_nop_after (int cycles, rtx after)\n+emit_nop_after (int cycles, rtx_insn *after)\n {\n   rtx_insn *insn;\n \n@@ -4994,7 +4994,8 @@ reorg_split_calls (rtx_insn **call_labels)\n \t      else\n \t\t{\n \t\t  rtx x1, x2;\n-\t\t  rtx after2 = find_next_cycle_insn (after1, this_clock + 2);\n+\t\t  rtx_insn *after2 = find_next_cycle_insn (after1,\n+\t\t\t\t\t\t\t   this_clock + 2);\n \t\t  if (after2 == NULL_RTX)\n \t\t    after2 = after1;\n \t\t  x2 = gen_movsi_lo_sum (reg, reg, labelref);"}, {"sha": "e9ce6d2ffda5fe5be7dfa2846399aa76c4bc125a", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -843,7 +843,6 @@ machopic_legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t\t\t\t? reg\n \t\t\t\t: gen_reg_rtx (Pmode));\n \t      rtx mem;\n-\t      rtx insn;\n \t      rtx sum;\n \n \t      sum = gen_rtx_HIGH (Pmode, offset);\n@@ -856,7 +855,7 @@ machopic_legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t\t\t\t  gen_rtx_LO_SUM (Pmode,\n \t\t\t\t\t\t  hi_sum_reg,\n \t\t\t\t\t\t  copy_rtx (offset)));\n-\t      insn = emit_insn (gen_rtx_SET (reg, mem));\n+\t      rtx_insn *insn = emit_insn (gen_rtx_SET (reg, mem));\n \t      set_unique_reg_note (insn, REG_EQUAL, pic_ref);\n \n \t      pic_ref = reg;"}, {"sha": "b2177ab4bb7bb8ee21530a9eaa5b607c2b8ebc81", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -7797,8 +7797,8 @@ frv_optimize_membar_local (basic_block bb, struct frv_io *next_io,\n \t\t\t   rtx_insn **last_membar)\n {\n   HARD_REG_SET used_regs;\n-  rtx next_membar, set;\n-  rtx_insn *insn;\n+  rtx set;\n+  rtx_insn *insn, *next_membar;\n   bool next_is_end_p;\n \n   /* NEXT_IO is the next I/O operation to be performed after the current"}, {"sha": "d59936de0af3f8a0b458161192d9f0eb38e38c04", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -7347,9 +7347,8 @@\n   \"\"\n   \"\n {\n-  rtx insn;\n-\n-  insn = emit_insn (gen_symGOT2reg_i (operands[0], operands[1], operands[2], operands[3]));\n+  rtx_insn *insn = emit_insn (gen_symGOT2reg_i (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2], operands[3]));\n \n   MEM_READONLY_P (SET_SRC (PATTERN (insn))) = 1;\n \n@@ -7431,7 +7430,8 @@\n   \"\"\n   \"\n {\n-  rtx insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1], operands[2], operands[3]));\n+  rtx_insn *insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1],\n+\t\t\t\t\t\t   operands[2], operands[3]));\n \n   set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n@@ -7457,17 +7457,15 @@\n   \"\"\n   \"\n {\n-  rtx insn;\n-\n   if (!can_create_pseudo_p ())\n     operands[4] = operands[0];\n   else\n     operands[4] = gen_reg_rtx (SImode);\n \n   emit_insn (frv_gen_GPsym2reg (operands[4], operands[2]));\n \n-  insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1],\n-\t\t\t\t\t operands[4], operands[3]));\n+  rtx_insn *insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1],\n+\t\t\t\t\t\t   operands[4], operands[3]));\n \n   set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n@@ -7483,8 +7481,6 @@\n   \"\"\n   \"\n {\n-  rtx insn;\n-\n   if (!can_create_pseudo_p ())\n     {\n       emit_insn (gen_symGOT2reg (operands[0], operands[1], operands[2],\n@@ -7496,8 +7492,8 @@\n \n   emit_insn (frv_gen_GPsym2reg (operands[4], operands[2]));\n \n-  insn = emit_insn (gen_symGOTOFF2reg_hilo (operands[0], operands[1],\n-\t\t\t\t\t    operands[4], operands[3]));\n+  rtx_insn *insn = emit_insn (gen_symGOTOFF2reg_hilo (operands[0], operands[1],\n+\t\t\t\t\t\t      operands[4], operands[3]));\n \n   set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n "}, {"sha": "edd6cbe2618678edb7a9acd9dcdaf0ffa8ee4381", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -77,10 +77,10 @@ extern void ix86_print_operand (FILE *, rtx, int);\n extern void split_double_mode (machine_mode, rtx[], int, rtx[], rtx[]);\n \n extern const char *output_set_got (rtx, rtx);\n-extern const char *output_387_binary_op (rtx, rtx*);\n-extern const char *output_387_reg_move (rtx, rtx*);\n+extern const char *output_387_binary_op (rtx_insn *, rtx*);\n+extern const char *output_387_reg_move (rtx_insn *, rtx*);\n extern const char *output_fix_trunc (rtx_insn *, rtx*, bool);\n-extern const char *output_fp_compare (rtx, rtx*, bool, bool);\n+extern const char *output_fp_compare (rtx_insn *, rtx*, bool, bool);\n extern const char *output_adjust_stack_and_probe (rtx);\n extern const char *output_probe_stack_range (rtx, rtx);\n "}, {"sha": "25f0446a5fd7db2394dd346820c0484204f783d4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -14742,7 +14742,7 @@ ix86_expand_split_stack_prologue (void)\n   HOST_WIDE_INT allocate;\n   unsigned HOST_WIDE_INT args_size;\n   rtx_code_label *label;\n-  rtx limit, current, jump_insn, allocate_rtx, call_insn, call_fusage;\n+  rtx limit, current, allocate_rtx, call_insn, call_fusage;\n   rtx scratch_reg = NULL_RTX;\n   rtx_code_label *varargs_label = NULL;\n   rtx fn;\n@@ -14802,7 +14802,7 @@ ix86_expand_split_stack_prologue (void)\n     }\n \n   ix86_expand_branch (GEU, current, limit, label);\n-  jump_insn = get_last_insn ();\n+  rtx_insn *jump_insn = get_last_insn ();\n   JUMP_LABEL (jump_insn) = label;\n \n   /* Mark the jump as very likely to be taken.  */\n@@ -18696,7 +18696,7 @@ split_double_mode (machine_mode mode, rtx operands[],\n #endif\n \n const char *\n-output_387_binary_op (rtx insn, rtx *operands)\n+output_387_binary_op (rtx_insn *insn, rtx *operands)\n {\n   static char buf[40];\n   const char *p;\n@@ -19434,7 +19434,7 @@ output_387_ffreep (rtx *operands ATTRIBUTE_UNUSED, int opno)\n    should be used.  UNORDERED_P is true when fucom should be used.  */\n \n const char *\n-output_fp_compare (rtx insn, rtx *operands, bool eflags_p, bool unordered_p)\n+output_fp_compare (rtx_insn *insn, rtx *operands, bool eflags_p, bool unordered_p)\n {\n   int stack_top_dies;\n   rtx cmp_op0, cmp_op1;\n@@ -22817,7 +22817,7 @@ ix86_split_fp_branch (enum rtx_code code, rtx op1, rtx op2,\n \t\t      rtx target1, rtx target2, rtx tmp)\n {\n   rtx condition;\n-  rtx i;\n+  rtx_insn *i;\n \n   if (target2 != pc_rtx)\n     {\n@@ -25876,7 +25876,7 @@ ix86_split_lshr (rtx *operands, rtx scratch, machine_mode mode)\n static void\n predict_jump (int prob)\n {\n-  rtx insn = get_last_insn ();\n+  rtx_insn *insn = get_last_insn ();\n   gcc_assert (JUMP_P (insn));\n   add_int_reg_note (insn, REG_BR_PROB, prob);\n }\n@@ -44193,7 +44193,7 @@ ix86_reverse_condition (enum rtx_code code, machine_mode mode)\n    to OPERANDS[0].  */\n \n const char *\n-output_387_reg_move (rtx insn, rtx *operands)\n+output_387_reg_move (rtx_insn *insn, rtx *operands)\n {\n   if (REG_P (operands[0]))\n     {"}, {"sha": "c8dbb4c6ff8422aaff28b555607f7761815e30a3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -7238,7 +7238,7 @@ ia64_adjust_cost (rtx_insn *insn, int dep_type1, rtx_insn *dep_insn,\n    ??? When cycle display notes are implemented, update this.  */\n \n static void\n-ia64_emit_insn_before (rtx insn, rtx before)\n+ia64_emit_insn_before (rtx insn, rtx_insn *before)\n {\n   emit_insn_before (insn, before);\n }"}, {"sha": "2d4a911535afb28ffa857294ac95a25ce1ac0568", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -2327,7 +2327,7 @@ is_cond_candidate (rtx insn)\n    new one.  Return the new insn if emitted.  */\n \n static rtx_insn *\n-emit_new_cond_insn (rtx insn, int cond)\n+emit_new_cond_insn (rtx_insn *insn, int cond)\n {\n   rtx c_insn = 0;\n   rtx pat, dst, src;"}, {"sha": "84b15b9fa5b9e83f27f243959b997b9c6335cf47", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -9128,7 +9128,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\trs6000_emit_move (got, gsym, Pmode);\n \t      else\n \t\t{\n-\t\t  rtx mem, lab, last;\n+\t\t  rtx mem, lab;\n \n \t\t  tmp1 = gen_reg_rtx (Pmode);\n \t\t  tmp2 = gen_reg_rtx (Pmode);\n@@ -9139,7 +9139,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\t  if (TARGET_LINK_STACK)\n \t\t    emit_insn (gen_addsi3 (tmp1, tmp1, GEN_INT (4)));\n \t\t  emit_move_insn (tmp2, mem);\n-\t\t  last = emit_insn (gen_addsi3 (got, tmp1, tmp2));\n+\t\t  rtx_insn *last = emit_insn (gen_addsi3 (got, tmp1, tmp2));\n \t\t  set_unique_reg_note (last, REG_EQUAL, gsym);\n \t\t}\n \t    }"}, {"sha": "aeafdd41f0bfc38957b4b3b5ef1a9d670b19e2cb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -5566,7 +5566,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n /* Emit a conditional jump to LABEL for condition code mask MASK using\n    comparsion operator COMPARISON.  Return the emitted jump insn.  */\n \n-static rtx\n+static rtx_insn *\n s390_emit_ccraw_jump (HOST_WIDE_INT mask, enum rtx_code comparison, rtx label)\n {\n   rtx temp;"}, {"sha": "a449b03480a0987753dc716488a4cc786220a092", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -6643,7 +6643,8 @@\n    (clobber (match_dup 4))]\n   \"TARGET_ZARCH\"\n {\n-  rtx insn, div_equal, mod_equal;\n+  rtx div_equal, mod_equal;\n+  rtx_insn *insn;\n \n   div_equal = gen_rtx_DIV (DImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_MOD (DImode, operands[1], operands[2]);\n@@ -6707,7 +6708,8 @@\n    (clobber (match_dup 4))]\n   \"TARGET_ZARCH\"\n {\n-  rtx insn, div_equal, mod_equal, equal;\n+  rtx div_equal, mod_equal, equal;\n+  rtx_insn *insn;\n \n   div_equal = gen_rtx_UDIV (DImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_UMOD (DImode, operands[1], operands[2]);\n@@ -6767,7 +6769,8 @@\n    (clobber (match_dup 4))]\n   \"!TARGET_ZARCH\"\n {\n-  rtx insn, div_equal, mod_equal, equal;\n+  rtx div_equal, mod_equal, equal;\n+  rtx_insn *insn;\n \n   div_equal = gen_rtx_DIV (SImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_MOD (SImode, operands[1], operands[2]);\n@@ -6825,7 +6828,8 @@\n    (clobber (match_dup 4))]\n   \"!TARGET_ZARCH && TARGET_CPU_ZARCH\"\n {\n-  rtx insn, div_equal, mod_equal, equal;\n+  rtx div_equal, mod_equal, equal;\n+  rtx_insn *insn;\n \n   div_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n@@ -6879,7 +6883,8 @@\n    (clobber (match_dup 3))]\n   \"!TARGET_ZARCH && !TARGET_CPU_ZARCH\"\n {\n-  rtx insn, udiv_equal, umod_equal, equal;\n+  rtx udiv_equal, umod_equal, equal;\n+  rtx_insn *insn;\n \n   udiv_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   umod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n@@ -6965,7 +6970,8 @@\n    (clobber (match_dup 3))]\n   \"!TARGET_ZARCH && !TARGET_CPU_ZARCH\"\n {\n-  rtx insn, udiv_equal, umod_equal, equal;\n+  rtx udiv_equal, umod_equal, equal;\n+  rtx_insn *insn;\n \n   udiv_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n   umod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n@@ -8599,7 +8605,8 @@\n \t(clz:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n   \"TARGET_EXTIMM && TARGET_ZARCH\"\n {\n-  rtx insn, clz_equal;\n+  rtx_insn *insn;\n+  rtx clz_equal;\n   rtx wide_reg = gen_reg_rtx (TImode);\n   rtx msb = gen_rtx_CONST_INT (DImode, (unsigned HOST_WIDE_INT) 1 << 63);\n "}, {"sha": "1061cb830bdd35c1614b512c1d56a2ea4c2419d2", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -848,7 +848,7 @@\n         (unsigned_float:DF (match_operand:SI 1 \"register_operand\"   \"r\")))]\n   \"\"\n   \"{\n-    rtx value, insns;\n+    rtx value;\n     rtx c0 = spu_const_from_ints (V16QImode, 0x02031011, 0x12138080, \n                                              0x06071415, 0x16178080);\n     rtx r0 = gen_reg_rtx (V16QImode);\n@@ -860,7 +860,7 @@\n          emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n                                                          DFmode, SImode),\n                    NULL_RTX, LCT_NORMAL, DFmode, 1, operands[1], SImode);\n-       insns = get_insns ();\n+       rtx_insn *insns = get_insns ();\n        end_sequence ();\n        emit_libcall_block (insns, operands[0], value,\n                            gen_rtx_UNSIGNED_FLOAT (DFmode, operands[1]));\n@@ -953,7 +953,7 @@\n          emit_library_call_value (convert_optab_libfunc (ufloat_optab,\n                                                          DFmode, DImode),\n                    NULL_RTX, LCT_NORMAL, DFmode, 1, operands[1], DImode);\n-      insns = get_insns ();\n+      rtx_insn *insns = get_insns ();\n       end_sequence ();\n       emit_libcall_block (insns, operands[0], value,\n                           gen_rtx_UNSIGNED_FLOAT (DFmode, operands[1]));"}, {"sha": "ab12b60567daf0e13c79114ca695c6cce7209713", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -988,7 +988,7 @@ tilegx_legitimize_tls_address (rtx addr)\n       case TLS_MODEL_GLOBAL_DYNAMIC:\n       case TLS_MODEL_LOCAL_DYNAMIC:\n \t{\n-\t  rtx r0, temp, temp2, temp3, got, last;\n+\t  rtx r0, temp, temp2, temp3, got;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  r0 = gen_rtx_REG (Pmode, 0);\n@@ -1023,6 +1023,7 @@ tilegx_legitimize_tls_address (rtx addr)\n \n \t  emit_move_insn (temp3, r0);\n \n+\t  rtx_insn *last;\n \t  if (TARGET_32BIT)\n \t    last = emit_insn (gen_tls_gd_add_32bit (ret, temp3, addr));\n \t  else"}, {"sha": "6b75f62295c9e687b448eec990b7afd8b5437576", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8485bdb18df66b06cfee57503cfbf35cef591e7/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=d8485bdb18df66b06cfee57503cfbf35cef591e7", "patch": "@@ -935,7 +935,7 @@ resolve_simple_move (rtx set, rtx_insn *insn)\n \n       if (AUTO_INC_DEC)\n \t{\n-\t  rtx move = emit_move_insn (reg, src);\n+\t  rtx_insn *move = emit_move_insn (reg, src);\n \t  if (MEM_P (src))\n \t    {\n \t      rtx note = find_reg_note (insn, REG_INC, NULL_RTX);"}]}