{"sha": "e251d3ec013bc46d58470988fc45566051a9030b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1MWQzZWMwMTNiYzQ2ZDU4NDcwOTg4ZmM0NTU2NjA1MWE5MDMwYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T21:46:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T21:46:45Z"}, "message": "Move code that stubs out IFN_MASK_LOADs\n\nvectorizable_mask_load_store replaces scalar IFN_MASK_LOAD calls with\ndummy assignments, so that they never survive vectorisation.  This patch\nmoves the code to vect_transform_loop instead, so that we only change\nthe scalar statements once all of them have been vectorised.\n\nThis makes it easier to handle other types of functions that need\nstubbing out, and also makes it easier to handle groups and patterns.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-vect-loop.c (vect_transform_loop): Stub out scalar\n\tIFN_MASK_LOAD calls here rather than...\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): ...here.\n\nFrom-SVN: r256210", "tree": {"sha": "590f6ba979027fdb7f511fcb2b1c482643337955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590f6ba979027fdb7f511fcb2b1c482643337955"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e251d3ec013bc46d58470988fc45566051a9030b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e251d3ec013bc46d58470988fc45566051a9030b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e251d3ec013bc46d58470988fc45566051a9030b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e251d3ec013bc46d58470988fc45566051a9030b/comments", "author": null, "committer": null, "parents": [{"sha": "b194a722446f51ffa11ea49affe6893a6361cfac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b194a722446f51ffa11ea49affe6893a6361cfac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b194a722446f51ffa11ea49affe6893a6361cfac"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "309c00942bfd5bfa3625f4bc67d712caa57dcebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e251d3ec013bc46d58470988fc45566051a9030b", "patch": "@@ -1,3 +1,9 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Stub out scalar\n+\tIFN_MASK_LOAD calls here rather than...\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): ...here.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c2501a8407ca8b33e6bda76db1d1b6d643062526", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e251d3ec013bc46d58470988fc45566051a9030b", "patch": "@@ -7810,6 +7810,25 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t      gsi_next (&si);\n \t    }\n \t}\t\t        /* stmts in BB */\n+\n+      /* Stub out scalar statements that must not survive vectorization.\n+\t Doing this here helps with grouped statements, or statements that\n+\t are involved in patterns.  */\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n+\t  if (call && gimple_call_internal_p (call, IFN_MASK_LOAD))\n+\t    {\n+\t      tree lhs = gimple_get_lhs (call);\n+\t      if (!VECTOR_TYPE_P (TREE_TYPE (lhs)))\n+\t\t{\n+\t\t  tree zero = build_zero_cst (TREE_TYPE (lhs));\n+\t\t  gimple *new_stmt = gimple_build_assign (lhs, zero);\n+\t\t  gsi_replace (&gsi, new_stmt, true);\n+\t\t}\n+\t    }\n+\t}\n     }\t\t\t\t/* BBs in loop */\n \n   /* The vectorization factor is always > 1, so if we use an IV increment of 1."}, {"sha": "96c6605d9591856ce98033c7b8f2ca12663bc59c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e251d3ec013bc46d58470988fc45566051a9030b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e251d3ec013bc46d58470988fc45566051a9030b", "patch": "@@ -2347,20 +2347,6 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \t    STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n \t  prev_stmt_info = vinfo_for_stmt (new_stmt);\n \t}\n-\n-      /* Ensure that even with -fno-tree-dce the scalar MASK_LOAD is removed\n-\t from the IL.  */\n-      if (STMT_VINFO_RELATED_STMT (stmt_info))\n-\t{\n-\t  stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n-\t  stmt_info = vinfo_for_stmt (stmt);\n-\t}\n-      tree lhs = gimple_call_lhs (stmt);\n-      new_stmt = gimple_build_assign (lhs, build_zero_cst (TREE_TYPE (lhs)));\n-      set_vinfo_for_stmt (new_stmt, stmt_info);\n-      set_vinfo_for_stmt (stmt, NULL);\n-      STMT_VINFO_STMT (stmt_info) = new_stmt;\n-      gsi_replace (gsi, new_stmt, true);\n       return true;\n     }\n   else if (vls_type != VLS_LOAD)\n@@ -2477,23 +2463,6 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \t}\n     }\n \n-  if (vls_type == VLS_LOAD)\n-    {\n-      /* Ensure that even with -fno-tree-dce the scalar MASK_LOAD is removed\n-\t from the IL.  */\n-      if (STMT_VINFO_RELATED_STMT (stmt_info))\n-\t{\n-\t  stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n-\t  stmt_info = vinfo_for_stmt (stmt);\n-\t}\n-      tree lhs = gimple_call_lhs (stmt);\n-      new_stmt = gimple_build_assign (lhs, build_zero_cst (TREE_TYPE (lhs)));\n-      set_vinfo_for_stmt (new_stmt, stmt_info);\n-      set_vinfo_for_stmt (stmt, NULL);\n-      STMT_VINFO_STMT (stmt_info) = new_stmt;\n-      gsi_replace (gsi, new_stmt, true);\n-    }\n-\n   return true;\n }\n "}]}