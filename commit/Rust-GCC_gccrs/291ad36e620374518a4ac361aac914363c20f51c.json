{"sha": "291ad36e620374518a4ac361aac914363c20f51c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxYWQzNmU2MjAzNzQ1MThhNGFjMzYxYWFjOTE0MzYzYzIwZjUxYw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-09-25T17:08:05Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-09-25T17:08:05Z"}, "message": "* gnu/classpath/jdwp/VMVirtualMachine.java\n        (_jdwp_suspend_counts): New private variable.\n        * gnu/classpath/jdwp/natVMVirtualMachine.cc\n        (initialize): Initialize _jdwp_suspend_counts.\n        (suspendThread): Implement.\n        (resumeThread): Implement.\n        (getSuspendCount): Implement.\n\nFrom-SVN: r117196", "tree": {"sha": "ea575d1e59ab844b356af96dbbd937be79b98cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea575d1e59ab844b356af96dbbd937be79b98cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/291ad36e620374518a4ac361aac914363c20f51c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291ad36e620374518a4ac361aac914363c20f51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291ad36e620374518a4ac361aac914363c20f51c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291ad36e620374518a4ac361aac914363c20f51c/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47de6f6d2a3cf370cd683951a9154b7e89ac2378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47de6f6d2a3cf370cd683951a9154b7e89ac2378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47de6f6d2a3cf370cd683951a9154b7e89ac2378"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "8c4662d6f55794696529516bf9b1ac0c31409a0a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291ad36e620374518a4ac361aac914363c20f51c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291ad36e620374518a4ac361aac914363c20f51c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=291ad36e620374518a4ac361aac914363c20f51c", "patch": "@@ -1,3 +1,13 @@\n+2006-09-25  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/VMVirtualMachine.java\n+\t(_jdwp_suspend_counts): New private variable.\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\t(initialize): Initialize _jdwp_suspend_counts.\n+\t(suspendThread): Implement.\n+\t(resumeThread): Implement.\n+\t(getSuspendCount): Implement.\n+\n 2006-09-22  Marco Trudel  <mtrudel@gmx.ch>\n \n \t* jvmti.cc (_Jv_JVMTI_GetErrorName): Now static.  Marked JNICALL."}, {"sha": "5c4018fce131bfd43bd7b2a6140c63476e51a4ff", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291ad36e620374518a4ac361aac914363c20f51c/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291ad36e620374518a4ac361aac914363c20f51c/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=291ad36e620374518a4ac361aac914363c20f51c", "patch": "@@ -48,6 +48,7 @@\n import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.Hashtable;\n import java.util.Iterator;\n \n /**\n@@ -57,6 +58,9 @@\n  */\n public class VMVirtualMachine\n {\n+  // Thread suspension table. Maps Thread to suspend count (Integer)\n+  private static Hashtable _jdwp_suspend_counts;\n+\n   public static native void initialize ();\n \n   /**"}, {"sha": "5e790b96534f30a8f4aebe4d6179a4ab0e8682d4", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291ad36e620374518a4ac361aac914363c20f51c/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291ad36e620374518a4ac361aac914363c20f51c/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=291ad36e620374518a4ac361aac914363c20f51c", "patch": "@@ -15,15 +15,20 @@ details. */\n \n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n+#include <java/lang/Integer.h>\n+#include <java/lang/String.h>\n+#include <java/lang/StringBuffer.h>\n #include <java/lang/Thread.h>\n #include <java/nio/ByteBuffer.h>\n #include <java/util/ArrayList.h>\n+#include <java/util/Hashtable.h>\n #include <java/util/Iterator.h>\n \n #include <gnu/classpath/jdwp/VMFrame.h>\n #include <gnu/classpath/jdwp/VMMethod.h>\n #include <gnu/classpath/jdwp/VMVirtualMachine.h>\n #include <gnu/classpath/jdwp/event/EventRequest.h>\n+#include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n #include <gnu/classpath/jdwp/util/MethodResult.h>\n \n using namespace java::lang;\n@@ -36,24 +41,114 @@ static jvmtiEnv *_jdwp_jvmtiEnv;\n void\n gnu::classpath::jdwp::VMVirtualMachine::initialize ()\n {\n+  _jdwp_suspend_counts = new ::java::util::Hashtable ();\n   JavaVM *vm = _Jv_GetJavaVM ();\n   vm->GetEnv (reinterpret_cast<void **> (&_jdwp_jvmtiEnv), JVMTI_VERSION_1_0);\n }\n \n void\n gnu::classpath::jdwp::VMVirtualMachine ::suspendThread (Thread *thread)\n {\n+  jint value;\n+  Integer *count;\n+  {\n+    JvSynchronize dummy (_jdwp_suspend_counts);\n+    count = reinterpret_cast<Integer *> (_jdwp_suspend_counts->get (thread));\n+    if (count == NULL)\n+      {\n+\t// New -- suspend thread\n+\tvalue = 0;\n+      }\n+    else\n+      {\n+\t// Thread already suspended\n+\tvalue = count->intValue ();\n+      }\n+\n+    count = Integer::valueOf (++value);\n+    _jdwp_suspend_counts->put (thread, count);\n+  }\n+\n+  if (value == 1)\n+    {\n+      // Suspend the thread\n+      jvmtiError err = _jdwp_jvmtiEnv->SuspendThread (thread);\n+      if (err != JVMTI_ERROR_NONE)\n+\t{\n+\t  using namespace gnu::classpath::jdwp::exception;\n+\t  char *reason;\n+\t  _jdwp_jvmtiEnv->GetErrorName (err, &reason);\n+\t  ::java::lang::String *txt\n+\t      = JvNewStringLatin1 (\"could not suspend thread: \");\n+\t  ::java::lang::StringBuffer *msg\n+\t      = new ::java::lang::StringBuffer (txt);\n+\t  msg->append (JvNewStringLatin1 (reason));\n+\t  _jdwp_jvmtiEnv->Deallocate ((unsigned char *) reason);\n+\t  throw new JdwpInternalErrorException (msg->toString ());\n+\t}\n+    }\n }\n \n void\n gnu::classpath::jdwp::VMVirtualMachine::resumeThread (Thread *thread)\n {\n+  jint value;\n+  {\n+    JvSynchronize dummy (_jdwp_suspend_counts);\n+    Integer *count\n+      = reinterpret_cast<Integer *> (_jdwp_suspend_counts->get (thread));\n+    if (count == NULL)\n+      {\n+\t// Thread not suspended: ThreadReference.Resume says to ignore it.\n+\treturn;\n+      }\n+    else\n+      {\n+\t// Decrement suspend count\n+\tvalue = count->intValue () - 1;\n+      }\n+\n+    if (value == 0)\n+      {\n+\t// Thread will be resumed, remove from table\n+\t_jdwp_suspend_counts->remove (thread);\n+      }\n+    else\n+      {\n+\t// Thread stays suspended: record new suspend count\n+\tcount = Integer::valueOf (value);\n+\t_jdwp_suspend_counts->put (thread, count);\n+      }\n+  }\n+\n+  if (value == 0)\n+    {\n+      jvmtiError err = _jdwp_jvmtiEnv->ResumeThread (thread);\n+      if (err != JVMTI_ERROR_NONE)\n+\t{\n+\t  using namespace gnu::classpath::jdwp::exception;\n+\t  char *reason;\n+\t  _jdwp_jvmtiEnv->GetErrorName (err, &reason);\n+\t  ::java::lang::String *txt \n+\t      = JvNewStringLatin1 (\"could not resume thread: \");\n+\t  ::java::lang::StringBuffer *msg\n+\t      = new ::java::lang::StringBuffer (txt);\n+\t  msg->append (JvNewStringLatin1 (reason));\n+\t  _jdwp_jvmtiEnv->Deallocate ((unsigned char *) reason);\n+\t  throw new JdwpInternalErrorException (msg->toString ());\n+\t}\n+    }\n }\n \n jint\n gnu::classpath::jdwp::VMVirtualMachine::getSuspendCount (Thread *thread)\n {\n-  return 0;\n+  jint suspensions = 0;\n+  Integer *count\n+    = reinterpret_cast<Integer *> (_jdwp_suspend_counts->get (thread));\n+  if (count != NULL)\n+    suspensions = count->intValue ();\n+  return suspensions;\n }\n \n void"}]}