{"sha": "720e2f72c3d2a5b538f519da0a5d18173989d8e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIwZTJmNzJjM2QyYTViNTM4ZjUxOWRhMGE1ZDE4MTczOTg5ZDhlMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-11-10T02:05:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-10T02:05:13Z"}, "message": "re PR libstdc++/22203 (std::numeric_limits<int>::traps is wrong on PPC)\n\n2005-11-09  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Paolo Carlini  <pcarlini@suse.de>\n            Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n\tPR libstdc++/22203\n\t* numeric_limits.cc: Split into...\n\t* numeric_limits/specialization.cc: ..this.\n\t* numeric_limits/is_iec559.cc: Same.\n\t* numeric_limits/sign.cc: Same.\n\t* numeric_limits/quiet_NaN.cc: Same.\n\t* numeric_limits/digits10.cc: Same.\n\t* numeric_limits/denorm_min.cc: Same.\n\t* numeric_limits/min_max.cc: Same.\n\t* numeric_limits/epsilon.cc: Same.\n\t* numeric_limits/infinity.cc: Same.\n\t* numeric_limits/traps.cc: New.\n\n\nCo-Authored-By: Gabriel Dos Reis <gdr@integrable-solutions.net>\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r106727", "tree": {"sha": "6d3e047cb7440acf5457057991b12ca9d7a93b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d3e047cb7440acf5457057991b12ca9d7a93b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/720e2f72c3d2a5b538f519da0a5d18173989d8e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720e2f72c3d2a5b538f519da0a5d18173989d8e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/720e2f72c3d2a5b538f519da0a5d18173989d8e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720e2f72c3d2a5b538f519da0a5d18173989d8e1/comments", "author": null, "committer": null, "parents": [{"sha": "bc33cab29c4b07f07b894749855c36c5fd76ed78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc33cab29c4b07f07b894749855c36c5fd76ed78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc33cab29c4b07f07b894749855c36c5fd76ed78"}], "stats": {"total": 1056, "additions": 706, "deletions": 350}, "files": [{"sha": "da33a22e5f154d1cc895fe2dec0851352c1a2109", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -1,3 +1,20 @@\n+2005-11-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+            Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tPR libstdc++/22203\n+\t* numeric_limits.cc: Split into...\n+\t* numeric_limits/specialization.cc: ..this.\n+\t* numeric_limits/is_iec559.cc: Same.\n+\t* numeric_limits/sign.cc: Same.\n+\t* numeric_limits/quiet_NaN.cc: Same.\n+\t* numeric_limits/digits10.cc: Same.\n+\t* numeric_limits/denorm_min.cc: Same.\n+\t* numeric_limits/min_max.cc: Same.\n+\t* numeric_limits/epsilon.cc: Same.\n+\t* numeric_limits/infinity.cc: Same.\n+\t* numeric_limits/traps.cc: New.\n+\n 2005-11-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/boost_shared_ptr.h: Trivial formatting fixes."}, {"sha": "f04f05f49eb2a34b5c619facb935470c4d6438a0", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "removed", "additions": 0, "deletions": 350, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc33cab29c4b07f07b894749855c36c5fd76ed78/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc33cab29c4b07f07b894749855c36c5fd76ed78/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=bc33cab29c4b07f07b894749855c36c5fd76ed78", "patch": "@@ -1,350 +0,0 @@\n-// { dg-options \"-mieee\" { target alpha*-*-* } }\n-// { dg-options \"-mieee\" { target sh*-*-* } }\n-\n-// 1999-08-23 bkoz\n-\n-// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 18.2.1.1 template class numeric_limits\n-\n-#include <limits>\n-#include <limits.h>\n-#include <float.h>\n-#include <cwchar>\n-#include <testsuite_hooks.h>\n-\n-template<typename T>\n-struct extrema {\n-  static T min;\n-  static T max;\n-};\n-\n-\n-#define DEFINE_EXTREMA(T, m, M) \\\n-  template<> T extrema<T>::min = m; \\\n-  template<> T extrema<T>::max = M\n-\n-DEFINE_EXTREMA(char, CHAR_MIN, CHAR_MAX);\n-DEFINE_EXTREMA(signed char, SCHAR_MIN, SCHAR_MAX);\n-DEFINE_EXTREMA(unsigned char, 0, UCHAR_MAX);\n-DEFINE_EXTREMA(short, SHRT_MIN, SHRT_MAX);\n-DEFINE_EXTREMA(unsigned short, 0, USHRT_MAX);\n-DEFINE_EXTREMA(int, INT_MIN, INT_MAX);\n-DEFINE_EXTREMA(unsigned, 0U, UINT_MAX);\n-DEFINE_EXTREMA(long, LONG_MIN, LONG_MAX);\n-DEFINE_EXTREMA(unsigned long, 0UL, ULONG_MAX);\n-\n-#if _GLIBCXX_USE_WCHAR_T\n-DEFINE_EXTREMA(wchar_t, WCHAR_MIN, WCHAR_MAX);\n-#endif //_GLIBCXX_USE_WCHAR_T\n-\n-DEFINE_EXTREMA(float, FLT_MIN, FLT_MAX);\n-DEFINE_EXTREMA(double, DBL_MIN, DBL_MAX);\n-DEFINE_EXTREMA(long double, LDBL_MIN, LDBL_MAX);\n-\n-#undef DEFINE_EXTREMA\n-\n-template<typename T>\n-void test_extrema()\n-{\n-  bool test __attribute__((unused)) = true;\n-  T limits_min = std::numeric_limits<T>::min();\n-  T limits_max = std::numeric_limits<T>::max();\n-  T extrema_min = extrema<T>::min;\n-  T extrema_max = extrema<T>::max;\n-  VERIFY( extrema_min == limits_min );\n-  VERIFY( extrema_max == limits_max );\n-}\n-\n-template<typename T>\n-void test_epsilon()\n-{\n-  bool test __attribute__((unused)) = true;\n-  T epsilon = std::numeric_limits<T>::epsilon();\n-  T one = 1;\n-\n-  VERIFY( one != (one + epsilon) );\n-}\n-\n-#ifdef __CHAR_UNSIGNED__\n-#define char_is_signed false\n-#else\n-#define char_is_signed true\n-#endif\n-\n-void test_sign()\n-{\n-  bool test __attribute__((unused)) = true;\n-  VERIFY( std::numeric_limits<char>::is_signed == char_is_signed );\n-  VERIFY( std::numeric_limits<signed char>::is_signed == true );\n-  VERIFY( std::numeric_limits<unsigned char>::is_signed == false );\n-  VERIFY( std::numeric_limits<short>::is_signed == true );\n-  VERIFY( std::numeric_limits<unsigned short>::is_signed == false );\n-  VERIFY( std::numeric_limits<int>::is_signed == true );\n-  VERIFY( std::numeric_limits<unsigned>::is_signed == false );\n-  VERIFY( std::numeric_limits<long>::is_signed == true );\n-  VERIFY( std::numeric_limits<unsigned long>::is_signed == false );\n-  VERIFY( std::numeric_limits<float>::is_signed == true );\n-  VERIFY( std::numeric_limits<double>::is_signed == true );\n-  VERIFY( std::numeric_limits<long double>::is_signed == true );\n-}\n-\n-\n-template<typename T>\n-void\n-test_infinity()\n-{\n-  bool test;\n-\n-  if (std::numeric_limits<T>::has_infinity)\n-    {\n-      T inf = std::numeric_limits<T>::infinity();\n-      test = (inf + inf == inf);\n-    }\n-  else\n-    test = true;\n-\n-  VERIFY (test);\n-}\n-\n-template<typename T>\n-void\n-test_denorm_min()\n-{\n-  bool test;\n-\n-  if (std::numeric_limits<T>::has_denorm == std::denorm_present)\n-    {\n-      T denorm = std::numeric_limits<T>::denorm_min();\n-      test = (denorm > 0);\n-    }\n-  else\n-    test = true;\n-\n-  VERIFY (test);\n-}\n-\n-template<typename T>\n-void\n-test_qnan()\n-{\n-  bool test;\n-\n-  if (std::numeric_limits<T>::has_quiet_NaN)\n-    {\n-      T nan = std::numeric_limits<T>::quiet_NaN();\n-      test = (nan != nan);\n-    }\n-  else\n-    test = true;\n-\n-  VERIFY (test);\n-}\n-\n-\n-template<typename T>\n-void\n-test_is_iec559()\n-{\n-  bool test;\n-\n-  if (std::numeric_limits<T>::is_iec559)\n-    {\n-      // IEC 559 requires all of the following.\n-      test = (std::numeric_limits<T>::has_infinity\n-\t      && std::numeric_limits<T>::has_quiet_NaN\n-\t      && std::numeric_limits<T>::has_signaling_NaN);\n-    }\n-  else\n-    {\n-      // If we had all of the following, why didn't we set IEC 559?\n-      test = (!std::numeric_limits<T>::has_infinity\n-\t      || !std::numeric_limits<T>::has_quiet_NaN\n-\t      || !std::numeric_limits<T>::has_signaling_NaN);\n-    }\n-\n-  VERIFY (test);\n-}\n-\n-\n-template<typename T>\n-  struct A \n-  {\n-    int key;\n-  public:\n-    A(int i = 0): key(i) { }\n-    bool\n-    operator==(int i) { return i == key; }\n-  };\n-\n-struct B \n-{\n-  B(int i = 0) { }\n-};\n-\n-\n-bool test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  std::numeric_limits< A<B> > obj;\n-\n-  VERIFY( !obj.is_specialized );\n-  VERIFY( obj.min() == 0 );\n-  VERIFY( obj.max() == 0 );\n-  VERIFY( obj.digits ==  0 );\n-  VERIFY( obj.digits10 == 0 );\n-  VERIFY( !obj.is_signed );\n-  VERIFY( !obj.is_integer );\n-  VERIFY( !obj.is_exact );\n-  VERIFY( obj.radix == 0 );\n-  VERIFY( obj.epsilon() == 0 );\n-  VERIFY( obj.round_error() == 0 );\n-  VERIFY( obj.min_exponent == 0 );\n-  VERIFY( obj.min_exponent10 == 0 );\n-  VERIFY( obj.max_exponent == 0 );\n-  VERIFY( obj.max_exponent10 == 0 );\n-  VERIFY( !obj.has_infinity );\n-  VERIFY( !obj.has_quiet_NaN );\n-  VERIFY( !obj.has_signaling_NaN );\n-  VERIFY( !obj.has_denorm );\n-  VERIFY( !obj.has_denorm_loss );\n-  VERIFY( obj.infinity() == 0 );\n-  VERIFY( obj.quiet_NaN() == 0 );\n-  VERIFY( obj.signaling_NaN() == 0 );\n-  VERIFY( obj.denorm_min() == 0 );\n-  VERIFY( !obj.is_iec559 );\n-  VERIFY( !obj.is_bounded );\n-  VERIFY( !obj.is_modulo );\n-  VERIFY( !obj.traps );\n-  VERIFY( !obj.tinyness_before );\n-  VERIFY( obj.round_style == std::round_toward_zero );\n-  return test;\n-}\n-\n-// test linkage of the generic bits\n-template struct std::numeric_limits<B>;\n-\n-void test02()\n-{\n-  typedef std::numeric_limits<B> b_nl_type;\n-  \n-  // Should probably do all of them...\n-  const int* __attribute__((unused)) pi1 = &b_nl_type::digits;\n-  const int* __attribute__((unused)) pi2 = &b_nl_type::digits10;\n-  const int* __attribute__((unused)) pi3 = &b_nl_type::max_exponent10;\n-  const bool* __attribute__((unused)) pb1 = &b_nl_type::traps;\n-}\n-\n-// libstdc++/5045\n-bool test03()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  VERIFY( std::numeric_limits<bool>::digits10 == 0 );\n-  if (__CHAR_BIT__ == 8)\n-    {\n-      VERIFY( std::numeric_limits<signed char>::digits10 == 2 );\n-      VERIFY( std::numeric_limits<unsigned char>::digits10 == 2 );\n-    }\n-  if (__CHAR_BIT__ * sizeof(short) == 16)\n-    {\n-      VERIFY( std::numeric_limits<signed short>::digits10 == 4 );\n-      VERIFY( std::numeric_limits<unsigned short>::digits10 == 4 );\n-    }\n-  if (__CHAR_BIT__ * sizeof(int) == 32)\n-    {\n-      VERIFY( std::numeric_limits<signed int>::digits10 == 9 );\n-      VERIFY( std::numeric_limits<unsigned int>::digits10 == 9 );\n-    }\n-  if (__CHAR_BIT__ * sizeof(long long) == 64)\n-    {\n-      VERIFY( std::numeric_limits<signed long long>::digits10 == 18 );\n-      VERIFY( std::numeric_limits<unsigned long long>::digits10 == 19 );\n-    }\n-  return test;\n-}\n-\n-// libstdc++/8949\n-bool test04()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  VERIFY( !std::numeric_limits<short>::is_iec559 );\n-  VERIFY( !std::numeric_limits<unsigned short>::is_iec559 );\n-  VERIFY( !std::numeric_limits<int>::is_iec559 );\n-  VERIFY( !std::numeric_limits<unsigned int>::is_iec559 );\n-  VERIFY( !std::numeric_limits<long>::is_iec559 );\n-  VERIFY( !std::numeric_limits<unsigned long>::is_iec559 );\n-  VERIFY( !std::numeric_limits<long long>::is_iec559 );\n-  VERIFY( !std::numeric_limits<unsigned long long>::is_iec559 );\n-  return test;\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-\n-  test_extrema<char>();\n-  test_extrema<signed char>();\n-  test_extrema<unsigned char>();\n-  \n-  test_extrema<short>();\n-  test_extrema<unsigned short>();\n-\n-  test_extrema<int>();\n-  test_extrema<unsigned>();\n-\n-  test_extrema<long>();\n-  test_extrema<unsigned long>();\n-\n-  test_extrema<float>();\n-  test_extrema<double>();\n-  test_extrema<long double>();\n-\n-  test_epsilon<float>();\n-  test_epsilon<double>();\n-  test_epsilon<long double>();\n-\n-  test_sign();\n-\n-  test_infinity<float>();\n-  test_infinity<double>();\n-  test_infinity<long double>();\n-\n-  test_denorm_min<float>();\n-  test_denorm_min<double>();\n-  test_denorm_min<long double>();\n-\n-  test_qnan<float>();\n-  test_qnan<double>();\n-  test_qnan<long double>();\n-\n-  // ??? How to test SNaN?  We'd perhaps have to be prepared\n-  // to catch SIGFPE.  Can't rely on a signal getting through\n-  // since the exception can be disabled in the FPU.\n-\n-  test_is_iec559<float>();\n-  test_is_iec559<double>();\n-  test_is_iec559<long double>();\n-\n-  return 0;\n-}"}, {"sha": "d0a9c5960a7cb5b6bb56a418a89c8591c2e6fd72", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/denorm_min.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdenorm_min.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdenorm_min.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdenorm_min.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test_denorm_min()\n+{\n+  bool test;\n+\n+  if (std::numeric_limits<T>::has_denorm == std::denorm_present)\n+    {\n+      T denorm = std::numeric_limits<T>::denorm_min();\n+      test = (denorm > 0);\n+    }\n+  else\n+    test = true;\n+\n+  VERIFY (test);\n+}\n+\n+int main()\n+{\n+  test_denorm_min<float>();\n+  test_denorm_min<double>();\n+  test_denorm_min<long double>();\n+\n+  return 0;\n+}"}, {"sha": "57bff34de4e103aa66f488b6b81164ffac804a92", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/digits10.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdigits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdigits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdigits10.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/5045\n+bool test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( std::numeric_limits<bool>::digits10 == 0 );\n+  if (__CHAR_BIT__ == 8)\n+    {\n+      VERIFY( std::numeric_limits<signed char>::digits10 == 2 );\n+      VERIFY( std::numeric_limits<unsigned char>::digits10 == 2 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(short) == 16)\n+    {\n+      VERIFY( std::numeric_limits<signed short>::digits10 == 4 );\n+      VERIFY( std::numeric_limits<unsigned short>::digits10 == 4 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(int) == 32)\n+    {\n+      VERIFY( std::numeric_limits<signed int>::digits10 == 9 );\n+      VERIFY( std::numeric_limits<unsigned int>::digits10 == 9 );\n+    }\n+  if (__CHAR_BIT__ * sizeof(long long) == 64)\n+    {\n+      VERIFY( std::numeric_limits<signed long long>::digits10 == 18 );\n+      VERIFY( std::numeric_limits<unsigned long long>::digits10 == 19 );\n+    }\n+  return test;\n+}\n+\n+int main()\n+{\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "9a0e755418c31566890ccad03349766d716593ba", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/epsilon.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fepsilon.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fepsilon.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fepsilon.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void test_epsilon()\n+{\n+  bool test __attribute__((unused)) = true;\n+  T epsilon = std::numeric_limits<T>::epsilon();\n+  T one = 1;\n+\n+  VERIFY( one != (one + epsilon) );\n+}\n+\n+int main()\n+{\n+  test_epsilon<float>();\n+  test_epsilon<double>();\n+  test_epsilon<long double>();\n+\n+  return 0;\n+}"}, {"sha": "c6398a0bf0e88e1597f28ab7826e96fb263011e4", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/infinity.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Finfinity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Finfinity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Finfinity.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test_infinity()\n+{\n+  bool test;\n+\n+  if (std::numeric_limits<T>::has_infinity)\n+    {\n+      T inf = std::numeric_limits<T>::infinity();\n+      test = (inf + inf == inf);\n+    }\n+  else\n+    test = true;\n+\n+  VERIFY (test);\n+}\n+\n+int main()\n+{\n+  test_infinity<float>();\n+  test_infinity<double>();\n+  test_infinity<long double>();\n+\n+  return 0;\n+}"}, {"sha": "84337590cf72b7c6ceebea0960238a127ef0a534", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/is_iec559.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_iec559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_iec559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fis_iec559.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,81 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test_is_iec559()\n+{\n+  bool test;\n+\n+  if (std::numeric_limits<T>::is_iec559)\n+    {\n+      // IEC 559 requires all of the following.\n+      test = (std::numeric_limits<T>::has_infinity\n+\t      && std::numeric_limits<T>::has_quiet_NaN\n+\t      && std::numeric_limits<T>::has_signaling_NaN);\n+    }\n+  else\n+    {\n+      // If we had all of the following, why didn't we set IEC 559?\n+      test = (!std::numeric_limits<T>::has_infinity\n+\t      || !std::numeric_limits<T>::has_quiet_NaN\n+\t      || !std::numeric_limits<T>::has_signaling_NaN);\n+    }\n+\n+  VERIFY (test);\n+}\n+\n+// libstdc++/8949\n+bool test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( !std::numeric_limits<short>::is_iec559 );\n+  VERIFY( !std::numeric_limits<unsigned short>::is_iec559 );\n+  VERIFY( !std::numeric_limits<int>::is_iec559 );\n+  VERIFY( !std::numeric_limits<unsigned int>::is_iec559 );\n+  VERIFY( !std::numeric_limits<long>::is_iec559 );\n+  VERIFY( !std::numeric_limits<unsigned long>::is_iec559 );\n+  VERIFY( !std::numeric_limits<long long>::is_iec559 );\n+  VERIFY( !std::numeric_limits<unsigned long long>::is_iec559 );\n+  return test;\n+}\n+\n+int main()\n+{\n+  test_is_iec559<float>();\n+  test_is_iec559<double>();\n+  test_is_iec559<long double>();\n+\n+  test04();\n+\n+  return 0;\n+}"}, {"sha": "d3004588f074e35c9512fbc34aac68642bb22de2", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/min_max.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmin_max.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,95 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct extrema {\n+  static T min;\n+  static T max;\n+};\n+\n+\n+#define DEFINE_EXTREMA(T, m, M) \\\n+  template<> T extrema<T>::min = m; \\\n+  template<> T extrema<T>::max = M\n+\n+DEFINE_EXTREMA(char, CHAR_MIN, CHAR_MAX);\n+DEFINE_EXTREMA(signed char, SCHAR_MIN, SCHAR_MAX);\n+DEFINE_EXTREMA(unsigned char, 0, UCHAR_MAX);\n+DEFINE_EXTREMA(short, SHRT_MIN, SHRT_MAX);\n+DEFINE_EXTREMA(unsigned short, 0, USHRT_MAX);\n+DEFINE_EXTREMA(int, INT_MIN, INT_MAX);\n+DEFINE_EXTREMA(unsigned, 0U, UINT_MAX);\n+DEFINE_EXTREMA(long, LONG_MIN, LONG_MAX);\n+DEFINE_EXTREMA(unsigned long, 0UL, ULONG_MAX);\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+DEFINE_EXTREMA(wchar_t, WCHAR_MIN, WCHAR_MAX);\n+#endif //_GLIBCXX_USE_WCHAR_T\n+\n+DEFINE_EXTREMA(float, FLT_MIN, FLT_MAX);\n+DEFINE_EXTREMA(double, DBL_MIN, DBL_MAX);\n+DEFINE_EXTREMA(long double, LDBL_MIN, LDBL_MAX);\n+\n+#undef DEFINE_EXTREMA\n+\n+template<typename T>\n+void test_extrema()\n+{\n+  bool test __attribute__((unused)) = true;\n+  T limits_min = std::numeric_limits<T>::min();\n+  T limits_max = std::numeric_limits<T>::max();\n+  T extrema_min = extrema<T>::min;\n+  T extrema_max = extrema<T>::max;\n+  VERIFY( extrema_min == limits_min );\n+  VERIFY( extrema_max == limits_max );\n+}\n+\n+int main()\n+{\n+  test_extrema<char>();\n+  test_extrema<signed char>();\n+  test_extrema<unsigned char>();\n+  \n+  test_extrema<short>();\n+  test_extrema<unsigned short>();\n+\n+  test_extrema<int>();\n+  test_extrema<unsigned>();\n+\n+  test_extrema<long>();\n+  test_extrema<unsigned long>();\n+\n+  test_extrema<float>();\n+  test_extrema<double>();\n+  test_extrema<long double>();\n+\n+  return 0;\n+}"}, {"sha": "ef2aab66add2f82348adadfa79608b2879c7d28e", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/quiet_NaN.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fquiet_NaN.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fquiet_NaN.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fquiet_NaN.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+void\n+test_qnan()\n+{\n+  bool test;\n+\n+  if (std::numeric_limits<T>::has_quiet_NaN)\n+    {\n+      T nan = std::numeric_limits<T>::quiet_NaN();\n+      test = (nan != nan);\n+    }\n+  else\n+    test = true;\n+\n+  VERIFY (test);\n+}\n+\n+int main()\n+{\n+  test_qnan<float>();\n+  test_qnan<double>();\n+  test_qnan<long double>();\n+\n+  return 0;\n+}"}, {"sha": "e6c5f1d8aca4e93445f5f42b7422c171673fafc7", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/sign.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fsign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fsign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fsign.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+#ifdef __CHAR_UNSIGNED__\n+#define char_is_signed false\n+#else\n+#define char_is_signed true\n+#endif\n+\n+void test_sign()\n+{\n+  bool test __attribute__((unused)) = true;\n+  VERIFY( std::numeric_limits<char>::is_signed == char_is_signed );\n+  VERIFY( std::numeric_limits<signed char>::is_signed == true );\n+  VERIFY( std::numeric_limits<unsigned char>::is_signed == false );\n+  VERIFY( std::numeric_limits<short>::is_signed == true );\n+  VERIFY( std::numeric_limits<unsigned short>::is_signed == false );\n+  VERIFY( std::numeric_limits<int>::is_signed == true );\n+  VERIFY( std::numeric_limits<unsigned>::is_signed == false );\n+  VERIFY( std::numeric_limits<long>::is_signed == true );\n+  VERIFY( std::numeric_limits<unsigned long>::is_signed == false );\n+  VERIFY( std::numeric_limits<float>::is_signed == true );\n+  VERIFY( std::numeric_limits<double>::is_signed == true );\n+  VERIFY( std::numeric_limits<long double>::is_signed == true );\n+}\n+\n+int main()\n+{\n+  test_sign();\n+\n+  return 0;\n+}"}, {"sha": "815b7f5505c53c68e7d3376b75212f34de57d3ae", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/specialization.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,107 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// 1999-08-23 bkoz\n+\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <limits.h>\n+#include <float.h>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct A \n+  {\n+    int key;\n+  public:\n+    A(int i = 0): key(i) { }\n+    bool\n+    operator==(int i) { return i == key; }\n+  };\n+\n+struct B \n+{\n+  B(int i = 0) { }\n+};\n+\n+\n+bool test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::numeric_limits< A<B> > obj;\n+\n+  VERIFY( !obj.is_specialized );\n+  VERIFY( obj.min() == 0 );\n+  VERIFY( obj.max() == 0 );\n+  VERIFY( obj.digits ==  0 );\n+  VERIFY( obj.digits10 == 0 );\n+  VERIFY( !obj.is_signed );\n+  VERIFY( !obj.is_integer );\n+  VERIFY( !obj.is_exact );\n+  VERIFY( obj.radix == 0 );\n+  VERIFY( obj.epsilon() == 0 );\n+  VERIFY( obj.round_error() == 0 );\n+  VERIFY( obj.min_exponent == 0 );\n+  VERIFY( obj.min_exponent10 == 0 );\n+  VERIFY( obj.max_exponent == 0 );\n+  VERIFY( obj.max_exponent10 == 0 );\n+  VERIFY( !obj.has_infinity );\n+  VERIFY( !obj.has_quiet_NaN );\n+  VERIFY( !obj.has_signaling_NaN );\n+  VERIFY( !obj.has_denorm );\n+  VERIFY( !obj.has_denorm_loss );\n+  VERIFY( obj.infinity() == 0 );\n+  VERIFY( obj.quiet_NaN() == 0 );\n+  VERIFY( obj.signaling_NaN() == 0 );\n+  VERIFY( obj.denorm_min() == 0 );\n+  VERIFY( !obj.is_iec559 );\n+  VERIFY( !obj.is_bounded );\n+  VERIFY( !obj.is_modulo );\n+  VERIFY( !obj.traps );\n+  VERIFY( !obj.tinyness_before );\n+  VERIFY( obj.round_style == std::round_toward_zero );\n+  return test;\n+}\n+\n+// test linkage of the generic bits\n+template struct std::numeric_limits<B>;\n+\n+void test02()\n+{\n+  typedef std::numeric_limits<B> b_nl_type;\n+  \n+  // Should probably do all of them...\n+  const int* __attribute__((unused)) pi1 = &b_nl_type::digits;\n+  const int* __attribute__((unused)) pi2 = &b_nl_type::digits10;\n+  const int* __attribute__((unused)) pi3 = &b_nl_type::max_exponent10;\n+  const bool* __attribute__((unused)) pb1 = &b_nl_type::traps;\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "e9bdd84e4b33edc3baf69c634e0f537cafc22a91", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/traps.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720e2f72c3d2a5b538f519da0a5d18173989d8e1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc?ref=720e2f72c3d2a5b538f519da0a5d18173989d8e1", "patch": "@@ -0,0 +1,63 @@\n+// { dg-options \"-mieee\" { target alpha*-*-* } }\n+// { dg-options \"-mieee\" { target sh*-*-* } }\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void \n+  test_traps()\n+  {\n+    typedef T value_type;\n+    volatile value_type i(5);\n+    volatile value_type j(0);\n+    \n+    if (!std::numeric_limits<value_type>::traps)\n+      value_type r = i/j;\n+  }\n+\n+// libstdc++/22203\n+int main()\n+{\n+  test_traps<int>();\n+  test_traps<unsigned int>();\n+  test_traps<long>();\n+  test_traps<unsigned long>();\n+  test_traps<long long>();\n+  test_traps<unsigned long long>();\n+ \n+  /*\n+    For floating points, trapping is a different, more complicated\n+    story.  If is_iecxxx is true, then division by zero would not trap\n+    (infinity).  If is_iecxxx is false, we don't know (VAX may trap for\n+    0/0 -- I have to check).  For most cases (i.e. IEE-754), trapping\n+    for floating points have to do with whether there is a support for\n+    signaling NaN.\n+    - Gaby.\n+  */\n+  //  test_traps<float>();\n+  //  test_traps<double>();\n+  //  test_traps<long double>();\n+\n+  return 0;\n+}"}]}