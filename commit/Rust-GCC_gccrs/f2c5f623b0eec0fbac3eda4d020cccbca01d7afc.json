{"sha": "f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjNWY2MjNiMGVlYzBmYmFjM2VkYTRkMDIwY2NjYmNhMDFkN2FmYw==", "commit": {"author": {"name": "Ben Chelf", "email": "chelf@gcc.gnu.org", "date": "2000-07-02T05:23:01Z"}, "committer": {"name": "Ben Chelf", "email": "chelf@gcc.gnu.org", "date": "2000-07-02T05:23:01Z"}, "message": "Makefile.in (C_AND_OBJC_OBJS): Added c-semantics.o.\n\n2000-07-01  Benjamin Chelf  <chelf@codesourcery.com>\n\n\t* Makefile.in (C_AND_OBJC_OBJS): Added c-semantics.o.\n\t(c-semantics.o): New target.\n\n\t* c-common.h (TREE_LANG_FLAG_?): Added documentation.\n\t(genrtl_do_pushlevel): Moved from cp/cp-tree.h.\n\t(genrtl_clear_out_block): Likewise.\n\t(genrtl_goto_stmt): Likewise.\n\t(genrtl_expr_stmt): Likewise.\n\t(genrtl_decl_stmt): Likewise.\n\t(genrtl_if_stmt): Likewise.\n\t(genrtl_while_stmt): Likewise.\n\t(genrtl_do_stmt): Likewise.\n\t(genrtl_return_stmt): Likewise.\n\t(genrtl_for_stmt): Likewise.\n\t(genrtl_break_stmt): Likewise.\n\t(genrtl_continue_stmt): Likewise.\n\t(genrtl_scope_stmt): Likewise.\n\t(genrtl_switch_stmt): Likewise.\n\t(genrtl_case_label): Likewise.\n\t(genrtl_begin_compound_stmt): Likewise.\n\t(gerntl_finish_compound_stmt): Likewise.\n\t(genrtl_compound_stmt): Likewise.\n\t(genrtl_asm_stmt): Likewise.\n\t(genrtl_decl_cleanup): Likewise.\n\t(DECL_ANON_UNION_ELEMS): Likewise.\n\t(emit_local_var): Likewise.\n\t(make_rtl_for_local_static): Likewise.\n\t(expand_cond): Likewise.\n\t(expand_stmt): Likewise.\n\t(c_expand_return): Likewise.\n\t(c_expand_start_case): Likewise.\n\t(do_case): Likewise.\n\t(COMPOUND_STMT_NO_SCOPE): Likewise.\n\t(c_expand_asm_operands): Likewise.\n\t(NEW_FOR_SCOPE_P): New macro.\n\t(expand_expr_stmt_fn): New type.\n\n\t(set_current_function_name_declared): Likewise.\n\t(current_function_name_declared): Likewise.\n\t(lang_expand_stmt): Likewise.\n\t(stmts_are_full_exprs_p): Likewise.\n\t(anon_aggr_type_p): Likewise.\n\t(lang_expand_expr_stmt): Likewise.\n\t(build_case_label): Likewise.\n\n\t* c-decl.c (lang_expand_expr_stmt): Initialize.\n\t(stmts_are_full_exprs_p): Define.\n\t(current_function_name_declared): Likewise.\n\t(do_case): Likewise.\n\t(lang_expand_stmt): Likewise.\n\t(set_current_function_name_declared): Likewise.\n\t(anon_aggr_type_p): Likewise.\n\t(build_case_label): Likewise.\n\n\t* c-semantics.c: New file.\n\t(expand_cond): Moved from cp/semantics.c.\n\t(genrtl_do_pushlevel): Likewise.\n\t(genrtl_clear_out_block): Likewise.\n\t(genrtl_goto_stmt): Likewise.\n\t(genrtl_expr_stmt): Likewise.\n\t(genrtl_decl_stmt): Likewise.\n\t(genrtl_if_stmt): Likewise.\n\t(genrtl_while_stmt): Likewise.\n\t(genrtl_do_stmt): Likewise.\n\t(genrtl_return_stmt): Likewise.\n\t(genrtl_for_stmt): Likewise.\n\t(genrtl_break_stmt): Likewise.\n\t(genrtl_continue_stmt): Likewise.\n\t(genrtl_scope_stmt): Likewise.\n\t(genrtl_switch_stmt): Likewise.\n\t(genrtl_case_label): Likewise.\n\t(genrtl_begin_compound_stmt): Likewise.\n\t(genrtl_finish_compound_stmt): Likewise.\n\t(genrtl_compound_stmt): Likewise.\n\t(genrtl_asm_stmt): Likewise.\n\t(genrtl_decl_cleanup): Likewise.\n\t(make_rtl_for_local_static): Moved from cp/decl.c.\n\t(emit_local_var): Likewise.\n\t(expand_stmt): Define.\n\n\t* c-tree.h: (c_expand_asm_operands): Moved to c-common.h.\n\t(c_expand_return): Likewise.\n\t(c_expand_start_case): Likewise.\n\n        * cp/Make-lang.in (cc1plus$(exeext)): Added c-semantics.o.\n\n\t* cp/Makefile.in (OBJS): Added ../c-semantics.o.\n\t(OBJDEPS): Likewise.\n\n\t* cp/cp-tree.h (TREE_LANG_FLAG_?): Moved common documentation to\n\t../c-common.h.\n\t(struct stmt_tree): Added comment.\n\t(current_function_name_declared): Removed.\n\t(stmts_are_full_exprs_p): Likewise.\n\t(genrtl_do_pushlevel): Likewise.\n\t(genrtl_clear_out_block): Likewise.\n\t(COMPOUND_STMT_NO_SCOPE): Moved to ../c-common.h.\n\t(DECL_ANON_UNION_ELEMS): Likewise.\n\t(emit_local_var): Likewise.\n\t(make_rtl_for_local_static): Likewise.\n\t(do_case): Likewise.\n\t(expand_stmt): Likewise.\n\t(genrtl_decl_cleanup): Likewise.\n\t(c_expand_asm_operands): Likewise.\n\t(c_expand_return): Likewise.\n\t(c_expand_start_case): Likewise.\n\n\t* cp/decl.c (make_rtl_for_local_static): Moved to c-semantics.c.\n\t(emit_local_var): Likewise.\n\t(initialize_local_var): Change reference to\n\tstmts_are_full_exprs_p to call to stmts_are_full_exprs_p().\n\tChange reference to stmts_are_full_exprs_p to\n\tcurrent_stmt_tree->stmts_are_full_exprs_p.\n\t(push_cp_function_context): Likewise.\n\n\t* cp/expect.c (expand_throw): Change reference to\n\tstmts_are_full_exprs_p.\n\n\t* cp/init.c (build_aggr_init): Change reference to\n\tstmts_are_full_exprs_p.\n\t(build_vec_init): Likewise.\n\n\t* cp/optimize.c (maybe_clone_body): Change reference to\n\tcurrent_function_name_declared to\n\tcp_function_chain->name_declared.\n\n\t* cp/pt.c (instantiate_decl): Change reference to\n\tcurrent_function_name_declared to\n\tcp_function_chain->name_declared.\n\n\t* cp/semantics.c (expand_cond): Moved declaration to c-common.h.\n\t(genrtl_do_pushlevel): Moved to c-semantics.c.\n\t(genrtl_clear_out_block): Likewise.\n\t(genrtl_goto_stmt): Likewise.\n\t(genrtl_expr_stmt): Likewise.\n\t(genrtl_decl_stmt): Likewise.\n\t(gerntl_if_stmt): Likewise.\n\t(genrtl_while_stmt): Likewise.\n\t(genrtl_do_stmt): Likewise.\n\t(genrtl_return_stmt): Likewise.\n\t(genrtl_for_stmt): Likewise.\n\t(genrtl_break_stmt): Likewise.\n\t(genrtl_continue_stmt): Likewise.\n\t(genrtl_scope_stmt): Likewise.\n\t(genrtl_switch_stmt): Likewise.\n\t(genrtl_case_label): Likewise.\n\t(genrtl_begin_compound_stmt): Likewise.\n\t(genrtl_finish_compound_stmt): Likewise.\n\t(genrtl_compound_stmt): Likewise.\n\t(genrtl_asm_stmt): Likewise.\n\t(genrtl_decl_cleanup): Likewise.\n\t(expand_cond): Likewise.\n\t(expand_stmt): Renamed to ...\n\t(lang_expand_stmt): ... this.\n\t(lang_expand_expr_stmt): Initialize.\n\t(set_current_function_name_declared): Likewise.\n\t(stmts_are_full_exprs_p): Likewise.\n\t(current_function_name_declared): Likewise.\n\t(anon_aggr_type_p): Likewise.\n\t(do_poplevel): Change reference to\n\tstmts_are_full_exprs_p to call to stmts_are_full_exprs_p().\n\tChange reference to stmts_are_full_exprs_p to\n\tcurrent_stmt_tree->stmts_are_full_exprs_p.\n\t(add_tree): Likewise.\n\t(finish_expr_stmt): Likewise.\n\t(prep_stmt): Likewise.\n\t(lang_expand_stmt): Likewise.\n\t(begin_compound_stmt): Change reference to\n\tcurrent_function_name_declared to\n\tcp_function_chain->name_declared and call to\n\tcurrent_function_name_declared().\n\t(setup_vtbl_ptr): Likewise.\n\t(genrtl_do_poplevel): Removed.\n\nFrom-SVN: r34827", "tree": {"sha": "322133cfcfd4ce1672bbd64e4e165811a77d8828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322133cfcfd4ce1672bbd64e4e165811a77d8828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/comments", "author": null, "committer": null, "parents": [{"sha": "d6f46e4177b1d39d36f5906e67939941c009d995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f46e4177b1d39d36f5906e67939941c009d995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f46e4177b1d39d36f5906e67939941c009d995"}], "stats": {"total": 1556, "additions": 916, "deletions": 640}, "files": [{"sha": "0e823eb8d6ae5ed3d378a2aeec41836073f4aa0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -1,3 +1,89 @@\n+2000-07-01  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+\t* Makefile.in (C_AND_OBJC_OBJS): Added c-semantics.o.\n+\t(c-semantics.o): New target.\n+\t\n+\t* c-common.h (TREE_LANG_FLAG_?): Added documentation.\n+\t(genrtl_do_pushlevel): Moved from cp/cp-tree.h.\n+\t(genrtl_clear_out_block): Likewise.\n+\t(genrtl_goto_stmt): Likewise.\n+\t(genrtl_expr_stmt): Likewise.\n+\t(genrtl_decl_stmt): Likewise.\n+\t(genrtl_if_stmt): Likewise.\n+\t(genrtl_while_stmt): Likewise.\n+\t(genrtl_do_stmt): Likewise.\n+\t(genrtl_return_stmt): Likewise.\n+\t(genrtl_for_stmt): Likewise.\n+\t(genrtl_break_stmt): Likewise.\n+\t(genrtl_continue_stmt): Likewise.\n+\t(genrtl_scope_stmt): Likewise.\n+\t(genrtl_switch_stmt): Likewise.\n+\t(genrtl_case_label): Likewise.\n+\t(genrtl_begin_compound_stmt): Likewise.\n+\t(gerntl_finish_compound_stmt): Likewise.\n+\t(genrtl_compound_stmt): Likewise.\n+\t(genrtl_asm_stmt): Likewise.\n+\t(genrtl_decl_cleanup): Likewise.\n+\t(DECL_ANON_UNION_ELEMS): Likewise.\n+\t(emit_local_var): Likewise.\n+\t(make_rtl_for_local_static): Likewise.\n+\t(expand_cond): Likewise.\n+\t(expand_stmt): Likewise.\n+\t(c_expand_return): Likewise.\n+\t(c_expand_start_case): Likewise.\n+\t(do_case): Likewise.\n+\t(COMPOUND_STMT_NO_SCOPE): Likewise.\n+\t(c_expand_asm_operands): Likewise.\n+\t(NEW_FOR_SCOPE_P): New macro.\n+\t(expand_expr_stmt_fn): New type.\n+\n+\t(set_current_function_name_declared): Likewise.\n+\t(current_function_name_declared): Likewise.\n+\t(lang_expand_stmt): Likewise.\n+\t(stmts_are_full_exprs_p): Likewise.\n+\t(anon_aggr_type_p): Likewise.\n+\t(lang_expand_expr_stmt): Likewise.\n+\t(build_case_label): Likewise.\n+\t\n+\t* c-decl.c (lang_expand_expr_stmt): Initialize.\n+\t(stmts_are_full_exprs_p): Define.\n+\t(current_function_name_declared): Likewise.\n+\t(do_case): Likewise.\n+\t(lang_expand_stmt): Likewise.\n+\t(set_current_function_name_declared): Likewise.\n+\t(anon_aggr_type_p): Likewise.\n+\t(build_case_label): Likewise.\n+\t\n+\t* c-semantics.c: New file.\n+\t(expand_cond): Moved from cp/semantics.c.\n+\t(genrtl_do_pushlevel): Likewise.\n+\t(genrtl_clear_out_block): Likewise.\n+\t(genrtl_goto_stmt): Likewise.\n+\t(genrtl_expr_stmt): Likewise.\n+\t(genrtl_decl_stmt): Likewise.\n+\t(genrtl_if_stmt): Likewise.\n+\t(genrtl_while_stmt): Likewise.\n+\t(genrtl_do_stmt): Likewise.\n+\t(genrtl_return_stmt): Likewise.\n+\t(genrtl_for_stmt): Likewise.\n+\t(genrtl_break_stmt): Likewise.\n+\t(genrtl_continue_stmt): Likewise.\n+\t(genrtl_scope_stmt): Likewise.\n+\t(genrtl_switch_stmt): Likewise.\n+\t(genrtl_case_label): Likewise.\n+\t(genrtl_begin_compound_stmt): Likewise.\n+\t(genrtl_finish_compound_stmt): Likewise.\n+\t(genrtl_compound_stmt): Likewise.\n+\t(genrtl_asm_stmt): Likewise.\n+\t(genrtl_decl_cleanup): Likewise.\n+\t(make_rtl_for_local_static): Moved from cp/decl.c.\n+\t(emit_local_var): Likewise.\n+\t(expand_stmt): Define.\n+\n+\t* c-tree.h: (c_expand_asm_operands): Moved to c-common.h.\n+\t(c_expand_return): Likewise.\n+\t(c_expand_start_case): Likewise.\n+\t\t\n 2000-07-01  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.c (symbolic_operand): Reject CONST expressions"}, {"sha": "a18c76b713b52e392a7a91472f28e1bbcafb95da", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -675,7 +675,7 @@ LANG_FLAGS_TO_PASS = $(SUBDIR_FLAGS_TO_PASS) \\\n \n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o \\\n-  c-aux-info.o c-common.o c-iterate.o @extra_c_objs@\n+  c-aux-info.o c-common.o c-iterate.o c-semantics.o @extra_c_objs@\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n@@ -1158,6 +1158,10 @@ c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) \\\n \tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H)\n \n+c-semantics.o : c-semantics.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n+\tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n+\t$(EXPR_H)\n+\n # Language-independent files.\n \n DRIVER_DEFINES = \\"}, {"sha": "53bbfba2e3f3a3096093fe2dadf4e3ebf5eae561", "filename": "gcc/c-common.h", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -19,6 +19,20 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* Usage of TREE_LANG_FLAG_?:\n+   0: COMPOUND_STMT_NO_SCOPE (in COMPOUND_STMT).\n+      TREE_NEGATED_INT (in INTEGER_CST).\n+      IDENTIFIER_MARKED (used by search routines).\n+      SCOPE_BEGIN_P (in SCOPE_STMT)\n+      DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n+      NEW_FOR_SCOPE_P (in FOR_STMT)\n+   1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n+      STMT_IS_FULL_EXPR_P (in _STMT)\n+   2: STMT_LINENO_FOR_FN_P (in _STMT)\n+   3: SCOPE_NO_CLEANUPS_P (in SCOPE_STMT)\n+   4: SCOPE_PARTIAL_P (in SCOPE_STMT)\n+*/\n+\n /* Reserved identifiers.  */\n \n enum rid\n@@ -262,7 +276,6 @@ extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n extern int self_promoting_args_p\t\tPARAMS ((tree));\n extern tree simple_type_promotes_to\t\tPARAMS ((tree));\n \n-\f\n /* These macros provide convenient access to the various _STMT nodes\n    created when parsing template declarations.  */\n \n@@ -392,6 +405,9 @@ extern tree simple_type_promotes_to\t\tPARAMS ((tree));\n #define STMT_LINENO_FOR_FN_P(NODE) \t\t\\\n   (TREE_LANG_FLAG_2 ((NODE)))\n \n+/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n+   initialization variables. */\n+#define NEW_FOR_SCOPE_P(NODE) (TREE_LANG_FLAG_0 (NODE)) \n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n \n@@ -404,7 +420,52 @@ enum c_tree_code {\n #undef DEFTREECODE\n \n extern void add_c_tree_codes\t\t        PARAMS ((void));\n-\f\n+extern void genrtl_do_pushlevel                 PARAMS ((void));\n+extern void genrtl_clear_out_block              PARAMS ((void));\n+extern void genrtl_goto_stmt                    PARAMS ((tree));\n+extern void genrtl_expr_stmt                    PARAMS ((tree));\n+extern void genrtl_decl_stmt                    PARAMS ((tree));\n+extern void genrtl_if_stmt                      PARAMS ((tree));\n+extern void genrtl_while_stmt                   PARAMS ((tree));\n+extern void genrtl_do_stmt                      PARAMS ((tree));\n+extern void genrtl_return_stmt                  PARAMS ((tree));\n+extern void genrtl_for_stmt                     PARAMS ((tree));\n+extern void genrtl_break_stmt                   PARAMS ((void));\n+extern void genrtl_continue_stmt                PARAMS ((void));\n+extern void genrtl_scope_stmt                   PARAMS ((tree));\n+extern void genrtl_switch_stmt                  PARAMS ((tree));\n+extern void genrtl_case_label                   PARAMS ((tree, tree));\n+extern tree genrtl_begin_compound_stmt          PARAMS ((int));\n+extern tree genrtl_finish_compound_stmt         PARAMS ((int));\n+extern tree genrtl_compound_stmt                PARAMS ((tree));\n+extern void genrtl_asm_stmt                     PARAMS ((tree, tree,\n+\t\t\t\t\t\t\t tree, tree,\n+\t\t\t\t\t\t\t tree));\n+extern void genrtl_decl_cleanup                 PARAMS ((tree, tree));\n+extern int stmts_are_full_exprs_p               PARAMS ((void));\n+typedef void (*expand_expr_stmt_fn)             PARAMS ((tree));\n+extern expand_expr_stmt_fn lang_expand_expr_stmt;\n+extern int anon_aggr_type_p                     PARAMS ((tree));\n+\n+/* For a VAR_DECL that is an anonymous union, these are the various\n+   sub-variables that make up the anonymous union.  */\n+#define DECL_ANON_UNION_ELEMS(NODE) DECL_ARGUMENTS ((NODE))\n+\n+extern void emit_local_var                      PARAMS ((tree));\n+extern void make_rtl_for_local_static           PARAMS ((tree));\n+extern tree expand_cond                         PARAMS ((tree));\n+extern tree expand_stmt                         PARAMS ((tree));\n+extern tree lang_expand_stmt                    PARAMS ((tree));\n+extern void c_expand_return\t\t\tPARAMS ((tree));\n+extern tree c_expand_start_case\t\t\tPARAMS ((tree));\n+extern void do_case\t\t\t\tPARAMS ((tree, tree));\n+extern tree build_case_label                    PARAMS ((tree, tree));\n+\n+#define COMPOUND_STMT_NO_SCOPE(NODE)\tTREE_LANG_FLAG_0 (NODE)\n+\n+extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int, const char *, int));\n+extern int current_function_name_declared       PARAMS ((void));\n+extern void set_current_function_name_declared  PARAMS ((int));\n \n /* These functions must be defined by each front-end which implements\n    a variant of the C language.  They are used in c-common.c.  */\n@@ -420,4 +481,3 @@ extern tree default_conversion                  PARAMS ((tree));\n    Given two compatible ANSI C types, returns the merged type.  */\n \n extern tree common_type                         PARAMS ((tree, tree));\n-"}, {"sha": "8319f45e8812247a55987c234f713f43a03cf6e7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -455,6 +455,10 @@ int warn_float_equal = 0;\n \n int warn_multichar = 1;\n \n+/* Wrapper since C and C++ expand_expr_stmt are different. */\n+\n+expand_expr_stmt_fn lang_expand_expr_stmt = c_expand_expr_stmt;\n+\n /* The variant of the C language being processed.  */\n \n c_language_kind c_language = clk_c;\n@@ -6793,3 +6797,69 @@ lang_mark_tree (t)\n   else if (TYPE_P (t) && TYPE_LANG_SPECIFIC (t))\n     ggc_mark (TYPE_LANG_SPECIFIC (t));\n }\n+\n+/* The functions below are required for functionality of doing\n+   function at once processing in the C front end. Currently these\n+   functions are not called from anywhere in the C front end, but as\n+   these changes continue, that will change. */\n+\n+/* Returns non-zero if the current statement is a full expression,\n+   i.e. temporaries created during that statement should be destroyed\n+   at the end of the statement.  */\n+\n+int\n+stmts_are_full_exprs_p ()\n+{\n+  return 0;\n+}\n+\n+/* Nonzero if TYPE is an anonymous union or struct type.  Always 0 in\n+   C. */\n+\n+int \n+anon_aggr_type_p (node)\n+     tree node;\n+{\n+  return 0;\n+}\n+\n+/* One if we have already declared __FUNCTION__ (and related\n+   variables) in the current function.  Two if we are in the process\n+   of doing so.  */\n+\n+int\n+current_function_name_declared ()\n+{\n+  abort ();\n+  return 0;\n+}\n+\n+/* Code to generate the RTL for a case label in C. */\n+\n+void\n+do_case (low_value, high_value)\n+     tree low_value;\n+     tree high_value;\n+{\n+  abort ();\n+}\n+\n+/* Language specific handler of tree nodes used when generating RTL\n+   from a tree. */\n+\n+tree\n+lang_expand_stmt (t)\n+     tree t;\n+{\n+  abort ();\n+  return NULL_TREE;\n+}\n+\n+/* Accessor to set the 'current_function_name_declared' flag. */\n+\n+void\n+set_current_function_name_declared (i)\n+     int i;\n+{\n+  abort ();\n+}"}, {"sha": "42cdf08eb47e5449f35786b7e7363bb027c916ff", "filename": "gcc/c-semantics.c", "status": "added", "additions": 491, "deletions": 0, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -0,0 +1,491 @@\n+/* This file contains the definitions and documentation for the common\n+   tree codes used in the GNU C and C++ compilers (see c-common.def\n+   for the standard codes).  \n+   Copyright (C) 2000 Free Software Foundation, Inc.  Written by\n+   Benjamin Chelf (chelf@codesourcery.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"function.h\"\n+#include \"splay-tree.h\"\n+#include \"varray.h\"\n+#include \"c-common.h\"\n+#include \"except.h\"\n+#include \"toplev.h\"\n+#include \"flags.h\"\n+#include \"ggc.h\"\n+#include \"rtl.h\"\n+#include \"output.h\"\n+#include \"timevar.h\"\n+\n+/* Some statements, like for-statements or if-statements, require a\n+   condition.  This condition can be a declaration.  If T is such a\n+   declaration it is processed, and an expression appropriate to use\n+   as the condition is returned.  Otherwise, T itself is returned.  */\n+\n+tree\n+expand_cond (t)\n+     tree t;\n+{\n+  if (t && TREE_CODE (t) == TREE_LIST)\n+    {\n+      expand_stmt (TREE_PURPOSE (t));\n+      return TREE_VALUE (t);\n+    }\n+  else \n+    return t;\n+}\n+\n+/* Create RTL for the local static variable DECL.  */\n+\n+void\n+make_rtl_for_local_static (decl)\n+     tree decl;\n+{\n+  const char *asmspec = NULL;\n+\n+  /* If we inlined this variable, we could see it's declaration\n+     again.  */\n+  if (DECL_RTL (decl))\n+    return;\n+\n+  if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+    {\n+      /* The only way this situaton can occur is if the\n+\t user specified a name for this DECL using the\n+\t `attribute' syntax.  */\n+      asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+      DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n+    }\n+\n+  rest_of_decl_compilation (decl, asmspec, /*top_level=*/0, /*at_end=*/0);\n+}\n+\n+/* Let the back-end know about DECL.  */\n+\n+void\n+emit_local_var (decl)\n+     tree decl;\n+{\n+  /* Create RTL for this variable.  */\n+  if (!DECL_RTL (decl))\n+    {\n+      if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+\t/* The user must have specified an assembler name for this\n+\t   variable.  Set that up now.  */\n+\trest_of_decl_compilation\n+\t  (decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t   /*top_level=*/0, /*at_end=*/0);\n+      else\n+\texpand_decl (decl);\n+    }\n+\n+  /* Actually do the initialization.  */\n+  if (stmts_are_full_exprs_p ())\n+    expand_start_target_temps ();\n+\n+  expand_decl_init (decl);\n+\n+  if (stmts_are_full_exprs_p ())\n+    expand_end_target_temps ();\n+}\n+\n+/* Helper for generating the RTL at the beginning of a scope. */\n+\n+void\n+genrtl_do_pushlevel ()\n+{\n+  emit_line_note (input_filename, lineno);\n+  clear_last_expr ();\n+}\n+\n+/* Helper for generating the RTL. */\n+\n+void\n+genrtl_clear_out_block ()\n+{\n+  /* If COND wasn't a declaration, clear out the\n+     block we made for it and start a new one here so the\n+     optimization in expand_end_loop will work.  */\n+  if (getdecls () == NULL_TREE)\n+    genrtl_do_pushlevel ();\n+}\n+\n+/* Generate the RTL for DESTINATION, which is a GOTO_STMT. */\n+\n+void\n+genrtl_goto_stmt (destination)\n+     tree destination;\n+{\n+  if (TREE_CODE (destination) == IDENTIFIER_NODE)\n+    abort ();\n+  \n+  /* We warn about unused labels with -Wunused.  That means we have to\n+     mark the used labels as used.  */\n+  if (TREE_CODE (destination) == LABEL_DECL)\n+    TREE_USED (destination) = 1;\n+  \n+  emit_line_note (input_filename, lineno);\n+  \n+  if (TREE_CODE (destination) == LABEL_DECL)\n+    {\n+      label_rtx (destination);\n+      expand_goto (destination); \n+    }\n+  else\n+    expand_computed_goto (destination);\n+}\n+\n+/* Generate the RTL for EXPR, which is an EXPR_STMT. */\n+\n+void \n+genrtl_expr_stmt (expr)\n+     tree expr;\n+{\n+  if (expr != NULL_TREE)\n+    {\n+      emit_line_note (input_filename, lineno);\n+      \n+      if (stmts_are_full_exprs_p ())\n+\texpand_start_target_temps ();\n+      \n+      lang_expand_expr_stmt (expr);\n+      \n+      if (stmts_are_full_exprs_p ())\n+\texpand_end_target_temps ();\n+    }\n+}\n+\n+/* Generate the RTL for T, which is a DECL_STMT. */\n+\n+void\n+genrtl_decl_stmt (t)\n+     tree t;\n+{\n+  tree decl;\n+  emit_line_note (input_filename, lineno);\n+  decl = DECL_STMT_DECL (t);\n+  /* If this is a declaration for an automatic local\n+     variable, initialize it.  Note that we might also see a\n+     declaration for a namespace-scope object (declared with\n+     `extern').  We don't have to handle the initialization\n+     of those objects here; they can only be declarations,\n+     rather than definitions.  */\n+  if (TREE_CODE (decl) == VAR_DECL \n+      && !TREE_STATIC (decl)\n+      && !DECL_EXTERNAL (decl))\n+    {\n+      /* Let the back-end know about this variable.  */\n+      if (!anon_aggr_type_p (TREE_TYPE (decl)))\n+\temit_local_var (decl);\n+      else\n+\texpand_anon_union_decl (decl, NULL_TREE, \n+\t\t\t\tDECL_ANON_UNION_ELEMS (decl));\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+    {\n+      if (DECL_ARTIFICIAL (decl) && ! TREE_USED (decl))\n+\t/* Do not emit unused decls. This is not just an\n+\t   optimization. We really do not want to emit\n+\t   __PRETTY_FUNCTION__ etc, if they're never used.  */\n+\tDECL_IGNORED_P (decl) = 1;\n+      else\n+\tmake_rtl_for_local_static (decl);\n+    }\n+}\n+\n+/* Generate the RTL for T, which is an IF_STMT. */\n+\n+void\n+genrtl_if_stmt (t)\n+     tree t;\n+{\n+  tree cond;\n+  genrtl_do_pushlevel ();\n+  cond = expand_cond (IF_COND (t));\n+  emit_line_note (input_filename, lineno);\n+  expand_start_cond (cond, 0);\n+  if (THEN_CLAUSE (t))\n+    expand_stmt (THEN_CLAUSE (t));\n+  if (ELSE_CLAUSE (t))\n+    {\n+      expand_start_else ();\n+      expand_stmt (ELSE_CLAUSE (t));\n+    }\n+  expand_end_cond ();\n+}\n+\n+/* Generate the RTL for T, which is a WHILE_STMT. */\n+\n+void\n+genrtl_while_stmt (t)\n+     tree t;\n+{\n+  tree cond;\n+  emit_nop ();\n+  emit_line_note (input_filename, lineno);\n+  expand_start_loop (1); \n+  genrtl_do_pushlevel ();\n+\n+  cond = expand_cond (WHILE_COND (t));\n+  emit_line_note (input_filename, lineno);\n+  expand_exit_loop_if_false (0, cond);\n+  genrtl_clear_out_block ();\n+  \n+  expand_stmt (WHILE_BODY (t));\n+\n+  expand_end_loop ();\n+}\n+\n+/* Generate the RTL for T, which is a DO_STMT. */\n+\n+void\n+genrtl_do_stmt (t)\n+     tree t;\n+{\n+  tree cond;\n+  emit_nop ();\n+  emit_line_note (input_filename, lineno);\n+  expand_start_loop_continue_elsewhere (1);\n+\n+  expand_stmt (DO_BODY (t));\n+\n+  expand_loop_continue_here ();\n+\n+  cond = expand_cond (DO_COND (t));\n+  emit_line_note (input_filename, lineno);\n+  expand_exit_loop_if_false (0, cond);\n+  expand_end_loop ();\n+}\n+\n+/* Generate the RTL for EXPR, which is a RETURN_STMT. */\n+\n+void\n+genrtl_return_stmt (expr)\n+     tree expr;\n+{\n+  emit_line_note (input_filename, lineno);\n+  c_expand_return (expr);\n+}\n+\n+/* Generate the RTL for T, which is a FOR_STMT. */\n+\n+void\n+genrtl_for_stmt (t)\n+     tree t;\n+{\n+  tree tmp;\n+  tree cond;\n+  if (NEW_FOR_SCOPE_P (t))\n+    genrtl_do_pushlevel ();\n+\n+  expand_stmt (FOR_INIT_STMT (t));\n+\n+  emit_nop ();\n+  emit_line_note (input_filename, lineno);\n+  expand_start_loop_continue_elsewhere (1); \n+  genrtl_do_pushlevel ();\n+  cond = expand_cond (FOR_COND (t));\n+  emit_line_note (input_filename, lineno);\n+  if (cond)\n+    expand_exit_loop_if_false (0, cond);\n+  genrtl_clear_out_block ();\n+  tmp = FOR_EXPR (t);\n+\n+  expand_stmt (FOR_BODY (t));\n+\n+  emit_line_note (input_filename, lineno);\n+  expand_loop_continue_here ();\n+  if (tmp) \n+    genrtl_expr_stmt (tmp);\n+  expand_end_loop ();\n+}\n+\n+/* Generate the RTL for a BREAK_STMT. */\n+\n+void\n+genrtl_break_stmt ()\n+{\n+  emit_line_note (input_filename, lineno);\n+  if ( ! expand_exit_something ())\n+    error (\"break statement not within loop or switch\");\n+}\n+\n+/* Generate the RTL for a CONTINUE_STMT. */\n+\n+void\n+genrtl_continue_stmt ()\n+{\n+  emit_line_note (input_filename, lineno);\n+  if (! expand_continue_loop (0))\n+    error (\"continue statement not within a loop\");   \n+}\n+\n+/* Generate the RTL for T, which is a SCOPE_STMT. */\n+\n+void\n+genrtl_scope_stmt (t)\n+     tree t;\n+{\n+  if (!SCOPE_NO_CLEANUPS_P (t))\n+    {\n+      if (SCOPE_BEGIN_P (t))\n+\texpand_start_bindings_and_block (2 * SCOPE_NULLIFIED_P (t),\n+\t\t\t\t\t SCOPE_STMT_BLOCK (t));\n+      else if (SCOPE_END_P (t))\n+\texpand_end_bindings (NULL_TREE, !SCOPE_NULLIFIED_P (t), 0);\n+    }\n+  else if (!SCOPE_NULLIFIED_P (t))\n+    {\n+      rtx note = emit_note (NULL,\n+\t\t\t    (SCOPE_BEGIN_P (t) \n+\t\t\t     ? NOTE_INSN_BLOCK_BEG\n+\t\t\t     : NOTE_INSN_BLOCK_END));\n+      NOTE_BLOCK (note) = SCOPE_STMT_BLOCK (t);\n+    }\n+}\n+\n+/* Generate the RTL for T, which is a SWITCH_STMT. */\n+\n+void\n+genrtl_switch_stmt (t)\n+     tree t;\n+{\n+  tree cond;\n+  genrtl_do_pushlevel ();\n+ \n+  cond = expand_cond (SWITCH_COND (t));\n+  if (cond != error_mark_node)\n+    {\n+      emit_line_note (input_filename, lineno);\n+      c_expand_start_case (cond);\n+    }\n+  else\n+    /* The code is in error, but we don't want expand_end_case to\n+       crash. */\n+    c_expand_start_case (boolean_false_node);\n+\n+  expand_stmt (SWITCH_BODY (t));\n+\n+  expand_end_case (cond);\n+}\n+\n+/* Generate the RTL for a CASE_LABEL. */\n+\n+void \n+genrtl_case_label (low_value, high_value)\n+     tree low_value;\n+     tree high_value;\n+{\n+  do_case (low_value, high_value);\n+}\n+\n+/* Generate the RTL for the start of a COMPOUND_STMT. */\n+\n+tree \n+genrtl_begin_compound_stmt (has_no_scope)\n+     int has_no_scope;\n+{\n+  /* If this is the outermost block of the function, declare the\n+     variables __FUNCTION__, __PRETTY_FUNCTION__, and so forth.  */\n+  if (cfun\n+      && !current_function_name_declared () \n+      && !has_no_scope)\n+    {\n+      set_current_function_name_declared (1);\n+      declare_function_name ();\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Generate the RTL for the end of a COMPOUND_STMT. */\n+\n+tree genrtl_finish_compound_stmt (has_no_scope)\n+     int has_no_scope;\n+{\n+  return NULL_TREE;\n+}\n+\n+/* Generate the RTL for T, which is a COMPOUND_STMT. */\n+\n+tree \n+genrtl_compound_stmt (t)\n+    tree t;\n+{\n+  genrtl_begin_compound_stmt (COMPOUND_STMT_NO_SCOPE (t));\n+  expand_stmt (COMPOUND_BODY (t));\n+  return (genrtl_finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t)));\n+}\n+\n+/* Generate the RTL for an ASM_STMT. */\n+\n+void\n+genrtl_asm_stmt (cv_qualifier, string, output_operands,\n+\t\t input_operands, clobbers)\n+     tree cv_qualifier;\n+     tree string;\n+     tree output_operands;\n+     tree input_operands;\n+     tree clobbers;\n+{\n+  if (TREE_CHAIN (string))\n+    string = combine_strings (string);\n+\n+  if (cv_qualifier != NULL_TREE\n+      && cv_qualifier != ridpointers[(int) RID_VOLATILE])\n+    {\n+      warning (\"%s qualifier ignored on asm\",\n+\t       IDENTIFIER_POINTER (cv_qualifier));\n+      cv_qualifier = NULL_TREE;\n+    }\n+\n+  emit_line_note (input_filename, lineno);\n+  if (output_operands != NULL_TREE || input_operands != NULL_TREE\n+      || clobbers != NULL_TREE)\n+      c_expand_asm_operands (string, output_operands,\n+\t\t\t     input_operands, \n+\t\t\t     clobbers,\n+\t\t\t     cv_qualifier != NULL_TREE,\n+\t\t\t     input_filename, lineno);\n+  else\n+    expand_asm (string);\n+}\n+\n+/* Generate the RTL for a DECL_CLEANUP. */\n+\n+void \n+genrtl_decl_cleanup (decl, cleanup)\n+     tree decl;\n+     tree cleanup;\n+{\n+  if (!decl || (DECL_SIZE (decl) && TREE_TYPE (decl) != error_mark_node))\n+    expand_decl_cleanup (decl, cleanup);\n+}\n+\n+tree\n+expand_stmt (t)\n+     tree t;\n+{\n+  tree rval;\n+  rval = lang_expand_stmt (t);\n+  return rval;\n+}"}, {"sha": "fcf6112e524b7e8ac712c2cd589dadf634d7d2e7", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -263,11 +263,6 @@ extern tree pop_init_level\t\t\tPARAMS ((int));\n extern void set_init_index\t\t\tPARAMS ((tree, tree));\n extern void set_init_label\t\t\tPARAMS ((tree));\n extern void process_init_element\t\tPARAMS ((tree));\n-extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t\t tree, int,\n-\t\t\t\t\t\t\t const char *, int));\n-extern void c_expand_return\t\t\tPARAMS ((tree));\n-extern tree c_expand_start_case                 PARAMS ((tree));\n extern void pedwarn_c99\t\t\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n "}, {"sha": "60c9b8b316352fda135c803889da0bd7c4d5b141", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -1,3 +1,95 @@\n+2000-07-01  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+        * Make-lang.in (cc1plus$(exeext)): Added c-semantics.o.\n+\t\n+\t* Makefile.in (OBJS): Added ../c-semantics.o.\n+\t(OBJDEPS): Likewise.\n+\t\n+\t* cp-tree.h (TREE_LANG_FLAG_?): Moved common documentation to\n+\t../c-common.h.\n+\t(struct stmt_tree): Added comment. \n+\t(current_function_name_declared): Removed.\n+\t(stmts_are_full_exprs_p): Likewise.\n+\t(genrtl_do_pushlevel): Likewise.\n+\t(genrtl_clear_out_block): Likewise.\n+\t(COMPOUND_STMT_NO_SCOPE): Moved to ../c-common.h.\n+\t(DECL_ANON_UNION_ELEMS): Likewise.\n+\t(emit_local_var): Likewise.\n+\t(make_rtl_for_local_static): Likewise.\n+\t(do_case): Likewise.\n+\t(expand_stmt): Likewise.\n+\t(genrtl_decl_cleanup): Likewise.\n+\t(c_expand_asm_operands): Likewise.\n+\t(c_expand_return): Likewise.\n+\t(c_expand_start_case): Likewise.\n+\n+\t* decl.c (make_rtl_for_local_static): Moved to c-semantics.c.\n+\t(emit_local_var): Likewise.\n+\t(initialize_local_var): Change reference to\n+\tstmts_are_full_exprs_p to call to stmts_are_full_exprs_p().\n+\tChange reference to stmts_are_full_exprs_p to\n+\tcurrent_stmt_tree->stmts_are_full_exprs_p.\n+\t(push_cp_function_context): Likewise.\n+\n+\t* expect.c (expand_throw): Change reference to\n+\tstmts_are_full_exprs_p. \n+\n+\t* init.c (build_aggr_init): Change reference to\n+\tstmts_are_full_exprs_p. \n+\t(build_vec_init): Likewise.\n+\n+\t* optimize.c (maybe_clone_body): Change reference to\n+\tcurrent_function_name_declared to\n+\tcp_function_chain->name_declared.\n+\n+\t* pt.c (instantiate_decl): Change reference to\n+\tcurrent_function_name_declared to\n+\tcp_function_chain->name_declared.\n+\n+\t* semantics.c (expand_cond): Moved declaration to c-common.h.\n+\t(genrtl_do_pushlevel): Moved to c-semantics.c.\n+\t(genrtl_clear_out_block): Likewise.\n+\t(genrtl_goto_stmt): Likewise.\n+\t(genrtl_expr_stmt): Likewise.\n+\t(genrtl_decl_stmt): Likewise.\n+\t(gerntl_if_stmt): Likewise.\n+\t(genrtl_while_stmt): Likewise.\n+\t(genrtl_do_stmt): Likewise.\n+\t(genrtl_return_stmt): Likewise.\n+\t(genrtl_for_stmt): Likewise.\n+\t(genrtl_break_stmt): Likewise.\n+\t(genrtl_continue_stmt): Likewise.\n+\t(genrtl_scope_stmt): Likewise.\n+\t(genrtl_switch_stmt): Likewise.\n+\t(genrtl_case_label): Likewise.\n+\t(genrtl_begin_compound_stmt): Likewise.\n+\t(genrtl_finish_compound_stmt): Likewise.\n+\t(genrtl_compound_stmt): Likewise.\n+\t(genrtl_asm_stmt): Likewise.\n+\t(genrtl_decl_cleanup): Likewise.\n+\t(expand_cond): Likewise.\n+\t(expand_stmt): Renamed to ...\n+\t(lang_expand_stmt): ... this. \n+\t(lang_expand_expr_stmt): Initialize.\n+\t(set_current_function_name_declared): Likewise.\n+\t(stmts_are_full_exprs_p): Likewise.\n+\t(current_function_name_declared): Likewise.\n+\t(anon_aggr_type_p): Likewise.\n+\t(do_poplevel): Change reference to\n+\tstmts_are_full_exprs_p to call to stmts_are_full_exprs_p().\n+\tChange reference to stmts_are_full_exprs_p to\n+\tcurrent_stmt_tree->stmts_are_full_exprs_p.\n+\t(add_tree): Likewise.\n+\t(finish_expr_stmt): Likewise.\n+\t(prep_stmt): Likewise.\n+\t(lang_expand_stmt): Likewise.\n+\t(begin_compound_stmt): Change reference to\n+\tcurrent_function_name_declared to\n+\tcp_function_chain->name_declared and call to\n+\tcurrent_function_name_declared().\n+\t(setup_vtbl_ptr): Likewise.\n+\t(genrtl_do_poplevel): Removed.\n+\t\n 2000-06-30  Jason Merrill  <jason@redhat.com>\n \n \t* init.c (init_init_processing): Go back to aligning like\n@@ -18,6 +110,20 @@\n \t* cp-tree.h: Declare flag_check_new here.\n \t* init.c: Not here.\n \n+2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* mangle.c (find_substitution): Use same_type_p.\n+\t(write_encoding): Don't check for substitutions.\n+\n+2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parse.y (expr_no_comma_rangle): New non-terminal.\n+\t(template_parm): Use it for default parameter case.\n+\t(template_arg): Use it.\n+\t(expr_no_commas): Remove commented out undefined extensions.\n+\t* Makefile.in (CONFLICTS): Adjust to 33 s/r & 48 r/r.\n+\t* parse.h, parse.c: Rebuilt.\n+\n 2000-06-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* semantics.c (genrtl_asm_stmt): Don't decay input operands here.\n@@ -121,7 +227,6 @@\n \t(overloaded_template_name): Adjust.\n \t* semantics.c (finish_template_template_parm): Adjust.\n \n->>>>>>> 1.1867\n 2000-06-28  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (CLEAR_BINFO_NEW_VTABLE_MARKED): Remove.\n@@ -346,7 +451,7 @@\n \t* mangle.c (write_method_parms): Use direct comparison for end\n \tof parmlist.\n \n-2000-06-19  Benjamin Chelf  <chelf@cabriolet.stanford.edu>\n+2000-06-19  Benjamin Chelf  <chelf@codesourcery.com>\n \n \t* cp-tree.h (genrtl_try_block): Declare function.\n \t(genrtl_handler): Likewise."}, {"sha": "8e483a57154c8f99f72a0bc22e62f7dfecacfd7a", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -126,7 +126,7 @@ CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/class.c $(srcdir)/cp/cp-tree.def \\\n  $(srcdir)/cp/typeck.c $(srcdir)/cp/typeck2.c $(srcdir)/cp/xref.c\n \n cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o \\\n-        c-pragma.o $(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def \\\n+\tc-pragma.o c-semantics.o $(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def \\\n \t$(srcdir)/c-common.def $(srcdir)/cp/gxx.gperf $(srcdir)/cp/cfns.gperf hash.o \\\n \t$(srcdir)/cp/operators.def\n \tcd cp; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)"}, {"sha": "df95a2d68aed0cc82a8504114efcaf3a78462c4e", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -179,8 +179,8 @@ CXX_OBJS = call.o decl.o errfn.o expr.o pt.o typeck2.o \\\n  repo.o dump.o optimize.o mangle.o @extra_cxx_objs@\n \n # Language-independent object files.\n-OBJS = `cat ../stamp-objlist` ../c-common.o ../c-pragma.o\n-OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o\n+OBJS = `cat ../stamp-objlist` ../c-common.o ../c-pragma.o ../c-semantics.o\n+OBJDEPS = ../stamp-objlist ../c-common.o ../c-pragma.o ../c-semantics.o\n \n compiler: ../cc1plus$(exeext)\n ../cc1plus$(exeext): $(P) $(OBJDEPS) $(CXX_OBJS) $(LIBDEPS)"}, {"sha": "43567925d21f3032faa7516fe564bb8abfd1d61e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 14, "deletions": 49, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -31,38 +31,30 @@ Boston, MA 02111-1307, USA.  */\n \n /* Usage of TREE_LANG_FLAG_?:\n    0: BINFO_MARKED (BINFO nodes).\n-      COMPOUND_STMT_NO_SCOPE (in COMPOUND_STMT).\n       NEW_EXPR_USE_GLOBAL (in NEW_EXPR).\n       DELETE_EXPR_USE_GLOBAL (in DELETE_EXPR).\n       LOOKUP_EXPR_GLOBAL (in LOOKUP_EXPR).\n-      TREE_NEGATED_INT (in INTEGER_CST).\n       TREE_INDIRECT_USING (in NAMESPACE_DECL).\n-      IDENTIFIER_MARKED (used by search routines).\n       LOCAL_BINDING_P (in CPLUS_BINDING)\n       ICS_USER_FLAG (in _CONV)\n       CLEANUP_P (in TRY_BLOCK)\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n-      SCOPE_BEGIN_P (in SCOPE_STMT)\n       CTOR_BEGIN_P (in CTOR_STMT)\n-      DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       BV_USE_VCALL_INDEX_P (in the BINFO_VIRTUALS TREE_LIST)\n    1: IDENTIFIER_VIRTUAL_P.\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n       DELETE_EXPR_USE_VEC (in DELETE_EXPR).\n       (TREE_CALLS_NEW) (in _EXPR or _REF) (commented-out).\n       TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (in _TYPE).\n-      C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       INHERITED_VALUE_BINDING_P (in CPLUS_BINDING)\n       BASELINK_P (in TREE_LIST)\n       ICS_ELLIPSIS_FLAG (in _CONV)\n-      STMT_IS_FULL_EXPR_P (in _STMT)\n       BINFO_ACCESS (in BINFO)\n       BV_GENERATE_THUNK_WITH_VTABLE_P (in TREE_LIST)\n    2: IDENTIFIER_OPNAME_P.\n       TYPE_POLYMORHPIC_P (in _TYPE)\n       ICS_THIS_FLAG (in _CONV)\n-      STMT_LINENO_FOR_FN_P (in _STMT)\n       BINDING_HAS_LEVEL_P (in CPLUS_BINDING)\n       BINFO_OVERRIDE_ALONG_VIRTUAL_PATH_P (in BINFO)\n    3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n@@ -71,13 +63,11 @@ Boston, MA 02111-1307, USA.  */\n       (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n-      SCOPE_NO_CLEANUPS_P (in SCOPE_STMT)\n       IDENTIFIER_CTOR_OR_DTOR_P (in IDENTIFIER_NODE)\n    4: BINFO_NEW_VTABLE_MARKED.\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n           or FIELD_DECL).\n       NEED_TEMPORARY_P (in REF_BIND, BASE_CONV)\n-      SCOPE_PARTIAL_P (in SCOPE_STMT)\n       IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n    5: BINFO_PRIMARY_MARKED_P (in BINFO)\n    6: BINFO_VBASE_PRIMARY_P (in BINFO)\n@@ -791,6 +781,17 @@ extern tree cp_global_trees[CPTI_MAX];\n struct stmt_tree {\n   tree x_last_stmt;\n   tree x_last_expr_type;\n+/* Non-zero if we should treat statements as full expressions.  In\n+   particular, this variable is no-zero if at the end of a statement\n+   we should destroy any temporaries created during that statement.\n+   Similarly, if, at the end of a block, we should destroy any local\n+   variables in this block.  Normally, this variable is non-zero,\n+   since those are the normal semantics of C++.\n+\n+   However, in order to represent aggregate initialization code as\n+   tree structure, we use statement-expressions.  The statements\n+   within the statement expression should not result in cleanups being\n+   run until the entire enclosing statement is complete.  */\n   int stmts_are_full_exprs_p; \n };\n \n@@ -991,13 +992,6 @@ struct language_function\n #define current_function_parms_stored \\\n   cp_function_chain->parms_stored\n \n-/* One if we have already declared __FUNCTION__ (and related\n-   variables) in the current function.  Two if we are in the process\n-   of doing so.  */\n-\n-#define current_function_name_declared \\\n-  cp_function_chain->name_declared\n-\n /* Nonzero if we have already generated code to initialize virtual\n    function tables in this function.  */\n \n@@ -1014,21 +1008,6 @@ struct language_function\n \n #define doing_semantic_analysis_p() (!expanding_p)\n \n-/* Non-zero if we should treat statements as full expressions.  In\n-   particular, this variable is no-zero if at the end of a statement\n-   we should destroy any temporaries created during that statement.\n-   Similarly, if, at the end of a block, we should destroy any local\n-   variables in this block.  Normally, this variable is non-zero,\n-   since those are the normal semantics of C++.\n-\n-   However, in order to represent aggregate initialization code as\n-   tree structure, we use statement-expressions.  The statements\n-   within the statement expression should not result in cleanups being\n-   run until the entire enclosing statement is complete.  */\n-\n-#define stmts_are_full_exprs_p \\\n-  current_stmt_tree->stmts_are_full_exprs_p\n-\n #define in_function_try_handler cp_function_chain->in_function_try_handler\n \n extern tree current_function_return_value;\n@@ -2472,7 +2451,6 @@ struct lang_decl\n #define DECL_SAVED_FUNCTION_DATA(NODE) \\\n   (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (NODE))->u.saved_language_function)\n \n-#define COMPOUND_STMT_NO_SCOPE(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define NEW_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define DELETE_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define DELETE_EXPR_USE_VEC(NODE)\tTREE_LANG_FLAG_1 (NODE)\n@@ -2825,10 +2803,6 @@ extern int flag_new_for_scope;\n #define ANON_UNION_TYPE_P(NODE) \\\n   (TREE_CODE (NODE) == UNION_TYPE && ANON_AGGR_TYPE_P (NODE))\n \n-/* For a VAR_DECL that is an anonymous union, these are the various\n-   sub-variables that make up the anonymous union.  */\n-#define DECL_ANON_UNION_ELEMS(NODE) DECL_ARGUMENTS ((NODE))\n-\n #define UNKNOWN_TYPE LANG_TYPE\n \n /* Define fields and accessors for nodes representing declared names.  */\n@@ -3919,6 +3893,8 @@ extern void pop_nested_namespace\t\tPARAMS ((tree));\n extern void maybe_push_to_top_level\t\tPARAMS ((int));\n extern void push_to_top_level\t\t\tPARAMS ((void));\n extern void pop_from_top_level\t\t\tPARAMS ((void));\n+extern void push_switch\t\t\t\tPARAMS ((void));\n+extern void pop_switch\t\t\t\tPARAMS ((void));\n extern tree identifier_type_value\t\tPARAMS ((tree));\n extern void set_identifier_type_value\t\tPARAMS ((tree, tree));\n extern void pop_everything\t\t\tPARAMS ((void));\n@@ -3942,8 +3918,6 @@ extern tree lookup_label\t\t\tPARAMS ((tree));\n extern tree declare_local_label                 PARAMS ((tree));\n extern tree define_label\t\t\tPARAMS ((const char *, int, tree));\n extern void check_goto\t\t\t\tPARAMS ((tree));\n-extern void push_switch\t\t\t\tPARAMS ((void));\n-extern void pop_switch\t\t\t\tPARAMS ((void));\n extern void define_case_label\t\t\tPARAMS ((void));\n extern tree getdecls\t\t\t\tPARAMS ((void));\n extern tree gettags\t\t\t\tPARAMS ((void));\n@@ -4038,9 +4012,7 @@ extern int wrapup_globals_for_namespace         PARAMS ((tree, void *));\n extern tree cp_namespace_decls                  PARAMS ((tree));\n extern tree create_implicit_typedef             PARAMS ((tree, tree));\n extern tree maybe_push_decl                     PARAMS ((tree));\n-extern void emit_local_var                      PARAMS ((tree));\n extern tree build_target_expr_with_type         PARAMS ((tree, tree));\n-extern void make_rtl_for_local_static           PARAMS ((tree));\n extern int local_variable_p                     PARAMS ((tree));\n extern int nonstatic_local_decl_p               PARAMS ((tree));\n extern tree declare_global_var                  PARAMS ((tree, tree));\n@@ -4154,7 +4126,6 @@ extern void check_handlers\t\t\tPARAMS ((tree));\n extern void init_cplus_expand\t\t\tPARAMS ((void));\n extern void fixup_result_decl\t\t\tPARAMS ((tree, struct rtx_def *));\n extern int extract_init\t\t\t\tPARAMS ((tree, tree));\n-extern void do_case\t\t\t\tPARAMS ((tree, tree));\n extern tree cplus_expand_constant               PARAMS ((tree));\n \n /* friend.c */\n@@ -4477,7 +4448,6 @@ extern tree finish_typeof\t\t\tPARAMS ((tree));\n extern void add_decl_stmt                       PARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n extern void finish_named_return_value           PARAMS ((tree, tree));\n-extern tree expand_stmt                         PARAMS ((tree));\n extern void expand_body                         PARAMS ((tree));\n extern void begin_stmt_tree                     PARAMS ((tree *));\n extern void finish_stmt_tree                    PARAMS ((tree *));\n@@ -4492,10 +4462,8 @@ extern void genrtl_handler                      PARAMS ((tree));\n extern void genrtl_catch_block                  PARAMS ((tree));\n extern void genrtl_ctor_stmt                    PARAMS ((tree));\n extern void genrtl_subobject                    PARAMS ((tree));\n-extern void genrtl_decl_cleanup                 PARAMS ((tree, tree));\n extern tree genrtl_do_poplevel                  PARAMS ((void));\n-extern void genrtl_do_pushlevel                 PARAMS ((void));\n-extern void genrtl_clear_out_block              PARAMS ((void));\n+extern void clear_out_block                     PARAMS ((void));\n extern void genrtl_goto_stmt                    PARAMS ((tree));\n extern void genrtl_expr_stmt                    PARAMS ((tree));\n extern void genrtl_decl_stmt                    PARAMS ((tree));\n@@ -4654,9 +4622,6 @@ extern tree build_x_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n extern tree build_modify_expr\t\t\tPARAMS ((tree, enum tree_code, tree));\n extern tree dubious_conversion_warnings         PARAMS ((tree, tree, const char *, tree, int));\n extern tree convert_for_initialization\t\tPARAMS ((tree, tree, tree, int, const char *, tree, int));\n-extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int, const char *, int));\n-extern void c_expand_return\t\t\tPARAMS ((tree));\n-extern tree c_expand_start_case\t\t\tPARAMS ((tree));\n extern int comp_ptr_ttypes\t\t\tPARAMS ((tree, tree));\n extern int ptr_reasonably_similar\t\tPARAMS ((tree, tree));\n extern tree build_ptrmemfunc\t\t\tPARAMS ((tree, tree, int));"}, {"sha": "9110b80d2cd434c0591ab5436d839cd250364111", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -7887,30 +7887,6 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n }\n \n-/* Create RTL for the local static variable DECL.  */\n-\n-void\n-make_rtl_for_local_static (decl)\n-     tree decl;\n-{\n-  const char *asmspec = NULL;\n-\n-  /* If we inlined this variable, we could see it's declaration\n-     again.  */\n-  if (DECL_RTL (decl))\n-    return;\n-\n-  if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n-    {\n-      /* The only way this situaton can occur is if the\n-\t user specified a name for this DECL using the\n-\t `attribute' syntax.  */\n-      asmspec = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      DECL_ASSEMBLER_NAME (decl) = DECL_NAME (decl);\n-    }\n-\n-  rest_of_decl_compilation (decl, asmspec, /*top_level=*/0, /*at_end=*/0);\n-}\n \n /* The old ARM scoping rules injected variables declared in the\n    initialization statement of a for-statement into the surrounding\n@@ -7997,13 +7973,13 @@ initialize_local_var (decl, init, flags)\n \n \t  emit_line_note (DECL_SOURCE_FILE (decl),\n \t\t\t  DECL_SOURCE_LINE (decl));\n-\t  saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p;\n-\t  stmts_are_full_exprs_p = 1;\n+\t  saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n+\t  current_stmt_tree->stmts_are_full_exprs_p = 1;\n \t  if (building_stmt_tree ())\n \t    finish_expr_stmt (build_aggr_init (decl, init, flags));\n \t  else\n \t    genrtl_expr_stmt (build_aggr_init (decl, init, flags));\n-\t  stmts_are_full_exprs_p = saved_stmts_are_full_exprs_p;\n+\t  current_stmt_tree->stmts_are_full_exprs_p = saved_stmts_are_full_exprs_p;\n \t}\n \n       /* Set this to 0 so we can tell whether an aggregate which was\n@@ -8056,39 +8032,7 @@ destroy_local_var (decl)\n     finish_decl_cleanup (decl, cleanup);\n }\n \n-/* Let the back-end know about DECL.  */\n \n-void\n-emit_local_var (decl)\n-     tree decl;\n-{\n-  /* Create RTL for this variable.  */\n-  if (DECL_RTL (decl))\n-    /* Only a RESULT_DECL should have non-NULL RTL when arriving here.\n-       All other local variables are assigned RTL in this function.  */\n-    my_friendly_assert (TREE_CODE (decl) == RESULT_DECL,\n-\t\t\t19990828);\n-  else\n-    {\n-      if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n-\t/* The user must have specified an assembler name for this\n-\t   variable.  Set that up now.  */\n-\trest_of_decl_compilation\n-\t  (decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n-\t   /*top_level=*/0, /*at_end=*/0);\n-      else\n-\texpand_decl (decl);\n-    }\n-\n-  /* Actually do the initialization.  */\n-  if (stmts_are_full_exprs_p)\n-    expand_start_target_temps ();\n-\n-  expand_decl_init (decl);\n-\n-  if (stmts_are_full_exprs_p)\n-    expand_end_target_temps ();\n-}\n \n /* Finish processing of a declaration;\n    install its line number and initial value.\n@@ -14966,7 +14910,7 @@ push_cp_function_context (f)\n \n   /* Whenever we start a new function, we destroy temporaries in the\n      usual way.  */\n-  stmts_are_full_exprs_p = 1;\n+  current_stmt_tree->stmts_are_full_exprs_p = 1;\n }\n \n /* Free the language-specific parts of F, now that we've finished"}, {"sha": "e8728592d31fc2f708dd12a9dd0973c81b918890", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -923,7 +923,7 @@ expand_throw (exp)\n \t     first.  Since there could be temps in the expression, we need\n \t     to handle that, too.  */\n \n-\t  my_friendly_assert (stmts_are_full_exprs_p == 1, 19990926);\n+\t  my_friendly_assert (stmts_are_full_exprs_p () == 1, 19990926);\n \n \t  /* Store the throw expression into a temp.  This can be less\n \t     efficient than storing it into the allocated space directly, but"}, {"sha": "b1c3af99587d16b61a105158e1ef34ff0653db64", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -1223,12 +1223,12 @@ build_aggr_init (exp, init, flags)\n \n   TREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n   begin_init_stmts (&stmt_expr, &compound_stmt);\n-  destroy_temps = stmts_are_full_exprs_p;\n-  stmts_are_full_exprs_p = 0;\n+  destroy_temps = stmts_are_full_exprs_p ();\n+  current_stmt_tree->stmts_are_full_exprs_p = 0;\n   expand_aggr_init_1 (TYPE_BINFO (type), exp, exp,\n \t\t      init, LOOKUP_NORMAL|flags);\n   stmt_expr = finish_init_stmts (stmt_expr, compound_stmt);\n-  stmts_are_full_exprs_p = destroy_temps;\n+  current_stmt_tree->stmts_are_full_exprs_p = destroy_temps;\n   TREE_TYPE (exp) = type;\n   TREE_READONLY (exp) = was_const;\n   TREE_THIS_VOLATILE (exp) = was_volatile;\n@@ -2850,8 +2850,8 @@ build_vec_init (decl, base, maxindex, init, from_array)\n      of blocks of memory.  */\n \n   begin_init_stmts (&stmt_expr, &compound_stmt);\n-  destroy_temps = stmts_are_full_exprs_p;\n-  stmts_are_full_exprs_p = 0;\n+  destroy_temps = stmts_are_full_exprs_p ();\n+  current_stmt_tree->stmts_are_full_exprs_p = 0;\n   rval = get_temp_regvar (ptype, \n \t\t\t  cp_convert (ptype, default_conversion (base)));\n   base = get_temp_regvar (ptype, rval);\n@@ -3013,9 +3013,9 @@ build_vec_init (decl, base, maxindex, init, from_array)\n \t}\n       else\n \t{\n-\t  stmts_are_full_exprs_p = 1;\n+\t  current_stmt_tree->stmts_are_full_exprs_p = 1;\n \t  finish_expr_stmt (elt_init);\n-\t  stmts_are_full_exprs_p = 0;\n+\t  current_stmt_tree->stmts_are_full_exprs_p = 0;\n \t}\n \n       finish_expr_stmt (build_modify_expr\n@@ -3065,7 +3065,7 @@ build_vec_init (decl, base, maxindex, init, from_array)\n   finish_expr_stmt (rval);\n \n   stmt_expr = finish_init_stmts (stmt_expr, compound_stmt);\n-  stmts_are_full_exprs_p = destroy_temps;\n+  current_stmt_tree->stmts_are_full_exprs_p = destroy_temps;\n   return stmt_expr;\n }\n "}, {"sha": "0234734c9d88a72b67409f1bd53bcf7b57dbeff6", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -989,7 +989,7 @@ maybe_clone_body (fn)\n       VARRAY_FREE (id.fns);\n \n       /* Now, expand this function into RTL, if appropriate.  */\n-      current_function_name_declared = 1;\n+      cp_function_chain->name_declared = 1;\n       expand_body (finish_function (0));\n       pop_from_top_level ();\n     }"}, {"sha": "0eec4531f62a95ccd16a86b86f8b224f3a2c8716", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -9712,7 +9712,7 @@ instantiate_decl (d, defer_ok)\n \n       /* We already set up __FUNCTION__, etc., so we don't want to do\n \t it again now.  */\n-      current_function_name_declared = 1;\n+      cp_function_chain->name_declared = 1;\n \n       /* Substitute into the body of the function.  */\n       tsubst_expr (DECL_SAVED_TREE (code_pattern), args,"}, {"sha": "c14909d5fd3b0c8a441cb0dc7777c069bb7446d4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 62, "deletions": 506, "changes": 568, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2c5f623b0eec0fbac3eda4d020cccbca01d7afc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f2c5f623b0eec0fbac3eda4d020cccbca01d7afc", "patch": "@@ -46,7 +46,6 @@\n    parsing into this file; that will make implementing the new parser\n    much easier since it will be able to make use of these routines.  */\n \n-static tree expand_cond PARAMS ((tree));\n static tree maybe_convert_cond PARAMS ((tree));\n static tree simplify_aggr_init_exprs_r PARAMS ((tree *, int *, void *));\n static void deferred_type_access_control PARAMS ((void));\n@@ -88,55 +87,63 @@ static void emit_associated_thunks PARAMS ((tree));\n       substmt = cond;\t\t\t\t\t\\\n   } while (0)\n \n-/* Finish a scope.  */\n+/* Wrapper since C and C++ expand_expr_stmt are different. */\n \n-tree\n-do_poplevel ()\n+expand_expr_stmt_fn lang_expand_expr_stmt = cplus_expand_expr_stmt;\n+\n+/* Wrapper function instead of #define for use with c-common code. */\n+\n+void\n+set_current_function_name_declared (i)\n+     int i;\n {\n-  tree block = NULL_TREE;\n+  cp_function_chain->name_declared = i;\n+}\n \n-  if (stmts_are_full_exprs_p)\n-    {\n-      tree scope_stmts;\n+/* Returns non-zero if the current statement is a full expression,\n+   i.e. temporaries created during that statement should be destroyed\n+   at the end of the statement.  */\n \n-      if (!processing_template_decl)\n-\tscope_stmts = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n+int\n+stmts_are_full_exprs_p ()\n+{\n+  return current_stmt_tree->stmts_are_full_exprs_p;\n+}\n \n-      block = poplevel (kept_level_p (), 1, 0);\n-      if (block && !processing_template_decl)\n-\t{\n-\t  SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmts)) = block;\n-\t  SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmts)) = block;\n-\t}\n-    }\n+/* One if we have already declared __FUNCTION__ (and related\n+   variables) in the current function.  Two if we are in the process\n+   of doing so.  */\n \n-  return block;\n+int\n+current_function_name_declared ()\n+{\n+  return cp_function_chain->name_declared;\n }\n \n-/* Begin a new scope.  */ \n+/* Nonzero if TYPE is an anonymous union or struct type.  We have to use a\n+   flag for this because \"A union for which objects or pointers are\n+   declared is not an anonymous union\" [class.union].  */\n \n-void\n-do_pushlevel ()\n+int\n+anon_aggr_type_p (node)\n+     tree node;\n {\n-  if (stmts_are_full_exprs_p)\n-    {\n-      pushlevel (0);\n-      if (!processing_template_decl)\n-\tadd_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n-    }\n+  return (CLASS_TYPE_P (node) && TYPE_LANG_SPECIFIC(node)->anon_aggr);\n }\n \n-/* Helper for generating the RTL at the end of a scope. */\n+/* Finish a scope.  */\n \n tree\n-genrtl_do_poplevel ()\n+do_poplevel ()\n {\n   tree block = NULL_TREE;\n \n-  if (stmts_are_full_exprs_p)\n+  if (stmts_are_full_exprs_p ())\n     {\n       tree scope_stmts;\n-      scope_stmts = NULL_TREE;\n+\n+      if (!processing_template_decl)\n+\tscope_stmts = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n \n       block = poplevel (kept_level_p (), 1, 0);\n       if (block && !processing_template_decl)\n@@ -149,34 +156,16 @@ genrtl_do_poplevel ()\n   return block;\n }\n \n-/* Helper for generating the RTL at the beginning of a scope. */\n-\n-void\n-genrtl_do_pushlevel ()\n-{\n-  emit_line_note (input_filename, lineno);\n-  clear_last_expr ();\n-\n-  if (stmts_are_full_exprs_p)\n-    {\n-      pushlevel (0); // Try to get rid of me.\n-      if (!cfun->x_whole_function_mode_p)\n-\tmy_friendly_abort (19991129);\n-    }\n-}\n-\n-/* Helper for generating the RTL. */\n+/* Begin a new scope.  */ \n \n void\n-genrtl_clear_out_block ()\n+do_pushlevel ()\n {\n-  /* If COND wasn't a declaration, clear out the\n-     block we made for it and start a new one here so the\n-     optimization in expand_end_loop will work.  */\n-  if (getdecls () == NULL_TREE)\n+  if (stmts_are_full_exprs_p ())\n     {\n-      genrtl_do_poplevel ();\n-      genrtl_do_pushlevel ();\n+      pushlevel (0);\n+      if (!processing_template_decl)\n+\tadd_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n     }\n }\n \n@@ -191,7 +180,7 @@ add_tree (t)\n   SET_LAST_STMT (t);\n   /* When we expand a statement-tree, we must know whether or not the\n      statements are full-expresions.  We record that fact here.  */\n-  STMT_IS_FULL_EXPR_P (last_tree) = stmts_are_full_exprs_p;\n+  STMT_IS_FULL_EXPR_P (last_tree) = stmts_are_full_exprs_p ();\n }\n \n /* Finish a goto-statement.  */\n@@ -220,35 +209,10 @@ finish_goto_stmt (destination)\n   add_tree (build_min_nt (GOTO_STMT, destination));\n }\n \n-/* Generate the RTL for DESTINATION, which is a GOTO_STMT. */\n-\n-void\n-genrtl_goto_stmt (destination)\n-     tree destination;\n-{\n-  if (TREE_CODE (destination) == IDENTIFIER_NODE)\n-    destination = lookup_label (destination);\n-\n-  /* We warn about unused labels with -Wunused.  That means we have to\n-     mark the used labels as used.  */\n-  if (TREE_CODE (destination) == LABEL_DECL)\n-    TREE_USED (destination) = 1;\n-    \n-  emit_line_note (input_filename, lineno);\n-  \n-  if (TREE_CODE (destination) == LABEL_DECL)\n-    {\n-      label_rtx (destination);\n-      expand_goto (destination); \n-    }\n-  else\n-    expand_computed_goto (destination);\n-}\n-\n /* COND is the condition-expression for an if, while, etc.,\n    statement.  Convert it to a boolean value, if appropriate.  */\n \n-static tree\n+tree\n maybe_convert_cond (cond)\n      tree cond;\n {\n@@ -274,13 +238,13 @@ finish_expr_stmt (expr)\n   if (expr != NULL_TREE)\n     {\n       if (!processing_template_decl\n-\t  && !stmts_are_full_exprs_p\n+\t  && !(stmts_are_full_exprs_p ())\n \t  && ((TREE_CODE (TREE_TYPE (expr)) == ARRAY_TYPE\n \t       && lvalue_p (expr))\n \t      || TREE_CODE (TREE_TYPE (expr)) == FUNCTION_TYPE))\n \texpr = default_conversion (expr);\n       \n-      if (stmts_are_full_exprs_p)\n+      if (stmts_are_full_exprs_p ())\n \texpr = convert_to_void (expr, \"statement\");\n       \n       if (!processing_template_decl)\n@@ -296,92 +260,6 @@ finish_expr_stmt (expr)\n   last_expr_type = expr ? TREE_TYPE (expr) : NULL_TREE;\n }\n \n-/* Generate the RTL for EXPR, which is an EXPR_STMT. */\n-\n-void \n-genrtl_expr_stmt (expr)\n-     tree expr;\n-{\n-  if (expr != NULL_TREE)\n-    {\n-      emit_line_note (input_filename, lineno);\n-      \n-      if (stmts_are_full_exprs_p)\n-\texpand_start_target_temps ();\n-      \n-      cplus_expand_expr_stmt (expr);\n-      \n-      if (stmts_are_full_exprs_p)\n-\texpand_end_target_temps ();\n-    }\n-\n-  finish_stmt ();\n-\n-  /* This was an expression-statement, so we save the type of the\n-     expression.  */\n-  last_expr_type = expr ? TREE_TYPE (expr) : NULL_TREE;\n-}\n-\n-/* Generate the RTL for T, which is a DECL_STMT. */\n-\n-void\n-genrtl_decl_stmt (t)\n-     tree t;\n-{\n-  tree decl;\n-  emit_line_note (input_filename, lineno);\n-  decl = DECL_STMT_DECL (t);\n-  /* If this is a declaration for an automatic local\n-     variable, initialize it.  Note that we might also see a\n-     declaration for a namespace-scope object (declared with\n-     `extern').  We don't have to handle the initialization\n-     of those objects here; they can only be declarations,\n-     rather than definitions.  */\n-  if (TREE_CODE (decl) == VAR_DECL \n-      && !TREE_STATIC (decl)\n-      && !DECL_EXTERNAL (decl))\n-    {\n-      /* Let the back-end know about this variable.  */\n-      if (!ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n-\temit_local_var (decl);\n-      else\n-\texpand_anon_union_decl (decl, NULL_TREE, \n-\t\t\t\tDECL_ANON_UNION_ELEMS (decl));\n-    }\n-  else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n-    {\n-      if (DECL_ARTIFICIAL (decl) && ! TREE_USED (decl))\n-\t/* Do not emit unused decls. This is not just an\n-\t   optimization. We really do not want to emit\n-\t   __PRETTY_FUNCTION__ etc, if they're never used.  */\n-\tDECL_IGNORED_P (decl) = 1;\n-      else\n-\tmake_rtl_for_local_static (decl);\n-    }\n-}\n-\n-/* Generate the RTL for T, which is an IF_STMT. */\n-\n-void\n-genrtl_if_stmt (t)\n-     tree t;\n-{\n-  tree cond;\n-  genrtl_do_pushlevel ();\n-  cond = maybe_convert_cond (expand_cond (IF_COND (t)));\n-  emit_line_note (input_filename, lineno);\n-  expand_start_cond (cond, 0);\n-  if (THEN_CLAUSE (t))\n-    expand_stmt (THEN_CLAUSE (t));\n-  if (ELSE_CLAUSE (t))\n-    {\n-      expand_start_else ();\n-      expand_stmt (ELSE_CLAUSE (t));\n-    }\n-  expand_end_cond ();\n-  genrtl_do_poplevel ();\n-  finish_stmt ();\n-}\n \n /* Begin an if-statement.  Returns a newly created IF_STMT if\n    appropriate.  */\n@@ -459,30 +337,6 @@ clear_out_block ()\n     }\n }\n \n-/* Generate the RTL for T, which is a WHILE_STMT. */\n-\n-void\n-genrtl_while_stmt (t)\n-     tree t;\n-{\n-  tree cond;\n-  emit_nop ();\n-  emit_line_note (input_filename, lineno);\n-  expand_start_loop (1); \n-  genrtl_do_pushlevel ();\n-\n-  cond = maybe_convert_cond (expand_cond (WHILE_COND (t)));\n-  emit_line_note (input_filename, lineno);\n-  expand_exit_loop_if_false (0, cond);\n-  genrtl_clear_out_block ();\n-  \n-  expand_stmt (WHILE_BODY (t));\n-\n-  genrtl_do_poplevel ();\n-  expand_end_loop ();\n-  finish_stmt ();\n-}\n-\n /* Begin a while-statement.  Returns a newly created WHILE_STMT if\n    appropriate.  */\n \n@@ -520,28 +374,6 @@ finish_while_stmt (while_stmt)\n   finish_stmt ();\n }\n \n-/* Generate the RTL for T, which is a DO_STMT. */\n-\n-void\n-genrtl_do_stmt (t)\n-    tree t;\n-{\n-  tree cond;\n-  emit_nop ();\n-  emit_line_note (input_filename, lineno);\n-  expand_start_loop_continue_elsewhere (1);\n-\n-  expand_stmt (DO_BODY (t));\n-\n-  expand_loop_continue_here ();\n-\n-  cond = maybe_convert_cond (DO_COND (t));\n-  emit_line_note (input_filename, lineno);\n-  expand_exit_loop_if_false (0, cond);\n-  expand_end_loop ();\n-  finish_stmt ();  \n-}\n-\n /* Begin a do-statement.  Returns a newly created DO_STMT if\n    appropriate.  */\n \n@@ -575,17 +407,6 @@ finish_do_stmt (cond, do_stmt)\n   finish_stmt ();\n }\n \n-/* Generate the RTL for EXPR, which is a RETURN_STMT. */\n-\n-void\n-genrtl_return_stmt (expr)\n-     tree expr;\n-{\n-  emit_line_note (input_filename, lineno);\n-  c_expand_return (expr);\n-  finish_stmt ();\n-}\n-\n /* Finish a return-statement.  The EXPRESSION returned, if any, is as\n    indicated.  */\n \n@@ -622,47 +443,6 @@ finish_return_stmt (expr)\n   finish_stmt ();\n }\n \n-/* Generate the RTL for T, which is a FOR_STMT. */\n-\n-void\n-genrtl_for_stmt (t)\n-     tree t;\n-{\n-  tree tmp;\n-  tree cond;\n-  if (flag_new_for_scope > 0)\n-    {\n-      genrtl_do_pushlevel ();\n-      note_level_for_for ();\n-    }  \n-\n-  expand_stmt (FOR_INIT_STMT (t));\n-\n-  emit_nop ();\n-  emit_line_note (input_filename, lineno);\n-  expand_start_loop_continue_elsewhere (1); \n-  genrtl_do_pushlevel ();\n-  cond = maybe_convert_cond (expand_cond (FOR_COND (t)));\n-  emit_line_note (input_filename, lineno);\n-  if (cond)\n-    expand_exit_loop_if_false (0, cond);\n-  genrtl_clear_out_block ();\n-  tmp = FOR_EXPR (t);\n-\n-  expand_stmt (FOR_BODY (t));\n-\n-  /* Pop the scope for the body of the loop.  */\n-  genrtl_do_poplevel ();\n-  emit_line_note (input_filename, lineno);\n-  expand_loop_continue_here ();\n-  if (tmp) \n-    genrtl_expr_stmt (tmp);\n-  expand_end_loop ();\n-  if (flag_new_for_scope > 0)\n-    genrtl_do_poplevel ();\n-  finish_stmt (); \n-}\n-\n /* Begin a for-statement.  Returns a new FOR_STMT if appropriate.  */\n \n tree\n@@ -672,9 +452,9 @@ begin_for_stmt ()\n \n   r = build_min_nt (FOR_STMT, NULL_TREE, NULL_TREE, \n \t\t    NULL_TREE, NULL_TREE);\n+  NEW_FOR_SCOPE_P (r) = flag_new_for_scope > 0;\n   add_tree (r);\n-  \n-  if (flag_new_for_scope > 0)\n+  if (NEW_FOR_SCOPE_P (r))\n     {\n       do_pushlevel ();\n       note_level_for_for ();\n@@ -730,21 +510,11 @@ finish_for_stmt (for_stmt)\n   /* Pop the scope for the body of the loop.  */\n   do_poplevel ();\n   RECHAIN_STMTS (for_stmt, FOR_BODY (for_stmt));\n-  if (flag_new_for_scope > 0)\n+  if (NEW_FOR_SCOPE_P (for_stmt))\n     do_poplevel ();\n   finish_stmt (); \n }\n \n-/* Generate the RTL for a BREAK_STMT. */\n-\n-void\n-genrtl_break_stmt ()\n-{\n-  emit_line_note (input_filename, lineno);\n-  if ( ! expand_exit_something ())\n-    cp_error (\"break statement not within loop or switch\");\n-}\n-\n /* Finish a break-statement.  */\n \n void\n@@ -754,16 +524,6 @@ finish_break_stmt ()\n   add_tree (build_min_nt (BREAK_STMT));\n }\n \n-/* Generate the RTL for a CONTINUE_STMT. */\n-\n-void\n-genrtl_continue_stmt ()\n-{\n-  emit_line_note (input_filename, lineno);\n-  if (! expand_continue_loop (0))\n-    cp_error (\"continue statement not within a loop\");   \n-}\n-\n /* Finish a continue-statement.  */\n \n void\n@@ -773,60 +533,6 @@ finish_continue_stmt ()\n   add_tree (build_min_nt (CONTINUE_STMT));\n }\n \n-/* Generate the RTL for T, which is a SCOPE_STMT. */\n-\n-void\n-genrtl_scope_stmt (t)\n-     tree t;\n-{\n-  if (!SCOPE_NO_CLEANUPS_P (t))\n-    {\n-      if (SCOPE_BEGIN_P (t))\n-\texpand_start_bindings_and_block (2 * SCOPE_NULLIFIED_P (t),\n-\t\t\t\t\t SCOPE_STMT_BLOCK (t));\n-      else if (SCOPE_END_P (t))\n-\texpand_end_bindings (NULL_TREE, !SCOPE_NULLIFIED_P (t), 0);\n-    }\n-  else if (!SCOPE_NULLIFIED_P (t))\n-    {\n-      rtx note = emit_note (NULL,\n-\t\t\t    (SCOPE_BEGIN_P (t) \n-\t\t\t     ? NOTE_INSN_BLOCK_BEG\n-\t\t\t     : NOTE_INSN_BLOCK_END));\n-      NOTE_BLOCK (note) = SCOPE_STMT_BLOCK (t);\n-    }\n-}\n-\n-/* Generate the RTL for T, which is a SWITCH_STMT. */\n-\n-void\n-genrtl_switch_stmt (t)\n-     tree t;\n-{\n-  tree cond;\n-  genrtl_do_pushlevel ();\n- \n-  cond = expand_cond (SWITCH_COND (t));\n-  if (cond != error_mark_node)\n-    {\n-      emit_line_note (input_filename, lineno);\n-      c_expand_start_case (cond);\n-    }\n-  else\n-    /* The code is in error, but we don't want expand_end_case to\n-       crash. */\n-    c_expand_start_case (boolean_false_node);\n-\n-  push_switch ();\n-\n-  expand_stmt (SWITCH_BODY (t));\n-\n-  expand_end_case (cond);\n-  pop_switch (); \n-  genrtl_do_poplevel ();\n-  finish_stmt ();  \n-}\n-\n /* Begin a switch-statement.  Returns a new SWITCH_STMT if\n    appropriate.  */\n \n@@ -892,16 +598,6 @@ finish_switch_stmt (switch_stmt)\n   finish_stmt ();\n }\n \n-/* Generate the RTL for a CASE_LABEL. */\n-\n-void \n-genrtl_case_label (low_value, high_value)\n-     tree low_value;\n-     tree high_value;\n-{\n-  do_case (low_value, high_value);\n-}\n-\n /* Finish a case-label.  */\n \n void \n@@ -1070,8 +766,6 @@ genrtl_handler (t)\n       expand_goto (top_label_entry (&caught_return_label_stack));\n       end_catch_handler ();\n     }\n-\n-  genrtl_do_poplevel ();  \n }\n \n /* Begin a handler.  Returns a HANDLER if appropriate.  */\n@@ -1165,79 +859,6 @@ genrtl_ctor_stmt (t)\n     end_protect_partials ();\n }\n \n-/* Generate the RTL for the start of a COMPOUND_STMT. */\n-\n-tree genrtl_begin_compound_stmt (has_no_scope)\n-     int has_no_scope;\n-{\n-  tree r; \n-  int is_try = 0;\n-\n-  r = NULL_TREE;\n-\n-  last_expr_type = NULL_TREE;\n-\n-  if (!has_no_scope)\n-    {\n-      genrtl_do_pushlevel ();\n-      if (is_try)\n-\tnote_level_for_eh ();\n-    }\n-  else\n-    /* Normally, we try hard to keep the BLOCK for a\n-       statement-expression.  But, if it's a statement-expression with\n-       a scopeless block, there's nothing to keep, and we don't want\n-       to accidentally keep a block *inside* the scopeless block.  */ \n-    keep_next_level (0);\n-\n-  /* If this is the outermost block of the function, declare the\n-     variables __FUNCTION__, __PRETTY_FUNCTION__, and so forth.  */\n-  if (cfun\n-      && !current_function_name_declared \n-      && !has_no_scope)\n-    {\n-      current_function_name_declared = 1;\n-      declare_function_name ();\n-    }\n-\n-  return r;\n-}\n-\n-/* Generate the RTL for the end of a COMPOUND_STMT. */\n-\n-tree genrtl_finish_compound_stmt (has_no_scope)\n-     int has_no_scope;\n-{\n-  tree r;\n-  tree t;\n-\n-  if (!has_no_scope)\n-    r = genrtl_do_poplevel ();\n-  else\n-    r = NULL_TREE;\n-\n-  /* When we call finish_stmt we will lose LAST_EXPR_TYPE.  But, since\n-     the precise purpose of that variable is store the type of the\n-     last expression statement within the last compound statement, we\n-     preserve the value.  */\n-  t = last_expr_type;\n-  finish_stmt ();\n-  last_expr_type = t;\n-\n-  return r;\n-}\n-\n-/* Generate the RTL for T, which is a COMPOUND_STMT. */\n-\n-tree \n-genrtl_compound_stmt (t)\n-    tree t;\n-{\n-  genrtl_begin_compound_stmt (COMPOUND_STMT_NO_SCOPE (t));\n-  expand_stmt (COMPOUND_BODY (t));\n-  return (genrtl_finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t)));\n-}\n-\n /* Begin a compound-statement.  If HAS_NO_SCOPE is non-zero, the\n    compound-statement does not define a scope.  Returns a new\n    COMPOUND_STMT if appropriate.  */\n@@ -1276,10 +897,10 @@ begin_compound_stmt (has_no_scope)\n   /* If this is the outermost block of the function, declare the\n      variables __FUNCTION__, __PRETTY_FUNCTION__, and so forth.  */\n   if (cfun\n-      && !current_function_name_declared \n+      && !(current_function_name_declared () )\n       && !has_no_scope)\n     {\n-      current_function_name_declared = 1;\n+      cp_function_chain->name_declared = 1;\n       declare_function_name ();\n     }\n \n@@ -1316,42 +937,6 @@ finish_compound_stmt (has_no_scope, compound_stmt)\n   return r;\n }\n \n-/* Generate the RTL for an ASM_STMT. */\n-\n-void\n-genrtl_asm_stmt (cv_qualifier, string, output_operands,\n-\t\t input_operands, clobbers)\n-     tree cv_qualifier;\n-     tree string;\n-     tree output_operands;\n-     tree input_operands;\n-     tree clobbers;\n-{\n-  if (TREE_CHAIN (string))\n-    string = combine_strings (string);\n-\n-  if (cv_qualifier != NULL_TREE\n-      && cv_qualifier != ridpointers[(int) RID_VOLATILE])\n-    {\n-      cp_warning (\"%s qualifier ignored on asm\",\n-\t\t  IDENTIFIER_POINTER (cv_qualifier));\n-      cv_qualifier = NULL_TREE;\n-    }\n-\n-  emit_line_note (input_filename, lineno);\n-  if (output_operands != NULL_TREE || input_operands != NULL_TREE\n-      || clobbers != NULL_TREE)\n-    c_expand_asm_operands (string, output_operands,\n-\t\t\t   input_operands, \n-\t\t\t   clobbers,\n-\t\t\t   cv_qualifier != NULL_TREE,\n-\t\t\t   input_filename, lineno);\n-  else\n-    expand_asm (string);\n-  \n-  finish_stmt ();\n-}\n-\n /* Finish an asm-statement, whose components are a CV_QUALIFIER, a\n    STRING, some OUTPUT_OPERANDS, some INPUT_OPERANDS, and some\n    CLOBBERS.  */\n@@ -1446,17 +1031,6 @@ finish_subobject (cleanup)\n   add_tree (r);\n }\n \n-/* Generate the RTL for a DECL_CLEANUP. */\n-\n-void \n-genrtl_decl_cleanup (decl, cleanup)\n-     tree decl;\n-     tree cleanup;\n-{\n-  if (!decl || (DECL_SIZE (decl) && TREE_TYPE (decl) != error_mark_node))\n-    expand_decl_cleanup (decl, cleanup);\n-}\n-\n /* When DECL goes out of scope, make sure that CLEANUP is executed.  */\n \n void \n@@ -1694,10 +1268,10 @@ setup_vtbl_ptr (member_init_list, base_init_list)\n \n       /* Don't declare __PRETTY_FUNCTION__ and friends here when we\n \t open the block for the if-body.  */\n-      saved_cfnd = current_function_name_declared;\n-      current_function_name_declared = 1;\n+      saved_cfnd = current_function_name_declared ();\n+      cp_function_chain->name_declared = 1;\n       compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n-      current_function_name_declared = saved_cfnd;\n+      cp_function_chain->name_declared = saved_cfnd;\n \n       /* Make all virtual function table pointers in non-virtual base\n \t classes point to CURRENT_CLASS_TYPE's virtual function\n@@ -2722,32 +2296,14 @@ prep_stmt (t)\n {\n   if (!STMT_LINENO_FOR_FN_P (t))\n     lineno = STMT_LINENO (t);\n-  stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n-}\n-\n-/* Some statements, like for-statements or if-statements, require a\n-   condition.  This condition can be a declaration.  If T is such a\n-   declaration it is processed, and an expression appropriate to use\n-   as the condition is returned.  Otherwise, T itself is returned.  */\n-\n-static tree\n-expand_cond (t)\n-     tree t;\n-{\n-  if (t && TREE_CODE (t) == TREE_LIST)\n-    {\n-      expand_stmt (TREE_PURPOSE (t));\n-      return TREE_VALUE (t);\n-    }\n-  else \n-    return t;\n+  current_stmt_tree->stmts_are_full_exprs_p = STMT_IS_FULL_EXPR_P (t);\n }\n \n /* Generate RTL for the statement T, and its substatements, and any\n    other statements at its nesting level.  */\n \n tree\n-expand_stmt (t)\n+lang_expand_stmt (t)\n      tree t;\n {\n   tree rval = NULL_TREE;\n@@ -2760,7 +2316,7 @@ expand_stmt (t)\n       rval = NULL_TREE;\n \n       /* Set up context appropriately for handling this statement.  */\n-      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p;\n+      saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n       prep_stmt (t);\n \n       switch (TREE_CODE (t))\n@@ -2865,7 +2421,7 @@ expand_stmt (t)\n \t}\n \n       /* Restore saved state.  */\n-      stmts_are_full_exprs_p = saved_stmts_are_full_exprs_p;\n+      current_stmt_tree->stmts_are_full_exprs_p = saved_stmts_are_full_exprs_p;\n \n       /* Go on to the next statement in this scope.  */\n       t = TREE_CHAIN (t);\n@@ -3107,14 +2663,14 @@ expand_body (fn)\n   /* We don't need to redeclare __FUNCTION__, __PRETTY_FUNCTION__, or\n      any of the other magic variables we set up when starting a\n      function body.  */\n-  current_function_name_declared = 1;\n+  cp_function_chain->name_declared = 1;\n \n   /* Expand the body.  */\n   expand_stmt (DECL_SAVED_TREE (fn));\n \n   /* Statements should always be full-expressions at the outermost set\n      of curly braces for a function.  */\n-  my_friendly_assert (stmts_are_full_exprs_p, 19990831);\n+  my_friendly_assert (stmts_are_full_exprs_p (), 19990831);\n \n   /* The outermost statement for a function contains the line number\n      recorded when we finished processing the function.  */"}]}