{"sha": "65e1be69ba634f616c02af04c857fd2930794ca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlMWJlNjliYTYzNGY2MTZjMDJhZjA0Yzg1N2ZkMjkzMDc5NGNhOA==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-29T07:06:18Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-04-29T07:06:18Z"}, "message": "Uninstalled argframe macros\n\nFrom-SVN: r4270", "tree": {"sha": "27c4942270eafa937f27b4bf99262cc3bfe8cd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27c4942270eafa937f27b4bf99262cc3bfe8cd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e1be69ba634f616c02af04c857fd2930794ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e1be69ba634f616c02af04c857fd2930794ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e1be69ba634f616c02af04c857fd2930794ca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e1be69ba634f616c02af04c857fd2930794ca8/comments", "author": null, "committer": null, "parents": [{"sha": "0b80ea44fd6e32bcdfabd17e77d25abb350971c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b80ea44fd6e32bcdfabd17e77d25abb350971c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b80ea44fd6e32bcdfabd17e77d25abb350971c1"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "585b8129c66bc043ad575060bbb388daf9f0b8cc", "filename": "gcc/objc/Makefile.in", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMakefile.in?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -60,12 +60,9 @@ libobjc.a: $(OBJC_O)\n \t$(AR) rc libobjc.a $(OBJC_O)\n # ranlib is run in the parent directory's makefile.\n \n-ARGFRAME_H = argframe.h af-sparc.h\n-\n OBJC_H = hash.h list.h sarray.h objc.h \\\n          objc-api.h cache.h \\\n-\t Object.h Protocol.h mutex.h \\\n-\t $(ARGFRAME_H)\n+\t Object.h Protocol.h mutex.h\n \n # copy objc headers to installation include directory\n copy-headers: $(OBJC_H)\n@@ -77,6 +74,19 @@ copy-headers: $(OBJC_H)\n \t  chmod a+r $(incinstalldir)/objc; \\\n \tdone\n \n+sendmsg.o: sendmsg.c fflags\n+\t$(GCC_FOR_TARGET) `cat fflags` -c $(GCC_CFLAGS) $(SUBDIR_INCLUDES) $(srcdir)/objc/sendmsg.c\n+\n+## Next to are for heuristics on forwarding mechanism... \n+_forward: _forward.c\n+\t-$(GCC_FOR_TARGET) -c $(GCC_CFLAGS) $(SUBDIR_INCLUDES) $(srcdir)/objc/_forward.c\n+\t-$(GCC_FOR_TARGET) ./_forward.o -o _forward\n+\tif [ ! -f ./_forward ]; then touch ./_forward; fi\t\n+\n+fflags: _forward\n+\t-rm -f fflags\n+\t-if [ -s ./_forward ]; then ./_forward > fflags; else touch fflags; fi\n+\n mostlyclean:\n \t-rm -f *.o libobjc.a _forward fflags\n clean: mostlyclean"}, {"sha": "6ef6e879fa4ca4de616057519a07f1e0d09f62d2", "filename": "gcc/objc/Object.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.h?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -52,14 +52,10 @@ typedef char *STR;                              /* String alias */\n \n @class Protocol;\n typedef struct objc_typed_stream TypedStream;\n+typedef void* arglist_t;\n \n #endif /* not __objc_INCLUDE_GNU */\n \n-#ifndef __AF_FRAME\n-typedef struct __gnuc_af_frame *af_frame;\n-#define __AF_FRAME\n-#endif\n-\n /*\n  * All classes are derived from Object.  As such,\n  * this is the overhead tacked onto those objects.\n@@ -123,8 +119,8 @@ typedef struct __gnuc_af_frame *af_frame;\n - perform:(SEL)aSel with:anObject1 with:anObject2;\n \n         /* Forwarding */\n-- forward:(SEL)aSel :(af_frame)argFrame;\n-- performv:(SEL)aSel :(af_frame)argFrame;\n+- forward:(SEL)aSel :(arglist_t)argFrame;\n+- performv:(SEL)aSel :(arglist_t)argFrame;\n \n         /* Posing */\n + poseAs:(Class*)aClassObject;"}, {"sha": "5f35bd39df975b08e4c15f8e96589e8f13279028", "filename": "gcc/objc/Object.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FObject.m?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -245,12 +245,12 @@ - (struct objc_method_description *)descriptionForMethod:(SEL)aSel\n   return (*msg)(self, aSel, anObject1, anObject2);\n }\n \n-- forward:(SEL)aSel :(af_frame)argFrame\n+- forward:(SEL)aSel :(arglist_t)argFrame\n {\n   return [self doesNotRecognize: aSel];\n }\n \n-- performv:(SEL)aSel :(af_frame)argFrame\n+- performv:(SEL)aSel :(arglist_t)argFrame\n {\n   return objc_msg_sendv(self, aSel, method_get_argsize(0), argFrame);\n }"}, {"sha": "b9b64ac273c4f6608abaac4f976840c3e52ad8ba", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -26,6 +26,8 @@ You should have received a copy of the GNU General Public License along with\n \n #include \"runtime.h\"\n \n+void objc_error(id object, const char* fmt, va_list);\n+\n void (*_objc_error)(id, const char*, va_list) = objc_error;\n /* id (*_objc_object_alloc)(Class*) = 0; */\n /* id (*_objc_object_dispose)(id)    = 0; */"}, {"sha": "d5eace390cb160e9d6d8972feca86b9bb74f97e3", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -440,12 +440,36 @@ IMP objc_msg_lookup_super(Super_t super, SEL sel);\n typedef void* retval_t;\t\t/* return value */\n typedef void(*apply_t)(void);\t/* function pointer */\n \n-#ifndef __AF_FRAME\n-typedef struct __gnuc_af_frame *af_frame;\n-#define __AF_FRAME\n+#ifndef __object_INCLUDE_GNU\n+\n+#if defined(REG_ARGS) || defined(STACK_ARGS) \n+\n+typedef struct {\n+  char* arg_pointer;\n+#ifdef STRUCT_RETURN\n+  void* struct_return;\n+#endif\n+#ifdef REG_ARGS\n+  void* regs[2];\n+#endif\n+} *arglist_t;\n+\n+#ifdef REG_ARGS\n+#define __objc_frame_receiver(FRAME)  (FRAME)->regs[0]\n+#define __objc_frame_selector(FRAME)  ((SEL)(FRAME)->regs[1])\n+\n+#else\n+#define __objc_frame_receiver(FRAME) ((id*)(FRAME)->arg_pointer)[0]\n+#define __objc_frame_selector(FRAME) ((SEL*)(FRAME)->arg_pointer)[1]\n+#endif\n+#else\n+\n+typedef void* arglist_t;\n+\n #endif\n+#endif /* not __object_INCLUDE_GNU */\n \n-retval_t objc_msg_sendv(id, SEL, size_t, af_frame);\n+retval_t objc_msg_sendv(id, SEL, size_t, arglist_t);\n \n #ifdef __OBJC__\n "}, {"sha": "b8ffed626d57354c59604ea0a5a2eadb9437bbf8", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e1be69ba634f616c02af04c857fd2930794ca8/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=65e1be69ba634f616c02af04c857fd2930794ca8", "patch": "@@ -25,7 +25,6 @@ You should have received a copy of the GNU General Public License along with\n    covered by the GNU General Public License.  */\n \n #include \"runtime.h\"\n-#include \"argframe.h\"\n \n #ifdef OBJC_SPARSE_LOOKUP\n const char* __objc_sparse_lookup_id = \"Method lookup uses sparse arrays\";\n@@ -111,13 +110,11 @@ objc_msg_lookup_super (Super_t super, SEL sel)\n }\n \n retval_t\n-objc_msg_sendv(id object, SEL op, size_t frame_size, af_frame arg_frame)\n+objc_msg_sendv(id object, SEL op, size_t frame_size, arglist_t arg_frame)\n {\n-#ifndef __ARGFRAME_DOES_NOT_WORK\n-  af_cum cum;\n-  af_start (cum, arg_frame);\n-  af_put (arg_frame, cum, id, object);\n-  af_put (arg_frame, cum, SEL, op);\n+#ifdef __objc_frame_receiver\n+  __objc_frame_receiver(arg_frame) = object;\n+  __objc_frame_selector(arg_frame) = op;\n   return __builtin_apply((apply_t)get_imp(object->class_pointer, op),\n \t\t\t arg_frame,\n \t\t\t frame_size);"}]}