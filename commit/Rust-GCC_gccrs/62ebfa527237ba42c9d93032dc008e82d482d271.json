{"sha": "62ebfa527237ba42c9d93032dc008e82d482d271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlYmZhNTI3MjM3YmE0MmM5ZDkzMDMyZGMwMDhlODJkNDgyZDI3MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:11:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:06Z"}, "message": "[Ada] Uintp: add a new UI_From_Integral generic constructor\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* uintp.ads, uintp.adb (UI_From_Integral): New generic function,\n\tto simplify construction of Universal_Integer representations\n\tfrom any Integer type. If type is small enough the code is\n\tequivalent to a call to UI_To_Int with appropriate conversions;\n\totherwise the routine uses the existing mechanism of building a\n\tvector of suitable integer values and calling Vector_To_Uint.\n\tThe routine must not be applied to a biased type.\n\nFrom-SVN: r267000", "tree": {"sha": "ba2bcd82f026df41318ff05a4967bd6291a6bc74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2bcd82f026df41318ff05a4967bd6291a6bc74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ebfa527237ba42c9d93032dc008e82d482d271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ebfa527237ba42c9d93032dc008e82d482d271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ebfa527237ba42c9d93032dc008e82d482d271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ebfa527237ba42c9d93032dc008e82d482d271/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e366628853651e5d7a98e7bc12f5fb7746ce993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e366628853651e5d7a98e7bc12f5fb7746ce993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e366628853651e5d7a98e7bc12f5fb7746ce993"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "c2fef9cbc852d5a7f1257e09f7426e3422e1087a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62ebfa527237ba42c9d93032dc008e82d482d271", "patch": "@@ -1,3 +1,13 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* uintp.ads, uintp.adb (UI_From_Integral): New generic function,\n+\tto simplify construction of Universal_Integer representations\n+\tfrom any Integer type. If type is small enough the code is\n+\tequivalent to a call to UI_To_Int with appropriate conversions;\n+\totherwise the routine uses the existing mechanism of building a\n+\tvector of suitable integer values and calling Vector_To_Uint.\n+\tThe routine must not be applied to a biased type.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Build_Itype_Reference): Handle properly an itype"}, {"sha": "04f552e5d968a0b5bff8a596bdbb4a364adfb6af", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=62ebfa527237ba42c9d93032dc008e82d482d271", "patch": "@@ -2324,4 +2324,50 @@ package body Uintp is\n       return Uint_0;\n    end Vector_To_Uint;\n \n+   ----------------------\n+   -- UI_From_Integral --\n+   ----------------------\n+\n+   function UI_From_Integral (Input : In_T) return Uint is\n+      U : Uint;\n+\n+   begin\n+      --  If in range of our normal conversion function, use it so we can\n+      --  use direct access and our cache.\n+\n+      if In_T'Size <= Int'Size\n+        or else Input in In_T (Int'First) .. In_T (Int'Last)\n+      then\n+         return UI_From_Int (Int (Input));\n+\n+      else\n+         --  pragma Warnings (Off);\n+\n+         --  For values of larger magnitude, compute digits into a vector\n+         --  and call Vector_To_Uint.\n+\n+         declare\n+            Max_For_In_T : constant Int  := 3 * In_T'Size / Int'Size;\n+            Our_Base     : constant In_T := In_T (Base);\n+            Temp_Integer : In_T := Input;\n+            --  Base is defined so that 3 Uint digits is sufficient to hold the\n+            --  largest possible Int value.\n+\n+            V : UI_Vector (1 .. Max_For_In_T);\n+\n+         begin\n+            for J in reverse V'Range loop\n+               V (J) := Int (abs (Temp_Integer rem Our_Base));\n+               Temp_Integer := Temp_Integer / Our_Base;\n+            end loop;\n+\n+            U := Vector_To_Uint (V, Input < 0);\n+            Uints_Min := Uints.Last;\n+            Udigits_Min := Udigits.Last;\n+            return U;\n+         end;\n+\n+         --  pragma Warnings (On);\n+      end if;\n+   end UI_From_Integral;\n end Uintp;"}, {"sha": "d00d0e19f8fc153d412c580bbe28a5984a35a04f", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ebfa527237ba42c9d93032dc008e82d482d271/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=62ebfa527237ba42c9d93032dc008e82d482d271", "patch": "@@ -248,6 +248,13 @@ package Uintp is\n    function UI_From_Int (Input : Int) return Uint;\n    --  Converts Int value to universal integer form\n \n+   generic\n+      type In_T is range <>;\n+   function UI_From_Integral (Input : In_T) return Uint;\n+   --  Likewise, but converts from any integer type.\n+   --  Must not be applied to biased types (instantiation will provide\n+   --  a warning if actual is a biased type).\n+\n    function UI_From_CC (Input : Char_Code) return Uint;\n    --  Converts Char_Code value to universal integer form\n "}]}