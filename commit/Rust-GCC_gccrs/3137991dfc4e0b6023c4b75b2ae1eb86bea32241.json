{"sha": "3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzNzk5MWRmYzRlMGI2MDIzYzRiNzViMmFlMWViODZiZWEzMjI0MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T06:01:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-24T06:01:27Z"}, "message": "Tuple receives indicate whether channel is closed.\n\nFrom-SVN: r171380", "tree": {"sha": "7d40ea09a03f835f95092ac120d9da2db544b0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d40ea09a03f835f95092ac120d9da2db544b0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/comments", "author": null, "committer": null, "parents": [{"sha": "4908b0bf1ccac0b7c738ca107be86ca77bf10c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4908b0bf1ccac0b7c738ca107be86ca77bf10c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4908b0bf1ccac0b7c738ca107be86ca77bf10c4a"}], "stats": {"total": 452, "additions": 309, "deletions": 143}, "files": [{"sha": "238a0d72487c36919a3d39ca2debda90c318e026", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -3057,7 +3057,7 @@ Gogo::receive_from_channel(tree type_tree, tree channel, bool for_select,\n \t\t\t\t     location,\n \t\t\t\t     \"__go_receive_big\",\n \t\t\t\t     3,\n-\t\t\t\t     void_type_node,\n+\t\t\t\t     boolean_type_node,\n \t\t\t\t     ptr_type_node,\n \t\t\t\t     channel,\n \t\t\t\t     ptr_type_node,"}, {"sha": "f39124c1643a2ec8ffba2386f0cf3ae68de908b6", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -1257,7 +1257,7 @@ Lower_parse_tree::statement(Block* block, size_t* pindex, Statement* sorig)\n   Statement* s = sorig;\n   while (true)\n     {\n-      Statement* snew = s->lower(this->gogo_, block);\n+      Statement* snew = s->lower(this->gogo_, this->function_, block);\n       if (snew == s)\n \tbreak;\n       s = snew;\n@@ -1305,6 +1305,15 @@ Gogo::lower_parse_tree()\n   this->traverse(&lower_parse_tree);\n }\n \n+// Lower a block.\n+\n+void\n+Gogo::lower_block(Named_object* function, Block* block)\n+{\n+  Lower_parse_tree lower_parse_tree(this, function);\n+  block->traverse(&lower_parse_tree);\n+}\n+\n // Lower an expression.\n \n void"}, {"sha": "7a887a54296db8e9d548eee6f337f135f34ced1c", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -348,6 +348,10 @@ class Gogo\n   void\n   lower_parse_tree();\n \n+  // Lower all the statements in a block.\n+  void\n+  lower_block(Named_object* function, Block*);\n+\n   // Lower an expression.\n   void\n   lower_expression(Named_object* function, Expression**);"}, {"sha": "1f6e687ec82221dad725267209e55e1630d3bec7", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 138, "deletions": 38, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -4179,10 +4179,12 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n   bool is_send = false;\n   Expression* channel = NULL;\n   Expression* val = NULL;\n+  Expression* closed = NULL;\n   std::string varname;\n+  std::string closedname;\n   bool is_default = false;\n-  bool got_case = this->comm_case(&is_send, &channel, &val, &varname,\n-\t\t\t\t  &is_default);\n+  bool got_case = this->comm_case(&is_send, &channel, &val, &closed,\n+\t\t\t\t  &varname, &closedname, &is_default);\n \n   if (this->peek_token()->is_op(OPERATOR_COLON))\n     this->advance_token();\n@@ -4191,6 +4193,7 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n \n   Block* statements = NULL;\n   Named_object* var = NULL;\n+  Named_object* closedvar = NULL;\n   if (this->peek_token()->is_op(OPERATOR_SEMICOLON))\n     this->advance_token();\n   else if (this->statement_list_may_start_here())\n@@ -4206,6 +4209,14 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n \t  var = this->gogo_->add_variable(varname, v);\n \t}\n \n+      if (!closedname.empty())\n+\t{\n+\t  // FIXME: LOCATION is slightly wrong here.\n+\t  Variable* v = new Variable(Type::lookup_bool_type(), NULL,\n+\t\t\t\t     false, false, false, location);\n+\t  closedvar = this->gogo_->add_variable(closedname, v);\n+\t}\n+\n       this->statement_list();\n       statements = this->gogo_->finish_block(this->location());\n     }\n@@ -4221,7 +4232,8 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n     }\n \n   if (got_case)\n-    clauses->add(is_send, channel, val, var, is_default, statements, location);\n+    clauses->add(is_send, channel, val, closed, var, closedvar, is_default,\n+\t\t statements, location);\n   else if (statements != NULL)\n     {\n       // Add the statements to make sure that any names they define\n@@ -4234,7 +4246,8 @@ Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n \n bool\n Parse::comm_case(bool* is_send, Expression** channel, Expression** val,\n-\t\t std::string* varname, bool* is_default)\n+\t\t Expression** closed, std::string* varname,\n+\t\t std::string* closedname, bool* is_default)\n {\n   const Token* token = this->peek_token();\n   if (token->is_keyword(KEYWORD_DEFAULT))\n@@ -4245,7 +4258,8 @@ Parse::comm_case(bool* is_send, Expression** channel, Expression** val,\n   else if (token->is_keyword(KEYWORD_CASE))\n     {\n       this->advance_token();\n-      if (!this->send_or_recv_expr(is_send, channel, val, varname))\n+      if (!this->send_or_recv_stmt(is_send, channel, val, closed, varname,\n+\t\t\t\t   closedname))\n \treturn false;\n     }\n   else\n@@ -4259,74 +4273,160 @@ Parse::comm_case(bool* is_send, Expression** channel, Expression** val,\n   return true;\n }\n \n-// RecvExpr =  [ Expression ( \"=\" | \":=\" ) ] \"<-\" Expression .\n+// RecvStmt   = [ Expression [ \",\" Expression ] ( \"=\" | \":=\" ) ] RecvExpr .\n+// RecvExpr   = Expression .\n \n bool\n-Parse::send_or_recv_expr(bool* is_send, Expression** channel, Expression** val,\n-\t\t\t std::string* varname)\n+Parse::send_or_recv_stmt(bool* is_send, Expression** channel, Expression** val,\n+\t\t\t Expression** closed, std::string* varname,\n+\t\t\t std::string* closedname)\n {\n   const Token* token = this->peek_token();\n-  source_location location = token->location();\n+  bool saw_comma = false;\n+  bool closed_is_id = false;\n   if (token->is_identifier())\n     {\n+      Gogo* gogo = this->gogo_;\n       std::string recv_var = token->identifier();\n-      bool is_var_exported = token->is_identifier_exported();\n-      if (!this->advance_token()->is_op(OPERATOR_COLONEQ))\n-\tthis->unget_token(Token::make_identifier_token(recv_var,\n-\t\t\t\t\t\t       is_var_exported,\n-\t\t\t\t\t\t       location));\n-      else\n+      bool is_rv_exported = token->is_identifier_exported();\n+      source_location recv_var_loc = token->location();\n+      token = this->advance_token();\n+      if (token->is_op(OPERATOR_COLONEQ))\n \t{\n+\t  // case rv := <-c:\n \t  if (!this->advance_token()->is_op(OPERATOR_CHANOP))\n \t    {\n \t      error_at(this->location(), \"expected %<<-%>\");\n \t      return false;\n \t    }\n+\t  if (recv_var == \"_\")\n+\t    {\n+\t      error_at(recv_var_loc,\n+\t\t       \"no new variables on left side of %<:=%>\");\n+\t      recv_var = \"blank\";\n+\t    }\n \t  *is_send = false;\n-\t  *varname = this->gogo_->pack_hidden_name(recv_var, is_var_exported);\n+\t  *varname = gogo->pack_hidden_name(recv_var, is_rv_exported);\n \t  this->advance_token();\n \t  *channel = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n \t  return true;\n \t}\n+      else if (token->is_op(OPERATOR_COMMA))\n+\t{\n+\t  token = this->advance_token();\n+\t  if (token->is_identifier())\n+\t    {\n+\t      std::string recv_closed = token->identifier();\n+\t      bool is_rc_exported = token->is_identifier_exported();\n+\t      source_location recv_closed_loc = token->location();\n+\t      closed_is_id = true;\n+\n+\t      token = this->advance_token();\n+\t      if (token->is_op(OPERATOR_COLONEQ))\n+\t\t{\n+\t\t  // case rv, rc := <-c:\n+\t\t  if (!this->advance_token()->is_op(OPERATOR_CHANOP))\n+\t\t    {\n+\t\t      error_at(this->location(), \"expected %<<-%>\");\n+\t\t      return false;\n+\t\t    }\n+\t\t  if (recv_var == \"_\" && recv_closed == \"_\")\n+\t\t    {\n+\t\t      error_at(recv_var_loc,\n+\t\t\t       \"no new variables on left side of %<:=%>\");\n+\t\t      recv_var = \"blank\";\n+\t\t    }\n+\t\t  *is_send = false;\n+\t\t  if (recv_var != \"_\")\n+\t\t    *varname = gogo->pack_hidden_name(recv_var,\n+\t\t\t\t\t\t      is_rv_exported);\n+\t\t  if (recv_closed != \"_\")\n+\t\t    *closedname = gogo->pack_hidden_name(recv_closed,\n+\t\t\t\t\t\t\t is_rc_exported);\n+\t\t  this->advance_token();\n+\t\t  *channel = this->expression(PRECEDENCE_NORMAL, false, true,\n+\t\t\t\t\t      NULL);\n+\t\t  return true;\n+\t\t}\n+\n+\t      this->unget_token(Token::make_identifier_token(recv_closed,\n+\t\t\t\t\t\t\t     is_rc_exported,\n+\t\t\t\t\t\t\t     recv_closed_loc));\n+\t    }\n+\n+\t  *val = this->id_to_expression(gogo->pack_hidden_name(recv_var,\n+\t\t\t\t\t\t\t       is_rv_exported),\n+\t\t\t\t\trecv_var_loc);\n+\t  saw_comma = true;\n+\t}\n+      else\n+\tthis->unget_token(Token::make_identifier_token(recv_var,\n+\t\t\t\t\t\t       is_rv_exported,\n+\t\t\t\t\t\t       recv_var_loc));\n     }\n \n-  if (this->peek_token()->is_op(OPERATOR_CHANOP))\n+  // If SAW_COMMA is false, then we are looking at the start of the\n+  // send or receive expression.  If SAW_COMMA is true, then *VAL is\n+  // set and we just read a comma.\n+\n+  if (!saw_comma && this->peek_token()->is_op(OPERATOR_CHANOP))\n     {\n+      // case <-c:\n       *is_send = false;\n       this->advance_token();\n       *channel = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+      return true;\n     }\n-  else\n-    {\n-      Expression* left = this->expression(PRECEDENCE_NORMAL, true, true, NULL);\n \n-      if (this->peek_token()->is_op(OPERATOR_EQ))\n+  Expression* e = this->expression(PRECEDENCE_NORMAL, true, true, NULL);\n+\n+  if (this->peek_token()->is_op(OPERATOR_EQ))\n+    {\n+      if (!this->advance_token()->is_op(OPERATOR_CHANOP))\n \t{\n-\t  if (!this->advance_token()->is_op(OPERATOR_CHANOP))\n-\t    {\n-\t      error_at(this->location(), \"missing %<<-%>\");\n-\t      return false;\n-\t    }\n-\t  *is_send = false;\n-\t  *val = left;\n-\t  this->advance_token();\n-\t  *channel = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+\t  error_at(this->location(), \"missing %<<-%>\");\n+\t  return false;\n \t}\n-      else if (this->peek_token()->is_op(OPERATOR_CHANOP))\n+      *is_send = false;\n+      this->advance_token();\n+      *channel = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+      if (saw_comma)\n \t{\n-\t  *is_send = true;\n-\t  *channel = this->verify_not_sink(left);\n-\t  this->advance_token();\n-\t  *val = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+\t  // case v, e = <-c:\n+\t  // *VAL is already set.\n+\t  if (!e->is_sink_expression())\n+\t    *closed = e;\n \t}\n       else\n \t{\n-\t  error_at(this->location(), \"expected %<<-%> or %<=%>\");\n-\t  return false;\n+\t  // case v = <-c:\n+\t  if (!e->is_sink_expression())\n+\t    *val = e;\n \t}\n+      return true;\n     }\n \n-  return true;\n+  if (saw_comma)\n+    {\n+      if (closed_is_id)\n+\terror_at(this->location(), \"expected %<=%> or %<:=%>\");\n+      else\n+\terror_at(this->location(), \"expected %<=%>\");\n+      return false;\n+    }\n+\n+  if (this->peek_token()->is_op(OPERATOR_CHANOP))\n+    {\n+      // case c <- v:\n+      *is_send = true;\n+      *channel = this->verify_not_sink(e);\n+      this->advance_token();\n+      *val = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+      return true;\n+    }\n+\n+  error_at(this->location(), \"expected %<<-%> or %<=%>\");\n+  return false;\n }\n \n // ForStat = \"for\" [ Condition | ForClause | RangeClause ] Block ."}, {"sha": "d164414df7b8edd1d94502d30fae11a997d1ae63", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -246,8 +246,10 @@ class Parse\n   void type_switch_case(std::vector<Type*>*, bool*);\n   void select_stat(const Label*);\n   void comm_clause(Select_clauses*, bool* saw_default);\n-  bool comm_case(bool*, Expression**, Expression**, std::string*, bool*);\n-  bool send_or_recv_expr(bool*, Expression**, Expression**, std::string*);\n+  bool comm_case(bool*, Expression**, Expression**, Expression**,\n+\t\t std::string*, std::string*, bool*);\n+  bool send_or_recv_stmt(bool*, Expression**, Expression**, Expression**,\n+\t\t\t std::string*, std::string*);\n   void for_stat(const Label*);\n   void for_clause(Expression**, Block**);\n   void range_clause_decl(const Typed_identifier_list*, Range_clause*);"}, {"sha": "f9b0853e2eaabd2559319246ccc9fb04bef93097", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 78, "deletions": 41, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -638,7 +638,7 @@ class Assignment_operation_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -667,7 +667,8 @@ Assignment_operation_statement::do_traverse(Traverse* traverse)\n // statement.\n \n Statement*\n-Assignment_operation_statement::do_lower(Gogo*, Block* enclosing)\n+Assignment_operation_statement::do_lower(Gogo*, Named_object*,\n+\t\t\t\t\t Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -764,7 +765,7 @@ class Tuple_assignment_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -791,7 +792,7 @@ Tuple_assignment_statement::do_traverse(Traverse* traverse)\n // up into a set of single assignments.\n \n Statement*\n-Tuple_assignment_statement::do_lower(Gogo*, Block* enclosing)\n+Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -891,7 +892,7 @@ class Tuple_map_assignment_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -920,7 +921,8 @@ Tuple_map_assignment_statement::do_traverse(Traverse* traverse)\n // Lower a tuple map assignment.\n \n Statement*\n-Tuple_map_assignment_statement::do_lower(Gogo*, Block* enclosing)\n+Tuple_map_assignment_statement::do_lower(Gogo*, Named_object*,\n+\t\t\t\t\t Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -1037,7 +1039,7 @@ class Map_assignment_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1066,7 +1068,7 @@ Map_assignment_statement::do_traverse(Traverse* traverse)\n // Lower a map assignment to a function call.\n \n Statement*\n-Map_assignment_statement::do_lower(Gogo*, Block* enclosing)\n+Map_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -1145,11 +1147,11 @@ Statement::make_map_assignment(Expression* map_index,\n class Tuple_receive_assignment_statement : public Statement\n {\n  public:\n-  Tuple_receive_assignment_statement(Expression* val, Expression* success,\n+  Tuple_receive_assignment_statement(Expression* val, Expression* closed,\n \t\t\t\t     Expression* channel,\n \t\t\t\t     source_location location)\n     : Statement(STATEMENT_TUPLE_RECEIVE_ASSIGNMENT, location),\n-      val_(val), success_(success), channel_(channel)\n+      val_(val), closed_(closed), channel_(channel)\n   { }\n \n  protected:\n@@ -1161,7 +1163,7 @@ class Tuple_receive_assignment_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1170,8 +1172,8 @@ class Tuple_receive_assignment_statement : public Statement\n  private:\n   // Lvalue which receives the value from the channel.\n   Expression* val_;\n-  // Lvalue which receives whether the read succeeded or failed.\n-  Expression* success_;\n+  // Lvalue which receives whether the channel is closed.\n+  Expression* closed_;\n   // The channel on which we receive the value.\n   Expression* channel_;\n };\n@@ -1182,15 +1184,16 @@ int\n Tuple_receive_assignment_statement::do_traverse(Traverse* traverse)\n {\n   if (this->traverse_expression(traverse, &this->val_) == TRAVERSE_EXIT\n-      || this->traverse_expression(traverse, &this->success_) == TRAVERSE_EXIT)\n+      || this->traverse_expression(traverse, &this->closed_) == TRAVERSE_EXIT)\n     return TRAVERSE_EXIT;\n   return this->traverse_expression(traverse, &this->channel_);\n }\n \n // Lower to a function call.\n \n Statement*\n-Tuple_receive_assignment_statement::do_lower(Gogo*, Block* enclosing)\n+Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n+\t\t\t\t\t     Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -1212,17 +1215,17 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Block* enclosing)\n   // evaluated in the right order.\n   Move_ordered_evals moe(b);\n   this->val_->traverse_subexpressions(&moe);\n-  this->success_->traverse_subexpressions(&moe);\n+  this->closed_->traverse_subexpressions(&moe);\n \n   // var val_temp ELEMENT_TYPE\n   Temporary_statement* val_temp =\n     Statement::make_temporary(channel_type->element_type(), NULL, loc);\n   b->add_statement(val_temp);\n \n-  // var success_temp bool\n-  Temporary_statement* success_temp =\n+  // var closed_temp bool\n+  Temporary_statement* closed_temp =\n     Statement::make_temporary(Type::lookup_bool_type(), NULL, loc);\n-  b->add_statement(success_temp);\n+  b->add_statement(closed_temp);\n \n   // func chanrecv2(c chan T, val *T) bool\n   source_location bloc = BUILTINS_LOCATION;\n@@ -1240,14 +1243,14 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Block* enclosing)\n     Named_object::make_function_declaration(\"chanrecv2\", NULL, fntype, bloc);\n   chanrecv2->func_declaration_value()->set_asm_name(\"runtime.chanrecv2\");\n \n-  // success_temp = chanrecv2(channel, &val_temp)\n+  // closed_temp = chanrecv2(channel, &val_temp)\n   Expression* func = Expression::make_func_reference(chanrecv2, NULL, loc);\n   Expression_list* params = new Expression_list();\n   params->push_back(this->channel_);\n   Expression* ref = Expression::make_temporary_reference(val_temp, loc);\n   params->push_back(Expression::make_unary(OPERATOR_AND, ref, loc));\n   Expression* call = Expression::make_call(func, params, false, loc);\n-  ref = Expression::make_temporary_reference(success_temp, loc);\n+  ref = Expression::make_temporary_reference(closed_temp, loc);\n   Statement* s = Statement::make_assignment(ref, call, loc);\n   b->add_statement(s);\n \n@@ -1256,9 +1259,9 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Block* enclosing)\n   s = Statement::make_assignment(this->val_, ref, loc);\n   b->add_statement(s);\n \n-  // success = success_temp\n-  ref = Expression::make_temporary_reference(success_temp, loc);\n-  s = Statement::make_assignment(this->success_, ref, loc);\n+  // closed = closed_temp\n+  ref = Expression::make_temporary_reference(closed_temp, loc);\n+  s = Statement::make_assignment(this->closed_, ref, loc);\n   b->add_statement(s);\n \n   return Statement::make_block_statement(b, loc);\n@@ -1267,11 +1270,11 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Block* enclosing)\n // Make a nonblocking receive statement.\n \n Statement*\n-Statement::make_tuple_receive_assignment(Expression* val, Expression* success,\n+Statement::make_tuple_receive_assignment(Expression* val, Expression* closed,\n \t\t\t\t\t Expression* channel,\n \t\t\t\t\t source_location location)\n {\n-  return new Tuple_receive_assignment_statement(val, success, channel,\n+  return new Tuple_receive_assignment_statement(val, closed, channel,\n \t\t\t\t\t\tlocation);\n }\n \n@@ -1297,7 +1300,7 @@ class Tuple_type_guard_assignment_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1338,7 +1341,8 @@ Tuple_type_guard_assignment_statement::do_traverse(Traverse* traverse)\n // Lower to a function call.\n \n Statement*\n-Tuple_type_guard_assignment_statement::do_lower(Gogo*, Block* enclosing)\n+Tuple_type_guard_assignment_statement::do_lower(Gogo*, Named_object*,\n+\t\t\t\t\t\tBlock* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -1643,7 +1647,7 @@ class Inc_dec_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1659,7 +1663,7 @@ class Inc_dec_statement : public Statement\n // Lower to += or -=.\n \n Statement*\n-Inc_dec_statement::do_lower(Gogo*, Block*)\n+Inc_dec_statement::do_lower(Gogo*, Named_object*, Block*)\n {\n   source_location loc = this->location();\n \n@@ -2429,7 +2433,7 @@ Return_statement::do_traverse_assignments(Traverse_assignments* tassign)\n // panic/recover work correctly.\n \n Statement*\n-Return_statement::do_lower(Gogo*, Block* enclosing)\n+Return_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   if (this->vals_ == NULL)\n     return this;\n@@ -3530,7 +3534,7 @@ Switch_statement::do_traverse(Traverse* traverse)\n // of if statements.\n \n Statement*\n-Switch_statement::do_lower(Gogo*, Block* enclosing)\n+Switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   source_location loc = this->location();\n \n@@ -3871,7 +3875,7 @@ Type_switch_statement::do_traverse(Traverse* traverse)\n // equality testing.\n \n Statement*\n-Type_switch_statement::do_lower(Gogo*, Block* enclosing)\n+Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   const source_location loc = this->location();\n \n@@ -4079,6 +4083,11 @@ Select_clauses::Select_clause::traverse(Traverse* traverse)\n \t  if (Expression::traverse(&this->val_, traverse) == TRAVERSE_EXIT)\n \t    return TRAVERSE_EXIT;\n \t}\n+      if (this->closed_ != NULL)\n+\t{\n+\t  if (Expression::traverse(&this->closed_, traverse) == TRAVERSE_EXIT)\n+\t    return TRAVERSE_EXIT;\n+\t}\n     }\n   if (this->statements_ != NULL)\n     {\n@@ -4093,7 +4102,8 @@ Select_clauses::Select_clause::traverse(Traverse* traverse)\n // receive statements to the clauses.\n \n void\n-Select_clauses::Select_clause::lower(Block* b)\n+Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n+\t\t\t\t     Block* b)\n {\n   if (this->is_default_)\n     {\n@@ -4134,6 +4144,30 @@ Select_clauses::Select_clause::lower(Block* b)\n       send->set_for_select();\n       init->add_statement(send);\n     }\n+  else if (this->closed_ != NULL && !this->closed_->is_sink_expression())\n+    {\n+      gcc_assert(this->var_ == NULL && this->closedvar_ == NULL);\n+      if (this->val_ == NULL)\n+\tthis->val_ = Expression::make_sink(loc);\n+      Statement* s = Statement::make_tuple_receive_assignment(this->val_,\n+\t\t\t\t\t\t\t      this->closed_,\n+\t\t\t\t\t\t\t      ref, loc);\n+      init->add_statement(s);\n+    }\n+  else if (this->closedvar_ != NULL)\n+    {\n+      gcc_assert(this->val_ == NULL);\n+      Expression* val;\n+      if (this->var_ == NULL)\n+\tval = Expression::make_sink(loc);\n+      else\n+\tval = Expression::make_var_reference(this->var_, loc);\n+      Expression* closed = Expression::make_var_reference(this->closedvar_,\n+\t\t\t\t\t\t\t  loc);\n+      Statement* s = Statement::make_tuple_receive_assignment(val, closed, ref,\n+\t\t\t\t\t\t\t      loc);\n+      init->add_statement(s);\n+    }\n   else\n     {\n       Receive_expression* recv = Expression::make_receive(ref, loc);\n@@ -4151,11 +4185,13 @@ Select_clauses::Select_clause::lower(Block* b)\n \t}\n       else\n \t{\n-\t  recv->discarding_value();\n \t  init->add_statement(Statement::make_statement(recv));\n \t}\n     }\n \n+  // Lower any statements we just created.\n+  gogo->lower_block(function, init);\n+\n   if (this->statements_ != NULL)\n     init->add_statement(Statement::make_block_statement(this->statements_,\n \t\t\t\t\t\t\tloc));\n@@ -4222,12 +4258,12 @@ Select_clauses::traverse(Traverse* traverse)\n // receive statements to the clauses.\n \n void\n-Select_clauses::lower(Block* b)\n+Select_clauses::lower(Gogo* gogo, Named_object* function, Block* b)\n {\n   for (Clauses::iterator p = this->clauses_.begin();\n        p != this->clauses_.end();\n        ++p)\n-    p->lower(b);\n+    p->lower(gogo, function, b);\n }\n \n // Determine types.\n@@ -4464,12 +4500,13 @@ Select_statement::break_label()\n // explicit statements in the clauses.\n \n Statement*\n-Select_statement::do_lower(Gogo*, Block* enclosing)\n+Select_statement::do_lower(Gogo* gogo, Named_object* function,\n+\t\t\t   Block* enclosing)\n {\n   if (this->is_lowered_)\n     return this;\n   Block* b = new Block(enclosing, this->location());\n-  this->clauses_->lower(b);\n+  this->clauses_->lower(gogo, function, b);\n   this->is_lowered_ = true;\n   b->add_statement(this);\n   return Statement::make_block_statement(b, this->location());\n@@ -4521,7 +4558,7 @@ For_statement::do_traverse(Traverse* traverse)\n // complex statements make it easier to handle garbage collection.\n \n Statement*\n-For_statement::do_lower(Gogo*, Block* enclosing)\n+For_statement::do_lower(Gogo*, Named_object*, Block* enclosing)\n {\n   Statement* s;\n   source_location loc = this->location();\n@@ -4652,7 +4689,7 @@ For_range_statement::do_traverse(Traverse* traverse)\n // statements.\n \n Statement*\n-For_range_statement::do_lower(Gogo* gogo, Block* enclosing)\n+For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing)\n {\n   Type* range_type = this->range_->type();\n   if (range_type->points_to() != NULL"}, {"sha": "bb2922f180f240495095a7efb9dec352230588c6", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -162,7 +162,7 @@ class Statement\n   // Make an assignment from a nonblocking receive to a pair of\n   // variables.\n   static Statement*\n-  make_tuple_receive_assignment(Expression* val, Expression* success,\n+  make_tuple_receive_assignment(Expression* val, Expression* closed,\n \t\t\t\tExpression* channel, source_location);\n \n   // Make an assignment from a type guard to a pair of variables.\n@@ -284,11 +284,11 @@ class Statement\n \n   // Lower a statement.  This is called immediately after parsing to\n   // simplify statements for further processing.  It returns the same\n-  // Statement or a new one.  BLOCK is the block containing this\n-  // statement.\n+  // Statement or a new one.  FUNCTION is the function containing this\n+  // statement.  BLOCK is the block containing this statement.\n   Statement*\n-  lower(Gogo* gogo, Block* block)\n-  { return this->do_lower(gogo, block); }\n+  lower(Gogo* gogo, Named_object* function, Block* block)\n+  { return this->do_lower(gogo, function, block); }\n \n   // Set type information for unnamed constants.\n   void\n@@ -381,7 +381,7 @@ class Statement\n   // Implemented by the child class: lower this statement to a simpler\n   // one.\n   virtual Statement*\n-  do_lower(Gogo*, Block*)\n+  do_lower(Gogo*, Named_object*, Block*)\n   { return this; }\n \n   // Implemented by child class: set type information for unnamed\n@@ -574,7 +574,7 @@ class Return_statement : public Statement\n   do_traverse_assignments(Traverse_assignments*);\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   void\n   do_determine_types();\n@@ -649,17 +649,22 @@ class Select_clauses\n   // Add a new clause.  IS_SEND is true if this is a send clause,\n   // false for a receive clause.  For a send clause CHANNEL is the\n   // channel and VAL is the value to send.  For a receive clause\n-  // CHANNEL is the channel and VAL is either NULL or a Var_expression\n-  // for the variable to set; if VAL is NULL, VAR may be a variable\n-  // which is initialized with the received value.  IS_DEFAULT is true\n-  // if this is the default clause.  STATEMENTS is the list of\n-  // statements to execute.\n+  // CHANNEL is the channel, VAL is either NULL or a Var_expression\n+  // for the variable to set, and CLOSED is either NULL or a\n+  // Var_expression to set to whether the channel is closed.  If VAL\n+  // is NULL, VAR may be a variable to be initialized with the\n+  // received value, and CLOSEDVAR ma be a variable to be initialized\n+  // with whether the channel is closed.  IS_DEFAULT is true if this\n+  // is the default clause.  STATEMENTS is the list of statements to\n+  // execute.\n   void\n-  add(bool is_send, Expression* channel, Expression* val, Named_object* var,\n-      bool is_default, Block* statements, source_location location)\n+  add(bool is_send, Expression* channel, Expression* val, Expression* closed,\n+      Named_object* var, Named_object* closedvar, bool is_default,\n+      Block* statements, source_location location)\n   {\n-    this->clauses_.push_back(Select_clause(is_send, channel, val, var,\n-\t\t\t\t\t   is_default, statements, location));\n+    this->clauses_.push_back(Select_clause(is_send, channel, val, closed, var,\n+\t\t\t\t\t   closedvar, is_default, statements,\n+\t\t\t\t\t   location));\n   }\n \n   // Traverse the select clauses.\n@@ -668,7 +673,7 @@ class Select_clauses\n \n   // Lower statements.\n   void\n-  lower(Block*);\n+  lower(Gogo*, Named_object*, Block*);\n \n   // Determine types.\n   void\n@@ -689,16 +694,18 @@ class Select_clauses\n   {\n    public:\n     Select_clause()\n-      : channel_(NULL), val_(NULL), var_(NULL), statements_(NULL),\n-\tis_send_(false), is_default_(false)\n+      : channel_(NULL), val_(NULL), closed_(NULL), var_(NULL),\n+\tclosedvar_(NULL), statements_(NULL), is_send_(false),\n+\tis_default_(false)\n     { }\n \n     Select_clause(bool is_send, Expression* channel, Expression* val,\n-\t\t  Named_object* var, bool is_default, Block* statements,\n+\t\t  Expression* closed, Named_object* var,\n+\t\t  Named_object* closedvar, bool is_default, Block* statements,\n \t\t  source_location location)\n-      : channel_(channel), val_(val), var_(var), statements_(statements),\n-\tlocation_(location), is_send_(is_send), is_default_(is_default),\n-\tis_lowered_(false)\n+      : channel_(channel), val_(val), closed_(closed), var_(var),\n+\tclosedvar_(closedvar), statements_(statements), location_(location),\n+\tis_send_(is_send), is_default_(is_default), is_lowered_(false)\n     { gcc_assert(is_default ? channel == NULL : channel != NULL); }\n \n     // Traverse the select clause.\n@@ -707,7 +714,7 @@ class Select_clauses\n \n     // Lower statements.\n     void\n-    lower(Block*);\n+    lower(Gogo*, Named_object*, Block*);\n \n     // Determine types.\n     void\n@@ -724,20 +731,6 @@ class Select_clauses\n     channel() const\n     { return this->channel_; }\n \n-    // Return the value.  This will return NULL for the default\n-    // clause, or for a receive clause for which no value was given.\n-    Expression*\n-    val() const\n-    { return this->val_; }\n-\n-    // Return the variable to set when a receive clause is also a\n-    // variable definition (v := <- ch).  This will return NULL for\n-    // the default case, or for a send clause, or for a receive clause\n-    // which does not define a variable.\n-    Named_object*\n-    var() const\n-    { return this->var_; }\n-\n     // Return true for a send, false for a receive.\n     bool\n     is_send() const\n@@ -768,10 +761,16 @@ class Select_clauses\n    private:\n     // The channel.\n     Expression* channel_;\n-    // The value to send or the variable to set.\n+    // The value to send or the lvalue to receive into.\n     Expression* val_;\n-    // The variable to initialize, for \"case a := <- ch\".\n+    // The lvalue to set to whether the channel is closed on a\n+    // receive.\n+    Expression* closed_;\n+    // The variable to initialize, for \"case a := <-ch\".\n     Named_object* var_;\n+    // The variable to initialize to whether the channel is closed,\n+    // for \"case a, c := <-ch\".\n+    Named_object* closedvar_;\n     // The statements to execute.\n     Block* statements_;\n     // The location of this clause.\n@@ -821,7 +820,7 @@ class Select_statement : public Statement\n   { return this->clauses_->traverse(traverse); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   void\n   do_determine_types()\n@@ -1008,7 +1007,7 @@ class For_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1066,7 +1065,7 @@ class For_range_statement : public Statement\n   { gcc_unreachable(); }\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1290,7 +1289,7 @@ class Switch_statement : public Statement\n   do_traverse(Traverse*);\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)\n@@ -1436,7 +1435,7 @@ class Type_switch_statement : public Statement\n   do_traverse(Traverse*);\n \n   Statement*\n-  do_lower(Gogo*, Block*);\n+  do_lower(Gogo*, Named_object*, Block*);\n \n   tree\n   do_get_tree(Translate_context*)"}, {"sha": "c9de71f8d5e4379c73948267db90634a94254ffc", "filename": "libgo/runtime/chan.goc", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fchan.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fchan.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.goc?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -12,28 +12,22 @@ typedef struct __go_channel chan;\n \n /* Do a nonblocking channel receive.  */\n \n-func chanrecv2(c *chan, val *byte) (pres bool) {\n+func chanrecv2(c *chan, val *byte) (received bool) {\n \tif (c->element_size > 8) {\n-\t\treturn __go_receive_nonblocking_big(c, val);\n+\t\treturn __go_receive_big(c, val, 0);\n \t} else {\n-\t\tstruct __go_receive_nonblocking_small rs;\n \t\tunion {\n \t\t\tchar b[8];\n \t\t\tuint64_t v;\n \t\t} u;\n \n-\t\trs = __go_receive_nonblocking_small (c);\n-\t\tif (!rs.__success) {\n-\t\t\t__builtin_memset(val, 0, c->element_size);\n-\t\t\treturn 0;\n-\t\t}\n-\t\tu.v = rs.__val;\n+\t\tu.v = __go_receive_small_closed(c, 0, &received);\n #ifndef WORDS_BIGENDIAN\n \t\t__builtin_memcpy(val, u.b, c->element_size);\n #else\n \t\t__builtin_memcpy(val, u.b + 8 - c->element_size,\n \t\t\t\t c->element_size);\n #endif\n-\t\treturn 1;\n+\t\treturn received;\n \t}\n }"}, {"sha": "ea108289bf3974df4d697396e7577a9c62f3863a", "filename": "libgo/runtime/channel.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fchannel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fchannel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchannel.h?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -112,6 +112,9 @@ extern int __go_receive_nonblocking_acquire (struct __go_channel *);\n \n extern uint64_t __go_receive_small (struct __go_channel *, _Bool);\n \n+extern uint64_t __go_receive_small_closed (struct __go_channel *, _Bool,\n+\t\t\t\t\t   _Bool *);\n+\n extern void __go_receive_release (struct __go_channel *);\n \n struct __go_receive_nonblocking_small\n@@ -123,7 +126,7 @@ struct __go_receive_nonblocking_small\n extern struct __go_receive_nonblocking_small\n __go_receive_nonblocking_small (struct __go_channel *);\n \n-extern void __go_receive_big (struct __go_channel *, void *, _Bool);\n+extern _Bool __go_receive_big (struct __go_channel *, void *, _Bool);\n \n extern _Bool __go_receive_nonblocking_big (struct __go_channel *, void *);\n "}, {"sha": "a584fe7a2731614714094e53ce0981b2827a2f30", "filename": "libgo/runtime/go-rec-big.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fgo-rec-big.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fgo-rec-big.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rec-big.c?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -9,7 +9,7 @@\n #include \"go-panic.h\"\n #include \"channel.h\"\n \n-void\n+_Bool\n __go_receive_big (struct __go_channel *channel, void *val, _Bool for_select)\n {\n   size_t alloc_size;\n@@ -24,11 +24,13 @@ __go_receive_big (struct __go_channel *channel, void *val, _Bool for_select)\n   if (!__go_receive_acquire (channel, for_select))\n     {\n       __builtin_memset (val, 0, channel->element_size);\n-      return;\n+      return 0;\n     }\n \n   offset = channel->next_fetch * alloc_size;\n   __builtin_memcpy (val, &channel->data[offset], channel->element_size);\n \n   __go_receive_release (channel);\n+\n+  return 1;\n }"}, {"sha": "87aed3cd552fd3fef6b95d27e671c3802c6456d7", "filename": "libgo/runtime/go-rec-small.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fgo-rec-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3137991dfc4e0b6023c4b75b2ae1eb86bea32241/libgo%2Fruntime%2Fgo-rec-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rec-small.c?ref=3137991dfc4e0b6023c4b75b2ae1eb86bea32241", "patch": "@@ -263,7 +263,8 @@ __go_unlock_and_notify_selects (struct __go_channel *channel)\n /* Receive something 64 bits or smaller on a channel.  */\n \n uint64_t\n-__go_receive_small (struct __go_channel *channel, _Bool for_select)\n+__go_receive_small_closed (struct __go_channel *channel, _Bool for_select,\n+\t\t\t   _Bool *received)\n {\n   uint64_t ret;\n \n@@ -273,11 +274,26 @@ __go_receive_small (struct __go_channel *channel, _Bool for_select)\n   __go_assert (channel->element_size <= sizeof (uint64_t));\n \n   if (!__go_receive_acquire (channel, for_select))\n-    return 0;\n+    {\n+      if (received != NULL)\n+\t*received = 0;\n+      return 0;\n+    }\n \n   ret = channel->data[channel->next_fetch];\n \n   __go_receive_release (channel);\n \n+  if (received != NULL)\n+    *received = 1;\n+\n   return ret;\n }\n+\n+/* Called by the compiler.  */\n+\n+uint64_t\n+__go_receive_small (struct __go_channel *channel, _Bool for_select)\n+{\n+  return __go_receive_small_closed (channel, for_select, NULL);\n+}"}]}