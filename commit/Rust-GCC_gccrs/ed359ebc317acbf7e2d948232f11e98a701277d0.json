{"sha": "ed359ebc317acbf7e2d948232f11e98a701277d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzNTllYmMzMTdhY2JmN2UyZDk0ODIzMmYxMWU5OGE3MDEyNzdkMA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T20:55:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T20:55:33Z"}, "message": "Add peephole to eliminate unecessary clear instructions\nin strict_low_part insn sequences.\n\nFrom-SVN: r3015", "tree": {"sha": "71421c82d0fcd1dd514dc6ce697dc377073d8c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71421c82d0fcd1dd514dc6ce697dc377073d8c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed359ebc317acbf7e2d948232f11e98a701277d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed359ebc317acbf7e2d948232f11e98a701277d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed359ebc317acbf7e2d948232f11e98a701277d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed359ebc317acbf7e2d948232f11e98a701277d0/comments", "author": null, "committer": null, "parents": [{"sha": "483404b6dc558ee5c38657e06c66ba059d7b25aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483404b6dc558ee5c38657e06c66ba059d7b25aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483404b6dc558ee5c38657e06c66ba059d7b25aa"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "09fb81b64b46f266c0a95d567b8c6599dea56dea", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed359ebc317acbf7e2d948232f11e98a701277d0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed359ebc317acbf7e2d948232f11e98a701277d0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=ed359ebc317acbf7e2d948232f11e98a701277d0", "patch": "@@ -4884,6 +4884,29 @@\n   return \\\"\\\";\n }\")\n \n+(define_peephole\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(const_int 0))\n+   (set (strict_low_part (subreg:HI (match_dup 0) 0))\n+\t(match_operand:HI 1 \"general_operand\" \"rmn\"))]\n+  \"strict_low_part_peephole_ok (HImode, prev_nonnote_insn (insn), operands[0])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      if (operands[1] == const0_rtx\n+\t  && (DATA_REG_P (operands[0])\n+\t      || GET_CODE (operands[0]) == MEM)\n+\t  /* clr insns on 68000 read before writing.\n+\t     This isn't so on the 68010, but we have no alternative for it.  */\n+\t  && (TARGET_68020\n+\t      || !(GET_CODE (operands[0]) == MEM\n+\t\t   && MEM_VOLATILE_P (operands[0]))))\n+\treturn \\\"clr%.w %0\\\";\n+    }\n+  return \\\"move%.w %1,%0\\\";\n+}\")\n+\n ;; dbCC peepholes\n ;;\n ;; Turns"}]}