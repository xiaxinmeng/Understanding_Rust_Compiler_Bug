{"sha": "99e87c10036e8d45f31415ab6e3dc66c61bf4752", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllODdjMTAwMzZlOGQ0NWYzMTQxNWFiNmUzZGM2NmM2MWJmNDc1Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-05T03:46:12Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-05T03:46:12Z"}, "message": "sh.md (prget, prset): New insn types.\n\n* config/sh/sh.md (prget, prset): New insn types.\n(return delay slot): Dont' allow prset.\n(call, sfunc delay slot): Don't allow prget.\n(movsi_i, movsi_ie, movsi_i_lowpart): Create separate alternatives\nfor prset and prget.\n\nFrom-SVN: r38701", "tree": {"sha": "45d123d24d8aa9ce657c4be0271ca2c3c4325fb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d123d24d8aa9ce657c4be0271ca2c3c4325fb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e87c10036e8d45f31415ab6e3dc66c61bf4752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e87c10036e8d45f31415ab6e3dc66c61bf4752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e87c10036e8d45f31415ab6e3dc66c61bf4752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e87c10036e8d45f31415ab6e3dc66c61bf4752/comments", "author": null, "committer": null, "parents": [{"sha": "f1d4ac807fef11650c2d3ccf512ba74bc4fe2523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d4ac807fef11650c2d3ccf512ba74bc4fe2523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d4ac807fef11650c2d3ccf512ba74bc4fe2523"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "5322db589302da595017209f4c67ff758981c8c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e87c10036e8d45f31415ab6e3dc66c61bf4752/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e87c10036e8d45f31415ab6e3dc66c61bf4752/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99e87c10036e8d45f31415ab6e3dc66c61bf4752", "patch": "@@ -1,3 +1,11 @@\n+2001-01-05  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (prget, prset): New insn types.\n+\t(return delay slot): Dont' allow prset.\n+\t(call, sfunc delay slot): Don't allow prget.\n+\t(movsi_i, movsi_ie, movsi_i_lowpart): Create separate alternatives\n+\tfor prset and prget.\n+\n 2001-01-05  Michael Hayes  <mhayes@redhat.com>\n \n \t* loop.h (struct loop_reg): New."}, {"sha": "c40f7596f388c2f37c85e83c5d958942e798f893", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e87c10036e8d45f31415ab6e3dc66c61bf4752/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e87c10036e8d45f31415ab6e3dc66c61bf4752/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=99e87c10036e8d45f31415ab6e3dc66c61bf4752", "patch": "@@ -161,7 +161,9 @@\n ;; dmpy\t\tlongword or doublelongword precision integer multiply\n ;; return\trts\n ;; pload\tload of pr reg, which can't be put into delay slot of rts\n+;; prset\tcopy register to pr reg, ditto\n ;; pstore\tstore of pr reg, which can't be put into delay slot of jsr\n+;; prget\tcopy pr to register, ditto\n ;; pcload\tpc relative load of constant value\n ;; pcload_si\tLikewise, SImode variant for general register.\n ;; rte\t\treturn from exception\n@@ -175,7 +177,7 @@\n ;; nil\t\tno-op move, will be deleted.\n \n (define_attr \"type\"\n- \"cbranch,jump,jump_ind,arith,arith3,arith3b,dyn_shift,other,load,load_si,store,move,fmove,smpy,dmpy,return,pload,pstore,pcload,pcload_si,rte,sfunc,call,fp,fdiv,dfp_arith,dfp_cmp,dfp_conv,dfdiv,gp_fpul,nil\"\n+ \"cbranch,jump,jump_ind,arith,arith3,arith3b,dyn_shift,other,load,load_si,store,move,fmove,smpy,dmpy,return,pload,prset,pstore,prget,pcload,pcload_si,rte,sfunc,call,fp,fdiv,dfp_arith,dfp_cmp,dfp_conv,dfdiv,gp_fpul,nil\"\n   (const_string \"other\"))\n \n ;; Indicate what precision must be selected in fpscr for this insn, if any.\n@@ -568,7 +570,7 @@\n   (eq_attr \"type\" \"return\")\n   [(and (eq_attr \"in_delay_slot\" \"yes\")\n \t(ior (and (eq_attr \"interrupt_function\" \"no\")\n-\t\t  (eq_attr \"type\" \"!pload\"))\n+\t\t  (eq_attr \"type\" \"!pload,prset\"))\n \t     (and (eq_attr \"interrupt_function\" \"yes\")\n \t\t  (eq_attr \"hit_stack\" \"no\")))) (nil) (nil)])\n \n@@ -578,7 +580,7 @@\n (define_delay\n   (ior (eq_attr \"type\" \"call\") (eq_attr \"type\" \"sfunc\"))\n   [(and (eq_attr \"in_delay_slot\" \"yes\")\n-\t(eq_attr \"type\" \"!pstore\")) (nil) (nil)])\n+\t(eq_attr \"type\" \"!pstore,prget\")) (nil) (nil)])\n \n ;; Say that we have annulled true branches, since this gives smaller and\n ;; faster code when branches are predicted as not taken.\n@@ -2402,8 +2404,8 @@\n ;; (set (subreg:SI (mem:QI (plus:SI (reg:SI SP_REG) (const_int 12)) 0) 0)\n ;; (made from (set (subreg:SI (reg:QI ###) 0) ) into T.\n (define_insn \"movsi_i\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,m,<,<,xl,x,l,r\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,xl,t,r,x,l,r,>,>,i\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,r\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,x,l,t,r,x,l,r,r,>,>,i\"))]\n   \"\n    ! TARGET_SH3E\n    && (register_operand (operands[0], SImode)\n@@ -2414,24 +2416,26 @@\n \tcmp/pl\t%1\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n+\tsts\t%1,%0\n \tmovt\t%0\n \tmov.l\t%1,%0\n \tsts.l\t%1,%0\n \tsts.l\t%1,%0\n \tlds\t%1,%0\n+\tlds\t%1,%0\n \tlds.l\t%1,%0\n \tlds.l\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"pcload_si,move,*,load_si,move,move,store,store,pstore,move,load,pload,pcload_si\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"pcload_si,move,*,load_si,move,prget,move,store,store,pstore,move,prset,load,pload,pcload_si\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n ;; t/r must come after r/r, lest reload will try to reload stuff like\n ;; (subreg:SI (reg:SF FR14_REG) 0) into T (compiling stdlib/strtod.c -m3e -O2)\n ;; ??? This allows moves from macl to fpul to be recognized, but these moves\n ;; will require a reload.\n (define_insn \"movsi_ie\"\n-  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,m,<,<,xl,x,l,y,r,y,r,y\")\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,xl,t,r,x,l,r,>,>,>,i,r,y,y\"))]\n+  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,r,m,<,<,x,l,x,l,y,r,y,r,y\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,r,mr,x,l,t,r,x,l,r,r,>,>,>,i,r,y,y\"))]\n   \"TARGET_SH3E\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -2441,35 +2445,38 @@\n \tcmp/pl\t%1\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n+\tsts\t%1,%0\n \tmovt\t%0\n \tmov.l\t%1,%0\n \tsts.l\t%1,%0\n \tsts.l\t%1,%0\n \tlds\t%1,%0\n+\tlds\t%1,%0\n \tlds.l\t%1,%0\n \tlds.l\t%1,%0\n \tlds.l\t%1,%0\n \tfake\t%1,%0\n \tlds\t%1,%0\n \tsts\t%1,%0\n \t! move optimized away\"\n-  [(set_attr \"type\" \"pcload_si,move,*,load_si,move,move,store,store,pstore,move,load,pload,load,pcload_si,gp_fpul,gp_fpul,nil\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,0\")])\n+  [(set_attr \"type\" \"pcload_si,move,*,load_si,move,prget,move,store,store,pstore,move,prset,load,pload,load,pcload_si,gp_fpul,gp_fpul,nil\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,0\")])\n \n (define_insn \"movsi_i_lowpart\"\n-  [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,m,r\"))\n-\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,mr,xl,t,r,i\"))]\n+  [(set (strict_low_part (match_operand:SI 0 \"general_movdst_operand\" \"+r,r,r,r,r,r,m,r\"))\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"Q,rI,mr,x,l,t,r,i\"))]\n    \"register_operand (operands[0], SImode)\n     || register_operand (operands[1], SImode)\"\n   \"@\n \tmov.l\t%1,%0\n \tmov\t%1,%0\n \tmov.l\t%1,%0\n \tsts\t%1,%0\n+\tsts\t%1,%0\n \tmovt\t%0\n \tmov.l\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"pcload,move,load,move,move,store,pcload\")])\n+  [(set_attr \"type\" \"pcload,move,load,move,prget,move,store,pcload\")])\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")"}]}