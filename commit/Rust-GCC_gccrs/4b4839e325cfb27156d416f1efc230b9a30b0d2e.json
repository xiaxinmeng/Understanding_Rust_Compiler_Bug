{"sha": "4b4839e325cfb27156d416f1efc230b9a30b0d2e", "node_id": "C_kwDOANBUbNoAKDRiNDgzOWUzMjVjZmIyNzE1NmQ0MTZmMWVmYzIzMGI5YTMwYjBkMmU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-10T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-10T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "e31c9683c314e620371ab8491e1c725872c965a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e31c9683c314e620371ab8491e1c725872c965a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b4839e325cfb27156d416f1efc230b9a30b0d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4839e325cfb27156d416f1efc230b9a30b0d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4839e325cfb27156d416f1efc230b9a30b0d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4839e325cfb27156d416f1efc230b9a30b0d2e/comments", "author": null, "committer": null, "parents": [{"sha": "2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc"}], "stats": {"total": 440, "additions": 439, "deletions": 1}, "files": [{"sha": "4d39b473f4a27e139403fdea72aef3cd4236f192", "filename": "gcc/ChangeLog", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,222 @@\n+2021-12-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi (max-inline-functions-called-once-loop-depth,\n+\tmax-inline-functions-called-once-insns): New parameters.\n+\t* ipa-inline.c (check_callers): Handle\n+\tparam_inline_functions_called_once_loop_depth and\n+\tparam_inline_functions_called_once_insns.\n+\t(edge_badness): Fix linebreaks.\n+\t* params.opt (param=max-inline-functions-called-once-loop-depth,\n+\tparam=max-inline-functions-called-once-insn): New params.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/103215\n+\t* pointer-query.cc (access_ref::merge_ref): Extend the offset and\n+\tsize of the merged object instead of using the larger.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101751\n+\t* doc/extend.texi (attribute access): Adjust.\n+\t* gimple-ssa-warn-access.cc (pass_waccess::maybe_check_access_sizes):\n+\tTreat access mode none on a void* argument as expecting as few as\n+\tzero bytes.\n+\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* config/aarch64/aarch64-sve-builtins.cc (gt_pch_nx): Change type of\n+\tsecond argument from function with 2 pointer arguments to function\n+\twith 3 pointer arguments.\n+\n+2021-12-09  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/aarch64/aarch64-vxworks.h (TARGET_OS_CPP_BUILTINS):\n+\tUse VX_CPU_PREFIX in CPU definitions.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* pointer-query.cc (access_ref::dump): Define new function\n+\t(pointer_query::dump): Call it.\n+\t* pointer-query.h (access_ref::dump): Declare new function.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* pointer-query.cc (compute_objsize_r): Add an argument.\n+\t(gimple_call_return_array): Pass a new argument to compute_objsize_r.\n+\t(access_ref::merge_ref): Same.\n+\t(access_ref::inform_access): Add an argument and use it.\n+\t(access_data::access_data): Initialize new member.\n+\t(handle_min_max_size): Pass a new argument to compute_objsize_r.\n+\t(handle_decl): New function.\n+\t(handle_array_ref): Pass a new argument to compute_objsize_r.\n+\tAvoid incrementing deref.\n+\t(set_component_ref_size): New function.\n+\t(handle_component_ref): New function.\n+\t(handle_mem_ref): Pass a new argument to compute_objsize_r.\n+\tOnly increment deref after successfully computing object size.\n+\t(handle_ssa_name): New function.\n+\t(compute_objsize_r): Move code into helpers and call them.\n+\t(compute_objsize): Pass a new argument to compute_objsize_r.\n+\t* pointer-query.h (access_ref::inform_access): Add an argument.\n+\t(access_data::ostype): New member.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* pointer-query.cc (access_ref::merge_ref): Define new function.\n+\t(access_ref::get_ref): Move code into merge_ref and call it.\n+\t* pointer-query.h (access_ref::merge_ref): Declare new function.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-restrict.c (builtin_access::builtin_access): Pass\n+\tGIMPLE statement to compute_objsize.\n+\t* pointer-query.cc (compute_objsize): Add a statement argument.\n+\t* pointer-query.h (compute_objsize): Define a new overload.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (check_access): Adjust to member name\n+\tchange.\n+\t(pass_waccess::check_strncmp): Same.\n+\t* pointer-query.cc (access_ref::access_ref): Remove arguments.\n+\tSimpilfy.\n+\t(access_data::access_data): Define new ctors.\n+\t(access_data::set_bound): Define new member function.\n+\t(compute_objsize_r): Remove unnecessary code.\n+\t* pointer-query.h (struct access_ref): Remove ctor arguments.\n+\t(struct access_data): Declare ctor overloads.\n+\t(access_data::dst_bndrng): New member.\n+\t(access_data::src_bndrng): New member.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/103143\n+\t* pointer-query.cc (gimple_call_return_array): Call compute_objsize_r.\n+\n+2021-12-09  Olivier Hainque  <hainque@adacore.com>\n+\t    Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* Makefile.in (T_STDINT_GCC_H): New variable, path to\n+\tstdint-gcc.h that a target configuration may override when\n+\tuse_gcc_stdint is \"provide\".\n+\t(stmp-int-hdrs): Depend on it and copy that for\n+\tUSE_GCC_INT=provide.\n+\t* config.gcc (vxworks): Revert to use_gcc_stdint=provide.\n+\t* config/t-vxworks (T_STDINT_GCC_H): Define, as vxw-stdint-gcc.h.\n+\t(vxw-stdint-gcc.h): New target, produced from the original\n+\tstdint-gcc.h.\n+\t(vxw-glimits.h): Use an automatic variable to designate the\n+\tfirst and only prerequisite.\n+\t* config/vxworks/stdint.h: Remove.\n+\n+2021-12-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR pch/71934\n+\t* config/host-darwin.c (SAFE_ALLOC_SIZE): Remove.\n+\t(darwin_gt_pch_get_address): Rework for relocatable PCH.\n+\t(darwin_gt_pch_use_address): Likewise.\n+\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* config/host-darwin.c (darwin_gt_pch_use_address): When reading\n+\tmanually the file into mapped area, update mapped_addr as\n+\tan automatic variable rather than addr which is a reference parameter.\n+\t* config/host-hpux.c (hpux_gt_pch_use_address): When reading\n+\tmanually the file into mapped area, update addr as\n+\tan automatic variable rather than base which is a reference parameter.\n+\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* coretypes.h (gt_pointer_operator): Use 3 pointer arguments instead\n+\tof two.\n+\t* gengtype.c (struct walk_type_data): Add in_nested_ptr argument.\n+\t(walk_type): Temporarily set d->in_nested_ptr around nested_ptr\n+\thandling.\n+\t(write_types_local_user_process_field): Pass a new middle pointer\n+\tto gt_pointer_operator op calls, if d->in_nested_ptr pass there\n+\taddress of d->prev_val[2], otherwise NULL.\n+\t(write_types_local_process_field): Likewise.\n+\t* ggc-common.c (relocate_ptrs): Add real_ptr_p argument.  If equal\n+\tto ptr_p, do nothing, otherwise if NULL remember ptr_p's\n+\tor if non-NULL real_ptr_p's corresponding new address in\n+\treloc_addrs_vec.\n+\t(reloc_addrs_vec): New variable.\n+\t(compare_ptr, read_uleb128, write_uleb128): New functions.\n+\t(gt_pch_save): When iterating over objects through relocate_ptrs,\n+\tsave current i into state.ptrs_i.  Sort reloc_addrs_vec and emit\n+\tit as uleb128 of differences between pointer addresses into the\n+\tPCH file.\n+\t(gt_pch_restore): Allow restoring of PCH to a different address\n+\tthan the preferred one, in that case adjust global pointers by bias\n+\tand also adjust by bias addresses read from the relocation table\n+\tas uleb128 differences.  Otherwise fseek over it.  Perform\n+\tgt_pch_restore_stringpool only after adjusting callbacks and for\n+\tcallback adjustments also take into account the bias.\n+\t(default_gt_pch_use_address): Change type of first argument from\n+\tvoid * to void *&.\n+\t(mmap_gt_pch_use_address): Likewise.\n+\t* ggc-tests.c (gt_pch_nx): Pass NULL as new middle argument to op.\n+\t* hash-map.h (hash_map::pch_nx_helper): Likewise.\n+\t(gt_pch_nx): Likewise.\n+\t* hash-set.h (gt_pch_nx): Likewise.\n+\t* hash-table.h (gt_pch_nx): Likewise.\n+\t* hash-traits.h (ggc_remove::pch_nx): Likewise.\n+\t* hosthooks-def.h (default_gt_pch_use_address): Change type of first\n+\targument from void * to void *&.\n+\t(mmap_gt_pch_use_address): Likewise.\n+\t* hosthooks.h (struct host_hooks): Change type of first argument of\n+\tgt_pch_use_address hook from void * to void *&.\n+\t* machmode.h (gt_pch_nx): Expect a callback with 3 pointers instead of\n+\ttwo in the middle argument.\n+\t* poly-int.h (gt_pch_nx): Likewise.\n+\t* stringpool.c (gt_pch_nx): Pass NULL as new middle argument to op.\n+\t* tree-cfg.c (gt_pch_nx): Likewise, except for LOCATION_BLOCK pass\n+\tthe same &(block) twice.\n+\t* value-range.h (gt_pch_nx): Pass NULL as new middle argument to op.\n+\t* vec.h (gt_pch_nx): Likewise.\n+\t* wide-int.h (gt_pch_nx): Likewise.\n+\t* config/host-darwin.c (darwin_gt_pch_use_address): Change type of\n+\tfirst argument from void * to void *&.\n+\t* config/host-darwin.h (darwin_gt_pch_use_address): Likewise.\n+\t* config/host-hpux.c (hpux_gt_pch_use_address): Likewise.\n+\t* config/host-linux.c (linux_gt_pch_use_address): Likewise.  If\n+\tit couldn't succeed to mmap at the preferred location, set base\n+\tto the actual one.  Update addr in the manual reading loop instead of\n+\tbase.\n+\t* config/host-netbsd.c (netbsd_gt_pch_use_address): Change type of\n+\tfirst argument from void * to void *&.\n+\t* config/host-openbsd.c (openbsd_gt_pch_use_address): Likewise.\n+\t* config/host-solaris.c (sol_gt_pch_use_address): Likewise.\n+\t* config/i386/host-mingw32.c (mingw32_gt_pch_use_address): Likewise.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_init_file): Pass NULL\n+\tas new middle argument to op in the generated code.\n+\t* doc/gty.texi: Adjust samples for the addition of middle pointer\n+\tto gt_pointer_operator callback.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/103097\n+\t* reg-stack.c (convert_regs_1): Move any_malformed_asm\n+\tresetting...\n+\t(reg_to_stack): ... here.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/103302\n+\t* expr.c (emit_move_multi_word): Skip clobber during lra.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/103024\n+\tPR middle-end/103530\n+\t* gimple-harden-conditionals.cc (non_eh_succ_edge): New.\n+\t(pass_harden_compares::execute): Accept 1-bit integral types,\n+\tand cope with throwing compares.\n+\n 2021-12-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.h (DARWIN_PIE_SPEC): Add -no_pie when"}, {"sha": "fa936bb21e60a47841f3b261a9f1d6de21c3e4fb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1 +1 @@\n-20211209\n+20211210"}, {"sha": "2ff37d095b7a6869ee6151f6b5ea759834129340", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,9 @@\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* gcc-interface/decl.c (gt_pch_nx): Pass NULL as new middle argument\n+\tto op.\n+\n 2021-12-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Make-lang.in (ADA_GENERATED_FILES): Add warning."}, {"sha": "66f28fb860a385aa2c8a32280d8989162adc19b7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,9 @@\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* c-pch.c (c_common_no_more_pch): Pass a temporary void * var\n+\twith NULL value instead of NULL to host_hooks.gt_pch_use_address.\n+\n 2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR pch/71934"}, {"sha": "d89930260c6fda30a5511a12d6f3e3312bb8d3c8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,9 @@\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* c-decl.c (resort_field_decl_cmp): Pass the same pointer twice\n+\tto resort_data.new_value.\n+\n 2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* c-parser.c (struct omp_dim): New struct type for use inside"}, {"sha": "3ea43f142ceed8edc474d82ec6cc2f607af5149e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,22 @@\n+2021-12-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103401\n+\t* parser.c (cp_parser_decltype): Clear\n+\tauto_is_implicit_function_template_parm_p.\n+\t(cp_parser_type_id_1): Give errors only when !cp_parser_simulate_error.\n+\t(cp_parser_parameter_declaration): Clear\n+\tauto_is_implicit_function_template_parm_p after parsing the\n+\tdecl-specifier-seq.\n+\t(cp_parser_sizeof_operand): Clear\n+\tauto_is_implicit_function_template_parm_p.\n+\n+2021-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR pch/71934\n+\t* module.cc (nop): Add another void * argument.\n+\t* name-lookup.c (resort_member_name_cmp): Pass the same pointer twice\n+\tto resort_data.new_value.\n+\n 2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* parser.c (struct omp_dim): New struct type for use inside"}, {"sha": "add71bd3cd6266140a46f71ae78bbf77fc572056", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,7 @@\n+2021-12-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* expr.cc: Call memcpy only when length != 0.\n+\n 2021-12-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 568496d5b."}, {"sha": "c0f4cd249c17ad424c6ea83851fe6a90d6455a87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,54 @@\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/103215\n+\t* gcc.dg/Wstringop-overflow-58.c: Adjust and xfail expected warnings.\n+\t* gcc.dg/Wstringop-overflow-59.c: Same.\n+\t* gcc.dg/warn-strnlen-no-nul.c: Same.\n+\t* gcc.dg/Warray-bounds-91.c: New test.\n+\t* gcc.dg/Warray-bounds-92.c: New test.\n+\t* gcc.dg/Wstringop-overflow-85.c: New test.\n+\t* gcc.dg/Wstringop-overflow-87.c: New test.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101751\n+\t* gcc.dg/Wstringop-overflow-86.c: New test.\n+\n+2021-12-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/103143\n+\t* gcc.dg/Wstringop-overflow-83.c: New test.\n+\n+2021-12-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/103401\n+\t* g++.dg/cpp1y/lambda-generic-85713-2.C: Add dg-error.\n+\t* g++.dg/cpp1y/pr60054.C: Adjust dg-error.\n+\t* g++.dg/cpp1y/pr60332.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-2.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979-3.C: Likewise.\n+\t* g++.dg/cpp2a/concepts-pr84979.C: Likewise.\n+\t* g++.dg/cpp23/auto-fncast7.C: New test.\n+\t* g++.dg/cpp23/auto-fncast8.C: New test.\n+\t* g++.dg/cpp23/auto-fncast9.C: New test.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/103097\n+\t* gcc.target/i386/pr103097.c: New.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/103302\n+\t* gcc.target/riscv/pr103302.c: New.\n+\n+2021-12-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/103024\n+\tPR middle-end/103530\n+\t* g++.dg/pr103024.C: New.\n+\t* g++.dg/pr103530.C: New.\n+\n 2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103609"}, {"sha": "c6b39511251fba4eebb3f5e78e587f0c4b48c548", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,15 @@\n+2021-12-09  Fred Konrad  <konrad@adacore.com>\n+\n+\t* config.host (powerpc*-wrs-vxworks7*): Fix path to\n+\trs6000/t-ppc64-fp, relative to config/ not libgcc/.\n+\n+2021-12-09  Olivier Hainque  <hainque@adacore.com>\n+\t    Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n+\n+\t* config/t-vxworks: Set CRTSTUFF_T_CFLAGS to\n+\t$(LIBGCC2_INCLUDES).\n+\t* config/t-vxworks7: Likewise.\n+\n 2021-12-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config.host (*-*-darwin*): Add logic to build a shared"}, {"sha": "92ef7143589bb9e41000ea78ccf130cbb2794872", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,10 @@\n+2021-12-09  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* testsuite/libgomp.c++/target-lambda-1.C: Only run under\n+\t\"target offload_device_nonshared_as\"\n+\t* testsuite/libgomp.c++/target-this-3.C: Likewise.\n+\t* testsuite/libgomp.c++/target-this-4.C: Likewise.\n+\n 2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* target.c (gomp_map_vars_existing): Make sure attached pointer is"}, {"sha": "c5d95e4f3855aee6a3bbe9fa3009d170ee81b979", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4839e325cfb27156d416f1efc230b9a30b0d2e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b4839e325cfb27156d416f1efc230b9a30b0d2e", "patch": "@@ -1,3 +1,111 @@\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (operator==, operator<=>): Define\n+\toverloads for homogeneous specializations of reverse_iterator,\n+\t__normal_iterator and move_iterator.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Remove\n+\tdg-error for c++20.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85813\n+\t* libsupc++/exception_ptr.h (__dest_thunk): Add macro for\n+\tdestructor calling convention.\n+\t(make_exception_ptr): Enable non-throwing implementation for\n+\t-fno-exceptions and for non-standard calling conventions. Use\n+\talways_inline attribute on the useless no-rtti no-exceptions\n+\tdefinition.\n+\t* testsuite/18_support/exception_ptr/64241.cc: Add -fno-rtti so\n+\tthe no-op implementation is still used.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103630\n+\t* libsupc++/exception_ptr.h (exception_ptr): Fix exception\n+\tspecifications on inline definitions.\n+\t(make_exception_ptr): Decay the template parameter. Use typeid\n+\tof the static type.\n+\t* testsuite/18_support/exception_ptr/103630.cc: New test.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59769\n+\t* config/io/basic_file_stdio.cc (fopen_mode): Add support for\n+\texclusive mode.\n+\t* include/bits/ios_base.h (_S_noreplace): Define new enumerator.\n+\t(ios_base::__noreplace): Define.\n+\t(ios_base::noreplace): Define for C++23.\n+\t* include/std/version (__cpp_lib_ios_noreplace): Define.\n+\t* testsuite/27_io/basic_ofstream/open/char/noreplace.cc: New test.\n+\t* testsuite/27_io/basic_ofstream/open/wchar_t/noreplace.cc: New test.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103382\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.11): Do not export old\n+\tsymbol if .symver renaming is supported.\n+\t(GLIBCXX_3.4.30): Export new symbol if .symver renaming is\n+\tsupported.\n+\t* doc/xml/manual/evolution.xml: Document change.\n+\t* doc/html/manual/api.html: Regenerate.\n+\t* include/bits/std_mutex.h (__condvar::wait, __condvar::wait_until):\n+\tRemove noexcept.\n+\t* include/std/condition_variable (condition_variable::wait):\n+\tLikewise.\n+\t* src/c++11/condition_variable.cc (condition_variable::wait):\n+\tLikewise.\n+\t* src/c++11/compatibility-condvar.cc (__nothrow_wait_cv::wait):\n+\tDefine nothrow wrapper around std::condition_variable::wait and\n+\texport the old symbol as an alias to it.\n+\t* testsuite/30_threads/condition_variable/members/103382.cc: New test.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92300\n+\t* include/bits/stl_map.h (insert(Pair&&), emplace(Args&&...)):\n+\tCheck whether the arguments can be looked up directly without\n+\tconstructing a temporary node first.\n+\t* include/bits/stl_pair.h (__is_pair): Move to here, from ...\n+\t* include/bits/uses_allocator_args.h (__is_pair): ... here.\n+\t* testsuite/23_containers/map/modifiers/emplace/92300.cc: New test.\n+\t* testsuite/23_containers/map/modifiers/insert/92300.cc: New test.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h (basic_string::_M_leak_hard): Do not\n+\treallocate an empty string.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103332\n+\tPR libstdc++/102958\n+\tPR libstdc++/103483\n+\t* include/bits/char_traits.h: Suppress stringop and array-bounds\n+\twarnings.\n+\n+2021-12-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/64135\n+\t* config/allocator/new_allocator_base.h: Include\n+\t<bits/new_allocator.h> instead of <ext/new_allocator.h>.\n+\t(__allocator_base): Use std::__new_allocator instead of\n+\t__gnu_cxx::new_allocator.\n+\t* doc/xml/manual/allocator.xml: Document new default base class\n+\tfor std::allocator.\n+\t* doc/xml/manual/evolution.xml: Likewise.\n+\t* doc/html/*: Regenerate.\n+\t* include/Makefile.am: Add bits/new_allocator.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/memory_resource (new_delete_resource):\n+\tUse std::__new_allocator instead of __gnu_cxx::new_allocator.\n+\t* include/ext/new_allocator.h (new_allocator): Derive from\n+\tstd::__new_allocator. Move implementation to ...\n+\t* include/bits/new_allocator.h: New file.\n+\t* testsuite/20_util/allocator/64135.cc: New test.\n+\n 2021-12-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_release()):"}]}