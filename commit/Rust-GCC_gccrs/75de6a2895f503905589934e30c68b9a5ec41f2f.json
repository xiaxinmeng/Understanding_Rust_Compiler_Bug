{"sha": "75de6a2895f503905589934e30c68b9a5ec41f2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkZTZhMjg5NWY1MDM5MDU1ODk5MzRlMzBjNjhiOWE1ZWM0MWYyZg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-13T12:34:12Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-11T16:22:28Z"}, "message": "arm: Auto-vectorization for MVE: vorr\n\nThis patch enables MVE vorrq instructions for auto-vectorization.  MVE\nvorrq insns in mve.md are modified to use ior instead of unspec\nexpression to support ior<mode>3.  The ior<mode>3 expander is added to\nvec-common.md\n\n2020-12-03  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (supf): Remove VORRQ_S and VORRQ_U.\n\t(VORRQ): Remove.\n\t* config/arm/mve.md (mve_vorrq_s<mode>): New entry for vorr\n\tinstruction using expression ior.\n\t(mve_vorrq_u<mode>): New expander.\n\t(mve_vorrq_f<mode>): Use ior code instead of unspec.\n\t* config/arm/neon.md (ior<mode>3): Renamed into ior<mode>3_neon.\n\t* config/arm/predicates.md (imm_for_neon_logic_operand): Enable\n\tfor MVE.\n\t* config/arm/unspecs.md (VORRQ_S, VORRQ_U, VORRQ_F): Remove.\n\t* config/arm/vec-common.md (ior<mode>3): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vorr.c: Add vorr tests.", "tree": {"sha": "c9afb08bd9a03561439f0b5299ef3a1c437adce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9afb08bd9a03561439f0b5299ef3a1c437adce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75de6a2895f503905589934e30c68b9a5ec41f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75de6a2895f503905589934e30c68b9a5ec41f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75de6a2895f503905589934e30c68b9a5ec41f2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75de6a2895f503905589934e30c68b9a5ec41f2f/comments", "author": null, "committer": null, "parents": [{"sha": "f7ad4446274831234e5acd3506fd2e01c7594c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ad4446274831234e5acd3506fd2e01c7594c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ad4446274831234e5acd3506fd2e01c7594c6a"}], "stats": {"total": 114, "additions": 97, "deletions": 17}, "files": [{"sha": "f0e1d605cd0386c2b1ff81828c7a2f124af4bba2", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -1252,8 +1252,8 @@\n \t\t       (VMULLBQ_INT_S \"s\") (VMULLBQ_INT_U \"u\") (VQADDQ_S \"s\")\n \t\t       (VMULLTQ_INT_S \"s\") (VMULLTQ_INT_U \"u\") (VQADDQ_U \"u\")\n \t\t       (VMULQ_N_S \"s\") (VMULQ_N_U \"u\") (VMULQ_S \"s\")\n-\t\t       (VMULQ_U \"u\") (VORNQ_S \"s\") (VORNQ_U \"u\") (VORRQ_S \"s\")\n-\t\t       (VORRQ_U \"u\") (VQADDQ_N_S \"s\") (VQADDQ_N_U \"u\")\n+\t\t       (VMULQ_U \"u\") (VORNQ_S \"s\") (VORNQ_U \"u\")\n+\t\t       (VQADDQ_N_S \"s\") (VQADDQ_N_U \"u\")\n \t\t       (VQRSHLQ_N_S \"s\") (VQRSHLQ_N_U \"u\") (VQRSHLQ_S \"s\")\n \t\t       (VQRSHLQ_U \"u\") (VQSHLQ_N_S \"s\")\t(VQSHLQ_N_U \"u\")\n \t\t       (VQSHLQ_R_S \"s\") (VQSHLQ_R_U \"u\") (VQSHLQ_S \"s\")\n@@ -1528,7 +1528,6 @@\n (define_int_iterator VMULQ [VMULQ_U VMULQ_S])\n (define_int_iterator VMULQ_N [VMULQ_N_U VMULQ_N_S])\n (define_int_iterator VORNQ [VORNQ_U VORNQ_S])\n-(define_int_iterator VORRQ [VORRQ_S VORRQ_U])\n (define_int_iterator VQADDQ [VQADDQ_U VQADDQ_S])\n (define_int_iterator VQADDQ_N [VQADDQ_N_S VQADDQ_N_U])\n (define_int_iterator VQRSHLQ [VQRSHLQ_S VQRSHLQ_U])"}, {"sha": "4b2e46afc196df8133d81198e5e1d57a7a27ccae", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -1613,17 +1613,30 @@\n ;;\n ;; [vorrq_s, vorrq_u])\n ;;\n-(define_insn \"mve_vorrq_<supf><mode>\"\n+;; signed and unsigned versions are the same: define the unsigned\n+;; insn, and use an expander for the signed one as we still reference\n+;; both names from arm_mve.h.\n+;; We use the same code as in neon.md (TODO: avoid this duplication).\n+(define_insn \"mve_vorrq_s<mode>\"\n   [\n-   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VORRQ))\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w,w\")\n+\t(ior:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w,0\")\n+\t\t   (match_operand:MVE_2 2 \"neon_logic_op2\" \"w,Dl\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vorr %q0, %q1, %q2\"\n+  \"@\n+   vorr\\t%q0, %q1, %q2\n+   * return neon_output_logic_immediate (\\\"vorr\\\", &operands[2], <MODE>mode, 0, VALID_NEON_QREG_MODE (<MODE>mode));\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+(define_expand \"mve_vorrq_u<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(ior:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\")\n+\t\t   (match_operand:MVE_2 2 \"neon_logic_op2\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n \n ;;\n ;; [vqaddq_n_s, vqaddq_n_u])\n@@ -2658,9 +2671,8 @@\n (define_insn \"mve_vorrq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VORRQ_F))\n+\t(ior:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t   (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vorr %q0, %q1, %q2\""}, {"sha": "669c34da4e0c67d714455fbf07832029abc7d19d", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -690,7 +690,7 @@\n    (set_attr \"predicable\" \"no\")]\n )\n \n-(define_insn \"ior<mode>3\"\n+(define_insn \"ior<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")\n \t\t (match_operand:VDQ 2 \"neon_logic_op2\" \"w,Dl\")))]"}, {"sha": "9f863e1b33e2b7f2b8eaa73d2131c7ce58465d54", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -118,7 +118,7 @@\n (define_predicate \"imm_for_neon_logic_operand\"\n   (match_code \"const_vector\")\n {\n-  return (TARGET_NEON\n+  return ((TARGET_NEON || TARGET_HAVE_MVE)\n           && neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL));\n })\n "}, {"sha": "c2076c9ce6fcabdd2bb94d124670c39c18a30495", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -624,7 +624,6 @@\n   VMULQ_S\n   VMULQ_N_S\n   VORNQ_S\n-  VORRQ_S\n   VQADDQ_S\n   VQADDQ_N_S\n   VQRSHLQ_S\n@@ -670,7 +669,6 @@\n   VMULQ_U\n   VMULQ_N_U\n   VORNQ_U\n-  VORRQ_U\n   VQADDQ_U\n   VQADDQ_N_U\n   VQRSHLQ_U\n@@ -750,7 +748,6 @@\n   VMULQ_F\n   VMULQ_N_F\n   VORNQ_F\n-  VORRQ_F\n   VSUBQ_F\n   VADDLVAQ_U\n   VADDLVAQ_S"}, {"sha": "df0a6cda3d543a17e600fcda517cea24c85e9730", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -180,3 +180,11 @@\n   \"TARGET_NEON\n    || TARGET_HAVE_MVE\"\n )\n+\n+(define_expand \"ior<mode>3\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\" \"\")\n+\t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"\")\n+\t\t (match_operand:VDQ 2 \"neon_logic_op2\" \"\")))]\n+  \"TARGET_NEON\n+   || TARGET_HAVE_MVE\"\n+)"}, {"sha": "b1190f6a8dacfd574bbaca7ce4e3c81468829bf3", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vorr.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75de6a2895f503905589934e30c68b9a5ec41f2f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vorr.c?ref=75de6a2895f503905589934e30c68b9a5ec41f2f", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, |, vorr)\n+FUNC(u, uint, 32, 2, |, vorr)\n+FUNC(s, int, 16, 4, |, vorr)\n+FUNC(u, uint, 16, 4, |, vorr)\n+FUNC(s, int, 8, 8, |, vorr)\n+FUNC(u, uint, 8, 8, |, vorr)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, |, vorr)\n+FUNC(u, uint, 32, 4, |, vorr)\n+FUNC(s, int, 16, 8, |, vorr)\n+FUNC(u, uint, 16, 8, |, vorr)\n+FUNC(s, int, 8, 16, |, vorr)\n+FUNC(u, uint, 8, 16, |, vorr)\n+\n+/* 64-bit vectors.  */\n+FUNC_IMM(s, int, 32, 2, |, vorrimm)\n+FUNC_IMM(u, uint, 32, 2, |, vorrimm)\n+FUNC_IMM(s, int, 16, 4, |, vorrimm)\n+FUNC_IMM(u, uint, 16, 4, |, vorrimm)\n+FUNC_IMM(s, int, 8, 8, |, vorrimm)\n+FUNC_IMM(u, uint, 8, 8, |, vorrimm)\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, |, vorrimm)\n+FUNC_IMM(u, uint, 32, 4, |, vorrimm)\n+FUNC_IMM(s, int, 16, 8, |, vorrimm)\n+FUNC_IMM(u, uint, 16, 8, |, vorrimm)\n+FUNC_IMM(s, int, 8, 16, |, vorrimm)\n+FUNC_IMM(u, uint, 8, 16, |, vorrimm)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* Although float16 and float32 types are supported at assembly level,\n+   we cannot test them with the '|' operator, so we check only the\n+   integer variants.  */\n+/* We emit vorr.i[16|32] qX, #1 for the first four versions of the\n+   128-bit vector vorrimm tests.  */\n+/* { dg-final { scan-assembler-times {vorr\\tq[0-9]+, q[0-9]+, q[0-9]+} 8 } } */\n+/* { dg-final { scan-assembler-times {vorr.i[0-9]+\\tq[0-9]+} 4 } } */"}]}