{"sha": "91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjNTM3Yjc1ODg0MWY0ZGJjZjI5YjRhMjZiZmMyZDIwYzZjNTJlZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-01T20:33:28Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-01T20:33:28Z"}, "message": "tree.c (int_fits_type_p): A narrower type always fits in a wider one...\n\n\n\t* tree.c (int_fits_type_p): A narrower type always fits in a\n\twider one, except for negative values into unsigned types.\n\nCo-Authored-By: Olivier Hainque <hainque@act-europe.fr>\n\nFrom-SVN: r92788", "tree": {"sha": "dabb115839d326d5afb180d661686ff9d70acb98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dabb115839d326d5afb180d661686ff9d70acb98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee/comments", "author": null, "committer": null, "parents": [{"sha": "69618c4943a871cbb938196afa968158dc9b0d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69618c4943a871cbb938196afa968158dc9b0d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69618c4943a871cbb938196afa968158dc9b0d11"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "503f153413412dd7e584874580d04c8c25d070dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "patch": "@@ -1,3 +1,9 @@\n+2005-01-01  Roger Sayle  <roger@eyesopen.com>\n+\t    Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* tree.c (int_fits_type_p): A narrower type always fits in a\n+\twider one, except for negative values into unsigned types.\n+\n 2005-01-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* tree.c (int_fits_type_p): Compare the result of force_fit_type"}, {"sha": "e648aaa6b45d5745eac294b228151ebe3a0a6e5a", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c537b758841f4dbcf29b4a26bfc2d20c6c52ee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=91c537b758841f4dbcf29b4a26bfc2d20c6c52ee", "patch": "@@ -4879,10 +4879,17 @@ int_fits_type_p (tree c, tree type)\n   /* Perform some generic filtering first, which may allow making a decision\n      even if the bounds are not constant.  First, negative integers never fit\n      in unsigned types, */\n-  if ((TYPE_UNSIGNED (type) && tree_int_cst_sgn (c) < 0)\n-      /* Also, unsigned integers with top bit set never fit signed types.  */\n-      || (! TYPE_UNSIGNED (type)\n-\t  && TYPE_UNSIGNED (TREE_TYPE (c)) && tree_int_cst_msb (c)))\n+  if (TYPE_UNSIGNED (type) && tree_int_cst_sgn (c) < 0)\n+    return 0;\n+\n+  /* Second, narrower types always fit in wider ones.  */\n+  if (TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (c)))\n+    return 1;\n+\n+  /* Third, unsigned integers with top bit set never fit signed types.  */\n+  if (! TYPE_UNSIGNED (type)\n+      && TYPE_UNSIGNED (TREE_TYPE (c))\n+      && tree_int_cst_msb (c))\n     return 0;\n \n   /* If at least one bound of the type is a constant integer, we can check"}]}