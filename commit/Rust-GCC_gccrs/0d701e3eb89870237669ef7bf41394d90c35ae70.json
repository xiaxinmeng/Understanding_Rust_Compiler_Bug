{"sha": "0d701e3eb89870237669ef7bf41394d90c35ae70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3MDFlM2ViODk4NzAyMzc2NjllZjdiZjQxMzk0ZDkwYzM1YWU3MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-02-05T12:11:44Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-02-08T11:31:24Z"}, "message": "opts: fix handling of -fpatchable-function-entries option\n\ngcc/ChangeLog:\n\n\tPR lto/98971\n\t* cfgexpand.c (pass_expand::execute): Parse per-function option\n\tflag_patchable_function_entry and use it.\n\t* common.opt: Remove function_entry_patch_area_size and\n\tfunction_entry_patch_area_start global variables.\n\t* opts.c (parse_and_check_patch_area): New function.\n\t(common_handle_option): Use it.\n\t* opts.h (parse_and_check_patch_area): New function.\n\t* toplev.c (process_options): Parse and use\n\tfunction_entry_patch_area_size.", "tree": {"sha": "1b07829e072abb7fee500525bdeb3a4b11e3e022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b07829e072abb7fee500525bdeb3a4b11e3e022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d701e3eb89870237669ef7bf41394d90c35ae70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d701e3eb89870237669ef7bf41394d90c35ae70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d701e3eb89870237669ef7bf41394d90c35ae70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d701e3eb89870237669ef7bf41394d90c35ae70/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe2034e9c039c998fc5da730ed531c61cf2e0b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2034e9c039c998fc5da730ed531c61cf2e0b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2034e9c039c998fc5da730ed531c61cf2e0b7d"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "aef9e916fcdaac6b51d92f9e058a112a78cedf89", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=0d701e3eb89870237669ef7bf41394d90c35ae70", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"output.h\"\n #include \"builtins.h\"\n+#include \"opts.h\"\n \n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n@@ -6845,8 +6846,9 @@ pass_expand::execute (function *fun)\n   if (crtl->tail_call_emit)\n     fixup_tail_calls ();\n \n-  unsigned HOST_WIDE_INT patch_area_size = function_entry_patch_area_size;\n-  unsigned HOST_WIDE_INT patch_area_entry = function_entry_patch_area_start;\n+  HOST_WIDE_INT patch_area_size, patch_area_entry;\n+  parse_and_check_patch_area (flag_patchable_function_entry, false,\n+\t\t\t      &patch_area_size, &patch_area_entry);\n \n   tree patchable_function_entry_attr\n     = lookup_attribute (\"patchable_function_entry\","}, {"sha": "c75dd36843e2fb9746938e68f22c2332d62e522d", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0d701e3eb89870237669ef7bf41394d90c35ae70", "patch": "@@ -144,14 +144,6 @@ bool flag_stack_usage_info = false\n Variable\n int flag_debug_asm\n \n-; How many NOP insns to place at each function entry by default\n-Variable\n-HOST_WIDE_INT function_entry_patch_area_size\n-\n-; And how far the real asm entry point is into this area\n-Variable\n-HOST_WIDE_INT function_entry_patch_area_start\n-\n ; Balance between GNAT encodings and standard DWARF to emit.\n Variable\n enum dwarf_gnat_encodings gnat_encodings = DWARF_GNAT_ENCODINGS_DEFAULT\n@@ -2309,7 +2301,7 @@ Common Var(flag_profile_reorder_functions) Optimization\n Enable function reordering that improves code placement.\n \n fpatchable-function-entry=\n-Common Joined Optimization\n+Common Var(flag_patchable_function_entry) Joined Optimization\n Insert NOP instructions at each function entry.\n \n frandom-seed"}, {"sha": "fc5f61e13cce6d297a00ce4920a903aa0f039083", "filename": "gcc/opts.c", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0d701e3eb89870237669ef7bf41394d90c35ae70", "patch": "@@ -2130,6 +2130,44 @@ check_alignment_argument (location_t loc, const char *flag, const char *name,\n     }\n }\n \n+/* Parse argument of -fpatchable-function-entry option ARG and store\n+   corresponding values to PATCH_AREA_SIZE and PATCH_AREA_START.\n+   If REPORT_ERROR is set to true, generate error for a problematic\n+   option arguments.  */\n+\n+void\n+parse_and_check_patch_area (const char *arg, bool report_error,\n+\t\t\t    HOST_WIDE_INT *patch_area_size,\n+\t\t\t    HOST_WIDE_INT *patch_area_start)\n+{\n+  *patch_area_size = 0;\n+  *patch_area_start = 0;\n+\n+  if (arg == NULL)\n+    return;\n+\n+  char *patch_area_arg = xstrdup (arg);\n+  char *comma = strchr (patch_area_arg, ',');\n+  if (comma)\n+    {\n+      *comma = '\\0';\n+      *patch_area_size = integral_argument (patch_area_arg);\n+      *patch_area_start = integral_argument (comma + 1);\n+    }\n+  else\n+    *patch_area_size = integral_argument (patch_area_arg);\n+\n+  if (*patch_area_size < 0\n+      || *patch_area_size > USHRT_MAX\n+      || *patch_area_start < 0\n+      || *patch_area_start > USHRT_MAX\n+      || *patch_area_size < *patch_area_start)\n+    if (report_error)\n+      error (\"invalid arguments for %<-fpatchable-function-entry%>\");\n+\n+  free (patch_area_arg);\n+}\n+\n /* Print help when OPT__help_ is set.  */\n \n void\n@@ -2671,30 +2709,9 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fpatchable_function_entry_:\n       {\n-\tchar *patch_area_arg = xstrdup (arg);\n-\tchar *comma = strchr (patch_area_arg, ',');\n-\tif (comma)\n-\t  {\n-\t    *comma = '\\0';\n-\t    function_entry_patch_area_size = \n-\t      integral_argument (patch_area_arg);\n-\t    function_entry_patch_area_start =\n-\t      integral_argument (comma + 1);\n-\t  }\n-\telse\n-\t  {\n-\t    function_entry_patch_area_size =\n-\t      integral_argument (patch_area_arg);\n-\t    function_entry_patch_area_start = 0;\n-\t  }\n-\tif (function_entry_patch_area_size < 0\n-\t    || function_entry_patch_area_size > USHRT_MAX\n-\t    || function_entry_patch_area_start < 0\n-\t    || function_entry_patch_area_start > USHRT_MAX\n-\t    || function_entry_patch_area_size \n-\t\t< function_entry_patch_area_start)\n-\t  error (\"invalid arguments for %<-fpatchable-function-entry%>\");\n-\tfree (patch_area_arg);\n+\tHOST_WIDE_INT patch_area_size, patch_area_start;\n+\tparse_and_check_patch_area (arg, true, &patch_area_size,\n+\t\t\t\t    &patch_area_start);\n       }\n       break;\n "}, {"sha": "bafc790112b6ac9800cc9e6c6afc3158b1de17ff", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=0d701e3eb89870237669ef7bf41394d90c35ae70", "patch": "@@ -475,6 +475,10 @@ extern bool parse_and_check_align_values (const char *flag,\n \t\t\t\t\t  bool report_error,\n \t\t\t\t\t  location_t loc);\n \n+extern void parse_and_check_patch_area (const char *arg, bool report_error,\n+\t\t\t\t\tHOST_WIDE_INT *patch_area_size,\n+\t\t\t\t\tHOST_WIDE_INT *patch_area_start);\n+\n extern void parse_options_from_collect_gcc_options (const char *, obstack *,\n \t\t\t\t\t\t    int *);\n "}, {"sha": "05bd449eafc04c7451f44060647a456806808394", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d701e3eb89870237669ef7bf41394d90c35ae70/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0d701e3eb89870237669ef7bf41394d90c35ae70", "patch": "@@ -1725,10 +1725,14 @@ process_options (void)\n       flag_sanitize &= ~SANITIZE_HWADDRESS;\n     }\n \n+  HOST_WIDE_INT patch_area_size, patch_area_start;\n+  parse_and_check_patch_area (flag_patchable_function_entry, false,\n+\t\t\t      &patch_area_size, &patch_area_start);\n+\n  /* Do not use IPA optimizations for register allocation if profiler is active\n     or patchable function entries are inserted for run-time instrumentation\n     or port does not emit prologue and epilogue as RTL.  */\n-  if (profile_flag || function_entry_patch_area_size\n+  if (profile_flag || patch_area_size\n       || !targetm.have_prologue () || !targetm.have_epilogue ())\n     flag_ipa_ra = 0;\n "}]}