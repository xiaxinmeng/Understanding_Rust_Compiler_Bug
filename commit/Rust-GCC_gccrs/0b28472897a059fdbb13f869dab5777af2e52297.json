{"sha": "0b28472897a059fdbb13f869dab5777af2e52297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyODQ3Mjg5N2EwNTlmZGJiMTNmODY5ZGFiNTc3N2FmMmU1MjI5Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-03-29T06:14:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-03-29T06:14:32Z"}, "message": "re PR libstdc++/52689 (static linking with libstdc++ fails)\n\n2012-03-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/52689\n\t* libsupc++/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n\t* libsupc++/Makefile.in: Regenerated.\n\t* src/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n\t(libstdc___la_SOURCES): Add in compatiblity files, with content\n\tthat varies with -DPIC.\n\t* src/Makefile.in: Regenerated.\n\t* src/c++11/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n\t* src/c++11/Makefile.in: Regenerated.\n\t* src/c++11/compatibility-atomic-c++0x.cc: Guard with PIC.\n\t* src/c++11/compatibility-c++0x.cc: Same.\n\t* src/c++11/future.cc: Consolidate compatibility bits into..\n\t* src/c++11/mutex.cc: Consolidate compatibility bits into..\n\t* src/c++11/compatibility-thread-cxx0x.cc: ...here. New.\n\t* src/c++98/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n\t* src/c++98/Makefile.in: Regenerated.\n\t* src/c++98/compatibility-ldbl.cc: Guard with PIC\n\t* src/c++98/compatibility-list-2.cc: Same.\n\t* src/c++98/compatibility-list.cc: Same.\n\t* src/c++98/compatibility.cc: Tweak comments.\n\nFrom-SVN: r185950", "tree": {"sha": "7f4ee9e5f60edba7427be60ab938cc294ec62ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4ee9e5f60edba7427be60ab938cc294ec62ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b28472897a059fdbb13f869dab5777af2e52297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b28472897a059fdbb13f869dab5777af2e52297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b28472897a059fdbb13f869dab5777af2e52297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b28472897a059fdbb13f869dab5777af2e52297/comments", "author": null, "committer": null, "parents": [{"sha": "a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278"}], "stats": {"total": 644, "additions": 393, "deletions": 251}, "files": [{"sha": "4f29ab4b3f7a7a3da33a677e78a885ede569f587", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,3 +1,26 @@\n+2012-03-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/52689\n+\t* libsupc++/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n+\t* libsupc++/Makefile.in: Regenerated.\n+\t* src/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n+\t(libstdc___la_SOURCES): Add in compatiblity files, with content\n+\tthat varies with -DPIC.\n+\t* src/Makefile.in: Regenerated.\n+\t* src/c++11/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n+\t* src/c++11/Makefile.in: Regenerated.\n+\t* src/c++11/compatibility-atomic-c++0x.cc: Guard with PIC.\n+\t* src/c++11/compatibility-c++0x.cc: Same.\n+\t* src/c++11/future.cc: Consolidate compatibility bits into..\n+\t* src/c++11/mutex.cc: Consolidate compatibility bits into..\n+\t* src/c++11/compatibility-thread-cxx0x.cc: ...here. New.\n+\t* src/c++98/Makefile.am (LTCXXCOMPILE, CXXLINK): Tweak.\n+\t* src/c++98/Makefile.in: Regenerated.\n+\t* src/c++98/compatibility-ldbl.cc: Guard with PIC\n+\t* src/c++98/compatibility-list-2.cc: Same.\n+\t* src/c++98/compatibility-list.cc: Same.\n+\t* src/c++98/compatibility.cc: Tweak comments.\n+\n 2012-03-28  Terry Guo  <terry.guo@arm.com>\n \n \t* testsuite/Makefile.am (TEST_GCC_EXEC_PREFIX): New."}, {"sha": "eaf109e7309ac4a7e6486f21c1106c9d7e3b6364", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -32,17 +32,17 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n std_HEADERS = \\\n-\tcxxabi.h exception initializer_list new typeinfo \n+\tcxxabi.h exception initializer_list new typeinfo\n \n bits_HEADERS = \\\n \tatomic_lockfree_defines.h cxxabi_forced.h \\\n-\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h \n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h\n \n headers = $(std_HEADERS) $(bits_HEADERS)\n \n if GLIBCXX_HOSTED\n   c_sources = \\\n-\tcp-demangle.c \n+\tcp-demangle.c\n endif\n \n sources = \\\n@@ -95,7 +95,7 @@ sources = \\\n \tvmi_class_type_info.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) $(c_sources) \n+libsupc___la_SOURCES = $(sources) $(c_sources)\n libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n@@ -106,9 +106,7 @@ libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n AM_CXXFLAGS = \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS)  $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -125,7 +123,7 @@ C_COMPILE = \\\n # LTCOMPILE is copied from LTCXXCOMPILE below.\n LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared $(LIBTOOLFLAGS) --mode=compile \\\n \t    $(CC) $(DEFS) $(C_INCLUDES) $(PIC_CXXFLAGS) \\\n-            $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\t    $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n cp-demangle.c:\n \trm -f $@\n@@ -178,9 +176,11 @@ nested_exception.o: nested_exception.cc\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -190,10 +190,11 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n-\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n # Install notes\n # We have to have rules modified from the default to counteract SUN make"}, {"sha": "831f22be9330cbf47916f27ef6762dc34b0b3393", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -344,15 +344,15 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n std_HEADERS = \\\n-\tcxxabi.h exception initializer_list new typeinfo \n+\tcxxabi.h exception initializer_list new typeinfo\n \n bits_HEADERS = \\\n \tatomic_lockfree_defines.h cxxabi_forced.h \\\n-\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h \n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h\n \n headers = $(std_HEADERS) $(bits_HEADERS)\n @GLIBCXX_HOSTED_TRUE@c_sources = \\\n-@GLIBCXX_HOSTED_TRUE@\tcp-demangle.c \n+@GLIBCXX_HOSTED_TRUE@\tcp-demangle.c\n \n sources = \\\n \tarray_type_info.cc \\\n@@ -404,7 +404,7 @@ sources = \\\n \tvmi_class_type_info.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) $(c_sources) \n+libsupc___la_SOURCES = $(sources) $(c_sources)\n libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n@@ -415,9 +415,7 @@ libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n AM_CXXFLAGS = \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS)  $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -435,7 +433,7 @@ C_COMPILE = \\\n # LTCOMPILE is copied from LTCXXCOMPILE below.\n LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared $(LIBTOOLFLAGS) --mode=compile \\\n \t    $(CC) $(DEFS) $(C_INCLUDES) $(PIC_CXXFLAGS) \\\n-            $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+\t    $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n # Libtool notes\n@@ -459,9 +457,11 @@ LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared $(LIBTOOLFLAGS) --mode=comp\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -471,9 +471,11 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n \n # Install notes"}, {"sha": "28430cf36f0bc697c00c17e6d1667e7eaad6a4a3", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 81, "deletions": 16, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -29,10 +29,37 @@ SUBDIRS = c++98 c++11\n # Cross compiler support.\n toolexeclib_LTLIBRARIES = libstdc++.la\n \n-vpath % $(top_srcdir)/src\n-vpath % $(top_srcdir)\n+vpath % $(top_srcdir)/src/c++98\n+vpath % $(top_srcdir)/src/c++11\n \n-libstdc___la_SOURCES =\n+if GLIBCXX_LDBL_COMPAT\n+ldbl_compat_sources = compatibility-ldbl.cc\n+else\n+ldbl_compat_sources =\n+endif\n+\n+if ENABLE_PARALLEL\n+parallel_compat_sources = \\\n+\tcompatibility-parallel_list.cc  compatibility-parallel_list-2.cc\n+else\n+parallel_compat_sources =\n+endif\n+\n+cxx98_sources = \\\n+\tcompatibility.cc \\\n+\tcompatibility-debug_list.cc \\\n+\tcompatibility-debug_list-2.cc \\\n+\tcompatibility-list.cc \\\n+\tcompatibility-list-2.cc \\\n+\t${ldbl_compat_sources} \\\n+\t${parallel_compat_sources}\n+\n+cxx11_sources = \\\n+\tcompatibility-c++0x.cc \\\n+\tcompatibility-atomic-c++0x.cc \\\n+\tcompatibility-thread-c++0x.cc\n+\n+libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n \n libstdc___la_LIBADD = \\\n \t$(GLIBCXX_LIBS) \\\n@@ -52,19 +79,53 @@ libstdc___la_LDFLAGS = \\\n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n \n \n+# Use special rules for parallel mode compilation.\n+PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n+compatibility-parallel_list.lo: compatibility-parallel_list.cc\n+\t$(LTCXXCOMPILE) -c $<\n+compatibility-parallel_list.o: compatibility-parallel_list.cc\n+\t$(CXXCOMPILE) -c $<\n+\n+compatibility-parallel_list-2.lo: compatibility-parallel_list-2.cc\n+\t$(LTCXXCOMPILE) -c $<\n+compatibility-parallel_list-2.o: compatibility-parallel_list-2.cc\n+\t$(CXXCOMPILE) -c $<\n+\n+# Use special rules for compatibility-ldbl.cc compilation, as we need to\n+# pass -mlong-double-64.\n+if GLIBCXX_LDBL_COMPAT\n+compatibility-ldbl.lo: compatibility-ldbl.cc\n+\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n+compatibility-ldbl.o: compatibility-ldbl.cc\n+\t$(CXXCOMPILE) -mlong-double-64 -c $<\n+endif\n+\n+# Use special rules for C++11 files/objects.\n+compatibility-c++0x.lo: compatibility-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-c++0x.o: compatibility-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+compatibility-atomic-c++0x.lo: compatibility-atomic-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-atomic-c++0x.o: compatibility-atomic-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+compatibility-thread-c++0x.lo: compatibility-thread-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-thread-c++0x.o: compatibility-thread-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n-\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n-# libstdc++ libtool notes\n+# Libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n # last. (That way, things like -O2 passed down from the toplevel can\n@@ -82,10 +143,11 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX \\\n-\t       $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t       $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -95,8 +157,12 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \\\n-\t  $(CXX) $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+\n \n # Symbol versioning for shared libraries.\n if ENABLE_SYMVERS\n@@ -116,7 +182,7 @@ libstdc++-symbols.ver:  ${glibcxx_srcdir}/$(SYMVER_FILE) \\\n \t  fi; \\\n \tfi\n \t$(EGREP) -v '^[ \t]*#(#| |$$)' $@.tmp | \\\n-\t  $(COMPILE) -E -P -include config.h - > $@ || (rm -f $@ ; exit 1)\n+\t  $(CC) -E -P -include ../config.h - > $@ || (rm -f $@ ; exit 1)\n \trm -f $@.tmp\n \n CLEANFILES = libstdc++-symbols.ver\n@@ -165,7 +231,6 @@ endif\n \n \n # Control additional build primary rules.\n-# EXTRA_LTLIBRARIES =\n all-once: libstdc++convenience.la $(STAMP_DEBUG)\n install-data-once: $(STAMP_INSTALL_DEBUG)\n "}, {"sha": "3c1facf7f4398f9ce558722763dbaf624d17edc9", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 93, "deletions": 25, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -88,20 +88,22 @@ am__base_list = \\\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n-am_libstdc___la_OBJECTS =\n+@GLIBCXX_LDBL_COMPAT_TRUE@am__objects_1 = compatibility-ldbl.lo\n+@ENABLE_PARALLEL_TRUE@am__objects_2 = compatibility-parallel_list.lo \\\n+@ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list-2.lo\n+am__objects_3 = compatibility.lo compatibility-debug_list.lo \\\n+\tcompatibility-debug_list-2.lo compatibility-list.lo \\\n+\tcompatibility-list-2.lo $(am__objects_1) $(am__objects_2)\n+am__objects_4 = compatibility-c++0x.lo compatibility-atomic-c++0x.lo \\\n+\tcompatibility-thread-c++0x.lo\n+am_libstdc___la_OBJECTS = $(am__objects_3) $(am__objects_4)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n am__depfiles_maybe =\n-COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n-\t--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n-\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-CCLD = $(CC)\n-LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n-\t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n-\t$(LDFLAGS) -o $@\n+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+CXXLD = $(CXX)\n SOURCES = $(libstdc___la_SOURCES)\n RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n \thtml-recursive info-recursive install-data-recursive \\\n@@ -331,7 +333,27 @@ SUBDIRS = c++98 c++11\n \n # Cross compiler support.\n toolexeclib_LTLIBRARIES = libstdc++.la\n-libstdc___la_SOURCES = \n+@GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n+@GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n+@ENABLE_PARALLEL_FALSE@parallel_compat_sources = \n+@ENABLE_PARALLEL_TRUE@parallel_compat_sources = \\\n+@ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list.cc  compatibility-parallel_list-2.cc\n+\n+cxx98_sources = \\\n+\tcompatibility.cc \\\n+\tcompatibility-debug_list.cc \\\n+\tcompatibility-debug_list-2.cc \\\n+\tcompatibility-list.cc \\\n+\tcompatibility-list-2.cc \\\n+\t${ldbl_compat_sources} \\\n+\t${parallel_compat_sources}\n+\n+cxx11_sources = \\\n+\tcompatibility-c++0x.cc \\\n+\tcompatibility-atomic-c++0x.cc \\\n+\tcompatibility-thread-c++0x.cc\n+\n+libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n libstdc___la_LIBADD = \\\n \t$(GLIBCXX_LIBS) \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\\n@@ -349,19 +371,20 @@ libstdc___la_LDFLAGS = \\\n \n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n \n+# Use special rules for parallel mode compilation.\n+PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n \n-# libstdc++ libtool notes\n+# Libtool notes\n \n # 1) Need to explicitly set LTCXXCOMPILE so that AM_CXXFLAGS is\n # last. (That way, things like -O2 passed down from the toplevel can\n@@ -379,10 +402,11 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX \\\n-\t       $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t       $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t       $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -392,8 +416,11 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \\\n-\t  $(CXX) $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n @ENABLE_SYMVERS_TRUE@CLEANFILES = libstdc++-symbols.ver $(version_dep)\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,-exported_symbols_list,libstdc++-symbols.explist\n@@ -423,6 +450,7 @@ debugdir = ${glibcxx_builddir}/src/debug\n all: all-recursive\n \n .SUFFIXES:\n+.SUFFIXES: .cc .lo .o .obj\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/fragment.am $(am__configure_deps)\n \t@for dep in $?; do \\\n \t  case '$(am__configure_deps)' in \\\n@@ -493,6 +521,15 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+.cc.o:\n+\t$(CXXCOMPILE) -c -o $@ $<\n+\n+.cc.obj:\n+\t$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.cc.lo:\n+\t$(LTCXXCOMPILE) -c -o $@ $<\n+\n mostlyclean-libtool:\n \t-rm -f *.lo\n \n@@ -757,8 +794,40 @@ uninstall-am: uninstall-toolexeclibLTLIBRARIES\n \tuninstall-toolexeclibLTLIBRARIES\n \n \n-vpath % $(top_srcdir)/src\n-vpath % $(top_srcdir)\n+vpath % $(top_srcdir)/src/c++98\n+vpath % $(top_srcdir)/src/c++11\n+compatibility-parallel_list.lo: compatibility-parallel_list.cc\n+\t$(LTCXXCOMPILE) -c $<\n+compatibility-parallel_list.o: compatibility-parallel_list.cc\n+\t$(CXXCOMPILE) -c $<\n+\n+compatibility-parallel_list-2.lo: compatibility-parallel_list-2.cc\n+\t$(LTCXXCOMPILE) -c $<\n+compatibility-parallel_list-2.o: compatibility-parallel_list-2.cc\n+\t$(CXXCOMPILE) -c $<\n+\n+# Use special rules for compatibility-ldbl.cc compilation, as we need to\n+# pass -mlong-double-64.\n+@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n+@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.o: compatibility-ldbl.cc\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(CXXCOMPILE) -mlong-double-64 -c $<\n+\n+# Use special rules for C++11 files/objects.\n+compatibility-c++0x.lo: compatibility-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-c++0x.o: compatibility-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+compatibility-atomic-c++0x.lo: compatibility-atomic-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-atomic-c++0x.o: compatibility-atomic-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n+\n+compatibility-thread-c++0x.lo: compatibility-thread-c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+compatibility-thread-c++0x.o: compatibility-thread-c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++11 -c $<\n \n # Symbol versioning for shared libraries.\n @ENABLE_SYMVERS_TRUE@libstdc++-symbols.ver:  ${glibcxx_srcdir}/$(SYMVER_FILE) \\\n@@ -777,7 +846,7 @@ vpath % $(top_srcdir)\n @ENABLE_SYMVERS_TRUE@\t  fi; \\\n @ENABLE_SYMVERS_TRUE@\tfi\n @ENABLE_SYMVERS_TRUE@\t$(EGREP) -v '^[ \t]*#(#| |$$)' $@.tmp | \\\n-@ENABLE_SYMVERS_TRUE@\t  $(COMPILE) -E -P -include config.h - > $@ || (rm -f $@ ; exit 1)\n+@ENABLE_SYMVERS_TRUE@\t  $(CC) -E -P -include ../config.h - > $@ || (rm -f $@ ; exit 1)\n @ENABLE_SYMVERS_TRUE@\trm -f $@.tmp\n @ENABLE_SYMVERS_SUN_TRUE@@ENABLE_SYMVERS_TRUE@libstdc++-symbols.ver-sun : libstdc++-symbols.ver \\\n @ENABLE_SYMVERS_SUN_TRUE@@ENABLE_SYMVERS_TRUE@\t\t$(toplevel_srcdir)/contrib/make_sunver.pl \\\n@@ -800,7 +869,6 @@ vpath % $(top_srcdir)\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@\t > $@ || (rm -f $@ ; exit 1)\n \n # Control additional build primary rules.\n-# EXTRA_LTLIBRARIES =\n all-once: libstdc++convenience.la $(STAMP_DEBUG)\n install-data-once: $(STAMP_INSTALL_DEBUG)\n "}, {"sha": "e8a4d3a66f9595ac51354b96355b57992808ae85", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -32,8 +32,6 @@ headers =\n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n-\tcompatibility-c++0x.cc \\\n-\tcompatibility-atomic-c++0x.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n \tfunctional.cc \\\n@@ -60,7 +58,6 @@ inst_sources =\n endif\n \n vpath % $(top_srcdir)/src/c++11\n-vpath % $(top_srcdir)\n \n libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n@@ -70,11 +67,10 @@ libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n+\t-std=gnu++11 \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) -std=gnu++11\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -99,9 +95,11 @@ AM_MAKEFLAGS = \\\n # attempt to infer which configuration to use.\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -111,6 +109,8 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@"}, {"sha": "0c63c5147413fdce25be3ba8feb19d462b50cee2", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -66,11 +66,10 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n-am__objects_1 = chrono.lo condition_variable.lo compatibility-c++0x.lo \\\n-\tcompatibility-atomic-c++0x.lo debug.lo functexcept.lo \\\n-\tfunctional.lo future.lo hash_c++0x.lo hashtable_c++0x.lo \\\n-\tlimits.lo mutex.lo placeholders.lo regex.lo shared_ptr.lo \\\n-\tsystem_error.lo thread.lo\n+am__objects_1 = chrono.lo condition_variable.lo debug.lo \\\n+\tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n+\thashtable_c++0x.lo limits.lo mutex.lo placeholders.lo regex.lo \\\n+\tshared_ptr.lo system_error.lo thread.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = fstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo wstring-inst.lo\n am_libc__11convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n@@ -301,8 +300,6 @@ headers =\n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n-\tcompatibility-c++0x.cc \\\n-\tcompatibility-atomic-c++0x.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n \tfunctional.cc \\\n@@ -333,11 +330,10 @@ libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion calls for it.\n AM_CXXFLAGS = \\\n+\t-std=gnu++11 \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) -std=gnu++11\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -363,9 +359,11 @@ AM_MAKEFLAGS = \\\n # attempt to infer which configuration to use.\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -375,9 +373,11 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n all: all-am\n \n@@ -612,7 +612,6 @@ uninstall-am:\n \n \n vpath % $(top_srcdir)/src/c++11\n-vpath % $(top_srcdir)\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "8ccad9330ed439f7e573595d78e185cc3dec4d14", "filename": "libstdc++-v3/src/c++11/compatibility-atomic-c++0x.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-atomic-c%2B%2B0x.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // <atomic> compatibility -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010, 2011\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -30,6 +30,8 @@\n // XXX GLIBCXX_ABI Deprecated\n // gcc-4.7.0\n \n+#ifdef PIC\n+\n #define LOGSIZE 4\n \n namespace\n@@ -133,6 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n+#endif\n \n // XXX GLIBCXX_ABI Deprecated\n // gcc-4.5.0"}, {"sha": "bd5dbe0ff067dbeeed9b8aeed83403e70a45b8f8", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,6 +30,8 @@\n # error \"compatibility-c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n \n+#ifdef PIC\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n   // gcc-4.4.0\n@@ -119,3 +121,4 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   } // namespace chrono\n }\n \n+#endif"}, {"sha": "cc8761eea15b21d39beda4b84505c0823c54ecc7", "filename": "libstdc++-v3/src/c++11/compatibility-thread-c++0x.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -0,0 +1,72 @@\n+// Compatibility symbols for previous versions, C++0x bits -*- C++ -*-\n+\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+#include <mutex>\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# error \"compatibility-c++0x.cc must be compiled with -std=gnu++0x\"\n+#endif\n+\n+#define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old \"@@@\" #version);\n+\n+// XXX GLIBCXX_ABI Deprecated\n+// gcc-4.6.0\n+// <future> export changes\n+#if defined(_GLIBCXX_SYMVER_GNU) && defined(PIC) \\\n+    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE) \\\n+    && defined(_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT)\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+  const std::error_category* future_category = &std::future_category();\n+}\n+\n+_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx15future_categoryE, _ZSt15future_category, GLIBCXX_3.4.14)\n+\n+#endif\n+\n+// XXX GLIBCXX_ABI Deprecated\n+// gcc-4.6.0\n+// <mutex> export changes\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if defined(_GLIBCXX_SYMVER_GNU) && defined(PIC) \\\n+    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE) \\\n+    && defined(_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT)\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+  std::defer_lock_t defer_lock;\n+  std::try_to_lock_t try_to_lock;\n+  std::adopt_lock_t adopt_lock;\n+}\n+\n+_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx10adopt_lockE, _ZSt10adopt_lock, GLIBCXX_3.4.11)\n+_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx10defer_lockE, _ZSt10defer_lock, GLIBCXX_3.4.11)\n+_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx11try_to_lockE, _ZSt11try_to_lock, GLIBCXX_3.4.11)\n+\n+\n+#endif\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "380c3a4518556ef08899d9be33f4d639c051917a", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -96,23 +96,3 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-\n-// XXX GLIBCXX_ABI Deprecated\n-// gcc-4.6.0\n-// <future> export changes\n-#if defined(_GLIBCXX_SYMVER_GNU) && defined(PIC) \\\n-    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE) \\\n-    && defined(_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT)\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-  const std::error_category* future_category = &__future_category_instance();\n-}\n-\n-#define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n-   asm (\".symver \" #cur \",\" #old \"@@@\" #version);\n-\n-_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx15future_categoryE, _ZSt15future_category, GLIBCXX_3.4.14)\n-\n-#endif\n-"}, {"sha": "86d0293473f926ac79ecca0b32b39a21b248e57b", "filename": "libstdc++-v3/src/c++11/mutex.cc", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fmutex.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // mutex -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -92,30 +92,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n-// XXX GLIBCXX_ABI Deprecated\n-// gcc-4.6.0\n-// <mutex> export changes\n-#if defined(_GLIBCXX_SYMVER_GNU) && defined(PIC) \\\n-    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE) \\\n-    && defined(_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT)\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-  std::defer_lock_t defer_lock;\n-  std::try_to_lock_t try_to_lock;\n-  std::adopt_lock_t adopt_lock;\n-}\n-\n-#define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n-   asm (\".symver \" #cur \",\" #old \"@@\" #version);\n-\n-_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx10adopt_lockE, _ZSt10adopt_lock, GLIBCXX_3.4.11)\n-_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx10defer_lockE, _ZSt10defer_lock, GLIBCXX_3.4.11)\n-_GLIBCXX_ASM_SYMVER(_ZN9__gnu_cxx11try_to_lockE, _ZSt11try_to_lock, GLIBCXX_3.4.11)\n-\n-\n-#endif\n+} // namespace std\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "05767e9ff2304e790c09229babb271836fb78c4d", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 14, "deletions": 45, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -25,7 +25,7 @@\n include $(top_srcdir)/fragment.am\n \n # Convenience library for C++98 runtime.\n-noinst_LTLIBRARIES = libc++98convenience.la\n+noinst_LTLIBRARIES = libc++98convenience.la \n \n headers =\n \n@@ -74,7 +74,7 @@ atomicity.cc: ${atomicity_file}\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n \tbasic_file.cc c++locale.cc \\\n-\t${inst_sources} ${ldbl_compat_sources} ${parallel_sources}\n+\t${inst_sources} ${parallel_sources}\n \n c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true\n@@ -83,19 +83,11 @@ basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n if ENABLE_PARALLEL\n-parallel_sources = parallel_settings.cc \\\n-\t\t   compatibility-parallel_list.cc \\\n-\t\t   compatibility-parallel_list-2.cc\n+parallel_sources = parallel_settings.cc\n else\n parallel_sources =\n endif\n \n-if GLIBCXX_LDBL_COMPAT\n-ldbl_compat_sources = compatibility-ldbl.cc\n-else\n-ldbl_compat_sources =\n-endif\n-\n if ENABLE_EXTERN_TEMPLATE\n XTEMPLATE_FLAGS = -fno-implicit-templates\n inst_sources = \\\n@@ -122,11 +114,6 @@ sources = \\\n \tpool_allocator.cc \\\n \tmt_allocator.cc \\\n \tcodecvt.cc \\\n-\tcompatibility.cc \\\n-\tcompatibility-debug_list.cc \\\n-\tcompatibility-debug_list-2.cc \\\n-\tcompatibility-list.cc \\\n-\tcompatibility-list-2.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tglobals_io.cc \\\n@@ -153,7 +140,6 @@ sources = \\\n \t${host_sources_extra}\n \n vpath % $(top_srcdir)/src/c++98\n-vpath % $(top_srcdir)\n \n libc__98convenience_la_SOURCES = $(sources)\n \n@@ -180,25 +166,6 @@ parallel_settings.lo: parallel_settings.cc\n parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n-compatibility-parallel_list.lo: compatibility-parallel_list.cc\n-\t$(LTCXXCOMPILE) -c $<\n-compatibility-parallel_list.o: compatibility-parallel_list.cc\n-\t$(CXXCOMPILE) -c $<\n-\n-compatibility-parallel_list-2.lo: compatibility-parallel_list-2.cc\n-\t$(LTCXXCOMPILE) -c $<\n-compatibility-parallel_list-2.o: compatibility-parallel_list-2.cc\n-\t$(CXXCOMPILE) -c $<\n-\n-if GLIBCXX_LDBL_COMPAT\n-# Use special rules for compatibility-ldbl.cc compilation, as we need to\n-# pass -mlong-double-64.\n-compatibility-ldbl.lo: compatibility-ldbl.cc\n-\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n-compatibility-ldbl.o: compatibility-ldbl.cc\n-\t$(CXXCOMPILE) -mlong-double-64 -c $<\n-endif\n-\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -207,9 +174,7 @@ endif\n AM_CXXFLAGS = \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -234,9 +199,11 @@ AM_MAKEFLAGS = \\\n # attempt to infer which configuration to use.\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -246,6 +213,8 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@"}, {"sha": "f36742ba0219cfcea298202835ac479d46296d35", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 22, "deletions": 53, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -76,23 +76,18 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tmisc-inst.lo ostream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.lo streambuf-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.lo\n-@GLIBCXX_LDBL_COMPAT_TRUE@am__objects_3 = compatibility-ldbl.lo\n-@ENABLE_PARALLEL_TRUE@am__objects_4 = parallel_settings.lo \\\n-@ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list.lo \\\n-@ENABLE_PARALLEL_TRUE@\tcompatibility-parallel_list-2.lo\n-am__objects_5 = basic_file.lo c++locale.lo $(am__objects_2) \\\n-\t$(am__objects_3) $(am__objects_4)\n-am__objects_6 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n-\tcodecvt.lo compatibility.lo compatibility-debug_list.lo \\\n-\tcompatibility-debug_list-2.lo compatibility-list.lo \\\n-\tcompatibility-list-2.lo complex_io.lo ctype.lo globals_io.lo \\\n-\thash_tr1.lo hashtable_tr1.lo ios.lo ios_failure.lo ios_init.lo \\\n+@ENABLE_PARALLEL_TRUE@am__objects_3 = parallel_settings.lo\n+am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n+\t$(am__objects_3)\n+am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n+\tcodecvt.lo complex_io.lo ctype.lo globals_io.lo hash_tr1.lo \\\n+\thashtable_tr1.lo ios.lo ios_failure.lo ios_init.lo \\\n \tios_locale.lo list.lo locale.lo locale_init.lo \\\n \tlocale_facets.lo localename.lo math_stubs_float.lo \\\n \tmath_stubs_long_double.lo stdexcept.lo strstream.lo tree.lo \\\n \tistream.lo streambuf.lo valarray.lo $(am__objects_1) \\\n-\t$(am__objects_5)\n-am_libc__98convenience_la_OBJECTS = $(am__objects_6)\n+\t$(am__objects_4)\n+am_libc__98convenience_la_OBJECTS = $(am__objects_5)\n libc__98convenience_la_OBJECTS = $(am_libc__98convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n@@ -315,7 +310,7 @@ WARN_CXXFLAGS = \\\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # Convenience library for C++98 runtime.\n-noinst_LTLIBRARIES = libc++98convenience.la\n+noinst_LTLIBRARIES = libc++98convenience.la \n headers = \n \n # Source files linked in via configuration/make substitution for a\n@@ -337,15 +332,10 @@ atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n \tbasic_file.cc c++locale.cc \\\n-\t${inst_sources} ${ldbl_compat_sources} ${parallel_sources}\n+\t${inst_sources} ${parallel_sources}\n \n @ENABLE_PARALLEL_FALSE@parallel_sources = \n-@ENABLE_PARALLEL_TRUE@parallel_sources = parallel_settings.cc \\\n-@ENABLE_PARALLEL_TRUE@\t\t   compatibility-parallel_list.cc \\\n-@ENABLE_PARALLEL_TRUE@\t\t   compatibility-parallel_list-2.cc\n-\n-@GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n-@GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n+@ENABLE_PARALLEL_TRUE@parallel_sources = parallel_settings.cc\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n@@ -370,11 +360,6 @@ sources = \\\n \tpool_allocator.cc \\\n \tmt_allocator.cc \\\n \tcodecvt.cc \\\n-\tcompatibility.cc \\\n-\tcompatibility-debug_list.cc \\\n-\tcompatibility-debug_list-2.cc \\\n-\tcompatibility-list.cc \\\n-\tcompatibility-list-2.cc \\\n \tcomplex_io.cc \\\n \tctype.cc \\\n \tglobals_io.cc \\\n@@ -417,9 +402,7 @@ PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n AM_CXXFLAGS = \\\n \t$(PIC_CXXFLAGS) \\\n \t$(XTEMPLATE_FLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -445,9 +428,11 @@ AM_MAKEFLAGS = \\\n # attempt to infer which configuration to use.\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n \n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n@@ -457,9 +442,11 @@ LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared $(LIBTOOLFLAGS) \\\n-\t  --mode=link $(CXX) \\\n-\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n \n all: all-am\n \n@@ -726,7 +713,6 @@ basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n vpath % $(top_srcdir)/src/c++98\n-vpath % $(top_srcdir)\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n@@ -744,23 +730,6 @@ parallel_settings.lo: parallel_settings.cc\n parallel_settings.o: parallel_settings.cc\n \t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n-compatibility-parallel_list.lo: compatibility-parallel_list.cc\n-\t$(LTCXXCOMPILE) -c $<\n-compatibility-parallel_list.o: compatibility-parallel_list.cc\n-\t$(CXXCOMPILE) -c $<\n-\n-compatibility-parallel_list-2.lo: compatibility-parallel_list-2.cc\n-\t$(LTCXXCOMPILE) -c $<\n-compatibility-parallel_list-2.o: compatibility-parallel_list-2.cc\n-\t$(CXXCOMPILE) -c $<\n-\n-# Use special rules for compatibility-ldbl.cc compilation, as we need to\n-# pass -mlong-double-64.\n-@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc\n-@GLIBCXX_LDBL_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mlong-double-64 -c $<\n-@GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.o: compatibility-ldbl.cc\n-@GLIBCXX_LDBL_COMPAT_TRUE@\t$(CXXCOMPILE) -mlong-double-64 -c $<\n-\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "b40e54a7c98557be10b8220324cfe2d827314bd9", "filename": "libstdc++-v3/src/c++98/compatibility-ldbl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for -mlong-double-64 compatibility -*- C++ -*-\n \n-// Copyright (C) 2006, 2008, 2009, 2010, 2011\n+// Copyright (C) 2006, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -27,6 +27,8 @@\n #include <cmath>\n #include <tr1/functional>\n \n+#ifdef PIC\n+\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n \n #ifdef __LONG_DOUBLE_128__\n@@ -78,3 +80,5 @@ extern \"C\" void _ZNKSt4hashIeEclEe (void)\n   __attribute__((alias (\"_ZNKSt3tr14hashIeEclEe\")));\n \n #endif\n+\n+#endif"}, {"sha": "975450cb100e1f2d8a20770782b37183e12ce497", "filename": "libstdc++-v3/src/c++98/compatibility-list-2.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list-2.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions, list bits -*- C++ -*-\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,6 +24,8 @@\n \n #include <bits/move.h>\n \n+#ifdef PIC\n+\n #ifndef _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n # define _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n #endif\n@@ -111,3 +113,5 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n _GLIBCXX_END_NAMESPACE_COMPAT\n \n } // namespace std\n+\n+#endif"}, {"sha": "8b91849b300090ab6817f04d43aa66b34453a19a", "filename": "libstdc++-v3/src/c++98/compatibility-list.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-list.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -1,6 +1,6 @@\n // Compatibility symbols for previous versions, list bits -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,6 +24,8 @@\n \n #include <bits/move.h>\n \n+#ifdef PIC\n+\n #ifndef _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n # define _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n #endif\n@@ -144,3 +146,5 @@ _GLIBCXX_BEGIN_NAMESPACE_COMPAT\n _GLIBCXX_END_NAMESPACE_COMPAT\n \n } // namespace std\n+\n+#endif"}, {"sha": "38d9e4b6743ada7c63b86a5efdaac3e432b3673f", "filename": "libstdc++-v3/src/c++98/compatibility.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b28472897a059fdbb13f869dab5777af2e52297/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc?ref=0b28472897a059fdbb13f869dab5777af2e52297", "patch": "@@ -199,7 +199,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n \n // NB: These symbols renames should go into the shared library only,\n@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n \n /* gcc-4.0.0\n@@ -357,7 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n // The rename syntax for default exported names is\n //   asm (\".symver name1,exportedname@GLIBCXX_3.4\")"}]}