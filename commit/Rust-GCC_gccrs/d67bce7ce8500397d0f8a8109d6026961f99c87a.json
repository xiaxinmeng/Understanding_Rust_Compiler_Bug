{"sha": "d67bce7ce8500397d0f8a8109d6026961f99c87a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3YmNlN2NlODUwMDM5N2QwZjhhODEwOWQ2MDI2OTYxZjk5Yzg3YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-02-02T23:46:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-02-02T23:46:31Z"}, "message": "ipa-inline.c (early_inliner): Skip inlining only in always_inlined...\n\n\n\t* ipa-inline.c (early_inliner): Skip inlining only in always_inlined;\n\tif some always_inline was inlined, apply changes before inlining\n\theuristically.\n\n\t* g++.dg/ipa/devirt-37.C: Disable early inlining.\n\nFrom-SVN: r220359", "tree": {"sha": "4c2422df208e99dff694860c414a8756065c70ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2422df208e99dff694860c414a8756065c70ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67bce7ce8500397d0f8a8109d6026961f99c87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67bce7ce8500397d0f8a8109d6026961f99c87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67bce7ce8500397d0f8a8109d6026961f99c87a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67bce7ce8500397d0f8a8109d6026961f99c87a/comments", "author": null, "committer": null, "parents": [{"sha": "a4bb6959b818841e232449c9d092c3df3630ea5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4bb6959b818841e232449c9d092c3df3630ea5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4bb6959b818841e232449c9d092c3df3630ea5c"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "9f6e800536f1da1e029d796484b4a5c72f0ae0f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d67bce7ce8500397d0f8a8109d6026961f99c87a", "patch": "@@ -1,3 +1,9 @@\n+2015-02-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline.c (early_inliner): Skip inlining only in always_inlined;\n+\tif some always_inline was inlined, apply changes before inlining\n+\theuristically.\n+\n 2015-02-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64810"}, {"sha": "d9ab56a3e22e3229a6cad379190b66b8cf7f73f6", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d67bce7ce8500397d0f8a8109d6026961f99c87a", "patch": "@@ -2528,7 +2528,9 @@ early_inliner (function *fun)\n \t cycles of edges to be always inlined in the callgraph.\n \n \t We might want to be smarter and just avoid this type of inlining.  */\n-      || DECL_DISREGARD_INLINE_LIMITS (node->decl))\n+      || (DECL_DISREGARD_INLINE_LIMITS (node->decl)\n+\t  && lookup_attribute (\"always_inline\",\n+\t\t\t       DECL_ATTRIBUTES (node->decl))))\n     ;\n   else if (lookup_attribute (\"flatten\",\n \t\t\t     DECL_ATTRIBUTES (node->decl)) != NULL)\n@@ -2543,6 +2545,18 @@ early_inliner (function *fun)\n     }\n   else\n     {\n+      /* If some always_inline functions was inlined, apply the changes.\n+\t This way we will not account always inline into growth limits and\n+\t moreover we will inline calls from always inlines that we skipped\n+\t previously becuase of conditional above.  */\n+      if (inlined)\n+\t{\n+\t  timevar_push (TV_INTEGRATION);\n+\t  todo |= optimize_inline_calls (current_function_decl);\n+\t  inline_update_overall_summary (node);\n+\t  inlined = false;\n+\t  timevar_pop (TV_INTEGRATION);\n+\t}\n       /* We iterate incremental inlining to get trivial cases of indirect\n \t inlining.  */\n       while (iterations < PARAM_VALUE (PARAM_EARLY_INLINER_MAX_ITERATIONS)"}, {"sha": "2039b4c469764637f606ec24dae333ee6ba2ccab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d67bce7ce8500397d0f8a8109d6026961f99c87a", "patch": "@@ -1,3 +1,7 @@\n+2015-02-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/devirt-37.C: Disable early inlining.\n+\n 2015-02-02  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h"}, {"sha": "7e1acdc986cbeee23e489ea67c515f0d3f2922fb", "filename": "gcc/testsuite/g++.dg/ipa/devirt-37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67bce7ce8500397d0f8a8109d6026961f99c87a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C?ref=d67bce7ce8500397d0f8a8109d6026961f99c87a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fpermissive -O2 -fno-indirect-inlining -fno-devirtualize-speculatively -fdump-tree-fre2-details\"  } */\n+/* { dg-options \"-fpermissive -O2 -fno-indirect-inlining -fno-devirtualize-speculatively -fdump-tree-fre2-details -fno-early-inlining\"  } */\n #include <stdlib.h>\n struct A {virtual void test() {abort ();}};\n struct B:A"}]}