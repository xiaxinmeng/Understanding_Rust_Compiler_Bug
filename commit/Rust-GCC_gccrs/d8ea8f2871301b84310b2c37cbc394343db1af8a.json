{"sha": "d8ea8f2871301b84310b2c37cbc394343db1af8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlYThmMjg3MTMwMWI4NDMxMGIyYzM3Y2JjMzk0MzQzZGIxYWY4YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-09-11T01:50:49Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-09-11T01:50:49Z"}, "message": "defaults.h: Provide default definitions for...\n\n        * defaults.h: Provide default definitions for: CHAR_TYPE_SIZE,\n        SHORT_TYPE_SIZE, INT_TYPE_SIZE, LONG_TYPE_SIZE,\n        LONG_LONG_TYPE_SIZE, WCHAR_TYPE_SIZE, FLOAT_TYPE_SIZE,\n        DOUBLE_TYPE_SIZE, LONG_DOUBLE_TYPE_SIZE, and WCHAR_UNSIGNED.\n\n        * cppexp.c, dwarfout.c, dwarf2out.c, emit-rtl.c, final.c, optabs.c,\n        profile.c, sdbout.c, tradcif.y, tree.c, ch/decl.c, ch/timing.c,\n        cp/decl.c, cp/rtti.c, f/com.c, f/com.h, java/decl.c, java/expr.c:\n        Include defaults.h if not already included.\n        Don't define the above macros.\n\n        * Makefile.in, ch/Makefile.in, cp/Makefile.in, f/Makefile.in:\n        Update dependencies.\n\nFrom-SVN: r36307", "tree": {"sha": "1746104004f6580995ab9046ee3aa23a808b8152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1746104004f6580995ab9046ee3aa23a808b8152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ea8f2871301b84310b2c37cbc394343db1af8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea8f2871301b84310b2c37cbc394343db1af8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ea8f2871301b84310b2c37cbc394343db1af8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea8f2871301b84310b2c37cbc394343db1af8a/comments", "author": null, "committer": null, "parents": [{"sha": "fe5e3b9714a2ef529f5d514dab61747137c89527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5e3b9714a2ef529f5d514dab61747137c89527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5e3b9714a2ef529f5d514dab61747137c89527"}], "stats": {"total": 404, "additions": 115, "deletions": 289}, "files": [{"sha": "0b0bca6385f15d41bdf7c4eac9a04d9c33aa3a16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,3 +1,17 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* defaults.h: Provide default definitions for: CHAR_TYPE_SIZE,\n+\tSHORT_TYPE_SIZE, INT_TYPE_SIZE, LONG_TYPE_SIZE,\n+\tLONG_LONG_TYPE_SIZE, WCHAR_TYPE_SIZE, FLOAT_TYPE_SIZE,\n+\tDOUBLE_TYPE_SIZE, LONG_DOUBLE_TYPE_SIZE, and WCHAR_UNSIGNED.\n+\n+\t* cppexp.c, dwarfout.c, dwarf2out.c, emit-rtl.c, final.c, optabs.c,\n+\tprofile.c, sdbout.c, tradcif.y, tree.c:\n+\tInclude defaults.h if not already included.\n+\tDon't define the above macros.\n+\n+\t* Makefile.in: Update dependencies.\n+\n 2000-09-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (add_stmt): Change prototype.\n@@ -10,7 +24,7 @@\n \t* c-common.c (check_case_value): Handle C++'s extensions to C\n \tsemantics.\n \t* c-commnon.def (CASE_LABEL): Add room for the CASE_LABEL_DECL\n-\tfield. \n+\tfield.\n \t* c-parse.in (stmt): Adjust handling of return statements and case\n \tlaels.\n \t* c-semantics.c (add_stmt): Return the new statement.\n@@ -287,7 +301,7 @@ Fri Sep  8 03:26:38 2000  J\"orn Rennecke <amylaar@redhat.co.uk>\n \t  h8300.h, h8300-protos.h, h8300.c,\n \t  i370.h, i370-protos.h, i370.c,\n \t  i960.h, i960-protos.h, i960.c,\n-\t  sh.h, sh-protos.h, sh.c, \n+\t  sh.h, sh-protos.h, sh.c,\n \t  v850.h, v850-protos.h, v850.c: Convert HANDLE_PRAGMA-based\n \tpragmata scheme to use REGISTER_TARGET_PRAGMAS instead.\n \n@@ -339,7 +353,7 @@ Thu 07-Sep-2000 21:29:00 BST  Neil Booth  <NeilB@earthling.net>\n \t* reload.c (regno_clobbered_p): Accept new arg, MODE, and use it\n \tto handle multiword modes correctly.  All callers and the declaration\n \tchanged.\n-  \n+\n 2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (prep_stmt): Declare.\n@@ -348,7 +362,7 @@ Thu 07-Sep-2000 21:29:00 BST  Neil Booth  <NeilB@earthling.net>\n \t* c-semantics.c (lang_expand_stmt): Define.\n \t(prep_stmt): New function.\n \t(expand_stmt): Handle common statement types here.\n-\t\n+\n 2000-09-07  Niibe Yutaka  <gniibe@m17n.org>, Kaz Kojima  <kkojima@rr.iij4u.or.jp>, Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (sh-*-linux*): Added."}, {"sha": "672635a0519d5ebca4d26425f9db6ea09f5648e6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1228,7 +1228,7 @@ prefix.o: prefix.c $(CONFIG_H) system.h Makefile prefix.h\n convert.o: convert.c $(CONFIG_H) system.h $(TREE_H) flags.h convert.h toplev.h\n \n tree.o : tree.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h toplev.h \\\n-   $(GGC_H) $(HASHTAB_H) output.h\n+   $(GGC_H) $(HASHTAB_H) output.h defaults.h\n print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) system.h $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H)\n@@ -1282,7 +1282,7 @@ explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-codes.h toplev.h function.h\n optabs.o : optabs.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h $(EXPR_H) $(RECOG_H) reload.h \\\n-   toplev.h $(GGC_H) real.h\n+   toplev.h $(GGC_H) real.h defaults.h\n dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h $(REGS_H) \\\n    insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h dbxout.h \\\n    toplev.h\n@@ -1301,7 +1301,7 @@ xcoffout.o : xcoffout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) xcoffout.h \\\n emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h \\\n-   $(HASHTAB_H)\n+   $(HASHTAB_H) defaults.h\n real.o : real.c $(CONFIG_H) system.h $(TREE_H) toplev.h\n integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    $(INTEGRATE_H) insn-flags.h insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n@@ -1335,7 +1335,7 @@ conflict.o : conflict.c $(CONFIG_H) system.h $(OBSTACK_H) $(HASHTAB_H) \\\n    $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-flags.h insn-config.h output.h $(REGS_H) $(EXPR_H) function.h \\\n-   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H)\n+   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H) defaults.h\n loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h $(LOOP_H) insn-config.h \\\n    insn-flags.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h \\\n    $(BASIC_BLOCK_H) function.h toplev.h varray.h except.h cselib.h\n@@ -1808,7 +1808,7 @@ cpp0$(exeext): cppmain.o intl.o libcpp.a $(LIBDEPS)\n cppmain.o:  cppmain.c  $(CONFIG_H) cpplib.h intl.h system.h\n \n cpperror.o: cpperror.c $(CONFIG_H) $(LIBCPP_DEPS)\n-cppexp.o:   cppexp.c   $(CONFIG_H) $(LIBCPP_DEPS)\n+cppexp.o:   cppexp.c   $(CONFIG_H) $(LIBCPP_DEPS) defaults.h\n cpplex.o:   cpplex.c   $(CONFIG_H) $(LIBCPP_DEPS)\n cppmacro.o: cppmacro.c $(CONFIG_H) $(LIBCPP_DEPS)\n cpplib.o:   cpplib.c   $(CONFIG_H) $(LIBCPP_DEPS) $(OBSTACK_H)\n@@ -1831,7 +1831,7 @@ tradcpp0$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBDEPS)\n \ttradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBS)\n \n tradcpp.o: tradcpp.c $(CONFIG_H) system.h version.h cppdefault.h\n-tradcif.o: $(srcdir)/tradcif.c $(CONFIG_H) system.h\n+tradcif.o: $(srcdir)/tradcif.c $(CONFIG_H) system.h defaults.h\n \n $(srcdir)/tradcif.c: $(srcdir)/tradcif.y\n \tcd $(srcdir); $(BISON) $(BISONFLAGS) -o tradcif.c tradcif.y"}, {"sha": "f356ff8335df8de7b1e90d35279753aa277e2382", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,3 +1,9 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* decl.c, timing.c: Include defaults.h if not already included.\n+\tDon't define the *_TYPE_SIZE macros.\n+\t* Makefile.in: Update dependencies.\n+\n 2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* inout.c (add_enum_to_list): Use DECL_NAME directly, don't get"}, {"sha": "5b65f122bed8b279d7067bbf8358babd0d162d20", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -276,7 +276,7 @@ convert.o : convert.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../tree.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n \t$(srcdir)/../convert.h\n decl.o : decl.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h lex.h \\\n-\t$(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(srcdir)/../system.h $(srcdir)/../toplev.h $(srcdir)/../defaults.h\n except.o : except.c $(CONFIG_H) $(srcdir)/../tree.h $(RTL_H) $(CHILL_TREE_H) \\\n \t$(srcdir)/../system.h $(srcdir)/../toplev.h\n expr.o : expr.c $(CONFIG_H) $(RTL_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n@@ -300,7 +300,8 @@ parse.o : parse.c $(CONFIG_H) $(CHILL_TREE_H) parse.h \\\n satisfy.o : satisfy.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../tree.h \\\n \t$(srcdir)/../flags.h lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n timing.o : timing.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n-\t$(srcdir)/../input.h lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(srcdir)/../input.h lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n+\t$(srcdir)/../defaults.h\n tasking.o : tasking.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) \\\n \t$(srcdir)/../flags.h $(srcdir)/../input.h \\\n \tlex.h $(srcdir)/../system.h $(srcdir)/../toplev.h"}, {"sha": "571eaed63b47a046c635fa362bda574ac16275b0", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -191,6 +191,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"input.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n+#include \"defaults.h\"\n \n #define IS_UNKNOWN_TYPE(type) (TYPE_SIZE(type)==0)\n #define BUILTIN_NESTING_LEVEL (-1)\n@@ -264,52 +265,6 @@ int current_module_nesting_level = 0;\n /* ??? not all decl nodes are given the most useful possible\n    line numbers.  For example, the CONST_DECLs for enum values.  */\n \n-#if 0\n-/* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n-enum decl_context\n-{ NORMAL,\t\t\t/* Ordinary declaration */\n-    FUNCDEF,\t\t\t/* Function definition */\n-    PARM,\t\t\t/* Declaration of parm before function body */\n-    FIELD,\t\t\t/* Declaration inside struct or union */\n-    BITFIELD,\t\t\t/* Likewise but with specified width */\n-    TYPENAME};\t\t\t/* Typename (inside cast or sizeof)  */\n-#endif\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef WCHAR_UNSIGNED\n-#define WCHAR_UNSIGNED 0\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n \n /* We let tm.h override the types used here, to handle trivial differences\n    such as the choice of unsigned int or long unsigned int for size_t."}, {"sha": "53d76703f126617bc916a9911f2db3972baf575e", "filename": "gcc/ch/timing.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2Ftiming.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fch%2Ftiming.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftiming.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -28,10 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"lex.h\"\n #include \"toplev.h\"\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n+#include \"defaults.h\"\n \n /* set non-zero if input text is forced to lowercase */\n extern int ignore_case;"}, {"sha": "c1cd62149dfb124c3f26bbd39e8b482e38558775", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,3 +1,8 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* decl.c, rtti.c: Include defaults.h if not already included.\n+\tDon't define the *_TYPE_SIZE macros.\n+\n 2000-09-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (push_switch): Change prototype."}, {"sha": "839e5748e2d4b6a58716a68cbcc2879c5cb4e121", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -280,7 +280,7 @@ tree.o : tree.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   ../insn-config.h $(srcdir)/../integrate.h\n ptree.o : ptree.c $(CXX_TREE_H) $(srcdir)/../system.h\n rtti.o : rtti.c $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  $(srcdir)/../toplev.h\n+  $(srcdir)/../toplev.h $(srcdir)/../defaults.h\n except.o : except.c $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n   $(srcdir)/../except.h $(srcdir)/../toplev.h cfns.h\n expr.o : expr.c $(CXX_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\"}, {"sha": "d82c32e5058af314f4b092048af4dab72134f271", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -42,7 +42,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"toplev.h\"\n #include \"../hash.h\"\n-#include \"defaults.h\"\n #include \"ggc.h\"\n \n extern int current_class_depth;\n@@ -57,14 +56,6 @@ extern int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree));\n \n int ggc_p = 1;\n \n-#ifndef WCHAR_UNSIGNED\n-#define WCHAR_UNSIGNED 0\n-#endif\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n #ifndef BOOL_TYPE_SIZE\n #ifdef SLOW_BYTE_ACCESS\n /* In the new ABI, `bool' has size and alignment `1', on all"}, {"sha": "c14dd9b0531ba8a2529ce195fd91e47a0c5f50dc", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -29,10 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"assert.h\"\n #include \"toplev.h\"\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n+#include \"defaults.h\"\n \n /* Accessors for the type_info objects. We need to remember several things\n    about each of the type_info types. The global tree nodes such as"}, {"sha": "5403dce92e6143282e3bd7bcd34a18e78e9379bb", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -23,22 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-#endif\n+#include \"defaults.h\"\n \n #ifndef MAX_CHAR_TYPE_SIZE\n #define MAX_CHAR_TYPE_SIZE CHAR_TYPE_SIZE"}, {"sha": "13772aa934b9b0845251becfa427bb045bd1ff26", "filename": "gcc/defaults.h", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,7 +1,8 @@\n /* Definitions of various defaults for how to do assembler output\n    (most of which are designed to be appropriate for GAS or for\n    some BSD assembler).\n-   Copyright (C) 1992, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000\n+   Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com)\n \n This file is part of GNU CC.\n@@ -21,6 +22,9 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#ifndef GCC_DEFAULTS_H\n+#define GCC_DEFAULTS_H\n+\n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */\n@@ -194,3 +198,50 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #ifndef DWARF_FRAME_REGISTERS\n #define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n #endif\n+\n+/* Default sizes for base C types.  If the sizes are different for\n+   your target, you should override these values by defining the\n+   appropriate symbols in your tm.h file.  */\n+\n+#ifndef CHAR_TYPE_SIZE\n+#define CHAR_TYPE_SIZE BITS_PER_UNIT\n+#endif\n+\n+#ifndef SHORT_TYPE_SIZE\n+#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n+#endif\n+\n+#ifndef INT_TYPE_SIZE\n+#define INT_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n+#ifndef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n+#ifndef LONG_LONG_TYPE_SIZE\n+#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n+#endif\n+\n+#ifndef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n+#endif\n+\n+#ifndef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+#endif\n+\n+#ifndef FLOAT_TYPE_SIZE\n+#define FLOAT_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n+#ifndef DOUBLE_TYPE_SIZE\n+#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n+#endif\n+\n+#ifndef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n+#endif\n+\n+#endif  /* GCC_DEFAULTS_H */\n+"}, {"sha": "de67f8553b6f6b72af00558417fcca55489e2246", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -139,15 +139,6 @@ dw_fde_node;\n /* Maximum size (in bytes) of an artificially generated label.   */\n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n \n-/* Make sure we know the sizes of the various types dwarf can describe. These\n-   are only defaults.  If the sizes are different for your target, you should\n-   override these values by defining the appropriate symbols in your tm.h\n-   file.  */\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n /* The size of the target's pointer type.  */\n #ifndef PTR_SIZE\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)"}, {"sha": "098fbd8d024268560be2f965d62808036c1a5926", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -97,51 +97,6 @@ extern int flag_traditional;\n \n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n \f\n-/* Make sure we know the sizes of the various types dwarf can describe.\n-   These are only defaults.  If the sizes are different for your target,\n-   you should override these values by defining the appropriate symbols\n-   in your tm.h file.  */\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-#endif\n-\n-#ifndef WCHAR_UNSIGNED\n-#define WCHAR_UNSIGNED 0\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\f\n /* Structure to keep track of source filenames.  */\n \n struct filename_entry {"}, {"sha": "3fb272dd4c0e755dc11b73754f75edf8394a4f38", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"bitmap.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\"\n+#include \"defaults.h\"\n \n /* Commonly used modes.  */\n \n@@ -4076,10 +4077,6 @@ init_emit_once (line_numbers)\n \tword_mode = mode;\n     }\n \n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n     {"}, {"sha": "4ca227248b888db33bed5dd2fd06c55febf86115", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,3 +1,9 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* com.c: Include defaults.h.\n+\t* com.h: Don't define the *_TYPE_SIZE macros.\n+\t* Makefile.in: Update dependencies.\n+\n 2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* ansify.c: Use #line, not # <number>."}, {"sha": "ccc1ed095d69840d4ea0e05ef109c9b630362b09", "filename": "gcc/f/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMakefile.in?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -240,6 +240,7 @@ SYSTEM_H = $(srcdir)/../system.h\n TOPLEV_H = $(srcdir)/../toplev.h\n TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h \\\n \t$(srcdir)/../tree.def $(srcdir)/../machmode.h $(srcdir)/../machmode.def\n+DEFAULTS_H = $(srcdir)/../defaults.h\n \n ansify.o: ansify.c $(HCONFIG_H) $(SYSTEM_H) $(ASSERT_H)\n bad.o: bad.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bad.h bad.def where.h \\\n@@ -254,12 +255,12 @@ bld.o: bld.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) bld.h bld-op.def bit.h \\\n  info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h lex.h \\\n  type.h lab.h storag.h symbol.h symbol.def equiv.h global.h name.h \\\n  intrin.h intrin.def\n-com.o: com.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(FLAGS_H) $(RTL_H) $(TOPLEV_H) \\\n+com.o: com.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) $(FLAGS_H) $(RTL_H) \\\n  $(TREE_H) $(OUTPUT_H) $(CONVERT_H) com.h com-rt.def bld.h bld-op.def bit.h \\\n  malloc.h info.h info-b.def info-k.def info-w.def target.h bad.h \\\n  bad.def where.h $(GLIMITS_H) top.h lex.h type.h intrin.h intrin.def \\\n  lab.h symbol.h symbol.def equiv.h storag.h global.h name.h expr.h \\\n- implic.h src.h st.h $(GGC_H)\n+ implic.h src.h st.h $(GGC_H) $(TOPLEV_H) $(DEFAULTS_H)\n data.o: data.c proj.h $(CONFIG_H) $(SYSTEM_H) $(ASSERT_H) data.h bld.h \\\n  bld-op.def bit.h malloc.h com.h com-rt.def $(TREE_H) info.h info-b.def \\\n  info-k.def info-w.def target.h bad.h bad.def where.h $(GLIMITS_H) top.h \\"}, {"sha": "c3a50e92a20cc7f242a725972c2197c7e36f8f28", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -95,6 +95,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"  /* Must follow tree.h so TREE_CODE is defined! */\n #include \"convert.h\"\n #include \"ggc.h\"\n+#include \"defaults.h\"\n #endif\t/* FFECOM_targetCURRENT == FFECOM_targetGCC */\n \n #define FFECOM_GCC_INCLUDE 1\t/* Enable -I. */"}, {"sha": "d0dfe8f84bc265d8864f91f467189695da549b63", "filename": "gcc/f/com.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -84,49 +84,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    to build the libf2c with which g77-generated code is linked, or there\n    will probably be bugs, some of them difficult to detect or even trigger.  */\n \n-/* Do we need int (for 32-bit or 64-bit systems) or long (16-bit or\n-   normally 32-bit) for f2c-type integers? */\n-\n-#ifndef BITS_PER_WORD\n-#define BITS_PER_WORD 32\n-#endif\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef WCHAR_UNSIGNED\n-#define WCHAR_UNSIGNED 0\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n /* The C front-end provides __g77_integer and __g77_uinteger types so that\n    the appropriately-sized signed and unsigned integer types are available\n    for libf2c.  If you change this, also the definitions of those types"}, {"sha": "6fb5c44738583a24f30580e0f487cb3663393eaa", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -111,14 +111,6 @@ Boston, MA 02111-1307, USA.  */\n #define\tN_SOL 0x84\n #endif\n \n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n /* If we aren't using cc0, CC_STATUS_INIT shouldn't exist.  So define a\n    null default for it to save conditionalization later.  */\n #ifndef CC_STATUS_INIT"}, {"sha": "2f248f47241aa4e04b095fee87586a569ebf7136", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -1,3 +1,8 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* decl.c, expr.c: Include defaults.h if not already included.\n+\tDon't define the *_TYPE_SIZE macros.\n+\n 2000-09-09  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* typeck.c (build_java_array_type): Correct first parameter"}, {"sha": "a96ff94bd99d9d13858c4d778fb2c3478623a55a", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -54,10 +54,6 @@ static tree create_primitive_vtable PARAMS ((const char *));\n    before static field references.  */\n extern int always_initialize_class_p;\n \n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n /* The DECL_MAP is a mapping from (index, type) to a decl node.\n    If index < max_locals, it is the index of a local variable.\n    if index >= max_locals, then index-max_locals is a stack slot."}, {"sha": "ebba1aca7fa4235f44336cb47408e377bd36a3a2", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -984,10 +984,6 @@ expand_java_pushc (ival, type)\n   push_value (value);\n }\n \n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n static void\n expand_java_return (type)\n      tree type;"}, {"sha": "07928d7f99dae58f060e1b35d6959e9225261765", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -39,6 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"ggc.h\"\n #include \"real.h\"\n+#include \"defaults.h\"\n \n /* Each optab contains info on how this target machine\n    can perform a particular operation\n@@ -4669,9 +4670,6 @@ init_optabs ()\n     = init_one_libfunc (\"cabs\");\n \n   /* The ffs function operates on `int'.  */\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n   ffs_optab->handlers[(int) mode_for_size (INT_TYPE_SIZE, MODE_INT, 0)].libfunc\n     = init_one_libfunc (\"ffs\");\n "}, {"sha": "809e43f3e056a9d5445c830231724733e693747d", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n-\n+#include \"defaults.h\"\n \n /* Additional information about the edges we need.  */\n struct edge_info\n@@ -119,10 +119,6 @@ static void compute_branch_probabilities PARAMS ((void));\n static basic_block find_group PARAMS ((basic_block));\n static void union_groups PARAMS ((basic_block, basic_block));\n \n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n /* If non-zero, we need to output a constructor to set up the\n    per-object-file data. */\n static int need_func_profiler = 0;"}, {"sha": "0461b384065f464cba7c611f005e6526cfa349b8", "filename": "gcc/sdbout.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -123,40 +123,6 @@ static void sdbout_one_type\t\tPARAMS ((tree));\n static void sdbout_parms\t\tPARAMS ((tree));\n static void sdbout_reg_parms\t\tPARAMS ((tree));\n \f\n-/* Define the default sizes for various types.  */\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\f\n /* Random macros describing parts of SDB data.  */\n \n /* Put something here if lines get too long */"}, {"sha": "082977d45e3fdfeb0c46fc55545b26945d390ec9", "filename": "gcc/tradcif.y", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ftradcif.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ftradcif.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcif.y?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -26,6 +26,7 @@ Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n %{\n #include \"config.h\"\n #include \"system.h\"\n+#include \"defaults.h\"\n #include <setjmp.h>\n \n   int yylex PARAMS ((void));\n@@ -44,9 +45,6 @@ Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n   /* some external tables of character types */\n   extern unsigned char is_idstart[], is_idchar[];\n \n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n %}\n \n %union {"}, {"sha": "15c482ace884b3ff67c44e752cba488c0607b278", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ea8f2871301b84310b2c37cbc394343db1af8a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d8ea8f2871301b84310b2c37cbc394343db1af8a", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"output.h\"\n+#include \"defaults.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -5647,38 +5648,6 @@ finish_vector_type (t)\n   }\n }\n \n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n /* Create nodes for all integer types (and error_mark_node) using the sizes\n    of C datatypes.  The caller should call set_sizetype soon after calling\n    this function to select one of the types as sizetype.  */"}]}