{"sha": "85307b4e938d42201d6c232f5d9259f91133a303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzMDdiNGU5MzhkNDIyMDFkNmMyMzJmNWQ5MjU5ZjkxMTMzYTMwMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-05T21:48:19Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-06T21:35:30Z"}, "message": "c++: typename in out-of-class member function definitions [PR97297]\n\nI was notified that our P0634R3 (Down with typename) implementation has\na flaw: when we have an out-of-class member function definition, we\nstill required 'typename' for its parameters.  For example here:\n\n  template <typename T> struct S {\n    int simple(T::type);\n  };\n  template <typename T>\n  int S<T>::simple(/* typename */T::type) { return 0; }\n\nthe 'typename' isn't necessary per [temp.res]/5.2.4.  We have a qualified\nname here (\"S<T>::simple\") so we know it's already been declared so we\ncan look it up to see if it's a function template or a variable\ntemplate.\n\nIn this case, the P0634R3 code in cp_parser_direct_declarator wasn't\nlooking into uninstantiated templates and didn't find the member\nfunction 'simple' -- cp_parser_lookup_name returned a SCOPE_REF which\nmeans that the qualifying scope was dependent.  With this fix, we find\nthe BASELINK for 'simple', don't clear CP_PARSER_FLAGS_TYPENAME_OPTIONAL\nfrom the flags, and the typename is implicitly assumed.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97297\n\t* parser.c (cp_parser_direct_declarator): When checking if a\n\tname is a function template declaration for the P0634R3 case,\n\tlook in uninstantiated templates too.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97297\n\t* g++.dg/cpp2a/typename18.C: New test.", "tree": {"sha": "21d685bef3085640fec38d61c6077ac012f15e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d685bef3085640fec38d61c6077ac012f15e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85307b4e938d42201d6c232f5d9259f91133a303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85307b4e938d42201d6c232f5d9259f91133a303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85307b4e938d42201d6c232f5d9259f91133a303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85307b4e938d42201d6c232f5d9259f91133a303/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9802204603616df14ed47d05f1b86f1bd08d8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9802204603616df14ed47d05f1b86f1bd08d8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9802204603616df14ed47d05f1b86f1bd08d8fb"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "2002c05fdb5e328e4e08785bd3d608058837d133", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85307b4e938d42201d6c232f5d9259f91133a303/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85307b4e938d42201d6c232f5d9259f91133a303/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=85307b4e938d42201d6c232f5d9259f91133a303", "patch": "@@ -21788,8 +21788,14 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t       templates, assume S::p to name a type.  Otherwise,\n \t\t       don't.  */\n \t\t    tree decl\n-\t\t      = cp_parser_lookup_name_simple (parser, unqualified_name,\n-\t\t\t\t\t\t      token->location);\n+\t\t      = cp_parser_lookup_name (parser, unqualified_name,\n+\t\t\t\t\t       none_type,\n+\t\t\t\t\t       /*is_template=*/false,\n+\t\t\t\t\t       /*is_namespace=*/false,\n+\t\t\t\t\t       /*check_dependency=*/false,\n+\t\t\t\t\t       /*ambiguous_decls=*/NULL,\n+\t\t\t\t\t       token->location);\n+\n \t\t    if (!is_overloaded_fn (decl)\n \t\t\t/* Allow\n \t\t\t   template<typename T>"}, {"sha": "99468661491980daa52ced6c13cefaf36b48a788", "filename": "gcc/testsuite/g++.dg/cpp2a/typename18.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85307b4e938d42201d6c232f5d9259f91133a303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85307b4e938d42201d6c232f5d9259f91133a303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename18.C?ref=85307b4e938d42201d6c232f5d9259f91133a303", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/97297\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T>\n+struct S {\n+    int simple(T::type);\n+\n+    template <typename U>\n+    int member(U::type);\n+};\n+\n+template <typename T>\n+int S<T>::simple(T::type) {\n+    return 1;\n+}\n+\n+template <typename T>\n+template <typename U>\n+int S<T>::member(U::type) {\n+    return 2;\n+}"}]}