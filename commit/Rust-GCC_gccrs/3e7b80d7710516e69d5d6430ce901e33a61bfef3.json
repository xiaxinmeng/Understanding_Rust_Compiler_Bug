{"sha": "3e7b80d7710516e69d5d6430ce901e33a61bfef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3YjgwZDc3MTA1MTZlNjlkNWQ2NDMwY2U5MDFlMzNhNjFiZmVmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-18T12:26:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-18T12:26:00Z"}, "message": "c-parser.c (c_parser_postfix_expression): Remove unused code.\n\n\t* c-parser.c (c_parser_postfix_expression): Remove unused code.  Update\n\tcommentary.\n\nFrom-SVN: r251181", "tree": {"sha": "9df24f39e7886110e40df4d68fccd0a0fccd0b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df24f39e7886110e40df4d68fccd0a0fccd0b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7b80d7710516e69d5d6430ce901e33a61bfef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7b80d7710516e69d5d6430ce901e33a61bfef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7b80d7710516e69d5d6430ce901e33a61bfef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7b80d7710516e69d5d6430ce901e33a61bfef3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00aa1fa221744dc57f6c6cea8baa669b732d1101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00aa1fa221744dc57f6c6cea8baa669b732d1101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00aa1fa221744dc57f6c6cea8baa669b732d1101"}], "stats": {"total": 32, "additions": 8, "deletions": 24}, "files": [{"sha": "9dcd1c324806daf73e87b5d149cb188dfe7f1c76", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7b80d7710516e69d5d6430ce901e33a61bfef3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7b80d7710516e69d5d6430ce901e33a61bfef3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3e7b80d7710516e69d5d6430ce901e33a61bfef3", "patch": "@@ -1,3 +1,8 @@\n+2017-08-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression): Remove unused code.  Update\n+\tcommentary.\n+\n 2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/53037"}, {"sha": "5c965d4420d3f4065ee0b1a76f6907e04c2c4f60", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7b80d7710516e69d5d6430ce901e33a61bfef3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7b80d7710516e69d5d6430ce901e33a61bfef3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3e7b80d7710516e69d5d6430ce901e33a61bfef3", "patch": "@@ -7752,7 +7752,8 @@ c_parser_generic_selection (c_parser *parser)\n }\n \n /* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2,\n-   C11 6.5.1-6.5.2).\n+   C11 6.5.1-6.5.2).  Compound literals aren't handled here; callers have to\n+   call c_parser_postfix_expression_after_paren_type on encountering them.\n \n    postfix-expression:\n      primary-expression\n@@ -7792,7 +7793,7 @@ c_parser_generic_selection (c_parser *parser)\n      __builtin_types_compatible_p ( type-name , type-name )\n      __builtin_complex ( assignment-expression , assignment-expression )\n      __builtin_shuffle ( assignment-expression , assignment-expression )\n-     __builtin_shuffle ( assignment-expression , \n+     __builtin_shuffle ( assignment-expression ,\n \t\t\t assignment-expression ,\n \t\t\t assignment-expression, )\n \n@@ -7943,28 +7944,6 @@ c_parser_postfix_expression (c_parser *parser)\n \t  set_c_expr_source_range (&expr, loc, close_loc);\n \t  mark_exp_read (expr.value);\n \t}\n-      else if (c_token_starts_typename (c_parser_peek_2nd_token (parser)))\n-\t{\n-\t  /* A compound literal.  ??? Can we actually get here rather\n-\t     than going directly to\n-\t     c_parser_postfix_expression_after_paren_type from\n-\t     elsewhere?  */\n-\t  location_t loc;\n-\t  struct c_type_name *type_name;\n-\t  c_parser_consume_token (parser);\n-\t  loc = c_parser_peek_token (parser)->location;\n-\t  type_name = c_parser_type_name (parser);\n-\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n-\t\t\t\t     \"expected %<)%>\");\n-\t  if (type_name == NULL)\n-\t    {\n-\t      expr.set_error ();\n-\t    }\n-\t  else\n-\t    expr = c_parser_postfix_expression_after_paren_type (parser,\n-\t\t\t\t\t\t\t\t type_name,\n-\t\t\t\t\t\t\t\t loc);\n-\t}\n       else\n \t{\n \t  /* A parenthesized expression.  */"}]}