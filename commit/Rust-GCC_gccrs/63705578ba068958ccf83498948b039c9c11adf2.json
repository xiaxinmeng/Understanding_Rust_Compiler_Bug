{"sha": "63705578ba068958ccf83498948b039c9c11adf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3MDU1NzhiYTA2ODk1OGNjZjgzNDk4OTQ4YjAzOWM5YzExYWRmMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-05-10T23:27:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-10T23:27:55Z"}, "message": "i386.md (*movti_internal_rex64): Avoid MOVAPS size optimization for TARGET_AVX.\n\n\t* config/i386/i386.md (*movti_internal_rex64): Avoid MOVAPS size\n\toptimization for TARGET_AVX.\n\t(*movti_internal_sse): Ditto.\n\t(*movdi_internal_rex64): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n\t(*movdi_internal): Ditto.\n\t(*movsi_internal): Ditto.\n\t(*movtf_internal): Avoid MOVAPS size optimization for TARGET_AVX.\n\t(*movdf_internal_rex64): Ditto.\n\t(*movfd_internal): Ditto.\n\t(*movsf_internal): Ditto.\n\t* config/i386/sse.md (mov<mode>): Handle TARGET_SSE_LOAD0_BY_PXOR.\n\nFrom-SVN: r187386", "tree": {"sha": "3cf0facb49071db9954a9357c08a23665e5b10dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf0facb49071db9954a9357c08a23665e5b10dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63705578ba068958ccf83498948b039c9c11adf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63705578ba068958ccf83498948b039c9c11adf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63705578ba068958ccf83498948b039c9c11adf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63705578ba068958ccf83498948b039c9c11adf2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e580d8ee5945c1d40c0e684acaf1d54f2317c360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e580d8ee5945c1d40c0e684acaf1d54f2317c360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e580d8ee5945c1d40c0e684acaf1d54f2317c360"}], "stats": {"total": 152, "additions": 113, "deletions": 39}, "files": [{"sha": "6eb4d871de0afb930c002785f8a6926b92b2556b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63705578ba068958ccf83498948b039c9c11adf2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63705578ba068958ccf83498948b039c9c11adf2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63705578ba068958ccf83498948b039c9c11adf2", "patch": "@@ -1,3 +1,17 @@\n+2012-05-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movti_internal_rex64): Avoid MOVAPS size\n+\toptimization for TARGET_AVX.\n+\t(*movti_internal_sse): Ditto.\n+\t(*movdi_internal_rex64): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n+\t(*movdi_internal): Ditto.\n+\t(*movsi_internal): Ditto.\n+\t(*movtf_internal): Avoid MOVAPS size optimization for TARGET_AVX.\n+\t(*movdf_internal_rex64): Ditto.\n+\t(*movfd_internal): Ditto.\n+\t(*movsf_internal): Ditto.\n+\t* config/i386/sse.md (mov<mode>): Handle TARGET_SSE_LOAD0_BY_PXOR.\n+\n 2012-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (add_byte_size_attribute) <RECORD_TYPE>: Handle variable"}, {"sha": "44eafe036944d3b1cc61c407786bc62666941067", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 96, "deletions": 39, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63705578ba068958ccf83498948b039c9c11adf2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63705578ba068958ccf83498948b039c9c11adf2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=63705578ba068958ccf83498948b039c9c11adf2", "patch": "@@ -1890,12 +1890,15 @@\n    (set (attr \"mode\")\n    \t(cond [(eq_attr \"alternative\" \"0,1\")\n \t\t (const_string \"DI\")\n-\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"4\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n \t       ]\n \t       (const_string \"TI\")))])\n \n@@ -1943,13 +1946,15 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n-\t       (not (match_test \"TARGET_SSE2\"))\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n \t      ]\n \t      (const_string \"TI\")))])\n@@ -1970,8 +1975,11 @@\n \treturn \"movdq2q\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSEMOV:\n-      if (get_attr_mode (insn) == MODE_TI)\n+      if (get_attr_mode (insn) == MODE_V4SF)\n+\treturn \"%vmovaps\\t{%1, %0|%0, %1}\";\n+      else if (get_attr_mode (insn) == MODE_TI)\n \treturn \"%vmovdqa\\t{%1, %0|%0, %1}\";\n+\n       /* Handle broken assemblers that require movd instead of movq.  */\n       if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n \treturn \"%vmovd\\t{%1, %0|%0, %1}\";\n@@ -2048,7 +2056,20 @@\n      (if_then_else (eq_attr \"alternative\" \"10,11,12,13,14,15\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"SI,DI,DI,DI,SI,DI,DI,DI,DI,DI,TI,DI,TI,DI,DI,DI,DI,DI\")])\n+   (set (attr \"mode\")\n+   \t(cond [(eq_attr \"alternative\" \"0,4\")\n+\t\t  (const_string \"SI\")\n+\t       (eq_attr \"alternative\" \"10,12\")\n+\t\t  (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t\t   (const_string \"V4SF\")\n+\t\t\t (match_test \"TARGET_AVX\")\n+\t\t\t   (const_string \"TI\")\n+\t\t\t (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t   (const_string \"V4SF\")\n+\t\t\t]\n+\t\t\t(const_string \"TI\"))\n+\t      ]\n+\t      (const_string \"DI\")))])\n \n ;; Reload patterns to support multi-word load/store\n ;; with non-offsetable address.\n@@ -2142,7 +2163,7 @@\n \tcase MODE_DI:\n \t   return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_V4SF:\n-\t  return \"movaps\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2SF:\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n@@ -2189,7 +2210,22 @@\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,TI,DI,V4SF,V2SF,V4SF,V2SF,DI,DI\")])\n+   (set (attr \"mode\")\n+   \t(cond [(eq_attr \"alternative\" \"9,11\")\n+\t\t  (const_string \"V4SF\")\n+\t       (eq_attr \"alternative\" \"10,12\")\n+\t\t  (const_string \"V2SF\")\n+\t       (eq_attr \"alternative\" \"5,7\")\n+\t\t  (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t\t   (const_string \"V4SF\")\n+\t\t\t (match_test \"TARGET_AVX\")\n+\t\t\t   (const_string \"TI\")\n+\t\t\t (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t   (const_string \"V4SF\")\n+\t\t\t]\n+\t\t\t(const_string \"TI\"))\n+\t      ]\n+\t      (const_string \"DI\")))])\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n@@ -2271,10 +2307,15 @@\n      (cond [(eq_attr \"alternative\" \"2,3\")\n \t      (const_string \"DI\")\n \t    (eq_attr \"alternative\" \"6,7\")\n-\t      (if_then_else\n-\t        (not (match_test \"TARGET_SSE2\"))\n-\t        (const_string \"V4SF\")\n-\t        (const_string \"TI\"))\n+\t      (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t       (const_string \"V4SF\")\n+\t\t     (match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t     \t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n \t    (and (eq_attr \"alternative\" \"8,9,10,11\")\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n@@ -2881,12 +2922,15 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"3,4\")\n \t\t (const_string \"DI\")\n-\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n \t       ]\n \t       (const_string \"TI\")))])\n \n@@ -3030,9 +3074,11 @@\n \t       (eq_attr \"alternative\" \"3,4,5,6,11,12\")\n \t\t (const_string \"DI\")\n \n-\t       /* xorps is one byte shorter.  */\n+\t       /* xorps is one byte shorter for !TARGET_AVX.  */\n \t       (eq_attr \"alternative\" \"7\")\n-\t\t (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (cond [(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"V2DF\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n@@ -3043,14 +3089,16 @@\n \t\t  whole SSE registers use APD move to break dependency\n \t\t  chains, otherwise use short move to avoid extra work.\n \n-\t\t  movaps encodes one byte shorter.  */\n+\t\t  movaps encodes one byte shorter for !TARGET_AVX.  */\n \t       (eq_attr \"alternative\" \"8\")\n-\t\t (cond\n-\t\t   [(ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t      (const_string \"V4SF\")\n-\t\t    (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t      (const_string \"V2DF\")\n+\t\t (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t\t  (const_string \"V4SF\")\n+\t\t\t(match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t  (const_string \"V2DF\")\n+\t\t\t(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"DF\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_string \"V4SF\")\n \t\t   ]\n \t\t   (const_string \"DF\"))\n \t       /* For architectures resolving dependencies on register\n@@ -3165,9 +3213,11 @@\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"V2SF\"))\n \n-\t       /* xorps is one byte shorter.  */\n+\t       /* xorps is one byte shorter for !TARGET_AVX.  */\n \t       (eq_attr \"alternative\" \"5,9\")\n-\t\t (cond [(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (cond [(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"V2DF\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n@@ -3178,16 +3228,19 @@\n \t\t  whole SSE registers use APD move to break dependency\n \t\t  chains, otherwise use short move to avoid extra work.\n \n-\t\t  movaps encodes one byte shorter.  */\n+\t\t  movaps encodes one byte shorter for !TARGET_AVX.  */\n \t       (eq_attr \"alternative\" \"6,10\")\n-\t\t (cond\n-\t\t   [(ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t      (const_string \"V4SF\")\n-\t\t    (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t      (const_string \"V2DF\")\n+\t\t (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t\t  (const_string \"V4SF\")\n+\t\t\t(match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t  (const_string \"V2DF\")\n+\t\t\t(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"DF\")\n+\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_string \"V4SF\")\n \t\t   ]\n \t\t   (const_string \"DF\"))\n+\n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n \t\t  of register.  */\n@@ -3277,12 +3330,16 @@\n         (cond [(eq_attr \"alternative\" \"3,4,9,10\")\n \t\t (const_string \"SI\")\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (if_then_else\n-\t\t   (and (and (match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n-\t\t\t     (match_test \"TARGET_SSE2\"))\n-\t\t\t(not (match_test \"optimize_function_for_size_p (cfun)\")))\n-\t\t   (const_string \"TI\")\n-\t\t   (const_string \"V4SF\"))\n+\t\t (cond [(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"V4SF\")\n+ \t\t\t(ior (not (match_test \"TARGET_SSE2\"))\n+ \t\t\t     (match_test \"optimize_function_for_size_p (cfun)\"))\n+ \t\t \t  (const_string \"V4SF\")\n+\t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n+\t\t\t  (const_string \"TI\")\n+\t\t       ]\n+\t\t       (const_string \"V4SF\"))\n+\n \t       /* For architectures resolving dependencies on\n \t\t  whole SSE registers use APS move to break dependency\n \t\t  chains, otherwise use short move to avoid extra work."}, {"sha": "d4b3daafcccbef7cbe8a1ed458d9413cdd4d719f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63705578ba068958ccf83498948b039c9c11adf2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63705578ba068958ccf83498948b039c9c11adf2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=63705578ba068958ccf83498948b039c9c11adf2", "patch": "@@ -491,6 +491,9 @@\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n+\t       (and (eq_attr \"alternative\" \"0\")\n+\t\t    (match_test \"TARGET_SSE_LOAD0_BY_PXOR\"))\n+\t\t (const_string \"TI\")\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n "}]}