{"sha": "a020110e54d48068eb9c958a7f248715a534bb37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyMDExMGU1NGQ0ODA2OGViOWM5NThhN2YyNDg3MTVhNTM0YmIzNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-08T16:45:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-08T16:45:58Z"}, "message": "bitmap_allocator.h: Minor clean-ups.\n\n2009-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/bitmap_allocator.h: Minor clean-ups.\n\nFrom-SVN: r152566", "tree": {"sha": "528322b4e07710107e95c5b651c1abf13ba52ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528322b4e07710107e95c5b651c1abf13ba52ebe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a020110e54d48068eb9c958a7f248715a534bb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a020110e54d48068eb9c958a7f248715a534bb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a020110e54d48068eb9c958a7f248715a534bb37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a020110e54d48068eb9c958a7f248715a534bb37/comments", "author": null, "committer": null, "parents": [{"sha": "f7d5a7cd6bc51675373bcc4ae16a79e77782d510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d5a7cd6bc51675373bcc4ae16a79e77782d510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d5a7cd6bc51675373bcc4ae16a79e77782d510"}], "stats": {"total": 126, "additions": 45, "deletions": 81}, "files": [{"sha": "c81985de2032e3da555d3cebfa2f133d241fef72", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a020110e54d48068eb9c958a7f248715a534bb37/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a020110e54d48068eb9c958a7f248715a534bb37/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a020110e54d48068eb9c958a7f248715a534bb37", "patch": "@@ -1,3 +1,7 @@\n+2009-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/bitmap_allocator.h: Minor clean-ups.\n+\n 2009-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* config/abi/pre/gnu.ver: Adjust exports."}, {"sha": "d91d9aa5cc699c781729fb2c78a47f1027a7ce87", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 41, "deletions": 81, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a020110e54d48068eb9c958a7f248715a534bb37/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a020110e54d48068eb9c958a7f248715a534bb37/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=a020110e54d48068eb9c958a7f248715a534bb37", "patch": "@@ -104,20 +104,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// insert(iterator, const_reference), erase(iterator),\n \t// begin(), end(), back(), operator[].\n \n-\t__mini_vector() : _M_start(0), _M_finish(0), \n-\t\t\t  _M_end_of_storage(0)\n-\t{ }\n-\n-#if 0\n-\t~__mini_vector()\n-\t{\n-\t  if (this->_M_start)\n-\t    {\n-\t      this->deallocate(this->_M_start, this->_M_end_of_storage \n-\t\t\t       - this->_M_start);\n-\t    }\n-\t}\n-#endif\n+\t__mini_vector()\n+        : _M_start(0), _M_finish(0), _M_end_of_storage(0) { }\n \n \tsize_type\n \tsize() const throw()\n@@ -276,15 +264,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn __first;\n       }\n \n-    template<typename _InputIterator, typename _Predicate>\n-      inline _InputIterator\n-      __find_if(_InputIterator __first, _InputIterator __last, _Predicate __p)\n-      {\n-\twhile (__first != __last && !__p(*__first))\n-\t  ++__first;\n-\treturn __first;\n-      }\n-\n     /** @brief The number of Blocks pointed to by the address pair\n      *  passed to the function.\n      */\n@@ -380,12 +359,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  // is equal to the number of Objects that the current Block can\n \t  // store, then there is definitely no space for another single\n \t  // object, so just return false.\n-\t  _Counter_type __diff = \n-\t    __gnu_cxx::__detail::__num_bitmaps(__bp);\n+\t  _Counter_type __diff = __detail::__num_bitmaps(__bp);\n \n \t  if (*(reinterpret_cast<size_t*>\n-\t\t(__bp.first) - (__diff + 1))\n-\t      == __gnu_cxx::__detail::__num_blocks(__bp))\n+\t\t(__bp.first) - (__diff + 1)) == __detail::__num_blocks(__bp))\n \t    return false;\n \n \t  size_t* __rover = reinterpret_cast<size_t*>(__bp.first) - 1;\n@@ -402,7 +379,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    }\n \t  return false;\n \t}\n-\n     \n \tsize_t*\n \t_M_get() const throw()\n@@ -413,7 +389,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{ return _M_data_offset * size_t(bits_per_block); }\n       };\n \n-\n     /** @class  _Bitmap_counter bitmap_allocator.h bitmap_allocator.h\n      *\n      *  @brief  The bitmap counter which acts as the bitmap\n@@ -424,11 +399,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     template<typename _Tp>\n       class _Bitmap_counter\n       {\n-\ttypedef typename __detail::__mini_vector<typename std::pair<_Tp, _Tp> >\n-\t_BPVector;\n+\ttypedef typename\n+\t__detail::__mini_vector<typename std::pair<_Tp, _Tp> > _BPVector;\n \ttypedef typename _BPVector::size_type _Index_type;\n \ttypedef _Tp pointer;\n-    \n+\n \t_BPVector& _M_vbp;\n \tsize_t* _M_curr_bmap;\n \tsize_t* _M_last_bmap_in_block;\n@@ -613,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n \t  \n       // Just add the block to the list of free lists unconditionally.\n-      iterator __temp = __gnu_cxx::__detail::__lower_bound\n+      iterator __temp = __detail::__lower_bound\n \t(__free_list.begin(), __free_list.end(), \n \t *__addr, _LT_pointer_compare());\n \n@@ -656,7 +631,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     _M_insert(size_t* __addr) throw()\n     {\n #if defined __GTHREADS\n-      __gnu_cxx::__scoped_lock __bfl_lock(_M_get_mutex());\n+      __scoped_lock __bfl_lock(_M_get_mutex());\n #endif\n       // Call _M_validate to decide what should be done with\n       // this particular free list.\n@@ -747,23 +722,27 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       typedef typename std::pair<_Alloc_block*, _Alloc_block*> _Block_pair;\n \n-      typedef typename \n-      __detail::__mini_vector<_Block_pair> _BPVector;\n+      typedef typename __detail::__mini_vector<_Block_pair> _BPVector;\n+      typedef typename _BPVector::iterator _BPiter;\n+\n+      template<typename _Predicate>\n+        static _BPiter\n+        _S_find(_Predicate __p)\n+        {\n+\t  _BPiter __first = _S_mem_blocks.begin();\n+\t  while (__first != _S_mem_blocks.end() && !__p(*__first))\n+\t    ++__first;\n+\t  return __first;\n+\t}\n \n #if defined _GLIBCXX_DEBUG\n       // Complexity: O(lg(N)). Where, N is the number of block of size\n       // sizeof(value_type).\n       void \n       _S_check_for_free_blocks() throw()\n       {\n-\ttypedef typename \n-\t  __gnu_cxx::__detail::_Ffit_finder<_Alloc_block*> _FFF;\n-\t_FFF __fff;\n-\ttypedef typename _BPVector::iterator _BPiter;\n-\t_BPiter __bpi = \n-\t  __gnu_cxx::__detail::__find_if\n-\t  (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t   __gnu_cxx::__detail::_Functor_Ref<_FFF>(__fff));\n+\ttypedef typename __detail::_Ffit_finder<_Alloc_block*> _FFF;\n+\t_BPiter __bpi = _S_find(_FFF());\n \n \t_GLIBCXX_DEBUG_ASSERT(__bpi == _S_mem_blocks.end());\n       }\n@@ -793,9 +772,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  + _S_block_size * sizeof(_Alloc_block) \n \t  + __num_bitmaps * sizeof(size_t);\n \n-\tsize_t* __temp = \n-\t  reinterpret_cast<size_t*>\n-\t  (this->_M_get(__size_to_allocate));\n+\tsize_t* __temp =\n+\t  reinterpret_cast<size_t*>(this->_M_get(__size_to_allocate));\n \t*__temp = 0;\n \t++__temp;\n \n@@ -810,20 +788,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// Fill the Vector with this information.\n \t_S_mem_blocks.push_back(__bp);\n \n-\tsize_t __bit_mask = 0; // 0 Indicates all Allocated.\n-\t__bit_mask = ~__bit_mask; // 1 Indicates all Free.\n-\n \tfor (size_t __i = 0; __i < __num_bitmaps; ++__i)\n-\t  __temp[__i] = __bit_mask;\n+\t  __temp[__i] = ~static_cast<size_t>(0); // 1 Indicates all Free.\n \n \t_S_block_size *= 2;\n       }\n \n-\n       static _BPVector _S_mem_blocks;\n       static size_t _S_block_size;\n-      static __gnu_cxx::__detail::\n-      _Bitmap_counter<_Alloc_block*> _S_last_request;\n+      static __detail::_Bitmap_counter<_Alloc_block*> _S_last_request;\n       static typename _BPVector::size_type _S_last_dealloc_index;\n #if defined __GTHREADS\n       static __mutex_type _S_mut;\n@@ -848,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_allocate_single_object() throw(std::bad_alloc)\n       {\n #if defined __GTHREADS\n-\t__gnu_cxx::__scoped_lock __bit_lock(_S_mut);\n+\t__scoped_lock __bit_lock(_S_mut);\n #endif\n \n \t// The algorithm is something like this: The last_request\n@@ -866,21 +839,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// dereference if tinkered with.\n \twhile (_S_last_request._M_finished() == false\n \t       && (*(_S_last_request._M_get()) == 0))\n-\t  {\n-\t    _S_last_request.operator++();\n-\t  }\n+\t  _S_last_request.operator++();\n \n \tif (__builtin_expect(_S_last_request._M_finished() == true, false))\n \t  {\n \t    // Fall Back to First Fit algorithm.\n-\t    typedef typename \n-\t      __gnu_cxx::__detail::_Ffit_finder<_Alloc_block*> _FFF;\n+\t    typedef typename __detail::_Ffit_finder<_Alloc_block*> _FFF;\n \t    _FFF __fff;\n-\t    typedef typename _BPVector::iterator _BPiter;\n-\t    _BPiter __bpi = \n-\t      __gnu_cxx::__detail::__find_if\n-\t      (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t       __gnu_cxx::__detail::_Functor_Ref<_FFF>(__fff));\n+\t    _BPiter __bpi = _S_find(__detail::_Functor_Ref<_FFF>(__fff));\n \n \t    if (__bpi != _S_mem_blocks.end())\n \t      {\n@@ -897,8 +863,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  (__bpi->first + __fff._M_offset() + __nz_bit);\n \t\tsize_t* __puse_count = \n \t\t  reinterpret_cast<size_t*>\n-\t\t  (__bpi->first) \n-\t\t  - (__gnu_cxx::__detail::__num_bitmaps(*__bpi) + 1);\n+\t\t  (__bpi->first) - (__detail::__num_bitmaps(*__bpi) + 1);\n \t\t\n \t\t++(*__puse_count);\n \t\treturn __ret;\n@@ -927,7 +892,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[_S_last_request._M_where()].first)\n-\t  - (__gnu_cxx::__detail::\n+\t  - (__detail::\n \t     __num_bitmaps(_S_mem_blocks[_S_last_request._M_where()]) + 1);\n \n \t++(*__puse_count);\n@@ -946,7 +911,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_deallocate_single_object(pointer __p) throw()\n       {\n #if defined __GTHREADS\n-\t__gnu_cxx::__scoped_lock __bit_lock(_S_mut);\n+\t__scoped_lock __bit_lock(_S_mut);\n #endif\n \t_Alloc_block* __real_p = reinterpret_cast<_Alloc_block*>(__p);\n \n@@ -958,9 +923,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \t_GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index >= 0);\n \n-\t\n-\tif (__gnu_cxx::__detail::_Inclusive_between<_Alloc_block*>\n-\t    (__real_p) (_S_mem_blocks[_S_last_dealloc_index]))\n+\t__detail::_Inclusive_between<_Alloc_block*> __ibt(__real_p);\n+\tif (__ibt(_S_mem_blocks[_S_last_dealloc_index]))\n \t  {\n \t    _GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index\n \t\t\t\t  <= _S_mem_blocks.size() - 1);\n@@ -971,11 +935,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n \telse\n \t  {\n-\t    _Iterator _iter = __gnu_cxx::__detail::\n-\t      __find_if(_S_mem_blocks.begin(), \n-\t\t\t_S_mem_blocks.end(), \n-\t\t\t__gnu_cxx::__detail::\n-\t\t\t_Inclusive_between<_Alloc_block*>(__real_p));\n+\t    _Iterator _iter = _S_find(__ibt);\n \n \t    _GLIBCXX_DEBUG_ASSERT(_iter != _S_mem_blocks.end());\n \n@@ -995,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t__detail::__bit_free(__bitmapC, __rotate);\n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first)\n-\t  - (__gnu_cxx::__detail::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n+\t  - (__detail::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n \t\n \t_GLIBCXX_DEBUG_ASSERT(*__puse_count != 0);\n \n@@ -1127,12 +1087,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     2 * size_t(__detail::bits_per_block);\n \n   template<typename _Tp>\n-    typename __gnu_cxx::bitmap_allocator<_Tp>::_BPVector::size_type \n+    typename bitmap_allocator<_Tp>::_BPVector::size_type \n     bitmap_allocator<_Tp>::_S_last_dealloc_index = 0;\n \n   template<typename _Tp>\n-    __gnu_cxx::__detail::_Bitmap_counter \n-  <typename bitmap_allocator<_Tp>::_Alloc_block*>\n+    __detail::_Bitmap_counter\n+      <typename bitmap_allocator<_Tp>::_Alloc_block*>\n     bitmap_allocator<_Tp>::_S_last_request(_S_mem_blocks);\n \n #if defined __GTHREADS"}]}