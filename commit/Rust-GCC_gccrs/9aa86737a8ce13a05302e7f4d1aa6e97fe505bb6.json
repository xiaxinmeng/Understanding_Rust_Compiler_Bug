{"sha": "9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhODY3MzdhOGNlMTNhMDUzMDJlN2Y0ZDFhYTZlOTdmZTUwNWJiNg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-12-17T19:05:43Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-12-17T19:05:43Z"}, "message": "rs6000.c (vrsave_operation): Recognize SETs in parallel.\n\n2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (vrsave_operation): Recognize SETs in\n        parallel.\n        (is_gpr_return_reg): New.\n        (rs6000_emit_prologue): Call generate_set_vrsave with additional\n        argument.  Save only registers in the mask.  Attach\n        REG_FRAME_RELATED_EXPR note to altivec offsets.  Do not call\n        rs6000_frame_related when saving VRSAVE.\n        (rs6000_emit_epilogue): Call generate_set_vrsave with additional\n        argument.  Restore only registers in the mask.  Restore altivec\n        registers after we restore CR.\n        (generate_set_vrsave): New parameter epiloguep.  Generate unspec\n        sets instead of clobbers for call saved registers.\n        (altivec_frame_fixup): New.\n\nFrom-SVN: r48116", "tree": {"sha": "89e3525bbe4f54025bcdc97f1c50ff3f861c31a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89e3525bbe4f54025bcdc97f1c50ff3f861c31a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c453325c7204611d0bba0eed257347bed6b4e20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c453325c7204611d0bba0eed257347bed6b4e20b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c453325c7204611d0bba0eed257347bed6b4e20b"}], "stats": {"total": 290, "additions": 180, "deletions": 110}, "files": [{"sha": "eae2406b6ba72e640cae169fb891259e1dd302d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "patch": "@@ -1,3 +1,19 @@\n+2001-12-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (vrsave_operation): Recognize SETs in\n+\tparallel.\n+\t(is_gpr_return_reg): New.\n+\t(rs6000_emit_prologue): Call generate_set_vrsave with additional\n+\targument.  Save only registers in the mask.  Attach\n+\tREG_FRAME_RELATED_EXPR note to altivec offsets.  Do not call\n+\trs6000_frame_related when saving VRSAVE.\n+\t(rs6000_emit_epilogue): Call generate_set_vrsave with additional\n+\targument.  Restore only registers in the mask.  Restore altivec\n+\tregisters after we restore CR.\n+\t(generate_set_vrsave): New parameter epiloguep.  Generate unspec\n+\tsets instead of clobbers for call saved registers.\n+\t(altivec_frame_fixup): New.\n+\t\n 2001-12-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sparc.md (movdi_zero): Remove."}, {"sha": "9bc925334e425fac83d977e6aa284b665ce82cfa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 164, "deletions": 110, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9aa86737a8ce13a05302e7f4d1aa6e97fe505bb6", "patch": "@@ -167,8 +167,10 @@ static void rs6000_parse_abi_options PARAMS ((void));\n static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n static void is_altivec_return_reg PARAMS ((rtx, void *));\n+static void is_gpr_return_reg PARAMS ((rtx, void *));\n int vrsave_operation PARAMS ((rtx, enum machine_mode));\n-static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *));\n+static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *, int));\n+static void altivec_frame_fixup PARAMS ((rtx, rtx, HOST_WIDE_INT));\n \f\n /* Default register names.  */\n char rs6000_reg_names[][8] =\n@@ -4440,7 +4442,8 @@ vrsave_operation (op, mode)\n     {\n       rtx elt = XVECEXP (op, 0, i);\n \n-      if (GET_CODE (elt) != CLOBBER)\n+      if (GET_CODE (elt) != CLOBBER\n+\t  && GET_CODE (elt) != SET)\n \treturn 0;\n     }\n \n@@ -7585,6 +7588,32 @@ rs6000_emit_allocate_stack (size, copy_r12)\n \t\t       REG_NOTES (insn));\n }\n \n+/* Add a RTX_FRAME_RELATED note so that dwarf2out_frame_debug_expr\n+   knows that:\n+\n+     (mem (plus (blah) (regXX)))\n+\n+   is really:\n+\n+     (mem (plus (blah) (const VALUE_OF_REGXX))).  */\n+\n+static void\n+altivec_frame_fixup (insn, reg, val)\n+     rtx insn, reg;\n+     HOST_WIDE_INT val;\n+{\n+  rtx real;\n+\n+  real = copy_rtx (PATTERN (insn));\n+\n+  real = replace_rtx (real, reg, GEN_INT (val));\n+\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t\t\treal,\n+\t\t\t\t\tREG_NOTES (insn));\n+}\n+\n /* Add to 'insn' a note which is PATTERN (INSN) but with REG replaced\n    with (plus:P (reg 1) VAL), and with REG2 replaced with RREG if REG2\n    is not NULL.  It would be nice if dwarf2out_frame_debug_expr could\n@@ -7668,9 +7697,10 @@ rs6000_frame_related (insn, reg, val, reg2, rreg)\n    appropriate CLOBBERs.  */\n \n static rtx\n-generate_set_vrsave (reg, info)\n+generate_set_vrsave (reg, info, epiloguep)\n      rtx reg;\n      rs6000_stack_t *info;\n+     int epiloguep;\n {\n   int nclobs, i;\n   rtx insn, clobs[TOTAL_ALTIVEC_REGS + 1];\n@@ -7679,12 +7709,37 @@ generate_set_vrsave (reg, info)\n \n   nclobs = 1;\n \n-  /* CLOBBER the registers in the mask.  */\n+  /* We need to clobber the registers in the mask so the scheduler\n+     does not move sets to VRSAVE before sets of AltiVec registers.\n+\n+     However, if the function receives nonlocal gotos, reload will set\n+     all call saved registers live.  We will end up with:\n+\n+     \t(set (reg 999) (mem))\n+\t(parallel [ (set (reg vrsave) (unspec blah))\n+\t\t    (clobber (reg 999))])\n+\n+     The clobber will cause the store into reg 999 to be dead, and\n+     flow will attempt to delete an epilogue insn.  In this case, we\n+     need an unspec use/set of the register.  */\n \n   for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n     if (info->vrsave_mask != 0 && ALTIVEC_REG_BIT (i) != 0)\n-      clobs[nclobs++] = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t gen_rtx_REG (V4SImode, i));\n+      {\n+\tif (!epiloguep || call_used_regs [i])\n+\t  clobs[nclobs++] = gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\t     gen_rtx_REG (V4SImode, i));\n+\telse\n+\t  {\n+\t    rtx reg = gen_rtx_REG (V4SImode, i);\n+\t    rtvec r = rtvec_alloc (1);\n+\n+\t    RTVEC_ELT (r, 0) = reg;\n+\n+\t    clobs[nclobs++]\n+\t      = gen_rtx_SET (VOIDmode, reg, gen_rtx_UNSPEC (V4SImode, r, 27));\n+\t  }\n+      }\n \n   insn = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nclobs));\n \n@@ -7734,6 +7789,69 @@ rs6000_emit_prologue ()\n \trs6000_emit_stack_tie ();\n     }\n \n+  /* Save AltiVec registers if needed.  */\n+  if (TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n+    {\n+      int i;\n+\n+      /* There should be a non inline version of this, for when we\n+\t are saving lots of vector registers.  */\n+      for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n+\tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n+\t  {\n+\t    rtx areg, savereg, mem;\n+\t    int offset;\n+\n+\t    offset = info->altivec_save_offset + sp_offset\n+\t      + 16 * (i - info->first_altivec_reg_save);\n+\n+\t    savereg = gen_rtx_REG (V4SImode, i);\n+\n+\t    areg = gen_rtx_REG (Pmode, 0);\n+\t    emit_move_insn (areg, GEN_INT (offset));\n+\n+\t    /* AltiVec addressing mode is [reg+reg].  */\n+\t    mem = gen_rtx_MEM (V4SImode,\n+\t\t\t       gen_rtx_PLUS (Pmode, frame_reg_rtx, areg));\n+\t\t\t       \n+\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\n+\t    insn = emit_move_insn (mem, savereg);\n+\n+\t    altivec_frame_fixup (insn, areg, offset);\n+\t  }\n+    }\n+\n+  /* VRSAVE is a bit vector representing which AltiVec registers\n+     are used.  The OS uses this to determine which vector\n+     registers to save on a context switch.  We need to save\n+     VRSAVE on the stack frame, add whatever AltiVec registers we\n+     used in this function, and do the corresponding magic in the\n+     epilogue.  */\n+\n+  if (TARGET_ALTIVEC && info->vrsave_mask != 0)\n+    {\n+      rtx reg, mem;\n+      int offset;\n+\n+      /* Get VRSAVE onto a GPR.  */\n+      reg = gen_rtx_REG (SImode, 12);\n+      emit_insn (gen_get_vrsave (reg));\n+\n+      /* Save VRSAVE.  */\n+      offset = info->vrsave_save_offset + sp_offset;\n+      mem\n+\t= gen_rtx_MEM (SImode,\n+\t\t       gen_rtx_PLUS (Pmode, frame_reg_rtx, GEN_INT (offset)));\n+      set_mem_alias_set (mem, rs6000_sr_alias_set);\n+      insn = emit_move_insn (mem, reg);\n+\n+      /* Include the registers in the mask.  */\n+      emit_insn (gen_iorsi3 (reg, reg, GEN_INT ((int) info->vrsave_mask)));\n+\n+      insn = emit_insn (generate_set_vrsave (reg, info, 0));\n+    }\n+\n   /* If we use the link register, get it into r0.  */\n   if (info->lr_save_p)\n     emit_move_insn (gen_rtx_REG (Pmode, 0),\n@@ -7928,70 +8046,6 @@ rs6000_emit_prologue ()\n   if (info->push_p && DEFAULT_ABI != ABI_V4)\n     rs6000_emit_allocate_stack (info->total_size, FALSE);\n \n-  /* Save AltiVec registers if needed.  */\n-  if (TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n-    {\n-      int i;\n-\n-      /* There should be a non inline version of this, for when we\n-\t are saving lots of vector registers.  */\n-      for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n-\tif (regs_ever_live[i] && ! call_used_regs[i])\n-\t  {\n-\t    rtx addr, areg, savereg, mem;\n-\n-\t    savereg = gen_rtx_REG (V4SImode, i);\n-\n-\t    areg = gen_rtx_REG (Pmode, 0);\n-\t    emit_move_insn\n-\t      (areg, GEN_INT (info->altivec_save_offset\n-\t\t\t      + sp_offset\n-\t\t\t      + 16 * (i - info->first_altivec_reg_save)));\n-\n-\t    /* AltiVec addressing mode is [reg+reg].  */\n-\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n-\t    mem = gen_rtx_MEM (V4SImode, addr);\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n-\t    insn = emit_move_insn (mem, savereg);\n-\t    rs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n-\t\t\t\t  NULL_RTX, NULL_RTX);\n-\t  }\n-    }\n-\n-  /* VRSAVE is a bit vector representing which AltiVec registers\n-     are used.  The OS uses this to determine which vector\n-     registers to save on a context switch.  We need to save\n-     VRSAVE on the stack frame, add whatever AltiVec registers we\n-     used in this function, and do the corresponding magic in the\n-     epilogue.  */\n-\n-  if (TARGET_ALTIVEC && info->vrsave_mask != 0)\n-    {\n-      rtx reg, addr, mem;\n-\n-      /* Get VRSAVE onto a GPR.  */\n-      reg = gen_rtx_REG (SImode, 12);\n-      emit_insn (gen_get_vrsave (reg));\n-\n-      /* Save VRSAVE.  */\n-      addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n-      mem = gen_rtx_MEM (SImode, addr);\n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n-      insn = emit_move_insn (mem, reg);\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n-\t\t\t    NULL_RTX, NULL_RTX);\n-\n-      /* Include the registers in the mask.  */\n-      emit_insn (gen_iorsi3 (reg, reg, GEN_INT ((int) info->vrsave_mask)));\n-\n-      insn = emit_insn (generate_set_vrsave (reg, info));\n-\n-      rs6000_frame_related (insn, frame_ptr_rtx, info->total_size,\n-\t\t\t    NULL_RTX, NULL_RTX);\n-    }\n-\n   /* Set frame pointer, if needed.  */\n   if (frame_pointer_needed)\n     {\n@@ -8154,6 +8208,46 @@ rs6000_emit_epilogue (sibcall)\n \t}\n     }\n   \n+  /* Restore AltiVec registers if needed.  */\n+  if (TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n+    {\n+      int i;\n+\n+      for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n+\tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n+\t  {\n+\t    rtx addr, areg, mem;\n+\n+\t    areg = gen_rtx_REG (Pmode, 0);\n+\t    emit_move_insn\n+\t      (areg, GEN_INT (info->altivec_save_offset\n+\t\t\t      + sp_offset\n+\t\t\t      + 16 * (i - info->first_altivec_reg_save)));\n+\n+\t    /* AltiVec addressing mode is [reg+reg].  */\n+\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n+\t    mem = gen_rtx_MEM (V4SImode, addr);\n+\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n+\n+\t    emit_move_insn (gen_rtx_REG (V4SImode, i), mem);\n+\t  }\n+    }\n+\n+  /* Restore VRSAVE if needed.  */\n+  if (TARGET_ALTIVEC_ABI && info->vrsave_mask != 0)\n+    {\n+      rtx addr, mem, reg;\n+\n+      addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n+\t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n+      mem = gen_rtx_MEM (SImode, addr);\n+      set_mem_alias_set (mem, rs6000_sr_alias_set);\n+      reg = gen_rtx_REG (SImode, 12);\n+      emit_move_insn (reg, mem);\n+\n+      emit_insn (generate_set_vrsave (reg, info, 1));\n+    }\n+\n   /* Get the old lr if we saved it.  */\n   if (info->lr_save_p)\n     {\n@@ -8269,46 +8363,6 @@ rs6000_emit_epilogue (sibcall)\n \t\t\t  mem);\n \t}\n \n-  /* Restore AltiVec registers if needed.  */\n-  if (TARGET_ALTIVEC_ABI && info->altivec_size != 0)\n-    {\n-      int i;\n-\n-      for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n-\tif (regs_ever_live[i] && ! call_used_regs[i])\n-\t  {\n-\t    rtx addr, areg, mem;\n-\n-\t    areg = gen_rtx_REG (Pmode, 0);\n-\t    emit_move_insn\n-\t      (areg, GEN_INT (info->altivec_save_offset\n-\t\t\t      + sp_offset\n-\t\t\t      + 16 * (i - info->first_altivec_reg_save)));\n-\n-\t    /* AltiVec addressing mode is [reg+reg].  */\n-\t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n-\t    mem = gen_rtx_MEM (V4SImode, addr);\n-\t    set_mem_alias_set (mem, rs6000_sr_alias_set);\n-\n-\t    emit_move_insn (gen_rtx_REG (V4SImode, i), mem);\n-\t  }\n-    }\n-\n-  /* Restore VRSAVE if needed.  */\n-  if (TARGET_ALTIVEC_ABI && info->vrsave_mask != 0)\n-    {\n-      rtx addr, mem, reg;\n-\n-      addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n-\t\t\t   GEN_INT (info->vrsave_save_offset + sp_offset));\n-      mem = gen_rtx_MEM (SImode, addr);\n-      set_mem_alias_set (mem, rs6000_sr_alias_set);\n-      reg = gen_rtx_REG (SImode, 12);\n-      emit_move_insn (reg, mem);\n-\n-      emit_insn (generate_set_vrsave (reg, info));\n-    }\n-\n   /* If we saved cr, restore it here.  Just those that were used.  */\n   if (info->cr_save_p)\n     {"}]}