{"sha": "6d8eb96b448df0073941f48e8d0c6ded834b5da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4ZWI5NmI0NDhkZjAwNzM5NDFmNDhlOGQwYzZkZWQ4MzRiNWRhNg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-07-25T13:39:05Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-07-25T13:39:05Z"}, "message": "Add an abstract incremental hash data type\n\nSome files in gcc, like lto or tree, do large scale incremential hashing.\nThe current jhash implementation of this could be likely improved\nby using an incremential hash that does not do a full rehashing\nfor every new value added.\n\nThis patch adds a new \"inchash\" class that abstracts the internal\nstate of the hash. This makes it easier to plug in new hashes\nand also cleans up the code a bit.\n\nRight now it is just implemented in the same way as the old\niterative hash in tree.c. The previous iterative hash code\nfrom tree.c moved into a new separate file. Also I fixed up all\nusers to include the new header.\n\nIt should not really significantly change any hashing by itself,\nit's mostly a cleanup at this point.\n\nv2: Remove begin. Add commutative interface.\nAdd merge hash interface.  Add add_flag.\n\ngcc/:\n\n2014-07-25  Andi Kleen  <ak@linux.intel.com>\n\n\t* Makefile.in (OBJS): Add inchash.o.\n\t(PLUGIN_HEADERS): Add inchash.h.\n\t* ipa-devirt.c: Include inchash.h.\n\t* lto-streamer-out.c: Dito.\n\t* tree-ssa-dom.c: Dito.\n\t* tree-ssa-pre.c: Dito.\n\t* tree-ssa-sccvn.c: Dito.\n\t* tree-ssa-tail-merge.c: Dito.\n\t* asan.c: Dito.\n\t* tree.c (iterative_hash_hashval_t): Move to ...\n\t(iterative_hash_host_wide_int): Move to ...\n\t* inchash.c: Here. New file.\n\t* tree.h (iterative_hash_hashval_t): Move to ...\n\t(iterative_hash_host_wide_int): Move to ...\n\t* inchash.h: Here. New file.\n\ngcc/lto/:\n\n2014-07-25  Andi Kleen  <ak@linux.intel.com>\n\n\t* lto.c: Include inchash.h\n\nFrom-SVN: r213054", "tree": {"sha": "4511c17b40b5c5e380fd3e722d314ee3a4201b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4511c17b40b5c5e380fd3e722d314ee3a4201b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d8eb96b448df0073941f48e8d0c6ded834b5da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8eb96b448df0073941f48e8d0c6ded834b5da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8eb96b448df0073941f48e8d0c6ded834b5da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8eb96b448df0073941f48e8d0c6ded834b5da6/comments", "author": null, "committer": null, "parents": [{"sha": "f54860ea9624d03dbcf06b5f804159f8d8bc536d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54860ea9624d03dbcf06b5f804159f8d8bc536d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54860ea9624d03dbcf06b5f804159f8d8bc536d"}], "stats": {"total": 291, "additions": 237, "deletions": 54}, "files": [{"sha": "9f42d856d6eb8c5c3df3d7caa0e0cd2d4927ca94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -1,3 +1,21 @@\n+2014-07-25  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* Makefile.in (OBJS): Add inchash.o.\n+\t(PLUGIN_HEADERS): Add inchash.h.\n+\t* ipa-devirt.c: Include inchash.h.\n+\t* lto-streamer-out.c: Dito.\n+\t* tree-ssa-dom.c: Dito.\n+\t* tree-ssa-pre.c: Dito.\n+\t* tree-ssa-sccvn.c: Dito.\n+\t* tree-ssa-tail-merge.c: Dito.\n+\t* asan.c: Dito.\n+\t* tree.c (iterative_hash_hashval_t): Move to ...\n+\t(iterative_hash_host_wide_int): Move to ...\n+\t* inchash.c: Here. New file.\n+\t* tree.h (iterative_hash_hashval_t): Move to ...\n+\t(iterative_hash_host_wide_int): Move to ...\n+\t* inchash.h: Here. New file.\n+\n 2014-07-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61762"}, {"sha": "4c578b3798113a4dd474b7acdf935b16637c01db", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -1268,6 +1268,7 @@ OBJS = \\\n \thwint.o \\\n \tifcvt.o \\\n \tree.o \\\n+\tinchash.o \\\n \tincpath.o \\\n \tinit-regs.o \\\n \tinternal-fn.o \\\n@@ -3162,7 +3163,7 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   tree-parloops.h tree-ssa-address.h tree-ssa-coalesce.h tree-ssa-dom.h \\\n   tree-ssa-loop.h tree-ssa-loop-ivopts.h tree-ssa-loop-manip.h \\\n   tree-ssa-loop-niter.h tree-ssa-ter.h tree-ssa-threadedge.h \\\n-  tree-ssa-threadupdate.h\n+  tree-ssa-threadupdate.h inchash.h\n \n # generate the 'build fragment' b-header-vars\n s-header-vars: Makefile"}, {"sha": "475dd824fa3401f634154398210560610574b4c4", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"gimple-expr.h\"\n #include \"is-a.h\"\n+#include \"inchash.h\"\n #include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\""}, {"sha": "0f8583eab5f0cba7f46a8483dd0c6d4cd6e21dde", "filename": "gcc/inchash.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Finchash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Finchash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finchash.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -0,0 +1,75 @@\n+/* Incremential hashing for jhash.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hashtab.h\"\n+#include \"inchash.h\"\n+\n+/* Borrowed from hashtab.c iterative_hash implementation.  */\n+#define mix(a,b,c) \\\n+{ \\\n+  a -= b; a -= c; a ^= (c>>13); \\\n+  b -= c; b -= a; b ^= (a<< 8); \\\n+  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \\\n+  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \\\n+  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \\\n+  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \\\n+  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \\\n+  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \\\n+  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \\\n+}\n+\n+\n+/* Produce good hash value combining VAL and VAL2.  */\n+hashval_t\n+iterative_hash_hashval_t (hashval_t val, hashval_t val2)\n+{\n+  /* the golden ratio; an arbitrary value.  */\n+  hashval_t a = 0x9e3779b9;\n+\n+  mix (a, val, val2);\n+  return val2;\n+}\n+\n+/* Produce good hash value combining VAL and VAL2.  */\n+\n+hashval_t\n+iterative_hash_host_wide_int (HOST_WIDE_INT val, hashval_t val2)\n+{\n+  if (sizeof (HOST_WIDE_INT) == sizeof (hashval_t))\n+    return iterative_hash_hashval_t (val, val2);\n+  else\n+    {\n+      hashval_t a = (hashval_t) val;\n+      /* Avoid warnings about shifting of more than the width of the type on\n+         hosts that won't execute this path.  */\n+      int zero = 0;\n+      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));\n+      mix (a, b, val2);\n+      if (sizeof (HOST_WIDE_INT) > 2 * sizeof (hashval_t))\n+\t{\n+\t  hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));\n+\t  hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));\n+\t  mix (a, b, val2);\n+\t}\n+      return val2;\n+    }\n+}"}, {"sha": "7af0baaddbd46ce6f2676163ee02d49eb9d89826", "filename": "gcc/inchash.h", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Finchash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Finchash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finchash.h?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -0,0 +1,129 @@\n+/* An incremental hash abstract data type.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef INCHASH_H\n+#define INCHASH_H 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hashtab.h\"\n+\n+/* This file implements an incremential hash function ADT, to be used\n+   by code that incrementially hashes a lot of unrelated data\n+   (not in a single memory block) into a single value. The goal\n+   is to make it easy to plug in efficient hash algorithms.\n+   Currently it just implements the plain old jhash based\n+   incremental hash from gcc's tree.c.  */\n+\n+extern hashval_t iterative_hash_host_wide_int (HOST_WIDE_INT, hashval_t);\n+extern hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);\n+\n+class inchash\n+{\n+ public:\n+\n+  /* Start incremential hashing, optionally with SEED.  */\n+  inchash (hashval_t seed = 0)\n+  {\n+    val = seed;\n+    bits = 0;\n+  }\n+\n+  /* End incremential hashing and provide the final value.  */\n+  hashval_t end ()\n+  {\n+    return val;\n+  }\n+\n+  /* Add unsigned value V.  */\n+  void add_int (unsigned v)\n+  {\n+    val = iterative_hash_hashval_t (v, val);\n+  }\n+\n+  /* Add HOST_WIDE_INT value V.  */\n+  void add_wide_int (HOST_WIDE_INT v)\n+  {\n+    val = iterative_hash_host_wide_int (v, val);\n+  }\n+\n+  /* Hash in pointer PTR.  */\n+  void add_ptr (void *ptr)\n+  {\n+    add (&ptr, sizeof (ptr));\n+  }\n+\n+  /* Add a memory block DATA with size LEN.  */\n+  void add (const void *data, size_t len)\n+  {\n+    val = iterative_hash (data, len, val);\n+  }\n+\n+  /* Merge hash value OTHER.  */\n+  void merge_hash (hashval_t other)\n+  {\n+    val = iterative_hash_hashval_t (other, val);\n+  }\n+\n+  /* Hash in state from other inchash OTHER.  */\n+  void merge (inchash &other)\n+  {\n+    merge_hash (other.val);\n+  }\n+\n+  /* Support for accumulating boolean flags */\n+\n+  void add_flag (bool flag)\n+  {\n+    bits = (bits << 1) | flag;\n+  }\n+\n+  void commit_flag ()\n+  {\n+    add_int (bits);\n+    bits = 0;\n+  }\n+\n+  /* Support for commutative hashing. Add A and B in a defined order\n+     based on their value. This is useful for hashing commutative\n+     expressions, so that A+B and B+A get the same hash.  */\n+\n+  void add_commutative (inchash &a, inchash &b)\n+  {\n+    if (a.end() > b.end())\n+      {\n+        merge (b);\n+\tmerge (a);\n+      }\n+    else\n+      {\n+        merge (a);\n+        merge (b);\n+      }\n+  }\n+\n+ private:\n+  hashval_t val;\n+  unsigned bits;\n+};\n+\n+#define add_object(o) add (&(o), sizeof (o))\n+\n+#endif"}, {"sha": "127d58d775d2dd8a2f71b27adfbc7e51c614d8fc", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -118,6 +118,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"target.h\"\n #include \"hash-table.h\"\n+#include \"inchash.h\"\n #include \"tree-pretty-print.h\"\n #include \"ipa-utils.h\"\n #include \"tree-ssa-alias.h\""}, {"sha": "9f9a0138bbcd917f55f8e0763a4f07641b93787b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\"\n+#include \"inchash.h\"\n #include \"except.h\"\n #include \"lto-symtab.h\"\n #include \"lto-streamer.h\""}, {"sha": "0510a12b0ea60d47308dd8b03b3e9b9c130cf27f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -1,3 +1,7 @@\n+2014-07-25  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* lto.c: Include inchash.h\n+\n 2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (mentions_vars_p_decl_non_common): Skip"}, {"sha": "7fcea913135b7ccd0bc39c92799e2ca94befef07", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"bitmap.h\"\n #include \"hash-map.h\"\n+#include \"inchash.h\"\n #include \"ipa-prop.h\"\n #include \"common.h\"\n #include \"debug.h\""}, {"sha": "08fd2faf452e9ffd311f62d1191cd5c9c61d4552", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n+#include \"inchash.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-ssa-alias.h\""}, {"sha": "8b4d2badb6f20c98a0bb61d81f72934985ae1301", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n+#include \"inchash.h\"\n #include \"hash-table.h\"\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\""}, {"sha": "93314fc70e842faee90eb860096fbf0cf73e55e4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\"\n+#include \"inchash.h\"\n #include \"gimple-fold.h\"\n #include \"tree-eh.h\"\n #include \"gimple-expr.h\""}, {"sha": "9600e283cac3af79a631bba370ccce351cfdc991", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -192,6 +192,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"stor-layout.h\"\n #include \"trans-mem.h\"\n+#include \"inchash.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"flags.h\""}, {"sha": "3625bf5a0cee95abfa82ed1a4ebd5aa60c044994", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"obstack.h\"\n #include \"toplev.h\" /* get_random_seed */\n #include \"hashtab.h\"\n+#include \"inchash.h\"\n #include \"filenames.h\"\n #include \"output.h\"\n #include \"target.h\"\n@@ -4582,56 +4583,6 @@ build_decl_attribute_variant (tree ddecl, tree attribute)\n   return ddecl;\n }\n \n-/* Borrowed from hashtab.c iterative_hash implementation.  */\n-#define mix(a,b,c) \\\n-{ \\\n-  a -= b; a -= c; a ^= (c>>13); \\\n-  b -= c; b -= a; b ^= (a<< 8); \\\n-  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \\\n-  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \\\n-  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \\\n-  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \\\n-  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \\\n-  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \\\n-  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \\\n-}\n-\n-\n-/* Produce good hash value combining VAL and VAL2.  */\n-hashval_t\n-iterative_hash_hashval_t (hashval_t val, hashval_t val2)\n-{\n-  /* the golden ratio; an arbitrary value.  */\n-  hashval_t a = 0x9e3779b9;\n-\n-  mix (a, val, val2);\n-  return val2;\n-}\n-\n-/* Produce good hash value combining VAL and VAL2.  */\n-hashval_t\n-iterative_hash_host_wide_int (HOST_WIDE_INT val, hashval_t val2)\n-{\n-  if (sizeof (HOST_WIDE_INT) == sizeof (hashval_t))\n-    return iterative_hash_hashval_t (val, val2);\n-  else\n-    {\n-      hashval_t a = (hashval_t) val;\n-      /* Avoid warnings about shifting of more than the width of the type on\n-         hosts that won't execute this path.  */\n-      int zero = 0;\n-      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));\n-      mix (a, b, val2);\n-      if (sizeof (HOST_WIDE_INT) > 2 * sizeof (hashval_t))\n-\t{\n-\t  hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));\n-\t  hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));\n-\t  mix (a, b, val2);\n-\t}\n-      return val2;\n-    }\n-}\n-\n /* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n    is ATTRIBUTE and its qualifiers are QUALS.\n "}, {"sha": "190428ab885c621a5ab78472d1d226f097b885f5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8eb96b448df0073941f48e8d0c6ded834b5da6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6d8eb96b448df0073941f48e8d0c6ded834b5da6", "patch": "@@ -4284,9 +4284,6 @@ extern int tree_floor_log2 (const_tree);\n extern unsigned int tree_ctz (const_tree);\n extern int simple_cst_equal (const_tree, const_tree);\n extern hashval_t iterative_hash_expr (const_tree, hashval_t);\n-extern hashval_t iterative_hash_host_wide_int (HOST_WIDE_INT, hashval_t);\n-extern hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);\n-extern hashval_t iterative_hash_host_wide_int (HOST_WIDE_INT, hashval_t);\n extern int compare_tree_int (const_tree, unsigned HOST_WIDE_INT);\n extern int type_list_equal (const_tree, const_tree);\n extern int chain_member (const_tree, const_tree);"}]}