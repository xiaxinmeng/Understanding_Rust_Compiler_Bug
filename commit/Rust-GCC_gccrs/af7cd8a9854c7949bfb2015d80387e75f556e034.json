{"sha": "af7cd8a9854c7949bfb2015d80387e75f556e034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3Y2Q4YTk4NTRjNzk0OWJmYjIwMTVkODAzODdlNzVmNTU2ZTAzNA==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-04T16:11:36Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-05T10:25:57Z"}, "message": "parser: Implement parse_items() as separate public function", "tree": {"sha": "221102b7325afba5619dbb61c8b80f9a27e24346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221102b7325afba5619dbb61c8b80f9a27e24346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af7cd8a9854c7949bfb2015d80387e75f556e034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7cd8a9854c7949bfb2015d80387e75f556e034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7cd8a9854c7949bfb2015d80387e75f556e034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7cd8a9854c7949bfb2015d80387e75f556e034/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15635e68bb65d5ce6963ce0c820719a06ca794cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15635e68bb65d5ce6963ce0c820719a06ca794cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15635e68bb65d5ce6963ce0c820719a06ca794cd"}], "stats": {"total": 62, "additions": 23, "deletions": 39}, "files": [{"sha": "ccfff8417842e53da01909a2c1e769658c222249", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7cd8a9854c7949bfb2015d80387e75f556e034/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7cd8a9854c7949bfb2015d80387e75f556e034/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=af7cd8a9854c7949bfb2015d80387e75f556e034", "patch": "@@ -388,15 +388,12 @@ Parser<ManagedTokenSource>::done_end_of_file ()\n   return lexer.peek_token ()->get_id () == END_OF_FILE;\n }\n \n-// Parses a crate (compilation unit) - entry point\n+// Parses a sequence of items within a module or the implicit top-level module\n+// in a crate\n template <typename ManagedTokenSource>\n-AST::Crate\n-Parser<ManagedTokenSource>::parse_crate ()\n+std::vector<std::unique_ptr<AST::Item>>\n+Parser<ManagedTokenSource>::parse_items ()\n {\n-  // parse inner attributes\n-  AST::AttrVec inner_attrs = parse_inner_attributes ();\n-\n-  // parse items\n   std::vector<std::unique_ptr<AST::Item>> items;\n \n   const_TokenPtr t = lexer.peek_token ();\n@@ -419,6 +416,20 @@ Parser<ManagedTokenSource>::parse_crate ()\n       t = lexer.peek_token ();\n     }\n \n+  return items;\n+}\n+\n+// Parses a crate (compilation unit) - entry point\n+template <typename ManagedTokenSource>\n+AST::Crate\n+Parser<ManagedTokenSource>::parse_crate ()\n+{\n+  // parse inner attributes\n+  AST::AttrVec inner_attrs = parse_inner_attributes ();\n+\n+  // parse items\n+  std::vector<std::unique_ptr<AST::Item>> items = parse_items ();\n+\n   // emit all errors\n   for (const auto &error : error_table)\n     error.emit_error ();\n@@ -992,37 +1003,6 @@ Parser<ManagedTokenSource>::parse_token_tree ()\n     }\n }\n \n-/* Parses a sequence of items within a module or the implicit top-level module\n- * in a crate. Note: this is not currently used as parsing an item sequence\n- * individually is pretty simple and allows for better error diagnostics and\n- * detection. */\n-template <typename ManagedTokenSource>\n-std::vector<std::unique_ptr<AST::Item>>\n-Parser<ManagedTokenSource>::parse_items ()\n-{\n-  std::vector<std::unique_ptr<AST::Item>> items;\n-\n-  // TODO: replace with do-while loop?\n-  // infinite loop to save on comparisons (may be a tight loop) - breaks when\n-  // next item is null\n-  while (true)\n-    {\n-      std::unique_ptr<AST::Item> item = parse_item (false);\n-\n-      if (item != nullptr)\n-\t{\n-\t  items.push_back (std::move (item));\n-\t}\n-      else\n-\t{\n-\t  break;\n-\t}\n-    }\n-\n-  items.shrink_to_fit ();\n-  return items;\n-}\n-\n // Parses a single item\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::Item>"}, {"sha": "3920893faf678372d2b88c6e496446660f43c02a", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7cd8a9854c7949bfb2015d80387e75f556e034/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7cd8a9854c7949bfb2015d80387e75f556e034/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=af7cd8a9854c7949bfb2015d80387e75f556e034", "patch": "@@ -141,7 +141,6 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::MacroMatchRepetition> parse_macro_match_repetition ();\n \n   // Top-level item-related\n-  std::vector<std::unique_ptr<AST::Item> > parse_items ();\n   std::unique_ptr<AST::Item> parse_item (bool called_from_statement);\n   std::unique_ptr<AST::VisItem> parse_vis_item (AST::AttrVec outer_attrs);\n   std::unique_ptr<AST::MacroItem> parse_macro_item (AST::AttrVec outer_attrs);\n@@ -580,11 +579,16 @@ template <typename ManagedTokenSource> class Parser\n   bool done_end_of_file ();\n \n   void add_error (Error error) { error_table.push_back (std::move (error)); }\n+  std::vector<Error> &get_errors () { return error_table; }\n \n public:\n   // Construct parser with specified \"managed\" token source.\n   Parser (ManagedTokenSource tokenSource) : lexer (std::move (tokenSource)) {}\n \n+  // Parse items without parsing an entire crate. This function is the main\n+  // parsing loop of AST::Crate::parse_crate().\n+  std::vector<std::unique_ptr<AST::Item> > parse_items ();\n+\n   // Main entry point for parser.\n   AST::Crate parse_crate ();\n "}]}