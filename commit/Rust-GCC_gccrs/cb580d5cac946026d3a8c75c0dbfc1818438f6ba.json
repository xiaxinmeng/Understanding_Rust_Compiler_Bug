{"sha": "cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1ODBkNWNhYzk0NjAyNmQzYThjNzVjMGRiZmMxODE4NDM4ZjZiYQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-10-13T00:06:21Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-10-13T00:06:21Z"}, "message": "index.html (Is libstdc++-v3 thread-safe?): Update based on Nathan's review.\n\n\t* docs/html/faq/index.html (Is libstdc++-v3 thread-safe?): Update\n\tbased on Nathan's review.  Use Nathan's words.\n\nFrom-SVN: r46238", "tree": {"sha": "c683a1686d25ca3bc6fc2b06e138eb19d9fb2ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c683a1686d25ca3bc6fc2b06e138eb19d9fb2ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb580d5cac946026d3a8c75c0dbfc1818438f6ba/comments", "author": null, "committer": null, "parents": [{"sha": "0c34509f6d35696dc5fc4213cbe774eef26785aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c34509f6d35696dc5fc4213cbe774eef26785aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c34509f6d35696dc5fc4213cbe774eef26785aa"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "808d1f074202cd57f0ad56e71dfd4c3c61116013", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb580d5cac946026d3a8c75c0dbfc1818438f6ba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb580d5cac946026d3a8c75c0dbfc1818438f6ba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "patch": "@@ -1,3 +1,8 @@\n+2001-10-12  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* docs/html/faq/index.html (Is libstdc++-v3 thread-safe?): Update\n+\tbased on Nathan's review.  Use Nathan's words.\n+\n 2001-10-11  Matt Kraai  <kraai@alumni.carnegiemellon.edu>\n \n \t* docs/html/configopts.html: Quote StyleSheet attribute values."}, {"sha": "e0f31ceba3e4c094b8f3be9ecdbea3ddeb2cbf8d", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb580d5cac946026d3a8c75c0dbfc1818438f6ba/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb580d5cac946026d3a8c75c0dbfc1818438f6ba/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=cb580d5cac946026d3a8c75c0dbfc1818438f6ba", "patch": "@@ -686,7 +686,9 @@ <h2><a name=\"5_5\">5.5 [removed]</a></h2>\n \n <hr>\n    <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n-      <p>When the system's libc is itself thread-safe, libstdc++-v3\n+      <p>When the system's libc is itself thread-safe, a non-generic\n+         implementation of atomicity.h exists for the architecture, and\n+\t gcc itself reports a thread model other than single; libstdc++-v3\n          strives to be thread-safe.  The user-code must guard against\n          concurrent method calls which may access any particular\n          library object's state.  Typically, the application\n@@ -718,22 +720,12 @@ <h2><a name=\"5_6\">5.6 Is libstdc++-v3 thread-safe?</a></h2>\n \t object_a.mutate ();\n        }\n          </pre>\n-      <p>However, as of gcc 3.0 and point releases, beware that there\n-         may be cases where shared nested or global objects (neither\n-         of which are visible to user-code) are affected or used\n-         without any internal locking.\n-\t <!-- Is this warning still required? - Loren -->\n-      </p>\n-      <p>In some cases, a stronger thread-safe claim is made.  The\n-\t string class is thread-safe without user-code guards (i.e. a\n-\t string object may be shared and accessed between threads\n-\t without user-level locking).  The IO classes are thread-safe\n-\t with user-code guards whenever the same user-visible object\n-\t may be accessed by multiple threads.  The container classes\n-\t are thread-safe with user-code guards whenever the same\n-\t container may be accessed by multiple threads.  All accesses\n-\t to hidden shared objects (e.g. the global allocator objects)\n-\t are believed to be properly guarded within the library.\n+      <p>All library objects are safe to use in a multithreaded\n+         program as long as each thread carefully locks out access by\n+         any other thread while it uses any object visible to another\n+         thread.  This requirement includes both read and write access\n+         to objects; do not assume that two threads may read a shared\n+         standard container at the same time.\n       </p>\n       <p>See chapters <a href=\"../17_intro/howto.html#3\">17</a>,\n          <a href=\"../23_containers/howto.html#3\">23</a> and"}]}