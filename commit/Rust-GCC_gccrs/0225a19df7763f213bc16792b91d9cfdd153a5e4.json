{"sha": "0225a19df7763f213bc16792b91d9cfdd153a5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyNWExOWRmNzc2M2YyMTNiYzE2NzkyYjkxZDljZmRkMTUzYTVlNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-07-19T17:32:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-07-19T17:32:38Z"}, "message": "re PR c++/28337 (ICE with string literals in templates)\n\n\tPR c++/28337\n\t* typeck.c (build_binary_op): Short-circuit pointer arithmetic in\n\ttemplates.\n\tPR c++/28337\n\t* g++.dg/template/string1.C: New test.\n\nFrom-SVN: r115597", "tree": {"sha": "4584149f3fdaade2611956fa7358104e3f3b9c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4584149f3fdaade2611956fa7358104e3f3b9c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0225a19df7763f213bc16792b91d9cfdd153a5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0225a19df7763f213bc16792b91d9cfdd153a5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0225a19df7763f213bc16792b91d9cfdd153a5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0225a19df7763f213bc16792b91d9cfdd153a5e4/comments", "author": null, "committer": null, "parents": [{"sha": "cf0d6f2e579da809726f3178b29a3e4e32a83ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0d6f2e579da809726f3178b29a3e4e32a83ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0d6f2e579da809726f3178b29a3e4e32a83ca4"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "24731c4bbb17ff8b1dad2917b9b92fe97bb03cb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0225a19df7763f213bc16792b91d9cfdd153a5e4", "patch": "@@ -1,3 +1,9 @@\n+2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28337\n+\t* typeck.c (build_binary_op): Short-circuit pointer arithmetic in\n+\ttemplates.\n+\n 2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28048"}, {"sha": "0ded718d4bbb5af07f0f9ae838a6d094becc9b02", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0225a19df7763f213bc16792b91d9cfdd153a5e4", "patch": "@@ -3043,28 +3043,40 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n   switch (code)\n     {\n-    case PLUS_EXPR:\n-      /* Handle the pointer + int case.  */\n-      if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n-\treturn cp_pointer_int_sum (PLUS_EXPR, op0, op1);\n-      else if (code1 == POINTER_TYPE && code0 == INTEGER_TYPE)\n-\treturn cp_pointer_int_sum (PLUS_EXPR, op1, op0);\n-      else\n-\tcommon = 1;\n-      break;\n-\n     case MINUS_EXPR:\n       /* Subtraction of two similar pointers.\n \t We must subtract them as integers, then divide by object size.  */\n       if (code0 == POINTER_TYPE && code1 == POINTER_TYPE\n \t  && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n \t\t\t\t\t\t\tTREE_TYPE (type1)))\n \treturn pointer_diff (op0, op1, common_type (type0, type1));\n-      /* Handle pointer minus int.  Just like pointer plus int.  */\n-      else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n-\treturn cp_pointer_int_sum (MINUS_EXPR, op0, op1);\n-      else\n-\tcommon = 1;\n+      /* In all other cases except pointer - int, the usual arithmetic\n+\t rules aply.  */\n+      else if (!(code0 == POINTER_TYPE && code1 == INTEGER_TYPE))\n+\t{\n+\t  common = 1;\n+\t  break;\n+\t}\n+      /* The pointer - int case is just like pointer + int; fall\n+\t through.  */\n+    case PLUS_EXPR:\n+      if ((code0 == POINTER_TYPE || code1 == POINTER_TYPE)\n+\t  && (code0 == INTEGER_TYPE || code1 == INTEGER_TYPE))\n+\t{\n+\t  tree ptr_operand;\n+\t  tree int_operand;\n+\t  ptr_operand = ((code0 == POINTER_TYPE) ? op0 : op1);\n+\t  int_operand = ((code0 == INTEGER_TYPE) ? op0 : op1);\n+\t  if (processing_template_decl)\n+\t    {\n+\t      result_type = TREE_TYPE (ptr_operand);\n+\t      break;\n+\t    }\n+\t  return cp_pointer_int_sum (code,\n+\t\t\t\t     ptr_operand, \n+\t\t\t\t     int_operand);\n+\t}\n+      common = 1;\n       break;\n \n     case MULT_EXPR:"}, {"sha": "7fef2708796af20340a6f1952e1faaa7838aecc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0225a19df7763f213bc16792b91d9cfdd153a5e4", "patch": "@@ -1,3 +1,8 @@\n+2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28337\n+\t* g++.dg/template/string1.C: New test.\n+\n 2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28048"}, {"sha": "a5d6c7dd60f52c4abce6a97ce811fceaafff16f0", "filename": "gcc/testsuite/g++.dg/template/string1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstring1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0225a19df7763f213bc16792b91d9cfdd153a5e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstring1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstring1.C?ref=0225a19df7763f213bc16792b91d9cfdd153a5e4", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/28337\n+\n+template <int> void foo()\n+{\n+  (0 ? \"\" : \"X\") + 1;\n+}\n+"}]}