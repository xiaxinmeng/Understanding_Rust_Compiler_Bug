{"sha": "d48734ef2097ddc561d94a580fc953ee96ce64e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4NzM0ZWYyMDk3ZGRjNTYxZDk0YTU4MGZjOTUzZWU5NmNlNjRlOQ==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-10-30T22:43:45Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-10-30T22:43:45Z"}, "message": "re PR fortran/18883 (ICE in gfc_finish_var_decl)\n\nfortran/\n2005-10-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/18883\n        * trans-decl.c (gfc_finish_var_decl): Add decl to the\n        current function, rather than the parent.  Make\n        assertion accept fake result variables.\n        * trans-expr.c (gfc_conv_variable): If the character\n        length of an ENTRY isn't set, get the length from\n        the master function instead.\n\ntestsuite\n2005-10-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/18883\n        * gfortran.dg/char_result_9.f90: New.\n        * gfortran.dg/char_result_10.f90: New.\n\nFrom-SVN: r106254", "tree": {"sha": "102686eae7993678eeae05f49c9be9da67cf827f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102686eae7993678eeae05f49c9be9da67cf827f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48734ef2097ddc561d94a580fc953ee96ce64e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48734ef2097ddc561d94a580fc953ee96ce64e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48734ef2097ddc561d94a580fc953ee96ce64e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48734ef2097ddc561d94a580fc953ee96ce64e9/comments", "author": null, "committer": null, "parents": [{"sha": "097588e4e451fa245febe7d8e8d70e93c4ec7cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097588e4e451fa245febe7d8e8d70e93c4ec7cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097588e4e451fa245febe7d8e8d70e93c4ec7cf4"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "03441c7bbc4779e4f673edf685358ebac07c7d46", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -1,3 +1,13 @@\n+2005-10-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/18883\n+\t* trans-decl.c (gfc_finish_var_decl): Add decl to the\n+\tcurrent function, rather than the parent.  Make\n+\tassertion accept fake result variables.\n+\t* trans-expr.c (gfc_conv_variable): If the character\n+\tlength of an ENTRY isn't set, get the length from\n+\tthe master function instead.\n+\n 2005-10-30  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* gfortran.texi:  Remove reservations about I/O usability.  Document"}, {"sha": "dce409557efc98a8258906085e4ab73e3914f60f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -469,7 +469,8 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n      function scope.  */\n   if (current_function_decl != NULL_TREE)\n     {\n-      if (sym->ns->proc_name->backend_decl == current_function_decl)\n+      if (sym->ns->proc_name->backend_decl == current_function_decl\n+          || sym->result == sym)\n \tgfc_add_decl_to_function (decl);\n       else\n \tgfc_add_decl_to_parent_function (decl);\n@@ -487,7 +488,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n   else if (sym->module && !sym->attr.result && !sym->attr.dummy)\n     {\n       /* TODO: Don't set sym->module for result or dummy variables.  */\n-      gcc_assert (current_function_decl == NULL_TREE);\n+      gcc_assert (current_function_decl == NULL_TREE || sym->result == sym);\n       /* This is the declaration of a module variable.  */\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;"}, {"sha": "f911487030b2c805d9439eed3fc2c9bca4d73e85", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -403,7 +403,12 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n   /* For character variables, also get the length.  */\n   if (sym->ts.type == BT_CHARACTER)\n     {\n-      se->string_length = sym->ts.cl->backend_decl;\n+      /* If the character length of an entry isn't set, get the length from\n+         the master function instead.  */\n+      if (sym->attr.entry && !sym->ts.cl->backend_decl)\n+        se->string_length = sym->ns->proc_name->ts.cl->backend_decl;\n+      else\n+        se->string_length = sym->ts.cl->backend_decl;\n       gcc_assert (se->string_length);\n     }\n "}, {"sha": "da223eff358a5f836dd33658beff3cb0479d05e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -1,3 +1,9 @@\n+2005-10-28  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/18883\n+\t* gfortran.dg/char_result_9.f90: New.\n+\t* gfortran.dg/char_result_10.f90: New.\n+\n 2005-10-30  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/tree-ssa/pr24172.C: New testcase."}, {"sha": "d14fd38151a703cadc00123c230fc7c7823ef9b6", "filename": "gcc/testsuite/gfortran.dg/char_result_10.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_10.f90?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! PR 18883: Fake result variables of non-constant length, with ENTRY\n+function s_to_c(chars)\n+    character, pointer :: chars(:)\n+    character(len=len(chars)) :: s_to_c, s_to_c_2\n+    s_to_c = 'a'\n+    return\n+entry s_to_c_2(chars)\n+    s_to_c_2 = 'b'\n+    return\n+end function s_to_c\n+\n+program huj\n+\n+    implicit none\n+    interface\n+        function s_to_c(chars)\n+            character, pointer :: chars(:)\n+            character(len=len(chars)) :: s_to_c\n+        end function s_to_c\n+\n+        function s_to_c_2(chars)\n+            character, pointer :: chars(:)\n+            character(len=len(chars)) :: s_to_c_2\n+        end function s_to_c_2\n+    end interface\n+\n+    character, pointer :: c(:)\n+    character(3) :: s\n+\n+    allocate(c(5))\n+    c = (/\"a\", \"b\", \"c\" /)\n+    s = s_to_c(c)\n+    s = s_to_c_2(c)\n+\n+end program huj"}, {"sha": "e32df0e01b49fbda712ccff970ba9fe6101da477", "filename": "gcc/testsuite/gfortran.dg/char_result_9.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48734ef2097ddc561d94a580fc953ee96ce64e9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_9.f90?ref=d48734ef2097ddc561d94a580fc953ee96ce64e9", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! PR 18883: Fake result variables of non-constant length, in module\n+module foo\n+contains\n+    function s_to_c(chars)\n+        character, pointer :: chars(:)\n+        character(len=len(chars)) :: s_to_c\n+        s_to_c = 'a'\n+    end function s_to_c\n+end module foo\n+\n+program huj\n+\n+    use foo\n+\n+    implicit none\n+    character, pointer :: c(:)\n+    character(3) :: s\n+\n+    allocate(c(5))\n+    c = (/\"a\", \"b\", \"c\" /)\n+    s = s_to_c(c)\n+\n+end program huj"}]}