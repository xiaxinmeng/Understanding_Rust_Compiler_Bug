{"sha": "a310bb73edc9548e08d1fa28e7a56246caf27757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxMGJiNzNlZGM5NTQ4ZTA4ZDFmYTI4ZTdhNTYyNDZjYWYyNzc1Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-04T08:07:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-04T10:31:50Z"}, "message": "tree-optimization/100329 - avoid reassociating asm goto defs\n\nThis avoids reassociating asm goto defs because we have no idea\non which outgoing edge to insert defs.\n\n2021-05-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100329\n\t* tree-ssa-reassoc.c (can_reassociate_p): Do not reassociate\n\tasm goto defs.\n\t(insert_stmt_after): Assert we're not running into asm goto.\n\n\t* gcc.dg/torture/pr100329.c: New testcase.", "tree": {"sha": "4494b14985d410f01d6ecb2f5616b3884aa0508f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4494b14985d410f01d6ecb2f5616b3884aa0508f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a310bb73edc9548e08d1fa28e7a56246caf27757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a310bb73edc9548e08d1fa28e7a56246caf27757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a310bb73edc9548e08d1fa28e7a56246caf27757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a310bb73edc9548e08d1fa28e7a56246caf27757/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2326627eb19d8c21251fd60479f1a190621c475b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2326627eb19d8c21251fd60479f1a190621c475b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2326627eb19d8c21251fd60479f1a190621c475b"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "b90700dd5f0c0582aafc7ef02797fa7c48a89c62", "filename": "gcc/testsuite/gcc.dg/torture/pr100329.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a310bb73edc9548e08d1fa28e7a56246caf27757/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100329.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a310bb73edc9548e08d1fa28e7a56246caf27757/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100329.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100329.c?ref=a310bb73edc9548e08d1fa28e7a56246caf27757", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param tree-reassoc-width=2\" } */\n+\n+unsigned int a0;\n+\n+unsigned int\n+foo (unsigned int a1, unsigned int a2)\n+{\n+  unsigned int x;\n+\n+  asm goto (\"\" : \"=r\" (x) : : : lab);\n+  a0 = x;\n+\n+ lab:\n+  return x + a1 + a2 + 1;\n+}"}, {"sha": "359367c9382c1c9ca4f61a937dafbffe92dacafe", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a310bb73edc9548e08d1fa28e7a56246caf27757/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a310bb73edc9548e08d1fa28e7a56246caf27757/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=a310bb73edc9548e08d1fa28e7a56246caf27757", "patch": "@@ -1446,6 +1446,10 @@ insert_stmt_after (gimple *stmt, gimple *insert_point)\n       gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n       return;\n     }\n+  else if (gimple_code (insert_point) == GIMPLE_ASM)\n+    /* We have no idea where to insert - it depends on where the\n+       uses will be placed.  */\n+    gcc_unreachable ();\n   else\n     /* We assume INSERT_POINT is a SSA_NAME_DEF_STMT of some SSA_NAME,\n        thus if it must end a basic block, it should be a call that can\n@@ -5893,6 +5897,12 @@ can_reassociate_p (tree op)\n   tree type = TREE_TYPE (op);\n   if (TREE_CODE (op) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op))\n     return false;\n+  /* Make sure asm goto outputs do not participate in reassociation since\n+     we have no way to find an insertion place after asm goto.  */\n+  if (TREE_CODE (op) == SSA_NAME\n+      && gimple_code (SSA_NAME_DEF_STMT (op)) == GIMPLE_ASM\n+      && gimple_asm_nlabels (as_a <gasm *> (SSA_NAME_DEF_STMT (op))) != 0)\n+    return false;\n   if ((ANY_INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type))\n       || NON_SAT_FIXED_POINT_TYPE_P (type)\n       || (flag_associative_math && FLOAT_TYPE_P (type)))"}]}