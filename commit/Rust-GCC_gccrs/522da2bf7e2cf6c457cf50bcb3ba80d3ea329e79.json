{"sha": "522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZGEyYmY3ZTJjZjZjNDU3Y2Y1MGJjYjNiYTgwZDNlYTMyOWU3OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-01T09:01:12Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-01T09:01:12Z"}, "message": "re PR c++/9447 (using Base<T>::member does not work)\n\ncp:\n\tPR c++/9447\n\t* decl2.c (do_class_using_decl): Set type to NULL_TREE.\n\t* semantics.c (finish_expr_stmt): Do not convert to void in a\n\ttemplate.\ntestsuite:\n\tPR c++/9447\n\t* g++.dg/template/using5.C: New test.\n\nFrom-SVN: r70039", "tree": {"sha": "382b18eafe947752799f301c76be5dca6404f191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/382b18eafe947752799f301c76be5dca6404f191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/comments", "author": null, "committer": null, "parents": [{"sha": "e9c00e62d0aa1448248d377d82eb1b186152a061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c00e62d0aa1448248d377d82eb1b186152a061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c00e62d0aa1448248d377d82eb1b186152a061"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "8c2e6a3b636695dfeed5f5741c960c40683a2a48", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "patch": "@@ -1,3 +1,10 @@\n+2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9447\n+\t* decl2.c (do_class_using_decl): Set type to NULL_TREE.\n+\t* semantics.c (finish_expr_stmt): Do not convert to void in a\n+\ttemplate.\n+\n 2003-07-31  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (coerce_template_parms): Refactor."}, {"sha": "a8c62634469ec081d5c6e564342c1a2c27de03f2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "patch": "@@ -4096,7 +4096,7 @@ do_class_using_decl (tree decl)\n \n   my_friendly_assert (TREE_CODE (name) == IDENTIFIER_NODE, 980716);\n \n-  value = build_lang_decl (USING_DECL, name, unknown_type_node);\n+  value = build_lang_decl (USING_DECL, name, NULL_TREE);\n   DECL_INITIAL (value) = TREE_OPERAND (decl, 0);\n   return value;\n }"}, {"sha": "de5b190ee0246eac5e014ea02fb4bb6782d17392", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "patch": "@@ -430,7 +430,7 @@ finish_expr_stmt (tree expr)\n       /* Remember the type of the expression.  */\n       expr_type = TREE_TYPE (expr);\n \n-      if (stmts_are_full_exprs_p ())\n+      if (!processing_template_decl && stmts_are_full_exprs_p ())\n \texpr = convert_to_void (expr, \"statement\");\n       \n       r = add_stmt (build_stmt (EXPR_STMT, expr));"}, {"sha": "57e9802dc33903a8dbf8fd41dda1a27f3191b5b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "patch": "@@ -1,3 +1,8 @@\n+2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9447\n+\t* g++.dg/template/using5.C: New test.\n+\n 2003-07-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-27.c: New test case."}, {"sha": "096ddc0b7cd0dd3fcca94e4d4745dd5a226d7628", "filename": "gcc/testsuite/g++.dg/template/using5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing5.C?ref=522da2bf7e2cf6c457cf50bcb3ba80d3ea329e79", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 31 Jul 2003 <nathan@codesourcery.com>\n+\n+// PR 9447. further test cases for dependent using decl\n+\n+template <typename T> struct Base;\n+\n+template <typename T> struct Derived : public Base<T> {\n+  using Base<T>::i;\n+  \n+  Derived() { i; }\n+  \n+  int get_i() { return i.f(); }\n+  \n+};"}]}