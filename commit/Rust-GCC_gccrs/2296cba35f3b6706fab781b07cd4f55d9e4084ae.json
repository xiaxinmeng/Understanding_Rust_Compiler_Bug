{"sha": "2296cba35f3b6706fab781b07cd4f55d9e4084ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5NmNiYTM1ZjNiNjcwNmZhYjc4MWIwN2NkNGY1NWQ5ZTQwODRhZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-24T04:17:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-24T04:17:16Z"}, "message": "fix typos in comments.\n\nFrom-SVN: r1270", "tree": {"sha": "84b8c2709a14382413ecb0c30f41dd7961044bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b8c2709a14382413ecb0c30f41dd7961044bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2296cba35f3b6706fab781b07cd4f55d9e4084ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2296cba35f3b6706fab781b07cd4f55d9e4084ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2296cba35f3b6706fab781b07cd4f55d9e4084ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2296cba35f3b6706fab781b07cd4f55d9e4084ae/comments", "author": null, "committer": null, "parents": [{"sha": "9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "70abbdd3024a07488f0ea231a69eb84161333162", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -733,7 +733,7 @@ i960_output_ldconst (dst, src)\n }\n \n /* Determine if there is an opportunity for a bypass optimization.\n-   Bypass suceeds on the 960K* if the destination of the previous\n+   Bypass succeeds on the 960K* if the destination of the previous\n    instruction is the second operand of the current instruction.\n    Bypass always succeeds on the C*.\n  \n@@ -2073,7 +2073,7 @@ i960_round_align (align, tsize)\n }\n \f\n /* Do any needed setup for a varargs function.  For the i960, we must\n-   create a register paramter block if one doesn't exist, and then copy\n+   create a register parameter block if one doesn't exist, and then copy\n    all register parameters to memory.  */\n \n void"}, {"sha": "fbb3a4e0f05596311d1945cc5b7d093e6c8d4a85", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -526,7 +526,7 @@\n   [(set_attr \"type\" \"branch\")])\n \f\n ;; Normal move instructions.\n-;; This code is based on the sparc machine desciption.\n+;; This code is based on the sparc machine description.\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"\")"}, {"sha": "c2143591e09e55ea7188389ceff48133c29d51cb", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -1249,7 +1249,7 @@ standard_68881_constant_p (x)\n   union {double d; int i[2];} u;\n   register double d;\n \n-  /* fmovecr must be emulated on the 68040, so it shoudn't be used at all. */\n+  /* fmovecr must be emulated on the 68040, so it shouldn't be used at all. */\n   if (TARGET_68040)\n     return 0;\n "}, {"sha": "e1bc52a2444e31f13030164ec03fef2353ad4b70", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -903,7 +903,7 @@ mostly_false_jump (jump_insn, condition)\n \n   /* EQ tests are usually false and NE tests are usually true.  Also,\n      most quantities are positive, so we can make the appropriate guesses\n-     about signed comparisons against zero.  Consider unsigned comparsions\n+     about signed comparisons against zero.  Consider unsigned comparisons\n      to be a range check and assume quantities to be in range.  */\n   switch (GET_CODE (condition))\n     {"}, {"sha": "98499cb95f731514fe67818a3654baf454a96af1", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -452,7 +452,7 @@ extern char * reg_names[];\n     spill area instead of memory.\n       -waste if only used once\n \n-    floating point caluclations\n+    floating point calculations\n       -probably a waste unless we have run out of general purpose registers\n \n     freeing up general purpose registers\n@@ -503,8 +503,8 @@ extern char * reg_names[];\n \tBut this is currently disabled since tying in global_alloc is not\n \tyet implemented.\n \n-    The explaination of why the preserved register is not used is as follows,\n-    I believe.  The registers are being allocated in order.  Tieing is not\n+    The explanation of why the preserved register is not used is as follows,\n+    I believe.  The registers are being allocated in order.  Tying is not\n     done so efficiently, so when it comes time to do the first allocation,\n     there are no registers left to use without spilling except extended\n     registers.  Then when the next pseudo register needs a hard reg, there\n@@ -556,7 +556,7 @@ extern char * reg_names[];\n    The following follows the current 88open UCS specification for the\n    Extended Register File (XRF):\n    Reg 32       = x0\t\tAlways equal to zero\n-   Reg 33-53\t= x1-x21\tTempory registers (Caller Save)\n+   Reg 33-53\t= x1-x21\tTemporary registers (Caller Save)\n    Reg 54-61\t= x22-x29\tPreserver registers (Callee Save)\n    Reg 62-63\t= x30-x31\tReserved for future ABI use.\n "}, {"sha": "dc3a737e716c68bf8c2cb57f75fee66ce253177e", "filename": "gcc/config/m88k/sysv3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fsysv3.h?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Motorola m88100 running the AT&T/Unisoft/Motorla V.3 reference port.\n+   Motorola m88100 running the AT&T/Unisoft/Motorola V.3 reference port.\n    Copyright (C) 1990, 1991 Free Software Foundation, Inc.\n    Contributed by Ray Essick (ressick@mot.com)\n    Currently supported by Tom Wood (wood@dg-rtp.dg.com)"}, {"sha": "f30c1ed84c0a1f92ac91e00e153f74eb4660573c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -1512,7 +1512,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n      rtx cmp0;\t\t\t/* first operand to compare */\n      rtx cmp1;\t\t\t/* second operand to compare */\n      int *p_invert;\t\t/* NULL or ptr to hold whether branch needs */\n-\t\t\t\t/* to reserse it's test */\n+\t\t\t\t/* to reverse its test */\n {\n   struct cmp_info {\n     enum rtx_code test_code;\t/* code to use in instruction (LT vs. LTU) */\n@@ -1614,7 +1614,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n \t    return (rtx)0;\n \t}\n \n-      /* allocate a psuedo to calculate the value in.  */\n+      /* allocate a pseudo to calculate the value in.  */\n       result = gen_reg_rtx (SImode);\n     }\n \n@@ -1811,8 +1811,8 @@ gen_conditional_branch (operands, test_code)\n \n static rtx\n block_move_load_store (dest_reg, src_reg, p_bytes, p_offset, align, orig_src)\n-     rtx src_reg;\t\t/* register holding source memory addresss */\n-     rtx dest_reg;\t\t/* register holding dest. memory addresss */\n+     rtx src_reg;\t\t/* register holding source memory address */\n+     rtx dest_reg;\t\t/* register holding dest. memory address */\n      int *p_bytes;\t\t/* pointer to # bytes remaining */\n      int *p_offset;\t\t/* pointer to current offset */\n      int align;\t\t\t/* alignment */"}, {"sha": "2dcaea19f3bfcc05c06546c32123545c2bf35e4c", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -7,7 +7,7 @@ CONFIG2_H\t= $(srcdir)/config/mips.h\n # PREMADE_ATTRTAB = $(srcdir)/config/mips-at.c\n # PREMADE_ATTRTAB_MD = $(srcdir)/config/mips-at.md\n \n-# Supress building libgcc1.a, since the MIPS compiler port is complete\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n # and does not need anything from libgcc1.a.\n LIBGCC1 = libgcc1.null\n "}, {"sha": "b8c0fdaad2358e03a39b9ce522d1e40393caf622", "filename": "gcc/config/mips/t-osfrose", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-osfrose", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-osfrose", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-osfrose?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -6,7 +6,7 @@ CONFIG2_H\t= $(srcdir)/config/mips.h $(srcdir)/config/decrose.h $(srcdir)/halfpic\n # PREMADE_ATTRTAB = $(srcdir)/config/mips-at.c\n # PREMADE_ATTRTAB_MD = $(srcdir)/config/mips-at.md\n \n-# Supress building libgcc1.a, since the MIPS compiler port is complete\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n # and does not need anything from libgcc1.a.\n LIBGCC1 = libgcc1.null\n "}, {"sha": "2dcaea19f3bfcc05c06546c32123545c2bf35e4c", "filename": "gcc/config/mips/t-ultrix", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-ultrix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fmips%2Ft-ultrix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-ultrix?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -7,7 +7,7 @@ CONFIG2_H\t= $(srcdir)/config/mips.h\n # PREMADE_ATTRTAB = $(srcdir)/config/mips-at.c\n # PREMADE_ATTRTAB_MD = $(srcdir)/config/mips-at.md\n \n-# Supress building libgcc1.a, since the MIPS compiler port is complete\n+# Suppress building libgcc1.a, since the MIPS compiler port is complete\n # and does not need anything from libgcc1.a.\n LIBGCC1 = libgcc1.null\n "}, {"sha": "62d0e31a4c8096647e6ae5c3900c2ee4ed35380c", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -66,7 +66,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define SCCS_DIRECTIVE\n \n-/* LINK_SPEC is needed only for Sunos 4.  */\n+/* LINK_SPEC is needed only for SunOS 4.  */\n \n #undef LINK_SPEC\n "}, {"sha": "d91a4c3b05d8c260f459957998a1efde2ecacb35", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -1018,7 +1018,7 @@ mem_aligned_8 (mem)\n     }\n \n   /* If it's the stack or frame pointer, check offset alignment.\n-     We can have improper aligment in the function entry code.  */\n+     We can have improper alignment in the function entry code.  */\n   if (base\n       && (REGNO (base) == FRAME_POINTER_REGNUM\n \t  || REGNO (base) == STACK_POINTER_REGNUM))\n@@ -1217,7 +1217,7 @@ output_move_double (operands)\n }\n \n /* Output assembler code to perform a quadword move insn\n-   with operands OPERANDS.  This is very similar to the preceeding\n+   with operands OPERANDS.  This is very similar to the preceding\n    output_move_double function.  */\n \n char *\n@@ -2676,7 +2676,7 @@ memory_ok_for_ldd (addr1, addr2)\n   if (reg1 != REGNO (XEXP (addr2, 0)))\n     return 0;\n \n-  /* The first offset must be evenly divisable by 8 to ensure the \n+  /* The first offset must be evenly divisible by 8 to ensure the \n      address is 64 bit aligned.  */\n   if (offset1 % 8 != 0)\n     return 0;"}, {"sha": "e472357c1f8e48be560b3ceecd740dd7bbbcd9a8", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296cba35f3b6706fab781b07cd4f55d9e4084ae/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=2296cba35f3b6706fab781b07cd4f55d9e4084ae", "patch": "@@ -63,7 +63,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* We redefine this because there is a hidden variable on the stack\n    that VAXC$ESTABLISH uses.  We just need to add four bytes to whatever\n-   gcc thinks that we need.  Similarily, we need to move all local variables\n+   gcc thinks that we need.  Similarly, we need to move all local variables\n    down 4 bytes in the stack.  */\n \n #define STARTING_FRAME_OFFSET -4"}]}