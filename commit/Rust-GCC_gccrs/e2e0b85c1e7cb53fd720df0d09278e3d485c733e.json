{"sha": "e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMGI4NWMxZTdjYjUzZmQ3MjBkZjBkMDkyNzhlM2Q0ODVjNzMzZQ==", "commit": {"author": {"name": "Tejas Belagod", "email": "tbelagod@arm.com", "date": "2021-08-09T10:33:30Z"}, "committer": {"name": "Tejas Belagod", "email": "tbelagod@arm.com", "date": "2021-08-09T11:54:14Z"}, "message": "PR101609: Use the correct iterator for AArch64 vector right shift pattern\n\nLoops containing long long shifts fail to vectorize due to the vectorizer\nnot being able to recognize long long right shifts. This is due to a bug\nin the iterator used for the vashr and vlshr patterns in aarch64-simd.md.\n\n2021-08-09  Tejas Belagod  <tejas.belagod@arm.com>\n\ngcc/ChangeLog\n\tPR target/101609\n\t* config/aarch64/aarch64-simd.md (vlshr<mode>3, vashr<mode>3): Use\n\tthe right iterator.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/aarch64/vect-shr-reg.c: New testcase.\n\t* gcc.target/aarch64/vect-shr-reg-run.c: Likewise.", "tree": {"sha": "be000387417201afd4780cbbc54c1e41d2c7adc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be000387417201afd4780cbbc54c1e41d2c7adc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/comments", "author": null, "committer": null, "parents": [{"sha": "0095afa82a34cdf59a40112b621b348e0087ddb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0095afa82a34cdf59a40112b621b348e0087ddb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0095afa82a34cdf59a40112b621b348e0087ddb8"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "48eddf64e05afe3788abfa05141f6544a9323ea1", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "patch": "@@ -1299,13 +1299,10 @@\n   DONE;\n })\n \n-;; Using mode VDQ_BHSI as there is no V2DImode neg!\n-;; Negating individual lanes most certainly offsets the\n-;; gain from vectorization.\n (define_expand \"vashr<mode>3\"\n- [(match_operand:VDQ_BHSI 0 \"register_operand\")\n-  (match_operand:VDQ_BHSI 1 \"register_operand\")\n-  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n+ [(match_operand:VDQ_I 0 \"register_operand\")\n+  (match_operand:VDQ_I 1 \"register_operand\")\n+  (match_operand:VDQ_I 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -1333,9 +1330,9 @@\n )\n \n (define_expand \"vlshr<mode>3\"\n- [(match_operand:VDQ_BHSI 0 \"register_operand\")\n-  (match_operand:VDQ_BHSI 1 \"register_operand\")\n-  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n+ [(match_operand:VDQ_I 0 \"register_operand\")\n+  (match_operand:VDQ_I 1 \"register_operand\")\n+  (match_operand:VDQ_I 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);"}, {"sha": "3190448e0936b9d5265f538304f9d20f13927339", "filename": "gcc/testsuite/gcc.target/aarch64/vect-shr-reg-run.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg-run.c?ref=e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=armv8.2-a\" } */\n+\n+#include \"vect-shr-reg.c\"\n+\n+int\n+main(void)\n+{\n+  int64_t a[16];\n+  int64_t b[16];\n+  int64_t c[17];\n+\n+  uint64_t ua[16];\n+  uint64_t ub[16];\n+  uint64_t uc[17];\n+\n+  int64_t res_a[16];\n+  uint64_t res_ua[16];\n+\n+  int i;\n+\n+  /* Set up inputs.  */\n+  for (i = 0; i < 16; i++)\n+    {\n+      b[i] = -2;\n+      c[i] = 34;\n+      ub[i] = 0xffffffffffffffff;\n+      uc[i] = 52;\n+    }\n+\n+  /* Set up reference values.  */\n+  for (i = 0; i < 16; i++)\n+    {\n+      res_a[i] = -1LL;\n+      res_ua[i] = 0x0fffLL;\n+    }\n+\n+  /* Do the shifts.  */\n+  f (ua, ub, uc);\n+  g (a, b, c);\n+\n+  /* Compare outputs against reference values.  */\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (a[i] != res_a[i])\n+\t__builtin_abort ();\n+\n+      if (ua[i] != res_ua[i])\n+\t__builtin_abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "5736dafb5a19957032e7b4bc1e90b218f52788fb", "filename": "gcc/testsuite/gcc.target/aarch64/vect-shr-reg.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e0b85c1e7cb53fd720df0d09278e3d485c733e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-shr-reg.c?ref=e2e0b85c1e7cb53fd720df0d09278e3d485c733e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a\" } */\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+int __attribute__((noinline))\n+f(uint64_t *__restrict a, uint64_t *__restrict b, uint64_t *__restrict c)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    a[i] = b[i] >> c[i];\n+}\n+\n+\n+int __attribute__((noinline))\n+g(int64_t *__restrict a, int64_t *__restrict b, int64_t *__restrict c)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    a[i] = b[i] >> c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"neg\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"ushl\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"sshl\\\\tv\" } } */"}]}