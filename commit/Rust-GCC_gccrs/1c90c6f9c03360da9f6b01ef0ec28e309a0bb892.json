{"sha": "1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5MGM2ZjljMDMzNjBkYTlmNmIwMWVmMGVjMjhlMzA5YTBiYjg5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-06-09T21:13:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-06-09T21:13:25Z"}, "message": "re PR preprocessor/27746 (ICE on openmp code when using _Pragma from macro)\n\n\tPR preprocessor/27746\n\t* directives.c (do_pragma): Handle pragma with valid namespace\n\tand invalid name coming from macro expansion.\n\t* directives.c (destringize_and_run): Initialize next field in\n\tcontext.\n\n\tPR c/27747\n\tPR c++/27748\n\t* directives.c (destringize_and_run): Set NO_EXPAND on the\n\ttokens.\n\n\t* macro.c (_cpp_backup_tokens): Fix comment typo.\ntestsuite/\n\tPR c/27747\n\t* gcc.dg/cpp/_Pragma6.c: New test.\n\n\tPR c++/27748\n\t* g++.dg/cpp/_Pragma1.C: New test.\n\n\tPR preprocessor/27746\n\t* gcc.dg/gomp/macro-3.c: New test.\n\t* gcc.dg/gomp/macro-4.c: New test.\n\t* g++.dg/gomp/macro-3.C: New test.\n\t* g++.dg/gomp/macro-4.C: New test.\n\nFrom-SVN: r114519", "tree": {"sha": "1069b42cba4da5d5d5b7ba05363311e967728b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1069b42cba4da5d5d5b7ba05363311e967728b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "549fb079d3e338f2d00fbbd7b72f11fd69eb1d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549fb079d3e338f2d00fbbd7b72f11fd69eb1d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549fb079d3e338f2d00fbbd7b72f11fd69eb1d0b"}], "stats": {"total": 184, "additions": 181, "deletions": 3}, "files": [{"sha": "e3bd0e4324a945ac1482a2e4ad3df7b3fa31912f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -1,3 +1,17 @@\n+2006-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/27747\n+\t* gcc.dg/cpp/_Pragma6.c: New test.\n+\n+\tPR c++/27748\n+\t* g++.dg/cpp/_Pragma1.C: New test.\n+\n+\tPR preprocessor/27746\n+\t* gcc.dg/gomp/macro-3.c: New test.\n+\t* gcc.dg/gomp/macro-4.c: New test.\n+\t* g++.dg/gomp/macro-3.C: New test.\n+\t* g++.dg/gomp/macro-4.C: New test.\n+\n 2006-06-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/26998"}, {"sha": "25a79f8863e4f0fba61bbc99e3b87cf5f19d8ed3", "filename": "gcc/testsuite/g++.dg/cpp/_Pragma1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/27748\n+// This is supposed to succeed only if\n+// the target doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n+// { dg-do compile { target { ! *-*-solaris2* } } }\n+\n+#define push bar\n+#define foo _Pragma (\"pack(push)\")\n+foo\n+int i;\n+#pragma pack(pop)"}, {"sha": "32623fde58ec6c8c3a71a8530b0585fd02bad1db", "filename": "gcc/testsuite/g++.dg/gomp/macro-3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-3.C?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,25 @@\n+// PR preprocessor/27746\n+// { dg-do compile }\n+// { dg-options \"-fopenmp -fdump-tree-omplower\" }\n+\n+#define omp\t\tFOO\n+#define p\t\tparallel\n+#define omp_parallel\t_Pragma (\"omp parallel\")\n+#define omp_p\t\t_Pragma (\"omp p\")\n+\n+void bar (void);\n+\n+void\n+foo (void)\n+{\n+  #pragma omp parallel\n+    bar ();\n+  #pragma omp p\n+    bar ();\n+  omp_parallel\n+    bar ();\n+  omp_p\n+    bar ();\n+}\n+\n+// { dg-final { scan-tree-dump-times \"#pragma omp parallel\" 4 \"omplower\" } }"}, {"sha": "9fc45b143d57323d3eeee250b861c2c8785fc1b4", "filename": "gcc/testsuite/g++.dg/gomp/macro-4.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fmacro-4.C?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,29 @@\n+// PR preprocessor/27746\n+// { dg-do compile }\n+// { dg-options \"-fopenmp -Wunknown-pragmas\" }\n+\n+#define p\t\t_Pragma (\"omp parallel\")\n+#define omp_p\t\t_Pragma (\"omp p\")\n+\n+void bar (void);\n+\n+void\n+foo (void)\n+{\n+#pragma omp p\t\t// { dg-warning \"ignoring #pragma omp _Pragma\" }\n+    bar ();\n+  omp_p\t\t\t// { dg-warning \"ignoring #pragma omp _Pragma\" }\n+    bar ();\n+}\n+\n+#define parallel\tserial\n+#define omp_parallel\t_Pragma (\"omp parallel\")\n+\n+void\n+baz (void)\n+{\n+#pragma omp parallel\t// { dg-warning \"ignoring #pragma omp serial\" }\n+    bar ();\n+  omp_parallel\t\t// { dg-warning \"ignoring #pragma omp serial\" }\n+    bar ();\n+}"}, {"sha": "369b334ae4427ba5dc7b5d6b2741e72a2335fceb", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/27747 */\n+/* This is supposed to succeed only if\n+   the target doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.  */\n+/* { dg-do compile { target { ! *-*-solaris2* } } } */\n+\n+#define push bar\n+#define foo _Pragma (\"pack(push)\")\n+foo\n+int i;\n+#pragma pack(pop)"}, {"sha": "dc4fe091b31d3118c8306c9a8f4e0be7c648ed12", "filename": "gcc/testsuite/gcc.dg/gomp/macro-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-3.c?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,25 @@\n+/* PR preprocessor/27746 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-omplower\" } */\n+\n+#define omp\t\tFOO\n+#define p\t\tparallel\n+#define omp_parallel\t_Pragma (\"omp parallel\")\n+#define omp_p\t\t_Pragma (\"omp p\")\n+\n+void bar (void);\n+\n+void\n+foo (void)\n+{\n+  #pragma omp parallel\n+    bar ();\n+  #pragma omp p\n+    bar ();\n+  omp_parallel\n+    bar ();\n+  omp_p\n+    bar ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"#pragma omp parallel\" 4 \"omplower\" } } */"}, {"sha": "7d20f4cd68d19afcfe8631deab3daaabc2aab758", "filename": "gcc/testsuite/gcc.dg/gomp/macro-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fmacro-4.c?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -0,0 +1,29 @@\n+/* PR preprocessor/27746 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -Wunknown-pragmas\" } */\n+\n+#define p\t\t_Pragma (\"omp parallel\")\n+#define omp_p\t\t_Pragma (\"omp p\")\n+\n+void bar (void);\n+\n+void\n+foo (void)\n+{\n+#pragma omp p\t\t/* { dg-warning \"ignoring #pragma omp _Pragma\" } */\n+    bar ();\n+  omp_p\t\t\t/* { dg-warning \"ignoring #pragma omp _Pragma\" } */\n+    bar ();\n+}\n+\n+#define parallel\tserial\n+#define omp_parallel\t_Pragma (\"omp parallel\")\n+\n+void\n+baz (void)\n+{\n+#pragma omp parallel\t/* { dg-warning \"ignoring #pragma omp serial\" } */\n+    bar ();\n+  omp_parallel\t\t/* { dg-warning \"ignoring #pragma omp serial\" } */\n+    bar ();\n+}"}, {"sha": "865287b25455d1dbc21932698dfc7006bdad64d2", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -1,3 +1,18 @@\n+2006-06-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/27746\n+\t* directives.c (do_pragma): Handle pragma with valid namespace\n+\tand invalid name coming from macro expansion.\n+\t* directives.c (destringize_and_run): Initialize next field in\n+\tcontext.\n+\n+\tPR c/27747\n+\tPR c++/27748\n+\t* directives.c (destringize_and_run): Set NO_EXPAND on the\n+\ttokens.\n+\n+\t* macro.c (_cpp_backup_tokens): Fix comment typo.\n+\n 2006-05-31  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* Makefile.in (CATALOGS): Add po/ prefix."}, {"sha": "e08698d76b7c2c2669b3720c1e45f45f0d6b09e8", "filename": "libcpp/directives.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -1265,11 +1265,13 @@ do_pragma (cpp_reader *pfile)\n {\n   const struct pragma_entry *p = NULL;\n   const cpp_token *token, *pragma_token = pfile->cur_token;\n+  cpp_token ns_token;\n   unsigned int count = 1;\n \n   pfile->state.prevent_expansion++;\n \n   token = cpp_get_token (pfile);\n+  ns_token = *token;\n   if (token->type == CPP_NAME)\n     {\n       p = lookup_pragma_entry (pfile->pragmas, token->val.node);\n@@ -1318,7 +1320,22 @@ do_pragma (cpp_reader *pfile)\n     }\n   else if (pfile->cb.def_pragma)\n     {\n-      _cpp_backup_tokens (pfile, count);\n+      if (count == 1 || pfile->context->prev == NULL)\n+\t_cpp_backup_tokens (pfile, count);\n+      else\n+\t{\n+\t  /* Invalid name comes from macro expansion, _cpp_backup_tokens\n+\t     won't allow backing 2 tokens.  */\n+\t  /* ??? The token buffer is leaked.  Perhaps if def_pragma hook\n+\t     reads both tokens, we could perhaps free it, but if it doesn't,\n+\t     we don't know the exact lifespan.  */\n+\t  cpp_token *toks = XNEWVEC (cpp_token, 2);\n+\t  toks[0] = ns_token;\n+\t  toks[0].flags |= NO_EXPAND;\n+\t  toks[1] = *token;\n+\t  toks[1].flags |= NO_EXPAND;\n+\t  _cpp_push_token_context (pfile, NULL, toks, 2);\n+\t}\n       pfile->cb.def_pragma (pfile, pfile->directive_line);\n     }\n \n@@ -1494,6 +1511,7 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n   pfile->context = XNEW (cpp_context);\n   pfile->context->macro = 0;\n   pfile->context->prev = 0;\n+  pfile->context->next = 0;\n \n   /* Inline run_directive, since we need to delay the _cpp_pop_buffer\n      until we've read all of the tokens that we want.  */\n@@ -1534,7 +1552,10 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n \t      maxcount = maxcount * 3 / 2;\n \t      toks = XRESIZEVEC (cpp_token, toks, maxcount);\n \t    }\n-\t  toks[count++] = *cpp_get_token (pfile);\n+\t  toks[count] = *cpp_get_token (pfile);\n+\t  /* Macros have been already expanded by cpp_get_token\n+\t     if the pragma allowed expansion.  */\n+\t  toks[count++].flags |= NO_EXPAND;\n \t}\n       while (toks[count-1].type != CPP_PRAGMA_EOL);\n     }"}, {"sha": "b29f3a0c1fa7b6dc12ffbf4148f98832dd7ab866", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c90c6f9c03360da9f6b01ef0ec28e309a0bb892/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1c90c6f9c03360da9f6b01ef0ec28e309a0bb892", "patch": "@@ -1180,7 +1180,7 @@ cpp_scan_nooutput (cpp_reader *pfile)\n   pfile->state.prevent_expansion--;\n }\n \n-/* Step back one (or more) tokens.  Can only step mack more than 1 if\n+/* Step back one (or more) tokens.  Can only step back more than 1 if\n    they are from the lexer, and not from macro expansion.  */\n void\n _cpp_backup_tokens (cpp_reader *pfile, unsigned int count)"}]}