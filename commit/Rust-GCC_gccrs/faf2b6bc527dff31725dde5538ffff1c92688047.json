{"sha": "faf2b6bc527dff31725dde5538ffff1c92688047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmMmI2YmM1MjdkZmYzMTcyNWRkZTU1MzhmZmZmMWM5MjY4ODA0Nw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-16T03:16:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-16T07:29:36Z"}, "message": "Optimize __builtin_shuffle_vector.\n\n1. Support vpermw/vpermb in ix86_expand_vec_one_operand_perm_avx512.\n2. Support 256/128-bits vpermi2b ix86_expand_vec_perm_vpermt2.\n3. Add define_insn_and_split to optimize specific vector permutation to opmov{dw,wb,qd}.\n\ngcc/ChangeLog:\n\n\tPR target/101846\n\t* config/i386/i386-expand.c (ix86_expand_vec_perm_vpermt2):\n\tSupport vpermi2b for V32QI/V16QImode.\n\t(ix86_extract_perm_from_pool_constant): New function.\n\t(ix86_expand_vec_one_operand_perm_avx512): Support\n\tvpermw/vpermb under TARGET_AVX512BW/TARGET_AVX512VBMI.\n\t(expand_vec_perm_1): Adjust comments for upper.\n\t* config/i386/i386-protos.h (ix86_extract_perm_from_pool_constant):\n\tNew declare.\n\t* config/i386/predicates.md (permvar_truncate_operand): New predicate.\n\t(pshufb_truncv4siv4hi_operand): Ditto.\n\t(pshufb_truncv8hiv8qi_operand): Ditto.\n\t* config/i386/sse.md (*avx512bw_permvar_truncv16siv16hi_1):\n\tNew pre_reload define_insn_and_split.\n\t(*avx512f_permvar_truncv8siv8hi_1): Ditto.\n\t(*avx512f_vpermvar_truncv8div8si_1): Ditto.\n\t(*avx512f_permvar_truncv32hiv32qi_1): Ditto.\n\t(*avx512f_permvar_truncv16hiv16qi_1): Ditto.\n\t(*avx512f_permvar_truncv4div4si_1): Ditto.\n\t(*avx512f_pshufb_truncv8hiv8qi_1): Ditto.\n\t(*avx512f_pshufb_truncv4siv4hi_1): Ditto.\n\t(*avx512f_pshufd_truncv2div2si_1): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/101846\n\t* gcc.target/i386/pr101846-2.c: New test.\n\t* gcc.target/i386/pr101846-3.c: New test.\n\t* gcc.target/i386/pr101846-4.c: New test.", "tree": {"sha": "af27f429983f35e8fcdd461698df25b44455b890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af27f429983f35e8fcdd461698df25b44455b890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faf2b6bc527dff31725dde5538ffff1c92688047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf2b6bc527dff31725dde5538ffff1c92688047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf2b6bc527dff31725dde5538ffff1c92688047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf2b6bc527dff31725dde5538ffff1c92688047/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d5b59cb3b417ab8293702aacc75a9bbb3ead78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d5b59cb3b417ab8293702aacc75a9bbb3ead78"}], "stats": {"total": 564, "additions": 559, "deletions": 5}, "files": [{"sha": "9bf13dbfa92e9f800e3fae9d85620dfd44adf5e0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -4778,6 +4778,18 @@ ix86_expand_vec_perm_vpermt2 (rtx target, rtx mask, rtx op0, rtx op1,\n \n   switch (mode)\n     {\n+    case E_V16QImode:\n+      if (TARGET_AVX512VL && TARGET_AVX512VBMI)\n+\tgen = gen_avx512vl_vpermt2varv16qi3;\n+      break;\n+    case E_V32QImode:\n+      if (TARGET_AVX512VL && TARGET_AVX512VBMI)\n+\tgen = gen_avx512vl_vpermt2varv32qi3;\n+      break;\n+    case E_V64QImode:\n+      if (TARGET_AVX512VBMI)\n+\tgen = gen_avx512bw_vpermt2varv64qi3;\n+      break;\n     case E_V8HImode:\n       if (TARGET_AVX512VL && TARGET_AVX512BW)\n \tgen = gen_avx512vl_vpermt2varv8hi3;\n@@ -4786,10 +4798,6 @@ ix86_expand_vec_perm_vpermt2 (rtx target, rtx mask, rtx op0, rtx op1,\n       if (TARGET_AVX512VL && TARGET_AVX512BW)\n \tgen = gen_avx512vl_vpermt2varv16hi3;\n       break;\n-    case E_V64QImode:\n-      if (TARGET_AVX512VBMI)\n-\tgen = gen_avx512bw_vpermt2varv64qi3;\n-      break;\n     case E_V32HImode:\n       if (TARGET_AVX512BW)\n \tgen = gen_avx512bw_vpermt2varv32hi3;\n@@ -5487,6 +5495,45 @@ ix86_expand_sse_unpack (rtx dest, rtx src, bool unsigned_p, bool high_p)\n     }\n }\n \n+/* Return true if mem is pool constant which contains a const_vector\n+   perm index, assign the index to PERM.  */\n+bool\n+ix86_extract_perm_from_pool_constant (int* perm, rtx mem)\n+{\n+  machine_mode mode = GET_MODE (mem);\n+  int nelt = GET_MODE_NUNITS (mode);\n+\n+  if (!INTEGRAL_MODE_P (mode))\n+    return false;\n+\n+    /* Needs to be constant pool.  */\n+  if (!(MEM_P (mem))\n+      || !SYMBOL_REF_P (XEXP (mem, 0))\n+      || !CONSTANT_POOL_ADDRESS_P (XEXP (mem, 0)))\n+   return false;\n+\n+  rtx constant = get_pool_constant (XEXP (mem, 0));\n+\n+  if (GET_CODE (constant) != CONST_VECTOR)\n+    return false;\n+\n+  /* There could be some rtx like\n+     (mem/u/c:V16QI (symbol_ref/u:DI (\"*.LC1\")))\n+     but with \"*.LC1\" refer to V2DI constant vector.  */\n+  if (GET_MODE (constant) != mode)\n+    {\n+      constant = simplify_subreg (mode, constant, GET_MODE (constant), 0);\n+\n+      if (constant == nullptr || GET_CODE (constant) != CONST_VECTOR)\n+\treturn false;\n+    }\n+\n+  for (int i = 0; i != nelt; i++)\n+    perm[i] = UINTVAL (XVECEXP (constant, 0, i));\n+\n+  return true;\n+}\n+\n /* Split operands 0 and 1 into half-mode parts.  Similar to split_double_mode,\n    but works for floating pointer parameters and nonoffsetable memories.\n    For pushes, it returns just stack offsets; the values will be saved\n@@ -18086,6 +18133,7 @@ ix86_expand_vec_one_operand_perm_avx512 (struct expand_vec_perm_d *d)\n {\n   machine_mode mode = GET_MODE (d->op0);\n   machine_mode maskmode = mode;\n+  unsigned inner_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n   rtx (*gen) (rtx, rtx, rtx) = NULL;\n   rtx target, op0, mask;\n   rtx vec[64];\n@@ -18096,6 +18144,18 @@ ix86_expand_vec_one_operand_perm_avx512 (struct expand_vec_perm_d *d)\n   if (!TARGET_AVX512F)\n     return false;\n \n+  /* Accept VNxHImode and VNxQImode now.  */\n+  if (!TARGET_AVX512VL && GET_MODE_SIZE (mode) < 64)\n+    return false;\n+\n+  /* vpermw.  */\n+  if (!TARGET_AVX512BW && inner_size == 2)\n+    return false;\n+\n+  /* vpermb.  */\n+  if (!TARGET_AVX512VBMI && inner_size == 1)\n+    return false;\n+\n   switch (mode)\n     {\n     case E_V16SImode:\n@@ -18112,6 +18172,25 @@ ix86_expand_vec_one_operand_perm_avx512 (struct expand_vec_perm_d *d)\n       gen = gen_avx512f_permvarv8df;\n       maskmode = V8DImode;\n       break;\n+    case E_V32HImode:\n+      gen = gen_avx512bw_permvarv32hi;\n+      break;\n+    case E_V16HImode:\n+      gen = gen_avx512vl_permvarv16hi;\n+      break;\n+    case E_V8HImode:\n+      gen = gen_avx512vl_permvarv8hi;\n+      break;\n+    case E_V64QImode:\n+      gen = gen_avx512bw_permvarv64qi;\n+      break;\n+    case E_V32QImode:\n+      gen = gen_avx512vl_permvarv32qi;\n+      break;\n+    case E_V16QImode:\n+      gen = gen_avx512vl_permvarv16qi;\n+      break;\n+\n     default:\n       return false;\n     }\n@@ -18301,7 +18380,7 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_palignr (d, true))\n     return true;\n \n-  /* Try the AVX512F vperm{s,d} instructions.  */\n+  /* Try the AVX512F vperm{w,b,s,d} instructions  */\n   if (ix86_expand_vec_one_operand_perm_avx512 (d))\n     return true;\n "}, {"sha": "2fd13074c812a7a0eea2a918a8b0e026ea608546", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -260,6 +260,7 @@ extern void ix86_expand_sse2_mulvxdi3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_abs (rtx, rtx);\n extern bool ix86_expand_vector_init_duplicate (bool, machine_mode, rtx,\n \t\t\t\t\t       rtx);\n+extern bool ix86_extract_perm_from_pool_constant (int*, rtx);\n \n /* In i386-c.c  */\n extern void ix86_target_macros (void);"}, {"sha": "9321f332ef9e33ef9ba3ca4a11997961eebf5aaa", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -1713,6 +1713,96 @@\n   return true;\n })\n \n+;; Return true if OP is a constant pool in perm{w,d,b} which constains index\n+;; match pmov{dw,wb,qd}.\n+(define_predicate \"permvar_truncate_operand\"\n+ (match_code \"mem\")\n+{\n+  int nelt = GET_MODE_NUNITS (mode);\n+  int perm[128];\n+  int id;\n+\n+  if (!INTEGRAL_MODE_P (mode) || !VECTOR_MODE_P (mode))\n+    return false;\n+\n+  if (nelt < 2)\n+    return false;\n+\n+  if (!ix86_extract_perm_from_pool_constant (&perm[0], op))\n+    return false;\n+\n+  id = exact_log2 (nelt);\n+\n+  /* Check that the permutation is suitable for pmovz{bw,wd,dq}.\n+     For example V16HImode to V8HImode\n+     { 0 2 4 6 8 10 12 14 * * * * * * * * }.  */\n+  for (int i = 0; i != nelt / 2; i++)\n+    if ((perm[i] & ((1 << id) - 1)) != i * 2)\n+      return false;\n+\n+  return true;\n+})\n+\n+;; Return true if OP is a constant pool in shufb which constains index\n+;; match pmovdw.\n+(define_predicate \"pshufb_truncv4siv4hi_operand\"\n+ (match_code \"mem\")\n+{\n+  int perm[128];\n+\n+  if (mode != E_V16QImode)\n+    return false;\n+\n+  if (!ix86_extract_perm_from_pool_constant (&perm[0], op))\n+    return false;\n+\n+  /* Check that the permutation is suitable for pmovdw.\n+     For example V4SImode to V4HImode\n+     { 0 1 4 5 8 9 12 13 * * * * * * * * }.\n+     index = i % 2 + (i / 2) * 4.  */\n+  for (int i = 0; i != 8; i++)\n+    {\n+      /* if (SRC2[(i * 8)+7] = 1) then DEST[(i*8)+7..(i*8)+0] := 0;  */\n+      if (perm[i] & 128)\n+\treturn false;\n+\n+      if ((perm[i] & 15) != ((i & 1) + (i & 0xFE) * 2))\n+\treturn false;\n+     }\n+\n+  return true;\n+})\n+\n+;; Return true if OP is a constant pool in shufb which constains index\n+;; match pmovdw.\n+(define_predicate \"pshufb_truncv8hiv8qi_operand\"\n+ (match_code \"mem\")\n+{\n+  int perm[128];\n+\n+  if (mode != E_V16QImode)\n+    return false;\n+\n+  if (!ix86_extract_perm_from_pool_constant (&perm[0], op))\n+    return false;\n+\n+  /* Check that the permutation is suitable for pmovwb.\n+     For example V16QImode to V8QImode\n+     { 0 2 4 6 8 10 12 14 * * * * * * * * }.\n+     index = i % 2 + (i / 2) * 4.  */\n+  for (int i = 0; i != 8; i++)\n+    {\n+      /* if (SRC2[(i * 8)+7] = 1) then DEST[(i*8)+7..(i*8)+0] := 0;  */\n+      if (perm[i] & 128)\n+\treturn false;\n+\n+      if ((perm[i] & 15) != i * 2)\n+\t return false;\n+    }\n+\n+  return true;\n+})\n+\n ;; Return true if OP is a parallel for an pmovz{bw,wd,dq} vec_select,\n ;; where one of the two operands of the vec_concat is const0_operand.\n (define_predicate \"pmovzx_parallel\""}, {"sha": "27e25cc79520991cb5577adacdddb7ab1feabbad", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -10977,6 +10977,64 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*avx512bw_permvar_truncv16siv16hi_1\"\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\")\n+\t(vec_select:V16HI\n+\t  (unspec:V32HI\n+\t    [(match_operand:V32HI 1 \"register_operand\")\n+\t     (match_operand:V32HI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))]\n+  \"TARGET_AVX512BW && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V16HI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V16SImode, operands[1], V32HImode);\")\n+\n+(define_insn_and_split \"*avx512f_permvar_truncv8siv8hi_1\"\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\")\n+\t(vec_select:V8HI\n+\t  (unspec:V16HI\n+\t    [(match_operand:V16HI 1 \"register_operand\")\n+\t     (match_operand:V16HI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)])))]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V8HI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\")\n+\n+(define_insn_and_split \"*avx512f_vpermvar_truncv8div8si_1\"\n+  [(set (match_operand:V8SI 0 \"nonimmediate_operand\")\n+\t(vec_select:V8SI\n+\t  (unspec:V16SI\n+\t    [(match_operand:V16SI 1 \"register_operand\")\n+\t     (match_operand:V16SI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)])))]\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V8SI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V8DImode, operands[1], V16SImode);\")\n+\n (define_insn \"avx512f_<code><pmov_src_lower><mode>2_mask\"\n   [(set (match_operand:PMOV_DST_MODE_1 0 \"nonimmediate_operand\" \"=v,m\")\n     (vec_merge:PMOV_DST_MODE_1\n@@ -11017,6 +11075,36 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn_and_split \"*avx512f_permvar_truncv32hiv32qi_1\"\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\")\n+\t(vec_select:V32QI\n+\t  (unspec:V64QI\n+\t    [(match_operand:V64QI 1 \"register_operand\")\n+\t     (match_operand:V64QI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)\n+\t\t     (const_int 16) (const_int 17)\n+\t\t     (const_int 18) (const_int 19)\n+\t\t     (const_int 20) (const_int 21)\n+\t\t     (const_int 22) (const_int 23)\n+\t\t     (const_int 24) (const_int 25)\n+\t\t     (const_int 26) (const_int 27)\n+\t\t     (const_int 28) (const_int 29)\n+\t\t     (const_int 30) (const_int 31)])))]\n+  \"TARGET_AVX512VBMI && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V32QI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V32HImode, operands[1], V64QImode);\")\n+\n (define_insn \"avx512bw_<code>v32hiv32qi2_mask\"\n   [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n     (vec_merge:V32QI\n@@ -11062,6 +11150,45 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*avx512f_permvar_truncv16hiv16qi_1\"\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\")\n+\t(vec_select:V16QI\n+\t  (unspec:V32QI\n+\t    [(match_operand:V32QI 1 \"register_operand\")\n+\t     (match_operand:V32QI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))]\n+  \"TARGET_AVX512VL && TARGET_AVX512VBMI\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V16QI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V16HImode, operands[1], V32QImode);\")\n+\n+(define_insn_and_split \"*avx512f_permvar_truncv4div4si_1\"\n+  [(set (match_operand:V4SI 0 \"nonimmediate_operand\")\n+\t(vec_select:V4SI\n+\t  (unspec:V8SI\n+\t    [(match_operand:V8SI 1 \"register_operand\")\n+\t     (match_operand:V8SI 2 \"permvar_truncate_operand\")]\n+\t   UNSPEC_VPERMVAR)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)])))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(truncate:V4SI (match_dup 1)))]\n+  \"operands[1] = lowpart_subreg (V4DImode, operands[1], V8SImode);\")\n+\n (define_insn \"<avx512>_<code><ssedoublemodelower><mode>2_mask\"\n   [(set (match_operand:PMOV_DST_MODE_2 0 \"nonimmediate_operand\" \"=v,m\")\n     (vec_merge:PMOV_DST_MODE_2\n@@ -11120,6 +11247,27 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512f_pshufb_truncv8hiv8qi_1\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(vec_select:DI\n+\t  (subreg:V2DI\n+\t    (unspec:V16QI\n+\t      [(match_operand:V16QI 1 \"register_operand\")\n+\t       (match_operand:V16QI 2 \"pshufb_truncv8hiv8qi_operand\")]\n+\t   UNSPEC_PSHUFB) 0)\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = gen_reg_rtx (V8QImode);\n+  operands[1] = lowpart_subreg (V8HImode, operands[1], V16QImode);\n+  emit_insn (gen_truncv8hiv8qi2 (op1, operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V8QImode));\n+  DONE;\n+})\n+\n (define_insn \"*avx512vl_<code>v2div2qi2_store_1\"\n   [(set (match_operand:V2QI 0 \"memory_operand\" \"=m\")\n \t(any_truncate:V2QI\n@@ -11475,6 +11623,27 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512f_pshufb_truncv4siv4hi_1\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(vec_select:DI\n+\t  (subreg:V2DI\n+\t    (unspec:V16QI\n+\t      [(match_operand:V16QI 1 \"register_operand\")\n+\t       (match_operand:V16QI 2 \"pshufb_truncv4siv4hi_operand\")]\n+\t   UNSPEC_PSHUFB) 0)\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = gen_reg_rtx (V4HImode);\n+  operands[1] = lowpart_subreg (V4SImode, operands[1], V16QImode);\n+  emit_insn (gen_truncv4siv4hi2 (op1, operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V4HImode));\n+  DONE;\n+})\n+\n (define_insn \"*avx512vl_<code><mode>v4hi2_store_1\"\n   [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n \t(any_truncate:V4HI\n@@ -11698,6 +11867,27 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn_and_split \"*avx512f_pshufd_truncv2div2si_1\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(vec_select:DI\n+\t  (subreg:V2DI\n+\t    (vec_select:V4SI\n+\t      (match_operand:V4SI 1 \"register_operand\")\n+\t      (parallel [(const_int 0) (const_int 2)\n+\t\t\t (const_int 2) (const_int 3)])) 0)\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = gen_reg_rtx (V2SImode);\n+  operands[1] = lowpart_subreg (V2DImode, operands[1], V4SImode);\n+  emit_insn (gen_truncv2div2si2 (op1, operands[1]));\n+  emit_move_insn (operands[0], lowpart_subreg (DImode, op1, V2SImode));\n+  DONE;\n+})\n+\n (define_insn \"*avx512vl_<code>v2div2si2_store_1\"\n   [(set (match_operand:V2SI 0 \"memory_operand\" \"=m\")\n \t(any_truncate:V2SI"}, {"sha": "26c9ed511e5657e3ac5ad01d86b92959e07345e8", "filename": "gcc/testsuite/gcc.target/i386/pr101846-2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-2.c?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\" \"3\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\" \"3\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovqd\" \"3\" } } */\n+\n+typedef short v4hi __attribute__((vector_size (8)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef char v8qi __attribute__((vector_size (8)));\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef char v32qi __attribute__((vector_size (32)));\n+typedef char v64qi __attribute__((vector_size (64)));\n+typedef int v2si __attribute__((vector_size (8)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef int v8si __attribute__((vector_size (32)));\n+typedef int v16si __attribute__((vector_size (64)));\n+\n+v16hi\n+foo_dw_512 (v32hi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30);\n+}\n+\n+v8hi\n+foo_dw_256 (v16hi x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6, 8, 10, 12, 14);\n+}\n+\n+v4hi\n+foo_dw_128 (v8hi x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6);\n+}\n+\n+v8si\n+foo_qd_512 (v16si x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6, 8, 10, 12, 14);\n+}\n+\n+v4si\n+foo_qd_256 (v8si x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6);\n+}\n+\n+v2si\n+foo_qd_128 (v4si x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2);\n+}\n+\n+v32qi\n+foo_wb_512 (v64qi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  32, 34, 36, 38, 40, 42, 44, 46,\n+\t\t\t\t  48, 50, 52, 54, 56, 58, 60, 62);\n+}\n+\n+v16qi\n+foo_wb_256 (v32qi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30);\n+}\n+\n+v8qi\n+foo_wb_128 (v16qi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14);\n+}"}, {"sha": "f774018a3828bbba497ad70ddcc0654308e72e9a", "filename": "gcc/testsuite/gcc.target/i386/pr101846-3.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-3.c?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermb\" \"2\" } } */\n+/* { dg-final { scan-assembler-times \"vpermw\" \"2\" } } */\n+/* { dg-final { scan-assembler-times \"vpermd\" \"2\" } } */\n+\n+typedef short v4hi __attribute__((vector_size (8)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef char v8qi __attribute__((vector_size (8)));\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef char v32qi __attribute__((vector_size (32)));\n+typedef char v64qi __attribute__((vector_size (64)));\n+typedef int v2si __attribute__((vector_size (8)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef int v8si __attribute__((vector_size (32)));\n+typedef int v16si __attribute__((vector_size (64)));\n+\n+v32hi\n+foow_512 (v32hi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t  24, 25, 26, 27, 28, 29, 30, 31);\n+}\n+\n+v16hi\n+foow_256 (v16hi x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15);\n+}\n+\n+\n+v16si\n+food_512 (v16si x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15);\n+}\n+\n+v8si\n+food_256 (v8si x)\n+{\n+  return __builtin_shufflevector (x, x, 0, 2, 4, 6, 4, 5, 6, 7);\n+}\n+\n+v64qi\n+foob_512 (v64qi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  32, 34, 36, 38, 40, 42, 44, 46,\n+\t\t\t\t  48, 50, 52, 54, 56, 58, 60, 62,\n+\t\t\t\t  32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t\t  40, 41, 42, 43, 44, 45, 46, 47,\n+\t\t\t\t  48, 49, 50, 51, 52, 53, 54, 55,\n+\t\t\t\t  56, 57, 58, 59, 60, 61, 62, 63);\n+}\n+\n+v32qi\n+foob_256 (v32qi x)\n+{\n+  return __builtin_shufflevector (x, x,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t  24, 25, 26, 27, 28, 29, 30, 31);\n+}"}, {"sha": "2a6163c4d7230bba50d9d00926646a865b7ff5de", "filename": "gcc/testsuite/gcc.target/i386/pr101846-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faf2b6bc527dff31725dde5538ffff1c92688047/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-4.c?ref=faf2b6bc527dff31725dde5538ffff1c92688047", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermi2b\" \"3\" } } */\n+\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef char v32qi __attribute__((vector_size (32)));\n+typedef char v64qi __attribute__((vector_size (64)));\n+\n+\n+v64qi\n+foob_512 (v64qi x, v64qi y)\n+{\n+  return __builtin_shufflevector (x, y,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  32, 34, 36, 38, 40, 42, 44, 46,\n+\t\t\t\t  48, 50, 52, 54, 56, 58, 60, 62,\n+\t\t\t\t  64, 65, 66, 67, 68, 69, 70, 71,\n+\t\t\t\t  72, 73, 74, 77, 79, 74, 72, 70,\n+\t\t\t\t  89, 88, 78, 86, 85, 75, 83, 82,\n+\t\t\t\t  112, 108, 101, 100, 86, 96, 97, 95);\n+}\n+\n+v32qi\n+foob_256 (v32qi x, v32qi y)\n+{\n+  return __builtin_shufflevector (x, y,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t\t  32, 34, 36, 38, 40, 42, 44, 46,\n+\t\t\t\t  48, 50, 52, 54, 56, 58, 60, 62);\n+}\n+\n+v16qi\n+foob_128 (v16qi x, v16qi y)\n+{\n+  return __builtin_shufflevector (x, y,\n+\t\t\t\t  0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t\t  16, 18, 20, 22, 24, 26, 28, 30);\n+}"}]}