{"sha": "91151a7334543817f1f790310a1bfc4589889cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExNTFhNzMzNDU0MzgxN2YxZjc5MDMxMGExYmZjNDU4OTg4OWNhZA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-08-19T14:12:32Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-08-19T14:12:32Z"}, "message": "Always initialize PRNG using random data from the OS.\n\nlibgfortran:\n\n2016-08-16  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        * intrinsics/random.c (master_init): New variable.\n        (init_rand_state): Move below getosrandom (), maybe initialize\n        master_state.\n        (random_seed_i4): If called with no arguments, set master_init to\n        false, and reinitialize. If called with PUT=, set master_init to\n        true.\n        (random_seed_i8): Likewise.\n\ntestsuite:\n\n2016-08-16  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        * gfortran.dg/random_4.f90: Initialize seed before using, handle\n        the last special seed value.\n        * gfortran.dg/random_7.f90: Use size for last array member instead\n        of hardcoded value.\n\nFrom-SVN: r239611", "tree": {"sha": "3dd25be020bc1f538120f175d6ec7627ccda7699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dd25be020bc1f538120f175d6ec7627ccda7699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91151a7334543817f1f790310a1bfc4589889cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91151a7334543817f1f790310a1bfc4589889cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91151a7334543817f1f790310a1bfc4589889cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91151a7334543817f1f790310a1bfc4589889cad/comments", "author": null, "committer": null, "parents": [{"sha": "f0c90610e3e0646b89ae3e4b20134dc7e1cd7d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c90610e3e0646b89ae3e4b20134dc7e1cd7d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c90610e3e0646b89ae3e4b20134dc7e1cd7d12"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "3807dd5e806a44107a2a7ad972cf26bffd40901e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91151a7334543817f1f790310a1bfc4589889cad", "patch": "@@ -1,3 +1,10 @@\n+2016-08-19  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * gfortran.dg/random_4.f90: Initialize seed before using, handle\n+        the last special seed value.\n+        * gfortran.dg/random_7.f90: Use size for last array member instead\n+        of hardcoded value.\n+\n 2016-08-19  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.dg/cpp/warn-undef.c: Append \"evaluates to 0\" to dg-error."}, {"sha": "e60698f49064e79c04a3dc34777d5da626b22b05", "filename": "gcc/testsuite/gfortran.dg/random_4.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_4.f90?ref=91151a7334543817f1f790310a1bfc4589889cad", "patch": "@@ -6,8 +6,11 @@ program trs\n   integer, allocatable, dimension(:) :: seed, check\n   call test_random_seed(size)\n   allocate(seed(size),check(size))\n+  seed = 42\n   call test_random_seed(put=seed)\n   call test_random_seed(get=check)\n+  ! With xorshift1024* the last seed value is special\n+  seed(size) = check(size)\n   if (any (seed /= check)) call abort\n contains\n   subroutine test_random_seed(size, put, get)"}, {"sha": "8cd9c43bd66ddf84e96ed6d048b3244254dee2b6", "filename": "gcc/testsuite/gfortran.dg/random_7.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91151a7334543817f1f790310a1bfc4589889cad/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_7.f90?ref=91151a7334543817f1f790310a1bfc4589889cad", "patch": "@@ -10,8 +10,9 @@ program trs\n   seed(:) = huge(seed) / 17\n   call test_random_seed(put=seed)\n   call test_random_seed(get=check)\n-  ! In the current implementation seed(17) is special\n-  seed(17) = check(17)\n+  ! In the current xorshift1024* implementation the last seed value is\n+  ! special\n+  seed(size) = check(size)\n   if (any (seed /= check)) call abort\n contains\n   subroutine test_random_seed(size, put, get)"}, {"sha": "6fd12228645c65f444635fd9aad484dfed9e2f71", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91151a7334543817f1f790310a1bfc4589889cad/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91151a7334543817f1f790310a1bfc4589889cad/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=91151a7334543817f1f790310a1bfc4589889cad", "patch": "@@ -1,3 +1,13 @@\n+2016-08-16  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * intrinsics/random.c (master_init): New variable.\n+        (init_rand_state): Move below getosrandom (), maybe initialize\n+        master_state.\n+        (random_seed_i4): If called with no arguments, set master_init to\n+        false, and reinitialize. If called with PUT=, set master_init to\n+        true.\n+        (random_seed_i8): Likewise.\n+\n 2016-08-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* intrinsics/random.c: Include <stdlib.h>."}, {"sha": "35c76113b1a5adc18aa4f26cae01f38ed41ec8cc", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91151a7334543817f1f790310a1bfc4589889cad/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91151a7334543817f1f790310a1bfc4589889cad/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=91151a7334543817f1f790310a1bfc4589889cad", "patch": "@@ -193,9 +193,10 @@ typedef struct\n xorshift1024star_state;\n \n \n-/* How many times we have jumped. This and master_state are the only\n-   variables protected by random_lock.  */\n-static unsigned njumps;\n+/* master_init, njumps, and master_state are the only variables\n+   protected by random_lock.  */\n+static bool master_init;\n+static unsigned njumps; /* How many times we have jumped.  */\n static uint64_t master_state[] = {\n   0xad63fa1ed3b55f36ULL, 0xd94473e78978b497ULL, 0xbc60592a98172477ULL,\n   0xa3de7c6e81265301ULL, 0x586640c5e785af27ULL, 0x7a2a3f63b67ce5eaULL,\n@@ -272,24 +273,6 @@ jump (xorshift1024star_state* rs)\n }\n \n \n-/* Initialize the random number generator for the current thread,\n-   using the master state and the number of times we must jump.  */\n-\n-static void\n-init_rand_state (xorshift1024star_state* rs, const bool locked)\n-{\n-  if (!locked)\n-    __gthread_mutex_lock (&random_lock);\n-  memcpy (&rs->s, master_state, sizeof (master_state));\n-  unsigned n = njumps++;\n-  if (!locked)\n-    __gthread_mutex_unlock (&random_lock);\n-  for (unsigned i = 0; i < n; i++)\n-    jump (rs);\n-  rs->init = true;\n-}\n-\n-\n /* Super-simple LCG generator used in getosrandom () if /dev/urandom\n    doesn't exist.  */\n \n@@ -359,6 +342,30 @@ getosrandom (void *buf, size_t buflen)\n }\n \n \n+/* Initialize the random number generator for the current thread,\n+   using the master state and the number of times we must jump.  */\n+\n+static void\n+init_rand_state (xorshift1024star_state* rs, const bool locked)\n+{\n+  if (!locked)\n+    __gthread_mutex_lock (&random_lock);\n+  if (!master_init)\n+    {\n+      getosrandom (master_state, sizeof (master_state));\n+      njumps = 0;\n+      master_init = true;\n+    }\n+  memcpy (&rs->s, master_state, sizeof (master_state));\n+  unsigned n = njumps++;\n+  if (!locked)\n+    __gthread_mutex_unlock (&random_lock);\n+  for (unsigned i = 0; i < n; i++)\n+    jump (rs);\n+  rs->init = true;\n+}\n+\n+\n /*  This function produces a REAL(4) value from the uniform distribution\n     with range [0,1).  */\n \n@@ -791,8 +798,7 @@ random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n      a processor-dependent value to the seed.\"  */\n   if (size == NULL && put == NULL && get == NULL)\n     {\n-      getosrandom (master_state, sizeof (master_state));\n-      njumps = 0;\n+      master_init = false;\n       init_rand_state (rs, true);\n     }\n \n@@ -816,6 +822,7 @@ random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n \t provide seeds with quality only in the lower or upper part.  */\n       scramble_seed ((unsigned char *) master_state, seed, sizeof seed);\n       njumps = 0;\n+      master_init = true;\n       init_rand_state (rs, true);\n \n       rs->p = put->base_addr[SZ * GFC_DESCRIPTOR_STRIDE(put, 0)] & 15;\n@@ -873,8 +880,7 @@ random_seed_i8 (GFC_INTEGER_8 *size, gfc_array_i8 *put, gfc_array_i8 *get)\n      a processor-dependent value to the seed.\"  */\n   if (size == NULL && put == NULL && get == NULL)\n     {\n-      getosrandom (master_state, sizeof (master_state));\n-      njumps = 0;\n+      master_init = false;\n       init_rand_state (rs, true);\n     }\n \n@@ -894,6 +900,7 @@ random_seed_i8 (GFC_INTEGER_8 *size, gfc_array_i8 *put, gfc_array_i8 *get)\n \t\tsizeof (GFC_UINTEGER_8));\n \n       njumps = 0;\n+      master_init = true;\n       init_rand_state (rs, true);\n       rs->p = put->base_addr[SZ * GFC_DESCRIPTOR_STRIDE(put, 0)] & 15;\n      }"}]}