{"sha": "cad36f38576a6a781e3c62ab061c68f5b8dab13a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkMzZmMzg1NzZhNmE3ODFlM2M2MmFiMDYxYzY4ZjViOGRhYjEzYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-31T10:45:07Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-31T10:45:07Z"}, "message": "Preserve SUBREG_PROMOTED_VAR_P on (extend:HI (subreg/s:QI (reg:SI))).\n\nSUBREG_PROMOTED_VAR_P is a mechanism for tracking that a partial subreg\nis correctly zero-extended or sign-extended in the parent register.  For\nexample, the RTL (subreg/s/v:QI (reg/v:SI 23 [ x ]) 0) indicates that the\nbyte x is zero extended in reg:SI 23, which is useful for optimization.\nAn example is that zero extending the above QImode value to HImode can\nsimply use a wider subreg, i.e. (subreg:HI (reg/v:SI 23 [ x ]) 0).\n\nThis patch addresses the oversight/missed optimization opportunity that\nthe new HImode subreg above should retain its SUBREG_PROMOTED_VAR_P\nannotation as its value is guaranteed to be correctly extended in the\nSImode parent.  The code below to preserve SUBREG_PROMOTED_VAR_P is already\npresent in the middle-end (e.g. simplify-rtx.c:7232-7242) but missing\nfrom one or two (precisely three) places that (accidentally) strip it.\n\nWhilst there I also added another optimization.  If we need to extend\nthe above QImode value beyond the SImode register holding it, say to\nDImode, we can eliminate the SUBREG and simply extend from the SImode\nregister to DImode.\n\n2021-08-31  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* expr.c (convert_modes): Preserve SUBREG_PROMOTED_VAR_P when\n\tcreating a (wider) partial subreg from a SUBREG_PROMOTED_VAR_P\n\tsubreg.\n\t* simplify-rtx.c (simplify_unary_operation_1) [SIGN_EXTEND]:\n\tLikewise, preserve SUBREG_PROMOTED_VAR_P when creating a (wider)\n\tpartial subreg from a SUBREG_PROMOTED_VAR_P subreg.  Generate\n\tSIGN_EXTEND of the SUBREG_REG when a subreg would be paradoxical.\n\t[ZERO_EXTEND]: Likewise, preserve SUBREG_PROMOTED_VAR_P when\n\tcreating a (wider) partial subreg from a SUBREG_PROMOTED_VAR_P\n\tsubreg.  Generate ZERO_EXTEND of the SUBREG_REG when a subreg\n\twould be paradoxical.", "tree": {"sha": "087a30904a1919172629cfb4f6057c4313ec51d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/087a30904a1919172629cfb4f6057c4313ec51d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad36f38576a6a781e3c62ab061c68f5b8dab13a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad36f38576a6a781e3c62ab061c68f5b8dab13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad36f38576a6a781e3c62ab061c68f5b8dab13a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad36f38576a6a781e3c62ab061c68f5b8dab13a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0960d937d9bee3c831d0b64a9c828c263a58ff89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0960d937d9bee3c831d0b64a9c828c263a58ff89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0960d937d9bee3c831d0b64a9c828c263a58ff89"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "5dd98a9bccc987e500ba066ed1309a0a86aebea9", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad36f38576a6a781e3c62ab061c68f5b8dab13a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad36f38576a6a781e3c62ab061c68f5b8dab13a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cad36f38576a6a781e3c62ab061c68f5b8dab13a", "patch": "@@ -688,7 +688,24 @@ convert_modes (machine_mode mode, machine_mode oldmode, rtx x, int unsignedp)\n       && (GET_MODE_PRECISION (subreg_promoted_mode (x))\n \t  >= GET_MODE_PRECISION (int_mode))\n       && SUBREG_CHECK_PROMOTED_SIGN (x, unsignedp))\n-    x = gen_lowpart (int_mode, SUBREG_REG (x));\n+    {\n+      scalar_int_mode int_orig_mode;\n+      machine_mode orig_mode = GET_MODE (x);\n+      x = gen_lowpart (int_mode, SUBREG_REG (x));\n+\n+      /* Preserve SUBREG_PROMOTED_VAR_P if the new mode is wider than\n+\t the original mode, but narrower than the inner mode.  */\n+      if (GET_CODE (x) == SUBREG\n+\t  && GET_MODE_PRECISION (subreg_promoted_mode (x))\n+\t     > GET_MODE_PRECISION (int_mode)\n+\t  && is_a <scalar_int_mode> (orig_mode, &int_orig_mode)\n+\t  && GET_MODE_PRECISION (int_mode)\n+\t     > GET_MODE_PRECISION (int_orig_mode))\n+\t{\n+\t  SUBREG_PROMOTED_VAR_P (x) = 1;\n+\t  SUBREG_PROMOTED_SET (x, unsignedp);\n+\t}\n+    }\n \n   if (GET_MODE (x) != VOIDmode)\n     oldmode = GET_MODE (x);"}, {"sha": "ebad5cb5a79cf902d4e0e8bc7cdf0e468da573e8", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad36f38576a6a781e3c62ab061c68f5b8dab13a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad36f38576a6a781e3c62ab061c68f5b8dab13a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=cad36f38576a6a781e3c62ab061c68f5b8dab13a", "patch": "@@ -1512,12 +1512,28 @@ simplify_context::simplify_unary_operation_1 (rtx_code code, machine_mode mode,\n \t target mode is the same as the variable's promotion.  */\n       if (GET_CODE (op) == SUBREG\n \t  && SUBREG_PROMOTED_VAR_P (op)\n-\t  && SUBREG_PROMOTED_SIGNED_P (op)\n-\t  && !paradoxical_subreg_p (mode, GET_MODE (SUBREG_REG (op))))\n+\t  && SUBREG_PROMOTED_SIGNED_P (op))\n \t{\n-\t  temp = rtl_hooks.gen_lowpart_no_emit (mode, SUBREG_REG (op));\n-\t  if (temp)\n-\t    return temp;\n+\t  rtx subreg = SUBREG_REG (op);\n+\t  machine_mode subreg_mode = GET_MODE (subreg);\n+\t  if (!paradoxical_subreg_p (mode, subreg_mode))\n+\t    {\n+\t      temp = rtl_hooks.gen_lowpart_no_emit (mode, subreg);\n+\t      if (temp)\n+\t\t{\n+\t\t  /* Preserve SUBREG_PROMOTED_VAR_P.  */\n+\t\t  if (partial_subreg_p (temp))\n+\t\t    {\n+\t\t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t\t      SUBREG_PROMOTED_SET (temp, 1);\n+\t\t    }\n+\t\t  return temp;\n+\t\t}\n+\t    }\n+\t  else\n+\t    /* Sign-extending a sign-extended subreg.  */\n+\t    return simplify_gen_unary (SIGN_EXTEND, mode,\n+\t\t\t\t       subreg, subreg_mode);\n \t}\n \n       /* (sign_extend:M (sign_extend:N <X>)) is (sign_extend:M <X>).\n@@ -1631,12 +1647,28 @@ simplify_context::simplify_unary_operation_1 (rtx_code code, machine_mode mode,\n \t target mode is the same as the variable's promotion.  */\n       if (GET_CODE (op) == SUBREG\n \t  && SUBREG_PROMOTED_VAR_P (op)\n-\t  && SUBREG_PROMOTED_UNSIGNED_P (op)\n-\t  && !paradoxical_subreg_p (mode, GET_MODE (SUBREG_REG (op))))\n+\t  && SUBREG_PROMOTED_UNSIGNED_P (op))\n \t{\n-\t  temp = rtl_hooks.gen_lowpart_no_emit (mode, SUBREG_REG (op));\n-\t  if (temp)\n-\t    return temp;\n+\t  rtx subreg = SUBREG_REG (op);\n+\t  machine_mode subreg_mode = GET_MODE (subreg);\n+\t  if (!paradoxical_subreg_p (mode, subreg_mode))\n+\t    {\n+\t      temp = rtl_hooks.gen_lowpart_no_emit (mode, subreg);\n+\t      if (temp)\n+\t\t{\n+\t\t  /* Preserve SUBREG_PROMOTED_VAR_P.  */\n+\t\t  if (partial_subreg_p (temp))\n+\t\t    {\n+\t\t      SUBREG_PROMOTED_VAR_P (temp) = 1;\n+\t\t      SUBREG_PROMOTED_SET (temp, 0);\n+\t\t    }\n+\t\t  return temp;\n+\t\t}\n+\t    }\n+\t  else\n+\t    /* Zero-extending a zero-extended subreg.  */\n+\t    return simplify_gen_unary (ZERO_EXTEND, mode,\n+\t\t\t\t       subreg, subreg_mode);\n \t}\n \n       /* Extending a widening multiplication should be canonicalized to"}]}