{"sha": "bd29d5193a42a7fbe92c5052fa8d28f35290c823", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyOWQ1MTkzYTQyYTdmYmU5MmM1MDUyZmE4ZDI4ZjM1MjkwYzgyMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:32:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:32:50Z"}, "message": "[multiple changes]\n\n2010-09-09  Vincent Celier  <celier@adacore.com>\n\n\t* osint.adb (Canonical_Case_File_Name): Use procedure To_Lower in\n\tSystem.Case_Util\n\t(Canonical_Case_Env_Var_Name): Ditto\n\n2010-09-09  Bob Duff  <duff@adacore.com>\n\n\t* g-pehage.adb (Allocate): Initialize the allocated elements of IT.\n\n2010-09-09  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb: Mark Boolean and Character types as Ordered\n\t* einfo.adb (Has_Pragma_Ordered): New flag\n\t* einfo.ads (Has_Pragma_Ordered): New flag\n\t* g-calend.ads: Mark Day_Name as Ordered\n\t* opt.ads: Mark Ada_Version_Type as Ordered\n\t(Warn_On_Unordered_Enumeration_Type): New flag\n\t* par-prag.adb: Add procdessing for pragma Ordered\n\t* s-ficobl.ads (Read_File_Mode): New subtype\n\t* s-fileio.adb: Use Read_File_Mode instead of explicit ranges\n\t* s-taskin.ads: Mark Entry_Call_State as ordered\n\t* sem_ch3.adb (Build_Derived_Enumeration_Type): Inherit\n\tHas_Pragma_Ordered.\n\t* sem_ch6.ads: Mark Conformance_Type as Ordered\n\t* sem_prag.adb: Implement pragma Ordered\n\t* sem_res.adb (Bad_Unordered_Enumeration_Reference): New function\n\t(Resolve_Comparison_Op): Diagnose unordered comparison\n\t(Resolve_Range): Diagnose unordered range\n\t* sem_warn.adb (Warn_On_Unordered_Enumeration_Type): New flag (from\n\t-gnatw.u/U)\n\t* snames.ads-tmpl: Add entry for pragma Ordered\n\t* style.ads (Check_Enumeration_Subrange): Removed\n\t* styleg.adb (Check_Enumeration_Subrange): Removed\n\t* styleg.ads (Check_Enumeration_Subrange): Removed\n\t* stylesw.adb: Remove handling of -gnatyE switch\n\t* stylesw.ads: (Style_Check_Enumeration_Subranges): Removed\n\t* vms_data.ads: Remove -gnatyE entries\n\tAdd -gnatw.u entries\n\t* ug_words: Entries for -gnatw.u and -gnatw.U\n\t* gnat_ugn.texi: Document -gnatw.u/-gnatw.U switches\n\t* gnat_rm.texi: Document pragma Ordered.\n\t* s-tasren.adb: Avoid unnecessary comparison on unordered enumeration.\n\t* s-tpobop.adb: Remove comparison on unordered enumeration type.\n\nFrom-SVN: r164070", "tree": {"sha": "29c9bde6be0184567a5d781848146e9b3c6e96b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29c9bde6be0184567a5d781848146e9b3c6e96b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd29d5193a42a7fbe92c5052fa8d28f35290c823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd29d5193a42a7fbe92c5052fa8d28f35290c823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd29d5193a42a7fbe92c5052fa8d28f35290c823", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd29d5193a42a7fbe92c5052fa8d28f35290c823/comments", "author": null, "committer": null, "parents": [{"sha": "0e35524dec6e62dfe35360f11eee7c7031c5ab2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e35524dec6e62dfe35360f11eee7c7031c5ab2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e35524dec6e62dfe35360f11eee7c7031c5ab2e"}], "stats": {"total": 652, "additions": 436, "deletions": 216}, "files": [{"sha": "54bd5d9fa3672898fef5d99b61b2b5770e7814c0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -1,3 +1,48 @@\n+2010-09-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* osint.adb (Canonical_Case_File_Name): Use procedure To_Lower in\n+\tSystem.Case_Util\n+\t(Canonical_Case_Env_Var_Name): Ditto\n+\n+2010-09-09  Bob Duff  <duff@adacore.com>\n+\n+\t* g-pehage.adb (Allocate): Initialize the allocated elements of IT.\n+\n+2010-09-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb: Mark Boolean and Character types as Ordered\n+\t* einfo.adb (Has_Pragma_Ordered): New flag\n+\t* einfo.ads (Has_Pragma_Ordered): New flag\n+\t* g-calend.ads: Mark Day_Name as Ordered\n+\t* opt.ads: Mark Ada_Version_Type as Ordered\n+\t(Warn_On_Unordered_Enumeration_Type): New flag\n+\t* par-prag.adb: Add procdessing for pragma Ordered\n+\t* s-ficobl.ads (Read_File_Mode): New subtype\n+\t* s-fileio.adb: Use Read_File_Mode instead of explicit ranges\n+\t* s-taskin.ads: Mark Entry_Call_State as ordered\n+\t* sem_ch3.adb (Build_Derived_Enumeration_Type): Inherit\n+\tHas_Pragma_Ordered.\n+\t* sem_ch6.ads: Mark Conformance_Type as Ordered\n+\t* sem_prag.adb: Implement pragma Ordered\n+\t* sem_res.adb (Bad_Unordered_Enumeration_Reference): New function\n+\t(Resolve_Comparison_Op): Diagnose unordered comparison\n+\t(Resolve_Range): Diagnose unordered range\n+\t* sem_warn.adb (Warn_On_Unordered_Enumeration_Type): New flag (from\n+\t-gnatw.u/U)\n+\t* snames.ads-tmpl: Add entry for pragma Ordered\n+\t* style.ads (Check_Enumeration_Subrange): Removed\n+\t* styleg.adb (Check_Enumeration_Subrange): Removed\n+\t* styleg.ads (Check_Enumeration_Subrange): Removed\n+\t* stylesw.adb: Remove handling of -gnatyE switch\n+\t* stylesw.ads: (Style_Check_Enumeration_Subranges): Removed\n+\t* vms_data.ads: Remove -gnatyE entries\n+\tAdd -gnatw.u entries\n+\t* ug_words: Entries for -gnatw.u and -gnatw.U\n+\t* gnat_ugn.texi: Document -gnatw.u/-gnatw.U switches\n+\t* gnat_rm.texi: Document pragma Ordered.\n+\t* s-tasren.adb: Avoid unnecessary comparison on unordered enumeration.\n+\t* s-tpobop.adb: Remove comparison on unordered enumeration type.\n+\n 2010-09-09  Vincent Celier  <celier@adacore.com>\n \n \t* adaint.c: New function __gnat_get_env_vars_case_sensitive, returns 0"}, {"sha": "bc85f0c50445a61f54356ad5942c189d0d4db6f9", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -446,6 +446,7 @@ package body CStand is\n \n       Set_Is_Unsigned_Type           (Standard_Boolean);\n       Set_Size_Known_At_Compile_Time (Standard_Boolean);\n+      Set_Has_Pragma_Ordered         (Standard_Boolean);\n \n       Set_Ekind           (Standard_True, E_Enumeration_Literal);\n       Set_Etype           (Standard_True, Standard_Boolean);\n@@ -566,6 +567,7 @@ package body CStand is\n       Init_RM_Size       (Standard_Character, 8);\n       Set_Elem_Alignment (Standard_Character);\n \n+      Set_Has_Pragma_Ordered         (Standard_Character);\n       Set_Is_Unsigned_Type           (Standard_Character);\n       Set_Is_Character_Type          (Standard_Character);\n       Set_Is_Known_Valid             (Standard_Character);\n@@ -611,6 +613,7 @@ package body CStand is\n       Init_Size      (Standard_Wide_Character, Standard_Wide_Character_Size);\n \n       Set_Elem_Alignment             (Standard_Wide_Character);\n+      Set_Has_Pragma_Ordered         (Standard_Wide_Character);\n       Set_Is_Unsigned_Type           (Standard_Wide_Character);\n       Set_Is_Character_Type          (Standard_Wide_Character);\n       Set_Is_Known_Valid             (Standard_Wide_Character);\n@@ -658,6 +661,7 @@ package body CStand is\n                  Standard_Wide_Wide_Character_Size);\n \n       Set_Elem_Alignment             (Standard_Wide_Wide_Character);\n+      Set_Has_Pragma_Ordered         (Standard_Wide_Wide_Character);\n       Set_Is_Unsigned_Type           (Standard_Wide_Wide_Character);\n       Set_Is_Character_Type          (Standard_Wide_Wide_Character);\n       Set_Is_Known_Valid             (Standard_Wide_Wide_Character);"}, {"sha": "231089548c25d0b53092fcdfc78245c81ec382be", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -456,6 +456,7 @@ package body Einfo is\n    --    Is_Primitive_Wrapper            Flag195\n    --    Was_Hidden                      Flag196\n    --    Is_Limited_Interface            Flag197\n+   --    Has_Pragma_Ordered              Flag198\n \n    --    Has_Anon_Block_Suffix           Flag201\n    --    Itype_Printed                   Flag202\n@@ -509,7 +510,6 @@ package body Einfo is\n    --    Is_Underlying_Record_View       Flag246\n    --    OK_To_Rename                    Flag247\n \n-   --    (unused)                        Flag198\n    --    (unused)                        Flag199\n    --    (unused)                        Flag200\n \n@@ -726,8 +726,7 @@ package body Einfo is\n \n    function Corresponding_Protected_Entry (Id : E) return E is\n    begin\n-      pragma Assert\n-        (Ekind (Id) = E_Subprogram_Body);\n+      pragma Assert (Ekind (Id) = E_Subprogram_Body);\n       return Node18 (Id);\n    end Corresponding_Protected_Entry;\n \n@@ -1344,6 +1343,12 @@ package body Einfo is\n       return Flag230 (Id);\n    end Has_Pragma_Inline_Always;\n \n+   function Has_Pragma_Ordered (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Enumeration_Type (Id));\n+      return Flag198 (Implementation_Base_Type (Id));\n+   end Has_Pragma_Ordered;\n+\n    function Has_Pragma_Pack (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id) or else Is_Array_Type (Id));\n@@ -3753,6 +3758,13 @@ package body Einfo is\n       Set_Flag230 (Id, V);\n    end Set_Has_Pragma_Inline_Always;\n \n+   procedure Set_Has_Pragma_Ordered (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Enumeration_Type (Id));\n+      pragma Assert (Id = Base_Type (Id));\n+      Set_Flag198 (Id, V);\n+   end Set_Has_Pragma_Ordered;\n+\n    procedure Set_Has_Pragma_Pack (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Record_Type (Id));\n@@ -6901,6 +6913,7 @@ package body Einfo is\n       W (\"Has_Pragma_Elaborate_Body\",       Flag150 (Id));\n       W (\"Has_Pragma_Inline\",               Flag157 (Id));\n       W (\"Has_Pragma_Inline_Always\",        Flag230 (Id));\n+      W (\"Has_Pragma_Ordered\",              Flag198 (Id));\n       W (\"Has_Pragma_Pack\",                 Flag121 (Id));\n       W (\"Has_Pragma_Preelab_Init\",         Flag221 (Id));\n       W (\"Has_Pragma_Pure\",                 Flag203 (Id));"}, {"sha": "7a396c75ad1e8d271bf01f200313a4b829333ed1", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -632,8 +632,8 @@ package Einfo is\n --       where Comes_From_Source is always False.\n \n --    Corresponding_Protected_Entry (Node18)\n---       Present in subrogram bodies. Denotes the entry of a protected type\n---       that is implemented by the subprogram body.\n+--       Present in subrogram bodies. Set for subprogram bodies that implement\n+--       a protected type entry to point to the entity for the entry.\n \n --    Corresponding_Record_Type (Node18)\n --       Present in protected and task types and subtypes. References the\n@@ -1578,6 +1578,12 @@ package Einfo is\n --       pragma Inline_Always applies. Note that if this flag is set, the flag\n --       Has_Pragma_Inline is also set.\n \n+--    Has_Pragma_Ordered (Flag198) [implementation base type only]\n+--       Present in entities for enumeration types. If set indicates that a\n+--       valid pragma Ordered was given for the type. This flag is inherited\n+--       by derived enumeration types. We don't need to distinguish the derived\n+--       case since we allow multiple occurrences of this pragma anyway.\n+\n --    Has_Pragma_Pack (Flag121) [implementation base type only]\n --       Present in all entities. If set, indicates that a valid pragma Pack\n --       was given for the type. Note that this flag is not inherited by\n@@ -4967,6 +4973,7 @@ package Einfo is\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Contiguous_Rep                  (Flag181)\n    --    Has_Enumeration_Rep_Clause          (Flag66)\n+   --    Has_Pragma_Ordered                  (Flag198)  (base type only)\n    --    Nonzero_Is_True                     (Flag162)  (base type only)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n@@ -5879,6 +5886,7 @@ package Einfo is\n    function Has_Pragma_Elaborate_Body           (Id : E) return B;\n    function Has_Pragma_Inline                   (Id : E) return B;\n    function Has_Pragma_Inline_Always            (Id : E) return B;\n+   function Has_Pragma_Ordered                  (Id : E) return B;\n    function Has_Pragma_Pack                     (Id : E) return B;\n    function Has_Pragma_Preelab_Init             (Id : E) return B;\n    function Has_Pragma_Pure                     (Id : E) return B;\n@@ -6438,6 +6446,7 @@ package Einfo is\n    procedure Set_Has_Pragma_Elaborate_Body       (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Inline               (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Inline_Always        (Id : E; V : B := True);\n+   procedure Set_Has_Pragma_Ordered              (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pack                 (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Preelab_Init         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure                 (Id : E; V : B := True);\n@@ -7095,6 +7104,7 @@ package Einfo is\n    pragma Inline (Has_Pragma_Elaborate_Body);\n    pragma Inline (Has_Pragma_Inline);\n    pragma Inline (Has_Pragma_Inline_Always);\n+   pragma Inline (Has_Pragma_Ordered);\n    pragma Inline (Has_Pragma_Pack);\n    pragma Inline (Has_Pragma_Preelab_Init);\n    pragma Inline (Has_Pragma_Pure);\n@@ -7526,6 +7536,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Elaborate_Body);\n    pragma Inline (Set_Has_Pragma_Inline);\n    pragma Inline (Set_Has_Pragma_Inline_Always);\n+   pragma Inline (Set_Has_Pragma_Ordered);\n    pragma Inline (Set_Has_Pragma_Pack);\n    pragma Inline (Set_Has_Pragma_Preelab_Init);\n    pragma Inline (Set_Has_Pragma_Pure);"}, {"sha": "9dd5ae00a845eab0bd818426499c9cc9f4113efd", "filename": "gcc/ada/g-calend.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fg-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fg-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,11 +33,11 @@\n --  Second_Duration and Day_Of_Week and Day_In_Year from Calendar.Time.\n --  Second_Duration precision depends on the target clock precision.\n --\n---  GNAT.Calendar provides the same kind of abstraction found in\n---  Ada.Calendar. It provides Split and Time_Of to build and split a Time\n---  data. And it provides accessor functions to get only one of Hour, Minute,\n---  Second, Second_Duration. Other functions are to access more advanced\n---  values like Day_Of_Week, Day_In_Year and Week_In_Year.\n+--  GNAT.Calendar provides the same kind of abstraction found in Ada.Calendar.\n+--  It provides Split and Time_Of to build and split a Time data. And it\n+--  provides accessor functions to get only one of Hour, Minute, Second,\n+--  Second_Duration. Other functions are to access more advanced values like\n+--  Day_Of_Week, Day_In_Year and Week_In_Year.\n \n with Ada.Calendar;\n with Interfaces.C;\n@@ -46,6 +46,7 @@ package GNAT.Calendar is\n \n    type Day_Name is\n      (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday);\n+   pragma Ordered (Day_Name);\n \n    subtype Hour_Number         is Natural range 0 .. 23;\n    subtype Minute_Number       is Natural range 0 .. 59;"}, {"sha": "1b4801824414096dd6f6506c586d2c742a65d4ac", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -553,10 +553,18 @@ package body GNAT.Perfect_Hash_Generators is\n    -- Allocate --\n    --------------\n \n-   function  Allocate (N : Natural; S : Natural := 1) return Table_Id is\n+   function Allocate (N : Natural; S : Natural := 1) return Table_Id is\n       L : constant Integer := IT.Last;\n    begin\n       IT.Set_Last (L + N * S);\n+\n+      --  Initialize, so debugging printouts don't trip over uninitialized\n+      --  components.\n+\n+      for J in L + 1 .. IT.Last loop\n+         IT.Table (J) := -1;\n+      end loop;\n+\n       return L + 1;\n    end Allocate;\n "}, {"sha": "933978e444ba6ce02a183318754380ec8237b8b3", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -173,6 +173,7 @@ Implementation Defined Pragmas\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n+* Pragma Ordered::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -789,6 +790,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Normalize_Scalars::\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n+* Pragma Ordered::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -3731,6 +3733,96 @@ unit are excluded from the consistency check, as are all predefined units. The\n latter are compiled by default in pragma Optimize_Alignment (Off) mode if no\n pragma appears at the start of the file.\n \n+@node Pragma Ordered\n+@unnumberedsec Pragma Ordered\n+@findex Ordered\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Ordered (enumeration_first_subtype_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+Most enumeration types are from a conceptual point of view unordered.\n+For example, if we write:\n+\n+@smallexample @c ada\n+type Color is (Red, Blue, Green, Yellow);\n+@end smallexample\n+\n+@noindent\n+Then Ada semantics says that Blue > Red, and Green > Blue, but really\n+these relations make no sense, the enumeration type merely specifies\n+a set of possible colors, and the order is unimportant.\n+\n+@noindent\n+For such unordered enumeration types, it is generally a good idea if\n+clients avoid comparisons (other than equality or inequality), or\n+explicit ranges. For example, if we have code buried in some client\n+that says:\n+\n+@smallexample @c ada\n+if Current_Color < Yellow ....\n+if Current_Color in Blue .. Green\n+@end smallexample\n+\n+@noindent\n+Then the code is relying on the order, which is undesriable in this case.\n+It makes the code hard to read and creates maintenance difficulties if\n+entries have to be added to the enumeration type. In cases like this,\n+we prefer if the code in the client lists the possibilities, or an\n+appropriate subtype is declared in the parent package, e.g. for the\n+above case, we might have in the parent package:\n+\n+@smallexample @c ada\n+subtype RBG is Color range Red .. Green;\n+@end smallexample\n+\n+@noindent\n+and then in the client we could write:\n+\n+@smallexample @c ada\n+if Current_Color in RBG ....\n+if Current_Color = Blue or Current_Color = Green ...\n+@end smallexample\n+\n+@noindent\n+\n+However some enumeration types are legitimately ordered from a conceptual\n+point of view. For example, if you have:\n+\n+@smallexample @c ada\n+type Day is (Mon, Tue, Wed, Thu, Fri, Sat, Sun);\n+@end smallexample\n+\n+@noindent\n+then the ordering imposed by the language is reasonable, and it\n+is fine for clients to depend on this, writing for example:\n+\n+@smallexample @c ada\n+if D in Mon .. Fri then\n+if D < Wed\n+@end smallexample\n+\n+@noindent\n+pragma @option{Order} is provided to mark enumeration types that\n+are conceptually ordered, warning the reader that clients may depend\n+on the ordering. We provide a pragma to mark enumerations as Ordered\n+rather than one to mark them as Unordered, since in our experience,\n+the great majority of enumeration types are conceptually Unordered.\n+\n+The types Boolean, Character, Wide_Character, and Wide_Wide_Character\n+are considered to be ordered types, so there is a pragma Ordered\n+present in Standard for these types.\n+\n+Normally pragma Order serves as only documentation and a guide for\n+coding standards, but GNAT provides a warning switch -gnatw.u that\n+requests warnings for inappropriate uses (comparisons and explicit\n+subranges) for unordered types. If this switch is used, then any\n+enumeration type not marked with pragma Ordered will be considered\n+as unordered, and will generate warnings for inappropriate uses.\n+\n @node Pragma Passive\n @unnumberedsec Pragma Passive\n @findex Passive\n@@ -5745,11 +5837,11 @@ may raise @code{Constraint_Error}.\n @cindex Representation of enums\n @findex Enum_Val\n @noindent\n-For every enumeration subtype @var{S}, @code{@var{S}'Enum_Rep} denotes a\n+For every enumeration subtype @var{S}, @code{@var{S}'Enum_Val} denotes a\n function with the following spec:\n \n @smallexample @c ada\n-function @var{S}'Enum_Rep (Arg : @i{Universal_Integer)\n+function @var{S}'Enum_Val (Arg : @i{Universal_Integer)\n   return @var{S}'Base};\n @end smallexample\n "}, {"sha": "3d5eaf31471b33281fc6786d8ddaa82900b05be4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -5627,6 +5627,23 @@ This switch suppresses warnings for unused entities and packages.\n It also turns off warnings on unreferenced formals (and thus includes\n the effect of @option{-gnatwF}).\n \n+@item -gnatw.u\n+@emph{Activate warnings on unordered enumeration types.}\n+@cindex @option{-gnatw.u} (@command{gcc})\n+This switch causes enumeration types to be considered as conceptually\n+unordered, unless an explicit pragma Order is given for the type. The\n+effect is to generate warnings in clients that use explicit comparisons\n+or subranges, since these constructs both treat objects of the type as\n+ordered. A client is defined as a unit that is other than the unit in\n+which the type is declared, or its body or subunits. See description\n+of pragma Order in the GNAT RM for further details.\n+\n+@item -gnatw.U\n+@emph{Deactivate warnings on unordered enumeration types.}\n+@cindex @option{-gnatw.U} (@command{gcc})\n+This switch causes all enumeration types to be considered as ordered, so\n+that no warnings are given for comparisons or subranges for any type.\n+\n @item -gnatwv\n @emph{Activate warnings on unassigned variables.}\n @cindex @option{-gnatwv} (@command{gcc})\n@@ -6255,14 +6272,6 @@ allowed).\n Optional labels on @code{end} statements ending subprograms and on\n @code{exit} statements exiting named loops, are required to be present.\n \n-@item ^E^ENUMERATION_RANGES^\n-@emph{Check enumeration ranges.}\n-Explicit subranges of enumeration types (e.g. in loops or membership tests)\n-are not allowed unless the subrange occurs in the same package as the type\n-declaration, or its body or subunits. Standard types (such as Boolean and\n-Character) are excluded, allowing for example the range 'A'..'Z'. In addition\n-an explicit reference to X'First..X'Last (equivalent to X'Range) is allowed.\n-\n @item ^f^VTABS^\n @emph{No form feeds or vertical tabs.}\n Neither form feeds nor vertical tab characters are permitted"}, {"sha": "4107b0c56bfaee44651177d52c1657f443a64d91", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -65,6 +65,7 @@ package Opt is\n    --  Set True if binder file to be generated in Ada rather than C\n \n    type Ada_Version_Type is (Ada_83, Ada_95, Ada_05, Ada_12);\n+   pragma Ordered (Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful.\n \n@@ -1456,6 +1457,13 @@ package Opt is\n    --  non-portable semantics (e.g. because sizes of types differ). The default\n    --  is that this warning is enabled.\n \n+   Warn_On_Unordered_Enumeration_Type : Boolean := False;\n+   --  GNAT\n+   --  Set to True to generate warnings for inappropriate uses (comparisons\n+   --  and explicit ranges) on unordered enumeration types (which includes\n+   --  all enumeration types for which pragma Ordered is not given). The\n+   --  default is that this warning is disabled.\n+\n    Warn_On_Unrecognized_Pragma : Boolean := True;\n    --  GNAT\n    --  Set to True to generate warnings for unrecognized pragmas. The default"}, {"sha": "f4f879fec9d3a3d2edfa2f742b750b1f0326c76a", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -688,20 +688,10 @@ package body Osint is\n    -- Canonical_Case_File_Name --\n    ------------------------------\n \n-   --  For now, we only deal with the case of a-z. Eventually we should\n-   --  worry about other Latin-1 letters on systems that support this ???\n-\n    procedure Canonical_Case_File_Name (S : in out String) is\n    begin\n       if not File_Names_Case_Sensitive then\n-         for J in S'Range loop\n-            if S (J) in 'A' .. 'Z' then\n-               S (J) :=\n-                 Character'Val\n-                   (Character'Pos (S (J)) +\n-                     (Character'Pos ('a') - Character'Pos ('A')));\n-            end if;\n-         end loop;\n+         To_Lower (S);\n       end if;\n    end Canonical_Case_File_Name;\n \n@@ -712,14 +702,7 @@ package body Osint is\n    procedure Canonical_Case_Env_Var_Name (S : in out String) is\n    begin\n       if not Env_Vars_Case_Sensitive then\n-         for J in S'Range loop\n-            if S (J) in 'A' .. 'Z' then\n-               S (J) := Character'Val (\n-                 Character'Pos (S (J)) +\n-                   Character'Pos ('a')   -\n-                   Character'Pos ('A'));\n-            end if;\n-         end loop;\n+         To_Lower (S);\n       end if;\n    end Canonical_Case_Env_Var_Name;\n "}, {"sha": "acc941e5eb649a271730e7380b80bfe36828574d", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -1156,10 +1156,11 @@ begin\n            Pragma_Memory_Size                   |\n            Pragma_No_Body                       |\n            Pragma_No_Return                     |\n-           Pragma_Obsolescent                   |\n            Pragma_No_Run_Time                   |\n            Pragma_No_Strict_Aliasing            |\n            Pragma_Normalize_Scalars             |\n+           Pragma_Obsolescent                   |\n+           Pragma_Ordered                       |\n            Pragma_Optimize                      |\n            Pragma_Optimize_Alignment            |\n            Pragma_Pack                          |"}, {"sha": "c8f6bc66207bfa3f113c868a1e93dd286cd18271", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1992-2009, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1992-2010, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,6 +60,7 @@ package System.File_Control_Block is\n    --  Used to hold name and form strings\n \n    type File_Mode is (In_File, Inout_File, Out_File, Append_File);\n+   subtype Read_File_Mode is File_Mode range In_File .. Inout_File;\n    --  File mode (union of file modes permitted by individual packages,\n    --  the types File_Mode in the individual packages are declared to\n    --  allow easy conversion to and from this general type."}, {"sha": "2142e49024ccaf16df8de099334412ed1f58b70b", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -205,7 +205,7 @@ package body System.File_IO is\n    begin\n       if File = null then\n          raise Status_Error with \"file not open\";\n-      elsif File.Mode > Inout_File then\n+      elsif File.Mode not in Read_File_Mode then\n          raise Mode_Error with \"file not readable\";\n       end if;\n    end Check_Read_Status;\n@@ -1183,7 +1183,7 @@ package body System.File_IO is\n       --  reopen.\n \n       if Mode = File.Mode\n-        and then Mode <= Inout_File\n+        and then Mode in Read_File_Mode\n       then\n          rewind (File.Stream);\n "}, {"sha": "104a3a68c24b8169d33da3ec061005eb9b08313f", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -282,32 +282,31 @@ package System.Tasking is\n       Cancelled\n       --  the call was asynchronous, and was cancelled\n      );\n+   pragma Ordered (Entry_Call_State);\n \n-   --  Never_Abortable is used for calls that are made in a abort\n-   --  deferred region (see ARM 9.8(5-11), 9.8 (20)).\n-   --  Such a call is never abortable.\n+   --  Never_Abortable is used for calls that are made in a abort deferred\n+   --  region (see ARM 9.8(5-11), 9.8 (20)). Such a call is never abortable.\n \n-   --  The Was_ vs. Not_Yet_ distinction is needed to decide whether it\n-   --  is OK to advance into the abortable part of an async. select stmt.\n-   --  That is allowed iff the mode is Now_ or Was_.\n+   --  The Was_ vs. Not_Yet_ distinction is needed to decide whether it is OK\n+   --  to advance into the abortable part of an async. select stmt. That is\n+   --  allowed iff the mode is Now_ or Was_.\n \n-   --  Done indicates the call has been completed, without cancellation,\n-   --  or no call has been made yet at this ATC nesting level,\n-   --  and so aborting the call is no longer an issue.\n-   --  Completion of the call does not necessarily indicate \"success\";\n-   --  the call may be returning an exception if Exception_To_Raise is\n-   --  non-null.\n+   --  Done indicates the call has been completed, without cancellation, or no\n+   --  call has been made yet at this ATC nesting level, and so aborting the\n+   --  call is no longer an issue. Completion of the call does not necessarily\n+   --  indicate \"success\"; the call may be returning an exception if\n+   --  Exception_To_Raise is non-null.\n \n-   --  Cancelled indicates the call was cancelled,\n-   --  and so aborting the call is no longer an issue.\n+   --  Cancelled indicates the call was cancelled, and so aborting the call is\n+   --  no longer an issue.\n \n-   --  The call is on an entry queue unless\n-   --  State >= Done, in which case it may or may not be still Onqueue.\n+   --  The call is on an entry queue unless State >= Done, in which case it may\n+   --  or may not be still Onqueue.\n \n-   --  Please do not modify the order of the values, without checking\n-   --  all uses of this type. We rely on partial \"monotonicity\" of\n-   --  Entry_Call_Record.State to avoid locking when we access this\n-   --  value for certain tests. In particular:\n+   --  Please do not modify the order of the values, without checking all uses\n+   --  of this type. We rely on partial \"monotonicity\" of\n+   --  Entry_Call_Record.State to avoid locking when we access this value for\n+   --  certain tests. In particular:\n \n    --  1)  Once State >= Done, we can rely that the call has been\n    --      completed. If State >= Done, it will not"}, {"sha": "1ea6699473eb8fa10daa4c9d7951db897d6f92fe", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1268,7 +1268,7 @@ package body System.Tasking.Rendezvous is\n \n          if Old_State /= Entry_Call.State\n            and then Entry_Call.State = Now_Abortable\n-           and then Entry_Call.Mode > Simple_Call\n+           and then Entry_Call.Mode /= Simple_Call\n            and then Entry_Call.Self /= Self_ID\n \n          --  Asynchronous_Call or Conditional_Call"}, {"sha": "f9ca610a060b91962c61982cc5bb891aa977f730", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -646,26 +646,26 @@ package body System.Tasking.Protected_Objects.Operations is\n             end if;\n          end if;\n \n-      elsif Mode < Asynchronous_Call then\n-\n-         --  Simple_Call or Conditional_Call\n-\n-         if Single_Lock then\n-            STPO.Lock_RTS;\n-            Entry_Calls.Wait_For_Completion (Entry_Call);\n-            STPO.Unlock_RTS;\n+      else\n+         case Mode is\n+            when Simple_Call | Conditional_Call =>\n+               if Single_Lock then\n+                  STPO.Lock_RTS;\n+                  Entry_Calls.Wait_For_Completion (Entry_Call);\n+                  STPO.Unlock_RTS;\n \n-         else\n-            STPO.Write_Lock (Self_ID);\n-            Entry_Calls.Wait_For_Completion (Entry_Call);\n-            STPO.Unlock (Self_ID);\n-         end if;\n+               else\n+                  STPO.Write_Lock (Self_ID);\n+                  Entry_Calls.Wait_For_Completion (Entry_Call);\n+                  STPO.Unlock (Self_ID);\n+               end if;\n \n-         Block.Cancelled := Entry_Call.State = Cancelled;\n+               Block.Cancelled := Entry_Call.State = Cancelled;\n \n-      else\n-         pragma Assert (False);\n-         null;\n+            when Asynchronous_Call | Timed_Call =>\n+               pragma Assert (False);\n+               null;\n+         end case;\n       end if;\n \n       Initialization.Undefer_Abort_Nestable (Self_ID);"}, {"sha": "c926e0960664a90586bd56488c1349951bd0a123", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -5375,9 +5375,14 @@ package body Sem_Ch3 is\n          Set_RM_Size        (Implicit_Base, RM_Size        (Parent_Type));\n          Set_First_Rep_Item (Implicit_Base, First_Rep_Item (Parent_Type));\n \n+         --  Copy other flags from parent type\n+\n          Set_Has_Non_Standard_Rep\n                             (Implicit_Base, Has_Non_Standard_Rep\n                                                            (Parent_Type));\n+         Set_Has_Pragma_Ordered\n+                            (Implicit_Base, Has_Pragma_Ordered\n+                                                           (Parent_Type));\n          Set_Has_Delayed_Freeze (Implicit_Base);\n \n          --  Process the subtype indication including a validation check on the"}, {"sha": "242d5615c5506990c2f597dc6f0347e5aa4d5705", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -28,9 +28,11 @@ package Sem_Ch6 is\n \n    type Conformance_Type is\n      (Type_Conformant, Mode_Conformant, Subtype_Conformant, Fully_Conformant);\n+   pragma Ordered (Conformance_Type);\n    --  Conformance type used in conformance checks between specs and bodies,\n    --  and for overriding. The literals match the RM definitions of the\n-   --  corresponding terms.\n+   --  corresponding terms. This is an ordered type, since each conformance\n+   --  type is stronger than the ones preceding it.\n \n    procedure Analyze_Abstract_Subprogram_Declaration (N : Node_Id);\n    procedure Analyze_Extended_Return_Statement       (N : Node_Id);"}, {"sha": "44720f02cffb17671392762d728e4f238ae03b2a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -9707,7 +9707,7 @@ package body Sem_Prag is\n \n          --  pragma Optimize_Alignment (Time | Space | Off);\n \n-         when Pragma_Optimize_Alignment =>\n+         when Pragma_Optimize_Alignment => Optimize_Alignment : begin\n             GNAT_Pragma;\n             Check_No_Identifiers;\n             Check_Arg_Count (1);\n@@ -9733,6 +9733,42 @@ package body Sem_Prag is\n             --  switch will get reset anyway at the start of each unit.\n \n             Optimize_Alignment_Local := True;\n+         end Optimize_Alignment;\n+\n+         -------------\n+         -- Ordered --\n+         -------------\n+\n+         --  pragma Ordered (first_enumeration_subtype_LOCAL_NAME);\n+\n+         when Pragma_Ordered => Ordered : declare\n+            Assoc   : constant Node_Id := Arg1;\n+            Type_Id : Node_Id;\n+            Typ     : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_No_Identifiers;\n+            Check_Arg_Count (1);\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Type_Id := Expression (Assoc);\n+            Find_Type (Type_Id);\n+            Typ := Entity (Type_Id);\n+\n+            if Typ = Any_Type then\n+               return;\n+            else\n+               Typ := Underlying_Type (Typ);\n+            end if;\n+\n+            if not Is_Enumeration_Type (Typ) then\n+               Error_Pragma (\"pragma% must specify enumeration type\");\n+            end if;\n+\n+            Check_First_Subtype (Arg1);\n+            Set_Has_Pragma_Ordered (Base_Type (Typ));\n+         end Ordered;\n \n          ----------\n          -- Pack --\n@@ -9821,7 +9857,7 @@ package body Sem_Prag is\n                      elsif VM_Target = No_VM then\n                         Set_Is_Packed            (Base_Type (Typ));\n                         Set_Has_Pragma_Pack      (Base_Type (Typ));\n-                           Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+                        Set_Has_Non_Standard_Rep (Base_Type (Typ));\n \n                      --  If we ignore the pack, then warn about this, except\n                      --  that we suppress the warning in GNAT mode.\n@@ -12818,6 +12854,7 @@ package body Sem_Prag is\n       Pragma_Obsolescent                   =>  0,\n       Pragma_Optimize                      => -1,\n       Pragma_Optimize_Alignment            => -1,\n+      Pragma_Ordered                       =>  0,\n       Pragma_Pack                          =>  0,\n       Pragma_Page                          => -1,\n       Pragma_Passive                       => -1,"}, {"sha": "80b8479e24adb5c73c3590dcb197dbe9a633ff93", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 108, "deletions": 21, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -91,6 +91,15 @@ package body Sem_Res is\n \n    --  Note that Resolve_Attribute is separated off in Sem_Attr\n \n+   function Bad_Unordered_Enumeration_Reference\n+     (N : Node_Id;\n+      T : Entity_Id) return Boolean;\n+   --  Node N contains a potentially dubious reference to type T, either an\n+   --  explicit comparison, or an explicit range. This function returns True\n+   --  if the type T is an enumeration type for which No pragma Order has been\n+   --  given, and the reference N is not in the same extended source unit as\n+   --  the declaration of T.\n+\n    procedure Check_Discriminant_Use (N : Node_Id);\n    --  Enforce the restrictions on the use of discriminants when constraining\n    --  a component of a discriminated type (record or concurrent type).\n@@ -400,6 +409,22 @@ package body Sem_Res is\n       end if;\n    end Analyze_And_Resolve;\n \n+   ----------------------------------------\n+   -- Bad_Unordered_Enumeration_Reference --\n+   ----------------------------------------\n+\n+   function Bad_Unordered_Enumeration_Reference\n+     (N : Node_Id;\n+      T : Entity_Id) return Boolean\n+   is\n+   begin\n+      return Is_Enumeration_Type (T)\n+        and then Comes_From_Source (N)\n+        and then Warn_On_Unordered_Enumeration_Type\n+        and then not Has_Pragma_Ordered (T)\n+        and then not In_Same_Extended_Unit (N, T);\n+   end Bad_Unordered_Enumeration_Reference;\n+\n    ----------------------------\n    -- Check_Discriminant_Use --\n    ----------------------------\n@@ -5658,30 +5683,49 @@ package body Sem_Res is\n       Set_Etype (N, Base_Type (Typ));\n       Generate_Reference (T, N, ' ');\n \n-      if T /= Any_Type then\n-         if T = Any_String    or else\n-            T = Any_Composite or else\n-            T = Any_Character\n-         then\n-            if T = Any_Character then\n-               Ambiguous_Character (L);\n-            else\n-               Error_Msg_N (\"ambiguous operands for comparison\", N);\n-            end if;\n+      --  Skip remaining processing if already set to Any_Type\n \n-            Set_Etype (N, Any_Type);\n-            return;\n+      if T = Any_Type then\n+         return;\n+      end if;\n+\n+      --  Deal with other error cases\n \n+      if T = Any_String    or else\n+         T = Any_Composite or else\n+         T = Any_Character\n+      then\n+         if T = Any_Character then\n+            Ambiguous_Character (L);\n          else\n-            Resolve (L, T);\n-            Resolve (R, T);\n-            Check_Unset_Reference (L);\n-            Check_Unset_Reference (R);\n-            Generate_Operator_Reference (N, T);\n-            Check_Low_Bound_Tested (N);\n-            Eval_Relational_Op (N);\n+            Error_Msg_N (\"ambiguous operands for comparison\", N);\n          end if;\n+\n+         Set_Etype (N, Any_Type);\n+         return;\n       end if;\n+\n+      --  Resolve the operands if types OK\n+\n+      Resolve (L, T);\n+      Resolve (R, T);\n+      Check_Unset_Reference (L);\n+      Check_Unset_Reference (R);\n+      Generate_Operator_Reference (N, T);\n+      Check_Low_Bound_Tested (N);\n+\n+      --  Check comparison on unordered enumeration\n+\n+      if Comes_From_Source (N)\n+        and then Bad_Unordered_Enumeration_Reference (N, Etype (L))\n+      then\n+         Error_Msg_N (\"comparison on unordered enumeration type?\", N);\n+      end if;\n+\n+      --  Evaluate the relation (note we do this after the above check\n+      --  since this Eval call may change N to True/False.\n+\n+      Eval_Relational_Op (N);\n    end Resolve_Comparison_Op;\n \n    ------------------------------------\n@@ -7606,13 +7650,56 @@ package body Sem_Res is\n       L : constant Node_Id := Low_Bound (N);\n       H : constant Node_Id := High_Bound (N);\n \n+      function First_Last_Ref return Boolean;\n+      --  Returns True if N is of the form X'First .. X'Last where X is the\n+      --  same entity for both attributes.\n+\n+      --------------------\n+      -- First_Last_Ref --\n+      --------------------\n+\n+      function First_Last_Ref return Boolean is\n+         Lorig : constant Node_Id := Original_Node (L);\n+         Horig : constant Node_Id := Original_Node (H);\n+\n+      begin\n+         if Nkind (Lorig) = N_Attribute_Reference\n+           and then Nkind (Horig) = N_Attribute_Reference\n+           and then Attribute_Name (Lorig) = Name_First\n+           and then Attribute_Name (Horig) = Name_Last\n+         then\n+            declare\n+               PL : constant Node_Id := Prefix (Lorig);\n+               PH : constant Node_Id := Prefix (Horig);\n+            begin\n+               if Is_Entity_Name (PL)\n+                 and then Is_Entity_Name (PH)\n+                 and then Entity (PL) = Entity (PH)\n+               then\n+                  return True;\n+               end if;\n+            end;\n+         end if;\n+\n+         return False;\n+      end First_Last_Ref;\n+\n+   --  Start of processing for Resolve_Range\n+\n    begin\n       Set_Etype (N, Typ);\n       Resolve (L, Typ);\n       Resolve (H, Typ);\n \n-      if Style_Check then\n-         Check_Enumeration_Subrange (N);\n+      --  Check for inappropriate range on unordered enumeration type\n+\n+      if Bad_Unordered_Enumeration_Reference (N, Typ)\n+\n+        --  Exclude X'First .. X'Last if X is the same entity for both\n+\n+        and then not First_Last_Ref\n+      then\n+         Error_Msg (\"subrange of unordered enumeration type?\", Sloc (N));\n       end if;\n \n       Check_Unset_Reference (L);"}, {"sha": "fc7e3440b60bea4c1c2ea5c4fee981c283ebd092", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -3088,6 +3088,7 @@ package body Sem_Warn is\n             Warn_On_Redundant_Constructs        := True;\n             Warn_On_Reverse_Bit_Order           := True;\n             Warn_On_Unchecked_Conversion        := True;\n+            Warn_On_Unordered_Enumeration_Type  := True;\n             Warn_On_Unrecognized_Pragma         := True;\n             Warn_On_Unrepped_Components         := True;\n             Warn_On_Warnings_Off                := True;\n@@ -3125,6 +3126,12 @@ package body Sem_Warn is\n          when 'R' =>\n             Warn_On_Object_Renames_Function     := False;\n \n+         when 'u' =>\n+            Warn_On_Unordered_Enumeration_Type  := True;\n+\n+         when 'U' =>\n+            Warn_On_Unordered_Enumeration_Type  := False;\n+\n          when 'v' =>\n             Warn_On_Reverse_Bit_Order           := True;\n \n@@ -3186,6 +3193,7 @@ package body Sem_Warn is\n       Warn_On_Reverse_Bit_Order           := False;\n       Warn_On_Object_Renames_Function     := True;\n       Warn_On_Unchecked_Conversion        := True;\n+      Warn_On_Unordered_Enumeration_Type  := False;\n       Warn_On_Unrecognized_Pragma         := True;\n       Warn_On_Unrepped_Components         := False;\n       Warn_On_Warnings_Off                := False;\n@@ -3256,6 +3264,7 @@ package body Sem_Warn is\n             Warn_On_Redundant_Constructs        := False;\n             Warn_On_Reverse_Bit_Order           := False;\n             Warn_On_Unchecked_Conversion        := False;\n+            Warn_On_Unordered_Enumeration_Type  := False;\n             Warn_On_Unrecognized_Pragma         := False;\n             Warn_On_Unrepped_Components         := False;\n             Warn_On_Warnings_Off                := False;"}, {"sha": "7abd945de0a249844cab99fd34a74c7662df82f8", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -483,6 +483,7 @@ package Snames is\n    Name_No_Return                      : constant Name_Id := N + $; -- Ada 05\n    Name_Obsolescent                    : constant Name_Id := N + $; -- GNAT\n    Name_Optimize                       : constant Name_Id := N + $;\n+   Name_Ordered                        : constant Name_Id := N + $; -- GNAT\n    Name_Pack                           : constant Name_Id := N + $;\n    Name_Page                           : constant Name_Id := N + $;\n    Name_Passive                        : constant Name_Id := N + $; -- GNAT\n@@ -1547,6 +1548,7 @@ package Snames is\n       Pragma_No_Return,\n       Pragma_Obsolescent,\n       Pragma_Optimize,\n+      Pragma_Ordered,\n       Pragma_Pack,\n       Pragma_Page,\n       Pragma_Passive,"}, {"sha": "9f9f32a932db4a67b94866d7175348343292f9cd", "filename": "gcc/ada/style.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyle.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyle.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -103,9 +103,6 @@ package Style is\n    --  Called after scanning out a binary operator other than a plus, minus\n    --  or exponentiation operator. Intended for checking spacing rules.\n \n-   procedure Check_Enumeration_Subrange (N : Node_Id)\n-     renames Style_Inst.Check_Enumeration_Subrange;\n-\n    procedure Check_Exponentiation_Operator\n      renames Style_Inst.Check_Exponentiation_Operator;\n    --  Called after scanning out an exponentiation operator. Intended for"}, {"sha": "dc6b6a64892f5a52f3dc67f8856e2444b2da597a", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 1, "deletions": 79, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -32,13 +32,10 @@ with Casing;   use Casing;\n with Csets;    use Csets;\n with Einfo;    use Einfo;\n with Err_Vars; use Err_Vars;\n-with Lib;      use Lib;\n-with Namet;    use Namet;\n with Opt;      use Opt;\n with Scans;    use Scans;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n-with Snames;   use Snames;\n with Stylesw;  use Stylesw;\n \n package body Styleg is\n@@ -205,6 +202,7 @@ package body Styleg is\n       end OK_Boolean_Operand;\n \n    --  Start of processig for Check_Boolean_Operator\n+\n    begin\n       if Style_Check_Boolean_And_Or\n         and then Comes_From_Source (Node)\n@@ -553,82 +551,6 @@ package body Styleg is\n       end if;\n    end Check_Dot_Dot;\n \n-   --------------------------------\n-   -- Check_Enumeration_Subrange --\n-   --------------------------------\n-\n-   procedure Check_Enumeration_Subrange (N : Node_Id) is\n-      function First_Last_Ref return Boolean;\n-      --  Returns True if N is of the form X'First .. X'Last where X is the\n-      --  same entity for both attributes. N is already known to be N_Range.\n-\n-      --------------------\n-      -- First_Last_Ref --\n-      --------------------\n-\n-      function First_Last_Ref return Boolean is\n-         L : constant Node_Id := Low_Bound  (N);\n-         H : constant Node_Id := High_Bound (N);\n-\n-      begin\n-         if Nkind (L) = N_Attribute_Reference\n-           and then Nkind (H) = N_Attribute_Reference\n-           and then Attribute_Name (L) = Name_First\n-           and then Attribute_Name (H) = Name_Last\n-         then\n-            declare\n-               PL : constant Node_Id := Prefix (L);\n-               PH : constant Node_Id := Prefix (H);\n-            begin\n-               if Is_Entity_Name (PL)\n-                 and then Is_Entity_Name (PH)\n-                 and then Entity (PL) = Entity (PH)\n-               then\n-                  return True;\n-               end if;\n-            end;\n-         end if;\n-\n-         return False;\n-      end First_Last_Ref;\n-\n-   --  Start of processing for Check_Enumeration_Subrange\n-\n-   begin\n-      if Style_Check_Enumeration_Subranges then\n-\n-         if Nkind (N) = N_Range\n-\n-           --  Only consider ranges that are explicit in the source\n-\n-           and then Comes_From_Source (N)\n-\n-           --  Only consider enumeration types\n-\n-           and then Is_Enumeration_Type (Etype (N))\n-\n-           --  Exclude standard types. Most importantly we want to exclude the\n-           --  standard character types, since we want to allow ranges like\n-           --  '0' .. '9'. But also exclude Boolean since False .. True is OK.\n-\n-           and then Sloc (Root_Type (Etype (N))) /= Standard_Location\n-\n-           --  Exclude X'First .. X'Last if X is the same entity for both\n-\n-           and then not First_Last_Ref\n-\n-           --  Allow the range if in same unit as type declaration (or the\n-           --  corresponding body or any of its subunits).\n-\n-           and then not In_Same_Extended_Unit (N, Etype (N))\n-         then\n-            Error_Msg\n-              (\"(style) explicit enumeration subrange not allowed\",\n-               Sloc (N));\n-         end if;\n-      end if;\n-   end Check_Enumeration_Subrange;\n-\n    ---------------\n    -- Check_EOF --\n    ---------------"}, {"sha": "954a03359967280e180fee1f5dcd2383a7c19476", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -92,10 +92,6 @@ package Styleg is\n    procedure Check_Dot_Dot;\n    --  Called after scanning out dot dot to check spacing\n \n-   procedure Check_Enumeration_Subrange (N : Node_Id);\n-   --  Called to check a node that may be an N_Range node for an enumeration\n-   --  subtype occurring other than in the defining unit of the type.\n-\n    procedure Check_EOF;\n    --  Called after scanning out EOF mark\n "}, {"sha": "9a59996558713e5150a4a5de847e7f7d7f71dbdd", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -63,7 +63,6 @@ package body Stylesw is\n    --  not yet have the whole tool suite clean with respect to this.\n \n    --                \"B\" &  -- check boolean operators\n-   --                \"E\" &  -- check enumeration ranges\n \n    -------------------------------\n    -- Reset_Style_Check_Options --\n@@ -79,7 +78,6 @@ package body Stylesw is\n       Style_Check_Boolean_And_Or        := False;\n       Style_Check_Comments              := False;\n       Style_Check_DOS_Line_Terminator   := False;\n-      Style_Check_Enumeration_Subranges := False;\n       Style_Check_End_Labels            := False;\n       Style_Check_Form_Feeds            := False;\n       Style_Check_Horizontal_Tabs       := False;\n@@ -165,7 +163,6 @@ package body Stylesw is\n       Add ('c', Style_Check_Comments);\n       Add ('d', Style_Check_DOS_Line_Terminator);\n       Add ('e', Style_Check_End_Labels);\n-      Add ('E', Style_Check_Enumeration_Subranges);\n       Add ('f', Style_Check_Form_Feeds);\n       Add ('h', Style_Check_Horizontal_Tabs);\n       Add ('i', Style_Check_If_Then_Layout);\n@@ -332,9 +329,6 @@ package body Stylesw is\n             when 'e' =>\n                Style_Check_End_Labels            := True;\n \n-            when 'E' =>\n-               Style_Check_Enumeration_Subranges := True;\n-\n             when 'f' =>\n                Style_Check_Form_Feeds            := True;\n \n@@ -499,9 +493,6 @@ package body Stylesw is\n             when 'e' =>\n                Style_Check_End_Labels            := False;\n \n-            when 'E' =>\n-               Style_Check_Enumeration_Subranges := False;\n-\n             when 'f' =>\n                Style_Check_Form_Feeds            := False;\n "}, {"sha": "f7d45b6d60ce1517d14c5e8fd9e85b6f1af0d187", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -113,12 +113,6 @@ package Stylesw is\n    --  This can be set True by using the -gnatye switch. If it is True, then\n    --  optional END labels must always be present.\n \n-   Style_Check_Enumeration_Subranges : Boolean := False;\n-   --  This can be set True by using the -gnatyE switch. If it is True, then\n-   --  explicit subranges (using .. notation) on enumeration subtypes are not\n-   --  permitted in other than the same source unit in which the enumeration\n-   --  subtype is declared.\n-\n    Style_Check_Form_Feeds : Boolean := False;\n    --  This can be set True by using the -gnatyf switch. If it is True, then\n    --  form feeds and vertical tabs are not allowed in the source text."}, {"sha": "b202a34fe362a7c474576ceedc2ed8563c6a5780", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -170,6 +170,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatwT         ^ /WARNINGS=NODELETED_CODE\n -gnatwu         ^ /WARNINGS=UNUSED\n -gnatwU         ^ /WARNINGS=NOUNUSED\n+-gnatw.u        ^ /WARNINGS=UNORDERED_ENUMERATIONS\n+-gnatw.U        ^ /WARNINGS=NOUNORDERED_ENUMERATIONS\n -gnatwv         ^ /WARNINGS=VARIABLES_UNINITIALIZED\n -gnatwV         ^ /WARNINGS=NOVARIABLES_UNINITIALIZED\n -gnatww         ^ /WARNINGS=LOWBOUND_ASSUMED"}, {"sha": "c0b7ce6aa1ad4e268b188e0ebc7a9863a080ec5c", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -470,6 +470,8 @@ begin\n    Write_Line (\"        T*   turn off warnings for tracking deleted code\");\n    Write_Line (\"        u+   turn on warnings for unused entity\");\n    Write_Line (\"        U*   turn off warnings for unused entity\");\n+   Write_Line (\"        .u   turn on warnings for unordered enumeration\");\n+   Write_Line (\"        .U*  turn off warnings for unordered enumeration\");\n    Write_Line (\"        v*+  turn on warnings for unassigned variable\");\n    Write_Line (\"        V    turn off warnings for unassigned variable\");\n    Write_Line (\"        .v*+ turn on info messages for reverse bit order\");\n@@ -533,7 +535,6 @@ begin\n    Write_Line (\"        c    check comment format\");\n    Write_Line (\"        d    check no DOS line terminators\");\n    Write_Line (\"        e    check end/exit labels present\");\n-   Write_Line (\"        E    check no explicit enumeration subranges\");\n    Write_Line (\"        f    check no form feeds/vertical tabs in source\");\n    Write_Line (\"        g    check standard GNAT style rules\");\n    Write_Line (\"        h    check no horizontal tabs in source\");"}, {"sha": "ba15a27e49b3407e016a19e589a0a2a7e812ceed", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd29d5193a42a7fbe92c5052fa8d28f35290c823/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=bd29d5193a42a7fbe92c5052fa8d28f35290c823", "patch": "@@ -2277,10 +2277,6 @@ package VMS_Data is\n                                                \"-gnatye \"                  &\n                                             \"NOEND \"                       &\n                                                \"-gnaty-e \"                 &\n-                                            \"ENUMERATION_RANGES \"          &\n-                                               \"-gnatyE \"                  &\n-                                            \"NOENUMERATION_RANGES \"        &\n-                                               \"-gnaty-E \"                 &\n                                             \"VTABS \"                       &\n                                                \"-gnatyf \"                  &\n                                             \"NOVTABS \"                     &\n@@ -3005,6 +3001,10 @@ package VMS_Data is\n                                                \"-gnatwu \"                  &\n                                             \"NOUNUSED \"                    &\n                                                \"-gnatwU \"                  &\n+                                            \"UNORDERED_ENUMERATIONS \"      &\n+                                               \"-gnatw.u \"                 &\n+                                            \"NOUNORDERED_ENUMERATIONS \"    &\n+                                               \"-gnatw.U \"                 &\n                                             \"VARIABLES_UNINITIALIZED \"     &\n                                                \"-gnatwv \"                  &\n                                             \"NOVARIABLES_UNINITIALIZED \"   &"}]}