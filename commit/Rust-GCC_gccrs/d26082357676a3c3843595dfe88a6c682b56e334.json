{"sha": "d26082357676a3c3843595dfe88a6c682b56e334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2MDgyMzU3Njc2YTNjMzg0MzU5NWRmZTg4YTZjNjgyYjU2ZTMzNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-10-10T16:57:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-10-10T16:57:30Z"}, "message": "pretty-print: support URL escape sequences (PR 87488)\n\nhttps://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\ndescribes an emerging standard for embedding URLs in escape sequences\nfor marking up text output.  This is supported e.g. by recent releases\nof GNOME Terminal.\n\nThis patch adds support to our pretty-printing framework for emitting\nURLs.\n\nA followup patch uses this to add URLs to the pertinent documentation\nfor the output of -fdiagnostics-show-option.\n\ngcc/ChangeLog:\n\tPR 87488\n\t* common.opt (fdiagnostics-urls=): New option.\n\t(diagnostic-url.h): Add SourceInclude.\n\t(diagnostic_url_rule): New enum.\n\t* diagnostic-color.c: Include \"diagnostic-url.h\".\n\t(diagnostic_urls_enabled_p): New function.\n\t* diagnostic-url.h: New file.\n\t* diagnostic.c: Include \"diagnostic-url.h\".\n\t(diagnostic_urls_init): New function.\n\t* diagnostic.h (diagnostic_urls_init): New decl.\n\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n\t-fdiagnostics-urls to the list.\n\t(-fdiagnostics-urls): New option.\n\t* gcc.c (driver_handle_option): Handle OPT_fdiagnostics_urls_.\n\t(driver::global_initializations): Call diagnostic_urls_init.\n\t* opts-global.c (init_options_once): Likewise.\n\t* opts.c (common_handle_option): Handle OPT_fdiagnostics_urls_.\n\t* pretty-print.c (pretty_printer::pretty_printer): Initialize\n\tshow_urls.\n\t(pp_begin_url): New function.\n\t(pp_end_url): New function.\n\t(selftest::test_urls): New selftest.\n\t(selftest::pretty_print_c_tests): Call it.\n\t* pretty-print.h (pretty_printer::show_urls): New field.\n\t(pp_begin_url): New decl.\n\t(pp_end_url): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR 87488\n\t* lib/prune.exp (TEST_ALWAYS_FLAGS): Add -fdiagnostics-urls=never.\n\nFrom-SVN: r276841", "tree": {"sha": "2e7dd9497cc9cb72adfaa573f0772f25b9e0b92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7dd9497cc9cb72adfaa573f0772f25b9e0b92a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26082357676a3c3843595dfe88a6c682b56e334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26082357676a3c3843595dfe88a6c682b56e334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26082357676a3c3843595dfe88a6c682b56e334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26082357676a3c3843595dfe88a6c682b56e334/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cfc400f3f84fb9b9cb9c3a5d4714fbea5686b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfc400f3f84fb9b9cb9c3a5d4714fbea5686b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfc400f3f84fb9b9cb9c3a5d4714fbea5686b62"}], "stats": {"total": 220, "additions": 218, "deletions": 2}, "files": [{"sha": "e3c1a4f0717c149ee2008eba686e254c8138745e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -1,3 +1,32 @@\n+2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87488\n+\t* common.opt (fdiagnostics-urls=): New option.\n+\t(diagnostic-url.h): Add SourceInclude.\n+\t(diagnostic_url_rule): New enum.\n+\t* diagnostic-color.c: Include \"diagnostic-url.h\".\n+\t(diagnostic_urls_enabled_p): New function.\n+\t* diagnostic-url.h: New file.\n+\t* diagnostic.c: Include \"diagnostic-url.h\".\n+\t(diagnostic_urls_init): New function.\n+\t* diagnostic.h (diagnostic_urls_init): New decl.\n+\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n+\t-fdiagnostics-urls to the list.\n+\t(-fdiagnostics-urls): New option.\n+\t* gcc.c (driver_handle_option): Handle OPT_fdiagnostics_urls_.\n+\t(driver::global_initializations): Call diagnostic_urls_init.\n+\t* opts-global.c (init_options_once): Likewise.\n+\t* opts.c (common_handle_option): Handle OPT_fdiagnostics_urls_.\n+\t* pretty-print.c (pretty_printer::pretty_printer): Initialize\n+\tshow_urls.\n+\t(pp_begin_url): New function.\n+\t(pp_end_url): New function.\n+\t(selftest::test_urls): New selftest.\n+\t(selftest::pretty_print_c_tests): Call it.\n+\t* pretty-print.h (pretty_printer::show_urls): New field.\n+\t(pp_begin_url): New decl.\n+\t(pp_end_url): New decl.\n+\n 2019-10-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/92022"}, {"sha": "124e8cf3ebe8aec4379bb980a0de6d4ed4969da6", "filename": "gcc/common.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -1281,6 +1281,26 @@ Enum(diagnostic_color_rule) String(always) Value(DIAGNOSTICS_COLOR_YES)\n EnumValue\n Enum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)\n \n+fdiagnostics-urls=\n+Driver Common Joined RejectNegative Var(flag_diagnostics_show_urls) Enum(diagnostic_url_rule) Init(DIAGNOSTICS_URL_AUTO)\n+-fdiagnostics-urls=[never|always|auto]\tEmbed URLs in diagnostics.\n+\n+; Required for these enum values.\n+SourceInclude\n+diagnostic-url.h\n+\n+Enum\n+Name(diagnostic_url_rule) Type(int)\n+\n+EnumValue\n+Enum(diagnostic_url_rule) String(never) Value(DIAGNOSTICS_URL_NO)\n+\n+EnumValue\n+Enum(diagnostic_url_rule) String(always) Value(DIAGNOSTICS_URL_YES)\n+\n+EnumValue\n+Enum(diagnostic_url_rule) String(auto) Value(DIAGNOSTICS_URL_AUTO)\n+\n fdiagnostics-format=\n Common Joined RejectNegative Enum(diagnostics_output_format)\n -fdiagnostics-format=[text|json] Select output format."}, {"sha": "abc919f6383f098689a5e96763e9dac5a4bfc507", "filename": "gcc/diagnostic-color.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-color.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -19,6 +19,7 @@\n #include \"config.h\"\n #include \"system.h\"\n #include \"diagnostic-color.h\"\n+#include \"diagnostic-url.h\"\n \n #ifdef __MINGW32__\n #  include <windows.h>\n@@ -236,3 +237,22 @@ colorize_init (diagnostic_color_rule_t rule)\n       gcc_unreachable ();\n     }\n }\n+\n+/* Determine if URLs should be enabled, based on RULE.\n+   This reuses the logic for colorization.  */\n+\n+bool\n+diagnostic_urls_enabled_p (diagnostic_url_rule_t rule)\n+{\n+  switch (rule)\n+    {\n+    case DIAGNOSTICS_URL_NO:\n+      return false;\n+    case DIAGNOSTICS_URL_YES:\n+      return true;\n+    case DIAGNOSTICS_URL_AUTO:\n+      return should_colorize ();\n+    default:\n+      gcc_unreachable ();\n+    }\n+}"}, {"sha": "ce0de459f32cf33aab4373c798a0867096f5944e", "filename": "gcc/diagnostic-url.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic-url.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic-url.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-url.h?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -0,0 +1,36 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_DIAGNOSTIC_URL_H\n+#define GCC_DIAGNOSTIC_URL_H\n+\n+/* Whether to add URLs to diagnostics:\n+   - DIAGNOSTICS_URL_NO: never\n+   - DIAGNOSTICS_URL_YES: always\n+   - DIAGNOSTICS_URL_AUTO: depending on the output stream.  */\n+typedef enum\n+{\n+  DIAGNOSTICS_URL_NO       = 0,\n+  DIAGNOSTICS_URL_YES      = 1,\n+  DIAGNOSTICS_URL_AUTO     = 2\n+} diagnostic_url_rule_t;\n+\n+extern bool diagnostic_urls_enabled_p (diagnostic_url_rule_t);\n+\n+#endif /* ! GCC_DIAGNOSTIC_URL_H */"}, {"sha": "467cc3963e60e6fa40805972014e3a57b4dfa5bf", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"backtrace.h\"\n #include \"diagnostic.h\"\n #include \"diagnostic-color.h\"\n+#include \"diagnostic-url.h\"\n #include \"edit-context.h\"\n #include \"selftest.h\"\n #include \"selftest-diagnostic.h\"\n@@ -246,6 +247,18 @@ diagnostic_color_init (diagnostic_context *context, int value /*= -1 */)\n     = colorize_init ((diagnostic_color_rule_t) value);\n }\n \n+/* Initialize URL support within CONTEXT based on VALUE, handling \"auto\".  */\n+\n+void\n+diagnostic_urls_init (diagnostic_context *context, int value /*= -1 */)\n+{\n+  if (value < 0)\n+    value = DIAGNOSTICS_COLOR_DEFAULT;\n+\n+  context->printer->show_urls\n+    = diagnostic_urls_enabled_p ((diagnostic_url_rule_t) value);\n+}\n+\n /* Do any cleaning up required after the last diagnostic is emitted.  */\n \n void"}, {"sha": "f0ea8e8bd4cc86f4eb9f96d3e1565dc16c93d0e0", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -331,6 +331,7 @@ diagnostic_override_option_index (diagnostic_info *info, int optidx)\n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *, int);\n extern void diagnostic_color_init (diagnostic_context *, int value = -1);\n+extern void diagnostic_urls_init (diagnostic_context *, int value = -1);\n extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *, location_t);\n extern void diagnostic_show_locus (diagnostic_context *,"}, {"sha": "bdbcd95d55979771f2d514c67896d955e843172e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -273,6 +273,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n+-fdiagnostics-urls=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fdiagnostics-format=@r{[}text@r{|}json@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-labels  -fno-diagnostics-show-line-numbers @gol\n@@ -3908,6 +3909,18 @@ SGR substring for highlighting mismatching types within template\n arguments in the C++ frontend.\n @end table\n \n+@item -fdiagnostics-urls[=@var{WHEN}]\n+@opindex fdiagnostics-urls\n+@cindex urls\n+Use escape sequences to embed URLs in diagnostics.  For example, when\n+@option{-fdiagnostics-show-option} emits text showing the command-line\n+option controlling a diagnostic, embed a URL for documentation of that\n+option.\n+\n+@var{WHEN} is @samp{never}, @samp{always}, or @samp{auto}.\n+The default is @samp{auto}, which means to use URL escape sequences only\n+when the standard error is a terminal.\n+\n @item -fno-diagnostics-show-option\n @opindex fno-diagnostics-show-option\n @opindex fdiagnostics-show-option"}, {"sha": "c45a1df656b2b8122f457edeb55db5f44c57b5bf", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -4041,6 +4041,10 @@ driver_handle_option (struct gcc_options *opts,\n       diagnostic_color_init (dc, value);\n       break;\n \n+    case OPT_fdiagnostics_urls_:\n+      diagnostic_urls_init (dc, value);\n+      break;\n+\n     case OPT_fdiagnostics_format_:\n       diagnostic_output_format_init (dc,\n \t\t\t\t     (enum diagnostics_output_format)value);\n@@ -7443,6 +7447,7 @@ driver::global_initializations ()\n \n   diagnostic_initialize (global_dc, 0);\n   diagnostic_color_init (global_dc);\n+  diagnostic_urls_init (global_dc);\n \n #ifdef GCC_DRIVER_HOST_INITIALIZATION\n   /* Perform host dependent initialization when needed.  */"}, {"sha": "b51c2fbc21cb8f9c812ec64c68930052286ba89a", "filename": "gcc/opts-global.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -255,6 +255,7 @@ init_options_once (void)\n      construct their pretty-printers means that all previous settings\n      are overriden.  */\n   diagnostic_color_init (global_dc);\n+  diagnostic_urls_init (global_dc);\n }\n \n /* Decode command-line options to an array, like"}, {"sha": "1070b9de955430e8b224017e15715873421f59ea", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -2474,6 +2474,10 @@ common_handle_option (struct gcc_options *opts,\n       diagnostic_color_init (dc, value);\n       break;\n \n+    case OPT_fdiagnostics_urls_:\n+      diagnostic_urls_init (dc, value);\n+      break;\n+\n     case OPT_fdiagnostics_format_:\n       diagnostic_output_format_init (dc,\n \t\t\t\t     (enum diagnostics_output_format)value);"}, {"sha": "c57a3dbd887cf79102e8ed5654921b6f9029a9fc", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -1579,7 +1579,8 @@ pretty_printer::pretty_printer (int maximum_length)\n     emitted_prefix (),\n     need_newline (),\n     translate_identifiers (true),\n-    show_color ()\n+    show_color (),\n+    show_urls (false)\n {\n   pp_line_cutoff (this) = maximum_length;\n   /* By default, we emit prefixes once per message.  */\n@@ -2028,6 +2029,41 @@ identifier_to_locale (const char *ident)\n   }\n }\n \n+/* Support for encoding URLs.\n+   See egmontkob/Hyperlinks_in_Terminal_Emulators.md\n+   ( https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda ).\n+\n+   > A hyperlink is opened upon encountering an OSC 8 escape sequence with\n+   > the target URI. The syntax is\n+   >\n+   >  OSC 8 ; params ; URI ST\n+   >\n+   > A hyperlink is closed with the same escape sequence, omitting the\n+   > parameters and the URI but keeping the separators:\n+   >\n+   > OSC 8 ; ; ST\n+   >\n+   > OSC (operating system command) is typically ESC ].  */\n+\n+/* If URL-printing is enabled, write an \"open URL\" escape sequence to PP\n+   for the given URL.  */\n+\n+void\n+pp_begin_url (pretty_printer *pp, const char *url)\n+{\n+  if (pp->show_urls)\n+    pp_printf (pp, \"\\33]8;;%s\\33\\\\\", url);\n+}\n+\n+/* If URL-printing is enabled, write a \"close URL\" escape sequence to PP.  */\n+\n+void\n+pp_end_url (pretty_printer *pp)\n+{\n+  if (pp->show_urls)\n+    pp_string (pp, \"\\33]8;;\\33\\\\\");\n+}\n+\n #if CHECKING_P\n \n namespace selftest {\n@@ -2312,6 +2348,32 @@ test_prefixes_and_wrapping ()\n \n }\n \n+/* Verify that URL-printing works as expected.  */\n+\n+void\n+test_urls ()\n+{\n+  {\n+    pretty_printer pp;\n+    pp.show_urls = false;\n+    pp_begin_url (&pp, \"http://example.com\");\n+    pp_string (&pp, \"This is a link\");\n+    pp_end_url (&pp);\n+    ASSERT_STREQ (\"This is a link\",\n+\t\t  pp_formatted_text (&pp));\n+  }\n+\n+  {\n+    pretty_printer pp;\n+    pp.show_urls = true;\n+    pp_begin_url (&pp, \"http://example.com\");\n+    pp_string (&pp, \"This is a link\");\n+    pp_end_url (&pp);\n+    ASSERT_STREQ (\"\\33]8;;http://example.com\\33\\\\This is a link\\33]8;;\\33\\\\\",\n+\t\t  pp_formatted_text (&pp));\n+  }\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -2320,6 +2382,7 @@ pretty_print_c_tests ()\n   test_basic_printing ();\n   test_pp_format ();\n   test_prefixes_and_wrapping ();\n+  test_urls ();\n }\n \n } // namespace selftest"}, {"sha": "c73fc308d509fc375208a59f785b47ec162e7d00", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -273,6 +273,9 @@ class pretty_printer\n \n   /* Nonzero means that text should be colorized.  */\n   bool show_color;\n+\n+  /* Nonzero means that URLs should be emitted.  */\n+  bool show_urls;\n };\n \n static inline const char *\n@@ -393,6 +396,9 @@ extern void pp_maybe_space (pretty_printer *);\n extern void pp_begin_quote (pretty_printer *, bool);\n extern void pp_end_quote (pretty_printer *, bool);\n \n+extern void pp_begin_url (pretty_printer *pp, const char *url);\n+extern void pp_end_url (pretty_printer *pp);\n+\n /* Switch into verbatim mode and return the old mode.  */\n static inline pp_wrapping_mode_t\n pp_set_verbatim_wrapping_ (pretty_printer *pp)"}, {"sha": "b6e9d88aa40c19f7aa7a6e61e0270763da4b61f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -1,3 +1,8 @@\n+2019-10-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87488\n+\t* lib/prune.exp (TEST_ALWAYS_FLAGS): Add -fdiagnostics-urls=never.\n+\n 2019-10-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/92022"}, {"sha": "a9beef48ecbbf2d7e19e8eddacc3e847c06ebc32", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26082357676a3c3843595dfe88a6c682b56e334/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=d26082357676a3c3843595dfe88a6c682b56e334", "patch": "@@ -21,7 +21,7 @@ load_lib multiline.exp\n if ![info exists TEST_ALWAYS_FLAGS] {\n     set TEST_ALWAYS_FLAGS \"\"\n }\n-set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-color=never $TEST_ALWAYS_FLAGS\"\n+set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-color=never  -fdiagnostics-urls=never $TEST_ALWAYS_FLAGS\"\n \n proc prune_gcc_output { text } {\n     global srcdir"}]}