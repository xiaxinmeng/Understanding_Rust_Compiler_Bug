{"sha": "ad03daf005bc47def67da627decbbdfc037e9522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwM2RhZjAwNWJjNDdkZWY2N2RhNjI3ZGVjYmJkZmMwMzdlOTUyMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-04-30T08:57:04Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-30T08:57:04Z"}, "message": "2003-04-30  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/regex/Matcher.java\n\t(pattern): New member variable.\n\t(appendReplacement): New method.\n\t(appendTail): New method.\n\t(end): New method.\n\t(find): New method.\n\t(group): New method.\n\t(replaceFirst): Added documentation.\n\t(replaceAll): Added documentation.\n\t(groupCount): New method.\n\t(lookingAt): New method.\n\t(matches): New method.\n\t(reset): New method.\n\t(start): New method.\n\t* java/util/regex/Pattern.java\n\t(serialVersionUID): New constant.\n\t(CANON_EQ): New constant.\n\t(CASE_INSENSITIVE): New constant.\n\t(COMMENTS): New constant.\n\t(DOTALL): New constant.\n\t(MULTILINE): New constant.\n\t(UNICODE_CASE): New constant.\n\t(UNIX_LINES): New constant.\n\t(regex): New member variable.\n\t(flags): New member variable.\n\t(Pattern): New method.\n\t(compile): Documentation added.\n\t(flags): New method.\n\t(matches): Documentation added.\n\t(matcher): Documentation added.\n\t(split): Documentation added.\n\t(pattern): New method.\n\nFrom-SVN: r66285", "tree": {"sha": "97f0d4af5f0fe9ba61aadf5a40954b468a0f9581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f0d4af5f0fe9ba61aadf5a40954b468a0f9581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad03daf005bc47def67da627decbbdfc037e9522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad03daf005bc47def67da627decbbdfc037e9522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad03daf005bc47def67da627decbbdfc037e9522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad03daf005bc47def67da627decbbdfc037e9522/comments", "author": null, "committer": null, "parents": [{"sha": "859a3d9a1da91ee937162116fee06f79eaf4edf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859a3d9a1da91ee937162116fee06f79eaf4edf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859a3d9a1da91ee937162116fee06f79eaf4edf8"}], "stats": {"total": 322, "additions": 309, "deletions": 13}, "files": [{"sha": "1805cfcf18b8640c6ce828f7d9ced2b8dd6b19a3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ad03daf005bc47def67da627decbbdfc037e9522", "patch": "@@ -1,3 +1,38 @@\n+2003-04-30  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/regex/Matcher.java\n+\t(pattern): New member variable.\n+\t(appendReplacement): New method.\n+\t(appendTail): New method.\n+\t(end): New method.\n+\t(find): New method.\n+\t(group): New method.\n+\t(replaceFirst): Added documentation.\n+\t(replaceAll): Added documentation.\n+\t(groupCount): New method.\n+\t(lookingAt): New method.\n+\t(matches): New method.\n+\t(reset): New method.\n+\t(start): New method.\n+\t* java/util/regex/Pattern.java\n+\t(serialVersionUID): New constant.\n+\t(CANON_EQ): New constant.\n+\t(CASE_INSENSITIVE): New constant.\n+\t(COMMENTS): New constant.\n+\t(DOTALL): New constant.\n+\t(MULTILINE): New constant.\n+\t(UNICODE_CASE): New constant.\n+\t(UNIX_LINES): New constant.\n+\t(regex): New member variable.\n+\t(flags): New member variable.\n+\t(Pattern): New method.\n+\t(compile): Documentation added.\n+\t(flags): New method.\n+\t(matches): Documentation added.\n+\t(matcher): Documentation added.\n+\t(split): Documentation added.\n+\t(pattern): New method.\n+\n 2003-04-30  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/security/Engine.java,"}, {"sha": "ef65557b66c8a5486dcc3c0c77cf8c221ce06edb", "filename": "libjava/java/util/regex/Matcher.java", "status": "modified", "additions": 176, "deletions": 5, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FMatcher.java?ref=ad03daf005bc47def67da627decbbdfc037e9522", "patch": "@@ -35,17 +35,188 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-// Stub class until java.util.regex is implemented.\n+\n package java.util.regex;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public class Matcher\n {\n-  public String replaceFirst(String replacement)\n+  private Pattern pattern;\n+  \n+  /**\n+   * @param sb The target string buffer\n+   * @param replacement The replacement string\n+   *\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   * @exception IndexOutOfBoundsException If the replacement string refers\n+   * to a capturing group that does not exist in the pattern\n+   */\n+  public Matcher appendReplacement (StringBuffer sb, String replacement)\n+    throws IllegalStateException\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+\n+  /**\n+   * @param sb The target string buffer\n+   */\n+  public StringBuffer appendTail (StringBuffer sb)\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+ \n+  /**\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   */\n+  public int end ()\n+    throws IllegalStateException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param group The index of a capturing group in this matcher's pattern\n+   *\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   * @exception IndexOutOfBoundsException If the replacement string refers\n+   * to a capturing group that does not exist in the pattern\n+   */\n+  public int end (int group)\n+    throws IllegalStateException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+ \n+  public boolean find ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param start The index to start the new pattern matching\n+   *\n+   * @exception IndexOutOfBoundsException If the replacement string refers\n+   * to a capturing group that does not exist in the pattern\n+   */\n+  public boolean find (int start)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+ \n+  /**\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   */\n+  public String group ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param group The index of a capturing group in this matcher's pattern\n+   *\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   * @exception IndexOutOfBoundsException If the replacement string refers\n+   * to a capturing group that does not exist in the pattern\n+   */\n+  public String group (int group)\n+    throws IllegalStateException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  /**\n+   * @param replacement The replacement string\n+   */\n+  public String replaceFirst (String replacement)\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error (\"Not implemented\");\n   }\n-  public String replaceAll(String replacement)\n+\n+  /**\n+   * @param replacement The replacement string\n+   */\n+  public String replaceAll (String replacement)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  public int groupCount ()\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+ \n+  public boolean lookingAt ()\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+  \n+  /**\n+   * Attempts to match the entire input sequence against the pattern. \n+   *\n+   * If the match succeeds then more information can be obtained via the\n+   * start, end, and group methods.\n+   *\n+   * @see #start\n+   * @see #end\n+   * @see #group\n+   */\n+  public boolean matches ()\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+  \n+  /**\n+   * Returns the Pattern that is interpreted by this Matcher\n+   */\n+  public Pattern pattern ()\n+  {\n+    return pattern;\n+  }\n+  \n+  public Matcher reset ()\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param input The new input character sequence\n+   */\n+  public Matcher reset (CharSequence input)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param group The index of a capturing group in this matcher's pattern\n+   *\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   */\n+  public int start ()\n+    throws IllegalStateException\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+\n+  /**\n+   * @param group The index of a capturing group in this matcher's pattern\n+   *\n+   * @exception IllegalStateException If no match has yet been attempted,\n+   * or if the previous match operation failed\n+   * @exception IndexOutOfBoundsException If the replacement string refers\n+   * to a capturing group that does not exist in the pattern\n+   */\n+  public int start (int group)\n+    throws IllegalStateException\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error(\"Not implemented\");\n   }\n }"}, {"sha": "7d99b92bb82e9936cbfe14f293d31bfa705c23a5", "filename": "libjava/java/util/regex/Pattern.java", "status": "modified", "additions": 98, "deletions": 8, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad03daf005bc47def67da627decbbdfc037e9522/libjava%2Fjava%2Futil%2Fregex%2FPattern.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fregex%2FPattern.java?ref=ad03daf005bc47def67da627decbbdfc037e9522", "patch": "@@ -40,22 +40,112 @@\n \n import java.io.Serializable;\n \n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n public class Pattern implements Serializable\n {\n-  public static Pattern compile(String regex)\n+  private static final long serialVersionUID = 5073258162644648461L;\n+  \n+  public static final int CANON_EQ = 128;\n+  public static final int CASE_INSENSITIVE = 2;\n+  public static final int COMMENTS = 4;\n+  public static final int DOTALL = 32;\n+  public static final int MULTILINE = 8;\n+  public static final int UNICODE_CASE = 64;\n+  public static final int UNIX_LINES = 1;\n+  \n+  private String regex;\n+  private int flags;\n+\n+  private Pattern (String regex)\n+    throws PatternSyntaxException\n+  {\n+    this (regex, 0);\n+  }\n+\n+  private Pattern (String regex, int flags)\n+    throws PatternSyntaxException\n+  {\n+    this.regex = regex;\n+    this.flags = flags;\n+\n+    throw new Error (\"Not implemented\");\n+  }\n+ \n+  /**\n+   * @param regex The regular expression\n+   *\n+   * @exception PatternSyntaxException If the expression's syntax is invalid\n+   */\n+  public static Pattern compile (String regex)\n+    throws PatternSyntaxException\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param regex The regular expression\n+   * @param flags The match flags, a bit mask\n+   *\n+   * @exception PatternSyntaxException If the expression's syntax is invalid\n+   * @exception IllegalArgumentException If bit values other than those\n+   * corresponding to the defined match flags are set in flags\n+   */\n+  public static Pattern compile (String regex, int flags)\n+    throws PatternSyntaxException\n+  {\n+    // FIXME: check which flags are really accepted\n+    if ((flags & ~0xEF) != 0)\n+      throw new IllegalArgumentException ();\n+    \n+    return new Pattern (regex, flags); \n+  }\n+  \n+  public int flags ()\n+  {\n+    return this.flags;\n+  }\n+  \n+  /**\n+   * @param regex The regular expression\n+   * @param input The character sequence to be matched\n+   *\n+   * @exception PatternSyntaxException If the expression's syntax is invalid\n+   */\n+  public static boolean matches (String regex, CharSequence input) \n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+  \n+  /**\n+   * @param input The character sequence to be matched\n+   */\n+  public Matcher matcher (CharSequence input)\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error (\"Not implemented\");\n   }\n-  public static boolean matches(String regex, CharSequence input) \n+  \n+  /**\n+   * @param input The character sequence to be matched\n+   */\n+  public String[] split (CharSequence input)\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error (\"Not implemented\");\n   }\n-  public Matcher matcher(CharSequence input)\n+  \n+  /**\n+   * @param input The character sequence to be matched\n+   * @param limit The result threshold\n+   */\n+  public String[] split (CharSequence input, int limit)\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error (\"Not implemented\");\n   }\n-  public String[] split(CharSequence input, int limit)\n+  \n+  public String pattern ()\n   {\n-    throw new InternalError(\"Not implemented yet\");\n+    throw new Error (\"Not implemented\");\n   }\n }"}]}