{"sha": "1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRlODBiMGU2OWRmY2E1ZDZjYjhjMGJkZDczOTg2OTlhNGIwNTU1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-07T17:48:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-07T17:48:46Z"}, "message": "re PR rtl-optimization/19683 (MIPS wrong-code for 64-bit multiply.)\n\n\tPR rtl-optimization/19683\n\t* reload1.c (choose_reload_regs): Pass the number of bits, not the\n\tnumber of bytes, to smallest_int_for_mode.  Fix arguments to\n\tREG_CANNOT_CHANGE_MODE_P.\n\nFrom-SVN: r96033", "tree": {"sha": "ea4a59df52b4f25a495d4dd6f14323f494f44138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea4a59df52b4f25a495d4dd6f14323f494f44138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/comments", "author": null, "committer": null, "parents": [{"sha": "21b2340908ecd93806e3928ad3ceff208b2e0573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b2340908ecd93806e3928ad3ceff208b2e0573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b2340908ecd93806e3928ad3ceff208b2e0573"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "86bc853c1c032c540ace3b852e97b4006c0da2fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "patch": "@@ -1,3 +1,10 @@\n+2005-03-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR rtl-optimization/19683\n+\t* reload1.c (choose_reload_regs): Pass the number of bits, not the\n+\tnumber of bytes, to smallest_int_for_mode.  Fix arguments to\n+\tREG_CANNOT_CHANGE_MODE_P.\n+\n 2005-03-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* reorg.c (relax_delay_slots): Check that the jump is"}, {"sha": "31407b3d96fa79370abbeea7ba15b9236e8d733b", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "patch": "@@ -5411,19 +5411,18 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t    need_mode = mode;\n \t\t  else\n \t\t    need_mode\n-\t\t      = smallest_mode_for_size (GET_MODE_SIZE (mode) + byte,\n+\t\t      = smallest_mode_for_size (GET_MODE_BITSIZE (mode)\n+\t\t\t\t\t\t+ byte * BITS_PER_UNIT,\n \t\t\t\t\t\tGET_MODE_CLASS (mode));\n \n-\t\t  if (\n-#ifdef CANNOT_CHANGE_MODE_CLASS\n-\t\t      (!REG_CANNOT_CHANGE_MODE_P (i, GET_MODE (last_reg),\n-\t\t\t\t\t\t  need_mode)\n-\t\t       &&\n-#endif\n-\t\t      (GET_MODE_SIZE (GET_MODE (last_reg))\n+\t\t  if ((GET_MODE_SIZE (GET_MODE (last_reg))\n \t\t       >= GET_MODE_SIZE (need_mode))\n #ifdef CANNOT_CHANGE_MODE_CLASS\n-\t\t      )\n+\t\t      /* Verify that the register in \"i\" can be obtained\n+\t\t\t from LAST_REG.  */\n+\t\t      && !REG_CANNOT_CHANGE_MODE_P (REGNO (last_reg),\n+\t\t\t\t\t\t    GET_MODE (last_reg),\n+\t\t\t\t\t\t    mode)\n #endif\n \t\t      && reg_reloaded_contents[i] == regno\n \t\t      && TEST_HARD_REG_BIT (reg_reloaded_valid, i)"}, {"sha": "3b330421f4bf47c47d79805c6044036fc8043d2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "patch": "@@ -1,3 +1,7 @@\n+2005-03-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/torture/pr19683-1.c: New test.\n+\n 2005-03-06  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.dg/g77/19990313-1.f: Replace tabs with spaces."}, {"sha": "4015fb981e992da4a7008ab5b1c070c764d0fa33", "filename": "gcc/testsuite/gcc.dg/torture/pr19683-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de80b0e69dfca5d6cb8c0bdd7398699a4b05557/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c?ref=1de80b0e69dfca5d6cb8c0bdd7398699a4b05557", "patch": "@@ -0,0 +1,42 @@\n+/* From PR rtl-optimization/19683.  On little-endian MIPS targets,\n+   reload would incorrectly inherit the high part of the multiplication\n+   result.  */\n+/* { dg-do run { target mips*-*-* } } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define REPEAT10(X, Y)\t\t\t\t\t\\\n+  X(Y##0); X(Y##1); X(Y##2); X(Y##3); X(Y##4);\t\t\\\n+  X(Y##5); X(Y##6); X(Y##7); X(Y##8); X(Y##9)\n+\n+#define REPEAT30(X) REPEAT10 (X, 0); REPEAT10 (X, 1); REPEAT10 (X, 2)\n+#define IN(X) unsigned int x##X = ptr[0]\n+#define OUT(X) ptr[0] = x##X\n+\n+union u { unsigned long long ll; unsigned int i[2]; };\n+\n+unsigned int\n+foo (volatile unsigned int *ptr)\n+{\n+  union u u;\n+  int result;\n+\n+  u.ll = (unsigned long long) ptr[0] * ptr[0];\n+  REPEAT30 (IN);\n+  REPEAT30 (OUT);\n+  asm (\"#\" : \"=l\" (result) : \"l\" (u.i[1]));\n+  return result;\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned int array[] = { 1000 * 1000 * 1000 };\n+  union u u;\n+\n+  u.ll = (unsigned long long) array[0] * array[0];\n+  if (foo (array) != u.i[1])\n+    abort ();\n+  exit (0);\n+}"}]}