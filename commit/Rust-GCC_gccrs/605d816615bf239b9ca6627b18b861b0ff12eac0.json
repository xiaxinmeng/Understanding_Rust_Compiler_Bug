{"sha": "605d816615bf239b9ca6627b18b861b0ff12eac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1ZDgxNjYxNWJmMjM5YjljYTY2MjdiMThiODYxYjBmZjEyZWFjMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-12-12T10:02:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:02:00Z"}, "message": "[Ada] Constraint is ignored on constrained access record component\n\n2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Constrain_Access): Remove obsolete comments and\n\twarning concerning component types of an access type whose\n\tdesignated type is a constrained record type. (Such constraints\n\twere previously ignored). Set scope of itype for component to\n\tthe scope of the enclosing record.\n\t* sem_ch4.adb: Remove call to Set_Ekind.\n\t* sem_util.adb (Build_Actual_Subtype_Of_Component): Handle\n\tcomponents whose type is an access to a constrained\n\tdiscriminant, where the constraints may be given by the\n\tdiscriminants of the enclosing type. New subprogram\n\tBuild_Access_Record_Constraint.\n\ngcc/testsuite/\n\n\t* gnat.dg/warn24.adb: Remove expected warning.\n\nFrom-SVN: r279281", "tree": {"sha": "32b09539240211db1c79af5ed916215b6101e26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b09539240211db1c79af5ed916215b6101e26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605d816615bf239b9ca6627b18b861b0ff12eac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d816615bf239b9ca6627b18b861b0ff12eac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605d816615bf239b9ca6627b18b861b0ff12eac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d816615bf239b9ca6627b18b861b0ff12eac0/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87b66149a315e0e0bc80a1075ce6da615fe55199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b66149a315e0e0bc80a1075ce6da615fe55199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b66149a315e0e0bc80a1075ce6da615fe55199"}], "stats": {"total": 162, "additions": 144, "deletions": 18}, "files": [{"sha": "c71233d6cbf610e617fb984c0427faedb4190ae6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -1,3 +1,17 @@\n+2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Access): Remove obsolete comments and\n+\twarning concerning component types of an access type whose\n+\tdesignated type is a constrained record type. (Such constraints\n+\twere previously ignored). Set scope of itype for component to\n+\tthe scope of the enclosing record.\n+\t* sem_ch4.adb: Remove call to Set_Ekind.\n+\t* sem_util.adb (Build_Actual_Subtype_Of_Component): Handle\n+\tcomponents whose type is an access to a constrained\n+\tdiscriminant, where the constraints may be given by the\n+\tdiscriminants of the enclosing type. New subprogram\n+\tBuild_Access_Record_Constraint.\n+\n 2019-12-12  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call_Helper): Added null case for"}, {"sha": "bcee77978ace42c8daad2e0478f353bb3dd60655", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -12971,29 +12971,39 @@ package body Sem_Ch3 is\n               or else Is_Incomplete_Or_Private_Type (Desig_Type))\n         and then not Is_Constrained (Desig_Type)\n       then\n-         --  ??? The following code is a temporary bypass to ignore a\n-         --  discriminant constraint on access type if it is constraining\n-         --  the current record. Avoid creating the implicit subtype of the\n-         --  record we are currently compiling since right now, we cannot\n-         --  handle these. For now, just return the access type itself.\n+         --  If this is a constrained access definition for a record\n+         --  component, we leave the type as an unconstrained access,\n+         --  and mark the component so that its actual type is build\n+         --  at a point of use (e.g an assignment statement). THis is\n+         --  handled in sem_util, Build_Actual_Subtype_Of_Component.\n \n          if Desig_Type = Current_Scope\n            and then No (Def_Id)\n          then\n-            Error_Msg_Warn := SPARK_Mode /= On;\n-            Error_Msg_N (\"<<constraint is ignored on component that is \"\n-                         & \"access to current record\", S);\n-\n+            Desig_Subtype :=\n+              Create_Itype\n+                (E_Void, Related_Nod, Scope_Id => Scope (Desig_Type));\n             Set_Ekind (Desig_Subtype, E_Record_Subtype);\n             Def_Id := Entity (Subtype_Mark (S));\n \n+            --  We indicate that the component has a pet-object\n+            --  constraint for uniform treatment at a point of use,\n+            --  even though the constraint may be independent of\n+            --  discriminants of enclosing type.\n+\n+            if Nkind (Related_Nod) = N_Component_Declaration then\n+               Set_Has_Per_Object_Constraint\n+                 (Defining_Identifier (Related_Nod));\n+            end if;\n+\n             --  This call added to ensure that the constraint is analyzed\n             --  (needed for a B test). Note that we still return early from\n-            --  this procedure to avoid recursive processing. ???\n+            --  this procedure to avoid recursive processing.\n \n             Constrain_Discriminated_Type\n               (Desig_Subtype, S, Related_Nod, For_Access => True);\n             return;\n+\n          end if;\n \n          --  Enforce rule that the constraint is illegal if there is an"}, {"sha": "08905393795c33a4b9b9e19afddd47eeb8f6b8e3", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -4812,16 +4812,15 @@ package body Sem_Ch4 is\n                      Set_Etype (N, Etype (Comp));\n \n                   else\n-                     --  Component type depends on discriminants. Enter the\n-                     --  main attributes of the subtype.\n+                     --  If discriminants were present in the component\n+                     --  declaration, they have been replaced by the\n+                     --  actual values in the prefix object.\n \n                      declare\n                         Subt : constant Entity_Id :=\n                                  Defining_Identifier (Act_Decl);\n-\n                      begin\n                         Set_Etype (Subt, Base_Type (Etype (Comp)));\n-                        Set_Ekind (Subt, Ekind (Etype (Comp)));\n                         Set_Etype (N, Subt);\n                      end;\n                   end if;"}, {"sha": "5d5c52014b8af17f6235dbc85725061454b9518c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -1187,18 +1187,28 @@ package body Sem_Util is\n    is\n       Loc       : constant Source_Ptr := Sloc (N);\n       P         : constant Node_Id    := Prefix (N);\n+\n       D         : Elmt_Id;\n       Id        : Node_Id;\n       Index_Typ : Entity_Id;\n+      Sel       : Entity_Id  := Empty;\n \n       Desig_Typ : Entity_Id;\n       --  This is either a copy of T, or if T is an access type, then it is\n       --  the directly designated type of this access type.\n \n+      function Build_Access_Record_Constraint (C : List_Id) return List_Id;\n+      --  If the record component is a constrained access to the current\n+      --  record, the subtype has not been constructed during analysis of\n+      --  the enclosing record type (see Analyze_Access). In that case build\n+      --  a constrainted access subtype after replacing references to the\n+      --  enclosing discriminants by the corresponding discriminant values\n+      --  of the prefix.\n+\n       function Build_Actual_Array_Constraint return List_Id;\n       --  If one or more of the bounds of the component depends on\n       --  discriminants, build  actual constraint using the discriminants\n-      --  of the prefix.\n+      --  of the prefx, as above.\n \n       function Build_Actual_Record_Constraint return List_Id;\n       --  Similar to previous one, for discriminated components constrained\n@@ -1286,10 +1296,53 @@ package body Sem_Util is\n          return Constraints;\n       end Build_Actual_Record_Constraint;\n \n+      ------------------------------------\n+      -- Build_Access_Record_Constraint --\n+      ------------------------------------\n+\n+      function Build_Access_Record_Constraint (C : List_Id) return List_Id is\n+         Constraints : constant List_Id := New_List;\n+         D           : Node_Id;\n+         D_Val       : Node_Id;\n+\n+      begin\n+         --  Retrieve the constraint from the compomnent declaration, because\n+         --  the component subtype has not been constructed and the component\n+         --  type is an unconstrained access.\n+\n+         D := First (C);\n+         while Present (D) loop\n+            if Nkind (D) = N_Discriminant_Association\n+              and then Denotes_Discriminant (Expression (D))\n+            then\n+               D_Val := New_Copy_Tree (D);\n+               Set_Expression (D_Val,\n+                 Make_Selected_Component (Loc,\n+                   Prefix => New_Copy_Tree (P),\n+                  Selector_Name =>\n+                     New_Occurrence_Of (Entity (Expression (D)), Loc)));\n+\n+            elsif Denotes_Discriminant (D) then\n+               D_Val := Make_Selected_Component (Loc,\n+                 Prefix => New_Copy_Tree (P),\n+                Selector_Name => New_Occurrence_Of (Entity (D), Loc));\n+\n+            else\n+               D_Val := New_Copy_Tree (D);\n+            end if;\n+\n+            Append (D_Val, Constraints);\n+            Next (D);\n+         end loop;\n+\n+         return Constraints;\n+      end Build_Access_Record_Constraint;\n+\n    --  Start of processing for Build_Actual_Subtype_Of_Component\n \n    begin\n-      --  Why the test for Spec_Expression mode here???\n+      --  The subtype does not need to be created for a selected component\n+      --  in a Spec_Expression,\n \n       if In_Spec_Expression then\n          return Empty;\n@@ -1314,19 +1367,33 @@ package body Sem_Util is\n                Remove_Side_Effects (P);\n                return Build_Actual_Subtype (T, N);\n             end if;\n+\n          else\n             return Empty;\n          end if;\n+\n+      elsif Nkind (N) = N_Selected_Component then\n+         --  THe entity of the selected compomnent allows us to retrieve\n+         --  the original constraint from its component declaration.\n+\n+         Sel := Entity (Selector_Name (N));\n+         if Nkind (Parent (Sel)) /= N_Component_Declaration then\n+            return Empty;\n+         end if;\n       end if;\n \n-      if Ekind (T) = E_Access_Subtype then\n+      if Is_Access_Type (T) then\n          Desig_Typ := Designated_Type (T);\n+\n       else\n          Desig_Typ := T;\n       end if;\n \n       if Ekind (Desig_Typ) = E_Array_Subtype then\n          Id := First_Index (Desig_Typ);\n+\n+         --  Check whether an index bound is constrained by a discriminant.\n+\n          while Present (Id) loop\n             Index_Typ := Underlying_Type (Etype (Id));\n \n@@ -1345,6 +1412,7 @@ package body Sem_Util is\n \n       elsif Is_Composite_Type (Desig_Typ)\n         and then Has_Discriminants (Desig_Typ)\n+        and then not Is_Empty_Elmt_List (Discriminant_Constraint (Desig_Typ))\n         and then not Has_Unknown_Discriminants (Desig_Typ)\n       then\n          if Is_Private_Type (Desig_Typ)\n@@ -1364,6 +1432,37 @@ package body Sem_Util is\n \n             Next_Elmt (D);\n          end loop;\n+\n+      --  Special processing for an access record component that is\n+      --  the target of an assignment. If the designated type is an\n+      --  unconstrained discriminated record we create its actual\n+      --  subtype now.\n+\n+      elsif Ekind (T) = E_Access_Type\n+        and then Present (Sel)\n+        and then Has_Per_Object_Constraint (Sel)\n+        and then Nkind (Parent (N)) = N_Assignment_Statement\n+        and then N = Name (Parent (N))\n+        --  and then not Inside_Init_Proc\n+        --  and then Has_Discriminants (Desig_Typ)\n+        --  and then not Is_Constrained (Desig_Typ)\n+      then\n+         declare\n+            S_Indic : constant Node_Id :=\n+              (Subtype_Indication\n+                    (Component_Definition (Parent (Sel))));\n+            Discs : List_Id;\n+         begin\n+            if Nkind (S_Indic) = N_Subtype_Indication then\n+               Discs := Constraints (Constraint (S_Indic));\n+\n+               Remove_Side_Effects (P);\n+               return Build_Component_Subtype\n+                  (Build_Access_Record_Constraint (Discs), Loc, T);\n+            else\n+               return Empty;\n+            end if;\n+         end;\n       end if;\n \n       --  If none of the above, the actual and nominal subtypes are the same"}, {"sha": "cde7d7279fe985cdd90780605f3bdf7b27cf1121", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -1,3 +1,7 @@\n+2019-12-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/warn24.adb: Remove expected warning.\n+\n 2019-12-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gnat.dg/subp_inst_pkg.adb: Remove implicit anonymous access"}, {"sha": "c2a9e3aeb7361d147cb61825097e7898ac6c1cbb", "filename": "gcc/testsuite/gnat.dg/warn24.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn24.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d816615bf239b9ca6627b18b861b0ff12eac0/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn24.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn24.adb?ref=605d816615bf239b9ca6627b18b861b0ff12eac0", "patch": "@@ -6,7 +6,7 @@ procedure Warn24 is\n    type List_Acc is access List_D;\n \n    type List_D (D : Boolean) is record\n-      Next : List_Acc (D);  --  { dg-warning \"constraint is ignored on component that is access to current record\" }\n+      Next : List_Acc (D);\n    end record;\n \n    X : List_D (True);"}]}