{"sha": "3477e0b2473d95d82a128d21aae44db0d353203c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3N2UwYjI0NzNkOTVkODJhMTI4ZDIxYWFlNDRkYjBkMzUzMjAzYw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-12-28T23:38:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:25Z"}, "message": "[Ada] Replace calls to RTE with Is_RTE where possible\n\ngcc/ada/\n\n\t* checks.adb, exp_aggr.adb, exp_attr.adb, exp_ch6.adb,\n\texp_disp.adb, exp_imgv.adb, exp_util.adb, sem_attr.adb,\n\tsem_ch13.adb, sem_ch8.adb, sem_eval.adb, sem_scil.adb,\n\tsem_util.adb: Replace calls to RTE with Is_RTE.", "tree": {"sha": "d90591346282accc256714f5f025c18c4a80dcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90591346282accc256714f5f025c18c4a80dcd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3477e0b2473d95d82a128d21aae44db0d353203c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3477e0b2473d95d82a128d21aae44db0d353203c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3477e0b2473d95d82a128d21aae44db0d353203c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3477e0b2473d95d82a128d21aae44db0d353203c/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e54d69b665d434bc3d74c0f8ebb2993a5539ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e54d69b665d434bc3d74c0f8ebb2993a5539ffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e54d69b665d434bc3d74c0f8ebb2993a5539ffd"}], "stats": {"total": 123, "additions": 51, "deletions": 72}, "files": [{"sha": "23c4786bc9fb556cc6902b74565925e590f6fbb1", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -552,9 +552,7 @@ package body Checks is\n \n       if Tagged_Type_Expansion\n         and then Present (Etype (P))\n-        and then RTU_Loaded (Ada_Tags)\n-        and then RTE_Available (RE_Offset_To_Top_Ptr)\n-        and then Etype (P) = RTE (RE_Offset_To_Top_Ptr)\n+        and then Is_RTE (Etype (P), RE_Offset_To_Top_Ptr)\n       then\n          return;\n       end if;"}, {"sha": "dee4a9c9fd520149020eecc9f2a3ff571ec04c79", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -8678,30 +8678,25 @@ package body Exp_Aggr is\n    begin\n       return Building_Static_Dispatch_Tables\n         and then Tagged_Type_Expansion\n-        and then RTU_Loaded (Ada_Tags)\n \n          --  Avoid circularity when rebuilding the compiler\n \n-        and then Cunit_Entity (Get_Source_Unit (N)) /= RTU_Entity (Ada_Tags)\n-        and then (Typ = RTE (RE_Dispatch_Table_Wrapper)\n+        and then not Is_RTU (Cunit_Entity (Get_Source_Unit (N)), Ada_Tags)\n+        and then (Is_RTE (Typ, RE_Dispatch_Table_Wrapper)\n                     or else\n-                  Typ = RTE (RE_Address_Array)\n+                  Is_RTE (Typ, RE_Address_Array)\n                     or else\n-                  Typ = RTE (RE_Type_Specific_Data)\n+                  Is_RTE (Typ, RE_Type_Specific_Data)\n                     or else\n-                  Typ = RTE (RE_Tag_Table)\n+                  Is_RTE (Typ, RE_Tag_Table)\n                     or else\n-                  (RTE_Available (RE_Object_Specific_Data)\n-                     and then Typ = RTE (RE_Object_Specific_Data))\n+                  Is_RTE (Typ, RE_Object_Specific_Data)\n                     or else\n-                  (RTE_Available (RE_Interface_Data)\n-                     and then Typ = RTE (RE_Interface_Data))\n+                  Is_RTE (Typ, RE_Interface_Data)\n                     or else\n-                  (RTE_Available (RE_Interfaces_Array)\n-                     and then Typ = RTE (RE_Interfaces_Array))\n+                  Is_RTE (Typ, RE_Interfaces_Array)\n                     or else\n-                  (RTE_Available (RE_Interface_Data_Element)\n-                     and then Typ = RTE (RE_Interface_Data_Element)));\n+                  Is_RTE (Typ, RE_Interface_Data_Element));\n    end Is_Static_Dispatch_Table_Aggregate;\n \n    -----------------------------"}, {"sha": "3103a3dbbd7444e3a0482795e082ce3b1a19adda", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -2150,7 +2150,7 @@ package body Exp_Attr is\n                --  the node with the type imposed by the context.\n \n                if Nkind (Parent (N)) = N_Unchecked_Type_Conversion\n-                 and then Etype (Parent (N)) = RTE (RE_Prim_Ptr)\n+                 and then Is_RTE (Etype (Parent (N)), RE_Prim_Ptr)\n                then\n                   Set_Etype (N, RTE (RE_Prim_Ptr));\n "}, {"sha": "9dad84b24458798af4b608f49c7dc11b50ca5168", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -10010,8 +10010,6 @@ package body Exp_Ch6 is\n          elsif Nkind (Expr) = N_Function_Call\n            and then Nkind (Name (Expr)) in N_Has_Entity\n            and then Present (Entity (Name (Expr)))\n-           and then RTU_Loaded (Ada_Tags)\n-           and then RTE_Available (RE_Displace)\n            and then Is_RTE (Entity (Name (Expr)), RE_Displace)\n          then\n             Has_Pointer_Displacement := True;"}, {"sha": "5ac6273e65d99d59661ae3e9f4adf7e30db76d19", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -161,9 +161,8 @@ package body Exp_Disp is\n       --  This capability of dispatching directly by tag is also needed by the\n       --  implementation of AI-260 (for the generic dispatching constructors).\n \n-      if Ctrl_Typ = RTE (RE_Tag)\n-        or else (RTE_Available (RE_Interface_Tag)\n-                  and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+      if Is_RTE (Ctrl_Typ, RE_Tag)\n+        or else Is_RTE (Ctrl_Typ, RE_Interface_Tag)\n       then\n          CW_Typ := Class_Wide_Type (Find_Dispatching_Type (Subp));\n \n@@ -527,8 +526,7 @@ package body Exp_Disp is\n              and then Is_Tag (Entity (Selector_Name (Expr))))\n            or else\n            (Nkind (Expr) = N_Function_Call\n-             and then RTE_Available (RE_Displace)\n-             and then Entity (Name (Expr)) = RTE (RE_Displace))));\n+             and then Is_RTE (Entity (Name (Expr)), RE_Displace))));\n \n       Anon_Type := Create_Itype (E_Anonymous_Access_Type, Expr);\n       Set_Directly_Designated_Type (Anon_Type, Typ);\n@@ -939,9 +937,8 @@ package body Exp_Disp is\n       --  This capability of dispatching directly by tag is also needed by the\n       --  implementation of AI-260 (for the generic dispatching constructors).\n \n-      if Ctrl_Typ = RTE (RE_Tag)\n-        or else (RTE_Available (RE_Interface_Tag)\n-                  and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+      if Is_RTE (Ctrl_Typ, RE_Tag)\n+        or else Is_RTE (Ctrl_Typ, RE_Interface_Tag)\n       then\n          CW_Typ := Class_Wide_Type (Find_Dispatching_Type (Subp));\n \n@@ -1124,9 +1121,8 @@ package body Exp_Disp is\n       --  interface class-wide type then use it directly. Otherwise, the tag\n       --  must be extracted from the controlling object.\n \n-      if Ctrl_Typ = RTE (RE_Tag)\n-        or else (RTE_Available (RE_Interface_Tag)\n-                  and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+      if Is_RTE (Ctrl_Typ, RE_Tag)\n+        or else Is_RTE (Ctrl_Typ, RE_Interface_Tag)\n       then\n          Controlling_Tag := Duplicate_Subexpr (Ctrl_Arg);\n \n@@ -1138,11 +1134,9 @@ package body Exp_Disp is\n \n       elsif Nkind (Ctrl_Arg) = N_Unchecked_Type_Conversion\n         and then\n-          (Etype (Expression (Ctrl_Arg)) = RTE (RE_Tag)\n+          (Is_RTE (Etype (Expression (Ctrl_Arg)), RE_Tag)\n             or else\n-              (RTE_Available (RE_Interface_Tag)\n-                and then\n-                  Etype (Expression (Ctrl_Arg)) = RTE (RE_Interface_Tag)))\n+           Is_RTE (Etype (Expression (Ctrl_Arg)), RE_Interface_Tag))\n       then\n          Controlling_Tag := Duplicate_Subexpr (Expression (Ctrl_Arg));\n \n@@ -8692,7 +8686,7 @@ package body Exp_Disp is\n          --  with an abstract interface type\n \n          if Present (DTC_Entity (Prim)) then\n-            if Etype (DTC_Entity (Prim)) = RTE (RE_Tag) then\n+            if Is_RTE (Etype (DTC_Entity (Prim)), RE_Tag) then\n                Write_Str (\"[P] \");\n             else\n                Write_Str (\"[s] \");"}, {"sha": "b1d4f2b5e0b9b86647917f13df1cbb935a87d2a8", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -1140,7 +1140,7 @@ package body Exp_Imgv is\n       --  There is a better way, test RTE_Available ???\n \n       if No_Run_Time_Mode\n-        and then Rtyp = RTE (RE_Integer_Address)\n+        and then Is_RTE (Rtyp, RE_Integer_Address)\n         and then RTU_Loaded (Ada_Tags)\n         and then Cunit_Entity (Current_Sem_Unit)\n                    = Body_Entity (RTU_Entity (Ada_Tags))"}, {"sha": "3631b95524f8c026cf18a7eef85c5e1a06c57e37", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -834,7 +834,7 @@ package body Exp_Util is\n       --  Optimize the case where we are using the default Global_Pool_Object,\n       --  and we don't need the heavy finalization machinery.\n \n-      elsif Pool_Id = RTE (RE_Global_Pool_Object)\n+      elsif Is_RTE (Pool_Id, RE_Global_Pool_Object)\n         and then not Needs_Finalization (Desig_Typ)\n       then\n          return;\n@@ -9081,7 +9081,7 @@ package body Exp_Util is\n         Is_Class_Wide_Type (Etype (Obj_Id))\n           and then Present (Expr)\n           and then Nkind (Expr) = N_Unchecked_Type_Conversion\n-          and then Etype (Expression (Expr)) = RTE (RE_Tag);\n+          and then Is_RTE (Etype (Expression (Expr)), RE_Tag);\n    end Is_Tag_To_Class_Wide_Conversion;\n \n    --------------------------------"}, {"sha": "76985e772b54af098920246fc9639f4bb3102032", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -905,9 +905,9 @@ package body Sem_Attr is\n             --  a tagged type cleans constant indications from its scope).\n \n             elsif Nkind (Parent (N)) = N_Unchecked_Type_Conversion\n-              and then (Etype (Parent (N)) = RTE (RE_Prim_Ptr)\n+              and then (Is_RTE (Etype (Parent (N)), RE_Prim_Ptr)\n                           or else\n-                        Etype (Parent (N)) = RTE (RE_Size_Ptr))\n+                        Is_RTE (Etype (Parent (N)), RE_Size_Ptr))\n               and then Is_Dispatching_Operation\n                          (Directly_Designated_Type (Etype (N)))\n             then\n@@ -2386,7 +2386,7 @@ package body Sem_Attr is\n          --  root type of a class-wide type is the corresponding type (e.g.\n          --  X for X'Class, and we really want to go to the root.)\n \n-         if Root_Type (Root_Type (Etype (E1))) /= RTE (RE_Sink) then\n+         if not Is_RTE (Root_Type (Root_Type (Etype (E1))), RE_Sink) then\n             Error_Attr\n               (\"expected Ada.Strings.Text_Output.Sink''Class\", E1);\n          end if;\n@@ -2556,8 +2556,8 @@ package body Sem_Attr is\n          --  X for X'Class, and we really want to go to the root.)\n \n          if not Is_Access_Type (Etyp)\n-           or else Root_Type (Root_Type (Designated_Type (Etyp))) /=\n-                     RTE (RE_Root_Stream_Type)\n+           or else not Is_RTE (Root_Type (Root_Type (Designated_Type (Etyp))),\n+                               RE_Root_Stream_Type)\n          then\n             Error_Attr\n               (\"expected access to Ada.Streams.Root_Stream_Type''Class\", E1);"}, {"sha": "e353e38a2e444a9b86dd9f3578cfa2f653e70ddc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -7430,9 +7430,7 @@ package body Sem_Ch13 is\n             --    type Q is access Float;\n             --    for Q'Storage_Size use T'Storage_Size; -- incorrect\n \n-            if RTE_Available (RE_Stack_Bounded_Pool)\n-              and then Base_Type (T) = RTE (RE_Stack_Bounded_Pool)\n-            then\n+            if Is_RTE (Base_Type (T), RE_Stack_Bounded_Pool) then\n                Error_Msg_N (\"non-shareable internal Pool\", Expr);\n                return;\n             end if;\n@@ -7722,7 +7720,7 @@ package body Sem_Ch13 is\n \n       if Etype (Expression (N)) = Any_Type then\n          return;\n-      elsif Etype (Expression (N)) /= RTE (RE_Asm_Insn) then\n+      elsif not Is_RTE (Etype (Expression (N)), RE_Asm_Insn) then\n          Error_Msg_N (\"incorrect type for code statement\", N);\n          return;\n       end if;"}, {"sha": "68a2e434b203a9d5e0a4edaef4a28468850793d0", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -4443,7 +4443,7 @@ package body Sem_Ch8 is\n \n       if not Configurable_Run_Time_Mode\n         and then not Present (Corresponding_Formal_Spec (N))\n-        and then Etype (Nam) /= RTE (RE_AST_Handler)\n+        and then not Is_RTE (Etype (Nam), RE_AST_Handler)\n       then\n          declare\n             P : constant Node_Id := Prefix (Nam);\n@@ -7508,15 +7508,9 @@ package body Sem_Ch8 is\n                   --  dispatch table wrappers. Required to avoid generating\n                   --  elaboration code with HI runtimes.\n \n-                  elsif RTU_Loaded (Ada_Tags)\n-                    and then\n-                      ((RTE_Available (RE_Dispatch_Table_Wrapper)\n-                         and then Scope (Selector) =\n-                                     RTE (RE_Dispatch_Table_Wrapper))\n-                        or else\n-                          (RTE_Available (RE_No_Dispatch_Table_Wrapper)\n-                            and then Scope (Selector) =\n-                                     RTE (RE_No_Dispatch_Table_Wrapper)))\n+                  elsif Is_RTE (Scope (Selector), RE_Dispatch_Table_Wrapper)\n+                    or else\n+                      Is_RTE (Scope (Selector), RE_No_Dispatch_Table_Wrapper)\n                   then\n                      C_Etype := Empty;\n                   else"}, {"sha": "57218b5f3da69c2c72e0a827dd8a9489653bd2a5", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -6104,7 +6104,9 @@ package body Sem_Eval is\n          --  No message if we are dealing with System.Priority values in\n          --  CodePeer mode where the target runtime may have more priorities.\n \n-         elsif not CodePeer_Mode or else Etype (N) /= RTE (RE_Priority) then\n+         elsif not CodePeer_Mode\n+           or else not Is_RTE (Etype (N), RE_Priority)\n+         then\n             --  Determine if the out-of-range violation constitutes a warning\n             --  or an error based on context, according to RM 4.9 (34/3).\n "}, {"sha": "43f1ade515afdc65c2d149aea191bff68134ce65", "filename": "gcc/ada/sem_scil.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_scil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_scil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_scil.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -71,13 +71,12 @@ package body Sem_SCIL is\n                --  Interface types are unsupported\n \n                if Is_Interface (Ctrl_Typ)\n-                 or else (RTE_Available (RE_Interface_Tag)\n-                            and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+                 or else Is_RTE (Ctrl_Typ, RE_Interface_Tag)\n                then\n                   null;\n \n                else\n-                  pragma Assert (Ctrl_Typ = RTE (RE_Tag));\n+                  pragma Assert (Is_RTE (Ctrl_Typ, RE_Tag));\n                   null;\n                end if;\n \n@@ -94,8 +93,7 @@ package body Sem_SCIL is\n                --  Interface types are unsupported.\n \n                if Is_Interface (Ctrl_Typ)\n-                 or else (RTE_Available (RE_Interface_Tag)\n-                           and then Ctrl_Typ = RTE (RE_Interface_Tag))\n+                 or else Is_RTE (Ctrl_Typ, RE_Interface_Tag)\n                  or else (Is_Access_Type (Ctrl_Typ)\n                            and then\n                              Is_Interface\n@@ -106,12 +104,14 @@ package body Sem_SCIL is\n \n                else\n                   pragma Assert\n-                    (Ctrl_Typ = RTE (RE_Tag)\n+                    (Is_RTE (Ctrl_Typ, RE_Tag)\n                        or else\n                          (Is_Access_Type (Ctrl_Typ)\n-                           and then Available_View\n-                                      (Base_Type (Designated_Type (Ctrl_Typ)))\n-                                        = RTE (RE_Tag)));\n+                            and then\n+                          Is_RTE\n+                            (Available_View\n+                               (Base_Type (Designated_Type (Ctrl_Typ))),\n+                             RE_Tag)));\n                   null;\n                end if;\n \n@@ -167,7 +167,7 @@ package body Sem_SCIL is\n                --  tag of the tested object (i.e. Obj.Tag).\n \n                when N_Selected_Component =>\n-                  pragma Assert (Etype (Ctrl_Tag) = RTE (RE_Tag));\n+                  pragma Assert (Is_RTE (Etype (Ctrl_Tag), RE_Tag));\n                   null;\n \n                when others =>"}, {"sha": "e83e96769d3d9c76359f5f24764c54535748b055", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3477e0b2473d95d82a128d21aae44db0d353203c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3477e0b2473d95d82a128d21aae44db0d353203c", "patch": "@@ -6438,7 +6438,7 @@ package body Sem_Util is\n             --  appear in the target-specific extension to System.\n \n             if No (Id)\n-              and then B_Scope = RTU_Entity (System)\n+              and then Is_RTU (B_Scope, System)\n               and then Present_System_Aux\n             then\n                B_Scope := System_Aux_Id;\n@@ -16897,8 +16897,8 @@ package body Sem_Util is\n         Nkind (E) = N_Function_Call\n           and then not Configurable_Run_Time_Mode\n           and then Nkind (Original_Node (E)) = N_Attribute_Reference\n-          and then (Entity (Name (E)) = RTE (RE_Get_Ceiling)\n-                     or else Entity (Name (E)) = RTE (RO_PE_Get_Ceiling));\n+          and then (Is_RTE (Entity (Name (E)), RE_Get_Ceiling)\n+                     or else Is_RTE (Entity (Name (E)), RO_PE_Get_Ceiling));\n    end Is_Expanded_Priority_Attribute;\n \n    ----------------------------"}]}