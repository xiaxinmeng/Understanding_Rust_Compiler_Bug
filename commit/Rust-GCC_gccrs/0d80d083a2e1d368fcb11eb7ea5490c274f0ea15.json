{"sha": "0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4MGQwODNhMmUxZDM2OGZjYjExZWI3ZWE1NDkwYzI3NGYwZWExNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-07T19:01:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-07T19:01:37Z"}, "message": "[AArch64] Merge SVE ternary FP operations\n\nThis patch combines the four individual fused multiply-add optabs\ninto one pattern and uses unspecs instead of rtx codes.  This is\npart of a series of patches that change the SVE FP patterns so that\nthey can describe cases in which the predicate isn't all-true.\n\n2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (fma<mode>4, *fma<mode>4)\n\t(fnma<mode>4, *fnma<mode>4, fnms<mode>4, *fnms<mode>4)\n\t(fms<mode>4, *fms<mode>4): Replace with...\n\t(<SVE_COND_FP_TERNARY:optab><SVE_F:mode>4)\n\t(*<SVE_COND_FP_TERNARY:optab><SVE_F:mode>4): ...these new patterns.\n\tUse unspecs instead of rtx codes.\n\t(cond_<optab><mode>, *cond_<optab><mode>_2, *cond_<optab><mode>_4)\n\t(*cond_<optab><mode>_any): Add the predicate to SVE_COND_FP_TERNARY.\n\nFrom-SVN: r274189", "tree": {"sha": "0467d078cd458dab16231b433ef699a7068de2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0467d078cd458dab16231b433ef699a7068de2bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "214c42faa06a9eb1aa7f0296399f28df4fb068ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214c42faa06a9eb1aa7f0296399f28df4fb068ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214c42faa06a9eb1aa7f0296399f28df4fb068ec"}], "stats": {"total": 227, "additions": 51, "deletions": 176}, "files": [{"sha": "85d0dfee0dd67ed660f1830171b523b399e50835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "patch": "@@ -1,3 +1,14 @@\n+2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (fma<mode>4, *fma<mode>4)\n+\t(fnma<mode>4, *fnma<mode>4, fnms<mode>4, *fnms<mode>4)\n+\t(fms<mode>4, *fms<mode>4): Replace with...\n+\t(<SVE_COND_FP_TERNARY:optab><SVE_F:mode>4)\n+\t(*<SVE_COND_FP_TERNARY:optab><SVE_F:mode>4): ...these new patterns.\n+\tUse unspecs instead of rtx codes.\n+\t(cond_<optab><mode>, *cond_<optab><mode>_2, *cond_<optab><mode>_4)\n+\t(*cond_<optab><mode>_any): Add the predicate to SVE_COND_FP_TERNARY.\n+\n 2019-08-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_COND_FP_MAXMIN_PUBLIC): New"}, {"sha": "37a611c04628d7e7b61cdea0bd962cccdf1e6580", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 40, "deletions": 176, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d80d083a2e1d368fcb11eb7ea5490c274f0ea15/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=0d80d083a2e1d368fcb11eb7ea5490c274f0ea15", "patch": "@@ -85,10 +85,6 @@\n ;; ---- [INT] Dot product\n ;; ---- [INT] Sum of absolute differences\n ;; ---- [FP] General ternary arithmetic corresponding to unspecs\n-;; ---- [FP] FMLA and FMAD\n-;; ---- [FP] FMLS and FMSB\n-;; ---- [FP] FNMLA and FNMAD\n-;; ---- [FP] FNMLS and FNMSB\n ;;\n ;; == Comparisons and selects\n ;; ---- [INT,FP] Select based on predicates\n@@ -2469,13 +2465,46 @@\n ;; - FNMSB\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated floating-point ternary operations.\n+(define_expand \"<optab><mode>4\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\")\n+\t(unspec:SVE_F\n+\t  [(match_dup 4)\n+\t   (match_operand:SVE_F 1 \"register_operand\")\n+\t   (match_operand:SVE_F 2 \"register_operand\")\n+\t   (match_operand:SVE_F 3 \"register_operand\")]\n+\t  SVE_COND_FP_TERNARY))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n+;; Predicated floating-point ternary operations.\n+(define_insn \"*<optab><mode>4\"\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n+\t(unspec:SVE_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%w, 0, w\")\n+\t   (match_operand:SVE_F 3 \"register_operand\" \"w, w, w\")\n+\t   (match_operand:SVE_F 4 \"register_operand\" \"0, w, w\")]\n+\t  SVE_COND_FP_TERNARY))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <sve_fmla_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   <sve_fmad_op>\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0, %4\\;<sve_fmla_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,*,yes\")]\n+)\n+\n ;; Predicated floating-point ternary operations with merging.\n (define_expand \"cond_<optab><mode>\"\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\")\n \t      (match_operand:SVE_F 3 \"register_operand\")\n \t      (match_operand:SVE_F 4 \"register_operand\")]\n \t     SVE_COND_FP_TERNARY)\n@@ -2496,7 +2525,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"0, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"w, w\")\n \t      (match_operand:SVE_F 4 \"register_operand\" \"w, w\")]\n \t     SVE_COND_FP_TERNARY)\n@@ -2516,7 +2546,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"w, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"w, w\")\n \t      (match_operand:SVE_F 4 \"register_operand\" \"0, w\")]\n \t     SVE_COND_FP_TERNARY)\n@@ -2536,7 +2567,8 @@\n \t(unspec:SVE_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   (unspec:SVE_F\n-\t     [(match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")\n+\t     [(match_dup 1)\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"w, w, w\")\n \t      (match_operand:SVE_F 3 \"register_operand\" \"w, w, w\")\n \t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")]\n \t     SVE_COND_FP_TERNARY)\n@@ -2561,174 +2593,6 @@\n   [(set_attr \"movprfx\" \"yes\")]\n )\n \n-;; -------------------------------------------------------------------------\n-;; ---- [FP] FMLA and FMAD\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - FMAD\n-;; - FMLA\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated fma (%0 = (%1 * %2) + %3).\n-(define_expand \"fma<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 4)\n-\t   (fma:SVE_F (match_operand:SVE_F 1 \"register_operand\")\n-\t\t      (match_operand:SVE_F 2 \"register_operand\")\n-\t\t      (match_operand:SVE_F 3 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; fma predicated with a PTRUE.\n-(define_insn \"*fma<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (fma:SVE_F (match_operand:SVE_F 3 \"register_operand\" \"%0, w, w\")\n-\t\t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")\n-\t\t      (match_operand:SVE_F 2 \"register_operand\" \"w, 0, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"@\n-   fmad\\t%0.<Vetype>, %1/m, %4.<Vetype>, %2.<Vetype>\n-   fmla\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n-   movprfx\\t%0, %2\\;fmla\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n-;; -------------------------------------------------------------------------\n-;; ---- [FP] FMLS and FMSB\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - FMLS\n-;; - FMSB\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated fnma (%0 = (-%1 * %2) + %3).\n-(define_expand \"fnma<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 4)\n-\t   (fma:SVE_F (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 1 \"register_operand\"))\n-\t\t      (match_operand:SVE_F 2 \"register_operand\")\n-\t\t      (match_operand:SVE_F 3 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; fnma predicated with a PTRUE.\n-(define_insn \"*fnma<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (fma:SVE_F (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 3 \"register_operand\" \"%0, w, w\"))\n-\t\t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")\n-\t\t      (match_operand:SVE_F 2 \"register_operand\" \"w, 0, w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"@\n-   fmsb\\t%0.<Vetype>, %1/m, %4.<Vetype>, %2.<Vetype>\n-   fmls\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n-   movprfx\\t%0, %2\\;fmls\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n-;; -------------------------------------------------------------------------\n-;; ---- [FP] FNMLA and FNMAD\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - FNMAD\n-;; - FNMLA\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated fnms (%0 = (-%1 * %2) - %3).\n-(define_expand \"fnms<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 4)\n-\t   (fma:SVE_F (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 1 \"register_operand\"))\n-\t\t      (match_operand:SVE_F 2 \"register_operand\")\n-\t\t      (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 3 \"register_operand\")))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; fnms predicated with a PTRUE.\n-(define_insn \"*fnms<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (fma:SVE_F (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 3 \"register_operand\" \"%0, w, w\"))\n-\t\t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")\n-\t\t      (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 2 \"register_operand\" \"w, 0, w\")))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"@\n-   fnmad\\t%0.<Vetype>, %1/m, %4.<Vetype>, %2.<Vetype>\n-   fnmla\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n-   movprfx\\t%0, %2\\;fnmla\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n-;; -------------------------------------------------------------------------\n-;; ---- [FP] FNMLS and FNMSB\n-;; -------------------------------------------------------------------------\n-;; Includes:\n-;; - FNMLS\n-;; - FNMSB\n-;; -------------------------------------------------------------------------\n-\n-;; Unpredicated fms (%0 = (%1 * %2) - %3).\n-(define_expand \"fms<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\")\n-\t(unspec:SVE_F\n-\t  [(match_dup 4)\n-\t   (fma:SVE_F (match_operand:SVE_F 1 \"register_operand\")\n-\t\t      (match_operand:SVE_F 2 \"register_operand\")\n-\t\t      (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 3 \"register_operand\")))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  {\n-    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n-  }\n-)\n-\n-;; fms predicated with a PTRUE.\n-(define_insn \"*fms<mode>4\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (fma:SVE_F (match_operand:SVE_F 3 \"register_operand\" \"%0, w, w\")\n-\t\t      (match_operand:SVE_F 4 \"register_operand\" \"w, w, w\")\n-\t\t      (neg:SVE_F\n-\t\t\t(match_operand:SVE_F 2 \"register_operand\" \"w, 0, w\")))]\n-\t  UNSPEC_MERGE_PTRUE))]\n-  \"TARGET_SVE\"\n-  \"@\n-   fnmsb\\t%0.<Vetype>, %1/m, %4.<Vetype>, %2.<Vetype>\n-   fnmls\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n-   movprfx\\t%0, %2\\;fnmls\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n-)\n-\n ;; =========================================================================\n ;; == Comparisons and selects\n ;; ========================================================================="}]}