{"sha": "69c7b8276916ac7807d34abc96c9fb64326995a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljN2I4Mjc2OTE2YWM3ODA3ZDM0YWJjOTZjOWZiNjQzMjY5OTVhNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-09T15:20:25Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-09T15:20:25Z"}, "message": "RMIClassLoader.java: Removed unused imports, little reformatings.\n\n2003-10-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/rmi/server/RMIClassLoader.java:\n\tRemoved unused imports, little reformatings.\n\t(getClassLoader): New method, implementation was part of old loadCLass\n\tmethod.\n\t(loadClass): Simplified by moving functionality to new method and\n\treworking the code a bit.\n\t(getClassAnnotation): Merged documentation from classpath.\n\nFrom-SVN: r72267", "tree": {"sha": "64e5408be7d1bc5085e67e4101c470e358bb484f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64e5408be7d1bc5085e67e4101c470e358bb484f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69c7b8276916ac7807d34abc96c9fb64326995a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c7b8276916ac7807d34abc96c9fb64326995a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c7b8276916ac7807d34abc96c9fb64326995a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c7b8276916ac7807d34abc96c9fb64326995a5/comments", "author": null, "committer": null, "parents": [{"sha": "cf48cabb7d0e568aa496e27859cef0ed10fbb25f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf48cabb7d0e568aa496e27859cef0ed10fbb25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf48cabb7d0e568aa496e27859cef0ed10fbb25f"}], "stats": {"total": 164, "additions": 105, "deletions": 59}, "files": [{"sha": "4a65d1148facd2d61e07ed50ccaaebbf60af6d2f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c7b8276916ac7807d34abc96c9fb64326995a5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c7b8276916ac7807d34abc96c9fb64326995a5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=69c7b8276916ac7807d34abc96c9fb64326995a5", "patch": "@@ -1,3 +1,13 @@\n+2003-10-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/rmi/server/RMIClassLoader.java:\n+\tRemoved unused imports, little reformatings.\n+\t(getClassLoader): New method, implementation was part of old loadCLass\n+\tmethod.\n+\t(loadClass): Simplified by moving functionality to new method and\n+\treworking the code a bit.\n+\t(getClassAnnotation): Merged documentation from classpath.\n+\n 2003-10-09  Michael Koch  <konqueror@gmx.de>\n \n \t* java/math/BigInteger.java"}, {"sha": "c6187983eb1df6cc77cc8a535a222ce150682ae0", "filename": "libjava/java/rmi/server/RMIClassLoader.java", "status": "modified", "additions": 95, "deletions": 59, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c7b8276916ac7807d34abc96c9fb64326995a5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c7b8276916ac7807d34abc96c9fb64326995a5/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java?ref=69c7b8276916ac7807d34abc96c9fb64326995a5", "patch": "@@ -40,17 +40,11 @@\n \n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.net.URLConnection;\n import java.net.URLClassLoader;\n-import java.io.IOException;\n-import java.io.DataInputStream;\n import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.Hashtable;\n import java.util.Map;\n import java.util.StringTokenizer;\n-import java.util.WeakHashMap;\n \n \n /**\n@@ -106,6 +100,7 @@ public final String getClassAnnotation()\n   //defaultAnnotation is got from system property\n   // \"java.rmi.server.defaultAnnotation\"\n   private static String defaultAnnotation;\n+\n   //URL object for defaultAnnotation\n   private static URL defaultCodebase;\n \n@@ -121,19 +116,19 @@ public final String getClassAnnotation()\n     defaultAnnotation = System.getProperty (\"java.rmi.server.defaultAnnotation\");\n \n     try\n-    {\n-      if (defaultAnnotation != null)\n-        defaultCodebase = new URL (defaultAnnotation);\n-    }\n+      {\n+        if (defaultAnnotation != null)\n+          defaultCodebase = new URL (defaultAnnotation);\n+      }\n     catch (Exception _)\n-    {\n-      defaultCodebase = null;\n-    }\n+      {\n+        defaultCodebase = null;\n+      }\n \n     if (defaultCodebase != null)\n       {\n-        defaultLoader = new MyClassLoader(new URL[]{ defaultCodebase },\n-\t\t\t\t\t  null, defaultAnnotation);\n+        defaultLoader = new MyClassLoader (new URL[] { defaultCodebase }, null,\n+                                           defaultAnnotation);\n         cacheLoaders.put(defaultAnnotation, defaultLoader);\n       }\n     }\n@@ -150,49 +145,87 @@ public static Class loadClass (String name)\n   public static Class loadClass (String codebases, String name)\n     throws MalformedURLException, ClassNotFoundException\n   {\n-    Class c = null;\n     ClassLoader loader = Thread.currentThread().getContextClassLoader();\n \n     //try context class loader first\n     try \n       {\n-\t    c = loader.loadClass(name);       \n+        return loader.loadClass (name);\n+      }\n+    catch (ClassNotFoundException e)\n+      {\n+        // class not found in the local classpath\n       }\n-    catch(ClassNotFoundException e) {}\n-\n-    if (c != null)\n-      return c;\n \n     if (codebases.length() == 0) //==\"\"\n-      loader = defaultLoader;\n-    else \n       {\n-\tloader = (ClassLoader)cacheLoaders.get(codebases);\n-\tif (loader == null)\n-\t  {\n-\t    //create an entry in cacheLoaders mapping a loader to codebases.\n-            \n-\t    // codebases are separated by \" \"\n-\t    StringTokenizer tok = new StringTokenizer(codebases, \" \"); \n-\t    ArrayList urls = new ArrayList();\n-\t    while (tok.hasMoreTokens())\n-\t      urls.add(new URL(tok.nextToken()));\n-  \n-\t    loader = new MyClassLoader((URL[])urls.toArray(new URL[urls.size()]),\n-\t\t\t\t\tnull, codebases);\n-\t    cacheLoaders.put(codebases, loader);\n-\t  }\n+        loader = defaultLoader;\n+      }\n+    else\n+      {\n+        loader = getClassLoader(codebases);\n+      }\n+\n+    if (loader == null)\n+      {\n+        //do not throw NullPointerException\n+        throw new ClassNotFoundException (\"Could not find class (\" + name +\n+                                          \") at codebase (\" + codebases + \")\");\n       }\n+      \n+    return loader.loadClass (name);\n+  }\n \n-    return loader.loadClass(name);\n+  /**\n+   * Gets a classloader for the given codebase and with the current\n+   * context classloader as parent.\n+   * \n+   * @param codebases\n+   * \n+   * @return a classloader for the given codebase\n+   * \n+   * @throws MalformedURLException if the codebase contains a malformed URL\n+   */\n+  private static ClassLoader getClassLoader (String codebases) \n+    throws MalformedURLException\n+  {\n+    ClassLoader loader = (ClassLoader) cacheLoaders.get (codebases);\n+\t\n+    if (loader == null)\n+      {\n+        //create an entry in cacheLoaders mapping a loader to codebases.\n+        // codebases are separated by \" \"\n+        StringTokenizer tok = new StringTokenizer (codebases, \" \");\n+        ArrayList urls = new ArrayList();\n+      \n+        while (tok.hasMoreTokens())\n+          urls.add (new URL (tok.nextToken()));\n+      \n+        loader = new MyClassLoader ((URL[]) urls.toArray (new URL [urls.size()]),\n+    \t\t\t\t    null, codebases);\n+        cacheLoaders.put (codebases, loader);\n+      }\n+           \n+    return loader;\n   }\n-  \n-  public static String getClassAnnotation(Class cl)\n+ \n+  /**\n+   * Returns a string representation of the network location where a remote\n+   * endpoint can get the class-definition of the given class.\n+   *\n+   * @param cl\n+   *\n+   * @return a space seperated list of URLs where the class-definition\n+   * of cl may be found\n+   */\n+  public static String getClassAnnotation (Class cl)\n   {\n     ClassLoader loader = cl.getClassLoader();\n-    if (loader == null || loader == ClassLoader.getSystemClassLoader())\n+    \n+    if (loader == null\n+        || loader == ClassLoader.getSystemClassLoader())\n       {\n-\treturn null; //??\n+        return System.getProperty (\"java.rmi.server.codebase\");\n       }\n \n     if (loader instanceof MyClassLoader)\n@@ -203,26 +236,29 @@ public static String getClassAnnotation(Class cl)\n     String s = (String) cacheAnnotations.get (loader);\n \n     if (s != null)\n-      {\n-        return s;\n-      }\n+      return s;\n \n     if (loader instanceof URLClassLoader)\n       {\n-\tURL[] urls = ((URLClassLoader)loader).getURLs();\n-\tif(urls.length == 0)\n-\t  return null;\n-\n-\tStringBuffer annotation = new StringBuffer(64*urls.length);\n-\tfor(int i = 0; i < urls.length; i++)\n-\t  {\n-\t    annotation.append(urls[i].toExternalForm());\n-\t    annotation.append(' ');\n-\t  }\n-\ts = annotation.toString();\n-\tcacheAnnotations.put(loader, s);\n+        URL[] urls = ((URLClassLoader) loader).getURLs();\n+\n+        if (urls.length == 0)\n+          return null;\n+\n+        StringBuffer annotation = new StringBuffer (64 * urls.length);\n+\n+        for (int i = 0; i < urls.length; i++)\n+          {\n+            annotation.append (urls [i].toExternalForm());\n+            annotation.append (' ');\n+          }\n+\n+        s = annotation.toString();\n+        cacheAnnotations.put (loader, s);\n+        return s;\n       }\n-    return null;\n+\n+    return System.getProperty (\"java.rmi.server.codebase\");\n   }\n \n   /**"}]}