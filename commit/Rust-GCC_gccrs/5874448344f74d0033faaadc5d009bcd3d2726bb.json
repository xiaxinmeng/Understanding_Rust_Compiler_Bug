{"sha": "5874448344f74d0033faaadc5d009bcd3d2726bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3NDQ0ODM0NGY3NGQwMDMzZmFhYWRjNWQwMDliY2QzZDI3MjZiYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-24T10:48:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-24T10:48:59Z"}, "message": "(subst): When moving operation inside IF_THEN_ELSE, make a new rtx\ninstead of using SUBST due to sharing.\n\n(simplify_comparison): Correct test for sign extension when trying to\nwiden comparison.\n\nFrom-SVN: r1938", "tree": {"sha": "78aa3dbf4dff3232639b8191a1c3512ff068dc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78aa3dbf4dff3232639b8191a1c3512ff068dc3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5874448344f74d0033faaadc5d009bcd3d2726bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5874448344f74d0033faaadc5d009bcd3d2726bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5874448344f74d0033faaadc5d009bcd3d2726bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5874448344f74d0033faaadc5d009bcd3d2726bb/comments", "author": null, "committer": null, "parents": [{"sha": "c7d2d61d20c859ef2a9796c03b573204e7f2ae8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d2d61d20c859ef2a9796c03b573204e7f2ae8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d2d61d20c859ef2a9796c03b573204e7f2ae8c"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "2af4949e054fb2eb660adaf4e27efc04c3be61af", "filename": "gcc/combine.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5874448344f74d0033faaadc5d009bcd3d2726bb/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5874448344f74d0033faaadc5d009bcd3d2726bb/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5874448344f74d0033faaadc5d009bcd3d2726bb", "patch": "@@ -2616,31 +2616,32 @@ subst (x, from, to, in_dest, unique_copy)\n   if ((GET_RTX_CLASS (code) == '2' || GET_RTX_CLASS (code) == 'c')\n       && GET_CODE (XEXP (x, 0)) == IF_THEN_ELSE)\n     {\n-      SUBST (XEXP (XEXP (x, 0), 1),\n-\t     subst (gen_binary (code, mode, XEXP (XEXP (x, 0), 1),\n-\t\t\t\tXEXP (x, 1)),\n-\t\t    pc_rtx, pc_rtx, 0));\n-      SUBST (XEXP (XEXP (x, 0), 2),\n-\t     subst (gen_binary (code, mode, XEXP (XEXP (x, 0), 2),\n-\t\t\t\tXEXP (x, 1)),\n-\t\t    pc_rtx, pc_rtx, 0));\n-\n-      x = XEXP (x, 0);\n+      /* Don't do this by using SUBST inside X since we might be messing\n+\t up a shared expression.  */\n+      rtx cond = XEXP (XEXP (x, 0), 0);\n+      rtx t_arm = subst (gen_binary (code, mode, XEXP (XEXP (x, 0), 1),\n+\t\t\t\t     XEXP (x, 1)),\n+\t\t\t pc_rtx, pc_rtx, 0);\n+      rtx f_arm = subst (gen_binary (code, mode, XEXP (XEXP (x, 0), 2),\n+\t\t\t\t     XEXP (x, 1)),\n+\t\t\t pc_rtx, pc_rtx, 0);\n+\n+\n+      x = gen_rtx (IF_THEN_ELSE, mode, cond, t_arm, f_arm);\n       goto restart;\n     }\n \n   else if (GET_RTX_CLASS (code) == '1'\n \t   && GET_CODE (XEXP (x, 0)) == IF_THEN_ELSE\n \t   && GET_MODE (XEXP (x, 0)) == mode)\n     {\n-      SUBST (XEXP (XEXP (x, 0), 1),\n-\t     subst (gen_unary (code, mode, XEXP (XEXP (x, 0), 1)),\n-\t\t    pc_rtx, pc_rtx, 0));\n-      SUBST (XEXP (XEXP (x, 0), 2),\n-\t     subst (gen_unary (code, mode, XEXP (XEXP (x, 0), 2)),\n-\t\t    pc_rtx, pc_rtx, 0));\n-\n-      x = XEXP (x, 0);\n+      rtx cond = XEXP (XEXP (x, 0), 0);\n+      rtx t_arm = subst (gen_unary (code, mode, XEXP (XEXP (x, 0), 1)),\n+\t\t\t pc_rtx, pc_rtx, 0);\n+      rtx f_arm = subst (gen_unary (code, mode, XEXP (XEXP (x, 0), 2)),\n+\t\t\t pc_rtx, pc_rtx, 0);\n+\n+      x = gen_rtx_combine (IF_THEN_ELSE, mode, cond, t_arm, f_arm);\n       goto restart;\n     }\n \n@@ -7956,9 +7957,9 @@ simplify_comparison (code, pop0, pop1)\n \t      || ((code == EQ || code == NE\n \t\t   || code == GE || code == GT || code == LE || code == LT)\n \t\t  && (num_sign_bit_copies (op0, tmode)\n-\t\t      >= GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))\n+\t\t      > GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))\n \t\t  && (num_sign_bit_copies (op1, tmode)\n-\t\t      >= GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))))\n+\t\t      > GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))))\n \t    {\n \t      op0 = gen_lowpart_for_combine (tmode, op0);\n \t      op1 = gen_lowpart_for_combine (tmode, op1);"}]}