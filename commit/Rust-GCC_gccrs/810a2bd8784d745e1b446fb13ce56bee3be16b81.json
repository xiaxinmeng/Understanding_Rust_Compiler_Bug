{"sha": "810a2bd8784d745e1b446fb13ce56bee3be16b81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwYTJiZDg3ODRkNzQ1ZTFiNDQ2ZmIxM2NlNTZiZWUzYmUxNmI4MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-08T19:05:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-08T19:05:55Z"}, "message": "c++: No news is good news\n\nThe NEWS file hasn't been updated since GCC 3.4.  It's not very\nnews-worthy.\n\n\t* NEWS: Delete, it is so stale.", "tree": {"sha": "ee9cdc80dcbb4f2cf6cbcd63fa7980f0187e6db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9cdc80dcbb4f2cf6cbcd63fa7980f0187e6db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810a2bd8784d745e1b446fb13ce56bee3be16b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810a2bd8784d745e1b446fb13ce56bee3be16b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810a2bd8784d745e1b446fb13ce56bee3be16b81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810a2bd8784d745e1b446fb13ce56bee3be16b81/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b224c3763e018e8bdd0047b3eb283992fb655ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b224c3763e018e8bdd0047b3eb283992fb655ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b224c3763e018e8bdd0047b3eb283992fb655ce0"}], "stats": {"total": 410, "additions": 2, "deletions": 408}, "files": [{"sha": "f3ab02237bdce32af7448e81ea716cfe32208afa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810a2bd8784d745e1b446fb13ce56bee3be16b81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810a2bd8784d745e1b446fb13ce56bee3be16b81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=810a2bd8784d745e1b446fb13ce56bee3be16b81", "patch": "@@ -1,5 +1,7 @@\n 2020-05-08  Nathan Sidwell  <nathan@acm.org>\n \n+\t* NEWS: Delete, it is so stale.\n+\n \t* parser.c (cp_lexer_set_source_position_from_token): EOF has a\n \tlocation too.\n "}, {"sha": "e02bf9faf68169f5d9e1ceb37f9d29b201acbc5d", "filename": "gcc/cp/NEWS", "status": "removed", "additions": 0, "deletions": 408, "changes": 408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b224c3763e018e8bdd0047b3eb283992fb655ce0/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b224c3763e018e8bdd0047b3eb283992fb655ce0/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=b224c3763e018e8bdd0047b3eb283992fb655ce0", "patch": "@@ -1,408 +0,0 @@\n-*** Changes in GCC 3.4:\n-\n-* Changes in GCC 3.4 are described in 'gcc-3.4/changes.html'\n-\n-*** Changes in GCC 3.3:\n-\n-* The \"new X = 3\" extension has been removed; you must now use \"new X(3)\".\n-\n-* G++ no longer allows in-class initializations of static data members\n-  that do not have arithmetic or enumeration type.  For example:\n-\n-    struct S {\n-      static const char* const p = \"abc\";\n-    };\n-\n-  is no longer accepted.\n-\n-  Use the standards-conformant form:\n-\n-    struct S {\n-      static const char* const p;\n-    };\n-\n-    const char* const S::p = \"abc\";\n-\n-  instead.\n-\n-  (ISO C++ is even stricter; it does not allow in-class\n-  initializations of floating-point types.)\n-\n-*** Changes in GCC 3.1:\n-\n-* -fhonor-std and -fno-honor-std have been removed. -fno-honor-std was\n-  a workaround to allow std compliant code to work with the non-std\n-  compliant libstdc++-v2. libstdc++-v3 is std compliant.\n-\n-* The C++ ABI has been fixed so that `void (A::*)() const' is mangled as\n-  \"M1AKFvvE\", rather than \"MK1AFvvE\" as before.  This change only affects\n-  pointer to cv-qualified member function types.\n-\n-* The C++ ABI has been changed to correctly handle this code:\n-\n-    struct A {\n-      void operator delete[] (void *, size_t);\n-    };\n-\n-    struct B : public A {\n-    };\n-\n-    new B[10];\n-\n-  The amount of storage allocated for the array will be greater than\n-  it was in 3.0, in order to store the number of elements in the\n-  array, so that the correct size can be passed to `operator delete[]'\n-  when the array is deleted.  Previously, the value passed to\n-  `operator delete[]' was unpredictable.\n-\n-  This change will only affect code that declares a two-argument\n-  `operator delete[]' with a second parameter of type `size_t'\n-  in a base class, and does not override that definition in a\n-  derived class.\n-\n-* The C++ ABI has been changed so that:\n-\n-    struct A {\n-      void operator delete[] (void *, size_t);\n-      void operator delete[] (void *);\n-    };\n-\n-  does not cause unnecessary storage to be allocated when an array of\n-  `A' objects is allocated.\n-\n-  This change will only affect code that declares both of these\n-  forms of `operator delete[]', and declared the two-argument form\n-  before the one-argument form.\n-\n-* The C++ ABI has been changed so that when a parameter is passed by value,\n-  any cleanup for that parameter is performed in the caller, as specified\n-  by the ia64 C++ ABI, rather than the called function as before.  As a\n-  result, classes with a non-trivial destructor but a trivial copy\n-  constructor will be passed and returned by invisible reference, rather\n-  than by bitwise copy as before.\n-\n-* G++ now supports the \"named return value optimization\":  for code like\n-\n-    A f () {\n-      A a;\n-      ...\n-      return a;\n-    }\n-\n-  G++ will allocate 'a' in the return value slot, so that the return\n-  becomes a no-op.  For this to work, all return statements in the function\n-  must return the same variable.\n-\n-*** Changes in GCC 3.0:\n-\n-* Support for guiding declarations has been removed.\n-\n-* G++ now supports importing member functions from base classes with a\n-  using-declaration.\n-\n-* G++ now enforces access control for nested types.\n-\n-* In some obscure cases, functions with the same type could have the\n-  same mangled name.  This bug caused compiler crashes, link-time clashes,\n-  and debugger crashes.  Fixing this bug required breaking ABI\n-  compatibility for the functions involved.  The functions in questions\n-  are those whose types involve non-type template arguments whose\n-  mangled representations require more than one digit.\n-\n-* Support for assignment to `this' has been removed.  This idiom\n-  was used in the very early days of C++, before users were allowed\n-  to overload `operator new'; it is no longer allowed by the C++\n-  standard.\n-\n-* Support for signatures, a G++ extension, have been removed.\n-\n-* Certain invalid conversions that were previously accepted will now\n-  be rejected.  For example, assigning function pointers of one type\n-  to function pointers of another type now requires a cast, whereas\n-  previously g++ would sometimes accept the code even without the\n-  cast.\n-\n-* G++ previously allowed `sizeof (X::Y)' where Y was a non-static\n-  member of X, even if the `sizeof' expression occurred outside\n-  of a non-static member function of X (or one of its derived classes,\n-  or a member-initializer for X or one of its derived classes.)   This\n-  extension has been removed.\n-\n-* G++ no longer allows you to overload the conditional operator (i.e.,\n-  the `?:' operator.)\n-\n-* The \"named return value\" extension:\n-\n-    int f () return r { r = 3; }\n-\n-  has been deprecated, and will be removed in a future version of G++.\n-\n-*** Changes in GCC 2.95:\n-\n-* Messages about non-conformant code that we can still handle (\"pedwarns\")\n-  are now errors by default, rather than warnings.  This can be reverted\n-  with -fpermissive, and is overridden by -pedantic or -pedantic-errors.\n-\n-* String constants are now of type `const char[n]', rather than `char[n]'.\n-  This can be reverted with -fno-const-strings.\n-\n-* References to functions are now supported.\n-\n-* Lookup of class members during class definition now works in all cases.\n-\n-* In overload resolution, type conversion operators are now properly\n-  treated as always coming from the most derived class.\n-\n-* C9x-style restricted pointers are supported, using the `__restrict'\n-  keyword.\n-\n-* You can now use -fno-implicit-inline-templates to suppress writing out\n-  implicit instantiations of inline templates.  Normally we do write them\n-  out, even with -fno-implicit-templates, so that optimization doesn't\n-  affect which instantiations are needed.\n-\n-* -fstrict-prototype now also suppresses implicit declarations.\n-\n-* Many obsolete options have been removed: -fall-virtual, -fmemoize-lookups,\n-  -fsave-memoized, +e?, -fenum-int-equivalence, -fno-nonnull-objects.\n-\n-* Unused virtual functions can be discarded on some targets by specifying\n-  -ffunction-sections -fvtable-gc to the compiler and --gc-sections to the\n-  linker.  Unfortunately, this only works on GNU/Linux if you're linking\n-  statically.\n-\n-* Lots of bugs stomped.\n-\n-*** Changes in EGCS 1.1:\n-\n-* Namespaces are fully supported.  The library has not yet been converted\n-  to use namespace std, however, and the old std-faking code is still on by\n-  default.  To turn it off, you can use -fhonor-std.\n-\n-* Massive template improvements:\n-  + member template classes are supported.\n-  + template friends are supported.\n-  + template template parameters are supported.\n-  + local classes in templates are supported.\n-  + lots of bugs fixed.\n-\n-* operator new now throws bad_alloc where appropriate.\n-\n-* Exception handling is now thread safe, and supports nested exceptions and\n-  placement delete.  Exception handling overhead on x86 is much lower with\n-  GNU as 2.9.\n-\n-* protected virtual inheritance is now supported.\n-\n-* Loops are optimized better; we now move the test to the end in most\n-  cases, like the C frontend does.\n-\n-* For class D derived from B which has a member 'int i', &D::i is now of\n-  type 'int B::*' instead of 'int D::*'.\n-\n-* An _experimental_ new ABI for g++ can be turned on with -fnew-abi.  The\n-  current features of this are more efficient allocation of base classes\n-  (including the empty base optimization), and more compact mangling of C++\n-  symbol names (which can be turned on separately with -fsquangle).  This\n-  ABI is subject to change without notice, so don't use it for anything\n-  that you don't want to rebuild with every release of the compiler.\n-\n-  As with all ABI-changing flags, this flag is for experts only, as all\n-  code (including the library code in libgcc and libstdc++) must be\n-  compiled with the same ABI.\n-\n-*** Changes in EGCS 1.0:\n-\n-* A public review copy of the December 1996 Draft of the ISO/ANSI C++\n-  standard is now available. See\n-\n-\thttp://www.cygnus.com/misc/wp/\n-\n-  for more information.\n-\n-* g++ now uses a new implementation of templates. The basic idea is that\n-  now templates are minimally parsed when seen and then expanded later.\n-  This allows conformant early name binding and instantiation controls,\n-  since instantiations no longer have to go through the parser.\n-\n-  What you get:\n-\n-     + Inlining of template functions works without any extra effort or\n-       modifications.\n-     + Instantiations of class templates and methods defined in the class\n-       body are deferred until they are actually needed (unless\n-       -fexternal-templates is specified).\n-     + Nested types in class templates work.\n-     + Static data member templates work.\n-     + Member function templates are now supported.\n-     + Partial specialization of class templates is now supported.\n-     + Explicit specification of template parameters to function templates\n-       is now supported.\n-\n-  Things you may need to fix in your code:\n-\n-     + Syntax errors in templates that are never instantiated will now be\n-       diagnosed.\n-     + Types and class templates used in templates must be declared\n-       first, or the compiler will assume they are not types, and fail.\n-     + Similarly, nested types of template type parameters must be tagged\n-       with the 'typename' keyword, except in base lists.  In many cases,\n-       but not all, the compiler will tell you where you need to add\n-       'typename'.  For more information, see\n-\n-\t    http://www.cygnus.com/misc/wp/dec96pub/template.html#temp.res\n-\n-     + Guiding declarations are no longer supported.  Function declarations,\n-       including friend declarations, do not refer to template instantiations.\n-       You can restore the old behavior with -fguiding-decls until you fix\n-       your code.\n-\n-  Other features:\n-\n-     + Default function arguments in templates will not be evaluated (or\n-       checked for semantic validity) unless they are needed.  Default\n-       arguments in class bodies will not be parsed until the class\n-       definition is complete.\n-     + The -ftemplate-depth-NN flag can be used to increase the maximum\n-       recursive template instantiation depth, which defaults to 17. If you\n-       need to use this flag, the compiler will tell you.\n-     + Explicit instantiation of template constructors and destructors is\n-       now supported.  For instance:\n-\n-\t    template A<int>::A(const A&);\n-\n-  Still not supported:\n-\n-     + Member class templates.\n-     + Template friends.\n-\n-* Exception handling support has been significantly improved and is on by\n-  default.  The compiler supports two mechanisms for walking back up the\n-  call stack; one relies on static information about how registers are\n-  saved, and causes no runtime overhead for code that does not throw\n-  exceptions.  The other mechanism uses setjmp and longjmp equivalents, and\n-  can result in quite a bit of runtime overhead.  You can determine which\n-  mechanism is the default for your target by compiling a testcase that\n-  uses exceptions and doing an 'nm' on the object file; if it uses __throw,\n-  it's using the first mechanism.  If it uses __sjthrow, it's using the\n-  second.\n-\n-  You can turn EH support off with -fno-exceptions.\n-\n-* RTTI support has been rewritten to work properly and is now on by default.\n-  This means code that uses virtual functions will have a modest space\n-  overhead.  You can use the -fno-rtti flag to disable RTTI support.\n-\n-* On ELF systems, duplicate copies of symbols with 'initialized common'\n-  linkage (such as template instantiations, vtables, and extern inlines)\n-  will now be discarded by the GNU linker, so you don't need to use -frepo.\n-  This support requires GNU ld from binutils 2.8 or later.\n-\n-* The overload resolution code has been rewritten to conform to the latest\n-  C++ Working Paper.  Built-in operators are now considered as candidates\n-  in operator overload resolution.  Function template overloading chooses\n-  the more specialized template, and handles base classes in type deduction\n-  and guiding declarations properly.  In this release the old code can\n-  still be selected with -fno-ansi-overloading, although this is not\n-  supported and will be removed in a future release.\n-\n-* Standard usage syntax for the std namespace is supported; std is treated\n-  as an alias for global scope.  General namespaces are still not supported.\n-\n-* New flags:\n-\n-     + New warning -Wno-pmf-conversion (don't warn about\n-       converting from a bound member function pointer to function\n-       pointer).\n-\n-     + A flag -Weffc++ has been added for violations of some of the style\n-       guidelines in Scott Meyers' _Effective C++_ books.\n-\n-     + -Woverloaded-virtual now warns if a virtual function in a base\n-       class is hidden in a derived class, rather than warning about\n-       virtual functions being overloaded (even if all of the inherited\n-       signatures are overridden) as it did before.\n-\n-     + -Wall no longer implies -W.  The new warning flag, -Wsign-compare,\n-\tincluded in -Wall, warns about dangerous comparisons of signed and\n-\tunsigned values. Only the flag is new; it was previously part of\n-\t-W.\n-\n-     + The new flag, -fno-weak, disables the use of weak symbols.\n-\n-* Synthesized methods are now emitted in any translation units that need\n-  an out-of-line copy. They are no longer affected by #pragma interface\n-  or #pragma implementation.\n-\n-* __FUNCTION__ and __PRETTY_FUNCTION__ are now treated as variables by the\n-  parser; previously they were treated as string constants.  So code like\n-  `printf (__FUNCTION__ \": foo\")' must be rewritten to\n-  `printf (\"%s: foo\", __FUNCTION__)'.  This is necessary for templates.\n-\n-* local static variables in extern inline functions will be shared between\n-  translation units.\n-\n-* -fvtable-thunks is supported for all targets, and is the default for\n-  GNU/Linux with glibc 2.x (also called libc 6.x).\n-\n-* bool is now always the same size as another built-in type. Previously,\n-  a 64-bit RISC target using a 32-bit ABI would have 32-bit pointers and a\n-  64-bit bool. This should only affect Irix 6, which was not supported in\n-  2.7.2.\n-\n-* new (nothrow) is now supported.\n-\n-* Synthesized destructors are no longer made virtual just because the class\n-  already has virtual functions, only if they override a virtual destructor\n-  in a base class.  The compiler will warn if this affects your code.\n-\n-* The g++ driver now only links against libstdc++, not libg++; it is\n-  functionally identical to the c++ driver.\n-\n-* (void *)0 is no longer considered a null pointer constant; NULL in\n-  <stddef.h> is now defined as __null, a magic constant of type (void *)\n-  normally, or (size_t) with -ansi.\n-\n-* The name of a class is now implicitly declared in its own scope; A::A\n-  refers to A.\n-\n-* Local classes are now supported.\n-\n-* __attribute__ can now be attached to types as well as declarations.\n-\n-* The compiler no longer emits a warning if an ellipsis is used as a\n-  function's argument list.\n-\n-* Definition of nested types outside of their containing class is now\n-  supported.  For instance:\n-\n-       struct A {\n-\t      struct B;\n-\t      B* bp;\n-       };\n-\n-       struct A::B {\n-\t      int member;\n-       };\n-\n-* On the HPPA, some classes that do not define a copy constructor\n-  will be passed and returned in memory again so that functions\n-  returning those types can be inlined.\n-\n-*** The g++ team thanks everyone that contributed to this release,\n-    but especially:\n-\n-* Joe Buck <jbuck@synopsys.com>, the maintainer of the g++ FAQ.\n-* Brendan Kehoe <brendan@cygnus.com>, who coordinates testing of g++.\n-* Jason Merrill <jason@cygnus.com>, the g++ maintainer.\n-* Mark Mitchell <mmitchell@usa.net>, who implemented member function\n-  templates and explicit qualification of function templates.\n-* Mike Stump <mrs@wrs.com>, the previous g++ maintainer, who did most of\n-  the exception handling work.\n-\n-\f\n-Copyright (C) 1997-2020 Free Software Foundation, Inc.\n-\n-Copying and distribution of this file, with or without modification,\n-are permitted in any medium without royalty provided the copyright\n-notice and this notice are preserved."}]}