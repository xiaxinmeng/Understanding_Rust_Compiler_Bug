{"sha": "ef74daead6d1668980566524b3a49dcc8f51295c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3NGRhZWFkNmQxNjY4OTgwNTY2NTI0YjNhNDlkY2M4ZjUxMjk1Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:33:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:33:37Z"}, "message": "[multiple changes]\n\n2017-01-13  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting and typo fix.\n\n2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (P_Aggregate_Or_Parent_Expr): An\n\tIterated_Component_Association is a named association in an\n\tarray aggregate.\n\t* sem_aggr.adb (Resolve_Iterated_Component_Association): New\n\tprocedure, subsidiary of Resolve_Array_Aggregate, to analyze\n\tand resolve the discrete choices and the expression of the\n\tnew construct.\n\t* sinfo.adb, sinfo.ads: In analogy with N_Component_Association,\n\tLoop_Actions and Box_Present are attributes of\n\tN_Iterated_Component_Association nodes. Box_Present is always\n\tFalse in this case.\n\t* sprint.adb (Sprint_Node): An Iterated_Component_Association\n\thas a Discrete_Choices list, as specified in the RM. A\n\tComponent_Association for aggregate uses instead a Choices list.\n\tWe have to live with this small inconsistency because the new\n\tconstruct also has a defining identifier, and there is no way\n\tto merge the two node structures.\n\nFrom-SVN: r244410", "tree": {"sha": "16e64aeaef0f64c0a97694cfa8298fdfe76681cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e64aeaef0f64c0a97694cfa8298fdfe76681cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef74daead6d1668980566524b3a49dcc8f51295c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef74daead6d1668980566524b3a49dcc8f51295c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef74daead6d1668980566524b3a49dcc8f51295c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef74daead6d1668980566524b3a49dcc8f51295c/comments", "author": null, "committer": null, "parents": [{"sha": "da9683f4dbc85066c290798a14d1158f804f92a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9683f4dbc85066c290798a14d1158f804f92a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9683f4dbc85066c290798a14d1158f804f92a2"}], "stats": {"total": 180, "additions": 150, "deletions": 30}, "files": [{"sha": "1ec581c459ef97be7501852404cc5998223b90ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -1,3 +1,27 @@\n+2017-01-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting and typo fix.\n+\n+2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_Aggregate_Or_Parent_Expr): An\n+\tIterated_Component_Association is a named association in an\n+\tarray aggregate.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): New\n+\tprocedure, subsidiary of Resolve_Array_Aggregate, to analyze\n+\tand resolve the discrete choices and the expression of the\n+\tnew construct.\n+\t* sinfo.adb, sinfo.ads: In analogy with N_Component_Association,\n+\tLoop_Actions and Box_Present are attributes of\n+\tN_Iterated_Component_Association nodes. Box_Present is always\n+\tFalse in this case.\n+\t* sprint.adb (Sprint_Node): An Iterated_Component_Association\n+\thas a Discrete_Choices list, as specified in the RM. A\n+\tComponent_Association for aggregate uses instead a Choices list.\n+\tWe have to live with this small inconsistency because the new\n+\tconstruct also has a defining identifier, and there is no way\n+\tto merge the two node structures.\n+\n 2017-01-13  Yannick Moy  <moy@adacore.com>\n \n \t* inline.adb (Remove_Aspects_And_Pragmas): Add Unused to the"}, {"sha": "f52b6ad5ca43f0cf2e18bcd201e04d66e0724dfe", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -1490,7 +1490,14 @@ package body Ch4 is\n          --  Assume positional case if comma, right paren, or literal or\n          --  identifier or OTHERS follows (the latter cases are missing\n          --  comma cases). Also assume positional if a semicolon follows,\n-         --  which can happen if there are missing parens\n+         --  which can happen if there are missing parens.\n+\n+         elsif Nkind (Expr_Node) = N_Iterated_Component_Association then\n+            if No (Assoc_List) then\n+               Assoc_List := New_List (Expr_Node);\n+            else\n+               Append_To (Assoc_List, Expr_Node);\n+            end if;\n \n          elsif Token = Tok_Comma\n            or else Token = Tok_Right_Paren\n@@ -1500,8 +1507,8 @@ package body Ch4 is\n          then\n             if Present (Assoc_List) then\n                Error_Msg_BC -- CODEFIX\n-                  (\"\"\"='>\"\" expected (positional association cannot follow \" &\n-                   \"named association)\");\n+                 (\"\"\"='>\"\" expected (positional association cannot follow \"\n+                  & \"named association)\");\n             end if;\n \n             if No (Expr_List) then"}, {"sha": "1b9f0affa8d4bbd2e57adda5af7e898538f3afd8", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 98, "deletions": 18, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -1180,6 +1180,11 @@ package body Sem_Aggr is\n       Index_Base_High : constant Node_Id   := Type_High_Bound (Index_Base);\n       --  Ditto for the base type\n \n+      Others_Present : Boolean := False;\n+\n+      Nb_Choices : Nat := 0;\n+      --  Contains the overall number of named choices in this sub-aggregate\n+\n       function Add (Val : Uint; To : Node_Id) return Node_Id;\n       --  Creates a new expression node where Val is added to expression To.\n       --  Tries to constant fold whenever possible. To must be an already\n@@ -1202,6 +1207,10 @@ package body Sem_Aggr is\n       function Dynamic_Or_Null_Range (L, H : Node_Id) return Boolean;\n       --  Returns True if range L .. H is dynamic or null\n \n+      function Choice_List (N : Node_Id) return List_Id;\n+      --  Utility to retrieve the choices of a Component_Association or the\n+      --  Discrete_Choices of an Iterated_Component_Association.\n+\n       procedure Get (Value : out Uint; From : Node_Id; OK : out Boolean);\n       --  Given expression node From, this routine sets OK to False if it\n       --  cannot statically evaluate From. Otherwise it stores this static\n@@ -1221,6 +1230,11 @@ package body Sem_Aggr is\n       --  N_Component_Association node as Expr, since there is no Expression in\n       --  that case, and we need a Sloc for the error message.\n \n+      procedure Resolve_Iterated_Component_Association\n+        (N         : Node_Id;\n+         Index_Typ : Entity_Id);\n+      --  For AI12-061\n+\n       ---------\n       -- Add --\n       ---------\n@@ -1459,6 +1473,19 @@ package body Sem_Aggr is\n            or else Val_L > Val_H;\n       end Dynamic_Or_Null_Range;\n \n+      -----------------\n+      -- Choice_List --\n+      -----------------\n+\n+      function Choice_List (N : Node_Id) return List_Id is\n+      begin\n+         if Nkind (N) = N_Iterated_Component_Association then\n+            return Discrete_Choices (N);\n+         else\n+            return Choices (N);\n+         end if;\n+      end Choice_List;\n+\n       ---------\n       -- Get --\n       ---------\n@@ -1626,38 +1653,83 @@ package body Sem_Aggr is\n          return Resolution_OK;\n       end Resolve_Aggr_Expr;\n \n-      --  Variables local to Resolve_Array_Aggregate\n+      --------------------------------------------\n+      -- Resolve_Iterated_Component_Association --\n+      --------------------------------------------\n+\n+      procedure Resolve_Iterated_Component_Association\n+        (N         : Node_Id;\n+         Index_Typ : Entity_Id)\n+      is\n+         Id  : constant Entity_Id  := Defining_Identifier (N);\n+         Loc : constant Source_Ptr := Sloc (N);\n+\n+         Choice : Node_Id;\n+         Dummy  : Boolean;\n+         Ent    : Entity_Id;\n+\n+      begin\n+         Choice := First (Discrete_Choices (N));\n+\n+         while Present (Choice) loop\n+            if Nkind (Choice) = N_Others_Choice then\n+               Error_Msg_N (\"others choice not allowed in this context\", N);\n+               Others_Present := True;\n+\n+            else\n+               Analyze_And_Resolve (Choice, Index_Typ);\n+            end if;\n+\n+            Nb_Choices := Nb_Choices + 1;\n+            Next (Choice);\n+         end loop;\n+\n+         --  Create a scope in which to introduce an index, which is usually\n+         --  visible in the expression for the component.\n+\n+         Ent := New_Internal_Entity (E_Loop, Current_Scope, Loc, 'L');\n+         Set_Etype  (Ent, Standard_Void_Type);\n+         Set_Parent (Ent, Parent (N));\n+\n+         Enter_Name (Id);\n+         Set_Etype (Id, Index_Typ);\n+         Set_Ekind (Id, E_Variable);\n+         Set_Scope (Id, Ent);\n+\n+         Push_Scope (Ent);\n+         Dummy := Resolve_Aggr_Expr (Expression (N), False);\n+         End_Scope;\n+      end Resolve_Iterated_Component_Association;\n+\n+      --  Local variables\n \n       Assoc   : Node_Id;\n       Choice  : Node_Id;\n       Expr    : Node_Id;\n       Discard : Node_Id;\n \n-      Delete_Choice : Boolean;\n-      --  Used when replacing a subtype choice with predicate by a list\n+      Iterated_Component_Present : Boolean := False;\n \n       Aggr_Low  : Node_Id := Empty;\n       Aggr_High : Node_Id := Empty;\n       --  The actual low and high bounds of this sub-aggregate\n \n+      Case_Table_Size : Nat;\n+      --  Contains the size of the case table needed to sort aggregate choices\n+\n       Choices_Low  : Node_Id := Empty;\n       Choices_High : Node_Id := Empty;\n       --  The lowest and highest discrete choices values for a named aggregate\n \n+      Delete_Choice : Boolean;\n+      --  Used when replacing a subtype choice with predicate by a list\n+\n       Nb_Elements : Uint := Uint_0;\n       --  The number of elements in a positional aggregate\n \n-      Others_Present : Boolean := False;\n-\n-      Nb_Choices : Nat := 0;\n-      --  Contains the overall number of named choices in this sub-aggregate\n-\n       Nb_Discrete_Choices : Nat := 0;\n       --  The overall number of discrete choices (not counting others choice)\n \n-      Case_Table_Size : Nat;\n-      --  Contains the size of the case table needed to sort aggregate choices\n-\n    --  Start of processing for Resolve_Array_Aggregate\n \n    begin\n@@ -1675,6 +1747,12 @@ package body Sem_Aggr is\n       if Present (Component_Associations (N)) then\n          Assoc := First (Component_Associations (N));\n          while Present (Assoc) loop\n+            if Nkind (Assoc) = N_Iterated_Component_Association then\n+               Resolve_Iterated_Component_Association (Assoc, Index_Typ);\n+               Iterated_Component_Present := True;\n+               goto Next_Assoc;\n+            end if;\n+\n             Choice := First (Choices (Assoc));\n             Delete_Choice := False;\n             while Present (Choice) loop\n@@ -1766,6 +1844,7 @@ package body Sem_Aggr is\n                end;\n             end loop;\n \n+            <<Next_Assoc>>\n             Next (Assoc);\n          end loop;\n       end if;\n@@ -1780,7 +1859,7 @@ package body Sem_Aggr is\n       then\n          Error_Msg_N\n            (\"named association cannot follow positional association\",\n-            First (Choices (First (Component_Associations (N)))));\n+            First (Choice_List (First (Component_Associations (N)))));\n          return Failure;\n       end if;\n \n@@ -1860,7 +1939,8 @@ package body Sem_Aggr is\n             Assoc := First (Component_Associations (N));\n             while Present (Assoc) loop\n                Prev_Nb_Discrete_Choices := Nb_Discrete_Choices;\n-               Choice := First (Choices (Assoc));\n+               Choice := First (Choice_List (Assoc));\n+\n                loop\n                   Analyze (Choice);\n \n@@ -2475,11 +2555,7 @@ package body Sem_Aggr is\n                Check_Can_Never_Be_Null (Etype (N), Expr);\n             end if;\n \n-            if Nkind (Expr) = N_Iterated_Component_Association then\n-               Error_Msg_N (\"iterated association not implemented yet\", Expr);\n-               return Failure;\n-\n-            elsif not Resolve_Aggr_Expr (Expr, Single_Elmt => True) then\n+            if not Resolve_Aggr_Expr (Expr, Single_Elmt => True) then\n                return Failure;\n             end if;\n \n@@ -2645,6 +2721,10 @@ package body Sem_Aggr is\n \n       Analyze_Dimension_Array_Aggregate (N, Component_Typ);\n \n+      if Iterated_Component_Present then\n+         Error_Msg_N (\"iterated association not implemented yet\", N);\n+      end if;\n+\n       return Success;\n    end Resolve_Array_Aggregate;\n "}, {"sha": "ba47f92e4e4b3efa6ef2a78dcb253f0a1fa170ee", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -8963,12 +8963,12 @@ package body Sem_Ch13 is\n       --  Expression to be analyzed at end of declarations\n \n       Freeze_Expr : constant Node_Id := Expression (ASN);\n-      --  Expression from call to Check_Aspect_At_Freeze_Point. We use\n+      --  Expression from call to Check_Aspect_At_Freeze_Point.\n \n       T : constant Entity_Id := Etype (Original_Node (Freeze_Expr));\n-      --  Type required for preanalyze call. We use the originsl\n-      --  expression to get the proper type, to prevent cascaded errors\n-      --  when the expression is constant-folded.\n+      --  Type required for preanalyze call. We use the original expression to\n+      --  get the proper type, to prevent cascaded errors when the expression\n+      --  is constant-folded.\n \n       Err : Boolean;\n       --  Set False if error"}, {"sha": "a99790b50f7b62b756bf99a10d75c7411f849708", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -366,7 +366,8 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Formal_Abstract_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Concrete_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Package_Declaration\n-        or else NT (N).Nkind = N_Generic_Association);\n+        or else NT (N).Nkind = N_Generic_Association\n+        or else NT (N).Nkind = N_Iterated_Component_Association);\n       return Flag15 (N);\n    end Box_Present;\n \n@@ -2201,7 +2202,8 @@ package body Sinfo is\n       (N : Node_Id) return List_Id is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Component_Association);\n+        or else NT (N).Nkind = N_Component_Association\n+        or else NT (N).Nkind = N_Iterated_Component_Association);\n       return List2 (N);\n    end Loop_Actions;\n \n@@ -3665,7 +3667,8 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Formal_Abstract_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Concrete_Subprogram_Declaration\n         or else NT (N).Nkind = N_Formal_Package_Declaration\n-        or else NT (N).Nkind = N_Generic_Association);\n+        or else NT (N).Nkind = N_Generic_Association\n+        or else NT (N).Nkind = N_Iterated_Component_Association);\n       Set_Flag15 (N, Val);\n    end Set_Box_Present;\n \n@@ -5491,7 +5494,8 @@ package body Sinfo is\n       (N : Node_Id; Val : List_Id) is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Component_Association);\n+        or else NT (N).Nkind = N_Component_Association\n+        or else NT (N).Nkind = N_Iterated_Component_Association);\n       Set_List2 (N, Val); -- semantic field, no parent set\n    end Set_Loop_Actions;\n "}, {"sha": "5ad8bbc0d32d19e157bb1c1d07348ba007dd564a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -4114,8 +4114,13 @@ package Sinfo is\n       --  N_Iterated_Component_Association\n       --  Sloc points to FOR\n       --  Defining_Identifier (Node1)\n+      --  Loop_Actions (List2-Sem)\n       --  Expression (Node3)\n       --  Discrete_Choices (List4)\n+      --  Box_Present (Flag15)\n+\n+      --  Note that Box_Present is always False, but it is intentionally added\n+      --  for completeness.\n \n       --------------------------------------------------\n       -- 4.4  Expression/Relation/Term/Factor/Primary --"}, {"sha": "a357fb2da84a3af6beca8741587183d34cb538e5", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74daead6d1668980566524b3a49dcc8f51295c/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=ef74daead6d1668980566524b3a49dcc8f51295c", "patch": "@@ -1333,7 +1333,7 @@ package body Sprint is\n             Write_Str (\" for \");\n             Write_Id (Defining_Identifier (Node));\n             Write_Str (\" in \");\n-            Sprint_Bar_List (Choices (Node));\n+            Sprint_Bar_List (Discrete_Choices (Node));\n             Write_Str (\" => \");\n             Sprint_Node (Expression (Node));\n "}]}