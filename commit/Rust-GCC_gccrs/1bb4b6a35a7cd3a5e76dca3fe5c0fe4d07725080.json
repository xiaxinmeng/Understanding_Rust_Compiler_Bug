{"sha": "1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiNGI2YTM1YTdjZDNhNWU3NmRjYTNmZTVjMGZlNGQwNzcyNTA4MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-12-20T08:46:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-12-20T08:46:38Z"}, "message": "linux-unwind.h: Update copyright years.\n\n\t* config/alpha/linux-unwind.h: Update copyright years.\n\t(MD_FROB_UPDATE_CONTEXT): New define.\n\t(alpha_frob_update_context): New function.\n\nFrom-SVN: r182522", "tree": {"sha": "4c01069c8d4a36d3346965fd7fda6c9f37d7983d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c01069c8d4a36d3346965fd7fda6c9f37d7983d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080/comments", "author": null, "committer": null, "parents": [{"sha": "cf45cd09affe4caf3a045638e26df58ebfcebe42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf45cd09affe4caf3a045638e26df58ebfcebe42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf45cd09affe4caf3a045638e26df58ebfcebe42"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "6461ad6b9ac49d38cbe93219c01ee037d48a1de4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "patch": "@@ -1,3 +1,9 @@\n+2011-12-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/linux-unwind.h: Update copyright years.\n+\t(MD_FROB_UPDATE_CONTEXT): New define.\n+\t(alpha_frob_update_context): New function.\n+\n 2011-12-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config.host (mips*-sde-elf*, mipsisa64sr71k-*-elf*): Add to\n@@ -6,7 +12,7 @@\n 2011-12-15  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/rs6000/darwin-world.S (toplevel): Make it clear that this\n-\tfunction is not used for PPC64.  \n+\tfunction is not used for PPC64.\n \t(save_world): Amend comments.  Update the VRsave mask to reflect the\n \tsaved regs.\n \t(rest_world): Update comments, do not  clobber r10, do not use r8.\n@@ -65,7 +71,7 @@\n \t(__deregister_frame_info, __cxa_finalize, _Jv_RegisterClasses,\n \tpthread_default_stacksize_np): Likewise.\n \t* config/pa/t-stublib (LIBGCCSTUB_OBJS): Add new objects and rules.\n-\t\n+\n 2011-11-29  DJ Delorie  <dj@redhat.com>\n \n \t* config.host (rl78-*-elf): New case.\n@@ -199,7 +205,7 @@\n \n \t* config/arm/lib1funcs.asm (udivsi3): Add support for divide\n \tfunctions.\n-\t(aeabi_uidivmod): Likewise.\t\n+\t(aeabi_uidivmod): Likewise.\n \t(umodsi3): Likewise.\n \t(divsi3): Likewise.\n \t(aeabi_idivmod): Likewise."}, {"sha": "4c811dca4bf4589f259785ca7ef366184e854249", "filename": "libgcc/config/alpha/linux-unwind.h", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Flinux-unwind.h?ref=1bb4b6a35a7cd3a5e76dca3fe5c0fe4d07725080", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for Alpha Linux.\n-   Copyright (C) 2004, 2005, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2009, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -36,16 +36,17 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n {\n   unsigned int *pc = context->ra;\n   struct sigcontext *sc;\n-  long new_cfa, i;\n+  long new_cfa;\n+  int i;\n \n   if (pc[0] != 0x47fe0410\t\t/* mov $30,$16 */\n-      || pc[2] != 0x00000083\t\t/* callsys */)\n+      || pc[2] != 0x00000083)\t\t/* callsys */\n     return _URC_END_OF_STACK;\n   if (context->cfa == 0)\n     return _URC_END_OF_STACK;\n   if (pc[1] == 0x201f0067)\t\t/* lda $0,NR_sigreturn */\n     sc = context->cfa;\n-  else if (pc[1] == 0x201f015f)\t/* lda $0,NR_rt_sigreturn */\n+  else if (pc[1] == 0x201f015f)\t\t/* lda $0,NR_rt_sigreturn */\n     {\n       struct rt_sigframe {\n \tstruct siginfo info;\n@@ -55,6 +56,7 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n     }\n   else\n     return _URC_END_OF_STACK;\n+\n   new_cfa = sc->sc_regs[30];\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n   fs->regs.cfa_reg = 30;\n@@ -63,13 +65,13 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n     {\n       fs->regs.reg[i].how = REG_SAVED_OFFSET;\n       fs->regs.reg[i].loc.offset\n-\t= (long)&sc->sc_regs[i] - new_cfa;\n+\t= (long) &sc->sc_regs[i] - new_cfa;\n     }\n   for (i = 0; i < 31; ++i)\n     {\n       fs->regs.reg[i+32].how = REG_SAVED_OFFSET;\n       fs->regs.reg[i+32].loc.offset\n-\t= (long)&sc->sc_fpregs[i] - new_cfa;\n+\t= (long) &sc->sc_fpregs[i] - new_cfa;\n     }\n   fs->regs.reg[64].how = REG_SAVED_OFFSET;\n   fs->regs.reg[64].loc.offset = (long)&sc->sc_pc - new_cfa;\n@@ -78,3 +80,20 @@ alpha_fallback_frame_state (struct _Unwind_Context *context,\n \n   return _URC_NO_REASON;\n }\n+\n+#define MD_FROB_UPDATE_CONTEXT alpha_frob_update_context\n+\n+/* Fix up for signal handlers that don't have S flag set.  */\n+\n+static void\n+alpha_frob_update_context (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs ATTRIBUTE_UNUSED)\n+{\n+  unsigned int *pc = context->ra;\n+\n+  if (pc[0] == 0x47fe0410\t\t/* mov $30,$16 */\n+      && pc[2] == 0x00000083\t\t/* callsys */\n+      && (pc[1] == 0x201f0067\t\t/* lda $0,NR_sigreturn */\n+\t  || pc[1] == 0x201f015f))\t/* lda $0,NR_rt_sigreturn */\n+    _Unwind_SetSignalFrame (context, 1);\n+}"}]}