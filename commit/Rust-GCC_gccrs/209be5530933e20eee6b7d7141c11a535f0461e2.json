{"sha": "209be5530933e20eee6b7d7141c11a535f0461e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5YmU1NTMwOTMzZTIwZWVlNmI3ZDcxNDFjMTFhNTM1ZjA0NjFlMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-27T11:58:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-27T11:58:20Z"}, "message": "tree-flow.h (is_hidden_global_store): Remove.\n\n2012-04-27  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (is_hidden_global_store): Remove.\n\t* tree-ssa-sink.c (is_hidden_global_store): Likewise.\n\t* tree-ssa-alias.h (ref_may_alias_global_p): Declare.\n\t(stmt_may_clobber_global_p): Likewise.\n\t* tree-ssa-alias.c (ref_may_alias_global_p): New function.\n\t(stmt_may_clobber_global_p): Likewise.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Call\n\tstmt_may_clobber_global_p.\n\t* tree-ssa-dse.c (dse_possible_dead_store_p): Likewise.\n\nFrom-SVN: r186903", "tree": {"sha": "414ccb0957bfcd13bd3b6838959bdaa52d3ef9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414ccb0957bfcd13bd3b6838959bdaa52d3ef9c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/209be5530933e20eee6b7d7141c11a535f0461e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209be5530933e20eee6b7d7141c11a535f0461e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209be5530933e20eee6b7d7141c11a535f0461e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209be5530933e20eee6b7d7141c11a535f0461e2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c813039daf28641024012fda1497960147923757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c813039daf28641024012fda1497960147923757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c813039daf28641024012fda1497960147923757"}], "stats": {"total": 139, "additions": 62, "deletions": 77}, "files": [{"sha": "88b54acf000214f739f9bf0ad9a7a67bf36d11d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -1,3 +1,15 @@\n+2012-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (is_hidden_global_store): Remove.\n+\t* tree-ssa-sink.c (is_hidden_global_store): Likewise.\n+\t* tree-ssa-alias.h (ref_may_alias_global_p): Declare.\n+\t(stmt_may_clobber_global_p): Likewise.\n+\t* tree-ssa-alias.c (ref_may_alias_global_p): New function.\n+\t(stmt_may_clobber_global_p): Likewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Call\n+\tstmt_may_clobber_global_p.\n+\t* tree-ssa-dse.c (dse_possible_dead_store_p): Likewise.\n+\n 2012-04-27  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cfg.c (disconnect_src): Do df_mark_solutions_dirty in the right"}, {"sha": "794047bc7f0eed95a0f976e12cc3b2301c9bf6b9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -795,9 +795,6 @@ extern void maybe_remove_unreachable_handlers (void);\n /* In tree-ssa-pre.c  */\n void debug_value_expressions (unsigned int);\n \n-/* In tree-ssa-sink.c  */\n-bool is_hidden_global_store (gimple);\n-\n /* In tree-loop-linear.c  */\n extern void linear_transform_loops (void);\n extern unsigned perfect_loop_nest_depth (struct loop *);"}, {"sha": "ec1bbbe0bff971c7d3563efe63ac5fb81ee56e51", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -328,6 +328,52 @@ ptr_deref_may_alias_ref_p_1 (tree ptr, ao_ref *ref)\n   return true;\n }\n \n+/* Return true whether REF may refer to global memory.  */\n+\n+bool\n+ref_may_alias_global_p (tree ref)\n+{\n+  tree base = get_base_address (ref);\n+  if (DECL_P (base))\n+    return is_global_var (base);\n+  else if (TREE_CODE (base) == MEM_REF\n+\t   || TREE_CODE (base) == TARGET_MEM_REF)\n+    return ptr_deref_may_alias_global_p (TREE_OPERAND (base, 0));\n+  return true;\n+}\n+\n+/* Return true whether STMT may clobber global memory.  */\n+\n+bool\n+stmt_may_clobber_global_p (gimple stmt)\n+{\n+  tree lhs;\n+\n+  if (!gimple_vdef (stmt))\n+    return false;\n+\n+  /* ???  We can ask the oracle whether an artificial pointer\n+     dereference with a pointer with points-to information covering\n+     all global memory (what about non-address taken memory?) maybe\n+     clobbered by this call.  As there is at the moment no convenient\n+     way of doing that without generating garbage do some manual\n+     checking instead.\n+     ???  We could make a NULL ao_ref argument to the various\n+     predicates special, meaning any global memory.  */\n+\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_ASSIGN:\n+      lhs = gimple_assign_lhs (stmt);\n+      return (TREE_CODE (lhs) != SSA_NAME\n+\t      && ref_may_alias_global_p (lhs));\n+    case GIMPLE_CALL:\n+      return true;\n+    default:\n+      return true;\n+    }\n+}\n+\n \n /* Dump alias information on FILE.  */\n "}, {"sha": "88f6d86f7e2776cfe4ec295c4d198858f8c8ae1e", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -99,11 +99,13 @@ extern tree ao_ref_base (ao_ref *);\n extern alias_set_type ao_ref_alias_set (ao_ref *);\n extern bool ptr_deref_may_alias_global_p (tree);\n extern bool ptr_derefs_may_alias_p (tree, tree);\n+extern bool ref_may_alias_global_p (tree);\n extern bool refs_may_alias_p (tree, tree);\n extern bool refs_may_alias_p_1 (ao_ref *, ao_ref *, bool);\n extern bool refs_anti_dependent_p (tree, tree);\n extern bool refs_output_dependent_p (tree, tree);\n extern bool ref_maybe_used_by_stmt_p (gimple, tree);\n+extern bool stmt_may_clobber_global_p (gimple);\n extern bool stmt_may_clobber_ref_p (gimple, tree);\n extern bool stmt_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern bool call_may_clobber_ref_p (gimple, tree);"}, {"sha": "d954f3b43e3ed32d9aa4c39e0d8e2b4c519c18d8", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -370,7 +370,7 @@ mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n       return;\n     }\n \n-  if (is_hidden_global_store (stmt))\n+  if (stmt_may_clobber_global_p (stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;"}, {"sha": "a8599420763ee8533060fdd583b3e1a43a758233", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -169,7 +169,7 @@ dse_possible_dead_store_p (gimple stmt, gimple *use_stmt)\n \t just pretend the stmt makes itself dead.  Otherwise fail.  */\n       if (!temp)\n \t{\n-\t  if (is_hidden_global_store (stmt))\n+\t  if (stmt_may_clobber_global_p (stmt))\n \t    return false;\n \n \t  temp = stmt;"}, {"sha": "951e427f0b1e69182cf2636729eee58be4c0276b", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209be5530933e20eee6b7d7141c11a535f0461e2/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=209be5530933e20eee6b7d7141c11a535f0461e2", "patch": "@@ -132,78 +132,6 @@ all_immediate_uses_same_place (gimple stmt)\n   return true;\n }\n \n-/* Some global stores don't necessarily have VDEF's of global variables,\n-   but we still must avoid moving them around.  */\n-\n-bool\n-is_hidden_global_store (gimple stmt)\n-{\n-  /* Check virtual definitions.  If we get here, the only virtual\n-     definitions we should see are those generated by assignment or call\n-     statements.  */\n-  if (gimple_vdef (stmt))\n-    {\n-      tree lhs;\n-\n-      gcc_assert (is_gimple_assign (stmt) || is_gimple_call (stmt));\n-\n-      /* Note that we must not check the individual virtual operands\n-\t here.  In particular, if this is an aliased store, we could\n-\t end up with something like the following (SSA notation\n-\t redacted for brevity):\n-\n-\t \tfoo (int *p, int i)\n-\t\t{\n-\t\t  int x;\n-\t\t  p_1 = (i_2 > 3) ? &x : p;\n-\n-\t\t  # x_4 = VDEF <x_3>\n-\t\t  *p_1 = 5;\n-\n-\t\t  return 2;\n-\t\t}\n-\n-\t Notice that the store to '*p_1' should be preserved, if we\n-\t were to check the virtual definitions in that store, we would\n-\t not mark it needed.  This is because 'x' is not a global\n-\t variable.\n-\n-\t Therefore, we check the base address of the LHS.  If the\n-\t address is a pointer, we check if its name tag or symbol tag is\n-\t a global variable.  Otherwise, we check if the base variable\n-\t is a global.  */\n-      lhs = gimple_get_lhs (stmt);\n-\n-      if (REFERENCE_CLASS_P (lhs))\n-\tlhs = get_base_address (lhs);\n-\n-      if (lhs == NULL_TREE)\n-\t{\n-\t  /* If LHS is NULL, it means that we couldn't get the base\n-\t     address of the reference.  In which case, we should not\n-\t     move this store.  */\n-\t  return true;\n-\t}\n-      else if (DECL_P (lhs))\n-\t{\n-\t  /* If the store is to a global symbol, we need to keep it.  */\n-\t  if (is_global_var (lhs))\n-\t    return true;\n-\n-\t}\n-      else if (INDIRECT_REF_P (lhs)\n-\t       || TREE_CODE (lhs) == MEM_REF\n-\t       || TREE_CODE (lhs) == TARGET_MEM_REF)\n-\treturn ptr_deref_may_alias_global_p (TREE_OPERAND (lhs, 0));\n-      else if (CONSTANT_CLASS_P (lhs))\n-\treturn true;\n-      else\n-\tgcc_unreachable ();\n-    }\n-\n-  return false;\n-}\n-\n /* Find the nearest common dominator of all of the immediate uses in IMM.  */\n \n static basic_block"}]}