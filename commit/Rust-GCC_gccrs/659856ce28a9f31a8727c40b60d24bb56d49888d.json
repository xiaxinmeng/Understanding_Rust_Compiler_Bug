{"sha": "659856ce28a9f31a8727c40b60d24bb56d49888d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5ODU2Y2UyOGE5ZjMxYTg3MjdjNDBiNjBkMjRiYjU2ZDQ5ODg4ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-02-07T00:11:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-02-07T00:11:27Z"}, "message": "Add new files erroneously omitted from r220494.\n\nFrom-SVN: r220496", "tree": {"sha": "4b9bb40289aac9a21044483f528cc778a6a7b7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9bb40289aac9a21044483f528cc778a6a7b7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/659856ce28a9f31a8727c40b60d24bb56d49888d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659856ce28a9f31a8727c40b60d24bb56d49888d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659856ce28a9f31a8727c40b60d24bb56d49888d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659856ce28a9f31a8727c40b60d24bb56d49888d/comments", "author": null, "committer": null, "parents": [{"sha": "a82289f536862ea01ae5b221f0e1e3a79eb5b541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82289f536862ea01ae5b221f0e1e3a79eb5b541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82289f536862ea01ae5b221f0e1e3a79eb5b541"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "363171f67643806ed567b2aa8863c1e91f41ca3c", "filename": "gcc/testsuite/jit.dg/create-code-for-hello-world-executable.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659856ce28a9f31a8727c40b60d24bb56d49888d/gcc%2Ftestsuite%2Fjit.dg%2Fcreate-code-for-hello-world-executable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659856ce28a9f31a8727c40b60d24bb56d49888d/gcc%2Ftestsuite%2Fjit.dg%2Fcreate-code-for-hello-world-executable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fcreate-code-for-hello-world-executable.h?ref=659856ce28a9f31a8727c40b60d24bb56d49888d", "patch": "@@ -0,0 +1,101 @@\n+/* This code is shared by various test-compile-to-*.c test cases\n+   that ultimately generate a standalone executable\n+   (all of them apart from test-compile-to-dynamic-library.c).  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     static void\n+     hello_world (const char *name)\n+     {\n+       // a test comment\n+       printf (\"hello from %s\\n\", name);\n+     }\n+\n+     extern int\n+     main (int argc, char **argv)\n+     {\n+       hello_world (argv[0]);\n+       return 0;\n+     }\n+  */\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *const_char_ptr_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CONST_CHAR_PTR);\n+  gcc_jit_param *param_name =\n+    gcc_jit_context_new_param (ctxt, NULL, const_char_ptr_type, \"name\");\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_INTERNAL,\n+\t\t\t\t  void_type,\n+\t\t\t\t  \"hello_world\",\n+\t\t\t\t  1, &param_name,\n+\t\t\t\t  0);\n+\n+  gcc_jit_param *param_format =\n+    gcc_jit_context_new_param (ctxt, NULL, const_char_ptr_type, \"format\");\n+  gcc_jit_function *printf_func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_IMPORTED,\n+\t\t\t\t  gcc_jit_context_get_type (\n+\t\t\t\t     ctxt, GCC_JIT_TYPE_INT),\n+\t\t\t\t  \"printf\",\n+\t\t\t\t  1, &param_format,\n+\t\t\t\t  1);\n+  gcc_jit_rvalue *args[2];\n+  args[0] = gcc_jit_context_new_string_literal (ctxt, \"hello from %s\\n\");\n+  args[1] = gcc_jit_param_as_rvalue (param_name);\n+\n+  gcc_jit_block *block = gcc_jit_function_new_block (func, NULL);\n+\n+  gcc_jit_block_add_comment (\n+    block, NULL,\n+    \"a test comment\");\n+\n+  gcc_jit_block_add_eval (\n+    block, NULL,\n+    gcc_jit_context_new_call (ctxt,\n+\t\t\t      NULL,\n+\t\t\t      printf_func,\n+\t\t\t      2, args));\n+  gcc_jit_block_end_with_void_return (block, NULL);\n+\n+  gcc_jit_type *int_type = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_param *param_argc =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"argc\");\n+  gcc_jit_type *char_ptr_ptr_type =\n+    gcc_jit_type_get_pointer (\n+      gcc_jit_type_get_pointer (\n+\tgcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR)));\n+  gcc_jit_param *param_argv =\n+    gcc_jit_context_new_param (ctxt, NULL, char_ptr_ptr_type, \"argv\");\n+  gcc_jit_param *params[2] = {param_argc, param_argv};\n+  gcc_jit_function *func_main =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  int_type,\n+\t\t\t\t  \"main\",\n+\t\t\t\t  2, params,\n+\t\t\t\t  0);\n+  block = gcc_jit_function_new_block (func_main, NULL);\n+  gcc_jit_rvalue *zero = gcc_jit_context_zero (ctxt, int_type);\n+  args[0] = gcc_jit_context_new_cast (\n+\tctxt,\n+\tNULL,\n+\tgcc_jit_lvalue_as_rvalue (\n+\t  gcc_jit_context_new_array_access (\n+\t    ctxt,\n+\t    NULL,\n+\t    gcc_jit_param_as_rvalue (param_argv),\n+\t    zero)),\n+\tconst_char_ptr_type);\n+  gcc_jit_block_add_eval (\n+    block, NULL,\n+    gcc_jit_context_new_call (ctxt,\n+\t\t\t      NULL,\n+\t\t\t      func,\n+\t\t\t      1, args));\n+  gcc_jit_block_end_with_return (block, NULL, zero);\n+}"}, {"sha": "99f9128bc660218f17dc1eb3fdc2a830f487c2f0", "filename": "gcc/testsuite/jit.dg/verify-dynamic-library.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659856ce28a9f31a8727c40b60d24bb56d49888d/gcc%2Ftestsuite%2Fjit.dg%2Fverify-dynamic-library.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659856ce28a9f31a8727c40b60d24bb56d49888d/gcc%2Ftestsuite%2Fjit.dg%2Fverify-dynamic-library.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fverify-dynamic-library.c?ref=659856ce28a9f31a8727c40b60d24bb56d49888d", "patch": "@@ -0,0 +1,41 @@\n+/* For use by jit-verify-dynamic-library, used by\n+   test-compile-to-dynamic-library.c.  */\n+#include <dlfcn.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  void *handle;\n+  void (*hello_world) (const char *name);\n+  char *error;\n+\n+  handle = dlopen (\"./output-of-test-compile-to-dynamic-library.c.so\",\n+\t\t   RTLD_NOW | RTLD_LOCAL);\n+  if (!handle)\n+    {\n+      fprintf (stderr, \"dlopen failed: %s\\n\", dlerror());\n+      exit (1);\n+    }\n+\n+  /* Clear any existing error */\n+  dlerror ();\n+\n+  /* This symbol is from the DSO built by\n+     test-compile-to-dynamic-library.c.  */\n+  *(void **) (&hello_world) = dlsym (handle, \"hello_world\");\n+\n+  if ((error = dlerror()) != NULL)\n+    {\n+      fprintf (stderr, \"dlsym failed: %s\\n\", error);\n+      exit (2);\n+    }\n+\n+  /* Call the function from the generated DSO.  */\n+  hello_world (argv[0]);\n+\n+  dlclose (handle);\n+\n+  return 0;\n+}"}]}