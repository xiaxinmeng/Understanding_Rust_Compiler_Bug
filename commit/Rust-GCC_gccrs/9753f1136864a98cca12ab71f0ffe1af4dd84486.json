{"sha": "9753f1136864a98cca12ab71f0ffe1af4dd84486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1M2YxMTM2ODY0YTk4Y2NhMTJhYjcxZjBmZmUxYWY0ZGQ4NDQ4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-03T21:34:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-03T21:34:57Z"}, "message": "(default_conversion): Add bitfield promotions.\n\nFrom-SVN: r12389", "tree": {"sha": "3aaa13afd22e76d95ea2fc4fa9591888538ed6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aaa13afd22e76d95ea2fc4fa9591888538ed6f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9753f1136864a98cca12ab71f0ffe1af4dd84486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9753f1136864a98cca12ab71f0ffe1af4dd84486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9753f1136864a98cca12ab71f0ffe1af4dd84486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9753f1136864a98cca12ab71f0ffe1af4dd84486/comments", "author": null, "committer": null, "parents": [{"sha": "4689ad58a187bc99c5cc2299fdd07bcd3363f09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4689ad58a187bc99c5cc2299fdd07bcd3363f09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4689ad58a187bc99c5cc2299fdd07bcd3363f09b"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "9960f11955211e4e8bc69ccac1cb42336089d2ce", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9753f1136864a98cca12ab71f0ffe1af4dd84486/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9753f1136864a98cca12ab71f0ffe1af4dd84486/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9753f1136864a98cca12ab71f0ffe1af4dd84486", "patch": "@@ -1010,6 +1010,24 @@ default_conversion (exp)\n       return convert (type, exp);\n     }\n \n+  if (TREE_CODE (exp) == COMPONENT_REF\n+      && DECL_BIT_FIELD (TREE_OPERAND (exp, 1)))\n+    {\n+    tree width = DECL_SIZE (TREE_OPERAND (exp, 1));\n+    HOST_WIDE_INT low = TREE_INT_CST_LOW (width);\n+\n+    /* If it's thinner than an int, promote it like a\n+       C_PROMOTING_INTEGER_TYPE_P, otherwise leave it alone.  */\n+\n+    if (low < TYPE_PRECISION (integer_type_node))\n+      {\n+\tif ( flag_traditional && TREE_UNSIGNED (type))\n+\t  return convert (unsigned_type_node, exp);\n+\telse\n+\t  return convert (integer_type_node, exp);\n+      }\n+    }\n+\n   if (C_PROMOTING_INTEGER_TYPE_P (type))\n     {\n       /* Traditionally, unsignedness is preserved in default promotions."}]}