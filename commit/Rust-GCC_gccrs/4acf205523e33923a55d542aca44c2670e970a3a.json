{"sha": "4acf205523e33923a55d542aca44c2670e970a3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjZjIwNTUyM2UzMzkyM2E1NWQ1NDJhY2E0NGMyNjcwZTk3MGEzYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-17T19:57:12Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-17T19:57:12Z"}, "message": "re PR fortran/77978 (stop codes misinterpreted in both f2003 and f2008)\n\n2016-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/77978\n\t* match.c (gfc_match_stopcode): Fix error reporting for several\n\tdeficiencies in matching stop-codes.\n \n2016-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/77978\n\t* gfortran.dg/pr77978_1.f90: New test.\n\t* gfortran.dg/pr77978_2.f90: Ditto.\n\t* gfortran.dg/pr77978_3.f90: Ditto.\n\nFrom-SVN: r241279", "tree": {"sha": "301af084648f9800d649bc6d609c03b6be9f3847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/301af084648f9800d649bc6d609c03b6be9f3847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4acf205523e33923a55d542aca44c2670e970a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acf205523e33923a55d542aca44c2670e970a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acf205523e33923a55d542aca44c2670e970a3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acf205523e33923a55d542aca44c2670e970a3a/comments", "author": null, "committer": null, "parents": [{"sha": "8fa18c06a2977b0ef00c440f5f103f612ce6dc61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa18c06a2977b0ef00c440f5f103f612ce6dc61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa18c06a2977b0ef00c440f5f103f612ce6dc61"}], "stats": {"total": 170, "additions": 161, "deletions": 9}, "files": [{"sha": "ff4ffadeeaadc3ea9d6a7c354bdc0a4cb39e7d72", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -1,3 +1,9 @@\n+2016-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/77978\n+\t* match.c (gfc_match_stopcode): Fix error reporting for several\n+\tdeficiencies in matching stop-codes.\n+\n 2016-10-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/61420"}, {"sha": "a19968ba7e8a4fe48c58b36c67ab62902987a28c", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 97, "deletions": 9, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -2731,20 +2731,92 @@ gfc_match_cycle (void)\n }\n \n \n-/* Match a number or character constant after an (ERROR) STOP or PAUSE\n-   statement.  */\n+/* Match a stop-code after an (ERROR) STOP or PAUSE statement.  The\n+   requirements for a stop-code differ in the standards.\n+\n+Fortran 95 has\n+\n+   R840 stop-stmt  is STOP [ stop-code ]\n+   R841 stop-code  is scalar-char-constant\n+                   or digit [ digit [ digit [ digit [ digit ] ] ] ]\n+\n+Fortran 2003 matches Fortran 95 except R840 and R841 are now R849 and R850.\n+Fortran 2008 has\n+\n+   R855 stop-stmt     is STOP [ stop-code ]\n+   R856 allstop-stmt  is ALL STOP [ stop-code ]\n+   R857 stop-code     is scalar-default-char-constant-expr\n+                      or scalar-int-constant-expr\n+\n+For free-form source code, all standards contain a statement of the form:\n+\n+   A blank shall be used to separate names, constants, or labels from\n+   adjacent keywords, names, constants, or labels.\n+\n+A stop-code is not a name, constant, or label.  So, under Fortran 95 and 2003,\n+\n+  STOP123\n+\n+is valid, but it is invalid Fortran 2008.  */\n \n static match\n gfc_match_stopcode (gfc_statement st)\n {\n-  gfc_expr *e;\n+  gfc_expr *e = NULL;\n   match m;\n+  bool f95, f03;\n \n-  e = NULL;\n+  /* Set f95 for -std=f95.  */\n+  f95 = gfc_option.allow_std == (GFC_STD_F95_OBS | GFC_STD_F95 | GFC_STD_F77\n+\t\t\t\t | GFC_STD_F2008_OBS);\n+\n+  /* Set f03 for -std=f2003.  */\n+  f03 = gfc_option.allow_std == (GFC_STD_F95_OBS | GFC_STD_F95 | GFC_STD_F77 \n+\t\t\t\t | GFC_STD_F2008_OBS | GFC_STD_F2003);\n+\n+  /* Look for a blank between STOP and the stop-code for F2008 or later.  */\n+  if (gfc_current_form != FORM_FIXED && !(f95 || f03))\n+    {\n+      char c = gfc_peek_ascii_char ();\n+\n+      /* Look for end-of-statement.  There is no stop-code.  */\n+      if (c == '\\n' || c == '!' || c == ';')\n+        goto done;\n+\n+      if (c != ' ')\n+\t{\n+\t  gfc_error (\"Blank required in %s statement near %C\",\n+\t\t     gfc_ascii_statement (st));\n+\t  return MATCH_ERROR;\n+\t}\n+    }\n \n   if (gfc_match_eos () != MATCH_YES)\n     {\n-      m = gfc_match_init_expr (&e);\n+      int stopcode;\n+      locus old_locus;\n+\n+      /* First look for the F95 or F2003 digit [...] construct.  */\n+      old_locus = gfc_current_locus;\n+      m = gfc_match_small_int (&stopcode);\n+      if (m == MATCH_YES && (f95 || f03))\n+\t{\n+\t  if (stopcode < 0)\n+\t    {\n+\t      gfc_error (\"STOP code at %C cannot be negative\");\n+\t      return MATCH_ERROR;\n+\t    }\n+\n+\t  if (stopcode > 99999)\n+\t    {\n+\t      gfc_error (\"STOP code at %C contains too many digits\");\n+\t      return MATCH_ERROR;\n+\t    }\n+\t}\n+\n+      /* Reset the locus and now load gfc_expr.  */\n+      gfc_current_locus = old_locus;\n+      m = gfc_match_expr (&e);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n@@ -2785,6 +2857,22 @@ gfc_match_stopcode (gfc_statement st)\n \n   if (e != NULL)\n     {\n+      gfc_simplify_expr (e, 0);\n+\n+      /* Test for F95 and F2003 style STOP stop-code.  */\n+      if (e->expr_type != EXPR_CONSTANT && (f95 || f03))\n+\t{\n+\t  gfc_error (\"STOP code at %L must be a scalar CHARACTER constant or \"\n+\t\t     \"digit[digit[digit[digit[digit]]]]\", &e->where);\n+\t  goto cleanup;\n+\t}\n+\n+      /* Use the machinery for an initialization expression to reduce the\n+\t stop-code to a constant.  */\n+      gfc_init_expr_flag = true;\n+      gfc_reduce_init_expr (e);\n+      gfc_init_expr_flag = false;\n+\n       if (!(e->ts.type == BT_CHARACTER || e->ts.type == BT_INTEGER))\n \t{\n \t  gfc_error (\"STOP code at %L must be either INTEGER or CHARACTER type\",\n@@ -2794,8 +2882,7 @@ gfc_match_stopcode (gfc_statement st)\n \n       if (e->rank != 0)\n \t{\n-\t  gfc_error (\"STOP code at %L must be scalar\",\n-\t\t     &e->where);\n+\t  gfc_error (\"STOP code at %L must be scalar\", &e->where);\n \t  goto cleanup;\n \t}\n \n@@ -2807,15 +2894,16 @@ gfc_match_stopcode (gfc_statement st)\n \t  goto cleanup;\n \t}\n \n-      if (e->ts.type == BT_INTEGER\n-\t  && e->ts.kind != gfc_default_integer_kind)\n+      if (e->ts.type == BT_INTEGER && e->ts.kind != gfc_default_integer_kind)\n \t{\n \t  gfc_error (\"STOP code at %L must be default integer KIND=%d\",\n \t\t     &e->where, (int) gfc_default_integer_kind);\n \t  goto cleanup;\n \t}\n     }\n \n+done:\n+\n   switch (st)\n     {\n     case ST_STOP:"}, {"sha": "7d4a4416e49af0d0e02fef6ec246d0dd79a22c07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -1,3 +1,10 @@\n+2016-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/77978\n+\t* gfortran.dg/pr77978_1.f90: New test.\n+\t* gfortran.dg/pr77978_2.f90: Ditto.\n+\t* gfortran.dg/pr77978_3.f90: Ditto.\n+\n 2016-10-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/61420"}, {"sha": "a158f1b78720a717ee206441e7e2b783ffe18c01", "filename": "gcc/testsuite/gfortran.dg/pr77978_1.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_1.f90?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+subroutine a1\n+  integer, parameter :: i = -666\n+  stop i ! { dg-error \"cannot be negative\" }\n+end subroutine a1\n+\n+subroutine a2\n+  stop -666 ! { dg-error \"cannot be negative\" }\n+end subroutine a2\n+\n+subroutine a3\n+  integer, parameter :: i = 123456\n+  stop i ! { dg-error \"too many digits\" }\n+end subroutine a3\n+\n+subroutine a4\n+  stop 123456 ! { dg-error \"too many digits\" }\n+end subroutine a4\n+\n+!subroutine a5\n+!  stop merge(667,668,.true.) \n+!end subroutine a5"}, {"sha": "d6f2e78cf4329c17ab121ef1810754251c7f9a2a", "filename": "gcc/testsuite/gfortran.dg/pr77978_2.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_2.f90?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+subroutine a1\n+  stop666 ! { dg-error \"Blank required in STOP\" }\n+end subroutine a1"}, {"sha": "0a3557be64a59e151141859d97cd79ca782cfd23", "filename": "gcc/testsuite/gfortran.dg/pr77978_3.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acf205523e33923a55d542aca44c2670e970a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77978_3.f90?ref=4acf205523e33923a55d542aca44c2670e970a3a", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+subroutine a1\n+  integer, parameter :: i = -666\n+  stop i\n+end subroutine a1\n+\n+subroutine a2\n+  stop -666\n+end subroutine a2\n+\n+subroutine a3\n+  integer, parameter :: i = 123456\n+  stop i\n+end subroutine a3\n+\n+subroutine a4\n+  stop 123456\n+end subroutine a4\n+\n+subroutine a5\n+  stop merge(667,668,.true.) \n+end subroutine a5"}]}