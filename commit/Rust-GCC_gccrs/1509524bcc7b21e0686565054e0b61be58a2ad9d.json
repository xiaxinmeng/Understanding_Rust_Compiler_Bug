{"sha": "1509524bcc7b21e0686565054e0b61be58a2ad9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwOTUyNGJjYzdiMjFlMDY4NjU2NTA1NGUwYjYxYmU1OGEyYWQ5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-10T23:34:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-10T23:34:49Z"}, "message": "re PR sanitizer/79341 (Many Asan tests fail on s390)\n\n\tPR sanitizer/79341\n\t* configure.tgt (s390*-*-linux*): Don't disable libsanitizer on\n\ts390-linux 31-bit.\n\t* sanitizer_common/sanitizer_internal_defs.h: Cherry-pick upstream\n\tr294793.\n\t* sanitizer_common/sanitizer_common_interceptors.inc: Cherry-pick\n\tupstream r294790.\n\t* sanitizer_common/sanitizer_linux_s390.cc: Cherry-pick upstream\n\tr294799.\n\nFrom-SVN: r245350", "tree": {"sha": "02d0911eed20219e443b49643f417e95a31eb25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02d0911eed20219e443b49643f417e95a31eb25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1509524bcc7b21e0686565054e0b61be58a2ad9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1509524bcc7b21e0686565054e0b61be58a2ad9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1509524bcc7b21e0686565054e0b61be58a2ad9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1509524bcc7b21e0686565054e0b61be58a2ad9d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42f8e766cc32d1a485351a5baddceda15cd6d4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f8e766cc32d1a485351a5baddceda15cd6d4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f8e766cc32d1a485351a5baddceda15cd6d4f6"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "e60f31bbc466fe42c244c9ff75f2a34cd82d04ea", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=1509524bcc7b21e0686565054e0b61be58a2ad9d", "patch": "@@ -1,3 +1,15 @@\n+2017-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/79341\n+\t* configure.tgt (s390*-*-linux*): Don't disable libsanitizer on\n+\ts390-linux 31-bit.\n+\t* sanitizer_common/sanitizer_internal_defs.h: Cherry-pick upstream\n+\tr294793.\n+\t* sanitizer_common/sanitizer_common_interceptors.inc: Cherry-pick\n+\tupstream r294790.\n+\t* sanitizer_common/sanitizer_linux_s390.cc: Cherry-pick upstream\n+\tr294799.\n+\n 2017-02-03  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR sanitizer/78663"}, {"sha": "82e8a5513c596b939ebfc243d098b3654e53136b", "filename": "libsanitizer/configure.tgt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.tgt?ref=1509524bcc7b21e0686565054e0b61be58a2ad9d", "patch": "@@ -40,9 +40,6 @@ case \"${target}\" in\n   sparc*-*-linux*)\n \t;;\n   s390*-*-linux*)\n-\tif test x$ac_cv_sizeof_void_p = x4; then\n-\t\tUNSUPPORTED=1\n-\tfi\n \t;;\n   arm*-*-linux*)\n \t;;"}, {"sha": "0970eda5ee644bb69c8139c9833710a59b249abc", "filename": "libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_common_interceptors.inc?ref=1509524bcc7b21e0686565054e0b61be58a2ad9d", "patch": "@@ -4550,11 +4550,15 @@ void *__tls_get_addr_opt(void *arg);\n //   descriptor offset as an argument instead of a pointer.  GOT address\n //   is passed in r12, so it's necessary to write it in assembly.  This is\n //   the function used by the compiler.\n-#define INIT_TLS_GET_ADDR COMMON_INTERCEPT_FUNCTION(__tls_get_addr_internal)\n+extern \"C\" uptr __tls_get_offset_wrapper(void *arg, uptr (*fn)(void *arg));\n+#define INIT_TLS_GET_ADDR COMMON_INTERCEPT_FUNCTION(__tls_get_offset)\n+DEFINE_REAL(uptr, __tls_get_offset, void *arg)\n+extern \"C\" uptr __tls_get_offset(void *arg);\n+extern \"C\" uptr __interceptor___tls_get_offset(void *arg);\n INTERCEPTOR(uptr, __tls_get_addr_internal, void *arg) {\n   void *ctx;\n   COMMON_INTERCEPTOR_ENTER(ctx, __tls_get_addr_internal, arg);\n-  uptr res = REAL(__tls_get_addr_internal)(arg);\n+  uptr res = __tls_get_offset_wrapper(arg, REAL(__tls_get_offset));\n   uptr tp = reinterpret_cast<uptr>(__builtin_thread_pointer());\n   void *ptr = reinterpret_cast<void *>(res + tp);\n   uptr tls_begin, tls_end;\n@@ -4566,32 +4570,43 @@ INTERCEPTOR(uptr, __tls_get_addr_internal, void *arg) {\n   }\n   return res;\n }\n-// We need a protected symbol aliasing the above, so that we can jump\n+// We need a hidden symbol aliasing the above, so that we can jump\n // directly to it from the assembly below.\n extern \"C\" __attribute__((alias(\"__interceptor___tls_get_addr_internal\"),\n-                          visibility(\"protected\")))\n-uptr __interceptor___tls_get_addr_internal_protected(void *arg);\n+                          visibility(\"hidden\")))\n+uptr __tls_get_addr_hidden(void *arg);\n // Now carefully intercept __tls_get_offset.\n asm(\n   \".text\\n\"\n-  \".global __tls_get_offset\\n\"\n-  \"__tls_get_offset:\\n\"\n // The __intercept_ version has to exist, so that gen_dynamic_list.py\n // exports our symbol.\n+  \".weak __tls_get_offset\\n\"\n+  \".type __tls_get_offset, @function\\n\"\n+  \"__tls_get_offset:\\n\"\n   \".global __interceptor___tls_get_offset\\n\"\n+  \".type __interceptor___tls_get_offset, @function\\n\"\n   \"__interceptor___tls_get_offset:\\n\"\n #ifdef __s390x__\n   \"la %r2, 0(%r2,%r12)\\n\"\n-  \"jg __interceptor___tls_get_addr_internal_protected\\n\"\n+  \"jg __tls_get_addr_hidden\\n\"\n #else\n   \"basr %r3,0\\n\"\n   \"0: la %r2,0(%r2,%r12)\\n\"\n   \"l %r4,1f-0b(%r3)\\n\"\n   \"b 0(%r4,%r3)\\n\"\n-  \"1: .long __interceptor___tls_get_addr_internal_protected - 0b\\n\"\n+  \"1: .long __tls_get_addr_hidden - 0b\\n\"\n #endif\n-  \".type __tls_get_offset, @function\\n\"\n-  \".size __tls_get_offset, .-__tls_get_offset\\n\"\n+  \".size __interceptor___tls_get_offset, .-__interceptor___tls_get_offset\\n\"\n+// Assembly wrapper to call REAL(__tls_get_offset)(arg)\n+  \".type __tls_get_offset_wrapper, @function\\n\"\n+  \"__tls_get_offset_wrapper:\\n\"\n+#ifdef __s390x__\n+  \"sgr %r2,%r12\\n\"\n+#else\n+  \"sr %r2,%r12\\n\"\n+#endif\n+  \"br %r3\\n\"\n+  \".size __tls_get_offset_wrapper, .-__tls_get_offset_wrapper\\n\"\n );\n #endif // SANITIZER_S390\n #else"}, {"sha": "676ade143d8863d219880e9fc0b822c614b51219", "filename": "libsanitizer/sanitizer_common/sanitizer_internal_defs.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h?ref=1509524bcc7b21e0686565054e0b61be58a2ad9d", "patch": "@@ -287,7 +287,12 @@ void NORETURN CheckFailed(const char *file, int line, const char *cond,\n enum LinkerInitialized { LINKER_INITIALIZED = 0 };\n \n #if !defined(_MSC_VER) || defined(__clang__)\n-# define GET_CALLER_PC() (uptr)__builtin_return_address(0)\n+# if SANITIZER_S390_31\n+#  define GET_CALLER_PC() \\\n+  (uptr)__builtin_extract_return_addr(__builtin_return_address(0))\n+# else\n+#  define GET_CALLER_PC() (uptr)__builtin_return_address(0)\n+# endif\n # define GET_CURRENT_FRAME() (uptr)__builtin_frame_address(0)\n inline void Trap() {\n   __builtin_trap();"}, {"sha": "3faaa1c26ac39c7060f823c2ffe4dc0bcfc49f8e", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_s390.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_s390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1509524bcc7b21e0686565054e0b61be58a2ad9d/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_s390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_s390.cc?ref=1509524bcc7b21e0686565054e0b61be58a2ad9d", "patch": "@@ -134,6 +134,18 @@ static bool FixedCVE_2016_2143() {\n   if (ptr[0] == '.')\n     patch = internal_simple_strtoll(ptr+1, &ptr, 10);\n   if (major < 3) {\n+    if (major == 2 && minor == 6 && patch == 32 && ptr[0] == '-' &&\n+        internal_strstr(ptr, \".el6\")) {\n+      // Check RHEL6\n+      int r1 = internal_simple_strtoll(ptr+1, &ptr, 10);\n+      if (r1 >= 657) // 2.6.32-657.el6 or later\n+        return true;\n+      if (r1 == 642 && ptr[0] == '.') {\n+        int r2 = internal_simple_strtoll(ptr+1, &ptr, 10);\n+        if (r2 >= 9) // 2.6.32-642.9.1.el6 or later\n+          return true;\n+      }\n+    }\n     // <3.0 is bad.\n     return false;\n   } else if (major == 3) {\n@@ -143,6 +155,18 @@ static bool FixedCVE_2016_2143() {\n     // 3.12.58+ is OK.\n     if (minor == 12 && patch >= 58)\n       return true;\n+    if (minor == 10 && patch == 0 && ptr[0] == '-' &&\n+        internal_strstr(ptr, \".el7\")) {\n+      // Check RHEL7\n+      int r1 = internal_simple_strtoll(ptr+1, &ptr, 10);\n+      if (r1 >= 426) // 3.10.0-426.el7 or later\n+        return true;\n+      if (r1 == 327 && ptr[0] == '.') {\n+        int r2 = internal_simple_strtoll(ptr+1, &ptr, 10);\n+        if (r2 >= 27) // 3.10.0-327.27.1.el7 or later\n+          return true;\n+      }\n+    }\n     // Otherwise, bad.\n     return false;\n   } else if (major == 4) {"}]}