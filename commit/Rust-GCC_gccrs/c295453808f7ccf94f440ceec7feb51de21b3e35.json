{"sha": "c295453808f7ccf94f440ceec7feb51de21b3e35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5NTQ1MzgwOGY3Y2NmOTRmNDQwY2VlYzdmZWI1MWRlMjFiM2UzNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-06T17:30:42Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-06T17:30:42Z"}, "message": "re PR lto/53831 (Virtuals missing in LTO symtab)\n\n\tPR lto/53831\n\tPR lto/54776\n\t* lto-streamer-out.c (produce_symtab): Cleanup; drop v1 API hack.\n\nFrom-SVN: r192166", "tree": {"sha": "3650d070f4c1544ff3a261eeb937f523f564f45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3650d070f4c1544ff3a261eeb937f523f564f45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c295453808f7ccf94f440ceec7feb51de21b3e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c295453808f7ccf94f440ceec7feb51de21b3e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c295453808f7ccf94f440ceec7feb51de21b3e35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c295453808f7ccf94f440ceec7feb51de21b3e35/comments", "author": null, "committer": null, "parents": [{"sha": "f16dd8229532dcf804ad6735136cdb4c9ad268b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16dd8229532dcf804ad6735136cdb4c9ad268b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16dd8229532dcf804ad6735136cdb4c9ad268b6"}], "stats": {"total": 148, "additions": 80, "deletions": 68}, "files": [{"sha": "826729bbee92571a96fb2f7cd318a3d744b07729", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c295453808f7ccf94f440ceec7feb51de21b3e35", "patch": "@@ -1,3 +1,9 @@\n+2012-10-06  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/53831\n+\tPR lto/54776\n+\t* lto-streamer-out.c (produce_symtab): Cleanup; drop v1 API hack.\n+\n 2012-10-06  Dehao Chen  <dehao@google.com>\n \n \tPR debug/54826"}, {"sha": "083db74f911600833b40014fcc1d9227e5af4995", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 14, "deletions": 68, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c295453808f7ccf94f440ceec7feb51de21b3e35", "patch": "@@ -1285,90 +1285,36 @@ produce_symtab (struct output_block *ob)\n   struct streamer_tree_cache_d *cache = ob->writer_cache;\n   char *section_name = lto_get_section_name (LTO_section_symtab, NULL, NULL);\n   struct pointer_set_t *seen;\n-  struct cgraph_node *node;\n-  struct varpool_node *vnode;\n   struct lto_output_stream stream;\n   lto_symtab_encoder_t encoder = ob->decl_state->symtab_node_encoder;\n-  int i;\n+  lto_symtab_encoder_iterator lsei;\n \n   lto_begin_section (section_name, false);\n   free (section_name);\n \n   seen = pointer_set_create ();\n   memset (&stream, 0, sizeof (stream));\n \n-  /* Write all functions. \n-     First write all defined functions and then write all used functions.\n-     This is done so only to handle duplicated symbols in cgraph.  */\n-  for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n+  /* Write the symbol table.\n+     First write everything defined and then all declarations.\n+     This is neccesary to handle cases where we have duplicated symbols.  */\n+  for (lsei = lsei_start (encoder);\n+       !lsei_end_p (lsei); lsei_next (&lsei))\n     {\n-      if (!symtab_function_p (lto_symtab_encoder_deref (encoder, i)))\n-\tcontinue;\n-      node = cgraph (lto_symtab_encoder_deref (encoder, i));\n-      if (DECL_EXTERNAL (node->symbol.decl))\n-\tcontinue;\n-      if (DECL_COMDAT (node->symbol.decl)\n-\t  && cgraph_comdat_can_be_unshared_p (node))\n-\tcontinue;\n-      if ((node->alias && !node->thunk.alias) || node->global.inlined_to)\n+      symtab_node node = lsei_node (lsei);\n+\n+      if (!symtab_real_symbol_p (node) || DECL_EXTERNAL (node->symbol.decl))\n \tcontinue;\n       write_symbol (cache, &stream, node->symbol.decl, seen, false);\n     }\n-  for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n+  for (lsei = lsei_start (encoder);\n+       !lsei_end_p (lsei); lsei_next (&lsei))\n     {\n-      if (!symtab_function_p (lto_symtab_encoder_deref (encoder, i)))\n-\tcontinue;\n-      node = cgraph (lto_symtab_encoder_deref (encoder, i));\n-      if (!DECL_EXTERNAL (node->symbol.decl))\n-\tcontinue;\n-      /* We keep around unused extern inlines in order to be able to inline\n-\t them indirectly or via vtables.  Do not output them to symbol\n-\t table: they end up being undefined and just consume space.  */\n-      if (!node->symbol.address_taken && !node->callers)\n-\tcontinue;\n-      if (DECL_COMDAT (node->symbol.decl)\n-\t  && cgraph_comdat_can_be_unshared_p (node))\n-\tcontinue;\n-      if ((node->alias && !node->thunk.alias) || node->global.inlined_to)\n-\tcontinue;\n-      write_symbol (cache, &stream, node->symbol.decl, seen, false);\n-    }\n+      symtab_node node = lsei_node (lsei);\n \n-  /* Write all variables.  */\n-  for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n-    {\n-      if (!symtab_variable_p (lto_symtab_encoder_deref (encoder, i)))\n-\tcontinue;\n-      vnode = varpool (lto_symtab_encoder_deref (encoder, i));\n-      if (DECL_EXTERNAL (vnode->symbol.decl))\n-\tcontinue;\n-      /* COMDAT virtual tables can be unshared.  Do not declare them\n-\t in the LTO symbol table to prevent linker from forcing them\n-\t into the output. */\n-      if (DECL_COMDAT (vnode->symbol.decl)\n-\t  && !vnode->symbol.force_output\n-\t  && vnode->finalized \n-\t  && DECL_VIRTUAL_P (vnode->symbol.decl))\n-\tcontinue;\n-      if (vnode->alias && !vnode->alias_of)\n-\tcontinue;\n-      write_symbol (cache, &stream, vnode->symbol.decl, seen, false);\n-    }\n-  for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n-    {\n-      if (!symtab_variable_p (lto_symtab_encoder_deref (encoder, i)))\n-\tcontinue;\n-      vnode = varpool (lto_symtab_encoder_deref (encoder, i));\n-      if (!DECL_EXTERNAL (vnode->symbol.decl))\n+      if (!symtab_real_symbol_p (node) || !DECL_EXTERNAL (node->symbol.decl))\n \tcontinue;\n-      if (DECL_COMDAT (vnode->symbol.decl)\n-\t  && !vnode->symbol.force_output\n-\t  && vnode->finalized \n-\t  && DECL_VIRTUAL_P (vnode->symbol.decl))\n-\tcontinue;\n-      if (vnode->alias && !vnode->alias_of)\n-\tcontinue;\n-      write_symbol (cache, &stream, vnode->symbol.decl, seen, false);\n+      write_symbol (cache, &stream, node->symbol.decl, seen, false);\n     }\n \n   lto_write_stream (&stream);"}, {"sha": "1a28cda577cd8fc0733547c030061d741d500993", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c295453808f7ccf94f440ceec7feb51de21b3e35", "patch": "@@ -3,6 +3,12 @@\n \tPR fortran/54832\n \t* gfortran.dg/typebound_operator_17.f90: New.\n \n+2012-10-06  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/53831\n+\tPR lto/54776\n+\t* g++.dg/lto/v1-plugin-api-not-supported.C: New testcase.\n+\n 2012-10-06  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/lto/resolutions_0.c: New testcase."}, {"sha": "f79dfae5c6f69ce661a55f9016f9e787188872c3", "filename": "gcc/testsuite/g++.dg/lto/v1-plugin-api-not-supported_0.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fv1-plugin-api-not-supported_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c295453808f7ccf94f440ceec7feb51de21b3e35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fv1-plugin-api-not-supported_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fv1-plugin-api-not-supported_0.C?ref=c295453808f7ccf94f440ceec7feb51de21b3e35", "patch": "@@ -0,0 +1,54 @@\n+// { dg-lto-do run }\n+// { dg-require-linker-plugin \"\" }\n+// { dg-lto-options {{-O2 -fuse-linker-plugin -fno-early-inlining}}\n+\n+extern \"C\" void abort (void);\n+extern \"C\" void linker_error ();\n+\n+class A\n+{\n+public:\n+  int data;\n+  virtual int foo (int i)\n+    {\n+      return i + 1;\n+    }\n+};\n+\n+class B : public A\n+{\n+public:\n+  virtual int foo (int i)\n+    {\n+      return i + 2;\n+    }\n+};\n+\n+class C : public A\n+{\n+public:\n+  virtual int foo (int i)\n+    {\n+      linker_error ();\n+      return i + 3;\n+    }\n+};\n+\n+\n+static int middleman (class A *obj, int i)\n+{\n+  return obj->foo (i);\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  class B b;\n+  if (middleman (&b, get_input ()) != 3)\n+    abort ();\n+  return 0;\n+}"}]}