{"sha": "5bca4e800bc5a61148a74c4656b274155275f9fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjYTRlODAwYmM1YTYxMTQ4YTc0YzQ2NTZiMjc0MTU1Mjc1ZjlmYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-07T06:39:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-07T06:39:04Z"}, "message": "extend.texi (Attribute Syntax): Document that C++ labels on empty statements can now have attributes.\n\n./:\t* doc/extend.texi (Attribute Syntax): Document that C++ labels on\n\tempty statements can now have attributes.\ncp/:\n\t* parser.c (cp_parser_label_for_labeled_statement): Support\n\tattribute on labels if immediately followed by semicolon.\n\t* semantics.c (finish_label_stmt): Return new label.\n\t* pt.c (tsubst_expr): Handle attributes for LABEL_EXPR.\ntestsuite/:\n\t* gcc.dg/Wunused-label-1.c: New test case.\n\t* g++.dg/warn/Wunused-label-1.C: New test case.\n\t* g++.dg/warn/Wunused-label-2.C: New test case.\n\t* g++.dg/warn/Wunused-label-3.C: New test case.\n\nFrom-SVN: r148242", "tree": {"sha": "d6bdaa5091ac13eeb83382f918486bf5eb98b1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6bdaa5091ac13eeb83382f918486bf5eb98b1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bca4e800bc5a61148a74c4656b274155275f9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bca4e800bc5a61148a74c4656b274155275f9fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bca4e800bc5a61148a74c4656b274155275f9fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bca4e800bc5a61148a74c4656b274155275f9fc/comments", "author": null, "committer": null, "parents": [{"sha": "712b30cf6f380ea918f78d4ec208093df3566982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712b30cf6f380ea918f78d4ec208093df3566982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712b30cf6f380ea918f78d4ec208093df3566982"}], "stats": {"total": 178, "additions": 168, "deletions": 10}, "files": [{"sha": "c68945b9190aed3b2ec488da09a306a6915a7aa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -1,3 +1,8 @@\n+2009-06-06  Ian Lance Taylor  <iant@google.com>\n+\n+\t* doc/extend.texi (Attribute Syntax): Document that C++ labels on\n+\tempty statements can now have attributes.\n+\n 2009-06-05  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \t* config/mips/mips.c: Use REG_P and CONST_INT_P where applicable."}, {"sha": "200ce5a64c9888e053a53c7d138828a22f6e1519", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -1,3 +1,10 @@\n+2009-06-06  Ian Lance Taylor  <iant@google.com>\n+\n+\t* parser.c (cp_parser_label_for_labeled_statement): Support\n+\tattribute on labels if immediately followed by semicolon.\n+\t* semantics.c (finish_label_stmt): Return new label.\n+\t* pt.c (tsubst_expr): Handle attributes for LABEL_EXPR.\n+\n 2009-06-03  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (cc1plus-checksum.o): Depend upon $(CONFIG_H) and"}, {"sha": "00f258060823091838aea53482dd701d6988b8e3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -7052,6 +7052,7 @@ static void\n cp_parser_label_for_labeled_statement (cp_parser* parser)\n {\n   cp_token *token;\n+  tree label = NULL_TREE;\n \n   /* The next token should be an identifier.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -7111,12 +7112,34 @@ cp_parser_label_for_labeled_statement (cp_parser* parser)\n \n     default:\n       /* Anything else must be an ordinary label.  */\n-      finish_label_stmt (cp_parser_identifier (parser));\n+      label = finish_label_stmt (cp_parser_identifier (parser));\n       break;\n     }\n \n   /* Require the `:' token.  */\n   cp_parser_require (parser, CPP_COLON, \"%<:%>\");\n+\n+  /* An ordinary label may optionally be followed by attributes.\n+     However, this is only permitted if the attributes are then\n+     followed by a semicolon.  This is because, for backward\n+     compatibility, when parsing\n+       lab: __attribute__ ((unused)) int i;\n+     we want the attribute to attach to \"i\", not \"lab\".  */\n+  if (label != NULL_TREE\n+      && cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE))\n+    {\n+      tree attrs;\n+\n+      cp_parser_parse_tentatively (parser);\n+      attrs = cp_parser_attributes_opt (parser);\n+      if (attrs == NULL_TREE\n+\t  || cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n+\tcp_parser_abort_tentative_parse (parser);\n+      else if (!cp_parser_parse_definitely (parser))\n+\t;\n+      else\n+\tcplus_decl_attributes (&label, attrs, 0);\n+    }\n }\n \n /* Parse an expression-statement."}, {"sha": "91bd0d1a32cbaf0e4b603a2583f216b3084fae2b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -10895,7 +10895,14 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       break;\n \n     case LABEL_EXPR:\n-      finish_label_stmt (DECL_NAME (LABEL_EXPR_LABEL (t)));\n+      {\n+\ttree decl = LABEL_EXPR_LABEL (t);\n+\ttree label;\n+\n+\tlabel = finish_label_stmt (DECL_NAME (decl));\n+\tif (DECL_ATTRIBUTES (decl) != NULL_TREE)\n+\t  cplus_decl_attributes (&label, DECL_ATTRIBUTES (decl), 0);\n+      }\n       break;\n \n     case GOTO_EXPR:"}, {"sha": "adb6023aecf916aa0a202987cd5ac299194e575c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -1315,17 +1315,19 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n   return add_stmt (r);\n }\n \n-/* Finish a label with the indicated NAME.  */\n+/* Finish a label with the indicated NAME.  Returns the new label.  */\n \n tree\n finish_label_stmt (tree name)\n {\n   tree decl = define_label (input_location, name);\n \n-  if (decl  == error_mark_node)\n+  if (decl == error_mark_node)\n     return error_mark_node;\n \n-  return add_stmt (build_stmt (LABEL_EXPR, decl));\n+  add_stmt (build_stmt (LABEL_EXPR, decl));\n+\n+  return decl;\n }\n \n /* Finish a series of declarations for local labels.  G++ allows users"}, {"sha": "df900fd46b1ac1eda5380354b22bad793a6c71c3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -3440,11 +3440,13 @@ feature is intended for code generated by programs which contains labels\n that may be unused but which is compiled with @option{-Wall}.  It would\n not normally be appropriate to use in it human-written code, though it\n could be useful in cases where the code that jumps to the label is\n-contained within an @code{#ifdef} conditional.  GNU C++ does not permit\n-such placement of attribute lists, as it is permissible for a\n-declaration, which could begin with an attribute list, to be labelled in\n-C++.  Declarations cannot be labelled in C90 or C99, so the ambiguity\n-does not arise there.\n+contained within an @code{#ifdef} conditional.  GNU C++ only permits\n+attributes on labels if the attribute specifier is immediately\n+followed by a semicolon (i.e., the label applies to an empty\n+statement).  If the semicolon is missing, C++ label attributes are\n+ambiguous, as it is permissible for a declaration, which could begin\n+with an attribute list, to be labelled in C++.  Declarations cannot be\n+labelled in C90 or C99, so the ambiguity does not arise there.\n \n An attribute specifier list may appear as part of a @code{struct},\n @code{union} or @code{enum} specifier.  It may go either immediately"}, {"sha": "8f4a6d7fa7e6178ebfb3830820fa6ee2bbd2a3f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -1,3 +1,10 @@\n+2009-06-06  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wunused-label-1.c: New test case.\n+\t* g++.dg/warn/Wunused-label-1.C: New test case.\n+\t* g++.dg/warn/Wunused-label-2.C: New test case.\n+\t* g++.dg/warn/Wunused-label-3.C: New test case.\n+\n 2009-06-06  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/37203"}, {"sha": "96f49b321cd88c9b4904989f7972273fb0fc1768", "filename": "gcc/testsuite/g++.dg/warn/Wunused-label-1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-1.C?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused-label\" }\n+\n+extern void f9();\n+\n+void\n+f1()\n+{\n+ l1: f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l3: ; f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l4: __attribute__ ((unused)) ; f9();\n+}\n+\n+void\n+f2()\n+{\n+ label: __attribute ((unused)) ;\n+}\n+\n+void\n+f3()\n+{\n+  // The next line would be OK in C but is a syntax error in C++.\n+ l2: __attribute__ ((unused)) f9();\t// { dg-error \"expected\" }\n+\t\t// We still get an unused label warning--this is\n+\t\t// optional and can be removed if it ever changes.\n+\t\t// { dg-warning \"not used\" \"expected\" { target *-*-* } 24 }\n+}"}, {"sha": "a53fdedf317259b1bdbd19b3df075bf62b98087d", "filename": "gcc/testsuite/g++.dg/warn/Wunused-label-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-2.C?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused\" }\n+\n+// If __attribute__ ((unused)) follows a label and precedes a\n+// declaration, we should get a warning for the label, not the\n+// declaration.\n+\n+void\n+f1()\n+{\n+  int i1;\t\t\t\t// { dg-warning \"unused variable\" }\n+ l1: __attribute__ ((unused)) int i2;\t// { dg-warning \"label \\[^\\n\\]* not used\" }\n+}"}, {"sha": "7479ca20c370640903ad52d93471bb0b364d7d2d", "filename": "gcc/testsuite/g++.dg/warn/Wunused-label-3.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-label-3.C?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused-label\" }\n+\n+extern void f9();\n+\n+template<int i>\n+void\n+f1()\n+{\n+  if (i)\n+    return;\n+\n+ l1: f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l3: ; f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l4: __attribute__ ((unused)) ; f9();\n+}\n+\n+template\n+void f1<0>();\n+\n+template<int i>\n+void\n+f2()\n+{\n+  if (i)\n+    return;\n+\n+ l1: f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l3: ; f9();\t\t\t\t// { dg-warning \"not used\" }\n+ l4: __attribute__ ((unused)) ; f9();\n+}\n+\n+template\n+void f2<1>();\n+\n+template<int i>\n+void\n+f3()\n+{\n+  void* lab;\n+ l1: f9();\n+ l2: __attribute__ ((unused)) ; f9();\n+  lab = i ? &&l1 : &&l2;\n+  goto *lab;\n+}\n+\n+template\n+void f3<0>();\n+\n+template\n+void f3<1>();"}, {"sha": "1840a8008f4295aa56e96b190a7f5cb2c084f807", "filename": "gcc/testsuite/gcc.dg/Wunused-label-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-label-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bca4e800bc5a61148a74c4656b274155275f9fc/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-label-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-label-1.c?ref=5bca4e800bc5a61148a74c4656b274155275f9fc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-label\" } */\n+\n+extern void f2 ();\n+\n+void\n+f1 ()\n+{\n+ l1: f2 ();\t\t\t\t/* { dg-warning \"not used\" } */\n+ l2: __attribute__ ((unused)) f2 ();\n+ l3: ; f2 ();\t\t\t\t/* { dg-warning \"not used\" } */\n+ l4: __attribute__ ((unused)) ; f2 ();\n+}"}]}