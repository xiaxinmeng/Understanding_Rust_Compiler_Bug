{"sha": "01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjMGU5ZGMzOGY5ZDhlZTA0Zjk4ZTUxOWNiZTg2ZTYyYzlhZGQ1YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-02-28T18:58:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-02-28T18:58:59Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r365", "tree": {"sha": "433c0a0312748b92cb286f73bdb0739f09ee6bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433c0a0312748b92cb286f73bdb0739f09ee6bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a/comments", "author": null, "committer": null, "parents": [{"sha": "400fbf9fdbf1661d3adfb124f2ed9d4aa6562979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400fbf9fdbf1661d3adfb124f2ed9d4aa6562979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400fbf9fdbf1661d3adfb124f2ed9d4aa6562979"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "38fdad062df3bea17ed117669064d2073f52dd36", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=01c0e9dc38f9d8ee04f98e519cbe86e62c9add5a", "patch": "@@ -620,7 +620,7 @@ legitimize_pic_address (orig, mode, reg, scratch)\n \n       if (reg == 0)\n \t{\n-\t  if (reload_in_progress)\n+\t  if (reload_in_progress || reload_completed)\n \t    abort ();\n \t  else\n \t    reg = gen_reg_rtx (Pmode);\n@@ -631,7 +631,8 @@ legitimize_pic_address (orig, mode, reg, scratch)\n \t  /* If not during reload, allocate another temp reg here for loading\n \t     in the address, so that these instructions can be optimized\n \t     properly.  */\n-\t  rtx temp_reg = (reload_in_progress ? reg : gen_reg_rtx (Pmode));\n+\t  rtx temp_reg = ((reload_in_progress || reload_completed)\n+\t\t\t  ? reg : gen_reg_rtx (Pmode));\n \n \t  emit_insn (gen_rtx (SET, VOIDmode, temp_reg,\n \t\t\t      gen_rtx (HIGH, Pmode, orig)));\n@@ -664,7 +665,7 @@ legitimize_pic_address (orig, mode, reg, scratch)\n \n       if (reg == 0)\n \t{\n-\t  if (reload_in_progress)\n+\t  if (reload_in_progress || reload_completed)\n \t    abort ();\n \t  else\n \t    reg = gen_reg_rtx (Pmode);\n@@ -684,7 +685,7 @@ legitimize_pic_address (orig, mode, reg, scratch)\n \t{\n \t  if (SMALL_INT (offset))\n \t    return plus_constant_for_output (base, INTVAL (offset));\n-\t  else if (! reload_in_progress)\n+\t  else if (! reload_in_progress && ! reload_completed)\n \t    offset = force_reg (Pmode, offset);\n \t  /* We can't create any new registers during reload, so use the\n \t     SCRATCH reg provided by the reload_insi pattern.  */"}]}