{"sha": "e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkOTY1OWRkMzAyZTEyNTY4MmM2ZWQ3ZDVjNjEzYzdhMWNiZWZkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:41:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:41:21Z"}, "message": "[multiple changes]\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb: Remove tests of Parsing_Main_Subunit, since this test is\n\tnow done in In_Extended_Main_Source_Unit.\n\t* errout.ads (Compiler_State[_Type]): Moved from Errout to Lib\n\t(Parsing_Main_Subunit): Moved from Errout to Lib and renamed\n\tas Parsing_Main_Extended_Source.\n\t* frontend.adb: Set Parsing_Main_Extended_Source True for parsing main\n\tunit.\n\t* lib-load.adb (Load_Unit): Add PMES parameter\n\tSet PMES appropriately in all calls to Load_Unit\n\t* lib-load.ads (Load_Unit): Add PMES parameter\n\t* lib.adb (In_Extended_Main_Source_Unit): When called with\n\tCompiler_State set to Parsing, test new flag\n\tCompiling_Main_Extended_Source.\n\t* lib.ads (Compiler_State[_Type]): Moved from Errout to Lib\n\t(Parsing_Main_Subunit): Moved from Errout to Lib and renamed\n\tas Parsing_Main_Extended_Source\n\t* par-load.adb (Load): Set PMES properly in call to Load_Unit\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_cg.adb: Use proper entity to handle overloads.\n\t* sem_res.adb (Check_Parameterless_Call): An operator node without\n\tactuals cannot be a call, and must be treated as a string.\n\nFrom-SVN: r164182", "tree": {"sha": "9cb2b579aa839975138da83d1ecbd610d043dbc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb2b579aa839975138da83d1ecbd610d043dbc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/comments", "author": null, "committer": null, "parents": [{"sha": "cd9909a0c90962131d6b58d0af701f6333ecd244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9909a0c90962131d6b58d0af701f6333ecd244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9909a0c90962131d6b58d0af701f6333ecd244"}], "stats": {"total": 194, "additions": 125, "deletions": 69}, "files": [{"sha": "b60b84ada205618a6ecfac7f537bc3b00523607a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -1,3 +1,29 @@\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb: Remove tests of Parsing_Main_Subunit, since this test is\n+\tnow done in In_Extended_Main_Source_Unit.\n+\t* errout.ads (Compiler_State[_Type]): Moved from Errout to Lib\n+\t(Parsing_Main_Subunit): Moved from Errout to Lib and renamed\n+\tas Parsing_Main_Extended_Source.\n+\t* frontend.adb: Set Parsing_Main_Extended_Source True for parsing main\n+\tunit.\n+\t* lib-load.adb (Load_Unit): Add PMES parameter\n+\tSet PMES appropriately in all calls to Load_Unit\n+\t* lib-load.ads (Load_Unit): Add PMES parameter\n+\t* lib.adb (In_Extended_Main_Source_Unit): When called with\n+\tCompiler_State set to Parsing, test new flag\n+\tCompiling_Main_Extended_Source.\n+\t* lib.ads (Compiler_State[_Type]): Moved from Errout to Lib\n+\t(Parsing_Main_Subunit): Moved from Errout to Lib and renamed\n+\tas Parsing_Main_Extended_Source\n+\t* par-load.adb (Load): Set PMES properly in call to Load_Unit\n+\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_cg.adb: Use proper entity to handle overloads.\n+\t* sem_res.adb (Check_Parameterless_Call): An operator node without\n+\tactuals cannot be a call, and must be treated as a string.\n+\n 2010-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* frontend.adb: Minor reformatting."}, {"sha": "26cfc6fbeb1ebbf936e69f1c9949d13eaa9a721f", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -748,9 +748,7 @@ package body Errout is\n          --  If the flag location is in the main extended source unit then for\n          --  sure we want the warning since it definitely belongs\n \n-         if Parsing_Main_Subunit\n-           or else In_Extended_Main_Source_Unit (Sptr)\n-         then\n+         if In_Extended_Main_Source_Unit (Sptr) then\n             null;\n \n          --  If the flag location is not in the main extended source unit, then\n@@ -1159,8 +1157,7 @@ package body Errout is\n    is\n    begin\n       if Eflag\n-        and then (Parsing_Main_Subunit\n-                   or else In_Extended_Main_Source_Unit (N))\n+        and then In_Extended_Main_Source_Unit (N)\n         and then Comes_From_Source (N)\n       then\n          Error_Msg_NEL (Msg, N, N, Sloc (N));"}, {"sha": "795811473a2da873ea5c376f3ebde3b311e082c0", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -60,21 +60,6 @@ package Errout is\n    --  the use of constructs not permitted by the library in use, or improper\n    --  constructs in No_Run_Time mode).\n \n-   type Compiler_State_Type is (Parsing, Analyzing);\n-   Compiler_State : Compiler_State_Type;\n-   --  Indicates current state of compilation. This is put in the Errout spec\n-   --  because it affects the handling of error messages. In particular, an\n-   --  attempt is made by Errout to suppress cascaded error messages in Parsing\n-   --  mode, but not in the other modes.\n-\n-   Parsing_Main_Subunit : Boolean := False;\n-   --  Set True if we are currently parsing a subunit that is part of the main\n-   --  extended source. We need this flag, since the In_Main_Extended_Source\n-   --  test may produce an improper False value if called too early during the\n-   --  parsing process. This is put in the Errout spec because it affects error\n-   --  message handling. In particular, warnings and style messages during\n-   --  parsing are only generated if this flag is set to True.\n-\n    Current_Error_Source_File : Source_File_Index\n      renames Err_Vars.Current_Error_Source_File;\n    --  Id of current messages. Used to post file name when unit changes. This"}, {"sha": "31baa40168b8c3f8ce3f7505a87e87c903985aa9", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -426,7 +426,19 @@ package body Exp_CG is\n    begin\n       Write_Str (\"edge: { sourcename: \");\n       Write_Char ('\"');\n-      Get_External_Name (Defining_Entity (P), Has_Suffix => False);\n+\n+      --  The parent node is the construct that contains the call: subprogram\n+      --  body or library-level package. Display the qualified name of the\n+      --  entity of the construct. For a subprogram, it is the entity of the\n+      --  spec, which carries a homonym counter when it is overloaded.\n+\n+      if Nkind (P) = N_Subprogram_Body then\n+         Get_External_Name (Corresponding_Spec (P), Has_Suffix => False);\n+\n+      else\n+         Get_External_Name (Defining_Entity (P), Has_Suffix => False);\n+      end if;\n+\n       Write_Str (Name_Buffer (1 .. Name_Len));\n \n       if Nkind (P) = N_Package_Declaration then"}, {"sha": "31c8feaa9c1657df9b6a23ffa637858e26e6cbd9", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -121,12 +121,17 @@ begin\n \n    Lib.Load.Load_Main_Source;\n \n-   --  Return immediately if the main source could not be parsed\n+   --  Return immediately if the main source could not be found\n \n    if Sinput.Main_Source_File = No_Source_File then\n       return;\n    end if;\n \n+   --  We set Parsing_Main_Extended_Source true here to cover processing of all\n+   --  the configuration pragma files, as well as the main source unit itself.\n+\n+   Parsing_Main_Extended_Source := True;\n+\n    --  Read and process configuration pragma files if present\n \n    declare\n@@ -229,9 +234,9 @@ begin\n       Optimize_Alignment := 'T';\n    end if;\n \n-   --  We have now processed the command line switches, and the gnat.adc\n-   --  file, so this is the point at which we want to capture the values\n-   --  of the configuration switches (see Opt for further details).\n+   --  We have now processed the command line switches, and the configuration\n+   --  pragma files, so this is the point at which we want to capture the\n+   --  values of the configuration switches (see Opt for further details).\n \n    Opt.Register_Opt_Config_Switches;\n \n@@ -252,6 +257,7 @@ begin\n    --  semantics in any case).\n \n    Discard_List (Par (Configuration_Pragmas => False));\n+   Parsing_Main_Extended_Source := False;\n \n    --  The main unit is now loaded, and subunits of it can be loaded,\n    --  without reporting spurious loading circularities."}, {"sha": "4b39c0a49135198c8d8894a19a8facffbeb5aac8", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -344,18 +344,20 @@ package body Lib.Load is\n       Subunit           : Boolean;\n       Corr_Body         : Unit_Number_Type := No_Unit;\n       Renamings         : Boolean          := False;\n-      With_Node         : Node_Id          := Empty) return Unit_Number_Type\n+      With_Node         : Node_Id          := Empty;\n+      PMES              : Boolean          := False) return Unit_Number_Type\n    is\n       Calling_Unit : Unit_Number_Type;\n       Uname_Actual : Unit_Name_Type;\n       Unum         : Unit_Number_Type;\n       Unump        : Unit_Number_Type;\n       Fname        : File_Name_Type;\n       Src_Ind      : Source_File_Index;\n-\n-   --  Start of processing for Load_Unit\n+      Save_PMES    : constant Boolean := Parsing_Main_Extended_Source;\n \n    begin\n+      Parsing_Main_Extended_Source := PMES;\n+\n       --  If renamings are allowed and we have a child unit name, then we\n       --  must first load the parent to deal with finding the real name.\n       --  Retain the with_clause that names the child, so that if it is\n@@ -372,6 +374,7 @@ package body Lib.Load is\n               With_Node  => With_Node);\n \n          if Unump = No_Unit then\n+            Parsing_Main_Extended_Source := Save_PMES;\n             return No_Unit;\n          end if;\n \n@@ -552,10 +555,12 @@ package body Lib.Load is\n                   end if;\n \n                   Write_Dependency_Chain;\n-                  return No_Unit;\n+                  Unum := No_Unit;\n+                  goto Done;\n \n                else\n-                  return No_Unit;\n+                  Unum := No_Unit;\n+                  goto Done;\n                end if;\n             end if;\n          end loop;\n@@ -600,7 +605,8 @@ package body Lib.Load is\n                Load_Stack.Decrement_Last;\n             end if;\n \n-            return No_Unit;\n+            Unum := No_Unit;\n+            goto Done;\n          end if;\n \n          if Debug_Flag_L then\n@@ -610,7 +616,7 @@ package body Lib.Load is\n          end if;\n \n          Load_Stack.Decrement_Last;\n-         return Unum;\n+         goto Done;\n \n       --  Unit is not already in table, so try to open the file\n \n@@ -658,20 +664,20 @@ package body Lib.Load is\n \n             declare\n                Save_Index : constant Nat     := Multiple_Unit_Index;\n-               Save_PMS   : constant Boolean := Parsing_Main_Subunit;\n+               Save_PMES  : constant Boolean := Parsing_Main_Extended_Source;\n \n             begin\n                Multiple_Unit_Index := Get_Unit_Index (Uname_Actual);\n                Units.Table (Unum).Munit_Index := Multiple_Unit_Index;\n                Initialize_Scanner (Unum, Source_Index (Unum));\n \n                if Calling_Unit = Main_Unit and then Subunit then\n-                  Parsing_Main_Subunit := True;\n+                  Parsing_Main_Extended_Source := True;\n                end if;\n \n                Discard_List (Par (Configuration_Pragmas => False));\n \n-               Parsing_Main_Subunit := Save_PMS;\n+               Parsing_Main_Extended_Source := Save_PMES;\n \n                Multiple_Unit_Index := Save_Index;\n                Set_Loading (Unum, False);\n@@ -689,7 +695,8 @@ package body Lib.Load is\n                Error_Msg\n                  (\"\\incorrect spec in file { must be removed first!\",\n                   Load_Msg_Sloc);\n-               return No_Unit;\n+               Unum := No_Unit;\n+               goto Done;\n             end if;\n \n             --  If loaded unit had a fatal error, then caller inherits it!\n@@ -706,7 +713,7 @@ package body Lib.Load is\n \n             --  All done, return unit number\n \n-            return Unum;\n+            goto Done;\n \n          --  Case of file not found\n \n@@ -760,9 +767,16 @@ package body Lib.Load is\n                Units.Decrement_Last;\n             end if;\n \n-            return No_Unit;\n+            Unum := No_Unit;\n+            goto Done;\n          end if;\n       end if;\n+\n+      --  Here to exit, with result in Unum\n+\n+      <<Done>>\n+      Parsing_Main_Extended_Source := Save_PMES;\n+      return Unum;\n    end Load_Unit;\n \n    --------------------------"}, {"sha": "d2856aa41f2211825193f69986c38978ad75bad2", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,7 +109,8 @@ package Lib.Load is\n       Subunit           : Boolean;\n       Corr_Body         : Unit_Number_Type := No_Unit;\n       Renamings         : Boolean          := False;\n-      With_Node         : Node_Id          := Empty) return Unit_Number_Type;\n+      With_Node         : Node_Id          := Empty;\n+      PMES              : Boolean          := False) return Unit_Number_Type;\n    --  This function loads and parses the unit specified by Load_Name (or\n    --  returns the unit number for the previously constructed units table\n    --  entry if this is not the first call for this unit). Required indicates\n@@ -151,6 +152,9 @@ package Lib.Load is\n    --  With_Node is set to the with_clause or limited_with_clause causing\n    --  the unit to be loaded, and is used to bypass the circular dependency\n    --  check in the case of a limited_with_clause (Ada 2005, AI-50217).\n+   --\n+   --  PMES indicates the required setting of Parsing_Main_Extended_Unit during\n+   --  loading of the unit. This flag is saved and restored over the call.\n \n    procedure Change_Main_Unit_To_Spec;\n    --  This procedure is called if the main unit file contains a No_Body pragma"}, {"sha": "893c4cfbbb22ae6f5ef87684b0865bfb8d1f8019", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -701,11 +701,10 @@ package body Lib is\n       Mloc : constant Source_Ptr := Sloc (Cunit (Main_Unit));\n \n    begin\n-      --  If Mloc is not set, it means we are still parsing the main unit,\n-      --  so everything so far is in the extended main source unit.\n+      --  If parsing, then use the global flag to indicate result\n \n-      if Mloc = No_Location then\n-         return True;\n+      if Compiler_State = Parsing then\n+         return Parsing_Main_Extended_Source;\n \n       --  Special value cases\n \n@@ -741,11 +740,10 @@ package body Lib is\n       Mloc : constant Source_Ptr := Sloc (Cunit (Main_Unit));\n \n    begin\n-      --  If Mloc is not set, it means we are still parsing the main unit,\n-      --  so everything so far is in the extended main source unit.\n+      --  If parsing, then use the global flag to indicate result\n \n-      if Mloc = No_Location then\n-         return True;\n+      if Compiler_State = Parsing then\n+         return Parsing_Main_Extended_Source;\n \n       --  Special value cases\n "}, {"sha": "0aac6f04da40c15023a380a000e4e6ce7692baf5", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,16 @@ with Types; use Types;\n \n package Lib is\n \n+   type Compiler_State_Type is (Parsing, Analyzing);\n+   Compiler_State : Compiler_State_Type;\n+   --  Indicates current state of compilation. This is used to implement the\n+   --  function In_Extended_Main_Source_Unit.\n+\n+   Parsing_Main_Extended_Source : Boolean := False;\n+   --  Set True if we are currently parsing a file that is part of the main\n+   --  extended source (the main unit, its spec, or one of its subunits). This\n+   --  flag to implement In_Extended_Main_Source_Unit.\n+\n    --------------------------------------------\n    -- General Approach to Library Management --\n    --------------------------------------------"}, {"sha": "e30ffc02a02daac991f7c9f84b13747e71e07daa", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -266,7 +266,8 @@ begin\n            Required   => False,\n            Subunit    => False,\n            Error_Node => Curunit,\n-           Corr_Body  => Cur_Unum);\n+           Corr_Body  => Cur_Unum,\n+           PMES       => (Cur_Unum = Main_Unit));\n \n       --  If we successfully load the unit, then set the spec/body pointers.\n       --  Once again note that if the loaded unit has a fatal error, Load will\n@@ -342,25 +343,17 @@ begin\n    --  If current unit is a subunit, then load its parent body\n \n    elsif Nkind (Unit (Curunit)) = N_Subunit then\n-      declare\n-         Save_PMS : constant Boolean := Parsing_Main_Subunit;\n-\n-      begin\n-         Parsing_Main_Subunit := False;\n-         Body_Name := Get_Parent_Body_Name (Unit_Name (Cur_Unum));\n-         Unum :=\n-           Load_Unit\n-             (Load_Name  => Body_Name,\n-              Required   => True,\n-              Subunit    => False,\n-              Error_Node => Name (Unit (Curunit)));\n-\n-         if Unum /= No_Unit then\n-            Set_Library_Unit (Curunit, Cunit (Unum));\n-         end if;\n+      Body_Name := Get_Parent_Body_Name (Unit_Name (Cur_Unum));\n+      Unum :=\n+        Load_Unit\n+          (Load_Name  => Body_Name,\n+           Required   => True,\n+           Subunit    => False,\n+           Error_Node => Name (Unit (Curunit)));\n \n-         Parsing_Main_Subunit := Save_PMS;\n-      end;\n+      if Unum /= No_Unit then\n+         Set_Library_Unit (Curunit, Cunit (Unum));\n+      end if;\n    end if;\n \n    --  Now we load with'ed units, with style/validity checks turned off"}, {"sha": "58a0f3768c5f87b97ec78b8149cb6cad2012122c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d9659dd302e125682c6ed7d5c613c7a1cbefdc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e1d9659dd302e125682c6ed7d5c613c7a1cbefdc", "patch": "@@ -68,6 +68,7 @@ with Sem_Util; use Sem_Util;\n with Sem_Type; use Sem_Type;\n with Sem_Warn; use Sem_Warn;\n with Sinfo;    use Sinfo;\n+with Sinfo.CN;    use Sinfo.CN;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n@@ -1065,8 +1066,13 @@ package body Sem_Res is\n       --  Rewrite as call if overloadable entity that is (or could be, in the\n       --  overloaded case) a function call. If we know for sure that the entity\n       --  is an enumeration literal, we do not rewrite it.\n+      --  If the entity is the name of an operator, it cannot be a call because\n+      --  operators cannot have default parameters. In this case, this must be\n+      --  a string whose contents coincide with an operator name. Set the kind\n+      --  of the node appropriately and reanalyze.\n \n       if (Is_Entity_Name (N)\n+            and then Nkind (N) /= N_Operator_Symbol\n             and then Is_Overloadable (Entity (N))\n             and then (Ekind (Entity (N)) /= E_Enumeration_Literal\n                        or else Is_Overloaded (N)))\n@@ -1115,6 +1121,11 @@ package body Sem_Res is\n \n       elsif Nkind (N) = N_Parameter_Association then\n          Check_Parameterless_Call (Explicit_Actual_Parameter (N));\n+\n+      elsif Nkind (N) = N_Operator_Symbol then\n+         Change_Operator_Symbol_To_String_Literal (N);\n+         Set_Is_Overloaded (N, False);\n+         Set_Etype (N, Any_String);\n       end if;\n    end Check_Parameterless_Call;\n "}]}