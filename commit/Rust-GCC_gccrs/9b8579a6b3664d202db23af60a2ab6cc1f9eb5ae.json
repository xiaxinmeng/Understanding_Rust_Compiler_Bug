{"sha": "9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4NTc5YTZiMzY2NGQyMDJkYjIzYWY2MGEyYWI2Y2MxZjllYjVhZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-26T13:17:51Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-26T13:17:51Z"}, "message": "i386: Implement V2SI and V4HI shuffles\n\n2020-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\t* config/i386/mmx.md (*mmx_pshufd_1): New insn pattern.\n\t* config/i386/i386-expand.c (ix86_vectorize_vec_perm_const):\n\tHandle E_V2SImode and E_V4HImode.\n\t(expand_vec_perm_even_odd_1): Handle E_V4HImode.\n\tAssert that E_V2SImode is already handled.\n\t(expand_vec_perm_broadcast_1): Assert that E_V2SImode\n\tis already handled by standard shuffle patterns.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/vperm-v2si.c: New test.\n\t* gcc.target/i386/vperm-v4hi.c: Ditto.", "tree": {"sha": "bfb72c53a8ac5311b7311f0a4886471533787d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb72c53a8ac5311b7311f0a4886471533787d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6615c213354fd3ec7fc6238e61cc26bb1830464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6615c213354fd3ec7fc6238e61cc26bb1830464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6615c213354fd3ec7fc6238e61cc26bb1830464"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "338b4f7cf4fe23921cc9c31c3b68e9f26b603d6b", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "patch": "@@ -18634,10 +18634,26 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n     case E_V2DFmode:\n     case E_V4SFmode:\n     case E_V2DImode:\n+    case E_V2SImode:\n     case E_V4SImode:\n       /* These are always directly implementable by expand_vec_perm_1.  */\n       gcc_unreachable ();\n \n+    case E_V4HImode:\n+      if (d->testing_p)\n+\tbreak;\n+      /* We need 2*log2(N)-1 operations to achieve odd/even\n+\t with interleave. */\n+      t1 = gen_reg_rtx (V4HImode);\n+      emit_insn (gen_mmx_punpckhwd (t1, d->op0, d->op1));\n+      emit_insn (gen_mmx_punpcklwd (d->target, d->op0, d->op1));\n+      if (odd)\n+\tt2 = gen_mmx_punpckhwd (d->target, d->target, t1);\n+      else\n+\tt2 = gen_mmx_punpcklwd (d->target, d->target, t1);\n+      emit_insn (t2);\n+      break;\n+\n     case E_V8HImode:\n       if (TARGET_SSE4_1)\n \treturn expand_vec_perm_even_odd_pack (d);\n@@ -18820,6 +18836,7 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n     case E_V2DFmode:\n     case E_V2DImode:\n     case E_V4SFmode:\n+    case E_V2SImode:\n     case E_V4SImode:\n       /* These are always implementable using standard shuffle patterns.  */\n       gcc_unreachable ();\n@@ -19312,6 +19329,11 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n       if (d.testing_p && TARGET_SSSE3)\n \treturn true;\n       break;\n+    case E_V2SImode:\n+    case E_V4HImode:\n+      if (!TARGET_MMX_WITH_SSE)\n+\treturn false;\n+      break;\n     case E_V2DImode:\n     case E_V2DFmode:\n       if (!TARGET_SSE)\n@@ -19344,7 +19366,9 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n       d.one_operand_p = (which != 3);\n \n       /* Implementable with shufps or pshufd.  */\n-      if (d.one_operand_p && (d.vmode == V4SFmode || d.vmode == V4SImode))\n+      if (d.one_operand_p\n+\t  && (d.vmode == V4SFmode\n+\t      || d.vmode == V4SImode || d.vmode == V2SImode))\n \treturn true;\n \n       /* Otherwise we have to go through the motions and see if we can"}, {"sha": "c31b4f810798f58d35fc868cf4ff9d27dd86feac", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "patch": "@@ -1988,6 +1988,28 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"DI,TI\")])\n \n+(define_insn \"*mmx_pshufd_1\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=Yv\")\n+        (vec_select:V2SI\n+          (match_operand:V2SI 1 \"register_operand\" \"Yv\")\n+          (parallel [(match_operand 2 \"const_0_to_1_operand\")\n+                     (match_operand 3 \"const_0_to_1_operand\")])))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  int mask = 0;\n+  mask |= INTVAL (operands[2]) << 0;\n+  mask |= INTVAL (operands[3]) << 2;\n+  mask |= 2 << 4;\n+  mask |= 3 << 6;\n+  operands[2] = GEN_INT (mask);\n+\n+  return \"%vpshufd\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"mmx_pswapdv2si2\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n \t(vec_select:V2SI"}, {"sha": "5b38b316e3b94fb9e3ef57f97e32edff8438611e", "filename": "gcc/testsuite/gcc.target/i386/vperm-v2si.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2si.c?ref=9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"isa-check.h\"\n+#include \"sse-os-support.h\"\n+\n+typedef int S;\n+typedef int V __attribute__((vector_size(8)));\n+typedef int IV __attribute__((vector_size(8)));\n+typedef union { S s[2]; V v; } U;\n+\n+static U i[2], b, c;\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+#define assert(T) ((T) || (__builtin_trap (), 0))\n+\n+#define TEST(E0, E1) \\\n+  b.v = __builtin_shuffle (i[0].v, i[1].v, (IV){E0, E1}); \\\n+  c.s[0] = i[0].s[E0]; \\\n+  c.s[1] = i[0].s[E1]; \\\n+  __asm__(\"\" : : : \"memory\"); \\\n+  assert (memcmp (&b, &c, sizeof(c)) == 0);\n+\n+#include \"vperm-2-2.inc\"\n+\n+int main()\n+{\n+  check_isa ();\n+\n+  if (!sse_os_support ())\n+    exit (0);\n+\n+  i[0].s[0] = 0;\n+  i[0].s[1] = 1;\n+  i[0].s[2] = 2;\n+  i[0].s[3] = 3;\n+\n+  check();\n+  return 0;\n+}"}, {"sha": "bff6512672dd0524f7ecdd11640e96ff73e9618e", "filename": "gcc/testsuite/gcc.target/i386/vperm-v4hi.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4hi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4hi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v4hi.c?ref=9b8579a6b3664d202db23af60a2ab6cc1f9eb5ae", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"isa-check.h\"\n+#include \"sse-os-support.h\"\n+\n+typedef short S;\n+typedef short V __attribute__((vector_size(8)));\n+typedef short IV __attribute__((vector_size(8)));\n+typedef union { S s[4]; V v; } U;\n+\n+static U i[2], b, c;\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+#define assert(T) ((T) || (__builtin_trap (), 0))\n+\n+#define TEST(E0, E1, E2, E3) \\\n+  b.v = __builtin_shuffle (i[0].v, i[1].v, (IV){E0, E1, E2, E3}); \\\n+  c.s[0] = i[0].s[E0]; \\\n+  c.s[1] = i[0].s[E1]; \\\n+  c.s[2] = i[0].s[E2]; \\\n+  c.s[3] = i[0].s[E3]; \\\n+  __asm__(\"\" : : : \"memory\"); \\\n+  assert (memcmp (&b, &c, sizeof(c)) == 0);\n+\n+#include \"vperm-4-2.inc\"\n+\n+int main()\n+{\n+  check_isa ();\n+\n+  if (!sse_os_support ())\n+    exit (0);\n+\n+  i[0].s[0] = 0;\n+  i[0].s[1] = 1;\n+  i[0].s[2] = 2;\n+  i[0].s[3] = 3;\n+  i[0].s[4] = 4;\n+  i[0].s[5] = 5;\n+  i[0].s[6] = 6;\n+  i[0].s[7] = 7;\n+\n+  check();\n+  return 0;\n+}"}]}