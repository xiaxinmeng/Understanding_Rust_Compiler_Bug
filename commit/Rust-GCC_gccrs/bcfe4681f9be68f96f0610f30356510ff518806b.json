{"sha": "bcfe4681f9be68f96f0610f30356510ff518806b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmZTQ2ODFmOWJlNjhmOTZmMDYxMGYzMDM1NjUxMGZmNTE4ODA2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:54:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:54:59Z"}, "message": "libstdc++: Constrain std::make_optional\n\nThe standard rquires that std::make_optional is constrained similarly to\nthe std::optional constructors, which our implementation fails to do.\n\nAs a conforming extension this also adds a noexcept-specifier to each\nstd::make_optional overload.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/optional (make_optional): Add enable_if\n\tconstraints and noexcept-specifier to each overload.\n\t* testsuite/20_util/optional/make_optional-2.cc: New test.", "tree": {"sha": "f92d49072d3ec20156a3f0bbc6a58d17444344e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f92d49072d3ec20156a3f0bbc6a58d17444344e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcfe4681f9be68f96f0610f30356510ff518806b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfe4681f9be68f96f0610f30356510ff518806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfe4681f9be68f96f0610f30356510ff518806b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfe4681f9be68f96f0610f30356510ff518806b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8992cd1892df1adb352cf5d5b279a00686d1e88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8992cd1892df1adb352cf5d5b279a00686d1e88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8992cd1892df1adb352cf5d5b279a00686d1e88a"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "24821f81d0fca60335194acf47a246d750ed2ec4", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfe4681f9be68f96f0610f30356510ff518806b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfe4681f9be68f96f0610f30356510ff518806b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=bcfe4681f9be68f96f0610f30356510ff518806b", "patch": "@@ -1220,19 +1220,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(optional<_Tp>&, optional<_Tp>&) = delete;\n \n   template<typename _Tp>\n-    constexpr optional<decay_t<_Tp>>\n+    constexpr\n+    enable_if_t<is_constructible_v<decay_t<_Tp>, _Tp>,\n+\t\toptional<decay_t<_Tp>>>\n     make_optional(_Tp&& __t)\n-    { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n+    noexcept(is_nothrow_constructible_v<optional<decay_t<_Tp>>, _Tp>)\n+    { return optional<decay_t<_Tp>>{ std::forward<_Tp>(__t) }; }\n \n-  template<typename _Tp, typename ..._Args>\n-    constexpr optional<_Tp>\n+  template<typename _Tp, typename... _Args>\n+    constexpr\n+    enable_if_t<is_constructible_v<_Tp, _Args...>,\n+\t\toptional<_Tp>>\n     make_optional(_Args&&... __args)\n-    { return optional<_Tp> { in_place, std::forward<_Args>(__args)... }; }\n+    noexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n+    { return optional<_Tp>{ in_place, std::forward<_Args>(__args)... }; }\n \n-  template<typename _Tp, typename _Up, typename ..._Args>\n-    constexpr optional<_Tp>\n+  template<typename _Tp, typename _Up, typename... _Args>\n+    constexpr\n+    enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>,\n+\t\toptional<_Tp>>\n     make_optional(initializer_list<_Up> __il, _Args&&... __args)\n-    { return optional<_Tp> { in_place, __il, std::forward<_Args>(__args)... }; }\n+    noexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&, _Args...>)\n+    { return optional<_Tp>{ in_place, __il, std::forward<_Args>(__args)... }; }\n \n   // Hash.\n "}, {"sha": "65a1fc78d8018ffa7c6ce42cae39482423e41e0b", "filename": "libstdc++-v3/testsuite/20_util/optional/make_optional-2.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfe4681f9be68f96f0610f30356510ff518806b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfe4681f9be68f96f0610f30356510ff518806b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fmake_optional-2.cc?ref=bcfe4681f9be68f96f0610f30356510ff518806b", "patch": "@@ -0,0 +1,94 @@\n+// { dg-do compile { target c++17 }  }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+\n+int i;\n+\n+struct Cont\n+{\n+  Cont() noexcept;\n+  Cont(Cont&&) noexcept;\n+  Cont(const Cont&);\n+  Cont(int);\n+  Cont(std::initializer_list<int>, int) noexcept;\n+  Cont(std::initializer_list<int>, const char*);\n+};\n+const Cont c{};\n+\n+template<typename T, typename = void>\n+  struct can_make_optional1\n+  : std::false_type\n+  { };\n+\n+template<typename T>\n+  struct can_make_optional1<T,\n+      std::void_t<decltype(std::make_optional(std::declval<T>()))>>\n+  : std::true_type\n+  { };\n+\n+static_assert( can_make_optional1<int>::value );\n+static_assert( noexcept(std::make_optional(1)) );\n+static_assert( can_make_optional1<int&>::value );\n+static_assert( noexcept(std::make_optional(i)) );\n+static_assert( ! can_make_optional1<void>::value );\n+static_assert( can_make_optional1<Cont>::value );\n+static_assert( noexcept(std::make_optional(Cont{})) );\n+static_assert( can_make_optional1<Cont>::value );\n+static_assert( ! noexcept(std::make_optional(c)) );\n+\n+template<typename T, typename Arg, typename = void>\n+  struct can_make_optional2\n+  : std::false_type\n+  { };\n+\n+template<typename T, typename Arg>\n+  struct can_make_optional2<T, Arg,\n+      std::void_t<decltype(std::make_optional<T>(std::declval<Arg>()))>>\n+  : std::true_type\n+  { };\n+\n+static_assert( can_make_optional2<int, int>::value );\n+static_assert( noexcept(std::make_optional<int>(1)) );\n+static_assert( can_make_optional2<int, int&>::value );\n+static_assert( noexcept(std::make_optional(i)) );\n+static_assert( ! can_make_optional2<void, void>::value );\n+static_assert( can_make_optional2<Cont, Cont>::value );\n+static_assert( noexcept(std::make_optional<Cont>({})) );\n+static_assert( can_make_optional2<Cont, const Cont&>::value );\n+static_assert( ! noexcept(std::make_optional(c)) );\n+static_assert( can_make_optional2<Cont, int>::value );\n+static_assert( ! noexcept(std::make_optional<Cont>(1)) );\n+\n+template<typename T, typename Arg, typename = void>\n+  struct can_make_optional3\n+  : std::false_type\n+  { };\n+\n+template<typename T, typename Arg>\n+  struct can_make_optional3<T, Arg,\n+      std::void_t<decltype(std::make_optional<T>({1,2}, std::declval<Arg>()))>>\n+  : std::true_type\n+  { };\n+\n+static_assert( can_make_optional3<Cont, int>::value );\n+static_assert( noexcept(std::make_optional<Cont>({1,2}, 1)) );\n+static_assert( can_make_optional3<Cont, char*>::value );\n+static_assert( ! noexcept(std::make_optional<Cont>({1,2}, \"\")) );\n+static_assert( !can_make_optional3<Cont, int*>::value );"}]}