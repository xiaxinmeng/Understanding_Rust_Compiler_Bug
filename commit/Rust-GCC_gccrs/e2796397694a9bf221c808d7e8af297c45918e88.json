{"sha": "e2796397694a9bf221c808d7e8af297c45918e88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3OTYzOTc2OTRhOWJmMjIxYzgwOGQ3ZThhZjI5N2M0NTkxOGU4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-12-13T07:56:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-12-13T07:56:10Z"}, "message": "re PR c++/25331 (FAIL: tmpdir-g++.dg-struct-layout-1/t028 cp_compat_[xy]_tst.o compile)\n\n\tPR c++/25331\n\t* gcc.dg/compat/struct-layout-1_generate.c (subfield): Don't\n\tput atal* and atpaal* attributes on array elements.\n\t(generate_fields): Revert 2005-10-07 and 2005-10-11 changes.\n\t* g++.dg/compat/struct-layout-1_generate.c (subfield): Don't\n\tput atal* and atpaal* attributes on array elements.\n\t(generate_fields): Don't prevent atal* attribute on ETYPE_ARRAY.\n\nFrom-SVN: r108460", "tree": {"sha": "80ec84a7d3e7840c51bb7eb1a7bd13b67b70afe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80ec84a7d3e7840c51bb7eb1a7bd13b67b70afe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2796397694a9bf221c808d7e8af297c45918e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2796397694a9bf221c808d7e8af297c45918e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2796397694a9bf221c808d7e8af297c45918e88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2796397694a9bf221c808d7e8af297c45918e88/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1524f80b1ceeda3c293142f4e370616be6dcf2cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1524f80b1ceeda3c293142f4e370616be6dcf2cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1524f80b1ceeda3c293142f4e370616be6dcf2cf"}], "stats": {"total": 118, "additions": 76, "deletions": 42}, "files": [{"sha": "e71e05ee6d0f02143f51c6e62976dba4564ef8c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2796397694a9bf221c808d7e8af297c45918e88", "patch": "@@ -1,3 +1,13 @@\n+2005-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/25331\n+\t* gcc.dg/compat/struct-layout-1_generate.c (subfield): Don't\n+\tput atal* and atpaal* attributes on array elements.\n+\t(generate_fields): Revert 2005-10-07 and 2005-10-11 changes.\n+\t* g++.dg/compat/struct-layout-1_generate.c (subfield): Don't\n+\tput atal* and atpaal* attributes on array elements.\n+\t(generate_fields): Don't prevent atal* attribute on ETYPE_ARRAY.\n+\n 2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n \n \t* gcc.dg/single-precision-constant.c: New test."}, {"sha": "da915c7cb8f6c1e69e46baada900354ad64fe22a", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=e2796397694a9bf221c808d7e8af297c45918e88", "patch": "@@ -609,6 +609,13 @@ subfield (struct entry *e, char *letter)\n \t    snprintf (buf, 20, \"%c[]\", *letter);\n \t  else\n \t    snprintf (buf, 20, \"%c[%d]\", *letter, e[0].arr_len);\n+\t  /* If this is an array type, do not put aligned attributes on\n+\t     elements.  Aligning elements to a value greater than their\n+\t     size will result in a compiler error.  */\n+\t  if (type == 1\n+\t      && ((strncmp (e[0].attrib, \"atal\", 4) == 0)\n+\t\t   || strncmp (e[0].attrib, \"atpaal\", 6) == 0))\n+\t    type = 2;\n \t}\n       else\n \t{\n@@ -665,18 +672,32 @@ subfield (struct entry *e, char *letter)\n \t}\n       ++*letter;\n       if (e[0].attrib)\n-\tswitch (generate_random () % 3)\n-\t  {\n-\t  case 0:\n-\t    fprintf (outfile, \"%s %s %s;\", e[0].attrib, e[0].type->name, buf);\n-\t    break;\n-\t  case 1:\n-\t    fprintf (outfile, \"%s %s %s;\", e[0].type->name, e[0].attrib, buf);\n-\t    break;\n-\t  case 2:\n-\t    fprintf (outfile, \"%s %s %s;\", e[0].type->name, buf, e[0].attrib);\n-\t    break;\n-\t  }\n+\t{\n+\t  /* If this is an array type, do not put aligned attributes on\n+\t     elements.  Aligning elements to a value greater than their\n+\t     size will result in a compiler error.  */\n+\t  if (e[0].etype == ETYPE_ARRAY\n+\t      && ((strncmp (e[0].attrib, \"atal\", 4) == 0)\n+\t\t   || strncmp (e[0].attrib, \"atpaal\", 6) == 0))\n+\t    type = 2;\n+\t  else\n+\t    type = generate_random () % 3;\n+\t  switch (type)\n+\t    {\n+\t    case 0:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].attrib, e[0].type->name,\n+\t\t       buf);\n+\t      break;\n+\t    case 1:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].type->name, e[0].attrib,\n+\t\t       buf);\n+\t      break;\n+\t    case 2:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].type->name, buf,\n+\t\t       e[0].attrib);\n+\t      break;\n+\t    }\n+\t}\n       else\n \tfprintf (outfile, \"%s %s;\", e[0].type->name, buf);\n       return 1;\n@@ -1297,15 +1318,6 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t\t  || (e[n].type >= &aligned_bitfld_types[0]\n \t\t      && e[n].type < &aligned_bitfld_types[n_aligned_bitfld_types])))\n \t    e[n].attrib = NULL;\n-\n-\t  /* If this is an array type, do not put aligned attributes on\n-\t     elements.  Aligning elements to a value greater than their\n-\t     size will result in a compiler error.  */\n-\n-\t  if ((e[n].etype == ETYPE_ARRAY)\n-\t      && e[n].attrib != NULL\n-\t      && (strncmp (e[n].attrib, \"atal\", 4) == 0))\n-\t     e[n].attrib = NULL;\n \t}\n     }\n }"}, {"sha": "cca2954c448100ec105fa4abf61850737afee6c3", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2796397694a9bf221c808d7e8af297c45918e88/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=e2796397694a9bf221c808d7e8af297c45918e88", "patch": "@@ -789,6 +789,13 @@ subfield (struct entry *e, char *letter)\n \t    snprintf (buf, 20, \"%c[]\", *letter);\n \t  else\n \t    snprintf (buf, 20, \"%c[%d]\", *letter, e[0].arr_len);\n+\t  /* If this is an array type, do not put aligned attributes on\n+\t     elements.  Aligning elements to a value greater than their\n+\t     size will result in a compiler error.  */\n+\t  if (type == 1\n+\t      && ((strncmp (e[0].attrib, \"atal\", 4) == 0)\n+\t\t   || strncmp (e[0].attrib, \"atpaal\", 6) == 0))\n+\t    type = 2;\n \t}\n       else\n         {\n@@ -845,18 +852,32 @@ subfield (struct entry *e, char *letter)\n         }\n       ++*letter;\n       if (e[0].attrib)\n-\tswitch (generate_random () % 3)\n-          {\n-          case 0:\n-            fprintf (outfile, \"%s %s %s;\", e[0].attrib, e[0].type->name, buf);\n-            break;\n-          case 1:\n-            fprintf (outfile, \"%s %s %s;\", e[0].type->name, e[0].attrib, buf);\n-            break;\n-          case 2:\n-            fprintf (outfile, \"%s %s %s;\", e[0].type->name, buf, e[0].attrib);\n-            break;\n-          }\n+\t{\n+\t  /* If this is an array type, do not put aligned attributes on\n+\t     elements.  Aligning elements to a value greater than their\n+\t     size will result in a compiler error.  */\n+\t  if (e[0].etype == ETYPE_ARRAY\n+              && ((strncmp (e[0].attrib, \"atal\", 4) == 0)\n+                   || strncmp (e[0].attrib, \"atpaal\", 6) == 0))\n+\t    type = 2;\n+\t  else\n+            type = generate_random () % 3;\n+\t  switch (type)\n+\t    {\n+\t    case 0:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].attrib, e[0].type->name,\n+\t\t       buf);\n+\t      break;\n+\t    case 1:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].type->name, e[0].attrib,\n+\t\t       buf);\n+\t      break;\n+\t    case 2:\n+\t      fprintf (outfile, \"%s %s %s;\", e[0].type->name, buf,\n+\t\t       e[0].attrib);\n+\t      break;\n+\t    }\n+\t}\n       else\n \tfprintf (outfile, \"%s %s;\", e[0].type->name, buf);\n       return 1;\n@@ -1746,15 +1767,6 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t\t  || (e[n].type >= &aligned_bitfld_types[0]\n \t\t      && e[n].type < &aligned_bitfld_types[n_aligned_bitfld_types])))\n \t    e[n].attrib = NULL;\n-\n-\t  /* If this is an array type, do not put aligned attributes on\n-\t     elements.  Aligning elements to a value greater than their\n-\t     size will result in a compiler error.  */\n-\n-\t  if ((e[n].etype == ETYPE_ARRAY)\n-\t      && e[n].attrib != NULL\n-\t      && (strncmp (e[n].attrib, \"atal\", 4) == 0))\n-            e[n].attrib = NULL;\n \t}\n     }\n }"}]}