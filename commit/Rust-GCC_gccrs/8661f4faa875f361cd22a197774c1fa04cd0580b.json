{"sha": "8661f4faa875f361cd22a197774c1fa04cd0580b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2MWY0ZmFhODc1ZjM2MWNkMjJhMTk3Nzc0YzFmYTA0Y2QwNTgwYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-17T15:28:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-17T15:28:20Z"}, "message": "libstdc++: Fix ranges::search_n for random access iterators [PR97828]\n\nMy ranges transcription of the std::search_n implementation for random\naccess iterators missed a crucial part of the algorithm which the\nexisting tests didn't exercise.  When __remainder is less than __count\nat the start of an iteration of the outer while loop, it means we're\ncontinuing a partial match of __count - __remainder elements from the\nprevious iteration.  If at the end of the iteration we don't complete\nthis partial match, we need to reset __remainder so that it's only\noffset by the size of the most recent partial match before starting the\nnext iteration.\n\nThis patch fixes this appropriately, mirroring how it's done in the\ncorresponding std::search_n implementation.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97828\n\t* include/bits/ranges_algo.h (__search_n_fn::operator()): Check\n\trandom_access_iterator before using the backtracking\n\timplementation.  When the backwards scan fails prematurely,\n\treset __remainder appropriately.\n\t* testsuite/25_algorithms/search_n/97828.cc: New test.", "tree": {"sha": "42ebf4b7c01a3d975b557b6148f7dbd269b09bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ebf4b7c01a3d975b557b6148f7dbd269b09bb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8661f4faa875f361cd22a197774c1fa04cd0580b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8661f4faa875f361cd22a197774c1fa04cd0580b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8661f4faa875f361cd22a197774c1fa04cd0580b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8661f4faa875f361cd22a197774c1fa04cd0580b/comments", "author": null, "committer": null, "parents": [{"sha": "d7ab349c44f30bed90b03b45865f6c7c5de1dfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ab349c44f30bed90b03b45865f6c7c5de1dfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ab349c44f30bed90b03b45865f6c7c5de1dfd8"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "3905fe44fb2dba4bd264ee09b19f5342a701d257", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8661f4faa875f361cd22a197774c1fa04cd0580b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8661f4faa875f361cd22a197774c1fa04cd0580b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=8661f4faa875f361cd22a197774c1fa04cd0580b", "patch": "@@ -579,7 +579,8 @@ namespace ranges\n \t      }\n \t  }\n \n-\tif constexpr (sized_sentinel_for<_Sent, _Iter>)\n+\tif constexpr (sized_sentinel_for<_Sent, _Iter>\n+\t\t      && random_access_iterator<_Iter>)\n \t  {\n \t    auto __tail_size = __last - __first;\n \t    auto __remainder = __count;\n@@ -594,6 +595,7 @@ namespace ranges\n \t\t    if (--__remainder == 0)\n \t\t      return {__first - __count, __first};\n \t\t  }\n+\t\t__remainder = __count + 1 - (__first - __backtrack);\n \t      }\n \t    auto __i = __first + __tail_size;\n \t    return {__i, __i};"}, {"sha": "f692369cd3d2b674babff5b2684c3089a4f40cef", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/97828.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8661f4faa875f361cd22a197774c1fa04cd0580b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F97828.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8661f4faa875f361cd22a197774c1fa04cd0580b/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F97828.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2F97828.cc?ref=8661f4faa875f361cd22a197774c1fa04cd0580b", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// PR libstdc++/97828\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_sized_range;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+template<template<typename> typename Wrapper>\n+void\n+test01()\n+{\n+  int x[] = {0,42,42,0,42,42,42};\n+  test_sized_range<int, Wrapper> rx(x);\n+  auto res = std::ranges::search_n(rx, 3, 42);\n+  VERIFY( res.begin().ptr == x+4 && res.end().ptr == x+7 );\n+}\n+\n+template<template<typename> typename Wrapper>\n+void\n+test02()\n+{\n+  int x[] = {0,42,42,0,42};\n+  test_sized_range<int, Wrapper> rx(x);\n+  auto res = std::ranges::search_n(rx, 3, 42);\n+  VERIFY( res.begin().ptr == x+5 && res.end().ptr == x+5 );\n+}\n+\n+int\n+main()\n+{\n+  test01<forward_iterator_wrapper>();\n+  test01<random_access_iterator_wrapper>();\n+  test02<forward_iterator_wrapper>();\n+  test02<random_access_iterator_wrapper>();\n+}"}]}