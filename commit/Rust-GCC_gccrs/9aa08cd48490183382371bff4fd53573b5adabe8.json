{"sha": "9aa08cd48490183382371bff4fd53573b5adabe8", "node_id": "C_kwDOANBUbNoAKDlhYTA4Y2Q0ODQ5MDE4MzM4MjM3MWJmZjRmZDUzNTczYjVhZGFiZTg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-02T11:46:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-09T08:26:55Z"}, "message": "autopar TLC\n\nThe following removes all excessive update_ssa calls from OMP\nexpansion, thereby rewriting the atomic load and store cases to\nGIMPLE code generation.  I don't think autopar ever exercises the\natomics code though.\n\nThere's not much test coverage overall so I've built SPEC 2k17\nwith -floop-parallelize-all -ftree-parallelize-loops=2 with and\nwithout LTO (and otherwise -Ofast plus -march=haswell) without\nfallout.\n\nIf there's any fallout it's not OK to update SSA form for\neach and every OMP stmt lowered.\n\n\t* omp-expand.cc (expand_omp_atomic_load): Emit GIMPLE\n\tdirectly.  Avoid update_ssa when in SSA form.\n\t(expand_omp_atomic_store): Likewise.\n\t(expand_omp_atomic_fetch_op): Avoid update_ssa when in SSA\n\tform.\n\t(expand_omp_atomic_pipeline): Likewise.\n\t(expand_omp_atomic_mutex): Likewise.\n\t* tree-parloops.cc (gen_parallel_loop): Use\n\tTODO_update_ssa_no_phi after loop_version.", "tree": {"sha": "03f3e0aca4d6084237878011caa483f215002909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03f3e0aca4d6084237878011caa483f215002909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa08cd48490183382371bff4fd53573b5adabe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa08cd48490183382371bff4fd53573b5adabe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa08cd48490183382371bff4fd53573b5adabe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa08cd48490183382371bff4fd53573b5adabe8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c64ef5cd92c2e340caabc95f4a28c9a125e8b5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64ef5cd92c2e340caabc95f4a28c9a125e8b5b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64ef5cd92c2e340caabc95f4a28c9a125e8b5b8"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "48fbd157c6edbcc835db6584c458305fc6847910", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa08cd48490183382371bff4fd53573b5adabe8/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa08cd48490183382371bff4fd53573b5adabe8/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=9aa08cd48490183382371bff4fd53573b5adabe8", "patch": "@@ -8617,7 +8617,7 @@ expand_omp_atomic_load (basic_block load_bb, tree addr,\n   basic_block store_bb;\n   location_t loc;\n   gimple *stmt;\n-  tree decl, call, type, itype;\n+  tree decl, type, itype;\n \n   gsi = gsi_last_nondebug_bb (load_bb);\n   stmt = gsi_stmt (gsi);\n@@ -8637,23 +8637,33 @@ expand_omp_atomic_load (basic_block load_bb, tree addr,\n   itype = TREE_TYPE (TREE_TYPE (decl));\n \n   enum omp_memory_order omo = gimple_omp_atomic_memory_order (stmt);\n-  tree mo = build_int_cst (NULL, omp_memory_order_to_memmodel (omo));\n-  call = build_call_expr_loc (loc, decl, 2, addr, mo);\n+  tree mo = build_int_cst (integer_type_node,\n+\t\t\t   omp_memory_order_to_memmodel (omo));\n+  gcall *call = gimple_build_call (decl, 2, addr, mo);\n+  gimple_set_location (call, loc);\n+  gimple_set_vuse (call, gimple_vuse (stmt));\n+  gimple *repl;\n   if (!useless_type_conversion_p (type, itype))\n-    call = fold_build1_loc (loc, VIEW_CONVERT_EXPR, type, call);\n-  call = build2_loc (loc, MODIFY_EXPR, void_type_node, loaded_val, call);\n-\n-  force_gimple_operand_gsi (&gsi, call, true, NULL_TREE, true, GSI_SAME_STMT);\n-  gsi_remove (&gsi, true);\n+    {\n+      tree lhs = make_ssa_name (itype);\n+      gimple_call_set_lhs (call, lhs);\n+      gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+      repl = gimple_build_assign (loaded_val,\n+\t\t\t\t  build1 (VIEW_CONVERT_EXPR, type, lhs));\n+      gimple_set_location (repl, loc);\n+    }\n+  else\n+    {\n+      gimple_call_set_lhs (call, loaded_val);\n+      repl = call;\n+    }\n+  gsi_replace (&gsi, repl, true);\n \n   store_bb = single_succ (load_bb);\n   gsi = gsi_last_nondebug_bb (store_bb);\n   gcc_assert (gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_ATOMIC_STORE);\n   gsi_remove (&gsi, true);\n \n-  if (gimple_in_ssa_p (cfun))\n-    update_ssa (TODO_update_ssa_no_phi);\n-\n   return true;\n }\n \n@@ -8669,7 +8679,7 @@ expand_omp_atomic_store (basic_block load_bb, tree addr,\n   basic_block store_bb = single_succ (load_bb);\n   location_t loc;\n   gimple *stmt;\n-  tree decl, call, type, itype;\n+  tree decl, type, itype;\n   machine_mode imode;\n   bool exchange;\n \n@@ -8710,25 +8720,36 @@ expand_omp_atomic_store (basic_block load_bb, tree addr,\n   if (!useless_type_conversion_p (itype, type))\n     stored_val = fold_build1_loc (loc, VIEW_CONVERT_EXPR, itype, stored_val);\n   enum omp_memory_order omo = gimple_omp_atomic_memory_order (stmt);\n-  tree mo = build_int_cst (NULL, omp_memory_order_to_memmodel (omo));\n-  call = build_call_expr_loc (loc, decl, 3, addr, stored_val, mo);\n+  tree mo = build_int_cst (integer_type_node,\n+\t\t\t   omp_memory_order_to_memmodel (omo));\n+  stored_val = force_gimple_operand_gsi (&gsi, stored_val, true, NULL_TREE,\n+\t\t\t\t\t true, GSI_SAME_STMT);\n+  gcall *call = gimple_build_call (decl, 3, addr, stored_val, mo);\n+  gimple_set_location (call, loc);\n+  gimple_set_vuse (call, gimple_vuse (stmt));\n+  gimple_set_vdef (call, gimple_vdef (stmt));\n+\n+  gimple *repl = call;\n   if (exchange)\n     {\n       if (!useless_type_conversion_p (type, itype))\n-\tcall = build1_loc (loc, VIEW_CONVERT_EXPR, type, call);\n-      call = build2_loc (loc, MODIFY_EXPR, void_type_node, loaded_val, call);\n+\t{\n+\t  tree lhs = make_ssa_name (itype);\n+\t  gimple_call_set_lhs (call, lhs);\n+\t  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+\t  repl = gimple_build_assign (loaded_val,\n+\t\t\t\t      build1 (VIEW_CONVERT_EXPR, type, lhs));\n+\t  gimple_set_location  (repl, loc);\n+\t}\n+      else\n+\tgimple_call_set_lhs (call, loaded_val);\n     }\n-\n-  force_gimple_operand_gsi (&gsi, call, true, NULL_TREE, true, GSI_SAME_STMT);\n-  gsi_remove (&gsi, true);\n+  gsi_replace (&gsi, repl, true);\n \n   /* Remove the GIMPLE_OMP_ATOMIC_LOAD that we verified above.  */\n   gsi = gsi_last_nondebug_bb (load_bb);\n   gsi_remove (&gsi, true);\n \n-  if (gimple_in_ssa_p (cfun))\n-    update_ssa (TODO_update_ssa_no_phi);\n-\n   return true;\n }\n \n@@ -8874,10 +8895,7 @@ expand_omp_atomic_fetch_op (basic_block load_bb,\n   gsi_remove (&gsi, true);\n \n   if (gimple_in_ssa_p (cfun))\n-    {\n-      release_defs (stmt);\n-      update_ssa (TODO_update_ssa_no_phi);\n-    }\n+    release_defs (stmt);\n \n   return true;\n }\n@@ -9333,16 +9351,16 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n     }\n \n   /* Remove GIMPLE_OMP_ATOMIC_STORE.  */\n+  stmt = gsi_stmt (si);\n   gsi_remove (&si, true);\n+  if (gimple_in_ssa_p (cfun))\n+    release_defs (stmt);\n \n   class loop *loop = alloc_loop ();\n   loop->header = loop_header;\n   loop->latch = store_bb;\n   add_loop (loop, loop_header->loop_father);\n \n-  if (gimple_in_ssa_p (cfun))\n-    update_ssa (TODO_update_ssa_no_phi);\n-\n   return true;\n }\n \n@@ -9399,15 +9417,14 @@ expand_omp_atomic_mutex (basic_block load_bb, basic_block store_bb,\n   gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_ATOMIC_STORE);\n \n   stmt = gimple_build_assign (unshare_expr (mem), stored_val);\n+  gimple_set_vuse (stmt, gimple_vuse (gsi_stmt (si)));\n+  gimple_set_vdef (stmt, gimple_vdef (gsi_stmt (si)));\n   gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n \n   t = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_END);\n   t = build_call_expr (t, 0);\n   force_gimple_operand_gsi (&si, t, true, NULL_TREE, true, GSI_SAME_STMT);\n   gsi_remove (&si, true);\n-\n-  if (gimple_in_ssa_p (cfun))\n-    update_ssa (TODO_update_ssa_no_phi);\n   return true;\n }\n "}, {"sha": "b070527ee6eab66f3e52ec2c687f70eee6a76568", "filename": "gcc/tree-parloops.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa08cd48490183382371bff4fd53573b5adabe8/gcc%2Ftree-parloops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa08cd48490183382371bff4fd53573b5adabe8/gcc%2Ftree-parloops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.cc?ref=9aa08cd48490183382371bff4fd53573b5adabe8", "patch": "@@ -3082,7 +3082,7 @@ gen_parallel_loop (class loop *loop,\n \t\t    profile_probability::unlikely (),\n \t\t    profile_probability::likely (),\n \t\t    profile_probability::unlikely (), true);\n-      update_ssa (TODO_update_ssa);\n+      update_ssa (TODO_update_ssa_no_phi);\n       free_original_copy_tables ();\n     }\n "}]}