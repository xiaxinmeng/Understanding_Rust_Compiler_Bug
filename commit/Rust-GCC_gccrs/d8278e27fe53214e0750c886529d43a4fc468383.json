{"sha": "d8278e27fe53214e0750c886529d43a4fc468383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyNzhlMjdmZTUzMjE0ZTA3NTBjODg2NTI5ZDQzYTRmYzQ2ODM4Mw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2002-08-01T05:34:54Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2002-08-01T05:34:54Z"}, "message": "configure.host: Add SH support.\n\n\t* configure.host: Add SH support.\n        * sysdep/sh/locks.h: New file.\n\nFrom-SVN: r55922", "tree": {"sha": "e78675ba6e000fce88a3174fdee42605ef496aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e78675ba6e000fce88a3174fdee42605ef496aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8278e27fe53214e0750c886529d43a4fc468383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8278e27fe53214e0750c886529d43a4fc468383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8278e27fe53214e0750c886529d43a4fc468383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8278e27fe53214e0750c886529d43a4fc468383/comments", "author": null, "committer": null, "parents": [{"sha": "4ba126e468db5a4a6fa07d1b9483bc8f0562833b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba126e468db5a4a6fa07d1b9483bc8f0562833b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba126e468db5a4a6fa07d1b9483bc8f0562833b"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "6c8b3d2f1f1a873a9d9bb2773de20e87a3cc731a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d8278e27fe53214e0750c886529d43a4fc468383", "patch": "@@ -1,3 +1,8 @@\n+2002-08-01  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* configure.host: Add SH support.\n+        * sysdep/sh/locks.h: New file.\n+\n 2002-07-31  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/awt/Frame.java (Frame): Remove println calls."}, {"sha": "5baabd46be17b19fc88d9c6bd45267913ef9ddda", "filename": "libjava/configure.host", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=d8278e27fe53214e0750c886529d43a4fc468383", "patch": "@@ -135,6 +135,14 @@ case \"${host}\" in\n \tenable_getenv_properties_default=no\n \tenable_main_args_default=no\n \t;;\n+  sh-* | sh[34]*-*)\n+\tsysdeps_dir=sh\n+\tlibgcj_flags=\"${libgcj_flags} -mieee\"\n+\tlibgcj_interpreter=yes\n+\tCHECKREFSPEC=-fcheck-references\n+\tEXCEPTIONSPEC=\n+\tenable_hash_synchronization_default=yes\n+\t;;\n esac\n \n # This case statement supports generic port properties and may refine"}, {"sha": "f6076d601997adf3da73499f549455dcab1b2fa2", "filename": "libjava/sysdep/sh/locks.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2Fsysdep%2Fsh%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8278e27fe53214e0750c886529d43a4fc468383/libjava%2Fsysdep%2Fsh%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fsh%2Flocks.h?ref=d8278e27fe53214e0750c886529d43a4fc468383", "patch": "@@ -0,0 +1,72 @@\n+// locks.h - Thread synchronization primitives. SuperH implementation.\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n+\t\t\t\t/* address.\t\t\t\t*/\n+\n+static unsigned char __cas_lock = 0;\n+\n+inline static void\n+__cas_start_atomic (void)\n+{\n+  unsigned int val;\n+\n+  do\n+    __asm__ __volatile__ (\"tas.b @%1; movt %0\"\n+\t\t\t  : \"=r\" (val)\n+\t\t\t  : \"r\" (&__cas_lock)\n+\t\t\t  : \"memory\");\n+  while (val == 0);\n+}\n+\n+inline static void\n+__cas_end_atomic (void)\n+{\n+  __asm__ __volatile__ (\" \" : : : \"memory\");\n+  __cas_lock = 0;\n+}\n+\n+inline static bool\n+compare_and_swap (volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t  obj_addr_t new_val)\n+{\n+  bool ret;\n+\n+  __cas_start_atomic ();\n+  if (*addr != old)\n+    ret = false;\n+  else\n+    {\n+      *addr = new_val;\n+      ret = true;\n+    }\n+  __cas_end_atomic ();\n+\n+  return ret;\n+}\n+\n+inline static void\n+release_set (volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __asm__ __volatile__ (\" \" : : : \"memory\");\n+  *(addr) = new_val;\n+}\n+\n+inline static bool\n+compare_and_swap_release (volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t\t  obj_addr_t new_val)\n+{\n+  return compare_and_swap (addr, old, new_val);\n+}\n+\n+#endif /* ! __SYSDEP_LOCKS_H__ */"}]}