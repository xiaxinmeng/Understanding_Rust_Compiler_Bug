{"sha": "4f67dfcf24affdc0336fbfc0ff0611251c9703be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2N2RmY2YyNGFmZmRjMDMzNmZiZmMwZmYwNjExMjUxYzk3MDNiZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-01-26T17:14:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-01-26T17:14:22Z"}, "message": "re PR ada/25900 (ICE on ACATS cxac004 in Tree-VRP)\n\n\tPR ada/25900\n\t* tree-vrp.c (extract_range_from_assert): When merging a VR_RANGE\n\twith a VR_ANTI_RANGE and the VR_ANTI_RANGEis completely contained\n\twithin the VR_RANGE, use the VR_RANGE as the result, not the\n\tVR_ANTI_RANGE.\n\t(adjust_range_with_scev): Reject ranges from SCEV which are out\n\tof bounds for the type.\n\nFrom-SVN: r110261", "tree": {"sha": "d7efed4195e58d47f1a7e0e6040b9772010a5665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7efed4195e58d47f1a7e0e6040b9772010a5665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f67dfcf24affdc0336fbfc0ff0611251c9703be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f67dfcf24affdc0336fbfc0ff0611251c9703be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f67dfcf24affdc0336fbfc0ff0611251c9703be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f67dfcf24affdc0336fbfc0ff0611251c9703be/comments", "author": null, "committer": null, "parents": [{"sha": "f4e18df2dea8047a58a70c3583132797da83ca8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e18df2dea8047a58a70c3583132797da83ca8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e18df2dea8047a58a70c3583132797da83ca8a"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "738efd78c79070faae2740504fc4c01b420fab6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f67dfcf24affdc0336fbfc0ff0611251c9703be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f67dfcf24affdc0336fbfc0ff0611251c9703be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f67dfcf24affdc0336fbfc0ff0611251c9703be", "patch": "@@ -1,4 +1,14 @@\n-2006-01-26  Daniel Berlin  <dberlin@dberlin.org>\n+2006-01-26  Jeff Law  <law@redhat.com>\n+\n+\tPR ada/25900\n+\t* tree-vrp.c (extract_range_from_assert): When merging a VR_RANGE\n+\twith a VR_ANTI_RANGE and the VR_ANTI_RANGEis completely contained\n+\twithin the VR_RANGE, use the VR_RANGE as the result, not the\n+\tVR_ANTI_RANGE.\n+\t(adjust_range_with_scev): Reject ranges from SCEV which are out\n+\tof bounds for the type.\n+\n+2005-01-26  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-alias.c (maybe_create_global_var): Change\n \tsubvar walking to an assertion that we don't have subvar'd variables."}, {"sha": "843518eb7835932e058c959f107b67d1208bcce4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f67dfcf24affdc0336fbfc0ff0611251c9703be/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f67dfcf24affdc0336fbfc0ff0611251c9703be/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4f67dfcf24affdc0336fbfc0ff0611251c9703be", "patch": "@@ -1059,7 +1059,8 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t     1. The VR_ANTI_RANGE range is competely within the \n \t\tVR_RANGE and the endpoints of the ranges are\n \t\tdifferent.  In that case the resulting range\n-\t\tshould be the VR_ANTI_RANGE.\n+\t\tshould be whichever range is more precise.\n+\t\tTypically that will be the VR_RANGE.\n \n \t     2. The VR_ANTI_RANGE is completely disjoint from\n \t\tthe VR_RANGE.  In this case the resulting range\n@@ -1100,8 +1101,8 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t  if (compare_values (anti_max, real_max) == -1\n \t      && compare_values (anti_min, real_min) == 1)\n \t    {\n-\t      set_value_range (vr_p, VR_ANTI_RANGE, anti_min,\n-\t\t\t       anti_max, vr_p->equiv);\n+\t      set_value_range (vr_p, VR_RANGE, real_min,\n+\t\t\t       real_max, vr_p->equiv);\n \t    }\n \t  /* Case 2, VR_ANTI_RANGE completely disjoint from\n \t     VR_RANGE.  */\n@@ -1918,12 +1919,21 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n     {\n       /* For VARYING or UNDEFINED ranges, just about anything we get\n \t from scalar evolutions should be better.  */\n+      tree min = TYPE_MIN_VALUE (TREE_TYPE (init));\n+      tree max = TYPE_MAX_VALUE (TREE_TYPE (init));\n+\n       if (init_is_max)\n-\tset_value_range (vr, VR_RANGE, TYPE_MIN_VALUE (TREE_TYPE (init)),\n-\t                 init, vr->equiv);\n+\tmax = init;\n       else\n-\tset_value_range (vr, VR_RANGE, init, TYPE_MAX_VALUE (TREE_TYPE (init)),\n-\t                 vr->equiv);\n+\tmin = init;\n+\n+      /* If we would create an invalid range, then just assume we\n+\t know absolutely nothing.  This may be over-conservative,\n+\t but it's clearly safe.  */\n+      if (compare_values (min, max) == 1)\n+\treturn;\n+\n+      set_value_range (vr, VR_RANGE, min, max, vr->equiv);\n     }\n   else if (vr->type == VR_RANGE)\n     {"}]}