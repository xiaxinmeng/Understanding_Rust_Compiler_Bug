{"sha": "f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhMWU0MzAxYTdhMjAzOGU1MmNhZTRhMmY0ZDJlMmI5NGRmYTVmYw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-05-18T18:43:25Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-05-18T18:43:25Z"}, "message": "* config/mips/mips.md (*zero_extend<GPR:mode>_trunc<SHORT:mode>,\n\n\t*zero_extendhi_truncqi):  Move after the zero_extend patterns.\n\t(*extenddi_truncate<mode>, *extendsi_truncate<mode>): Move after the\n\textend patterns.\n\nFrom-SVN: r147673", "tree": {"sha": "ca98cafb9dbf54c8931d05d2af9e0a4ed884315f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca98cafb9dbf54c8931d05d2af9e0a4ed884315f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc/comments", "author": null, "committer": null, "parents": [{"sha": "6a90d232abb6815994146ecc0ebbfc83d37f6d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a90d232abb6815994146ecc0ebbfc83d37f6d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a90d232abb6815994146ecc0ebbfc83d37f6d8a"}], "stats": {"total": 131, "additions": 69, "deletions": 62}, "files": [{"sha": "973588267b0c6c14ab58c85331b63f1196a3db43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "patch": "@@ -1,3 +1,10 @@\n+2009-05-18  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.md (*zero_extend<GPR:mode>_trunc<SHORT:mode>,\n+\t*zero_extendhi_truncqi):  Move after the zero_extend patterns.\n+\t(*extenddi_truncate<mode>, *extendsi_truncate<mode>): Move after the\n+\textend patterns.\n+\n 2009-05-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39942"}, {"sha": "06c78da1b51d45afbeedf6a8353671f99c32651d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f6a1e4301a7a2038e52cae4a2f4d2e2b94dfa5fc", "patch": "@@ -2736,68 +2736,6 @@\n   \"exts\\t%0,%1,%2,31\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"<MODE>\")])\n-\n-;; Combiner patterns for truncate/sign_extend combinations.  The SI versions\n-;; use the shift/truncate patterns above.\n-\n-(define_insn_and_split \"*extenddi_truncate<mode>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:DI\n-\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_dup 1)\n-\t\t   (match_dup 3)))\n-   (set (match_dup 0)\n-\t(ashiftrt:DI (match_dup 2)\n-\t\t     (match_dup 3)))]\n-{\n-  operands[2] = gen_lowpart (DImode, operands[0]);\n-  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n-})\n-\n-(define_insn_and_split \"*extendsi_truncate<mode>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:SI\n-\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(ashift:DI (match_dup 1)\n-\t\t   (match_dup 3)))\n-   (set (match_dup 0)\n-\t(truncate:SI (ashiftrt:DI (match_dup 2)\n-\t\t\t\t  (match_dup 3))))]\n-{\n-  operands[2] = gen_lowpart (DImode, operands[0]);\n-  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n-})\n-\n-;; Combiner patterns to optimize truncate/zero_extend combinations.\n-\n-(define_insn \"*zero_extend<GPR:mode>_trunc<SHORT:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (zero_extend:GPR\n-\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  operands[2] = GEN_INT (GET_MODE_MASK (<SHORT:MODE>mode));\n-  return \"andi\\t%0,%1,%x2\";\n-}\n-  [(set_attr \"type\" \"logical\")\n-   (set_attr \"mode\" \"<GPR:MODE>\")])\n-\n-(define_insn \"*zero_extendhi_truncqi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (zero_extend:HI\n-\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\" \"logical\")\n-   (set_attr \"mode\" \"HI\")])\n \f\n ;;\n ;;  ....................\n@@ -2922,6 +2860,29 @@\n   \"lbu\\t%0,%1\"\n   [(set_attr \"move_type\" \"load\")\n    (set_attr \"mode\" \"HI\")])\n+\n+;; Combiner patterns to optimize truncate/zero_extend combinations.\n+\n+(define_insn \"*zero_extend<GPR:mode>_trunc<SHORT:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (zero_extend:GPR\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16\"\n+{\n+  operands[2] = GEN_INT (GET_MODE_MASK (<SHORT:MODE>mode));\n+  return \"andi\\t%0,%1,%x2\";\n+}\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*zero_extendhi_truncqi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+        (zero_extend:HI\n+\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16\"\n+  \"andi\\t%0,%1,0xff\"\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"mode\" \"HI\")])\n \f\n ;;\n ;;  ....................\n@@ -3048,6 +3009,45 @@\n   [(set_attr \"move_type\" \"signext,load\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; Combiner patterns for truncate/sign_extend combinations.  The SI versions\n+;; use the shift/truncate patterns.\n+\n+(define_insn_and_split \"*extenddi_truncate<mode>\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(sign_extend:DI\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2)\n+\t(ashift:DI (match_dup 1)\n+\t\t   (match_dup 3)))\n+   (set (match_dup 0)\n+\t(ashiftrt:DI (match_dup 2)\n+\t\t     (match_dup 3)))]\n+{\n+  operands[2] = gen_lowpart (DImode, operands[0]);\n+  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n+})\n+\n+(define_insn_and_split \"*extendsi_truncate<mode>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(sign_extend:SI\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 2)\n+\t(ashift:DI (match_dup 1)\n+\t\t   (match_dup 3)))\n+   (set (match_dup 0)\n+\t(truncate:SI (ashiftrt:DI (match_dup 2)\n+\t\t\t\t  (match_dup 3))))]\n+{\n+  operands[2] = gen_lowpart (DImode, operands[0]);\n+  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n+})\n+\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]"}]}