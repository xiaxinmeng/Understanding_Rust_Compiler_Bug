{"sha": "8692b15ae7c05e3224f285069e070c009d9f6efe", "node_id": "C_kwDOANBUbNoAKDg2OTJiMTVhZTdjMDVlMzIyNGYyODUwNjllMDcwYzAwOWQ5ZjZlZmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T09:52:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T09:52:49Z"}, "message": "ubsan: Avoid narrowing of multiply for -fsanitize=signed-integer-overflow [PR108256]\n\nWe shouldn't narrow multiplications originally done in signed types,\nbecause the original multiplication might overflow but the narrowed\none will be done in unsigned arithmetics and will never overflow.\n\n2023-01-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/108256\n\t* convert.cc (do_narrow): Punt for MULT_EXPR if original\n\ttype doesn't wrap around and -fsanitize=signed-integer-overflow\n\tis on.\n\t* fold-const.cc (fold_unary_loc) <CASE_CONVERT>: Likewise.\n\n\t* c-c++-common/ubsan/pr108256.c: New test.", "tree": {"sha": "72c7c7360e12e17add721f5b3d82c54a872151ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72c7c7360e12e17add721f5b3d82c54a872151ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8692b15ae7c05e3224f285069e070c009d9f6efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8692b15ae7c05e3224f285069e070c009d9f6efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8692b15ae7c05e3224f285069e070c009d9f6efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8692b15ae7c05e3224f285069e070c009d9f6efe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44baa34157cf81306be23eacece751aa020985d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44baa34157cf81306be23eacece751aa020985d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44baa34157cf81306be23eacece751aa020985d4"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "fe85bcb3323f52153724949062de31f9712f8ba1", "filename": "gcc/convert.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Fconvert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Fconvert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.cc?ref=8692b15ae7c05e3224f285069e070c009d9f6efe", "patch": "@@ -384,6 +384,14 @@ do_narrow (location_t loc,\n       && sanitize_flags_p (SANITIZE_SI_OVERFLOW))\n     return NULL_TREE;\n \n+  /* Similarly for multiplication, but in that case it can be\n+     problematic even if typex is unsigned type - 0xffff * 0xffff\n+     overflows in int.  */\n+  if (ex_form == MULT_EXPR\n+      && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (expr))\n+      && sanitize_flags_p (SANITIZE_SI_OVERFLOW))\n+    return NULL_TREE;\n+\n   /* But now perhaps TYPEX is as wide as INPREC.\n      In that case, do nothing special here.\n      (Otherwise would recurse infinitely in convert.  */"}, {"sha": "9aaea71a2fc4dcb5d4621aabbba54127c24e804a", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=8692b15ae7c05e3224f285069e070c009d9f6efe", "patch": "@@ -9574,7 +9574,9 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       if (INTEGRAL_TYPE_P (type)\n \t  && TREE_CODE (op0) == MULT_EXPR\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (op0)))\n+\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (op0))\n+\t  && (TYPE_OVERFLOW_WRAPS (TREE_TYPE (op0))\n+\t      || !sanitize_flags_p (SANITIZE_SI_OVERFLOW)))\n \t{\n \t  /* Be careful not to introduce new overflows.  */\n \t  tree mult_type;"}, {"sha": "c4054aa0832354bf7fa41a42036e2cb41ceaa5fb", "filename": "gcc/testsuite/c-c++-common/ubsan/pr108256.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8692b15ae7c05e3224f285069e070c009d9f6efe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr108256.c?ref=8692b15ae7c05e3224f285069e070c009d9f6efe", "patch": "@@ -0,0 +1,27 @@\n+/* PR sanitizer/108256 */\n+/* { dg-do run { target { lp64 || ilp32 } } } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+unsigned short\n+foo (unsigned short x, unsigned short y)\n+{\n+  return x * y;\n+}\n+\n+unsigned short\n+bar (unsigned short x, unsigned short y)\n+{\n+  int r = x * y;\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  volatile unsigned short a = foo (0xffff, 0xffff);\n+  volatile unsigned short b = bar (0xfffe, 0xfffe);\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: 65535 \\\\\\* 65535 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 65534 \\\\\\* 65534 cannot be represented in type 'int'\" } */"}]}