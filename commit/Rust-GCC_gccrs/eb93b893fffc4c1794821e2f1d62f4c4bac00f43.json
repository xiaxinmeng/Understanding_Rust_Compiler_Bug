{"sha": "eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5M2I4OTNmZmZjNGMxNzk0ODIxZTJmMWQ2MmY0YzRiYWMwMGY0Mw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2010-10-27T22:51:18Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2010-10-27T22:51:18Z"}, "message": "checking in Nathan's patch because I accidently checked in part of it with my earlier patch.\n\nchecking in Nathan's patch because I accidently checked in part of it\nwith my earlier patch.  Also adding ChangeLog entry I forgot.\n\n2010-10-27  Nathan Froyd  <froydnj@codesourcery.com>\n\n        * config/ia64/ia64-protos.h (ia64_function_arg): Delete.\n        (ia64_function_arg_advance): Delete.\n        * config/ia64/ia64.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Delete.\n        (FUNCTION_ARG_ADVANCE): Delete.\n        * config/ia64/ia64.c (ia64_function_arg): Rename to...\n        (ia64_function_arg_1): ...this.  Make static.  Take const_tree and\n        bool arguments.\n        (ia64_function_arg, ia64_function_incoming_arg): New functions.\n        (ia64_function_arg_advance): Make static.  Take a const_tree and\n        a bool.\n        (TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n        (TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166022", "tree": {"sha": "4e9c32edba52df518a8f1bc1c94ab7d09992d655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9c32edba52df518a8f1bc1c94ab7d09992d655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/comments", "author": null, "committer": null, "parents": [{"sha": "ffa88471b5df039bb9b8b8e7ce0ce17a71a0d3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa88471b5df039bb9b8b8e7ce0ce17a71a0d3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa88471b5df039bb9b8b8e7ce0ce17a71a0d3bd"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "126e0bcaf58c34b0151547c35bc9b5d7cdd3157b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "patch": "@@ -1,3 +1,33 @@\n+2010-10-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/ia64/ia64-protos.h (ia64_function_arg): Delete.\n+\t(ia64_function_arg_advance): Delete.\n+\t* config/ia64/ia64.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/ia64/ia64.c (ia64_function_arg): Rename to...\n+\t(ia64_function_arg_1): ...this.  Make static.  Take const_tree and\n+\tbool arguments.\n+\t(ia64_function_arg, ia64_function_incoming_arg): New functions.\n+\t(ia64_function_arg_advance): Make static.  Take a const_tree and\n+\ta bool.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n+2010-10-27  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* doc/tm.texi.in (TARGET_GET_RAW_RESULT_MODE): New.\n+\t(TARGET_GET_RAW_ARG_MODE): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (get_raw_result_mode): New.\n+\t(get_raw_arg_mode): New.\n+\t* targhooks.c (default_get_reg_raw_mode): New.\n+\t* targhooks.h (default_get_reg_raw_mode): New.\n+\t* builtins.c (apply_args_size): Use targetm.calls.get_raw_arg_mode.\n+\t(apply_result_size): Ditto.\n+\t* config/ia64/ia64.c (ia64_get_reg_raw_mode): New.\n+\t(TARGET_GET_RAW_RESULT_MODE): Define.\n+\t(TARGET_GET_RAW_ARG_MODE): Ditto.\n+\n 2010-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sol2-unwind.h (sparc64_fallback_frame_state): Adjust"}, {"sha": "d2393bc8ccf2ca28ceb5903acfbdb1cfdf11d1be", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "patch": "@@ -63,14 +63,10 @@ extern const char *get_bundle_name (int);\n \n #ifdef TREE_CODE\n #ifdef RTX_CODE\n-extern rtx ia64_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t      tree, int, int);\n extern rtx ia64_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern rtx ia64_va_arg (tree, tree);\n #endif /* RTX_CODE */\n \n-extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t       tree, int);\n extern int ia64_function_arg_boundary (enum machine_mode, tree);\n extern void ia64_asm_output_external (FILE *, tree, const char *);\n extern void ia64_vms_output_aligned_decl_common (FILE *, tree, const char *,"}, {"sha": "fbee1e719b62dfe7d1f28d91f45a99b22282b705", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb93b893fffc4c1794821e2f1d62f4c4bac00f43/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=eb93b893fffc4c1794821e2f1d62f4c4bac00f43", "patch": "@@ -1026,19 +1026,6 @@ enum reg_class\n #define FR_RET_LAST  FR_REG (15)\n #define AR_ARG_FIRST OUT_REG (0)\n \n-/* A C expression that controls whether a function argument is passed in a\n-   register, and which register.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  ia64_function_arg (&CUM, MODE, TYPE, NAMED, 0)\n-\n-/* Define this macro if the target machine has \"register windows\", so that the\n-   register in which a function sees an arguments is not necessarily the same\n-   as the one in which the caller passed the argument.  */\n-\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED) \\\n-  ia64_function_arg (&CUM, MODE, TYPE, NAMED, 1)\n-\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the type\n    `int' suffices and can hold the number of bytes of argument so far.  */\n@@ -1086,14 +1073,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (CUM).atypes[6] = (CUM).atypes[7] = I64;                              \\\n } while (0)\n \n-/* A C statement (sans semicolon) to update the summarizer variable CUM to\n-   advance past an argument in the argument list.  The values MODE, TYPE and\n-   NAMED describe that argument.  Once this is done, the variable CUM is\n-   suitable for analyzing the *following* argument with `FUNCTION_ARG'.  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n- ia64_function_arg_advance (&CUM, MODE, TYPE, NAMED)\n-\n /* If defined, a C expression that gives the alignment boundary, in bits, of an\n    argument with the specified mode and type.  */\n "}]}