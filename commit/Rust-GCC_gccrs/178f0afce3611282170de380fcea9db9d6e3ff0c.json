{"sha": "178f0afce3611282170de380fcea9db9d6e3ff0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4ZjBhZmNlMzYxMTI4MjE3MGRlMzgwZmNlYTlkYjlkNmUzZmYwYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-07T21:20:39Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-07T21:22:28Z"}, "message": "PR middle-end/98578 - ICE warning on uninitialized VLA access\n\ngcc/c-family/ChangeLog:\n\n\tPR middle-end/98578\n\t* c-pretty-print.c (print_mem_ref): Strip array from access type.\n\tAvoid assuming acces type's size is constant.  Correct condition\n\tguarding the printing of a parenthesis.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/98578\n\t* gcc.dg/plugin/gil-1.c: Adjust expected output.\n\t* gcc.dg/uninit-pr98578.c: New test.", "tree": {"sha": "f51d4f81b339ac5b16118c497b9499835abe5d5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51d4f81b339ac5b16118c497b9499835abe5d5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178f0afce3611282170de380fcea9db9d6e3ff0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178f0afce3611282170de380fcea9db9d6e3ff0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178f0afce3611282170de380fcea9db9d6e3ff0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178f0afce3611282170de380fcea9db9d6e3ff0c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f359597e49a15a2aef8f83ea7a14649854334cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f359597e49a15a2aef8f83ea7a14649854334cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f359597e49a15a2aef8f83ea7a14649854334cb"}], "stats": {"total": 143, "additions": 128, "deletions": 15}, "files": [{"sha": "87301a2091c5774d80066b6caa93c97d86c82daf", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=178f0afce3611282170de380fcea9db9d6e3ff0c", "patch": "@@ -1844,22 +1844,25 @@ print_mem_ref (c_pretty_printer *pp, tree e)\n \t}\n     }\n \n-  const tree access_type = TREE_TYPE (e);\n+  tree access_type = TREE_TYPE (e);\n+  if (TREE_CODE (access_type) == ARRAY_TYPE)\n+    access_type = TREE_TYPE (access_type);\n   tree arg_type = TREE_TYPE (TREE_TYPE (arg));\n   if (TREE_CODE (arg_type) == ARRAY_TYPE)\n     arg_type = TREE_TYPE (arg_type);\n \n   if (tree access_size = TYPE_SIZE_UNIT (access_type))\n-    {\n-      /* For naturally aligned accesses print the nonzero offset\n-\t in units of the accessed type, in the form of an index.\n-\t For unaligned accesses also print the residual byte offset.  */\n-      offset_int asize = wi::to_offset (access_size);\n-      offset_int szlg2 = wi::floor_log2 (asize);\n-\n-      elt_idx = byte_off >> szlg2;\n-      byte_off = byte_off - (elt_idx << szlg2);\n-    }\n+    if (TREE_CODE (access_size) == INTEGER_CST)\n+      {\n+\t/* For naturally aligned accesses print the nonzero offset\n+\t   in units of the accessed type, in the form of an index.\n+\t   For unaligned accesses also print the residual byte offset.  */\n+\toffset_int asize = wi::to_offset (access_size);\n+\toffset_int szlg2 = wi::floor_log2 (asize);\n+\n+\telt_idx = byte_off >> szlg2;\n+\tbyte_off = byte_off - (elt_idx << szlg2);\n+      }\n \n   /* True to include a cast to the accessed type.  */\n   const bool access_cast = VOID_TYPE_P (arg_type)\n@@ -1924,9 +1927,9 @@ print_mem_ref (c_pretty_printer *pp, tree e)\n     }\n   if (elt_idx != 0)\n     {\n-      if (byte_off == 0 && char_cast)\n+      if (access_cast || char_cast)\n \tpp_c_right_paren (pp);\n-      pp_c_right_paren (pp);\n+\n       if (addr)\n \t{\n \t  pp_space (pp);"}, {"sha": "66872f074662a6966f10279492989f65fe2736a3", "filename": "gcc/testsuite/gcc.dg/plugin/gil-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fgil-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fgil-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fgil-1.c?ref=178f0afce3611282170de380fcea9db9d6e3ff0c", "patch": "@@ -13,7 +13,7 @@ void test_2 (PyObject *obj)\n {\n   Py_BEGIN_ALLOW_THREADS /* { dg-message \"releasing the GIL here\" } */\n \n-  Py_INCREF (obj); /* { dg-warning \"use of PyObject '\\\\*\\\\(obj\\\\)' without the GIL\" } */\n+  Py_INCREF (obj); /* { dg-warning \"use of PyObject '\\\\*obj' without the GIL\" } */\n   Py_DECREF (obj);\n \n   Py_END_ALLOW_THREADS\n@@ -60,7 +60,7 @@ void test_5 (PyObject *obj)\n static void  __attribute__((noinline))\n called_by_test_6 (PyObject *obj)\n {\n-  Py_INCREF (obj); /* { dg-warning \"use of PyObject '\\\\*\\\\(obj\\\\)' without the GIL\" } */\n+  Py_INCREF (obj); /* { dg-warning \"use of PyObject '\\\\*obj' without the GIL\" } */\n   Py_DECREF (obj);\n }\n "}, {"sha": "98d611757ab5a09c76180c2fb0ac7a63c33988d3", "filename": "gcc/testsuite/gcc.dg/uninit-pr98578.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178f0afce3611282170de380fcea9db9d6e3ff0c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98578.c?ref=178f0afce3611282170de380fcea9db9d6e3ff0c", "patch": "@@ -0,0 +1,110 @@\n+/* PR middle-end/98578 - ICE warning on uninitialized VLA access\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void* malloc (__SIZE_TYPE__);\n+\n+void T (int, ...);\n+\n+void vla_n (int n, int i)\n+{\n+  int a1[n];\n+\n+  /* a1[I] should be formatted as as a1[I] (or, for I == 0, perhaps\n+     as *a1), but definitely not as *a1[I].  This is a bug in VLA\n+     formatting.  */\n+  T (a1[0]);        // { dg-warning \"'a1\\\\\\[0]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"'\\\\*a1\\\\\\[0]' is used uninitialized\" \"spurious star\" { target *-*-* } .-1 }\n+  T (a1[1]);        // { dg-warning \"a1\\\\\\[1]' is used uninitialized\" }\n+  T (a1[i]);        // { dg-warning \"a1\\\\\\[i]' is used uninitialized\" }\n+}\n+\n+void vla_n_2 (int n, int i)\n+{\n+  int a2[n][2];\n+\n+  T (a2[0][0]);   // { dg-warning \"a2\\\\\\[0]\\\\\\[0]' is used uninitialized\" }\n+  T (a2[2][1]);   // { dg-warning \"a2\\\\\\[2]\\\\\\[1]' is used uninitialized\" }\n+  T (a2[3][i]);   // { dg-warning \"a2\\\\\\[3]\\\\\\[i]' is used uninitialized\" }\n+  T (a2[i][0]);   // { dg-warning \"a2\\\\\\[i]\\\\\\[0]' is used uninitialized\" }\n+  T (a2[i][i]);   // { dg-warning \"a2\\\\\\[i]\\\\\\[i]' is used uninitialized\" }\n+}\n+\n+\n+void vla_3_n (int n, int i)\n+{\n+  int a2[3][n];\n+\n+  T (a2[0][0]);     // { dg-warning \"a2\\\\\\[0]\\\\\\[0]' is used uninitialized\" }\n+  T (a2[1][2]);     // { dg-warning \"a2\\\\\\[1]\\\\\\[2]' is used uninitialized\" }\n+  T (a2[2][i]);     // { dg-warning \"a2\\\\\\[2]\\\\\\[i]' is used uninitialized\" }\n+  T (a2[i][3]);     // { dg-warning \"a2\\\\\\[i]\\\\\\[3]' is used uninitialized\" }\n+  T (a2[i][i]);     // { dg-warning \"a2\\\\\\[i]\\\\\\[i]' is used uninitialized\" }\n+}\n+\n+\n+void vla_n_n (int n, int i)\n+{\n+  int a2[n][n];\n+\n+  T (a2[0][0]);     // { dg-warning \"a2\\\\\\[0]\\\\\\[0]' is used uninitialized\" }\n+  T (a2[4][5]);     // { dg-warning \"a2\\\\\\[4]\\\\\\[5]' is used uninitialized\" }\n+  T (a2[6][i]);     // { dg-warning \"a2\\\\\\[6]\\\\\\[i]' is used uninitialized\" }\n+  T (a2[i][7]);     // { dg-warning \"a2\\\\\\[i]\\\\\\[7]' is used uninitialized\" }\n+  T (a2[i][i]);     // { dg-warning \"a2\\\\\\[i]\\\\\\[i]' is used uninitialized\" }\n+}\n+\n+\n+void char_ptr_n (int n, int i)\n+{\n+  char *p = malloc (n);\n+\n+  T (p[0]);         // { dg-warning \"'\\\\\\*p' is used uninitialized\" }\n+  T (p[1]);         // { dg-warning \"'p\\\\\\[1]' is used uninitialized\" }\n+  T (p[i]);         // { dg-warning \"'p\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"is used uninitialized\" \"POINTER_PLUS_EXPR\" { target *-*-* } .-1 }\n+}\n+\n+\n+void int_ptr_n (int n, int i)\n+{\n+  int *p = malloc (n);\n+\n+  T (p[0]);         // { dg-warning \"'\\\\\\*p' is used uninitialized\" }\n+  T (p[1]);         // { dg-warning \"'p\\\\\\[1]' is used uninitialized\" }\n+  T (p[i]);         // { dg-warning \"'p\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"is used uninitialized\" \"POINTER_PLUS_EXPR\" { target *-*-* } .-1 }\n+}\n+\n+\n+void int_arr_ptr_n (int n, int i)\n+{\n+  int (*p)[n] = malloc (n);\n+\n+  T ((*p)[0]);      // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[0]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[0]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[1]);      // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[1]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[1]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[i]);      // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[i]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+}\n+\n+\n+void int_arr_ptr_n_n (int n, int i)\n+{\n+  int (*p)[n][n] = malloc (n);\n+\n+  T ((*p)[0][0]);   // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[0]\\\\\\[0]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[0]\\\\\\[0]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[1][2]);   // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[1]\\\\\\[2]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[1]\\\\\\[2]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[0][i]);   // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[0]\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[0]\\\\\\[i]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[3][i]);   // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[3]\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[3]\\\\\\[i]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+  T ((*p)[i][i]);   // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[i]\\\\\\[i]' is used uninitialized\" \"pr98587\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[i]\\\\\\[i]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+\n+  T ((*p)[i][i + 1]); // { dg-warning \"\\\\(\\\\*p\\\\)\\\\\\[i]\\\\\\[i \\\\+ 1]' is used uninitialized\" \"pr98588\" { xfail *-*-* } }\n+                    // { dg-warning \"\\\\*p\\\\\\[i]\\\\\\[<unknown>]' is used uninitialized\" \"missing parens\" { target *-*-* } .-1 }\n+}"}]}