{"sha": "41b37d5ec1064decf497f1ce4657582f4b4807c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiMzdkNWVjMTA2NGRlY2Y0OTdmMWNlNDY1NzU4MmY0YjQ4MDdjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-05-19T16:16:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-05-19T16:16:15Z"}, "message": "re PR middle-end/66199 (lastprivate/linear clause issues on combined constructs)\n\n\tPR middle-end/66199\n\t* tree.h (OMP_TEAMS_COMBINED): Define.\n\t* gimplify.c (enum gimplify_omp_var_data): Add\n\tGOVD_LINEAR_LASTPRIVATE_NO_OUTER.\n\t(enum omp_region_type): Add ORT_COMBINED_TEAMS.\n\t(omp_notice_variable): Accept both ORT_TEAMS\n\tand ORT_COMBINED_TEAMS.  Don't recurse if\n\tGOVD_LINEAR_LASTPRIVATE_NO_OUTER is set and either\n\tGOVD_LINEAR is set, or GOVD_LASTPRIVATE without\n\tGOVD_FIRSTPRIVATE.\n\t(omp_no_lastprivate): New function.\n\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_LASTPRIVATE\n\tand OMP_CLAUSE_LINEAR, if omp_no_lastprivate, don't\n\tnotice_outer and set appropriate bits, otherwise make\n\tsure default(none) combined constructs won't complain.\n\t(gimplify_adjust_omp_clauses): Remove OMP_CLAUSE_LINEAR\n\touter special casing, for OMP_CLAUSE_LASTPRIVATE if\n\tomp_no_lastprivate either remove the clause or turn it\n\tinto OMP_CLAUSE_PRIVATE.\n\t(gimplify_omp_for): Fix up handling of implicit\n\tlastprivate or linear iterators.\n\t(gimplify_omp_workshare): For OMP_TEAMS_COMBINED use\n\tORT_COMBINED_TEAMS.\n\t* omp-low.c (lower_omp_for_lastprivate): For combined\n\tfor simd use fd.loop.n2 from the for rather than simd.\ngcc/c/\n\t* c-parser.c (c_parser_omp_for_loop): Don't add\n\tOMP_CLAUSE_SHARED to OMP_PARALLEL_CLAUSES when moving\n\tOMP_CLAUSE_LASTPRIVATE clause to OMP_FOR_CLAUSES.\n\t(c_parser_omp_teams): Set OMP_TEAMS_COMBINED for combined\n\tconstructs.\ngcc/cp/\n\t* parser.c (cp_parser_omp_for_loop): Don't add\n\tOMP_CLAUSE_SHARED to OMP_PARALLEL_CLAUSES when moving\n\tOMP_CLAUSE_LASTPRIVATE clause to OMP_FOR_CLAUSES.\n\t(cp_parser_omp_teams): Set OMP_TEAMS_COMBINED for combined\n\tconstructs.\ngcc/fortran/\n\t* trans-openmp.c (gfc_trans_omp_teams): Set OMP_TEAMS_COMBINED for\n\tcombined constructs.\n\t(gfc_trans_omp_target): Make sure BIND_EXPR has non-NULL\n\tBIND_EXPR_BLOCK.\nlibgomp/\n\t* testsuite/libgomp.c/pr66199-1.c: New test.\n\t* testsuite/libgomp.c/pr66199-2.c: New test.\n\t* testsuite/libgomp.c++/pr66199-1.C: New test.\n\t* testsuite/libgomp.c++/pr66199-2.C: New test.\n\t* testsuite/libgomp.fortran/pr66199-1.f90: New test.\n\t* testsuite/libgomp.fortran/pr66199-2.f90: New test.\n\nFrom-SVN: r223387", "tree": {"sha": "f14df6d018a5dd0d32f46dd60a2499f36dc0d833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14df6d018a5dd0d32f46dd60a2499f36dc0d833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41b37d5ec1064decf497f1ce4657582f4b4807c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b37d5ec1064decf497f1ce4657582f4b4807c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b37d5ec1064decf497f1ce4657582f4b4807c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b37d5ec1064decf497f1ce4657582f4b4807c8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94c8e7abf6d395ba65334e9be49181c3081a5062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c8e7abf6d395ba65334e9be49181c3081a5062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c8e7abf6d395ba65334e9be49181c3081a5062"}], "stats": {"total": 611, "additions": 540, "deletions": 71}, "files": [{"sha": "5ab8283a8be272bf832d986ef09e93d6dfaacb67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1,3 +1,31 @@\n+2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66199\n+\t* tree.h (OMP_TEAMS_COMBINED): Define.\n+\t* gimplify.c (enum gimplify_omp_var_data): Add\n+\tGOVD_LINEAR_LASTPRIVATE_NO_OUTER.\n+\t(enum omp_region_type): Add ORT_COMBINED_TEAMS.\n+\t(omp_notice_variable): Accept both ORT_TEAMS\n+\tand ORT_COMBINED_TEAMS.  Don't recurse if\n+\tGOVD_LINEAR_LASTPRIVATE_NO_OUTER is set and either\n+\tGOVD_LINEAR is set, or GOVD_LASTPRIVATE without\n+\tGOVD_FIRSTPRIVATE.\n+\t(omp_no_lastprivate): New function.\n+\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_LASTPRIVATE\n+\tand OMP_CLAUSE_LINEAR, if omp_no_lastprivate, don't\n+\tnotice_outer and set appropriate bits, otherwise make\n+\tsure default(none) combined constructs won't complain.\n+\t(gimplify_adjust_omp_clauses): Remove OMP_CLAUSE_LINEAR\n+\touter special casing, for OMP_CLAUSE_LASTPRIVATE if\n+\tomp_no_lastprivate either remove the clause or turn it\n+\tinto OMP_CLAUSE_PRIVATE.\n+\t(gimplify_omp_for): Fix up handling of implicit\n+\tlastprivate or linear iterators.\n+\t(gimplify_omp_workshare): For OMP_TEAMS_COMBINED use\n+\tORT_COMBINED_TEAMS.\n+\t* omp-low.c (lower_omp_for_lastprivate): For combined\n+\tfor simd use fd.loop.n2 from the for rather than simd.\n+\n 2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/cris/cris.c (cris_expand_prologue): Use gen_raw_REG"}, {"sha": "390400d79031b1f0cf5b0c04d1784d03b7f5ee5b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1,3 +1,12 @@\n+2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66199\n+\t* c-parser.c (c_parser_omp_for_loop): Don't add\n+\tOMP_CLAUSE_SHARED to OMP_PARALLEL_CLAUSES when moving\n+\tOMP_CLAUSE_LASTPRIVATE clause to OMP_FOR_CLAUSES.\n+\t(c_parser_omp_teams): Set OMP_TEAMS_COMBINED for combined\n+\tconstructs.\n+\n 2015-05-19  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* c-typeck.c (build_array_ref): Use std::swap instead of explicit"}, {"sha": "f496733b8a9544cb7c58f52dfdc4432b87389335", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -13100,12 +13100,9 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n \t\t      }\n \t\t    else\n \t\t      {\n-\t\t\t/* Copy lastprivate (decl) clause to OMP_FOR_CLAUSES,\n-\t\t\t   change it to shared (decl) in\n-\t\t\t   OMP_PARALLEL_CLAUSES.  */\n-\t\t\ttree l = build_omp_clause (OMP_CLAUSE_LOCATION (*c),\n-\t\t\t\t\t\t   OMP_CLAUSE_LASTPRIVATE);\n-\t\t\tOMP_CLAUSE_DECL (l) = OMP_CLAUSE_DECL (*c);\n+\t\t\t/* Move lastprivate (decl) clause to OMP_FOR_CLAUSES.  */\n+\t\t\ttree l = *c;\n+\t\t\t*c = OMP_CLAUSE_CHAIN (*c);\n \t\t\tif (code == OMP_SIMD)\n \t\t\t  {\n \t\t\t    OMP_CLAUSE_CHAIN (l)\n@@ -13117,7 +13114,6 @@ c_parser_omp_for_loop (location_t loc, c_parser *parser, enum tree_code code,\n \t\t\t    OMP_CLAUSE_CHAIN (l) = clauses;\n \t\t\t    clauses = l;\n \t\t\t  }\n-\t\t\tOMP_CLAUSE_SET_CODE (*c, OMP_CLAUSE_SHARED);\n \t\t      }\n \t\t  }\n \t    }\n@@ -13802,6 +13798,7 @@ c_parser_omp_teams (location_t loc, c_parser *parser,\n \t  TREE_TYPE (ret) = void_type_node;\n \t  OMP_TEAMS_CLAUSES (ret) = clauses;\n \t  OMP_TEAMS_BODY (ret) = block;\n+\t  OMP_TEAMS_COMBINED (ret) = 1;\n \t  return add_stmt (ret);\n \t}\n     }"}, {"sha": "9a3fb854123fc17f494cf47f4747e71e076bceda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1,3 +1,12 @@\n+2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66199\n+\t* parser.c (cp_parser_omp_for_loop): Don't add\n+\tOMP_CLAUSE_SHARED to OMP_PARALLEL_CLAUSES when moving\n+\tOMP_CLAUSE_LASTPRIVATE clause to OMP_FOR_CLAUSES.\n+\t(cp_parser_omp_teams): Set OMP_TEAMS_COMBINED for combined\n+\tconstructs.\n+\n 2015-05-19  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* typeck.c (composite_pointer_type): Use std::swap instead of explicit"}, {"sha": "4f429a2d60d98771ff9894f3d687632283b456aa", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -30493,11 +30493,9 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t    else if (OMP_CLAUSE_CODE (*c) == OMP_CLAUSE_LASTPRIVATE\n \t\t     && OMP_CLAUSE_DECL (*c) == real_decl)\n \t      {\n-\t\t/* Add lastprivate (decl) clause to OMP_FOR_CLAUSES,\n-\t\t   change it to shared (decl) in OMP_PARALLEL_CLAUSES.  */\n-\t\ttree l = build_omp_clause (loc, OMP_CLAUSE_LASTPRIVATE);\n-\t\tOMP_CLAUSE_DECL (l) = real_decl;\n-\t\tCP_OMP_CLAUSE_INFO (l) = CP_OMP_CLAUSE_INFO (*c);\n+\t\t/* Move lastprivate (decl) clause to OMP_FOR_CLAUSES.  */\n+\t\ttree l = *c;\n+\t\t*c = OMP_CLAUSE_CHAIN (*c);\n \t\tif (code == OMP_SIMD)\n \t\t  {\n \t\t    OMP_CLAUSE_CHAIN (l) = cclauses[C_OMP_CLAUSE_SPLIT_FOR];\n@@ -30508,8 +30506,6 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n \t\t    OMP_CLAUSE_CHAIN (l) = clauses;\n \t\t    clauses = l;\n \t\t  }\n-\t\tOMP_CLAUSE_SET_CODE (*c, OMP_CLAUSE_SHARED);\n-\t\tCP_OMP_CLAUSE_INFO (*c) = NULL;\n \t\tadd_private_clause = false;\n \t      }\n \t    else\n@@ -31343,6 +31339,7 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n \t  TREE_TYPE (ret) = void_type_node;\n \t  OMP_TEAMS_CLAUSES (ret) = clauses;\n \t  OMP_TEAMS_BODY (ret) = body;\n+\t  OMP_TEAMS_COMBINED (ret) = 1;\n \t  return add_stmt (ret);\n \t}\n     }"}, {"sha": "92d704afc67a8f03ef365ed7c1ddaacad550a61e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1,3 +1,11 @@\n+2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66199\n+\t* trans-openmp.c (gfc_trans_omp_teams): Set OMP_TEAMS_COMBINED for\n+\tcombined constructs.\n+\t(gfc_trans_omp_target): Make sure BIND_EXPR has non-NULL\n+\tBIND_EXPR_BLOCK.\n+\n 2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cpp.c (maybe_print_line): Strengthen local \"map\" from"}, {"sha": "9d95e86aa235fd594b522400824749543e1c5ac2", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -4116,6 +4116,7 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa)\n   stmtblock_t block;\n   gfc_omp_clauses clausesa_buf[GFC_OMP_SPLIT_NUM];\n   tree stmt, omp_clauses = NULL_TREE;\n+  bool combined = true;\n \n   gfc_start_block (&block);\n   if (clausesa == NULL)\n@@ -4132,6 +4133,7 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa)\n     case EXEC_OMP_TARGET_TEAMS:\n     case EXEC_OMP_TEAMS:\n       stmt = gfc_trans_omp_code (code->block->next, true);\n+      combined = false;\n       break;\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TEAMS_DISTRIBUTE:\n@@ -4145,6 +4147,8 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa)\n     }\n   stmt = build2_loc (input_location, OMP_TEAMS, void_type_node, stmt,\n \t\t     omp_clauses);\n+  if (combined)\n+    OMP_TEAMS_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }\n@@ -4165,9 +4169,14 @@ gfc_trans_omp_target (gfc_code *code)\n   if (code->op == EXEC_OMP_TARGET)\n     stmt = gfc_trans_omp_code (code->block->next, true);\n   else\n-    stmt = gfc_trans_omp_teams (code, clausesa);\n-  if (TREE_CODE (stmt) != BIND_EXPR)\n-    stmt = build3_v (BIND_EXPR, NULL, stmt, NULL_TREE);\n+    {\n+      pushlevel ();\n+      stmt = gfc_trans_omp_teams (code, clausesa);\n+      if (TREE_CODE (stmt) != BIND_EXPR)\n+\tstmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n+      else\n+\tpoplevel (0, 0);\n+    }\n   if (flag_openmp)\n     stmt = build2_loc (input_location, OMP_TARGET, void_type_node, stmt,\n \t\t       omp_clauses);"}, {"sha": "c5eccf0628015a32fcf9b619117ecf1184f12014", "filename": "gcc/gimplify.c", "status": "modified", "additions": 209, "deletions": 53, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -111,6 +111,9 @@ enum gimplify_omp_var_data\n   /* Flag for GOVD_MAP: don't copy back.  */\n   GOVD_MAP_TO_ONLY = 8192,\n \n+  /* Flag for GOVD_LINEAR or GOVD_LASTPRIVATE: no outer reference.  */\n+  GOVD_LINEAR_LASTPRIVATE_NO_OUTER = 16384,\n+\n   GOVD_DATA_SHARE_CLASS = (GOVD_SHARED | GOVD_PRIVATE | GOVD_FIRSTPRIVATE\n \t\t\t   | GOVD_LASTPRIVATE | GOVD_REDUCTION | GOVD_LINEAR\n \t\t\t   | GOVD_LOCAL)\n@@ -126,6 +129,7 @@ enum omp_region_type\n   ORT_TASK = 4,\n   ORT_UNTIED_TASK = 5,\n   ORT_TEAMS = 8,\n+  ORT_COMBINED_TEAMS = 9,\n   /* Data region.  */\n   ORT_TARGET_DATA = 16,\n   /* Data region with offloading.  */\n@@ -5870,7 +5874,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \t\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)));\n \t      error_at (ctx->location, \"enclosing task\");\n \t    }\n-\t  else if (ctx->region_type == ORT_TEAMS)\n+\t  else if (ctx->region_type & ORT_TEAMS)\n \t    {\n \t      error (\"%qE not specified in enclosing teams construct\",\n \t\t     DECL_NAME (lang_hooks.decls.omp_report_decl (decl)));\n@@ -5963,6 +5967,13 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n      need to propagate anything to an outer context.  */\n   if ((flags & GOVD_PRIVATE) && !(flags & GOVD_PRIVATE_OUTER_REF))\n     return ret;\n+  if ((flags & (GOVD_LINEAR | GOVD_LINEAR_LASTPRIVATE_NO_OUTER))\n+      == (GOVD_LINEAR | GOVD_LINEAR_LASTPRIVATE_NO_OUTER))\n+    return ret;\n+  if ((flags & (GOVD_FIRSTPRIVATE | GOVD_LASTPRIVATE\n+\t\t| GOVD_LINEAR_LASTPRIVATE_NO_OUTER))\n+      == (GOVD_LASTPRIVATE | GOVD_LINEAR_LASTPRIVATE_NO_OUTER))\n+    return ret;\n   if (ctx->outer_context\n       && omp_notice_variable (ctx->outer_context, decl, in_code))\n     return true;\n@@ -6062,6 +6073,36 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n   return false;\n }\n \n+/* Return true if the CTX is combined with distribute and thus\n+   lastprivate can't be supported.  */\n+\n+static bool\n+omp_no_lastprivate (struct gimplify_omp_ctx *ctx)\n+{\n+  do\n+    {\n+      if (ctx->outer_context == NULL)\n+\treturn false;\n+      ctx = ctx->outer_context;\n+      switch (ctx->region_type)\n+\t{\n+\tcase ORT_WORKSHARE:\n+\t  if (!ctx->combined_loop)\n+\t    return false;\n+\t  if (ctx->distribute)\n+\t    return true;\n+\t  break;\n+\tcase ORT_COMBINED_PARALLEL:\n+\t  break;\n+\tcase ORT_COMBINED_TEAMS:\n+\t  return true;\n+\tdefault:\n+\t  return false;\n+\t}\n+    }\n+  while (1);\n+}\n+\n /* Scan the OMP clauses in *LIST_P, installing mappings into a new\n    and previous omp contexts.  */\n \n@@ -6105,6 +6146,35 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_LASTPRIVATE:\n \t  flags = GOVD_LASTPRIVATE | GOVD_SEEN | GOVD_EXPLICIT;\n \t  check_non_private = \"lastprivate\";\n+\t  decl = OMP_CLAUSE_DECL (c);\n+\t  if (omp_no_lastprivate (ctx))\n+\t    {\n+\t      notice_outer = false;\n+\t      flags |= GOVD_LINEAR_LASTPRIVATE_NO_OUTER;\n+\t    }\n+\t  else if (error_operand_p (decl))\n+\t    goto do_add;\n+\t  else if (outer_ctx\n+\t\t   && outer_ctx->region_type == ORT_COMBINED_PARALLEL\n+\t\t   && splay_tree_lookup (outer_ctx->variables,\n+\t\t\t\t\t (splay_tree_key) decl) == NULL)\n+\t    omp_add_variable (outer_ctx, decl, GOVD_SHARED | GOVD_SEEN);\n+\t  else if (outer_ctx\n+\t\t   && outer_ctx->region_type == ORT_WORKSHARE\n+\t\t   && outer_ctx->combined_loop\n+\t\t   && splay_tree_lookup (outer_ctx->variables,\n+\t\t\t\t\t (splay_tree_key) decl) == NULL\n+\t\t   && !omp_check_private (outer_ctx, decl, false))\n+\t    {\n+\t      omp_add_variable (outer_ctx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t      if (outer_ctx->outer_context\n+\t\t  && (outer_ctx->outer_context->region_type\n+\t\t      == ORT_COMBINED_PARALLEL)\n+\t\t  && splay_tree_lookup (outer_ctx->outer_context->variables,\n+\t\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t\tomp_add_variable (outer_ctx->outer_context, decl,\n+\t\t\t\t  GOVD_SHARED | GOVD_SEEN);\n+\t    }\n \t  goto do_add;\n \tcase OMP_CLAUSE_REDUCTION:\n \t  flags = GOVD_REDUCTION | GOVD_SEEN | GOVD_EXPLICIT;\n@@ -6117,7 +6187,68 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      remove = true;\n \t      break;\n \t    }\n+\t  else\n+\t    {\n+\t      /* For combined #pragma omp parallel for simd, need to put\n+\t\t lastprivate and perhaps firstprivate too on the\n+\t\t parallel.  Similarly for #pragma omp for simd.  */\n+\t      struct gimplify_omp_ctx *octx = outer_ctx;\n+\t      decl = NULL_TREE;\n+\t      if (omp_no_lastprivate (ctx))\n+\t\tOMP_CLAUSE_LINEAR_NO_COPYOUT (c) = 1;\n+\t      do\n+\t\t{\n+\t\t  if (OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n+\t\t      && OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n+\t\t    break;\n+\t\t  decl = OMP_CLAUSE_DECL (c);\n+\t\t  if (error_operand_p (decl))\n+\t\t    {\n+\t\t      decl = NULL_TREE;\n+\t\t      break;\n+\t\t    }\n+\t\t  if (octx\n+\t\t      && octx->region_type == ORT_WORKSHARE\n+\t\t      && octx->combined_loop)\n+\t\t    {\n+\t\t      if (octx->outer_context\n+\t\t\t  && (octx->outer_context->region_type\n+\t\t\t      == ORT_COMBINED_PARALLEL\n+\t\t\t      || (octx->outer_context->region_type\n+\t\t\t\t  == ORT_COMBINED_TEAMS)))\n+\t\t\toctx = octx->outer_context;\n+\t\t      else if (omp_check_private (octx, decl, false))\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  else\n+\t\t    break;\n+\t\t  gcc_checking_assert (splay_tree_lookup (octx->variables,\n+\t\t\t\t\t\t\t  (splay_tree_key)\n+\t\t\t\t\t\t\t  decl) == NULL);\n+\t\t  flags = GOVD_SEEN;\n+\t\t  if (!OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n+\t\t    flags |= GOVD_FIRSTPRIVATE;\n+\t\t  if (!OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n+\t\t    flags |= GOVD_LASTPRIVATE;\n+\t\t  omp_add_variable (octx, decl, flags);\n+\t\t  if (octx->outer_context == NULL)\n+\t\t    break;\n+\t\t  octx = octx->outer_context;\n+\t\t}\n+\t      while (1);\n+\t      if (octx\n+\t\t  && decl\n+\t\t  && (!OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n+\t\t      || !OMP_CLAUSE_LINEAR_NO_COPYOUT (c)))\n+\t\tomp_notice_variable (octx, decl, true);\n+\t    }\n \t  flags = GOVD_LINEAR | GOVD_EXPLICIT;\n+\t  if (OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n+\t      && OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n+\t    {\n+\t      notice_outer = false;\n+\t      flags |= GOVD_LINEAR_LASTPRIVATE_NO_OUTER;\n+\t    }\n \t  goto do_add;\n \n \tcase OMP_CLAUSE_MAP:\n@@ -6571,34 +6702,6 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, tree *list_p)\n \t\t  OMP_CLAUSE_SET_CODE (c, OMP_CLAUSE_PRIVATE);\n \t\t  OMP_CLAUSE_PRIVATE_DEBUG (c) = 1;\n \t\t}\n-\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n-\t\t  && ctx->outer_context\n-\t\t  && !(OMP_CLAUSE_LINEAR_NO_COPYIN (c)\n-\t\t       && OMP_CLAUSE_LINEAR_NO_COPYOUT (c)))\n-\t\t{\n-\t\t  if (ctx->outer_context->combined_loop\n-\t\t      && !OMP_CLAUSE_LINEAR_NO_COPYIN (c))\n-\t\t    {\n-\t\t      n = splay_tree_lookup (ctx->outer_context->variables,\n-\t\t\t\t\t     (splay_tree_key) decl);\n-\t\t      if (n == NULL\n-\t\t\t  || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n-\t\t\t{\n-\t\t\t  int flags = GOVD_FIRSTPRIVATE;\n-\t\t\t  /* #pragma omp distribute does not allow\n-\t\t\t     lastprivate clause.  */\n-\t\t\t  if (!ctx->outer_context->distribute)\n-\t\t\t    flags |= GOVD_LASTPRIVATE;\n-\t\t\t  if (n == NULL)\n-\t\t\t    omp_add_variable (ctx->outer_context, decl,\n-\t\t\t\t\t      flags | GOVD_SEEN);\n-\t\t\t  else\n-\t\t\t    n->value |= flags | GOVD_SEEN;\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (!is_global_var (decl))\n-\t\t    omp_notice_variable (ctx->outer_context, decl, true);\n-\t\t}\n \t    }\n \t  break;\n \n@@ -6609,6 +6712,13 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, tree *list_p)\n \t  n = splay_tree_lookup (ctx->variables, (splay_tree_key) decl);\n \t  OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (c)\n \t    = (n->value & GOVD_FIRSTPRIVATE) != 0;\n+\t  if (omp_no_lastprivate (ctx))\n+\t    {\n+\t      if (OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (c))\n+\t\tremove = true;\n+\t      else\n+\t\tOMP_CLAUSE_CODE (c) = OMP_CLAUSE_PRIVATE;\n+\t    }\n \t  break;\n \n \tcase OMP_CLAUSE_ALIGNED:\n@@ -6923,6 +7033,22 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       gcc_unreachable ();\n     }\n \n+  /* Set OMP_CLAUSE_LINEAR_NO_COPYIN flag on explicit linear\n+     clause for the IV.  */\n+  if (simd && TREE_VEC_LENGTH (OMP_FOR_INIT (for_stmt)) == 1)\n+    {\n+      t = TREE_VEC_ELT (OMP_FOR_INIT (for_stmt), 0);\n+      gcc_assert (TREE_CODE (t) == MODIFY_EXPR);\n+      decl = TREE_OPERAND (t, 0);\n+      for (tree c = OMP_FOR_CLAUSES (for_stmt); c; c = OMP_CLAUSE_CHAIN (c))\n+\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n+\t    && OMP_CLAUSE_DECL (c) == decl)\n+\t  {\n+\t    OMP_CLAUSE_LINEAR_NO_COPYIN (c) = 1;\n+\t    break;\n+\t  }\n+    }\n+\n   gimplify_scan_omp_clauses (&OMP_FOR_CLAUSES (for_stmt), pre_p,\n \t\t\t     simd ? ORT_SIMD : ORT_WORKSHARE);\n   if (TREE_CODE (for_stmt) == OMP_DISTRIBUTE)\n@@ -6997,45 +7123,75 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t    {\n \t      c = build_omp_clause (input_location, OMP_CLAUSE_LINEAR);\n \t      OMP_CLAUSE_LINEAR_NO_COPYIN (c) = 1;\n-\t      if (has_decl_expr\n-\t\t  && bitmap_bit_p (has_decl_expr, DECL_UID (decl)))\n-\t\tOMP_CLAUSE_LINEAR_NO_COPYOUT (c) = 1;\n+\t      unsigned int flags = GOVD_LINEAR | GOVD_EXPLICIT | GOVD_SEEN;\n+\t      if ((has_decl_expr\n+\t\t   && bitmap_bit_p (has_decl_expr, DECL_UID (decl)))\n+\t\t  || omp_no_lastprivate (gimplify_omp_ctxp))\n+\t\t{\n+\t\t  OMP_CLAUSE_LINEAR_NO_COPYOUT (c) = 1;\n+\t\t  flags |= GOVD_LINEAR_LASTPRIVATE_NO_OUTER;\n+\t\t}\n \t      OMP_CLAUSE_DECL (c) = decl;\n \t      OMP_CLAUSE_CHAIN (c) = OMP_FOR_CLAUSES (for_stmt);\n \t      OMP_FOR_CLAUSES (for_stmt) = c;\n-\t      omp_add_variable (gimplify_omp_ctxp, decl,\n-\t\t\t\tGOVD_LINEAR | GOVD_EXPLICIT | GOVD_SEEN);\n+\t      \n+\t      omp_add_variable (gimplify_omp_ctxp, decl, flags);\n+\t      struct gimplify_omp_ctx *outer\n+\t\t= gimplify_omp_ctxp->outer_context;\n+\t      if (outer && !OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n+\t\t{\n+\t\t  if (outer->region_type == ORT_WORKSHARE\n+\t\t      && outer->combined_loop)\n+\t\t    {\n+\t\t      if (outer->outer_context\n+\t\t\t  && (outer->outer_context->region_type\n+\t\t\t      == ORT_COMBINED_PARALLEL))\n+\t\t\touter = outer->outer_context;\n+\t\t      else if (omp_check_private (outer, decl, false))\n+\t\t\touter = NULL;\n+\t\t    }\n+\t\t  else if (outer->region_type != ORT_COMBINED_PARALLEL)\n+\t\t    outer = NULL;\n+\t\t  if (outer)\n+\t\t    {\n+\t\t      omp_add_variable (outer, decl,\n+\t\t\t\t\tGOVD_LASTPRIVATE | GOVD_SEEN);\n+\t\t      if (outer->outer_context)\n+\t\t\tomp_notice_variable (outer->outer_context, decl, true);\n+\t\t    }\n+\t\t}\n \t    }\n \t  else\n \t    {\n \t      bool lastprivate\n \t\t= (!has_decl_expr\n-\t\t   || !bitmap_bit_p (has_decl_expr, DECL_UID (decl)));\n-\t      if (lastprivate\n-\t\t  && gimplify_omp_ctxp->outer_context\n-\t\t  && gimplify_omp_ctxp->outer_context->region_type\n-\t\t     == ORT_WORKSHARE\n-\t\t  && gimplify_omp_ctxp->outer_context->combined_loop\n-\t\t  && !gimplify_omp_ctxp->outer_context->distribute)\n+\t\t   || !bitmap_bit_p (has_decl_expr, DECL_UID (decl)))\n+\t\t  && !omp_no_lastprivate (gimplify_omp_ctxp);\n+\t      struct gimplify_omp_ctx *outer\n+\t\t= gimplify_omp_ctxp->outer_context;\n+\t      if (outer && lastprivate)\n \t\t{\n-\t\t  struct gimplify_omp_ctx *outer\n-\t\t    = gimplify_omp_ctxp->outer_context;\n-\t\t  n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t (splay_tree_key) decl);\n-\t\t  if (n != NULL\n-\t\t      && (n->value & GOVD_DATA_SHARE_CLASS) == GOVD_LOCAL)\n-\t\t    lastprivate = false;\n-\t\t  else if (omp_check_private (outer, decl, false))\n-\t\t    error (\"lastprivate variable %qE is private in outer \"\n-\t\t\t   \"context\", DECL_NAME (decl));\n-\t\t  else\n+\t\t  if (outer->region_type == ORT_WORKSHARE\n+\t\t      && outer->combined_loop)\n+\t\t    {\n+\t\t      if (outer->outer_context\n+\t\t\t  && (outer->outer_context->region_type\n+\t\t\t      == ORT_COMBINED_PARALLEL))\n+\t\t\touter = outer->outer_context;\n+\t\t      else if (omp_check_private (outer, decl, false))\n+\t\t\touter = NULL;\n+\t\t    }\n+\t\t  else if (outer->region_type != ORT_COMBINED_PARALLEL)\n+\t\t    outer = NULL;\n+\t\t  if (outer)\n \t\t    {\n \t\t      omp_add_variable (outer, decl,\n \t\t\t\t\tGOVD_LASTPRIVATE | GOVD_SEEN);\n \t\t      if (outer->outer_context)\n \t\t\tomp_notice_variable (outer->outer_context, decl, true);\n \t\t    }\n \t\t}\n+\n \t      c = build_omp_clause (input_location,\n \t\t\t\t    lastprivate ? OMP_CLAUSE_LASTPRIVATE\n \t\t\t\t\t\t: OMP_CLAUSE_PRIVATE);\n@@ -7327,7 +7483,7 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n       ort = ORT_TARGET_DATA;\n       break;\n     case OMP_TEAMS:\n-      ort = ORT_TEAMS;\n+      ort = OMP_TEAMS_COMBINED (expr) ? ORT_COMBINED_TEAMS : ORT_TEAMS;\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "8290a651c9da0d7a3be4272ee71c6616ce35c30a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -10538,7 +10538,21 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n \tcond_code = EQ_EXPR;\n     }\n \n-  cond = build2 (cond_code, boolean_type_node, fd->loop.v, fd->loop.n2);\n+  tree n2 = fd->loop.n2;\n+  if (fd->collapse > 1\n+      && TREE_CODE (n2) != INTEGER_CST\n+      && gimple_omp_for_combined_into_p (fd->for_stmt)\n+      && gimple_code (ctx->outer->stmt) == GIMPLE_OMP_FOR)\n+    {\n+      gomp_for *gfor = as_a <gomp_for *> (ctx->outer->stmt);\n+      if (gimple_omp_for_kind (gfor) == GF_OMP_FOR_KIND_FOR)\n+\t{\n+\t  struct omp_for_data outer_fd;\n+\t  extract_omp_for_data (gfor, &outer_fd, NULL);\n+\t  n2 = fold_convert (TREE_TYPE (n2), outer_fd.loop.n2);\n+\t}\n+    }\n+  cond = build2 (cond_code, boolean_type_node, fd->loop.v, n2);\n \n   clauses = gimple_omp_for_clauses (fd->for_stmt);\n   stmts = NULL;"}, {"sha": "1d88e297d6310c99e6436fb68ba091916f99ac95", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1326,6 +1326,11 @@ extern void protected_set_expr_location (tree, location_t);\n #define OMP_PARALLEL_COMBINED(NODE) \\\n   (OMP_PARALLEL_CHECK (NODE)->base.private_flag)\n \n+/* True on an OMP_TEAMS statement if it represents an explicit\n+   combined teams distribute constructs.  */\n+#define OMP_TEAMS_COMBINED(NODE) \\\n+  (OMP_TEAMS_CHECK (NODE)->base.private_flag)\n+\n /* True if OMP_ATOMIC* is supposed to be sequentially consistent\n    as opposed to relaxed.  */\n #define OMP_ATOMIC_SEQ_CST(NODE) \\"}, {"sha": "10771ab54e65e5ce12d3fe951a42fd2c3ceadb91", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -1,3 +1,13 @@\n+2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66199\n+\t* testsuite/libgomp.c/pr66199-1.c: New test.\n+\t* testsuite/libgomp.c/pr66199-2.c: New test.\n+\t* testsuite/libgomp.c++/pr66199-1.C: New test.\n+\t* testsuite/libgomp.c++/pr66199-2.C: New test.\n+\t* testsuite/libgomp.fortran/pr66199-1.f90: New test.\n+\t* testsuite/libgomp.fortran/pr66199-2.f90: New test.\n+\n 2015-05-19  Julian Brown  <julian@codesourcery.com>\n \n \t* plugin/plugin-nvptx.c (nvptx_get_num_devices): Return zero"}, {"sha": "2139e11b51c3f15e6dfb73b71fecd599673ee0b2", "filename": "libgomp/testsuite/libgomp.c++/pr66199-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-1.C?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,5 @@\n+// PR middle-end/66199\n+// { dg-do run }\n+// { dg-options \"-O2 -fopenmp\" }\n+\n+#include \"../libgomp.c/pr66199-1.c\""}, {"sha": "36392da270a6fb19eb0b3a6c15add1ba3f9dcab3", "filename": "libgomp/testsuite/libgomp.c++/pr66199-2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr66199-2.C?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,5 @@\n+// PR middle-end/66199\n+// { dg-do run }\n+// { dg-options \"-O2 -fopenmp\" }\n+\n+#include \"../libgomp.c/pr66199-2.c\""}, {"sha": "6fd9f87fa24e0448a2914e4fc0acf9bcb1391ab5", "filename": "libgomp/testsuite/libgomp.c/pr66199-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-1.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,62 @@\n+/* PR middle-end/66199 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+int u[1024], v[1024], w[1024];\n+\n+__attribute__((noinline, noclone)) long\n+f1 (long a, long b)\n+{\n+  long d;\n+  #pragma omp parallel for simd default(none) firstprivate (a, b) shared(u, v, w)\n+  for (d = a; d < b; d++)\n+    u[d] = v[d] + w[d];\n+  return d;\n+}\n+\n+__attribute__((noinline, noclone)) long\n+f2 (long a, long b, long c)\n+{\n+  long d, e;\n+  #pragma omp parallel for simd default(none) firstprivate (a, b) shared(u, v, w) linear(d) linear(c:5) lastprivate(e)\n+  for (d = a; d < b; d++)\n+    {\n+      u[d] = v[d] + w[d];\n+      c += 5;\n+      e = c;\n+    }\n+  return d + c + e;\n+}\n+\n+__attribute__((noinline, noclone)) long\n+f3 (long a1, long b1, long a2, long b2)\n+{\n+  long d1, d2;\n+  #pragma omp parallel for simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  for (d1 = a1; d1 < b1; d1++)\n+    for (d2 = a2; d2 < b2; d2++)\n+      u[d1 * 32 + d2] = v[d1 * 32 + d2] + w[d1 * 32 + d2];\n+  return d1 + d2;\n+}\n+\n+__attribute__((noinline, noclone)) long\n+f4 (long a1, long b1, long a2, long b2)\n+{\n+  long d1, d2;\n+  #pragma omp parallel for simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) collapse(2)\n+  for (d1 = a1; d1 < b1; d1++)\n+    for (d2 = a2; d2 < b2; d2++)\n+      u[d1 * 32 + d2] = v[d1 * 32 + d2] + w[d1 * 32 + d2];\n+  return d1 + d2;\n+}\n+\n+int\n+main ()\n+{\n+  if (f1 (0, 1024) != 1024\n+      || f2 (0, 1024, 17) != 1024 + 2 * (17 + 5 * 1024)\n+      || f3 (0, 32, 0, 32) != 64\n+      || f4 (0, 32, 0, 32) != 64)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "dbcd701b755e456f7da421f857a95820076c62f9", "filename": "libgomp/testsuite/libgomp.c/pr66199-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66199-2.c?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,59 @@\n+/* PR middle-end/66199 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+#pragma omp declare target\n+int u[1024], v[1024], w[1024];\n+#pragma omp end declare target\n+\n+__attribute__((noinline, noclone)) void\n+f1 (long a, long b)\n+{\n+  long d;\n+  #pragma omp target teams distribute parallel for simd default(none) firstprivate (a, b) shared(u, v, w)\n+  for (d = a; d < b; d++)\n+    u[d] = v[d] + w[d];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (long a, long b, long c)\n+{\n+  long d, e;\n+  #pragma omp target teams distribute parallel for simd default(none) firstprivate (a, b) shared(u, v, w) linear(d) linear(c:5) lastprivate(e)\n+  for (d = a; d < b; d++)\n+    {\n+      u[d] = v[d] + w[d];\n+      c += 5;\n+      e = c;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (long a1, long b1, long a2, long b2)\n+{\n+  long d1, d2;\n+  #pragma omp target teams distribute parallel for simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  for (d1 = a1; d1 < b1; d1++)\n+    for (d2 = a2; d2 < b2; d2++)\n+      u[d1 * 32 + d2] = v[d1 * 32 + d2] + w[d1 * 32 + d2];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (long a1, long b1, long a2, long b2)\n+{\n+  long d1, d2;\n+  #pragma omp target teams distribute parallel for simd default(none) firstprivate (a1, b1, a2, b2) shared(u, v, w) collapse(2)\n+  for (d1 = a1; d1 < b1; d1++)\n+    for (d2 = a2; d2 < b2; d2++)\n+      u[d1 * 32 + d2] = v[d1 * 32 + d2] + w[d1 * 32 + d2];\n+}\n+\n+int\n+main ()\n+{\n+  f1 (0, 1024);\n+  f2 (0, 1024, 17);\n+  f3 (0, 32, 0, 32);\n+  f4 (0, 32, 0, 32);\n+  return 0;\n+}"}, {"sha": "0cd232f3e147d8e8cd5ce5c24271e9414de89d13", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-1.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-1.f90?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,49 @@\n+! PR middle-end/66199\n+! { dg-do run }\n+! { dg-options \"-O2 -fopenmp\" }\n+\n+  integer :: u(1024), v(1024), w(1024), a, b, c, d, e, a1, b1, a2, b2, d1, d2\n+  a = 1\n+  b = 1024\n+  d = 75\n+  !$omp parallel do simd default(none) firstprivate (a, b) shared(u, v, w)\n+  do d = a, b\n+    u(d) = v(d) + w(d)\n+  end do\n+  if (d .ne. 1025) call abort\n+  c = 17\n+  d = 75\n+  !$omp parallel do simd default(none) firstprivate (a, b) shared(u, v, w) &\n+  !$omp& linear(d) linear(c:5) lastprivate(e)\n+  do d = a, b\n+    u(d) = v(d) + w(d)\n+    c = c + 5\n+    e = c\n+  end do\n+  if (d .ne. 1025 .or. c .ne. (17 + 5 * 1024)) call abort\n+  if (e .ne. (17 + 5 * 1024)) call abort\n+  a1 = 0\n+  a2 = 0\n+  b1 = 31\n+  b2 = 31\n+  d1 = 7\n+  d2 = 9\n+  !$omp parallel do simd default(none) firstprivate (a1, b1, a2, b2) &\n+  !$omp& shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1\n+    do d2 = a2, b2\n+      u(d1 * 32 + d2 + 1) = v(d1 * 32 + d2 + 1) + w(d1 * 32 + d2 + 1)\n+    end do\n+  end do\n+  if (d1 .ne. 32 .or. d2 .ne. 32) call abort\n+  d1 = 7\n+  d2 = 9\n+  !$omp parallel do simd default(none) firstprivate (a1, b1, a2, b2) &\n+  !$omp& shared(u, v, w) collapse(2)\n+  do d1 = a1, b1\n+    do d2 = a2, b2\n+      u(d1 * 32 + d2 + 1) = v(d1 * 32 + d2 + 1) + w(d1 * 32 + d2 + 1)\n+    end do\n+  end do\n+  if (d1 .ne. 32 .or. d2 .ne. 32) call abort\n+end"}, {"sha": "ad11eade72cb6625bdd076b910cb69fc3447a4c7", "filename": "libgomp/testsuite/libgomp.fortran/pr66199-2.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b37d5ec1064decf497f1ce4657582f4b4807c8/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr66199-2.f90?ref=41b37d5ec1064decf497f1ce4657582f4b4807c8", "patch": "@@ -0,0 +1,47 @@\n+! PR middle-end/66199\n+! { dg-do run }\n+! { dg-options \"-O2 -fopenmp\" }\n+\n+  integer :: u(1024), v(1024), w(1024), a, b, c, d, e, a1, b1, a2, b2, d1, d2\n+  a = 1\n+  b = 1024\n+  d = 75\n+  !$omp target teams distribute parallel do simd default(none) &\n+  !$omp& firstprivate (a, b) shared(u, v, w)\n+  do d = a, b\n+    u(d) = v(d) + w(d)\n+  end do\n+  c = 17\n+  d = 75\n+  !$omp target teams distribute parallel do simd default(none) &\n+  !$omp& firstprivate (a, b) shared(u, v, w) &\n+  !$omp& linear(d) linear(c:5) lastprivate(e)\n+  do d = a, b\n+    u(d) = v(d) + w(d)\n+    c = c + 5\n+    e = c\n+  end do\n+  a1 = 0\n+  a2 = 0\n+  b1 = 31\n+  b2 = 31\n+  d1 = 7\n+  d2 = 9\n+  !$omp target teams distribute parallel do simd default(none) &\n+  !$omp& firstprivate (a1, b1, a2, b2) &\n+  !$omp& shared(u, v, w) lastprivate(d1, d2) collapse(2)\n+  do d1 = a1, b1\n+    do d2 = a2, b2\n+      u(d1 * 32 + d2 + 1) = v(d1 * 32 + d2 + 1) + w(d1 * 32 + d2 + 1)\n+    end do\n+  end do\n+  d1 = 7\n+  d2 = 9\n+  !$omp target teams distribute parallel do simd default(none) &\n+  !$omp& firstprivate (a1, b1, a2, b2) shared(u, v, w) collapse(2)\n+  do d1 = a1, b1\n+    do d2 = a2, b2\n+      u(d1 * 32 + d2 + 1) = v(d1 * 32 + d2 + 1) + w(d1 * 32 + d2 + 1)\n+    end do\n+  end do\n+end"}]}