{"sha": "bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4M2I0MDljNTZkMmExZDFkN2E1MzZhNWE2NWZjMWNhOTdiNjYxOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-03-24T20:40:25Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-03-24T20:40:25Z"}, "message": "Changelog commit escaped earlier\n\nChangelog commit escaped earlier\ncp:\n\tPR c++/10119\n\t* error.c (dump_expr) [BASELINK]: Use dump_expr.\n\t* pt.c (maybe_fold_nontype_args): New function.\n\t(tsubst_copy) [SCOPE_REF]: Subst any template_id args.\n\t[TEMPLATE_ID_EXPR]: Break out folding code, call it.\n\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Call\n\tmaybe_fold_nontype_args.\ntestsuite:\n\tPR c++/10119\n\t* g++.dg/template/ptrmem5.C: New test.\n\nFrom-SVN: r64819", "tree": {"sha": "4406753d0d9cfe1b65f113dc41067cc1b4e5352c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4406753d0d9cfe1b65f113dc41067cc1b4e5352c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618/comments", "author": null, "committer": null, "parents": [{"sha": "1c82cc908167526cae555db74532db40f889fe1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c82cc908167526cae555db74532db40f889fe1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c82cc908167526cae555db74532db40f889fe1d"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "a19374a177cb0c8e76e18f0328183819e6d6f439", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "patch": "@@ -2010,7 +2010,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     case BASELINK:\n-      print_tree_identifier (scratch_buffer, DECL_NAME (get_first_fn (t)));\n+      dump_expr (get_first_fn (t), flags & ~TFF_EXPR_IN_PARENS);\n       break;\n \n       /* else fall through */"}, {"sha": "ab529701b5fd87b9c434f8023574e4034894c2ce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bd83b409c56d2a1d1d7a536a5a65fc1ca97b6618", "patch": "@@ -117,6 +117,7 @@ static int  type_unification_real PARAMS ((tree, tree, tree, tree,\n \t\t\t\t\t   int, unification_kind_t, int, int));\n static void note_template_header PARAMS ((int));\n static tree maybe_fold_nontype_arg PARAMS ((tree));\n+static void maybe_fold_nontype_args PARAMS ((tree));\n static tree convert_nontype_argument PARAMS ((tree, tree));\n static tree convert_template_argument PARAMS ((tree, tree, tree,\n \t\t\t\t\t       tsubst_flags_t, int, tree));\n@@ -5618,6 +5619,28 @@ maybe_fold_nontype_arg (arg)\n   return arg;\n }\n \n+/* Apply maybe_fold_nontype_arg on a list or vector of args.  */\n+\n+static void\n+maybe_fold_nontype_args (tree targs)\n+{\n+  if (!targs)\n+    /*OK*/;\n+  else if (TREE_CODE (targs) == TREE_LIST)\n+    {\n+      tree chain;\n+      for (chain = targs; chain; chain = TREE_CHAIN (chain))\n+\tTREE_VALUE (chain) = maybe_fold_nontype_arg (TREE_VALUE (chain));\n+    }\n+  else\n+    {\n+      int i;\n+      for (i = 0; i < TREE_VEC_LENGTH (targs); ++i)\n+\tTREE_VEC_ELT (targs, i)\n+\t  = maybe_fold_nontype_arg (TREE_VEC_ELT (targs, i));\n+    }\n+}\n+\n /* Substitute ARGS into the vector of template arguments T.  */\n \n static tree\n@@ -7243,6 +7266,9 @@ tsubst_copy (t, args, complain, in_decl)\n \t    template_id_p = true;\n \t    template_args = TREE_OPERAND (fns, 1);\n \t    fns = TREE_OPERAND (fns, 0);\n+\t    template_args = tsubst_copy (template_args, args,\n+\t\t\t\t\t complain, in_decl);\n+\t    maybe_fold_nontype_args (template_args);\n \t  }\n \tname = DECL_NAME (get_first_fn (fns));\n \tt = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n@@ -7450,20 +7476,7 @@ tsubst_copy (t, args, complain, in_decl)\n \ttree targs = tsubst_copy (TREE_OPERAND (t, 1), args, complain,\n \t\t\t\t  in_decl);\n \n-\tif (targs && TREE_CODE (targs) == TREE_LIST)\n-\t  {\n-\t    tree chain;\n-\t    for (chain = targs; chain; chain = TREE_CHAIN (chain))\n-\t      TREE_VALUE (chain) = maybe_fold_nontype_arg (TREE_VALUE (chain));\n-\t  }\n-\telse if (targs)\n-\t  {\n-\t    int i;\n-\t    for (i = 0; i < TREE_VEC_LENGTH (targs); ++i)\n-\t      TREE_VEC_ELT (targs, i) \n-\t\t= maybe_fold_nontype_arg (TREE_VEC_ELT (targs, i));\n-\t  }\n-\n+\tmaybe_fold_nontype_args (targs);\n \treturn lookup_template_function\n \t  (tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl), targs);\n       }\n@@ -7916,6 +7929,8 @@ tsubst_copy_and_build (t, args, complain, in_decl)\n \ttree object;\n \ttree template\n \t  = tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl);\n+\ttree targs\n+\t  = tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl);\n \t\n \tif (TREE_CODE (template) == COMPONENT_REF)\n \t  {\n@@ -7924,10 +7939,8 @@ tsubst_copy_and_build (t, args, complain, in_decl)\n \t  }\n \telse\n \t  object = NULL_TREE;\n-\n-\ttemplate = lookup_template_function\n-\t  (template,\n-\t   tsubst_copy (TREE_OPERAND (t, 1), args, complain, in_decl));\n+\tmaybe_fold_nontype_args (targs);\n+\ttemplate = lookup_template_function (template, targs);\n \t\n \tif (object)\n \t  return build (COMPONENT_REF, TREE_TYPE (template), "}]}