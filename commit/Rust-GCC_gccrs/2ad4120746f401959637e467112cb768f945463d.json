{"sha": "2ad4120746f401959637e467112cb768f945463d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFkNDEyMDc0NmY0MDE5NTk2MzdlNDY3MTEyY2I3NjhmOTQ1NDYzZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-10-11T23:27:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-10-11T23:27:27Z"}, "message": "import elementary functions as intrinsics\n\nImporting them as intrinsics enables GCC to treat them as builtins\nwhose behavior is known by GCC.\n\nSpecifically, if they aren't intrinsics, calls to Sin and Cos won't be\ncombined into sincos.\n\nWe still need to make Sin and Cos wrappers inline in user-exposed\ninterfaces to get users the benefit of this transformation.\nThat is forthcoming in a separate patch.\n\n\nfor  gcc/ada/ChangeLog\n\n\t* libgnat/a-numaux.ads: Make all imports Intrinsic.\n\t* libgnat/a-numaux__darwin.ads: Likewise.\n\t* libgnat/a-numaux__libc-x86.ads: Likewise.\n\t* libgnat/a-numaux__vxworks.ads: Likewise.", "tree": {"sha": "f97d815d2b8bda13dcfd0282d6320bfc6fe3d536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f97d815d2b8bda13dcfd0282d6320bfc6fe3d536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ad4120746f401959637e467112cb768f945463d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad4120746f401959637e467112cb768f945463d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad4120746f401959637e467112cb768f945463d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad4120746f401959637e467112cb768f945463d/comments", "author": null, "committer": null, "parents": [{"sha": "4eaf96c56c1c97b11af42a4caaa12b37870308d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eaf96c56c1c97b11af42a4caaa12b37870308d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eaf96c56c1c97b11af42a4caaa12b37870308d7"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "4154e1ab216adc173d54ec04ab3ede2b016463a8", "filename": "gcc/ada/libgnat/a-numaux.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux.ads?ref=2ad4120746f401959637e467112cb768f945463d", "patch": "@@ -58,55 +58,55 @@ package Ada.Numerics.Aux is\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n-   pragma Import (C, Sin, \"sin\");\n+   pragma Import (Intrinsic, Sin, \"sin\");\n    pragma Pure_Function (Sin);\n \n    function Cos (X : Double) return Double;\n-   pragma Import (C, Cos, \"cos\");\n+   pragma Import (Intrinsic, Cos, \"cos\");\n    pragma Pure_Function (Cos);\n \n    function Tan (X : Double) return Double;\n-   pragma Import (C, Tan, \"tan\");\n+   pragma Import (Intrinsic, Tan, \"tan\");\n    pragma Pure_Function (Tan);\n \n    function Exp (X : Double) return Double;\n-   pragma Import (C, Exp, \"exp\");\n+   pragma Import (Intrinsic, Exp, \"exp\");\n    pragma Pure_Function (Exp);\n \n    function Sqrt (X : Double) return Double;\n-   pragma Import (C, Sqrt, \"sqrt\");\n+   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n    pragma Pure_Function (Sqrt);\n \n    function Log (X : Double) return Double;\n-   pragma Import (C, Log, \"log\");\n+   pragma Import (Intrinsic, Log, \"log\");\n    pragma Pure_Function (Log);\n \n    function Acos (X : Double) return Double;\n-   pragma Import (C, Acos, \"acos\");\n+   pragma Import (Intrinsic, Acos, \"acos\");\n    pragma Pure_Function (Acos);\n \n    function Asin (X : Double) return Double;\n-   pragma Import (C, Asin, \"asin\");\n+   pragma Import (Intrinsic, Asin, \"asin\");\n    pragma Pure_Function (Asin);\n \n    function Atan (X : Double) return Double;\n-   pragma Import (C, Atan, \"atan\");\n+   pragma Import (Intrinsic, Atan, \"atan\");\n    pragma Pure_Function (Atan);\n \n    function Sinh (X : Double) return Double;\n-   pragma Import (C, Sinh, \"sinh\");\n+   pragma Import (Intrinsic, Sinh, \"sinh\");\n    pragma Pure_Function (Sinh);\n \n    function Cosh (X : Double) return Double;\n-   pragma Import (C, Cosh, \"cosh\");\n+   pragma Import (Intrinsic, Cosh, \"cosh\");\n    pragma Pure_Function (Cosh);\n \n    function Tanh (X : Double) return Double;\n-   pragma Import (C, Tanh, \"tanh\");\n+   pragma Import (Intrinsic, Tanh, \"tanh\");\n    pragma Pure_Function (Tanh);\n \n    function Pow (X, Y : Double) return Double;\n-   pragma Import (C, Pow, \"pow\");\n+   pragma Import (Intrinsic, Pow, \"pow\");\n    pragma Pure_Function (Pow);\n \n end Ada.Numerics.Aux;"}, {"sha": "add87a49193252d033b83980535f87562f0c6495", "filename": "gcc/ada/libgnat/a-numaux__darwin.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux__darwin.ads?ref=2ad4120746f401959637e467112cb768f945463d", "patch": "@@ -57,47 +57,47 @@ package Ada.Numerics.Aux is\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Tan (X : Double) return Double;\n-   pragma Import (C, Tan, \"tan\");\n+   pragma Import (Intrinsic, Tan, \"tan\");\n    pragma Pure_Function (Tan);\n \n    function Exp (X : Double) return Double;\n-   pragma Import (C, Exp, \"exp\");\n+   pragma Import (Intrinsic, Exp, \"exp\");\n    pragma Pure_Function (Exp);\n \n    function Sqrt (X : Double) return Double;\n-   pragma Import (C, Sqrt, \"sqrt\");\n+   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n    pragma Pure_Function (Sqrt);\n \n    function Log (X : Double) return Double;\n-   pragma Import (C, Log, \"log\");\n+   pragma Import (Intrinsic, Log, \"log\");\n    pragma Pure_Function (Log);\n \n    function Acos (X : Double) return Double;\n-   pragma Import (C, Acos, \"acos\");\n+   pragma Import (Intrinsic, Acos, \"acos\");\n    pragma Pure_Function (Acos);\n \n    function Asin (X : Double) return Double;\n-   pragma Import (C, Asin, \"asin\");\n+   pragma Import (Intrinsic, Asin, \"asin\");\n    pragma Pure_Function (Asin);\n \n    function Atan (X : Double) return Double;\n-   pragma Import (C, Atan, \"atan\");\n+   pragma Import (Intrinsic, Atan, \"atan\");\n    pragma Pure_Function (Atan);\n \n    function Sinh (X : Double) return Double;\n-   pragma Import (C, Sinh, \"sinh\");\n+   pragma Import (Intrinsic, Sinh, \"sinh\");\n    pragma Pure_Function (Sinh);\n \n    function Cosh (X : Double) return Double;\n-   pragma Import (C, Cosh, \"cosh\");\n+   pragma Import (Intrinsic, Cosh, \"cosh\");\n    pragma Pure_Function (Cosh);\n \n    function Tanh (X : Double) return Double;\n-   pragma Import (C, Tanh, \"tanh\");\n+   pragma Import (Intrinsic, Tanh, \"tanh\");\n    pragma Pure_Function (Tanh);\n \n    function Pow (X, Y : Double) return Double;\n-   pragma Import (C, Pow, \"pow\");\n+   pragma Import (Intrinsic, Pow, \"pow\");\n    pragma Pure_Function (Pow);\n \n end Ada.Numerics.Aux;"}, {"sha": "f6deebecbadab3baee26bfae3fccb411b890edde", "filename": "gcc/ada/libgnat/a-numaux__libc-x86.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__libc-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__libc-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux__libc-x86.ads?ref=2ad4120746f401959637e467112cb768f945463d", "patch": "@@ -43,55 +43,55 @@ package Ada.Numerics.Aux is\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n-   pragma Import (C, Sin, \"sinl\");\n+   pragma Import (Intrinsic, Sin, \"sinl\");\n    pragma Pure_Function (Sin);\n \n    function Cos (X : Double) return Double;\n-   pragma Import (C, Cos, \"cosl\");\n+   pragma Import (Intrinsic, Cos, \"cosl\");\n    pragma Pure_Function (Cos);\n \n    function Tan (X : Double) return Double;\n-   pragma Import (C, Tan, \"tanl\");\n+   pragma Import (Intrinsic, Tan, \"tanl\");\n    pragma Pure_Function (Tan);\n \n    function Exp (X : Double) return Double;\n-   pragma Import (C, Exp, \"expl\");\n+   pragma Import (Intrinsic, Exp, \"expl\");\n    pragma Pure_Function (Exp);\n \n    function Sqrt (X : Double) return Double;\n-   pragma Import (C, Sqrt, \"sqrtl\");\n+   pragma Import (Intrinsic, Sqrt, \"sqrtl\");\n    pragma Pure_Function (Sqrt);\n \n    function Log (X : Double) return Double;\n-   pragma Import (C, Log, \"logl\");\n+   pragma Import (Intrinsic, Log, \"logl\");\n    pragma Pure_Function (Log);\n \n    function Acos (X : Double) return Double;\n-   pragma Import (C, Acos, \"acosl\");\n+   pragma Import (Intrinsic, Acos, \"acosl\");\n    pragma Pure_Function (Acos);\n \n    function Asin (X : Double) return Double;\n-   pragma Import (C, Asin, \"asinl\");\n+   pragma Import (Intrinsic, Asin, \"asinl\");\n    pragma Pure_Function (Asin);\n \n    function Atan (X : Double) return Double;\n-   pragma Import (C, Atan, \"atanl\");\n+   pragma Import (Intrinsic, Atan, \"atanl\");\n    pragma Pure_Function (Atan);\n \n    function Sinh (X : Double) return Double;\n-   pragma Import (C, Sinh, \"sinhl\");\n+   pragma Import (Intrinsic, Sinh, \"sinhl\");\n    pragma Pure_Function (Sinh);\n \n    function Cosh (X : Double) return Double;\n-   pragma Import (C, Cosh, \"coshl\");\n+   pragma Import (Intrinsic, Cosh, \"coshl\");\n    pragma Pure_Function (Cosh);\n \n    function Tanh (X : Double) return Double;\n-   pragma Import (C, Tanh, \"tanhl\");\n+   pragma Import (Intrinsic, Tanh, \"tanhl\");\n    pragma Pure_Function (Tanh);\n \n    function Pow (X, Y : Double) return Double;\n-   pragma Import (C, Pow, \"powl\");\n+   pragma Import (Intrinsic, Pow, \"powl\");\n    pragma Pure_Function (Pow);\n \n end Ada.Numerics.Aux;"}, {"sha": "410655de8a6e5a22767c99a3db131fef1a169a1b", "filename": "gcc/ada/libgnat/a-numaux__vxworks.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad4120746f401959637e467112cb768f945463d/gcc%2Fada%2Flibgnat%2Fa-numaux__vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-numaux__vxworks.ads?ref=2ad4120746f401959637e467112cb768f945463d", "patch": "@@ -43,55 +43,55 @@ package Ada.Numerics.Aux is\n    --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n-   pragma Import (C, Sin, \"sin\");\n+   pragma Import (Intrinsic, Sin, \"sin\");\n    pragma Pure_Function (Sin);\n \n    function Cos (X : Double) return Double;\n-   pragma Import (C, Cos, \"cos\");\n+   pragma Import (Intrinsic, Cos, \"cos\");\n    pragma Pure_Function (Cos);\n \n    function Tan (X : Double) return Double;\n-   pragma Import (C, Tan, \"tan\");\n+   pragma Import (Intrinsic, Tan, \"tan\");\n    pragma Pure_Function (Tan);\n \n    function Exp (X : Double) return Double;\n-   pragma Import (C, Exp, \"exp\");\n+   pragma Import (Intrinsic, Exp, \"exp\");\n    pragma Pure_Function (Exp);\n \n    function Sqrt (X : Double) return Double;\n-   pragma Import (C, Sqrt, \"sqrt\");\n+   pragma Import (Intrinsic, Sqrt, \"sqrt\");\n    pragma Pure_Function (Sqrt);\n \n    function Log (X : Double) return Double;\n-   pragma Import (C, Log, \"log\");\n+   pragma Import (Intrinsic, Log, \"log\");\n    pragma Pure_Function (Log);\n \n    function Acos (X : Double) return Double;\n-   pragma Import (C, Acos, \"acos\");\n+   pragma Import (Intrinsic, Acos, \"acos\");\n    pragma Pure_Function (Acos);\n \n    function Asin (X : Double) return Double;\n-   pragma Import (C, Asin, \"asin\");\n+   pragma Import (Intrinsic, Asin, \"asin\");\n    pragma Pure_Function (Asin);\n \n    function Atan (X : Double) return Double;\n-   pragma Import (C, Atan, \"atan\");\n+   pragma Import (Intrinsic, Atan, \"atan\");\n    pragma Pure_Function (Atan);\n \n    function Sinh (X : Double) return Double;\n-   pragma Import (C, Sinh, \"sinh\");\n+   pragma Import (Intrinsic, Sinh, \"sinh\");\n    pragma Pure_Function (Sinh);\n \n    function Cosh (X : Double) return Double;\n-   pragma Import (C, Cosh, \"cosh\");\n+   pragma Import (Intrinsic, Cosh, \"cosh\");\n    pragma Pure_Function (Cosh);\n \n    function Tanh (X : Double) return Double;\n-   pragma Import (C, Tanh, \"tanh\");\n+   pragma Import (Intrinsic, Tanh, \"tanh\");\n    pragma Pure_Function (Tanh);\n \n    function Pow (X, Y : Double) return Double;\n-   pragma Import (C, Pow, \"pow\");\n+   pragma Import (Intrinsic, Pow, \"pow\");\n    pragma Pure_Function (Pow);\n \n end Ada.Numerics.Aux;"}]}