{"sha": "72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiYjJjMzljZTFjMzUwNmQ5NGY3ZTJlN2MyZGI4NGVlODUzNWFkZA==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-24T18:04:42Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-24T18:04:42Z"}, "message": "internal.h (xnew, [...]): Remove.\n\n\t* internal.h (xnew, xcnew, xnewvec, xcnewvec, xobnew): Remove.\n\t* directives.c: Use XNEW-family macros from libiberty.\n\t* lex.c: Likewise.\n\t* macro.c: Likewise.\n\t* cpplib.h (cpp_deps_style): Export enum with name.\n\nFrom-SVN: r85121", "tree": {"sha": "30cd686465d5c32ae3feab21b35a78240675f666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cd686465d5c32ae3feab21b35a78240675f666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5673cd61cee5815e83181a8145e541d091329adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5673cd61cee5815e83181a8145e541d091329adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5673cd61cee5815e83181a8145e541d091329adf"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "2c568b0473d16e3d29ce66a8d270ae24eebc4528", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -1,5 +1,13 @@\n+2004-07-24  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* internal.h (xnew, xcnew, xnewvec, xcnewvec, xobnew): Remove.\n+\t* directives.c: Use XNEW-family macros from libiberty.\n+\t* lex.c: Likewise.\n+\t* macro.c: Likewise.\n+\t* cpplib.h (cpp_deps_style): Export enum with name.\n+\n 2004-07-23  Matthias Klose  <doko@debian.org> \n- \n+\n \tinit.c (init_library): Use PACKAGE for the text domain. \n \n 2004-07-16  Andris Pavenis  <pavenis@latnet.lv>"}, {"sha": "76055a6fc3acdd172ff82b1e9566b7966526a0a7", "filename": "libcpp/directives.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -1077,7 +1077,7 @@ char **\n _cpp_save_pragma_names (cpp_reader *pfile)\n {\n   int ct = count_registered_pragmas (pfile->pragmas);\n-  char **result = xnewvec (char *, ct);\n+  char **result = XNEWVEC (char *, ct);\n   (void) save_registered_pragmas (pfile->pragmas, result);\n   return result;\n }\n@@ -1318,11 +1318,11 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n     cpp_token *saved_cur_token = pfile->cur_token;\n     tokenrun *saved_cur_run = pfile->cur_run;\n \n-    pfile->context = xnew (cpp_context);\n+    pfile->context = XNEW (cpp_context);\n     pfile->context->macro = 0;\n     pfile->context->prev = 0;\n     run_directive (pfile, T_PRAGMA, result, dest - result);\n-    free (pfile->context);\n+    XDELETE (pfile->context);\n     pfile->context = saved_context;\n     pfile->cur_token = saved_cur_token;\n     pfile->cur_run = saved_cur_run;\n@@ -1532,7 +1532,7 @@ push_conditional (cpp_reader *pfile, int skip, int type,\n   struct if_stack *ifs;\n   cpp_buffer *buffer = pfile->buffer;\n \n-  ifs = xobnew (&pfile->buffer_ob, struct if_stack);\n+  ifs = XOBNEW (&pfile->buffer_ob, struct if_stack);\n   ifs->line = pfile->directive_line;\n   ifs->next = buffer->if_stack;\n   ifs->skip_elses = pfile->state.skipping || !skip;\n@@ -1922,7 +1922,7 @@ cpp_buffer *\n cpp_push_buffer (cpp_reader *pfile, const uchar *buffer, size_t len,\n \t\t int from_stage3)\n {\n-  cpp_buffer *new = xobnew (&pfile->buffer_ob, cpp_buffer);\n+  cpp_buffer *new = XOBNEW (&pfile->buffer_ob, cpp_buffer);\n \n   /* Clears, amongst other things, if_stack and mi_cmacro.  */\n   memset (new, 0, sizeof (cpp_buffer));"}, {"sha": "547364112f6c618e7beb3b940717c085121c4794", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -231,6 +231,9 @@ extern enum cpp_token_fld_kind cpp_token_val_index (cpp_token *tok);\n typedef unsigned CPPCHAR_SIGNED_T cppchar_t;\n typedef CPPCHAR_SIGNED_T cppchar_signed_t;\n \n+/* Style of header dependencies to generate.  */\n+enum cpp_deps_style { DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM };\n+\n /* This structure is nested inside struct cpp_reader, and\n    carries all the options visible to the command line.  */\n struct cpp_options\n@@ -378,7 +381,7 @@ struct cpp_options\n   struct\n   {\n     /* Style of header dependencies to generate.  */\n-    enum {DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM } style;\n+    enum cpp_deps_style style;\n \n     /* Assume missing files are generated files.  */\n     bool missing_files;"}, {"sha": "53b02f8c94c3b90b3bb295140ff189c9a2158fc0", "filename": "libcpp/internal.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -560,11 +560,6 @@ extern const char *_cpp_default_encoding (void);\n \n /* Utility routines and macros.  */\n #define DSC(str) (const uchar *)str, sizeof str - 1\n-#define xnew(T)\t\t(T *) xmalloc (sizeof(T))\n-#define xcnew(T)\t(T *) xcalloc (1, sizeof(T))\n-#define xnewvec(T, N)\t(T *) xmalloc (sizeof(T) * (N))\n-#define xcnewvec(T, N)\t(T *) xcalloc (N, sizeof(T))\n-#define xobnew(O, T)\t(T *) obstack_alloc (O, sizeof(T))\n \n /* These are inline functions instead of macros so we can get type\n    checking.  */"}, {"sha": "914703fde2f39e8d9f707247657bc47995fdb0f0", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -662,7 +662,7 @@ save_comment (cpp_reader *pfile, cpp_token *token, const unsigned char *from,\n void\n _cpp_init_tokenrun (tokenrun *run, unsigned int count)\n {\n-  run->base = xnewvec (cpp_token, count);\n+  run->base = XNEWVEC (cpp_token, count);\n   run->limit = run->base + count;\n   run->next = NULL;\n }\n@@ -673,7 +673,7 @@ next_tokenrun (tokenrun *run)\n {\n   if (run->next == NULL)\n     {\n-      run->next = xnew (tokenrun);\n+      run->next = XNEW (tokenrun);\n       run->next->prev = run;\n       _cpp_init_tokenrun (run->next, 250);\n     }"}, {"sha": "729ea061b8bcf84970c9f94d2e5b51dd68349353", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "patch": "@@ -919,7 +919,7 @@ next_context (cpp_reader *pfile)\n \n   if (result == 0)\n     {\n-      result = xnew (cpp_context);\n+      result = XNEW (cpp_context);\n       result->prev = pfile->context;\n       result->next = 0;\n       pfile->context->next = result;"}]}