{"sha": "2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiZWQwZGM2YzRkZmZjZmQ1ODZhOTkwZmMzZDJhZWI3ZTAwZDUyMQ==", "commit": {"author": {"name": "Lynn Boger", "email": "laboger@linux.vnet.ibm.com", "date": "2021-02-22T15:12:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-02-26T01:01:23Z"}, "message": "libgo: ensure memmove, memset 8 byte atomicity on ppc64x\n\nGo requires that pointer moves are done 8 bytes at a time,\nbut gccgo uses libc's memmove and memset which does not require\nthat, and there are some cases where an 8 byte move might be\ndone as 4+4.\n\nTo enforce 8 byte moves for memmove and memset, this adds a\nC implementation in libgo/runtime for memmove and memset to be\nused on ppc64le and ppc64. Asm implementations were considered\nbut discarded to avoid different implementations for different\ntarget ISAs.\n\nFixes golang/go#41428\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/294931", "tree": {"sha": "4c32e8e2b504ca2528abaf6d1800db11ed359027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c32e8e2b504ca2528abaf6d1800db11ed359027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/comments", "author": {"login": "laboger", "id": 9433228, "node_id": "MDQ6VXNlcjk0MzMyMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9433228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laboger", "html_url": "https://github.com/laboger", "followers_url": "https://api.github.com/users/laboger/followers", "following_url": "https://api.github.com/users/laboger/following{/other_user}", "gists_url": "https://api.github.com/users/laboger/gists{/gist_id}", "starred_url": "https://api.github.com/users/laboger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laboger/subscriptions", "organizations_url": "https://api.github.com/users/laboger/orgs", "repos_url": "https://api.github.com/users/laboger/repos", "events_url": "https://api.github.com/users/laboger/events{/privacy}", "received_events_url": "https://api.github.com/users/laboger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a505fad4dd4d93b6d642995d7df320aa40949568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a505fad4dd4d93b6d642995d7df320aa40949568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a505fad4dd4d93b6d642995d7df320aa40949568"}], "stats": {"total": 151, "additions": 144, "deletions": 7}, "files": [{"sha": "9806b9da1e1cf136e91212ed4033c9817e41a6ec", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -1,4 +1,4 @@\n-78a840e4940159a66072237f6b002ab79f441b79\n+56cf388da8d04bbd3824c4df34d77a8afa69749b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dec987566732b2143093b44d4b4b85aff1cfd8c1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -454,6 +454,7 @@ runtime_files = \\\n \truntime/go-fieldtrack.c \\\n \truntime/go-matherr.c \\\n \truntime/go-memclr.c \\\n+\truntime/go-memmove.c \\\n \truntime/go-memequal.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\"}, {"sha": "da72149badf41f8a60fa738ac0ef1904a173f094", "filename": "libgo/Makefile.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -244,8 +244,9 @@ am__objects_4 = runtime/aeshash.lo runtime/go-assert.lo \\\n \truntime/go-caller.lo runtime/go-callers.lo runtime/go-cgo.lo \\\n \truntime/go-construct-map.lo runtime/go-ffi.lo \\\n \truntime/go-fieldtrack.lo runtime/go-matherr.lo \\\n-\truntime/go-memclr.lo runtime/go-memequal.lo \\\n-\truntime/go-nanotime.lo runtime/go-now.lo runtime/go-nosys.lo \\\n+\truntime/go-memclr.lo runtime/go-memmove.lo \\\n+\truntime/go-memequal.lo runtime/go-nanotime.lo \\\n+\truntime/go-now.lo runtime/go-nosys.lo \\\n \truntime/go-reflect-call.lo runtime/go-setenv.lo \\\n \truntime/go-signal.lo runtime/go-unsafe-pointer.lo \\\n \truntime/go-unsetenv.lo runtime/go-unwind.lo \\\n@@ -906,6 +907,7 @@ runtime_files = \\\n \truntime/go-fieldtrack.c \\\n \truntime/go-matherr.c \\\n \truntime/go-memclr.c \\\n+\truntime/go-memmove.c \\\n \truntime/go-memequal.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n@@ -1367,6 +1369,8 @@ runtime/go-matherr.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-memclr.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n+runtime/go-memmove.lo: runtime/$(am__dirstamp) \\\n+\truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-memequal.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-nanotime.lo: runtime/$(am__dirstamp) \\\n@@ -1435,6 +1439,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-matherr.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-memclr.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-memequal.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-memmove.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-nanotime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-nosys.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-now.Plo@am__quote@"}, {"sha": "dea7234b3adcaf5319e39ba821a5836f996f3721", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -106,9 +106,7 @@ func reflect_memclrNoHeapPointers(ptr unsafe.Pointer, n uintptr) {\n \tmemclrNoHeapPointers(ptr, n)\n }\n \n-// memmove copies n bytes from \"from\" to \"to\".\n //go:noescape\n-//extern __builtin_memmove\n func memmove(to, from unsafe.Pointer, n uintptr)\n \n //go:linkname reflect_memmove reflect.memmove"}, {"sha": "53b8117853923a32fc364b68d59cd911ef2ada18", "filename": "libgo/runtime/go-memclr.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fgo-memclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fgo-memclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-memclr.c?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -13,5 +13,48 @@ void memclrNoHeapPointers(void *, uintptr)\n void\n memclrNoHeapPointers (void *p1, uintptr len)\n {\n-  __builtin_memset (p1, 0, len);\n+\n+#if !defined(__PPC64__)\n+  __builtin_memset(p1, 0, len);\n+#else\n+  int64 rem,drem,i;\n+  uint64 offset;\n+  volatile uint64 *vp;\n+\n+  if (len == 0) {\n+    return;\n+  }\n+  rem = len;\n+\n+  offset = (uint64)p1 % 8;\n+  // This memset is OK since it can't contain\n+  // an 8 byte aligned pointer.\n+  if ((rem < 8) || (offset > 0 && offset+rem <= 16)) {\n+    __builtin_memset(p1, 0, rem);\n+    return;\n+  }\n+  // Move initial bytes to get to 8 byte boundary\n+  if (offset > 0) {\n+    __builtin_memset(p1, 0, 8-offset);\n+    p1 = (void*)((char*)p1+8-offset);\n+    rem -= 8-offset;\n+  }\n+\n+  // If at least 8 bytes left, clear\n+  drem = rem>>3;\n+\n+  vp = (volatile uint64*)(p1);\n+  // Without the use of volatile here, the compiler\n+  // might convert the loop into a memset.\n+  for (i=0; i<drem; i++) {\n+    *vp = 0;\n+    vp++;\n+    rem -= 8;\n+  }\n+  p1 = (void*)((char*)p1 + 8*drem);\n+  // Clear any remaining\n+  if (rem > 0) {\n+    __builtin_memset (p1, 0, rem);\n+  }\n+#endif\n }"}, {"sha": "1ca3f4822b736fadbe0db35a5784f730b0f5f5b2", "filename": "libgo/runtime/go-memmove.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fgo-memmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fgo-memmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-memmove.c?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -0,0 +1,89 @@\n+/* go-memmove.c -- memmove\n+\n+   Copyright 2021 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include \"runtime.h\"\n+\n+void gomemmove(void *, void *, uintptr)\n+  __asm__ (GOSYM_PREFIX \"runtime.memmove\")\n+  __attribute__ ((no_split_stack));\n+\n+// This implementation is necessary since\n+// the __builtin_memmove might use __libc_memmove\n+// which doesn't require atomicity of 8 byte\n+// moves.\n+\n+void\n+gomemmove (void *dst, void *src, uintptr len)\n+{\n+#if !defined(__PPC64__)\n+  __builtin_memmove(dst, src, len);\n+#else\n+  uint64 offset, tail;\n+  int64 rem;\n+  uint64 dwords;\n+  uint64 i;\n+  char *bdst,*bsrc;\n+\n+  rem = len;\n+\n+  if (len == 0) {\n+\treturn;\n+  }\n+\n+  // If src and dst don't have the same 8 byte alignment then\n+  // there is no issue with copying pointer atomicity. Use the\n+  // builtin.\n+  if (((uint64)dst % 8) != ((uint64)src % 8) || len < 8) {\n+\t__builtin_memmove(dst, src, len);\n+\treturn;\n+  }\n+\n+  // Length >= 8 && same ptr alignment\n+  offset = (uint64)dst % 8;\n+\n+  // If not 8 byte alignment, move the intial bytes.\n+  if (offset > 0) {\n+\t__builtin_memmove(dst, src, 8-offset);\n+\tdst += (8-offset);\n+\tsrc += (8-offset);\n+\trem -= (8-offset);\n+  }\n+\n+  // Move the tail bytes to make the backward move\n+  // easier.\n+  tail = rem % 8;\n+  if (tail > 0) {\n+\t__builtin_memmove(dst+rem-tail, src+rem-tail, tail);\n+\trem -= tail;\n+  }\n+\n+  if (rem == 0) {\n+\treturn;\n+  }\n+\n+  // Must now be 8 byte alignment and rem is multiple of 8.\n+  dwords = len>>3;\n+\n+  // Determine if a backwards move is needed\n+  // Forward or backward, move all doublewords\n+\n+  if ((uint64)(dst - src) < (uint64)rem) {\n+\tbdst = dst+rem-8;\n+\tbsrc = src+rem-8;\n+\tfor (i = 0; i<dwords; i++) {\n+\t\t*(uint64*)bdst = *(uint64*)bsrc;\n+\t\tbdst -= 8;\n+\t\tbsrc -= 8;\n+\t}\n+  } else {\n+\tfor (i = 0; i<dwords; i++) {\n+\t\t*(uint64*)dst = *(uint64*)src;\n+\t\tdst += 8;\n+\t\tsrc += 8;\n+\t}\n+  }\n+#endif\n+}"}, {"sha": "b3dc4fd2414077d2f74eb182fe5fd38d500938a8", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=2fbed0dc6c4dffcfd586a990fc3d2aeb7e00d521", "patch": "@@ -221,7 +221,8 @@ bool\truntime_canpanic(G*);\n void\truntime_printf(const char*, ...);\n int32\truntime_snprintf(byte*, int32, const char*, ...);\n #define runtime_mcmp(a, b, s) __builtin_memcmp((a), (b), (s))\n-#define runtime_memmove(a, b, s) __builtin_memmove((a), (b), (s))\n+void runtime_memmove(void*, void*, uint64)\n+  __asm__ (GOSYM_PREFIX \"runtime.memmove\");\n String\truntime_gostringnocopy(const byte*)\n   __asm__ (GOSYM_PREFIX \"runtime.gostringnocopy\");\n void\truntime_ginit(void)"}]}