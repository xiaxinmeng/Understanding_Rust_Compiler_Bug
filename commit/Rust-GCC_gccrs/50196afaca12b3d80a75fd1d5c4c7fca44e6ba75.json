{"sha": "50196afaca12b3d80a75fd1d5c4c7fca44e6ba75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxOTZhZmFjYTEyYjNkODBhNzVmZDFkNWM0YzdmY2E0NGU2YmE3NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-17T19:13:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-17T19:13:18Z"}, "message": "(cse_insn): Don't record a SRC that's a MEM and the same as a\nREG_EQUIV note if DEST is set more than once.\n\nFrom-SVN: r14074", "tree": {"sha": "4107ef7dcfe50ca473620dd74df30d82ba84f043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4107ef7dcfe50ca473620dd74df30d82ba84f043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75/comments", "author": null, "committer": null, "parents": [{"sha": "a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89974a23e9eb2f44485b520bdb2b3bfd28eee51"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "1bae143b7158bc610ab739d60276ac5de434fe7e", "filename": "gcc/cse.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50196afaca12b3d80a75fd1d5c4c7fca44e6ba75/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=50196afaca12b3d80a75fd1d5c4c7fca44e6ba75", "patch": "@@ -6477,6 +6477,21 @@ cse_insn (insn, in_libcall_block)\n       sets[i].src_in_memory = hash_arg_in_memory;\n       sets[i].src_in_struct = hash_arg_in_struct;\n \n+      /* If SRC is a MEM, there is a REG_EQUIV note for SRC, and DEST is\n+\t a pseudo that is set more than once, do not record SRC.  Using\n+\t SRC as a replacement for anything else will be incorrect in that\n+\t situation.  Note that this usually occurs only for stack slots,\n+\t in which case all the RTL would be refering to SRC, so we don't\n+\t lose any optimization opportunities by not having SRC in the\n+\t hash table.  */\n+\n+      if (GET_CODE (src) == MEM\n+\t  && find_reg_note (insn, REG_EQUIV, src) != 0\n+\t  && GET_CODE (dest) == REG\n+\t  && REGNO (dest) >= FIRST_PSEUDO_REGISTER\n+\t  && reg_n_sets[REGNO (dest)] != 1)\n+\tsets[i].src_volatile = 1;\n+\n #if 0\n       /* It is no longer clear why we used to do this, but it doesn't\n \t appear to still be needed.  So let's try without it since this"}]}