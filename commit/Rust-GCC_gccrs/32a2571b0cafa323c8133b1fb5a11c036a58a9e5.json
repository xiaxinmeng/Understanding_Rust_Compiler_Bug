{"sha": "32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhMjU3MWIwY2FmYTMyM2M4MTMzYjFmYjVhMTFjMDM2YTU4YTllNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-23T11:55:30Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-23T11:55:30Z"}, "message": "Copies.java, [...]: New files.\n\n2003-12-23  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/standard/Copies.java,\n\tjavax/print/attribute/standard/JobImpressions.java,\n\tjavax/print/attribute/standard/JobMediaSheets.java,\n\tjavax/print/attribute/standard/JobPriority.java,\n\tjavax/print/attribute/standard/NumberOfDocuments.java,\n\tjavax/print/attribute/standard/NumberOfInterveningJobs.java,\n\tjavax/print/attribute/standard/NumberUp.java,\n\tjavax/print/attribute/standard/PagesPerMinuteColor.java,\n\tjavax/print/attribute/standard/PagesPerMinute.java,\n\tjavax/print/attribute/standard/QueuedJobCount.java: New files.\n\t* Makefile.am (ordinary_java_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r74971", "tree": {"sha": "872edf8534c8f0dff0810619efa0e98a7fe979f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/872edf8534c8f0dff0810619efa0e98a7fe979f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/comments", "author": null, "committer": null, "parents": [{"sha": "4ea49dd0517390b65f41c3aecc608a0a2e9f9df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea49dd0517390b65f41c3aecc608a0a2e9f9df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea49dd0517390b65f41c3aecc608a0a2e9f9df8"}], "stats": {"total": 1046, "additions": 1046, "deletions": 0}, "files": [{"sha": "c6da6ab4c16cba0f3dbb94f4bba7002c7f495c75", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -1,3 +1,18 @@\n+2003-12-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/standard/Copies.java,\n+\tjavax/print/attribute/standard/JobImpressions.java,\n+\tjavax/print/attribute/standard/JobMediaSheets.java,\n+\tjavax/print/attribute/standard/JobPriority.java,\n+\tjavax/print/attribute/standard/NumberOfDocuments.java,\n+\tjavax/print/attribute/standard/NumberOfInterveningJobs.java,\n+\tjavax/print/attribute/standard/NumberUp.java,\n+\tjavax/print/attribute/standard/PagesPerMinuteColor.java,\n+\tjavax/print/attribute/standard/PagesPerMinute.java,\n+\tjavax/print/attribute/standard/QueuedJobCount.java: New files.\n+\t* Makefile.am (ordinary_java_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2003-12-23  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/print/attribute/AttributeSetUtilities.java"}, {"sha": "aa07b836c96b1c1d4344aa8f4802006af4fdbcfe", "filename": "libjava/Makefile.am", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -1767,6 +1767,16 @@ javax/print/attribute/SupportedValuesAttribute.java \\\n javax/print/attribute/TextSyntax.java \\\n javax/print/attribute/UnmodifiableSetException.java \\\n javax/print/attribute/URISyntax.java \\\n+javax/print/attribute/standard/Copies.java \\\n+javax/print/attribute/standard/JobImpressions.java \\\n+javax/print/attribute/standard/JobMediaSheets.java \\\n+javax/print/attribute/standard/JobPriority.java \\\n+javax/print/attribute/standard/NumberOfDocuments.java \\\n+javax/print/attribute/standard/NumberOfInterveningJobs.java \\\n+javax/print/attribute/standard/NumberUp.java \\\n+javax/print/attribute/standard/PagesPerMinute.java \\\n+javax/print/attribute/standard/PagesPerMinuteColor.java \\\n+javax/print/attribute/standard/QueuedJobCount.java \\\n javax/security/auth/x500/X500Principal.java \\\n javax/sql/ConnectionEvent.java \\\n javax/sql/ConnectionEventListener.java \\"}, {"sha": "cda9cfdea7c7242eafdbad783c29e9053b3911c4", "filename": "libjava/Makefile.in", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -1483,6 +1483,16 @@ javax/print/attribute/SupportedValuesAttribute.java \\\n javax/print/attribute/TextSyntax.java \\\n javax/print/attribute/UnmodifiableSetException.java \\\n javax/print/attribute/URISyntax.java \\\n+javax/print/attribute/standard/Copies.java \\\n+javax/print/attribute/standard/JobImpressions.java \\\n+javax/print/attribute/standard/JobMediaSheets.java \\\n+javax/print/attribute/standard/JobPriority.java \\\n+javax/print/attribute/standard/NumberOfDocuments.java \\\n+javax/print/attribute/standard/NumberOfInterveningJobs.java \\\n+javax/print/attribute/standard/NumberUp.java \\\n+javax/print/attribute/standard/PagesPerMinute.java \\\n+javax/print/attribute/standard/PagesPerMinuteColor.java \\\n+javax/print/attribute/standard/QueuedJobCount.java \\\n javax/security/auth/x500/X500Principal.java \\\n javax/sql/ConnectionEvent.java \\\n javax/sql/ConnectionEventListener.java \\\n@@ -4098,6 +4108,16 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/print/attribute/TextSyntax.P \\\n .deps/javax/print/attribute/URISyntax.P \\\n .deps/javax/print/attribute/UnmodifiableSetException.P \\\n+.deps/javax/print/attribute/standard/Copies.P \\\n+.deps/javax/print/attribute/standard/JobImpressions.P \\\n+.deps/javax/print/attribute/standard/JobMediaSheets.P \\\n+.deps/javax/print/attribute/standard/JobPriority.P \\\n+.deps/javax/print/attribute/standard/NumberOfDocuments.P \\\n+.deps/javax/print/attribute/standard/NumberOfInterveningJobs.P \\\n+.deps/javax/print/attribute/standard/NumberUp.P \\\n+.deps/javax/print/attribute/standard/PagesPerMinute.P \\\n+.deps/javax/print/attribute/standard/PagesPerMinuteColor.P \\\n+.deps/javax/print/attribute/standard/QueuedJobCount.P \\\n .deps/javax/rmi/BAD_OPERATION.P .deps/javax/rmi/CORBA/ClassDesc.P \\\n .deps/javax/rmi/CORBA/ObjectImpl.P \\\n .deps/javax/rmi/CORBA/PortableRemoteObjectDelegate.P \\"}, {"sha": "8c7485da1103586a8fe76bb6c04c7257700ca56e", "filename": "libjava/javax/print/attribute/standard/Copies.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FCopies.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FCopies.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FCopies.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,101 @@\n+/* Copies.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class Copies extends IntegerSyntax\n+  implements PrintJobAttribute, PrintRequestAttribute\n+{\n+  private static final long serialVersionUID = -6426631521680023833L;\n+  \n+  /**\n+   * Creates a <code>Copies</code> object.\n+   *\n+   * @param value the number of copies\n+   *\n+   * @exception IllegalArgumentException if value < 1\n+   */\n+  public Copies(int value)\n+  {\n+    super(value);\n+\n+    if (value < 1)\n+      throw new IllegalArgumentException(\"value may not be less then 1\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof Copies))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>Copies</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return Copies.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"copies\"\n+   */\n+  public final String getName()\n+  {\n+    return \"copies\";\n+  }\n+}"}, {"sha": "41fb3227b3982df3879e140ca5f41dd8025e2e4b", "filename": "libjava/javax/print/attribute/standard/JobImpressions.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobImpressions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobImpressions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobImpressions.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,101 @@\n+/* JobImpressions.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class JobImpressions extends IntegerSyntax\n+  implements PrintJobAttribute, PrintRequestAttribute\n+{\n+  private static final long serialVersionUID = 8225537206784322464L;\n+  \n+  /**\n+   * Creates a <code>JobImpressions</code> object.\n+   *\n+   * @param value the number of impressions\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public JobImpressions(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof JobImpressions))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>JobImpressions</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return JobImpressions.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"job-impressions\"\n+   */\n+  public final String getName()\n+  {\n+    return \"job-impressions\";\n+  }\n+}"}, {"sha": "4734189b869226c982eb81027d5ce7a60065d936", "filename": "libjava/javax/print/attribute/standard/JobMediaSheets.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobMediaSheets.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobMediaSheets.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobMediaSheets.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,101 @@\n+/* JobMediaSheets.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public class JobMediaSheets extends IntegerSyntax\n+  implements PrintJobAttribute, PrintRequestAttribute\n+{\n+  private static final long serialVersionUID = 408871131531979741L;\n+  \n+  /**\n+   * Creates a <code>JobMediaSheets</code> object.\n+   *\n+   * @param value the number of media sheets for a print job\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public JobMediaSheets(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof JobMediaSheets))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>JobMediaSheets</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return JobMediaSheets.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"job-media-sheets\"\n+   */\n+  public final String getName()\n+  {\n+    return \"job-media-sheets\";\n+  }\n+}"}, {"sha": "f540e78a12b3963aa7c3493bd76cbe5e7b8414f5", "filename": "libjava/javax/print/attribute/standard/JobPriority.java", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobPriority.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobPriority.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FJobPriority.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,98 @@\n+/* JobPriority.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+public final class JobPriority extends IntegerSyntax\n+  implements PrintJobAttribute, PrintRequestAttribute\n+{\n+  private static final long serialVersionUID = -4599900369040602769L;\n+\n+  /**\n+   * Creates a <code>JobPriority</code> object.\n+   *\n+   * @param value the priority\n+   *\n+   * @exception IllegalArgumentException if value < 1 or value > 100\n+   */\n+  public JobPriority(int value)\n+  {\n+    super(value);\n+\n+    if (value < 1 || value > 100)\n+      throw new IllegalArgumentException(\"value out of range\");\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof JobPriority))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>JobPriority</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return JobPriority.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"job-priority\"\n+   */\n+  public final String getName()\n+  {\n+    return \"job-priority\";\n+  }\n+}"}, {"sha": "37f67dc3c856977d6ae2562e8d72efe3e4dad863", "filename": "libjava/javax/print/attribute/standard/NumberOfDocuments.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfDocuments.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfDocuments.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfDocuments.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* NumberOfDocuments.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class NumberOfDocuments extends IntegerSyntax\n+  implements PrintJobAttribute\n+{\n+  private static final long serialVersionUID = 7891881310684461097L;\n+  \n+  /**\n+   * Creates a <code>NumberOfDocuments</code> object.\n+   *\n+   * @param value the number of documents\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public NumberOfDocuments(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof NumberOfDocuments))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>NumberOfDocuments</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return NumberOfDocuments.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"number-of-documents\"\n+   */\n+  public final String getName()\n+  {\n+    return \"number-of-documents\";\n+  }\n+}"}, {"sha": "f07691adde2c775dd70e9e9359ea3f8581203a90", "filename": "libjava/javax/print/attribute/standard/NumberOfInterveningJobs.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfInterveningJobs.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfInterveningJobs.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberOfInterveningJobs.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* NumberOfInterveningJobs.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class NumberOfInterveningJobs extends IntegerSyntax\n+  implements PrintJobAttribute\n+{\n+  private static final long serialVersionUID = 2568141124844982746L;\n+  \n+  /**\n+   * Creates a <code>QueuedJobCount</code> object.\n+   *\n+   * @param value the number of intervening jobs\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public NumberOfInterveningJobs(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof NumberOfInterveningJobs))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>NumberOfInterveningJobs</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return NumberOfInterveningJobs.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"number-of-intervening-jobs\"\n+   */\n+  public final String getName()\n+  {\n+    return \"number-of-intervening-jobs\";\n+  }\n+}"}, {"sha": "351fcf72321bc0eadc102beaec666a9f67ea8725", "filename": "libjava/javax/print/attribute/standard/NumberUp.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberUp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberUp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FNumberUp.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* NumberUp.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.DocAttribute;\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintJobAttribute;\n+import javax.print.attribute.PrintRequestAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class NumberUp extends IntegerSyntax\n+  implements DocAttribute, PrintJobAttribute, PrintRequestAttribute\n+{\n+  private static final long serialVersionUID = -3040436486786527811L;\n+  \n+  /**\n+   * Creates a <code>NumberUp</code> object.\n+   *\n+   * @param value the number of print-stream pages to print on a single side\n+   * of a media\n+   *\n+   * @exception IllegalArgumentException if value < 1\n+   */\n+  public NumberUp(int value)\n+  {\n+    super(value);\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof NumberUp))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>NumberUp</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return NumberUp.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"number-up\"\n+   */\n+  public final String getName()\n+  {\n+    return \"number-up\";\n+  }\n+}"}, {"sha": "701527570695d0d6ace7127c8b00ee9c56eb9fc7", "filename": "libjava/javax/print/attribute/standard/PagesPerMinute.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinute.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* PagesPerMinute.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintServiceAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class PagesPerMinute extends IntegerSyntax\n+  implements PrintServiceAttribute\n+{\n+  private static final long serialVersionUID = -6366403993072862015L;\n+  \n+  /**\n+   * Creates a <code>PagesPerMinute</code> object.\n+   *\n+   * @param value the number of pages per minute\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public PagesPerMinute(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof PagesPerMinute))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>PagesPerMinute</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return PagesPerMinute.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"pages-per-minute\"\n+   */\n+  public final String getName()\n+  {\n+    return \"pages-per-minute\";\n+  }\n+}"}, {"sha": "a2b063ce8174eb88b108d04c293924580709564b", "filename": "libjava/javax/print/attribute/standard/PagesPerMinuteColor.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinuteColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinuteColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FPagesPerMinuteColor.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* PagesPerMinuteColor.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintServiceAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class PagesPerMinuteColor extends IntegerSyntax\n+  implements PrintServiceAttribute\n+{\n+  private static final long serialVersionUID = 1684993151687470944L;\n+  \n+  /**\n+   * Creates a <code>PagesPerMinuteColor</code> object.\n+   *\n+   * @param value the number of pages per minute\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public PagesPerMinuteColor(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof PagesPerMinuteColor))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>PagesPerMinuteColor</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return PagesPerMinuteColor.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"pages-per-minute-color\"\n+   */\n+  public final String getName()\n+  {\n+    return \"pages-per-minute-color\";\n+  }\n+}"}, {"sha": "8b00bf012491e713e69ec096d5acc442dc027db1", "filename": "libjava/javax/print/attribute/standard/QueuedJobCount.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FQueuedJobCount.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a2571b0cafa323c8133b1fb5a11c036a58a9e5/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FQueuedJobCount.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2Fstandard%2FQueuedJobCount.java?ref=32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "patch": "@@ -0,0 +1,100 @@\n+/* QueuedJobCount.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute.standard;\n+\n+import javax.print.attribute.IntegerSyntax;\n+import javax.print.attribute.PrintServiceAttribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class QueuedJobCount extends IntegerSyntax\n+  implements PrintServiceAttribute\n+{\n+  private static final long serialVersionUID = 7499723077864047742L;\n+  \n+  /**\n+   * Creates a <code>QueuedJobCount</code> object.\n+   *\n+   * @param value the number of queued jobs\n+   *\n+   * @exception IllegalArgumentException if value < 0\n+   */\n+  public QueuedJobCount(int value)\n+  {\n+    super(value);\n+\n+    if (value < 0)\n+      throw new IllegalArgumentException(\"value may not be less then 0\");\n+  }\n+  \n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof QueuedJobCount))\n+      return false;\n+\n+    return super.equals(obj);\n+  }\n+\n+  /**\n+   * Returns category of this class.\n+   *\n+   * @return the class <code>QueuedJobCount</code> itself\n+   */\n+  public final Class getCategory()\n+  {\n+    return QueuedJobCount.class;\n+  }\n+\n+  /**\n+   * Returns name of this class.\n+   *\n+   * @return the string \"queued-job-count\"\n+   */\n+  public final String getName()\n+  {\n+    return \"queued-job-count\";\n+  }\n+}"}]}