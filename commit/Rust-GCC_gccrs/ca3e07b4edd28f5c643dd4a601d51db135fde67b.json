{"sha": "ca3e07b4edd28f5c643dd4a601d51db135fde67b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzZTA3YjRlZGQyOGY1YzY0M2RkNGE2MDFkNTFkYjEzNWZkZTY3Yg==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2010-06-22T17:41:05Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2010-06-22T17:41:05Z"}, "message": "dwarf2out.c (is_nested_in_subprogram): New function.\n\ngcc/ChangeLog:\n\n\t* dwarf2out.c (is_nested_in_subprogram): New function.\n\t(should_move_die_to_comdat): Use it.\n\t(copy_ancestor_tree): Don't mark DIEs here.\n\t(copy_decls_walk): Start walk from root of newly-added tree;\n\tmark DIEs here instead.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/debug/dwarf2/dwarf4-typedef.C: New test.\n\nFrom-SVN: r161217", "tree": {"sha": "988702c74b8cb74a75ff4aa9e06387a2fde57655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988702c74b8cb74a75ff4aa9e06387a2fde57655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3e07b4edd28f5c643dd4a601d51db135fde67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e07b4edd28f5c643dd4a601d51db135fde67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3e07b4edd28f5c643dd4a601d51db135fde67b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e07b4edd28f5c643dd4a601d51db135fde67b/comments", "author": null, "committer": null, "parents": [{"sha": "9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bebf0e989ac6a6be39d1f14693fd011c2ce624b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bebf0e989ac6a6be39d1f14693fd011c2ce624b"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "eb352d64ecee4ec40e081712172ae494e9a9dfdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3e07b4edd28f5c643dd4a601d51db135fde67b", "patch": "@@ -1,3 +1,11 @@\n+2010-06-22  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dwarf2out.c (is_nested_in_subprogram): New function.\n+\t(should_move_die_to_comdat): Use it.\n+\t(copy_ancestor_tree): Don't mark DIEs here.\n+\t(copy_decls_walk): Start walk from root of newly-added tree;\n+\tmark DIEs here instead.\n+\n 2010-06-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.md (unit): Also check sseishft1."}, {"sha": "5c4999dbb60e4d2bd5a6fdc7083159307c6b883a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ca3e07b4edd28f5c643dd4a601d51db135fde67b", "patch": "@@ -9630,6 +9630,18 @@ is_declaration_die (dw_die_ref die)\n   return 0;\n }\n \n+/* Return non-zero if this DIE is nested inside a subprogram.  */\n+\n+static int\n+is_nested_in_subprogram (dw_die_ref die)\n+{\n+  dw_die_ref decl = get_AT_ref (die, DW_AT_specification);\n+\n+  if (decl == NULL)\n+    decl = die;\n+  return local_scope_p (decl);\n+}\n+\n /* Return non-zero if this is a type DIE that should be moved to a\n    COMDAT .debug_types section.  */\n \n@@ -9642,8 +9654,11 @@ should_move_die_to_comdat (dw_die_ref die)\n     case DW_TAG_structure_type:\n     case DW_TAG_enumeration_type:\n     case DW_TAG_union_type:\n-      /* Don't move declarations or inlined instances.  */\n-      if (is_declaration_die (die) || get_AT (die, DW_AT_abstract_origin))\n+      /* Don't move declarations, inlined instances, or types nested in a\n+\t subprogram.  */\n+      if (is_declaration_die (die)\n+          || get_AT (die, DW_AT_abstract_origin)\n+          || is_nested_in_subprogram (die))\n         return 0;\n       return 1;\n     case DW_TAG_array_type:\n@@ -10055,8 +10070,6 @@ copy_ancestor_tree (dw_die_ref unit, dw_die_ref die, htab_t decl_table)\n \n   if (decl_table != NULL)\n     {\n-      /* Make sure the copy is marked as part of the type unit.  */\n-      copy->die_mark = 1;\n       /* Record the pointer to the copy.  */\n       entry->copy = copy;\n     }\n@@ -10130,7 +10143,18 @@ copy_decls_walk (dw_die_ref unit, dw_die_ref die, htab_t decl_table)\n                  installed in a previously-added context, it won't\n                  get visited otherwise.  */\n               if (parent != unit)\n-                copy_decls_walk (unit, parent, decl_table);\n+\t\t{\n+\t\t  /* Find the highest point of the newly-added tree,\n+\t\t     mark each node along the way, and walk from there.  */\n+\t\t  parent->die_mark = 1;\n+\t\t  while (parent->die_parent\n+\t\t  \t && parent->die_parent->die_mark == 0)\n+\t\t    {\n+\t\t      parent = parent->die_parent;\n+\t\t      parent->die_mark = 1;\n+\t\t    }\n+\t\t  copy_decls_walk (unit, parent, decl_table);\n+\t\t}\n             }\n         }\n     }"}, {"sha": "056fd963482aa0ccf3e2b73e0e4851b3207ace7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca3e07b4edd28f5c643dd4a601d51db135fde67b", "patch": "@@ -1,3 +1,7 @@\n+2010-06-22  Cary Coutant  <ccoutant@google.com>\n+\n+\t* g++.dg/debug/dwarf2/dwarf4-typedef.C: New test.\n+\n 2010-06-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44616"}, {"sha": "c5520fa72b0975a504e7f1a14d5880e7151e49a6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/dwarf4-typedef.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e07b4edd28f5c643dd4a601d51db135fde67b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf4-typedef.C?ref=ca3e07b4edd28f5c643dd4a601d51db135fde67b", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-4\" } */\n+\n+/* Regression test for an ICE in output_die when using -gdwarf-4.  */\n+\n+namespace {\n+\n+struct A {\n+  virtual ~A();\n+};\n+\n+struct B : public A {\n+  template <typename A>\n+  bool foo(A x[2]) { }\n+};\n+\n+template <typename T>\n+struct C {\n+  T v[2];\n+};\n+\n+template <typename T>\n+bool X(T &b) {\n+  typedef C<int> D;\n+  D x[2];\n+  return b.foo(x);\n+}\n+\n+void f() {\n+  B b;\n+  X<B>(b);\n+}\n+\n+}"}]}