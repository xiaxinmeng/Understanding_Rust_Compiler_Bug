{"sha": "579f964023609479859aa37fab0399c1026659b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5Zjk2NDAyMzYwOTQ3OTg1OWFhMzdmYWIwMzk5YzEwMjY2NTliMg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-05-06T17:54:30Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-05-06T17:54:30Z"}, "message": "Run the jni tests using the interpreter.\n\n\t* testsuite/libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Append\n\toptions_cxx to shared lib compile command.\n\t(gcj_jni_test_one): Pass cxxflags to gcj_jni_compile_c_to_so, so\n\tthey are used to link the shared lib, not the main binary.\n\tUse libjava_invoke to run gij.\n\nFrom-SVN: r81574", "tree": {"sha": "5abf05521ce86907d94933b8221e112810578f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5abf05521ce86907d94933b8221e112810578f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/579f964023609479859aa37fab0399c1026659b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579f964023609479859aa37fab0399c1026659b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579f964023609479859aa37fab0399c1026659b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579f964023609479859aa37fab0399c1026659b2/comments", "author": null, "committer": null, "parents": [{"sha": "8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e286911f3abc964b36355bb0908ea65d600eec3e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579f964023609479859aa37fab0399c1026659b2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579f964023609479859aa37fab0399c1026659b2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=579f964023609479859aa37fab0399c1026659b2", "patch": "@@ -1,3 +1,12 @@\n+2004-05-06  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tRun the jni tests using the interpreter.\n+\t* testsuite/libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Append\n+\toptions_cxx to shared lib compile command.\n+\t(gcj_jni_test_one): Pass cxxflags to gcj_jni_compile_c_to_so, so\n+\tthey are used to link the shared lib, not the main binary.\n+\tUse libjava_invoke to run gij.\n+\n 2004-05-06  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/logging/Level.java"}, {"sha": "3c9f3e48a6add14f968b255695248ffac056d854", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579f964023609479859aa37fab0399c1026659b2/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579f964023609479859aa37fab0399c1026659b2/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=579f964023609479859aa37fab0399c1026659b2", "patch": "@@ -39,6 +39,9 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n   # Find jni.h.\n   lappend options \"additional_flags=-I$srcdir/../include\"\n \n+  # Append C++ options\n+  lappend options \"additional_flags=$options_cxx\"\n+\n   set x [libjava_prune_warnings \\\n \t   [target_compile $file $soname executable $options]]\n   if {$x != \"\"} {\n@@ -71,6 +74,7 @@ proc gcj_jni_build_header {file} {\n proc gcj_jni_test_one {file} {\n   global runtests\n   global host_triplet\n+  global INTERPRETER\n \n # apple uses a different extension for shared/dynamic libraries\n # so we check against powerpc-apple-darwin and set them to \n@@ -128,23 +132,36 @@ proc gcj_jni_test_one {file} {\n     set cxxflags [join $cxxflaglist]\n   }\n \n-  if {! [gcj_jni_compile_c_to_so $cfile]} {\n+  if {! [gcj_jni_compile_c_to_so $cfile $cxxflags]} {\n     # FIXME\n     return 0\n   }\n \n   # We use -l$main because the .so is named the same as the main\n   # program.\n-  set args [list \"additional_flags=-fjni -L. -l$main $cxxflags\"]\n+  set args [list \"additional_flags=-fjni -L. -l$main\"]\n   if {! [gcj_link $main $main $file $args]} {\n     # FIXME\n     return 0\n   }\n \n-  if {! [gcj_invoke $main [file rootname $file].out $cxxldlibflags]} {\n+  set resultfile [file rootname $file].out\n+\n+  if {! [gcj_invoke $main $resultfile $cxxldlibflags]} {\n     # FIXME\n     return 0\n   }\n+  \n+  # We purposely ignore errors here; we still want to run the other\n+  # appropriate tests.\n+  set errname [file rootname [file tail $file]]\n+  set gij [libjava_find_gij]\n+  # libjava_find_gij will return `gij' if it couldn't find the\n+  # program; in this case we want to skip the test.\n+  if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n+      libjava_invoke $errname \"gij test\" opts $gij \\\n+\t\"\" $resultfile $main\n+  }  \n \n   # When we succeed we remove all our clutter.\n   eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main lib${main}.${so_extension}]"}]}