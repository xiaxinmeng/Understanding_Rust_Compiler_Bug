{"sha": "138c4fd48455093a2c8ffa962dcb420c3006fb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4YzRmZDQ4NDU1MDkzYTJjOGZmYTk2MmRjYjQyMGMzMDA2ZmIwMQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-05-28T23:59:49Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-05-28T23:59:49Z"}, "message": "jcf-write.c (generate_bytecode_conditional): Handle binops UNLT_EXPR, UNLE_EXPR, UNGT_EXPR, UNGE_EXPR, UNEQ_EXPR, and LTGT_EXPR.\n\n\t* jcf-write.c (generate_bytecode_conditional): Handle binops\n\tUNLT_EXPR, UNLE_EXPR, UNGT_EXPR, UNGE_EXPR, UNEQ_EXPR, and LTGT_EXPR.\n\t(generate_bytecode_insns): Likewise.\n\nFrom-SVN: r82402", "tree": {"sha": "b6e25bb347c8b3f3a7ff33ff1be1c4067813b482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6e25bb347c8b3f3a7ff33ff1be1c4067813b482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138c4fd48455093a2c8ffa962dcb420c3006fb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138c4fd48455093a2c8ffa962dcb420c3006fb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138c4fd48455093a2c8ffa962dcb420c3006fb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138c4fd48455093a2c8ffa962dcb420c3006fb01/comments", "author": null, "committer": null, "parents": [{"sha": "b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dd05b10a8318c7af07941d3b13b75b5c4f5683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3dd05b10a8318c7af07941d3b13b75b5c4f5683"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "443019cf32cf4a45ddaca8e7cdb9435e8d90a6c0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138c4fd48455093a2c8ffa962dcb420c3006fb01/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138c4fd48455093a2c8ffa962dcb420c3006fb01/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=138c4fd48455093a2c8ffa962dcb420c3006fb01", "patch": "@@ -1,3 +1,9 @@\n+2004-05-28  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* jcf-write.c (generate_bytecode_conditional): Handle binops UNLT_EXPR, UNLE_EXPR,\n+    \tUNGT_EXPR, UNGE_EXPR, UNEQ_EXPR, and LTGT_EXPR.\n+\t(generate_bytecode_insns): Likewise.\n+\n 2004-05-28  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* check-init.c (check_init): Handle binops UNLT_EXPR, UNLE_EXPR,"}, {"sha": "5aa6d5ae4e6cbf0a0196509d7a6fbf46e88dd5e3", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138c4fd48455093a2c8ffa962dcb420c3006fb01/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138c4fd48455093a2c8ffa962dcb420c3006fb01/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=138c4fd48455093a2c8ffa962dcb420c3006fb01", "patch": "@@ -1093,6 +1093,8 @@ generate_bytecode_conditional (tree exp,\n   tree exp0, exp1, type;\n   int save_SP = state->code_SP;\n   enum java_opcode op, negop;\n+  bool unordered = 0;\n+  \n   switch (TREE_CODE (exp))\n     {\n     case INTEGER_CST:\n@@ -1164,25 +1166,52 @@ generate_bytecode_conditional (tree exp,\n \t  emit_goto (false_label, state);\n \t}\n       break;\n+\n+    case UNEQ_EXPR:\n+      unordered = 1;\n     case EQ_EXPR:\n       op = OPCODE_if_icmpeq;\n       goto compare;\n+\n+    case LTGT_EXPR:\n+      unordered = 1;\n     case NE_EXPR:\n       op = OPCODE_if_icmpne;\n       goto compare;\n+\n+    case UNLT_EXPR:\n+      unordered = 1;\n     case GT_EXPR:\n       op = OPCODE_if_icmpgt;\n       goto compare;\n+\n+    case UNGT_EXPR:\n+      unordered = 1;\n     case LT_EXPR:\n       op = OPCODE_if_icmplt;\n       goto compare;\n+\n+    case UNLE_EXPR:\n+      unordered = 1;\n     case GE_EXPR:\n       op = OPCODE_if_icmpge;\n       goto compare;\n+\n+    case UNGE_EXPR:\n+      unordered = 1;\n     case LE_EXPR:\n       op = OPCODE_if_icmple;\n       goto compare;\n+\n     compare:\n+      if (unordered)\n+        {\n+\t  struct jcf_block *tmp = true_label;\n+\t  true_label = false_label;\n+\t  false_label = tmp;\n+          true_branch_first = !true_branch_first;\n+\t}\n+\t\n       exp0 = TREE_OPERAND (exp, 0);\n       exp1 = TREE_OPERAND (exp, 1);\n       type = TREE_TYPE (exp0);\n@@ -1549,6 +1578,12 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n     case LT_EXPR:\n     case GE_EXPR:\n     case LE_EXPR:\n+    case UNLT_EXPR:\n+    case UNLE_EXPR:\n+    case UNGT_EXPR:\n+    case UNGE_EXPR:\n+    case UNEQ_EXPR:\n+    case LTGT_EXPR:\n       {\n \tstruct jcf_block *then_label = gen_jcf_label (state);\n \tstruct jcf_block *else_label = gen_jcf_label (state);"}]}