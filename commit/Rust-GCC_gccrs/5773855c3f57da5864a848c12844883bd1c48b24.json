{"sha": "5773855c3f57da5864a848c12844883bd1c48b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3Mzg1NWMzZjU3ZGE1ODY0YTg0OGMxMjg0NDg4M2JkMWM0OGIyNA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2019-12-13T09:09:18Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-11-05T17:28:58Z"}, "message": "Move and adjust PROBE_STACK reg definitions for aarch64\n\nThe change moves the definitions of PROBE_STACK_FIRST_REG\nand PROBE_STACK_SECOND_REG to a more appropriate place for such\nitems (here, in aarch64.md as suggested by Richard), and adjusts\ntheir value from r9/r10 to r10/r11 to free r9 for a possibly\nmore general purpose (e.g. as a static chain at least on targets\nwhich have a private use of r18, such as Windows or Vxworks).\n\n2020-11-07  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/aarch64/aarch64.md: Define PROBE_STACK_FIRST_REGNUM\n\tand PROBE_STACK_SECOND_REGNUM constants, designating r10/r11.\n\tReplacements for the PROBE_STACK_FIRST/SECOND_REG constants in\n\taarch64.c.\n\t* config/aarch64/aarch64.c (PROBE_STACK_FIRST_REG): Remove.\n\t(PROBE_STACK_SECOND_REG): Remove.\n\t(aarch64_emit_probe_stack_range): Adjust to the _REG -> _REGNUM\n\tsuffix update for PROBE_STACK register numbers.", "tree": {"sha": "83bd93ade27b275a76fcc5eaf5916f8352808e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83bd93ade27b275a76fcc5eaf5916f8352808e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5773855c3f57da5864a848c12844883bd1c48b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5773855c3f57da5864a848c12844883bd1c48b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5773855c3f57da5864a848c12844883bd1c48b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5773855c3f57da5864a848c12844883bd1c48b24/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c9de46541ade795987b8949cfa685f02b0318a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c9de46541ade795987b8949cfa685f02b0318a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c9de46541ade795987b8949cfa685f02b0318a"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "0ae6c8b53f6e7ae629bafc2ec033a440012cbe42", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5773855c3f57da5864a848c12844883bd1c48b24/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5773855c3f57da5864a848c12844883bd1c48b24/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5773855c3f57da5864a848c12844883bd1c48b24", "patch": "@@ -6272,10 +6272,6 @@ aarch64_libgcc_cmp_return_mode (void)\n #error Cannot use simple address calculation for stack probing\n #endif\n \n-/* The pair of scratch registers used for stack probing.  */\n-#define PROBE_STACK_FIRST_REG  R9_REGNUM\n-#define PROBE_STACK_SECOND_REG R10_REGNUM\n-\n /* Emit code to probe a range of stack addresses from FIRST to FIRST+POLY_SIZE,\n    inclusive.  These are offsets from the current stack pointer.  */\n \n@@ -6289,7 +6285,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, poly_int64 poly_size)\n       return;\n     }\n \n-  rtx reg1 = gen_rtx_REG (Pmode, PROBE_STACK_FIRST_REG);\n+  rtx reg1 = gen_rtx_REG (Pmode, PROBE_STACK_FIRST_REGNUM);\n \n   /* See the same assertion on PROBE_INTERVAL above.  */\n   gcc_assert ((first % ARITH_FACTOR) == 0);\n@@ -6347,7 +6343,7 @@ aarch64_emit_probe_stack_range (HOST_WIDE_INT first, poly_int64 poly_size)\n      equality test for the loop condition.  */\n   else\n     {\n-      rtx reg2 = gen_rtx_REG (Pmode, PROBE_STACK_SECOND_REG);\n+      rtx reg2 = gen_rtx_REG (Pmode, PROBE_STACK_SECOND_REGNUM);\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n "}, {"sha": "11e0f4612be4117ca59ae56edaea7d08322ddfa5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5773855c3f57da5864a848c12844883bd1c48b24/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5773855c3f57da5864a848c12844883bd1c48b24/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=5773855c3f57da5864a848c12844883bd1c48b24", "patch": "@@ -111,6 +111,13 @@\n     ;; \"FFR token\": a fake register used for representing the scheduling\n     ;; restrictions on FFR-related operations.\n     (FFRT_REGNUM\t85)\n+    ;; The pair of scratch registers used for stack probing with -fstack-check.\n+    ;; Leave R9 alone as a possible choice for the static chain.\n+    ;; Note that the use of these registers is mutually exclusive with the use\n+    ;; of STACK_CLASH_SVE_CFA_REGNUM, which is for -fstack-clash-protection\n+    ;; rather than -fstack-check.\n+    (PROBE_STACK_FIRST_REGNUM  10)\n+    (PROBE_STACK_SECOND_REGNUM 11)\n     ;; Scratch register used by stack clash protection to calculate\n     ;; SVE CFA offsets during probing.\n     (STACK_CLASH_SVE_CFA_REGNUM 11)"}]}