{"sha": "1eefb6c14905428bd54415913c5622efcd748be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlZmI2YzE0OTA1NDI4YmQ1NDQxNTkxM2M1NjIyZWZjZDc0OGJlOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-26T22:07:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-26T22:07:47Z"}, "message": "toplev.c (rest_of_compilation): Delay emit_initial_value_sets until after eh landing pad generation.\n\n        * toplev.c (rest_of_compilation): Delay emit_initial_value_sets\n        until after eh landing pad generation.\n        * config/alpha/alpha.c (alpha_gp_save_rtx): Use gen_mem_addressof.\n        * config/alpha/alpha.md (exception_receiver_2): Only accept MEMs.\n\nFrom-SVN: r51411", "tree": {"sha": "032ac1bc17430675ab85fd07cc2073e88a0b65e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/032ac1bc17430675ab85fd07cc2073e88a0b65e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eefb6c14905428bd54415913c5622efcd748be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eefb6c14905428bd54415913c5622efcd748be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eefb6c14905428bd54415913c5622efcd748be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eefb6c14905428bd54415913c5622efcd748be8/comments", "author": null, "committer": null, "parents": [{"sha": "dcce8b1d54785af4f28c3cb4f49897eeb7ff6c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcce8b1d54785af4f28c3cb4f49897eeb7ff6c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcce8b1d54785af4f28c3cb4f49897eeb7ff6c45"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "583f54a2591cf265d393dabf2c07bc02a2c8470c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eefb6c14905428bd54415913c5622efcd748be8", "patch": "@@ -1,3 +1,10 @@\n+2002-03-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* toplev.c (rest_of_compilation): Delay emit_initial_value_sets\n+\tuntil after eh landing pad generation.\n+\t* config/alpha/alpha.c (alpha_gp_save_rtx): Use gen_mem_addressof.\n+\t* config/alpha/alpha.md (exception_receiver_2): Only accept MEMs.\n+\n 2002-03-26  Richard Henderson  <rth@redhat.com>\n \n \t* expr.h (ADD_PARM_SIZE): One more convert for INC."}, {"sha": "708d0359ebab1c751cd9dce012b54e96fbdb9609", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1eefb6c14905428bd54415913c5622efcd748be8", "patch": "@@ -5011,7 +5011,10 @@ alpha_return_addr (count, frame)\n rtx\n alpha_gp_save_rtx ()\n {\n-  return get_hard_reg_initial_val (DImode, 29);\n+  rtx r = get_hard_reg_initial_val (DImode, 29);\n+  if (GET_CODE (r) != MEM)\n+    r = gen_mem_addressof (r, NULL_TREE);\n+  return r;\n }\n \n static int"}, {"sha": "baaecdd7c1fa3fa1779118fbd441e42b7b07971b", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=1eefb6c14905428bd54415913c5622efcd748be8", "patch": "@@ -6706,13 +6706,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n    (set_attr \"type\" \"multi\")])\n \n (define_insn \"*exception_receiver_2\"\n-  [(unspec_volatile [(match_operand:DI 0 \"nonimmediate_operand\" \"r,m\")]\n-\t\t    UNSPECV_EHR)]\n+  [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")] UNSPECV_EHR)]\n   \"TARGET_LD_BUGGY_LDGP\"\n-  \"@\n-   bis $31,%0,$29\n-   ldq $29,%0\"\n-  [(set_attr \"type\" \"ilog,ild\")])\n+  \"ldq $29,%0\"\n+  [(set_attr \"type\" \"ild\")])\n \n (define_expand \"nonlocal_goto_receiver\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)"}, {"sha": "ed946ef32efe1d952ae3a7104ee44aad0f89aecf", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eefb6c14905428bd54415913c5622efcd748be8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1eefb6c14905428bd54415913c5622efcd748be8", "patch": "@@ -2483,7 +2483,6 @@ rest_of_compilation (decl)\n      carry magic hard reg data throughout the function.  */\n   rtx_equal_function_value_matters = 0;\n   purge_hard_subreg_sets (get_insns ());\n-  emit_initial_value_sets ();\n \n   /* Early return if there were errors.  We can run afoul of our\n      consistency checks, and there's not really much point in fixing them.\n@@ -2518,6 +2517,10 @@ rest_of_compilation (decl)\n       timevar_pop (TV_JUMP);\n     }\n \n+  /* Delay emitting hard_reg_initial_value sets until after EH landing pad\n+     generation, which might create new sets.  */\n+  emit_initial_value_sets ();\n+\n #ifdef FINALIZE_PIC\n   /* If we are doing position-independent code generation, now\n      is the time to output special prologues and epilogues."}]}