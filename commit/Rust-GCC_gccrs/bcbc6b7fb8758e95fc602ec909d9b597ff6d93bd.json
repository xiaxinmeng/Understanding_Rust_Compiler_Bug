{"sha": "bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiYzZiN2ZiODc1OGU5NWZjNjAyZWM5MDlkOWI1OTdmZjZkOTNiZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-01-25T10:16:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-01-25T10:16:21Z"}, "message": "mips-protos.h (mips_reg_mode_ok_for_base_p): Delete.\n\n\t* config/mips/mips-protos.h (mips_reg_mode_ok_for_base_p): Delete.\n\t(mips_regno_mode_ok_for_base_p): Declare.\n\t* config/mips/mips.h (ARG_POINTER_REGNUM): Renumber to 77.\n\t(FRAME_POINTER_REGNUM): Renumber to 78.\n\t(FIRST_PSEUDO_REGISTER): Update comment accordingly.\n\t(BASE_REG_P, GP_REG_OR_PSEUDO_STRICT_P): Delete.\n\t(GP_REG_OR_PSEUDO_NONSTRICT_P): Delete.\n\t(REGNO_MODE_OK_FOR_BASE_P): Use mips_regno_mode_ok_for_base_p.\n\t(REG_MODE_OK_FOR_BASE_P): Likewise.\n\t* config/mips/mips.c (mips_reg_names, mips_sw_reg_names): Change\n\tentry for 77 to \"$arg\" and entry for 78 to \"$frame\".\n\t(mips_regno_to_class): Map 77 and 78 to ALL_REGS.\n\t(mips_reg_mode_ok_for_base_p): Remove.\n\t(mips_regno_mode_ok_for_base_p): New function, derived from old\n\tBASE_REG_P macro.  Don't enforce the mips16 stack pointer\n\trestrictions unless we're being strict.\n\t(mips_valid_base_register_p): Use mips_regno_mode_ok_for_base_p.\n\ntestsuite/\n\t* gcc.dg/torture/mips-clobber-at.c: New test.\n\nFrom-SVN: r76547", "tree": {"sha": "1d535bdec4a0356739c985f5d98f7596ef9794a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d535bdec4a0356739c985f5d98f7596ef9794a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/comments", "author": null, "committer": null, "parents": [{"sha": "0ce78f010d98dc190f21682d4ff56615efd03d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce78f010d98dc190f21682d4ff56615efd03d23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce78f010d98dc190f21682d4ff56615efd03d23"}], "stats": {"total": 126, "additions": 80, "deletions": 46}, "files": [{"sha": "d6138b2df282506c54f876559e77d1da192c6373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -1,3 +1,23 @@\n+2004-01-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips-protos.h (mips_reg_mode_ok_for_base_p): Delete.\n+\t(mips_regno_mode_ok_for_base_p): Declare.\n+\t* config/mips/mips.h (ARG_POINTER_REGNUM): Renumber to 77.\n+\t(FRAME_POINTER_REGNUM): Renumber to 78.\n+\t(FIRST_PSEUDO_REGISTER): Update comment accordingly.\n+\t(BASE_REG_P, GP_REG_OR_PSEUDO_STRICT_P): Delete.\n+\t(GP_REG_OR_PSEUDO_NONSTRICT_P): Delete.\n+\t(REGNO_MODE_OK_FOR_BASE_P): Use mips_regno_mode_ok_for_base_p.\n+\t(REG_MODE_OK_FOR_BASE_P): Likewise.\n+\t* config/mips/mips.c (mips_reg_names, mips_sw_reg_names): Change\n+\tentry for 77 to \"$arg\" and entry for 78 to \"$frame\".\n+\t(mips_regno_to_class): Map 77 and 78 to ALL_REGS.\n+\t(mips_reg_mode_ok_for_base_p): Remove.\n+\t(mips_regno_mode_ok_for_base_p): New function, derived from old\n+\tBASE_REG_P macro.  Don't enforce the mips16 stack pointer\n+\trestrictions unless we're being strict.\n+\t(mips_valid_base_register_p): Use mips_regno_mode_ok_for_base_p.\n+\n 2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-common.h: Fix comment typos."}, {"sha": "dfc14675fb0377eb6c50bfa26b08086d043d2e71", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_MIPS_PROTOS_H\n #define GCC_MIPS_PROTOS_H\n \n-extern int mips_reg_mode_ok_for_base_p (rtx, enum machine_mode, int);\n+extern int mips_regno_mode_ok_for_base_p (int, enum machine_mode, int);\n extern int mips_address_insns (rtx, enum machine_mode);\n extern int mips_const_insns (rtx);\n extern int mips_fetch_insns (rtx);"}, {"sha": "d7bec70bd5f4fd54afc49562f91aa1fc0164b88e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -572,7 +572,7 @@ char mips_reg_names[][8] =\n  \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\n  \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"$f31\",\n  \"hi\",   \"lo\",   \"\",     \"$fcc0\",\"$fcc1\",\"$fcc2\",\"$fcc3\",\"$fcc4\",\n- \"$fcc5\",\"$fcc6\",\"$fcc7\",\"\", \"\",     \"\",     \"\",     \"$fakec\",\n+ \"$fcc5\",\"$fcc6\",\"$fcc7\",\"\", \"\", \"$arg\", \"$frame\", \"$fakec\",\n  \"$c0r0\", \"$c0r1\", \"$c0r2\", \"$c0r3\", \"$c0r4\", \"$c0r5\", \"$c0r6\", \"$c0r7\",\n  \"$c0r8\", \"$c0r9\", \"$c0r10\",\"$c0r11\",\"$c0r12\",\"$c0r13\",\"$c0r14\",\"$c0r15\",\n  \"$c0r16\",\"$c0r17\",\"$c0r18\",\"$c0r19\",\"$c0r20\",\"$c0r21\",\"$c0r22\",\"$c0r23\",\n@@ -601,7 +601,7 @@ char mips_sw_reg_names[][8] =\n   \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\n   \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"$f31\",\n   \"hi\",   \"lo\",   \"\",     \"$fcc0\",\"$fcc1\",\"$fcc2\",\"$fcc3\",\"$fcc4\",\n-  \"$fcc5\",\"$fcc6\",\"$fcc7\",\"$rap\", \"\",     \"\",     \"\",     \"$fakec\",\n+  \"$fcc5\",\"$fcc6\",\"$fcc7\",\"$rap\", \"\", \"$arg\", \"$frame\", \"$fakec\",\n   \"$c0r0\", \"$c0r1\", \"$c0r2\", \"$c0r3\", \"$c0r4\", \"$c0r5\", \"$c0r6\", \"$c0r7\",\n   \"$c0r8\", \"$c0r9\", \"$c0r10\",\"$c0r11\",\"$c0r12\",\"$c0r13\",\"$c0r14\",\"$c0r15\",\n   \"$c0r16\",\"$c0r17\",\"$c0r18\",\"$c0r19\",\"$c0r20\",\"$c0r21\",\"$c0r22\",\"$c0r23\",\n@@ -638,7 +638,7 @@ const enum reg_class mips_regno_to_class[] =\n   HI_REG,\tLO_REG,\t\tNO_REGS,\tST_REGS,\n   ST_REGS,\tST_REGS,\tST_REGS,\tST_REGS,\n   ST_REGS,\tST_REGS,\tST_REGS,\tNO_REGS,\n-  NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n+  NO_REGS,\tALL_REGS,\tALL_REGS,\tNO_REGS,\n   COP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\n   COP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\n   COP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\tCOP0_REGS,\n@@ -953,11 +953,40 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n /* This function is used to implement REG_MODE_OK_FOR_BASE_P.  */\n \n int\n-mips_reg_mode_ok_for_base_p (rtx reg, enum machine_mode mode, int strict)\n+mips_regno_mode_ok_for_base_p (int regno, enum machine_mode mode, int strict)\n {\n-  return (strict\n-\t  ? REGNO_MODE_OK_FOR_BASE_P (REGNO (reg), mode)\n-\t  : GP_REG_OR_PSEUDO_NONSTRICT_P (REGNO (reg), mode));\n+  if (regno >= FIRST_PSEUDO_REGISTER)\n+    {\n+      if (!strict)\n+\treturn true;\n+      regno = reg_renumber[regno];\n+    }\n+\n+  /* These fake registers will be eliminated to either the stack or\n+     hard frame pointer, both of which are usually valid base registers.\n+     Reload deals with the cases where the eliminated form isn't valid.  */\n+  if (regno == ARG_POINTER_REGNUM || regno == FRAME_POINTER_REGNUM)\n+    return true;\n+\n+  /* In mips16 mode, the stack pointer can only address word and doubleword\n+     values, nothing smaller.  There are two problems here:\n+\n+       (a) Instantiating virtual registers can introduce new uses of the\n+\t   stack pointer.  If these virtual registers are valid addresses,\n+\t   the stack pointer should be too.\n+\n+       (b) Most uses of the stack pointer are not made explicit until\n+\t   FRAME_POINTER_REGNUM and ARG_POINTER_REGNUM have been eliminated.\n+\t   We don't know until that stage whether we'll be eliminating to the\n+\t   stack pointer (which needs the restriction) or the hard frame\n+\t   pointer (which doesn't).\n+\n+     All in all, it seems more consitent to only enforce this restriction\n+     during and after reload.  */\n+  if (TARGET_MIPS16 && regno == STACK_POINTER_REGNUM)\n+    return !strict || GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8;\n+\n+  return TARGET_MIPS16 ? M16_REG_P (regno) : GP_REG_P (regno);\n }\n \n \n@@ -971,7 +1000,7 @@ mips_valid_base_register_p (rtx x, enum machine_mode mode, int strict)\n     x = SUBREG_REG (x);\n \n   return (GET_CODE (x) == REG\n-\t  && mips_reg_mode_ok_for_base_p (x, mode, strict));\n+\t  && mips_regno_mode_ok_for_base_p (REGNO (x), mode, strict));\n }\n \n "}, {"sha": "74b8c54d64ef27ff01c280ef2b1c8aaf3e19f4ae", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -1474,8 +1474,11 @@ extern const struct mips_cpu_info *mips_tune_info;\n    - 8 condition code registers\n    - 2 accumulator registers (hi and lo)\n    - 32 registers each for coprocessors 0, 2 and 3\n-   - FAKE_CALL_REGNO (see the comment above load_callsi for details)\n-   - 5 dummy entries that were used at various times in the past.  */\n+   - 3 fake registers:\n+\t- ARG_POINTER_REGNUM\n+\t- FRAME_POINTER_REGNUM\n+\t- FAKE_CALL_REGNO (see the comment above load_callsi for details)\n+   - 3 dummy entries that were used at various times in the past.  */\n \n #define FIRST_PSEUDO_REGISTER 176\n \n@@ -1661,11 +1664,10 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n /* Register to use for pushing function arguments.  */\n #define STACK_POINTER_REGNUM (GP_REG_FIRST + 29)\n \n-/* Base register for access to local variables of the function.  We\n-   pretend that the frame pointer is $1, and then eliminate it to\n-   HARD_FRAME_POINTER_REGNUM.  We can get away with this because $1 is\n-   a fixed register, and will not be used for anything else.  */\n-#define FRAME_POINTER_REGNUM (GP_REG_FIRST + 1)\n+/* These two registers don't really exist: they get eliminated to either\n+   the stack or hard frame pointer.  */\n+#define ARG_POINTER_REGNUM 77\n+#define FRAME_POINTER_REGNUM 78\n \n /* $30 is not available on the mips16, so we use $17 as the frame\n    pointer.  */\n@@ -1678,9 +1680,6 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n    This is computed in `reload', in reload1.c.  */\n #define FRAME_POINTER_REQUIRED (current_function_calls_alloca)\n \n-/* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM GP_REG_FIRST\n-\n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM (GP_REG_FIRST + 2)\n \n@@ -2510,31 +2509,9 @@ typedef struct mips_args {\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* These assume that REGNO is a hard or pseudo reg number.\n-   They give nonzero only if REGNO is a hard reg of the suitable class\n-   or a pseudo reg currently allocated to a suitable hard reg.\n-   These definitions are NOT overridden anywhere.  */\n-\n-#define BASE_REG_P(regno, mode)\t\t\t\t\t\\\n-  (TARGET_MIPS16\t\t\t\t\t\t\\\n-   ? (M16_REG_P (regno)\t\t\t\t\t\t\\\n-      || (regno) == FRAME_POINTER_REGNUM\t\t\t\\\n-      || (regno) == ARG_POINTER_REGNUM\t\t\t\t\\\n-      || ((regno) == STACK_POINTER_REGNUM\t\t\t\\\n-\t  && (GET_MODE_SIZE (mode) == 4\t\t\t\t\\\n-\t      || GET_MODE_SIZE (mode) == 8)))\t\t\t\\\n-   : GP_REG_P (regno))\n-\n-#define GP_REG_OR_PSEUDO_STRICT_P(regno, mode)\t\t\t\t    \\\n-  BASE_REG_P((regno < FIRST_PSEUDO_REGISTER) ? (int) regno : reg_renumber[regno], \\\n-\t     (mode))\n-\n-#define GP_REG_OR_PSEUDO_NONSTRICT_P(regno, mode) \\\n-  (((regno) >= FIRST_PSEUDO_REGISTER) || (BASE_REG_P ((regno), (mode))))\n-\n-#define REGNO_OK_FOR_INDEX_P(regno)\t0\n-#define REGNO_MODE_OK_FOR_BASE_P(regno, mode) \\\n-  GP_REG_OR_PSEUDO_STRICT_P ((regno), (mode))\n+#define REGNO_OK_FOR_INDEX_P(REGNO) 0\n+#define REGNO_MODE_OK_FOR_BASE_P(REGNO, MODE) \\\n+  mips_regno_mode_ok_for_base_p (REGNO, MODE, 1)\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n@@ -2549,10 +2526,10 @@ typedef struct mips_args {\n \n #ifndef REG_OK_STRICT\n #define REG_MODE_OK_FOR_BASE_P(X, MODE) \\\n-  mips_reg_mode_ok_for_base_p (X, MODE, 0)\n+  mips_regno_mode_ok_for_base_p (REGNO (X), MODE, 0)\n #else\n #define REG_MODE_OK_FOR_BASE_P(X, MODE) \\\n-  mips_reg_mode_ok_for_base_p (X, MODE, 1)\n+  mips_regno_mode_ok_for_base_p (REGNO (X), MODE, 1)\n #endif\n \n #define REG_OK_FOR_INDEX_P(X) 0"}, {"sha": "c7935a4aed94b599b50482d7c55ad4df5055807f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -1,3 +1,7 @@\n+2004-01-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/torture/mips-clobber-at.c: New test.\n+\n 2004-01-24  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* gcc.dg/20040124-1.c: New test."}, {"sha": "7f936984a8dca592b8c0bef58789929b39954982", "filename": "gcc/testsuite/gcc.dg/torture/mips-clobber-at.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-clobber-at.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-clobber-at.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-clobber-at.c?ref=bcbc6b7fb8758e95fc602ec909d9b597ff6d93bd", "patch": "@@ -0,0 +1,4 @@\n+/* \"$1\" used to be mapped to the internal frame pointer.  */\n+/* { dg-do compile { target mips*-*-* } } */\n+/* { dg-options \"\" } */\n+int foo () { asm volatile (\"#\" ::: \"$1\"); }"}]}