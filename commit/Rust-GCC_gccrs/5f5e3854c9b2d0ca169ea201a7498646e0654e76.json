{"sha": "5f5e3854c9b2d0ca169ea201a7498646e0654e76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1ZTM4NTRjOWIyZDBjYTE2OWVhMjAxYTc0OTg2NDZlMDY1NGU3Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-01-01T10:35:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:29Z"}, "message": "[Ada] Ada.Strings.Unbounded.Aux.Set_String\n\ngcc/ada/\n\n\t* libgnat/a-stunau.ads, libgnat/a-stunau.adb,\n\tlibgnat/a-stunau__shared.adb (Set_String): Remove old version,\n\treplace by a new version taking a callback to set the string.", "tree": {"sha": "7596487f006ef4e0412c593764a56fc37855773f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7596487f006ef4e0412c593764a56fc37855773f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5e3854c9b2d0ca169ea201a7498646e0654e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5e3854c9b2d0ca169ea201a7498646e0654e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5e3854c9b2d0ca169ea201a7498646e0654e76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5e3854c9b2d0ca169ea201a7498646e0654e76/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f18a0c2a9ef01e83d11805af830249c8f5ab67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f18a0c2a9ef01e83d11805af830249c8f5ab67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f18a0c2a9ef01e83d11805af830249c8f5ab67d"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "28aee553e5dd5c2abe85457341ad20a0efc51b3a", "filename": "gcc/ada/libgnat/a-stunau.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stunau.adb?ref=5f5e3854c9b2d0ca169ea201a7498646e0654e76", "patch": "@@ -52,11 +52,17 @@ package body Ada.Strings.Unbounded.Aux is\n    -- Set_String --\n    ----------------\n \n-   procedure Set_String (UP : in out Unbounded_String; S : String_Access) is\n+   procedure Set_String\n+     (U      : out Unbounded_String;\n+      Length : Positive;\n+      Set    : not null access procedure (S : out String))\n+   is\n+      Old : String_Access := U.Reference;\n    begin\n-      Finalize (UP);\n-      UP.Reference := S;\n-      UP.Last := UP.Reference'Length;\n+      U.Last := Length;\n+      U.Reference := new String (1 .. Length);\n+      Set (U.Reference.all);\n+      Free (Old);\n    end Set_String;\n \n end Ada.Strings.Unbounded.Aux;"}, {"sha": "f3131878066f1f76967c908cca532742ae112d02", "filename": "gcc/ada/libgnat/a-stunau.ads", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stunau.ads?ref=5f5e3854c9b2d0ca169ea201a7498646e0654e76", "patch": "@@ -56,22 +56,24 @@ package Ada.Strings.Unbounded.Aux is\n       S : out Big_String_Access;\n       L : out Natural);\n    pragma Inline (Get_String);\n-   --  This procedure returns the internal string pointer used in the\n-   --  representation of an unbounded string as well as the actual current\n-   --  length (which may be less than S.all'Length because in general there\n-   --  can be extra space assigned). The characters of this string may be\n-   --  not be modified via the returned pointer,  and are valid only as\n-   --  long as the original unbounded string is not accessed or modified.\n+   --  Return the internal string pointer used in the representation of an\n+   --  unbounded string as well as the actual current length (which may be less\n+   --  than S.all'Length because in general there can be extra space assigned).\n+   --  The characters of this string may be not be modified via the returned\n+   --  pointer, and are valid only as long as the original unbounded string is\n+   --  not accessed or modified.\n    --\n    --  This procedure is much more efficient than the use of To_String\n    --  since it avoids the need to copy the string. The lower bound of the\n    --  referenced string returned by this call is always one, so the actual\n    --  string data is always accessible as S (1 .. L).\n \n-   procedure Set_String (UP : in out Unbounded_String; S : String_Access);\n+   procedure Set_String\n+     (U      : out Unbounded_String;\n+      Length : Positive;\n+      Set    : not null access procedure (S : out String));\n    pragma Inline (Set_String);\n-   --  This version of Set_Unbounded_String takes a string access value, rather\n-   --  than a string. The lower bound of the string value is required to be\n-   --  one, and this requirement is not checked.\n+   --  Create an unbounded string U with the given Length, using Set to fill\n+   --  the contents of U.\n \n end Ada.Strings.Unbounded.Aux;"}, {"sha": "3160e14e68e614580990c37ff14d294ca9e999e8", "filename": "gcc/ada/libgnat/a-stunau__shared.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5e3854c9b2d0ca169ea201a7498646e0654e76/gcc%2Fada%2Flibgnat%2Fa-stunau__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stunau__shared.adb?ref=5f5e3854c9b2d0ca169ea201a7498646e0654e76", "patch": "@@ -51,12 +51,30 @@ package body Ada.Strings.Unbounded.Aux is\n    -- Set_String --\n    ----------------\n \n-   procedure Set_String (UP : in out Unbounded_String; S : String_Access) is\n-      X : String_Access := S;\n-\n+   procedure Set_String\n+     (U      : out Unbounded_String;\n+      Length : Positive;\n+      Set    : not null access procedure (S : out String))\n+   is\n+      TR : constant Shared_String_Access := U.Reference;\n+      DR : Shared_String_Access;\n    begin\n-      Set_Unbounded_String (UP, S.all);\n-      Free (X);\n+      --  Try to reuse existing shared string\n+\n+      if Can_Be_Reused (TR, Length) then\n+         Reference (TR);\n+         DR := TR;\n+\n+      --  Otherwise allocate new shared string\n+\n+      else\n+         DR := Allocate (Length);\n+         U.Reference := DR;\n+      end if;\n+\n+      Set (DR.Data (1 .. Length));\n+      DR.Last := Length;\n+      Unreference (TR);\n    end Set_String;\n \n end Ada.Strings.Unbounded.Aux;"}]}