{"sha": "804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA0YTRlMTNmOGM4ZjAxMGFkZjNkYjJhMGYyMGU0MjRkNGVkYzBlMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-08-17T09:08:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-17T09:08:32Z"}, "message": "c-decl.c (init_decl_processing): Remove unneeded &.\n\n        * c-decl.c (init_decl_processing): Remove unneeded &.\n        * alpha.h (alpha_initialize_trampoline): Provide prototype.\n        * except.c (set_exception_lang_code, set_exception_version_code):\n        Change parameter from `short' to `int' to avoid using a gcc\n        extension.\n        * except.h (set_exception_lang_code, set_exception_version_code):\n        Likewise for prototypes.\n        * flow.c (count_reg_references): Remove unused variables `regno'\n        and `i'.\n        * gcse.c (hash_scan_insn): Declare parameter `in_libcall_block'.\n        * prefix.c (translate_name): Cast the result of `alloca'.\n        * varray.h (VARRAY_FREE): Reimplement as a `do-while(0)' statement.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r21781", "tree": {"sha": "c0d16a636f0f4c2d062c0b66f041163db8541aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0d16a636f0f4c2d062c0b66f041163db8541aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/comments", "author": null, "committer": null, "parents": [{"sha": "f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5220a5dd39feb469be2bf80a5b455e2ce766f5e"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "2a5f70a4269bb2a4ac0249e6b66cfca5c952bbfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -1,3 +1,26 @@\n+Mon Aug 17 10:06:11 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t\t\t  Jeff Law <law@cygnus.com>\n+\n+\t* c-decl.c (init_decl_processing): Remove unneeded &.\n+\n+\t* alpha.h (alpha_initialize_trampoline): Provide prototype.\n+\t\n+\t* except.c (set_exception_lang_code, set_exception_version_code):\n+\tChange parameter from `short' to `int' to avoid using a gcc\n+\textension.\n+\n+\t* except.h (set_exception_lang_code, set_exception_version_code):\n+\tLikewise for prototypes.\n+\n+\t* flow.c (count_reg_references): Remove unused variables `regno'\n+\tand `i'.\n+\n+\t* gcse.c (hash_scan_insn): Declare parameter `in_libcall_block'.\n+\n+\t* prefix.c (translate_name): Cast the result of `alloca'.\n+\n+\t* varray.h (VARRAY_FREE): Reimplement as a `do-while(0)' statement.\n+\n Mon Aug 17 09:23:42 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* config/m68k/m68k.c: Include \"system.h\" instead of <stdio.h>."}, {"sha": "5d20c9770dd4ea95a9dc32b95a1e28d133d50704", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -3533,7 +3533,7 @@ init_decl_processing ()\n \n   incomplete_decl_finalize_hook = finish_incomplete_decl;\n \n-  lang_get_alias_set = &c_get_alias_set;\n+  lang_get_alias_set = c_get_alias_set;\n }\n \n /* Return a definition for a builtin function named NAME and whose data type"}, {"sha": "a2842d847901b52c85df85b05c56b42bc633e124", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -1291,6 +1291,7 @@ do {\t\t\t\t\t\t\\\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, 8)\n+extern void alpha_initialize_trampoline ();\n \n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame."}, {"sha": "2d26e9ee9c141640f9bfac91b81b43a15058650a", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -1930,23 +1930,17 @@ static short language_code = 0;\n static short version_code = 0; \n \n /* This routine will set the language code for exceptions. */\n-#ifdef __STDC__\n-void set_exception_lang_code (short code)\n-#else\n-void set_exception_lang_code (code)\n-     short code;\n-#endif\n+void\n+set_exception_lang_code (code)\n+     int code;\n {\n   language_code = code;\n }\n \n /* This routine will set the language version code for exceptions. */\n-#ifdef __STDC__\n-void set_exception_version_code (short code)\n-#else\n-void set_exception_version_code (code)\n+void\n+set_exception_version_code (code)\n      short code;\n-#endif\n {\n   version_code = code;\n }"}, {"sha": "b498a69c7e0117eb85f9212bf78320deccc811d3", "filename": "gcc/except.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -149,8 +149,8 @@ extern int doing_eh\t\t\t\t       PROTO ((int));\n \n /* Toplevel initialization for EH.  */\n \n-void set_exception_lang_code                    PROTO((short));\n-void set_exception_version_code                 PROTO((short));\n+void set_exception_lang_code                    PROTO((int));\n+void set_exception_version_code                 PROTO((int));\n \n /* A list of handlers asocciated with an exception region. HANDLER_LABEL\n    is the the label that control should be transfered to if the data"}, {"sha": "715555d18046ee7fb44f6557e971f23c8e48c234", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -4066,8 +4066,6 @@ count_reg_references (x)\n      rtx x;\n {\n   register RTX_CODE code;\n-  register int regno;\n-  int i;\n \n  retry:\n   code = GET_CODE (x);"}, {"sha": "06b0610871bdd2c30164e24d0b6e0ed022a03a85", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -255,7 +255,7 @@ translate_name (name)\n        keylen++)\n     ;\n \n-  key = alloca (keylen + 1);\n+  key = (char *) alloca (keylen + 1);\n   strncpy (key, &name[1], keylen);\n   key[keylen] = 0;\n "}, {"sha": "eb5a44e1a8b5ce9f38d83f10a770244f2b2b9de1", "filename": "gcc/varray.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/804a4e13f8c8f010adf3db2a0f20e424d4edc0e0/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=804a4e13f8c8f010adf3db2a0f20e424d4edc0e0", "patch": "@@ -124,7 +124,8 @@ extern varray_type varray_init\tPROTO ((size_t, size_t, const char *));\n \n /* Free up memory allocated by the virtual array, but do not free any of the\n    elements involved.  */\n-#define VARRAY_FREE(vp) ((vp) && (free (vp), (vp = (varray_type)0)))\n+#define VARRAY_FREE(vp) \\\n+  do { if (vp) { free (vp); vp = (varray_type)0; } } while (0)\n \n /* Grow/shrink the virtual array VA to N elements.  */\n extern varray_type varray_grow\tPROTO((varray_type, size_t));"}]}