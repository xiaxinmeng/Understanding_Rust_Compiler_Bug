{"sha": "191dbc35688262c9c2bb1d623950a197eff80b80", "node_id": "C_kwDOANBUbNoAKDE5MWRiYzM1Njg4MjYyYzljMmJiMWQ2MjM5NTBhMTk3ZWZmODBiODA", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-13T21:03:35Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-14T08:35:07Z"}, "message": "Revert \"sphinx: copy files from texi2rst-generated repository\"\n\nThis reverts commit c63539ffe4c0e327337a1a51f638d9c8c958cb26.", "tree": {"sha": "e0916846cb998030725c9785ee12158ed642fe75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0916846cb998030725c9785ee12158ed642fe75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191dbc35688262c9c2bb1d623950a197eff80b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191dbc35688262c9c2bb1d623950a197eff80b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191dbc35688262c9c2bb1d623950a197eff80b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191dbc35688262c9c2bb1d623950a197eff80b80/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1191a412bb17a734c58716237382a8348b057546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1191a412bb17a734c58716237382a8348b057546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1191a412bb17a734c58716237382a8348b057546"}], "stats": {"total": 176984, "additions": 0, "deletions": 176984}, "files": [{"sha": "9e305a8e7da557648f49f0282a93f2566a423cbc", "filename": "doc/Makefile", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2FMakefile?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,97 +0,0 @@\n-# Makefile for Sphinx documentation\n-#\n-\n-# You can set these variables from the command line.\n-SPHINXOPTS   ?= -j auto -q\n-SPHINXBUILD  ?= sphinx-build\n-PAPER        ?=\n-SOURCEDIR     = .\n-BUILDDIR      = _build\n-\n-# Internal variables.\n-PAPEROPT_a4     = -D latex_elements.papersize=a4paper\n-PAPEROPT_letter = -D latex_elements.papersize=letterpaper\n-# $(O) is meant as a shortcut for $(SPHINXOPTS)\n-ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) $(O) $(SOURCEDIR)\n-# the i18n builder cannot share the environment and doctrees with the others\n-I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) $(O) $(SOURCEDIR)\n-\n-.PHONY: help\n-help:\n-\t@echo \"Please use \\`make <target>' where <target> is one of\"\n-\t@echo \"  html        to make standalone HTML files\"\n-\t@echo \"  dirhtml     to make HTML files named index.html in directories\"\n-\t@echo \"  singlehtml  to make a single large HTML file\"\n-\t@echo \"  pickle      to make pickle files\"\n-\t@echo \"  json        to make JSON files\"\n-\t@echo \"  htmlhelp    to make HTML files and an HTML help project\"\n-\t@echo \"  qthelp      to make HTML files and a qthelp project\"\n-\t@echo \"  applehelp   to make an Apple Help Book\"\n-\t@echo \"  devhelp     to make HTML files and a Devhelp project\"\n-\t@echo \"  epub        to make an epub\"\n-\t@echo \"  latex       to make LaTeX files (you can set PAPER=a4 or PAPER=letter)\"\n-\t@echo \"  latexpdf    to make LaTeX files and then PDFs out of them\"\n-\t@echo \"  latexpdfja  to make LaTeX files and run them through platex/dvipdfmx\"\n-\t@echo \"  lualatexpdf to make LaTeX files and run them through lualatex\"\n-\t@echo \"  xelatexpdf  to make LaTeX files and run them through xelatex\"\n-\t@echo \"  text        to make text files\"\n-\t@echo \"  man         to make manual pages\"\n-\t@echo \"  texinfo     to make Texinfo files\"\n-\t@echo \"  info        to make Texinfo files and run them through makeinfo\"\n-\t@echo \"  gettext     to make PO message catalogs\"\n-\t@echo \"  changes     to make an overview of all changed/added/deprecated items\"\n-\t@echo \"  xml         to make Docutils-native XML files\"\n-\t@echo \"  pseudoxml   to make pseudoxml-XML files for display purposes\"\n-\t@echo \"  linkcheck   to check all external links for integrity\"\n-\t@echo \"  doctest     to run all doctests embedded in the documentation (if enabled)\"\n-\t@echo \"  coverage    to run coverage check of the documentation (if enabled)\"\n-\t@echo \"  dummy       to check syntax errors of document sources\"\n-\n-.PHONY: clean\n-clean:\n-\trm -rf $(BUILDDIR)\n-\n-.PHONY: latexpdf\n-latexpdf:\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n-\t@echo \"Running LaTeX files through pdflatex...\"\n-\t$(MAKE) LATEXMKOPTS=\"-interaction=nonstopmode -f\" -C $(BUILDDIR)/latex all-pdf\n-\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n-\n-.PHONY: latexpdfja\n-latexpdfja:\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n-\t@echo \"Running LaTeX files through platex and dvipdfmx...\"\n-\t$(MAKE) -C $(BUILDDIR)/latex all-pdf-ja\n-\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n-\n-.PHONY: lualatexpdf\n-lualatexpdf:\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n-\t@echo \"Running LaTeX files through lualatex...\"\n-\t$(MAKE) PDFLATEX=lualatex -C $(BUILDDIR)/latex all-pdf\n-\t@echo \"lualatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n-\n-.PHONY: xelatexpdf\n-xelatexpdf:\n-\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n-\t@echo \"Running LaTeX files through xelatex...\"\n-\t$(MAKE) PDFLATEX=xelatex -C $(BUILDDIR)/latex all-pdf\n-\t@echo \"xelatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n-\n-.PHONY: info\n-info:\n-\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n-\t@echo \"Running Texinfo files through makeinfo...\"\n-\tmake -C $(BUILDDIR)/texinfo info\n-\t@echo \"makeinfo finished; the Info files are in $(BUILDDIR)/texinfo.\"\n-\n-.PHONY: gettext\n-gettext:\n-\t$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale\n-\n-# Catch-all target: route all unknown targets to Sphinx\n-.PHONY: Makefile\n-%: Makefile\n-\t$(SPHINXBUILD) -b \"$@\" $(ALLSPHINXOPTS) \"$(BUILDDIR)/$@\"\n-"}, {"sha": "1282a993e2abd39c7313ff220b52bce4a2f7cc7a", "filename": "doc/_static/custom.css", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2F_static%2Fcustom.css", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2F_static%2Fcustom.css", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2F_static%2Fcustom.css?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,11 +0,0 @@\n-.sidebar-brand-text {\n-  font-size: 13pt;\n-}\n-\n-.literal {\n-  white-space: nowrap !important;\n-}\n-\n-.wy-nav-content {\n-  max-width: initial;\n-}"}, {"sha": "2eea8298dae2e88f88766079ca2417eb9ebb721f", "filename": "doc/baseconf.py", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fbaseconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fbaseconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fbaseconf.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,230 +0,0 @@\n-# Configuration file for the Sphinx documentation builder.\n-#\n-# This file only contains a selection of the most common options. For a full\n-# list see the documentation:\n-# https://www.sphinx-doc.org/en/master/usage/configuration.html\n-\n-# -- Path setup --------------------------------------------------------------\n-\n-# If extensions (or modules to document with autodoc) are in another directory,\n-# add these directories to sys.path here. If the directory is relative to the\n-# documentation root, use os.path.abspath to make it absolute, like shown here.\n-#\n-import os\n-import subprocess\n-import sys\n-# sys.path.insert(0, os.path.abspath('.'))\n-\n-# gccint needs a deeper stack limit\n-sys.setrecursionlimit(2000)\n-\n-# -- Project information -----------------------------------------------------\n-\n-# The full version, including alpha/beta/rc tags\n-\n-# FIXME\n-folder = os.path.dirname(os.path.realpath(__file__))\n-gcc_srcdir = os.path.join(folder, './objdir')\n-\n-\n-def __read_file(name):\n-    path = os.path.join(gcc_srcdir, name)\n-    if os.path.exists(path):\n-        return open(path).read().strip()\n-    else:\n-        return ''\n-\n-\n-def __get_git_revision():\n-    try:\n-        r = subprocess.check_output('git rev-parse --short HEAD', shell=True, encoding='utf8',\n-                                    stderr=subprocess.DEVNULL)\n-        return r.strip()\n-    except subprocess.CalledProcessError:\n-        return None\n-\n-\n-def __get_builder_name():\n-    if '-b' in sys.argv:\n-        return sys.argv[sys.argv.index('-b') + 1]\n-    else:\n-        return None\n-\n-\n-gcc_BASEVER = __read_file('BASE-VER')\n-gcc_DEVPHASE = __read_file('DEV-PHASE')\n-gcc_DATESTAMP = __read_file('DATESTAMP')\n-gcc_REVISION = __read_file('REVISION')\n-\n-VERSION_PACKAGE = os.getenv('VERSION_PACKAGE', '(GCC)')\n-BUGURL = os.getenv('BUGURL', 'https://gcc.gnu.org/bugs/')\n-MONOCHROMATIC = os.getenv('MONOCHROMATIC')\n-\n-# The short X.Y version.\n-version = gcc_BASEVER\n-\n-# The full version, including alpha/beta/rc tags.\n-release = ('%s (%s %s%s)'\n-           % (gcc_BASEVER, gcc_DEVPHASE, gcc_DATESTAMP,\n-              (' %s' % gcc_REVISION) if gcc_REVISION else ''))\n-\n-rst_prolog = r'''\n-.. |gol| raw:: latex\n-\n-               \\\\\n-.. |nbsp| unicode:: 0xA0\n-  :trim:\n-'''\n-\n-needs_sphinx = '5.3'\n-\n-rst_epilog = '''\n-.. |gcc_version| replace:: %s\n-.. |package_version| replace:: %s\n-.. |bugurl| replace:: %s\n-.. |needs_sphinx| replace:: %s\n-''' % (gcc_BASEVER, VERSION_PACKAGE, BUGURL, needs_sphinx)\n-\n-# -- General configuration ---------------------------------------------------\n-\n-# Add any Sphinx extension module names here, as strings. They can be\n-# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n-# ones.\n-extensions = [\n-    'gcc_sphinx',\n-    'sphinx.ext.intersphinx',\n-    'sphinx.ext.extlinks',\n-    'sphinx.ext.todo',\n-]\n-\n-if __get_builder_name() == 'html':\n-    extensions.append('sphinx_copybutton')\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = ['_templates']\n-\n-# List of patterns, relative to source directory, that match files and\n-# directories to ignore when looking for source files.\n-# This pattern also affects html_static_path and html_extra_path.\n-exclude_patterns = ['_build']\n-\n-# Do not highlight by default\n-highlight_language = 'none'\n-\n-# Select C++ as a primary domain\n-primary_domain = 'cpp'\n-\n-cpp_id_attributes = ['HOST_WIDE_INT', '__memx']\n-\n-# -- Options for HTML output -------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  See the documentation for\n-# a list of builtin themes.\n-#\n-html_theme = 'furo'\n-\n-# Theme options are theme-specific and customize the look and feel of a theme\n-# further.  For a list of options available for each theme, see the\n-# documentation.\n-html_theme_options = {\n-    'navigation_with_keys': True,\n-}\n-\n-html_logo = '../logo.svg'\n-\n-html_favicon = '../favicon.ico'\n-\n-html_last_updated_fmt = ''\n-\n-html_context = {\n-    'commit': __get_git_revision()\n-}\n-\n-html_static_path = [\n-    '../_static'\n-]\n-\n-html_css_files = [\n-    'custom.css'\n-]\n-\n-# By default, do not generate any manual pages\n-man_pages = []\n-\n-# FIXME: handle WARNINGs: unknown option issues and cross refs\n-suppress_warnings = [\n-    'ref.option',\n-]\n-\n-# Use xelatex by default\n-latex_engine = 'xelatex'\n-\n-latex_logo = '../logo.pdf'\n-\n-latex_elements = {\n-    'pointsize': '11pt',\n-    'fontpkg': r'''\n-\\setmonofont[Scale=0.8]{DejaVu Sans Mono}\n-''',\n-    'preamble': r'''\n-\\fvset{formatcom=\\let\\textbf\\relax}\n-\\protected\\def\\sphinxcrossref#1{#1}\n-''',\n-}\n-\n-if MONOCHROMATIC:\n-    latex_elements['sphinxsetup'] = r'''\n-TitleColor={black},\n-InnerLinkColor={rgb}{0.0, 0.2, 0.6},\n-OuterLinkColor={rgb}{0.0, 0.2, 0.6},\n-'''\n-\n-latex_table_style = ['colorrows']\n-\n-texinfo_cross_references = False\n-\n-texinfo_elements = {'preamble': \"\"\"\n-@definfoenclose strong,*,*\n-@definfoenclose emph,','\n-\"\"\"\n-}\n-\n-# Use default as RTD theme uses default as well\n-pygments_style = 'bw' if MONOCHROMATIC else 'default'\n-\n-option_emphasise_placeholders = True\n-\n-# Ignore GitHub domain for link checking:\n-# https://github.com/sphinx-doc/sphinx/issues/9016\n-linkcheck_ignore = [\n-    'https://github.com/.*#.*'\n-]\n-\n-USER_LEVEL_DOCS = ('install', 'gcc', 'gfortran', 'cpp', 'gnat_rm', 'gnat_ugn',\n-                   'gccgo', 'libgomp', 'libquadmath', 'libgccjit')\n-INTERNAL_DOCS = ('gccint', 'cppinternals', 'gfc-internals', 'gnat-style')\n-\n-# Cross manual reference mapping\n-intersphinx_mapping = {}\n-for manual in USER_LEVEL_DOCS + INTERNAL_DOCS:\n-    intersphinx_mapping[manual] = (f'https://splichal.eu/scripts/sphinx/{manual}/_build/html/', None)\n-\n-# Custom references\n-extlinks = {\n-    'P': ('https://wg21.link/p%s', 'P%s'),\n-    'PR': ('https://gcc.gnu.org/PR%s', 'PR%s'),\n-    'openmp': ('https://openmp.org/specifications/#%s', 'OpenMP specification v%s'),\n-    'openacc': ('https://openacc.org/specification#%s', 'OpenACC specification v%s'),\n-}\n-\n-extlinks_detect_hardcoded_links = True\n-\n-# Set common settings where we need NAME of the documentation\n-def set_common(name, module):\n-    module['tags'].add(name)\n-    if gcc_DEVPHASE == 'experimental':\n-        module['todo_include_todos'] = True\n-        module['tags'].add('development')\n-\n-    html_theme_options['source_edit_link'] = f'https://splichal.eu/scripts/sphinx/{name}' \\\n-                                               '/_build/html/_sources/{filename}.txt'"}, {"sha": "6d53fa6271c8ea4f775bec13cbef9da6190c6209", "filename": "doc/bsd.rst", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fbsd.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fbsd.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fbsd.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,39 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-BSD\n-===\n-\n-Copyright (C) 1990 Regents of the University of California.\n-All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-\n-#. Redistributions of source code must retain the above copyright\n-   notice, this list of conditions and the following disclaimer.\n-\n-#. Redistributions in binary form must reproduce the above copyright\n-   notice, this list of conditions and the following disclaimer in the\n-   documentation and/or other materials provided with the distribution.\n-\n-#. [rescinded 22 July 1999]\n-\n-#. Neither the name of the University nor the names of its contributors\n-   may be used to endorse or promote products derived from this software\n-   without specific prior written permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS 'AS IS' AND\n-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n-OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n-LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-SUCH DAMAGE.\n\\ No newline at end of file"}, {"sha": "273d61717b1be2aaa2d51c956411bdf8c9450825", "filename": "doc/contrib.rst", "status": "removed", "additions": 0, "deletions": 1273, "changes": 1273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcontrib.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcontrib.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcontrib.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,1273 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: contributors\n-\n-.. _contributors:\n-\n-Contributors to GCC\n-===================\n-\n-The GCC project would like to thank its many contributors.  Without them the\n-project would not have been nearly as successful as it has been.  Any omissions\n-in this list are accidental.  Feel free to contact\n-law@redhat.com or gerald@pfeifer.com if you have been left\n-out or some of your contributions are not listed.  Please keep this list in\n-alphabetical order.\n-\n-* Analog Devices helped implement the support for complex data types\n-  and iterators.\n-\n-* John David Anglin for threading-related fixes and improvements to\n-  libstdc++-v3, and the HP-UX port.\n-\n-* James van Artsdalen wrote the code that makes efficient use of\n-  the Intel 80387 register stack.\n-\n-* Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta Series\n-  port.\n-\n-* Alasdair Baird for various bug fixes.\n-\n-* Giovanni Bajo for analyzing lots of complicated C++ problem reports.\n-\n-* Peter Barada for his work to improve code generation for new\n-  ColdFire cores.\n-\n-* Gerald Baumgartner added the signature extension to the C++ front end.\n-\n-* Godmar Back for his Java improvements and encouragement.\n-\n-* Scott Bambrough for help porting the Java compiler.\n-\n-* Wolfgang Bangerth for processing tons of bug reports.\n-\n-* Jon Beniston for his Microsoft Windows port of Java and port to Lattice Mico32.\n-\n-* Daniel Berlin for better DWARF 2 support, faster/better optimizations,\n-  improved alias analysis, plus migrating GCC to Bugzilla.\n-\n-* Geoff Berry for his Java object serialization work and various patches.\n-\n-* David Binderman tests weekly snapshots of GCC trunk against Fedora Rawhide\n-  for several architectures.\n-\n-* Laurynas Biveinis for memory management work and DJGPP port fixes.\n-\n-* Uros Bizjak for the implementation of x87 math built-in functions and\n-  for various middle end and i386 back end improvements and bug fixes.\n-\n-* Eric Blake for helping to make GCJ and libgcj conform to the\n-  specifications.\n-\n-* Janne Blomqvist for contributions to GNU Fortran.\n-\n-* Hans-J. Boehm for his garbage collector, IA-64 libffi port, and other\n-  Java work.\n-\n-* Segher Boessenkool for helping maintain the PowerPC port and the\n-  instruction combiner plus various contributions to the middle end.\n-\n-* Neil Booth for work on cpplib, lang hooks, debug hooks and other\n-  miscellaneous clean-ups.\n-\n-* Steven Bosscher for integrating the GNU Fortran front end into GCC and for\n-  contributing to the tree-ssa branch.\n-\n-* Eric Botcazou for fixing middle- and backend bugs left and right.\n-\n-* Per Bothner for his direction via the steering committee and various\n-  improvements to the infrastructure for supporting new languages.  Chill\n-  front end implementation.  Initial implementations of\n-  cpplib, fix-header, config.guess, libio, and past C++ library (libg++)\n-  maintainer.  Dreaming up, designing and implementing much of GCJ.\n-\n-* Devon Bowen helped port GCC to the Tahoe.\n-\n-* Don Bowman for mips-vxworks contributions.\n-\n-* James Bowman for the FT32 port.\n-\n-* Dave Brolley for work on cpplib and Chill.\n-\n-* Paul Brook for work on the ARM architecture and maintaining GNU Fortran.\n-\n-* Robert Brown implemented the support for Encore 32000 systems.\n-\n-* Christian Bruel for improvements to local store elimination.\n-\n-* Herman A.J. ten Brugge for various fixes.\n-\n-* Joerg Brunsmann for Java compiler hacking and help with the GCJ FAQ.\n-\n-* Joe Buck for his direction via the steering committee from its creation\n-  to 2013.\n-\n-* Iain Buclaw for the D frontend.\n-\n-* Craig Burley for leadership of the G77 Fortran effort.\n-\n-* Tobias Burnus for contributions to GNU Fortran.\n-\n-* Stephan Buys for contributing Doxygen notes for libstdc++.\n-\n-* Paolo Carlini for libstdc++ work: lots of efficiency improvements to\n-  the C++ strings, streambufs and formatted I/O, hard detective work on\n-  the frustrating localization issues, and keeping up with the problem reports.\n-\n-* John Carr for his alias work, SPARC hacking, infrastructure improvements,\n-  previous contributions to the steering committee, loop optimizations, etc.\n-\n-* Stephane Carrez for 68HC11 and 68HC12 ports.\n-\n-* Steve Chamberlain for support for the Renesas SH and H8 processors\n-  and the PicoJava processor, and for GCJ config fixes.\n-\n-* Glenn Chambers for help with the GCJ FAQ.\n-\n-* John-Marc Chandonia for various libgcj patches.\n-\n-* Denis Chertykov for contributing and maintaining the AVR port, the first GCC port\n-  for an 8-bit architecture.\n-\n-* Kito Cheng for his work on the RISC-V port, including bringing up the test\n-  suite and maintenance.\n-\n-* Scott Christley for his Objective-C contributions.\n-\n-* Eric Christopher for his Java porting help and clean-ups.\n-\n-* Branko Cibej for more warning contributions.\n-\n-* The `GNU Classpath project <https://www.gnu.org/software/classpath/>`_\n-  for all of their merged runtime code.\n-\n-* Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,\n-  :option:`--help`, and other random hacking.\n-\n-* Michael Cook for libstdc++ cleanup patches to reduce warnings.\n-\n-* R. Kelley Cook for making GCC buildable from a read-only directory as\n-  well as other miscellaneous build process and documentation clean-ups.\n-\n-* Ralf Corsepius for SH testing and minor bug fixing.\n-\n-* Franc\u0327ois-Xavier Coudert for contributions to GNU Fortran.\n-\n-* Stan Cox for care and feeding of the x86 port and lots of behind\n-  the scenes hacking.\n-\n-* Alex Crain provided changes for the 3b1.\n-\n-* Ian Dall for major improvements to the NS32k port.\n-\n-* Paul Dale for his work to add uClinux platform support to the\n-  m68k backend.\n-\n-* Palmer Dabbelt for his work maintaining the RISC-V port.\n-\n-* Dario Dariol contributed the four varieties of sample programs\n-  that print a copy of their source.\n-\n-* Russell Davidson for fstream and stringstream fixes in libstdc++.\n-\n-* Bud Davis for work on the G77 and GNU Fortran compilers.\n-\n-* Mo DeJong for GCJ and libgcj bug fixes.\n-\n-* Jerry DeLisle for contributions to GNU Fortran.\n-\n-* DJ Delorie for the DJGPP port, build and libiberty maintenance,\n-  various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.\n-\n-* Arnaud Desitter for helping to debug GNU Fortran.\n-\n-* Gabriel Dos Reis for contributions to G++, contributions and\n-  maintenance of GCC diagnostics infrastructure, libstdc++-v3,\n-  including ``valarray<>``, ``complex<>``, maintaining the numerics library\n-  (including that pesky ``<limits>`` :-) and keeping up-to-date anything\n-  to do with numbers.\n-\n-* Ulrich Drepper for his work on glibc, testing of GCC using glibc, ISO C99\n-  support, CFG dumping support, etc., plus support of the C++ runtime\n-  libraries including for all kinds of C interface issues, contributing and\n-  maintaining ``complex<>``, sanity checking and disbursement, configuration\n-  architecture, libio maintenance, and early math work.\n-\n-* Franc\u0327ois Dumont for his work on libstdc++-v3, especially maintaining and\n-  improving ``debug-mode`` and associative and unordered containers.\n-\n-* Zdenek Dvorak for a new loop unroller and various fixes.\n-\n-* Michael Eager for his work on the Xilinx MicroBlaze port.\n-\n-* Richard Earnshaw for his ongoing work with the ARM.\n-\n-* David Edelsohn for his direction via the steering committee, ongoing work\n-  with the RS6000/PowerPC port, help cleaning up Haifa loop changes,\n-  doing the entire AIX port of libstdc++ with his bare hands, and for\n-  ensuring GCC properly keeps working on AIX.\n-\n-* Kevin Ediger for the floating point formatting of num_put::do_put in\n-  libstdc++.\n-\n-* Phil Edwards for libstdc++ work including configuration hackery,\n-  documentation maintainer, chief breaker of the web pages, the occasional\n-  iostream bug fix, and work on shared library symbol versioning.\n-\n-* Paul Eggert for random hacking all over GCC.\n-\n-* Mark Elbrecht for various DJGPP improvements, and for libstdc++\n-  configuration support for locales and fstream-related fixes.\n-\n-* Vadim Egorov for libstdc++ fixes in strings, streambufs, and iostreams.\n-\n-* Christian Ehrhardt for dealing with bug reports.\n-\n-* Ben Elliston for his work to move the Objective-C runtime into its\n-  own subdirectory and for his work on autoconf.\n-\n-* Revital Eres for work on the PowerPC 750CL port.\n-\n-* Marc Espie for OpenBSD support.\n-\n-* Doug Evans for much of the global optimization framework, arc, m32r,\n-  and SPARC work.\n-\n-* Christopher Faylor for his work on the Cygwin port and for caring and\n-  feeding the gcc.gnu.org box and saving its users tons of spam.\n-\n-* Fred Fish for BeOS support and Ada fixes.\n-\n-* Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ.\n-\n-* Peter Gerwinski for various bug fixes and the Pascal front end.\n-\n-* Kaveh R. Ghazi for his direction via the steering committee, amazing\n-  work to make :samp:`-W -Wall -W* -Werror` useful, and\n-  testing GCC on a plethora of platforms.  Kaveh extends his gratitude to\n-  the CAIP Center at Rutgers University for providing him with computing\n-  resources to work on Free Software from the late 1980s to 2010.\n-\n-* John Gilmore for a donation to the FSF earmarked improving GNU Java.\n-\n-* Judy Goldberg for c++ contributions.\n-\n-* Torbjorn Granlund for various fixes and the c-torture testsuite,\n-  multiply- and divide-by-constant optimization, improved long long\n-  support, improved leaf function register allocation, and his direction\n-  via the steering committee.\n-\n-* Jonny Grant for improvements to ``collect2's`` :option:`--help` documentation.\n-\n-* Anthony Green for his :option:`-Os` contributions, the moxie port, and\n-  Java front end work.\n-\n-* Stu Grossman for gdb hacking, allowing GCJ developers to debug Java code.\n-\n-* Michael K. Gschwind contributed the port to the PDP-11.\n-\n-* Richard Biener for his ongoing middle-end contributions and bug fixes\n-  and for release management.\n-\n-* Ron Guilmette implemented the :command:`protoize` and :command:`unprotoize`\n-  tools, the support for DWARF 1 symbolic debugging information, and much of\n-  the support for System V Release 4.  He has also worked heavily on the\n-  Intel 386 and 860 support.\n-\n-* Sumanth Gundapaneni for contributing the CR16 port.\n-\n-* Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload GCSE.\n-\n-* Bruno Haible for improvements in the runtime overhead for EH, new\n-  warnings and assorted bug fixes.\n-\n-* Andrew Haley for his amazing Java compiler and library efforts.\n-\n-* Chris Hanson assisted in making GCC work on HP-UX for the 9000 series 300.\n-\n-* Michael Hayes for various thankless work he's done trying to get\n-  the c30/c40 ports functional.  Lots of loop and unroll improvements and\n-  fixes.\n-\n-* Dara Hazeghi for wading through myriads of target-specific bug reports.\n-\n-* Kate Hedstrom for staking the G77 folks with an initial testsuite.\n-\n-* Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64 work, loop\n-  opts, and generally fixing lots of old problems we've ignored for\n-  years, flow rewrite and lots of further stuff, including reviewing\n-  tons of patches.\n-\n-* Aldy Hernandez for working on the PowerPC port, SIMD support, and\n-  various fixes.\n-\n-* Nobuyuki Hikichi of Software Research Associates, Tokyo, contributed\n-  the support for the Sony NEWS machine.\n-\n-* Kazu Hirata for caring and feeding the Renesas H8/300 port and various fixes.\n-\n-* Katherine Holcomb for work on GNU Fortran.\n-\n-* Manfred Hollstein for his ongoing work to keep the m88k alive, lots\n-  of testing and bug fixing, particularly of GCC configury code.\n-\n-* Steve Holmgren for MachTen patches.\n-\n-* Mat Hostetter for work on the TILE-Gx and TILEPro ports.\n-\n-* Jan Hubicka for his x86 port improvements.\n-\n-* Falk Hueffner for working on C and optimization bug reports.\n-\n-* Bernardo Innocenti for his m68k work, including merging of\n-  ColdFire improvements and uClinux support.\n-\n-* Christian Iseli for various bug fixes.\n-\n-* Kamil Iskra for general m68k hacking.\n-\n-* Lee Iverson for random fixes and MIPS testing.\n-\n-* Balaji V. Iyer for Cilk+ development and merging.\n-\n-* Andreas Jaeger for testing and benchmarking of GCC and various bug fixes.\n-\n-* Martin Jambor for his work on inter-procedural optimizations, the\n-  switch conversion pass, and scalar replacement of aggregates.\n-\n-* Jakub Jelinek for his SPARC work and sibling call optimizations as well\n-  as lots of bug fixes and test cases, and for improving the Java build\n-  system.\n-\n-* Janis Johnson for ia64 testing and fixes, her quality improvement\n-  sidetracks, and web page maintenance.\n-\n-* Kean Johnston for SCO OpenServer support and various fixes.\n-\n-* Tim Josling for the sample language treelang based originally on Richard\n-  Kenner's 'toy' language.\n-\n-* Nicolai Josuttis for additional libstdc++ documentation.\n-\n-* Klaus Kaempf for his ongoing work to make alpha-vms a viable target.\n-\n-* Steven G. Kargl for work on GNU Fortran.\n-\n-* David Kashtan of SRI adapted GCC to VMS.\n-\n-* Ryszard Kabatek for many, many libstdc++ bug fixes and optimizations of\n-  strings, especially member functions, and for auto_ptr fixes.\n-\n-* Geoffrey Keating for his ongoing work to make the PPC work for GNU/Linux\n-  and his automatic regression tester.\n-\n-* Brendan Kehoe for his ongoing work with G++ and for a lot of early work\n-  in just about every part of libstdc++.\n-\n-* Oliver M. Kellogg of Deutsche Aerospace contributed the port to the\n-  MIL-STD-1750A.\n-\n-* Richard Kenner of the New York University Ultracomputer Research\n-  Laboratory wrote the machine descriptions for the AMD 29000, the DEC\n-  Alpha, the IBM RT PC, and the IBM RS/6000 as well as the support for\n-  instruction attributes.  He also made changes to better support RISC\n-  processors including changes to common subexpression elimination,\n-  strength reduction, function calling sequence handling, and condition\n-  code support, in addition to generalizing the code for frame pointer\n-  elimination and delay slot scheduling.  Richard Kenner was also the\n-  head maintainer of GCC for several years.\n-\n-* Mumit Khan for various contributions to the Cygwin and Mingw32 ports and\n-  maintaining binary releases for Microsoft Windows hosts, and for massive libstdc++\n-  porting work to Cygwin/Mingw32.\n-\n-* Robin Kirkham for cpu32 support.\n-\n-* Mark Klein for PA improvements.\n-\n-* Thomas Koenig for various bug fixes.\n-\n-* Bruce Korb for the new and improved fixincludes code.\n-\n-* Benjamin Kosnik for his G++ work and for leading the libstdc++-v3 effort.\n-\n-* Maxim Kuvyrkov for contributions to the instruction scheduler, the Android\n-  and m68k/Coldfire ports, and optimizations.\n-\n-* Charles LaBrec contributed the support for the Integrated Solutions\n-  68020 system.\n-\n-* Asher Langton and Mike Kumbera for contributing Cray pointer support\n-  to GNU Fortran, and for other GNU Fortran improvements.\n-\n-* Jeff Law for his direction via the steering committee, coordinating the\n-  entire egcs project and GCC 2.95, rolling out snapshots and releases,\n-  handling merges from GCC2, reviewing tons of patches that might have\n-  fallen through the cracks else, and random but extensive hacking.\n-\n-* Walter Lee for work on the TILE-Gx and TILEPro ports.\n-\n-* Marc Lehmann for his direction via the steering committee and helping\n-  with analysis and improvements of x86 performance.\n-\n-* Victor Leikehman for work on GNU Fortran.\n-\n-* Ted Lemon wrote parts of the RTL reader and printer.\n-\n-* Kriang Lerdsuwanakij for C++ improvements including template as template\n-  parameter support, and many C++ fixes.\n-\n-* Warren Levy for tremendous work on libgcj (Java Runtime Library) and\n-  random work on the Java front end.\n-\n-* Alain Lichnewsky ported GCC to the MIPS CPU.\n-\n-* Oskar Liljeblad for hacking on AWT and his many Java bug reports and\n-  patches.\n-\n-* Robert Lipe for OpenServer support, new testsuites, testing, etc.\n-\n-* Chen Liqin for various S+core related fixes/improvement, and for\n-  maintaining the S+core port.\n-\n-* Martin Liska for his work on identical code folding, the sanitizers,\n-  HSA, general bug fixing and for running automated regression testing of GCC\n-  and reporting numerous bugs.\n-\n-* Weiwen Liu for testing and various bug fixes.\n-\n-* Manuel Lo\u0301pez-Iba\u0301n\u0303ez for improving :option:`-Wconversion` and\n-  many other diagnostics fixes and improvements.\n-\n-* Dave Love for his ongoing work with the Fortran front end and\n-  runtime libraries.\n-\n-* Martin von Lo\u0308wis for internal consistency checking infrastructure,\n-  various C++ improvements including namespace support, and tons of\n-  assistance with libstdc++/compiler merges.\n-\n-* H.J. Lu for his previous contributions to the steering committee, many x86\n-  bug reports, prototype patches, and keeping the GNU/Linux ports working.\n-\n-* Greg McGary for random fixes and (someday) bounded pointers.\n-\n-* Andrew MacLeod for his ongoing work in building a real EH system,\n-  various code generation improvements, work on the global optimizer, etc.\n-\n-* Vladimir Makarov for hacking some ugly i960 problems, PowerPC hacking\n-  improvements to compile-time performance, overall knowledge and\n-  direction in the area of instruction scheduling, design and\n-  implementation of the automaton based instruction scheduler and\n-  design and implementation of the integrated and local register allocators.\n-\n-* David Malcolm for his work on improving GCC diagnostics, JIT, self-tests\n-  and unit testing.\n-\n-* Bob Manson for his behind the scenes work on dejagnu.\n-\n-* John Marino for contributing the DragonFly BSD port.\n-\n-* Philip Martin for lots of libstdc++ string and vector iterator fixes and\n-  improvements, and string clean up and testsuites.\n-\n-* Michael Matz for his work on dominance tree discovery, the x86-64 port,\n-  link-time optimization framework and general optimization improvements.\n-\n-* All of the Mauve project contributors for Java test code.\n-\n-* Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.\n-\n-* Adam Megacz for his work on the Microsoft Windows port of GCJ.\n-\n-* Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,\n-  powerpc, haifa, ECOFF debug support, and other assorted hacking.\n-\n-* Jason Merrill for his direction via the steering committee and leading\n-  the G++ effort.\n-\n-* Martin Michlmayr for testing GCC on several architectures using the\n-  entire Debian archive.\n-\n-* David Miller for his direction via the steering committee, lots of\n-  SPARC work, improvements in jump.cc and interfacing with the Linux kernel\n-  developers.\n-\n-* Gary Miller ported GCC to Charles River Data Systems machines.\n-\n-* Alfred Minarik for libstdc++ string and ios bug fixes, and turning the\n-  entire libstdc++ testsuite namespace-compatible.\n-\n-* Mark Mitchell for his direction via the steering committee, mountains of\n-  C++ work, load/store hoisting out of loops, alias analysis improvements,\n-  ISO C ``restrict`` support, and serving as release manager from 2000\n-  to 2011.\n-\n-* Alan Modra for various GNU/Linux bits and testing.\n-\n-* Toon Moene for his direction via the steering committee, Fortran\n-  maintenance, and his ongoing work to make us make Fortran run fast.\n-\n-* Jason Molenda for major help in the care and feeding of all the services\n-  on the gcc.gnu.org (formerly egcs.cygnus.com) machine---mail, web\n-  services, ftp services, etc etc.  Doing all this work on scrap paper and\n-  the backs of envelopes would have been... difficult.\n-\n-* Catherine Moore for fixing various ugly problems we have sent her\n-  way, including the haifa bug which was killing the Alpha & PowerPC\n-  Linux kernels.\n-\n-* Mike Moreton for his various Java patches.\n-\n-* David Mosberger-Tang for various Alpha improvements, and for the initial\n-  IA-64 port.\n-\n-* Stephen Moshier contributed the floating point emulator that assists in\n-  cross-compilation and permits support for floating point numbers wider\n-  than 64 bits and for ISO C99 support.\n-\n-* Bill Moyer for his behind the scenes work on various issues.\n-\n-* Philippe De Muyter for his work on the m68k port.\n-\n-* Joseph S. Myers for his work on the PDP-11 port, format checking and ISO\n-  C99 support, and continuous emphasis on (and contributions to) documentation.\n-\n-* Nathan Myers for his work on libstdc++-v3: architecture and authorship\n-  through the first three snapshots, including implementation of locale\n-  infrastructure, string, shadow C headers, and the initial project\n-  documentation (DESIGN, CHECKLIST, and so forth).  Later, more work on\n-  MT-safe string and shadow headers.\n-\n-* Felix Natter for documentation on porting libstdc++.\n-\n-* Nathanael Nerode for cleaning up the configuration/build process.\n-\n-* NeXT, Inc. donated the front end that supports the Objective-C\n-  language.\n-\n-* Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the search\n-  engine setup, various documentation fixes and other small fixes.\n-\n-* Geoff Noer for his work on getting cygwin native builds working.\n-\n-* Vegard Nossum for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance\n-  tracking web pages, GIMPLE tuples, and assorted fixes.\n-\n-* David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64, FreeBSD/ARM,\n-  FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related infrastructure\n-  improvements.\n-\n-* Alexandre Oliva for various build infrastructure improvements, scripts and\n-  amazing testing work, including keeping libtool issues sane and happy.\n-\n-* Stefan Olsson for work on mt_alloc.\n-\n-* Melissa O'Neill for various NeXT fixes.\n-\n-* Rainer Orth for random MIPS work, including improvements to GCC's o32\n-  ABI support, improvements to dejagnu's MIPS support, Java configuration\n-  clean-ups and porting work, and maintaining the IRIX, Solaris 2, and\n-  Tru64 UNIX ports.\n-\n-* Steven Pemberton for his contribution of :samp:`enquire` which allowed GCC to\n-  determine various properties of the floating point unit and generate\n-  :samp:`float.h` in older versions of GCC.\n-\n-* Hartmut Penner for work on the s390 port.\n-\n-* Paul Petersen wrote the machine description for the Alliant FX/8.\n-\n-* Alexandre Petit-Bianco for implementing much of the Java compiler and\n-  continued Java maintainership.\n-\n-* Matthias Pfaller for major improvements to the NS32k port.\n-\n-* Gerald Pfeifer for his direction via the steering committee, pointing\n-  out lots of problems we need to solve, maintenance of the web pages, and\n-  taking care of documentation maintenance in general.\n-\n-* Marek Polacek for his work on the C front end, the sanitizers and general\n-  bug fixing.\n-\n-* Andrew Pinski for processing bug reports by the dozen.\n-\n-* Ovidiu Predescu for his work on the Objective-C front end and runtime\n-  libraries.\n-\n-* Jerry Quinn for major performance improvements in C++ formatted I/O.\n-\n-* Ken Raeburn for various improvements to checker, MIPS ports and various\n-  cleanups in the compiler.\n-\n-* Rolf W. Rasmussen for hacking on AWT.\n-\n-* David Reese of Sun Microsystems contributed to the Solaris on PowerPC\n-  port.\n-\n-* John Regehr for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Volker Reichelt for running automated regression testing of GCC and reporting\n-  numerous bugs and for keeping up with the problem reports.\n-\n-* Joern Rennecke for maintaining the sh port, loop, regmove & reload\n-  hacking and developing and maintaining the Epiphany port.\n-\n-* Loren J. Rittle for improvements to libstdc++-v3 including the FreeBSD\n-  port, threading fixes, thread-related configury changes, critical\n-  threading documentation, and solutions to really tricky I/O problems,\n-  as well as keeping GCC properly working on FreeBSD and continuous testing.\n-\n-* Craig Rodrigues for processing tons of bug reports.\n-\n-* Ola Ro\u0308nnerup for work on mt_alloc.\n-\n-* Gavin Romig-Koch for lots of behind the scenes MIPS work.\n-\n-* David Ronis inspired and encouraged Craig to rewrite the G77\n-  documentation in texinfo format by contributing a first pass at a\n-  translation of the old :samp:`g77-0.5.16/f/DOC` file.\n-\n-* Ken Rose for fixes to GCC's delay slot filling code.\n-\n-* Ira Rosen for her contributions to the auto-vectorizer.\n-\n-* Paul Rubin wrote most of the preprocessor.\n-\n-* Pe\u0301tur Runo\u0301lfsson for major performance improvements in C++ formatted I/O and\n-  large file support in C++ filebuf.\n-\n-* Chip Salzenberg for libstdc++ patches and improvements to locales, traits,\n-  Makefiles, libio, libtool hackery, and 'long long' support.\n-\n-* Juha Sarlin for improvements to the H8 code generator.\n-\n-* Greg Satz assisted in making GCC work on HP-UX for the 9000 series 300.\n-\n-* Roger Sayle for improvements to constant folding and GCC's RTL optimizers\n-  as well as for fixing numerous bugs.\n-\n-* Bradley Schatz for his work on the GCJ FAQ.\n-\n-* Peter Schauer wrote the code to allow debugging to work on the Alpha.\n-\n-* William Schelter did most of the work on the Intel 80386 support.\n-\n-* Tobias Schlu\u0308ter for work on GNU Fortran.\n-\n-* Bernd Schmidt for various code generation improvements and major\n-  work in the reload pass, serving as release manager for\n-  GCC 2.95.3, and work on the Blackfin and C6X ports.\n-\n-* Peter Schmid for constant testing of libstdc++---especially application\n-  testing, going above and beyond what was requested for the release\n-  criteria---and libstdc++ header file tweaks.\n-\n-* Jason Schroeder for jcf-dump patches.\n-\n-* Andreas Schwab for his work on the m68k port.\n-\n-* Lars Segerlund for work on GNU Fortran.\n-\n-* Dodji Seketeli for numerous C++ bug fixes and debug info improvements.\n-\n-* Tim Shen for major work on ``<regex>``.\n-\n-* Joel Sherrill for his direction via the steering committee, RTEMS\n-  contributions and RTEMS testing.\n-\n-* Nathan Sidwell for many C++ fixes/improvements.\n-\n-* Jeffrey Siegal for helping RMS with the original design of GCC, some\n-  code which handles the parse tree and RTL data structures, constant\n-  folding and help with the original VAX & m68k ports.\n-\n-* Kenny Simpson for prompting libstdc++ fixes due to defect reports from\n-  the LWG (thereby keeping GCC in line with updates from the ISO).\n-\n-* Franz Sirl for his ongoing work with making the PPC port stable\n-  for GNU/Linux.\n-\n-* Andrey Slepuhin for assorted AIX hacking.\n-\n-* Trevor Smigiel for contributing the SPU port.\n-\n-* Christopher Smith did the port for Convex machines.\n-\n-* Danny Smith for his major efforts on the Mingw (and Cygwin) ports.\n-  Retired from GCC maintainership August 2010, having mentored two\n-  new maintainers into the role.\n-\n-* Randy Smith finished the Sun FPA support.\n-\n-* Ed Smith-Rowland for his continuous work on libstdc++-v3, special functions,\n-  ``<random>``, and various improvements to C++11 features.\n-\n-* Scott Snyder for queue, iterator, istream, and string fixes and libstdc++\n-  testsuite entries.  Also for providing the patch to G77 to add\n-  rudimentary support for ``INTEGER*1``, ``INTEGER*2``, and\n-  ``LOGICAL*1``.\n-\n-* Zdenek Sojka for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Arseny Solokha for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Jayant Sonar for contributing the CR16 port.\n-\n-* Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.\n-\n-* Richard Stallman, for writing the original GCC and launching the GNU project.\n-\n-* Jan Stein of the Chalmers Computer Society provided support for\n-  Genix, as well as part of the 32000 machine description.\n-\n-* Gerhard Steinmetz for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Nigel Stephens for various mips16 related fixes/improvements.\n-\n-* Jonathan Stone wrote the machine description for the Pyramid computer.\n-\n-* Graham Stott for various infrastructure improvements.\n-\n-* John Stracke for his Java HTTP protocol fixes.\n-\n-* Mike Stump for his Elxsi port, G++ contributions over the years and more\n-  recently his vxworks contributions\n-\n-* Jeff Sturm for Java porting help, bug fixes, and encouragement.\n-\n-* Zhendong Su for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Chengnian Sun for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Shigeya Suzuki for this fixes for the bsdi platforms.\n-\n-* Ian Lance Taylor for the Go frontend, the initial mips16 and mips64\n-  support, general configury hacking, fixincludes, etc.\n-\n-* Holger Teutsch provided the support for the Clipper CPU.\n-\n-* Gary Thomas for his ongoing work to make the PPC work for GNU/Linux.\n-\n-* Paul Thomas for contributions to GNU Fortran.\n-\n-* Philipp Thomas for random bug fixes throughout the compiler\n-\n-* Jason Thorpe for thread support in libstdc++ on NetBSD.\n-\n-* Kresten Krab Thorup wrote the run time support for the Objective-C\n-  language and the fantastic Java bytecode interpreter.\n-\n-* Michael Tiemann for random bug fixes, the first instruction scheduler,\n-  initial C++ support, function integration, NS32k, SPARC and M88k\n-  machine description work, delay slot scheduling.\n-\n-* Andreas Tobler for his work porting libgcj to Darwin.\n-\n-* Teemu Torma for thread safe exception handling support.\n-\n-* Leonard Tower wrote parts of the parser, RTL generator, and RTL\n-  definitions, and of the VAX machine description.\n-\n-* Daniel Towner and Hariharan Sandanagobalane contributed and\n-  maintain the picoChip port.\n-\n-* Tom Tromey for internationalization support and for his many Java\n-  contributions and libgcj maintainership.\n-\n-* Lassi Tuura for improvements to config.guess to determine HP processor\n-  types.\n-\n-* Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.\n-\n-* Andy Vaught for the design and initial implementation of the GNU Fortran\n-  front end.\n-\n-* Brent Verner for work with the libstdc++ cshadow files and their\n-  associated configure steps.\n-\n-* Todd Vierling for contributions for NetBSD ports.\n-\n-* Andrew Waterman for contributing the RISC-V port, as well as maintaining it.\n-\n-* Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML\n-  guidance and maintaining libstdc++.\n-\n-* Dean Wakerley for converting the install documentation from HTML to texinfo\n-  in time for GCC 3.0.\n-\n-* Krister Walfridsson for random bug fixes.\n-\n-* Feng Wang for contributions to GNU Fortran.\n-\n-* Stephen M. Webb for time and effort on making libstdc++ shadow files\n-  work with the tricky Solaris 8+ headers, and for pushing the build-time\n-  header tree. Also, for starting and driving the ``<regex>`` effort.\n-\n-* John Wehle for various improvements for the x86 code generator,\n-  related infrastructure improvements to help x86 code generation,\n-  value range propagation and other work, WE32k port.\n-\n-* Ulrich Weigand for work on the s390 port.\n-\n-* Janus Weil for contributions to GNU Fortran.\n-\n-* Zack Weinberg for major work on cpplib and various other bug fixes.\n-\n-* Matt Welsh for help with Linux Threads support in GCJ.\n-\n-* Urban Widmark for help fixing java.io.\n-\n-* Mark Wielaard for new Java library code and his work integrating with\n-  Classpath.\n-\n-* Dale Wiles helped port GCC to the Tahoe.\n-\n-* Bob Wilson from Tensilica, Inc. for the Xtensa port.\n-\n-* Jim Wilson for his direction via the steering committee, tackling hard\n-  problems in various places that nobody else wanted to work on, strength\n-  reduction and other loop optimizations.\n-\n-* Paul Woegerer and Tal Agmon for the CRX port.\n-\n-* Carlo Wood for various fixes.\n-\n-* Tom Wood for work on the m88k port.\n-\n-* Chung-Ju Wu for his work on the Andes NDS32 port.\n-\n-* Canqun Yang for work on GNU Fortran.\n-\n-* Masanobu Yuhara of Fujitsu Laboratories implemented the machine\n-  description for the Tron architecture (specifically, the Gmicro).\n-\n-* Kevin Zachmann helped port GCC to the Tahoe.\n-\n-* Ayal Zaks for Swing Modulo Scheduling (SMS).\n-\n-* Qirun Zhang for running automated regression testing of GCC and reporting\n-  numerous bugs.\n-\n-* Xiaoqiang Zhang for work on GNU Fortran.\n-\n-* Gilles Zunino for help porting Java to Irix.\n-\n-The following people are recognized for their contributions to GNAT,\n-the Ada front end of GCC:\n-\n-* Bernard Banner\n-\n-* Romain Berrendonner\n-\n-* Geert Bosch\n-\n-* Emmanuel Briot\n-\n-* Joel Brobecker\n-\n-* Ben Brosgol\n-\n-* Vincent Celier\n-\n-* Arnaud Charlet\n-\n-* Chien Chieng\n-\n-* Cyrille Comar\n-\n-* Cyrille Crozes\n-\n-* Robert Dewar\n-\n-* Gary Dismukes\n-\n-* Robert Duff\n-\n-* Ed Falis\n-\n-* Ramon Fernandez\n-\n-* Sam Figueroa\n-\n-* Vasiliy Fofanov\n-\n-* Michael Friess\n-\n-* Franco Gasperoni\n-\n-* Ted Giering\n-\n-* Matthew Gingell\n-\n-* Laurent Guerby\n-\n-* Jerome Guitton\n-\n-* Olivier Hainque\n-\n-* Jerome Hugues\n-\n-* Hristian Kirtchev\n-\n-* Jerome Lambourg\n-\n-* Bruno Leclerc\n-\n-* Albert Lee\n-\n-* Sean McNeil\n-\n-* Javier Miranda\n-\n-* Laurent Nana\n-\n-* Pascal Obry\n-\n-* Dong-Ik Oh\n-\n-* Laurent Pautet\n-\n-* Brett Porter\n-\n-* Thomas Quinot\n-\n-* Nicolas Roche\n-\n-* Pat Rogers\n-\n-* Jose Ruiz\n-\n-* Douglas Rupp\n-\n-* Sergey Rybin\n-\n-* Gail Schenker\n-\n-* Ed Schonberg\n-\n-* Nicolas Setton\n-\n-* Samuel Tardieu\n-\n-The following people are recognized for their contributions of new\n-features, bug reports, testing and integration of classpath/libgcj for\n-GCC version 4.1:\n-\n-* Lillian Angel for ``JTree`` implementation and lots Free Swing\n-  additions and bug fixes.\n-\n-* Wolfgang Baer for ``GapContent`` bug fixes.\n-\n-* Anthony Balkissoon for ``JList``, Free Swing 1.5 updates and mouse event\n-  fixes, lots of Free Swing work including ``JTable`` editing.\n-\n-* Stuart Ballard for RMI constant fixes.\n-\n-* Goffredo Baroncelli for ``HTTPURLConnection`` fixes.\n-\n-* Gary Benson for ``MessageFormat`` fixes.\n-\n-* Daniel Bonniot for ``Serialization`` fixes.\n-\n-* Chris Burdess for lots of gnu.xml and http protocol fixes, ``StAX``\n-  and ``DOM xml:id`` support.\n-\n-* Ka-Hing Cheung for ``TreePath`` and ``TreeSelection`` fixes.\n-\n-* Archie Cobbs for build fixes, VM interface updates,\n-  ``URLClassLoader`` updates.\n-\n-* Kelley Cook for build fixes.\n-\n-* Martin Cordova for Suggestions for better ``SocketTimeoutException``.\n-\n-* David Daney for ``BitSet`` bug fixes, ``HttpURLConnection``\n-  rewrite and improvements.\n-\n-* Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo 2D\n-  support. Lots of imageio framework additions, lots of AWT and Free\n-  Swing bug fixes.\n-\n-* Jeroen Frijters for ``ClassLoader`` and nio cleanups, serialization fixes,\n-  better ``Proxy`` support, bug fixes and IKVM integration.\n-\n-* Santiago Gala for ``AccessControlContext`` fixes.\n-\n-* Nicolas Geoffray for ``VMClassLoader`` and ``AccessController``\n-  improvements.\n-\n-* David Gilbert for ``basic`` and ``metal`` icon and plaf support\n-  and lots of documenting, Lots of Free Swing and metal theme\n-  additions. ``MetalIconFactory`` implementation.\n-\n-* Anthony Green for ``MIDI`` framework, ``ALSA`` and ``DSSI``\n-  providers.\n-\n-* Andrew Haley for ``Serialization`` and ``URLClassLoader`` fixes,\n-  gcj build speedups.\n-\n-* Kim Ho for ``JFileChooser`` implementation.\n-\n-* Andrew John Hughes for ``Locale`` and net fixes, URI RFC2986\n-  updates, ``Serialization`` fixes, ``Properties`` XML support and\n-  generic branch work, VMIntegration guide update.\n-\n-* Bastiaan Huisman for ``TimeZone`` bug fixing.\n-\n-* Andreas Jaeger for mprec updates.\n-\n-* Paul Jenner for better :option:`-Werror` support.\n-\n-* Ito Kazumitsu for ``NetworkInterface`` implementation and updates.\n-\n-* Roman Kennke for ``BoxLayout``, ``GrayFilter`` and\n-  ``SplitPane``, plus bug fixes all over. Lots of Free Swing work\n-  including styled text.\n-\n-* Simon Kitching for ``String`` cleanups and optimization suggestions.\n-\n-* Michael Koch for configuration fixes, ``Locale`` updates, bug and\n-  build fixes.\n-\n-* Guilhem Lavaux for configuration, thread and channel fixes and Kaffe\n-  integration. JCL native ``Pointer`` updates. Logger bug fixes.\n-\n-* David Lichteblau for JCL support library global/local reference\n-  cleanups.\n-\n-* Aaron Luchko for JDWP updates and documentation fixes.\n-\n-* Ziga Mahkovec for ``Graphics2D`` upgraded to Cairo 0.5 and new regex\n-  features.\n-\n-* Sven de Marothy for BMP imageio support, CSS and ``TextLayout``\n-  fixes. ``GtkImage`` rewrite, 2D, awt, free swing and date/time fixes and\n-  implementing the Qt4 peers.\n-\n-* Casey Marshall for crypto algorithm fixes, ``FileChannel`` lock,\n-  ``SystemLogger`` and ``FileHandler`` rotate implementations, NIO\n-  ``FileChannel.map`` support, security and policy updates.\n-\n-* Bryce McKinlay for RMI work.\n-\n-* Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus\n-  testing and documenting.\n-\n-* Kalle Olavi Niemitalo for build fixes.\n-\n-* Rainer Orth for build fixes.\n-\n-* Andrew Overholt for ``File`` locking fixes.\n-\n-* Ingo Proetel for ``Image``, ``Logger`` and ``URLClassLoader``\n-  updates.\n-\n-* Olga Rodimina for ``MenuSelectionManager`` implementation.\n-\n-* Jan Roehrich for ``BasicTreeUI`` and ``JTree`` fixes.\n-\n-* Julian Scheid for documentation updates and gjdoc support.\n-\n-* Christian Schlichtherle for zip fixes and cleanups.\n-\n-* Robert Schuster for documentation updates and beans fixes,\n-  ``TreeNode`` enumerations and ``ActionCommand`` and various\n-  fixes, XML and URL, AWT and Free Swing bug fixes.\n-\n-* Keith Seitz for lots of JDWP work.\n-\n-* Christian Thalinger for 64-bit cleanups, Configuration and VM\n-  interface fixes and ``CACAO`` integration, ``fdlibm`` updates.\n-\n-* Gael Thomas for ``VMClassLoader`` boot packages support suggestions.\n-\n-* Andreas Tobler for Darwin and Solaris testing and fixing, ``Qt4``\n-  support for Darwin/OS X, ``Graphics2D`` support, ``gtk+``\n-  updates.\n-\n-* Dalibor Topic for better ``DEBUG`` support, build cleanups and\n-  Kaffe integration. ``Qt4`` build infrastructure, ``SHA1PRNG``\n-  and ``GdkPixbugDecoder`` updates.\n-\n-* Tom Tromey for Eclipse integration, generics work, lots of bug fixes\n-  and gcj integration including coordinating The Big Merge.\n-\n-* Mark Wielaard for bug fixes, packaging and release management,\n-  ``Clipboard`` implementation, system call interrupts and network\n-  timeouts and ``GdkPixpufDecoder`` fixes.\n-\n-In addition to the above, all of which also contributed time and energy in\n-testing GCC, we would like to thank the following for their contributions\n-to testing:\n-\n-* Michael Abd-El-Malek\n-\n-* Thomas Arend\n-\n-* Bonzo Armstrong\n-\n-* Steven Ashe\n-\n-* Chris Baldwin\n-\n-* David Billinghurst\n-\n-* Jim Blandy\n-\n-* Stephane Bortzmeyer\n-\n-* Horst von Brand\n-\n-* Frank Braun\n-\n-* Rodney Brown\n-\n-* Sidney Cadot\n-\n-* Bradford Castalia\n-\n-* Robert Clark\n-\n-* Jonathan Corbet\n-\n-* Ralph Doncaster\n-\n-* Richard Emberson\n-\n-* Levente Farkas\n-\n-* Graham Fawcett\n-\n-* Mark Fernyhough\n-\n-* Robert A. French\n-\n-* Jo\u0308rgen Freyh\n-\n-* Mark K. Gardner\n-\n-* Charles-Antoine Gauthier\n-\n-* Yung Shing Gene\n-\n-* David Gilbert\n-\n-* Simon Gornall\n-\n-* Fred Gray\n-\n-* John Griffin\n-\n-* Patrik Hagglund\n-\n-* Phil Hargett\n-\n-* Amancio Hasty\n-\n-* Takafumi Hayashi\n-\n-* Bryan W. Headley\n-\n-* Kevin B. Hendricks\n-\n-* Joep Jansen\n-\n-* Christian Joensson\n-\n-* Michel Kern\n-\n-* David Kidd\n-\n-* Tobias Kuipers\n-\n-* Anand Krishnaswamy\n-\n-* A.O.V. Le Blanc\n-\n-* llewelly\n-\n-* Damon Love\n-\n-* Brad Lucier\n-\n-* Matthias Klose\n-\n-* Martin Knoblauch\n-\n-* Rick Lutowski\n-\n-* Jesse Macnish\n-\n-* Stefan Morrell\n-\n-* Anon A. Mous\n-\n-* Matthias Mueller\n-\n-* Pekka Nikander\n-\n-* Rick Niles\n-\n-* Jon Olson\n-\n-* Magnus Persson\n-\n-* Chris Pollard\n-\n-* Richard Polton\n-\n-* Derk Reefman\n-\n-* David Rees\n-\n-* Paul Reilly\n-\n-* Tom Reilly\n-\n-* Torsten Rueger\n-\n-* Danny Sadinoff\n-\n-* Marc Schifer\n-\n-* Erik Schnetter\n-\n-* Wayne K. Schroll\n-\n-* David Schuler\n-\n-* Vin Shelton\n-\n-* Tim Souder\n-\n-* Adam Sulmicki\n-\n-* Bill Thorson\n-\n-* George Talbot\n-\n-* Pedro A. M. Vazquez\n-\n-* Gregory Warnes\n-\n-* Ian Watson\n-\n-* David E. Young\n-\n-* And many others\n-\n-And finally we'd like to thank everyone who uses the compiler, provides\n-feedback and generally reminds us why we're doing this work in the first\n-place.\n\\ No newline at end of file"}, {"sha": "643562efc63f70fdf4dea3fec833592c0db9edf9", "filename": "doc/contribute.rst", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcontribute.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcontribute.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcontribute.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,21 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _contributing:\n-\n-Contributing to GCC Development\n--------------------------------\n-\n-If you would like to help pretest GCC releases to assure they work well,\n-current development sources are available via Git (see\n-https://gcc.gnu.org/git.html).  Source and binary snapshots are\n-also available for FTP; see https://gcc.gnu.org/snapshots.html.\n-\n-If you would like to work on improvements to GCC, please read the\n-advice at these URLs: https://gcc.gnu.org/contribute.html, https://gcc.gnu.org/contributewhy.html.\n-\n-for information on how to make useful contributions and avoid\n-duplication of effort.  Suggested projects are listed at\n-https://gcc.gnu.org/projects/.\n\\ No newline at end of file"}, {"sha": "91568fe56121587276de579e9c4ad30306212f1a", "filename": "doc/cppdiropts.rst", "status": "removed", "additions": 0, "deletions": 217, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppdiropts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppdiropts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppdiropts.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,217 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. option:: -I {dir}, -iquote {dir}, -isystem {dir}, -idirafter {dir}\n-\n-  Add the directory :samp:`{dir}` to the list of directories to be searched\n-  for header files during preprocessing.\n-\n-  .. only:: cpp\n-\n-    See :ref:`search-path`.\n-\n-  If :samp:`{dir}` begins with :samp:`=` or ``$SYSROOT``, then the :samp:`=`\n-  or ``$SYSROOT`` is replaced by the sysroot prefix; see\n-  :option:`--sysroot` and :option:`-isysroot`.\n-\n-  Directories specified with :option:`-iquote` apply only to the quote\n-  form of the directive, ``#include \"file\"``.\n-  Directories specified with :option:`-I`, :option:`-isystem`,\n-  or :option:`-idirafter` apply to lookup for both the\n-  ``#include \"file\"`` and\n-  ``#include <file>`` directives.\n-\n-  You can specify any number or combination of these options on the\n-  command line to search for header files in several directories.\n-  The lookup order is as follows:\n-\n-  * For the quote form of the include directive, the directory of the current\n-    file is searched first.\n-\n-  * For the quote form of the include directive, the directories specified\n-    by :option:`-iquote` options are searched in left-to-right order,\n-    as they appear on the command line.\n-\n-  * Directories specified with :option:`-I` options are scanned in\n-    left-to-right order.\n-\n-  * Directories specified with :option:`-isystem` options are scanned in\n-    left-to-right order.\n-\n-  * Standard system directories are scanned.\n-\n-  * Directories specified with :option:`-idirafter` options are scanned in\n-    left-to-right order.\n-\n-  You can use :option:`-I` to override a system header\n-  file, substituting your own version, since these directories are\n-  searched before the standard system header file directories.\n-  However, you should\n-  not use this option to add directories that contain vendor-supplied\n-  system header files; use :option:`-isystem` for that.\n-\n-  The :option:`-isystem` and :option:`-idirafter` options also mark the directory\n-  as a system directory, so that it gets the same special treatment that\n-  is applied to the standard system directories.\n-\n-  .. only:: cpp\n-\n-    See :ref:`system-headers`.\n-\n-\n-  If a standard system include directory, or a directory specified with\n-  :option:`-isystem`, is also specified with :option:`-I`, the :option:`-I`\n-  option is ignored.  The directory is still searched but as a\n-  system directory at its normal position in the system include chain.\n-  This is to ensure that GCC's procedure to fix buggy system headers and\n-  the ordering for the ``#include_next`` directive are not inadvertently\n-  changed.\n-  If you really need to change the search order for system directories,\n-  use the :option:`-nostdinc` and/or :option:`-isystem` options.\n-\n-  .. only:: cpp\n-\n-    See :ref:`system-headers`.\n-\n-\n-.. option:: -I-\n-\n-  Split the include path.\n-  This option has been deprecated.  Please use :option:`-iquote` instead for\n-  :option:`-I` directories before the :option:`-I-` and remove the :option:`-I-`\n-  option.\n-\n-  Any directories specified with :option:`-I`\n-  options before :option:`-I-` are searched only for headers requested with\n-  ``#include \"file\"`` ; they are not searched for\n-  ``#include <file>``.  If additional directories are\n-  specified with :option:`-I` options after the :option:`-I-`, those\n-  directories are searched for all :samp:`#include` directives.\n-\n-  In addition, :option:`-I-` inhibits the use of the directory of the current\n-  file directory as the first search directory for ``#include\n-  \"file\"``.  There is no way to override this effect of :option:`-I-`.\n-\n-  .. only:: cpp\n-\n-    See :ref:`search-path`.\n-\n-\n-.. option:: -iprefix {prefix}\n-\n-  Specify :samp:`{prefix}` as the prefix for subsequent :option:`-iwithprefix`\n-  options.  If the prefix represents a directory, you should include the\n-  final :samp:`/`.\n-\n-.. option:: -iwithprefix {dir}, -iwithprefixbefore {dir}\n-\n-  Append :samp:`{dir}` to the prefix specified previously with\n-  :option:`-iprefix`, and add the resulting directory to the include search\n-  path.  :option:`-iwithprefixbefore` puts it in the same place :option:`-I`\n-  would; :option:`-iwithprefix` puts it where :option:`-idirafter` would.\n-\n-.. option:: -isysroot {dir}\n-\n-  This option is like the :option:`--sysroot` option, but applies only to\n-  header files (except for Darwin targets, where it applies to both header\n-  files and libraries).  See the :option:`--sysroot` option for more\n-  information.\n-\n-.. option:: -imultilib {dir}\n-\n-  Use :samp:`{dir}` as a subdirectory of the directory containing\n-  target-specific C++ headers.\n-\n-.. option:: -nostdinc\n-\n-  Do not search the standard system directories for header files.\n-  Only the directories explicitly specified with :option:`-I`,\n-  :option:`-iquote`, :option:`-isystem`, and/or :option:`-idirafter`\n-  options (and the directory of the current file, if appropriate)\n-  are searched.\n-\n-.. option:: -nostdinc++\n-\n-  Do not search for header files in the C++-specific standard directories,\n-  but do still search the other standard directories.  (This option is\n-  used when building the C++ library.)\n-\n-.. option:: -Wcomment, -Wcomments\n-\n-  Warn whenever a comment-start sequence :samp:`/*` appears in a :samp:`/*`\n-  comment, or whenever a backslash-newline appears in a :samp:`//` comment.\n-  This warning is enabled by :option:`-Wall`.\n-\n-.. option:: -Wtrigraphs\n-\n-.. _wtrigraphs:\n-\n-  Warn if any trigraphs are encountered that might change the meaning of\n-  the program.  Trigraphs within comments are not warned about,\n-  except those that would form escaped newlines.\n-\n-  This option is implied by :option:`-Wall`.  If :option:`-Wall` is not\n-  given, this option is still enabled unless trigraphs are enabled.  To\n-  get trigraph conversion without warnings, but get the other\n-  :option:`-Wall` warnings, use :samp:`-trigraphs -Wall -Wno-trigraphs`.\n-\n-.. option:: -Wundef\n-\n-  Warn if an undefined identifier is evaluated in an ``#if`` directive.\n-  Such identifiers are replaced with zero.\n-\n-.. option:: -Wno-undef\n-\n-  Default setting; overrides :option:`-Wundef`.\n-\n-.. option:: -Wexpansion-to-defined\n-\n-  Warn whenever :samp:`defined` is encountered in the expansion of a macro\n-  (including the case where the macro is expanded by an :samp:`#if` directive).\n-  Such usage is not portable.\n-  This warning is also enabled by :option:`-Wpedantic` and :option:`-Wextra`.\n-\n-.. option:: -Wunused-macros\n-\n-  Warn about macros defined in the main file that are unused.  A macro\n-  is :dfn:`used` if it is expanded or tested for existence at least once.\n-  The preprocessor also warns if the macro has not been used at the\n-  time it is redefined or undefined.\n-\n-  Built-in macros, macros defined on the command line, and macros\n-  defined in include files are not warned about.\n-\n-  .. note::\n-\n-    If a macro is actually used, but only used in skipped\n-    conditional blocks, then the preprocessor reports it as unused.  To avoid the\n-    warning in such a case, you might improve the scope of the macro's\n-    definition by, for example, moving it into the first skipped block.\n-    Alternatively, you could provide a dummy use with something like:\n-\n-  .. code-block:: c++\n-\n-    #if defined the_macro_causing_the_warning\n-    #endif\n-\n-.. option:: -Wno-endif-labels\n-\n-  Do not warn whenever an ``#else`` or an ``#endif`` are followed by text.\n-  This sometimes happens in older programs with code of the form\n-\n-  .. code-block:: c++\n-\n-    #if FOO\n-    ...\n-    #else FOO\n-    ...\n-    #endif FOO\n-\n-  The second and third ``FOO`` should be in comments.\n-  This warning is on by default.\n-\n-.. option:: -Wendif-labels\n-\n-  Default setting; overrides :option:`-Wno-endif-labels`.\n\\ No newline at end of file"}, {"sha": "f27338cfa2fef6dfc2b508f362769f6d7cf0257b", "filename": "doc/cppenv.rst", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppenv.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppenv.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppenv.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,97 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. envvar:: CPATH, C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH\n-\n-  .. Commented out until ObjC++ is part of GCC:\n-     @itemx OBJCPLUS_INCLUDE_PATH\n-\n-  Each variable's value is a list of directories separated by a special\n-  character, much like :envvar:`PATH`, in which to look for header files.\n-  The special character, ``PATH_SEPARATOR``, is target-dependent and\n-  determined at GCC build time.  For Microsoft Windows-based targets it is a\n-  semicolon, and for almost all other targets it is a colon.\n-\n-  :envvar:`CPATH` specifies a list of directories to be searched as if\n-  specified with :option:`-I`, but after any paths given with :option:`-I`\n-  options on the command line.  This environment variable is used\n-  regardless of which language is being preprocessed.\n-\n-  The remaining environment variables apply only when preprocessing the\n-  particular language indicated.  Each specifies a list of directories\n-  to be searched as if specified with :option:`-isystem`, but after any\n-  paths given with :option:`-isystem` options on the command line.\n-\n-  In all these variables, an empty element instructs the compiler to\n-  search its current working directory.  Empty elements can appear at the\n-  beginning or end of a path.  For instance, if the value of\n-  :envvar:`CPATH` is ``:/special/include``, that has the same\n-  effect as :samp:`-I. -I/special/include`.\n-\n-  .. only:: cpp\n-\n-    See also :ref:`search-path`.\n-\n-.. index:: dependencies for make as output\n-\n-.. envvar:: DEPENDENCIES_OUTPUT\n-\n-  If this variable is set, its value specifies how to output\n-  dependencies for Make based on the non-system header files processed\n-  by the compiler.  System header files are ignored in the dependency\n-  output.\n-\n-  The value of :envvar:`DEPENDENCIES_OUTPUT` can be just a file name, in\n-  which case the Make rules are written to that file, guessing the target\n-  name from the source file name.  Or the value can have the form\n-  :samp:`{file}{target}`, in which case the rules are written to\n-  file :samp:`{file}` using :samp:`{target}` as the target name.\n-\n-  In other words, this environment variable is equivalent to combining\n-  the options :option:`-MM` and :option:`-MF`\n-\n-  .. only:: cpp\n-\n-    (see :ref:`invocation`),\n-\n-  .. only:: not cpp\n-\n-    (see :ref:`preprocessor-options`),\n-\n-  with an optional :option:`-MT` switch too.\n-\n-.. index:: dependencies for make as output\n-\n-.. envvar:: SUNPRO_DEPENDENCIES\n-\n-  This variable is the same as :envvar:`DEPENDENCIES_OUTPUT` (see above),\n-  except that system header files are not ignored, so it implies\n-  :option:`-M` rather than :option:`-MM`.  However, the dependence on the\n-  main input file is omitted.\n-\n-  .. only:: cpp\n-\n-    See :ref:`invocation`.\n-\n-  .. only:: not cpp\n-\n-    See :ref:`preprocessor-options`.\n-\n-.. envvar:: SOURCE_DATE_EPOCH\n-\n-  If this variable is set, its value specifies a UNIX timestamp to be\n-  used in replacement of the current date and time in the ``__DATE__``\n-  and ``__TIME__`` macros, so that the embedded timestamps become\n-  reproducible.\n-\n-  The value of :envvar:`SOURCE_DATE_EPOCH` must be a UNIX timestamp,\n-  defined as the number of seconds (excluding leap seconds) since\n-  01 Jan 1970 00:00:00 represented in ASCII; identical to the output of\n-  ``date +%s`` on GNU/Linux and other systems that support the\n-  ``%s`` extension in the ``date`` command.\n-\n-  The value should be a known timestamp such as the last modification\n-  time of the source or package and it should be set by the build\n-  process.\n\\ No newline at end of file"}, {"sha": "60d663e35d84740ac4badaf56a9250d0fe965382", "filename": "doc/cppopts.rst", "status": "removed", "additions": 0, "deletions": 556, "changes": 556, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppopts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppopts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppopts.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,556 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. option:: -D {name}\n-\n-  Predefine :samp:`{name}` as a macro, with definition ``1``.\n-\n-.. option:: -D name=definition\n-\n-  The contents of :samp:`{definition}` are tokenized and processed as if\n-  they appeared during translation phase three in a :samp:`#define`\n-  directive.  In particular, the definition is truncated by\n-  embedded newline characters.\n-\n-  If you are invoking the preprocessor from a shell or shell-like\n-  program you may need to use the shell's quoting syntax to protect\n-  characters such as spaces that have a meaning in the shell syntax.\n-\n-  If you wish to define a function-like macro on the command line, write\n-  its argument list with surrounding parentheses before the equals sign\n-  (if any).  Parentheses are meaningful to most shells, so you should\n-  quote the option.  With :command:`sh` and :command:`csh`,\n-  :option:`-D'name(args...)=definition'` works.\n-\n-  :option:`-D` and :option:`-U` options are processed in the order they\n-  are given on the command line.  All :option:`-imacros file` and\n-  :option:`-include file` options are processed after all\n-  :option:`-D` and :option:`-U` options.\n-\n-.. option:: -U {name}\n-\n-  Cancel any previous definition of :samp:`{name}`, either built in or\n-  provided with a :option:`-D` option.\n-\n-.. option:: -include {file}\n-\n-  Process :samp:`{file}` as if ``#include \"file\"`` appeared as the first\n-  line of the primary source file.  However, the first directory searched\n-  for :samp:`{file}` is the preprocessor's working directory *instead of*\n-  the directory containing the main source file.  If not found there, it\n-  is searched for in the remainder of the ``#include \"...\"`` search\n-  chain as normal.\n-\n-  If multiple :option:`-include` options are given, the files are included\n-  in the order they appear on the command line.\n-\n-.. option:: -imacros {file}\n-\n-  Exactly like :option:`-include`, except that any output produced by\n-  scanning :samp:`{file}` is thrown away.  Macros it defines remain defined.\n-  This allows you to acquire all the macros from a header without also\n-  processing its declarations.\n-\n-  All files specified by :option:`-imacros` are processed before all files\n-  specified by :option:`-include`.\n-\n-.. option:: -undef\n-\n-  Do not predefine any system-specific or GCC-specific macros.  The\n-  standard predefined macros remain defined.\n-\n-  .. only:: cpp\n-\n-    See :ref:`standard-predefined-macros`.\n-\n-.. option:: -pthread\n-\n-  Define additional macros required for using the POSIX threads library.\n-  You should use this option consistently for both compilation and linking.\n-  This option is supported on GNU/Linux targets, most other Unix derivatives,\n-  and also on x86 Cygwin and MinGW targets.\n-\n-.. index:: make, dependencies, make\n-\n-.. option:: -M\n-\n-  Instead of outputting the result of preprocessing, output a rule\n-  suitable for :command:`make` describing the dependencies of the main\n-  source file.  The preprocessor outputs one :command:`make` rule containing\n-  the object file name for that source file, a colon, and the names of all\n-  the included files, including those coming from :option:`-include` or\n-  :option:`-imacros` command-line options.\n-\n-  Unless specified explicitly (with :option:`-MT` or :option:`-MQ`), the\n-  object file name consists of the name of the source file with any\n-  suffix replaced with object file suffix and with any leading directory\n-  parts removed.  If there are many included files then the rule is\n-  split into several lines using :samp:`\\\\` -newline.  The rule has no\n-  commands.\n-\n-  This option does not suppress the preprocessor's debug output, such as\n-  :option:`-dM`.  To avoid mixing such debug output with the dependency\n-  rules you should explicitly specify the dependency output file with\n-  :option:`-MF`, or use an environment variable like\n-  :envvar:`DEPENDENCIES_OUTPUT` (see :ref:`environment-variables`).  Debug output\n-  is still sent to the regular output stream as normal.\n-\n-  Passing :option:`-M` to the driver implies :option:`-E`, and suppresses\n-  warnings with an implicit :option:`-w`.\n-\n-.. option:: -MM\n-\n-  Like :option:`-M` but do not mention header files that are found in\n-  system header directories, nor header files that are included,\n-  directly or indirectly, from such a header.\n-\n-  This implies that the choice of angle brackets or double quotes in an\n-  :samp:`#include` directive does not in itself determine whether that\n-  header appears in :option:`-MM` dependency output.\n-\n-.. option:: -MF {file}\n-\n-  When used with :option:`-M` or :option:`-MM`, specifies a\n-  file to write the dependencies to.  If no :option:`-MF` switch is given\n-  the preprocessor sends the rules to the same place it would send\n-  preprocessed output.\n-\n-  When used with the driver options :option:`-MD` or :option:`-MMD`,\n-  :option:`-MF` overrides the default dependency output file.\n-\n-  If :samp:`{file}` is :samp:`-`, then the dependencies are written to :samp:`stdout`.\n-\n-.. option:: -MG\n-\n-  In conjunction with an option such as :option:`-M` requesting\n-  dependency generation, :option:`-MG` assumes missing header files are\n-  generated files and adds them to the dependency list without raising\n-  an error.  The dependency filename is taken directly from the\n-  ``#include`` directive without prepending any path.  :option:`-MG`\n-  also suppresses preprocessed output, as a missing header file renders\n-  this useless.\n-\n-  This feature is used in automatic updating of makefiles.\n-\n-.. option:: -Mno-modules\n-\n-  Disable dependency generation for compiled module interfaces.\n-\n-.. option:: -MP\n-\n-  This option instructs CPP to add a phony target for each dependency\n-  other than the main file, causing each to depend on nothing.  These\n-  dummy rules work around errors :command:`make` gives if you remove header\n-  files without updating the :samp:`Makefile` to match.\n-\n-  This is typical output:\n-\n-  .. code-block:: c++\n-\n-    test.o: test.c test.h\n-\n-    test.h:\n-\n-.. option:: -MT {target}\n-\n-  Change the target of the rule emitted by dependency generation.  By\n-  default CPP takes the name of the main input file, deletes any\n-  directory components and any file suffix such as :samp:`.c`, and\n-  appends the platform's usual object suffix.  The result is the target.\n-\n-  An :option:`-MT` option sets the target to be exactly the string you\n-  specify.  If you want multiple targets, you can specify them as a single\n-  argument to :option:`-MT`, or use multiple :option:`-MT` options.\n-\n-  For example, ``-MT '$(objpfx)foo.o'`` might give\n-\n-  .. code-block:: c++\n-\n-    $(objpfx)foo.o: foo.c\n-\n-.. option:: -MQ {target}\n-\n-  Same as :option:`-MT`, but it quotes any characters which are special to\n-  Make. ``-MQ '$(objpfx)foo.o'`` gives\n-\n-  .. code-block:: c++\n-\n-    $$(objpfx)foo.o: foo.c\n-\n-  The default target is automatically quoted, as if it were given with\n-  :option:`-MQ`.\n-\n-.. option:: -MD\n-\n-  :option:`-MD` is equivalent to :option:`-M -MF file`, except that\n-  :option:`-E` is not implied.  The driver determines :samp:`{file}` based on\n-  whether an :option:`-o` option is given.  If it is, the driver uses its\n-  argument but with a suffix of :samp:`.d`, otherwise it takes the name\n-  of the input file, removes any directory components and suffix, and\n-  applies a :samp:`.d` suffix.\n-\n-  If :option:`-MD` is used in conjunction with :option:`-E`, any\n-  :option:`-o` switch is understood to specify the dependency output file\n-  (see :option:`-MF`), but if used without :option:`-E`, each :option:`-o`\n-  is understood to specify a target object file.\n-\n-  Since :option:`-E` is not implied, :option:`-MD` can be used to generate\n-  a dependency output file as a side effect of the compilation process.\n-\n-.. option:: -MMD\n-\n-  Like :option:`-MD` except mention only user header files, not system\n-  header files.\n-\n-.. option:: -fpreprocessed\n-\n-  Indicate to the preprocessor that the input file has already been\n-  preprocessed.  This suppresses things like macro expansion, trigraph\n-  conversion, escaped newline splicing, and processing of most directives.\n-  The preprocessor still recognizes and removes comments, so that you can\n-  pass a file preprocessed with :option:`-C` to the compiler without\n-  problems.  In this mode the integrated preprocessor is little more than\n-  a tokenizer for the front ends.\n-\n-  :option:`-fpreprocessed` is implicit if the input file has one of the\n-  extensions :samp:`.i`, :samp:`.ii` or :samp:`.mi`.  These are the\n-  extensions that GCC uses for preprocessed files created by\n-  :option:`-save-temps`.\n-\n-.. option:: -fdirectives-only\n-\n-  When preprocessing, handle directives, but do not expand macros.\n-\n-  The option's behavior depends on the :option:`-E` and :option:`-fpreprocessed`\n-  options.\n-\n-  With :option:`-E`, preprocessing is limited to the handling of directives\n-  such as ``#define``, ``#ifdef``, and ``#error``.  Other\n-  preprocessor operations, such as macro expansion and trigraph\n-  conversion are not performed.  In addition, the :option:`-dD` option is\n-  implicitly enabled.\n-\n-  With :option:`-fpreprocessed`, predefinition of command line and most\n-  builtin macros is disabled.  Macros such as ``__LINE__``, which are\n-  contextually dependent, are handled normally.  This enables compilation of\n-  files previously preprocessed with ``-E -fdirectives-only``.\n-\n-  With both :option:`-E` and :option:`-fpreprocessed`, the rules for\n-  :option:`-fpreprocessed` take precedence.  This enables full preprocessing of\n-  files previously preprocessed with ``-E -fdirectives-only``.\n-\n-.. option:: -fdollars-in-identifiers\n-\n-  Accept :samp:`$` in identifiers.\n-\n-  .. only:: cpp\n-\n-    See :ref:`identifier-characters`.\n-\n-.. option:: -fextended-identifiers\n-\n-  Accept universal character names and extended characters in\n-  identifiers.  This option is enabled by default for C99 (and later C\n-  standard versions) and C++.\n-\n-.. option:: -fno-canonical-system-headers\n-\n-  When preprocessing, do not shorten system header paths with canonicalization.\n-\n-.. option:: -fmax-include-depth={depth}\n-\n-  Set the maximum depth of the nested #include. The default is 200.\n-\n-.. option:: -ftabstop={width}\n-\n-  Set the distance between tab stops.  This helps the preprocessor report\n-  correct column numbers in warnings or errors, even if tabs appear on the\n-  line.  If the value is less than 1 or greater than 100, the option is\n-  ignored.  The default is 8.\n-\n-.. option:: -ftrack-macro-expansion[={level}]\n-\n-  Track locations of tokens across macro expansions. This allows the\n-  compiler to emit diagnostic about the current macro expansion stack\n-  when a compilation error occurs in a macro expansion. Using this\n-  option makes the preprocessor and the compiler consume more\n-  memory. The :samp:`{level}` parameter can be used to choose the level of\n-  precision of token location tracking thus decreasing the memory\n-  consumption if necessary. Value :samp:`0` of :samp:`{level}` de-activates\n-  this option. Value :samp:`1` tracks tokens locations in a\n-  degraded mode for the sake of minimal memory overhead. In this mode\n-  all tokens resulting from the expansion of an argument of a\n-  function-like macro have the same location. Value :samp:`2` tracks\n-  tokens locations completely. This value is the most memory hungry.\n-  When this option is given no argument, the default parameter value is\n-  :samp:`2`.\n-\n-  Note that ``-ftrack-macro-expansion=2`` is activated by default.\n-\n-.. option:: -fmacro-prefix-map={old}={new}\n-\n-  When preprocessing files residing in directory :samp:`{old}`,\n-  expand the ``__FILE__`` and ``__BASE_FILE__`` macros as if the\n-  files resided in directory :samp:`{new}` instead.  This can be used\n-  to change an absolute path to a relative path by using :samp:`.` for\n-  :samp:`{new}` which can result in more reproducible builds that are\n-  location independent.  This option also affects\n-  ``__builtin_FILE()`` during compilation.  See also\n-  :option:`-ffile-prefix-map`.\n-\n-.. index:: character set, execution\n-\n-.. option:: -fexec-charset={charset}\n-\n-  Set the execution character set, used for string and character\n-  constants.  The default is UTF-8.  :samp:`{charset}` can be any encoding\n-  supported by the system's ``iconv`` library routine.\n-\n-.. index:: character set, wide execution\n-\n-.. option:: -fwide-exec-charset={charset}\n-\n-  Set the wide execution character set, used for wide string and\n-  character constants.  The default is one of UTF-32BE, UTF-32LE, UTF-16BE,\n-  or UTF-16LE, whichever corresponds to the width of ``wchar_t`` and the\n-  big-endian or little-endian byte order being used for code generation.  As\n-  with :option:`-fexec-charset`, :samp:`{charset}` can be any encoding supported\n-  by the system's ``iconv`` library routine; however, you will have\n-  problems with encodings that do not fit exactly in ``wchar_t``.\n-\n-.. index:: character set, input\n-\n-.. option:: -finput-charset={charset}\n-\n-  Set the input character set, used for translation from the character\n-  set of the input file to the source character set used by GCC.  If the\n-  locale does not specify, or GCC cannot get this information from the\n-  locale, the default is UTF-8.  This can be overridden by either the locale\n-  or this command-line option.  Currently the command-line option takes\n-  precedence if there's a conflict.  :samp:`{charset}` can be any encoding\n-  supported by the system's ``iconv`` library routine.\n-\n-.. only:: not cpp\n-\n-  .. option:: -fpch-deps\n-\n-    When using precompiled headers (see :ref:`precompiled-headers`), this flag\n-    causes the dependency-output flags to also list the files from the\n-    precompiled header's dependencies.  If not specified, only the\n-    precompiled header are listed and not the files that were used to\n-    create it, because those files are not consulted when a precompiled\n-    header is used.\n-\n-  .. option:: -fpch-preprocess\n-\n-    This option allows use of a precompiled header (see :ref:`precompiled-headers`) together with :option:`-E`.  It inserts a special ``#pragma``,\n-    ``#pragma GCC pch_preprocess \"filename\"`` in the output to mark\n-    the place where the precompiled header was found, and its :samp:`{filename}`.\n-    When :option:`-fpreprocessed` is in use, GCC recognizes this ``#pragma``\n-    and loads the PCH.\n-\n-    This option is off by default, because the resulting preprocessed output\n-    is only really suitable as input to GCC.  It is switched on by\n-    :option:`-save-temps`.\n-\n-    You should not write this ``#pragma`` in your own code, but it is\n-    safe to edit the filename if the PCH file is available in a different\n-    location.  The filename may be absolute or it may be relative to GCC's\n-    current directory.\n-\n-.. option:: -fworking-directory\n-\n-  Enable generation of linemarkers in the preprocessor output that\n-  let the compiler know the current working directory at the time of\n-  preprocessing.  When this option is enabled, the preprocessor\n-  emits, after the initial linemarker, a second linemarker with the\n-  current working directory followed by two slashes.  GCC uses this\n-  directory, when it's present in the preprocessed input, as the\n-  directory emitted as the current working directory in some debugging\n-  information formats.  This option is implicitly enabled if debugging\n-  information is enabled, but this can be inhibited with the negated\n-  form :option:`-fno-working-directory`.  If the :option:`-P` flag is\n-  present in the command line, this option has no effect, since no\n-  ``#line`` directives are emitted whatsoever.\n-\n-.. option:: -fno-working-directory\n-\n-  Default setting; overrides :option:`-fworking-directory`.\n-\n-.. option:: -A {predicate}={answer}\n-\n-  Make an assertion with the predicate :samp:`{predicate}` and answer\n-  :samp:`{answer}`.  This form is preferred to the older form :option:`-A\n-  predicate(answer)`, which is still supported, because\n-  it does not use shell special characters.\n-\n-  .. only:: cpp\n-\n-    See :ref:`obsolete-features`.\n-\n-.. option:: -A -predicate=answer\n-\n-  Cancel an assertion with the predicate :samp:`{predicate}` and answer\n-  :samp:`{answer}`.\n-\n-.. option:: -C\n-\n-  Do not discard comments.  All comments are passed through to the output\n-  file, except for comments in processed directives, which are deleted\n-  along with the directive.\n-\n-  You should be prepared for side effects when using :option:`-C` ; it\n-  causes the preprocessor to treat comments as tokens in their own right.\n-  For example, comments appearing at the start of what would be a\n-  directive line have the effect of turning that line into an ordinary\n-  source line, since the first token on the line is no longer a :samp:`#`.\n-\n-.. option:: -CC\n-\n-  Do not discard comments, including during macro expansion.  This is\n-  like :option:`-C`, except that comments contained within macros are\n-  also passed through to the output file where the macro is expanded.\n-\n-  In addition to the side effects of the :option:`-C` option, the\n-  :option:`-CC` option causes all C++-style comments inside a macro\n-  to be converted to C-style comments.  This is to prevent later use\n-  of that macro from inadvertently commenting out the remainder of\n-  the source line.\n-\n-  The :option:`-CC` option is generally used to support lint comments.\n-\n-.. option:: -P\n-\n-  Inhibit generation of linemarkers in the output from the preprocessor.\n-  This might be useful when running the preprocessor on something that is\n-  not C code, and will be sent to a program which might be confused by the\n-  linemarkers.\n-\n-  .. only:: cpp\n-\n-    See :ref:`preprocessor-output`.\n-\n-  .. index:: traditional C language, C language, traditional\n-\n-.. option:: -traditional, -traditional-cpp\n-\n-  Try to imitate the behavior of pre-standard C preprocessors, as\n-  opposed to ISO C preprocessors.\n-\n-  .. only:: cpp\n-\n-    See :ref:`traditional-mode`.\n-\n-  .. only:: not cpp\n-\n-    See the GNU CPP manual for details.\n-\n-  Note that GCC does not otherwise attempt to emulate a pre-standard\n-  C compiler, and these options are only supported with the :option:`-E`\n-  switch, or when invoking CPP explicitly.\n-\n-.. option:: -trigraphs\n-\n-  Support ISO C trigraphs.\n-  These are three-character sequences, all starting with :samp:`??`, that\n-  are defined by ISO C to stand for single characters.  For example,\n-  :samp:`??/` stands for :samp:`\\\\`, so :samp:`??/n` is a character\n-  constant for a newline.\n-\n-  .. only:: cpp\n-\n-    See :ref:`initial-processing`.\n-\n-  .. only:: not cpp\n-\n-    The nine trigraphs and their replacements are\n-\n-    .. code-block::\n-\n-      Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n-      Replacement:      [    ]    {    }    #    \\    ^    |    ~\n-\n-  By default, GCC ignores trigraphs, but in\n-  standard-conforming modes it converts them.  See the :option:`-std` and\n-  :option:`-ansi` options.\n-\n-.. option:: -remap\n-\n-  Enable special code to work around file systems which only permit very\n-  short file names, such as MS-DOS.\n-\n-.. option:: -H\n-\n-  Print the name of each header file used, in addition to other normal\n-  activities.  Each name is indented to show how deep in the\n-  :samp:`#include` stack it is.  Precompiled header files are also\n-  printed, even if they are found to be invalid; an invalid precompiled\n-  header file is printed with :samp:`...x` and a valid one with :samp:`...!` .\n-\n-.. option:: -dletters\n-\n-  Says to make debugging dumps during compilation as specified by\n-  :samp:`{letters}`.  The flags documented here are those relevant to the\n-  preprocessor.  Other :samp:`{letters}` are interpreted\n-  by the compiler proper, or reserved for future versions of GCC, and so\n-  are silently ignored.  If you specify :samp:`{letters}` whose behavior\n-  conflicts, the result is undefined.\n-\n-  .. only:: not cpp\n-\n-    See :ref:`developer-options`, for more information.\n-\n-  .. option:: -dM\n-\n-    Instead of the normal output, generate a list of :samp:`#define`\n-    directives for all the macros defined during the execution of the\n-    preprocessor, including predefined macros.  This gives you a way of\n-    finding out what is predefined in your version of the preprocessor.\n-    Assuming you have no file :samp:`foo.h`, the command\n-\n-    .. code-block:: c++\n-\n-      touch foo.h; cpp -dM foo.h\n-\n-    shows all the predefined macros.\n-\n-    .. only:: cpp\n-\n-      If you use :option:`-dM` without the :option:`-E` option, :option:`-dM` is\n-      interpreted as a synonym for :option:`-fdump-rtl-mach`.\n-      See :ref:`developer-options`.\n-\n-  .. option:: -dD\n-\n-    Like :option:`-dM` except in two respects: it does *not* include the\n-    predefined macros, and it outputs *both* the :samp:`#define`\n-    directives and the result of preprocessing.  Both kinds of output go to\n-    the standard output file.\n-\n-  .. option:: -dN\n-\n-    Like :option:`-dD`, but emit only the macro names, not their expansions.\n-\n-  .. option:: -dI\n-\n-    Output :samp:`#include` directives in addition to the result of\n-    preprocessing.\n-\n-  .. option:: -dU\n-\n-    Like :option:`-dD` except that only macros that are expanded, or whose\n-    definedness is tested in preprocessor directives, are output; the\n-    output is delayed until the use or test of the macro; and\n-    :samp:`#undef` directives are also output for macros tested but\n-    undefined at the time.\n-\n-.. option:: -fdebug-cpp\n-\n-  This option is only useful for debugging GCC.  When used from CPP or with\n-  :option:`-E`, it dumps debugging information about location maps.  Every\n-  token in the output is preceded by the dump of the map its location\n-  belongs to.\n-\n-  When used from GCC without :option:`-E`, this option has no effect.\n\\ No newline at end of file"}, {"sha": "8e9e9e7276f3716150fe69e4dec1b36bcb422a2b", "filename": "doc/cppwarnopts.rst", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppwarnopts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fcppwarnopts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fcppwarnopts.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,4 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n\\ No newline at end of file"}, {"sha": "42e8969edc8c3345e10706d5e1c4f57ed92469e1", "filename": "doc/favicon.ico", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Ffavicon.ico", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Ffavicon.ico", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Ffavicon.ico?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "ee4daca6fd7f2c7ff972aba9254651b969005835", "filename": "doc/funding.rst", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Ffunding.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Ffunding.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Ffunding.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,47 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Funding Free Software\n-=====================\n-\n-If you want to have more free software a few years from now, it makes\n-sense for you to help encourage people to contribute funds for its\n-development.  The most effective approach known is to encourage\n-commercial redistributors to donate.\n-\n-Users of free software systems can boost the pace of development by\n-encouraging for-a-fee distributors to donate part of their selling price\n-to free software developers-the Free Software Foundation, and others.\n-\n-The way to convince distributors to do this is to demand it and expect\n-it from them.  So when you compare distributors, judge them partly by\n-how much they give to free software development.  Show distributors\n-they must compete to be the one who gives the most.\n-\n-To make this approach work, you must insist on numbers that you can\n-compare, such as, 'We will donate ten dollars to the Frobnitz project\n-for each disk sold.'  Don't be satisfied with a vague promise, such as\n-'A portion of the profits are donated,' since it doesn't give a basis\n-for comparison.\n-\n-Even a precise fraction 'of the profits from this disk' is not very\n-meaningful, since creative accounting and unrelated business decisions\n-can greatly alter what fraction of the sales price counts as profit.\n-If the price you pay is $50, ten percent of the profit is probably\n-less than a dollar; it might be a few cents, or nothing at all.\n-\n-Some redistributors do development work themselves.  This is useful too;\n-but to keep everyone honest, you need to inquire how much they do, and\n-what kind.  Some kinds of development make much more long-term\n-difference than others.  For example, maintaining a separate version of\n-a program contributes very little; maintaining the standard version of a\n-program for the whole community contributes much.  Easy new ports\n-contribute little, since someone else would surely do them; difficult\n-ports such as adding a new CPU to the GNU Compiler Collection contribute more;\n-major new features or packages contribute the most.\n-\n-By establishing the idea that supporting further development is 'the\n-proper thing to do' when distributing free software for a fee, we can\n-assure a steady flow of resources into making more free software.\n\\ No newline at end of file"}, {"sha": "2ef15aef9443b3ee0b5af3864caa4388d6c6995b", "filename": "doc/gcc_sphinx.py", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fgcc_sphinx.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fgcc_sphinx.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgcc_sphinx.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,44 +0,0 @@\n-# GCC Sphinx customization\n-\n-__version__ = '1.0'\n-\n-\n-def setup(app):\n-    app.add_object_type('gcc-attr', 'gcc-attr', objname='GCC attribute',\n-                        indextemplate='pair: %s; attribute')\n-    app.add_object_type('fn-attr', 'fn-attr', objname='function attribute',\n-                        indextemplate='pair: %s; function attribute')\n-    app.add_object_type('var-attr', 'var-attr', objname='variable attribute',\n-                        indextemplate='pair: %s; variable attribute')\n-    app.add_object_type('type-attr', 'type-attr', objname='type attribute',\n-                        indextemplate='pair: %s; variable attribute')\n-    app.add_object_type('enum-attr', 'enum-attr', objname='Enumerator attribute',\n-                        indextemplate='pair: %s; enumerator attribute')\n-    app.add_object_type('label-attr', 'label-attr', objname='Label attribute',\n-                        indextemplate='pair: %s; label attribute')\n-    app.add_object_type('gcc-param', 'gcc-param', objname='GCC parameter',\n-                        indextemplate='pair: %s; parameter')\n-\n-    targets = (('AArch64 ', 'aarch64'), ('AMD GCN ', 'amd-gcn'), ('ARC ', 'arc'), ('ARM ', 'arm'), ('AVR ', 'avr'),\n-               ('Blackfin ', 'blackfin'), ('BPF ', 'bpf'), ('C-SKY ', 'c-sky'),\n-               ('Epiphany ', 'epiphany'), ('H8/300 ', 'h8-300'), ('IA-64 ', 'ia-64'), ('LoongArch', 'loongarch'), ('M32C ', 'm32c'),\n-               ('M32R/D ', 'm32r-d'), ('m68k ', 'm68k'), ('MCORE ', 'mcore'), ('MeP ', 'mep'),\n-               ('MicroBlaze ', 'microblaze'), ('Microsoft Windows ', 'microsoft-windows'), ('MIPS ', 'mips'),\n-               ('MSP430 ', 'msp430'), ('NDS32 ', 'nds32'), ('Nios II ', 'nios-ii'), ('Nvidia PTX ', 'nvidia-ptx'),\n-               ('PowerPC ', 'powerpc'), ('RISC-V ', 'risc-v'), ('RL78 ', 'rl78'), ('RX ', 'rx'), ('S/390 ', 's-390'),\n-               ('SH ', 'sh'), ('Symbian OS ', 'symbian-os'), ('V850 ', 'v850'), ('Visium ', 'visium'), ('x86 ', 'x86'),\n-               ('Xstormy16 ', 'xstormy16'))\n-\n-    for target_name, target in targets:\n-        app.add_object_type(f'{target}-fn-attr', f'{target}-fn-attr', objname=f'{target_name} function attribute',\n-                            indextemplate=f'pair: %s; {target_name} function attribute')\n-        app.add_object_type(f'{target}-var-attr', f'{target}-var-attr', objname=f'{target_name} variable attribute',\n-                            indextemplate=f'pair: %s; {target_name} variable attribute')\n-        app.add_object_type(f'{target}-type-attr', f'{target}-type-attr', objname=f'{target_name} type attribute',\n-                            indextemplate=f'pair: %s; {target_name} type attribute')\n-\n-    return dict(\n-        version=__version__,\n-        parallel_read_safe=True,\n-        parallel_write_safe=True\n-    )"}, {"sha": "930659b250ba14e59ea597c946c70303187b5952", "filename": "doc/gnu.rst", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fgnu.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fgnu.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgnu.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,19 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _gnu-project:\n-\n-The GNU Project and GNU/Linux\n-=============================\n-\n-The GNU Project was launched in 1984 to develop a complete Unix-like\n-operating system which is free software: the GNU system.  (GNU is a\n-recursive acronym for 'GNU's Not Unix'; it is pronounced\n-'guh-NEW'.)  Variants of the GNU operating system, which use the\n-kernel Linux, are now widely used; though these systems are often\n-referred to as 'Linux', they are more accurately called GNU/Linux\n-systems.\n-\n-For more information, see: https://www.gnu.org/ and https://www.gnu.org/gnu/linux-and-gnu.html.\n\\ No newline at end of file"}, {"sha": "5a7d110efde7b3d86d0b901f7e6b5d42aa3e2319", "filename": "doc/gnu_free_documentation_license.rst", "status": "removed", "additions": 0, "deletions": 476, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fgnu_free_documentation_license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fgnu_free_documentation_license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgnu_free_documentation_license.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,476 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _gnu_fdl:\n-\n-******************************\n-GNU Free Documentation License\n-******************************\n-\n-Version 1.3, 3 November 2008\n-\n-Copyright  2000, 2001, 2002, 2007, 2008  Free Software Foundation, Inc\n-https://fsf.org/\n-\n-Everyone is permitted to copy and distribute verbatim copies of this\n-license document, but changing it is not allowed.\n-\n-Preamble\n-~~~~~~~~\n-\n-The purpose of this License is to make a manual, textbook, or other\n-functional and useful document \"free\" in the sense of freedom: to\n-assure everyone the effective freedom to copy and redistribute it,\n-with or without modifying it, either commercially or noncommercially.\n-Secondarily, this License preserves for the author and publisher a way\n-to get credit for their work, while not being considered responsible\n-for modifications made by others.\n-\n-This License is a kind of \"copyleft\", which means that derivative\n-works of the document must themselves be free in the same sense.  It\n-complements the GNU General Public License, which is a copyleft\n-license designed for free software.\n-\n-We have designed this License in order to use it for manuals for free\n-software, because free software needs free documentation: a free\n-program should come with manuals providing the same freedoms that the\n-software does.  But this License is not limited to software manuals;\n-it can be used for any textual work, regardless of subject matter or\n-whether it is published as a printed book.  We recommend this License\n-principally for works whose purpose is instruction or reference.\n-\n-1. APPLICABILITY AND DEFINITIONS\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-This License applies to any manual or other work, in any medium, that\n-contains a notice placed by the copyright holder saying it can be\n-distributed under the terms of this License.  Such a notice grants a\n-world-wide, royalty-free license, unlimited in duration, to use that\n-work under the conditions stated herein.  The **Document**, below,\n-refers to any such manual or work.  Any member of the public is a\n-licensee, and is addressed as \"**you**\".  You accept the license if you\n-copy, modify or distribute the work in a way requiring permission\n-under copyright law.\n-\n-A \"**Modified Version**\" of the Document means any work containing the\n-Document or a portion of it, either copied verbatim, or with\n-modifications and/or translated into another language.\n-\n-A \"**Secondary Section**\" is a named appendix or a front-matter section of\n-the Document that deals exclusively with the relationship of the\n-publishers or authors of the Document to the Document's overall subject\n-(or to related matters) and contains nothing that could fall directly\n-within that overall subject.  (Thus, if the Document is in part a\n-textbook of mathematics, a Secondary Section may not explain any\n-mathematics.)  The relationship could be a matter of historical\n-connection with the subject or with related matters, or of legal,\n-commercial, philosophical, ethical or political position regarding\n-them.\n-\n-The \"**Invariant Sections**\" are certain Secondary Sections whose titles\n-are designated, as being those of Invariant Sections, in the notice\n-that says that the Document is released under this License.  If a\n-section does not fit the above definition of Secondary then it is not\n-allowed to be designated as Invariant.  The Document may contain zero\n-Invariant Sections.  If the Document does not identify any Invariant\n-Sections then there are none.\n-\n-The \"**Cover Texts**\" are certain short passages of text that are listed,\n-as Front-Cover Texts or Back-Cover Texts, in the notice that says that\n-the Document is released under this License.  A Front-Cover Text may\n-be at most 5 words, and a Back-Cover Text may be at most 25 words.\n-\n-A \"**Transparent**\" copy of the Document means a machine-readable copy,\n-represented in a format whose specification is available to the\n-general public, that is suitable for revising the document\n-straightforwardly with generic text editors or (for images composed of\n-pixels) generic paint programs or (for drawings) some widely available\n-drawing editor, and that is suitable for input to text formatters or\n-for automatic translation to a variety of formats suitable for input\n-to text formatters.  A copy made in an otherwise Transparent file\n-format whose markup, or absence of markup, has been arranged to thwart\n-or discourage subsequent modification by readers is not Transparent.\n-An image format is not Transparent if used for any substantial amount\n-of text.  A copy that is not \"Transparent\" is called **Opaque**.\n-\n-Examples of suitable formats for Transparent copies include plain\n-ASCII without markup, Texinfo input format, LaTeX input format, SGML\n-or XML using a publicly available DTD, and standard-conforming simple\n-HTML, PostScript or PDF designed for human modification.  Examples of\n-transparent image formats include PNG, XCF and JPG.  Opaque formats\n-include proprietary formats that can be read and edited only by\n-proprietary word processors, SGML or XML for which the DTD and/or\n-processing tools are not generally available, and the\n-machine-generated HTML, PostScript or PDF produced by some word\n-processors for output purposes only.\n-\n-The \"**Title Page**\" means, for a printed book, the title page itself,\n-plus such following pages as are needed to hold, legibly, the material\n-this License requires to appear in the title page.  For works in\n-formats which do not have any title page as such, \"Title Page\" means\n-the text near the most prominent appearance of the work's title,\n-preceding the beginning of the body of the text.\n-\n-The \"**publisher**\" means any person or entity that distributes\n-copies of the Document to the public.\n-\n-A section \"**Entitled XYZ**\" means a named subunit of the Document whose\n-title either is precisely XYZ or contains XYZ in parentheses following\n-text that translates XYZ in another language.  (Here XYZ stands for a\n-specific section name mentioned below, such as \"**Acknowledgements**\",\n-\"**Dedications**\", \"**Endorsements**\", or \"**History**\".)\n-To \"**Preserve the Title**\"\n-of such a section when you modify the Document means that it remains a\n-section \"Entitled XYZ\" according to this definition.\n-\n-The Document may include Warranty Disclaimers next to the notice which\n-states that this License applies to the Document.  These Warranty\n-Disclaimers are considered to be included by reference in this\n-License, but only as regards disclaiming warranties: any other\n-implication that these Warranty Disclaimers may have is void and has\n-no effect on the meaning of this License.\n-\n-2. VERBATIM COPYING\n-~~~~~~~~~~~~~~~~~~~\n-\n-You may copy and distribute the Document in any medium, either\n-commercially or noncommercially, provided that this License, the\n-copyright notices, and the license notice saying this License applies\n-to the Document are reproduced in all copies, and that you add no other\n-conditions whatsoever to those of this License.  You may not use\n-technical measures to obstruct or control the reading or further\n-copying of the copies you make or distribute.  However, you may accept\n-compensation in exchange for copies.  If you distribute a large enough\n-number of copies you must also follow the conditions in section 3.\n-\n-You may also lend copies, under the same conditions stated above, and\n-you may publicly display copies.\n-\n-3. COPYING IN QUANTITY\n-~~~~~~~~~~~~~~~~~~~~~~\n-\n-If you publish printed copies (or copies in media that commonly have\n-printed covers) of the Document, numbering more than 100, and the\n-Document's license notice requires Cover Texts, you must enclose the\n-copies in covers that carry, clearly and legibly, all these Cover\n-Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\n-the back cover.  Both covers must also clearly and legibly identify\n-you as the publisher of these copies.  The front cover must present\n-the full title with all words of the title equally prominent and\n-visible.  You may add other material on the covers in addition.\n-Copying with changes limited to the covers, as long as they preserve\n-the title of the Document and satisfy these conditions, can be treated\n-as verbatim copying in other respects.\n-\n-If the required texts for either cover are too voluminous to fit\n-legibly, you should put the first ones listed (as many as fit\n-reasonably) on the actual cover, and continue the rest onto adjacent\n-pages.\n-\n-If you publish or distribute Opaque copies of the Document numbering\n-more than 100, you must either include a machine-readable Transparent\n-copy along with each Opaque copy, or state in or with each Opaque copy\n-a computer-network location from which the general network-using\n-public has access to download using public-standard network protocols\n-a complete Transparent copy of the Document, free of added material.\n-If you use the latter option, you must take reasonably prudent steps,\n-when you begin distribution of Opaque copies in quantity, to ensure\n-that this Transparent copy will remain thus accessible at the stated\n-location until at least one year after the last time you distribute an\n-Opaque copy (directly or through your agents or retailers) of that\n-edition to the public.\n-\n-It is requested, but not required, that you contact the authors of the\n-Document well before redistributing any large number of copies, to give\n-them a chance to provide you with an updated version of the Document.\n-\n-4. MODIFICATIONS\n-~~~~~~~~~~~~~~~~\n-\n-You may copy and distribute a Modified Version of the Document under\n-the conditions of sections 2 and 3 above, provided that you release\n-the Modified Version under precisely this License, with the Modified\n-Version filling the role of the Document, thus licensing distribution\n-and modification of the Modified Version to whoever possesses a copy\n-of it.  In addition, you must do these things in the Modified Version:\n-\n-A. Use in the Title Page (and on the covers, if any) a title distinct\n-   from that of the Document, and from those of previous versions\n-   (which should, if there were any, be listed in the History section\n-   of the Document).  You may use the same title as a previous version\n-   if the original publisher of that version gives permission.\n-\n-B. List on the Title Page, as authors, one or more persons or entities\n-   responsible for authorship of the modifications in the Modified\n-   Version, together with at least five of the principal authors of the\n-   Document (all of its principal authors, if it has fewer than five),\n-   unless they release you from this requirement.\n-\n-C. State on the Title page the name of the publisher of the\n-   Modified Version, as the publisher.\n-\n-D. Preserve all the copyright notices of the Document.\n-\n-E. Add an appropriate copyright notice for your modifications\n-   adjacent to the other copyright notices.\n-\n-F. Include, immediately after the copyright notices, a license notice\n-   giving the public permission to use the Modified Version under the\n-   terms of this License, in the form shown in the Addendum below.\n-\n-G. Preserve in that license notice the full lists of Invariant Sections\n-   and required Cover Texts given in the Document's license notice.\n-H. Include an unaltered copy of this License.\n-\n-I. Preserve the section Entitled \"History\", Preserve its Title, and add\n-   to it an item stating at least the title, year, new authors, and\n-   publisher of the Modified Version as given on the Title Page.  If\n-   there is no section Entitled \"History\" in the Document, create one\n-   stating the title, year, authors, and publisher of the Document as\n-   given on its Title Page, then add an item describing the Modified\n-   Version as stated in the previous sentence.\n-\n-J. Preserve the network location, if any, given in the Document for\n-   public access to a Transparent copy of the Document, and likewise\n-   the network locations given in the Document for previous versions\n-   it was based on.  These may be placed in the \"History\" section.\n-   You may omit a network location for a work that was published at\n-   least four years before the Document itself, or if the original\n-   publisher of the version it refers to gives permission.\n-\n-K. For any section Entitled \"Acknowledgements\" or \"Dedications\",\n-   Preserve the Title of the section, and preserve in the section all\n-   the substance and tone of each of the contributor acknowledgements\n-   and/or dedications given therein.\n-\n-L. Preserve all the Invariant Sections of the Document,\n-   unaltered in their text and in their titles.  Section numbers\n-   or the equivalent are not considered part of the section titles.\n-\n-M. Delete any section Entitled \"Endorsements\".  Such a section\n-   may not be included in the Modified Version.\n-\n-N. Do not retitle any existing section to be Entitled \"Endorsements\"\n-   or to conflict in title with any Invariant Section.\n-\n-O. Preserve any Warranty Disclaimers.\n-\n-If the Modified Version includes new front-matter sections or\n-appendices that qualify as Secondary Sections and contain no material\n-copied from the Document, you may at your option designate some or all\n-of these sections as invariant.  To do this, add their titles to the\n-list of Invariant Sections in the Modified Version's license notice.\n-These titles must be distinct from any other section titles.\n-\n-You may add a section Entitled \"Endorsements\", provided it contains\n-nothing but endorsements of your Modified Version by various\n-parties---for example, statements of peer review or that the text has\n-been approved by an organization as the authoritative definition of a\n-standard.\n-\n-You may add a passage of up to five words as a Front-Cover Text, and a\n-passage of up to 25 words as a Back-Cover Text, to the end of the list\n-of Cover Texts in the Modified Version.  Only one passage of\n-Front-Cover Text and one of Back-Cover Text may be added by (or\n-through arrangements made by) any one entity.  If the Document already\n-includes a cover text for the same cover, previously added by you or\n-by arrangement made by the same entity you are acting on behalf of,\n-you may not add another; but you may replace the old one, on explicit\n-permission from the previous publisher that added the old one.\n-\n-The author(s) and publisher(s) of the Document do not by this License\n-give permission to use their names for publicity for or to assert or\n-imply endorsement of any Modified Version.\n-\n-5. COMBINING DOCUMENTS\n-~~~~~~~~~~~~~~~~~~~~~~\n-\n-You may combine the Document with other documents released under this\n-License, under the terms defined in section 4 above for modified\n-versions, provided that you include in the combination all of the\n-Invariant Sections of all of the original documents, unmodified, and\n-list them all as Invariant Sections of your combined work in its\n-license notice, and that you preserve all their Warranty Disclaimers.\n-\n-The combined work need only contain one copy of this License, and\n-multiple identical Invariant Sections may be replaced with a single\n-copy.  If there are multiple Invariant Sections with the same name but\n-different contents, make the title of each such section unique by\n-adding at the end of it, in parentheses, the name of the original\n-author or publisher of that section if known, or else a unique number.\n-Make the same adjustment to the section titles in the list of\n-Invariant Sections in the license notice of the combined work.\n-\n-In the combination, you must combine any sections Entitled \"History\"\n-in the various original documents, forming one section Entitled\n-\"History\"; likewise combine any sections Entitled \"Acknowledgements\",\n-and any sections Entitled \"Dedications\".  You must delete all sections\n-Entitled \"Endorsements\".\n-\n-6. COLLECTIONS OF DOCUMENTS\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-You may make a collection consisting of the Document and other documents\n-released under this License, and replace the individual copies of this\n-License in the various documents with a single copy that is included in\n-the collection, provided that you follow the rules of this License for\n-verbatim copying of each of the documents in all other respects.\n-\n-You may extract a single document from such a collection, and distribute\n-it individually under this License, provided you insert a copy of this\n-License into the extracted document, and follow this License in all\n-other respects regarding verbatim copying of that document.\n-\n-7. AGGREGATION WITH INDEPENDENT WORKS\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-A compilation of the Document or its derivatives with other separate\n-and independent documents or works, in or on a volume of a storage or\n-distribution medium, is called an \"aggregate\" if the copyright\n-resulting from the compilation is not used to limit the legal rights\n-of the compilation's users beyond what the individual works permit.\n-When the Document is included in an aggregate, this License does not\n-apply to the other works in the aggregate which are not themselves\n-derivative works of the Document.\n-\n-If the Cover Text requirement of section 3 is applicable to these\n-copies of the Document, then if the Document is less than one half of\n-the entire aggregate, the Document's Cover Texts may be placed on\n-covers that bracket the Document within the aggregate, or the\n-electronic equivalent of covers if the Document is in electronic form.\n-Otherwise they must appear on printed covers that bracket the whole\n-aggregate.\n-\n-8. TRANSLATION\n-~~~~~~~~~~~~~~\n-\n-Translation is considered a kind of modification, so you may\n-distribute translations of the Document under the terms of section 4.\n-Replacing Invariant Sections with translations requires special\n-permission from their copyright holders, but you may include\n-translations of some or all Invariant Sections in addition to the\n-original versions of these Invariant Sections.  You may include a\n-translation of this License, and all the license notices in the\n-Document, and any Warranty Disclaimers, provided that you also include\n-the original English version of this License and the original versions\n-of those notices and disclaimers.  In case of a disagreement between\n-the translation and the original version of this License or a notice\n-or disclaimer, the original version will prevail.\n-\n-If a section in the Document is Entitled \"Acknowledgements\",\n-\"Dedications\", or \"History\", the requirement (section 4) to Preserve\n-its Title (section 1) will typically require changing the actual\n-title.\n-\n-9. TERMINATION\n-~~~~~~~~~~~~~~\n-\n-You may not copy, modify, sublicense, or distribute the Document\n-except as expressly provided under this License.  Any attempt\n-otherwise to copy, modify, sublicense, or distribute it is void, and\n-will automatically terminate your rights under this License.\n-\n-However, if you cease all violation of this License, then your license\n-from a particular copyright holder is reinstated (a) provisionally,\n-unless and until the copyright holder explicitly and finally\n-terminates your license, and (b) permanently, if the copyright holder\n-fails to notify you of the violation by some reasonable means prior to\n-60 days after the cessation.\n-\n-Moreover, your license from a particular copyright holder is\n-reinstated permanently if the copyright holder notifies you of the\n-violation by some reasonable means, this is the first time you have\n-received notice of violation of this License (for any work) from that\n-copyright holder, and you cure the violation prior to 30 days after\n-your receipt of the notice.\n-\n-Termination of your rights under this section does not terminate the\n-licenses of parties who have received copies or rights from you under\n-this License.  If your rights have been terminated and not permanently\n-reinstated, receipt of a copy of some or all of the same material does\n-not give you any rights to use it.\n-\n-10. FUTURE REVISIONS OF THIS LICENSE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-The Free Software Foundation may publish new, revised versions\n-of the GNU Free Documentation License from time to time.  Such new\n-versions will be similar in spirit to the present version, but may\n-differ in detail to address new problems or concerns.  See\n-https://www.gnu.org/copyleft/.\n-\n-Each version of the License is given a distinguishing version number.\n-If the Document specifies that a particular numbered version of this\n-License \"or any later version\" applies to it, you have the option of\n-following the terms and conditions either of that specified version or\n-of any later version that has been published (not as a draft) by the\n-Free Software Foundation.  If the Document does not specify a version\n-number of this License, you may choose any version ever published (not\n-as a draft) by the Free Software Foundation.  If the Document\n-specifies that a proxy can decide which future versions of this\n-License can be used, that proxy's public statement of acceptance of a\n-version permanently authorizes you to choose that version for the\n-Document.\n-\n-11. RELICENSING\n-~~~~~~~~~~~~~~~\n-\n-\"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any\n-World Wide Web server that publishes copyrightable works and also\n-provides prominent facilities for anybody to edit those works.  A\n-public wiki that anybody can edit is an example of such a server.  A\n-\"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the\n-site means any set of copyrightable works thus published on the MMC\n-site.\n-\n-\"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0\n-license published by Creative Commons Corporation, a not-for-profit\n-corporation with a principal place of business in San Francisco,\n-California, as well as future copyleft versions of that license\n-published by that same organization.\n-\n-\"Incorporate\" means to publish or republish a Document, in whole or\n-in part, as part of another Document.\n-\n-An MMC is \"eligible for relicensing\" if it is licensed under this\n-License, and if all works that were first published under this License\n-somewhere other than this MMC, and subsequently incorporated in whole\n-or in part into the MMC, (1) had no cover texts or invariant sections,\n-and (2) were thus incorporated prior to November 1, 2008.\n-\n-The operator of an MMC Site may republish an MMC contained in the site\n-under CC-BY-SA on the same site at any time before August 1, 2009,\n-provided the MMC is eligible for relicensing.\n-\n-ADDENDUM: How to use this License for your documents\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To use this License in a document you have written, include a copy of\n-the License in the document and put the following copyright and\n-license notices just after the title page:\n-\n-    Copyright \u00a9 YEAR  YOUR NAME.\n-    Permission is granted to copy, distribute and/or modify this document\n-    under the terms of the GNU Free Documentation License, Version 1.3\n-    or any later version published by the Free Software Foundation;\n-    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n-    A copy of the license is included in the section entitled \"GNU\n-    Free Documentation License\".\n-\n-\n-If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\n-replace the \"with ... Texts.\" line with this:\n-\n-    with the Invariant Sections being LIST THEIR TITLES, with the\n-    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n-\n-If you have Invariant Sections without Cover Texts, or some other\n-combination of the three, merge those two alternatives to suit the\n-situation.\n-\n-If your document contains nontrivial examples of program code, we\n-recommend releasing these examples in parallel under your choice of\n-free software license, such as the GNU General Public License,\n-to permit their use in free software.\n\\ No newline at end of file"}, {"sha": "07ffd72b375b5ee9bb3b95955757f57981c40cfe", "filename": "doc/gpl-3.0.rst", "status": "removed", "additions": 0, "deletions": 707, "changes": 707, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fgpl-3.0.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fgpl-3.0.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fgpl-3.0.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,707 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-GNU GENERAL PUBLIC LICENSE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Version 3, 29 June 2007\n-\n-Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n-\n-Everyone is permitted to copy and distribute verbatim copies of this\n-license document, but changing it is not allowed.\n-\n-Preamble\n-########\n-\n-The GNU General Public License is a free, copyleft license for software\n-and other kinds of works.\n-\n-The licenses for most software and other practical works are designed to\n-take away your freedom to share and change the works. By contrast, the\n-GNU General Public License is intended to guarantee your freedom to\n-share and change all versions of a program--to make sure it remains free\n-software for all its users. We, the Free Software Foundation, use the\n-GNU General Public License for most of our software; it applies also to\n-any other work released this way by its authors. You can apply it to\n-your programs, too.\n-\n-When we speak of free software, we are referring to freedom, not price.\n-Our General Public Licenses are designed to make sure that you have the\n-freedom to distribute copies of free software (and charge for them if\n-you wish), that you receive source code or can get it if you want it,\n-that you can change the software or use pieces of it in new free\n-programs, and that you know you can do these things.\n-\n-To protect your rights, we need to prevent others from denying you these\n-rights or asking you to surrender the rights. Therefore, you have\n-certain responsibilities if you distribute copies of the software, or if\n-you modify it: responsibilities to respect the freedom of others.\n-\n-For example, if you distribute copies of such a program, whether gratis\n-or for a fee, you must pass on to the recipients the same freedoms that\n-you received. You must make sure that they, too, receive or can get the\n-source code. And you must show them these terms so they know their\n-rights.\n-\n-Developers that use the GNU GPL protect your rights with two steps: (1)\n-assert copyright on the software, and (2) offer you this License giving\n-you legal permission to copy, distribute and/or modify it.\n-\n-For the developers' and authors' protection, the GPL clearly explains\n-that there is no warranty for this free software. For both users' and\n-authors' sake, the GPL requires that modified versions be marked as\n-changed, so that their problems will not be attributed erroneously to\n-authors of previous versions.\n-\n-Some devices are designed to deny users access to install or run\n-modified versions of the software inside them, although the manufacturer\n-can do so. This is fundamentally incompatible with the aim of protecting\n-users' freedom to change the software. The systematic pattern of such\n-abuse occurs in the area of products for individuals to use, which is\n-precisely where it is most unacceptable. Therefore, we have designed\n-this version of the GPL to prohibit the practice for those products. If\n-such problems arise substantially in other domains, we stand ready to\n-extend this provision to those domains in future versions of the GPL, as\n-needed to protect the freedom of users.\n-\n-Finally, every program is threatened constantly by software patents.\n-States should not allow patents to restrict development and use of\n-software on general-purpose computers, but in those that do, we wish to\n-avoid the special danger that patents applied to a free program could\n-make it effectively proprietary. To prevent this, the GPL assures that\n-patents cannot be used to render the program non-free.\n-\n-The precise terms and conditions for copying, distribution and\n-modification follow.\n-\n-TERMS AND CONDITIONS\n-####################\n-\n-0. Definitions.\n-^^^^^^^^^^^^^^^\n-\n-\"This License\" refers to version 3 of the GNU General Public License.\n-\n-\"Copyright\" also means copyright-like laws that apply to other kinds of\n-works, such as semiconductor masks.\n-\n-\"The Program\" refers to any copyrightable work licensed under this\n-License. Each licensee is addressed as \"you\". \"Licensees\" and\n-\"recipients\" may be individuals or organizations.\n-\n-To \"modify\" a work means to copy from or adapt all or part of the work\n-in a fashion requiring copyright permission, other than the making of an\n-exact copy. The resulting work is called a \"modified version\" of the\n-earlier work or a work \"based on\" the earlier work.\n-\n-A \"covered work\" means either the unmodified Program or a work based on\n-the Program.\n-\n-To \"propagate\" a work means to do anything with it that, without\n-permission, would make you directly or secondarily liable for\n-infringement under applicable copyright law, except executing it on a\n-computer or modifying a private copy. Propagation includes copying,\n-distribution (with or without modification), making available to the\n-public, and in some countries other activities as well.\n-\n-To \"convey\" a work means any kind of propagation that enables other\n-parties to make or receive copies. Mere interaction with a user through\n-a computer network, with no transfer of a copy, is not conveying.\n-\n-An interactive user interface displays \"Appropriate Legal Notices\" to\n-the extent that it includes a convenient and prominently visible feature\n-that (1) displays an appropriate copyright notice, and (2) tells the\n-user that there is no warranty for the work (except to the extent that\n-warranties are provided), that licensees may convey the work under this\n-License, and how to view a copy of this License. If the interface\n-presents a list of user commands or options, such as a menu, a prominent\n-item in the list meets this criterion.\n-\n-1. Source Code.\n-^^^^^^^^^^^^^^^\n-\n-The \"source code\" for a work means the preferred form of the work for\n-making modifications to it. \"Object code\" means any non-source form of a\n-work.\n-\n-A \"Standard Interface\" means an interface that either is an official\n-standard defined by a recognized standards body, or, in the case of\n-interfaces specified for a particular programming language, one that is\n-widely used among developers working in that language.\n-\n-The \"System Libraries\" of an executable work include anything, other\n-than the work as a whole, that (a) is included in the normal form of\n-packaging a Major Component, but which is not part of that Major\n-Component, and (b) serves only to enable use of the work with that Major\n-Component, or to implement a Standard Interface for which an\n-implementation is available to the public in source code form. A \"Major\n-Component\", in this context, means a major essential component (kernel,\n-window system, and so on) of the specific operating system (if any) on\n-which the executable work runs, or a compiler used to produce the work,\n-or an object code interpreter used to run it.\n-\n-The \"Corresponding Source\" for a work in object code form means all the\n-source code needed to generate, install, and (for an executable work)\n-run the object code and to modify the work, including scripts to control\n-those activities. However, it does not include the work's System\n-Libraries, or general-purpose tools or generally available free programs\n-which are used unmodified in performing those activities but which are\n-not part of the work. For example, Corresponding Source includes\n-interface definition files associated with source files for the work,\n-and the source code for shared libraries and dynamically linked\n-subprograms that the work is specifically designed to require, such as\n-by intimate data communication or control flow between those subprograms\n-and other parts of the work.\n-\n-The Corresponding Source need not include anything that users can\n-regenerate automatically from other parts of the Corresponding Source.\n-\n-The Corresponding Source for a work in source code form is that same\n-work.\n-\n-2. Basic Permissions.\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-All rights granted under this License are granted for the term of\n-copyright on the Program, and are irrevocable provided the stated\n-conditions are met. This License explicitly affirms your unlimited\n-permission to run the unmodified Program. The output from running a\n-covered work is covered by this License only if the output, given its\n-content, constitutes a covered work. This License acknowledges your\n-rights of fair use or other equivalent, as provided by copyright law.\n-\n-You may make, run and propagate covered works that you do not convey,\n-without conditions so long as your license otherwise remains in force.\n-You may convey covered works to others for the sole purpose of having\n-them make modifications exclusively for you, or provide you with\n-facilities for running those works, provided that you comply with the\n-terms of this License in conveying all material for which you do not\n-control copyright. Those thus making or running the covered works for\n-you must do so exclusively on your behalf, under your direction and\n-control, on terms that prohibit them from making any copies of your\n-copyrighted material outside their relationship with you.\n-\n-Conveying under any other circumstances is permitted solely under the\n-conditions stated below. Sublicensing is not allowed; section 10 makes\n-it unnecessary.\n-\n-3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-No covered work shall be deemed part of an effective technological\n-measure under any applicable law fulfilling obligations under article 11\n-of the WIPO copyright treaty adopted on 20 December 1996, or similar\n-laws prohibiting or restricting circumvention of such measures.\n-\n-When you convey a covered work, you waive any legal power to forbid\n-circumvention of technological measures to the extent such circumvention\n-is effected by exercising rights under this License with respect to the\n-covered work, and you disclaim any intention to limit operation or\n-modification of the work as a means of enforcing, against the work's\n-users, your or third parties' legal rights to forbid circumvention of\n-technological measures.\n-\n-4. Conveying Verbatim Copies.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You may convey verbatim copies of the Program's source code as you\n-receive it, in any medium, provided that you conspicuously and\n-appropriately publish on each copy an appropriate copyright notice; keep\n-intact all notices stating that this License and any non-permissive\n-terms added in accord with section 7 apply to the code; keep intact all\n-notices of the absence of any warranty; and give all recipients a copy\n-of this License along with the Program.\n-\n-You may charge any price or no price for each copy that you convey, and\n-you may offer support or warranty protection for a fee.\n-\n-5. Conveying Modified Source Versions.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You may convey a work based on the Program, or the modifications to\n-produce it from the Program, in the form of source code under the terms\n-of section 4, provided that you also meet all of these conditions:\n-\n-a) The work must carry prominent notices stating that you modified\n-   it, and giving a relevant date.\n-\n-b) The work must carry prominent notices stating that it is released\n-   under this License and any conditions added under section 7. This\n-   requirement modifies the requirement in section 4 to \"keep intact\n-   all notices\".\n-\n-c) You must license the entire work, as a whole, under this License\n-   to anyone who comes into possession of a copy. This License will\n-   therefore apply, along with any applicable section 7 additional\n-   terms, to the whole of the work, and all its parts, regardless of\n-   how they are packaged. This License gives no permission to license\n-   the work in any other way, but it does not invalidate such\n-   permission if you have separately received it.\n-\n-d) If the work has interactive user interfaces, each must display\n-   Appropriate Legal Notices; however, if the Program has interactive\n-   interfaces that do not display Appropriate Legal Notices, your\n-   work need not make them do so.\n-\n-A compilation of a covered work with other separate and independent\n-works, which are not by their nature extensions of the covered work, and\n-which are not combined with it such as to form a larger program, in or\n-on a volume of a storage or distribution medium, is called an\n-\"aggregate\" if the compilation and its resulting copyright are not used\n-to limit the access or legal rights of the compilation's users beyond\n-what the individual works permit. Inclusion of a covered work in an\n-aggregate does not cause this License to apply to the other parts of the\n-aggregate.\n-\n-6. Conveying Non-Source Forms.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You may convey a covered work in object code form under the terms of\n-sections 4 and 5, provided that you also convey the machine-readable\n-Corresponding Source under the terms of this License, in one of these\n-ways:\n-\n-a) Convey the object code in, or embodied in, a physical product\n-   (including a physical distribution medium), accompanied by the\n-   Corresponding Source fixed on a durable physical medium\n-   customarily used for software interchange.\n-\n-b) Convey the object code in, or embodied in, a physical product\n-   (including a physical distribution medium), accompanied by a\n-   written offer, valid for at least three years and valid for as\n-   long as you offer spare parts or customer support for that product\n-   model, to give anyone who possesses the object code either (1) a\n-   copy of the Corresponding Source for all the software in the\n-   product that is covered by this License, on a durable physical\n-   medium customarily used for software interchange, for a price no\n-   more than your reasonable cost of physically performing this\n-   conveying of source, or (2) access to copy the Corresponding\n-   Source from a network server at no charge.\n-\n-c) Convey individual copies of the object code with a copy of the\n-   written offer to provide the Corresponding Source. This\n-   alternative is allowed only occasionally and noncommercially, and\n-   only if you received the object code with such an offer, in accord\n-   with subsection 6b.\n-\n-d) Convey the object code by offering access from a designated place\n-   (gratis or for a charge), and offer equivalent access to the\n-   Corresponding Source in the same way through the same place at no\n-   further charge. You need not require recipients to copy the\n-   Corresponding Source along with the object code. If the place to\n-   copy the object code is a network server, the Corresponding Source\n-   may be on a different server (operated by you or a third party)\n-   that supports equivalent copying facilities, provided you maintain\n-   clear directions next to the object code saying where to find the\n-   Corresponding Source. Regardless of what server hosts the\n-   Corresponding Source, you remain obligated to ensure that it is\n-   available for as long as needed to satisfy these requirements.\n-\n-e) Convey the object code using peer-to-peer transmission, provided\n-   you inform other peers where the object code and Corresponding\n-   Source of the work are being offered to the general public at no\n-   charge under subsection 6d.\n-\n-A separable portion of the object code, whose source code is excluded\n-from the Corresponding Source as a System Library, need not be included\n-in conveying the object code work.\n-\n-A \"User Product\" is either (1) a \"consumer product\", which means any\n-tangible personal property which is normally used for personal, family,\n-or household purposes, or (2) anything designed or sold for\n-incorporation into a dwelling. In determining whether a product is a\n-consumer product, doubtful cases shall be resolved in favor of coverage.\n-For a particular product received by a particular user, \"normally used\"\n-refers to a typical or common use of that class of product, regardless\n-of the status of the particular user or of the way in which the\n-particular user actually uses, or expects or is expected to use, the\n-product. A product is a consumer product regardless of whether the\n-product has substantial commercial, industrial or non-consumer uses,\n-unless such uses represent the only significant mode of use of the\n-product.\n-\n-\"Installation Information\" for a User Product means any methods,\n-procedures, authorization keys, or other information required to install\n-and execute modified versions of a covered work in that User Product\n-from a modified version of its Corresponding Source. The information\n-must suffice to ensure that the continued functioning of the modified\n-object code is in no case prevented or interfered with solely because\n-modification has been made.\n-\n-If you convey an object code work under this section in, or with, or\n-specifically for use in, a User Product, and the conveying occurs as\n-part of a transaction in which the right of possession and use of the\n-User Product is transferred to the recipient in perpetuity or for a\n-fixed term (regardless of how the transaction is characterized), the\n-Corresponding Source conveyed under this section must be accompanied by\n-the Installation Information. But this requirement does not apply if\n-neither you nor any third party retains the ability to install modified\n-object code on the User Product (for example, the work has been\n-installed in ROM).\n-\n-The requirement to provide Installation Information does not include a\n-requirement to continue to provide support service, warranty, or updates\n-for a work that has been modified or installed by the recipient, or for\n-the User Product in which it has been modified or installed. Access to a\n-network may be denied when the modification itself materially and\n-adversely affects the operation of the network or violates the rules and\n-protocols for communication across the network.\n-\n-Corresponding Source conveyed, and Installation Information provided, in\n-accord with this section must be in a format that is publicly documented\n-(and with an implementation available to the public in source code\n-form), and must require no special password or key for unpacking,\n-reading or copying.\n-\n-7. Additional Terms.\n-^^^^^^^^^^^^^^^^^^^^\n-\n-\"Additional permissions\" are terms that supplement the terms of this\n-License by making exceptions from one or more of its conditions.\n-Additional permissions that are applicable to the entire Program shall\n-be treated as though they were included in this License, to the extent\n-that they are valid under applicable law. If additional permissions\n-apply only to part of the Program, that part may be used separately\n-under those permissions, but the entire Program remains governed by this\n-License without regard to the additional permissions.\n-\n-When you convey a copy of a covered work, you may at your option remove\n-any additional permissions from that copy, or from any part of it.\n-(Additional permissions may be written to require their own removal in\n-certain cases when you modify the work.) You may place additional\n-permissions on material, added by you to a covered work, for which you\n-have or can give appropriate copyright permission.\n-\n-Notwithstanding any other provision of this License, for material you\n-add to a covered work, you may (if authorized by the copyright holders\n-of that material) supplement the terms of this License with terms:\n-\n-a) Disclaiming warranty or limiting liability differently from the\n-   terms of sections 15 and 16 of this License; or\n-\n-b) Requiring preservation of specified reasonable legal notices or\n-   author attributions in that material or in the Appropriate Legal\n-   Notices displayed by works containing it; or\n-\n-c) Prohibiting misrepresentation of the origin of that material, or\n-   requiring that modified versions of such material be marked in\n-   reasonable ways as different from the original version; or\n-\n-d) Limiting the use for publicity purposes of names of licensors or\n-   authors of the material; or\n-\n-e) Declining to grant rights under trademark law for use of some\n-   trade names, trademarks, or service marks; or\n-\n-f) Requiring indemnification of licensors and authors of that\n-   material by anyone who conveys the material (or modified versions\n-   of it) with contractual assumptions of liability to the recipient,\n-   for any liability that these contractual assumptions directly\n-   impose on those licensors and authors.\n-\n-All other non-permissive additional terms are considered \"further\n-restrictions\" within the meaning of section 10. If the Program as you\n-received it, or any part of it, contains a notice stating that it is\n-governed by this License along with a term that is a further\n-restriction, you may remove that term. If a license document contains a\n-further restriction but permits relicensing or conveying under this\n-License, you may add to a covered work material governed by the terms of\n-that license document, provided that the further restriction does not\n-survive such relicensing or conveying.\n-\n-If you add terms to a covered work in accord with this section, you must\n-place, in the relevant source files, a statement of the additional terms\n-that apply to those files, or a notice indicating where to find the\n-applicable terms.\n-\n-Additional terms, permissive or non-permissive, may be stated in the\n-form of a separately written license, or stated as exceptions; the above\n-requirements apply either way.\n-\n-8. Termination.\n-^^^^^^^^^^^^^^^\n-\n-You may not propagate or modify a covered work except as expressly\n-provided under this License. Any attempt otherwise to propagate or\n-modify it is void, and will automatically terminate your rights under\n-this License (including any patent licenses granted under the third\n-paragraph of section 11).\n-\n-However, if you cease all violation of this License, then your license\n-from a particular copyright holder is reinstated (a) provisionally,\n-unless and until the copyright holder explicitly and finally terminates\n-your license, and (b) permanently, if the copyright holder fails to\n-notify you of the violation by some reasonable means prior to 60 days\n-after the cessation.\n-\n-Moreover, your license from a particular copyright holder is reinstated\n-permanently if the copyright holder notifies you of the violation by\n-some reasonable means, this is the first time you have received notice\n-of violation of this License (for any work) from that copyright holder,\n-and you cure the violation prior to 30 days after your receipt of the\n-notice.\n-\n-Termination of your rights under this section does not terminate the\n-licenses of parties who have received copies or rights from you under\n-this License. If your rights have been terminated and not permanently\n-reinstated, you do not qualify to receive new licenses for the same\n-material under section 10.\n-\n-9. Acceptance Not Required for Having Copies.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You are not required to accept this License in order to receive or run a\n-copy of the Program. Ancillary propagation of a covered work occurring\n-solely as a consequence of using peer-to-peer transmission to receive a\n-copy likewise does not require acceptance. However, nothing other than\n-this License grants you permission to propagate or modify any covered\n-work. These actions infringe copyright if you do not accept this\n-License. Therefore, by modifying or propagating a covered work, you\n-indicate your acceptance of this License to do so.\n-\n-10. Automatic Licensing of Downstream Recipients.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Each time you convey a covered work, the recipient automatically\n-receives a license from the original licensors, to run, modify and\n-propagate that work, subject to this License. You are not responsible\n-for enforcing compliance by third parties with this License.\n-\n-An \"entity transaction\" is a transaction transferring control of an\n-organization, or substantially all assets of one, or subdividing an\n-organization, or merging organizations. If propagation of a covered work\n-results from an entity transaction, each party to that transaction who\n-receives a copy of the work also receives whatever licenses to the work\n-the party's predecessor in interest had or could give under the previous\n-paragraph, plus a right to possession of the Corresponding Source of the\n-work from the predecessor in interest, if the predecessor has it or can\n-get it with reasonable efforts.\n-\n-You may not impose any further restrictions on the exercise of the\n-rights granted or affirmed under this License. For example, you may not\n-impose a license fee, royalty, or other charge for exercise of rights\n-granted under this License, and you may not initiate litigation\n-(including a cross-claim or counterclaim in a lawsuit) alleging that any\n-patent claim is infringed by making, using, selling, offering for sale,\n-or importing the Program or any portion of it.\n-\n-11. Patents.\n-^^^^^^^^^^^^\n-\n-A \"contributor\" is a copyright holder who authorizes use under this\n-License of the Program or a work on which the Program is based. The work\n-thus licensed is called the contributor's \"contributor version\".\n-\n-A contributor's \"essential patent claims\" are all patent claims owned or\n-controlled by the contributor, whether already acquired or hereafter\n-acquired, that would be infringed by some manner, permitted by this\n-License, of making, using, or selling its contributor version, but do\n-not include claims that would be infringed only as a consequence of\n-further modification of the contributor version. For purposes of this\n-definition, \"control\" includes the right to grant patent sublicenses in\n-a manner consistent with the requirements of this License.\n-\n-Each contributor grants you a non-exclusive, worldwide, royalty-free\n-patent license under the contributor's essential patent claims, to make,\n-use, sell, offer for sale, import and otherwise run, modify and\n-propagate the contents of its contributor version.\n-\n-In the following three paragraphs, a \"patent license\" is any express\n-agreement or commitment, however denominated, not to enforce a patent\n-(such as an express permission to practice a patent or covenant not to\n-sue for patent infringement). To \"grant\" such a patent license to a\n-party means to make such an agreement or commitment not to enforce a\n-patent against the party.\n-\n-If you convey a covered work, knowingly relying on a patent license, and\n-the Corresponding Source of the work is not available for anyone to\n-copy, free of charge and under the terms of this License, through a\n-publicly available network server or other readily accessible means,\n-then you must either (1) cause the Corresponding Source to be so\n-available, or (2) arrange to deprive yourself of the benefit of the\n-patent license for this particular work, or (3) arrange, in a manner\n-consistent with the requirements of this License, to extend the patent\n-license to downstream recipients. \"Knowingly relying\" means you have\n-actual knowledge that, but for the patent license, your conveying the\n-covered work in a country, or your recipient's use of the covered work\n-in a country, would infringe one or more identifiable patents in that\n-country that you have reason to believe are valid.\n-\n-If, pursuant to or in connection with a single transaction or\n-arrangement, you convey, or propagate by procuring conveyance of, a\n-covered work, and grant a patent license to some of the parties\n-receiving the covered work authorizing them to use, propagate, modify or\n-convey a specific copy of the covered work, then the patent license you\n-grant is automatically extended to all recipients of the covered work\n-and works based on it.\n-\n-A patent license is \"discriminatory\" if it does not include within the\n-scope of its coverage, prohibits the exercise of, or is conditioned on\n-the non-exercise of one or more of the rights that are specifically\n-granted under this License. You may not convey a covered work if you are\n-a party to an arrangement with a third party that is in the business of\n-distributing software, under which you make payment to the third party\n-based on the extent of your activity of conveying the work, and under\n-which the third party grants, to any of the parties who would receive\n-the covered work from you, a discriminatory patent license (a) in\n-connection with copies of the covered work conveyed by you (or copies\n-made from those copies), or (b) primarily for and in connection with\n-specific products or compilations that contain the covered work, unless\n-you entered into that arrangement, or that patent license was granted,\n-prior to 28 March 2007.\n-\n-Nothing in this License shall be construed as excluding or limiting any\n-implied license or other defenses to infringement that may otherwise be\n-available to you under applicable patent law.\n-\n-12. No Surrender of Others' Freedom.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If conditions are imposed on you (whether by court order, agreement or\n-otherwise) that contradict the conditions of this License, they do not\n-excuse you from the conditions of this License. If you cannot convey a\n-covered work so as to satisfy simultaneously your obligations under this\n-License and any other pertinent obligations, then as a consequence you\n-may not convey it at all. For example, if you agree to terms that\n-obligate you to collect a royalty for further conveying from those to\n-whom you convey the Program, the only way you could satisfy both those\n-terms and this License would be to refrain entirely from conveying the\n-Program.\n-\n-13. Use with the GNU Affero General Public License.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Notwithstanding any other provision of this License, you have permission\n-to link or combine any covered work with a work licensed under version 3\n-of the GNU Affero General Public License into a single combined work,\n-and to convey the resulting work. The terms of this License will\n-continue to apply to the part which is the covered work, but the special\n-requirements of the GNU Affero General Public License, section 13,\n-concerning interaction through a network will apply to the combination\n-as such.\n-\n-14. Revised Versions of this License.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The Free Software Foundation may publish revised and/or new versions of\n-the GNU General Public License from time to time. Such new versions will\n-be similar in spirit to the present version, but may differ in detail to\n-address new problems or concerns.\n-\n-Each version is given a distinguishing version number. If the Program\n-specifies that a certain numbered version of the GNU General Public\n-License \"or any later version\" applies to it, you have the option of\n-following the terms and conditions either of that numbered version or of\n-any later version published by the Free Software Foundation. If the\n-Program does not specify a version number of the GNU General Public\n-License, you may choose any version ever published by the Free Software\n-Foundation.\n-\n-If the Program specifies that a proxy can decide which future versions\n-of the GNU General Public License can be used, that proxy's public\n-statement of acceptance of a version permanently authorizes you to\n-choose that version for the Program.\n-\n-Later license versions may give you additional or different permissions.\n-However, no additional obligations are imposed on any author or\n-copyright holder as a result of your choosing to follow a later version.\n-\n-15. Disclaimer of Warranty.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n-APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n-HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\n-WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n-PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF\n-THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME\n-THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n-\n-16. Limitation of Liability.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\n-CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\n-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\n-ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\n-NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES\n-SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE\n-WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN\n-ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n-\n-17. Interpretation of Sections 15 and 16.\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If the disclaimer of warranty and limitation of liability provided above\n-cannot be given local legal effect according to their terms, reviewing\n-courts shall apply local law that most closely approximates an absolute\n-waiver of all civil liability in connection with the Program, unless a\n-warranty or assumption of liability accompanies a copy of the Program in\n-return for a fee.\n-\n-END OF TERMS AND CONDITIONS\n-\n-How to Apply These Terms to Your New Programs\n-#############################################\n-\n-If you develop a new program, and you want it to be of the greatest\n-possible use to the public, the best way to achieve this is to make it\n-free software which everyone can redistribute and change under these\n-terms.\n-\n-To do so, attach the following notices to the program. It is safest to\n-attach them to the start of each source file to most effectively state\n-the exclusion of warranty; and each file should have at least the\n-\"copyright\" line and a pointer to where the full notice is found.\n-\n-::\n-\n-        <one line to give the program's name and a brief idea of what it does.>\n-        Copyright (C) <year>  <name of author>\n-\n-        This program is free software: you can redistribute it and/or modify\n-        it under the terms of the GNU General Public License as published by\n-        the Free Software Foundation, either version 3 of the License, or\n-        (at your option) any later version.\n-\n-        This program is distributed in the hope that it will be useful,\n-        but WITHOUT ANY WARRANTY; without even the implied warranty of\n-        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-        GNU General Public License for more details.\n-\n-        You should have received a copy of the GNU General Public License\n-        along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-\n-Also add information on how to contact you by electronic and paper mail.\n-\n-If the program does terminal interaction, make it output a short notice\n-like this when it starts in an interactive mode:\n-\n-::\n-\n-        <program>  Copyright (C) <year>  <name of author>\n-        This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n-        This is free software, and you are welcome to redistribute it\n-        under certain conditions; type `show c' for details.\n-\n-The hypothetical commands \\`show w' and \\`show c' should show the\n-appropriate parts of the General Public License. Of course, your\n-program's commands might be different; for a GUI interface, you would\n-use an \"about box\".\n-\n-You should also get your employer (if you work as a programmer) or\n-school, if any, to sign a \"copyright disclaimer\" for the program, if\n-necessary. For more information on this, and how to apply and follow the\n-GNU GPL, see https://www.gnu.org/licenses/.\n-\n-The GNU General Public License does not permit incorporating your\n-program into proprietary programs. If your program is a subroutine\n-library, you may consider it more useful to permit linking proprietary\n-applications with the library. If this is what you want to do, use the\n-GNU Lesser General Public License instead of this License. But first,\n-please read https://www.gnu.org/licenses/why-not-lgpl.html.\n\\ No newline at end of file"}, {"sha": "92bf73bcb0a828bc6a4880c2d5d3592ea5b0f5d8", "filename": "doc/indices-and-tables.rst", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Findices-and-tables.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,13 +0,0 @@\n-.. only:: html\n-\n-  Indexes and tables\n-  ==================\n-\n-  :ref:`genindex`\n-\n-  .. only:: development\n-\n-    TODO\n-    ----\n-\n-    .. todolist::\n\\ No newline at end of file"}, {"sha": "845de30d8d48e9d853d5d0e87d671d9840c7d010", "filename": "doc/lgpl-2.1.rst", "status": "removed", "additions": 0, "deletions": 514, "changes": 514, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Flgpl-2.1.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Flgpl-2.1.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Flgpl-2.1.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,514 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-GNU LESSER GENERAL PUBLIC LICENSE\n----------------------------------\n-\n-.. index:: LGPL, Lesser General Public License\n-\n-Version 2.1, February 1999\n-\n-Copyright (C) 1991-2022 Free Software Foundation, Inc.\n-51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA\n-\n-Everyone is permitted to copy and distribute verbatim copies\n-of this license document, but changing it is not allowed.\n-\n-[This is the first released version of the Lesser GPL.  It also counts\n-as the successor of the GNU Library Public License, version 2, hence the\n-version number 2.1.]\n-\n-Preamble\n-^^^^^^^^\n-\n-The licenses for most software are designed to take away your\n-freedom to share and change it.  By contrast, the GNU General Public\n-Licenses are intended to guarantee your freedom to share and change\n-free software---to make sure the software is free for all its users.\n-\n-This license, the Lesser General Public License, applies to some\n-specially designated software---typically libraries---of the Free\n-Software Foundation and other authors who decide to use it.  You can use\n-it too, but we suggest you first think carefully about whether this\n-license or the ordinary General Public License is the better strategy to\n-use in any particular case, based on the explanations below.\n-\n-When we speak of free software, we are referring to freedom of use,\n-not price.  Our General Public Licenses are designed to make sure that\n-you have the freedom to distribute copies of free software (and charge\n-for this service if you wish); that you receive source code or can get\n-it if you want it; that you can change the software and use pieces of it\n-in new free programs; and that you are informed that you can do these\n-things.\n-\n-To protect your rights, we need to make restrictions that forbid\n-distributors to deny you these rights or to ask you to surrender these\n-rights.  These restrictions translate to certain responsibilities for\n-you if you distribute copies of the library or if you modify it.\n-\n-For example, if you distribute copies of the library, whether gratis\n-or for a fee, you must give the recipients all the rights that we gave\n-you.  You must make sure that they, too, receive or can get the source\n-code.  If you link other code with the library, you must provide\n-complete object files to the recipients, so that they can relink them\n-with the library after making changes to the library and recompiling\n-it.  And you must show them these terms so they know their rights.\n-\n-We protect your rights with a two-step method: (1) we copyright the\n-library, and (2) we offer you this license, which gives you legal\n-permission to copy, distribute and/or modify the library.\n-\n-To protect each distributor, we want to make it very clear that\n-there is no warranty for the free library.  Also, if the library is\n-modified by someone else and passed on, the recipients should know\n-that what they have is not the original version, so that the original\n-author's reputation will not be affected by problems that might be\n-introduced by others.\n-\n-Finally, software patents pose a constant threat to the existence of\n-any free program.  We wish to make sure that a company cannot\n-effectively restrict the users of a free program by obtaining a\n-restrictive license from a patent holder.  Therefore, we insist that\n-any patent license obtained for a version of the library must be\n-consistent with the full freedom of use specified in this license.\n-\n-Most GNU software, including some libraries, is covered by the\n-ordinary GNU General Public License.  This license, the GNU Lesser\n-General Public License, applies to certain designated libraries, and\n-is quite different from the ordinary General Public License.  We use\n-this license for certain libraries in order to permit linking those\n-libraries into non-free programs.\n-\n-When a program is linked with a library, whether statically or using\n-a shared library, the combination of the two is legally speaking a\n-combined work, a derivative of the original library.  The ordinary\n-General Public License therefore permits such linking only if the\n-entire combination fits its criteria of freedom.  The Lesser General\n-Public License permits more lax criteria for linking other code with\n-the library.\n-\n-We call this license the :dfn:`Lesser` General Public License because it\n-does *Less* to protect the user's freedom than the ordinary General\n-Public License.  It also provides other free software developers Less\n-of an advantage over competing non-free programs.  These disadvantages\n-are the reason we use the ordinary General Public License for many\n-libraries.  However, the Lesser license provides advantages in certain\n-special circumstances.\n-\n-For example, on rare occasions, there may be a special need to\n-encourage the widest possible use of a certain library, so that it becomes\n-a de-facto standard.  To achieve this, non-free programs must be\n-allowed to use the library.  A more frequent case is that a free\n-library does the same job as widely used non-free libraries.  In this\n-case, there is little to gain by limiting the free library to free\n-software only, so we use the Lesser General Public License.\n-\n-In other cases, permission to use a particular library in non-free\n-programs enables a greater number of people to use a large body of\n-free software.  For example, permission to use the GNU C Library in\n-non-free programs enables many more people to use the whole GNU\n-operating system, as well as its variant, the GNU/Linux operating\n-system.\n-\n-Although the Lesser General Public License is Less protective of the\n-users' freedom, it does ensure that the user of a program that is\n-linked with the Library has the freedom and the wherewithal to run\n-that program using a modified version of the Library.\n-\n-The precise terms and conditions for copying, distribution and\n-modification follow.  Pay close attention to the difference between a\n-'work based on the library' and a 'work that uses the library'.  The\n-former contains code derived from the library, whereas the latter must\n-be combined with the library in order to run.\n-\n-#. This License Agreement applies to any software library or other program\n-    which contains a notice placed by the copyright holder or other\n-    authorized party saying it may be distributed under the terms of this\n-    Lesser General Public License (also called 'this License').  Each\n-    licensee is addressed as 'you'.\n-\n-    A 'library' means a collection of software functions and/or data\n-    prepared so as to be conveniently linked with application programs\n-    (which use some of those functions and data) to form executables.\n-\n-    The 'Library', below, refers to any such software library or work\n-    which has been distributed under these terms.  A 'work based on the\n-    Library' means either the Library or any derivative work under\n-    copyright law: that is to say, a work containing the Library or a\n-    portion of it, either verbatim or with modifications and/or translated\n-    straightforwardly into another language.  (Hereinafter, translation is\n-    included without limitation in the term 'modification'.)\n-\n-    'Source code' for a work means the preferred form of the work for\n-    making modifications to it.  For a library, complete source code means\n-    all the source code for all modules it contains, plus any associated\n-    interface definition files, plus the scripts used to control compilation\n-    and installation of the library.\n-\n-    Activities other than copying, distribution and modification are not\n-    covered by this License; they are outside its scope.  The act of\n-    running a program using the Library is not restricted, and output from\n-    such a program is covered only if its contents constitute a work based\n-    on the Library (independent of the use of the Library in a tool for\n-    writing it).  Whether that is true depends on what the Library does\n-    and what the program that uses the Library does.\n-\n-#. You may copy and distribute verbatim copies of the Library's\n-    complete source code as you receive it, in any medium, provided that\n-    you conspicuously and appropriately publish on each copy an\n-    appropriate copyright notice and disclaimer of warranty; keep intact\n-    all the notices that refer to this License and to the absence of any\n-    warranty; and distribute a copy of this License along with the\n-    Library.\n-\n-    You may charge a fee for the physical act of transferring a copy,\n-    and you may at your option offer warranty protection in exchange for a\n-    fee.\n-\n-#. You may modify your copy or copies of the Library or any portion\n-    of it, thus forming a work based on the Library, and copy and\n-    distribute such modifications or work under the terms of Section 1\n-    above, provided that you also meet all of these conditions:\n-\n-    a* The modified work must itself be a software library.\n-\n-    * You must cause the files modified to carry prominent notices\n-      stating that you changed the files and the date of any change.\n-\n-    * You must cause the whole of the work to be licensed at no\n-      charge to all third parties under the terms of this License.\n-\n-    * If a facility in the modified Library refers to a function or a\n-      table of data to be supplied by an application program that uses\n-      the facility, other than as an argument passed when the facility\n-      is invoked, then you must make a good faith effort to ensure that,\n-      in the event an application does not supply such function or\n-      table, the facility still operates, and performs whatever part of\n-      its purpose remains meaningful.\n-\n-      (For example, a function in a library to compute square roots has\n-      a purpose that is entirely well-defined independent of the\n-      application.  Therefore, Subsection 2d requires that any\n-      application-supplied function or table used by this function must\n-      be optional: if the application does not supply it, the square\n-      root function must still compute square roots.)\n-\n-    These requirements apply to the modified work as a whole.  If\n-    identifiable sections of that work are not derived from the Library,\n-    and can be reasonably considered independent and separate works in\n-    themselves, then this License, and its terms, do not apply to those\n-    sections when you distribute them as separate works.  But when you\n-    distribute the same sections as part of a whole which is a work based\n-    on the Library, the distribution of the whole must be on the terms of\n-    this License, whose permissions for other licensees extend to the\n-    entire whole, and thus to each and every part regardless of who wrote\n-    it.\n-\n-    Thus, it is not the intent of this section to claim rights or contest\n-    your rights to work written entirely by you; rather, the intent is to\n-    exercise the right to control the distribution of derivative or\n-    collective works based on the Library.\n-\n-    In addition, mere aggregation of another work not based on the Library\n-    with the Library (or with a work based on the Library) on a volume of\n-    a storage or distribution medium does not bring the other work under\n-    the scope of this License.\n-\n-#. You may opt to apply the terms of the ordinary GNU General Public\n-    License instead of this License to a given copy of the Library.  To do\n-    this, you must alter all the notices that refer to this License, so\n-    that they refer to the ordinary GNU General Public License, version 2,\n-    instead of to this License.  (If a newer version than version 2 of the\n-    ordinary GNU General Public License has appeared, then you can specify\n-    that version instead if you wish.)  Do not make any other change in\n-    these notices.\n-\n-    Once this change is made in a given copy, it is irreversible for\n-    that copy, so the ordinary GNU General Public License applies to all\n-    subsequent copies and derivative works made from that copy.\n-\n-    This option is useful when you wish to copy part of the code of\n-    the Library into a program that is not a library.\n-\n-#. You may copy and distribute the Library (or a portion or\n-    derivative of it, under Section 2) in object code or executable form\n-    under the terms of Sections 1 and 2 above provided that you accompany\n-    it with the complete corresponding machine-readable source code, which\n-    must be distributed under the terms of Sections 1 and 2 above on a\n-    medium customarily used for software interchange.\n-\n-    If distribution of object code is made by offering access to copy\n-    from a designated place, then offering equivalent access to copy the\n-    source code from the same place satisfies the requirement to\n-    distribute the source code, even though third parties are not\n-    compelled to copy the source along with the object code.\n-\n-#. A program that contains no derivative of any portion of the\n-    Library, but is designed to work with the Library by being compiled or\n-    linked with it, is called a 'work that uses the Library'.  Such a\n-    work, in isolation, is not a derivative work of the Library, and\n-    therefore falls outside the scope of this License.\n-\n-    However, linking a 'work that uses the Library' with the Library\n-    creates an executable that is a derivative of the Library (because it\n-    contains portions of the Library), rather than a 'work that uses the\n-    library'.  The executable is therefore covered by this License.\n-    Section 6 states terms for distribution of such executables.\n-\n-    When a 'work that uses the Library' uses material from a header file\n-    that is part of the Library, the object code for the work may be a\n-    derivative work of the Library even though the source code is not.\n-    Whether this is true is especially significant if the work can be\n-    linked without the Library, or if the work is itself a library.  The\n-    threshold for this to be true is not precisely defined by law.\n-\n-    If such an object file uses only numerical parameters, data\n-    structure layouts and accessors, and small macros and small inline\n-    functions (ten lines or less in length), then the use of the object\n-    file is unrestricted, regardless of whether it is legally a derivative\n-    work.  (Executables containing this object code plus portions of the\n-    Library will still fall under Section 6.)\n-\n-    Otherwise, if the work is a derivative of the Library, you may\n-    distribute the object code for the work under the terms of Section 6.\n-    Any executables containing that work also fall under Section 6,\n-    whether or not they are linked directly with the Library itself.\n-\n-#. As an exception to the Sections above, you may also combine or\n-    link a 'work that uses the Library' with the Library to produce a\n-    work containing portions of the Library, and distribute that work\n-    under terms of your choice, provided that the terms permit\n-    modification of the work for the customer's own use and reverse\n-    engineering for debugging such modifications.\n-\n-    You must give prominent notice with each copy of the work that the\n-    Library is used in it and that the Library and its use are covered by\n-    this License.  You must supply a copy of this License.  If the work\n-    during execution displays copyright notices, you must include the\n-    copyright notice for the Library among them, as well as a reference\n-    directing the user to the copy of this License.  Also, you must do one\n-    of these things:\n-\n-    a* Accompany the work with the complete corresponding\n-      machine-readable source code for the Library including whatever\n-      changes were used in the work (which must be distributed under\n-      Sections 1 and 2 above); and, if the work is an executable linked\n-      with the Library, with the complete machine-readable 'work that\n-      uses the Library', as object code and/or source code, so that the\n-      user can modify the Library and then relink to produce a modified\n-      executable containing the modified Library.  (It is understood\n-      that the user who changes the contents of definitions files in the\n-      Library will not necessarily be able to recompile the application\n-      to use the modified definitions.)\n-\n-    * Use a suitable shared library mechanism for linking with the Library.  A\n-      suitable mechanism is one that (1) uses at run time a copy of the\n-      library already present on the user's computer system, rather than\n-      copying library functions into the executable, and (2) will operate\n-      properly with a modified version of the library, if the user installs\n-      one, as long as the modified version is interface-compatible with the\n-      version that the work was made with.\n-\n-    * Accompany the work with a written offer, valid for at\n-      least three years, to give the same user the materials\n-      specified in Subsection 6a, above, for a charge no more\n-      than the cost of performing this distribution.\n-\n-    * If distribution of the work is made by offering access to copy\n-      from a designated place, offer equivalent access to copy the above\n-      specified materials from the same place.\n-\n-    * Verify that the user has already received a copy of these\n-      materials or that you have already sent this user a copy.\n-\n-    For an executable, the required form of the 'work that uses the\n-    Library' must include any data and utility programs needed for\n-    reproducing the executable from it.  However, as a special exception,\n-    the materials to be distributed need not include anything that is\n-    normally distributed (in either source or binary form) with the major\n-    components (compiler, kernel, and so on) of the operating system on\n-    which the executable runs, unless that component itself accompanies the\n-    executable.\n-\n-    It may happen that this requirement contradicts the license\n-    restrictions of other proprietary libraries that do not normally\n-    accompany the operating system.  Such a contradiction means you cannot\n-    use both them and the Library together in an executable that you\n-    distribute.\n-\n-#. You may place library facilities that are a work based on the\n-    Library side-by-side in a single library together with other library\n-    facilities not covered by this License, and distribute such a combined\n-    library, provided that the separate distribution of the work based on\n-    the Library and of the other library facilities is otherwise\n-    permitted, and provided that you do these two things:\n-\n-    a* Accompany the combined library with a copy of the same work\n-      based on the Library, uncombined with any other library\n-      facilities.  This must be distributed under the terms of the\n-      Sections above.\n-\n-    * Give prominent notice with the combined library of the fact\n-      that part of it is a work based on the Library, and explaining\n-      where to find the accompanying uncombined form of the same work.\n-\n-#. You may not copy, modify, sublicense, link with, or distribute\n-    the Library except as expressly provided under this License.  Any\n-    attempt otherwise to copy, modify, sublicense, link with, or\n-    distribute the Library is void, and will automatically terminate your\n-    rights under this License.  However, parties who have received copies,\n-    or rights, from you under this License will not have their licenses\n-    terminated so long as such parties remain in full compliance.\n-\n-#. You are not required to accept this License, since you have not\n-    signed it.  However, nothing else grants you permission to modify or\n-    distribute the Library or its derivative works.  These actions are\n-    prohibited by law if you do not accept this License.  Therefore, by\n-    modifying or distributing the Library (or any work based on the\n-    Library), you indicate your acceptance of this License to do so, and\n-    all its terms and conditions for copying, distributing or modifying\n-    the Library or works based on it.\n-\n-#. Each time you redistribute the Library (or any work based on the\n-    Library), the recipient automatically receives a license from the\n-    original licensor to copy, distribute, link with or modify the Library\n-    subject to these terms and conditions.  You may not impose any further\n-    restrictions on the recipients' exercise of the rights granted herein.\n-    You are not responsible for enforcing compliance by third parties with\n-    this License.\n-\n-#. If, as a consequence of a court judgment or allegation of patent\n-    infringement or for any other reason (not limited to patent issues),\n-    conditions are imposed on you (whether by court order, agreement or\n-    otherwise) that contradict the conditions of this License, they do not\n-    excuse you from the conditions of this License.  If you cannot\n-    distribute so as to satisfy simultaneously your obligations under this\n-    License and any other pertinent obligations, then as a consequence you\n-    may not distribute the Library at all.  For example, if a patent\n-    license would not permit royalty-free redistribution of the Library by\n-    all those who receive copies directly or indirectly through you, then\n-    the only way you could satisfy both it and this License would be to\n-    refrain entirely from distribution of the Library.\n-\n-    If any portion of this section is held invalid or unenforceable under any\n-    particular circumstance, the balance of the section is intended to apply,\n-    and the section as a whole is intended to apply in other circumstances.\n-\n-    It is not the purpose of this section to induce you to infringe any\n-    patents or other property right claims or to contest validity of any\n-    such claims; this section has the sole purpose of protecting the\n-    integrity of the free software distribution system which is\n-    implemented by public license practices.  Many people have made\n-    generous contributions to the wide range of software distributed\n-    through that system in reliance on consistent application of that\n-    system; it is up to the author/donor to decide if he or she is willing\n-    to distribute software through any other system and a licensee cannot\n-    impose that choice.\n-\n-    This section is intended to make thoroughly clear what is believed to\n-    be a consequence of the rest of this License.\n-\n-#. If the distribution and/or use of the Library is restricted in\n-    certain countries either by patents or by copyrighted interfaces, the\n-    original copyright holder who places the Library under this License may add\n-    an explicit geographical distribution limitation excluding those countries,\n-    so that distribution is permitted only in or among countries not thus\n-    excluded.  In such case, this License incorporates the limitation as if\n-    written in the body of this License.\n-\n-#. The Free Software Foundation may publish revised and/or new\n-    versions of the Lesser General Public License from time to time.\n-    Such new versions will be similar in spirit to the present version,\n-    but may differ in detail to address new problems or concerns.\n-\n-    Each version is given a distinguishing version number.  If the Library\n-    specifies a version number of this License which applies to it and\n-    'any later version', you have the option of following the terms and\n-    conditions either of that version or of any later version published by\n-    the Free Software Foundation.  If the Library does not specify a\n-    license version number, you may choose any version ever published by\n-    the Free Software Foundation.\n-\n-#. If you wish to incorporate parts of the Library into other free\n-    programs whose distribution conditions are incompatible with these,\n-    write to the author to ask for permission.  For software which is\n-    copyrighted by the Free Software Foundation, write to the Free\n-    Software Foundation; we sometimes make exceptions for this.  Our\n-    decision will be guided by the two goals of preserving the free status\n-    of all derivatives of our free software and of promoting the sharing\n-    and reuse of software generally.\n-\n-    NO WARRANTY\n-\n-#. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\n-    WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\n-    EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\n-    OTHER PARTIES PROVIDE THE LIBRARY 'AS IS' WITHOUT WARRANTY OF ANY\n-    KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\n-    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n-    PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\n-    LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\n-    THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n-\n-#. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\n-    WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\n-    AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\n-    FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n-    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\n-    LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\n-    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\n-    FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\n-    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n-    DAMAGES.\n-\n-How to Apply These Terms to Your New Libraries\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If you develop a new library, and you want it to be of the greatest\n-possible use to the public, we recommend making it free software that\n-everyone can redistribute and change.  You can do so by permitting\n-redistribution under these terms (or, alternatively, under the terms of the\n-ordinary General Public License).\n-\n-To apply these terms, attach the following notices to the library.  It is\n-safest to attach them to the start of each source file to most effectively\n-convey the exclusion of warranty; and each file should have at least the\n-'copyright' line and a pointer to where the full notice is found.\n-\n-.. code-block::\n-\n-    one line to give the library's name and an idea of what it does.\n-    Copyright (C) year  name of author\n-\n-    This library is free software; you can redistribute it and/or modify it\n-    under the terms of the GNU Lesser General Public License as published by\n-    the Free Software Foundation; either version 2.1 of the License, or (at\n-    your option) any later version.\n-\n-    This library is distributed in the hope that it will be useful, but\n-    WITHOUT ANY WARRANTY; without even the implied warranty of\n-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-    Lesser General Public License for more details.\n-\n-    You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-    USA.\n-\n-Also add information on how to contact you by electronic and paper mail.\n-\n-You should also get your employer (if you work as a programmer) or your\n-school, if any, to sign a 'copyright disclaimer' for the library, if\n-necessary.  Here is a sample; alter the names:\n-\n-.. code-block::\n-\n-    Yoyodyne, Inc., hereby disclaims all copyright interest in the library\n-    `Frob' (a library for tweaking knobs) written by James Random Hacker.\n-\n-    signature of Ty Coon, 1 April 1990\n-    Ty Coon, President of Vice\n-\n-That's all there is to it!\n\\ No newline at end of file"}, {"sha": "4ba78b166b48cac48f56298288b55b9a92bf276b", "filename": "doc/logo.pdf", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Flogo.pdf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Flogo.pdf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Flogo.pdf?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "0b8ed020c8978caeb36c7fc15885856203218842", "filename": "doc/logo.svg", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Flogo.svg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Flogo.svg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Flogo.svg?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,108 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<svg\n-   height=\"540\"\n-   width=\"1200\"\n-   version=\"1.0\"\n-   viewBox=\"-67.8426 -135.03825 587.9692 546.90491\"\n-   id=\"svg128\"\n-   sodipodi:docname=\"GNU_Compiler_Collection-Logo.wine.svg\"\n-   inkscape:version=\"1.1.1 (3bf5ae0d25, 2021-09-20)\"\n-   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n-   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n-   xmlns=\"http://www.w3.org/2000/svg\"\n-   xmlns:svg=\"http://www.w3.org/2000/svg\">\n-  <defs\n-     id=\"defs132\" />\n-  <sodipodi:namedview\n-     id=\"namedview130\"\n-     pagecolor=\"#ffffff\"\n-     bordercolor=\"#666666\"\n-     borderopacity=\"1.0\"\n-     inkscape:pageshadow=\"2\"\n-     inkscape:pageopacity=\"0.0\"\n-     inkscape:pagecheckerboard=\"0\"\n-     showgrid=\"false\"\n-     inkscape:zoom=\"1.0925\"\n-     inkscape:cx=\"374.82838\"\n-     inkscape:cy=\"287.41419\"\n-     inkscape:window-width=\"1920\"\n-     inkscape:window-height=\"1131\"\n-     inkscape:window-x=\"0\"\n-     inkscape:window-y=\"0\"\n-     inkscape:window-maximized=\"1\"\n-     inkscape:current-layer=\"svg128\" />\n-  <g\n-     fill-rule=\"evenodd\"\n-     id=\"g116\"\n-     transform=\"translate(0,-131.66225)\">\n-    <path\n-       d=\"m 303,44.525 -20.28,31.012 96.148,111.602 c 4.512,-18.463 7.814,1.677 11.502,9.483 9.878,22.334 11.416,47.222 14.496,71.119 5.83,45.229 3.909,71.701 -0.24,96.382 -13.444,79.974 -61.135,126.653 -106.685,153.529 -15.58,9.193 -30.577,15.62 -52.573,18.622 -22.665,3.092 -44.872,1.868 -67.626,-2.566 -18.784,-3.66 -37.677,-9.828 -55.026,-17.78 C 95.053,503.251 72.219,481.309 54.346,457.238 37.056,433.95 26.15,406.161 17.866,378.315 2.8,327.665 -3.57,273.727 8.448,221.622 c 7.49,-32.48 18.292,-64.643 33.064,-94.3 15.676,-31.471 37.71,-59.974 64.381,-83.609 16.017,-14.193 33.428,-27.271 53.03,-35.166 14.378,-5.791 29.598,-7.096 45.31,-6.06 15.537,1.025 30.367,2.765 45.167,8.029 20.14,7.162 39.12,18.366 53.6,34.009 z\"\n-       fill=\"#ffcfab\"\n-       stroke=\"#000000\"\n-       stroke-width=\"4.327\"\n-       id=\"path102\" />\n-    <path\n-       d=\"m 153.818,179.408 -11.16,-28.33 12.019,-6.008 24.038,-3.435 44.64,-54.942 24.895,3.434 16.31,-8.585 12.02,-2.575 -18.886,41.206 -36.914,4.293 z\"\n-       fill=\"#f39105\"\n-       stroke=\"#000000\"\n-       stroke-width=\"1.041\"\n-       id=\"path104\" />\n-    <path\n-       d=\"m 314.352,64.373 19.746,24.895 5.15,8.586 -37.773,-12.878 4.293,-12.018 z\"\n-       fill=\"#ffcfab\"\n-       stroke=\"#000000\"\n-       stroke-width=\"1.041\"\n-       id=\"path106\" />\n-    <path\n-       d=\"m 299.759,83.26 18.886,10.301 19.744,6.01 -26.612,14.594 -19.744,-1.718 -1.718,-13.735 z\"\n-       fill=\"#f39a05\"\n-       stroke=\"#000000\"\n-       stroke-width=\"1.041\"\n-       id=\"path108\" />\n-    <path\n-       d=\"m 154.677,181.125 13.736,22.32 -13.736,35.197 32.622,6.01 6.867,6.867 20.604,31.764 65.244,-34.339 19.422,5.366 20.926,-6.224 -14.594,-15.453 2.575,-4.292 6.868,-4.292 3.434,11.16 6.009,13.735 16.31,19.745 4.293,-2.575 0.859,-12.877 15.16,-2.67 5.35,-4.157 13.393,-1.623 3.44,-16.875 -9.872,-40.777 v -17.17 l 15.453,-2.576 13.735,10.302 19.744,5.151 7.727,-1.717 -23.178,-29.188 -14.248,-14.587 -8.073,-5.157 -15.453,-10.302 -31.763,1.716 -24.895,6.01 -21.463,10.302 -12.876,-1.717 -16.311,-7.727 -5.151,-7.726 -33.48,-0.858 z\"\n-       fill=\"#ab9a7e\"\n-       stroke=\"#000000\"\n-       stroke-width=\"1.041\"\n-       id=\"path110\" />\n-    <path\n-       d=\"m 315.211,223.19 4.292,11.16 -2.575,6.868 -12.877,-7.727 3.434,-6.009 z m 19.745,-46.357 13.735,-12.019 7.726,-0.858 2.576,4.292 -12.018,12.877 -6.868,2.575 z m 24.844,-59.538 -42.014,10.605 -27.472,11.16 -24.037,-6.867 -8.584,-10.302 22.32,-50.65 20.913,-25.9 13.7,-5.426 15.178,2.996 15.724,23.078 16.479,11.037 -1.898,3.338 -24.296,-8.265 -21.462,-9.443 -20.601,31.764 -4.292,11.161 3.434,10.302 55.8,-9.444 5.958,4.951 z m 16.363,6.312 9.835,12.59 6.206,0.175 22.94,25.516 5.706,6.92 10.255,-6.57 12.018,-26.612 6.668,-21.158 0.91,-17.724 -5.505,-6.617 h -19.242 l -14.595,3.434 c 0,0 -12.018,6.01 -8.584,6.01 3.434,0 19.744,5.15 19.744,5.15 l 6.868,5.15 1.718,7.727 -9.444,18.886 -4.292,4.293 -19.745,-12.877 -6.009,-4.293 -6.01,-0.858 z\"\n-       fill=\"#ffffff\"\n-       stroke=\"#000000\"\n-       stroke-width=\"1.041\"\n-       id=\"path112\" />\n-    <path\n-       d=\"m 368.144,223.975 c -0.266,-1.973 -13.507,0 -13.507,0 0,0 -2.314,7.892 1.063,7.892 3.376,0 12.71,-5.919 12.444,-7.892 z\"\n-       fill=\"#ffffff\"\n-       stroke=\"#9e0000\"\n-       stroke-width=\"1.041\"\n-       id=\"path114\" />\n-  </g>\n-  <path\n-     d=\"m 385.627,44.897838 c 1.924,-3.083004 6.639,-2.695004 14.34,2.072004 6.27,3.705008 14.536,4.468012 23.39,5.075012 14.502,0.994 13.344,-1.162004 6.537,-8.021016 l -8.202,-7.358016 c 0,0 3.018,1.747004 8.024,-2.880004 6.702,-6.195012 19.56,-34.70006626 21.84,-55.220105 2.565,-20.807021 -0.856,-23.942021 -23.087,-21.377021 -9.12,1.14 -20.103,3.82 -24.664,6.670001 0,0 -6.513,3.26 -5.515,5.112 0.998,1.853004 9.658,2.754004 9.658,2.754004 16.246,2.565004 20.695,7.940016 20.695,13.925028 0,6.2700117 -8.44,21.7020416 -12.43,21.7020416 -1.425,0 -6.555,-3.9900074 -11.4,-8.5500149 -9.691,-9.4060187 -14.907,-10.6380227 -24.283,-7.851015 -5.265,-1.4430037 -12.908,-2.2020037 -19.081,-5.7500117 -1.513,-0.870004 -0.552,-2.092004 -3.546,-5.855012 -5.412,-6.799012 -9.525,-6.196012 -15.225,-4.770008 -7.126,1.71 -7.41,1.71 -1.995,-2.281008 5.415,-3.990004 5.13,-4.560004 -6.84,-20.236005 l -11.971,-16.247 14.25,7.126 c 14.537,7.41 27.077,9.406 29.928,4.845 1.14,-1.425 -2.85,-5.13 -8.836,-7.98 -5.7,-2.85 -12.54,-9.406 -15.106,-14.251 -2.85,-5.13 -6.556,-11.116 -8.266,-13.396 -4.275,-4.846 -19.19,-7.454 -27.209,-4.421 -8.176,3.092 -13.246,11.403 -19.804,19.996 -5.537,7.254 -8.622,12.728 -11.21,17.135 -5.33,-1.259 -14.457,2.632 -18.162,6.052 -6.27,5.7 -7.695,5.986 -19.951,2.85 -12.256,-3.42 -13.681,-3.135 -20.237,2.85 -3.705,3.706 -13.966,16.532009 -22.801,28.503033 -8.55,12.256023 -16.531,22.2310416 -17.387,22.5160416 -0.855,0 -6.84,0.5699997 -13.11,1.1399997 -6.27,0.570004 -14.821,2.2800077 -19.097,3.9900077 -6.84,2.566008 -7.41,3.706008 -5.415,11.117024 1.425,4.275008 7.695,17.386036 14.25,28.787056 l 11.687,20.52104 -7.126,17.101036 c -3.99,9.406016 -6.555,18.24102 -5.7,19.38202 0.855,1.425 9.12,3.42 18.526,4.56 l 17.101,1.995 13.111,19.666 c 12.256,18.527 14.444,19.564 18.811,17.387 1.47,-0.733 8.551,-5.7 17.957,-10.261 9.405,-4.846 22.231,-11.971 28.502,-16.246 8.872,-5.856 17.855,-7.845 22.615,-6.036 2.886,1.096 4.22,3.588 3.036,7.46 -2.488,7.998 -2.374,12.975 -1.258,18.163 1.944,2.077 4.45,3.027 8.099,5.494 12.578,7.73 17.386,8.266 17.671,0 v -6.27 l 3.135,6.555 c 4.56,9.406 11.971,6.84 13.111,-4.845 0.855,-6.84 -0.855,-11.4 -5.415,-16.246 -3.42,-3.705 -5.2,-8.557 -3.776,-8.557 2.85,0 12.612,13.117 12.612,16.538 0,1.14 1.71,2.28 3.99,2.28 4.275,0 7.41,-5.986 7.41,-14.251 0,-3.15 8.505,-4.926 16.44,-7.738 2.118,-0.75 2.103,-1.813 4.13,-3.2 3.83,0.802 2.57,0.855 5.427,0.652 4.25,-0.302 6.144,-1.5 7.35,-3.395 5.986,-9.69 6.841,-21.94702 2.28,-32.77804 -2.28,-5.700012 -4.274,-17.529036 -3.99,-22.660044 0,0 0.273,-3.388008 1.526,-6.740016 m -33.163,37.666076 c 0,-5.700012 -1.14,-5.700012 -11.4,-0.285 -4.846,2.565004 -8.551,6.556012 -8.551,9.120016 0,6.556008 8.266,15.107008 14.536,15.107008 2.85,0 16.565,2.565 20.304,2.606 -0.08,1.09 -1.658,2.04 -2.698,2.373 -4.318,1.38 -11.374,0.61 -13.9,0.151 -4.561,-0.57 -5.131,0.855 -4.846,9.12 0.57,5.416 0,7.981 -1.14,5.701 -0.855,-2.28 -4.846,-7.41 -9.12,-11.4 -4.561,-4.276 -7.696,-11.116 -8.266,-17.102 C 321.301,90.86293 315.601,80.60191 304.2,70.91189 292.23,60.93587 287.67,52.955854 289.95,44.974838 c 1.14,-4.560008 3.705,-6.270012 9.12,-6.270012 9.69,-0.285 27.932,-8.551016 39.618,-18.242036 15.39,-13.3960234 10.26,-13.9660274 -7.98,-1.14 -15.107,10.54602 -19.382,12.256024 -36.483,13.111024 l -19.097,1.425004 9.406,-9.69002 c 4.845,-5.130008 9.12,-10.26102 9.12,-11.401024 0,-5.9860114 26.222,-17.1010297 45.889,-19.3820334 27.932,-3.1350079 29.357,-2.8500079 31.067,6.55601084 1.995,10.83001856 8.265,13.39602656 6.555,2.56500376 -1.14,-7.6950109 -1.14,-7.6950109 3.136,-2.56500376 2.565,3.13500776 4.56,8.83601486 4.56,12.82602256 0,3.990008 0.855,10.26002 1.71,13.680028 1.425,4.846012 0,6.271012 -7.41,7.981016 l -9.406,1.995004 1.995,16.817032 c 0.855,9.12002 3.705,21.376044 5.985,27.361056 4.276,9.97602 3.42,27.64704 -1.425,30.78304 -1.14,0.855 -8.265,0.57 -15.39,-0.285 -11.687,-1.71 -13.112,-2.566 -13.112,-9.406 M 326.432,-87.844308 c 2.565,1.14 7.125,6.84 9.976,12.826 3.135,5.985 8.55,12.826 11.97,15.106 3.495,2.483 12.566,6.022 12.045,6.512 -1.095,1.03 -17.58,-4.14 -28.006,-9.933 -7.98,-4.56 -16.246,-7.695 -18.241,-6.84 -2.28,0.57 -8.836,8.836 -15.106,18.526 -12.54,19.382001 -14.821,34.488029 -5.7,37.623033 5.415,1.710004 45.598,-7.799016 52.158,-8.836016 4.746,-0.750004 10.83,3.990008 10.83,7.410016 0,1.14 -8.55,2.851004 -18.81,3.706004 -12.256,1.140004 -23.372,4.2750076 -31.638,9.120019 -14.82,8.2660149 -23.371,8.8360146 -35.057,2.85000344 -11.686,-5.98501114 -11.116,-12.25502244 5.7,-45.88705944 18.527,-37.908 31.638,-49.024 49.879,-42.183 z m -1.425,34.487 c 12.256,18.526001 12.256,17.671001 3.705,15.391001 -12.54,-3.705001 -22.369,-9.513001 -24.73,-11.075001 2.04,-4.487 7.059,-14.862 10.479,-14.862 1.995,0 6.555,4.846 10.546,10.546 z m -54.154,4.846 c 0,0.57 -3.135,7.98 -7.126,16.816001 -6.555,13.966024 -8.265,15.676028 -17.956,17.386032 -5.7,0.855 -14.25,1.710004 -19.096,1.710004 -6.84,0 -13.396,4.5600077 -31.352,22.2320413 C 182.782,21.887794 168.531,34.713818 163.686,38.134826 l -8.836,5.985012 -5.13,-11.400024 c -6.27,-13.967028 -4.56,-16.247032 15.106,-17.957036 16.246,-1.425 17.956,-2.565004 31.067,-21.6620374 4.845,-7.1250156 13.68,-18.5260356 19.951,-25.3660476 9.69,-11.116001 11.686,-12.256001 17.101,-9.121001 9.121,4.845 19.382,3.705001 26.792,-2.565 6.27,-5.13 11.116,-7.126 11.116,-4.56 z m 51.019,13.965 12.54,3.990001 -9.69,4.846008 c -5.13,2.565008 -13.966,5.415012 -19.667,6.270016 -12.826,1.996004 -15.39,-1.995004 -9.69,-15.390024 2.352,-5.973001 3.931,-7.340001 5.25,-9.510001 1.484,0.567 14.416,7.514001 21.257,9.794 z m 126.963,6.086005 c 0.57,9.97602 -3.55,22.9870433 -9.25,36.9520693 C 430.749,30.72381 421.955,39.36683 416.824,30.24581 413.86,25.058802 406.978,14.679778 395.487,5.2477629 c -0.863,-0.709004 -1.98,-1.8550037 -4.438,-2.4200037 -3.59,-0.827004 -4.584,0.584 -5.518,-0.136004 -4.812,-6.4400112 -4.66,-9.3060146 1.61,-9.5900146 3.42,0 8.55,2.5650037 11.4,5.98501114 2.566,3.13500346 8.266,7.69501086 12.257,9.69001456 6.84,3.7060077 7.98,3.4200077 13.966,-2.8500034 4.56,-4.8450074 7.146,-11.7470226 7.599,-20.4800379 0.446,-8.592016 -2.754,-13.437028 -17.29,-16.572032 -4.275,-0.855 -12.722,-0.744 -11.582,-1.6 2.565,-2.565 27.258,-7.806001 35.524,-7.520001 6.555,0.57 9.553,-0.112 9.82,11.785005 z M 269.713,5.6417629 c 5.415,2.5650034 11.686,4.5600071 13.966,4.5600071 7.41,0 -1.425,10.54602 -13.396,15.962032 -5.985,2.565004 -10.83,5.700012 -10.83,6.840012 0,1.140004 5.7,3.135008 12.825,4.275012 11.4,1.426 12.826,2.566004 11.4,7.411012 -2.85,9.12002 3.421,20.52104 17.387,32.492064 11.116,9.12002 12.541,11.401024 9.12,14.536028 -2.85,2.850008 -7.125,3.420008 -16.53,1.710004 l -12.826,-2.280004 0.855,-14.820028 c 0.855,-16.247032 -3.42,-20.23704 -6.27,-5.986012 -4.276,21.661044 -1.71,25.652052 18.526,29.357056 5.7,0.855004 13.11,4.845004 16.53,8.550004 l 6.271,6.84 -8.265,2.851 c -4.846,1.71 -9.691,1.995 -10.831,0.57 -5.986,-5.13 -20.237,-5.13 -28.217,0 l -8.266,5.416 -11.4,-9.121 C 233.8,102.54895 231.805,99.413946 226.39,82.312914 222.4,68.631886 218.124,62.075874 215.274,64.925878 c -0.57,0.57 1.425,8.83602 4.845,18.812036 5.416,16.816036 13.111,27.077036 29.358,38.762036 3.135,2.28 5.13,4.56 4.275,5.416 -1.995,1.71 -36.483,19.096 -38.193,19.096 -0.855,0 -6.84,-8.265 -13.396,-18.526 -10.26,-15.961 -13.11,-18.526 -20.806,-18.811 -4.846,-0.286 -12.256,-1.14 -16.531,-2.28 l -7.41,-1.71 6.84,-16.532024 7.125,-16.531032 -6.27,-9.97602 c -3.706,-6.270012 -5.13,-11.686024 -3.99,-14.820028 1.995,-4.276008 2.565,-3.991008 3.99,1.710004 2.28,8.835016 6.84,8.265016 7.41,-0.856004 0,-3.990008 3.99,-10.83002 8.266,-15.106028 4.56,-4.275008 7.41,-6.270012 6.27,-4.275008 -1.995,3.990008 0.855,12.256024 4.275,12.256024 1.426,0 2.566,-4.276008 2.566,-9.40602 0,-6.555012 3.135,-12.540024 11.4,-21.946044 9.691,-11.11601826 11.116,-11.9710223 11.401,-6.5560108 0,3.7050074 1.71,6.5560108 3.705,6.5560108 2.566,0 3.42,-2.5660034 2.566,-8.2660148 l -1.14,-8.5500146 16.53,-0.856004 c 13.112,-0.5699999 17.387,0.285004 19.097,3.7060074 1.425,2.5650077 6.84,6.8400152 12.256,9.4050189 z m 80.732,89.2581751 c -0.223,1.481004 0.336,3.408008 0.966,4.551008 2.918,5.304004 11.358,3.511004 18.059,-4.027008 3.99,-4.276008 3.99,-5.416008 0.57,-6.841012 -4.01,-1.755004 -15.928,-0.137 -17.815,1.794004 -1.134,1.16 -1.557,3.046004 -1.78,4.523008 z m 55.792,-73.582144 c 3.136,3.990008 8.551,11.68602 12.256,16.817032 0,0 2.398,2.973004 5.164,5.682012 2.765,2.708004 5.899,5.152008 5.899,5.152008 0,0 -4.589,0.22 -14.483,-2.569004 -22.732,-6.408012 -24.227,-9.69002 -22.517,-16.531032 1.426,-5.415012 1.996,-5.415012 9.406,1.710004 3.99,3.990008 8.55,6.270012 9.406,5.130008 3.135,-2.850004 -12.256,-17.670032 -16.816,-15.960032 -3.99,1.424004 -7.574,-9.238016 -6.573,-14.1160274 0.27,-1.3169997 1.602,-1.3559997 3.366,-0.595 3.531,1.523004 8.456,7.2340154 14.892,15.2800314 z M 381.156,40.69983 c -1.14,0.855004 -2.85,0.855004 -3.99,0 -0.856,-1.14 0,-1.995004 1.995,-1.995004 1.995,0 2.85,0.855004 1.995,1.995004 z m -39.048,59.284116 c 0,7.410004 -3.99,9.405004 -7.126,4.275004 -2.565,-3.99 0.285,-11.400016 4.276,-11.400016 1.425,0 2.85,3.135008 2.85,7.125012 z m 23.712,-6.593012 c 0,1.568004 -9.047,6.954016 -10.242,3.605008 -1.23,-3.444008 1.287,-4.303008 4.408,-4.593008 3.269,-0.303 5.834,-0.580004 5.834,0.988 z m -49.364,6.593012 c 0,2.280004 -1.14,4.275004 -2.565,4.275004 -3.705,0 -6.27,-4.560004 -3.99,-6.840008 3.135,-3.136004 6.555,-1.710004 6.555,2.565004 z\"\n-     id=\"path118\" />\n-  <path\n-     d=\"m 356.929,26.447802 c 4.275,4.276008 8.836,6.841016 9.69,5.701012 2.85,-2.850004 -7.41,-13.396028 -12.825,-13.396028 -3.135,0 -2.28,1.995004 3.135,7.696016 z m -18.526,10.831024 c -6.27,5.986008 -7.126,8.551016 -4.846,12.826024 1.71,3.136004 5.13,5.700012 7.41,5.700012 5.986,0 21.947,-16.245032 20.522,-20.806044 -2.28,-6.555012 -14.82,-5.415008 -23.086,2.280008 z m 17.956,-1.425004 c 0,1.425004 -1.995,2.850004 -4.275,2.850004 -2.28,0 -5.416,2.566008 -7.126,5.701012 -1.71,3.135008 -4.56,4.845008 -6.27,3.990008 -1.995,-1.425004 -0.57,-4.560008 4.56,-8.835016 8.266,-6.840016 13.11,-8.266016 13.11,-3.706008 z\"\n-     id=\"path120\" />\n-  <path\n-     d=\"m 315.818,92.182934 c 0,0 -1.9,2.033004 -4.078,3.564004 -2.177,1.531004 -4.936,2.560008 -4.936,2.560008 0,0 10.265,13.270004 11.767,11.553004 1.503,-1.717 0.414,-4.67 -0.23,-8.533 -0.65,-3.904008 -2.523,-9.144016 -2.523,-9.144016 z\"\n-     fill=\"#ffcfab\"\n-     fill-rule=\"evenodd\"\n-     stroke=\"#000000\"\n-     stroke-width=\"1.291\"\n-     id=\"path122\" />\n-  <path\n-     d=\"m 112.598,300.82495 c -13.66,0 -24.324,-3.37 -31.996,-10.111 -7.672,-6.741 -11.508,-16.32 -11.508,-28.737 0,-9.136 1.408,-17.583 4.224,-25.344 2.816,-7.76 6.907,-14.523 12.273,-20.29 5.322,-5.72 11.852,-10.2 19.59,-13.436 7.738,-3.237 16.44,-4.856 26.109,-4.856 5.81,0 11.608,0.698 17.395,2.095 5.787,1.397 11.696,3.67 17.728,6.818 l -2.993,15.034 h -1.198 c -4.922,-4.612 -10.277,-7.949 -16.065,-10.01 -5.787,-2.063 -12.007,-3.094 -18.659,-3.094 -7.317,0 -13.725,1.442 -19.224,4.324 -5.499,2.883 -10.133,6.719 -13.903,11.508 -3.68,4.7 -6.463,10.178 -8.348,16.43 -1.885,6.253 -2.827,12.55 -2.827,18.892 0,9.535 2.605,16.896 7.816,22.085 5.21,5.189 12.916,7.783 23.116,7.783 4.479,0 8.68,-0.41 12.606,-1.23 3.924,-0.821 7.616,-1.874 11.076,-3.16 l 5.588,-25.344 H 116.99 l 2.527,-11.11 h 39.646 l -9.845,42.507 a 2926.464,2926.464 0 0 1 -7.916,3.226 c -2.35,0.953 -5.3,1.94 -8.847,2.96 a 90.918,90.918 0 0 1 -9.479,2.195 c -3.26,0.577 -6.752,0.865 -10.477,0.865 z m 102.37,-0.13 c -12.55,0 -22.395,-3.249 -29.535,-9.745 -7.14,-6.497 -10.71,-15.71 -10.71,-27.64 0,-9.135 1.375,-17.65 4.124,-25.543 2.75,-7.894 6.696,-14.812 11.841,-20.754 5.1,-5.854 11.375,-10.477 18.825,-13.87 7.45,-3.392 15.765,-5.088 24.945,-5.088 5.72,0 11.131,0.698 16.231,2.095 5.1,1.397 10.333,3.603 15.7,6.619 l -2.994,14.9 h -0.998 a 75.024,75.024 0 0 0 -4.424,-4.091 c -1.485,-1.264 -3.714,-2.65 -6.685,-4.158 -2.44,-1.286 -5.344,-2.361 -8.714,-3.226 -3.37,-0.865 -7.096,-1.297 -11.175,-1.297 -6.209,0 -11.907,1.297 -17.096,3.891 -5.189,2.595 -9.69,6.22 -13.504,10.876 -3.725,4.524 -6.652,10.022 -8.78,16.497 -2.13,6.475 -3.194,13.371 -3.194,20.688 0,9.136 2.373,16.242 7.118,21.32 4.745,5.078 11.597,7.617 20.555,7.617 4.213,0 8.215,-0.477 12.007,-1.43 3.792,-0.954 7.24,-2.162 10.344,-3.626 2.882,-1.374 5.477,-2.816 7.783,-4.323 2.306,-1.508 4.28,-2.905 5.92,-4.191 h 0.931 l -3.126,15.3 c -4.657,2.35 -10.011,4.468 -16.065,6.353 -6.054,1.884 -12.495,2.827 -19.324,2.827 z m 95.26,0 c -12.55,0 -22.395,-3.249 -29.535,-9.745 -7.14,-6.497 -10.71,-15.71 -10.71,-27.64 0,-9.135 1.375,-17.65 4.124,-25.543 2.75,-7.894 6.696,-14.812 11.841,-20.754 5.1,-5.854 11.375,-10.477 18.825,-13.87 7.45,-3.392 15.765,-5.088 24.945,-5.088 5.72,0 11.131,0.698 16.231,2.095 5.1,1.397 10.333,3.603 15.7,6.619 l -2.994,14.9 h -0.998 a 75.024,75.024 0 0 0 -4.424,-4.091 c -1.485,-1.264 -3.714,-2.65 -6.685,-4.158 -2.44,-1.286 -5.344,-2.361 -8.714,-3.226 -3.37,-0.865 -7.095,-1.297 -11.175,-1.297 -6.209,0 -11.907,1.297 -17.096,3.891 -5.189,2.595 -9.69,6.22 -13.504,10.876 -3.725,4.524 -6.652,10.022 -8.78,16.497 -2.13,6.475 -3.194,13.371 -3.194,20.688 0,9.136 2.373,16.242 7.118,21.32 4.745,5.078 11.597,7.617 20.555,7.617 4.213,0 8.215,-0.477 12.007,-1.43 3.792,-0.954 7.24,-2.162 10.344,-3.626 2.883,-1.374 5.477,-2.816 7.783,-4.323 2.306,-1.508 4.28,-2.905 5.92,-4.191 h 0.931 l -3.126,15.3 c -4.657,2.35 -10.011,4.468 -16.065,6.353 -6.053,1.884 -12.495,2.827 -19.324,2.827 z\"\n-     font-size=\"32.055px\"\n-     font-family=\"Sans\"\n-     letter-spacing=\"0\"\n-     word-spacing=\"0\"\n-     id=\"path124\" />\n-  <path\n-     d=\"m 343.483,91.25093 c -0.91,-4.060008 -11.913,3.490008 -12.065,7.891016 -0.151,4.401004 10.696,12.954004 11.534,9.106004 0.835,-3.832 1.435,-12.967012 0.531,-16.99702 z\"\n-     fill=\"#ffffff\"\n-     fill-rule=\"evenodd\"\n-     stroke=\"#000000\"\n-     stroke-width=\"1.041\"\n-     id=\"path126\" />\n-</svg>"}, {"sha": "55e0711113e4f027a751330430e5cb3d3a5aba2f", "filename": "doc/md.rst", "status": "removed", "additions": 0, "deletions": 3142, "changes": 3142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Fmd.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Fmd.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Fmd.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "f5558030ca8060d36092220569a036581d307106", "filename": "doc/requirements.txt", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/doc%2Frequirements.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/doc%2Frequirements.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/doc%2Frequirements.txt?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,3 +0,0 @@\n-Sphinx>=5.3\n-furo\n-sphinx_copybutton"}, {"sha": "c33f28a2f7f629af0c142fd44bb49fe1b3573187", "filename": "gcc/d/doc/conf.py", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fconf.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,30 +0,0 @@\n-# Configuration file for the Sphinx documentation builder.\n-\n-import sys\n-sys.path.append('../../..//doc')\n-\n-from baseconf import *\n-\n-name = 'gdc'\n-project = 'The GNU D Compiler'\n-copyright = '2006-2022 Free Software Foundation, Inc.'\n-authors = 'David Friedman, Iain Buclaw'\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-latex_documents = [\n-  ('index', f'{name}.tex', project, authors, 'manual'),\n-]\n-\n-# One entry per manual page. List of tuples\n-# (source start file, name, description, authors, manual section).\n-man_pages = [\n-    ('invoking-gdc', name, project, [authors], 1),\n-]\n-\n-texinfo_documents = [\n-  ('index', name, project, authors, None, None, None, True)\n-]\n-\n-set_common(name, globals())\n\\ No newline at end of file"}, {"sha": "5afce611a7a6e644db723d7ea5872b0666332dd9", "filename": "gcc/d/doc/copyright.rst", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fcopyright.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,13 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the GPL license file\n-\n-Copyright\n-^^^^^^^^^\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with no\n-Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n-A copy of the license is in the :ref:`gnu_fdl`.\n\\ No newline at end of file"}, {"sha": "becda773ca07c5f9a543669bc4caf5f0b02b3644", "filename": "gcc/d/doc/general-public-license-3.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fgeneral-public-license-3.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,6 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. include:: ../../../doc/gpl-3.0.rst\n\\ No newline at end of file"}, {"sha": "1de809b36361bd24d402b00bf2051e996ba85af7", "filename": "gcc/d/doc/gnu-free-documentation-license.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Fgnu-free-documentation-license.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,6 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. include:: ../../../doc/gnu_free_documentation_license.rst\n\\ No newline at end of file"}, {"sha": "700a4a8d885d6de37c64ff2096b6b5de65e3e52d", "filename": "gcc/d/doc/index.rst", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Findex.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,22 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-The GNU D Compiler\n-==================\n-\n-This manual describes how to use :command:`gdc`, the GNU compiler for\n-the D programming language.  This manual is specifically about\n-:command:`gdc`.  For more information about the D programming\n-language in general, including language specifications and standard\n-package documentation, see https://dlang.org/.\n-\n-.. toctree::\n-\n-  copyright\n-  invoking-gdc\n-  general-public-license-3\n-  gnu-free-documentation-license\n-\n-  indices-and-tables\n\\ No newline at end of file"}, {"sha": "6c215a391d9ba8d2036df046206d7902829b8c1c", "filename": "gcc/d/doc/indices-and-tables.rst", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Findices-and-tables.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1 +0,0 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file"}, {"sha": "be477b82f072741f03ea16785dc277e23dfe6623", "filename": "gcc/d/doc/invoking-gdc.rst", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,48 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _invoking-gdc:\n-\n-Invoking gdc\n-------------\n-\n-.. only:: man\n-\n-  Synopsis\n-  ^^^^^^^^\n-\n-  gdc [ :option:`-c` | :option:`-S` ] [ :option:`-g` ] [ :option:`-pg` ]\n-      [ :option:`-O`:samp:`{level}` ] [ :option:`-W`:samp:`{warn}`...]\n-      [ :option:`-I`:samp:`{dir}`...] [ :option:`-L`:samp:`{dir}`...]\n-      [ :option:`-f`:samp:`{option}`...] [ :option:`-m`:samp:`{machine-option}`...]\n-      [ :option:`-o` :samp:`{outfile}` ] [@ :samp:`{file}` ] :samp:`{infile}`...\n-\n-  Only the most useful options are listed here; see below for the\n-  remainder.\n-\n-Description\n-^^^^^^^^^^^\n-\n-The :command:`gdc` command is the GNU compiler for the D language and\n-supports many of the same options as :command:`gcc`.  See :ref:`gcc:option-summary`.\n-This manual only documents the options specific to :command:`gdc`.\n-\n-Options\n-^^^^^^^\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  invoking-gdc/input-and-output-files\n-  invoking-gdc/runtime-options\n-  invoking-gdc/options-for-directory-search\n-  invoking-gdc/code-generation\n-  invoking-gdc/warnings\n-  invoking-gdc/options-for-linking\n-  invoking-gdc/developer-options\n-\n-.. only:: man\n-\n-  .. include:: copyright.rst\n\\ No newline at end of file"}, {"sha": "178b6f98fe2556f3e4aa19b408dc92191bb1b327", "filename": "gcc/d/doc/invoking-gdc/code-generation.rst", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fcode-generation.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,170 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: options, code generation\n-\n-.. _code-generation:\n-\n-Code Generation\n-***************\n-\n-In addition to the many :command:`gcc` options controlling code generation,\n-:command:`gdc` has several options specific to itself.\n-\n-.. option:: -H\n-\n-  .. index:: -H\n-\n-  Generates D interface files for all modules being compiled.  The compiler\n-  determines the output file based on the name of the input file, removes\n-  any directory components and suffix, and applies the :samp:`.di` suffix.\n-\n-.. option:: -Hd dir\n-\n-  .. index:: -Hd\n-\n-  Same as :option:`-H`, but writes interface files to directory :samp:`{dir}`.\n-  This option can be used with :option:`-Hf file` to independently set the\n-  output file and directory path.\n-\n-.. option:: -Hf file\n-\n-  .. index:: -Hf\n-\n-  Same as :option:`-H` but writes interface files to :samp:`{file}`.  This option can\n-  be used with :option:`-Hd dir` to independently set the output file and\n-  directory path.\n-\n-.. option:: -M\n-\n-  .. index:: -M\n-\n-  Output the module dependencies of all source files being compiled in a\n-  format suitable for :command:`make`.  The compiler outputs one\n-  :command:`make` rule containing the object file name for that source file,\n-  a colon, and the names of all imported files.\n-\n-.. option:: -MM\n-\n-  .. index:: -MM\n-\n-  Like :option:`-M` but does not mention imported modules from the D standard\n-  library package directories.\n-\n-.. option:: -MF file\n-\n-  .. index:: -MF\n-\n-  When used with :option:`-M` or :option:`-MM`, specifies a :samp:`{file}` to write\n-  the dependencies to.  When used with the driver options :option:`-MD` or\n-  :option:`-MMD`, :option:`-MF` overrides the default dependency output file.\n-\n-.. option:: -MG\n-\n-  .. index:: -MG\n-\n-  This option is for compatibility with :command:`gcc`, and is ignored by the\n-  compiler.\n-\n-.. option:: -MP\n-\n-  .. index:: -MP\n-\n-  Outputs a phony target for each dependency other than the modules being\n-  compiled, causing each to depend on nothing.\n-\n-.. option:: -MT target\n-\n-  .. index:: -MT\n-\n-  Change the :samp:`{target}` of the rule emitted by dependency generation\n-  to be exactly the string you specify.  If you want multiple targets,\n-  you can specify them as a single argument to :option:`-MT`, or use\n-  multiple :option:`-MT` options.\n-\n-.. option:: -MQ target\n-\n-  .. index:: -MQ\n-\n-  Same as :option:`-MT`, but it quotes any characters which are special to\n-  :command:`make`.\n-\n-.. option:: -MD\n-\n-  .. index:: -MD\n-\n-  This option is equivalent to :option:`-M -MF file`.  The driver\n-  determines :samp:`{file}` by removing any directory components and suffix\n-  from the input file, and then adding a :samp:`.deps` suffix.\n-\n-.. option:: -MMD\n-\n-  .. index:: -MMD\n-\n-  Like :option:`-MD` but does not mention imported modules from the D standard\n-  library package directories.\n-\n-.. option:: -X\n-\n-  .. index:: -X\n-\n-  Output information describing the contents of all source files being\n-  compiled in JSON format to a file.  The driver determines :samp:`{file}` by\n-  removing any directory components and suffix from the input file, and then\n-  adding a :samp:`.json` suffix.\n-\n-.. option:: -Xf file\n-\n-  .. index:: -Xf\n-\n-  Same as :option:`-X`, but writes all JSON contents to the specified\n-  :samp:`{file}`.\n-\n-.. option:: -fdoc\n-\n-  .. index:: -fdoc\n-\n-  Generates ``Ddoc`` documentation and writes it to a file.  The compiler\n-  determines :samp:`{file}` by removing any directory components and suffix\n-  from the input file, and then adding a :samp:`.html` suffix.\n-\n-.. option:: -fdoc-dir=dir\n-\n-  .. index:: -fdoc-dir\n-\n-  Same as :option:`-fdoc`, but writes documentation to directory :samp:`{dir}`.\n-  This option can be used with :option:`-fdoc-file=file` to\n-  independently set the output file and directory path.\n-\n-.. option:: -fdoc-file=file\n-\n-  .. index:: -fdoc-file\n-\n-  Same as :option:`-fdoc`, but writes documentation to :samp:`{file}`.  This\n-  option can be used with :option:`-fdoc-dir=dir` to independently\n-  set the output file and directory path.\n-\n-.. option:: -fdoc-inc=file\n-\n-  .. index:: -fdoc-inc\n-\n-  Specify :samp:`{file}` as a :samp:`{Ddoc}` macro file to be read.  Multiple\n-  :option:`-fdoc-inc` options can be used, and files are read and processed\n-  in the same order.\n-\n-.. option::  -fdump-c++-spec={file}\n-\n-  For D source files, generate corresponding C++ declarations in :samp:`{file}`.\n-\n-.. option:: -fdump-c++-spec-verbose\n-\n-  In conjunction with :option:`-fdump-c++-spec=` above, add comments for ignored\n-  declarations in the generated C++ header.\n-\n-.. option:: -fsave-mixins={file}\n-\n-  Generates code expanded from D ``mixin`` statements and writes the\n-  processed sources to :samp:`{file}`.  This is useful to debug errors in compilation\n-  and provides source for debuggers to show when requested.\n\\ No newline at end of file"}, {"sha": "564ed36d6c0e947041428146295faf30e1ba725b", "filename": "gcc/d/doc/invoking-gdc/developer-options.rst", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fdeveloper-options.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,31 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: developer options, debug dump options, dump options\n-\n-.. _developer-options:\n-\n-Developer Options\n-*****************\n-\n-This section describes command-line options that are primarily of\n-interest to developers or language tooling.\n-\n-.. option:: -fdump-d-original\n-\n-  .. index:: -fdump-d-original\n-\n-  Output the internal front-end AST after the ``semantic3`` stage.\n-  This option is only useful for debugging the GNU D compiler itself.\n-\n-.. option:: -v\n-\n-  .. index:: -v\n-\n-  Dump information about the compiler language processing stages as the source\n-  program is being compiled.  This includes listing all modules that are\n-  processed through the ``parse``, ``semantic``, ``semantic2``, and\n-  ``semantic3`` stages; all ``import`` modules and their file paths;\n-  and all ``function`` bodies that are being compiled.\n\\ No newline at end of file"}, {"sha": "a4bce6b9aba0d73a9d9a46f2fcf737becf579905", "filename": "gcc/d/doc/invoking-gdc/input-and-output-files.rst", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Finput-and-output-files.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,45 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: suffixes for D source, D source file suffixes\n-\n-.. _input-and-output-files:\n-\n-Input and Output files\n-**********************\n-\n-For any given input file, the file name suffix determines what kind of\n-compilation is done.  The following kinds of input file names are supported:\n-\n-:samp:`{file}.d`\n-  D source files.\n-\n-:samp:`{file}.dd`\n-  Ddoc source files.\n-\n-:samp:`{file}.di`\n-  D interface files.\n-\n-You can specify more than one input file on the :command:`gdc` command line,\n-each being compiled separately in the compilation process.  If you specify a\n-``-o file`` option, all the input files are compiled together,\n-producing a single output file, named :samp:`{file}`.  This is allowed even\n-when using ``-S`` or ``-c``.\n-\n-.. index:: D interface files.\n-\n-A D interface file contains only what an import of the module needs,\n-rather than the whole implementation of that module.  They can be created\n-by :command:`gdc` from a D source file by using the ``-H`` option.\n-When the compiler resolves an import declaration, it searches for matching\n-:samp:`.di` files first, then for :samp:`.d`.\n-\n-.. index:: Ddoc source files.\n-\n-A Ddoc source file contains code in the D macro processor language.  It is\n-primarily designed for use in producing user documentation from embedded\n-comments, with a slight affinity towards HTML generation.  If a :samp:`.d`\n-source file starts with the string ``Ddoc`` then it is treated as general\n-purpose documentation, not as a D source file.\n\\ No newline at end of file"}, {"sha": "934b22df5b0325c3921e4a6292edecbc0d9f0ce8", "filename": "gcc/d/doc/invoking-gdc/options-for-directory-search.rst", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-directory-search.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,92 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: directory options, options, directory search, search path\n-\n-.. _directory-options:\n-\n-Options for Directory Search\n-****************************\n-\n-These options specify directories to search for files, libraries, and\n-other parts of the compiler:\n-\n-.. option:: -Idir\n-\n-  .. index:: -I\n-\n-  Specify a directory to use when searching for imported modules at\n-  compile time.  Multiple :option:`-I` options can be used, and the\n-  paths are searched in the same order.\n-\n-.. option:: -Jdir\n-\n-  .. index:: -J\n-\n-  Specify a directory to use when searching for files in string imports\n-  at compile time.  This switch is required in order to use\n-  ``import(file)`` expressions.  Multiple :option:`-J` options can be\n-  used, and the paths are searched in the same order.\n-\n-.. option:: -Ldir\n-\n-  .. index:: -L\n-\n-  When linking, specify a library search directory, as with :command:`gcc`.\n-\n-.. option:: -Bdir\n-\n-  .. index:: -B\n-\n-  This option specifies where to find the executables, libraries,\n-  source files, and data files of the compiler itself, as with :command:`gcc`.\n-\n-.. option:: -fmodule-file=module=spec\n-\n-  .. index:: -fmodule-file\n-\n-  This option manipulates file paths of imported modules, such that if an\n-  imported module matches all or the leftmost part of :samp:`{module}`, the file\n-  path in :samp:`{spec}` is used as the location to search for D sources.\n-  This is used when the source file path and names are not the same as the\n-  package and module hierarchy.  Consider the following examples:\n-\n-  .. code-block:: c++\n-\n-    gdc test.d -fmodule-file=A.B=foo.d -fmodule-file=C=bar\n-\n-  This will tell the compiler to search in all import paths for the source\n-  file :samp:`{foo.d}` when importing :samp:`{A.B}`, and the directory :samp:`{bar/}`\n-  when importing :samp:`{C}`, as annotated in the following D code:\n-\n-  .. code-block:: c++\n-\n-    module test;\n-    import A.B;     // Matches A.B, searches for foo.d\n-    import C.D.E;   // Matches C, searches for bar/D/E.d\n-    import A.B.C;   // No match, searches for A/B/C.d\n-\n-.. option:: -imultilib dir\n-\n-  .. index:: -imultilib\n-\n-  Use :samp:`{dir}` as a subdirectory of the gcc directory containing\n-  target-specific D sources and interfaces.\n-\n-.. option:: -iprefix prefix\n-\n-  .. index:: -iprefix\n-\n-  Specify :samp:`{prefix}` as the prefix for the gcc directory containing\n-  target-specific D sources and interfaces.  If the :samp:`{prefix}` represents\n-  a directory, you should include the final ``'/'``.\n-\n-.. option:: -nostdinc\n-\n-  .. index:: -nostdinc\n-\n-  Do not search the standard system directories for D source and interface\n-  files.  Only the directories that have been specified with :option:`-I` options\n-  (and the directory of the current file, if appropriate) are searched.\n\\ No newline at end of file"}, {"sha": "dc64fcd206a1e0c0add3bb4ffc99a58dec9f8ed5", "filename": "gcc/d/doc/invoking-gdc/options-for-linking.rst", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Foptions-for-linking.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,59 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: options, linking, linking, static\n-\n-.. _linking:\n-\n-Options for Linking\n-*******************\n-\n-These options come into play when the compiler links object files into an\n-executable output file.  They are meaningless if the compiler is not doing\n-a link step.\n-\n-.. option:: -defaultlib=libname\n-\n-  .. index:: -defaultlib=\n-\n-  Specify the library to use instead of libphobos when linking.  Options\n-  specifying the linkage of libphobos, such as :option:`-static-libphobos`\n-  or :option:`-shared-libphobos`, are ignored.\n-\n-.. option:: -debuglib=libname\n-\n-  .. index:: -debuglib=\n-\n-  Specify the debug library to use instead of libphobos when linking.\n-  This option has no effect unless the :option:`-g` option was also given\n-  on the command line.  Options specifying the linkage of libphobos, such\n-  as :option:`-static-libphobos` or :option:`-shared-libphobos`, are ignored.\n-\n-.. option:: -nophoboslib\n-\n-  .. index:: -nophoboslib\n-\n-  Do not use the Phobos or D runtime library when linking.  Options specifying\n-  the linkage of libphobos, such as :option:`-static-libphobos` or\n-  :option:`-shared-libphobos`, are ignored.  The standard system libraries are\n-  used normally, unless :option:`-nostdlib` or :option:`-nodefaultlibs` is used.\n-\n-.. option:: -shared-libphobos\n-\n-  .. index:: -shared-libphobos\n-\n-  On systems that provide :samp:`libgphobos` and :samp:`libgdruntime` as a\n-  shared and a static library, this option forces the use of the shared\n-  version.  If no shared version was built when the compiler was configured,\n-  this option has no effect.\n-\n-.. option:: -static-libphobos\n-\n-  .. index:: -static-libphobos\n-\n-  On systems that provide :samp:`libgphobos` and :samp:`libgdruntime` as a\n-  shared and a static library, this option forces the use of the static\n-  version.  If no static version was built when the compiler was configured,\n-  this option has no effect.\n\\ No newline at end of file"}, {"sha": "fda87c2b96e6815a2519c21f61c19c27baf6940c", "filename": "gcc/d/doc/invoking-gdc/runtime-options.rst", "status": "removed", "additions": 0, "deletions": 314, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fruntime-options.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,314 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: options, runtime\n-\n-.. _runtime-options:\n-\n-Runtime Options\n-***************\n-\n-These options affect the runtime behavior of programs compiled with\n-:command:`gdc`.\n-\n-.. option:: -fall-instantiations\n-\n-  .. index:: -fall-instantiations, -fno-all-instantiations\n-\n-  Generate code for all template instantiations.  The default template emission\n-  strategy is to not generate code for declarations that were either\n-  instantiated speculatively, such as from ``__traits(compiles, ...)``, or\n-  that come from an imported module not being compiled.\n-\n-.. option:: -fno-assert\n-\n-  .. index:: -fassert, -fno-assert\n-\n-  Turn off code generation for ``assert`` contracts.\n-\n-.. option:: -fno-bounds-check\n-\n-  .. index:: -fbounds-check, -fno-bounds-check\n-\n-  Turns off array bounds checking for all functions, which can improve\n-  performance for code that uses arrays extensively.  Note that this\n-  can result in unpredictable behavior if the code in question actually\n-  does violate array bounds constraints.  It is safe to use this option\n-  if you are sure that your code never throws a ``RangeError``.\n-\n-.. option:: -fbounds-check=value\n-\n-  .. index:: -fbounds-check=\n-\n-  An alternative to :option:`-fbounds-check` that allows more control\n-  as to where bounds checking is turned on or off.  The following values\n-  are supported:\n-\n-  :samp:`on`\n-    Turns on array bounds checking for all functions.\n-\n-  :samp:`safeonly`\n-    Turns on array bounds checking only for ``@safe`` functions.\n-\n-  :samp:`off`\n-    Turns off array bounds checking completely.\n-\n-.. option:: -fno-builtin\n-\n-  .. index:: -fbuiltin, -fno-builtin\n-\n-  Don't recognize built-in functions unless they begin with the prefix\n-  :samp:`__builtin_`.  By default, the compiler will recognize when a\n-  function in the ``core.stdc`` package is a built-in function.\n-\n-.. option:: -fcheckaction\n-\n-  This option controls what code is generated on an assertion, bounds check, or\n-  final switch failure.  The following values are supported:\n-\n-  :samp:`context`\n-    Throw an ``AssertError`` with extra context information.\n-\n-  :samp:`halt`\n-    Halt the program execution.\n-\n-  :samp:`throw`\n-    Throw an ``AssertError`` (the default).\n-\n-.. option:: -fdebug=value\n-\n-  .. index:: -fno-debug\n-\n-  Turn on compilation of conditional ``debug`` code into the program.\n-  The :option:`-fdebug` option itself sets the debug level to ``1``,\n-  while :option:`-fdebug=` enables ``debug`` code that are identified\n-  by any of the following values:\n-\n-  :samp:`level`\n-    Sets the debug level to :samp:`{level}`, any ``debug`` code <= :samp:`{level}`\n-    is compiled into the program.\n-\n-  :samp:`ident`\n-    Turns on compilation of any ``debug`` code identified by :samp:`{ident}`.\n-\n-.. option:: -fno-druntime\n-\n-  .. index:: -fdruntime, -fno-druntime\n-\n-  Implements https://dlang.org/spec/betterc.html.  Assumes that\n-  compilation targets an environment without a D runtime library.\n-\n-  This is equivalent to compiling with the following options:\n-\n-  .. code-block:: c++\n-\n-    gdc -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti\n-\n-.. option:: -fextern-std=standard\n-\n-  Sets the C++ name mangling compatibility to the version identified by\n-  :samp:`{standard}`.  The following values are supported:\n-\n-  :samp:`c++98`, :samp:`c++03`\n-    Sets ``__traits(getTargetInfo, \"cppStd\")`` to ``199711``.\n-\n-  :samp:`c++11`\n-    Sets ``__traits(getTargetInfo, \"cppStd\")`` to ``201103``.\n-\n-  :samp:`c++14`\n-    Sets ``__traits(getTargetInfo, \"cppStd\")`` to ``201402``.\n-\n-  :samp:`c++17`\n-    Sets ``__traits(getTargetInfo, \"cppStd\")`` to ``201703``.\n-    This is the default.\n-\n-  :samp:`c++20`\n-    Sets ``__traits(getTargetInfo, \"cppStd\")`` to ``202002``.\n-\n-.. option:: -fno-invariants\n-\n-  .. index:: -finvariants, -fno-invariants\n-\n-  Turns off code generation for class ``invariant`` contracts.\n-\n-.. option:: -fmain\n-\n-  Generates a default ``main()`` function when compiling.  This is useful when\n-  unittesting a library, as it enables running the unittests in a library without\n-  having to manually define an entry-point function.  This option does nothing\n-  when ``main`` is already defined in user code.\n-\n-.. option:: -fno-moduleinfo\n-\n-  Turns off generation of the ``ModuleInfo`` and related functions\n-  that would become unreferenced without it, which may allow linking\n-  to programs not written in D.  Functions that are not be generated\n-  include module constructors and destructors (``static this`` and\n-  ``static ~this``), ``unittest`` code, and ``DSO`` registry\n-  functions for dynamically linked code.\n-\n-.. option:: -fonly=filename\n-\n-  .. index:: -fonly\n-\n-  Tells the compiler to parse and run semantic analysis on all modules\n-  on the command line, but only generate code for the module specified\n-  by :samp:`{filename}`.\n-\n-.. option:: -fno-postconditions\n-\n-  .. index:: -fpostconditions, -fno-postconditions\n-\n-  Turns off code generation for postcondition ``out`` contracts.\n-\n-.. option:: -fno-preconditions\n-\n-  .. index:: -fpreconditions, -fno-preconditions\n-\n-  Turns off code generation for precondition ``in`` contracts.\n-\n-.. option:: -fpreview=id\n-\n-  .. index:: -fpreview\n-\n-  Turns on an upcoming D language change identified by :samp:`{id}`.  The following\n-  values are supported:\n-\n-  :samp:`all`\n-    Turns on all upcoming D language features.\n-\n-  :samp:`dip1000`\n-    Implements https://github.com/dlang/DIPs/blob/master/DIPs/other/DIP1000.md\n-    (Scoped pointers).\n-\n-  :samp:`dip1008`\n-    Implements https://github.com/dlang/DIPs/blob/master/DIPs/other/DIP1008.md\n-    (Allow exceptions in ``@nogc`` code).\n-\n-  :samp:`dip1021`\n-    Implements https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1021.md\n-    (Mutable function arguments).\n-\n-  :samp:`dip25`\n-    Implements https://github.com/dlang/DIPs/blob/master/DIPs/archive/DIP25.md\n-    (Sealed references).\n-\n-  :samp:`dtorfields`\n-    Turns on generation for destructing fields of partially constructed objects.\n-\n-  :samp:`fieldwise`\n-    Turns on generation of struct equality to use field-wise comparisons.\n-\n-  :samp:`fixaliasthis`\n-    Implements new lookup rules that check the current scope for ``alias this``\n-    before searching in upper scopes.\n-\n-  :samp:`fiximmutableconv`\n-    Disallows unsound immutable conversions that were formerly incorrectly\n-    permitted.\n-\n-  :samp:`in`\n-    Implements ``in`` parameters to mean ``scope const [ref]`` and accepts\n-    rvalues.\n-\n-  :samp:`inclusiveincontracts`\n-    Implements ``in`` contracts of overridden methods to be a superset of parent\n-    contract.\n-\n-  :samp:`intpromote`\n-    Implements C-style integral promotion for unary ``+``, ``-`` and ``~``\n-    expressions.\n-\n-  :samp:`nosharedaccess`\n-    Turns off and disallows all access to shared memory objects.\n-\n-  :samp:`rvaluerefparam`\n-    Implements rvalue arguments to ``ref`` parameters.\n-\n-  :samp:`systemvariables`\n-    Disables access to variables marked ``@system`` from ``@safe`` code.\n-\n-.. option:: -frelease\n-\n-  .. index:: -fno-release\n-\n-  Turns on compiling in release mode, which means not emitting runtime\n-  checks for contracts and asserts.  Array bounds checking is not done\n-  for ``@system`` and ``@trusted`` functions, and assertion\n-  failures are undefined behavior.\n-\n-  This is equivalent to compiling with the following options:\n-\n-  .. code-block:: c++\n-\n-    gdc -fno-assert -fbounds-check=safe -fno-invariants \\\n-        -fno-postconditions -fno-preconditions -fno-switch-errors\n-\n-.. option:: -frevert=\n-\n-  .. index:: -frevert\n-\n-  Turns off a D language feature identified by :samp:`{id}`.  The following values\n-  are supported:\n-\n-  :samp:`all`\n-    Turns off all revertable D language features.\n-\n-  :samp:`dip25`\n-    Reverts https://github.com/dlang/DIPs/blob/master/DIPs/archive/DIP25.md\n-    (Sealed references).\n-\n-  :samp:`dtorfields`\n-    Turns off generation for destructing fields of partially constructed objects.\n-\n-  :samp:`markdown`\n-    Turns off Markdown replacements in Ddoc comments.\n-\n-.. option:: -fno-rtti\n-\n-  .. index:: -frtti, -fno-rtti\n-\n-  Turns off generation of run-time type information for all user defined types.\n-  Any code that uses features of the language that require access to this\n-  information will result in an error.\n-\n-.. option:: -fno-switch-errors\n-\n-  .. index:: -fswitch-errors, -fno-switch-errors\n-\n-  This option controls what code is generated when no case is matched\n-  in a ``final switch`` statement.  The default run time behavior\n-  is to throw a ``SwitchError``.  Turning off :option:`-fswitch-errors`\n-  means that instead the execution of the program is immediately halted.\n-\n-.. option:: -funittest\n-\n-  .. index:: -funittest, -fno-unittest\n-\n-  Turns on compilation of ``unittest`` code, and turns on the\n-  ``version(unittest)`` identifier.  This implies :option:`-fassert`.\n-\n-.. option:: -fversion=value\n-\n-  .. index:: -fversion\n-\n-  Turns on compilation of conditional ``version`` code into the program\n-  identified by any of the following values:\n-\n-  :samp:`level`\n-    Sets the version level to :samp:`{level}`, any ``version`` code >= :samp:`{level}`\n-    is compiled into the program.\n-\n-  :samp:`ident`\n-    Turns on compilation of ``version`` code identified by :samp:`{ident}`.\n-\n-.. option:: -fno-weak-templates\n-\n-  .. index:: -fweak-templates, -fno-weak-templates\n-\n-  Turns off emission of declarations that can be defined in multiple objects as\n-  weak symbols.  The default is to emit all public symbols as weak, unless the\n-  target lacks support for weak symbols.  Disabling this option means that common\n-  symbols are instead put in COMDAT or become private.\n\\ No newline at end of file"}, {"sha": "c9ed52e7630318e8a7059b8eb8d9cbc54e2830eb", "filename": "gcc/d/doc/invoking-gdc/warnings.rst", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdoc%2Finvoking-gdc%2Fwarnings.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,148 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: options to control warnings, warning messages, messages, warning, suppressing warnings\n-\n-.. _warnings:\n-\n-Warnings\n-********\n-\n-Warnings are diagnostic messages that report constructions that\n-are not inherently erroneous but that are risky or suggest there\n-is likely to be a bug in the program.  Unless :option:`-Werror` is\n-specified, they do not prevent compilation of the program.\n-\n-.. option:: -Wall\n-\n-  .. index:: -Wall, -Wno-all\n-\n-  Turns on all warnings messages.  Warnings are not a defined part of\n-  the D language, and all constructs for which this may generate a\n-  warning message are valid code.\n-\n-.. option:: -Walloca\n-\n-  .. index:: -Walloca\n-\n-  This option warns on all uses of \"alloca\" in the source.\n-\n-.. option:: -Walloca-larger-than=n\n-\n-  .. index:: -Walloca-larger-than, -Wno-alloca-larger-than\n-\n-  Warn on unbounded uses of alloca, and on bounded uses of alloca\n-  whose bound can be larger than :samp:`{n}` bytes.\n-  :option:`-Wno-alloca-larger-than` disables\n-  :option:`-Walloca-larger-than` warning and is equivalent to\n-  :option:`-Walloca-larger-than=SIZE_MAX` or larger.\n-\n-.. option:: -Wcast-result\n-\n-  .. index:: -Wcast-result, -Wno-cast-result\n-\n-  Warn about casts that will produce a null or zero result.  Currently\n-  this is only done for casting between an imaginary and non-imaginary\n-  data type, or casting between a D and C++ class.\n-\n-.. option:: -Wno-deprecated\n-\n-  .. index:: -Wdeprecated, -Wno-deprecated\n-\n-  Do not warn about usage of deprecated features and symbols with\n-  ``deprecated`` attributes.\n-\n-.. option:: -Werror\n-\n-  .. index:: -Werror, -Wno-error\n-\n-  Turns all warnings into errors.\n-\n-.. option:: -Wspeculative\n-\n-  .. index:: -Wspeculative, -Wno-speculative\n-\n-  List all error messages from speculative compiles, such as\n-  ``__traits(compiles, ...)``.  This option does not report\n-  messages as warnings, and these messages therefore never become\n-  errors when the :option:`-Werror` option is also used.\n-\n-.. option:: -Wtemplates\n-\n-  .. index:: -Wtemplates, -Wno-templates\n-\n-  Warn when a template instantiation is encountered.  Some coding\n-  rules disallow templates, and this may be used to enforce that rule.\n-\n-.. option:: -Wunknown-pragmas\n-\n-  .. index:: -Wunknown-pragmas, -Wno-unknown-pragmas\n-\n-  Warn when a ``pragma()`` is encountered that is not understood by\n-  :command:`gdc`.  This differs from :option:`-fignore-unknown-pragmas`\n-  where a pragma that is part of the D language, but not implemented by\n-  the compiler, won't get reported.\n-\n-.. option:: -Wno-varargs\n-\n-  .. index:: Wvarargs, Wno-varargs\n-\n-  Do not warn upon questionable usage of the macros used to handle variable\n-  arguments like ``va_start``.\n-\n-.. option:: -fignore-unknown-pragmas\n-\n-  .. index:: -fignore-unknown-pragmas, -fno-ignore-unknown-pragmas\n-\n-  Turns off errors for unsupported pragmas.\n-\n-.. option:: -fmax-errors=n\n-\n-  .. index:: -fmax-errors\n-\n-  Limits the maximum number of error messages to :samp:`{n}`, at which point\n-  :command:`gdc` bails out rather than attempting to continue processing the\n-  source code.  If :samp:`{n}` is 0 (the default), there is no limit on the\n-  number of error messages produced.\n-\n-.. option:: -fsyntax-only\n-\n-  .. index:: -fsyntax-only, -fno-syntax-only\n-\n-  Check the code for syntax errors, but do not actually compile it.  This\n-  can be used in conjunction with :option:`-fdoc` or :option:`-H` to generate\n-  files for each module present on the command-line, but no other output\n-  file.\n-\n-.. option:: -ftransition=id\n-\n-  .. index:: -ftransition\n-\n-  Report additional information about D language changes identified by\n-  :samp:`{id}`.  The following values are supported:\n-\n-  :samp:`all`\n-    List information on all D language transitions.\n-\n-  :samp:`complex`\n-    List all usages of complex or imaginary types.\n-\n-  :samp:`field`\n-    List all non-mutable fields which occupy an object instance.\n-\n-  :samp:`in`\n-    List all usages of ``in`` on parameter.\n-\n-  :samp:`nogc`\n-    List all hidden GC allocations.\n-\n-  :samp:`templates`\n-    List statistics on template instantiations.\n-\n-  :samp:`tls`\n-    List all variables going into thread local storage.\n-\n-  :samp:`vmarkdown`\n-    List instances of Markdown replacements in Ddoc.\n\\ No newline at end of file"}, {"sha": "f4b6e05515cd6c5faf701fffe96c55519835719b", "filename": "gcc/doc/cpp/character-sets.rst", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fcharacter-sets.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,56 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _character-sets:\n-\n-Character sets\n-**************\n-\n-Source code character set processing in C and related languages is\n-rather complicated.  The C standard discusses two character sets, but\n-there are really at least four.\n-\n-The files input to CPP might be in any character set at all.  CPP's\n-very first action, before it even looks for line boundaries, is to\n-convert the file into the character set it uses for internal\n-processing.  That set is what the C standard calls the :dfn:`source`\n-character set.  It must be isomorphic with ISO 10646, also known as\n-Unicode.  CPP uses the UTF-8 encoding of Unicode.\n-\n-The character sets of the input files are specified using the\n-:option:`-finput-charset=` option.\n-\n-All preprocessing work (the subject of the rest of this manual) is\n-carried out in the source character set.  If you request textual\n-output from the preprocessor with the :option:`-E` option, it will be\n-in UTF-8.\n-\n-After preprocessing is complete, string and character constants are\n-converted again, into the :dfn:`execution` character set.  This\n-character set is under control of the user; the default is UTF-8,\n-matching the source character set.  Wide string and character\n-constants have their own character set, which is not called out\n-specifically in the standard.  Again, it is under control of the user.\n-The default is UTF-16 or UTF-32, whichever fits in the target's\n-``wchar_t`` type, in the target machine's byte\n-order [#f1]_.\n-\n-Octal and hexadecimal escape sequences do not undergo\n-conversion; ``'\\x12'`` has the value 0x12 regardless of the currently\n-selected execution character set.  All other escapes are replaced by\n-the character in the source character set that they represent, then\n-converted to the execution character set, just like unescaped\n-characters.\n-\n-In identifiers, characters outside the ASCII range can be specified\n-with the :samp:`\\\\u` and :samp:`\\\\U` escapes or used directly in the input\n-encoding.  If strict ISO C90 conformance is specified with an option\n-such as :option:`-std=c90`, or :option:`-fno-extended-identifiers` is\n-used, then those constructs are not permitted in identifiers.\n-\n-.. [#f1] UTF-16 does not meet the requirements of the C\n-  standard for a wide character set, but the choice of 16-bit\n-  ``wchar_t`` is enshrined in some system ABIs so we cannot fix\n-  this.\n\\ No newline at end of file"}, {"sha": "1dec2ac6f4b1b7babf6fa0e94dd44791b9b15d88", "filename": "gcc/doc/cpp/conditional-syntax.rst", "status": "removed", "additions": 0, "deletions": 411, "changes": 411, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditional-syntax.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,411 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: #if\n-\n-.. _conditional-syntax:\n-\n-Conditional Syntax\n-******************\n-\n-A conditional in the C preprocessor begins with a :dfn:`conditional\n-directive`: :samp:`#if`, :samp:`#ifdef` or :samp:`#ifndef`.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-\n-.. index:: #ifdef, #endif\n-\n-.. _ifdef:\n-\n-Ifdef\n-^^^^^\n-\n-The simplest sort of conditional is\n-\n-.. code-block:: c++\n-\n-  #ifdef MACRO\n-\n-  controlled text\n-\n-  #endif /* MACRO */\n-\n-.. index:: conditional group\n-\n-This block is called a :dfn:`conditional group`.  :samp:`{controlled text}`\n-will be included in the output of the preprocessor if and only if\n-:samp:`{MACRO}` is defined.  We say that the conditional :dfn:`succeeds` if\n-:samp:`{MACRO}` is defined, :dfn:`fails` if it is not.\n-\n-The :samp:`{controlled text}` inside of a conditional can include\n-preprocessing directives.  They are executed only if the conditional\n-succeeds.  You can nest conditional groups inside other conditional\n-groups, but they must be completely nested.  In other words,\n-:samp:`#endif` always matches the nearest :samp:`#ifdef` (or\n-:samp:`#ifndef`, or :samp:`#if`).  Also, you cannot start a conditional\n-group in one file and end it in another.\n-\n-Even if a conditional fails, the :samp:`{controlled text}` inside it is\n-still run through initial transformations and tokenization.  Therefore,\n-it must all be lexically valid C.  Normally the only way this matters is\n-that all comments and string literals inside a failing conditional group\n-must still be properly ended.\n-\n-The comment following the :samp:`#endif` is not required, but it is a\n-good practice if there is a lot of :samp:`{controlled text}`, because it\n-helps people match the :samp:`#endif` to the corresponding :samp:`#ifdef`.\n-Older programs sometimes put :samp:`{MACRO}` directly after the\n-:samp:`#endif` without enclosing it in a comment.  This is invalid code\n-according to the C standard.  CPP accepts it with a warning.  It\n-never affects which :samp:`#ifndef` the :samp:`#endif` matches.\n-\n-.. index:: #ifndef\n-\n-Sometimes you wish to use some code if a macro is *not* defined.\n-You can do this by writing :samp:`#ifndef` instead of :samp:`#ifdef`.\n-One common use of :samp:`#ifndef` is to include code only the first\n-time a header file is included.  See :ref:`once-only-headers`.\n-\n-Macro definitions can vary between compilations for several reasons.\n-Here are some samples.\n-\n-* Some macros are predefined on each kind of machine\n-  (see :ref:`system-specific-predefined-macros`).  This allows you to provide\n-  code specially tuned for a particular machine.\n-\n-* System header files define more macros, associated with the features\n-  they implement.  You can test these macros with conditionals to avoid\n-  using a system feature on a machine where it is not implemented.\n-\n-* Macros can be defined or undefined with the :option:`-D` and :option:`-U`\n-  command-line options when you compile the program.  You can arrange to\n-  compile the same source file into two different programs by choosing a\n-  macro name to specify which program you want, writing conditionals to\n-  test whether or how this macro is defined, and then controlling the\n-  state of the macro with command-line options, perhaps set in the\n-  Makefile.  See :ref:`invocation`.\n-\n-* Your program might have a special header file (often called\n-  :samp:`config.h`) that is adjusted when the program is compiled.  It can\n-  define or not define macros depending on the features of the system and\n-  the desired capabilities of the program.  The adjustment can be\n-  automated by a tool such as :command:`autoconf`, or done by hand.\n-\n-.. _if:\n-\n-If\n-^^\n-\n-The :samp:`#if` directive allows you to test the value of an arithmetic\n-expression, rather than the mere existence of one macro.  Its syntax is\n-\n-.. code-block:: c++\n-\n-  #if expression\n-\n-  controlled text\n-\n-  #endif /* expression */\n-\n-:samp:`{expression}` is a C expression of integer type, subject to stringent\n-restrictions.  It may contain\n-\n-* Integer constants.\n-\n-* Character constants, which are interpreted as they would be in normal\n-  code.\n-\n-* Arithmetic operators for addition, subtraction, multiplication,\n-  division, bitwise operations, shifts, comparisons, and logical\n-  operations (``&&`` and ``||``).  The latter two obey the usual\n-  short-circuiting rules of standard C.\n-\n-* Macros.  All macros in the expression are expanded before actual\n-  computation of the expression's value begins.\n-\n-* Uses of the ``defined`` operator, which lets you check whether macros\n-  are defined in the middle of an :samp:`#if`.\n-\n-* Identifiers that are not macros, which are all considered to be the\n-  number zero.  This allows you to write ``#if MACRO`` instead of\n-  ``#ifdef MACRO``, if you know that MACRO, when defined, will\n-  always have a nonzero value.  Function-like macros used without their\n-  function call parentheses are also treated as zero.\n-\n-  In some contexts this shortcut is undesirable.  The :option:`-Wundef`\n-  option causes GCC to warn whenever it encounters an identifier which is\n-  not a macro in an :samp:`#if`.\n-\n-The preprocessor does not know anything about types in the language.\n-Therefore, ``sizeof`` operators are not recognized in :samp:`#if`, and\n-neither are ``enum`` constants.  They will be taken as identifiers\n-which are not macros, and replaced by zero.  In the case of\n-``sizeof``, this is likely to cause the expression to be invalid.\n-\n-The preprocessor calculates the value of :samp:`{expression}`.  It carries\n-out all calculations in the widest integer type known to the compiler;\n-on most machines supported by GCC this is 64 bits.  This is not the same\n-rule as the compiler uses to calculate the value of a constant\n-expression, and may give different results in some cases.  If the value\n-comes out to be nonzero, the :samp:`#if` succeeds and the :samp:`{controlled\n-text}` is included; otherwise it is skipped.\n-\n-.. index:: defined\n-\n-.. _defined:\n-\n-Defined\n-^^^^^^^\n-\n-The special operator ``defined`` is used in :samp:`#if` and\n-:samp:`#elif` expressions to test whether a certain name is defined as a\n-macro.  ``defined name`` and ``defined (name)`` are\n-both expressions whose value is 1 if :samp:`{name}` is defined as a macro at\n-the current point in the program, and 0 otherwise.  Thus,  ``#if\n-defined MACRO`` is precisely equivalent to ``#ifdef MACRO``.\n-\n-``defined`` is useful when you wish to test more than one macro for\n-existence at once.  For example,\n-\n-.. code-block:: c++\n-\n-  #if defined (__vax__) || defined (__ns16000__)\n-\n-would succeed if either of the names ``__vax__`` or\n-``__ns16000__`` is defined as a macro.\n-\n-Conditionals written like this:\n-\n-.. code-block:: c++\n-\n-  #if defined BUFSIZE && BUFSIZE >= 1024\n-\n-can generally be simplified to just ``#if BUFSIZE >= 1024``,\n-since if ``BUFSIZE`` is not defined, it will be interpreted as having\n-the value zero.\n-\n-If the ``defined`` operator appears as a result of a macro expansion,\n-the C standard says the behavior is undefined.  GNU cpp treats it as a\n-genuine ``defined`` operator and evaluates it normally.  It will warn\n-wherever your code uses this feature if you use the command-line option\n-:option:`-Wpedantic`, since other compilers may handle it differently.  The\n-warning is also enabled by :option:`-Wextra`, and can also be enabled\n-individually with :option:`-Wexpansion-to-defined`.\n-\n-.. index:: #else\n-\n-.. _else:\n-\n-Else\n-^^^^\n-\n-The :samp:`#else` directive can be added to a conditional to provide\n-alternative text to be used if the condition fails.  This is what it\n-looks like:\n-\n-.. code-block:: c++\n-\n-  #if expression\n-  text-if-true\n-  #else /* Not expression */\n-  text-if-false\n-  #endif /* Not expression */\n-\n-If :samp:`{expression}` is nonzero, the :samp:`{text-if-true}` is included and\n-the :samp:`{text-if-false}` is skipped.  If :samp:`{expression}` is zero, the\n-opposite happens.\n-\n-You can use :samp:`#else` with :samp:`#ifdef` and :samp:`#ifndef`, too.\n-\n-.. index:: #elif\n-\n-.. _elif:\n-\n-Elif\n-^^^^\n-\n-One common case of nested conditionals is used to check for more than two\n-possible alternatives.  For example, you might have\n-\n-.. code-block:: c++\n-\n-  #if X == 1\n-  ...\n-  #else /* X != 1 */\n-  #if X == 2\n-  ...\n-  #else /* X != 2 */\n-  ...\n-  #endif /* X != 2 */\n-  #endif /* X != 1 */\n-\n-Another conditional directive, :samp:`#elif`, allows this to be\n-abbreviated as follows:\n-\n-.. code-block:: c++\n-\n-  #if X == 1\n-  ...\n-  #elif X == 2\n-  ...\n-  #else /* X != 2 and X != 1*/\n-  ...\n-  #endif /* X != 2 and X != 1*/\n-\n-:samp:`#elif` stands for 'else if'.  Like :samp:`#else`, it goes in the\n-middle of a conditional group and subdivides it; it does not require a\n-matching :samp:`#endif` of its own.  Like :samp:`#if`, the :samp:`#elif`\n-directive includes an expression to be tested.  The text following the\n-:samp:`#elif` is processed only if the original :samp:`#if`-condition\n-failed and the :samp:`#elif` condition succeeds.\n-\n-More than one :samp:`#elif` can go in the same conditional group.  Then\n-the text after each :samp:`#elif` is processed only if the :samp:`#elif`\n-condition succeeds after the original :samp:`#if` and all previous\n-:samp:`#elif` directives within it have failed.\n-\n-:samp:`#else` is allowed after any number of :samp:`#elif` directives, but\n-:samp:`#elif` may not follow :samp:`#else`.\n-\n-.. index:: __has_attribute\n-\n-__has_attribute\n-^^^^^^^^^^^^^^^\n-\n-The special operator ``__has_attribute (operand)`` may be used\n-in :samp:`#if` and :samp:`#elif` expressions to test whether the attribute\n-referenced by its :samp:`{operand}` is recognized by GCC.  Using the operator\n-in other contexts is not valid.  In C code, if compiling for strict\n-conformance to standards before C2x, :samp:`{operand}` must be\n-a valid identifier.  Otherwise, :samp:`{operand}` may be optionally\n-introduced by the ``attribute-scope::`` prefix.\n-The :samp:`{attribute-scope}` prefix identifies the 'namespace' within\n-which the attribute is recognized.  The scope of GCC attributes is\n-:samp:`gnu` or :samp:`__gnu__`.  The ``__has_attribute`` operator by\n-itself, without any :samp:`{operand}` or parentheses, acts as a predefined\n-macro so that support for it can be tested in portable code.  Thus,\n-the recommended use of the operator is as follows:\n-\n-.. code-block:: c++\n-\n-  #if defined __has_attribute\n-  #  if __has_attribute (nonnull)\n-  #    define ATTR_NONNULL __attribute__ ((nonnull))\n-  #  endif\n-  #endif\n-\n-The first :samp:`#if` test succeeds only when the operator is supported\n-by the version of GCC (or another compiler) being used.  Only when that\n-test succeeds is it valid to use ``__has_attribute`` as a preprocessor\n-operator.  As a result, combining the two tests into a single expression as\n-shown below would only be valid with a compiler that supports the operator\n-but not with others that don't.\n-\n-.. code-block:: c++\n-\n-  #if defined __has_attribute && __has_attribute (nonnull)   /* not portable */\n-  ...\n-  #endif\n-\n-.. index:: __has_cpp_attribute\n-\n-__has_cpp_attribute\n-^^^^^^^^^^^^^^^^^^^\n-\n-The special operator ``__has_cpp_attribute (operand)`` may be used\n-in :samp:`#if` and :samp:`#elif` expressions in C++ code to test whether\n-the attribute referenced by its :samp:`{operand}` is recognized by GCC.\n-``__has_cpp_attribute (operand)`` is equivalent to\n-``__has_attribute (operand)`` except that when :samp:`{operand}`\n-designates a supported standard attribute it evaluates to an integer\n-constant of the form ``YYYYMM`` indicating the year and month when\n-the attribute was first introduced into the C++ standard.  For additional\n-information including the dates of the introduction of current standard\n-attributes, see `SD-6: SG10 Feature Test Recommendations <https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations/>`_.\n-\n-.. index:: __has_c_attribute\n-\n-__has_c_attribute\n-^^^^^^^^^^^^^^^^^\n-\n-The special operator ``__has_c_attribute (operand)`` may be\n-used in :samp:`#if` and :samp:`#elif` expressions in C code to test\n-whether the attribute referenced by its :samp:`{operand}` is recognized by\n-GCC in attributes using the :samp:`[[]]` syntax.  GNU attributes must\n-be specified with the scope :samp:`gnu` or :samp:`__gnu__` with\n-``__has_c_attribute``.  When :samp:`{operand}` designates a supported\n-standard attribute it evaluates to an integer constant of the form\n-``YYYYMM`` indicating the year and month when the attribute was\n-first introduced into the C standard, or when the syntax of operands\n-to the attribute was extended in the C standard.\n-\n-.. index:: __has_builtin\n-\n-__has_builtin\n-^^^^^^^^^^^^^\n-\n-The special operator ``__has_builtin (operand)`` may be used in\n-constant integer contexts and in preprocessor :samp:`#if` and :samp:`#elif`\n-expressions to test whether the symbol named by its :samp:`{operand}` is\n-recognized as a built-in function by GCC in the current language and\n-conformance mode.  It evaluates to a constant integer with a nonzero\n-value if the argument refers to such a function, and to zero otherwise.\n-The operator may also be used in preprocessor :samp:`#if` and :samp:`#elif`\n-expressions.  The ``__has_builtin`` operator by itself, without any\n-:samp:`{operand}` or parentheses, acts as a predefined macro so that support\n-for it can be tested in portable code.  Thus, the recommended use of\n-the operator is as follows:\n-\n-.. code-block:: c++\n-\n-  #if defined __has_builtin\n-  #  if __has_builtin (__builtin_object_size)\n-  #    define builtin_object_size(ptr) __builtin_object_size (ptr, 2)\n-  #  endif\n-  #endif\n-  #ifndef builtin_object_size\n-  #  define builtin_object_size(ptr)   ((size_t)-1)\n-  #endif\n-\n-.. index:: __has_include\n-\n-__has_include\n-^^^^^^^^^^^^^\n-\n-The special operator ``__has_include (operand)`` may be used in\n-:samp:`#if` and :samp:`#elif` expressions to test whether the header referenced\n-by its :samp:`{operand}` can be included using the :samp:`#include` directive.  Using\n-the operator in other contexts is not valid.  The :samp:`{operand}` takes\n-the same form as the file in the :samp:`#include` directive (see :ref:`include-syntax`) and evaluates to a nonzero value if the header can be included and\n-to zero otherwise.  Note that that the ability to include a header doesn't\n-imply that the header doesn't contain invalid constructs or :samp:`#error`\n-directives that would cause the preprocessor to fail.\n-\n-The ``__has_include`` operator by itself, without any :samp:`{operand}` or\n-parentheses, acts as a predefined macro so that support for it can be tested\n-in portable code.  Thus, the recommended use of the operator is as follows:\n-\n-.. code-block:: c++\n-\n-  #if defined __has_include\n-  #  if __has_include (<stdatomic.h>)\n-  #    include <stdatomic.h>\n-  #  endif\n-  #endif\n-\n-The first :samp:`#if` test succeeds only when the operator is supported\n-by the version of GCC (or another compiler) being used.  Only when that\n-test succeeds is it valid to use ``__has_include`` as a preprocessor\n-operator.  As a result, combining the two tests into a single expression\n-as shown below would only be valid with a compiler that supports the operator\n-but not with others that don't.\n-\n-.. code-block:: c++\n-\n-  #if defined __has_include && __has_include (\"header.h\")   /* not portable */\n-  ...\n-  #endif\n\\ No newline at end of file"}, {"sha": "59555a5828d588a4f02285bf10221b94b7bf810b", "filename": "gcc/doc/cpp/conditional-uses.rst", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditional-uses.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,32 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _conditional-uses:\n-\n-Conditional Uses\n-****************\n-\n-There are three general reasons to use a conditional.\n-\n-* A program may need to use different code depending on the machine or\n-  operating system it is to run on.  In some cases the code for one\n-  operating system may be erroneous on another operating system; for\n-  example, it might refer to data types or constants that do not exist on\n-  the other system.  When this happens, it is not enough to avoid\n-  executing the invalid code.  Its mere presence will cause the compiler\n-  to reject the program.  With a preprocessing conditional, the offending\n-  code can be effectively excised from the program when it is not valid.\n-\n-* You may want to be able to compile the same source file into two\n-  different programs.  One version might make frequent time-consuming\n-  consistency checks on its intermediate data, or print the values of\n-  those data for debugging, and the other not.\n-\n-* A conditional whose condition is always false is one way to exclude code\n-  from the program but keep it as a sort of comment for future reference.\n-\n-Simple programs that do not need system-specific logic or complex\n-debugging hooks generally will not need to use preprocessing\n-conditionals.\n\\ No newline at end of file"}, {"sha": "381a6124da44757afa3c1d6b90aa5638ea45dfc6", "filename": "gcc/doc/cpp/conditionals.rst", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditionals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconditionals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconditionals.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,44 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: conditionals\n-\n-.. _conditionals:\n-\n-Conditionals\n-------------\n-\n-A :dfn:`conditional` is a directive that instructs the preprocessor to\n-select whether or not to include a chunk of code in the final token\n-stream passed to the compiler.  Preprocessor conditionals can test\n-arithmetic expressions, or whether a name is defined as a macro, or both\n-simultaneously using the special ``defined`` operator.\n-\n-A conditional in the C preprocessor resembles in some ways an ``if``\n-statement in C, but it is important to understand the difference between\n-them.  The condition in an ``if`` statement is tested during the\n-execution of your program.  Its purpose is to allow your program to\n-behave differently from run to run, depending on the data it is\n-operating on.  The condition in a preprocessing conditional directive is\n-tested when your program is compiled.  Its purpose is to allow different\n-code to be included in the program depending on the situation at the\n-time of compilation.\n-\n-However, the distinction is becoming less clear.  Modern compilers often\n-do test ``if`` statements when a program is compiled, if their\n-conditions are known not to vary at run time, and eliminate code which\n-can never be executed.  If you can count on your compiler to do this,\n-you may find that your program is more readable if you use ``if``\n-statements with constant conditions (perhaps determined by macros).  Of\n-course, you can only use this to exclude code, not type definitions or\n-other preprocessing directives, and you can only do it if the code\n-remains syntactically valid when it is not to be used.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  conditional-uses\n-  conditional-syntax\n-  deleted-code\n\\ No newline at end of file"}, {"sha": "29d3aed4558b54ea3a84b43da562d641e811d347", "filename": "gcc/doc/cpp/conf.py", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fconf.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,30 +0,0 @@\n-# Configuration file for the Sphinx documentation builder.\n-\n-import sys\n-sys.path.append('../../..//doc')\n-\n-from baseconf import *\n-\n-name = 'cpp'\n-project = 'The C Preprocessor'\n-copyright = '1987-2022 Free Software Foundation, Inc.'\n-authors = 'Richard M. Stallman, Zachary Weinberg'\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-latex_documents = [\n-  ('index', f'{name}.tex', project, authors, 'manual'),\n-]\n-\n-# One entry per manual page. List of tuples\n-# (source start file, name, description, authors, manual section).\n-man_pages = [\n-    ('invocation', name, project, [authors], 1),\n-]\n-\n-texinfo_documents = [\n-  ('index', name, project, authors, None, None, None, True)\n-]\n-\n-set_common(name, globals())\n\\ No newline at end of file"}, {"sha": "fa61190ddf7e293f805f14a4af7a6a91882ca624", "filename": "gcc/doc/cpp/copyright.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fcopyright.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the GPL license file\n-\n-Copyright\n-^^^^^^^^^\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with no\n-Invariant Sections, the Front-Cover Texts being (a) (see below), and\n-with the Back-Cover Texts being (b) (see below).\n-A copy of the license is included in the :ref:`gnu_fdl`.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n\\ No newline at end of file"}, {"sha": "758e0c1c0a38ccfa56cd32f98e4034657c172317", "filename": "gcc/doc/cpp/deleted-code.rst", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fdeleted-code.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,34 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: commenting out code\n-\n-.. _deleted-code:\n-\n-Deleted Code\n-************\n-\n-If you replace or delete a part of the program but want to keep the old\n-code around for future reference, you often cannot simply comment it\n-out.  Block comments do not nest, so the first comment inside the old\n-code will end the commenting-out.  The probable result is a flood of\n-syntax errors.\n-\n-One way to avoid this problem is to use an always-false conditional\n-instead.  For instance, put ``#if 0`` before the deleted code and\n-``#endif`` after it.  This works even if the code being turned\n-off contains conditionals, but they must be entire conditionals\n-(balanced :samp:`#if` and :samp:`#endif`).\n-\n-Some people use ``#ifdef notdef`` instead.  This is risky, because\n-``notdef`` might be accidentally defined as a macro, and then the\n-conditional would succeed.  ``#if 0`` can be counted on to fail.\n-\n-Do not use ``#if 0`` for comments which are not C code.  Use a real\n-comment, instead.  The interior of ``#if 0`` must consist of complete\n-tokens; in particular, single-quote characters must balance.  Comments\n-often contain unbalanced single-quote characters (known in English as\n-apostrophes).  These confuse ``#if 0``.  They don't confuse\n-:samp:`/*`.\n\\ No newline at end of file"}, {"sha": "beaad7d8217c436c9eaafafb932a1ef63692ac7c", "filename": "gcc/doc/cpp/diagnostics.rst", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fdiagnostics.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,51 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: diagnostic, reporting errors, reporting warnings, #error\n-\n-.. _diagnostics:\n-\n-Diagnostics\n------------\n-\n-The directive :samp:`#error` causes the preprocessor to report a fatal\n-error.  The tokens forming the rest of the line following :samp:`#error`\n-are used as the error message.\n-\n-You would use :samp:`#error` inside of a conditional that detects a\n-combination of parameters which you know the program does not properly\n-support.  For example, if you know that the program will not run\n-properly on a VAX, you might write\n-\n-.. code-block:: c++\n-\n-  #ifdef __vax__\n-  #error \"Won't work on VAXen.  See comments at get_last_object.\"\n-  #endif\n-\n-If you have several configuration parameters that must be set up by\n-the installation in a consistent way, you can use conditionals to detect\n-an inconsistency and report it with :samp:`#error`.  For example,\n-\n-.. code-block:: c++\n-\n-  #if !defined(FOO) && defined(BAR)\n-  #error \"BAR requires FOO.\"\n-  #endif\n-\n-.. index:: #warning\n-\n-The directive :samp:`#warning` is like :samp:`#error`, but causes the\n-preprocessor to issue a warning and continue preprocessing.  The tokens\n-following :samp:`#warning` are used as the warning message.\n-\n-You might use :samp:`#warning` in obsolete header files, with a message\n-directing the user to the header file which should be used instead.\n-\n-Neither :samp:`#error` nor :samp:`#warning` macro-expands its argument.\n-Internal whitespace sequences are each replaced with a single space.\n-The line must consist of complete tokens.  It is wisest to make the\n-argument of these directives be a single string constant; this avoids\n-problems with apostrophes and the like.\n\\ No newline at end of file"}, {"sha": "c0ab799290585675205d5f1575dc954523c6578e", "filename": "gcc/doc/cpp/environment-variables.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fenvironment-variables.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,23 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: environment variables\n-\n-.. _environment-variables:\n-\n-Environment Variables\n----------------------\n-\n-This section describes the environment variables that affect how CPP\n-operates.  You can use them to specify directories or prefixes to use\n-when searching for include files, or to control dependency output.\n-\n-Note that you can also specify places to search using options such as\n-:option:`-I`, and control dependency output with options like\n-:option:`-M` (see :ref:`invocation`).  These take precedence over\n-environment variables, which in turn take precedence over the\n-configuration of GCC.\n-\n-.. include:: ../../../doc/cppenv.rst\n\\ No newline at end of file"}, {"sha": "1de809b36361bd24d402b00bf2051e996ba85af7", "filename": "gcc/doc/cpp/gnu-free-documentation-license.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fgnu-free-documentation-license.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,6 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. include:: ../../../doc/gnu_free_documentation_license.rst\n\\ No newline at end of file"}, {"sha": "13b9841c3c661bfd8858e0206ff7a0a50870cbf8", "filename": "gcc/doc/cpp/header-files.rst", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,56 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: header file\n-\n-.. _header-files:\n-\n-Header Files\n-------------\n-\n-A header file is a file containing C declarations and macro definitions\n-(see :ref:`macros`) to be shared between several source files.  You request\n-the use of a header file in your program by :dfn:`including` it, with the\n-C preprocessing directive :samp:`#include`.\n-\n-Header files serve two purposes.\n-\n-.. index:: system header files\n-\n-* System header files declare the interfaces to parts of the operating\n-  system.  You include them in your program to supply the definitions and\n-  declarations you need to invoke system calls and libraries.\n-\n-* Your own header files contain declarations for interfaces between the\n-  source files of your program.  Each time you have a group of related\n-  declarations and macro definitions all or most of which are needed in\n-  several different source files, it is a good idea to create a header\n-  file for them.\n-\n-Including a header file produces the same results as copying the header\n-file into each source file that needs it.  Such copying would be\n-time-consuming and error-prone.  With a header file, the related\n-declarations appear in only one place.  If they need to be changed, they\n-can be changed in one place, and programs that include the header file\n-will automatically use the new version when next recompiled.  The header\n-file eliminates the labor of finding and changing all the copies as well\n-as the risk that a failure to find one copy will result in\n-inconsistencies within a program.\n-\n-In C, the usual convention is to give header files names that end with\n-:samp:`.h`.  It is most portable to use only letters, digits, dashes, and\n-underscores in header file names, and at most one dot.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  header-files/include-syntax\n-  header-files/include-operation\n-  header-files/search-path\n-  header-files/once-only-headers\n-  header-files/alternatives-to-wrapper-ifndef\n-  header-files/computed-includes\n-  header-files/wrapper-headers\n-  header-files/system-headers\n\\ No newline at end of file"}, {"sha": "e38cffeaf38134663d9ba75bb3f77a3675e7ae36", "filename": "gcc/doc/cpp/header-files/alternatives-to-wrapper-ifndef.rst", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Falternatives-to-wrapper-ifndef.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,40 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _alternatives-to-wrapper-ifndef:\n-\n-Alternatives to Wrapper #ifndef\n-*******************************\n-\n-CPP supports two more ways of indicating that a header file should be\n-read only once.  Neither one is as portable as a wrapper :samp:`#ifndef`\n-and we recommend you do not use them in new programs, with the caveat\n-that :samp:`#import` is standard practice in Objective-C.\n-\n-.. index:: #import\n-\n-CPP supports a variant of :samp:`#include` called :samp:`#import` which\n-includes a file, but does so at most once.  If you use :samp:`#import`\n-instead of :samp:`#include`, then you don't need the conditionals\n-inside the header file to prevent multiple inclusion of the contents.\n-:samp:`#import` is standard in Objective-C, but is considered a\n-deprecated extension in C and C++.\n-\n-:samp:`#import` is not a well designed feature.  It requires the users of\n-a header file to know that it should only be included once.  It is much\n-better for the header file's implementor to write the file so that users\n-don't need to know this.  Using a wrapper :samp:`#ifndef` accomplishes\n-this goal.\n-\n-In the present implementation, a single use of :samp:`#import` will\n-prevent the file from ever being read again, by either :samp:`#import` or\n-:samp:`#include`.  You should not rely on this; do not use both\n-:samp:`#import` and :samp:`#include` to refer to the same header file.\n-\n-Another way to prevent a header file from being included more than once\n-is with the :samp:`#pragma once` directive (see :ref:`pragmas`).\n-:samp:`#pragma once` does not have the problems that :samp:`#import` does,\n-but it is not recognized by all preprocessors, so you cannot rely on it\n-in a portable program.\n\\ No newline at end of file"}, {"sha": "49c16228032f9794880535edbab754a17189423c", "filename": "gcc/doc/cpp/header-files/computed-includes.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fcomputed-includes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,86 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: computed includes, macros in include\n-\n-.. _computed-includes:\n-\n-Computed Includes\n-*****************\n-\n-Sometimes it is necessary to select one of several different header\n-files to be included into your program.  They might specify\n-configuration parameters to be used on different sorts of operating\n-systems, for instance.  You could do this with a series of conditionals,\n-\n-.. code-block:: c++\n-\n-  #if SYSTEM_1\n-  # include \"system_1.h\"\n-  #elif SYSTEM_2\n-  # include \"system_2.h\"\n-  #elif SYSTEM_3\n-  ...\n-  #endif\n-\n-That rapidly becomes tedious.  Instead, the preprocessor offers the\n-ability to use a macro for the header name.  This is called a\n-:dfn:`computed include`.  Instead of writing a header name as the direct\n-argument of :samp:`#include`, you simply put a macro name there instead:\n-\n-.. code-block:: c++\n-\n-  #define SYSTEM_H \"system_1.h\"\n-  ...\n-  #include SYSTEM_H\n-\n-``SYSTEM_H`` will be expanded, and the preprocessor will look for\n-:samp:`system_1.h` as if the :samp:`#include` had been written that way\n-originally.  ``SYSTEM_H`` could be defined by your Makefile with a\n-:option:`-D` option.\n-\n-You must be careful when you define the macro.  :samp:`#define` saves\n-tokens, not text.  The preprocessor has no way of knowing that the macro\n-will be used as the argument of :samp:`#include`, so it generates\n-ordinary tokens, not a header name.  This is unlikely to cause problems\n-if you use double-quote includes, which are close enough to string\n-constants.  If you use angle brackets, however, you may have trouble.\n-\n-The syntax of a computed include is actually a bit more general than the\n-above.  If the first non-whitespace character after :samp:`#include` is\n-not :samp:`\"` or :samp:`<`, then the entire line is macro-expanded\n-like running text would be.\n-\n-If the line expands to a single string constant, the contents of that\n-string constant are the file to be included.  CPP does not re-examine the\n-string for embedded quotes, but neither does it process backslash\n-escapes in the string.  Therefore\n-\n-.. code-block:: c++\n-\n-  #define HEADER \"a\\\"b\"\n-  #include HEADER\n-\n-looks for a file named :samp:`a\\\\\"b`.  CPP searches for the file according\n-to the rules for double-quoted includes.\n-\n-If the line expands to a token stream beginning with a :samp:`<` token\n-and including a :samp:`>` token, then the tokens between the :samp:`<` and\n-the first :samp:`>` are combined to form the filename to be included.\n-Any whitespace between tokens is reduced to a single space; then any\n-space after the initial :samp:`<` is retained, but a trailing space\n-before the closing :samp:`>` is ignored.  CPP searches for the file\n-according to the rules for angle-bracket includes.\n-\n-In either case, if there are any tokens on the line after the file name,\n-an error occurs and the directive is not processed.  It is also an error\n-if the result of expansion does not match either of the two expected\n-forms.\n-\n-These rules are implementation-defined behavior according to the C\n-standard.  To minimize the risk of different compilers interpreting your\n-computed includes differently, we recommend you use only a single\n-object-like macro which expands to a string constant.  This will also\n-minimize confusion for people reading your program.\n\\ No newline at end of file"}, {"sha": "465905698e71430b72d7ff5cdbcbd19cbe0639a2", "filename": "gcc/doc/cpp/header-files/include-operation.rst", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-operation.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,67 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _include-operation:\n-\n-Include Operation\n-*****************\n-\n-The :samp:`#include` directive works by directing the C preprocessor to\n-scan the specified file as input before continuing with the rest of the\n-current file.  The output from the preprocessor contains the output\n-already generated, followed by the output resulting from the included\n-file, followed by the output that comes from the text after the\n-:samp:`#include` directive.  For example, if you have a header file\n-:samp:`header.h` as follows,\n-\n-.. code-block:: c++\n-\n-  char *test (void);\n-\n-and a main program called :samp:`program.c` that uses the header file,\n-like this,\n-\n-.. code-block:: c++\n-\n-  int x;\n-  #include \"header.h\"\n-\n-  int\n-  main (void)\n-  {\n-    puts (test ());\n-  }\n-\n-the compiler will see the same token stream as it would if\n-:samp:`program.c` read\n-\n-.. code-block:: c++\n-\n-  int x;\n-  char *test (void);\n-\n-  int\n-  main (void)\n-  {\n-    puts (test ());\n-  }\n-\n-Included files are not limited to declarations and macro definitions;\n-those are merely the typical uses.  Any fragment of a C program can be\n-included from another file.  The include file could even contain the\n-beginning of a statement that is concluded in the containing file, or\n-the end of a statement that was started in the including file.  However,\n-an included file must consist of complete tokens.  Comments and string\n-literals which have not been closed by the end of an included file are\n-invalid.  For error recovery, they are considered to end at the end of\n-the file.\n-\n-To avoid confusion, it is best if header files contain only complete\n-syntactic units---function declarations or definitions, type\n-declarations, etc.\n-\n-The line following the :samp:`#include` directive is always treated as a\n-separate line by the C preprocessor, even if the included file lacks a\n-final newline.\n\\ No newline at end of file"}, {"sha": "a378dfc5375538170ae0653e6cb5b71e5c953202", "filename": "gcc/doc/cpp/header-files/include-syntax.rst", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Finclude-syntax.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,42 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: #include\n-\n-.. _include-syntax:\n-\n-Include Syntax\n-**************\n-\n-Both user and system header files are included using the preprocessing\n-directive :samp:`#include`.  It has two variants:\n-\n-:samp:`#include <{file}>`\n-  This variant is used for system header files.  It searches for a file\n-  named :samp:`{file}` in a standard list of system directories.  You can prepend\n-  directories to this list with the :option:`-I` option (see :ref:`invocation`).\n-\n-:samp:`#include \"{file}\"`\n-  This variant is used for header files of your own program.  It\n-  searches for a file named :samp:`{file}` first in the directory containing\n-  the current file, then in the quote directories and then the same\n-  directories used for ``<file>``.  You can prepend directories\n-  to the list of quote directories with the :option:`-iquote` option.\n-\n-The argument of :samp:`#include`, whether delimited with quote marks or\n-angle brackets, behaves like a string constant in that comments are not\n-recognized, and macro names are not expanded.  Thus, ``#include\n-<x/*y>`` specifies inclusion of a system header file named :samp:`x/*y`.\n-\n-However, if backslashes occur within :samp:`{file}`, they are considered\n-ordinary text characters, not escape characters.  None of the character\n-escape sequences appropriate to string constants in C are processed.\n-Thus, ``#include \"x\\n\\\\y\"`` specifies a filename containing three\n-backslashes.  (Some systems interpret :samp:`\\\\` as a pathname separator.\n-All of these also interpret :samp:`/` the same way.  It is most portable\n-to use only :samp:`/`.)\n-\n-It is an error if there is anything (other than comments) on the line\n-after the file name.\n\\ No newline at end of file"}, {"sha": "2ee777716201b9fe2096ec3909e624d052ece43e", "filename": "gcc/doc/cpp/header-files/once-only-headers.rst", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fonce-only-headers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,52 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: repeated inclusion, including just once, wrapper #ifndef\n-\n-.. _once-only-headers:\n-\n-Once-Only Headers\n-*****************\n-\n-If a header file happens to be included twice, the compiler will process\n-its contents twice.  This is very likely to cause an error, e.g. when the\n-compiler sees the same structure definition twice.  Even if it does not,\n-it will certainly waste time.\n-\n-The standard way to prevent this is to enclose the entire real contents\n-of the file in a conditional, like this:\n-\n-.. code-block:: c++\n-\n-  /* File foo.  */\n-  #ifndef FILE_FOO_SEEN\n-  #define FILE_FOO_SEEN\n-\n-  the entire file\n-\n-  #endif /* !FILE_FOO_SEEN */\n-\n-This construct is commonly known as a :dfn:`wrapper #ifndef`.\n-When the header is included again, the conditional will be false,\n-because ``FILE_FOO_SEEN`` is defined.  The preprocessor will skip\n-over the entire contents of the file, and the compiler will not see it\n-twice.\n-\n-CPP optimizes even further.  It remembers when a header file has a\n-wrapper :samp:`#ifndef`.  If a subsequent :samp:`#include` specifies that\n-header, and the macro in the :samp:`#ifndef` is still defined, it does\n-not bother to rescan the file at all.\n-\n-You can put comments outside the wrapper.  They will not interfere with\n-this optimization.\n-\n-.. index:: controlling macro, guard macro\n-\n-The macro ``FILE_FOO_SEEN`` is called the :dfn:`controlling macro` or\n-:dfn:`guard macro`.  In a user header file, the macro name should not\n-begin with :samp:`_`.  In a system header file, it should begin with\n-:samp:`__` to avoid conflicts with user programs.  In any kind of header\n-file, the macro name should contain the name of the file and some\n-additional text, to avoid conflicts with other header files.\n\\ No newline at end of file"}, {"sha": "9f87878517f048f18a27954750ab5f068b25cc71", "filename": "gcc/doc/cpp/header-files/search-path.rst", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsearch-path.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,53 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _search-path:\n-\n-Search Path\n-***********\n-\n-By default, the preprocessor looks for header files included by the quote\n-form of the directive ``#include \"file\"`` first relative to\n-the directory of the current file, and then in a preconfigured list\n-of standard system directories.\n-For example, if :samp:`/usr/include/sys/stat.h` contains\n-``#include \"types.h\"``, GCC looks for :samp:`types.h` first in\n-:samp:`/usr/include/sys`, then in its usual search path.\n-\n-For the angle-bracket form ``#include <file>``, the\n-preprocessor's default behavior is to look only in the standard system\n-directories.  The exact search directory list depends on the target\n-system, how GCC is configured, and where it is installed.  You can\n-find the default search directory list for your version of CPP by\n-invoking it with the :option:`-v` option.  For example,\n-\n-.. code-block:: c++\n-\n-  cpp -v /dev/null -o /dev/null\n-\n-There are a number of command-line options you can use to add\n-additional directories to the search path.\n-The most commonly-used option is :option:`-Idir`, which causes\n-:samp:`{dir}` to be searched after the current directory (for the quote\n-form of the directive) and ahead of the standard system directories.\n-You can specify multiple :option:`-I` options on the command line,\n-in which case the directories are searched in left-to-right order.\n-\n-If you need separate control over the search paths for the quote and\n-angle-bracket forms of the :samp:`#include` directive, you can use the\n-:option:`-iquote` and/or :option:`-isystem` options instead of :option:`-I`.\n-See :ref:`invocation`, for a detailed description of these options, as\n-well as others that are less generally useful.\n-\n-If you specify other options on the command line, such as :option:`-I`,\n-that affect where the preprocessor searches for header files, the\n-directory list printed by the :option:`-v` option reflects the actual\n-search path used by the preprocessor.\n-\n-Note that you can also prevent the preprocessor from searching any of\n-the default system header directories with the :option:`-nostdinc`\n-option.  This is useful when you are compiling an operating system\n-kernel or some other program that does not use the standard C library\n-facilities, or the standard C library itself.\n\\ No newline at end of file"}, {"sha": "ef6474f9deab1ddad4c138eccd9296add0feb7a0", "filename": "gcc/doc/cpp/header-files/system-headers.rst", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fsystem-headers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,41 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: system header files\n-\n-.. _system-headers:\n-\n-System Headers\n-**************\n-\n-The header files declaring interfaces to the operating system and\n-runtime libraries often cannot be written in strictly conforming C.\n-Therefore, GCC gives code found in :dfn:`system headers` special\n-treatment.  All warnings, other than those generated by :samp:`#warning`\n-(see :ref:`diagnostics`), are suppressed while GCC is processing a system\n-header.  Macros defined in a system header are immune to a few warnings\n-wherever they are expanded.  This immunity is granted on an ad-hoc\n-basis, when we find that a warning generates lots of false positives\n-because of code in macros defined in system headers.\n-\n-Normally, only the headers found in specific directories are considered\n-system headers.  These directories are determined when GCC is compiled.\n-There are, however, two ways to make normal headers into system headers:\n-\n-* Header files found in directories added to the search path with the\n-  :option:`-isystem` and :option:`-idirafter` command-line options are\n-  treated as system headers for the purposes of diagnostics.\n-\n-*\n-  .. index:: #pragma GCC system_header\n-\n-  There is also a directive, ``#pragma GCC system_header``, which\n-  tells GCC to consider the rest of the current include file a system\n-  header, no matter where it was found.  Code that comes before the\n-  :samp:`#pragma` in the file is not affected.  ``#pragma GCC\n-  system_header`` has no effect in the primary source file.\n-\n-On some targets, such as RS/6000 AIX, GCC implicitly surrounds all\n-system headers with an :samp:`extern \"C\"` block when compiling as C++.\n\\ No newline at end of file"}, {"sha": "848170e138e68f98ee218217abe51e7319fe13b2", "filename": "gcc/doc/cpp/header-files/wrapper-headers.rst", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fheader-files%2Fwrapper-headers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,58 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: wrapper headers, overriding a header file, #include_next\n-\n-.. _wrapper-headers:\n-\n-Wrapper Headers\n-***************\n-\n-Sometimes it is necessary to adjust the contents of a system-provided\n-header file without editing it directly.  GCC's :command:`fixincludes`\n-operation does this, for example.  One way to do that would be to create\n-a new header file with the same name and insert it in the search path\n-before the original header.  That works fine as long as you're willing\n-to replace the old header entirely.  But what if you want to refer to\n-the old header from the new one?\n-\n-You cannot simply include the old header with :samp:`#include`.  That\n-will start from the beginning, and find your new header again.  If your\n-header is not protected from multiple inclusion (see :ref:`once-only-headers`), it will recurse infinitely and cause a fatal error.\n-\n-You could include the old header with an absolute pathname:\n-\n-.. code-block:: c++\n-\n-  #include \"/usr/include/old-header.h\"\n-\n-This works, but is not clean; should the system headers ever move, you\n-would have to edit the new headers to match.\n-\n-There is no way to solve this problem within the C standard, but you can\n-use the GNU extension :samp:`#include_next`.  It means, 'Include the\n-*next* file with this name'.  This directive works like\n-:samp:`#include` except in searching for the specified file: it starts\n-searching the list of header file directories *after* the directory\n-in which the current file was found.\n-\n-Suppose you specify :option:`-I /usr/local/include`, and the list of\n-directories to search also includes :samp:`/usr/include`; and suppose\n-both directories contain :samp:`signal.h`.  Ordinary ``#include\n-<signal.h>`` finds the file under :samp:`/usr/local/include`.  If that\n-file contains ``#include_next <signal.h>``, it starts searching\n-after that directory, and finds the file in :samp:`/usr/include`.\n-\n-:samp:`#include_next` does not distinguish between ``<file>``\n-and ``\"file\"`` inclusion, nor does it check that the file you\n-specify has the same name as the current file.  It simply looks for the\n-file named, starting with the directory in the search path after the one\n-where the current file was found.\n-\n-The use of :samp:`#include_next` can lead to great confusion.  We\n-recommend it be used only when there is no other alternative.  In\n-particular, it should not be used in the headers belonging to a specific\n-program; it should be used only to make global corrections along the\n-lines of :command:`fixincludes`.\n\\ No newline at end of file"}, {"sha": "8946520eefe38e700d3802e7f5485c448887498f", "filename": "gcc/doc/cpp/implementation-defined-behavior.rst", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-defined-behavior.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,97 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _implementation-defined-behavior:\n-\n-.. _identifier-characters:\n-\n-Implementation-defined behavior\n-*******************************\n-\n-This is how CPP behaves in all the cases which the C standard\n-describes as :dfn:`implementation-defined`.  This term means that the\n-implementation is free to do what it likes, but must document its choice\n-and stick to it.\n-\n-.. todo:: Check the C++ standard for more implementation-defined stuff.\n-\n-* The mapping of physical source file multi-byte characters to the\n-  execution character set.\n-\n-  The input character set can be specified using the\n-  :option:`-finput-charset` option, while the execution character set may\n-  be controlled using the :option:`-fexec-charset` and\n-  :option:`-fwide-exec-charset` options.\n-\n-* Identifier characters.\n-\n-  The C and C++ standards allow identifiers to be composed of :samp:`_`\n-  and the alphanumeric characters.  C++ also allows universal character\n-  names.  C99 and later C standards permit both universal character\n-  names and implementation-defined characters.  In both C and C++ modes,\n-  GCC accepts in identifiers exactly those extended characters that\n-  correspond to universal character names permitted by the chosen\n-  standard.\n-\n-  GCC allows the :samp:`$` character in identifiers as an extension for\n-  most targets.  This is true regardless of the std= switch,\n-  since this extension cannot conflict with standards-conforming\n-  programs.  When preprocessing assembler, however, dollars are not\n-  identifier characters by default.\n-\n-  Currently the targets that by default do not permit :samp:`$` are AVR,\n-  IP2K, MMIX, MIPS Irix 3, ARM aout, and PowerPC targets for the AIX\n-  operating system.\n-\n-  You can override the default with :option:`-fdollars-in-identifiers` or\n-  :option:`-fno-dollars-in-identifiers`.  See :option:`-fdollars-in-identifiers`.\n-\n-* Non-empty sequences of whitespace characters.\n-\n-  In textual output, each whitespace sequence is collapsed to a single\n-  space.  For aesthetic reasons, the first token on each non-directive\n-  line of output is preceded with sufficient spaces that it appears in the\n-  same column as it did in the original source file.\n-\n-* The numeric value of character constants in preprocessor expressions.\n-\n-  The preprocessor and compiler interpret character constants in the\n-  same way; i.e. escape sequences such as :samp:`\\\\a` are given the\n-  values they would have on the target machine.\n-\n-  The compiler evaluates a multi-character character constant a character\n-  at a time, shifting the previous value left by the number of bits per\n-  target character, and then or-ing in the bit-pattern of the new\n-  character truncated to the width of a target character.  The final\n-  bit-pattern is given type ``int``, and is therefore signed,\n-  regardless of whether single characters are signed or not.\n-  If there are more\n-  characters in the constant than would fit in the target ``int`` the\n-  compiler issues a warning, and the excess leading characters are\n-  ignored.\n-\n-  For example, ``'ab'`` for a target with an 8-bit ``char`` would be\n-  interpreted as :samp:`(int) ((unsigned char) 'a' * 256 + (unsigned char)\n-  'b')`, and ``'\\234a'`` as :samp:`(int) ((unsigned char) '\\\\234' *\n-  256 + (unsigned char) 'a')`.\n-\n-* Source file inclusion.\n-\n-  For a discussion on how the preprocessor locates header files,\n-  :ref:`include-operation`.\n-\n-* Interpretation of the filename resulting from a macro-expanded\n-  :samp:`#include` directive.\n-\n-  See :ref:`computed-includes`.\n-\n-* Treatment of a :samp:`#pragma` directive that after macro-expansion\n-  results in a standard pragma.\n-\n-  No macro expansion occurs on any :samp:`#pragma` directive line, so the\n-  question does not arise.\n-\n-  Note that GCC does not yet implement any of the standard\n-  pragmas.\n\\ No newline at end of file"}, {"sha": "326277b1fc9055dde18146bec4990567221db40f", "filename": "gcc/doc/cpp/implementation-details.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-details.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,23 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _implementation-details:\n-\n-Implementation Details\n-----------------------\n-\n-Here we document details of how the preprocessor's implementation\n-affects its user-visible behavior.  You should try to avoid undue\n-reliance on behavior described here, as it is possible that it will\n-change subtly in future implementations.\n-\n-Also documented here are obsolete features still supported by CPP.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  implementation-defined-behavior\n-  implementation-limits\n-  obsolete-features\n\\ No newline at end of file"}, {"sha": "18cfc6ab0a67cf9301869b6164d1ea3e806b3662", "filename": "gcc/doc/cpp/implementation-limits.rst", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fimplementation-limits.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,68 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: implementation limits\n-\n-.. _implementation-limits:\n-\n-Implementation limits\n-*********************\n-\n-CPP has a small number of internal limits.  This section lists the\n-limits which the C standard requires to be no lower than some minimum,\n-and all the others known.  It is intended that there should be as few limits\n-as possible.  If you encounter an undocumented or inconvenient limit,\n-please report that as a bug.  See :ref:`gcc:bugs`.\n-\n-Where we say something is limited :dfn:`only by available memory`, that\n-means that internal data structures impose no intrinsic limit, and space\n-is allocated with ``malloc`` or equivalent.  The actual limit will\n-therefore depend on many things, such as the size of other things\n-allocated by the compiler at the same time, the amount of memory\n-consumed by other processes on the same computer, etc.\n-\n-* Nesting levels of :samp:`#include` files.\n-\n-  We impose an arbitrary limit of 200 levels, to avoid runaway recursion.\n-  The standard requires at least 15 levels.\n-\n-* Nesting levels of conditional inclusion.\n-\n-  The C standard mandates this be at least 63.  CPP is limited only by\n-  available memory.\n-\n-* Levels of parenthesized expressions within a full expression.\n-\n-  The C standard requires this to be at least 63.  In preprocessor\n-  conditional expressions, it is limited only by available memory.\n-\n-* Significant initial characters in an identifier or macro name.\n-\n-  The preprocessor treats all characters as significant.  The C standard\n-  requires only that the first 63 be significant.\n-\n-* Number of macros simultaneously defined in a single translation unit.\n-\n-  The standard requires at least 4095 be possible.  CPP is limited only\n-  by available memory.\n-\n-* Number of parameters in a macro definition and arguments in a macro call.\n-\n-  We allow ``USHRT_MAX``, which is no smaller than 65,535.  The minimum\n-  required by the standard is 127.\n-\n-* Number of characters on a logical source line.\n-\n-  The C standard requires a minimum of 4096 be permitted.  CPP places\n-  no limits on this, but you may get incorrect column numbers reported in\n-  diagnostics for lines longer than 65,535 characters.\n-\n-* Maximum size of a source file.\n-\n-  The standard does not specify any lower limit on the maximum size of a\n-  source file.  GNU cpp maps files into memory, so it is limited by the\n-  available address space.  This is generally at least two gigabytes.\n-  Depending on the operating system, the size of physical memory may or\n-  may not be a limitation.\n\\ No newline at end of file"}, {"sha": "e19dfba42a6c949ca7c54f8ffbfa4dc44412da16", "filename": "gcc/doc/cpp/index.rst", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Findex.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,35 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-The C Preprocessor\n-==================\n-\n-The C preprocessor implements the macro language used to transform C,\n-C++, and Objective-C programs before they are compiled.  It can also be\n-useful on its own.\n-\n-.. only:: html\n-\n-  Contents:\n-\n-.. toctree::\n-\n-  copyright\n-  overview\n-  header-files\n-  macros\n-  conditionals\n-  diagnostics\n-  line-control\n-  pragmas\n-  other-directives\n-  preprocessor-output\n-  traditional-mode\n-  implementation-details\n-  invocation\n-  environment-variables\n-  gnu-free-documentation-license\n-\n-  indices-and-tables\n\\ No newline at end of file"}, {"sha": "6c215a391d9ba8d2036df046206d7902829b8c1c", "filename": "gcc/doc/cpp/indices-and-tables.rst", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Findices-and-tables.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1 +0,0 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file"}, {"sha": "9ca96f21428ad49770d8da152add7dd68510cd84", "filename": "gcc/doc/cpp/initial-processing.rst", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Finitial-processing.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,164 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _initial-processing:\n-\n-Initial processing\n-******************\n-\n-The preprocessor performs a series of textual transformations on its\n-input.  These happen before all other processing.  Conceptually, they\n-happen in a rigid order, and the entire file is run through each\n-transformation before the next one begins.  CPP actually does them\n-all at once, for performance reasons.  These transformations correspond\n-roughly to the first three 'phases of translation' described in the C\n-standard.\n-\n-.. index:: line endings\n-\n-* The input file is read into memory and broken into lines.\n-\n-  Different systems use different conventions to indicate the end of a\n-  line.  GCC accepts the ASCII control sequences LF, CR\n-  LF and CR as end-of-line markers.  These are the canonical\n-  sequences used by Unix, DOS and VMS, and the classic Mac OS (before\n-  OSX) respectively.  You may therefore safely copy source code written\n-  on any of those systems to a different one and use it without\n-  conversion.  (GCC may lose track of the current line number if a file\n-  doesn't consistently use one convention, as sometimes happens when it\n-  is edited on computers with different conventions that share a network\n-  file system.)\n-\n-  If the last line of any input file lacks an end-of-line marker, the end\n-  of the file is considered to implicitly supply one.  The C standard says\n-  that this condition provokes undefined behavior, so GCC will emit a\n-  warning message.\n-\n-.. index:: trigraphs\n-\n-.. _trigraphs:\n-\n-* If trigraphs are enabled, they are replaced by their\n-  corresponding single characters.  By default GCC ignores trigraphs,\n-  but if you request a strictly conforming mode with the :option:`-std`\n-  option, or you specify the :option:`-trigraphs` option, then it\n-  converts them.\n-\n-  These are nine three-character sequences, all starting with :samp:`??`,\n-  that are defined by ISO C to stand for single characters.  They permit\n-  obsolete systems that lack some of C's punctuation to use C.  For\n-  example, :samp:`??/` stands for :samp:`\\\\`, so ``'??/n'`` is a character\n-  constant for a newline.\n-\n-  Trigraphs are not popular and many compilers implement them\n-  incorrectly.  Portable code should not rely on trigraphs being either\n-  converted or ignored.  With :option:`-Wtrigraphs` GCC will warn you\n-  when a trigraph may change the meaning of your program if it were\n-  converted.  See :ref:`wtrigraphs`.\n-\n-  In a string constant, you can prevent a sequence of question marks\n-  from being confused with a trigraph by inserting a backslash between\n-  the question marks, or by separating the string literal at the\n-  trigraph and making use of string literal concatenation.  ``\"(??\\?)\"``\n-  is the string :samp:`(???)`, not :samp:`(?]`.  Traditional C compilers\n-  do not recognize these idioms.\n-\n-  The nine trigraphs and their replacements are\n-\n-  .. code-block::\n-\n-    Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n-    Replacement:      [    ]    {    }    #    \\    ^    |    ~\n-\n-.. index:: continued lines, backslash-newline\n-\n-* Continued lines are merged into one long line.\n-\n-  A continued line is a line which ends with a backslash, :samp:`\\\\`.  The\n-  backslash is removed and the following line is joined with the current\n-  one.  No space is inserted, so you may split a line anywhere, even in\n-  the middle of a word.  (It is generally more readable to split lines\n-  only at white space.)\n-\n-  The trailing backslash on a continued line is commonly referred to as a\n-  :dfn:`backslash-newline`.\n-\n-  If there is white space between a backslash and the end of a line, that\n-  is still a continued line.  However, as this is usually the result of an\n-  editing mistake, and many compilers will not accept it as a continued\n-  line, GCC will warn you about it.\n-\n-.. index:: comments, line comments, block comments\n-\n-* All comments are replaced with single spaces.\n-\n-  There are two kinds of comments.  :dfn:`Block comments` begin with\n-  :samp:`/*` and continue until the next :samp:`*/`.  Block comments do not\n-  nest:\n-\n-  .. code-block:: c++\n-\n-    /* this is /* one comment */ text outside comment\n-\n-  :dfn:`Line comments` begin with :samp:`//` and continue to the end of the\n-  current line.  Line comments do not nest either, but it does not matter,\n-  because they would end in the same place anyway.\n-\n-  .. code-block:: c++\n-\n-    // this is // one comment\n-    text outside comment\n-\n-It is safe to put line comments inside block comments, or vice versa.\n-\n-.. code-block:: c++\n-\n-  /* block comment\n-     // contains line comment\n-     yet more comment\n-   */ outside comment\n-\n-  // line comment /* contains block comment */\n-\n-But beware of commenting out one end of a block comment with a line\n-comment.\n-\n-.. code-block::\n-\n-   // l.c.  /* block comment begins\n-      oops! this isn't a comment anymore */\n-\n-Comments are not recognized within string literals.\n-``\"/* blah */\"`` is the string constant :samp:`/\\* blah \\*/`, not\n-an empty string.\n-\n-Line comments are not in the 1989 edition of the C standard, but they\n-are recognized by GCC as an extension.  In C++ and in the 1999 edition\n-of the C standard, they are an official part of the language.\n-\n-Since these transformations happen before all other processing, you can\n-split a line mechanically with backslash-newline anywhere.  You can\n-comment out the end of a line.  You can continue a line comment onto the\n-next line with backslash-newline.  You can even split :samp:`/*`,\n-:samp:`*/`, and :samp:`//` onto multiple lines with backslash-newline.\n-For example:\n-\n-.. code-block::\n-\n-  /\\\n-  *\n-  */ # /*\n-  */ defi\\\n-  ne FO\\\n-  O 10\\\n-  20\n-\n-is equivalent to ``#define FOO 1020``.  All these tricks are\n-extremely confusing and should not be used in code intended to be\n-readable.\n-\n-There is no way to prevent a backslash at the end of a line from being\n-interpreted as a backslash-newline.  This cannot affect any correct\n-program, however.\n\\ No newline at end of file"}, {"sha": "7b13980af5ac956f9b9d8a0fa676c6c10b247986", "filename": "gcc/doc/cpp/invocation.rst", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Finvocation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Finvocation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Finvocation.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,81 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: invocation, command line\n-\n-.. _invocation:\n-\n-Invocation\n-----------\n-\n-Most often when you use the C preprocessor you do not have to invoke it\n-explicitly: the C compiler does so automatically.  However, the\n-preprocessor is sometimes useful on its own.  You can invoke the\n-preprocessor either with the :command:`cpp` command, or via :command:`gcc -E`.\n-In GCC, the preprocessor is actually integrated with the compiler\n-rather than a separate program, and both of these commands invoke\n-GCC and tell it to stop after the preprocessing phase.\n-\n-The :command:`cpp` options listed here are also accepted by\n-:command:`gcc` and have the same meaning.  Likewise the :command:`cpp`\n-command accepts all the usual :command:`gcc` driver options, although those\n-pertaining to compilation phases after preprocessing are ignored.\n-\n-Only options specific to preprocessing behavior are documented here.\n-Refer to the GCC manual for full documentation of other driver options.\n-\n-.. only:: man\n-\n-  Synopsis\n-  ^^^^^^^^\n-\n-  cpp [ :option:`-D`:samp:`{macro}` [= :samp:`{defn}` ]...] [ :option:`-U`:samp:`{macro}` ]\n-      [ :option:`-I`:samp:`{dir}`...] [ :option:`-iquote`:samp:`{dir}`...]\n-      [ :option:`-M` | :option:`-MM` ] [ :option:`-MG` ] [ :option:`-MF` :samp:`{filename}` ]\n-      [ :option:`-MP` ] [ :option:`-MQ` :samp:`{target}`...]\n-      [ :option:`-MT` :samp:`{target}`...]\n-      :samp:`{infile}` [[ :option:`-o` ] :samp:`{outfile}` ]\n-\n-  Only the most useful options are given above; see below for a more\n-  complete list of preprocessor-specific options.\n-  In addition, :command:`cpp` accepts most :command:`gcc` driver options, which\n-  are not listed here.  Refer to the GCC documentation for details.\n-\n-Options\n-^^^^^^^\n-\n-The :command:`cpp` command expects two file names as arguments, :samp:`{infile}` and\n-:samp:`{outfile}`.  The preprocessor reads :samp:`{infile}` together with any\n-other files it specifies with :samp:`#include`.  All the output generated\n-by the combined input files is written in :samp:`{outfile}`.\n-\n-Either :samp:`{infile}` or :samp:`{outfile}` may be :option:`-`, which as\n-:samp:`{infile}` means to read from standard input and as :samp:`{outfile}`\n-means to write to standard output.  If either file is omitted, it\n-means the same as if :option:`-` had been specified for that file.\n-You can also use the :option:`-o outfile` option to specify the\n-output file.\n-\n-Unless otherwise noted, or the option ends in :samp:`=`, all options\n-which take an argument may have that argument appear either immediately\n-after the option, or with a space between option and argument:\n-:option:`-Ifoo` and :option:`-I foo` have the same effect.\n-\n-.. index:: grouping options, options, grouping\n-\n-Many options have multi-letter names; therefore multiple single-letter\n-options may *not* be grouped: :option:`-dM` is very different from\n-:samp:`-d -M`.\n-\n-.. index:: options\n-\n-.. include:: ../../../doc/cppopts.rst\n-\n-\n-.. include:: ../../../doc/cppdiropts.rst\n-\n-.. only:: man\n-\n-  .. include:: copyright.rst\n\\ No newline at end of file"}, {"sha": "933d8a9cf1c1622d44795afc8d3f0f9fa0680249", "filename": "gcc/doc/cpp/line-control.rst", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fline-control.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fline-control.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fline-control.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,55 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: line control\n-\n-.. _line-control:\n-\n-Line Control\n-------------\n-\n-The C preprocessor informs the C compiler of the location in your source\n-code where each token came from.  Presently, this is just the file name\n-and line number.  All the tokens resulting from macro expansion are\n-reported as having appeared on the line of the source file where the\n-outermost macro was used.  We intend to be more accurate in the future.\n-\n-If you write a program which generates source code, such as the\n-:command:`bison` parser generator, you may want to adjust the preprocessor's\n-notion of the current file name and line number by hand.  Parts of the\n-output from :command:`bison` are generated from scratch, other parts come\n-from a standard parser file.  The rest are copied verbatim from\n-:command:`bison`'s input.  You would like compiler error messages and\n-symbolic debuggers to be able to refer to ``bison`` 's input file.\n-\n-.. index:: #line\n-\n-:command:`bison` or any such program can arrange this by writing\n-:samp:`#line` directives into the output file.  :samp:`#line` is a\n-directive that specifies the original line number and source file name\n-for subsequent input in the current preprocessor input file.\n-:samp:`#line` has three variants:\n-\n-:samp:`#line {linenum}`\n-  :samp:`{linenum}` is a non-negative decimal integer constant.  It specifies\n-  the line number which should be reported for the following line of\n-  input.  Subsequent lines are counted from :samp:`{linenum}`.\n-\n-:samp:`#line {linenum}{filename}`\n-  :samp:`{linenum}` is the same as for the first form, and has the same\n-  effect.  In addition, :samp:`{filename}` is a string constant.  The\n-  following line and all subsequent lines are reported to come from the\n-  file it specifies, until something else happens to change that.\n-  :samp:`{filename}` is interpreted according to the normal rules for a string\n-  constant: backslash escapes are interpreted.  This is different from\n-  :samp:`#include`.\n-\n-:samp:`#line {anything else}`\n-  :samp:`{anything else}` is checked for macro calls, which are expanded.\n-  The result should match one of the above two forms.\n-\n-:samp:`#line` directives alter the results of the ``__FILE__`` and\n-``__LINE__`` predefined macros from that point on.  See :ref:`standard-predefined-macros`.  They do not have any effect on :samp:`#include`'s\n-idea of the directory containing the current file.\n\\ No newline at end of file"}, {"sha": "7355e0719ef119e8b27097c1f7f51a7f5454acad", "filename": "gcc/doc/cpp/macros.rst", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,37 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _macros:\n-\n-Macros\n-------\n-\n-A :dfn:`macro` is a fragment of code which has been given a name.\n-Whenever the name is used, it is replaced by the contents of the macro.\n-There are two kinds of macros.  They differ mostly in what they look\n-like when they are used.  :dfn:`Object-like` macros resemble data objects\n-when used, :dfn:`function-like` macros resemble function calls.\n-\n-You may define any valid identifier as a macro, even if it is a C\n-keyword.  The preprocessor does not know anything about keywords.  This\n-can be useful if you wish to hide a keyword such as ``const`` from an\n-older compiler that does not understand it.  However, the preprocessor\n-operator ``defined`` (see :ref:`defined`) can never be defined as a\n-macro, and C++'s named operators (see :ref:`c++-named-operators`) cannot be\n-macros when you are compiling C++.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  macros/object-like-macros\n-  macros/function-like-macros\n-  macros/macro-arguments\n-  macros/stringizing\n-  macros/concatenation\n-  macros/variadic-macros\n-  macros/predefined-macros\n-  macros/undefining-and-redefining-macros\n-  macros/directives-within-macro-arguments\n-  macros/macro-pitfalls\n\\ No newline at end of file"}, {"sha": "2f5066ab65eb3dbd057a1d93161c922858ee45b5", "filename": "gcc/doc/cpp/macros/concatenation.rst", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fconcatenation.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,85 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: concatenation, token pasting, token concatenation, ## operator\n-\n-.. _concatenation:\n-\n-Concatenation\n-*************\n-\n-It is often useful to merge two tokens into one while expanding macros.\n-This is called :dfn:`token pasting` or :dfn:`token concatenation`.  The\n-:samp:`##` preprocessing operator performs token pasting.  When a macro\n-is expanded, the two tokens on either side of each :samp:`##` operator\n-are combined into a single token, which then replaces the :samp:`##` and\n-the two original tokens in the macro expansion.  Usually both will be\n-identifiers, or one will be an identifier and the other a preprocessing\n-number.  When pasted, they make a longer identifier.  This isn't the\n-only valid case.  It is also possible to concatenate two numbers (or a\n-number and a name, such as ``1.5`` and ``e3``) into a number.\n-Also, multi-character operators such as ``+=`` can be formed by\n-token pasting.\n-\n-However, two tokens that don't together form a valid token cannot be\n-pasted together.  For example, you cannot concatenate ``x`` with\n-``+`` in either order.  If you try, the preprocessor issues a warning\n-and emits the two tokens.  Whether it puts white space between the\n-tokens is undefined.  It is common to find unnecessary uses of :samp:`##`\n-in complex macros.  If you get this warning, it is likely that you can\n-simply remove the :samp:`##`.\n-\n-Both the tokens combined by :samp:`##` could come from the macro body,\n-but you could just as well write them as one token in the first place.\n-Token pasting is most useful when one or both of the tokens comes from a\n-macro argument.  If either of the tokens next to an :samp:`##` is a\n-parameter name, it is replaced by its actual argument before :samp:`##`\n-executes.  As with stringizing, the actual argument is not\n-macro-expanded first.  If the argument is empty, that :samp:`##` has no\n-effect.\n-\n-Keep in mind that the C preprocessor converts comments to whitespace\n-before macros are even considered.  Therefore, you cannot create a\n-comment by concatenating :samp:`/` and :samp:`*`.  You can put as much\n-whitespace between :samp:`##` and its operands as you like, including\n-comments, and you can put comments in arguments that will be\n-concatenated.  However, it is an error if :samp:`##` appears at either\n-end of a macro body.\n-\n-Consider a C program that interprets named commands.  There probably\n-needs to be a table of commands, perhaps an array of structures declared\n-as follows:\n-\n-.. code-block:: c++\n-\n-  struct command\n-  {\n-    char *name;\n-    void (*function) (void);\n-  };\n-\n-  struct command commands[] =\n-  {\n-    { \"quit\", quit_command },\n-    { \"help\", help_command },\n-    ...\n-  };\n-\n-It would be cleaner not to have to give each command name twice, once in\n-the string constant and once in the function name.  A macro which takes the\n-name of a command as an argument can make this unnecessary.  The string\n-constant can be created with stringizing, and the function name by\n-concatenating the argument with :samp:`_command`.  Here is how it is done:\n-\n-.. code-block:: c++\n-\n-  #define COMMAND(NAME)  { #NAME, NAME ## _command }\n-\n-  struct command commands[] =\n-  {\n-    COMMAND (quit),\n-    COMMAND (help),\n-    ...\n-  };\n\\ No newline at end of file"}, {"sha": "2e7e82563e9c5cc7a7f078ac31d96d8bdc4806e0", "filename": "gcc/doc/cpp/macros/directives-within-macro-arguments.rst", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fdirectives-within-macro-arguments.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,39 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: macro arguments and directives\n-\n-.. _directives-within-macro-arguments:\n-\n-Directives Within Macro Arguments\n-*********************************\n-\n-Occasionally it is convenient to use preprocessor directives within\n-the arguments of a macro.  The C and C++ standards declare that\n-behavior in these cases is undefined.  GNU CPP\n-processes arbitrary directives within macro arguments in\n-exactly the same way as it would have processed the directive were the\n-function-like macro invocation not present.\n-\n-If, within a macro invocation, that macro is redefined, then the new\n-definition takes effect in time for argument pre-expansion, but the\n-original definition is still used for argument replacement.  Here is a\n-pathological example:\n-\n-.. code-block:: c++\n-\n-  #define f(x) x x\n-  f (1\n-  #undef f\n-  #define f 2\n-  f)\n-\n-which expands to\n-\n-.. code-block:: c++\n-\n-  1 2 1 2\n-\n-with the semantics described above.\n\\ No newline at end of file"}, {"sha": "16ba2cf1a1aaeb80e9e759edd43b7fbcf0b3d29e", "filename": "gcc/doc/cpp/macros/function-like-macros.rst", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Ffunction-like-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,55 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: function-like macros\n-\n-.. _function-like-macros:\n-\n-Function-like Macros\n-********************\n-\n-You can also define macros whose use looks like a function call.  These\n-are called :dfn:`function-like macros`.  To define a function-like macro,\n-you use the same :samp:`#define` directive, but you put a pair of\n-parentheses immediately after the macro name.  For example,\n-\n-.. code-block::\n-\n-  #define lang_init()  c_init()\n-  lang_init()\n-       \u2192 c_init()\n-\n-A function-like macro is only expanded if its name appears with a pair\n-of parentheses after it.  If you write just the name, it is left alone.\n-This can be useful when you have a function and a macro of the same\n-name, and you wish to use the function sometimes.\n-\n-.. code-block::\n-\n-  extern void foo(void);\n-  #define foo() /* optimized inline version */\n-  ...\n-    foo();\n-    funcptr = foo;\n-\n-Here the call to ``foo()`` will use the macro, but the function\n-pointer will get the address of the real function.  If the macro were to\n-be expanded, it would cause a syntax error.\n-\n-If you put spaces between the macro name and the parentheses in the\n-macro definition, that does not define a function-like macro, it defines\n-an object-like macro whose expansion happens to begin with a pair of\n-parentheses.\n-\n-.. code-block::\n-\n-  #define lang_init ()    c_init()\n-  lang_init()\n-       \u2192 () c_init()()\n-\n-The first two pairs of parentheses in this expansion come from the\n-macro.  The third is the pair that was originally after the macro\n-invocation.  Since ``lang_init`` is an object-like macro, it does not\n-consume those parentheses.\n\\ No newline at end of file"}, {"sha": "06911523e7fb68ea2a60f482a15a40f8c058e491", "filename": "gcc/doc/cpp/macros/macro-arguments.rst", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-arguments.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,112 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: arguments, macros with arguments, arguments in macro definitions\n-\n-.. _macro-arguments:\n-\n-Macro Arguments\n-***************\n-\n-Function-like macros can take :dfn:`arguments`, just like true functions.\n-To define a macro that uses arguments, you insert :dfn:`parameters`\n-between the pair of parentheses in the macro definition that make the\n-macro function-like.  The parameters must be valid C identifiers,\n-separated by commas and optionally whitespace.\n-\n-To invoke a macro that takes arguments, you write the name of the macro\n-followed by a list of :dfn:`actual arguments` in parentheses, separated\n-by commas.  The invocation of the macro need not be restricted to a\n-single logical line---it can cross as many lines in the source file as\n-you wish.  The number of arguments you give must match the number of\n-parameters in the macro definition.  When the macro is expanded, each\n-use of a parameter in its body is replaced by the tokens of the\n-corresponding argument.  (You need not use all of the parameters in the\n-macro body.)\n-\n-As an example, here is a macro that computes the minimum of two numeric\n-values, as it is defined in many C programs, and some uses.\n-\n-.. code-block::\n-\n-  #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n-    x = min(a, b);          \u2192  x = ((a) < (b) ? (a) : (b));\n-    y = min(1, 2);          \u2192  y = ((1) < (2) ? (1) : (2));\n-    z = min(a + 28, *p);    \u2192  z = ((a + 28) < (*p) ? (a + 28) : (*p));\n-\n-(In this small example you can already see several of the dangers of\n-macro arguments.  See :ref:`macro-pitfalls`, for detailed explanations.)\n-\n-Leading and trailing whitespace in each argument is dropped, and all\n-whitespace between the tokens of an argument is reduced to a single\n-space.  Parentheses within each argument must balance; a comma within\n-such parentheses does not end the argument.  However, there is no\n-requirement for square brackets or braces to balance, and they do not\n-prevent a comma from separating arguments.  Thus,\n-\n-.. code-block:: c++\n-\n-  macro (array[x = y, x + 1])\n-\n-passes two arguments to ``macro`` : ``array[x = y`` and ``x +\n-1]``.  If you want to supply ``array[x = y, x + 1]`` as an argument,\n-you can write it as ``array[(x = y, x + 1)]``, which is equivalent C\n-code.\n-\n-All arguments to a macro are completely macro-expanded before they are\n-substituted into the macro body.  After substitution, the complete text\n-is scanned again for macros to expand, including the arguments.  This rule\n-may seem strange, but it is carefully designed so you need not worry\n-about whether any function call is actually a macro invocation.  You can\n-run into trouble if you try to be too clever, though.  See :ref:`argument-prescan`, for detailed discussion.\n-\n-For example, ``min (min (a, b), c)`` is first expanded to\n-\n-.. code-block:: c++\n-\n-    min (((a) < (b) ? (a) : (b)), (c))\n-\n-and then to\n-\n-.. code-block:: c++\n-\n-  ((((a) < (b) ? (a) : (b))) < (c)\n-   ? (((a) < (b) ? (a) : (b)))\n-   : (c))\n-\n-(Line breaks shown here for clarity would not actually be generated.)\n-\n-.. index:: empty macro arguments\n-\n-You can leave macro arguments empty; this is not an error to the\n-preprocessor (but many macros will then expand to invalid code).\n-You cannot leave out arguments entirely; if a macro takes two arguments,\n-there must be exactly one comma at the top level of its argument list.\n-Here are some silly examples using ``min`` :\n-\n-.. code-block::\n-\n-  min(, b)        \u2192 ((   ) < (b) ? (   ) : (b))\n-  min(a, )        \u2192 ((a  ) < ( ) ? (a  ) : ( ))\n-  min(,)          \u2192 ((   ) < ( ) ? (   ) : ( ))\n-  min((,),)       \u2192 (((,)) < ( ) ? ((,)) : ( ))\n-\n-  min()      error macro \"min\" requires 2 arguments, but only 1 given\n-  min(,,)    error macro \"min\" passed 3 arguments, but takes just 2\n-\n-Whitespace is not a preprocessing token, so if a macro ``foo`` takes\n-one argument, ``foo ()`` and ``foo ( )`` both supply it an\n-empty argument.  Previous GNU preprocessor implementations and\n-documentation were incorrect on this point, insisting that a\n-function-like macro that takes a single argument be passed a space if an\n-empty argument was required.\n-\n-Macro parameters appearing inside string literals are not replaced by\n-their corresponding actual arguments.\n-\n-.. code-block::\n-\n-  #define foo(x) x, \"x\"\n-  foo(bar)        \u2192 bar, \"x\"\n\\ No newline at end of file"}, {"sha": "0be22954a7652241e62e4c4eea83fd89df5021fe", "filename": "gcc/doc/cpp/macros/macro-pitfalls.rst", "status": "removed", "additions": 0, "deletions": 449, "changes": 449, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fmacro-pitfalls.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,449 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: problems with macros, pitfalls of macros\n-\n-.. _macro-pitfalls:\n-\n-Macro Pitfalls\n-**************\n-\n-In this section we describe some special rules that apply to macros and\n-macro expansion, and point out certain cases in which the rules have\n-counter-intuitive consequences that you must watch out for.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-\n-.. _misnesting:\n-\n-Misnesting\n-^^^^^^^^^^\n-\n-When a macro is called with arguments, the arguments are substituted\n-into the macro body and the result is checked, together with the rest of\n-the input file, for more macro calls.  It is possible to piece together\n-a macro call coming partially from the macro body and partially from the\n-arguments.  For example,\n-\n-.. code-block::\n-\n-  #define twice(x) (2*(x))\n-  #define call_with_1(x) x(1)\n-  call_with_1 (twice)\n-       \u2192 twice(1)\n-       \u2192 (2*(1))\n-\n-Macro definitions do not have to have balanced parentheses.  By writing\n-an unbalanced open parenthesis in a macro body, it is possible to create\n-a macro call that begins inside the macro body but ends outside of it.\n-For example,\n-\n-.. code-block::\n-\n-  #define strange(file) fprintf (file, \"%s %d\",\n-  ...\n-  strange(stderr) p, 35)\n-       \u2192 fprintf (stderr, \"%s %d\", p, 35)\n-\n-The ability to piece together a macro call can be useful, but the use of\n-unbalanced open parentheses in a macro body is just confusing, and\n-should be avoided.\n-\n-.. index:: parentheses in macro bodies\n-\n-.. _operator-precedence-problems:\n-\n-Operator Precedence Problems\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You may have noticed that in most of the macro definition examples shown\n-above, each occurrence of a macro argument name had parentheses around\n-it.  In addition, another pair of parentheses usually surround the\n-entire macro definition.  Here is why it is best to write macros that\n-way.\n-\n-Suppose you define a macro as follows,\n-\n-.. code-block:: c++\n-\n-  #define ceil_div(x, y) (x + y - 1) / y\n-\n-whose purpose is to divide, rounding up.  (One use for this operation is\n-to compute how many ``int`` objects are needed to hold a certain\n-number of ``char`` objects.)  Then suppose it is used as follows:\n-\n-.. code-block::\n-\n-  a = ceil_div (b & c, sizeof (int));\n-       \u2192 a = (b & c + sizeof (int) - 1) / sizeof (int);\n-\n-This does not do what is intended.  The operator-precedence rules of\n-C make it equivalent to this:\n-\n-.. code-block:: c++\n-\n-  a = (b & (c + sizeof (int) - 1)) / sizeof (int);\n-\n-What we want is this:\n-\n-.. code-block:: c++\n-\n-  a = ((b & c) + sizeof (int) - 1)) / sizeof (int);\n-\n-Defining the macro as\n-\n-.. code-block:: c++\n-\n-  #define ceil_div(x, y) ((x) + (y) - 1) / (y)\n-\n-provides the desired result.\n-\n-Unintended grouping can result in another way.  Consider ``sizeof\n-ceil_div(1, 2)``.  That has the appearance of a C expression that would\n-compute the size of the type of ``ceil_div (1, 2)``, but in fact it\n-means something very different.  Here is what it expands to:\n-\n-.. code-block:: c++\n-\n-  sizeof ((1) + (2) - 1) / (2)\n-\n-This would take the size of an integer and divide it by two.  The\n-precedence rules have put the division outside the ``sizeof`` when it\n-was intended to be inside.\n-\n-Parentheses around the entire macro definition prevent such problems.\n-Here, then, is the recommended way to define ``ceil_div`` :\n-\n-.. code-block:: c++\n-\n-  #define ceil_div(x, y) (((x) + (y) - 1) / (y))\n-\n-.. index:: semicolons (after macro calls)\n-\n-.. _swallowing-the-semicolon:\n-\n-Swallowing the Semicolon\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Often it is desirable to define a macro that expands into a compound\n-statement.  Consider, for example, the following macro, that advances a\n-pointer (the argument ``p`` says where to find it) across whitespace\n-characters:\n-\n-.. code-block:: c++\n-\n-  #define SKIP_SPACES(p, limit)  \\\n-  { char *lim = (limit);         \\\n-    while (p < lim) {            \\\n-      if (*p++ != ' ') {         \\\n-        p--; break; }}}\n-\n-Here backslash-newline is used to split the macro definition, which must\n-be a single logical line, so that it resembles the way such code would\n-be laid out if not part of a macro definition.\n-\n-A call to this macro might be ``SKIP_SPACES (p, lim)``.  Strictly\n-speaking, the call expands to a compound statement, which is a complete\n-statement with no need for a semicolon to end it.  However, since it\n-looks like a function call, it minimizes confusion if you can use it\n-like a function call, writing a semicolon afterward, as in\n-``SKIP_SPACES (p, lim);``\n-\n-This can cause trouble before ``else`` statements, because the\n-semicolon is actually a null statement.  Suppose you write\n-\n-.. code-block:: c++\n-\n-  if (*p != 0)\n-    SKIP_SPACES (p, lim);\n-  else ...\n-\n-The presence of two statements---the compound statement and a null\n-statement---in between the ``if`` condition and the ``else``\n-makes invalid C code.\n-\n-The definition of the macro ``SKIP_SPACES`` can be altered to solve\n-this problem, using a ``do ... while`` statement.  Here is how:\n-\n-.. code-block:: c++\n-\n-  #define SKIP_SPACES(p, limit)     \\\n-  do { char *lim = (limit);         \\\n-       while (p < lim) {            \\\n-         if (*p++ != ' ') {         \\\n-           p--; break; }}}          \\\n-  while (0)\n-\n-Now ``SKIP_SPACES (p, lim);`` expands into\n-\n-.. code-block:: c++\n-\n-  do {...} while (0);\n-\n-which is one statement.  The loop executes exactly once; most compilers\n-generate no extra code for it.\n-\n-.. index:: side effects (in macro arguments), unsafe macros\n-\n-.. _duplication-of-side-effects:\n-\n-Duplication of Side Effects\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Many C programs define a macro ``min``, for 'minimum', like this:\n-\n-.. code-block:: c++\n-\n-  #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n-\n-When you use this macro with an argument containing a side effect,\n-as shown here,\n-\n-.. code-block:: c++\n-\n-  next = min (x + y, foo (z));\n-\n-it expands as follows:\n-\n-.. code-block:: c++\n-\n-  next = ((x + y) < (foo (z)) ? (x + y) : (foo (z)));\n-\n-where ``x + y`` has been substituted for ``X`` and ``foo (z)``\n-for ``Y``.\n-\n-The function ``foo`` is used only once in the statement as it appears\n-in the program, but the expression ``foo (z)`` has been substituted\n-twice into the macro expansion.  As a result, ``foo`` might be called\n-two times when the statement is executed.  If it has side effects or if\n-it takes a long time to compute, the results might not be what you\n-intended.  We say that ``min`` is an :dfn:`unsafe` macro.\n-\n-The best solution to this problem is to define ``min`` in a way that\n-computes the value of ``foo (z)`` only once.  The C language offers\n-no standard way to do this, but it can be done with GNU extensions as\n-follows:\n-\n-.. code-block:: c++\n-\n-  #define min(X, Y)                \\\n-  ({ typeof (X) x_ = (X);          \\\n-     typeof (Y) y_ = (Y);          \\\n-     (x_ < y_) ? x_ : y_; })\n-\n-The :samp:`({ ... })` notation produces a compound statement that\n-acts as an expression.  Its value is the value of its last statement.\n-This permits us to define local variables and assign each argument to\n-one.  The local variables have underscores after their names to reduce\n-the risk of conflict with an identifier of wider scope (it is impossible\n-to avoid this entirely).  Now each argument is evaluated exactly once.\n-\n-If you do not wish to use GNU C extensions, the only solution is to be\n-careful when *using* the macro ``min``.  For example, you can\n-calculate the value of ``foo (z)``, save it in a variable, and use\n-that variable in ``min`` :\n-\n-.. code-block:: c++\n-\n-  #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n-  ...\n-  {\n-    int tem = foo (z);\n-    next = min (x + y, tem);\n-  }\n-\n-(where we assume that ``foo`` returns type ``int``).\n-\n-.. index:: self-reference\n-\n-.. _self-referential-macros:\n-\n-Self-Referential Macros\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-A :dfn:`self-referential` macro is one whose name appears in its\n-definition.  Recall that all macro definitions are rescanned for more\n-macros to replace.  If the self-reference were considered a use of the\n-macro, it would produce an infinitely large expansion.  To prevent this,\n-the self-reference is not considered a macro call.  It is passed into\n-the preprocessor output unchanged.  Consider an example:\n-\n-.. code-block:: c++\n-\n-  #define foo (4 + foo)\n-\n-where ``foo`` is also a variable in your program.\n-\n-Following the ordinary rules, each reference to ``foo`` will expand\n-into ``(4 + foo)`` ; then this will be rescanned and will expand into\n-``(4 + (4 + foo))`` ; and so on until the computer runs out of memory.\n-\n-The self-reference rule cuts this process short after one step, at\n-``(4 + foo)``.  Therefore, this macro definition has the possibly\n-useful effect of causing the program to add 4 to the value of ``foo``\n-wherever ``foo`` is referred to.\n-\n-In most cases, it is a bad idea to take advantage of this feature.  A\n-person reading the program who sees that ``foo`` is a variable will\n-not expect that it is a macro as well.  The reader will come across the\n-identifier ``foo`` in the program and think its value should be that\n-of the variable ``foo``, whereas in fact the value is four greater.\n-\n-One common, useful use of self-reference is to create a macro which\n-expands to itself.  If you write\n-\n-.. code-block:: c++\n-\n-  #define EPERM EPERM\n-\n-then the macro ``EPERM`` expands to ``EPERM``.  Effectively, it is\n-left alone by the preprocessor whenever it's used in running text.  You\n-can tell that it's a macro with :samp:`#ifdef`.  You might do this if you\n-want to define numeric constants with an ``enum``, but have\n-:samp:`#ifdef` be true for each constant.\n-\n-If a macro ``x`` expands to use a macro ``y``, and the expansion of\n-``y`` refers to the macro ``x``, that is an :dfn:`indirect\n-self-reference` of ``x``.  ``x`` is not expanded in this case\n-either.  Thus, if we have\n-\n-.. code-block:: c++\n-\n-  #define x (4 + y)\n-  #define y (2 * x)\n-\n-then ``x`` and ``y`` expand as follows:\n-\n-.. code-block::\n-\n-  x    \u2192 (4 + y)\n-       \u2192 (4 + (2 * x))\n-\n-  y    \u2192 (2 * x)\n-       \u2192 (2 * (4 + y))\n-\n-Each macro is expanded when it appears in the definition of the other\n-macro, but not when it indirectly appears in its own definition.\n-\n-.. index:: expansion of arguments, macro argument expansion, prescan of macro arguments\n-\n-.. _argument-prescan:\n-\n-Argument Prescan\n-^^^^^^^^^^^^^^^^\n-\n-Macro arguments are completely macro-expanded before they are\n-substituted into a macro body, unless they are stringized or pasted\n-with other tokens.  After substitution, the entire macro body, including\n-the substituted arguments, is scanned again for macros to be expanded.\n-The result is that the arguments are scanned *twice* to expand\n-macro calls in them.\n-\n-Most of the time, this has no effect.  If the argument contained any\n-macro calls, they are expanded during the first scan.  The result\n-therefore contains no macro calls, so the second scan does not change\n-it.  If the argument were substituted as given, with no prescan, the\n-single remaining scan would find the same macro calls and produce the\n-same results.\n-\n-You might expect the double scan to change the results when a\n-self-referential macro is used in an argument of another macro\n-(see :ref:`self-referential-macros`): the self-referential macro would be\n-expanded once in the first scan, and a second time in the second scan.\n-However, this is not what happens.  The self-references that do not\n-expand in the first scan are marked so that they will not expand in the\n-second scan either.\n-\n-You might wonder, 'Why mention the prescan, if it makes no difference?\n-And why not skip it and make the preprocessor faster?'  The answer is\n-that the prescan does make a difference in three special cases:\n-\n-* Nested calls to a macro.\n-\n-  We say that :dfn:`nested` calls to a macro occur when a macro's argument\n-  contains a call to that very macro.  For example, if ``f`` is a macro\n-  that expects one argument, ``f (f (1))`` is a nested pair of calls to\n-  ``f``.  The desired expansion is made by expanding ``f (1)`` and\n-  substituting that into the definition of ``f``.  The prescan causes\n-  the expected result to happen.  Without the prescan, ``f (1)`` itself\n-  would be substituted as an argument, and the inner use of ``f`` would\n-  appear during the main scan as an indirect self-reference and would not\n-  be expanded.\n-\n-* Macros that call other macros that stringize or concatenate.\n-\n-  If an argument is stringized or concatenated, the prescan does not\n-  occur.  If you *want* to expand a macro, then stringize or\n-  concatenate its expansion, you can do that by causing one macro to call\n-  another macro that does the stringizing or concatenation.  For\n-  instance, if you have\n-\n-  .. code-block:: c++\n-\n-    #define AFTERX(x) X_ ## x\n-    #define XAFTERX(x) AFTERX(x)\n-    #define TABLESIZE 1024\n-    #define BUFSIZE TABLESIZE\n-\n-  then ``AFTERX(BUFSIZE)`` expands to ``X_BUFSIZE``, and\n-  ``XAFTERX(BUFSIZE)`` expands to ``X_1024``.  (Not to\n-  ``X_TABLESIZE``.  Prescan always does a complete expansion.)\n-\n-* Macros used in arguments, whose expansions contain unshielded commas.\n-\n-  This can cause a macro expanded on the second scan to be called with the\n-  wrong number of arguments.  Here is an example:\n-\n-  .. code-block:: c++\n-\n-    #define foo  a,b\n-    #define bar(x) lose(x)\n-    #define lose(x) (1 + (x))\n-\n-  We would like ``bar(foo)`` to turn into ``(1 + (foo))``, which\n-  would then turn into ``(1 + (a,b))``.  Instead, ``bar(foo)``\n-  expands into ``lose(a,b)``, and you get an error because ``lose``\n-  requires a single argument.  In this case, the problem is easily solved\n-  by the same parentheses that ought to be used to prevent misnesting of\n-  arithmetic operations:\n-\n-  .. code-block::\n-\n-    #define foo (a,b)\n-    or#define bar(x) lose((x))\n-\n-  The extra pair of parentheses prevents the comma in ``foo`` 's\n-  definition from being interpreted as an argument separator.\n-\n-.. index:: newlines in macro arguments\n-\n-.. _newlines-in-arguments:\n-\n-Newlines in Arguments\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-The invocation of a function-like macro can extend over many logical\n-lines.  However, in the present implementation, the entire expansion\n-comes out on one line.  Thus line numbers emitted by the compiler or\n-debugger refer to the line the invocation started on, which might be\n-different to the line containing the argument causing the problem.\n-\n-Here is an example illustrating this:\n-\n-.. code-block:: c++\n-\n-  #define ignore_second_arg(a,b,c) a; c\n-\n-  ignore_second_arg (foo (),\n-                     ignored (),\n-                     syntax error);\n-\n-The syntax error triggered by the tokens ``syntax error`` results in\n-an error message citing line three---the line of ignore_second_arg---\n-even though the problematic code comes from line five.\n-\n-We consider this a bug, and intend to fix it in the near future.\n\\ No newline at end of file"}, {"sha": "c5e6e4cd4668486137d7f999a30753c8c4a9591f", "filename": "gcc/doc/cpp/macros/object-like-macros.rst", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fobject-like-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,126 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: object-like macro, symbolic constants, manifest constants\n-\n-.. _object-like-macros:\n-\n-Object-like Macros\n-******************\n-\n-An :dfn:`object-like macro` is a simple identifier which will be replaced\n-by a code fragment.  It is called object-like because it looks like a\n-data object in code that uses it.  They are most commonly used to give\n-symbolic names to numeric constants.\n-\n-.. index:: #define\n-\n-You create macros with the :samp:`#define` directive.  :samp:`#define` is\n-followed by the name of the macro and then the token sequence it should\n-be an abbreviation for, which is variously referred to as the macro's\n-:dfn:`body`, :dfn:`expansion` or :dfn:`replacement list`.  For example,\n-\n-.. code-block:: c++\n-\n-  #define BUFFER_SIZE 1024\n-\n-defines a macro named ``BUFFER_SIZE`` as an abbreviation for the\n-token ``1024``.  If somewhere after this :samp:`#define` directive\n-there comes a C statement of the form\n-\n-.. code-block:: c++\n-\n-  foo = (char *) malloc (BUFFER_SIZE);\n-\n-then the C preprocessor will recognize and :dfn:`expand` the macro\n-``BUFFER_SIZE``.  The C compiler will see the same tokens as it would\n-if you had written\n-\n-.. code-block:: c++\n-\n-  foo = (char *) malloc (1024);\n-\n-By convention, macro names are written in uppercase.  Programs are\n-easier to read when it is possible to tell at a glance which names are\n-macros.\n-\n-The macro's body ends at the end of the :samp:`#define` line.  You may\n-continue the definition onto multiple lines, if necessary, using\n-backslash-newline.  When the macro is expanded, however, it will all\n-come out on one line.  For example,\n-\n-.. code-block::\n-\n-  #define NUMBERS 1, \\\n-                  2, \\\n-                  3\n-  int x[] = { NUMBERS };\n-       \u2192 int x[] = { 1, 2, 3 };\n-\n-The most common visible consequence of this is surprising line numbers\n-in error messages.\n-\n-There is no restriction on what can go in a macro body provided it\n-decomposes into valid preprocessing tokens.  Parentheses need not\n-balance, and the body need not resemble valid C code.  (If it does not,\n-you may get error messages from the C compiler when you use the macro.)\n-\n-The C preprocessor scans your program sequentially.  Macro definitions\n-take effect at the place you write them.  Therefore, the following input\n-to the C preprocessor\n-\n-.. code-block:: c++\n-\n-  foo = X;\n-  #define X 4\n-  bar = X;\n-\n-produces\n-\n-.. code-block:: c++\n-\n-  foo = X;\n-  bar = 4;\n-\n-When the preprocessor expands a macro name, the macro's expansion\n-replaces the macro invocation, then the expansion is examined for more\n-macros to expand.  For example,\n-\n-.. code-block::\n-\n-  #define TABLESIZE BUFSIZE\n-  #define BUFSIZE 1024\n-  TABLESIZE\n-       \u2192 BUFSIZE\n-       \u2192 1024\n-\n-``TABLESIZE`` is expanded first to produce ``BUFSIZE``, then that\n-macro is expanded to produce the final result, ``1024``.\n-\n-Notice that ``BUFSIZE`` was not defined when ``TABLESIZE`` was\n-defined.  The :samp:`#define` for ``TABLESIZE`` uses exactly the\n-expansion you specify---in this case, ``BUFSIZE`` ---and does not\n-check to see whether it too contains macro names.  Only when you\n-*use* ``TABLESIZE`` is the result of its expansion scanned for\n-more macro names.\n-\n-This makes a difference if you change the definition of ``BUFSIZE``\n-at some point in the source file.  ``TABLESIZE``, defined as shown,\n-will always expand using the definition of ``BUFSIZE`` that is\n-currently in effect:\n-\n-.. code-block:: c++\n-\n-  #define BUFSIZE 1020\n-  #define TABLESIZE BUFSIZE\n-  #undef BUFSIZE\n-  #define BUFSIZE 37\n-\n-Now ``TABLESIZE`` expands (in two stages) to ``37``.\n-\n-If the expansion of a macro contains its own name, either directly or\n-via intermediate macros, it is not expanded again when the expansion is\n-examined for more macros.  This prevents infinite recursion.\n-See :ref:`self-referential-macros`, for the precise details.\n\\ No newline at end of file"}, {"sha": "8af566e0dc36d44a636f2f5287df0f076f8e338f", "filename": "gcc/doc/cpp/macros/predefined-macros.rst", "status": "removed", "additions": 0, "deletions": 874, "changes": 874, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fpredefined-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,874 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: predefined macros\n-\n-.. _predefined-macros:\n-\n-Predefined Macros\n-*****************\n-\n-Several object-like macros are predefined; you use them without\n-supplying their definitions.  They fall into three classes: standard,\n-common, and system-specific.\n-\n-In C++, there is a fourth category, the named operators.  They act like\n-predefined macros, but you cannot undefine them.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-\n-.. index:: standard predefined macros.\n-\n-.. _standard-predefined-macros:\n-\n-Standard Predefined Macros\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The standard predefined macros are specified by the relevant\n-language standards, so they are available with all compilers that\n-implement those standards.  Older compilers may not provide all of\n-them.  Their names all start with double underscores.\n-\n-.. c:macro:: __FILE__\n-\n-  This macro expands to the name of the current input file, in the form of\n-  a C string constant.  This is the path by which the preprocessor opened\n-  the file, not the short name specified in :samp:`#include` or as the\n-  input file name argument.  For example,\n-  ``\"/usr/local/include/myheader.h\"`` is a possible expansion of this\n-  macro.\n-\n-.. c:macro:: __LINE__\n-\n-  This macro expands to the current input line number, in the form of a\n-  decimal integer constant.  While we call it a predefined macro, it's\n-  a pretty strange macro, since its 'definition' changes with each\n-  new line of source code.\n-\n-  ``__FILE__`` and ``__LINE__`` are useful in generating an error\n-  message to report an inconsistency detected by the program; the message\n-  can state the source line at which the inconsistency was detected.  For\n-  example,\n-\n-.. code-block:: c++\n-\n-  fprintf (stderr, \"Internal error: \"\n-                   \"negative string length \"\n-                   \"%d at %s, line %d.\",\n-           length, __FILE__, __LINE__);\n-\n-An :samp:`#include` directive changes the expansions of ``__FILE__``\n-and ``__LINE__`` to correspond to the included file.  At the end of\n-that file, when processing resumes on the input file that contained\n-the :samp:`#include` directive, the expansions of ``__FILE__`` and\n-``__LINE__`` revert to the values they had before the\n-:samp:`#include` (but ``__LINE__`` is then incremented by one as\n-processing moves to the line after the :samp:`#include`).\n-\n-A :samp:`#line` directive changes ``__LINE__``, and may change\n-``__FILE__`` as well.  See :ref:`line-control`.\n-\n-C99 introduced ``__func__``, and GCC has provided ``__FUNCTION__``\n-for a long time.  Both of these are strings containing the name of the\n-current function (there are slight semantic differences; see the GCC\n-manual).  Neither of them is a macro; the preprocessor does not know the\n-name of the current function.  They tend to be useful in conjunction\n-with ``__FILE__`` and ``__LINE__``, though.\n-\n-.. c:macro:: __DATE__\n-\n-  This macro expands to a string constant that describes the date on which\n-  the preprocessor is being run.  The string constant contains eleven\n-  characters and looks like ``\"Feb 12 1996\"``.  If the day of the\n-  month is less than 10, it is padded with a space on the left.\n-\n-  If GCC cannot determine the current date, it will emit a warning message\n-  (once per compilation) and ``__DATE__`` will expand to\n-  ``\"??? ?? ????\"``.\n-\n-.. c:macro:: __TIME__\n-\n-  This macro expands to a string constant that describes the time at\n-  which the preprocessor is being run.  The string constant contains\n-  eight characters and looks like ``\"23:59:01\"``.\n-\n-  If GCC cannot determine the current time, it will emit a warning message\n-  (once per compilation) and ``__TIME__`` will expand to\n-  ``\"??:??:??\"``.\n-\n-.. c:macro:: __STDC__\n-\n-  In normal operation, this macro expands to the constant 1, to signify\n-  that this compiler conforms to ISO Standard C.  If GNU CPP is used with\n-  a compiler other than GCC, this is not necessarily true; however, the\n-  preprocessor always conforms to the standard unless the\n-  :option:`-traditional-cpp` option is used.\n-\n-  This macro is not defined if the :option:`-traditional-cpp` option is used.\n-\n-  On some hosts, the system compiler uses a different convention, where\n-  ``__STDC__`` is normally 0, but is 1 if the user specifies strict\n-  conformance to the C Standard.  CPP follows the host convention when\n-  processing system header files, but when processing user files\n-  ``__STDC__`` is always 1.  This has been reported to cause problems;\n-  for instance, some versions of Solaris provide X Windows headers that\n-  expect ``__STDC__`` to be either undefined or 1.  See :ref:`invocation`.\n-\n-.. c:macro:: __STDC_VERSION__\n-\n-  This macro expands to the C Standard's version number, a long integer\n-  constant of the form ``yyyymmL`` where :samp:`{yyyy}` and\n-  :samp:`{mm}` are the year and month of the Standard version.  This signifies\n-  which version of the C Standard the compiler conforms to.  Like\n-  ``__STDC__``, this is not necessarily accurate for the entire\n-  implementation, unless GNU CPP is being used with GCC.\n-\n-  The value ``199409L`` signifies the 1989 C standard as amended in\n-  1994, which is the current default; the value ``199901L`` signifies\n-  the 1999 revision of the C standard; the value ``201112L``\n-  signifies the 2011 revision of the C standard; the value\n-  ``201710L`` signifies the 2017 revision of the C standard (which is\n-  otherwise identical to the 2011 version apart from correction of\n-  defects).  An unspecified value larger than ``201710L`` is used for\n-  the experimental :option:`-std=c2x` and :option:`-std=gnu2x` modes.\n-\n-  This macro is not defined if the :option:`-traditional-cpp` option is\n-  used, nor when compiling C++ or Objective-C.\n-\n-.. c:macro:: __STDC_HOSTED__\n-\n-  This macro is defined, with value 1, if the compiler's target is a\n-  :dfn:`hosted environment`.  A hosted environment has the complete\n-  facilities of the standard C library available.\n-\n-.. c:macro:: __cplusplus\n-\n-  This macro is defined when the C++ compiler is in use.  You can use\n-  ``__cplusplus`` to test whether a header is compiled by a C compiler\n-  or a C++ compiler.  This macro is similar to ``__STDC_VERSION__``, in\n-  that it expands to a version number.  Depending on the language standard\n-  selected, the value of the macro is\n-  ``199711L`` for the 1998 C++ standard,\n-  ``201103L`` for the 2011 C++ standard,\n-  ``201402L`` for the 2014 C++ standard,\n-  ``201703L`` for the 2017 C++ standard,\n-  ``202002L`` for the 2020 C++ standard,\n-  or an unspecified value strictly larger than ``202002L`` for the\n-  experimental languages enabled by :option:`-std=c++23` and\n-  :option:`-std=gnu++23`.\n-\n-.. c:macro:: __OBJC__\n-\n-  This macro is defined, with value 1, when the Objective-C compiler is in\n-  use.  You can use ``__OBJC__`` to test whether a header is compiled\n-  by a C compiler or an Objective-C compiler.\n-\n-.. c:macro:: __ASSEMBLER__\n-\n-  This macro is defined with value 1 when preprocessing assembly\n-  language.\n-\n-.. index:: common predefined macros\n-\n-.. _common-predefined-macros:\n-\n-Common Predefined Macros\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The common predefined macros are GNU C extensions.  They are available\n-with the same meanings regardless of the machine or operating system on\n-which you are using GNU C or GNU Fortran.  Their names all start with\n-double underscores.\n-\n-.. c:macro:: __COUNTER__\n-\n-  This macro expands to sequential integral values starting from 0.  In\n-  conjunction with the ``##`` operator, this provides a convenient means to\n-  generate unique identifiers.  Care must be taken to ensure that\n-  ``__COUNTER__`` is not expanded prior to inclusion of precompiled headers\n-  which use it.  Otherwise, the precompiled headers will not be used.\n-\n-.. c:macro:: __GFORTRAN__\n-\n-  The GNU Fortran compiler defines this.\n-\n-.. c:macro:: __GNUC__\n-             __GNUC_MINOR__\n-             __GNUC_PATCHLEVEL__\n-\n-  These macros are defined by all GNU compilers that use the C\n-  preprocessor: C, C++, Objective-C and Fortran.  Their values are the major\n-  version, minor version, and patch level of the compiler, as integer\n-  constants.  For example, GCC version :samp:`{x}`. :samp:`{y}`. :samp:`{z}`\n-  defines ``__GNUC__`` to :samp:`{x}`, ``__GNUC_MINOR__`` to :samp:`{y}`,\n-  and ``__GNUC_PATCHLEVEL__`` to :samp:`{z}`.  These\n-  macros are also defined if you invoke the preprocessor directly.\n-\n-  If all you need to know is whether or not your program is being compiled\n-  by GCC, or a non-GCC compiler that claims to accept the GNU C dialects,\n-  you can simply test ``__GNUC__``.  If you need to write code\n-  which depends on a specific version, you must be more careful.  Each\n-  time the minor version is increased, the patch level is reset to zero;\n-  each time the major version is increased, the\n-  minor version and patch level are reset.  If you wish to use the\n-  predefined macros directly in the conditional, you will need to write it\n-  like this:\n-\n-  .. code-block:: c++\n-\n-    /* Test for GCC > 3.2.0 */\n-    #if __GNUC__ > 3 || \\\n-        (__GNUC__ == 3 && (__GNUC_MINOR__ > 2 || \\\n-                           (__GNUC_MINOR__ == 2 && \\\n-                            __GNUC_PATCHLEVEL__ > 0))\n-\n-  Another approach is to use the predefined macros to\n-  calculate a single number, then compare that against a threshold:\n-\n-  .. code-block:: c++\n-\n-    #define GCC_VERSION (__GNUC__ * 10000 \\\n-                         + __GNUC_MINOR__ * 100 \\\n-                         + __GNUC_PATCHLEVEL__)\n-    ...\n-    /* Test for GCC > 3.2.0 */\n-    #if GCC_VERSION > 30200\n-\n-  Many people find this form easier to understand.\n-\n-.. c:macro:: __GNUG__\n-\n-  The GNU C++ compiler defines this.  Testing it is equivalent to\n-  testing ``(__GNUC__ && __cplusplus)``.\n-\n-.. c:macro:: __STRICT_ANSI__\n-\n-  GCC defines this macro if and only if the :option:`-ansi` switch, or a\n-  :option:`-std` switch specifying strict conformance to some version of ISO C\n-  or ISO C++, was specified when GCC was invoked.  It is defined to :samp:`1`.\n-  This macro exists primarily to direct GNU libc's header files to use only\n-  definitions found in standard C.\n-\n-.. c:macro:: __BASE_FILE__\n-\n-  This macro expands to the name of the main input file, in the form\n-  of a C string constant.  This is the source file that was specified\n-  on the command line of the preprocessor or C compiler.\n-\n-.. c:macro:: __FILE_NAME__\n-\n-  This macro expands to the basename of the current input file, in the\n-  form of a C string constant.  This is the last path component by which\n-  the preprocessor opened the file.  For example, processing\n-  ``\"/usr/local/include/myheader.h\"`` would set this\n-  macro to ``\"myheader.h\"``.\n-\n-.. c:macro:: __INCLUDE_LEVEL__\n-\n-  This macro expands to a decimal integer constant that represents the\n-  depth of nesting in include files.  The value of this macro is\n-  incremented on every :samp:`#include` directive and decremented at the\n-  end of every included file.  It starts out at 0, its value within the\n-  base file specified on the command line.\n-\n-.. c:macro:: __ELF__\n-\n-  This macro is defined if the target uses the ELF object format.\n-\n-.. c:macro:: __VERSION__\n-\n-  This macro expands to a string constant which describes the version of\n-  the compiler in use.  You should not rely on its contents having any\n-  particular form, but it can be counted on to contain at least the\n-  release number.\n-\n-.. c:macro:: __OPTIMIZE__\n-             __OPTIMIZE_SIZE__\n-             __NO_INLINE__\n-\n-  These macros describe the compilation mode.  ``__OPTIMIZE__`` is\n-  defined in all optimizing compilations.  ``__OPTIMIZE_SIZE__`` is\n-  defined if the compiler is optimizing for size, not speed.\n-  ``__NO_INLINE__`` is defined if no functions will be inlined into\n-  their callers (when not optimizing, or when inlining has been\n-  specifically disabled by :option:`-fno-inline`).\n-\n-  These macros cause certain GNU header files to provide optimized\n-  definitions, using macros or inline functions, of system library\n-  functions.  You should not use these macros in any way unless you make\n-  sure that programs will execute with the same effect whether or not they\n-  are defined.  If they are defined, their value is 1.\n-\n-.. c:macro:: __GNUC_GNU_INLINE__\n-\n-  GCC defines this macro if functions declared ``inline`` will be\n-  handled in GCC's traditional gnu90 mode.  Object files will contain\n-  externally visible definitions of all functions declared ``inline``\n-  without ``extern`` or ``static``.  They will not contain any\n-  definitions of any functions declared ``extern inline``.\n-\n-.. c:macro:: __GNUC_STDC_INLINE__\n-\n-  GCC defines this macro if functions declared ``inline`` will be\n-  handled according to the ISO C99 or later standards.  Object files will contain\n-  externally visible definitions of all functions declared ``extern\n-  inline``.  They will not contain definitions of any functions declared\n-  ``inline`` without ``extern``.\n-\n-  If this macro is defined, GCC supports the ``gnu_inline`` function\n-  attribute as a way to always get the gnu90 behavior.\n-\n-.. c:macro:: __CHAR_UNSIGNED__\n-\n-  GCC defines this macro if and only if the data type ``char`` is\n-  unsigned on the target machine.  It exists to cause the standard header\n-  file :samp:`limits.h` to work correctly.  You should not use this macro\n-  yourself; instead, refer to the standard macros defined in :samp:`limits.h`.\n-\n-.. c:macro:: __WCHAR_UNSIGNED__\n-\n-  Like ``__CHAR_UNSIGNED__``, this macro is defined if and only if the\n-  data type ``wchar_t`` is unsigned and the front-end is in C++ mode.\n-\n-.. c:macro:: __REGISTER_PREFIX__\n-\n-  This macro expands to a single token (not a string constant) which is\n-  the prefix applied to CPU register names in assembly language for this\n-  target.  You can use it to write assembly that is usable in multiple\n-  environments.  For example, in the ``m68k-aout`` environment it\n-  expands to nothing, but in the ``m68k-coff`` environment it expands\n-  to a single :samp:`%`.\n-\n-.. c:macro:: __USER_LABEL_PREFIX__\n-\n-  This macro expands to a single token which is the prefix applied to\n-  user labels (symbols visible to C code) in assembly.  For example, in\n-  the ``m68k-aout`` environment it expands to an :samp:`_`, but in the\n-  ``m68k-coff`` environment it expands to nothing.\n-\n-  This macro will have the correct definition even if\n-  :option:`-f(no-)underscores` is in use, but it will not be correct if\n-  target-specific options that adjust this prefix are used (e.g. the\n-  OSF/rose :option:`-mno-underscores` option).\n-\n-.. c:macro:: __SIZE_TYPE__\n-             __PTRDIFF_TYPE__\n-             __WCHAR_TYPE__\n-             __WINT_TYPE__\n-             __INTMAX_TYPE__\n-             __UINTMAX_TYPE__\n-             __SIG_ATOMIC_TYPE__\n-             __INT8_TYPE__\n-             __INT16_TYPE__\n-             __INT32_TYPE__\n-             __INT64_TYPE__\n-             __UINT8_TYPE__\n-             __UINT16_TYPE__\n-             __UINT32_TYPE__\n-             __UINT64_TYPE__\n-             __INT_LEAST8_TYPE__\n-             __INT_LEAST16_TYPE__\n-             __INT_LEAST32_TYPE__\n-             __INT_LEAST64_TYPE__\n-             __UINT_LEAST8_TYPE__\n-             __UINT_LEAST16_TYPE__\n-             __UINT_LEAST32_TYPE__\n-             __UINT_LEAST64_TYPE__\n-             __INT_FAST8_TYPE__\n-             __INT_FAST16_TYPE__\n-             __INT_FAST32_TYPE__\n-             __INT_FAST64_TYPE__\n-             __UINT_FAST8_TYPE__\n-             __UINT_FAST16_TYPE__\n-             __UINT_FAST32_TYPE__\n-             __UINT_FAST64_TYPE__\n-             __INTPTR_TYPE__\n-             __UINTPTR_TYPE__\n-\n-  These macros are defined to the correct underlying types for the\n-  ``size_t``, ``ptrdiff_t``, ``wchar_t``, ``wint_t``,\n-  ``intmax_t``, ``uintmax_t``, ``sig_atomic_t``, ``int8_t``,\n-  ``int16_t``, ``int32_t``, ``int64_t``, ``uint8_t``,\n-  ``uint16_t``, ``uint32_t``, ``uint64_t``,\n-  ``int_least8_t``, ``int_least16_t``, ``int_least32_t``,\n-  ``int_least64_t``, ``uint_least8_t``, ``uint_least16_t``,\n-  ``uint_least32_t``, ``uint_least64_t``, ``int_fast8_t``,\n-  ``int_fast16_t``, ``int_fast32_t``, ``int_fast64_t``,\n-  ``uint_fast8_t``, ``uint_fast16_t``, ``uint_fast32_t``,\n-  ``uint_fast64_t``, ``intptr_t``, and ``uintptr_t`` typedefs,\n-  respectively.  They exist to make the standard header files\n-  :samp:`stddef.h`, :samp:`stdint.h`, and :samp:`wchar.h` work correctly.\n-  You should not use these macros directly; instead, include the\n-  appropriate headers and use the typedefs.  Some of these macros may\n-  not be defined on particular systems if GCC does not provide a\n-  :samp:`stdint.h` header on those systems.\n-\n-.. c:macro:: __CHAR_BIT__\n-\n-  Defined to the number of bits used in the representation of the\n-  ``char`` data type.  It exists to make the standard header given\n-  numerical limits work correctly.  You should not use\n-  this macro directly; instead, include the appropriate headers.\n-\n-.. c:macro:: __SCHAR_MAX__\n-             __WCHAR_MAX__\n-             __SHRT_MAX__\n-             __INT_MAX__\n-             __LONG_MAX__\n-             __LONG_LONG_MAX__\n-             __WINT_MAX__\n-             __SIZE_MAX__\n-             __PTRDIFF_MAX__\n-             __INTMAX_MAX__\n-             __UINTMAX_MAX__\n-             __SIG_ATOMIC_MAX__\n-             __INT8_MAX__\n-             __INT16_MAX__\n-             __INT32_MAX__\n-             __INT64_MAX__\n-             __UINT8_MAX__\n-             __UINT16_MAX__\n-             __UINT32_MAX__\n-             __UINT64_MAX__\n-             __INT_LEAST8_MAX__\n-             __INT_LEAST16_MAX__\n-             __INT_LEAST32_MAX__\n-             __INT_LEAST64_MAX__\n-             __UINT_LEAST8_MAX__\n-             __UINT_LEAST16_MAX__\n-             __UINT_LEAST32_MAX__\n-             __UINT_LEAST64_MAX__\n-             __INT_FAST8_MAX__\n-             __INT_FAST16_MAX__\n-             __INT_FAST32_MAX__\n-             __INT_FAST64_MAX__\n-             __UINT_FAST8_MAX__\n-             __UINT_FAST16_MAX__\n-             __UINT_FAST32_MAX__\n-             __UINT_FAST64_MAX__\n-             __INTPTR_MAX__\n-             __UINTPTR_MAX__\n-             __WCHAR_MIN__\n-             __WINT_MIN__\n-             __SIG_ATOMIC_MIN__\n-\n-  Defined to the maximum value of the ``signed char``, ``wchar_t``,\n-  ``signed short``,\n-  ``signed int``, ``signed long``, ``signed long long``,\n-  ``wint_t``, ``size_t``, ``ptrdiff_t``,\n-  ``intmax_t``, ``uintmax_t``, ``sig_atomic_t``, ``int8_t``,\n-  ``int16_t``, ``int32_t``, ``int64_t``, ``uint8_t``,\n-  ``uint16_t``, ``uint32_t``, ``uint64_t``,\n-  ``int_least8_t``, ``int_least16_t``, ``int_least32_t``,\n-  ``int_least64_t``, ``uint_least8_t``, ``uint_least16_t``,\n-  ``uint_least32_t``, ``uint_least64_t``, ``int_fast8_t``,\n-  ``int_fast16_t``, ``int_fast32_t``, ``int_fast64_t``,\n-  ``uint_fast8_t``, ``uint_fast16_t``, ``uint_fast32_t``,\n-  ``uint_fast64_t``, ``intptr_t``, and ``uintptr_t`` types and\n-  to the minimum value of the ``wchar_t``, ``wint_t``, and\n-  ``sig_atomic_t`` types respectively.  They exist to make the\n-  standard header given numerical limits work correctly.  You should not\n-  use these macros directly; instead, include the appropriate headers.\n-  Some of these macros may not be defined on particular systems if GCC\n-  does not provide a :samp:`stdint.h` header on those systems.\n-\n-.. c:macro:: __INT8_C\n-             __INT16_C\n-             __INT32_C\n-             __INT64_C\n-             __UINT8_C\n-             __UINT16_C\n-             __UINT32_C\n-             __UINT64_C\n-             __INTMAX_C\n-             __UINTMAX_C\n-\n-  Defined to implementations of the standard :samp:`stdint.h` macros with\n-  the same names without the leading ``__``.  They exist the make the\n-  implementation of that header work correctly.  You should not use\n-  these macros directly; instead, include the appropriate headers.  Some\n-  of these macros may not be defined on particular systems if GCC does\n-  not provide a :samp:`stdint.h` header on those systems.\n-\n-.. c:macro:: __SCHAR_WIDTH__\n-             __SHRT_WIDTH__\n-             __INT_WIDTH__\n-             __LONG_WIDTH__\n-             __LONG_LONG_WIDTH__\n-             __PTRDIFF_WIDTH__\n-             __SIG_ATOMIC_WIDTH__\n-             __SIZE_WIDTH__\n-             __WCHAR_WIDTH__\n-             __WINT_WIDTH__\n-             __INT_LEAST8_WIDTH__\n-             __INT_LEAST16_WIDTH__\n-             __INT_LEAST32_WIDTH__\n-             __INT_LEAST64_WIDTH__\n-             __INT_FAST8_WIDTH__\n-             __INT_FAST16_WIDTH__\n-             __INT_FAST32_WIDTH__\n-             __INT_FAST64_WIDTH__\n-             __INTPTR_WIDTH__\n-             __INTMAX_WIDTH__\n-\n-  Defined to the bit widths of the corresponding types.  They exist to\n-  make the implementations of :samp:`limits.h` and :samp:`stdint.h` behave\n-  correctly.  You should not use these macros directly; instead, include\n-  the appropriate headers.  Some of these macros may not be defined on\n-  particular systems if GCC does not provide a :samp:`stdint.h` header on\n-  those systems.\n-\n-.. c:macro:: __SIZEOF_INT__\n-             __SIZEOF_LONG__\n-             __SIZEOF_LONG_LONG__\n-             __SIZEOF_SHORT__\n-             __SIZEOF_POINTER__\n-             __SIZEOF_FLOAT__\n-             __SIZEOF_DOUBLE__\n-             __SIZEOF_LONG_DOUBLE__\n-             __SIZEOF_SIZE_T__\n-             __SIZEOF_WCHAR_T__\n-             __SIZEOF_WINT_T__\n-             __SIZEOF_PTRDIFF_T__\n-\n-  Defined to the number of bytes of the C standard data types: ``int``,\n-  ``long``, ``long long``, ``short``, ``void *``, ``float``,\n-  ``double``, ``long double``, ``size_t``, ``wchar_t``, ``wint_t``\n-  and ``ptrdiff_t``.\n-\n-.. c:macro:: __BYTE_ORDER__\n-             __ORDER_LITTLE_ENDIAN__\n-             __ORDER_BIG_ENDIAN__\n-             __ORDER_PDP_ENDIAN__\n-\n-  ``__BYTE_ORDER__`` is defined to one of the values\n-  ``__ORDER_LITTLE_ENDIAN__``, ``__ORDER_BIG_ENDIAN__``, or\n-  ``__ORDER_PDP_ENDIAN__`` to reflect the layout of multi-byte and\n-  multi-word quantities in memory.  If ``__BYTE_ORDER__`` is equal to\n-  ``__ORDER_LITTLE_ENDIAN__`` or ``__ORDER_BIG_ENDIAN__``, then\n-  multi-byte and multi-word quantities are laid out identically: the\n-  byte (word) at the lowest address is the least significant or most\n-  significant byte (word) of the quantity, respectively.  If\n-  ``__BYTE_ORDER__`` is equal to ``__ORDER_PDP_ENDIAN__``, then\n-  bytes in 16-bit words are laid out in a little-endian fashion, whereas\n-  the 16-bit subwords of a 32-bit quantity are laid out in big-endian\n-  fashion.\n-\n-  You should use these macros for testing like this:\n-\n-  .. code-block:: c++\n-\n-    /* Test for a little-endian machine */\n-    #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-\n-.. c:macro:: __FLOAT_WORD_ORDER__\n-\n-  ``__FLOAT_WORD_ORDER__`` is defined to one of the values\n-  ``__ORDER_LITTLE_ENDIAN__`` or ``__ORDER_BIG_ENDIAN__`` to reflect\n-  the layout of the words of multi-word floating-point quantities.\n-\n-.. c:macro:: __DEPRECATED\n-\n-  This macro is defined, with value 1, when compiling a C++ source file\n-  with warnings about deprecated constructs enabled.  These warnings are\n-  enabled by default, but can be disabled with :option:`-Wno-deprecated`.\n-\n-.. c:macro:: __EXCEPTIONS\n-\n-  This macro is defined, with value 1, when compiling a C++ source file\n-  with exceptions enabled.  If :option:`-fno-exceptions` is used when\n-  compiling the file, then this macro is not defined.\n-\n-.. c:macro:: __GXX_RTTI\n-\n-  This macro is defined, with value 1, when compiling a C++ source file\n-  with runtime type identification enabled.  If :option:`-fno-rtti` is\n-  used when compiling the file, then this macro is not defined.\n-\n-.. c:macro:: __USING_SJLJ_EXCEPTIONS__\n-\n-  This macro is defined, with value 1, if the compiler uses the old\n-  mechanism based on ``setjmp`` and ``longjmp`` for exception\n-  handling.\n-\n-.. c:macro:: __GXX_EXPERIMENTAL_CXX0X__\n-\n-  This macro is defined when compiling a C++ source file with C++11 features\n-  enabled, i.e., for all C++ language dialects except :option:`-std=c++98`\n-  and :option:`-std=gnu++98`. This macro is obsolete, but can be used to\n-  detect experimental C++0x features in very old versions of GCC. Since\n-  GCC 4.7.0 the ``__cplusplus`` macro is defined correctly, so most\n-  code should test ``__cplusplus >= 201103L`` instead of using this\n-  macro.\n-\n-.. c:macro:: __GXX_WEAK__\n-\n-  This macro is defined when compiling a C++ source file.  It has the\n-  value 1 if the compiler will use weak symbols, COMDAT sections, or\n-  other similar techniques to collapse symbols with 'vague linkage'\n-  that are defined in multiple translation units.  If the compiler will\n-  not collapse such symbols, this macro is defined with value 0.  In\n-  general, user code should not need to make use of this macro; the\n-  purpose of this macro is to ease implementation of the C++ runtime\n-  library provided with G++.\n-\n-.. c:macro:: __NEXT_RUNTIME__\n-\n-  This macro is defined, with value 1, if (and only if) the NeXT runtime\n-  (as in :option:`-fnext-runtime`) is in use for Objective-C.  If the GNU\n-  runtime is used, this macro is not defined, so that you can use this\n-  macro to determine which runtime (NeXT or GNU) is being used.\n-\n-.. c:macro:: __LP64__\n-             _LP64\n-\n-  These macros are defined, with value 1, if (and only if) the compilation\n-  is for a target where ``long int`` and pointer both use 64-bits and\n-  ``int`` uses 32-bit.\n-\n-.. c:macro:: __SSP__\n-\n-  This macro is defined, with value 1, when :option:`-fstack-protector` is in\n-  use.\n-\n-.. c:macro:: __SSP_ALL__\n-\n-  This macro is defined, with value 2, when :option:`-fstack-protector-all` is\n-  in use.\n-\n-.. c:macro:: __SSP_STRONG__\n-\n-  This macro is defined, with value 3, when :option:`-fstack-protector-strong` is\n-  in use.\n-\n-.. c:macro:: __SSP_EXPLICIT__\n-\n-  This macro is defined, with value 4, when :option:`-fstack-protector-explicit` is\n-  in use.\n-\n-``__SANITIZE_ADDRESS__``\n-  This macro is defined, with value 1, when :option:`-fsanitize=address`\n-  or :option:`-fsanitize=kernel-address` are in use.\n-\n-``__SANITIZE_THREAD__``\n-  This macro is defined, with value 1, when :option:`-fsanitize=thread` is in use.\n-\n-.. c:macro:: __TIMESTAMP__\n-\n-  This macro expands to a string constant that describes the date and time\n-  of the last modification of the current source file. The string constant\n-  contains abbreviated day of the week, month, day of the month, time in\n-  hh:mm:ss form, year and looks like ``\"Sun Sep 16 01:03:52 1973\"``.\n-  If the day of the month is less than 10, it is padded with a space on the left.\n-\n-  If GCC cannot determine the current date, it will emit a warning message\n-  (once per compilation) and ``__TIMESTAMP__`` will expand to\n-  ``\"??? ??? ?? ??:??:?? ????\"``.\n-\n-.. c:macro:: __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n-             __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n-             __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n-             __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\n-             __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n-\n-  These macros are defined when the target processor supports atomic compare\n-  and swap operations on operands 1, 2, 4, 8 or 16 bytes in length, respectively.\n-\n-.. c:macro:: __HAVE_SPECULATION_SAFE_VALUE\n-\n-  This macro is defined with the value 1 to show that this version of GCC\n-  supports ``__builtin_speculation_safe_value``.\n-\n-.. c:macro:: __GCC_HAVE_DWARF2_CFI_ASM\n-\n-  This macro is defined when the compiler is emitting DWARF CFI directives\n-  to the assembler.  When this is defined, it is possible to emit those same\n-  directives in inline assembly.\n-\n-.. c:macro:: __FP_FAST_FMA\n-             __FP_FAST_FMAF\n-             __FP_FAST_FMAL\n-\n-  These macros are defined with value 1 if the backend supports the\n-  ``fma``, ``fmaf``, and ``fmal`` builtin functions, so that\n-  the include file :samp:`math.h` can define the macros\n-  ``FP_FAST_FMA``, ``FP_FAST_FMAF``, and ``FP_FAST_FMAL``\n-  for compatibility with the 1999 C standard.\n-\n-.. c:macro:: __FP_FAST_FMAF16\n-             __FP_FAST_FMAF32\n-             __FP_FAST_FMAF64\n-             __FP_FAST_FMAF128\n-             __FP_FAST_FMAF32X\n-             __FP_FAST_FMAF64X\n-             __FP_FAST_FMAF128X\n-\n-  These macros are defined with the value 1 if the backend supports the\n-  ``fma`` functions using the additional ``_Floatn`` and\n-  ``_Floatnx`` types that are defined in ISO/IEC TS\n-  18661-3:2015.  The include file :samp:`math.h` can define the\n-  ``FP_FAST_FMAFn`` and ``FP_FAST_FMAFnx`` macros if\n-  the user defined ``__STDC_WANT_IEC_60559_TYPES_EXT__`` before\n-  including :samp:`math.h`.\n-\n-.. c:macro:: __GCC_IEC_559\n-\n-  This macro is defined to indicate the intended level of support for\n-  IEEE 754 (IEC 60559) floating-point arithmetic.  It expands to a\n-  nonnegative integer value.  If 0, it indicates that the combination of\n-  the compiler configuration and the command-line options is not\n-  intended to support IEEE 754 arithmetic for ``float`` and\n-  ``double`` as defined in C99 and C11 Annex F (for example, that the\n-  standard rounding modes and exceptions are not supported, or that\n-  optimizations are enabled that conflict with IEEE 754 semantics).  If\n-  1, it indicates that IEEE 754 arithmetic is intended to be supported;\n-  this does not mean that all relevant language features are supported\n-  by GCC.  If 2 or more, it additionally indicates support for IEEE\n-  754-2008 (in particular, that the binary encodings for quiet and\n-  signaling NaNs are as specified in IEEE 754-2008).\n-\n-  This macro does not indicate the default state of command-line options\n-  that control optimizations that C99 and C11 permit to be controlled by\n-  standard pragmas, where those standards do not require a particular\n-  default state.  It does not indicate whether optimizations respect\n-  signaling NaN semantics (the macro for that is\n-  ``__SUPPORT_SNAN__``).  It does not indicate support for decimal\n-  floating point or the IEEE 754 binary16 and binary128 types.\n-\n-.. c:macro:: __GCC_IEC_559_COMPLEX\n-\n-  This macro is defined to indicate the intended level of support for\n-  IEEE 754 (IEC 60559) floating-point arithmetic for complex numbers, as\n-  defined in C99 and C11 Annex G.  It expands to a nonnegative integer\n-  value.  If 0, it indicates that the combination of the compiler\n-  configuration and the command-line options is not intended to support\n-  Annex G requirements (for example, because :option:`-fcx-limited-range`\n-  was used).  If 1 or more, it indicates that it is intended to support\n-  those requirements; this does not mean that all relevant language\n-  features are supported by GCC.\n-\n-.. c:macro:: __NO_MATH_ERRNO__\n-\n-  This macro is defined if :option:`-fno-math-errno` is used, or enabled\n-  by another option such as :option:`-ffast-math` or by default.\n-\n-.. c:macro:: __RECIPROCAL_MATH__\n-\n-  This macro is defined if :option:`-freciprocal-math` is used, or enabled\n-  by another option such as :option:`-ffast-math` or by default.\n-\n-.. c:macro:: __NO_SIGNED_ZEROS__\n-\n-  This macro is defined if :option:`-fno-signed-zeros` is used, or enabled\n-  by another option such as :option:`-ffast-math` or by default.\n-\n-.. c:macro:: __NO_TRAPPING_MATH__\n-\n-  This macro is defined if :option:`-fno-trapping-math` is used.\n-\n-.. c:macro:: __ASSOCIATIVE_MATH__\n-\n-  This macro is defined if :option:`-fassociative-math` is used, or enabled\n-  by another option such as :option:`-ffast-math` or by default.\n-\n-.. c:macro:: __ROUNDING_MATH__\n-\n-  This macro is defined if :option:`-frounding-math` is used.\n-\n-.. c:macro:: __GNUC_EXECUTION_CHARSET_NAME\n-             __GNUC_WIDE_EXECUTION_CHARSET_NAME\n-\n-  These macros are defined to expand to a narrow string literal of\n-  the name of the narrow and wide compile-time execution character\n-  set used.  It directly reflects the name passed to the options\n-  :option:`-fexec-charset` and :option:`-fwide-exec-charset`, or the defaults\n-  documented for those options (that is, it can expand to something like\n-  ``\"UTF-8\"``).  See :ref:`invocation`.\n-\n-.. index:: system-specific predefined macros, predefined macros, system-specific, reserved namespace\n-\n-.. _system-specific-predefined-macros:\n-\n-System-specific Predefined Macros\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The C preprocessor normally predefines several macros that indicate what\n-type of system and machine is in use.  They are obviously different on\n-each target supported by GCC.  This manual, being for all systems and\n-machines, cannot tell you what their names are, but you can use\n-:command:`cpp -dM` to see them all.  See :ref:`invocation`.  All system-specific\n-predefined macros expand to a constant value, so you can test them with\n-either :samp:`#ifdef` or :samp:`#if`.\n-\n-The C standard requires that all system-specific macros be part of the\n-:dfn:`reserved namespace`.  All names which begin with two underscores,\n-or an underscore and a capital letter, are reserved for the compiler and\n-library to use as they wish.  However, historically system-specific\n-macros have had names with no special prefix; for instance, it is common\n-to find ``unix`` defined on Unix systems.  For all such macros, GCC\n-provides a parallel macro with two underscores added at the beginning\n-and the end.  If ``unix`` is defined, ``__unix__`` will be defined\n-too.  There will never be more than two underscores; the parallel of\n-``_mips`` is ``__mips__``.\n-\n-When the :option:`-ansi` option, or any :option:`-std` option that\n-requests strict conformance, is given to the compiler, all the\n-system-specific predefined macros outside the reserved namespace are\n-suppressed.  The parallel macros, inside the reserved namespace, remain\n-defined.\n-\n-We are slowly phasing out all predefined macros which are outside the\n-reserved namespace.  You should never use them in new programs, and we\n-encourage you to correct older code to use the parallel macros whenever\n-you find it.  We don't recommend you use the system-specific macros that\n-are in the reserved namespace, either.  It is better in the long run to\n-check specifically for features you need, using a tool such as\n-:command:`autoconf`.\n-\n-.. index:: named operators, C++ named operators, iso646.h\n-\n-.. _c++-named-operators:\n-\n-C++ Named Operators\n-^^^^^^^^^^^^^^^^^^^\n-\n-In C++, there are eleven keywords which are simply alternate spellings\n-of operators normally written with punctuation.  These keywords are\n-treated as such even in the preprocessor.  They function as operators in\n-:samp:`#if`, and they cannot be defined as macros or poisoned.  In C, you\n-can request that those keywords take their C++ meaning by including\n-:samp:`iso646.h`.  That header defines each one as a normal object-like\n-macro expanding to the appropriate punctuator.\n-\n-These are the named operators and their corresponding punctuators:\n-\n-.. list-table::\n-\n-   * - Named Operator\n-     - Punctuator\n-   * - ``and``\n-     - ``&&``\n-   * - ``and_eq``\n-     - ``&=``\n-   * - ``bitand``\n-     - ``&``\n-   * - ``bitor``\n-     - ``|``\n-   * - ``compl``\n-     - ``~``\n-   * - ``not``\n-     - ``!``\n-   * - ``not_eq``\n-     - ``!=``\n-   * - ``or``\n-     - ``||``\n-   * - ``or_eq``\n-     - ``|=``\n-   * - ``xor``\n-     - ``^``\n-   * - ``xor_eq``\n-     - ``^=``\n\\ No newline at end of file"}, {"sha": "9265601c1341f32870a949d48a7b557274e0fa44", "filename": "gcc/doc/cpp/macros/stringizing.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fstringizing.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,86 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: stringizing, # operator\n-\n-.. _stringizing:\n-\n-Stringizing\n-***********\n-\n-Sometimes you may want to convert a macro argument into a string\n-constant.  Parameters are not replaced inside string constants, but you\n-can use the :samp:`#` preprocessing operator instead.  When a macro\n-parameter is used with a leading :samp:`#`, the preprocessor replaces it\n-with the literal text of the actual argument, converted to a string\n-constant.  Unlike normal parameter replacement, the argument is not\n-macro-expanded first.  This is called :dfn:`stringizing`.\n-\n-There is no way to combine an argument with surrounding text and\n-stringize it all together.  Instead, you can write a series of adjacent\n-string constants and stringized arguments.  The preprocessor\n-replaces the stringized arguments with string constants.  The C\n-compiler then combines all the adjacent string constants into one\n-long string.\n-\n-Here is an example of a macro definition that uses stringizing:\n-\n-.. code-block::\n-\n-  #define WARN_IF(EXP) \\\n-  do { if (EXP) \\\n-          fprintf (stderr, \"Warning: \" #EXP \"\\n\"); } \\\n-  while (0)\n-  WARN_IF (x == 0);\n-       \u2192 do { if (x == 0)\n-             fprintf (stderr, \"Warning: \" \"x == 0\" \"\\n\"); } while (0);\n-\n-The argument for ``EXP`` is substituted once, as-is, into the\n-``if`` statement, and once, stringized, into the argument to\n-``fprintf``.  If ``x`` were a macro, it would be expanded in the\n-``if`` statement, but not in the string.\n-\n-The ``do`` and ``while (0)`` are a kludge to make it possible to\n-write ``WARN_IF (arg);``, which the resemblance of\n-``WARN_IF`` to a function would make C programmers want to do; see\n-:ref:`swallowing-the-semicolon`.\n-\n-Stringizing in C involves more than putting double-quote characters\n-around the fragment.  The preprocessor backslash-escapes the quotes\n-surrounding embedded string constants, and all backslashes within string and\n-character constants, in order to get a valid C string constant with the\n-proper contents.  Thus, stringizing ``p = \"foo\\n\";`` results in\n-``\"p = \\\"foo\\\\n\\\";\"``.  However, backslashes that are not inside string\n-or character constants are not duplicated: :samp:`\\\\n` by itself\n-stringizes to ``\"\\n\"``.\n-\n-All leading and trailing whitespace in text being stringized is\n-ignored.  Any sequence of whitespace in the middle of the text is\n-converted to a single space in the stringized result.  Comments are\n-replaced by whitespace long before stringizing happens, so they\n-never appear in stringized text.\n-\n-There is no way to convert a macro argument into a character constant.\n-\n-If you want to stringize the result of expansion of a macro argument,\n-you have to use two levels of macros.\n-\n-.. code-block::\n-\n-  #define xstr(s) str(s)\n-  #define str(s) #s\n-  #define foo 4\n-  str (foo)\n-       \u2192 \"foo\"\n-  xstr (foo)\n-       \u2192 xstr (4)\n-       \u2192 str (4)\n-       \u2192 \"4\"\n-\n-``s`` is stringized when it is used in ``str``, so it is not\n-macro-expanded first.  But ``s`` is an ordinary argument to\n-``xstr``, so it is completely macro-expanded before ``xstr``\n-itself is expanded (see :ref:`argument-prescan`).  Therefore, by the time\n-``str`` gets to its argument, it has already been macro-expanded.\n\\ No newline at end of file"}, {"sha": "137abe949845677c75992516ad157e39965e4c18", "filename": "gcc/doc/cpp/macros/undefining-and-redefining-macros.rst", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fundefining-and-redefining-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,67 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: undefining macros, redefining macros, #undef\n-\n-.. _undefining-and-redefining-macros:\n-\n-Undefining and Redefining Macros\n-********************************\n-\n-If a macro ceases to be useful, it may be :dfn:`undefined` with the\n-:samp:`#undef` directive.  :samp:`#undef` takes a single argument, the\n-name of the macro to undefine.  You use the bare macro name, even if the\n-macro is function-like.  It is an error if anything appears on the line\n-after the macro name.  :samp:`#undef` has no effect if the name is not a\n-macro.\n-\n-.. code-block::\n-\n-  #define FOO 4\n-  x = FOO;        \u2192 x = 4;\n-  #undef FOO\n-  x = FOO;        \u2192 x = FOO;\n-\n-Once a macro has been undefined, that identifier may be :dfn:`redefined`\n-as a macro by a subsequent :samp:`#define` directive.  The new definition\n-need not have any resemblance to the old definition.\n-\n-However, if an identifier which is currently a macro is redefined, then\n-the new definition must be :dfn:`effectively the same` as the old one.\n-Two macro definitions are effectively the same if:\n-\n-* Both are the same type of macro (object- or function-like).\n-\n-* All the tokens of the replacement list are the same.\n-\n-* If there are any parameters, they are the same.\n-\n-* Whitespace appears in the same places in both.  It need not be\n-  exactly the same amount of whitespace, though.  Remember that comments\n-  count as whitespace.\n-\n-These definitions are effectively the same:\n-\n-.. code-block:: c++\n-\n-  #define FOUR (2 + 2)\n-  #define FOUR         (2    +    2)\n-  #define FOUR (2 /* two */ + 2)\n-\n-but these are not:\n-\n-.. code-block:: c++\n-\n-  #define FOUR (2 + 2)\n-  #define FOUR ( 2+2 )\n-  #define FOUR (2 * 2)\n-  #define FOUR(score,and,seven,years,ago) (2 + 2)\n-\n-If a macro is redefined with a definition that is not effectively the\n-same as the old one, the preprocessor issues a warning and changes the\n-macro to use the new definition.  If the new definition is effectively\n-the same, the redefinition is silently ignored.  This allows, for\n-instance, two different headers to define a common macro.  The\n-preprocessor will only complain if the definitions do not match.\n\\ No newline at end of file"}, {"sha": "21ce15da68a5325377f40f02b37c79306f15c287", "filename": "gcc/doc/cpp/macros/variadic-macros.rst", "status": "removed", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fmacros%2Fvariadic-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,141 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: variable number of arguments, macros with variable arguments, variadic macros\n-\n-.. _variadic-macros:\n-\n-Variadic Macros\n-***************\n-\n-A macro can be declared to accept a variable number of arguments much as\n-a function can.  The syntax for defining the macro is similar to that of\n-a function.  Here is an example:\n-\n-.. code-block:: c++\n-\n-  #define eprintf(...) fprintf (stderr, __VA_ARGS__)\n-\n-This kind of macro is called :dfn:`variadic`.  When the macro is invoked,\n-all the tokens in its argument list after the last named argument (this\n-macro has none), including any commas, become the :dfn:`variable\n-argument`.  This sequence of tokens replaces the identifier\n-``__VA_ARGS__`` in the macro body wherever it appears.  Thus, we\n-have this expansion:\n-\n-.. code-block::\n-\n-  eprintf (\"%s:%d: \", input_file, lineno)\n-       \u2192  fprintf (stderr, \"%s:%d: \", input_file, lineno)\n-\n-The variable argument is completely macro-expanded before it is inserted\n-into the macro expansion, just like an ordinary argument.  You may use\n-the :samp:`#` and :samp:`##` operators to stringize the variable argument\n-or to paste its leading or trailing token with another token.  (But see\n-below for an important special case for :samp:`##`.)\n-\n-If your macro is complicated, you may want a more descriptive name for\n-the variable argument than ``__VA_ARGS__``.  CPP permits\n-this, as an extension.  You may write an argument name immediately\n-before the :samp:`...`; that name is used for the variable argument.\n-The ``eprintf`` macro above could be written\n-\n-.. code-block:: c++\n-\n-  #define eprintf(args...) fprintf (stderr, args)\n-\n-using this extension.  You cannot use ``__VA_ARGS__`` and this\n-extension in the same macro.\n-\n-You can have named arguments as well as variable arguments in a variadic\n-macro.  We could define ``eprintf`` like this, instead:\n-\n-.. code-block:: c++\n-\n-  #define eprintf(format, ...) fprintf (stderr, format, __VA_ARGS__)\n-\n-This formulation looks more descriptive, but historically it was less\n-flexible: you had to supply at least one argument after the format\n-string.  In standard C, you could not omit the comma separating the\n-named argument from the variable arguments.  (Note that this\n-restriction has been lifted in C++20, and never existed in GNU C; see\n-below.)\n-\n-Furthermore, if you left the variable argument empty, you would have\n-gotten a syntax error, because there would have been an extra comma\n-after the format string.\n-\n-.. code-block::\n-\n-  eprintf(\"success!\\n\", );\n-       \u2192 fprintf(stderr, \"success!\\n\", );\n-\n-This has been fixed in C++20, and GNU CPP also has a pair of\n-extensions which deal with this problem.\n-\n-First, in GNU CPP, and in C++ beginning in C++20, you are allowed to\n-leave the variable argument out entirely:\n-\n-.. code-block::\n-\n-  eprintf (\"success!\\n\")\n-       \u2192 fprintf(stderr, \"success!\\n\", );\n-\n-Second, C++20 introduces the ``__VA_OPT__`` function macro.\n-This macro may only appear in the definition of a variadic macro.  If\n-the variable argument has any tokens, then a ``__VA_OPT__``\n-invocation expands to its argument; but if the variable argument does\n-not have any tokens, the ``__VA_OPT__`` expands to nothing:\n-\n-.. code-block:: c++\n-\n-  #define eprintf(format, ...) \\\n-    fprintf (stderr, format __VA_OPT__(,) __VA_ARGS__)\n-\n-``__VA_OPT__`` is also available in GNU C and GNU C++.\n-\n-Historically, GNU CPP has also had another extension to handle the\n-trailing comma: the :samp:`##` token paste operator has a special\n-meaning when placed between a comma and a variable argument.  Despite\n-the introduction of ``__VA_OPT__``, this extension remains\n-supported in GNU CPP, for backward compatibility.  If you write\n-\n-.. code-block:: c++\n-\n-  #define eprintf(format, ...) fprintf (stderr, format, ##__VA_ARGS__)\n-\n-and the variable argument is left out when the ``eprintf`` macro is\n-used, then the comma before the :samp:`##` will be deleted.  This does\n-*not* happen if you pass an empty argument, nor does it happen if\n-the token preceding :samp:`##` is anything other than a comma.\n-\n-.. code-block::\n-\n-  eprintf (\"success!\\n\")\n-       \u2192 fprintf(stderr, \"success!\\n\");\n-\n-The above explanation is ambiguous about the case where the only macro\n-parameter is a variable arguments parameter, as it is meaningless to\n-try to distinguish whether no argument at all is an empty argument or\n-a missing argument.\n-CPP retains the comma when conforming to a specific C\n-standard.  Otherwise the comma is dropped as an extension to the standard.\n-\n-The C standard\n-mandates that the only place the identifier ``__VA_ARGS__``\n-can appear is in the replacement list of a variadic macro.  It may not\n-be used as a macro name, macro argument name, or within a different type\n-of macro.  It may also be forbidden in open text; the standard is\n-ambiguous.  We recommend you avoid using it except for its defined\n-purpose.\n-\n-Likewise, C++ forbids ``__VA_OPT__`` anywhere outside the\n-replacement list of a variadic macro.\n-\n-Variadic macros became a standard part of the C language with C99.\n-GNU CPP previously supported them\n-with a named variable argument\n-(:samp:`args...`, not :samp:`...` and ``__VA_ARGS__``), which\n-is still supported for backward compatibility.\n\\ No newline at end of file"}, {"sha": "229c0332c13190fe0bc172753db76462af06cab5", "filename": "gcc/doc/cpp/obsolete-features.rst", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fobsolete-features.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,98 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _obsolete-features:\n-\n-Obsolete Features\n-*****************\n-\n-CPP has some features which are present mainly for compatibility with\n-older programs.  We discourage their use in new code.  In some cases,\n-we plan to remove the feature in a future version of GCC.\n-\n-.. index:: assertions\n-\n-Assertions\n-^^^^^^^^^^\n-\n-:dfn:`Assertions` are a deprecated alternative to macros in writing\n-conditionals to test what sort of computer or system the compiled\n-program will run on.  Assertions are usually predefined, but you can\n-define them with preprocessing directives or command-line options.\n-\n-Assertions were intended to provide a more systematic way to describe\n-the compiler's target system and we added them for compatibility with\n-existing compilers.  In practice they are just as unpredictable as the\n-system-specific predefined macros.  In addition, they are not part of\n-any standard, and only a few compilers support them.\n-Therefore, the use of assertions is **less** portable than the use\n-of system-specific predefined macros.  We recommend you do not use them at\n-all.\n-\n-.. index:: predicates\n-\n-An assertion looks like this:\n-\n-.. code-block:: c++\n-\n-  #predicate (answer)\n-\n-:samp:`{predicate}` must be a single identifier.  :samp:`{answer}` can be any\n-sequence of tokens; all characters are significant except for leading\n-and trailing whitespace, and differences in internal whitespace\n-sequences are ignored.  (This is similar to the rules governing macro\n-redefinition.)  Thus, ``(x + y)`` is different from ``(x+y)`` but\n-equivalent to ``( x + y )``.  Parentheses do not nest inside an\n-answer.\n-\n-.. index:: testing predicates\n-\n-To test an assertion, you write it in an :samp:`#if`.  For example, this\n-conditional succeeds if either ``vax`` or ``ns16000`` has been\n-asserted as an answer for ``machine``.\n-\n-.. code-block:: c++\n-\n-  #if #machine (vax) || #machine (ns16000)\n-\n-You can test whether *any* answer is asserted for a predicate by\n-omitting the answer in the conditional:\n-\n-.. code-block:: c++\n-\n-  #if #machine\n-\n-.. index:: #assert\n-\n-Assertions are made with the :samp:`#assert` directive.  Its sole\n-argument is the assertion to make, without the leading :samp:`#` that\n-identifies assertions in conditionals.\n-\n-.. code-block:: c++\n-\n-  #assert predicate (answer)\n-\n-You may make several assertions with the same predicate and different\n-answers.  Subsequent assertions do not override previous ones for the\n-same predicate.  All the answers for any given predicate are\n-simultaneously true.\n-\n-.. index:: assertions, canceling, #unassert\n-\n-Assertions can be canceled with the :samp:`#unassert` directive.  It\n-has the same syntax as :samp:`#assert`.  In that form it cancels only the\n-answer which was specified on the :samp:`#unassert` line; other answers\n-for that predicate remain true.  You can cancel an entire predicate by\n-leaving out the answer:\n-\n-.. code-block:: c++\n-\n-  #unassert predicate\n-\n-In either form, if no such assertion has been made, :samp:`#unassert` has\n-no effect.\n-\n-You can also make or cancel assertions using command-line options.\n-See :ref:`invocation`.\n\\ No newline at end of file"}, {"sha": "370523a487caef8d823e1d9e14485aa33abdd2c6", "filename": "gcc/doc/cpp/other-directives.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fother-directives.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fother-directives.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fother-directives.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,30 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: #ident, #sccs\n-\n-.. _other-directives:\n-\n-Other Directives\n-----------------\n-\n-The :samp:`#ident` directive takes one argument, a string constant.  On\n-some systems, that string constant is copied into a special segment of\n-the object file.  On other systems, the directive is ignored.  The\n-:samp:`#sccs` directive is a synonym for :samp:`#ident`.\n-\n-These directives are not part of the C standard, but they are not\n-official GNU extensions either.  What historical information we have\n-been able to find, suggests they originated with System V.\n-\n-.. index:: null directive\n-\n-The :dfn:`null directive` consists of a :samp:`#` followed by a newline,\n-with only whitespace (including comments) in between.  A null directive\n-is understood as a preprocessing directive but has no effect on the\n-preprocessor output.  The primary significance of the existence of the\n-null directive is that an input line consisting of just a :samp:`#` will\n-produce no output, rather than a line of output containing just a\n-:samp:`#`.  Supposedly some old C programs contain such lines.\n\\ No newline at end of file"}, {"sha": "f7054195ab8fdd6d8487d1d6c134c71c45bd35a5", "filename": "gcc/doc/cpp/overview.rst", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Foverview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Foverview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Foverview.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,67 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _top:\n-\n-.. _overview:\n-\n-Overview\n---------\n-\n-The C preprocessor, often known as :dfn:`cpp`, is a :dfn:`macro processor`\n-that is used automatically by the C compiler to transform your program\n-before compilation.  It is called a macro processor because it allows\n-you to define :dfn:`macros`, which are brief abbreviations for longer\n-constructs.\n-\n-The C preprocessor is intended to be used only with C, C++, and\n-Objective-C source code.  In the past, it has been abused as a general\n-text processor.  It will choke on input which does not obey C's lexical\n-rules.  For example, apostrophes will be interpreted as the beginning of\n-character constants, and cause errors.  Also, you cannot rely on it\n-preserving characteristics of the input which are not significant to\n-C-family languages.  If a Makefile is preprocessed, all the hard tabs\n-will be removed, and the Makefile will not work.\n-\n-Having said that, you can often get away with using cpp on things which\n-are not C.  Other Algol-ish programming languages are often safe\n-(Ada, etc.) So is assembly, with caution.  :option:`-traditional-cpp`\n-mode preserves more white space, and is otherwise more permissive.  Many\n-of the problems can be avoided by writing C or C++ style comments\n-instead of native language comments, and keeping macros simple.\n-\n-Wherever possible, you should use a preprocessor geared to the language\n-you are writing in.  Modern versions of the GNU assembler have macro\n-facilities.  Most high level programming languages have their own\n-conditional compilation and inclusion mechanism.  If all else fails,\n-try a true general text processor, such as GNU M4.\n-\n-C preprocessors vary in some details.  This manual discusses the GNU C\n-preprocessor, which provides a small superset of the features of ISO\n-Standard C.  In its default mode, the GNU C preprocessor does not do a\n-few things required by the standard.  These are features which are\n-rarely, if ever, used, and may cause surprising changes to the meaning\n-of a program which does not expect them.  To get strict ISO Standard C,\n-you should use the :option:`-std=c90`, :option:`-std=c99`,\n-:option:`-std=c11` or :option:`-std=c17` options, depending\n-on which version of the standard you want.  To get all the mandatory\n-diagnostics, you must also use :option:`-pedantic`.  See :ref:`invocation`.\n-\n-This manual describes the behavior of the ISO preprocessor.  To\n-minimize gratuitous differences, where the ISO preprocessor's\n-behavior does not conflict with traditional semantics, the\n-traditional preprocessor should behave the same way.  The various\n-differences that do exist are detailed in the section :ref:`traditional-mode`.\n-\n-For clarity, unless noted otherwise, references to :samp:`CPP` in this\n-manual refer to GNU CPP.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  character-sets\n-  initial-processing\n-  tokenization\n-  the-preprocessing-language\n\\ No newline at end of file"}, {"sha": "062b9c4165b587067b2c7a7e67eebf8fe5b5e30f", "filename": "gcc/doc/cpp/pragmas.rst", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fpragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fpragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fpragmas.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,121 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: pragma directive\n-\n-.. _pragmas:\n-\n-Pragmas\n--------\n-\n-The :samp:`#pragma` directive is the method specified by the C standard\n-for providing additional information to the compiler, beyond what is\n-conveyed in the language itself.  The forms of this directive\n-(commonly known as :dfn:`pragmas`) specified by C standard are prefixed with\n-``STDC``.  A C compiler is free to attach any meaning it likes to other\n-pragmas.  Most GNU-defined, supported pragmas have been given a\n-``GCC`` prefix.\n-\n-.. index:: _Pragma\n-\n-C99 introduced the ``_Pragma`` operator.  This feature addresses a\n-major problem with :samp:`#pragma`: being a directive, it cannot be\n-produced as the result of macro expansion.  ``_Pragma`` is an\n-operator, much like ``sizeof`` or ``defined``, and can be embedded\n-in a macro.\n-\n-Its syntax is ``_Pragma (string-literal)``, where\n-:samp:`{string-literal}` can be either a normal or wide-character string\n-literal.  It is destringized, by replacing all :samp:`\\\\\\\\` with a single\n-:samp:`\\\\` and all :samp:`\\\\\"` with a :samp:`\"`.  The result is then\n-processed as if it had appeared as the right hand side of a\n-:samp:`#pragma` directive.  For example,\n-\n-.. code-block:: c++\n-\n-  _Pragma (\"GCC dependency \\\"parse.y\\\"\")\n-\n-has the same effect as ``#pragma GCC dependency \"parse.y\"``.  The\n-same effect could be achieved using macros, for example\n-\n-.. code-block:: c++\n-\n-  #define DO_PRAGMA(x) _Pragma (#x)\n-  DO_PRAGMA (GCC dependency \"parse.y\")\n-\n-The standard is unclear on where a ``_Pragma`` operator can appear.\n-The preprocessor does not accept it within a preprocessing conditional\n-directive like :samp:`#if`.  To be safe, you are probably best keeping it\n-out of directives other than :samp:`#define`, and putting it on a line of\n-its own.\n-\n-This manual documents the pragmas which are meaningful to the\n-preprocessor itself.  Other pragmas are meaningful to the C or C++\n-compilers.  They are documented in the GCC manual.\n-\n-GCC plugins may provide their own pragmas.\n-\n-``#pragma GCC dependency``\n-  ``#pragma GCC dependency`` allows you to check the relative dates of\n-  the current file and another file.  If the other file is more recent than\n-  the current file, a warning is issued.  This is useful if the current\n-  file is derived from the other file, and should be regenerated.  The\n-  other file is searched for using the normal include search path.\n-  Optional trailing text can be used to give more information in the\n-  warning message.\n-\n-  .. code-block:: c++\n-\n-    #pragma GCC dependency \"parse.y\"\n-    #pragma GCC dependency \"/usr/include/time.h\" rerun fixincludes\n-\n-``#pragma GCC poison``\n-  Sometimes, there is an identifier that you want to remove completely\n-  from your program, and make sure that it never creeps back in.  To\n-  enforce this, you can :dfn:`poison` the identifier with this pragma.\n-  ``#pragma GCC poison`` is followed by a list of identifiers to\n-  poison.  If any of those identifiers appears anywhere in the source\n-  after the directive, it is a hard error.  For example,\n-\n-  .. code-block:: c++\n-\n-    #pragma GCC poison printf sprintf fprintf\n-    sprintf(some_string, \"hello\");\n-\n-  will produce an error.\n-\n-  If a poisoned identifier appears as part of the expansion of a macro\n-  which was defined before the identifier was poisoned, it will *not*\n-  cause an error.  This lets you poison an identifier without worrying\n-  about system headers defining macros that use it.\n-\n-  For example,\n-\n-  .. code-block:: c++\n-\n-    #define strrchr rindex\n-    #pragma GCC poison rindex\n-    strrchr(some_string, 'h');\n-\n-  will not produce an error.\n-\n-``#pragma GCC system_header``\n-  This pragma takes no arguments.  It causes the rest of the code in the\n-  current file to be treated as if it came from a system header.\n-  See :ref:`system-headers`.\n-\n-``#pragma GCC warning``, ``#pragma GCC error``\n-  ``#pragma GCC warning \"message\"`` causes the preprocessor to issue\n-  a warning diagnostic with the text :samp:`message`.  The message\n-  contained in the pragma must be a single string literal.  Similarly,\n-  ``#pragma GCC error \"message\"`` issues an error message.  Unlike\n-  the :samp:`#warning` and :samp:`#error` directives, these pragmas can be\n-  embedded in preprocessor macros using :samp:`_Pragma`.\n-\n-``#pragma once``\n-  If ``#pragma once`` is seen when scanning a header file, that\n-  file will never be read again, no matter what.  It is a less-portable\n-  alternative to using :samp:`#ifndef` to guard the contents of header files\n-  against multiple inclusions.\n\\ No newline at end of file"}, {"sha": "1b9c1f1bde132142ec2ce933496ddf10abc7950f", "filename": "gcc/doc/cpp/preprocessor-output.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fpreprocessor-output.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,86 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _preprocessor-output:\n-\n-Preprocessor Output\n--------------------\n-\n-When the C preprocessor is used with the C, C++, or Objective-C\n-compilers, it is integrated into the compiler and communicates a stream\n-of binary tokens directly to the compiler's parser.  However, it can\n-also be used in the more conventional standalone mode, where it produces\n-textual output.\n-\n-.. todo:: Document the library interface.\n-\n-.. index:: output format\n-\n-The output from the C preprocessor looks much like the input, except\n-that all preprocessing directive lines have been replaced with blank\n-lines and all comments with spaces.  Long runs of blank lines are\n-discarded.\n-\n-The ISO standard specifies that it is implementation defined whether a\n-preprocessor preserves whitespace between tokens, or replaces it with\n-e.g. a single space.  In GNU CPP, whitespace between tokens is collapsed\n-to become a single space, with the exception that the first token on a\n-non-directive line is preceded with sufficient spaces that it appears in\n-the same column in the preprocessed output that it appeared in the\n-original source file.  This is so the output is easy to read.\n-CPP does not insert any\n-whitespace where there was none in the original source, except where\n-necessary to prevent an accidental token paste.\n-\n-.. index:: linemarkers\n-\n-Source file name and line number information is conveyed by lines\n-of the form\n-\n-.. code-block:: c++\n-\n-  # linenum filename flags\n-\n-These are called :dfn:`linemarkers`.  They are inserted as needed into\n-the output (but never within a string or character constant).  They mean\n-that the following line originated in file :samp:`{filename}` at line\n-:samp:`{linenum}`.  :samp:`{filename}` will never contain any non-printing\n-characters; they are replaced with octal escape sequences.\n-\n-After the file name comes zero or more flags, which are :samp:`1`,\n-:samp:`2`, :samp:`3`, or :samp:`4`.  If there are multiple flags, spaces\n-separate them.  Here is what the flags mean:\n-\n-:samp:`1`\n-  This indicates the start of a new file.\n-\n-:samp:`2`\n-  This indicates returning to a file (after having included another file).\n-\n-:samp:`3`\n-  This indicates that the following text comes from a system header file,\n-  so certain warnings should be suppressed.\n-\n-:samp:`4`\n-  This indicates that the following text should be treated as being\n-  wrapped in an implicit ``extern \"C\"`` block.\n-\n-  .. maybe cross reference SYSTEM_IMPLICIT_EXTERN_C\n-\n-As an extension, the preprocessor accepts linemarkers in non-assembler\n-input files.  They are treated like the corresponding :samp:`#line`\n-directive, (see :ref:`line-control`), except that trailing flags are\n-permitted, and are interpreted with the meanings described above.  If\n-multiple flags are given, they must be in ascending order.\n-\n-Some directives may be duplicated in the output of the preprocessor.\n-These are :samp:`#ident` (always), :samp:`#pragma` (only if the\n-preprocessor does not handle the pragma itself), and :samp:`#define` and\n-:samp:`#undef` (with certain debugging options).  If this happens, the\n-:samp:`#` of the directive will always be in the first column, and there\n-will be no space between the :samp:`#` and the directive name.  If macro\n-expansion happens to generate tokens which might be mistaken for a\n-duplicated directive, a space will be inserted between the :samp:`#` and\n-the directive name.\n\\ No newline at end of file"}, {"sha": "f95e92465b99e399d180f1c91d7e29b4ac9f355e", "filename": "gcc/doc/cpp/the-preprocessing-language.rst", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Fthe-preprocessing-language.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,69 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: directives, preprocessing directives, directive line, directive name\n-\n-.. _the-preprocessing-language:\n-\n-The preprocessing language\n-**************************\n-\n-After tokenization, the stream of tokens may simply be passed straight\n-to the compiler's parser.  However, if it contains any operations in the\n-:dfn:`preprocessing language`, it will be transformed first.  This stage\n-corresponds roughly to the standard's 'translation phase 4' and is\n-what most people think of as the preprocessor's job.\n-\n-The preprocessing language consists of :dfn:`directives` to be executed\n-and :dfn:`macros` to be expanded.  Its primary capabilities are:\n-\n-* Inclusion of header files.  These are files of declarations that can be\n-  substituted into your program.\n-\n-* Macro expansion.  You can define :dfn:`macros`, which are abbreviations\n-  for arbitrary fragments of C code.  The preprocessor will replace the\n-  macros with their definitions throughout the program.  Some macros are\n-  automatically defined for you.\n-\n-* Conditional compilation.  You can include or exclude parts of the\n-  program according to various conditions.\n-\n-* Line control.  If you use a program to combine or rearrange source files\n-  into an intermediate file which is then compiled, you can use line\n-  control to inform the compiler where each source line originally came\n-  from.\n-\n-* Diagnostics.  You can detect problems at compile time and issue errors\n-  or warnings.\n-\n-There are a few more, less useful, features.\n-\n-Except for expansion of predefined macros, all these operations are\n-triggered with :dfn:`preprocessing directives`.  Preprocessing directives\n-are lines in your program that start with :samp:`#`.  Whitespace is\n-allowed before and after the :samp:`#`.  The :samp:`#` is followed by an\n-identifier, the :dfn:`directive name`.  It specifies the operation to\n-perform.  Directives are commonly referred to as :samp:`#{name}`\n-where :samp:`{name}` is the directive name.  For example, :samp:`#define` is\n-the directive that defines a macro.\n-\n-The :samp:`#` which begins a directive cannot come from a macro\n-expansion.  Also, the directive name is not macro expanded.  Thus, if\n-``foo`` is defined as a macro expanding to ``define``, that does\n-not make :samp:`#foo` a valid preprocessing directive.\n-\n-The set of valid directive names is fixed.  Programs cannot define new\n-preprocessing directives.\n-\n-Some directives require arguments; these make up the rest of the\n-directive line and must be separated from the directive name by\n-whitespace.  For example, :samp:`#define` must be followed by a macro\n-name and the intended expansion of the macro.\n-\n-A preprocessing directive cannot cover more than one line.  The line\n-may, however, be continued with backslash-newline, or by a block comment\n-which extends past the end of the line.  In either case, when the\n-directive is processed, the continuations have already been merged with\n-the first line to make one long line.\n\\ No newline at end of file"}, {"sha": "34f02c9c2f784bb150f648106668d641f3e8ed15", "filename": "gcc/doc/cpp/tokenization.rst", "status": "removed", "additions": 0, "deletions": 168, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftokenization.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftokenization.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftokenization.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,168 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: tokens, preprocessing tokens\n-\n-.. _tokenization:\n-\n-Tokenization\n-************\n-\n-After the textual transformations are finished, the input file is\n-converted into a sequence of :dfn:`preprocessing tokens`.  These mostly\n-correspond to the syntactic tokens used by the C compiler, but there are\n-a few differences.  White space separates tokens; it is not itself a\n-token of any kind.  Tokens do not have to be separated by white space,\n-but it is often necessary to avoid ambiguities.\n-\n-When faced with a sequence of characters that has more than one possible\n-tokenization, the preprocessor is greedy.  It always makes each token,\n-starting from the left, as big as possible before moving on to the next\n-token.  For instance, ``a+++++b`` is interpreted as\n-``a ++ ++ + b``, not as ``a ++ + ++ b``, even though the\n-latter tokenization could be part of a valid C program and the former\n-could not.\n-\n-Once the input file is broken into tokens, the token boundaries never\n-change, except when the :samp:`##` preprocessing operator is used to paste\n-tokens together.  See :ref:`concatenation`.  For example,\n-\n-.. code-block::\n-\n-  #define foo() bar\n-  foo()baz\n-       \u2192 bar baz\n-  not\n-       \u2192 barbaz\n-\n-The compiler does not re-tokenize the preprocessor's output.  Each\n-preprocessing token becomes one compiler token.\n-\n-.. index:: identifiers\n-\n-Preprocessing tokens fall into five broad classes: identifiers,\n-preprocessing numbers, string literals, punctuators, and other.  An\n-:dfn:`identifier` is the same as an identifier in C: any sequence of\n-letters, digits, or underscores, which begins with a letter or\n-underscore.  Keywords of C have no significance to the preprocessor;\n-they are ordinary identifiers.  You can define a macro whose name is a\n-keyword, for instance.  The only identifier which can be considered a\n-preprocessing keyword is ``defined``.  See :ref:`defined`.\n-\n-This is mostly true of other languages which use the C preprocessor.\n-However, a few of the keywords of C++ are significant even in the\n-preprocessor.  See :ref:`c++-named-operators`.\n-\n-In the 1999 C standard, identifiers may contain letters which are not\n-part of the 'basic source character set', at the implementation's\n-discretion (such as accented Latin letters, Greek letters, or Chinese\n-ideograms).  This may be done with an extended character set, or the\n-:samp:`\\\\u` and :samp:`\\\\U` escape sequences.\n-\n-As an extension, GCC treats :samp:`$` as a letter.  This is for\n-compatibility with some systems, such as VMS, where :samp:`$` is commonly\n-used in system-defined function and object names.  :samp:`$` is not a\n-letter in strictly conforming mode, or if you specify the :option:`-$`\n-option.  See :ref:`invocation`.\n-\n-.. index:: numbers, preprocessing numbers\n-\n-A :dfn:`preprocessing number` has a rather bizarre definition.  The\n-category includes all the normal integer and floating point constants\n-one expects of C, but also a number of other things one might not\n-initially recognize as a number.  Formally, preprocessing numbers begin\n-with an optional period, a required decimal digit, and then continue\n-with any sequence of letters, digits, underscores, periods, and\n-exponents.  Exponents are the two-character sequences :samp:`e+`,\n-:samp:`e-`, :samp:`E+`, :samp:`E-`, :samp:`p+`, :samp:`p-`, :samp:`P+`, and\n-:samp:`P-`.  (The exponents that begin with :samp:`p` or :samp:`P` are\n-used for hexadecimal floating-point constants.)\n-\n-The purpose of this unusual definition is to isolate the preprocessor\n-from the full complexity of numeric constants.  It does not have to\n-distinguish between lexically valid and invalid floating-point numbers,\n-which is complicated.  The definition also permits you to split an\n-identifier at any position and get exactly two tokens, which can then be\n-pasted back together with the :samp:`##` operator.\n-\n-It's possible for preprocessing numbers to cause programs to be\n-misinterpreted.  For example, ``0xE+12`` is a preprocessing number\n-which does not translate to any valid numeric constant, therefore a\n-syntax error.  It does not mean ``0xE + 12``, which is what you\n-might have intended.\n-\n-.. index:: string literals, string constants, character constants, header file names\n-\n-.. the @: prevents makeinfo from turning '' into \".\n-\n-:dfn:`String literals` are string constants, character constants, and\n-header file names (the argument of :samp:`#include`) [#f1]_.\n-\n-String constants and character\n-constants are straightforward: ``\"...\"`` or ``'...'``.  In\n-either case embedded quotes should be escaped with a backslash:\n-``'\\''`` is the character constant for :samp:`'`.  There is no limit on\n-the length of a character constant, but the value of a character\n-constant that contains more than one character is\n-implementation-defined.  See :ref:`implementation-details`.\n-\n-Header file names either look like string constants, ``\"...\"``, or are\n-written with angle brackets instead, ``<...>``.  In either case,\n-backslash is an ordinary character.  There is no way to escape the\n-closing quote or angle bracket.  The preprocessor looks for the header\n-file in different places depending on which form you use.  See :ref:`include-operation`.\n-\n-No string literal may extend past the end of a line.  You may use continued\n-lines instead, or string constant concatenation.\n-\n-.. index:: punctuators, digraphs, alternative tokens\n-\n-:dfn:`Punctuators` are all the usual bits of punctuation which are\n-meaningful to C and C++.  All but three of the punctuation characters in\n-ASCII are C punctuators.  The exceptions are :samp:`@`, :samp:`$`, and\n-:samp:`\\``.  In addition, all the two- and three-character operators are\n-punctuators.  There are also six :dfn:`digraphs`, which the C++ standard\n-calls :dfn:`alternative tokens`, which are merely alternate ways to spell\n-other punctuators.  This is a second attempt to work around missing\n-punctuation in obsolete systems.  It has no negative side effects,\n-unlike trigraphs, but does not cover as much ground.  The digraphs and\n-their corresponding normal punctuators are:\n-\n-.. code-block::\n-\n-  Digraph:        <%  %>  <:  :>  %:  %:%:\n-  Punctuator:      {   }   [   ]   #    ##\n-\n-.. index:: other tokens\n-\n-Any other single byte is considered 'other' and passed on to the\n-preprocessor's output unchanged.  The C compiler will almost certainly\n-reject source code containing 'other' tokens.  In ASCII, the only\n-'other' characters are :samp:`@`, :samp:`$`, :samp:`\\``, and control\n-characters other than NUL (all bits zero).  (Note that :samp:`$` is\n-normally considered a letter.)  All bytes with the high bit set\n-(numeric range 0x7F--0xFF) that were not succesfully interpreted as\n-part of an extended character in the input encoding are also 'other'\n-in the present implementation.\n-\n-NUL is a special case because of the high probability that its\n-appearance is accidental, and because it may be invisible to the user\n-(many terminals do not display NUL at all).  Within comments, NULs are\n-silently ignored, just as any other character would be.  In running\n-text, NUL is considered white space.  For example, these two directives\n-have the same meaning.\n-\n-.. code-block:: c++\n-\n-  #define X^@1\n-  #define X 1\n-\n-(where :samp:`^@` is ASCII NUL).  Within string or character constants,\n-NULs are preserved.  In the latter two cases the preprocessor emits a\n-warning message.\n-\n-.. [#f1] The C\n-  standard uses the term :dfn:`string literal` to refer only to what we are\n-  calling :dfn:`string constants`.\n\\ No newline at end of file"}, {"sha": "77db3d95a54908b9734a30712f054c1ec8ee5c2a", "filename": "gcc/doc/cpp/traditional-lexical-analysis.rst", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-lexical-analysis.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,74 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _traditional-lexical-analysis:\n-\n-Traditional lexical analysis\n-****************************\n-\n-The traditional preprocessor does not decompose its input into tokens\n-the same way a standards-conforming preprocessor does.  The input is\n-simply treated as a stream of text with minimal internal form.\n-\n-This implementation does not treat trigraphs (see :ref:`trigraphs`)\n-specially since they were an invention of the standards committee.  It\n-handles arbitrarily-positioned escaped newlines properly and splices\n-the lines as you would expect; many traditional preprocessors did not\n-do this.\n-\n-The form of horizontal whitespace in the input file is preserved in\n-the output.  In particular, hard tabs remain hard tabs.  This can be\n-useful if, for example, you are preprocessing a Makefile.\n-\n-Traditional CPP only recognizes C-style block comments, and treats the\n-:samp:`/*` sequence as introducing a comment only if it lies outside\n-quoted text.  Quoted text is introduced by the usual single and double\n-quotes, and also by an initial :samp:`<` in a ``#include``\n-directive.\n-\n-Traditionally, comments are completely removed and are not replaced\n-with a space.  Since a traditional compiler does its own tokenization\n-of the output of the preprocessor, this means that comments can\n-effectively be used as token paste operators.  However, comments\n-behave like separators for text handled by the preprocessor itself,\n-since it doesn't re-lex its input.  For example, in\n-\n-.. code-block:: c++\n-\n-  #if foo/**/bar\n-\n-:samp:`foo` and :samp:`bar` are distinct identifiers and expanded\n-separately if they happen to be macros.  In other words, this\n-directive is equivalent to\n-\n-.. code-block:: c++\n-\n-  #if foo bar\n-\n-rather than\n-\n-.. code-block:: c++\n-\n-  #if foobar\n-\n-Generally speaking, in traditional mode an opening quote need not have\n-a matching closing quote.  In particular, a macro may be defined with\n-replacement text that contains an unmatched quote.  Of course, if you\n-attempt to compile preprocessed output containing an unmatched quote\n-you will get a syntax error.\n-\n-However, all preprocessing directives other than ``#define``\n-require matching quotes.  For example:\n-\n-.. code-block:: c++\n-\n-  #define m This macro's fine and has an unmatched quote\n-  \"/* This is not a comment.  */\n-  /* This is a comment.  The following #include directive\n-     is ill-formed.  */\n-  #include <stdio.h\n-\n-Just as for the ISO preprocessor, what would be a closing quote can be\n-escaped with a backslash to prevent the quoted text from closing.\n\\ No newline at end of file"}, {"sha": "459a6497911b2850b3ba279637d6d015658b031c", "filename": "gcc/doc/cpp/traditional-macros.rst", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,99 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _traditional-macros:\n-\n-Traditional macros\n-******************\n-\n-The major difference between traditional and ISO macros is that the\n-former expand to text rather than to a token sequence.  CPP removes\n-all leading and trailing horizontal whitespace from a macro's\n-replacement text before storing it, but preserves the form of internal\n-whitespace.\n-\n-One consequence is that it is legitimate for the replacement text to\n-contain an unmatched quote (see :ref:`traditional-lexical-analysis`).  An\n-unclosed string or character constant continues into the text\n-following the macro call.  Similarly, the text at the end of a macro's\n-expansion can run together with the text after the macro invocation to\n-produce a single token.\n-\n-Normally comments are removed from the replacement text after the\n-macro is expanded, but if the :option:`-CC` option is passed on the\n-command-line comments are preserved.  (In fact, the current\n-implementation removes comments even before saving the macro\n-replacement text, but it careful to do it in such a way that the\n-observed effect is identical even in the function-like macro case.)\n-\n-The ISO stringizing operator :samp:`#` and token paste operator\n-:samp:`##` have no special meaning.  As explained later, an effect\n-similar to these operators can be obtained in a different way.  Macro\n-names that are embedded in quotes, either from the main file or after\n-macro replacement, do not expand.\n-\n-CPP replaces an unquoted object-like macro name with its replacement\n-text, and then rescans it for further macros to replace.  Unlike\n-standard macro expansion, traditional macro expansion has no provision\n-to prevent recursion.  If an object-like macro appears unquoted in its\n-replacement text, it will be replaced again during the rescan pass,\n-and so on *ad infinitum*.  GCC detects when it is expanding\n-recursive macros, emits an error message, and continues after the\n-offending macro invocation.\n-\n-.. code-block::\n-\n-  #define PLUS +\n-  #define INC(x) PLUS+x\n-  INC(foo);\n-       \u2192 ++foo;\n-\n-Function-like macros are similar in form but quite different in\n-behavior to their ISO counterparts.  Their arguments are contained\n-within parentheses, are comma-separated, and can cross physical lines.\n-Commas within nested parentheses are not treated as argument\n-separators.  Similarly, a quote in an argument cannot be left\n-unclosed; a following comma or parenthesis that comes before the\n-closing quote is treated like any other character.  There is no\n-facility for handling variadic macros.\n-\n-This implementation removes all comments from macro arguments, unless\n-the :option:`-C` option is given.  The form of all other horizontal\n-whitespace in arguments is preserved, including leading and trailing\n-whitespace.  In particular\n-\n-.. code-block:: c++\n-\n-  f( )\n-\n-is treated as an invocation of the macro :samp:`f` with a single\n-argument consisting of a single space.  If you want to invoke a\n-function-like macro that takes no arguments, you must not leave any\n-whitespace between the parentheses.\n-\n-If a macro argument crosses a new line, the new line is replaced with\n-a space when forming the argument.  If the previous line contained an\n-unterminated quote, the following line inherits the quoted state.\n-\n-Traditional preprocessors replace parameters in the replacement text\n-with their arguments regardless of whether the parameters are within\n-quotes or not.  This provides a way to stringize arguments.  For\n-example\n-\n-.. code-block::\n-\n-  #define str(x) \"x\"\n-  str(/* A comment */some text )\n-       \u2192 \"some text \"\n-\n-Note that the comment is removed, but that the trailing space is\n-preserved.  Here is an example of using a comment to effect token\n-pasting.\n-\n-.. code-block::\n-\n-  #define suffix(x) foo_/**/x\n-  suffix(bar)\n-       \u2192 foo_bar\n\\ No newline at end of file"}, {"sha": "e5c775e8790566b1f77001f8257123580d006e70", "filename": "gcc/doc/cpp/traditional-miscellany.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-miscellany.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,30 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _traditional-miscellany:\n-\n-Traditional miscellany\n-**********************\n-\n-Here are some things to be aware of when using the traditional\n-preprocessor.\n-\n-* Preprocessing directives are recognized only when their leading\n-  :samp:`#` appears in the first column.  There can be no whitespace\n-  between the beginning of the line and the :samp:`#`, but whitespace can\n-  follow the :samp:`#`.\n-\n-* A true traditional C preprocessor does not recognize :samp:`#error` or\n-  :samp:`#pragma`, and may not recognize :samp:`#elif`.  CPP supports all\n-  the directives in traditional mode that it supports in ISO mode,\n-  including extensions, with the exception that the effects of\n-  :samp:`#pragma GCC poison` are undefined.\n-\n-* __STDC__ is not defined.\n-\n-* If you use digraphs the behavior is undefined.\n-\n-* If a line that looks like a directive appears within macro arguments,\n-  the behavior is undefined.\n\\ No newline at end of file"}, {"sha": "f44a5a5d4db7bb918ead8559e8a2d626c5c6a317", "filename": "gcc/doc/cpp/traditional-mode.rst", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-mode.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,35 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _traditional-mode:\n-\n-Traditional Mode\n-----------------\n-\n-Traditional (pre-standard) C preprocessing is rather different from\n-the preprocessing specified by the standard.  When the preprocessor\n-is invoked with the\n-:option:`-traditional-cpp` option, it attempts to emulate a traditional\n-preprocessor.\n-\n-This mode is not useful for compiling C code with GCC,\n-but is intended for use with non-C preprocessing applications.  Thus\n-traditional mode semantics are supported only when invoking\n-the preprocessor explicitly, and not in the compiler front ends.\n-\n-The implementation does not correspond precisely to the behavior of\n-early pre-standard versions of GCC, nor to any true traditional preprocessor.\n-After all, inconsistencies among traditional implementations were a\n-major motivation for C standardization.  However, we intend that it\n-should be compatible with true traditional preprocessors in all ways\n-that actually matter.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  traditional-lexical-analysis\n-  traditional-macros\n-  traditional-miscellany\n-  traditional-warnings\n\\ No newline at end of file"}, {"sha": "c9729ec6e1ef7917144c3dd36ce1cda99072ea7b", "filename": "gcc/doc/cpp/traditional-warnings.rst", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp%2Ftraditional-warnings.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,49 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _traditional-warnings:\n-\n-Traditional warnings\n-********************\n-\n-You can request warnings about features that did not exist, or worked\n-differently, in traditional C with the :option:`-Wtraditional` option.\n-GCC does not warn about features of ISO C which you must use when you\n-are using a conforming compiler, such as the :samp:`#` and :samp:`##`\n-operators.\n-\n-Presently :option:`-Wtraditional` warns about:\n-\n-* Macro parameters that appear within string literals in the macro body.\n-  In traditional C macro replacement takes place within string literals,\n-  but does not in ISO C.\n-\n-* In traditional C, some preprocessor directives did not exist.\n-  Traditional preprocessors would only consider a line to be a directive\n-  if the :samp:`#` appeared in column 1 on the line.  Therefore\n-  :option:`-Wtraditional` warns about directives that traditional C\n-  understands but would ignore because the :samp:`#` does not appear as the\n-  first character on the line.  It also suggests you hide directives like\n-  :samp:`#pragma` not understood by traditional C by indenting them.  Some\n-  traditional implementations would not recognize :samp:`#elif`, so it\n-  suggests avoiding it altogether.\n-\n-* A function-like macro that appears without an argument list.  In some\n-  traditional preprocessors this was an error.  In ISO C it merely means\n-  that the macro is not expanded.\n-\n-* The unary plus operator.  This did not exist in traditional C.\n-\n-* The :samp:`U` and :samp:`LL` integer constant suffixes, which were not\n-  available in traditional C.  (Traditional C does support the :samp:`L`\n-  suffix for simple long integer constants.)  You are not warned about\n-  uses of these suffixes in macros defined in system headers.  For\n-  instance, ``UINT_MAX`` may well be defined as ``4294967295U``, but\n-  you will not be warned if you use ``UINT_MAX``.\n-\n-  You can usually avoid the warning, and the related warning about\n-  constants which are so large that they are unsigned, by writing the\n-  integer constant in question in hexadecimal, with no U suffix.  Take\n-  care, though, because this gives the wrong result in exotic cases.\n\\ No newline at end of file"}, {"sha": "d9ec1a69125c4fd6c479894a623486d645e0afe0", "filename": "gcc/doc/cppinternals/conf.py", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fconf.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-# Configuration file for the Sphinx documentation builder.\n-\n-import sys\n-sys.path.append('../../..//doc')\n-\n-from baseconf import *\n-\n-name = 'cppinternals'\n-project = 'Cpplib Internals'\n-copyright = '2000-2022 Free Software Foundation, Inc.'\n-authors = 'Neil Booth'\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-latex_documents = [\n-  ('index', f'{name}.tex', project, authors, 'manual'),\n-]\n-\n-texinfo_documents = [\n-  ('index', name, project, authors, None, None, None, True)\n-]\n-\n-set_common(name, globals())\n\\ No newline at end of file"}, {"sha": "36070986bf6c332adaf2cc291f9d9bb9efa840e2", "filename": "gcc/doc/cppinternals/copyright.rst", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcopyright.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,19 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the GPL license file\n-\n-Copyright\n-^^^^^^^^^\n-\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that\n-the entire resulting derived work is distributed under the terms of a\n-permission notice identical to this one.\n-\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions.\n\\ No newline at end of file"}, {"sha": "66d54ae8bf12551e17415d822eea717b62b82b0e", "filename": "gcc/doc/cppinternals/cppinternals.rst", "status": "removed", "additions": 0, "deletions": 284, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcppinternals.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,284 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. @smallbook\n-   @cropmarks\n-   @finalout\n-\n-.. index:: interface, header files\n-\n-.. _conventions:\n-\n-Conventions\n-===========\n-\n-cpplib has two interfaces---one is exposed internally only, and the\n-other is for both internal and external use.\n-\n-The convention is that functions and types that are exposed to multiple\n-files internally are prefixed with :samp:`_cpp_`, and are to be found in\n-the file :samp:`internal.h`.  Functions and types exposed to external\n-clients are in :samp:`cpplib.h`, and prefixed with :samp:`cpp_`.  For\n-historical reasons this is no longer quite true, but we should strive to\n-stick to it.\n-\n-We are striving to reduce the information exposed in :samp:`cpplib.h` to the\n-bare minimum necessary, and then to keep it there.  This makes clear\n-exactly what external clients are entitled to assume, and allows us to\n-change internals in the future without worrying whether library clients\n-are perhaps relying on some kind of undocumented implementation-specific\n-behavior.\n-\n-.. index:: lexer, newlines, escaped newlines\n-\n-.. _lexer:\n-\n-The Lexer\n-=========\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  overview\n-  lexing-a-token\n-  lexing-a-line\n-\n-.. index:: hash table, identifiers, macros, assertions, named operators\n-\n-.. _hash-nodes:\n-\n-Hash Nodes\n-==========\n-\n-When cpplib encounters an 'identifier', it generates a hash code for\n-it and stores it in the hash table.  By 'identifier' we mean tokens\n-with type ``CPP_NAME`` ; this includes identifiers in the usual C\n-sense, as well as keywords, directive names, macro names and so on.  For\n-example, all of ``pragma``, ``int``, ``foo`` and\n-``__GNUC__`` are identifiers and hashed when lexed.\n-\n-Each node in the hash table contain various information about the\n-identifier it represents.  For example, its length and type.  At any one\n-time, each identifier falls into exactly one of three categories:\n-\n-* Macros\n-\n-  These have been declared to be macros, either on the command line or\n-  with ``#define``.  A few, such as ``__TIME__`` are built-ins\n-  entered in the hash table during initialization.  The hash node for a\n-  normal macro points to a structure with more information about the\n-  macro, such as whether it is function-like, how many arguments it takes,\n-  and its expansion.  Built-in macros are flagged as special, and instead\n-  contain an enum indicating which of the various built-in macros it is.\n-\n-* Assertions\n-\n-  Assertions are in a separate namespace to macros.  To enforce this, cpp\n-  actually prepends a ``#`` character before hashing and entering it in\n-  the hash table.  An assertion's node points to a chain of answers to\n-  that assertion.\n-\n-* Void\n-\n-  Everything else falls into this category---an identifier that is not\n-  currently a macro, or a macro that has since been undefined with\n-  ``#undef``.\n-\n-  When preprocessing C++, this category also includes the named operators,\n-  such as ``xor``.  In expressions these behave like the operators they\n-  represent, but in contexts where the spelling of a token matters they\n-  are spelt differently.  This spelling distinction is relevant when they\n-  are operands of the stringizing and pasting macro operators ``#`` and\n-  ``##``.  Named operator hash nodes are flagged, both to catch the\n-  spelling distinction and to prevent them from being defined as macros.\n-\n-The same identifiers share the same hash node.  Since each identifier\n-token, after lexing, contains a pointer to its hash node, this is used\n-to provide rapid lookup of various information.  For example, when\n-parsing a ``#define`` statement, CPP flags each argument's identifier\n-hash node with the index of that argument.  This makes duplicated\n-argument checking an O(1) operation for each argument.  Similarly, for\n-each identifier in the macro's expansion, lookup to see if it is an\n-argument, and which argument it is, is also an O(1) operation.  Further,\n-each directive name, such as ``endif``, has an associated directive\n-enum stored in its hash node, so that directive lookup is also O(1).\n-\n-.. index:: macro expansion\n-\n-.. _macro-expansion:\n-\n-Macro Expansion Algorithm\n-=========================\n-\n-Macro expansion is a tricky operation, fraught with nasty corner cases\n-and situations that render what you thought was a nifty way to\n-optimize the preprocessor's expansion algorithm wrong in quite subtle\n-ways.\n-\n-I strongly recommend you have a good grasp of how the C and C++\n-standards require macros to be expanded before diving into this\n-section, let alone the code!.  If you don't have a clear mental\n-picture of how things like nested macro expansion, stringizing and\n-token pasting are supposed to work, damage to your sanity can quickly\n-result.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  internal-representation-of-macros\n-  macro-expansion-overview\n-  scanning-the-replacement-list-for-macros-to-expand\n-  looking-for-a-function-like-macros-opening-parenthesis\n-  marking-tokens-ineligible-for-future-expansion\n-\n-.. index:: paste avoidance, spacing, token spacing\n-\n-.. _token-spacing:\n-\n-Token Spacing\n-=============\n-\n-First, consider an issue that only concerns the stand-alone\n-preprocessor: there needs to be a guarantee that re-reading its preprocessed\n-output results in an identical token stream.  Without taking special\n-measures, this might not be the case because of macro substitution.\n-For example:\n-\n-.. code-block::\n-\n-  #define PLUS +\n-  #define EMPTY\n-  #define f(x) =x=\n-  +PLUS -EMPTY- PLUS+ f(=)\n-          \u2192 + + - - + + = = =\n-  not\n-          \u2192 ++ -- ++ ===\n-\n-One solution would be to simply insert a space between all adjacent\n-tokens.  However, we would like to keep space insertion to a minimum,\n-both for aesthetic reasons and because it causes problems for people who\n-still try to abuse the preprocessor for things like Fortran source and\n-Makefiles.\n-\n-For now, just notice that when tokens are added (or removed, as shown by\n-the ``EMPTY`` example) from the original lexed token stream, we need\n-to check for accidental token pasting.  We call this :dfn:`paste\n-avoidance`.  Token addition and removal can only occur because of macro\n-expansion, but accidental pasting can occur in many places: both before\n-and after each macro replacement, each argument replacement, and\n-additionally each token created by the :samp:`#` and :samp:`##` operators.\n-\n-Look at how the preprocessor gets whitespace output correct\n-normally.  The ``cpp_token`` structure contains a flags byte, and one\n-of those flags is ``PREV_WHITE``.  This is flagged by the lexer, and\n-indicates that the token was preceded by whitespace of some form other\n-than a new line.  The stand-alone preprocessor can use this flag to\n-decide whether to insert a space between tokens in the output.\n-\n-Now consider the result of the following macro expansion:\n-\n-.. code-block::\n-\n-  #define add(x, y, z) x + y +z;\n-  sum = add (1,2, 3);\n-          \u2192 sum = 1 + 2 +3;\n-\n-The interesting thing here is that the tokens :samp:`1` and :samp:`2` are\n-output with a preceding space, and :samp:`3` is output without a\n-preceding space, but when lexed none of these tokens had that property.\n-Careful consideration reveals that :samp:`1` gets its preceding\n-whitespace from the space preceding :samp:`add` in the macro invocation,\n-*not* replacement list.  :samp:`2` gets its whitespace from the\n-space preceding the parameter :samp:`y` in the macro replacement list,\n-and :samp:`3` has no preceding space because parameter :samp:`z` has none\n-in the replacement list.\n-\n-Once lexed, tokens are effectively fixed and cannot be altered, since\n-pointers to them might be held in many places, in particular by\n-in-progress macro expansions.  So instead of modifying the two tokens\n-above, the preprocessor inserts a special token, which I call a\n-:dfn:`padding token`, into the token stream to indicate that spacing of\n-the subsequent token is special.  The preprocessor inserts padding\n-tokens in front of every macro expansion and expanded macro argument.\n-These point to a :dfn:`source token` from which the subsequent real token\n-should inherit its spacing.  In the above example, the source tokens are\n-:samp:`add` in the macro invocation, and :samp:`y` and :samp:`z` in the\n-macro replacement list, respectively.\n-\n-It is quite easy to get multiple padding tokens in a row, for example if\n-a macro's first replacement token expands straight into another macro.\n-\n-.. code-block::\n-\n-  #define foo bar\n-  #define bar baz\n-  [foo]\n-          \u2192 [baz]\n-\n-Here, two padding tokens are generated with sources the :samp:`foo` token\n-between the brackets, and the :samp:`bar` token from foo's replacement\n-list, respectively.  Clearly the first padding token is the one to\n-use, so the output code should contain a rule that the first\n-padding token in a sequence is the one that matters.\n-\n-But what if a macro expansion is left?  Adjusting the above\n-example slightly:\n-\n-.. code-block::\n-\n-  #define foo bar\n-  #define bar EMPTY baz\n-  #define EMPTY\n-  [foo] EMPTY;\n-          \u2192 [ baz] ;\n-\n-As shown, now there should be a space before :samp:`baz` and the\n-semicolon in the output.\n-\n-The rules we decided above fail for :samp:`baz`: we generate three\n-padding tokens, one per macro invocation, before the token :samp:`baz`.\n-We would then have it take its spacing from the first of these, which\n-carries source token :samp:`foo` with no leading space.\n-\n-It is vital that cpplib get spacing correct in these examples since any\n-of these macro expansions could be stringized, where spacing matters.\n-\n-So, this demonstrates that not just entering macro and argument\n-expansions, but leaving them requires special handling too.  I made\n-cpplib insert a padding token with a ``NULL`` source token when\n-leaving macro expansions, as well as after each replaced argument in a\n-macro's replacement list.  It also inserts appropriate padding tokens on\n-either side of tokens created by the :samp:`#` and :samp:`##` operators.\n-I expanded the rule so that, if we see a padding token with a\n-``NULL`` source token, *and* that source token has no leading\n-space, then we behave as if we have seen no padding tokens at all.  A\n-quick check shows this rule will then get the above example correct as\n-well.\n-\n-Now a relationship with paste avoidance is apparent: we have to be\n-careful about paste avoidance in exactly the same locations we have\n-padding tokens in order to get white space correct.  This makes\n-implementation of paste avoidance easy: wherever the stand-alone\n-preprocessor is fixing up spacing because of padding tokens, and it\n-turns out that no space is needed, it has to take the extra step to\n-check that a space is not needed after all to avoid an accidental paste.\n-The function ``cpp_avoid_paste`` advises whether a space is required\n-between two consecutive tokens.  To avoid excessive spacing, it tries\n-hard to only require a space if one is likely to be necessary, but for\n-reasons of efficiency it is slightly conservative and might recommend a\n-space where one is not strictly needed.\n-\n-.. index:: line numbers\n-\n-.. _line-numbering:\n-\n-Line numbering\n-==============\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  just-which-line-number-anyway\n-  representation-of-line-numbers\n\\ No newline at end of file"}, {"sha": "cd045e67e9e6e270e7b07b1fedcbbef26a4ce85f", "filename": "gcc/doc/cppinternals/cpplib.rst", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fcpplib.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,29 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Cpplib---the GNU C Preprocessor\n--------------------------------\n-\n-The GNU C preprocessor is\n-implemented as a library, :dfn:`cpplib`, so it can be easily shared between\n-a stand-alone preprocessor, and a preprocessor integrated with the C,\n-C++ and Objective-C front ends.  It is also available for use by other\n-programs, though this is not recommended as its exposed interface has\n-not yet reached a point of reasonable stability.\n-\n-The library has been written to be re-entrant, so that it can be used\n-to preprocess many files simultaneously if necessary.  It has also been\n-written with the preprocessing token as the fundamental unit; the\n-preprocessor in previous versions of GCC would operate on text strings\n-as the fundamental unit.\n-\n-This brief manual documents the internals of cpplib, and explains some\n-of the tricky issues.  It is intended that, along with the comments in\n-the source code, a reasonably competent C programmer should be able to\n-figure out what the code is doing, and why things have been implemented\n-the way they have.\n-\n-.. toctree::\n-  :maxdepth: 2\n\\ No newline at end of file"}, {"sha": "085c79ba932a4f345027bf8e5fcff46d691a2efd", "filename": "gcc/doc/cppinternals/files.rst", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Ffiles.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,70 +0,0 @@\n-.. _files:\n-\n-File Handling\n-=============\n-\n-.. index:: files\n-\n-Fairly obviously, the file handling code of cpplib resides in the file\n-:samp:`files.c`.  It takes care of the details of file searching,\n-opening, reading and caching, for both the main source file and all the\n-headers it recursively includes.\n-\n-The basic strategy is to minimize the number of system calls.  On many\n-systems, the basic ``open ()`` and ``fstat ()`` system calls can\n-be quite expensive.  For every ``#include`` -d file, we need to try\n-all the directories in the search path until we find a match.  Some\n-projects, such as glibc, pass twenty or thirty include paths on the\n-command line, so this can rapidly become time consuming.\n-\n-For a header file we have not encountered before we have little choice\n-but to do this.  However, it is often the case that the same headers are\n-repeatedly included, and in these cases we try to avoid repeating the\n-filesystem queries whilst searching for the correct file.\n-\n-For each file we try to open, we store the constructed path in a splay\n-tree.  This path first undergoes simplification by the function\n-``_cpp_simplify_pathname``.  For example,\n-:samp:`/usr/include/bits/../foo.h` is simplified to\n-:samp:`/usr/include/foo.h` before we enter it in the splay tree and try\n-to ``open ()`` the file.  CPP will then find subsequent uses of\n-:samp:`foo.h`, even as :samp:`/usr/include/foo.h`, in the splay tree and\n-save system calls.\n-\n-Further, it is likely the file contents have also been cached, saving a\n-``read ()`` system call.  We don't bother caching the contents of\n-header files that are re-inclusion protected, and whose re-inclusion\n-macro is defined when we leave the header file for the first time.  If\n-the host supports it, we try to map suitably large files into memory,\n-rather than reading them in directly.\n-\n-The include paths are internally stored on a null-terminated\n-singly-linked list, starting with the ``\"header.h\"`` directory search\n-chain, which then links into the ``<header.h>`` directory chain.\n-\n-Files included with the ``<foo.h>`` syntax start the lookup directly\n-in the second half of this chain.  However, files included with the\n-``\"foo.h\"`` syntax start at the beginning of the chain, but with one\n-extra directory prepended.  This is the directory of the current file;\n-the one containing the ``#include`` directive.  Prepending this\n-directory on a per-file basis is handled by the function\n-``search_from``.\n-\n-Note that a header included with a directory component, such as\n-``#include \"mydir/foo.h\"`` and opened as\n-:samp:`/usr/local/include/mydir/foo.h`, will have the complete path minus\n-the basename :samp:`foo.h` as the current directory.\n-\n-Enough information is stored in the splay tree that CPP can immediately\n-tell whether it can skip the header file because of the multiple include\n-optimization, whether the file didn't exist or couldn't be opened for\n-some reason, or whether the header was flagged not to be re-used, as it\n-is with the obsolete ``#import`` directive.\n-\n-For the benefit of MS-DOS filesystems with an 8.3 filename limitation,\n-CPP offers the ability to treat various include file names as aliases\n-for the real header files with shorter names.  The map from one to the\n-other is found in a special file called :samp:`header.gcc`, stored in the\n-command line (or system) include directories to which the mapping\n-applies.  This may be higher up the directory tree than the full path to\n-the file minus the base name.\n\\ No newline at end of file"}, {"sha": "0d20aa7930cc98fc452ade90f583ff28f6a5da1f", "filename": "gcc/doc/cppinternals/index.rst", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Findex.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,21 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-The GNU C Preprocessor Internals\n-================================\n-\n-.. only:: html\n-\n-  Contents:\n-\n-.. toctree::\n-\n-  copyright\n-  cpplib\n-  cppinternals\n-  multiple-include-optimization\n-  files\n-\n-  indices-and-tables\n\\ No newline at end of file"}, {"sha": "6c215a391d9ba8d2036df046206d7902829b8c1c", "filename": "gcc/doc/cppinternals/indices-and-tables.rst", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Findices-and-tables.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1 +0,0 @@\n-.. include:: ../../../doc/indices-and-tables.rst\n\\ No newline at end of file"}, {"sha": "640e76b6eb8ef0470998198fff163a2dfb5553c1", "filename": "gcc/doc/cppinternals/internal-representation-of-macros.rst", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Finternal-representation-of-macros.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,27 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: macro representation (internal)\n-\n-Internal representation of macros\n-*********************************\n-\n-The preprocessor stores macro expansions in tokenized form.  This\n-saves repeated lexing passes during expansion, at the cost of a small\n-increase in memory consumption on average.  The tokens are stored\n-contiguously in memory, so a pointer to the first one and a token\n-count is all you need to get the replacement list of a macro.\n-\n-If the macro is a function-like macro the preprocessor also stores its\n-parameters, in the form of an ordered list of pointers to the hash\n-table entry of each parameter's identifier.  Further, in the macro's\n-stored expansion each occurrence of a parameter is replaced with a\n-special token of type ``CPP_MACRO_ARG``.  Each such token holds the\n-index of the parameter it represents in the parameter list, which\n-allows rapid replacement of parameters with their arguments during\n-expansion.  Despite this optimization it is still necessary to store\n-the original parameters to the macro, both for dumping with e.g.,\n-:option:`-dD`, and to warn about non-trivial macro redefinitions when\n-the parameter names have changed.\n\\ No newline at end of file"}, {"sha": "df0ea2196294351d4976d0f805046bfe6221f081", "filename": "gcc/doc/cppinternals/just-which-line-number-anyway.rst", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fjust-which-line-number-anyway.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,62 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Just which line number anyway?\n-******************************\n-\n-There are three reasonable requirements a cpplib client might have for\n-the line number of a token passed to it:\n-\n-* The source line it was lexed on.\n-\n-* The line it is output on.  This can be different to the line it was\n-  lexed on if, for example, there are intervening escaped newlines or\n-  C-style comments.  For example:\n-\n-  .. code-block::\n-\n-    foo /* A long\n-    comment */ bar \\\n-    baz\n-    \u21d2\n-    foo bar baz\n-\n-* If the token results from a macro expansion, the line of the macro name,\n-  or possibly the line of the closing parenthesis in the case of\n-  function-like macro expansion.\n-\n-The ``cpp_token`` structure contains ``line`` and ``col``\n-members.  The lexer fills these in with the line and column of the first\n-character of the token.  Consequently, but maybe unexpectedly, a token\n-from the replacement list of a macro expansion carries the location of\n-the token within the ``#define`` directive, because cpplib expands a\n-macro by returning pointers to the tokens in its replacement list.  The\n-current implementation of cpplib assigns tokens created from built-in\n-macros and the :samp:`#` and :samp:`##` operators the location of the most\n-recently lexed token.  This is a because they are allocated from the\n-lexer's token runs, and because of the way the diagnostic routines infer\n-the appropriate location to report.\n-\n-The diagnostic routines in cpplib display the location of the most\n-recently *lexed* token, unless they are passed a specific line and\n-column to report.  For diagnostics regarding tokens that arise from\n-macro expansions, it might also be helpful for the user to see the\n-original location in the macro definition that the token came from.\n-Since that is exactly the information each token carries, such an\n-enhancement could be made relatively easily in future.\n-\n-The stand-alone preprocessor faces a similar problem when determining\n-the correct line to output the token on: the position attached to a\n-token is fairly useless if the token came from a macro expansion.  All\n-tokens on a logical line should be output on its first physical line, so\n-the token's reported location is also wrong if it is part of a physical\n-line other than the first.\n-\n-To solve these issues, cpplib provides a callback that is generated\n-whenever it lexes a preprocessing token that starts a new logical line\n-other than a directive.  It passes this token (which may be a\n-``CPP_EOF`` token indicating the end of the translation unit) to the\n-callback routine, which can then use the line and column of this token\n-to produce correct output.\n\\ No newline at end of file"}, {"sha": "35638b9279a3c7630d72610b02be7854e231486b", "filename": "gcc/doc/cppinternals/lexing-a-line.rst", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flexing-a-line.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,91 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: token run\n-\n-.. _lexing-a-line:\n-\n-Lexing a line\n-*************\n-\n-When the preprocessor was changed to return pointers to tokens, one\n-feature I wanted was some sort of guarantee regarding how long a\n-returned pointer remains valid.  This is important to the stand-alone\n-preprocessor, the future direction of the C family front ends, and even\n-to cpplib itself internally.\n-\n-Occasionally the preprocessor wants to be able to peek ahead in the\n-token stream.  For example, after the name of a function-like macro, it\n-wants to check the next token to see if it is an opening parenthesis.\n-Another example is that, after reading the first few tokens of a\n-``#pragma`` directive and not recognizing it as a registered pragma,\n-it wants to backtrack and allow the user-defined handler for unknown\n-pragmas to access the full ``#pragma`` token stream.  The stand-alone\n-preprocessor wants to be able to test the current token with the\n-previous one to see if a space needs to be inserted to preserve their\n-separate tokenization upon re-lexing (paste avoidance), so it needs to\n-be sure the pointer to the previous token is still valid.  The\n-recursive-descent C++ parser wants to be able to perform tentative\n-parsing arbitrarily far ahead in the token stream, and then to be able\n-to jump back to a prior position in that stream if necessary.\n-\n-The rule I chose, which is fairly natural, is to arrange that the\n-preprocessor lex all tokens on a line consecutively into a token buffer,\n-which I call a :dfn:`token run`, and when meeting an unescaped new line\n-(newlines within comments do not count either), to start lexing back at\n-the beginning of the run.  Note that we do *not* lex a line of\n-tokens at once; if we did that ``parse_identifier`` would not have\n-state flags available to warn about invalid identifiers (see :ref:`Invalid identifiers <invalid-identifiers>`).\n-\n-In other words, accessing tokens that appeared earlier in the current\n-line is valid, but since each logical line overwrites the tokens of the\n-previous line, tokens from prior lines are unavailable.  In particular,\n-since a directive only occupies a single logical line, this means that\n-the directive handlers like the ``#pragma`` handler can jump around\n-in the directive's tokens if necessary.\n-\n-Two issues remain: what about tokens that arise from macro expansions,\n-and what happens when we have a long line that overflows the token run?\n-\n-Since we promise clients that we preserve the validity of pointers that\n-we have already returned for tokens that appeared earlier in the line,\n-we cannot reallocate the run.  Instead, on overflow it is expanded by\n-chaining a new token run on to the end of the existing one.\n-\n-The tokens forming a macro's replacement list are collected by the\n-``#define`` handler, and placed in storage that is only freed by\n-``cpp_destroy``.  So if a macro is expanded in the line of tokens,\n-the pointers to the tokens of its expansion that are returned will always\n-remain valid.  However, macros are a little trickier than that, since\n-they give rise to three sources of fresh tokens.  They are the built-in\n-macros like ``__LINE__``, and the :samp:`#` and :samp:`##` operators\n-for stringizing and token pasting.  I handled this by allocating\n-space for these tokens from the lexer's token run chain.  This means\n-they automatically receive the same lifetime guarantees as lexed tokens,\n-and we don't need to concern ourselves with freeing them.\n-\n-Lexing into a line of tokens solves some of the token memory management\n-issues, but not all.  The opening parenthesis after a function-like\n-macro name might lie on a different line, and the front ends definitely\n-want the ability to look ahead past the end of the current line.  So\n-cpplib only moves back to the start of the token run at the end of a\n-line if the variable ``keep_tokens`` is zero.  Line-buffering is\n-quite natural for the preprocessor, and as a result the only time cpplib\n-needs to increment this variable is whilst looking for the opening\n-parenthesis to, and reading the arguments of, a function-like macro.  In\n-the near future cpplib will export an interface to increment and\n-decrement this variable, so that clients can share full control over the\n-lifetime of token pointers too.\n-\n-The routine ``_cpp_lex_token`` handles moving to new token runs,\n-calling ``_cpp_lex_direct`` to lex new tokens, or returning\n-previously-lexed tokens if we stepped back in the token stream.  It also\n-checks each token for the ``BOL`` flag, which might indicate a\n-directive that needs to be handled, or require a start-of-line call-back\n-to be made.  ``_cpp_lex_token`` also handles skipping over tokens in\n-failed conditional blocks, and invalidates the control macro of the\n-multiple-include optimization if a token was successfully lexed outside\n-a directive.  In other words, its callers do not need to concern\n-themselves with such issues.\n\\ No newline at end of file"}, {"sha": "9eff9210cf66f1ca73ab5c48988cf974b25924a4", "filename": "gcc/doc/cppinternals/lexing-a-token.rst", "status": "removed", "additions": 0, "deletions": 177, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flexing-a-token.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,177 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Lexing a token\n-**************\n-\n-Lexing of an individual token is handled by ``_cpp_lex_direct`` and\n-its subroutines.  In its current form the code is quite complicated,\n-with read ahead characters and such-like, since it strives to not step\n-back in the character stream in preparation for handling non-ASCII file\n-encodings.  The current plan is to convert any such files to UTF-8\n-before processing them.  This complexity is therefore unnecessary and\n-will be removed, so I'll not discuss it further here.\n-\n-The job of ``_cpp_lex_direct`` is simply to lex a token.  It is not\n-responsible for issues like directive handling, returning lookahead\n-tokens directly, multiple-include optimization, or conditional block\n-skipping.  It necessarily has a minor ro\u0302le to play in memory\n-management of lexed lines.  I discuss these issues in a separate section\n-(see :ref:`lexing-a-line`).\n-\n-The lexer places the token it lexes into storage pointed to by the\n-variable ``cur_token``, and then increments it.  This variable is\n-important for correct diagnostic positioning.  Unless a specific line\n-and column are passed to the diagnostic routines, they will examine the\n-``line`` and ``col`` values of the token just before the location\n-that ``cur_token`` points to, and use that location to report the\n-diagnostic.\n-\n-The lexer does not consider whitespace to be a token in its own right.\n-If whitespace (other than a new line) precedes a token, it sets the\n-``PREV_WHITE`` bit in the token's flags.  Each token has its\n-``line`` and ``col`` variables set to the line and column of the\n-first character of the token.  This line number is the line number in\n-the translation unit, and can be converted to a source (file, line) pair\n-using the line map code.\n-\n-The first token on a logical, i.e. unescaped, line has the flag\n-``BOL`` set for beginning-of-line.  This flag is intended for\n-internal use, both to distinguish a :samp:`#` that begins a directive\n-from one that doesn't, and to generate a call-back to clients that want\n-to be notified about the start of every non-directive line with tokens\n-on it.  Clients cannot reliably determine this for themselves: the first\n-token might be a macro, and the tokens of a macro expansion do not have\n-the ``BOL`` flag set.  The macro expansion may even be empty, and the\n-next token on the line certainly won't have the ``BOL`` flag set.\n-\n-New lines are treated specially; exactly how the lexer handles them is\n-context-dependent.  The C standard mandates that directives are\n-terminated by the first unescaped newline character, even if it appears\n-in the middle of a macro expansion.  Therefore, if the state variable\n-``in_directive`` is set, the lexer returns a ``CPP_EOF`` token,\n-which is normally used to indicate end-of-file, to indicate\n-end-of-directive.  In a directive a ``CPP_EOF`` token never means\n-end-of-file.  Conveniently, if the caller was ``collect_args``, it\n-already handles ``CPP_EOF`` as if it were end-of-file, and reports an\n-error about an unterminated macro argument list.\n-\n-The C standard also specifies that a new line in the middle of the\n-arguments to a macro is treated as whitespace.  This white space is\n-important in case the macro argument is stringized.  The state variable\n-``parsing_args`` is nonzero when the preprocessor is collecting the\n-arguments to a macro call.  It is set to 1 when looking for the opening\n-parenthesis to a function-like macro, and 2 when collecting the actual\n-arguments up to the closing parenthesis, since these two cases need to\n-be distinguished sometimes.  One such time is here: the lexer sets the\n-``PREV_WHITE`` flag of a token if it meets a new line when\n-``parsing_args`` is set to 2.  It doesn't set it if it meets a new\n-line when ``parsing_args`` is 1, since then code like\n-\n-.. code-block:: c++\n-\n-  #define foo() bar\n-  foo\n-  baz\n-\n-would be output with an erroneous space before :samp:`baz`:\n-\n-.. code-block:: c++\n-\n-  foo\n-   baz\n-\n-This is a good example of the subtlety of getting token spacing correct\n-in the preprocessor; there are plenty of tests in the testsuite for\n-corner cases like this.\n-\n-The lexer is written to treat each of :samp:`\\\\r`, :samp:`\\\\n`, :samp:`\\\\r\\\\n`\n-and :samp:`\\\\n\\\\r` as a single new line indicator.  This allows it to\n-transparently preprocess MS-DOS, Macintosh and Unix files without their\n-needing to pass through a special filter beforehand.\n-\n-We also decided to treat a backslash, either ``\\`` or the trigraph\n-``??/``, separated from one of the above newline indicators by\n-non-comment whitespace only, as intending to escape the newline.  It\n-tends to be a typing mistake, and cannot reasonably be mistaken for\n-anything else in any of the C-family grammars.  Since handling it this\n-way is not strictly conforming to the ISO standard, the library issues a\n-warning wherever it encounters it.\n-\n-Handling newlines like this is made simpler by doing it in one place\n-only.  The function ``handle_newline`` takes care of all newline\n-characters, and ``skip_escaped_newlines`` takes care of arbitrarily\n-long sequences of escaped newlines, deferring to ``handle_newline``\n-to handle the newlines themselves.\n-\n-The most painful aspect of lexing ISO-standard C and C++ is handling\n-trigraphs and backlash-escaped newlines.  Trigraphs are processed before\n-any interpretation of the meaning of a character is made, and unfortunately\n-there is a trigraph representation for a backslash, so it is possible for\n-the trigraph ``??/`` to introduce an escaped newline.\n-\n-Escaped newlines are tedious because theoretically they can occur\n-anywhere---between the :samp:`+` and :samp:`=` of the :samp:`+=` token,\n-within the characters of an identifier, and even between the :samp:`*`\n-and :samp:`/` that terminates a comment.  Moreover, you cannot be sure\n-there is just one---there might be an arbitrarily long sequence of them.\n-\n-So, for example, the routine that lexes a number, ``parse_number``,\n-cannot assume that it can scan forwards until the first non-number\n-character and be done with it, because this could be the :samp:`\\\\`\n-introducing an escaped newline, or the :samp:`?` introducing the trigraph\n-sequence that represents the :samp:`\\\\` of an escaped newline.  If it\n-encounters a :samp:`?` or :samp:`\\\\`, it calls ``skip_escaped_newlines``\n-to skip over any potential escaped newlines before checking whether the\n-number has been finished.\n-\n-Similarly code in the main body of ``_cpp_lex_direct`` cannot simply\n-check for a :samp:`=` after a :samp:`+` character to determine whether it\n-has a :samp:`+=` token; it needs to be prepared for an escaped newline of\n-some sort.  Such cases use the function ``get_effective_char``, which\n-returns the first character after any intervening escaped newlines.\n-\n-The lexer needs to keep track of the correct column position, including\n-counting tabs as specified by the :option:`-ftabstop=` option.  This\n-should be done even within C-style comments; they can appear in the\n-middle of a line, and we want to report diagnostics in the correct\n-position for text appearing after the end of the comment.\n-\n-.. _invalid-identifiers:\n-\n-Some identifiers, such as ``__VA_ARGS__`` and poisoned identifiers,\n-may be invalid and require a diagnostic.  However, if they appear in a\n-macro expansion we don't want to complain with each use of the macro.\n-It is therefore best to catch them during the lexing stage, in\n-``parse_identifier``.  In both cases, whether a diagnostic is needed\n-or not is dependent upon the lexer's state.  For example, we don't want\n-to issue a diagnostic for re-poisoning a poisoned identifier, or for\n-using ``__VA_ARGS__`` in the expansion of a variable-argument macro.\n-Therefore ``parse_identifier`` makes use of state flags to determine\n-whether a diagnostic is appropriate.  Since we change state on a\n-per-token basis, and don't lex whole lines at a time, this is not a\n-problem.\n-\n-Another place where state flags are used to change behavior is whilst\n-lexing header names.  Normally, a :samp:`<` would be lexed as a single\n-token.  After a ``#include`` directive, though, it should be lexed as\n-a single token as far as the nearest :samp:`>` character.  Note that we\n-don't allow the terminators of header names to be escaped; the first\n-:samp:`\"` or :samp:`>` terminates the header name.\n-\n-Interpretation of some character sequences depends upon whether we are\n-lexing C, C++ or Objective-C, and on the revision of the standard in\n-force.  For example, :samp:`::` is a single token in C++, but in C it is\n-two separate :samp:`:` tokens and almost certainly a syntax error.  Such\n-cases are handled by ``_cpp_lex_direct`` based upon command-line\n-flags stored in the ``cpp_options`` structure.\n-\n-Once a token has been lexed, it leads an independent existence.  The\n-spelling of numbers, identifiers and strings is copied to permanent\n-storage from the original input buffer, so a token remains valid and\n-correct even if its source buffer is freed with ``_cpp_pop_buffer``.\n-The storage holding the spellings of such tokens remains until the\n-client program calls cpp_destroy, probably at the end of the translation\n-unit.\n\\ No newline at end of file"}, {"sha": "272cb4b8245a63593b8bee9155b1206065f60b83", "filename": "gcc/doc/cppinternals/looking-for-a-function-like-macros-opening-parenthesis.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Flooking-for-a-function-like-macros-opening-parenthesis.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Looking for a function-like macro's opening parenthesis\n-*******************************************************\n-\n-Function-like macros only expand when immediately followed by a\n-parenthesis.  To do this cpplib needs to temporarily disable macros\n-and read the next token.  Unfortunately, because of spacing issues\n-(see :ref:`token-spacing`), there can be fake padding tokens in-between,\n-and if the next real token is not a parenthesis cpplib needs to be\n-able to back up that one token as well as retain the information in\n-any intervening padding tokens.\n-\n-Backing up more than one token when macros are involved is not\n-permitted by cpplib, because in general it might involve issues like\n-restoring popped contexts onto the context stack, which are too hard.\n-Instead, searching for the parenthesis is handled by a special\n-function, ``funlike_invocation_p``, which remembers padding\n-information as it reads tokens.  If the next real token is not an\n-opening parenthesis, it backs up that one token, and then pushes an\n-extra context just containing the padding information if necessary.\n\\ No newline at end of file"}, {"sha": "ba55a6c8676f357acc5274dd4bb963a3a2b2ac8e", "filename": "gcc/doc/cppinternals/macro-expansion-overview.rst", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmacro-expansion-overview.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,51 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Macro expansion overview\n-************************\n-\n-The preprocessor maintains a :dfn:`context stack`, implemented as a\n-linked list of ``cpp_context`` structures, which together represent\n-the macro expansion state at any one time.  The ``struct\n-cpp_reader`` member variable ``context`` points to the current top\n-of this stack.  The top normally holds the unexpanded replacement list\n-of the innermost macro under expansion, except when cpplib is about to\n-pre-expand an argument, in which case it holds that argument's\n-unexpanded tokens.\n-\n-When there are no macros under expansion, cpplib is in :dfn:`base\n-context`.  All contexts other than the base context contain a\n-contiguous list of tokens delimited by a starting and ending token.\n-When not in base context, cpplib obtains the next token from the list\n-of the top context.  If there are no tokens left in the list, it pops\n-that context off the stack, and subsequent ones if necessary, until an\n-unexhausted context is found or it returns to base context.  In base\n-context, cpplib reads tokens directly from the lexer.\n-\n-If it encounters an identifier that is both a macro and enabled for\n-expansion, cpplib prepares to push a new context for that macro on the\n-stack by calling the routine ``enter_macro_context``.  When this\n-routine returns, the new context will contain the unexpanded tokens of\n-the replacement list of that macro.  In the case of function-like\n-macros, ``enter_macro_context`` also replaces any parameters in the\n-replacement list, stored as ``CPP_MACRO_ARG`` tokens, with the\n-appropriate macro argument.  If the standard requires that the\n-parameter be replaced with its expanded argument, the argument will\n-have been fully macro expanded first.\n-\n-``enter_macro_context`` also handles special macros like\n-``__LINE__``.  Although these macros expand to a single token which\n-cannot contain any further macros, for reasons of token spacing\n-(see :ref:`token-spacing`) and simplicity of implementation, cpplib\n-handles these special macros by pushing a context containing just that\n-one token.\n-\n-The final thing that ``enter_macro_context`` does before returning\n-is to mark the macro disabled for expansion (except for special macros\n-like ``__TIME__``).  The macro is re-enabled when its context is\n-later popped from the context stack, as described above.  This strict\n-ordering ensures that a macro is disabled whilst its expansion is\n-being scanned, but that it is *not* disabled whilst any arguments\n-to it are being expanded.\n\\ No newline at end of file"}, {"sha": "b34aa83594a1886791a5c0f29c1dfd9146f2f922", "filename": "gcc/doc/cppinternals/marking-tokens-ineligible-for-future-expansion.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmarking-tokens-ineligible-for-future-expansion.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Marking tokens ineligible for future expansion\n-**********************************************\n-\n-As discussed above, cpplib needs a way of marking tokens as\n-unexpandable.  Since the tokens cpplib handles are read-only once they\n-have been lexed, it instead makes a copy of the token and adds the\n-flag ``NO_EXPAND`` to the copy.\n-\n-For efficiency and to simplify memory management by avoiding having to\n-remember to free these tokens, they are allocated as temporary tokens\n-from the lexer's current token run (see :ref:`lexing-a-line`) using the\n-function ``_cpp_temp_token``.  The tokens are then re-used once the\n-current line of tokens has been read in.\n-\n-This might sound unsafe.  However, tokens runs are not re-used at the\n-end of a line if it happens to be in the middle of a macro argument\n-list, and cpplib only wants to back-up more than one lexer token in\n-situations where no macro expansion is involved, so the optimization\n-is safe.\n\\ No newline at end of file"}, {"sha": "e710eaa8dacb5d8b32e2776e1fab6ffa8596f101", "filename": "gcc/doc/cppinternals/multiple-include-optimization.rst", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fmultiple-include-optimization.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,117 +0,0 @@\n-The Multiple-Include Optimization\n-=================================\n-\n-.. index:: guard macros, controlling macros, multiple-include optimization\n-\n-Header files are often of the form\n-\n-.. code-block:: c++\n-\n-  #ifndef FOO\n-  #define FOO\n-  ...\n-  #endif\n-\n-to prevent the compiler from processing them more than once.  The\n-preprocessor notices such header files, so that if the header file\n-appears in a subsequent ``#include`` directive and ``FOO`` is\n-defined, then it is ignored and it doesn't preprocess or even re-open\n-the file a second time.  This is referred to as the :dfn:`multiple\n-include optimization`.\n-\n-Under what circumstances is such an optimization valid?  If the file\n-were included a second time, it can only be optimized away if that\n-inclusion would result in no tokens to return, and no relevant\n-directives to process.  Therefore the current implementation imposes\n-requirements and makes some allowances as follows:\n-\n-* There must be no tokens outside the controlling ``#if`` - ``#endif``\n-  pair, but whitespace and comments are permitted.\n-\n-* There must be no directives outside the controlling directive pair, but\n-  the :dfn:`null directive` (a line containing nothing other than a single\n-  :samp:`#` and possibly whitespace) is permitted.\n-\n-* The opening directive must be of the form\n-\n-  .. code-block:: c++\n-\n-    #ifndef FOO\n-\n-  or\n-\n-  .. code-block:: c++\n-\n-    #if !defined FOO     [equivalently, #if !defined(FOO)]\n-\n-* In the second form above, the tokens forming the ``#if`` expression\n-  must have come directly from the source file---no macro expansion must\n-  have been involved.  This is because macro definitions can change, and\n-  tracking whether or not a relevant change has been made is not worth the\n-  implementation cost.\n-\n-* There can be no ``#else`` or ``#elif`` directives at the outer\n-  conditional block level, because they would probably contain something\n-  of interest to a subsequent pass.\n-\n-First, when pushing a new file on the buffer stack,\n-``_stack_include_file`` sets the controlling macro ``mi_cmacro`` to\n-``NULL``, and sets ``mi_valid`` to ``true``.  This indicates\n-that the preprocessor has not yet encountered anything that would\n-invalidate the multiple-include optimization.  As described in the next\n-few paragraphs, these two variables having these values effectively\n-indicates top-of-file.\n-\n-When about to return a token that is not part of a directive,\n-``_cpp_lex_token`` sets ``mi_valid`` to ``false``.  This\n-enforces the constraint that tokens outside the controlling conditional\n-block invalidate the optimization.\n-\n-The ``do_if``, when appropriate, and ``do_ifndef`` directive\n-handlers pass the controlling macro to the function\n-``push_conditional``.  cpplib maintains a stack of nested conditional\n-blocks, and after processing every opening conditional this function\n-pushes an ``if_stack`` structure onto the stack.  In this structure\n-it records the controlling macro for the block, provided there is one\n-and we're at top-of-file (as described above).  If an ``#elif`` or\n-``#else`` directive is encountered, the controlling macro for that\n-block is cleared to ``NULL``.  Otherwise, it survives until the\n-``#endif`` closing the block, upon which ``do_endif`` sets\n-``mi_valid`` to true and stores the controlling macro in\n-``mi_cmacro``.\n-\n-``_cpp_handle_directive`` clears ``mi_valid`` when processing any\n-directive other than an opening conditional and the null directive.\n-With this, and requiring top-of-file to record a controlling macro, and\n-no ``#else`` or ``#elif`` for it to survive and be copied to\n-``mi_cmacro`` by ``do_endif``, we have enforced the absence of\n-directives outside the main conditional block for the optimization to be\n-on.\n-\n-Note that whilst we are inside the conditional block, ``mi_valid`` is\n-likely to be reset to ``false``, but this does not matter since\n-the closing ``#endif`` restores it to ``true`` if appropriate.\n-\n-Finally, since ``_cpp_lex_direct`` pops the file off the buffer stack\n-at ``EOF`` without returning a token, if the ``#endif`` directive\n-was not followed by any tokens, ``mi_valid`` is ``true`` and\n-``_cpp_pop_file_buffer`` remembers the controlling macro associated\n-with the file.  Subsequent calls to ``stack_include_file`` result in\n-no buffer being pushed if the controlling macro is defined, effecting\n-the optimization.\n-\n-A quick word on how we handle the\n-\n-.. code-block:: c++\n-\n-  #if !defined FOO\n-\n-case.  ``_cpp_parse_expr`` and ``parse_defined`` take steps to see\n-whether the three stages :samp:`!`, :samp:`defined-expression` and\n-:samp:`end-of-directive` occur in order in a ``#if`` expression.  If\n-so, they return the guard macro to ``do_if`` in the variable\n-``mi_ind_cmacro``, and otherwise set it to ``NULL``.\n-``enter_macro_context`` sets ``mi_valid`` to false, so if a macro\n-was expanded whilst parsing any part of the expression, then the\n-top-of-file test in ``push_conditional`` fails and the optimization\n-is turned off.\n\\ No newline at end of file"}, {"sha": "4459c7fd7d0640e01fb39d0f9267be0bfe4af6a0", "filename": "gcc/doc/cppinternals/overview.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Foverview.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Foverview.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Foverview.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Overview\n-********\n-\n-The lexer is contained in the file :samp:`lex.cc`.  It is a hand-coded\n-lexer, and not implemented as a state machine.  It can understand C, C++\n-and Objective-C source code, and has been extended to allow reasonably\n-successful preprocessing of assembly language.  The lexer does not make\n-an initial pass to strip out trigraphs and escaped newlines, but handles\n-them as they are encountered in a single pass of the input file.  It\n-returns preprocessing tokens individually, not a line at a time.\n-\n-It is mostly transparent to users of the library, since the library's\n-interface for obtaining the next token, ``cpp_get_token``, takes care\n-of lexing new tokens, handling directives, and expanding macros as\n-necessary.  However, the lexer does expose some functionality so that\n-clients of the library can easily spell a given token, such as\n-``cpp_spell_token`` and ``cpp_token_len``.  These functions are\n-useful when generating diagnostics, and for emitting the preprocessed\n-output.\n\\ No newline at end of file"}, {"sha": "4aa99349ce9b55aee170d242e06eb17b0662f997", "filename": "gcc/doc/cppinternals/representation-of-line-numbers.rst", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Frepresentation-of-line-numbers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,32 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Representation of line numbers\n-******************************\n-\n-As mentioned above, cpplib stores with each token the line number that\n-it was lexed on.  In fact, this number is not the number of the line in\n-the source file, but instead bears more resemblance to the number of the\n-line in the translation unit.\n-\n-The preprocessor maintains a monotonic increasing line count, which is\n-incremented at every new line character (and also at the end of any\n-buffer that does not end in a new line).  Since a line number of zero is\n-useful to indicate certain special states and conditions, this variable\n-starts counting from one.\n-\n-This variable therefore uniquely enumerates each line in the translation\n-unit.  With some simple infrastructure, it is straight forward to map\n-from this to the original source file and line number pair, saving space\n-whenever line number information needs to be saved.  The code the\n-implements this mapping lies in the files :samp:`line-map.cc` and\n-:samp:`line-map.h`.\n-\n-Command-line macros and assertions are implemented by pushing a buffer\n-containing the right hand side of an equivalent ``#define`` or\n-``#assert`` directive.  Some built-in macros are handled similarly.\n-Since these are all processed before the first line of the main input\n-file, it will typically have an assigned line closer to twenty than to\n-one.\n\\ No newline at end of file"}, {"sha": "c0b12615def66b46174e206456f02ca35b5990e0", "filename": "gcc/doc/cppinternals/scanning-the-replacement-list-for-macros-to-expand.rst", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals%2Fscanning-the-replacement-list-for-macros-to-expand.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,57 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-Scanning the replacement list for macros to expand\n-**************************************************\n-\n-The C standard states that, after any parameters have been replaced\n-with their possibly-expanded arguments, the replacement list is\n-scanned for nested macros.  Further, any identifiers in the\n-replacement list that are not expanded during this scan are never\n-again eligible for expansion in the future, if the reason they were\n-not expanded is that the macro in question was disabled.\n-\n-Clearly this latter condition can only apply to tokens resulting from\n-argument pre-expansion.  Other tokens never have an opportunity to be\n-re-tested for expansion.  It is possible for identifiers that are\n-function-like macros to not expand initially but to expand during a\n-later scan.  This occurs when the identifier is the last token of an\n-argument (and therefore originally followed by a comma or a closing\n-parenthesis in its macro's argument list), and when it replaces its\n-parameter in the macro's replacement list, the subsequent token\n-happens to be an opening parenthesis (itself possibly the first token\n-of an argument).\n-\n-It is important to note that when cpplib reads the last token of a\n-given context, that context still remains on the stack.  Only when\n-looking for the *next* token do we pop it off the stack and drop\n-to a lower context.  This makes backing up by one token easy, but more\n-importantly ensures that the macro corresponding to the current\n-context is still disabled when we are considering the last token of\n-its replacement list for expansion (or indeed expanding it).  As an\n-example, which illustrates many of the points above, consider\n-\n-.. code-block:: c++\n-\n-  #define foo(x) bar x\n-  foo(foo) (2)\n-\n-which fully expands to :samp:`bar foo (2)`.  During pre-expansion\n-of the argument, :samp:`foo` does not expand even though the macro is\n-enabled, since it has no following parenthesis [pre-expansion of an\n-argument only uses tokens from that argument; it cannot take tokens\n-from whatever follows the macro invocation].  This still leaves the\n-argument token :samp:`foo` eligible for future expansion.  Then, when\n-re-scanning after argument replacement, the token :samp:`foo` is\n-rejected for expansion, and marked ineligible for future expansion,\n-since the macro is now disabled.  It is disabled because the\n-replacement list :samp:`bar foo` of the macro is still on the context\n-stack.\n-\n-If instead the algorithm looked for an opening parenthesis first and\n-then tested whether the macro were disabled it would be subtly wrong.\n-In the example above, the replacement list of :samp:`foo` would be\n-popped in the process of finding the parenthesis, re-enabling\n-:samp:`foo` and expanding it a second time.\n\\ No newline at end of file"}, {"sha": "a55423c56f51e1d260d2a0f0838e06047fd43646", "filename": "gcc/doc/gcc/binary-compatibility.rst", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fbinary-compatibility.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,151 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: binary compatibility, ABI, application binary interface\n-\n-.. _compatibility:\n-\n-Binary Compatibility\n---------------------\n-\n-Binary compatibility encompasses several related concepts:\n-\n-:dfn:`application binary interface (ABI)`\n-  The set of runtime conventions followed by all of the tools that deal\n-  with binary representations of a program, including compilers, assemblers,\n-  linkers, and language runtime support.\n-  Some ABIs are formal with a written specification, possibly designed\n-  by multiple interested parties.  Others are simply the way things are\n-  actually done by a particular set of tools.\n-\n-:dfn:`ABI conformance`\n-  A compiler conforms to an ABI if it generates code that follows all of\n-  the specifications enumerated by that ABI.\n-  A library conforms to an ABI if it is implemented according to that ABI.\n-  An application conforms to an ABI if it is built using tools that conform\n-  to that ABI and does not contain source code that specifically changes\n-  behavior specified by the ABI.\n-\n-:dfn:`calling conventions`\n-  Calling conventions are a subset of an ABI that specify of how arguments\n-  are passed and function results are returned.\n-\n-:dfn:`interoperability`\n-  Different sets of tools are interoperable if they generate files that\n-  can be used in the same program.  The set of tools includes compilers,\n-  assemblers, linkers, libraries, header files, startup files, and debuggers.\n-  Binaries produced by different sets of tools are not interoperable unless\n-  they implement the same ABI.  This applies to different versions of the\n-  same tools as well as tools from different vendors.\n-\n-:dfn:`intercallability`\n-  Whether a function in a binary built by one set of tools can call a\n-  function in a binary built by a different set of tools is a subset\n-  of interoperability.\n-\n-:dfn:`implementation-defined features`\n-  Language standards include lists of implementation-defined features whose\n-  behavior can vary from one implementation to another.  Some of these\n-  features are normally covered by a platform's ABI and others are not.\n-  The features that are not covered by an ABI generally affect how a\n-  program behaves, but not intercallability.\n-\n-:dfn:`compatibility`\n-  Conformance to the same ABI and the same behavior of implementation-defined\n-  features are both relevant for compatibility.\n-\n-The application binary interface implemented by a C or C++ compiler\n-affects code generation and runtime support for:\n-\n-* size and alignment of data types\n-\n-* layout of structured types\n-\n-* calling conventions\n-\n-* register usage conventions\n-\n-* interfaces for runtime arithmetic support\n-\n-* object file formats\n-\n-In addition, the application binary interface implemented by a C++ compiler\n-affects code generation and runtime support for:\n-\n-* name mangling\n-\n-* exception handling\n-\n-* invoking constructors and destructors\n-\n-* layout, alignment, and padding of classes\n-\n-* layout and alignment of virtual tables\n-\n-Some GCC compilation options cause the compiler to generate code that\n-does not conform to the platform's default ABI.  Other options cause\n-different program behavior for implementation-defined features that are\n-not covered by an ABI.  These options are provided for consistency with\n-other compilers that do not follow the platform's default ABI or the\n-usual behavior of implementation-defined features for the platform.\n-Be very careful about using such options.\n-\n-Most platforms have a well-defined ABI that covers C code, but ABIs\n-that cover C++ functionality are not yet common.\n-\n-Starting with GCC 3.2, GCC binary conventions for C++ are based on a\n-written, vendor-neutral C++ ABI that was designed to be specific to\n-64-bit Itanium but also includes generic specifications that apply to\n-any platform.\n-This C++ ABI is also implemented by other compiler vendors on some\n-platforms, notably GNU/Linux and BSD systems.\n-We have tried hard to provide a stable ABI that will be compatible with\n-future GCC releases, but it is possible that we will encounter problems\n-that make this difficult.  Such problems could include different\n-interpretations of the C++ ABI by different vendors, bugs in the ABI, or\n-bugs in the implementation of the ABI in different compilers.\n-GCC's :option:`-Wabi` switch warns when G++ generates code that is\n-probably not compatible with the C++ ABI.\n-\n-The C++ library used with a C++ compiler includes the Standard C++\n-Library, with functionality defined in the C++ Standard, plus language\n-runtime support.  The runtime support is included in a C++ ABI, but there\n-is no formal ABI for the Standard C++ Library.  Two implementations\n-of that library are interoperable if one follows the de-facto ABI of the\n-other and if they are both built with the same compiler, or with compilers\n-that conform to the same ABI for C++ compiler and runtime support.\n-\n-When G++ and another C++ compiler conform to the same C++ ABI, but the\n-implementations of the Standard C++ Library that they normally use do not\n-follow the same ABI for the Standard C++ Library, object files built with\n-those compilers can be used in the same program only if they use the same\n-C++ library.  This requires specifying the location of the C++ library\n-header files when invoking the compiler whose usual library is not being\n-used.  The location of GCC's C++ header files depends on how the GCC\n-build was configured, but can be seen by using the G++ :option:`-v` option.\n-With default configuration options for G++ 3.3 the compile line for a\n-different C++ compiler needs to include\n-\n-.. code-block:: c++\n-\n-      -Igcc_install_directory/include/c++/3.3\n-\n-Similarly, compiling code with G++ that must use a C++ library other\n-than the GNU C++ library requires specifying the location of the header\n-files for that other library.\n-\n-The most straightforward way to link a program to use a particular\n-C++ library is to use a C++ driver that specifies that C++ library by\n-default.  The :command:`g++` driver, for example, tells the linker where\n-to find GCC's C++ library (:samp:`libstdc++`) plus the other libraries\n-and startup files it needs, in the proper order.\n-\n-If a program must use a different C++ library and it's not possible\n-to do the final link using a C++ driver that uses that library by default,\n-it is necessary to tell :command:`g++` the location and name of that\n-library.  It might also be necessary to specify different startup files\n-and other runtime support libraries, and to suppress the use of GCC's\n-support libraries with one or more of the options :option:`-nostdlib`,\n-:option:`-nostartfiles`, and :option:`-nodefaultlibs`.\n\\ No newline at end of file"}, {"sha": "9cc4bcdddc18ae292d22d174395dfadcd1c75260", "filename": "gcc/doc/gcc/c++-implementation-defined-behavior.rst", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc%2B%2B-implementation-defined-behavior.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,33 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: implementation-defined behavior, C++ language\n-\n-.. _c++-implementation:\n-\n-C++ Implementation-Defined Behavior\n------------------------------------\n-\n-A conforming implementation of ISO C++ is required to document its\n-choice of behavior in each of the areas that are designated\n-'implementation defined'.  The following lists all such areas,\n-along with the section numbers from the ISO/IEC 14882:1998 and ISO/IEC\n-14882:2003 standards.  Some areas are only implementation-defined in\n-one version of the standard.\n-\n-Some choices depend on the externally determined ABI for the platform\n-(including standard character encodings) which GCC follows; these are\n-listed as 'determined by ABI' below.  See :ref:`compatibility`, and https://gcc.gnu.org/readings.html.  Some\n-choices are documented in the preprocessor manual.\n-See :ref:`cpp:implementation-defined-behavior`.  Some choices are documented in\n-the corresponding document for the C language.  See :ref:`c-implementation`.  Some choices are made by the library and operating\n-system (or other environment when compiling for a freestanding\n-environment); refer to their documentation for details.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  conditionally-supported-behavior\n-  exception-handling\n\\ No newline at end of file"}, {"sha": "eb796dcd3f4e92fcf514191193bcaf6458258a34", "filename": "gcc/doc/gcc/c-implementation-defined-behavior.rst", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,46 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: implementation-defined behavior, C language\n-\n-.. _c-implementation:\n-\n-C Implementation-Defined Behavior\n----------------------------------\n-\n-A conforming implementation of ISO C is required to document its\n-choice of behavior in each of the areas that are designated\n-'implementation defined'.  The following lists all such areas,\n-along with the section numbers from the ISO/IEC 9899:1990, ISO/IEC\n-9899:1999 and ISO/IEC 9899:2011 standards.  Some areas are only\n-implementation-defined in one version of the standard.\n-\n-Some choices depend on the externally determined ABI for the platform\n-(including standard character encodings) which GCC follows; these are\n-listed as 'determined by ABI' below.  See :ref:`compatibility`, and https://gcc.gnu.org/readings.html.  Some\n-choices are documented in the preprocessor manual.\n-See :ref:`cpp:implementation-defined-behavior`.  Some choices are made by the\n-library and operating system (or other environment when compiling for\n-a freestanding environment); refer to their documentation for details.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  c-implementation-defined-behavior/translation\n-  c-implementation-defined-behavior/environment\n-  c-implementation-defined-behavior/identifiers\n-  c-implementation-defined-behavior/characters\n-  c-implementation-defined-behavior/integers\n-  c-implementation-defined-behavior/floating-point\n-  c-implementation-defined-behavior/arrays-and-pointers\n-  c-implementation-defined-behavior/hints\n-  c-implementation-defined-behavior/structures-unions-enumerations-and-bit-fields\n-  c-implementation-defined-behavior/qualifiers\n-  c-implementation-defined-behavior/declarators\n-  c-implementation-defined-behavior/statements\n-  c-implementation-defined-behavior/preprocessing-directives\n-  c-implementation-defined-behavior/library-functions\n-  c-implementation-defined-behavior/architecture\n-  c-implementation-defined-behavior/locale-specific-behavior\n\\ No newline at end of file"}, {"sha": "99639bc7a314b5642ad910a5444d2f1f83f5fdcf", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/architecture.rst", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farchitecture.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,47 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _architecture-implementation:\n-\n-Architecture\n-************\n-\n-* The values or expressions assigned to the macros specified in the\n-  headers ``<float.h>``, ``<limits.h>``, and ``<stdint.h>``\n-  (C90, C99 and C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3).\n-\n-  Determined by ABI.\n-\n-* The result of attempting to indirectly access an object with\n-  automatic or thread storage duration from a thread other than the one\n-  with which it is associated (C11 6.2.4).\n-\n-  Such accesses are supported, subject to the same requirements for\n-  synchronization for concurrent accesses as for concurrent accesses to\n-  any object.\n-\n-* The number, order, and encoding of bytes in any object\n-  (when not explicitly specified in this International Standard) (C99\n-  and C11 6.2.6.1).\n-\n-  Determined by ABI.\n-\n-* Whether any extended alignments are supported and the contexts\n-  in which they are supported (C11 6.2.8).\n-\n-  Extended alignments up to 2^{28} (bytes) are supported for\n-  objects of automatic storage duration.  Alignments supported for\n-  objects of static and thread storage duration are determined by the\n-  ABI.\n-\n-* Valid alignment values other than those returned by an _Alignof\n-  expression for fundamental types, if any (C11 6.2.8).\n-\n-  Valid alignments are powers of 2 up to and including 2^{28}.\n-\n-* The value of the result of the ``sizeof`` and ``_Alignof``\n-  operators (C90 6.3.3.4, C99 and C11 6.5.3.4).\n-\n-  Determined by ABI.\n\\ No newline at end of file"}, {"sha": "3d8f1884ffe09d7e62690d18f79409909616c46d", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/arrays-and-pointers.rst", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Farrays-and-pointers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,46 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _arrays-and-pointers-implementation:\n-\n-Arrays and Pointers\n-*******************\n-\n-* The result of converting a pointer to an integer or\n-  vice versa (C90 6.3.4, C99 and C11 6.3.2.3).\n-\n-  A cast from pointer to integer discards most-significant bits if the\n-  pointer representation is larger than the integer type,\n-  sign-extends ([#f1]_) if the pointer representation is smaller than the integer type, otherwise\n-  the bits are unchanged.\n-\n-  .. ??? We've always claimed that pointers were unsigned entities.\n-\n-  .. Shouldn't we therefore be doing zero-extension?  If so, the bug\n-\n-  .. is in convert_to_integer, where we call type_for_size and request\n-\n-  .. a signed integral type.  On the other hand, it might be most useful\n-\n-  .. for the target if we extend according to POINTERS_EXTEND_UNSIGNED.\n-\n-  A cast from integer to pointer discards most-significant bits if the\n-  pointer representation is smaller than the integer type, extends according\n-  to the signedness of the integer type if the pointer representation\n-  is larger than the integer type, otherwise the bits are unchanged.\n-\n-  When casting from pointer to integer and back again, the resulting\n-  pointer must reference the same object as the original pointer, otherwise\n-  the behavior is undefined.  That is, one may not use integer arithmetic to\n-  avoid the undefined behavior of pointer arithmetic as proscribed in\n-  C99 and C11 6.5.6/8.\n-\n-* The size of the result of subtracting two pointers to elements\n-  of the same array (C90 6.3.6, C99 and C11 6.5.6).\n-\n-  The value is as specified in the standard and the type is determined\n-  by the ABI.\n-\n-.. [#f1] Future versions of GCC may zero-extend, or use a target-defined ``ptr_extend`` pattern.  Do not rely on sign extension.\n\\ No newline at end of file"}, {"sha": "7e896b091ba4f45da19e7bd98065687cf3d9a3f0", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/characters.rst", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fcharacters.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,93 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _characters-implementation:\n-\n-Characters\n-**********\n-\n-* The number of bits in a byte (C90 3.4, C99 and C11 3.6).\n-\n-  Determined by ABI.\n-\n-* The values of the members of the execution character set (C90,\n-  C99 and C11 5.2.1).\n-\n-  Determined by ABI.\n-\n-* The unique value of the member of the execution character set produced\n-  for each of the standard alphabetic escape sequences (C90, C99 and C11\n-  5.2.2).\n-\n-  Determined by ABI.\n-\n-* The value of a ``char`` object into which has been stored any\n-  character other than a member of the basic execution character set\n-  (C90 6.1.2.5, C99 and C11 6.2.5).\n-\n-  Determined by ABI.\n-\n-* Which of ``signed char`` or ``unsigned char`` has the same\n-  range, representation, and behavior as 'plain' ``char`` (C90\n-  6.1.2.5, C90 6.2.1.1, C99 and C11 6.2.5, C99 and C11 6.3.1.1).\n-\n-  .. index:: fsigned-char, funsigned-char\n-\n-  Determined by ABI.  The options :option:`-funsigned-char` and\n-  :option:`-fsigned-char` change the default.  See :ref:`c-dialect-options`.\n-\n-* The mapping of members of the source character set (in character\n-  constants and string literals) to members of the execution character\n-  set (C90 6.1.3.4, C99 and C11 6.4.4.4, C90, C99 and C11 5.1.1.2).\n-\n-  Determined by ABI.\n-\n-* The value of an integer character constant containing more than one\n-  character or containing a character or escape sequence that does not map\n-  to a single-byte execution character (C90 6.1.3.4, C99 and C11 6.4.4.4).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* The value of a wide character constant containing more than one\n-  multibyte character or a single multibyte character that maps to\n-  multiple members of the extended execution character set, or\n-  containing a multibyte character or escape sequence not represented in\n-  the extended execution character set (C90 6.1.3.4, C99 and C11\n-  6.4.4.4).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* The current locale used to convert a wide character constant consisting\n-  of a single multibyte character that maps to a member of the extended\n-  execution character set into a corresponding wide character code (C90\n-  6.1.3.4, C99 and C11 6.4.4.4).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* Whether differently-prefixed wide string literal tokens can be\n-  concatenated and, if so, the treatment of the resulting multibyte\n-  character sequence (C11 6.4.5).\n-\n-  Such tokens may not be concatenated.\n-\n-* The current locale used to convert a wide string literal into\n-  corresponding wide character codes (C90 6.1.4, C99 and C11 6.4.5).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* The value of a string literal containing a multibyte character or escape\n-  sequence not represented in the execution character set (C90 6.1.4,\n-  C99 and C11 6.4.5).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* The encoding of any of ``wchar_t``, ``char16_t``, and\n-  ``char32_t`` where the corresponding standard encoding macro\n-  (``__STDC_ISO_10646__``, ``__STDC_UTF_16__``, or\n-  ``__STDC_UTF_32__``) is not defined (C11 6.10.8.2).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.  ``char16_t`` and\n-  ``char32_t`` literals are always encoded in UTF-16 and UTF-32\n-  respectively.\n\\ No newline at end of file"}, {"sha": "8ac479ee200a4731ac413fdb120610d1401f069f", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/declarators.rst", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fdeclarators.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,14 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _declarators-implementation:\n-\n-Declarators\n-***********\n-\n-* The maximum number of declarators that may modify an arithmetic,\n-  structure or union type (C90 6.5.4).\n-\n-  GCC is only limited by available memory.\n\\ No newline at end of file"}, {"sha": "db3e7652ea40d76f5aec465e7ea2fcb625183c01", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/environment.rst", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fenvironment.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,18 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _environment-implementation:\n-\n-Environment\n-***********\n-\n-The behavior of most of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-* The mapping between physical source file multibyte characters\n-  and the source character set in translation phase 1 (C90, C99 and C11\n-  5.1.1.2).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n\\ No newline at end of file"}, {"sha": "f0d43d58f0ba9b1bb0acc5015a303879801519fb", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/floating-point.rst", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ffloating-point.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,88 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _floating-point-implementation:\n-\n-Floating Point\n-**************\n-\n-* The accuracy of the floating-point operations and of the library\n-  functions in ``<math.h>`` and ``<complex.h>`` that return floating-point\n-  results (C90, C99 and C11 5.2.4.2.2).\n-\n-  The accuracy is unknown.\n-\n-* The rounding behaviors characterized by non-standard values\n-  of ``FLT_ROUNDS``\n-  (C90, C99 and C11 5.2.4.2.2).\n-\n-  GCC does not use such values.\n-\n-* The evaluation methods characterized by non-standard negative\n-  values of ``FLT_EVAL_METHOD`` (C99 and C11 5.2.4.2.2).\n-\n-  GCC does not use such values.\n-\n-* The direction of rounding when an integer is converted to a\n-  floating-point number that cannot exactly represent the original\n-  value (C90 6.2.1.3, C99 and C11 6.3.1.4).\n-\n-  C99 Annex F is followed.\n-\n-* The direction of rounding when a floating-point number is\n-  converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11\n-  6.3.1.5).\n-\n-  C99 Annex F is followed.\n-\n-* How the nearest representable value or the larger or smaller\n-  representable value immediately adjacent to the nearest representable\n-  value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11\n-  6.4.4.2).\n-\n-  C99 Annex F is followed.\n-\n-* Whether and how floating expressions are contracted when not\n-  disallowed by the ``FP_CONTRACT`` pragma (C99 and C11 6.5).\n-\n-  Expressions are currently only contracted if :option:`-ffp-contract=fast`,\n-  :option:`-funsafe-math-optimizations` or :option:`-ffast-math` are used.\n-  This is subject to change.\n-\n-* The default state for the ``FENV_ACCESS`` pragma (C99 and C11\n-  7.6.1).\n-\n-  This pragma is not implemented, but the default is to 'off' unless\n-  :option:`-frounding-math` is used and :option:`-fno-trapping-math` is not\n-  in which case it is 'on'.\n-\n-* Additional floating-point exceptions, rounding modes, environments,\n-  and classifications, and their macro names (C99 and C11 7.6, C99 and\n-  C11 7.12).\n-\n-  This is dependent on the implementation of the C library, and is not\n-  defined by GCC itself.\n-\n-* The default state for the ``FP_CONTRACT`` pragma (C99 and C11\n-  7.12.2).\n-\n-  This pragma is not implemented.  Expressions are currently only\n-  contracted if :option:`-ffp-contract=fast`,\n-  :option:`-funsafe-math-optimizations` or :option:`-ffast-math` are used.\n-  This is subject to change.\n-\n-* Whether the 'inexact' floating-point exception can be raised\n-  when the rounded result actually does equal the mathematical result\n-  in an IEC 60559 conformant implementation (C99 F.9).\n-\n-  This is dependent on the implementation of the C library, and is not\n-  defined by GCC itself.\n-\n-* Whether the 'underflow' (and 'inexact') floating-point\n-  exception can be raised when a result is tiny but not inexact in an\n-  IEC 60559 conformant implementation (C99 F.9).\n-\n-  This is dependent on the implementation of the C library, and is not\n-  defined by GCC itself.\n\\ No newline at end of file"}, {"sha": "e3d1935bc339eaf194d486a3ab80caf283f548ed", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/hints.rst", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fhints.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,35 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _hints-implementation:\n-\n-Hints\n-*****\n-\n-* The extent to which suggestions made by using the ``register``\n-  storage-class specifier are effective (C90 6.5.1, C99 and C11 6.7.1).\n-\n-  The ``register`` specifier affects code generation only in these ways:\n-\n-  * When used as part of the register variable extension, see\n-    :ref:`explicit-register-variables`.\n-\n-  * When :option:`-O0` is in use, the compiler allocates distinct stack\n-    memory for all variables that do not have the ``register``\n-    storage-class specifier; if ``register`` is specified, the variable\n-    may have a shorter lifespan than the code would indicate and may never\n-    be placed in memory.\n-\n-  * On some rare x86 targets, ``setjmp`` doesn't save the registers in\n-    all circumstances.  In those cases, GCC doesn't allocate any variables\n-    in registers unless they are marked ``register``.\n-\n-* The extent to which suggestions made by using the inline function\n-  specifier are effective (C99 and C11 6.7.4).\n-\n-  GCC will not inline any functions if the :option:`-fno-inline` option is\n-  used or if :option:`-O0` is used.  Otherwise, GCC may still be unable to\n-  inline a function for many reasons; the :option:`-Winline` option may be\n-  used to determine if a function has not been inlined and why not.\n\\ No newline at end of file"}, {"sha": "da1b949ed72cc161336f5bf31223ad71789fe726", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/identifiers.rst", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fidentifiers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,28 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _identifiers-implementation:\n-\n-Identifiers\n-***********\n-\n-* Which additional multibyte characters may appear in identifiers\n-  and their correspondence to universal character names (C99 and C11 6.4.2).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n-\n-* The number of significant initial characters in an identifier\n-  (C90 6.1.2, C90, C99 and C11 5.2.4.1, C99 and C11 6.4.2).\n-\n-  For internal names, all characters are significant.  For external names,\n-  the number of significant characters are defined by the linker; for\n-  almost all targets, all characters are significant.\n-\n-* Whether case distinctions are significant in an identifier with\n-  external linkage (C90 6.1.2).\n-\n-  This is a property of the linker.  C99 and C11 require that case distinctions\n-  are always significant in identifiers with external linkage and\n-  systems without this property are not supported by GCC.\n\\ No newline at end of file"}, {"sha": "627fe775aedcc06e16eccb173507db8803bb6be1", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/integers.rst", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fintegers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,66 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _integers-implementation:\n-\n-Integers\n-********\n-\n-* Any extended integer types that exist in the implementation (C99\n-  and C11 6.2.5).\n-\n-  GCC does not support any extended integer types.\n-\n-  .. The __mode__ attribute might create types of precisions not\n-\n-  .. otherwise supported, but the syntax isn't right for use everywhere\n-\n-  .. the standard type names might be used.  Predefined typedefs should\n-\n-  .. be used if any extended integer types are to be defined.  The __int128_t and __uint128_t\n-\n-  .. typedefs are not extended integer types\n-\n-  .. as they are generally longer than the ABI-specified intmax_t.\n-\n-* Whether signed integer types are represented using sign and magnitude,\n-  two's complement, or one's complement, and whether the extraordinary value\n-  is a trap representation or an ordinary value (C99 and C11 6.2.6.2).\n-\n-  GCC supports only two's complement integer types, and all bit patterns\n-  are ordinary values.\n-\n-* The rank of any extended integer type relative to another extended\n-  integer type with the same precision (C99 and C11 6.3.1.1).\n-\n-  GCC does not support any extended integer types.\n-\n-  .. If it did, there would only be one of each precision and signedness.\n-\n-* The result of, or the signal raised by, converting an integer to a\n-  signed integer type when the value cannot be represented in an object of\n-  that type (C90 6.2.1.2, C99 and C11 6.3.1.3).\n-\n-  For conversion to a type of width N, the value is reduced\n-  modulo 2^N to be within range of the type; no signal is raised.\n-\n-* The results of some bitwise operations on signed integers (C90\n-  6.3, C99 and C11 6.5).\n-\n-  Bitwise operators act on the representation of the value including\n-  both the sign and value bits, where the sign bit is considered\n-  immediately above the highest-value value bit.  Signed :samp:`>>` acts\n-  on negative numbers by sign extension.\n-\n-  As an extension to the C language, GCC does not use the latitude given in\n-  C99 and C11 only to treat certain aspects of signed :samp:`<<` as undefined.\n-  However, :option:`-fsanitize=shift` (and :option:`-fsanitize=undefined`) will\n-  diagnose such cases.  They are also diagnosed where constant\n-  expressions are required.\n-\n-* The sign of the remainder on integer division (C90 6.3.5).\n-\n-  GCC always follows the C99 and C11 requirement that the result of division is\n-  truncated towards zero.\n\\ No newline at end of file"}, {"sha": "62bc15da9cb9e3a42f4709d6989762bc6421f055", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/library-functions.rst", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flibrary-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,19 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _library-functions-implementation:\n-\n-Library Functions\n-*****************\n-\n-The behavior of most of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-* The null pointer constant to which the macro ``NULL`` expands\n-  (C90 7.1.6, C99 7.17, C11 7.19).\n-\n-  In ``<stddef.h>``, ``NULL`` expands to ``((void *)0)``.  GCC\n-  does not provide the other headers which define ``NULL`` and some\n-  library implementations may use other definitions in those headers.\n\\ No newline at end of file"}, {"sha": "86745aacfeb6b481487b82339eb961cc58893680", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/locale-specific-behavior.rst", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Flocale-specific-behavior.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,12 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _locale-specific-behavior-implementation:\n-\n-Locale-Specific Behavior\n-************************\n-\n-The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n\\ No newline at end of file"}, {"sha": "cca0e2745e1cd8e0ecdfdc608740c3985b9982a3", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/preprocessing-directives.rst", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fpreprocessing-directives.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,54 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _preprocessing-directives-implementation:\n-\n-Preprocessing Directives\n-************************\n-\n-See :ref:`cpp:implementation-defined-behavior`, for details of these aspects of\n-implementation-defined behavior.\n-\n-* The locations within ``#pragma`` directives where header name\n-  preprocessing tokens are recognized (C11 6.4, C11 6.4.7).\n-\n-* How sequences in both forms of header names are mapped to headers\n-  or external source file names (C90 6.1.7, C99 and C11 6.4.7).\n-\n-* Whether the value of a character constant in a constant expression\n-  that controls conditional inclusion matches the value of the same character\n-  constant in the execution character set (C90 6.8.1, C99 and C11 6.10.1).\n-\n-* Whether the value of a single-character character constant in a\n-  constant expression that controls conditional inclusion may have a\n-  negative value (C90 6.8.1, C99 and C11 6.10.1).\n-\n-* The places that are searched for an included :samp:`<>` delimited\n-  header, and how the places are specified or the header is\n-  identified (C90 6.8.2, C99 and C11 6.10.2).\n-\n-* How the named source file is searched for in an included :samp:`\"\"`\n-  delimited header (C90 6.8.2, C99 and C11 6.10.2).\n-\n-* The method by which preprocessing tokens (possibly resulting from\n-  macro expansion) in a ``#include`` directive are combined into a header\n-  name (C90 6.8.2, C99 and C11 6.10.2).\n-\n-* The nesting limit for ``#include`` processing (C90 6.8.2, C99\n-  and C11 6.10.2).\n-\n-* Whether the :samp:`#` operator inserts a :samp:`\\\\` character before\n-  the :samp:`\\\\` character that begins a universal character name in a\n-  character constant or string literal (C99 and C11 6.10.3.2).\n-\n-* The behavior on each recognized non- ``STDC #pragma``\n-  directive (C90 6.8.6, C99 and C11 6.10.6).\n-\n-  See :ref:`cpp:pragmas`, for details of\n-  pragmas accepted by GCC on all targets.  See :ref:`pragmas`, for details of target-specific pragmas.\n-\n-* The definitions for ``__DATE__`` and ``__TIME__`` when\n-  respectively, the date and time of translation are not available (C90\n-  6.8.8, C99 6.10.8, C11 6.10.8.1).\n\\ No newline at end of file"}, {"sha": "3d9baf3e6f010b15409d3aa12725d906b1a4feda", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/qualifiers.rst", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fqualifiers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,53 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _qualifiers-implementation:\n-\n-Qualifiers\n-**********\n-\n-* What constitutes an access to an object that has volatile-qualified\n-  type (C90 6.5.3, C99 and C11 6.7.3).\n-\n-  Such an object is normally accessed by pointers and used for accessing\n-  hardware.  In most expressions, it is intuitively obvious what is a read\n-  and what is a write.  For example\n-\n-  .. code-block:: c++\n-\n-    volatile int *dst = somevalue;\n-    volatile int *src = someothervalue;\n-    *dst = *src;\n-\n-  will cause a read of the volatile object pointed to by :samp:`{src}` and store the\n-  value into the volatile object pointed to by :samp:`{dst}`.  There is no\n-  guarantee that these reads and writes are atomic, especially for objects\n-  larger than ``int``.\n-\n-  However, if the volatile storage is not being modified, and the value of\n-  the volatile storage is not used, then the situation is less obvious.\n-  For example\n-\n-  .. code-block:: c++\n-\n-    volatile int *src = somevalue;\n-    *src;\n-\n-  According to the C standard, such an expression is an rvalue whose type\n-  is the unqualified version of its original type, i.e. ``int``.  Whether\n-  GCC interprets this as a read of the volatile object being pointed to or\n-  only as a request to evaluate the expression for its side effects depends\n-  on this type.\n-\n-  If it is a scalar type, or on most targets an aggregate type whose only\n-  member object is of a scalar type, or a union type whose member objects\n-  are of scalar types, the expression is interpreted by GCC as a read of\n-  the volatile object; in the other cases, the expression is only evaluated\n-  for its side effects.\n-\n-  When an object of an aggregate type, with the same size and alignment as a\n-  scalar type ``S``, is the subject of a volatile access by an assignment\n-  expression or an atomic function, the access to it is performed as if the\n-  object's declared type were ``volatile S``.\n\\ No newline at end of file"}, {"sha": "725d9c456197494584902ee7aa0b51ce68e31e18", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/statements.rst", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstatements.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,14 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _statements-implementation:\n-\n-Statements\n-**********\n-\n-* The maximum number of ``case`` values in a ``switch``\n-  statement (C90 6.6.4.2).\n-\n-  GCC is only limited by available memory.\n\\ No newline at end of file"}, {"sha": "949f46581639a280038928dcc29bf9eb1d4daa6d", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/structures-unions-enumerations-and-bit-fields.rst", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Fstructures-unions-enumerations-and-bit-fields.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,78 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _structures-unions-enumerations-and-bit-fields-implementation:\n-\n-Structures, Unions, Enumerations, and Bit-Fields\n-************************************************\n-\n-* A member of a union object is accessed using a member of a\n-  different type (C90 6.3.2.3).\n-\n-  The relevant bytes of the representation of the object are treated as\n-  an object of the type used for the access.  See :ref:`type-punning`.  This\n-  may be a trap representation.\n-\n-* Whether a 'plain' ``int`` bit-field is treated as a\n-  ``signed int`` bit-field or as an ``unsigned int`` bit-field\n-  (C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1).\n-\n-  .. index:: funsigned-bitfields\n-\n-  By default it is treated as ``signed int`` but this may be changed\n-  by the :option:`-funsigned-bitfields` option.\n-\n-* Allowable bit-field types other than ``_Bool``, ``signed int``,\n-  and ``unsigned int`` (C99 and C11 6.7.2.1).\n-\n-  Other integer types, such as ``long int``, and enumerated types are\n-  permitted even in strictly conforming mode.\n-\n-* Whether atomic types are permitted for bit-fields (C11 6.7.2.1).\n-\n-  Atomic types are not permitted for bit-fields.\n-\n-* Whether a bit-field can straddle a storage-unit boundary (C90\n-  6.5.2.1, C99 and C11 6.7.2.1).\n-\n-  Determined by ABI.\n-\n-* The order of allocation of bit-fields within a unit (C90\n-  6.5.2.1, C99 and C11 6.7.2.1).\n-\n-  Determined by ABI.\n-\n-* The alignment of non-bit-field members of structures (C90\n-  6.5.2.1, C99 and C11 6.7.2.1).\n-\n-  Determined by ABI.\n-\n-* The integer type compatible with each enumerated type (C90\n-  6.5.2.2, C99 and C11 6.7.2.2).\n-\n-  .. index:: fshort-enums\n-\n-  Normally, the type is ``unsigned int`` if there are no negative\n-  values in the enumeration, otherwise ``int``.  If\n-  :option:`-fshort-enums` is specified, then if there are negative values\n-  it is the first of ``signed char``, ``short`` and ``int``\n-  that can represent all the values, otherwise it is the first of\n-  ``unsigned char``, ``unsigned short`` and ``unsigned int``\n-  that can represent all the values.\n-\n-  .. On a few unusual targets with 64-bit int, this doesn't agree with\n-\n-  .. the code and one of the types accessed via mode attributes (which\n-\n-  .. are not currently considered extended integer types) may be used.\n-\n-  .. If these types are made extended integer types, it would still be\n-\n-  .. the case that -fshort-enums stops the implementation from\n-\n-  .. conforming to C90 on those targets.\n-\n-  On some targets, :option:`-fshort-enums` is the default; this is\n-  determined by the ABI.\n\\ No newline at end of file"}, {"sha": "e9a6d8855d4bb7a2bc3dc34ad8357216d8532e44", "filename": "gcc/doc/gcc/c-implementation-defined-behavior/translation.rst", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fc-implementation-defined-behavior%2Ftranslation.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,20 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _translation-implementation:\n-\n-Translation\n-***********\n-\n-* How a diagnostic is identified (C90 3.7, C99 and C11 3.10, C90,\n-  C99 and C11 5.1.1.3).\n-\n-  Diagnostics consist of all the output sent to stderr by GCC.\n-\n-* Whether each nonempty sequence of white-space characters other than\n-  new-line is retained or replaced by one space character in translation\n-  phase 3 (C90, C99 and C11 5.1.1.2).\n-\n-  See :ref:`cpp:implementation-defined-behavior`.\n\\ No newline at end of file"}, {"sha": "432bb329c2d41fe485383a942fb4fb628a102171", "filename": "gcc/doc/gcc/conditionally-supported-behavior.rst", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fconditionally-supported-behavior.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,20 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _conditionally-supported-behavior:\n-\n-Conditionally-Supported Behavior\n-********************************\n-\n-Each implementation shall include documentation that identifies\n-all conditionally-supported constructs that it does not support (C++0x\n-1.4).\n-\n-* Whether an argument of class type with a non-trivial copy\n-  constructor or destructor can be passed to ... (C++0x 5.2.2).\n-\n-  Such argument passing is supported, using the same\n-  pass-by-invisible-reference approach used for normal function\n-  arguments of such types.\n\\ No newline at end of file"}, {"sha": "7987f4d885b42bb2646c74b7fc466e508a23c5c4", "filename": "gcc/doc/gcc/conf.py", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fconf.py?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,37 +0,0 @@\n-# Configuration file for the Sphinx documentation builder.\n-\n-import sys\n-sys.path.append('../../..//doc')\n-\n-from baseconf import *\n-\n-name = 'gcc'\n-project = 'Using the GNU Compiler Collection'\n-copyright = '1988-2022 Free Software Foundation, Inc.'\n-authors = 'Richard M. Stallman and the GCC Developer Community'\n-\n-# Grouping the document tree into Texinfo files. List of tuples\n-# (source start file, target name, title, author,\n-#  dir menu entry, description, category)\n-latex_documents = [\n-  ('index', f'{name}.tex', project, authors, 'manual'),\n-]\n-\n-# One entry per manual page. List of tuples\n-# (source start file, name, description, authors, manual section).\n-man_pages = [\n-    ('gcc-command-options', 'gcc', 'GNU project C and C++ compiler', [authors], 1),\n-    ('gcov', 'gcov', 'coverage testing tool', [authors], 1),\n-    ('gcov-dump', 'gcov-dump', 'offline gcda and gcno profile dump tool', [authors], 1),\n-    ('gcov-tool', 'gcov-tool', 'offline gcda profile processing tool', [authors], 1),\n-    ('lto-dump', 'lto-dump', 'Tool for dumping LTO object files', [authors], 1),\n-    ('general-public-license-3', 'gpl', 'GNU General Public License', [], 7),\n-    ('gnu-free-documentation-license', 'gfdl', 'GNU Free Documentation License', [], 7),\n-    ('funding', 'fsf-funding', 'Funding Free Software', [], 7)\n-]\n-\n-texinfo_documents = [\n-  ('index', name, project, authors, None, None, None, True)\n-]\n-\n-set_common(name, globals())\n\\ No newline at end of file"}, {"sha": "f0d4b9f7db08adc9abb6b5aaa8b0711db2a8593c", "filename": "gcc/doc/gcc/contributing-to-gcc-development.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcontributing-to-gcc-development.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,6 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. include:: ../../../doc/contribute.rst\n\\ No newline at end of file"}, {"sha": "27d5de90c77434eebdc7b911c5cc1004aff06b0a", "filename": "gcc/doc/gcc/contributors-to-gcc.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcontributors-to-gcc.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,6 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. include:: ../../../doc/contrib.rst\n\\ No newline at end of file"}, {"sha": "c778eb178c77723f1ec25e05ea51e9c2815b39cf", "filename": "gcc/doc/gcc/copyright.rst", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcopyright.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fcopyright.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fcopyright.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,25 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the GPL license file\n-\n-Copyright\n-^^^^^^^^^\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being **GNU General Public License** and\n-**Funding Free Software**, the Front-Cover texts being (a) (see below), and with\n-the Back-Cover Texts being (b) (see below).  A copy of the license is\n-in the :ref:`gnu_fdl`.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n\\ No newline at end of file"}, {"sha": "5a29f27981841489dd3ec713f60757ed9a1daf11", "filename": "gcc/doc/gcc/exception-handling.rst", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fexception-handling.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,15 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _exception-handling:\n-\n-Exception Handling\n-******************\n-\n-* In the situation where no matching handler is found, it is\n-  implementation-defined whether or not the stack is unwound before\n-  std::terminate() is called (C++98 15.5.1).\n-\n-  The stack is not unwound before std::terminate is called.\n\\ No newline at end of file"}, {"sha": "5ea082b1a0346a81affdd34c949c93d4c8d3465b", "filename": "gcc/doc/gcc/extensions-to-the-c++-language.rst", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,34 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: extensions, C++ language, C++ language extensions\n-\n-.. _c++-extensions:\n-\n-Extensions to the C++ Language\n-------------------------------\n-\n-The GNU compiler provides these extensions to the C++ language (and you\n-can also use most of the C language extensions in your C++ programs).  If you\n-want to write code that checks whether these features are available, you can\n-test for the GNU compiler the same way as for C programs: check for a\n-predefined macro ``__GNUC__``.  You can also use ``__GNUG__`` to\n-test specifically for GNU C++ (see :ref:`cpp:common-predefined-macros`).\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  extensions-to-the-c++-language/vague-linkage\n-  extensions-to-the-c++-language/function-multiversioning\n-  extensions-to-the-c++-language/type-traits\n-  extensions-to-the-c++-language/c++-concepts\n-  extensions-to-the-c++-language/deprecated-features\n-  extensions-to-the-c++-language/backwards-compatibility\n-  extensions-to-the-c++-language/when-is-a-volatile-c++-object-accessed\n-  extensions-to-the-c++-language/restricting-pointer-aliasing\n-  extensions-to-the-c++-language/c++-interface-and-implementation-pragmas\n-  extensions-to-the-c++-language/wheres-the-template\n-  extensions-to-the-c++-language/extracting-the-function-pointer-from-a-bound-pointer-to-member-function\n-  extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes\n\\ No newline at end of file"}, {"sha": "d1ac5b21343c95f536cfaefad4e311341bcedebc", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/backwards-compatibility.rst", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fbackwards-compatibility.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,27 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: Backwards Compatibility, ARM [Annotated C++ Reference Manual]\n-\n-.. _backwards-compatibility:\n-\n-Backwards Compatibility\n-***********************\n-\n-Now that there is a definitive ISO standard C++, G++ has a specification\n-to adhere to.  The C++ language evolved over time, and features that\n-used to be acceptable in previous drafts of the standard, such as the ARM\n-[Annotated C++ Reference Manual], are no longer accepted.  In order to allow\n-compilation of C++ written to such drafts, G++ contains some backwards\n-compatibilities.  *All such backwards compatibility features are\n-liable to disappear in future versions of G++.* They should be considered\n-deprecated.   See :ref:`deprecated-features`.\n-\n-``Implicit C language``\n-  Old C system header files did not contain an ``extern \"C\" {...}``\n-  scope to set the language.  On such systems, all system header files are\n-  implicitly scoped inside a C language scope.  Such headers must\n-  correctly prototype function argument types, there is no leeway for\n-  ``()`` to indicate an unspecified set of arguments.\n\\ No newline at end of file"}, {"sha": "bba336ece5418226198e8e466644f7a786846f7a", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-concepts.rst", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-concepts.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,44 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _c++-concepts:\n-\n-C++ Concepts\n-************\n-\n-C++ concepts provide much-improved support for generic programming. In\n-particular, they allow the specification of constraints on template arguments.\n-The constraints are used to extend the usual overloading and partial\n-specialization capabilities of the language, allowing generic data structures\n-and algorithms to be 'refined' based on their properties rather than their\n-type names.\n-\n-The following keywords are reserved for concepts.\n-\n-``assumes``\n-  States an expression as an assumption, and if possible, verifies that the\n-  assumption is valid. For example, ``assume(n > 0)``.\n-\n-``axiom``\n-  Introduces an axiom definition. Axioms introduce requirements on values.\n-\n-``forall``\n-  Introduces a universally quantified object in an axiom. For example,\n-  ``forall (int n) n + 0 == n``).\n-\n-``concept``\n-  Introduces a concept definition. Concepts are sets of syntactic and semantic\n-  requirements on types and their values.\n-\n-``requires``\n-  Introduces constraints on template arguments or requirements for a member\n-  function of a class template.\n-\n-The front end also exposes a number of internal mechanism that can be used\n-to simplify the writing of type traits. Note that some of these traits are\n-likely to be removed in the future.\n-\n-``__is_same (type1, type2)``\n-  A binary type trait: ``true`` whenever the type arguments are the same.\n\\ No newline at end of file"}, {"sha": "fc7fafd90c86cba4307fe02a1e5b5746a38fd3ff", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-interface-and-implementation-pragmas.rst", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-interface-and-implementation-pragmas.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,97 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: interface and implementation headers, C++, C++ interface and implementation headers, pragmas, interface and implementation\n-\n-.. _c++-interface:\n-\n-C++ Interface and Implementation Pragmas\n-****************************************\n-\n-``#pragma interface`` and ``#pragma implementation`` provide the\n-user with a way of explicitly directing the compiler to emit entities\n-with vague linkage (and debugging information) in a particular\n-translation unit.\n-\n-.. note::\n-\n-  These ``#pragma`` s have been superceded as of GCC 2.7.2\n-  by COMDAT support and the 'key method' heuristic\n-  mentioned in :ref:`vague-linkage`.  Using them can actually cause your\n-  program to grow due to unnecessary out-of-line copies of inline\n-  functions.\n-\n-``#pragma interface`` :samp:`#pragma interface \"{subdir}/{objects}.h\"`\n-\n-  .. index:: #pragma interface\n-\n-  Use this directive in *header files* that define object classes, to save\n-  space in most of the object files that use those classes.  Normally,\n-  local copies of certain information (backup copies of inline member\n-  functions, debugging information, and the internal tables that implement\n-  virtual functions) must be kept in each object file that includes class\n-  definitions.  You can use this pragma to avoid such duplication.  When a\n-  header file containing :samp:`#pragma interface` is included in a\n-  compilation, this auxiliary information is not generated (unless\n-  the main input source file itself uses :samp:`#pragma implementation`).\n-  Instead, the object files contain references to be resolved at link\n-  time.\n-\n-  The second form of this directive is useful for the case where you have\n-  multiple headers with the same name in different directories.  If you\n-  use this form, you must specify the same string to :samp:`#pragma\n-  implementation`.\n-\n-``#pragma implementation`` :samp:`#pragma implementation \"{objects}.h\"`\n-\n-  .. index:: #pragma implementation\n-\n-  Use this pragma in a *main input file*, when you want full output from\n-  included header files to be generated (and made globally visible).  The\n-  included header file, in turn, should use :samp:`#pragma interface`.\n-  Backup copies of inline member functions, debugging information, and the\n-  internal tables used to implement virtual functions are all generated in\n-  implementation files.\n-\n-  .. index:: implied #pragma implementation, #pragma implementation, implied, naming convention, implementation headers\n-\n-  If you use :samp:`#pragma implementation` with no argument, it applies to\n-  an include file with the same basenameA file's :dfn:`basename`\n-  is the name stripped of all leading path information and of trailing\n-  suffixes, such as :samp:`.h` or :samp:`.C` or :samp:`.cc`.\n-  as your source\n-  file.  For example, in :samp:`allclass.cc`, giving just\n-  :samp:`#pragma implementation`\n-  by itself is equivalent to :samp:`#pragma implementation \"allclass.h\"`.\n-\n-  Use the string argument if you want a single implementation file to\n-  include code from multiple header files.  (You must also use\n-  :samp:`#include` to include the header file; :samp:`#pragma\n-  implementation` only specifies how to use the file---it doesn't actually\n-  include it.)\n-\n-  There is no way to split up the contents of a single header file into\n-  multiple implementation files.\n-\n-.. index:: inlining and C++ pragmas, C++ pragmas, effect on inlining, pragmas in C++, effect on inlining\n-\n-:samp:`#pragma implementation` and :samp:`#pragma interface` also have an\n-effect on function inlining.\n-\n-If you define a class in a header file marked with :samp:`#pragma\n-interface`, the effect on an inline function defined in that class is\n-similar to an explicit ``extern`` declaration---the compiler emits\n-no code at all to define an independent version of the function.  Its\n-definition is used only for inlining with its callers.\n-\n-.. index:: fno-implement-inlines\n-\n-Conversely, when you include the same header file in a main source file\n-that declares it as :samp:`#pragma implementation`, the compiler emits\n-code for the function itself; this defines a version of the function\n-that can be found via pointers (or by callers compiled without\n-inlining).  If all calls to the function can be inlined, you can avoid\n-emitting the function by compiling with :option:`-fno-implement-inlines`.\n-If any calls are not inlined, you will get linker errors.\n\\ No newline at end of file"}, {"sha": "0eb484a428ea7525e2a17d99cfd427c9bed54733", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/c++-specific-variable-function-and-type-attributes.rst", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fc%2B%2B-specific-variable-function-and-type-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,95 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _c++-attributes:\n-\n-C++-Specific Variable, Function, and Type Attributes\n-****************************************************\n-\n-Some attributes only make sense for C++ programs.\n-\n-.. index:: abi_tag function attribute, abi_tag variable attribute, abi_tag type attribute\n-\n-.. gcc-attr:: abi_tag (\"tag\", ...)\n-\n-  The ``abi_tag`` attribute can be applied to a function, variable, or class\n-  declaration.  It modifies the mangled name of the entity to\n-  incorporate the tag name, in order to distinguish the function or\n-  class from an earlier version with a different ABI; perhaps the class\n-  has changed size, or the function has a different return type that is\n-  not encoded in the mangled name.\n-\n-  The attribute can also be applied to an inline namespace, but does not\n-  affect the mangled name of the namespace; in this case it is only used\n-  for :option:`-Wabi-tag` warnings and automatic tagging of functions and\n-  variables.  Tagging inline namespaces is generally preferable to\n-  tagging individual declarations, but the latter is sometimes\n-  necessary, such as when only certain members of a class need to be\n-  tagged.\n-\n-  The argument can be a list of strings of arbitrary length.  The\n-  strings are sorted on output, so the order of the list is\n-  unimportant.\n-\n-  A redeclaration of an entity must not add new ABI tags,\n-  since doing so would change the mangled name.\n-\n-  The ABI tags apply to a name, so all instantiations and\n-  specializations of a template have the same tags.  The attribute will\n-  be ignored if applied to an explicit specialization or instantiation.\n-\n-  The :option:`-Wabi-tag` flag enables a warning about a class which does\n-  not have all the ABI tags used by its subobjects and virtual functions; for users with code\n-  that needs to coexist with an earlier ABI, using this option can help\n-  to find all affected types that need to be tagged.\n-\n-  When a type involving an ABI tag is used as the type of a variable or\n-  return type of a function where that tag is not already present in the\n-  signature of the function, the tag is automatically applied to the\n-  variable or function.  :option:`-Wabi-tag` also warns about this\n-  situation; this warning can be avoided by explicitly tagging the\n-  variable or function or moving it into a tagged inline namespace.\n-\n-.. index:: init_priority variable attribute\n-\n-.. gcc-attr:: init_priority (priority)\n-\n-  In Standard C++, objects defined at namespace scope are guaranteed to be\n-  initialized in an order in strict accordance with that of their definitions\n-  *in a given translation unit*.  No guarantee is made for initializations\n-  across translation units.  However, GNU C++ allows users to control the\n-  order of initialization of objects defined at namespace scope with the\n-  ``init_priority`` attribute by specifying a relative :samp:`{priority}`,\n-  a constant integral expression currently bounded between 101 and 65535\n-  inclusive.  Lower numbers indicate a higher priority.\n-\n-  In the following example, ``A`` would normally be created before\n-  ``B``, but the ``init_priority`` attribute reverses that order:\n-\n-  .. code-block:: c++\n-\n-    Some_Class  A  __attribute__ ((init_priority (2000)));\n-    Some_Class  B  __attribute__ ((init_priority (543)));\n-\n-  Note that the particular values of :samp:`{priority}` do not matter; only their\n-  relative ordering.\n-\n-.. index:: warn_unused type attribute\n-\n-.. gcc-attr:: warn_unused\n-\n-  For C++ types with non-trivial constructors and/or destructors it is\n-  impossible for the compiler to determine whether a variable of this\n-  type is truly unused if it is not referenced. This type attribute\n-  informs the compiler that variables of this type should be warned\n-  about if they appear to be unused, just like variables of fundamental\n-  types.\n-\n-  This attribute is appropriate for types which just represent a value,\n-  such as ``std::string`` ; it is not appropriate for types which\n-  control a resource, such as ``std::lock_guard``.\n-\n-  This attribute is also accepted in C, but it is unnecessary because C\n-  does not have constructors or destructors.\n\\ No newline at end of file"}, {"sha": "f55b5eb443944af441d6bc058a85e27f7c673501", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/deprecated-features.rst", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fdeprecated-features.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,43 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _deprecated-features:\n-\n-Deprecated Features\n-*******************\n-\n-In the past, the GNU C++ compiler was extended to experiment with new\n-features, at a time when the C++ language was still evolving.  Now that\n-the C++ standard is complete, some of those features are superseded by\n-superior alternatives.  Using the old features might cause a warning in\n-some cases that the feature will be dropped in the future.  In other\n-cases, the feature might be gone already.\n-\n-G++ allows a virtual function returning :samp:`void *` to be overridden\n-by one returning a different pointer type.  This extension to the\n-covariant return type rules is now deprecated and will be removed from a\n-future version.\n-\n-The use of default arguments in function pointers, function typedefs\n-and other places where they are not permitted by the standard is\n-deprecated and will be removed from a future version of G++.\n-\n-G++ allows floating-point literals to appear in integral constant expressions,\n-e.g. :samp:`enum E { e = int(2.2 * 3.7) }`\n-This extension is deprecated and will be removed from a future version.\n-\n-G++ allows static data members of const floating-point type to be declared\n-with an initializer in a class definition. The standard only allows\n-initializers for static members of const integral types and const\n-enumeration types so this extension has been deprecated and will be removed\n-from a future version.\n-\n-G++ allows attributes to follow a parenthesized direct initializer,\n-e.g. :samp:`int f (0) __attribute__ ((something));` This extension\n-has been ignored since G++ 3.3 and is deprecated.\n-\n-G++ allows anonymous structs and unions to have members that are not\n-public non-static data members (i.e. fields).  These extensions are\n-deprecated.\n\\ No newline at end of file"}, {"sha": "bae1efefcbd997640c1afb30c36a7b447308155f", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/extracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fextracting-the-function-pointer-from-a-bound-pointer-to-member-function.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,48 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: pmf, pointer to member function, bound pointer to member function\n-\n-.. _bound-member-functions:\n-\n-Extracting the Function Pointer from a Bound Pointer to Member Function\n-***********************************************************************\n-\n-In C++, pointer to member functions (PMFs) are implemented using a wide\n-pointer of sorts to handle all the possible call mechanisms; the PMF\n-needs to store information about how to adjust the :samp:`this` pointer,\n-and if the function pointed to is virtual, where to find the vtable, and\n-where in the vtable to look for the member function.  If you are using\n-PMFs in an inner loop, you should really reconsider that decision.  If\n-that is not an option, you can extract the pointer to the function that\n-would be called for a given object/PMF pair and call it directly inside\n-the inner loop, to save a bit of time.\n-\n-Note that you still pay the penalty for the call through a\n-function pointer; on most modern architectures, such a call defeats the\n-branch prediction features of the CPU.  This is also true of normal\n-virtual function calls.\n-\n-The syntax for this extension is\n-\n-.. code-block:: c++\n-\n-  extern A a;\n-  extern int (A::*fp)();\n-  typedef int (*fptr)(A *);\n-\n-  fptr p = (fptr)(a.*fp);\n-\n-For PMF constants (i.e. expressions of the form :samp:`&Klasse::Member`),\n-no object is needed to obtain the address of the function.  They can be\n-converted to function pointers directly:\n-\n-.. code-block:: c++\n-\n-  fptr p1 = (fptr)(&A::foo);\n-\n-.. index:: Wno-pmf-conversions\n-\n-You must specify :option:`-Wno-pmf-conversions` to use this extension.\n\\ No newline at end of file"}, {"sha": "2524ff5353cbfce5f2cbe0a5f522d80ea2bd9742", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/function-multiversioning.rst", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ffunction-multiversioning.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,65 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: function versions\n-\n-.. _function-multiversioning:\n-\n-Function Multiversioning\n-************************\n-\n-With the GNU C++ front end, for x86 targets, you may specify multiple\n-versions of a function, where each function is specialized for a\n-specific target feature.  At runtime, the appropriate version of the\n-function is automatically executed depending on the characteristics of\n-the execution platform.  Here is an example.\n-\n-.. code-block:: c++\n-\n-  __attribute__ ((target (\"default\")))\n-  int foo ()\n-  {\n-    // The default version of foo.\n-    return 0;\n-  }\n-\n-  __attribute__ ((target (\"sse4.2\")))\n-  int foo ()\n-  {\n-    // foo version for SSE4.2\n-    return 1;\n-  }\n-\n-  __attribute__ ((target (\"arch=atom\")))\n-  int foo ()\n-  {\n-    // foo version for the Intel ATOM processor\n-    return 2;\n-  }\n-\n-  __attribute__ ((target (\"arch=amdfam10\")))\n-  int foo ()\n-  {\n-    // foo version for the AMD Family 0x10 processors.\n-    return 3;\n-  }\n-\n-  int main ()\n-  {\n-    int (*p)() = &foo;\n-    assert ((*p) () == foo ());\n-    return 0;\n-  }\n-\n-In the above example, four versions of function foo are created. The\n-first version of foo with the target attribute \"default\" is the default\n-version.  This version gets executed when no other target specific\n-version qualifies for execution on a particular platform. A new version\n-of foo is created by using the same function signature but with a\n-different target string.  Function foo is called or a pointer to it is\n-taken just like a regular function.  GCC takes care of doing the\n-dispatching to call the right version at runtime.  Refer to the\n-`GCC wiki on\n-Function Multiversioning <https://gcc.gnu.org/wiki/FunctionMultiVersioning>`_ for more details.\n\\ No newline at end of file"}, {"sha": "971770c6463e507bb92544e36ade4d50f21025b8", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/restricting-pointer-aliasing.rst", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Frestricting-pointer-aliasing.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,52 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: restricted pointers, restricted references, restricted this pointer\n-\n-.. _restricted-pointers:\n-\n-Restricting Pointer Aliasing\n-****************************\n-\n-As with the C front end, G++ understands the C99 feature of restricted pointers,\n-specified with the ``__restrict__``, or ``__restrict`` type\n-qualifier.  Because you cannot compile C++ by specifying the :option:`-std=c99`\n-language flag, ``restrict`` is not a keyword in C++.\n-\n-In addition to allowing restricted pointers, you can specify restricted\n-references, which indicate that the reference is not aliased in the local\n-context.\n-\n-.. code-block:: c++\n-\n-  void fn (int *__restrict__ rptr, int &__restrict__ rref)\n-  {\n-    /* ... */\n-  }\n-\n-In the body of ``fn``, :samp:`{rptr}` points to an unaliased integer and\n-:samp:`{rref}` refers to a (different) unaliased integer.\n-\n-You may also specify whether a member function's :samp:`{this}` pointer is\n-unaliased by using ``__restrict__`` as a member function qualifier.\n-\n-.. code-block:: c++\n-\n-  void T::fn () __restrict__\n-  {\n-    /* ... */\n-  }\n-\n-Within the body of ``T::fn``, :samp:`{this}` has the effective\n-definition ``T *__restrict__ const this``.  Notice that the\n-interpretation of a ``__restrict__`` member function qualifier is\n-different to that of ``const`` or ``volatile`` qualifier, in that it\n-is applied to the pointer rather than the object.  This is consistent with\n-other compilers that implement restricted pointers.\n-\n-As with all outermost parameter qualifiers, ``__restrict__`` is\n-ignored in function definition matching.  This means you only need to\n-specify ``__restrict__`` in a function definition, rather than\n-in a function prototype as well.\n\\ No newline at end of file"}, {"sha": "3ce0a3779de127927d18839b1417dacdc839f988", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/type-traits.rst", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Ftype-traits.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,165 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _type-traits:\n-\n-Type Traits\n-***********\n-\n-The C++ front end implements syntactic extensions that allow\n-compile-time determination of\n-various characteristics of a type (or of a\n-pair of types).\n-\n-``__has_nothrow_assign (type)``\n-  If ``type`` is ``const`` -qualified or is a reference type then\n-  the trait is ``false``.  Otherwise if ``__has_trivial_assign (type)``\n-  is ``true`` then the trait is ``true``, else if ``type`` is\n-  a cv-qualified class or union type with copy assignment operators that are\n-  known not to throw an exception then the trait is ``true``, else it is\n-  ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_nothrow_copy (type)``\n-  If ``__has_trivial_copy (type)`` is ``true`` then the trait is\n-  ``true``, else if ``type`` is a cv-qualified class or union type\n-  with copy constructors that are known not to throw an exception then\n-  the trait is ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_nothrow_constructor (type)``\n-  If ``__has_trivial_constructor (type)`` is ``true`` then the trait\n-  is ``true``, else if ``type`` is a cv class or union type (or array\n-  thereof) with a default constructor that is known not to throw an\n-  exception then the trait is ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_trivial_assign (type)``\n-  If ``type`` is ``const`` - qualified or is a reference type then\n-  the trait is ``false``.  Otherwise if ``__is_trivial (type)`` is\n-  ``true`` then the trait is ``true``, else if ``type`` is\n-  a cv-qualified class or union type with a trivial copy assignment\n-  ([class.copy]) then the trait is ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_trivial_copy (type)``\n-  If ``__is_trivial (type)`` is ``true`` or ``type`` is a reference\n-  type then the trait is ``true``, else if ``type`` is a cv class\n-  or union type with a trivial copy constructor ([class.copy]) then the trait\n-  is ``true``, else it is ``false``.  Requires: ``type`` shall be\n-  a complete type, (possibly cv-qualified) ``void``, or an array of unknown\n-  bound.\n-\n-``__has_trivial_constructor (type)``\n-  If ``__is_trivial (type)`` is ``true`` then the trait is ``true``,\n-  else if ``type`` is a cv-qualified class or union type (or array thereof)\n-  with a trivial default constructor ([class.ctor]) then the trait is ``true``,\n-  else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_trivial_destructor (type)``\n-  If ``__is_trivial (type)`` is ``true`` or ``type`` is a reference type\n-  then the trait is ``true``, else if ``type`` is a cv class or union\n-  type (or array thereof) with a trivial destructor ([class.dtor]) then\n-  the trait is ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__has_virtual_destructor (type)``\n-  If ``type`` is a class type with a virtual destructor\n-  ([class.dtor]) then the trait is ``true``, else it is ``false``.\n-  Requires: If ``type`` is a non-union class type, it shall be a complete type.\n-\n-``__is_abstract (type)``\n-  If ``type`` is an abstract class ([class.abstract]) then the trait\n-  is ``true``, else it is ``false``.\n-  Requires: If ``type`` is a non-union class type, it shall be a complete type.\n-\n-``__is_aggregate (type)``\n-  If ``type`` is an aggregate type ([dcl.init.aggr]) the trait is\n-  ``true``, else it is ``false``.\n-  Requires: If ``type`` is a class type, it shall be a complete type.\n-\n-``__is_base_of (base_type, derived_type)``\n-  If ``base_type`` is a base class of ``derived_type``\n-  ([class.derived]) then the trait is ``true``, otherwise it is ``false``.\n-  Top-level cv-qualifications of ``base_type`` and\n-  ``derived_type`` are ignored.  For the purposes of this trait, a\n-  class type is considered is own base.\n-  Requires: if ``__is_class (base_type)`` and ``__is_class (derived_type)``\n-  are ``true`` and ``base_type`` and ``derived_type`` are not the same\n-  type (disregarding cv-qualifiers), ``derived_type`` shall be a complete\n-  type.  A diagnostic is produced if this requirement is not met.\n-\n-``__is_class (type)``\n-  If ``type`` is a cv-qualified class type, and not a union type\n-  ([basic.compound]) the trait is ``true``, else it is ``false``.\n-\n-``__is_empty (type)``\n-  If ``__is_class (type)`` is ``false`` then the trait is ``false``.\n-  Otherwise ``type`` is considered empty if and only if: ``type``\n-  has no non-static data members, or all non-static data members, if\n-  any, are bit-fields of length 0, and ``type`` has no virtual\n-  members, and ``type`` has no virtual base classes, and ``type``\n-  has no base classes ``base_type`` for which\n-  ``__is_empty (base_type)`` is ``false``.\n-  Requires: If ``type`` is a non-union class type, it shall be a complete type.\n-\n-``__is_enum (type)``\n-  If ``type`` is a cv enumeration type ([basic.compound]) the trait is\n-  ``true``, else it is ``false``.\n-\n-``__is_final (type)``\n-  If ``type`` is a class or union type marked ``final``, then the trait\n-  is ``true``, else it is ``false``.\n-  Requires: If ``type`` is a class type, it shall be a complete type.\n-\n-``__is_literal_type (type)``\n-  If ``type`` is a literal type ([basic.types]) the trait is\n-  ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__is_pod (type)``\n-  If ``type`` is a cv POD type ([basic.types]) then the trait is ``true``,\n-  else it is ``false``.\n-  Requires: ``type`` shall be a complete type, (possibly cv-qualified)\n-  ``void``, or an array of unknown bound.\n-\n-``__is_polymorphic (type)``\n-  If ``type`` is a polymorphic class ([class.virtual]) then the trait\n-  is ``true``, else it is ``false``.\n-  Requires: If ``type`` is a non-union class type, it shall be a complete type.\n-\n-``__is_standard_layout (type)``\n-  If ``type`` is a standard-layout type ([basic.types]) the trait is\n-  ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, an array of complete types,\n-  or (possibly cv-qualified) ``void``.\n-\n-``__is_trivial (type)``\n-  If ``type`` is a trivial type ([basic.types]) the trait is\n-  ``true``, else it is ``false``.\n-  Requires: ``type`` shall be a complete type, an array of complete types,\n-  or (possibly cv-qualified) ``void``.\n-\n-``__is_union (type)``\n-  If ``type`` is a cv union type ([basic.compound]) the trait is\n-  ``true``, else it is ``false``.\n-\n-``__underlying_type (type)``\n-  The underlying type of ``type``.\n-  Requires: ``type`` shall be an enumeration type ([dcl.enum]).\n-\n-``__integer_pack (length)``\n-  When used as the pattern of a pack expansion within a template\n-  definition, expands to a template argument pack containing integers\n-  from ``0`` to ``length-1``.  This is provided for efficient\n-  implementation of ``std::make_integer_sequence``.\n\\ No newline at end of file"}, {"sha": "7477d4d4191a9dca41702305fbcd19f88b0f1d06", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/vague-linkage.rst", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fvague-linkage.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,80 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: vague linkage\n-\n-.. _vague-linkage:\n-\n-Vague Linkage\n-*************\n-\n-There are several constructs in C++ that require space in the object\n-file but are not clearly tied to a single translation unit.  We say that\n-these constructs have 'vague linkage'.  Typically such constructs are\n-emitted wherever they are needed, though sometimes we can be more\n-clever.\n-\n-Inline Functions\n-  Inline functions are typically defined in a header file which can be\n-  included in many different compilations.  Hopefully they can usually be\n-  inlined, but sometimes an out-of-line copy is necessary, if the address\n-  of the function is taken or if inlining fails.  In general, we emit an\n-  out-of-line copy in all translation units where one is needed.  As an\n-  exception, we only emit inline virtual functions with the vtable, since\n-  it always requires a copy.\n-\n-  Local static variables and string constants used in an inline function\n-  are also considered to have vague linkage, since they must be shared\n-  between all inlined and out-of-line instances of the function.\n-\n-VTables\n-  C++ virtual functions are implemented in most compilers using a lookup\n-  table, known as a vtable.  The vtable contains pointers to the virtual\n-  functions provided by a class, and each object of the class contains a\n-  pointer to its vtable (or vtables, in some multiple-inheritance\n-  situations).  If the class declares any non-inline, non-pure virtual\n-  functions, the first one is chosen as the 'key method' for the class,\n-  and the vtable is only emitted in the translation unit where the key\n-  method is defined.\n-\n-  .. note::\n-\n-    If the chosen key method is later defined as inline, the\n-    vtable is still emitted in every translation unit that defines it.\n-    Make sure that any inline virtuals are declared inline in the class\n-    body, even if they are not defined there.\n-\n-:samp:`{type_info} objects`\n-  C++ requires information about types to be written out in order to\n-  implement :samp:`dynamic_cast`, :samp:`typeid` and exception handling.\n-  For polymorphic classes (classes with virtual functions), the :samp:`type_info`\n-  object is written out along with the vtable so that :samp:`dynamic_cast`\n-  can determine the dynamic type of a class object at run time.  For all\n-  other types, we write out the :samp:`type_info` object when it is used: when\n-  applying :samp:`typeid` to an expression, throwing an object, or\n-  referring to a type in a catch clause or exception specification.\n-\n-Template Instantiations\n-  Most everything in this section also applies to template instantiations,\n-  but there are other options as well.\n-  See :ref:`template-instantiation`.\n-\n-When used with GNU ld version 2.8 or later on an ELF system such as\n-GNU/Linux or Solaris 2, or on Microsoft Windows, duplicate copies of\n-these constructs will be discarded at link time.  This is known as\n-COMDAT support.\n-\n-On targets that don't support COMDAT, but do support weak symbols, GCC\n-uses them.  This way one copy overrides all the others, but\n-the unused copies still take up space in the executable.\n-\n-For targets that do not support either COMDAT or weak symbols,\n-most entities with vague linkage are emitted as local symbols to\n-avoid duplicate definition errors from the linker.  This does not happen\n-for local statics in inlines, however, as having multiple copies\n-almost certainly breaks things.\n-\n-See :ref:`c++-interface`, for\n-another way to control placement of these constructs.\n\\ No newline at end of file"}, {"sha": "f50f1ea62e414394a30f148a1f09c4ee2e2dd48c", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/when-is-a-volatile-c++-object-accessed.rst", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwhen-is-a-volatile-c%2B%2B-object-accessed.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,58 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: accessing volatiles, volatile read, volatile write, volatile access\n-\n-.. _c++-volatiles:\n-\n-When is a Volatile C++ Object Accessed?\n-***************************************\n-\n-The C++ standard differs from the C standard in its treatment of\n-volatile objects.  It fails to specify what constitutes a volatile\n-access, except to say that C++ should behave in a similar manner to C\n-with respect to volatiles, where possible.  However, the different\n-lvalueness of expressions between C and C++ complicate the behavior.\n-G++ behaves the same as GCC for volatile access, See :ref:`c-extensions`, for a description of GCC's behavior.\n-\n-The C and C++ language specifications differ when an object is\n-accessed in a void context:\n-\n-.. code-block:: c++\n-\n-  volatile int *src = somevalue;\n-  *src;\n-\n-The C++ standard specifies that such expressions do not undergo lvalue\n-to rvalue conversion, and that the type of the dereferenced object may\n-be incomplete.  The C++ standard does not specify explicitly that it\n-is lvalue to rvalue conversion that is responsible for causing an\n-access.  There is reason to believe that it is, because otherwise\n-certain simple expressions become undefined.  However, because it\n-would surprise most programmers, G++ treats dereferencing a pointer to\n-volatile object of complete type as GCC would do for an equivalent\n-type in C.  When the object has incomplete type, G++ issues a\n-warning; if you wish to force an error, you must force a conversion to\n-rvalue with, for instance, a static cast.\n-\n-When using a reference to volatile, G++ does not treat equivalent\n-expressions as accesses to volatiles, but instead issues a warning that\n-no volatile is accessed.  The rationale for this is that otherwise it\n-becomes difficult to determine where volatile access occur, and not\n-possible to ignore the return value from functions returning volatile\n-references.  Again, if you wish to force a read, cast the reference to\n-an rvalue.\n-\n-G++ implements the same behavior as GCC does when assigning to a\n-volatile object---there is no reread of the assigned-to object, the\n-assigned rvalue is reused.  Note that in C++ assignment expressions\n-are lvalues, and if used as an lvalue, the volatile object is\n-referred to.  For instance, :samp:`{vref}` refers to :samp:`{vobj}`, as\n-expected, in the following example:\n-\n-.. code-block:: c++\n-\n-  volatile int vobj;\n-  volatile int &vref = vobj = something;\n\\ No newline at end of file"}, {"sha": "722936705717f71d793d7ce0e524a007a406e6aa", "filename": "gcc/doc/gcc/extensions-to-the-c++-language/wheres-the-template.rst", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c%2B%2B-language%2Fwheres-the-template.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,131 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: template instantiation\n-\n-.. _template-instantiation:\n-\n-Where's the Template?\n-*********************\n-\n-C++ templates were the first language feature to require more\n-intelligence from the environment than was traditionally found on a UNIX\n-system.  Somehow the compiler and linker have to make sure that each\n-template instance occurs exactly once in the executable if it is needed,\n-and not at all otherwise.  There are two basic approaches to this\n-problem, which are referred to as the Borland model and the Cfront model.\n-\n-Borland model\n-  Borland C++ solved the template instantiation problem by adding the code\n-  equivalent of common blocks to their linker; the compiler emits template\n-  instances in each translation unit that uses them, and the linker\n-  collapses them together.  The advantage of this model is that the linker\n-  only has to consider the object files themselves; there is no external\n-  complexity to worry about.  The disadvantage is that compilation time\n-  is increased because the template code is being compiled repeatedly.\n-  Code written for this model tends to include definitions of all\n-  templates in the header file, since they must be seen to be\n-  instantiated.\n-\n-Cfront model\n-  The AT&T C++ translator, Cfront, solved the template instantiation\n-  problem by creating the notion of a template repository, an\n-  automatically maintained place where template instances are stored.  A\n-  more modern version of the repository works as follows: As individual\n-  object files are built, the compiler places any template definitions and\n-  instantiations encountered in the repository.  At link time, the link\n-  wrapper adds in the objects in the repository and compiles any needed\n-  instances that were not previously emitted.  The advantages of this\n-  model are more optimal compilation speed and the ability to use the\n-  system linker; to implement the Borland model a compiler vendor also\n-  needs to replace the linker.  The disadvantages are vastly increased\n-  complexity, and thus potential for error; for some code this can be\n-  just as transparent, but in practice it can been very difficult to build\n-  multiple programs in one directory and one program in multiple\n-  directories.  Code written for this model tends to separate definitions\n-  of non-inline member templates into a separate file, which should be\n-  compiled separately.\n-\n-G++ implements the Borland model on targets where the linker supports it,\n-including ELF targets (such as GNU/Linux), Mac OS X and Microsoft Windows.\n-Otherwise G++ implements neither automatic model.\n-\n-You have the following options for dealing with template instantiations:\n-\n-* Do nothing.  Code written for the Borland model works fine, but\n-  each translation unit contains instances of each of the templates it\n-  uses.  The duplicate instances will be discarded by the linker, but in\n-  a large program, this can lead to an unacceptable amount of code\n-  duplication in object files or shared libraries.\n-\n-  Duplicate instances of a template can be avoided by defining an explicit\n-  instantiation in one object file, and preventing the compiler from doing\n-  implicit instantiations in any other object files by using an explicit\n-  instantiation declaration, using the ``extern template`` syntax:\n-\n-  .. code-block:: c++\n-\n-    extern template int max (int, int);\n-\n-  This syntax is defined in the C++ 2011 standard, but has been supported by\n-  G++ and other compilers since well before 2011.\n-\n-  Explicit instantiations can be used for the largest or most frequently\n-  duplicated instances, without having to know exactly which other instances\n-  are used in the rest of the program.  You can scatter the explicit\n-  instantiations throughout your program, perhaps putting them in the\n-  translation units where the instances are used or the translation units\n-  that define the templates themselves; you can put all of the explicit\n-  instantiations you need into one big file; or you can create small files\n-  like\n-\n-  .. code-block:: c++\n-\n-    #include \"Foo.h\"\n-    #include \"Foo.cc\"\n-\n-    template class Foo<int>;\n-    template ostream& operator <<\n-                    (ostream&, const Foo<int>&);\n-\n-  for each of the instances you need, and create a template instantiation\n-  library from those.\n-\n-  This is the simplest option, but also offers flexibility and\n-  fine-grained control when necessary. It is also the most portable\n-  alternative and programs using this approach will work with most modern\n-  compilers.\n-\n-*\n-  .. index:: fno-implicit-templates\n-\n-  Compile your code with :option:`-fno-implicit-templates` to disable the\n-  implicit generation of template instances, and explicitly instantiate\n-  all the ones you use.  This approach requires more knowledge of exactly\n-  which instances you need than do the others, but it's less\n-  mysterious and allows greater control if you want to ensure that only\n-  the intended instances are used.\n-\n-  If you are using Cfront-model code, you can probably get away with not\n-  using :option:`-fno-implicit-templates` when compiling files that don't\n-  :samp:`#include` the member template definitions.\n-\n-  If you use one big file to do the instantiations, you may want to\n-  compile it without :option:`-fno-implicit-templates` so you get all of the\n-  instances required by your explicit instantiations (but not by any\n-  other files) without having to specify them as well.\n-\n-  In addition to forward declaration of explicit instantiations\n-  (with ``extern``), G++ has extended the template instantiation\n-  syntax to support instantiation of the compiler support data for a\n-  template class (i.e. the vtable) without instantiating any of its\n-  members (with ``inline``), and instantiation of only the static data\n-  members of a template class, without the support data or member\n-  functions (with ``static``):\n-\n-  .. code-block:: c++\n-\n-    inline template class Foo<int>;\n-    static template class Foo<int>;\n\\ No newline at end of file"}, {"sha": "e7a036003d2a5903764d34a2e02e0c814c58cffc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family.rst", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,92 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: extensions, C language, C language extensions, pedantic\n-\n-.. _c-extensions:\n-\n-Extensions to the C Language Family\n------------------------------------\n-\n-GNU C provides several language features not found in ISO standard C.\n-(The :option:`-pedantic` option directs GCC to print a warning message if\n-any of these features is used.)  To test for the availability of these\n-features in conditional compilation, check for a predefined macro\n-``__GNUC__``, which is always defined under GCC.\n-\n-These extensions are available in C and Objective-C.  Most of them are\n-also available in C++.  See :ref:`c++-extensions`, for extensions that apply *only* to C++.\n-\n-Some features that are in ISO C99 but not C90 or C++ are also, as\n-extensions, accepted by GCC in C90 mode and in C++.\n-\n-.. toctree::\n-  :maxdepth: 2\n-\n-  extensions-to-the-c-language-family/statements-and-declarations-in-expressions\n-  extensions-to-the-c-language-family/locally-declared-labels\n-  extensions-to-the-c-language-family/labels-as-values\n-  extensions-to-the-c-language-family/nested-functions\n-  extensions-to-the-c-language-family/nonlocal-gotos\n-  extensions-to-the-c-language-family/constructing-function-calls\n-  extensions-to-the-c-language-family/referring-to-a-type-with-typeof\n-  extensions-to-the-c-language-family/conditionals-with-omitted-operands\n-  extensions-to-the-c-language-family/128-bit-integers\n-  extensions-to-the-c-language-family/double-word-integers\n-  extensions-to-the-c-language-family/complex-numbers\n-  extensions-to-the-c-language-family/additional-floating-types\n-  extensions-to-the-c-language-family/half-precision-floating-point\n-  extensions-to-the-c-language-family/decimal-floating-types\n-  extensions-to-the-c-language-family/hex-floats\n-  extensions-to-the-c-language-family/fixed-point-types\n-  extensions-to-the-c-language-family/named-address-spaces\n-  extensions-to-the-c-language-family/arrays-of-length-zero\n-  extensions-to-the-c-language-family/structures-with-no-members\n-  extensions-to-the-c-language-family/arrays-of-variable-length\n-  extensions-to-the-c-language-family/macros-with-a-variable-number-of-arguments\n-  extensions-to-the-c-language-family/slightly-looser-rules-for-escaped-newlines\n-  extensions-to-the-c-language-family/non-lvalue-arrays-may-have-subscripts\n-  extensions-to-the-c-language-family/arithmetic-on-void-and-function-pointers\n-  extensions-to-the-c-language-family/pointer-arguments-in-variadic-functions\n-  extensions-to-the-c-language-family/pointers-to-arrays-with-qualifiers-work-as-expected\n-  extensions-to-the-c-language-family/non-constant-initializers\n-  extensions-to-the-c-language-family/compound-literals\n-  extensions-to-the-c-language-family/designated-initializers\n-  extensions-to-the-c-language-family/case-ranges\n-  extensions-to-the-c-language-family/cast-to-a-union-type\n-  extensions-to-the-c-language-family/mixed-declarations-labels-and-code\n-  extensions-to-the-c-language-family/declaring-attributes-of-functions\n-  extensions-to-the-c-language-family/specifying-attributes-of-variables\n-  extensions-to-the-c-language-family/specifying-attributes-of-types\n-  extensions-to-the-c-language-family/label-attributes\n-  extensions-to-the-c-language-family/enumerator-attributes\n-  extensions-to-the-c-language-family/statement-attributes\n-  extensions-to-the-c-language-family/attribute-syntax\n-  extensions-to-the-c-language-family/prototypes-and-old-style-function-definitions\n-  extensions-to-the-c-language-family/c++-style-comments\n-  extensions-to-the-c-language-family/dollar-signs-in-identifier-names\n-  extensions-to-the-c-language-family/the-character-esc-in-constants\n-  extensions-to-the-c-language-family/determining-the-alignment-of-functions-types-or-variables\n-  extensions-to-the-c-language-family/an-inline-function-is-as-fast-as-a-macro\n-  extensions-to-the-c-language-family/when-is-a-volatile-object-accessed\n-  extensions-to-the-c-language-family/how-to-use-inline-assembly-language-in-c-code\n-  extensions-to-the-c-language-family/alternate-keywords\n-  extensions-to-the-c-language-family/incomplete-enum-types\n-  extensions-to-the-c-language-family/function-names-as-strings\n-  extensions-to-the-c-language-family/getting-the-return-or-frame-address-of-a-function\n-  extensions-to-the-c-language-family/using-vector-instructions-through-built-in-functions\n-  extensions-to-the-c-language-family/support-for-offsetof\n-  extensions-to-the-c-language-family/legacy-sync-built-in-functions-for-atomic-memory-access\n-  extensions-to-the-c-language-family/built-in-functions-for-memory-model-aware-atomic-operations\n-  extensions-to-the-c-language-family/built-in-functions-to-perform-arithmetic-with-overflow-checking\n-  extensions-to-the-c-language-family/x86-specific-memory-model-extensions-for-transactional-memory\n-  extensions-to-the-c-language-family/object-size-checking-built-in-functions\n-  extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc\n-  extensions-to-the-c-language-family/target-builtins\n-  extensions-to-the-c-language-family/format-checks-specific-to-particular-target-machines\n-  extensions-to-the-c-language-family/pragmas-accepted-by-gcc\n-  extensions-to-the-c-language-family/unnamed-structure-and-union-fields\n-  extensions-to-the-c-language-family/thread-local-storage\n-  extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix\n\\ No newline at end of file"}, {"sha": "07376ba20aca089ed12b0877475dcfcc3fec40f0", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/128-bit-integers.rst", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2F128-bit-integers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,18 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: __int128 data types\n-\n-.. _int128:\n-\n-128-bit Integers\n-****************\n-\n-As an extension the integer scalar type ``__int128`` is supported for\n-targets which have an integer mode wide enough to hold 128 bits.\n-Simply write ``__int128`` for a signed 128-bit integer, or\n-``unsigned __int128`` for an unsigned 128-bit integer.  There is no\n-support in GCC for expressing an integer constant of type ``__int128``\n-for targets with ``long long`` integer less than 128 bits wide.\n\\ No newline at end of file"}, {"sha": "0746867bd42dad16c63bf3103fc3f799b91ff583", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/additional-floating-types.rst", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fadditional-floating-types.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,83 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: additional floating types, _Floatn data types, _Floatnx data types, __float80 data type, __float128 data type, __ibm128 data type, w floating point suffix, q floating point suffix, W floating point suffix, Q floating point suffix\n-\n-.. _floating-types:\n-\n-Additional Floating Types\n-*************************\n-\n-ISO/IEC TS 18661-3:2015 defines C support for additional floating\n-types ``_Floatn`` and ``_Floatnx``, and GCC supports\n-these type names; the set of types supported depends on the target\n-architecture.  These types are not supported when compiling C++.\n-Constants with these types use suffixes ``fn`` or\n-``Fn`` and ``fnx`` or ``Fnx``.  These type\n-names can be used together with ``_Complex`` to declare complex\n-types.\n-\n-As an extension, GNU C and GNU C++ support additional floating\n-types, which are not supported by all targets.\n-\n-* ``__float128`` is available on i386, x86_64, IA-64, and\n-  hppa HP-UX, as well as on PowerPC GNU/Linux targets that enable\n-  the vector scalar (VSX) instruction set.  ``__float128`` supports\n-  the 128-bit floating type.  On i386, x86_64, PowerPC, and IA-64\n-  other than HP-UX, ``__float128`` is an alias for ``_Float128``.\n-  On hppa and IA-64 HP-UX, ``__float128`` is an alias for ``long\n-  double``.\n-\n-* ``__float80`` is available on the i386, x86_64, and IA-64\n-  targets, and supports the 80-bit (``XFmode``) floating type.  It is\n-  an alias for the type name ``_Float64x`` on these targets.\n-\n-* ``__ibm128`` is available on PowerPC targets, and provides\n-  access to the IBM extended double format which is the current format\n-  used for ``long double``.  When ``long double`` transitions to\n-  ``__float128`` on PowerPC in the future, ``__ibm128`` will remain\n-  for use in conversions between the two types.\n-\n-Support for these additional types includes the arithmetic operators:\n-add, subtract, multiply, divide; unary arithmetic operators;\n-relational operators; equality operators; and conversions to and from\n-integer and other floating types.  Use a suffix :samp:`w` or :samp:`W`\n-in a literal constant of type ``__float80`` or type\n-``__ibm128``.  Use a suffix :samp:`q` or :samp:`Q` for ``__float128``.\n-\n-In order to use ``_Float128``, ``__float128``, and ``__ibm128``\n-on PowerPC Linux systems, you must use the :option:`-mfloat128` option. It is\n-expected in future versions of GCC that ``_Float128`` and ``__float128``\n-will be enabled automatically.\n-\n-The ``_Float128`` type is supported on all systems where\n-``__float128`` is supported or where ``long double`` has the\n-IEEE binary128 format.  The ``_Float64x`` type is supported on all\n-systems where ``__float128`` is supported.  The ``_Float32``\n-type is supported on all systems supporting IEEE binary32; the\n-``_Float64`` and ``_Float32x`` types are supported on all systems\n-supporting IEEE binary64.  The ``_Float16`` type is supported on AArch64\n-systems by default, on ARM systems when the IEEE format for 16-bit\n-floating-point types is selected with :option:`-mfp16-format=ieee` and,\n-for both C and C++, on x86 systems with SSE2 enabled. GCC does not currently\n-support ``_Float128x`` on any systems.\n-\n-On the i386, x86_64, IA-64, and HP-UX targets, you can declare complex\n-types using the corresponding internal complex type, ``XCmode`` for\n-``__float80`` type and ``TCmode`` for ``__float128`` type:\n-\n-.. code-block:: c++\n-\n-  typedef _Complex float __attribute__((mode(TC))) _Complex128;\n-  typedef _Complex float __attribute__((mode(XC))) _Complex80;\n-\n-On the PowerPC Linux VSX targets, you can declare complex types using\n-the corresponding internal complex type, ``KCmode`` for\n-``__float128`` type and ``ICmode`` for ``__ibm128`` type:\n-\n-.. code-block:: c++\n-\n-  typedef _Complex float __attribute__((mode(KC))) _Complex_float128;\n-  typedef _Complex float __attribute__((mode(IC))) _Complex_ibm128;\n\\ No newline at end of file"}, {"sha": "0abcf0fbc074c12ead0b0214bb9f4ab128c17a8a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/alternate-keywords.rst", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Falternate-keywords.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,46 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: alternate keywords, keywords, alternate\n-\n-.. _alternate-keywords:\n-\n-Alternate Keywords\n-******************\n-\n-:option:`-ansi` and the various :option:`-std` options disable certain\n-keywords.  This causes trouble when you want to use GNU C extensions, or\n-a general-purpose header file that should be usable by all programs,\n-including ISO C programs.  The keywords ``asm``, ``typeof`` and\n-``inline`` are not available in programs compiled with\n-:option:`-ansi` or :option:`-std` (although ``inline`` can be used in a\n-program compiled with :option:`-std=c99` or a later standard).  The\n-ISO C99 keyword\n-``restrict`` is only available when :option:`-std=gnu99` (which will\n-eventually be the default) or :option:`-std=c99` (or the equivalent\n-:option:`-std=iso9899:1999`), or an option for a later standard\n-version, is used.\n-\n-The way to solve these problems is to put :samp:`__` at the beginning and\n-end of each problematical keyword.  For example, use ``__asm__``\n-instead of ``asm``, and ``__inline__`` instead of ``inline``.\n-\n-Other C compilers won't accept these alternative keywords; if you want to\n-compile with another compiler, you can define the alternate keywords as\n-macros to replace them with the customary keywords.  It looks like this:\n-\n-.. code-block:: c++\n-\n-  #ifndef __GNUC__\n-  #define __asm__ asm\n-  #endif\n-\n-.. index:: __extension__, pedantic\n-\n-:option:`-pedantic` and other options cause warnings for many GNU C extensions.\n-You can\n-prevent such warnings within one expression by writing\n-``__extension__`` before the expression.  ``__extension__`` has no\n-effect aside from this.\n\\ No newline at end of file"}, {"sha": "ad82c416788699accd6766fbdfce6ee6b9019bb8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/an-inline-function-is-as-fast-as-a-macro.rst", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fan-inline-function-is-as-fast-as-a-macro.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,126 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: inline functions, integrating function code, open coding, macros, inline alternative\n-\n-.. _inline:\n-\n-An Inline Function is As Fast As a Macro\n-****************************************\n-\n-By declaring a function inline, you can direct GCC to make\n-calls to that function faster.  One way GCC can achieve this is to\n-integrate that function's code into the code for its callers.  This\n-makes execution faster by eliminating the function-call overhead; in\n-addition, if any of the actual argument values are constant, their\n-known values may permit simplifications at compile time so that not\n-all of the inline function's code needs to be included.  The effect on\n-code size is less predictable; object code may be larger or smaller\n-with function inlining, depending on the particular case.  You can\n-also direct GCC to try to integrate all 'simple enough' functions\n-into their callers with the option :option:`-finline-functions`.\n-\n-GCC implements three different semantics of declaring a function\n-inline.  One is available with :option:`-std=gnu89` or\n-:option:`-fgnu89-inline` or when :gcc-attr:`gnu_inline` attribute is present\n-on all inline declarations, another when\n-:option:`-std=c99`,\n-:option:`-std=gnu99` or an option for a later C version is used\n-(without :option:`-fgnu89-inline`), and the third\n-is used when compiling C++.\n-\n-To declare a function inline, use the ``inline`` keyword in its\n-declaration, like this:\n-\n-.. code-block:: c++\n-\n-  static inline int\n-  inc (int *a)\n-  {\n-    return (*a)++;\n-  }\n-\n-If you are writing a header file to be included in ISO C90 programs, write\n-``__inline__`` instead of ``inline``.  See :ref:`alternate-keywords`.\n-\n-The three types of inlining behave similarly in two important cases:\n-when the ``inline`` keyword is used on a ``static`` function,\n-like the example above, and when a function is first declared without\n-using the ``inline`` keyword and then is defined with\n-``inline``, like this:\n-\n-.. code-block:: c++\n-\n-  extern int inc (int *a);\n-  inline int\n-  inc (int *a)\n-  {\n-    return (*a)++;\n-  }\n-\n-In both of these common cases, the program behaves the same as if you\n-had not used the ``inline`` keyword, except for its speed.\n-\n-.. index:: inline functions, omission of, fkeep-inline-functions\n-\n-When a function is both inline and ``static``, if all calls to the\n-function are integrated into the caller, and the function's address is\n-never used, then the function's own assembler code is never referenced.\n-In this case, GCC does not actually output assembler code for the\n-function, unless you specify the option :option:`-fkeep-inline-functions`.\n-If there is a nonintegrated call, then the function is compiled to\n-assembler code as usual.  The function must also be compiled as usual if\n-the program refers to its address, because that cannot be inlined.\n-\n-.. index:: Winline\n-\n-Note that certain usages in a function definition can make it unsuitable\n-for inline substitution.  Among these usages are: variadic functions,\n-use of ``alloca``, use of computed goto (see :ref:`labels-as-values`),\n-use of nonlocal goto, use of nested functions, use of ``setjmp``, use\n-of ``__builtin_longjmp`` and use of ``__builtin_return`` or\n-``__builtin_apply_args``.  Using :option:`-Winline` warns when a\n-function marked ``inline`` could not be substituted, and gives the\n-reason for the failure.\n-\n-.. index:: automatic inline for C++ member fns, inline automatic for C++ member fns, member fns, automatically inline, C++ member fns, automatically inline, fno-default-inline\n-\n-As required by ISO C++, GCC considers member functions defined within\n-the body of a class to be marked inline even if they are\n-not explicitly declared with the ``inline`` keyword.  You can\n-override this with :option:`-fno-default-inline` ; see :ref:`c++-dialect-options`.\n-\n-GCC does not inline any functions when not optimizing unless you specify\n-the :samp:`always_inline` attribute for the function, like this:\n-\n-.. code-block:: c++\n-\n-  /* Prototype.  */\n-  inline void foo (const char) __attribute__((always_inline));\n-\n-The remainder of this section is specific to GNU C90 inlining.\n-\n-.. index:: non-static inline function\n-\n-When an inline function is not ``static``, then the compiler must assume\n-that there may be calls from other source files; since a global symbol can\n-be defined only once in any program, the function must not be defined in\n-the other source files, so the calls therein cannot be integrated.\n-Therefore, a non- ``static`` inline function is always compiled on its\n-own in the usual fashion.\n-\n-If you specify both ``inline`` and ``extern`` in the function\n-definition, then the definition is used only for inlining.  In no case\n-is the function compiled on its own, not even if you refer to its\n-address explicitly.  Such an address becomes an external reference, as\n-if you had only declared the function, and had not defined it.\n-\n-This combination of ``inline`` and ``extern`` has almost the\n-effect of a macro.  The way to use it is to put a function definition in\n-a header file with these keywords, and put another copy of the\n-definition (lacking ``inline`` and ``extern``) in a library file.\n-The definition in the header file causes most calls to the function\n-to be inlined.  If any uses of the function remain, they refer to\n-the single copy in the library.\n\\ No newline at end of file"}, {"sha": "dc966981259a1db4f76462adf1e2864e34c40d3f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arithmetic-on-void-and-function-pointers.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farithmetic-on-void-and-function-pointers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,23 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: void pointers, arithmetic, void, size of pointer to, function pointers, arithmetic, function, size of pointer to\n-\n-.. _pointer-arith:\n-\n-Arithmetic on void- and Function-Pointers\n-*****************************************\n-\n-In GNU C, addition and subtraction operations are supported on pointers to\n-``void`` and on pointers to functions.  This is done by treating the\n-size of a ``void`` or of a function as 1.\n-\n-A consequence of this is that ``sizeof`` is also allowed on ``void``\n-and on function types, and returns 1.\n-\n-.. index:: Wpointer-arith\n-\n-The option :option:`-Wpointer-arith` requests a warning if these extensions\n-are used.\n\\ No newline at end of file"}, {"sha": "7014206581427b45d4236079dff3df8a04c50e96", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arrays-of-length-zero.rst", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-length-zero.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,111 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: arrays of length zero, zero-length arrays, length-zero arrays, flexible array members\n-\n-.. _zero-length:\n-\n-Arrays of Length Zero\n-*********************\n-\n-Declaring zero-length arrays is allowed in GNU C as an extension.\n-A zero-length array can be useful as the last element of a structure\n-that is really a header for a variable-length object:\n-\n-.. code-block:: c++\n-\n-  struct line {\n-    int length;\n-    char contents[0];\n-  };\n-\n-  struct line *thisline = (struct line *)\n-    malloc (sizeof (struct line) + this_length);\n-  thisline->length = this_length;\n-\n-Although the size of a zero-length array is zero, an array member of\n-this kind may increase the size of the enclosing type as a result of tail\n-padding.  The offset of a zero-length array member from the beginning\n-of the enclosing structure is the same as the offset of an array with\n-one or more elements of the same type.  The alignment of a zero-length\n-array is the same as the alignment of its elements.\n-\n-Declaring zero-length arrays in other contexts, including as interior\n-members of structure objects or as non-member objects, is discouraged.\n-Accessing elements of zero-length arrays declared in such contexts is\n-undefined and may be diagnosed.\n-\n-In the absence of the zero-length array extension, in ISO C90\n-the ``contents`` array in the example above would typically be declared\n-to have a single element.  Unlike a zero-length array which only contributes\n-to the size of the enclosing structure for the purposes of alignment,\n-a one-element array always occupies at least as much space as a single\n-object of the type.  Although using one-element arrays this way is\n-discouraged, GCC handles accesses to trailing one-element array members\n-analogously to zero-length arrays.\n-\n-The preferred mechanism to declare variable-length types like\n-``struct line`` above is the ISO C99 :dfn:`flexible array member`,\n-with slightly different syntax and semantics:\n-\n-* Flexible array members are written as ``contents[]`` without\n-  the ``0``.\n-\n-* Flexible array members have incomplete type, and so the ``sizeof``\n-  operator may not be applied.  As a quirk of the original implementation\n-  of zero-length arrays, ``sizeof`` evaluates to zero.\n-\n-* Flexible array members may only appear as the last member of a\n-  ``struct`` that is otherwise non-empty.\n-\n-* A structure containing a flexible array member, or a union containing\n-  such a structure (possibly recursively), may not be a member of a\n-  structure or an element of an array.  (However, these uses are\n-  permitted by GCC as extensions.)\n-\n-Non-empty initialization of zero-length\n-arrays is treated like any case where there are more initializer\n-elements than the array holds, in that a suitable warning about 'excess\n-elements in array' is given, and the excess elements (all of them, in\n-this case) are ignored.\n-\n-GCC allows static initialization of flexible array members.\n-This is equivalent to defining a new structure containing the original\n-structure followed by an array of sufficient size to contain the data.\n-E.g. in the following, ``f1`` is constructed as if it were declared\n-like ``f2``.\n-\n-.. code-block:: c++\n-\n-  struct f1 {\n-    int x; int y[];\n-  } f1 = { 1, { 2, 3, 4 } };\n-\n-  struct f2 {\n-    struct f1 f1; int data[3];\n-  } f2 = { { 1 }, { 2, 3, 4 } };\n-\n-The convenience of this extension is that ``f1`` has the desired\n-type, eliminating the need to consistently refer to ``f2.f1``.\n-\n-This has symmetry with normal static arrays, in that an array of\n-unknown size is also written with ``[]``.\n-\n-Of course, this extension only makes sense if the extra data comes at\n-the end of a top-level object, as otherwise we would be overwriting\n-data at subsequent offsets.  To avoid undue complication and confusion\n-with initialization of deeply nested arrays, we simply disallow any\n-non-empty initialization except when the structure is the top-level\n-object.  For example:\n-\n-.. code-block:: c++\n-\n-  struct foo { int x; int y[]; };\n-  struct bar { struct foo z; };\n-\n-  struct foo a = { 1, { 2, 3, 4 } };        // Valid.\n-  struct bar b = { { 1, { 2, 3, 4 } } };    // Invalid.\n-  struct bar c = { { 1, { } } };            // Valid.\n-  struct foo d[1] = { { 1, { 2, 3, 4 } } };  // Invalid.\n\\ No newline at end of file"}, {"sha": "c0d0c12d3bd1361b0ba1cb62926039cffb4d6371", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/arrays-of-variable-length.rst", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Farrays-of-variable-length.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,99 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: variable-length arrays, arrays of variable length, VLAs\n-\n-.. _variable-length:\n-\n-Arrays of Variable Length\n-*************************\n-\n-Variable-length automatic arrays are allowed in ISO C99, and as an\n-extension GCC accepts them in C90 mode and in C++.  These arrays are\n-declared like any other automatic arrays, but with a length that is not\n-a constant expression.  The storage is allocated at the point of\n-declaration and deallocated when the block scope containing the declaration\n-exits.  For\n-example:\n-\n-.. code-block:: c++\n-\n-  FILE *\n-  concat_fopen (char *s1, char *s2, char *mode)\n-  {\n-    char str[strlen (s1) + strlen (s2) + 1];\n-    strcpy (str, s1);\n-    strcat (str, s2);\n-    return fopen (str, mode);\n-  }\n-\n-.. index:: scope of a variable length array, variable-length array scope, deallocating variable length arrays\n-\n-Jumping or breaking out of the scope of the array name deallocates the\n-storage.  Jumping into the scope is not allowed; you get an error\n-message for it.\n-\n-.. index:: variable-length array in a structure\n-\n-As an extension, GCC accepts variable-length arrays as a member of\n-a structure or a union.  For example:\n-\n-.. code-block:: c++\n-\n-  void\n-  foo (int n)\n-  {\n-    struct S { int x[n]; };\n-  }\n-\n-.. index:: alloca vs variable-length arrays\n-\n-You can use the function ``alloca`` to get an effect much like\n-variable-length arrays.  The function ``alloca`` is available in\n-many other C implementations (but not in all).  On the other hand,\n-variable-length arrays are more elegant.\n-\n-There are other differences between these two methods.  Space allocated\n-with ``alloca`` exists until the containing *function* returns.\n-The space for a variable-length array is deallocated as soon as the array\n-name's scope ends, unless you also use ``alloca`` in this scope.\n-\n-You can also use variable-length arrays as arguments to functions:\n-\n-.. code-block:: c++\n-\n-  struct entry\n-  tester (int len, char data[len][len])\n-  {\n-    /* ... */\n-  }\n-\n-The length of an array is computed once when the storage is allocated\n-and is remembered for the scope of the array in case you access it with\n-``sizeof``.\n-\n-If you want to pass the array first and the length afterward, you can\n-use a forward declaration in the parameter list---another GNU extension.\n-\n-.. code-block:: c++\n-\n-  struct entry\n-  tester (int len; char data[len][len], int len)\n-  {\n-    /* ... */\n-  }\n-\n-.. index:: parameter forward declaration\n-\n-The :samp:`int len` before the semicolon is a :dfn:`parameter forward\n-declaration`, and it serves the purpose of making the name ``len``\n-known when the declaration of ``data`` is parsed.\n-\n-You can write any number of such parameter forward declarations in the\n-parameter list.  They can be separated by commas or semicolons, but the\n-last one must end with a semicolon, which is followed by the 'real'\n-parameter declarations.  Each forward declaration must match a 'real'\n-declaration in parameter name and data type.  ISO C99 does not support\n-parameter forward declarations.\n\\ No newline at end of file"}, {"sha": "f8b52e5dd0a673e60d36cf0685634257a136ac81", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/attribute-syntax.rst", "status": "removed", "additions": 0, "deletions": 259, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fattribute-syntax.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,259 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: attribute syntax\n-\n-.. _attribute-syntax:\n-\n-Attribute Syntax\n-****************\n-\n-This section describes the syntax with which ``__attribute__`` may be\n-used, and the constructs to which attribute specifiers bind, for the C\n-language.  Some details may vary for C++ and Objective-C.  Because of\n-infelicities in the grammar for attributes, some forms described here\n-may not be successfully parsed in all cases.\n-\n-There are some problems with the semantics of attributes in C++.  For\n-example, there are no manglings for attributes, although they may affect\n-code generation, so problems may arise when attributed types are used in\n-conjunction with templates or overloading.  Similarly, ``typeid``\n-does not distinguish between types with different attributes.  Support\n-for attributes in C++ may be restricted in future to attributes on\n-declarations only, but not on nested declarators.\n-\n-See :ref:`function-attributes`, for details of the semantics of attributes\n-applying to functions.  See :ref:`variable-attributes`, for details of the\n-semantics of attributes applying to variables.  See :ref:`type-attributes`,\n-for details of the semantics of attributes applying to structure, union\n-and enumerated types.\n-See :ref:`label-attributes`, for details of the semantics of attributes\n-applying to labels.\n-See :ref:`enumerator-attributes`, for details of the semantics of attributes\n-applying to enumerators.\n-See :ref:`statement-attributes`, for details of the semantics of attributes\n-applying to statements.\n-\n-An :dfn:`attribute specifier` is of the form\n-``__attribute__ ((attribute-list))``.  An :dfn:`attribute list`\n-is a possibly empty comma-separated sequence of :dfn:`attributes`, where\n-each attribute is one of the following:\n-\n-* Empty.  Empty attributes are ignored.\n-\n-* An attribute name\n-  (which may be an identifier such as :fn-attr:`unused`, or a reserved\n-  word such as :fn-attr:`const`).\n-\n-* An attribute name followed by a parenthesized list of\n-  parameters for the attribute.\n-  These parameters take one of the following forms:\n-\n-  * An identifier.  For example, ``mode`` attributes use this form.\n-\n-  * An identifier followed by a comma and a non-empty comma-separated list\n-    of expressions.  For example, ``format`` attributes use this form.\n-\n-  * A possibly empty comma-separated list of expressions.  For example,\n-    ``format_arg`` attributes use this form with the list being a single\n-    integer constant expression, and ``alias`` attributes use this form\n-    with the list being a single string constant.\n-\n-An :dfn:`attribute specifier list` is a sequence of one or more attribute\n-specifiers, not separated by any other tokens.\n-\n-You may optionally specify attribute names with :samp:`__`\n-preceding and following the name.\n-This allows you to use them in header files without\n-being concerned about a possible macro of the same name.  For example,\n-you may use the attribute name ``__noreturn__`` instead of :fn-attr:`noreturn`.\n-\n-Label Attributes\n-^^^^^^^^^^^^^^^^\n-\n-In GNU C, an attribute specifier list may appear after the colon following a\n-label, other than a ``case`` or ``default`` label.  GNU C++ only permits\n-attributes on labels if the attribute specifier is immediately\n-followed by a semicolon (i.e., the label applies to an empty\n-statement).  If the semicolon is missing, C++ label attributes are\n-ambiguous, as it is permissible for a declaration, which could begin\n-with an attribute list, to be labelled in C++.  Declarations cannot be\n-labelled in C90 or C99, so the ambiguity does not arise there.\n-\n-Enumerator Attributes\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-In GNU C, an attribute specifier list may appear as part of an enumerator.\n-The attribute goes after the enumeration constant, before ``=``, if\n-present.  The optional attribute in the enumerator appertains to the\n-enumeration constant.  It is not possible to place the attribute after\n-the constant expression, if present.\n-\n-Statement Attributes\n-^^^^^^^^^^^^^^^^^^^^\n-\n-In GNU C, an attribute specifier list may appear as part of a null\n-statement.  The attribute goes before the semicolon.\n-\n-Type Attributes\n-^^^^^^^^^^^^^^^\n-\n-An attribute specifier list may appear as part of a ``struct``,\n-``union`` or ``enum`` specifier.  It may go either immediately\n-after the ``struct``, ``union`` or ``enum`` keyword, or after\n-the closing brace.  The former syntax is preferred.\n-Where attribute specifiers follow the closing brace, they are considered\n-to relate to the structure, union or enumerated type defined, not to any\n-enclosing declaration the type specifier appears in, and the type\n-defined is not complete until after the attribute specifiers.\n-\n-.. Otherwise, there would be the following problems: a shift/reduce\n-\n-.. conflict between attributes binding the struct/union/enum and\n-\n-.. binding to the list of specifiers/qualifiers; and \"aligned\"\n-\n-.. attributes could use sizeof for the structure, but the size could be\n-\n-.. changed later by \"packed\" attributes.\n-\n-All other attributes\n-^^^^^^^^^^^^^^^^^^^^\n-\n-Otherwise, an attribute specifier appears as part of a declaration,\n-counting declarations of unnamed parameters and type names, and relates\n-to that declaration (which may be nested in another declaration, for\n-example in the case of a parameter declaration), or to a particular declarator\n-within a declaration.  Where an\n-attribute specifier is applied to a parameter declared as a function or\n-an array, it should apply to the function or array rather than the\n-pointer to which the parameter is implicitly converted, but this is not\n-yet correctly implemented.\n-\n-Any list of specifiers and qualifiers at the start of a declaration may\n-contain attribute specifiers, whether or not such a list may in that\n-context contain storage class specifiers.  (Some attributes, however,\n-are essentially in the nature of storage class specifiers, and only make\n-sense where storage class specifiers may be used; for example,\n-``section``.)  There is one necessary limitation to this syntax: the\n-first old-style parameter declaration in a function definition cannot\n-begin with an attribute specifier, because such an attribute applies to\n-the function instead by syntax described below (which, however, is not\n-yet implemented in this case).  In some other cases, attribute\n-specifiers are permitted by this grammar but not yet supported by the\n-compiler.  All attribute specifiers in this place relate to the\n-declaration as a whole.  In the obsolescent usage where a type of\n-``int`` is implied by the absence of type specifiers, such a list of\n-specifiers and qualifiers may be an attribute specifier list with no\n-other specifiers or qualifiers.\n-\n-At present, the first parameter in a function prototype must have some\n-type specifier that is not an attribute specifier; this resolves an\n-ambiguity in the interpretation of ``void f(int\n-(__attribute__((foo)) x))``, but is subject to change.  At present, if\n-the parentheses of a function declarator contain only attributes then\n-those attributes are ignored, rather than yielding an error or warning\n-or implying a single parameter of type int, but this is subject to\n-change.\n-\n-An attribute specifier list may appear immediately before a declarator\n-(other than the first) in a comma-separated list of declarators in a\n-declaration of more than one identifier using a single list of\n-specifiers and qualifiers.  Such attribute specifiers apply\n-only to the identifier before whose declarator they appear.  For\n-example, in\n-\n-.. code-block:: c++\n-\n-  __attribute__((noreturn)) void d0 (void),\n-      __attribute__((format(printf, 1, 2))) d1 (const char *, ...),\n-       d2 (void);\n-\n-the :fn-attr:`noreturn` attribute applies to all the functions\n-declared; the ``format`` attribute only applies to ``d1``.\n-\n-An attribute specifier list may appear immediately before the comma,\n-``=`` or semicolon terminating the declaration of an identifier other\n-than a function definition.  Such attribute specifiers apply\n-to the declared object or function.  Where an\n-assembler name for an object or function is specified (see :ref:`asm-labels`), the attribute must follow the ``asm``\n-specification.\n-\n-An attribute specifier list may, in future, be permitted to appear after\n-the declarator in a function definition (before any old-style parameter\n-declarations or the function body).\n-\n-Attribute specifiers may be mixed with type qualifiers appearing inside\n-the ``[]`` of a parameter array declarator, in the C99 construct by\n-which such qualifiers are applied to the pointer to which the array is\n-implicitly converted.  Such attribute specifiers apply to the pointer,\n-not to the array, but at present this is not implemented and they are\n-ignored.\n-\n-An attribute specifier list may appear at the start of a nested\n-declarator.  At present, there are some limitations in this usage: the\n-attributes correctly apply to the declarator, but for most individual\n-attributes the semantics this implies are not implemented.\n-When attribute specifiers follow the ``*`` of a pointer\n-declarator, they may be mixed with any type qualifiers present.\n-The following describes the formal semantics of this syntax.  It makes the\n-most sense if you are familiar with the formal specification of\n-declarators in the ISO C standard.\n-\n-Consider (as in C99 subclause 6.7.5 paragraph 4) a declaration ``T\n-D1``, where ``T`` contains declaration specifiers that specify a type\n-:samp:`{Type}` (such as ``int``) and ``D1`` is a declarator that\n-contains an identifier :samp:`{ident}`.  The type specified for :samp:`{ident}`\n-for derived declarators whose type does not include an attribute\n-specifier is as in the ISO C standard.\n-\n-If ``D1`` has the form ``( attribute-specifier-list D )``,\n-and the declaration ``T D`` specifies the type\n-' :samp:`{derived-declarator-type-list}` :samp:`{Type}` ' for :samp:`{ident}`, then\n-``T D1`` specifies the type ' :samp:`{derived-declarator-type-list}`\n-:samp:`{attribute-specifier-list}` :samp:`{Type}` ' for :samp:`{ident}`.\n-\n-If ``D1`` has the form ``*\n-type-qualifier-and-attribute-specifier-list D``, and the\n-declaration ``T D`` specifies the type\n-' :samp:`{derived-declarator-type-list}` :samp:`{Type}` ' for :samp:`{ident}`, then\n-``T D1`` specifies the type ' :samp:`{derived-declarator-type-list}`\n-:samp:`{type-qualifier-and-attribute-specifier-list}` pointer to :samp:`{Type}` ' for\n-:samp:`{ident}`.\n-\n-For example,\n-\n-.. code-block:: c++\n-\n-  void (__attribute__((noreturn)) ****f) (void);\n-\n-specifies the type 'pointer to pointer to pointer to pointer to\n-non-returning function returning ``void`` '.  As another example,\n-\n-.. code-block:: c++\n-\n-  char *__attribute__((aligned(8))) *f;\n-\n-specifies the type 'pointer to 8-byte-aligned pointer to ``char`` '.\n-Note again that this does not work with most attributes; for example,\n-the usage of :samp:`aligned` and :samp:`noreturn` attributes given above\n-is not yet supported.\n-\n-For compatibility with existing code written for compiler versions that\n-did not implement attributes on nested declarators, some laxity is\n-allowed in the placing of attributes.  If an attribute that only applies\n-to types is applied to a declaration, it is treated as applying to\n-the type of that declaration.  If an attribute that only applies to\n-declarations is applied to the type of a declaration, it is treated\n-as applying to that declaration; and, for compatibility with code\n-placing the attributes immediately before the identifier declared, such\n-an attribute applied to a function return type is treated as\n-applying to the function type, and such an attribute applied to an array\n-element type is treated as applying to the array type.  If an\n-attribute that only applies to function types is applied to a\n-pointer-to-function type, it is treated as applying to the pointer\n-target type; if such an attribute is applied to a function return type\n-that is not a pointer-to-function type, it is treated as applying\n-to the function type.\n\\ No newline at end of file"}, {"sha": "640523abd6e625c2618007640533a81cdb8de9c7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/binary-constants-using-the-0b-prefix.rst", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbinary-constants-using-the-0b-prefix.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,29 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: Binary constants using the 0b prefix\n-\n-.. _binary-constants:\n-\n-Binary Constants using the 0b Prefix\n-************************************\n-\n-Integer constants can be written as binary constants, consisting of a\n-sequence of :samp:`0` and :samp:`1` digits, prefixed by :samp:`0b` or\n-:samp:`0B`.  This is particularly useful in environments that operate a\n-lot on the bit level (like microcontrollers).\n-\n-The following statements are identical:\n-\n-.. code-block:: c++\n-\n-  i =       42;\n-  i =     0x2a;\n-  i =      052;\n-  i = 0b101010;\n-\n-The type of these constants follows the same rules as for octal or\n-hexadecimal integer constants, so suffixes like :samp:`L` or :samp:`UL`\n-can be applied.\n\\ No newline at end of file"}, {"sha": "fcabf48e2137a712109348872306061b3f92c8fa", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/built-in-functions-for-memory-model-aware-atomic-operations.rst", "status": "removed", "additions": 0, "deletions": 290, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-for-memory-model-aware-atomic-operations.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,290 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _atomic-builtins:\n-\n-Built-in Functions for Memory Model Aware Atomic Operations\n-***********************************************************\n-\n-The following built-in functions approximately match the requirements\n-for the C++11 memory model.  They are all\n-identified by being prefixed with :samp:`__atomic` and most are\n-overloaded so that they work with multiple types.\n-\n-These functions are intended to replace the legacy :samp:`__sync`\n-builtins.  The main difference is that the memory order that is requested\n-is a parameter to the functions.  New code should always use the\n-:samp:`__atomic` builtins rather than the :samp:`__sync` builtins.\n-\n-Note that the :samp:`__atomic` builtins assume that programs will\n-conform to the C++11 memory model.  In particular, they assume\n-that programs are free of data races.  See the C++11 standard for\n-detailed requirements.\n-\n-The :samp:`__atomic` builtins can be used with any integral scalar or\n-pointer type that is 1, 2, 4, or 8 bytes in length.  16-byte integral\n-types are also allowed if :samp:`__int128` (see :ref:`int128`) is\n-supported by the architecture.\n-\n-The four non-arithmetic functions (load, store, exchange, and\n-compare_exchange) all have a generic version as well.  This generic\n-version works on any data type.  It uses the lock-free built-in function\n-if the specific data type size makes that possible; otherwise, an\n-external call is left to be resolved at run time.  This external call is\n-the same format with the addition of a :samp:`size_t` parameter inserted\n-as the first parameter indicating the size of the object being pointed to.\n-All objects must be the same size.\n-\n-There are 6 different memory orders that can be specified.  These map\n-to the C++11 memory orders with the same names, see the C++11 standard\n-or the `GCC wiki\n-on atomic synchronization <https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync>`_ for detailed definitions.  Individual\n-targets may also support additional memory orders for use on specific\n-architectures.  Refer to the target documentation for details of\n-these.\n-\n-An atomic operation can both constrain code motion and\n-be mapped to hardware instructions for synchronization between threads\n-(e.g., a fence).  To which extent this happens is controlled by the\n-memory orders, which are listed here in approximately ascending order of\n-strength.  The description of each memory order is only meant to roughly\n-illustrate the effects and is not a specification; see the C++11\n-memory model for precise semantics.\n-\n-``__ATOMIC_RELAXED``\n-  Implies no inter-thread ordering constraints.\n-\n-``__ATOMIC_CONSUME``\n-  This is currently implemented using the stronger ``__ATOMIC_ACQUIRE``\n-  memory order because of a deficiency in C++11's semantics for\n-  ``memory_order_consume``.\n-\n-``__ATOMIC_ACQUIRE``\n-  Creates an inter-thread happens-before constraint from the release (or\n-  stronger) semantic store to this acquire load.  Can prevent hoisting\n-  of code to before the operation.\n-\n-``__ATOMIC_RELEASE``\n-  Creates an inter-thread happens-before constraint to acquire (or stronger)\n-  semantic loads that read from this release store.  Can prevent sinking\n-  of code to after the operation.\n-\n-``__ATOMIC_ACQ_REL``\n-  Combines the effects of both ``__ATOMIC_ACQUIRE`` and\n-  ``__ATOMIC_RELEASE``.\n-\n-``__ATOMIC_SEQ_CST``\n-  Enforces total ordering with all other ``__ATOMIC_SEQ_CST`` operations.\n-\n-Note that in the C++11 memory model, *fences* (e.g.,\n-:samp:`__atomic_thread_fence`) take effect in combination with other\n-atomic operations on specific memory locations (e.g., atomic loads);\n-operations on specific memory locations do not necessarily affect other\n-operations in the same way.\n-\n-Target architectures are encouraged to provide their own patterns for\n-each of the atomic built-in functions.  If no target is provided, the original\n-non-memory model set of :samp:`__sync` atomic built-in functions are\n-used, along with any required synchronization fences surrounding it in\n-order to achieve the proper behavior.  Execution in this case is subject\n-to the same restrictions as those built-in functions.\n-\n-If there is no pattern or mechanism to provide a lock-free instruction\n-sequence, a call is made to an external routine with the same parameters\n-to be resolved at run time.\n-\n-When implementing patterns for these built-in functions, the memory order\n-parameter can be ignored as long as the pattern implements the most\n-restrictive ``__ATOMIC_SEQ_CST`` memory order.  Any of the other memory\n-orders execute correctly with this memory order but they may not execute as\n-efficiently as they could with a more appropriate implementation of the\n-relaxed requirements.\n-\n-Note that the C++11 standard allows for the memory order parameter to be\n-determined at run time rather than at compile time.  These built-in\n-functions map any run-time value to ``__ATOMIC_SEQ_CST`` rather\n-than invoke a runtime library call or inline a switch statement.  This is\n-standard compliant, safe, and the simplest approach for now.\n-\n-The memory order parameter is a signed int, but only the lower 16 bits are\n-reserved for the memory order.  The remainder of the signed int is reserved\n-for target use and should be 0.  Use of the predefined atomic values\n-ensures proper usage.\n-\n-.. function:: type __atomic_load_n (type *ptr, int memorder)\n-\n-  This built-in function implements an atomic load operation.  It returns the\n-  contents of ``*ptr``.\n-\n-  The valid memory order variants are\n-  ``__ATOMIC_RELAXED``, ``__ATOMIC_SEQ_CST``, ``__ATOMIC_ACQUIRE``,\n-  and ``__ATOMIC_CONSUME``.\n-\n-.. function:: void __atomic_load (type *ptr, type *ret, int memorder)\n-\n-  This is the generic version of an atomic load.  It returns the\n-  contents of ``*ptr`` in ``*ret``.\n-\n-.. function:: void __atomic_store_n (type *ptr, type val, int memorder)\n-\n-  This built-in function implements an atomic store operation.  It writes\n-  ``val`` into ``*ptr``.\n-\n-  The valid memory order variants are\n-  ``__ATOMIC_RELAXED``, ``__ATOMIC_SEQ_CST``, and ``__ATOMIC_RELEASE``.\n-\n-.. function:: void __atomic_store (type *ptr, type *val, int memorder)\n-\n-  This is the generic version of an atomic store.  It stores the value\n-  of ``*val`` into ``*ptr``.\n-\n-.. function:: type __atomic_exchange_n (type *ptr, type val, int memorder)\n-\n-  This built-in function implements an atomic exchange operation.  It writes\n-  :samp:`{val}` into ``*ptr``, and returns the previous contents of\n-  ``*ptr``.\n-\n-  All memory order variants are valid.\n-\n-.. function:: void __atomic_exchange (type *ptr, type *val, type *ret, int memorder)\n-\n-  This is the generic version of an atomic exchange.  It stores the\n-  contents of ``*val`` into ``*ptr``. The original value\n-  of ``*ptr`` is copied into ``*ret``.\n-\n-.. function:: bool __atomic_compare_exchange_n (type *ptr, type *expected, type desired, bool weak, int success_memorder, int failure_memorder)\n-\n-  This built-in function implements an atomic compare and exchange operation.\n-  This compares the contents of ``*ptr`` with the contents of\n-  ``*expected``. If equal, the operation is a *read-modify-write*\n-  operation that writes :samp:`{desired}` into ``*ptr``.  If they are not\n-  equal, the operation is a *read* and the current contents of\n-  ``*ptr`` are written into ``*expected``.  :samp:`{weak}` is ``true``\n-  for weak compare_exchange, which may fail spuriously, and ``false`` for\n-  the strong variation, which never fails spuriously.  Many targets\n-  only offer the strong variation and ignore the parameter.  When in doubt, use\n-  the strong variation.\n-\n-  If :samp:`{desired}` is written into ``*ptr`` then ``true`` is returned\n-  and memory is affected according to the\n-  memory order specified by :samp:`{success_memorder}`.  There are no\n-  restrictions on what memory order can be used here.\n-\n-  Otherwise, ``false`` is returned and memory is affected according\n-  to :samp:`{failure_memorder}`. This memory order cannot be\n-  ``__ATOMIC_RELEASE`` nor ``__ATOMIC_ACQ_REL``.  It also cannot be a\n-  stronger order than that specified by :samp:`{success_memorder}`.\n-\n-.. function:: bool __atomic_compare_exchange (type *ptr, type *expected, type *desired, bool weak, int success_memorder, int failure_memorder)\n-\n-  This built-in function implements the generic version of\n-  ``__atomic_compare_exchange``.  The function is virtually identical to\n-  ``__atomic_compare_exchange_n``, except the desired value is also a\n-  pointer.\n-\n-.. function:: type __atomic_add_fetch (type *ptr, type val, int memorder)\n-              type __atomic_sub_fetch (type *ptr, type val, int memorder)\n-              type __atomic_and_fetch (type *ptr, type val, int memorder)\n-              type __atomic_xor_fetch (type *ptr, type val, int memorder)\n-              type __atomic_or_fetch (type *ptr, type val, int memorder)\n-              type __atomic_nand_fetch (type *ptr, type val, int memorder)\n-\n-  These built-in functions perform the operation suggested by the name, and\n-  return the result of the operation.  Operations on pointer arguments are\n-  performed as if the operands were of the ``uintptr_t`` type.  That is,\n-  they are not scaled by the size of the type to which the pointer points.\n-\n-  .. code-block:: c++\n-\n-    { *ptr op= val; return *ptr; }\n-    { *ptr = ~(*ptr & val); return *ptr; } // nand\n-\n-  The object pointed to by the first argument must be of integer or pointer\n-  type.  It must not be a boolean type.  All memory orders are valid.\n-\n-.. function:: type __atomic_fetch_add (type *ptr, type val, int memorder)\n-              type __atomic_fetch_sub (type *ptr, type val, int memorder)\n-              type __atomic_fetch_and (type *ptr, type val, int memorder)\n-              type __atomic_fetch_xor (type *ptr, type val, int memorder)\n-              type __atomic_fetch_or (type *ptr, type val, int memorder)\n-              type __atomic_fetch_nand (type *ptr, type val, int memorder)\n-\n-  These built-in functions perform the operation suggested by the name, and\n-  return the value that had previously been in ``*ptr``.  Operations\n-  on pointer arguments are performed as if the operands were of\n-  the ``uintptr_t`` type.  That is, they are not scaled by the size of\n-  the type to which the pointer points.\n-\n-  .. code-block:: c++\n-\n-    { tmp = *ptr; *ptr op= val; return tmp; }\n-    { tmp = *ptr; *ptr = ~(*ptr & val); return tmp; } // nand\n-\n-  The same constraints on arguments apply as for the corresponding\n-  ``__atomic_op_fetch`` built-in functions.  All memory orders are valid.\n-\n-.. function:: bool __atomic_test_and_set (void *ptr, int memorder)\n-\n-  This built-in function performs an atomic test-and-set operation on\n-  the byte at ``*ptr``.  The byte is set to some implementation\n-  defined nonzero 'set' value and the return value is ``true`` if and only\n-  if the previous contents were 'set'.\n-  It should be only used for operands of type ``bool`` or ``char``. For\n-  other types only part of the value may be set.\n-\n-  All memory orders are valid.\n-\n-.. function:: void __atomic_clear (bool *ptr, int memorder)\n-\n-  This built-in function performs an atomic clear operation on\n-  ``*ptr``.  After the operation, ``*ptr`` contains 0.\n-  It should be only used for operands of type ``bool`` or ``char`` and\n-  in conjunction with ``__atomic_test_and_set``.\n-  For other types it may only clear partially. If the type is not ``bool``\n-  prefer using ``__atomic_store``.\n-\n-  The valid memory order variants are\n-  ``__ATOMIC_RELAXED``, ``__ATOMIC_SEQ_CST``, and\n-  ``__ATOMIC_RELEASE``.\n-\n-.. function:: void __atomic_thread_fence (int memorder)\n-\n-  This built-in function acts as a synchronization fence between threads\n-  based on the specified memory order.\n-\n-  All memory orders are valid.\n-\n-.. function:: void __atomic_signal_fence (int memorder)\n-\n-  This built-in function acts as a synchronization fence between a thread\n-  and signal handlers based in the same thread.\n-\n-  All memory orders are valid.\n-\n-.. function:: bool __atomic_always_lock_free (size_t size,  void *ptr)\n-\n-  This built-in function returns ``true`` if objects of :samp:`{size}` bytes always\n-  generate lock-free atomic instructions for the target architecture.\n-  :samp:`{size}` must resolve to a compile-time constant and the result also\n-  resolves to a compile-time constant.\n-\n-  :samp:`{ptr}` is an optional pointer to the object that may be used to determine\n-  alignment.  A value of 0 indicates typical alignment should be used.  The\n-  compiler may also ignore this parameter.\n-\n-  .. code-block:: c++\n-\n-    if (__atomic_always_lock_free (sizeof (long long), 0))\n-\n-.. function:: bool __atomic_is_lock_free (size_t size, void *ptr)\n-\n-  This built-in function returns ``true`` if objects of :samp:`{size}` bytes always\n-  generate lock-free atomic instructions for the target architecture.  If\n-  the built-in function is not known to be lock-free, a call is made to a\n-  runtime routine named ``__atomic_is_lock_free``.\n-\n-  :samp:`{ptr}` is an optional pointer to the object that may be used to determine\n-  alignment.  A value of 0 indicates typical alignment should be used.  The\n-  compiler may also ignore this parameter.\n\\ No newline at end of file"}, {"sha": "a7927b15195f1624a870efa9709a6f63927817c0", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/built-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fbuilt-in-functions-to-perform-arithmetic-with-overflow-checking.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,102 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _integer-overflow-builtins:\n-\n-Built-in Functions to Perform Arithmetic with Overflow Checking\n-***************************************************************\n-\n-The following built-in functions allow performing simple arithmetic operations\n-together with checking whether the operations overflowed.\n-\n-.. function:: bool __builtin_add_overflow (type1 a, type2 b, type3 *res)\n-              bool __builtin_sadd_overflow (int a, int b, int *res)\n-              bool __builtin_saddl_overflow (long int a, long int b, long int *res)\n-              bool __builtin_saddll_overflow (long long int a, long long int b, long long int *res)\n-              bool __builtin_uadd_overflow (unsigned int a, unsigned int b, unsigned int *res)\n-              bool __builtin_uaddl_overflow (unsigned long int a, unsigned long int b, unsigned long int *res)\n-              bool __builtin_uaddll_overflow (unsigned long long int a, unsigned long long int b, unsigned long long int *res)\n-\n-  These built-in functions promote the first two operands into infinite precision signed\n-  type and perform addition on those promoted operands.  The result is then\n-  cast to the type the third pointer argument points to and stored there.\n-  If the stored result is equal to the infinite precision result, the built-in\n-  functions return ``false``, otherwise they return ``true``.  As the addition is\n-  performed in infinite signed precision, these built-in functions have fully defined\n-  behavior for all argument values.\n-\n-  The first built-in function allows arbitrary integral types for operands and\n-  the result type must be pointer to some integral type other than enumerated or\n-  boolean type, the rest of the built-in functions have explicit integer types.\n-\n-  The compiler will attempt to use hardware instructions to implement\n-  these built-in functions where possible, like conditional jump on overflow\n-  after addition, conditional jump on carry etc.\n-\n-.. function:: bool __builtin_sub_overflow (type1 a, type2 b, type3 *res)\n-              bool __builtin_ssub_overflow (int a, int b, int *res)\n-              bool __builtin_ssubl_overflow (long int a, long int b, long int *res)\n-              bool __builtin_ssubll_overflow (long long int a, long long int b, long long int *res)\n-              bool __builtin_usub_overflow (unsigned int a, unsigned int b, unsigned int *res)\n-              bool __builtin_usubl_overflow (unsigned long int a, unsigned long int b, unsigned long int *res)\n-              bool __builtin_usubll_overflow (unsigned long long int a, unsigned long long int b, unsigned long long int *res)\n-\n-  These built-in functions are similar to the add overflow checking built-in\n-  functions above, except they perform subtraction, subtract the second argument\n-  from the first one, instead of addition.\n-\n-.. function:: bool __builtin_mul_overflow (type1 a, type2 b, type3 *res)\n-              bool __builtin_smul_overflow (int a, int b, int *res)\n-              bool __builtin_smull_overflow (long int a, long int b, long int *res)\n-              bool __builtin_smulll_overflow (long long int a, long long int b, long long int *res)\n-              bool __builtin_umul_overflow (unsigned int a, unsigned int b, unsigned int *res)\n-              bool __builtin_umull_overflow (unsigned long int a, unsigned long int b, unsigned long int *res)\n-              bool __builtin_umulll_overflow (unsigned long long int a, unsigned long long int b, unsigned long long int *res)\n-\n-  These built-in functions are similar to the add overflow checking built-in\n-  functions above, except they perform multiplication, instead of addition.\n-\n-The following built-in functions allow checking if simple arithmetic operation\n-would overflow.\n-\n-.. function:: bool __builtin_add_overflow_p (type1 a, type2 b, type3 c)\n-              bool __builtin_sub_overflow_p (type1 a, type2 b, type3 c)\n-              bool __builtin_mul_overflow_p (type1 a, type2 b, type3 c)\n-\n-  These built-in functions are similar to ``__builtin_add_overflow``,\n-  ``__builtin_sub_overflow``, or ``__builtin_mul_overflow``, except that\n-  they don't store the result of the arithmetic operation anywhere and the\n-  last argument is not a pointer, but some expression with integral type other\n-  than enumerated or boolean type.\n-\n-  The built-in functions promote the first two operands into infinite precision signed type\n-  and perform addition on those promoted operands. The result is then\n-  cast to the type of the third argument.  If the cast result is equal to the infinite\n-  precision result, the built-in functions return ``false``, otherwise they return ``true``.\n-  The value of the third argument is ignored, just the side effects in the third argument\n-  are evaluated, and no integral argument promotions are performed on the last argument.\n-  If the third argument is a bit-field, the type used for the result cast has the\n-  precision and signedness of the given bit-field, rather than precision and signedness\n-  of the underlying type.\n-\n-  For example, the following macro can be used to portably check, at\n-  compile-time, whether or not adding two constant integers will overflow,\n-  and perform the addition only when it is known to be safe and not to trigger\n-  a :option:`-Woverflow` warning.\n-\n-  .. code-block:: c++\n-\n-    #define INT_ADD_OVERFLOW_P(a, b) \\\n-       __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)\n-\n-    enum {\n-        A = INT_MAX, B = 3,\n-        C = INT_ADD_OVERFLOW_P (A, B) ? 0 : A + B,\n-        D = __builtin_add_overflow_p (1, SCHAR_MAX, (signed char) 0)\n-    };\n-\n-  The compiler will attempt to use hardware instructions to implement\n-  these built-in functions where possible, like conditional jump on overflow\n-  after addition, conditional jump on carry etc.\n\\ No newline at end of file"}, {"sha": "c1815e8c02a07858fd812a50d4974f8bd1a24dfa", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/c++-style-comments.rst", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fc%2B%2B-style-comments.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,18 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: //, C++ comments, comments, C++ style\n-\n-.. _c++-comments:\n-\n-C++ Style Comments\n-******************\n-\n-In GNU C, you may use C++ style comments, which start with :samp:`//` and\n-continue until the end of the line.  Many other C implementations allow\n-such comments, and they are included in the 1999 C standard.  However,\n-C++ style comments are not recognized if you specify an :option:`-std`\n-option specifying a version of ISO C before C99, or :option:`-ansi`\n-(equivalent to :option:`-std=c90`).\n\\ No newline at end of file"}, {"sha": "ad5aa534a1238e59a39bd45cbeba81794efacf6d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/case-ranges.rst", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcase-ranges.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,43 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: case ranges, ranges in case statements\n-\n-.. _case-ranges:\n-\n-Case Ranges\n-***********\n-\n-You can specify a range of consecutive values in a single ``case`` label,\n-like this:\n-\n-.. code-block:: c++\n-\n-  case low ... high:\n-\n-This has the same effect as the proper number of individual ``case``\n-labels, one for each integer value from :samp:`{low}` to :samp:`{high}`, inclusive.\n-\n-This feature is especially useful for ranges of ASCII character codes:\n-\n-.. code-block:: c++\n-\n-  case 'A' ... 'Z':\n-\n-.. caution::\n-\n-  Write spaces around the ``...``, for otherwise\n-  it may be parsed wrong when you use it with integer values.  For example,\n-  write this:\n-\n-.. code-block:: c++\n-\n-  case 1 ... 5:\n-\n-rather than this:\n-\n-.. code-block:: c++\n-\n-  case 1...5:\n\\ No newline at end of file"}, {"sha": "4a02d878da3fbe11ec85e0f7e676dc3500df95ea", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/cast-to-a-union-type.rst", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcast-to-a-union-type.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,69 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: cast to a union, union, casting to a\n-\n-.. _cast-to-union:\n-\n-Cast to a Union Type\n-********************\n-\n-A cast to a union type is a C extension not available in C++.  It looks\n-just like ordinary casts with the constraint that the type specified is\n-a union type.  You can specify the type either with the ``union``\n-keyword or with a ``typedef`` name that refers to a union.  The result\n-of a cast to a union is a temporary rvalue of the union type with a member\n-whose type matches that of the operand initialized to the value of\n-the operand.  The effect of a cast to a union is similar to a compound\n-literal except that it yields an rvalue like standard casts do.\n-See :ref:`compound-literals`.\n-\n-Expressions that may be cast to the union type are those whose type matches\n-at least one of the members of the union.  Thus, given the following union\n-and variables:\n-\n-.. code-block:: c++\n-\n-  union foo { int i; double d; };\n-  int x;\n-  double y;\n-  union foo z;\n-\n-both ``x`` and ``y`` can be cast to type ``union foo`` and\n-the following assignments\n-\n-.. code-block:: c++\n-\n-    z = (union foo) x;\n-    z = (union foo) y;\n-\n-are shorthand equivalents of these\n-\n-.. code-block:: c++\n-\n-    z = (union foo) { .i = x };\n-    z = (union foo) { .d = y };\n-\n-However, ``(union foo) FLT_MAX;`` is not a valid cast because the union\n-has no member of type ``float``.\n-\n-Using the cast as the right-hand side of an assignment to a variable of\n-union type is equivalent to storing in a member of the union with\n-the same type\n-\n-.. code-block:: c++\n-\n-  union foo u;\n-  /* ... */\n-  u = (union foo) x  ==  u.i = x\n-  u = (union foo) y  ==  u.d = y\n-\n-You can also use the union cast as a function argument:\n-\n-.. code-block:: c++\n-\n-  void hack (union foo);\n-  /* ... */\n-  hack ((union foo) x);\n\\ No newline at end of file"}, {"sha": "c8819cc1d8d6b257c61a9b4100925c964e300bf7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/complex-numbers.rst", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcomplex-numbers.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,122 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: complex numbers, _Complex keyword, __complex__ keyword\n-\n-.. _complex:\n-\n-Complex Numbers\n-***************\n-\n-ISO C99 supports complex floating data types, and as an extension GCC\n-supports them in C90 mode and in C++.  GCC also supports complex integer data\n-types which are not part of ISO C99.  You can declare complex types\n-using the keyword ``_Complex``.  As an extension, the older GNU\n-keyword ``__complex__`` is also supported.\n-\n-For example, :samp:`_Complex double x;` declares ``x`` as a\n-variable whose real part and imaginary part are both of type\n-``double``.  :samp:`_Complex short int y;` declares ``y`` to\n-have real and imaginary parts of type ``short int`` ; this is not\n-likely to be useful, but it shows that the set of complex types is\n-complete.\n-\n-To write a constant with a complex data type, use the suffix :samp:`i` or\n-:samp:`j` (either one; they are equivalent).  For example, ``2.5fi``\n-has type ``_Complex float`` and ``3i`` has type\n-``_Complex int``.  Such a constant always has a pure imaginary\n-value, but you can form any complex value you like by adding one to a\n-real constant.  This is a GNU extension; if you have an ISO C99\n-conforming C library (such as the GNU C Library), and want to construct complex\n-constants of floating type, you should include ``<complex.h>`` and\n-use the macros ``I`` or ``_Complex_I`` instead.\n-\n-The ISO C++14 library also defines the :samp:`i` suffix, so C++14 code\n-that includes the :samp:`<complex>` header cannot use :samp:`i` for the\n-GNU extension.  The :samp:`j` suffix still has the GNU meaning.\n-\n-GCC can handle both implicit and explicit casts between the ``_Complex``\n-types and other ``_Complex`` types as casting both the real and imaginary\n-parts to the scalar type.\n-GCC can handle implicit and explicit casts from a scalar type to a ``_Complex``\n-type and where the imaginary part will be considered zero.\n-The C front-end can handle implicit and explicit casts from a ``_Complex`` type\n-to a scalar type where the imaginary part will be ignored. In C++ code, this cast\n-is considered illformed and G++ will error out.\n-\n-GCC provides a built-in function ``__builtin_complex`` will can be used to\n-construct a complex value.\n-\n-.. index:: __real__ keyword, __imag__ keyword\n-\n-GCC has a few extensions which can be used to extract the real\n-and the imaginary part of the complex-valued expression. Note\n-these expressions are lvalues if the :samp:`{exp}` is an lvalue.\n-These expressions operands have the type of a complex type\n-which might get prompoted to a complex type from a scalar type.\n-E.g. ``__real__ (int)x`` is the same as casting to\n-``_Complex int`` before ``__real__`` is done.\n-\n-.. list-table::\n-   :header-rows: 1\n-\n-   * - Expression\n-     - Description\n-\n-   * - ``__real__ exp``\n-     - Extract the real part of :samp:`{exp}`.\n-   * - ``__imag__ exp``\n-     - Extract the imaginary part of :samp:`{exp}`.\n-\n-For values of floating point, you should use the ISO C99\n-functions, declared in ``<complex.h>`` and also provided as\n-built-in functions by GCC.\n-\n-.. list-table::\n-   :header-rows: 1\n-\n-   * - Expression\n-     - float\n-     - double\n-     - long double\n-\n-   * - ``__real__ exp``\n-     - ``crealf``\n-     - ``creal``\n-     - ``creall``\n-   * - ``__imag__ exp``\n-     - ``cimagf``\n-     - ``cimag``\n-     - ``cimagl``\n-\n-.. index:: complex conjugation\n-\n-The operator :samp:`~` performs complex conjugation when used on a value\n-with a complex type.  This is a GNU extension; for values of\n-floating type, you should use the ISO C99 functions ``conjf``,\n-``conj`` and ``conjl``, declared in ``<complex.h>`` and also\n-provided as built-in functions by GCC. Note unlike the ``__real__``\n-and ``__imag__`` operators, this operator will not do an implicit cast\n-to the complex type because the :samp:`~` is already a normal operator.\n-\n-GCC can allocate complex automatic variables in a noncontiguous\n-fashion; it's even possible for the real part to be in a register while\n-the imaginary part is on the stack (or vice versa).  Only the DWARF\n-debug info format can represent this, so use of DWARF is recommended.\n-If you are using the stabs debug info format, GCC describes a noncontiguous\n-complex variable as if it were two separate variables of noncomplex type.\n-If the variable's actual name is ``foo``, the two fictitious\n-variables are named ``foo$real`` and ``foo$imag``.  You can\n-examine and set these two fictitious variables with your debugger.\n-\n-.. function:: type __builtin_complex (real, imag)\n-\n-  The built-in function ``__builtin_complex`` is provided for use in\n-  implementing the ISO C11 macros ``CMPLXF``, ``CMPLX`` and\n-  ``CMPLXL``.  :samp:`{real}` and :samp:`{imag}` must have the same type, a\n-  real binary floating-point type, and the result has the corresponding\n-  complex type with real and imaginary parts :samp:`{real}` and :samp:`{imag}`.\n-  Unlike :samp:`{real} + I * {imag}`, this works even when\n-  infinities, NaNs and negative zeros are involved.\n\\ No newline at end of file"}, {"sha": "4984ed4b5c83aaf0e1dae73ad3d37e12b7b5b48f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/compound-literals.rst", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fcompound-literals.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,104 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: constructor expressions, initializations in expressions, structures, constructor expression, expressions, constructor, compound literals\n-\n-.. _compound-literals:\n-\n-Compound Literals\n-*****************\n-\n-.. The GNU C name for what C99 calls compound literals was \"constructor expressions\".\n-\n-A compound literal looks like a cast of a brace-enclosed aggregate\n-initializer list.  Its value is an object of the type specified in\n-the cast, containing the elements specified in the initializer.\n-Unlike the result of a cast, a compound literal is an lvalue.  ISO\n-C99 and later support compound literals.  As an extension, GCC\n-supports compound literals also in C90 mode and in C++, although\n-as explained below, the C++ semantics are somewhat different.\n-\n-Usually, the specified type of a compound literal is a structure.  Assume\n-that ``struct foo`` and ``structure`` are declared as shown:\n-\n-.. code-block:: c++\n-\n-  struct foo {int a; char b[2];} structure;\n-\n-Here is an example of constructing a ``struct foo`` with a compound literal:\n-\n-.. code-block:: c++\n-\n-  structure = ((struct foo) {x + y, 'a', 0});\n-\n-This is equivalent to writing the following:\n-\n-.. code-block:: c++\n-\n-  {\n-    struct foo temp = {x + y, 'a', 0};\n-    structure = temp;\n-  }\n-\n-You can also construct an array, though this is dangerous in C++, as\n-explained below.  If all the elements of the compound literal are\n-(made up of) simple constant expressions suitable for use in\n-initializers of objects of static storage duration, then the compound\n-literal can be coerced to a pointer to its first element and used in\n-such an initializer, as shown here:\n-\n-.. code-block:: c++\n-\n-  char **foo = (char *[]) { \"x\", \"y\", \"z\" };\n-\n-Compound literals for scalar types and union types are also allowed.  In\n-the following example the variable ``i`` is initialized to the value\n-``2``, the result of incrementing the unnamed object created by\n-the compound literal.\n-\n-.. code-block:: c++\n-\n-  int i = ++(int) { 1 };\n-\n-As a GNU extension, GCC allows initialization of objects with static storage\n-duration by compound literals (which is not possible in ISO C99 because\n-the initializer is not a constant).\n-It is handled as if the object were initialized only with the brace-enclosed\n-list if the types of the compound literal and the object match.\n-The elements of the compound literal must be constant.\n-If the object being initialized has array type of unknown size, the size is\n-determined by the size of the compound literal.\n-\n-.. code-block:: c++\n-\n-  static struct foo x = (struct foo) {1, 'a', 'b'};\n-  static int y[] = (int []) {1, 2, 3};\n-  static int z[] = (int [3]) {1};\n-\n-The above lines are equivalent to the following:\n-\n-.. code-block:: c++\n-\n-  static struct foo x = {1, 'a', 'b'};\n-  static int y[] = {1, 2, 3};\n-  static int z[] = {1, 0, 0};\n-\n-In C, a compound literal designates an unnamed object with static or\n-automatic storage duration.  In C++, a compound literal designates a\n-temporary object that only lives until the end of its full-expression.\n-As a result, well-defined C code that takes the address of a subobject\n-of a compound literal can be undefined in C++, so G++ rejects\n-the conversion of a temporary array to a pointer.  For instance, if\n-the array compound literal example above appeared inside a function,\n-any subsequent use of ``foo`` in C++ would have undefined behavior\n-because the lifetime of the array ends after the declaration of ``foo``.\n-\n-As an optimization, G++ sometimes gives array compound literals longer\n-lifetimes: when the array either appears outside a function or has\n-a ``const`` -qualified type.  If ``foo`` and its initializer had\n-elements of type ``char *const`` rather than ``char *``, or if\n-``foo`` were a global variable, the array would have static storage\n-duration.  But it is probably safest just to avoid the use of array\n-compound literals in C++ code.\n\\ No newline at end of file"}, {"sha": "ddea0fc3073f7a03a5024a7ef1d9a6ac8c56f910", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/conditionals-with-omitted-operands.rst", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconditionals-with-omitted-operands.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,39 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: conditional expressions, extensions, omitted middle-operands, middle-operands, omitted, extensions, ?:, ?: extensions\n-\n-.. _conditionals:\n-\n-Conditionals with Omitted Operands\n-**********************************\n-\n-The middle operand in a conditional expression may be omitted.  Then\n-if the first operand is nonzero, its value is the value of the conditional\n-expression.\n-\n-Therefore, the expression\n-\n-.. code-block:: c++\n-\n-  x ? : y\n-\n-has the value of ``x`` if that is nonzero; otherwise, the value of\n-``y``.\n-\n-This example is perfectly equivalent to\n-\n-.. code-block:: c++\n-\n-  x ? x : y\n-\n-.. index:: side effect in ?:, ?: side effect\n-\n-In this simple case, the ability to omit the middle operand is not\n-especially useful.  When it becomes useful is when the first operand does,\n-or may (if it is a macro argument), contain a side effect.  Then repeating\n-the operand in the middle would perform the side effect twice.  Omitting\n-the middle operand uses the value already computed without the undesirable\n-effects of recomputing it.\n\\ No newline at end of file"}, {"sha": "051f1c31b4e8e4d863bf1654b87ee6dfe853dd9b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/constructing-function-calls.rst", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fconstructing-function-calls.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,125 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: constructing calls, forwarding calls\n-\n-.. _constructing-calls:\n-\n-Constructing Function Calls\n-***************************\n-\n-Using the built-in functions described below, you can record\n-the arguments a function received, and call another function\n-with the same arguments, without knowing the number or types\n-of the arguments.\n-\n-You can also record the return value of that function call,\n-and later return that value, without knowing what data type\n-the function tried to return (as long as your caller expects\n-that data type).\n-\n-However, these built-in functions may interact badly with some\n-sophisticated features or other extensions of the language.  It\n-is, therefore, not recommended to use them outside very simple\n-functions acting as mere forwarders for their arguments.\n-\n-.. function:: void * __builtin_apply_args ()\n-\n-  This built-in function returns a pointer to data\n-  describing how to perform a call with the same arguments as are passed\n-  to the current function.\n-\n-  The function saves the arg pointer register, structure value address,\n-  and all registers that might be used to pass arguments to a function\n-  into a block of memory allocated on the stack.  Then it returns the\n-  address of that block.\n-\n-.. function:: void * __builtin_apply (void (*function)(), void *arguments, size_t size)\n-\n-  This built-in function invokes :samp:`{function}`\n-  with a copy of the parameters described by :samp:`{arguments}`\n-  and :samp:`{size}`.\n-\n-  The value of :samp:`{arguments}` should be the value returned by\n-  ``__builtin_apply_args``.  The argument :samp:`{size}` specifies the size\n-  of the stack argument data, in bytes.\n-\n-  This function returns a pointer to data describing\n-  how to return whatever value is returned by :samp:`{function}`.  The data\n-  is saved in a block of memory allocated on the stack.\n-\n-  It is not always simple to compute the proper value for :samp:`{size}`.  The\n-  value is used by ``__builtin_apply`` to compute the amount of data\n-  that should be pushed on the stack and copied from the incoming argument\n-  area.\n-\n-.. function:: void __builtin_return (void *result)\n-\n-  This built-in function returns the value described by :samp:`{result}` from\n-  the containing function.  You should specify, for :samp:`{result}`, a value\n-  returned by ``__builtin_apply``.\n-\n-.. function:: __builtin_va_arg_pack ()\n-\n-  This built-in function represents all anonymous arguments of an inline\n-  function.  It can be used only in inline functions that are always\n-  inlined, never compiled as a separate function, such as those using\n-  ``__attribute__ ((__always_inline__))`` or\n-  ``__attribute__ ((__gnu_inline__))`` extern inline functions.\n-  It must be only passed as last argument to some other function\n-  with variable arguments.  This is useful for writing small wrapper\n-  inlines for variable argument functions, when using preprocessor\n-  macros is undesirable.  For example:\n-\n-  .. code-block:: c++\n-\n-    extern int myprintf (FILE *f, const char *format, ...);\n-    extern inline __attribute__ ((__gnu_inline__)) int\n-    myprintf (FILE *f, const char *format, ...)\n-    {\n-      int r = fprintf (f, \"myprintf: \");\n-      if (r < 0)\n-        return r;\n-      int s = fprintf (f, format, __builtin_va_arg_pack ());\n-      if (s < 0)\n-        return s;\n-      return r + s;\n-    }\n-\n-.. function:: size_t __builtin_va_arg_pack_len ()\n-\n-  This built-in function returns the number of anonymous arguments of\n-  an inline function.  It can be used only in inline functions that\n-  are always inlined, never compiled as a separate function, such\n-  as those using ``__attribute__ ((__always_inline__))`` or\n-  ``__attribute__ ((__gnu_inline__))`` extern inline functions.\n-  For example following does link- or run-time checking of open\n-  arguments for optimized code:\n-\n-  .. code-block:: c++\n-\n-    #ifdef __OPTIMIZE__\n-    extern inline __attribute__((__gnu_inline__)) int\n-    myopen (const char *path, int oflag, ...)\n-    {\n-      if (__builtin_va_arg_pack_len () > 1)\n-        warn_open_too_many_arguments ();\n-\n-      if (__builtin_constant_p (oflag))\n-        {\n-          if ((oflag & O_CREAT) != 0 && __builtin_va_arg_pack_len () < 1)\n-            {\n-              warn_open_missing_mode ();\n-              return __open_2 (path, oflag);\n-            }\n-          return open (path, oflag, __builtin_va_arg_pack ());\n-        }\n-\n-      if (__builtin_va_arg_pack_len () < 1)\n-        return __open_2 (path, oflag);\n-\n-      return open (path, oflag, __builtin_va_arg_pack ());\n-    }\n-    #endif\n\\ No newline at end of file"}, {"sha": "aa3902e6cd430da965e6865daa8126b6da3c794a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/decimal-floating-types.rst", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdecimal-floating-types.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,47 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: decimal floating types, _Decimal32 data type, _Decimal64 data type, _Decimal128 data type, df integer suffix, dd integer suffix, dl integer suffix, DF integer suffix, DD integer suffix, DL integer suffix\n-\n-.. _decimal-float:\n-\n-Decimal Floating Types\n-**********************\n-\n-As an extension, GNU C supports decimal floating types as\n-defined in the N1312 draft of ISO/IEC WDTR24732.  Support for decimal\n-floating types in GCC will evolve as the draft technical report changes.\n-Calling conventions for any target might also change.  Not all targets\n-support decimal floating types.\n-\n-The decimal floating types are ``_Decimal32``, ``_Decimal64``, and\n-``_Decimal128``.  They use a radix of ten, unlike the floating types\n-``float``, ``double``, and ``long double`` whose radix is not\n-specified by the C standard but is usually two.\n-\n-Support for decimal floating types includes the arithmetic operators\n-add, subtract, multiply, divide; unary arithmetic operators;\n-relational operators; equality operators; and conversions to and from\n-integer and other floating types.  Use a suffix :samp:`df` or\n-:samp:`DF` in a literal constant of type ``_Decimal32``, :samp:`dd`\n-or :samp:`DD` for ``_Decimal64``, and :samp:`dl` or :samp:`DL` for\n-``_Decimal128``.\n-\n-GCC support of decimal float as specified by the draft technical report\n-is incomplete:\n-\n-* When the value of a decimal floating type cannot be represented in the\n-  integer type to which it is being converted, the result is undefined\n-  rather than the result value specified by the draft technical report.\n-\n-* GCC does not provide the C library functionality associated with\n-  :samp:`math.h`, :samp:`fenv.h`, :samp:`stdio.h`, :samp:`stdlib.h`, and\n-  :samp:`wchar.h`, which must come from a separate C library implementation.\n-  Because of this the GNU C compiler does not define macro\n-  ``__STDC_DEC_FP__`` to indicate that the implementation conforms to\n-  the technical report.\n-\n-Types ``_Decimal32``, ``_Decimal64``, and ``_Decimal128``\n-are supported by the DWARF debug information format.\n\\ No newline at end of file"}, {"sha": "0d57b9b9e73ab528836d059f64e8cc6944582dd4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions.rst", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,109 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. index:: function attributes, declaring attributes of functions, volatile applied to function, const applied to function\n-\n-.. _function-attributes:\n-\n-Declaring Attributes of Functions\n-*********************************\n-\n-In GNU C and C++, you can use function attributes to specify certain\n-function properties that may help the compiler optimize calls or\n-check code more carefully for correctness.  For example, you\n-can use attributes to specify that a function never returns\n-(:fn-attr:`noreturn`), returns a value depending only on the values of\n-its arguments (``const``), or has ``printf`` -style arguments\n-(``format``).\n-\n-You can also use attributes to control memory placement, code\n-generation options or call/return conventions within the function\n-being annotated.  Many of these attributes are target-specific.  For\n-example, many targets support attributes for defining interrupt\n-handler functions, which typically must follow special register usage\n-and return conventions.  Such attributes are described in the subsection\n-for each target.  However, a considerable number of attributes are\n-supported by most, if not all targets.  Those are described in\n-the :ref:`common-function-attributes` section.\n-\n-Function attributes are introduced by the ``__attribute__`` keyword\n-in the declaration of a function, followed by an attribute specification\n-enclosed in double parentheses.  You can specify multiple attributes in\n-a declaration by separating them by commas within the double parentheses\n-or by immediately following one attribute specification with another.\n-See :ref:`attribute-syntax`, for the exact rules on attribute syntax and\n-placement.  Compatible attribute specifications on distinct declarations\n-of the same function are merged.  An attribute specification that is not\n-compatible with attributes already applied to a declaration of the same\n-function is ignored with a warning.\n-\n-Some function attributes take one or more arguments that refer to\n-the function's parameters by their positions within the function parameter\n-list.  Such attribute arguments are referred to as :dfn:`positional arguments`.\n-Unless specified otherwise, positional arguments that specify properties\n-of parameters with pointer types can also specify the same properties of\n-the implicit C++ ``this`` argument in non-static member functions, and\n-of parameters of reference to a pointer type.  For ordinary functions,\n-position one refers to the first parameter on the list.  In C++ non-static\n-member functions, position one refers to the implicit ``this`` pointer.\n-The same restrictions and effects apply to function attributes used with\n-ordinary functions or C++ member functions.\n-\n-GCC also supports attributes on\n-variable declarations (see :ref:`variable-attributes`),\n-labels (see :ref:`label-attributes`),\n-enumerators (see :ref:`enumerator-attributes`),\n-statements (see :ref:`statement-attributes`),\n-types (see :ref:`type-attributes`),\n-and on field declarations (for :fn-attr:`tainted_args`).\n-\n-There is some overlap between the purposes of attributes and pragmas\n-(see :ref:`pragmas`).  It has been\n-found convenient to use ``__attribute__`` to achieve a natural\n-attachment of attributes to their corresponding declarations, whereas\n-``#pragma`` is of use for compatibility with other compilers\n-or constructs that do not naturally form part of the grammar.\n-\n-In addition to the attributes documented here,\n-GCC plugins may provide their own attributes.\n-\n-.. toctree::\n-  :maxdepth: 1\n-\n-  declaring-attributes-of-functions/common-function-attributes\n-  declaring-attributes-of-functions/aarch64-function-attributes\n-  declaring-attributes-of-functions/amd-gcn-function-attributes\n-  declaring-attributes-of-functions/arc-function-attributes\n-  declaring-attributes-of-functions/arm-function-attributes\n-  declaring-attributes-of-functions/avr-function-attributes\n-  declaring-attributes-of-functions/blackfin-function-attributes\n-  declaring-attributes-of-functions/bpf-function-attributes\n-  declaring-attributes-of-functions/c-sky-function-attributes\n-  declaring-attributes-of-functions/epiphany-function-attributes\n-  declaring-attributes-of-functions/h8-300-function-attributes\n-  declaring-attributes-of-functions/ia-64-function-attributes\n-  declaring-attributes-of-functions/m32c-function-attributes\n-  declaring-attributes-of-functions/m32r-d-function-attributes\n-  declaring-attributes-of-functions/m68k-function-attributes\n-  declaring-attributes-of-functions/mcore-function-attributes\n-  declaring-attributes-of-functions/mep-function-attributes\n-  declaring-attributes-of-functions/microblaze-function-attributes\n-  declaring-attributes-of-functions/microsoft-windows-function-attributes\n-  declaring-attributes-of-functions/mips-function-attributes\n-  declaring-attributes-of-functions/msp430-function-attributes\n-  declaring-attributes-of-functions/nds32-function-attributes\n-  declaring-attributes-of-functions/nios-ii-function-attributes\n-  declaring-attributes-of-functions/nvidia-ptx-function-attributes\n-  declaring-attributes-of-functions/powerpc-function-attributes\n-  declaring-attributes-of-functions/risc-v-function-attributes\n-  declaring-attributes-of-functions/rl78-function-attributes\n-  declaring-attributes-of-functions/rx-function-attributes\n-  declaring-attributes-of-functions/s-390-function-attributes\n-  declaring-attributes-of-functions/sh-function-attributes\n-  declaring-attributes-of-functions/symbian-os-function-attributes\n-  declaring-attributes-of-functions/v850-function-attributes\n-  declaring-attributes-of-functions/visium-function-attributes\n-  declaring-attributes-of-functions/x86-function-attributes\n-  declaring-attributes-of-functions/xstormy16-function-attributes\n\\ No newline at end of file"}, {"sha": "3f238e6017946c1243db4da91b0a07ed9a5c9e36", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/aarch64-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Faarch64-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,192 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _aarch64-function-attributes:\n-\n-AArch64 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The following target-specific function attributes are available for the\n-AArch64 target.  For the most part, these options mirror the behavior of\n-similar command-line options (see :ref:`aarch64-options`), but on a\n-per-function basis.\n-\n-.. index:: general-regs-only function attribute, AArch64\n-\n-.. aarch64-fn-attr:: general-regs-only\n-\n-  Indicates that no floating-point or Advanced SIMD registers should be\n-  used when generating code for this function.  If the function explicitly\n-  uses floating-point code, then the compiler gives an error.  This is\n-  the same behavior as that of the command-line option\n-  :option:`-mgeneral-regs-only`.\n-\n-.. index:: fix-cortex-a53-835769 function attribute, AArch64\n-\n-.. aarch64-fn-attr:: fix-cortex-a53-835769\n-\n-  Indicates that the workaround for the Cortex-A53 erratum 835769 should be\n-  applied to this function.  To explicitly disable the workaround for this\n-  function specify the negated form: ``no-fix-cortex-a53-835769``.\n-  This corresponds to the behavior of the command line options\n-  :option:`-mfix-cortex-a53-835769` and :option:`-mno-fix-cortex-a53-835769`.\n-\n-.. index:: cmodel= function attribute, AArch64\n-\n-.. aarch64-fn-attr:: cmodel=\n-\n-  Indicates that code should be generated for a particular code model for\n-  this function.  The behavior and permissible arguments are the same as\n-  for the command line option :option:`-mcmodel=`.\n-\n-.. index:: strict-align function attribute, AArch64\n-\n-.. aarch64-fn-attr:: strict-align, no-strict-align\n-\n-  :aarch64-fn-attr:`strict-align` indicates that the compiler should not assume that unaligned\n-  memory references are handled by the system.  To allow the compiler to assume\n-  that aligned memory references are handled by the system, the inverse attribute\n-  ``no-strict-align`` can be specified.  The behavior is same as for the\n-  command-line option :option:`-mstrict-align` and :option:`-mno-strict-align`.\n-\n-.. index:: omit-leaf-frame-pointer function attribute, AArch64\n-\n-.. aarch64-fn-attr:: omit-leaf-frame-pointer\n-\n-  Indicates that the frame pointer should be omitted for a leaf function call.\n-  To keep the frame pointer, the inverse attribute\n-  ``no-omit-leaf-frame-pointer`` can be specified.  These attributes have\n-  the same behavior as the command-line options :option:`-momit-leaf-frame-pointer`\n-  and :option:`-mno-omit-leaf-frame-pointer`.\n-\n-.. index:: tls-dialect= function attribute, AArch64\n-\n-.. aarch64-fn-attr:: tls-dialect=\n-\n-  Specifies the TLS dialect to use for this function.  The behavior and\n-  permissible arguments are the same as for the command-line option\n-  :option:`-mtls-dialect=`.\n-\n-.. index:: arch= function attribute, AArch64\n-\n-.. aarch64-fn-attr:: arch=\n-\n-  Specifies the architecture version and architectural extensions to use\n-  for this function.  The behavior and permissible arguments are the same as\n-  for the :option:`-march=` command-line option.\n-\n-.. index:: tune= function attribute, AArch64\n-\n-.. aarch64-fn-attr:: tune=\n-\n-  Specifies the core for which to tune the performance of this function.\n-  The behavior and permissible arguments are the same as for the :option:`-mtune=`\n-  command-line option.\n-\n-.. index:: cpu= function attribute, AArch64\n-\n-.. aarch64-fn-attr:: cpu=\n-\n-  Specifies the core for which to tune the performance of this function and also\n-  whose architectural features to use.  The behavior and valid arguments are the\n-  same as for the :option:`-mcpu=` command-line option.\n-\n-.. index:: sign-return-address function attribute, AArch64\n-\n-.. aarch64-fn-attr:: sign-return-address\n-\n-  Select the function scope on which return address signing will be applied.  The\n-  behavior and permissible arguments are the same as for the command-line option\n-  :option:`-msign-return-address=`.  The default value is ``none``.  This\n-  attribute is deprecated.  The :gcc-attr:`branch-protection` attribute should\n-  be used instead.\n-\n-.. index:: branch-protection function attribute, AArch64\n-\n-.. aarch64-fn-attr:: branch-protection\n-\n-  Select the function scope on which branch protection will be applied.  The\n-  behavior and permissible arguments are the same as for the command-line option\n-  :option:`-mbranch-protection=`.  The default value is ``none``.\n-\n-.. index:: outline-atomics function attribute, AArch64\n-\n-.. aarch64-fn-attr:: outline-atomics\n-\n-  Enable or disable calls to out-of-line helpers to implement atomic operations.\n-  This corresponds to the behavior of the command line options\n-  :option:`-moutline-atomics` and :option:`-mno-outline-atomics`.\n-\n-The above target attributes can be specified as follows:\n-\n-.. code-block:: c++\n-\n-  __attribute__((target(\"attr-string\")))\n-  int\n-  f (int a)\n-  {\n-    return a + 5;\n-  }\n-\n-where ``attr-string`` is one of the attribute strings specified above.\n-\n-Additionally, the architectural extension string may be specified on its\n-own.  This can be used to turn on and off particular architectural extensions\n-without having to specify a particular architecture version or core.  Example:\n-\n-.. code-block:: c++\n-\n-  __attribute__((target(\"+crc+nocrypto\")))\n-  int\n-  foo (int a)\n-  {\n-    return a + 5;\n-  }\n-\n-In this example ``target(\"+crc+nocrypto\")`` enables the ``crc``\n-extension and disables the ``crypto`` extension for the function ``foo``\n-without modifying an existing :option:`-march=` or :option:`-mcpu` option.\n-\n-Multiple target function attributes can be specified by separating them with\n-a comma.  For example:\n-\n-.. code-block:: c++\n-\n-  __attribute__((target(\"arch=armv8-a+crc+crypto,tune=cortex-a53\")))\n-  int\n-  foo (int a)\n-  {\n-    return a + 5;\n-  }\n-\n-is valid and compiles function ``foo`` for ARMv8-A with ``crc``\n-and ``crypto`` extensions and tunes it for ``cortex-a53``.\n-\n-Inlining rules\n-~~~~~~~~~~~~~~\n-\n-Specifying target attributes on individual functions or performing link-time\n-optimization across translation units compiled with different target options\n-can affect function inlining rules:\n-\n-In particular, a caller function can inline a callee function only if the\n-architectural features available to the callee are a subset of the features\n-available to the caller.\n-For example: A function ``foo`` compiled with :option:`-march=armv8-a+crc`,\n-or tagged with the equivalent ``arch=armv8-a+crc`` attribute,\n-can inline a function ``bar`` compiled with :option:`-march=armv8-a+nocrc`\n-because the all the architectural features that function ``bar`` requires\n-are available to function ``foo``.  Conversely, function ``bar`` cannot\n-inline function ``foo``.\n-\n-Additionally inlining a function compiled with :option:`-mstrict-align` into a\n-function compiled without ``-mstrict-align`` is not allowed.\n-However, inlining a function compiled without :option:`-mstrict-align` into a\n-function compiled with :option:`-mstrict-align` is allowed.\n-\n-Note that CPU tuning options and attributes such as the :option:`-mcpu=`,\n-:option:`-mtune=` do not inhibit inlining unless the CPU specified by the\n-:option:`-mcpu=` option or the :gcc-attr:`cpu=` attribute conflicts with the\n-architectural feature rules specified above.\n\\ No newline at end of file"}, {"sha": "15034deea282934fe537d093312cd41ace41b572", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/amd-gcn-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Famd-gcn-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,93 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _amd-gcn-function-attributes:\n-\n-AMD GCN Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the AMD GCN back end:\n-\n-.. index:: amdgpu_hsa_kernel function attribute, AMD GCN\n-\n-.. amd-gcn-fn-attr:: amdgpu_hsa_kernel\n-\n-  This attribute indicates that the corresponding function should be compiled as\n-  a kernel function, that is an entry point that can be invoked from the host\n-  via the HSA runtime library.  By default functions are only callable only from\n-  other GCN functions.\n-\n-  This attribute is implicitly applied to any function named ``main``, using\n-  default parameters.\n-\n-  Kernel functions may return an integer value, which will be written to a\n-  conventional place within the HSA \"kernargs\" region.\n-\n-  The attribute parameters configure what values are passed into the kernel\n-  function by the GPU drivers, via the initial register state.  Some values are\n-  used by the compiler, and therefore forced on.  Enabling other options may\n-  break assumptions in the compiler and/or run-time libraries.\n-\n-  ``private_segment_buffer``\n-    Set ``enable_sgpr_private_segment_buffer`` flag.  Always on (required to\n-    locate the stack).\n-\n-  ``dispatch_ptr``\n-    Set ``enable_sgpr_dispatch_ptr`` flag.  Always on (required to locate the\n-    launch dimensions).\n-\n-  ``queue_ptr``\n-    Set ``enable_sgpr_queue_ptr`` flag.  Always on (required to convert address\n-    spaces).\n-\n-  ``kernarg_segment_ptr``\n-    Set ``enable_sgpr_kernarg_segment_ptr`` flag.  Always on (required to\n-    locate the kernel arguments, \"kernargs\").\n-\n-  ``dispatch_id``\n-    Set ``enable_sgpr_dispatch_id`` flag.\n-\n-  ``flat_scratch_init``\n-    Set ``enable_sgpr_flat_scratch_init`` flag.\n-\n-  ``private_segment_size``\n-    Set ``enable_sgpr_private_segment_size`` flag.\n-\n-  ``grid_workgroup_count_X``\n-    Set ``enable_sgpr_grid_workgroup_count_x`` flag.  Always on (required to\n-    use OpenACC/OpenMP).\n-\n-  ``grid_workgroup_count_Y``\n-    Set ``enable_sgpr_grid_workgroup_count_y`` flag.\n-\n-  ``grid_workgroup_count_Z``\n-    Set ``enable_sgpr_grid_workgroup_count_z`` flag.\n-\n-  ``workgroup_id_X``\n-    Set ``enable_sgpr_workgroup_id_x`` flag.\n-\n-  ``workgroup_id_Y``\n-    Set ``enable_sgpr_workgroup_id_y`` flag.\n-\n-  ``workgroup_id_Z``\n-    Set ``enable_sgpr_workgroup_id_z`` flag.\n-\n-  ``workgroup_info``\n-    Set ``enable_sgpr_workgroup_info`` flag.\n-\n-  ``private_segment_wave_offset``\n-    Set ``enable_sgpr_private_segment_wave_byte_offset`` flag.  Always on\n-    (required to locate the stack).\n-\n-  ``work_item_id_X``\n-    Set ``enable_vgpr_workitem_id`` parameter.  Always on (can't be disabled).\n-\n-  ``work_item_id_Y``\n-    Set ``enable_vgpr_workitem_id`` parameter.  Always on (required to enable\n-    vectorization.)\n-\n-  ``work_item_id_Z``\n-    Set ``enable_vgpr_workitem_id`` parameter.  Always on (required to use\n-    OpenACC/OpenMP).\n\\ No newline at end of file"}, {"sha": "3cc2700bffebc59e7f9d6e1a984bf902d8bbaa68", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arc-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farc-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,88 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _arc-function-attributes:\n-\n-ARC Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the ARC back end:\n-\n-.. index:: interrupt function attribute, ARC\n-\n-.. arc-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  On the ARC, you must specify the kind of interrupt to be handled\n-  in a parameter to the interrupt attribute like this:\n-\n-  .. code-block:: c++\n-\n-    void f () __attribute__ ((interrupt (\"ilink1\")));\n-\n-  Permissible values for this parameter are: ``ilink1`` and\n-  ``ilink2`` for ARCv1 architecture, and ``ilink`` and\n-  ``firq`` for ARCv2 architecture.\n-\n-.. index:: long_call function attribute, ARC, medium_call function attribute, ARC, short_call function attribute, ARC, indirect calls, ARC\n-\n-.. arc-fn-attr:: long_call, medium_call, short_call\n-\n-  These attributes specify how a particular function is called.\n-  These attributes override the\n-  :option:`-mlong-calls` and :option:`-mmedium-calls` (see :ref:`arc-options`)\n-  command-line switches and ``#pragma long_calls`` settings.\n-\n-  For ARC, a function marked with the :arc-fn-attr:`long_call` attribute is\n-  always called using register-indirect jump-and-link instructions,\n-  thereby enabling the called function to be placed anywhere within the\n-  32-bit address space.  A function marked with the ``medium_call``\n-  attribute will always be close enough to be called with an unconditional\n-  branch-and-link instruction, which has a 25-bit offset from\n-  the call site.  A function marked with the ``short_call``\n-  attribute will always be close enough to be called with a conditional\n-  branch-and-link instruction, which has a 21-bit offset from\n-  the call site.\n-\n-.. index:: jli_always function attribute, ARC\n-\n-.. arc-fn-attr:: jli_always\n-\n-  Forces a particular function to be called using ``jli``\n-  instruction.  The ``jli`` instruction makes use of a table stored\n-  into ``.jlitab`` section, which holds the location of the functions\n-  which are addressed using this instruction.\n-\n-.. index:: jli_fixed function attribute, ARC\n-\n-.. arc-fn-attr:: jli_fixed\n-\n-  Identical like the above one, but the location of the function in the\n-  ``jli`` table is known and given as an attribute parameter.\n-\n-.. index:: secure_call function attribute, ARC\n-\n-.. arc-fn-attr:: secure_call\n-\n-  This attribute allows one to mark secure-code functions that are\n-  callable from normal mode.  The location of the secure call function\n-  into the ``sjli`` table needs to be passed as argument.\n-\n-.. index:: naked function attribute, ARC\n-\n-.. arc-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the requisite function\n-  declaration, while allowing the body of the function to be assembly\n-  code.  The specified function will not have prologue/epilogue\n-  sequences generated by the compiler.  Only basic ``asm`` statements\n-  can safely be included in naked functions (see :ref:`basic-asm`).  While\n-  using extended ``asm`` or a mixture of basic ``asm`` and C code\n-  may appear to work, they cannot be depended upon to work reliably and\n-  are not supported.\n\\ No newline at end of file"}, {"sha": "1806421c90c392b253478d147c7d2f51573f75f8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/arm-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 168, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Farm-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,168 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _arm-function-attributes:\n-\n-ARM Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported for ARM targets:\n-\n-.. index:: general-regs-only function attribute, ARM\n-\n-.. arm-fn-attr:: general-regs-only\n-\n-  Indicates that no floating-point or Advanced SIMD registers should be\n-  used when generating code for this function.  If the function explicitly\n-  uses floating-point code, then the compiler gives an error.  This is\n-  the same behavior as that of the command-line option\n-  :option:`-mgeneral-regs-only`.\n-\n-.. index:: interrupt function attribute, ARM\n-\n-.. arm-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  You can specify the kind of interrupt to be handled by\n-  adding an optional parameter to the interrupt attribute like this:\n-\n-  .. code-block:: c++\n-\n-    void f () __attribute__ ((interrupt (\"IRQ\")));\n-\n-  Permissible values for this parameter are: ``IRQ``, ``FIQ``,\n-  ``SWI``, ``ABORT`` and ``UNDEF``.\n-\n-  On ARMv7-M the interrupt type is ignored, and the attribute means the function\n-  may be called with a word-aligned stack pointer.\n-\n-.. index:: isr function attribute, ARM\n-\n-.. arm-fn-attr:: isr\n-\n-  Use this attribute on ARM to write Interrupt Service Routines. This is an\n-  alias to the :arm-fn-attr:`interrupt` attribute above.\n-\n-.. index:: long_call function attribute, ARM, short_call function attribute, ARM, indirect calls, ARM\n-\n-.. arm-fn-attr:: long_call, short_call\n-\n-  These attributes specify how a particular function is called.\n-  These attributes override the\n-  :option:`-mlong-calls` (see :ref:`arm-options`)\n-  command-line switch and ``#pragma long_calls`` settings.  For ARM, the\n-  :arm-fn-attr:`long_call` attribute indicates that the function might be far\n-  away from the call site and require a different (more expensive)\n-  calling sequence.   The ``short_call`` attribute always places\n-  the offset to the function from the call site into the :samp:`BL`\n-  instruction directly.\n-\n-.. index:: naked function attribute, ARM\n-\n-.. arm-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: pcs function attribute, ARM\n-\n-.. arm-fn-attr:: pcs\n-\n-  The :arm-fn-attr:`pcs` attribute can be used to control the calling convention\n-  used for a function on ARM.  The attribute takes an argument that specifies\n-  the calling convention to use.\n-\n-  When compiling using the AAPCS ABI (or a variant of it) then valid\n-  values for the argument are ``\"aapcs\"`` and ``\"aapcs-vfp\"``.  In\n-  order to use a variant other than ``\"aapcs\"`` then the compiler must\n-  be permitted to use the appropriate co-processor registers (i.e., the\n-  VFP registers must be available in order to use ``\"aapcs-vfp\"``).\n-  For example,\n-\n-  .. code-block:: c++\n-\n-    /* Argument passed in r0, and result returned in r0+r1.  */\n-    double f2d (float) __attribute__((pcs(\"aapcs\")));\n-\n-  Variadic functions always use the ``\"aapcs\"`` calling convention and\n-  the compiler rejects attempts to specify an alternative.\n-\n-.. index:: target function attribute\n-\n-.. arm-fn-attr:: target (options)\n-\n-  As discussed in :ref:`common-function-attributes`, this attribute\n-  allows specification of target-specific compilation options.\n-\n-  On ARM, the following options are allowed:\n-\n-  :samp:`thumb`\n-\n-    .. index:: target(\"thumb\") function attribute, ARM\n-\n-    Force code generation in the Thumb (T16/T32) ISA, depending on the\n-    architecture level.\n-\n-  :samp:`arm`\n-\n-    .. index:: target(\"arm\") function attribute, ARM\n-\n-    Force code generation in the ARM (A32) ISA.\n-\n-    Functions from different modes can be inlined in the caller's mode.\n-\n-  :samp:`fpu=`\n-\n-    .. index:: target(\"fpu=\") function attribute, ARM\n-\n-    Specifies the fpu for which to tune the performance of this function.\n-    The behavior and permissible arguments are the same as for the :option:`-mfpu=`\n-    command-line option.\n-\n-  :samp:`arch=`\n-\n-    .. index:: arch= function attribute, ARM\n-\n-    Specifies the architecture version and architectural extensions to use\n-    for this function.  The behavior and permissible arguments are the same as\n-    for the :option:`-march=` command-line option.\n-\n-    The above target attributes can be specified as follows:\n-\n-    .. code-block:: c++\n-\n-      __attribute__((target(\"arch=armv8-a+crc\")))\n-      int\n-      f (int a)\n-      {\n-        return a + 5;\n-      }\n-\n-    Additionally, the architectural extension string may be specified on its\n-    own.  This can be used to turn on and off particular architectural extensions\n-    without having to specify a particular architecture version or core.  Example:\n-\n-    .. code-block:: c++\n-\n-      __attribute__((target(\"+crc+nocrypto\")))\n-      int\n-      foo (int a)\n-      {\n-        return a + 5;\n-      }\n-\n-    In this example ``target(\"+crc+nocrypto\")`` enables the ``crc``\n-    extension and disables the ``crypto`` extension for the function ``foo``\n-    without modifying an existing :option:`-march=` or :option:`-mcpu` option.\n\\ No newline at end of file"}, {"sha": "4d51397582db34c62e6dce487e0e4d7435b76004", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/avr-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Favr-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,120 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _avr-function-attributes:\n-\n-AVR Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the AVR back end:\n-\n-.. index:: interrupt function attribute, AVR\n-\n-.. avr-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  On the AVR, the hardware globally disables interrupts when an\n-  interrupt is executed.  The first instruction of an interrupt handler\n-  declared with this attribute is a ``SEI`` instruction to\n-  re-enable interrupts.  See also the :avr-fn-attr:`signal` function attribute\n-  that does not insert a ``SEI`` instruction.  If both :avr-fn-attr:`signal` and\n-  :avr-fn-attr:`interrupt` are specified for the same function, :avr-fn-attr:`signal`\n-  is silently ignored.\n-\n-.. index:: naked function attribute, AVR\n-\n-.. avr-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: no_gccisr function attribute, AVR\n-\n-.. avr-fn-attr:: no_gccisr\n-\n-  Do not use ``__gcc_isr`` pseudo instructions in a function with\n-  the :avr-fn-attr:`interrupt` or :avr-fn-attr:`signal` attribute aka. interrupt\n-  service routine (ISR).\n-  Use this attribute if the preamble of the ISR prologue should always read\n-\n-  .. code-block:: c++\n-\n-    push  __zero_reg__\n-    push  __tmp_reg__\n-    in    __tmp_reg__, __SREG__\n-    push  __tmp_reg__\n-    clr   __zero_reg__\n-\n-  and accordingly for the postamble of the epilogue --- no matter whether\n-  the mentioned registers are actually used in the ISR or not.\n-  Situations where you might want to use this attribute include:\n-\n-  * Code that (effectively) clobbers bits of ``SREG`` other than the\n-    ``I`` -flag by writing to the memory location of ``SREG``.\n-\n-  * Code that uses inline assembler to jump to a different function which\n-    expects (parts of) the prologue code as outlined above to be present.\n-\n-  To disable ``__gcc_isr`` generation for the whole compilation unit,\n-  there is option :option:`-mno-gas-isr-prologues`, see :ref:`avr-options`.\n-\n-.. index:: OS_main function attribute, AVR, OS_task function attribute, AVR\n-\n-.. avr-fn-attr:: OS_main, OS_task\n-\n-  On AVR, functions with the :avr-fn-attr:`OS_main` or ``OS_task`` attribute\n-  do not save/restore any call-saved register in their prologue/epilogue.\n-\n-  The :avr-fn-attr:`OS_main` attribute can be used when there *is\n-  guarantee* that interrupts are disabled at the time when the function\n-  is entered.  This saves resources when the stack pointer has to be\n-  changed to set up a frame for local variables.\n-\n-  The ``OS_task`` attribute can be used when there is *no\n-  guarantee* that interrupts are disabled at that time when the function\n-  is entered like for, e.g. task functions in a multi-threading operating\n-  system. In that case, changing the stack pointer register is\n-  guarded by save/clear/restore of the global interrupt enable flag.\n-\n-  The differences to the :avr-fn-attr:`naked` function attribute are:\n-\n-  * :avr-fn-attr:`naked` functions do not have a return instruction whereas\n-    :avr-fn-attr:`OS_main` and ``OS_task`` functions have a ``RET`` or\n-    ``RETI`` return instruction.\n-\n-  * :avr-fn-attr:`naked` functions do not set up a frame for local variables\n-    or a frame pointer whereas :avr-fn-attr:`OS_main` and ``OS_task`` do this\n-    as needed.\n-\n-.. index:: signal function attribute, AVR\n-\n-.. avr-fn-attr:: signal\n-\n-  Use this attribute on the AVR to indicate that the specified\n-  function is an interrupt handler.  The compiler generates function\n-  entry and exit sequences suitable for use in an interrupt handler when this\n-  attribute is present.\n-\n-  See also the :avr-fn-attr:`interrupt` function attribute.\n-\n-  The AVR hardware globally disables interrupts when an interrupt is executed.\n-  Interrupt handler functions defined with the :avr-fn-attr:`signal` attribute\n-  do not re-enable interrupts.  It is save to enable interrupts in a\n-  :avr-fn-attr:`signal` handler.  This 'save' only applies to the code\n-  generated by the compiler and not to the IRQ layout of the\n-  application which is responsibility of the application.\n-\n-  If both :avr-fn-attr:`signal` and :avr-fn-attr:`interrupt` are specified for the same\n-  function, :avr-fn-attr:`signal` is silently ignored.\n\\ No newline at end of file"}, {"sha": "cba1fcb95b30277caf4f53cabd9e6c9485634b3c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/blackfin-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fblackfin-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,91 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _blackfin-function-attributes:\n-\n-Blackfin Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the Blackfin back end:\n-\n-.. index:: exception_handler function attribute, exception handler functions, Blackfin\n-\n-.. blackfin-fn-attr:: exception_handler\n-\n-  Use this attribute on the Blackfin to indicate that the specified function\n-  is an exception handler.  The compiler generates function entry and\n-  exit sequences suitable for use in an exception handler when this\n-  attribute is present.\n-\n-.. index:: interrupt_handler function attribute, Blackfin\n-\n-.. blackfin-fn-attr:: interrupt_handler\n-\n-  Use this attribute to\n-  indicate that the specified function is an interrupt handler.  The compiler\n-  generates function entry and exit sequences suitable for use in an\n-  interrupt handler when this attribute is present.\n-\n-.. index:: kspisusp function attribute, Blackfin, User stack pointer in interrupts on the Blackfin\n-\n-.. blackfin-fn-attr:: kspisusp\n-\n-  When used together with :blackfin-fn-attr:`interrupt_handler`, :blackfin-fn-attr:`exception_handler`\n-  or :blackfin-fn-attr:`nmi_handler`, code is generated to load the stack pointer\n-  from the USP register in the function prologue.\n-\n-.. index:: l1_text function attribute, Blackfin\n-\n-.. blackfin-fn-attr:: l1_text\n-\n-  This attribute specifies a function to be placed into L1 Instruction\n-  SRAM. The function is put into a specific section named ``.l1.text``.\n-  With :option:`-mfdpic`, function calls with a such function as the callee\n-  or caller uses inlined PLT.\n-\n-.. index:: l2 function attribute, Blackfin\n-\n-.. blackfin-fn-attr:: l2\n-\n-  This attribute specifies a function to be placed into L2\n-  SRAM. The function is put into a specific section named\n-  ``.l2.text``. With :option:`-mfdpic`, callers of such functions use\n-  an inlined PLT.\n-\n-.. index:: indirect calls, Blackfin, longcall function attribute, Blackfin, shortcall function attribute, Blackfin\n-\n-.. blackfin-fn-attr:: longcall, shortcall\n-\n-  The :blackfin-fn-attr:`longcall` attribute\n-  indicates that the function might be far away from the call site and\n-  require a different (more expensive) calling sequence.  The\n-  ``shortcall`` attribute indicates that the function is always close\n-  enough for the shorter calling sequence to be used.  These attributes\n-  override the :option:`-mlongcall` switch.\n-\n-.. index:: nesting function attribute, Blackfin, Allow nesting in an interrupt handler on the Blackfin processor\n-\n-.. blackfin-fn-attr:: nesting\n-\n-  Use this attribute together with :blackfin-fn-attr:`interrupt_handler`,\n-  :blackfin-fn-attr:`exception_handler` or :blackfin-fn-attr:`nmi_handler` to indicate that the function\n-  entry code should enable nested interrupts or exceptions.\n-\n-.. index:: nmi_handler function attribute, Blackfin, NMI handler functions on the Blackfin processor\n-\n-.. blackfin-fn-attr:: nmi_handler\n-\n-  Use this attribute on the Blackfin to indicate that the specified function\n-  is an NMI handler.  The compiler generates function entry and\n-  exit sequences suitable for use in an NMI handler when this\n-  attribute is present.\n-\n-.. index:: saveall function attribute, Blackfin, save all registers on the Blackfin\n-\n-.. blackfin-fn-attr:: saveall\n-\n-  Use this attribute to indicate that\n-  all registers except the stack pointer should be saved in the prologue\n-  regardless of whether they are used or not.\n\\ No newline at end of file"}, {"sha": "76af135b9e8bdef26dfe2b4f4b2824ee8f5f14cb", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/bpf-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fbpf-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _bpf-function-attributes:\n-\n-BPF Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the BPF back end:\n-\n-.. index:: kernel helper, function attribute, BPF\n-\n-.. bpf-fn-attr:: kernel_helper\n-\n-  use this attribute to indicate the specified function declaration is a\n-  kernel helper.  The helper function is passed as an argument to the\n-  attribute.  Example:\n-\n-  .. code-block:: c++\n-\n-    int bpf_probe_read (void *dst, int size, const void *unsafe_ptr)\n-      __attribute__ ((kernel_helper (4)));\n\\ No newline at end of file"}, {"sha": "2600ab849a49dc43429faaaca4429b02deb8885c", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/c-sky-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fc-sky-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,37 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _c-sky-function-attributes:\n-\n-C-SKY Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the C-SKY back end:\n-\n-.. index:: interrupt function attribute, C-SKY, isr function attribute, C-SKY\n-\n-.. c-sky-fn-attr:: interrupt, isr\n-\n-  Use these attributes to indicate that the specified function\n-  is an interrupt handler.\n-  The compiler generates function entry and exit sequences suitable for\n-  use in an interrupt handler when either of these attributes are present.\n-\n-  Use of these options requires the :option:`-mistack` command-line option\n-  to enable support for the necessary interrupt stack instructions.  They\n-  are ignored with a warning otherwise.  See :ref:`c-sky-options`.\n-\n-.. index:: naked function attribute, C-SKY\n-\n-.. c-sky-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file"}, {"sha": "f24a8fd3f34e2137f12e06201551e01d48bacd62", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/common-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 1891, "changes": 1891, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fcommon-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,1891 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _common-function-attributes:\n-\n-Common Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The following attributes are supported on most targets.\n-\n-.. Keep this table alphabetized by attribute name.  Treat _ as space.\n-\n-.. fn-attr:: access (access-mode, ref-index), access (access-mode, ref-index, size-index)\n-\n-  The :fn-attr:`access` attribute enables the detection of invalid or unsafe\n-  accesses by functions to which they apply or their callers, as well as\n-  write-only accesses to objects that are never read from.  Such accesses\n-  may be diagnosed by warnings such as :option:`-Wstringop-overflow`,\n-  :option:`-Wuninitialized`, :option:`-Wunused`, and others.\n-\n-  The :fn-attr:`access` attribute specifies that a function to whose by-reference\n-  arguments the attribute applies accesses the referenced object according to\n-  :samp:`{access-mode}`.  The :samp:`{access-mode}` argument is required and must be\n-  one of four names: ``read_only``, ``read_write``, ``write_only``,\n-  or ``none``.  The remaining two are positional arguments.\n-\n-  The required :samp:`{ref-index}` positional argument  denotes a function\n-  argument of pointer (or in C++, reference) type that is subject to\n-  the access.  The same pointer argument can be referenced by at most one\n-  distinct :fn-attr:`access` attribute.\n-\n-  The optional :samp:`{size-index}` positional argument denotes a function\n-  argument of integer type that specifies the maximum size of the access.\n-  The size is the number of elements of the type referenced by :samp:`{ref-index}`,\n-  or the number of bytes when the pointer type is ``void*``.  When no\n-  :samp:`{size-index}` argument is specified, the pointer argument must be either\n-  null or point to a space that is suitably aligned and large for at least one\n-  object of the referenced type (this implies that a past-the-end pointer is\n-  not a valid argument).  The actual size of the access may be less but it\n-  must not be more.\n-\n-  The ``read_only`` access mode specifies that the pointer to which it\n-  applies is used to read the referenced object but not write to it.  Unless\n-  the argument specifying the size of the access denoted by :samp:`{size-index}`\n-  is zero, the referenced object must be initialized.  The mode implies\n-  a stronger guarantee than the ``const`` qualifier which, when cast away\n-  from a pointer, does not prevent the pointed-to object from being modified.\n-  Examples of the use of the ``read_only`` access mode is the argument to\n-  the ``puts`` function, or the second and third arguments to\n-  the ``memcpy`` function.\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((access (read_only, 1))) int puts (const char*);\n-    __attribute__ ((access (read_only, 2, 3))) void* memcpy (void*, const void*, size_t);\n-\n-  The ``read_write`` access mode applies to arguments of pointer types\n-  without the ``const`` qualifier.  It specifies that the pointer to which\n-  it applies is used to both read and write the referenced object.  Unless\n-  the argument specifying the size of the access denoted by :samp:`{size-index}`\n-  is zero, the object referenced by the pointer must be initialized.  An example\n-  of the use of the ``read_write`` access mode is the first argument to\n-  the ``strcat`` function.\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((access (read_write, 1), access (read_only, 2))) char* strcat (char*, const char*);\n-\n-  The ``write_only`` access mode applies to arguments of pointer types\n-  without the ``const`` qualifier.  It specifies that the pointer to which\n-  it applies is used to write to the referenced object but not read from it.\n-  The object referenced by the pointer need not be initialized.  An example\n-  of the use of the ``write_only`` access mode is the first argument to\n-  the ``strcpy`` function, or the first two arguments to the ``fgets``\n-  function.\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((access (write_only, 1), access (read_only, 2))) char* strcpy (char*, const char*);\n-    __attribute__ ((access (write_only, 1, 2), access (read_write, 3))) int fgets (char*, int, FILE*);\n-\n-  The access mode ``none`` specifies that the pointer to which it applies\n-  is not used to access the referenced object at all.  Unless the pointer is\n-  null the pointed-to object must exist and have at least the size as denoted\n-  by the :samp:`{size-index}` argument.  When the optional :samp:`{size-index}`\n-  argument is omitted for an argument of ``void*`` type the actual pointer\n-  agument is ignored.  The referenced object need not be initialized.\n-  The mode is intended to be used as a means to help validate the expected\n-  object size, for example in functions that call ``__builtin_object_size``.\n-  See :ref:`object-size-checking`.\n-\n-  Note that the ``access`` attribute merely specifies how an object\n-  referenced by the pointer argument can be accessed; it does not imply that\n-  an access **will** happen.  Also, the ``access`` attribute does not\n-  imply the attribute :fn-attr:`nonnull` ; it may be appropriate to add both attributes\n-  at the declaration of a function that unconditionally manipulates a buffer via\n-  a pointer argument.  See the :fn-attr:`nonnull` attribute for more information and\n-  caveats.\n-\n-.. index:: alias function attribute\n-\n-.. fn-attr:: alias (\"target\")\n-\n-  The ``alias`` attribute causes the declaration to be emitted as an alias\n-  for another symbol, which must have been previously declared with the same\n-  type, and for variables, also the same size and alignment.  Declaring an alias\n-  with a different type than the target is undefined and may be diagnosed.  As\n-  an example, the following declarations:\n-\n-  .. code-block:: c++\n-\n-    void __f () { /* Do something. */; }\n-    void f () __attribute__ ((weak, alias (\"__f\")));\n-\n-  define :samp:`f` to be a weak alias for :samp:`__f`.  In C++, the mangled name\n-  for the target must be used.  It is an error if :samp:`__f` is not defined in\n-  the same translation unit.\n-\n-  This attribute requires assembler and object file support,\n-  and may not be available on all targets.\n-\n-.. index:: aligned function attribute\n-\n-.. fn-attr:: aligned, aligned (alignment)\n-\n-  The :fn-attr:`aligned` attribute specifies a minimum alignment for\n-  the first instruction of the function, measured in bytes.  When specified,\n-  :samp:`{alignment}` must be an integer constant power of 2.  Specifying no\n-  :samp:`{alignment}` argument implies the ideal alignment for the target.\n-  The ``__alignof__`` operator can be used to determine what that is\n-  (see :ref:`alignment`).  The attribute has no effect when a definition for\n-  the function is not provided in the same translation unit.\n-\n-  The attribute cannot be used to decrease the alignment of a function\n-  previously declared with a more restrictive alignment; only to increase\n-  it.  Attempts to do otherwise are diagnosed.  Some targets specify\n-  a minimum default alignment for functions that is greater than 1.  On\n-  such targets, specifying a less restrictive alignment is silently ignored.\n-  Using the attribute overrides the effect of the :option:`-falign-functions`\n-  (see :ref:`optimize-options`) option for this function.\n-\n-  Note that the effectiveness of :fn-attr:`aligned` attributes may be\n-  limited by inherent limitations in the system linker\n-  and/or object file format.  On some systems, the\n-  linker is only able to arrange for functions to be aligned up to a\n-  certain maximum alignment.  (For some linkers, the maximum supported\n-  alignment may be very very small.)  See your linker documentation for\n-  further information.\n-\n-  The :fn-attr:`aligned` attribute can also be used for variables and fields\n-  (see :ref:`variable-attributes`.)\n-\n-.. index:: alloc_align function attribute\n-\n-.. fn-attr:: alloc_align (position)\n-\n-  The ``alloc_align`` attribute may be applied to a function that\n-  returns a pointer and takes at least one argument of an integer or\n-  enumerated type.\n-  It indicates that the returned pointer is aligned on a boundary given\n-  by the function argument at :samp:`{position}`.  Meaningful alignments are\n-  powers of 2 greater than one.  GCC uses this information to improve\n-  pointer alignment analysis.\n-\n-  The function parameter denoting the allocated alignment is specified by\n-  one constant integer argument whose number is the argument of the attribute.\n-  Argument numbering starts at one.\n-\n-  For instance,\n-\n-  .. code-block:: c++\n-\n-    void* my_memalign (size_t, size_t) __attribute__ ((alloc_align (1)));\n-\n-  declares that ``my_memalign`` returns memory with minimum alignment\n-  given by parameter 1.\n-\n-.. index:: alloc_size function attribute\n-\n-.. fn-attr:: alloc_size (position), alloc_size (position-1, position-2)\n-\n-  The ``alloc_size`` attribute may be applied to a function that\n-  returns a pointer and takes at least one argument of an integer or\n-  enumerated type.\n-  It indicates that the returned pointer points to memory whose size is\n-  given by the function argument at :samp:`{position-1}`, or by the product\n-  of the arguments at :samp:`{position-1}` and :samp:`{position-2}`.  Meaningful\n-  sizes are positive values less than ``PTRDIFF_MAX``.  GCC uses this\n-  information to improve the results of ``__builtin_object_size``.\n-\n-  The function parameter(s) denoting the allocated size are specified by\n-  one or two integer arguments supplied to the attribute.  The allocated size\n-  is either the value of the single function argument specified or the product\n-  of the two function arguments specified.  Argument numbering starts at\n-  one for ordinary functions, and at two for C++ non-static member functions.\n-\n-  For instance,\n-\n-  .. code-block:: c++\n-\n-    void* my_calloc (size_t, size_t) __attribute__ ((alloc_size (1, 2)));\n-    void* my_realloc (void*, size_t) __attribute__ ((alloc_size (2)));\n-\n-  declares that ``my_calloc`` returns memory of the size given by\n-  the product of parameter 1 and 2 and that ``my_realloc`` returns memory\n-  of the size given by parameter 2.\n-\n-.. index:: always_inline function attribute\n-\n-.. fn-attr:: always_inline\n-\n-  Generally, functions are not inlined unless optimization is specified.\n-  For functions declared inline, this attribute inlines the function\n-  independent of any restrictions that otherwise apply to inlining.\n-  Failure to inline such a function is diagnosed as an error.\n-  Note that if such a function is called indirectly the compiler may\n-  or may not inline it depending on optimization level and a failure\n-  to inline an indirect call may or may not be diagnosed.\n-\n-.. index:: artificial function attribute\n-\n-.. fn-attr:: artificial\n-\n-  This attribute is useful for small inline wrappers that if possible\n-  should appear during debugging as a unit.  Depending on the debug\n-  info format it either means marking the function as artificial\n-  or using the caller location for all instructions within the inlined\n-  body.\n-\n-.. index:: assume_aligned function attribute\n-\n-.. fn-attr:: assume_aligned (alignment), assume_aligned (alignment, offset)\n-\n-  The ``assume_aligned`` attribute may be applied to a function that\n-  returns a pointer.  It indicates that the returned pointer is aligned\n-  on a boundary given by :samp:`{alignment}`.  If the attribute has two\n-  arguments, the second argument is misalignment :samp:`{offset}`.  Meaningful\n-  values of :samp:`{alignment}` are powers of 2 greater than one.  Meaningful\n-  values of :samp:`{offset}` are greater than zero and less than :samp:`{alignment}`.\n-\n-  For instance\n-\n-  .. code-block:: c++\n-\n-    void* my_alloc1 (size_t) __attribute__((assume_aligned (16)));\n-    void* my_alloc2 (size_t) __attribute__((assume_aligned (32, 8)));\n-\n-  declares that ``my_alloc1`` returns 16-byte aligned pointers and\n-  that ``my_alloc2`` returns a pointer whose value modulo 32 is equal\n-  to 8.\n-\n-.. index:: cold function attribute\n-\n-.. fn-attr:: cold\n-\n-  The :fn-attr:`cold` attribute on functions is used to inform the compiler that\n-  the function is unlikely to be executed.  The function is optimized for\n-  size rather than speed and on many targets it is placed into a special\n-  subsection of the text section so all cold functions appear close together,\n-  improving code locality of non-cold parts of program.  The paths leading\n-  to calls of cold functions within code are marked as unlikely by the branch\n-  prediction mechanism.  It is thus useful to mark functions used to handle\n-  unlikely conditions, such as ``perror``, as cold to improve optimization\n-  of hot functions that do call marked functions in rare occasions.\n-\n-  When profile feedback is available, via :option:`-fprofile-use`, cold functions\n-  are automatically detected and this attribute is ignored.\n-\n-.. index:: const function attribute, functions that have no side effects\n-\n-.. fn-attr:: const\n-\n-  Calls to functions whose return value is not affected by changes to\n-  the observable state of the program and that have no observable effects\n-  on such state other than to return a value may lend themselves to\n-  optimizations such as common subexpression elimination.  Declaring such\n-  functions with the :option:`const` attribute allows GCC to avoid emitting\n-  some calls in repeated invocations of the function with the same argument\n-  values.\n-\n-  For example,\n-\n-  .. code-block:: c++\n-\n-    int square (int) __attribute__ ((const));\n-\n-  tells GCC that subsequent calls to function ``square`` with the same\n-  argument value can be replaced by the result of the first call regardless\n-  of the statements in between.\n-\n-  The :option:`const` attribute prohibits a function from reading objects\n-  that affect its return value between successive invocations.  However,\n-  functions declared with the attribute can safely read objects that do\n-  not change their return value, such as non-volatile constants.\n-\n-  The :fn-attr:`const` attribute imposes greater restrictions on a function's\n-  definition than the similar :fn-attr:`pure` attribute.  Declaring the same\n-  function with both the :fn-attr:`const` and the :fn-attr:`pure` attribute is\n-  diagnosed.  Because a const function cannot have any observable side\n-  effects it does not make sense for it to return ``void``.  Declaring\n-  such a function is diagnosed.\n-\n-  .. index:: pointer arguments\n-\n-  Note that a function that has pointer arguments and examines the data\n-  pointed to must *not* be declared :option:`const` if the pointed-to\n-  data might change between successive invocations of the function.  In\n-  general, since a function cannot distinguish data that might change\n-  from data that cannot, const functions should never take pointer or,\n-  in C++, reference arguments. Likewise, a function that calls a non-const\n-  function usually must not be const itself.\n-\n-.. index:: constructor function attribute, destructor function attribute\n-\n-.. fn-attr:: constructor, destructor, constructor (priority), destructor (priority)\n-\n-  The :fn-attr:`constructor` attribute causes the function to be called\n-  automatically before execution enters ``main ()``.  Similarly, the\n-  ``destructor`` attribute causes the function to be called\n-  automatically after ``main ()`` completes or ``exit ()`` is\n-  called.  Functions with these attributes are useful for\n-  initializing data that is used implicitly during the execution of\n-  the program.\n-\n-  On some targets the attributes also accept an integer argument to\n-  specify a priority to control the order in which constructor and\n-  destructor functions are run.  A constructor\n-  with a smaller priority number runs before a constructor with a larger\n-  priority number; the opposite relationship holds for destructors.  Note\n-  that priorities 0-100 are reserved.  So, if you have a constructor that\n-  allocates a resource and a destructor that deallocates the same\n-  resource, both functions typically have the same priority.  The\n-  priorities for constructor and destructor functions are the same as\n-  those specified for namespace-scope C++ objects (see :ref:`c++-attributes`).\n-  However, at present, the order in which constructors for C++ objects\n-  with static storage duration and functions decorated with attribute\n-  :fn-attr:`constructor` are invoked is unspecified. In mixed declarations,\n-  attribute ``init_priority`` can be used to impose a specific ordering.\n-\n-  Using the argument forms of the :fn-attr:`constructor` and ``destructor``\n-  attributes on targets where the feature is not supported is rejected with\n-  an error.\n-\n-.. index:: copy function attribute\n-\n-.. fn-attr:: copy, copy (function)\n-\n-  The :fn-attr:`copy` attribute applies the set of attributes with which\n-  :samp:`{function}` has been declared to the declaration of the function\n-  to which the attribute is applied.  The attribute is designed for\n-  libraries that define aliases or function resolvers that are expected\n-  to specify the same set of attributes as their targets.  The :fn-attr:`copy`\n-  attribute can be used with functions, variables, or types.  However,\n-  the kind of symbol to which the attribute is applied (either function\n-  or variable) must match the kind of symbol to which the argument refers.\n-  The :fn-attr:`copy` attribute copies only syntactic and semantic attributes\n-  but not attributes that affect a symbol's linkage or visibility such as\n-  ``alias``, :fn-attr:`visibility`, or :fn-attr:`weak`.  The :fn-attr:`deprecated`\n-  and ``target_clones`` attribute are also not copied.\n-  See :ref:`common-type-attributes`.\n-  See :ref:`common-variable-attributes`.\n-\n-  For example, the :samp:`{StrongAlias}` macro below makes use of the ``alias``\n-  and :fn-attr:`copy` attributes to define an alias named :samp:`{alloc}` for function\n-  :samp:`{allocate}` declared with attributes :samp:`{alloc_size}`, :samp:`{malloc}`, and\n-  :samp:`{nothrow}`.  Thanks to the ``__typeof__`` operator the alias has\n-  the same type as the target function.  As a result of the :fn-attr:`copy`\n-  attribute the alias also shares the same attributes as the target.\n-\n-  .. code-block:: c++\n-\n-    #define StrongAlias(TargetFunc, AliasDecl)  \\\n-      extern __typeof__ (TargetFunc) AliasDecl  \\\n-        __attribute__ ((alias (#TargetFunc), copy (TargetFunc)));\n-\n-    extern __attribute__ ((alloc_size (1), malloc, nothrow))\n-      void* allocate (size_t);\n-    StrongAlias (allocate, alloc);\n-\n-.. index:: deprecated function attribute\n-\n-.. fn-attr:: deprecated, deprecated (msg)\n-\n-  The :fn-attr:`deprecated` attribute results in a warning if the function\n-  is used anywhere in the source file.  This is useful when identifying\n-  functions that are expected to be removed in a future version of a\n-  program.  The warning also includes the location of the declaration\n-  of the deprecated function, to enable users to easily find further\n-  information about why the function is deprecated, or what they should\n-  do instead.  Note that the warnings only occurs for uses:\n-\n-  .. code-block:: c++\n-\n-    int old_fn () __attribute__ ((deprecated));\n-    int old_fn ();\n-    int (*fn_ptr)() = old_fn;\n-\n-  results in a warning on line 3 but not line 2.  The optional :samp:`{msg}`\n-  argument, which must be a string, is printed in the warning if\n-  present.\n-\n-  The :fn-attr:`deprecated` attribute can also be used for variables and\n-  types (see :ref:`variable-attributes`, see :ref:`type-attributes`.)\n-\n-  The message attached to the attribute is affected by the setting of\n-  the :option:`-fmessage-length` option.\n-\n-.. index:: unavailable function attribute\n-\n-.. fn-attr:: unavailable, unavailable (msg)\n-\n-  The :fn-attr:`unavailable` attribute results in an error if the function\n-  is used anywhere in the source file.  This is useful when identifying\n-  functions that have been removed from a particular variation of an\n-  interface.  Other than emitting an error rather than a warning, the\n-  :fn-attr:`unavailable` attribute behaves in the same manner as\n-  :fn-attr:`deprecated`.\n-\n-  The :fn-attr:`unavailable` attribute can also be used for variables and\n-  types (see :ref:`variable-attributes`, see :ref:`type-attributes`.)\n-\n-.. index:: error function attribute, warning function attribute\n-\n-.. fn-attr:: error (\"message\"), warning (\"message\")\n-\n-  If the ``error`` or ``warning`` attribute\n-  is used on a function declaration and a call to such a function\n-  is not eliminated through dead code elimination or other optimizations,\n-  an error or warning (respectively) that includes :samp:`{message}` is diagnosed.\n-  This is useful\n-  for compile-time checking, especially together with ``__builtin_constant_p``\n-  and inline functions where checking the inline function arguments is not\n-  possible through ``extern char [(condition) ? 1 : -1];`` tricks.\n-\n-  While it is possible to leave the function undefined and thus invoke\n-  a link failure (to define the function with\n-  a message in ``.gnu.warning*`` section),\n-  when using these attributes the problem is diagnosed\n-  earlier and with exact location of the call even in presence of inline\n-  functions or when not emitting debugging information.\n-\n-.. index:: externally_visible function attribute\n-\n-.. fn-attr:: externally_visible\n-\n-  This attribute, attached to a global variable or function, nullifies\n-  the effect of the :option:`-fwhole-program` command-line option, so the\n-  object remains visible outside the current compilation unit.\n-\n-  If :option:`-fwhole-program` is used together with :option:`-flto` and\n-  :command:`gold` is used as the linker plugin,\n-  :fn-attr:`externally_visible` attributes are automatically added to functions\n-  (not variable yet due to a current :command:`gold` issue)\n-  that are accessed outside of LTO objects according to resolution file\n-  produced by :command:`gold`.\n-  For other linkers that cannot generate resolution file,\n-  explicit :fn-attr:`externally_visible` attributes are still necessary.\n-\n-.. index:: fd_arg function attribute\n-\n-.. fn-attr:: fd_arg, fd_arg (N)\n-\n-  The :fn-attr:`fd_arg` attribute may be applied to a function that takes an open\n-  file descriptor at referenced argument :samp:`{N}`.\n-\n-  It indicates that the passed filedescriptor must not have been closed.\n-  Therefore, when the analyzer is enabled with :option:`-fanalyzer`, the\n-  analyzer may emit a :option:`-Wanalyzer-fd-use-after-close` diagnostic\n-  if it detects a code path in which a function with this attribute is\n-  called with a closed file descriptor.\n-\n-  The attribute also indicates that the file descriptor must have been checked for\n-  validity before usage. Therefore, analyzer may emit\n-  :option:`-Wanalyzer-fd-use-without-check` diagnostic if it detects a code path in\n-  which a function with this attribute is called with a file descriptor that has\n-  not been checked for validity.\n-\n-.. index:: fd_arg_read function attribute\n-\n-.. fn-attr:: fd_arg_read, fd_arg_read (N)\n-\n-  The :fn-attr:`fd_arg_read` is identical to :fn-attr:`fd_arg`, but with the additional\n-  requirement that it might read from the file descriptor, and thus, the file\n-  descriptor must not have been opened as write-only.\n-\n-  The analyzer may emit a :option:`-Wanalyzer-access-mode-mismatch`\n-  diagnostic if it detects a code path in which a function with this\n-  attribute is called on a file descriptor opened with ``O_WRONLY``.\n-\n-.. index:: fd_arg_write function attribute\n-\n-.. fn-attr:: fd_arg_write, fd_arg_write (N)\n-\n-  The :fn-attr:`fd_arg_write` is identical to :fn-attr:`fd_arg_read` except that the\n-  analyzer may emit a :option:`-Wanalyzer-access-mode-mismatch` diagnostic if\n-  it detects a code path in which a function with this attribute is called on a\n-  file descriptor opened with ``O_RDONLY``.\n-\n-.. index:: flatten function attribute\n-\n-.. fn-attr:: flatten\n-\n-  Generally, inlining into a function is limited.  For a function marked with\n-  this attribute, every call inside this function is inlined, if possible.\n-  Functions declared with attribute :fn-attr:`noinline` and similar are not\n-  inlined.  Whether the function itself is considered for inlining depends\n-  on its size and the current inlining parameters.\n-\n-.. index:: format function attribute, functions with printf, scanf, strftime or strfmon style arguments\n-\n-.. option:: format (archetype, string-index, first-to-check)\n-\n-  The ``format`` attribute specifies that a function takes ``printf``,\n-  ``scanf``, ``strftime`` or ``strfmon`` style arguments that\n-  should be type-checked against a format string.  For example, the\n-  declaration:\n-\n-  .. code-block:: c++\n-\n-    extern int\n-    my_printf (void *my_object, const char *my_format, ...)\n-          __attribute__ ((format (printf, 2, 3)));\n-\n-  causes the compiler to check the arguments in calls to ``my_printf``\n-  for consistency with the ``printf`` style format string argument\n-  ``my_format``.\n-\n-  The parameter :samp:`{archetype}` determines how the format string is\n-  interpreted, and should be ``printf``, ``scanf``, ``strftime``,\n-  ``gnu_printf``, ``gnu_scanf``, ``gnu_strftime`` or\n-  ``strfmon``.  (You can also use ``__printf__``,\n-  ``__scanf__``, ``__strftime__`` or ``__strfmon__``.)  On\n-  MinGW targets, ``ms_printf``, ``ms_scanf``, and\n-  ``ms_strftime`` are also present.\n-  :samp:`{archetype}` values such as ``printf`` refer to the formats accepted\n-  by the system's C runtime library,\n-  while values prefixed with :samp:`gnu_` always refer\n-  to the formats accepted by the GNU C Library.  On Microsoft Windows\n-  targets, values prefixed with :samp:`ms_` refer to the formats accepted by the\n-  :samp:`msvcrt.dll` library.\n-  The parameter :samp:`{string-index}`\n-  specifies which argument is the format string argument (starting\n-  from 1), while :samp:`{first-to-check}` is the number of the first\n-  argument to check against the format string.  For functions\n-  where the arguments are not available to be checked (such as\n-  ``vprintf``), specify the third parameter as zero.  In this case the\n-  compiler only checks the format string for consistency.  For\n-  ``strftime`` formats, the third parameter is required to be zero.\n-  Since non-static C++ methods have an implicit ``this`` argument, the\n-  arguments of such methods should be counted from two, not one, when\n-  giving values for :samp:`{string-index}` and :samp:`{first-to-check}`.\n-\n-  In the example above, the format string (``my_format``) is the second\n-  argument of the function ``my_print``, and the arguments to check\n-  start with the third argument, so the correct parameters for the format\n-  attribute are 2 and 3.\n-\n-  The ``format`` attribute allows you to identify your own functions\n-  that take format strings as arguments, so that GCC can check the\n-  calls to these functions for errors.  The compiler always (unless\n-  :option:`-ffreestanding` or :option:`-fno-builtin` is used) checks formats\n-  for the standard library functions ``printf``, ``fprintf``,\n-  ``sprintf``, ``scanf``, ``fscanf``, ``sscanf``, ``strftime``,\n-  ``vprintf``, ``vfprintf`` and ``vsprintf`` whenever such\n-  warnings are requested (using :option:`-Wformat`), so there is no need to\n-  modify the header file :samp:`stdio.h`.  In C99 mode, the functions\n-  ``snprintf``, ``vsnprintf``, ``vscanf``, ``vfscanf`` and\n-  ``vsscanf`` are also checked.  Except in strictly conforming C\n-  standard modes, the X/Open function ``strfmon`` is also checked as\n-  are ``printf_unlocked`` and ``fprintf_unlocked``.\n-  See :ref:`c-dialect-options`.\n-\n-  For Objective-C dialects, ``NSString`` (or ``__NSString__``) is\n-  recognized in the same context.  Declarations including these format attributes\n-  are parsed for correct syntax, however the result of checking of such format\n-  strings is not yet defined, and is not carried out by this version of the\n-  compiler.\n-\n-  The target may also provide additional types of format checks.\n-  See :ref:`target-format-checks`.\n-\n-.. index:: format_arg function attribute\n-\n-.. option:: format_arg (string-index)\n-\n-  The ``format_arg`` attribute specifies that a function takes one or\n-  more format strings for a ``printf``, ``scanf``, ``strftime`` or\n-  ``strfmon`` style function and modifies it (for example, to translate\n-  it into another language), so the result can be passed to a\n-  ``printf``, ``scanf``, ``strftime`` or ``strfmon`` style\n-  function (with the remaining arguments to the format function the same\n-  as they would have been for the unmodified string).  Multiple\n-  ``format_arg`` attributes may be applied to the same function, each\n-  designating a distinct parameter as a format string.  For example, the\n-  declaration:\n-\n-  .. code-block:: c++\n-\n-    extern char *\n-    my_dgettext (char *my_domain, const char *my_format)\n-          __attribute__ ((format_arg (2)));\n-\n-  causes the compiler to check the arguments in calls to a ``printf``,\n-  ``scanf``, ``strftime`` or ``strfmon`` type function, whose\n-  format string argument is a call to the ``my_dgettext`` function, for\n-  consistency with the format string argument ``my_format``.  If the\n-  ``format_arg`` attribute had not been specified, all the compiler\n-  could tell in such calls to format functions would be that the format\n-  string argument is not constant; this would generate a warning when\n-  :option:`-Wformat-nonliteral` is used, but the calls could not be checked\n-  without the attribute.\n-\n-  In calls to a function declared with more than one ``format_arg``\n-  attribute, each with a distinct argument value, the corresponding\n-  actual function arguments are checked against all format strings\n-  designated by the attributes.  This capability is designed to support\n-  the GNU ``ngettext`` family of functions.\n-\n-  The parameter :samp:`{string-index}` specifies which argument is the format\n-  string argument (starting from one).  Since non-static C++ methods have\n-  an implicit ``this`` argument, the arguments of such methods should\n-  be counted from two.\n-\n-  The ``format_arg`` attribute allows you to identify your own\n-  functions that modify format strings, so that GCC can check the\n-  calls to ``printf``, ``scanf``, ``strftime`` or ``strfmon``\n-  type function whose operands are a call to one of your own function.\n-  The compiler always treats ``gettext``, ``dgettext``, and\n-  ``dcgettext`` in this manner except when strict ISO C support is\n-  requested by :option:`-ansi` or an appropriate :option:`-std` option, or\n-  :option:`-ffreestanding` or :option:`-fno-builtin`\n-  is used.  See :ref:`c-dialect-options`.\n-\n-  For Objective-C dialects, the ``format-arg`` attribute may refer to an\n-  ``NSString`` reference for compatibility with the ``format`` attribute\n-  above.\n-\n-  The target may also allow additional types in ``format-arg`` attributes.\n-  See :ref:`target-format-checks`.\n-\n-.. index:: gnu_inline function attribute\n-\n-.. fn-attr:: gnu_inline\n-\n-  This attribute should be used with a function that is also declared\n-  with the ``inline`` keyword.  It directs GCC to treat the function\n-  as if it were defined in gnu90 mode even when compiling in C99 or\n-  gnu99 mode.\n-\n-  If the function is declared ``extern``, then this definition of the\n-  function is used only for inlining.  In no case is the function\n-  compiled as a standalone function, not even if you take its address\n-  explicitly.  Such an address becomes an external reference, as if you\n-  had only declared the function, and had not defined it.  This has\n-  almost the effect of a macro.  The way to use this is to put a\n-  function definition in a header file with this attribute, and put\n-  another copy of the function, without ``extern``, in a library\n-  file.  The definition in the header file causes most calls to the\n-  function to be inlined.  If any uses of the function remain, they\n-  refer to the single copy in the library.  Note that the two\n-  definitions of the functions need not be precisely the same, although\n-  if they do not have the same effect your program may behave oddly.\n-\n-  In C, if the function is neither ``extern`` nor ``static``, then\n-  the function is compiled as a standalone function, as well as being\n-  inlined where possible.\n-\n-  This is how GCC traditionally handled functions declared\n-  ``inline``.  Since ISO C99 specifies a different semantics for\n-  ``inline``, this function attribute is provided as a transition\n-  measure and as a useful feature in its own right.  This attribute is\n-  available in GCC 4.1.3 and later.  It is available if either of the\n-  preprocessor macros ``__GNUC_GNU_INLINE__`` or\n-  ``__GNUC_STDC_INLINE__`` are defined.  See :ref:`inline`.\n-\n-  In C++, this attribute does not depend on ``extern`` in any way,\n-  but it still requires the ``inline`` keyword to enable its special\n-  behavior.\n-\n-.. index:: hot function attribute\n-\n-.. fn-attr:: hot\n-\n-  The :fn-attr:`hot` attribute on a function is used to inform the compiler that\n-  the function is a hot spot of the compiled program.  The function is\n-  optimized more aggressively and on many targets it is placed into a special\n-  subsection of the text section so all hot functions appear close together,\n-  improving locality.\n-\n-  When profile feedback is available, via :option:`-fprofile-use`, hot functions\n-  are automatically detected and this attribute is ignored.\n-\n-.. index:: ifunc function attribute, indirect functions, functions that are dynamically resolved\n-\n-.. fn-attr:: ifunc (\"resolver\")\n-\n-  The ``ifunc`` attribute is used to mark a function as an indirect\n-  function using the STT_GNU_IFUNC symbol type extension to the ELF\n-  standard.  This allows the resolution of the symbol value to be\n-  determined dynamically at load time, and an optimized version of the\n-  routine to be selected for the particular processor or other system\n-  characteristics determined then.  To use this attribute, first define\n-  the implementation functions available, and a resolver function that\n-  returns a pointer to the selected implementation function.  The\n-  implementation functions' declarations must match the API of the\n-  function being implemented.  The resolver should be declared to\n-  be a function taking no arguments and returning a pointer to\n-  a function of the same type as the implementation.  For example:\n-\n-  .. code-block:: c++\n-\n-    void *my_memcpy (void *dst, const void *src, size_t len)\n-    {\n-      ...\n-      return dst;\n-    }\n-\n-    static void * (*resolve_memcpy (void))(void *, const void *, size_t)\n-    {\n-      return my_memcpy; // we will just always select this routine\n-    }\n-\n-  The exported header file declaring the function the user calls would\n-  contain:\n-\n-  .. code-block:: c++\n-\n-    extern void *memcpy (void *, const void *, size_t);\n-\n-  allowing the user to call ``memcpy`` as a regular function, unaware of\n-  the actual implementation.  Finally, the indirect function needs to be\n-  defined in the same translation unit as the resolver function:\n-\n-  .. code-block:: c++\n-\n-    void *memcpy (void *, const void *, size_t)\n-         __attribute__ ((ifunc (\"resolve_memcpy\")));\n-\n-  In C++, the ``ifunc`` attribute takes a string that is the mangled name\n-  of the resolver function.  A C++ resolver for a non-static member function\n-  of class ``C`` should be declared to return a pointer to a non-member\n-  function taking pointer to ``C`` as the first argument, followed by\n-  the same arguments as of the implementation function.  G++ checks\n-  the signatures of the two functions and issues\n-  a :option:`-Wattribute-alias` warning for mismatches.  To suppress a warning\n-  for the necessary cast from a pointer to the implementation member function\n-  to the type of the corresponding non-member function use\n-  the :option:`-Wno-pmf-conversions` option.  For example:\n-\n-  .. code-block:: c++\n-\n-    class S\n-    {\n-    private:\n-      int debug_impl (int);\n-      int optimized_impl (int);\n-\n-      typedef int Func (S*, int);\n-\n-      static Func* resolver ();\n-    public:\n-\n-      int interface (int);\n-    };\n-\n-    int S::debug_impl (int) { /* ... */ }\n-    int S::optimized_impl (int) { /* ... */ }\n-\n-    S::Func* S::resolver ()\n-    {\n-      int (S::*pimpl) (int)\n-        = getenv (\"DEBUG\") ? &S::debug_impl : &S::optimized_impl;\n-\n-      // Cast triggers -Wno-pmf-conversions.\n-      return reinterpret_cast<Func*>(pimpl);\n-    }\n-\n-    int S::interface (int) __attribute__ ((ifunc (\"_ZN1S8resolverEv\")));\n-\n-  Indirect functions cannot be weak.  Binutils version 2.20.1 or higher\n-  and GNU C Library version 2.11.1 are required to use this feature.\n-\n-.. fn-attr:: interrupt, interrupt_handler\n-\n-  Many GCC back ends support attributes to indicate that a function is\n-  an interrupt handler, which tells the compiler to generate function\n-  entry and exit sequences that differ from those from regular\n-  functions.  The exact syntax and behavior are target-specific;\n-  refer to the following subsections for details.\n-\n-.. index:: leaf function attribute\n-\n-.. fn-attr:: leaf\n-\n-  Calls to external functions with this attribute must return to the\n-  current compilation unit only by return or by exception handling.  In\n-  particular, a leaf function is not allowed to invoke callback functions\n-  passed to it from the current compilation unit, directly call functions\n-  exported by the unit, or ``longjmp`` into the unit.  Leaf functions\n-  might still call functions from other compilation units and thus they\n-  are not necessarily leaf in the sense that they contain no function\n-  calls at all.\n-\n-  The attribute is intended for library functions to improve dataflow\n-  analysis.  The compiler takes the hint that any data not escaping the\n-  current compilation unit cannot be used or modified by the leaf\n-  function.  For example, the ``sin`` function is a leaf function, but\n-  ``qsort`` is not.\n-\n-  Note that leaf functions might indirectly run a signal handler defined\n-  in the current compilation unit that uses static variables.  Similarly,\n-  when lazy symbol resolution is in effect, leaf functions might invoke\n-  indirect functions whose resolver function or implementation function is\n-  defined in the current compilation unit and uses static variables.  There\n-  is no standard-compliant way to write such a signal handler, resolver\n-  function, or implementation function, and the best that you can do is to\n-  remove the :fn-attr:`leaf` attribute or mark all such static variables\n-  ``volatile``.  Lastly, for ELF-based systems that support symbol\n-  interposition, care should be taken that functions defined in the\n-  current compilation unit do not unexpectedly interpose other symbols\n-  based on the defined standards mode and defined feature test macros;\n-  otherwise an inadvertent callback would be added.\n-\n-  The attribute has no effect on functions defined within the current\n-  compilation unit.  This is to allow easy merging of multiple compilation\n-  units into one, for example, by using the link-time optimization.  For\n-  this reason the attribute is not allowed on types to annotate indirect\n-  calls.\n-\n-.. index:: malloc function attribute, functions that behave like malloc\n-\n-.. fn-attr:: malloc, malloc (deallocator), malloc (deallocator, ptr-index)\n-\n-  Attribute ``malloc`` indicates that a function is ``malloc`` -like,\n-  i.e., that the pointer :samp:`{P}` returned by the function cannot alias any\n-  other pointer valid when the function returns, and moreover no\n-  pointers to valid objects occur in any storage addressed by :samp:`{P}`. In\n-  addition, the GCC predicts that a function with the attribute returns\n-  non-null in most cases.\n-\n-  Independently, the form of the attribute with one or two arguments\n-  associates ``deallocator`` as a suitable deallocation function for\n-  pointers returned from the ``malloc`` -like function.  :samp:`{ptr-index}`\n-  denotes the positional argument to which when the pointer is passed in\n-  calls to ``deallocator`` has the effect of deallocating it.\n-\n-  Using the attribute with no arguments is designed to improve optimization\n-  by relying on the aliasing property it implies.  Functions like ``malloc``\n-  and ``calloc`` have this property because they return a pointer to\n-  uninitialized or zeroed-out, newly obtained storage.  However, functions\n-  like ``realloc`` do not have this property, as they may return pointers\n-  to storage containing pointers to existing objects.  Additionally, since\n-  all such functions are assumed to return null only infrequently, callers\n-  can be optimized based on that assumption.\n-\n-  Associating a function with a :samp:`{deallocator}` helps detect calls to\n-  mismatched allocation and deallocation functions and diagnose them under\n-  the control of options such as :option:`-Wmismatched-dealloc`.  It also\n-  makes it possible to diagnose attempts to deallocate objects that were not\n-  allocated dynamically, by :option:`-Wfree-nonheap-object`.  To indicate\n-  that an allocation function both satisifies the nonaliasing property and\n-  has a deallocator associated with it, both the plain form of the attribute\n-  and the one with the :samp:`{deallocator}` argument must be used.  The same\n-  function can be both an allocator and a deallocator.  Since inlining one\n-  of the associated functions but not the other could result in apparent\n-  mismatches, this form of attribute ``malloc`` is not accepted on inline\n-  functions.  For the same reason, using the attribute prevents both\n-  the allocation and deallocation functions from being expanded inline.\n-\n-  For example, besides stating that the functions return pointers that do\n-  not alias any others, the following declarations make ``fclose``\n-  a suitable deallocator for pointers returned from all functions except\n-  ``popen``, and ``pclose`` as the only suitable deallocator for\n-  pointers returned from ``popen``.  The deallocator functions must\n-  be declared before they can be referenced in the attribute.\n-\n-  .. code-block:: c++\n-\n-    int fclose (FILE*);\n-    int pclose (FILE*);\n-\n-    __attribute__ ((malloc, malloc (fclose, 1)))\n-      FILE* fdopen (int, const char*);\n-    __attribute__ ((malloc, malloc (fclose, 1)))\n-      FILE* fopen (const char*, const char*);\n-    __attribute__ ((malloc, malloc (fclose, 1)))\n-      FILE* fmemopen(void *, size_t, const char *);\n-    __attribute__ ((malloc, malloc (pclose, 1)))\n-      FILE* popen (const char*, const char*);\n-    __attribute__ ((malloc, malloc (fclose, 1)))\n-      FILE* tmpfile (void);\n-\n-  The warnings guarded by :option:`-fanalyzer` respect allocation and\n-  deallocation pairs marked with the ``malloc``.  In particular:\n-\n-  * The analyzer will emit a :option:`-Wanalyzer-mismatching-deallocation`\n-    diagnostic if there is an execution path in which the result of an\n-    allocation call is passed to a different deallocator.\n-\n-  * The analyzer will emit a :option:`-Wanalyzer-double-free`\n-    diagnostic if there is an execution path in which a value is passed\n-    more than once to a deallocation call.\n-\n-  * The analyzer will consider the possibility that an allocation function\n-    could fail and return NULL.  It will emit\n-    :option:`-Wanalyzer-possible-null-dereference` and\n-    :option:`-Wanalyzer-possible-null-argument` diagnostics if there are\n-    execution paths in which an unchecked result of an allocation call is\n-    dereferenced or passed to a function requiring a non-null argument.\n-    If the allocator always returns non-null, use\n-    ``__attribute__ ((returns_nonnull))`` to suppress these warnings.\n-    For example:\n-\n-    .. code-block:: c++\n-\n-      char *xstrdup (const char *)\n-        __attribute__((malloc (free), returns_nonnull));\n-\n-  * The analyzer will emit a :option:`-Wanalyzer-use-after-free`\n-    diagnostic if there is an execution path in which the memory passed\n-    by pointer to a deallocation call is used after the deallocation.\n-\n-  * The analyzer will emit a :option:`-Wanalyzer-malloc-leak` diagnostic if\n-    there is an execution path in which the result of an allocation call\n-    is leaked (without being passed to the deallocation function).\n-\n-  * The analyzer will emit a :option:`-Wanalyzer-free-of-non-heap` diagnostic\n-    if a deallocation function is used on a global or on-stack variable.\n-\n-  The analyzer assumes that deallocators can gracefully handle the ``NULL``\n-  pointer.  If this is not the case, the deallocator can be marked with\n-  ``__attribute__((nonnull))`` so that :option:`-fanalyzer` can emit\n-  a :option:`-Wanalyzer-possible-null-argument` diagnostic for code paths\n-  in which the deallocator is called with NULL.\n-\n-.. index:: no_icf function attribute\n-\n-.. fn-attr:: no_icf\n-\n-  This function attribute prevents a functions from being merged with another\n-  semantically equivalent function.\n-\n-.. index:: no_instrument_function function attribute\n-\n-.. option:: no_instrument_function\n-\n-  If any of :option:`-finstrument-functions`, :option:`-p`, or :option:`-pg` are\n-  given, profiling function calls are\n-  generated at entry and exit of most user-compiled functions.\n-  Functions with this attribute are not so instrumented.\n-\n-.. index:: no_profile_instrument_function function attribute\n-\n-.. fn-attr:: no_profile_instrument_function\n-\n-  The :fn-attr:`no_profile_instrument_function` attribute on functions is used\n-  to inform the compiler that it should not process any profile feedback based\n-  optimization code instrumentation.\n-\n-.. index:: no_reorder function attribute\n-\n-.. fn-attr:: no_reorder\n-\n-  Do not reorder functions or variables marked :fn-attr:`no_reorder`\n-  against each other or top level assembler statements the executable.\n-  The actual order in the program will depend on the linker command\n-  line. Static variables marked like this are also not removed.\n-  This has a similar effect\n-  as the :option:`-fno-toplevel-reorder` option, but only applies to the\n-  marked symbols.\n-\n-.. index:: no_sanitize function attribute\n-\n-.. fn-attr:: no_sanitize (\"sanitize_option\")\n-\n-  The ``no_sanitize`` attribute on functions is used\n-  to inform the compiler that it should not do sanitization of any option\n-  mentioned in :samp:`{sanitize_option}`.  A list of values acceptable by\n-  the :option:`-fsanitize` option can be provided.\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((no_sanitize (\"alignment\", \"object-size\")))\n-    f () { /* Do something. */; }\n-    void __attribute__ ((no_sanitize (\"alignment,object-size\")))\n-    g () { /* Do something. */; }\n-\n-.. index:: no_sanitize_address function attribute\n-\n-.. fn-attr:: no_sanitize_address, no_address_safety_analysis\n-\n-  The :fn-attr:`no_sanitize_address` attribute on functions is used\n-  to inform the compiler that it should not instrument memory accesses\n-  in the function when compiling with the :option:`-fsanitize=address` option.\n-  The ``no_address_safety_analysis`` is a deprecated alias of the\n-  :fn-attr:`no_sanitize_address` attribute, new code should use\n-  :fn-attr:`no_sanitize_address`.\n-\n-.. index:: no_sanitize_thread function attribute\n-\n-.. fn-attr:: no_sanitize_thread\n-\n-  The :fn-attr:`no_sanitize_thread` attribute on functions is used\n-  to inform the compiler that it should not instrument memory accesses\n-  in the function when compiling with the :option:`-fsanitize=thread` option.\n-\n-.. index:: no_sanitize_undefined function attribute\n-\n-.. fn-attr:: no_sanitize_undefined\n-\n-  The :fn-attr:`no_sanitize_undefined` attribute on functions is used\n-  to inform the compiler that it should not check for undefined behavior\n-  in the function when compiling with the :option:`-fsanitize=undefined` option.\n-\n-.. index:: no_sanitize_coverage function attribute\n-\n-.. fn-attr:: no_sanitize_coverage\n-\n-  The :fn-attr:`no_sanitize_coverage` attribute on functions is used\n-  to inform the compiler that it should not do coverage-guided\n-  fuzzing code instrumentation (:option:`-fsanitize-coverage`).\n-\n-.. index:: no_split_stack function attribute\n-\n-.. option:: no_split_stack\n-\n-  If :option:`-fsplit-stack` is given, functions have a small\n-  prologue which decides whether to split the stack.  Functions with the\n-  ``no_split_stack`` attribute do not have that prologue, and thus\n-  may run with only a small amount of stack space available.\n-\n-.. index:: no_stack_limit function attribute\n-\n-.. fn-attr:: no_stack_limit\n-\n-  This attribute locally overrides the :option:`-fstack-limit-register`\n-  and :option:`-fstack-limit-symbol` command-line options; it has the effect\n-  of disabling stack limit checking in the function it applies to.\n-\n-.. index:: noclone function attribute\n-\n-.. fn-attr:: noclone\n-\n-  This function attribute prevents a function from being considered for\n-  cloning---a mechanism that produces specialized copies of functions\n-  and which is (currently) performed by interprocedural constant\n-  propagation.\n-\n-.. index:: noinline function attribute\n-\n-.. fn-attr:: noinline\n-\n-  This function attribute prevents a function from being considered for\n-  inlining.\n-\n-  .. Don't enumerate the optimizations by name here; we try to be\n-\n-  .. future-compatible with this mechanism.\n-\n-  If the function does not have side effects, there are optimizations\n-  other than inlining that cause function calls to be optimized away,\n-  although the function call is live.  To keep such calls from being\n-  optimized away, put\n-\n-  .. code-block:: c++\n-\n-    asm (\"\");\n-\n-  (see :ref:`extended-asm`) in the called function, to serve as a special\n-  side effect.\n-\n-.. index:: noipa function attribute\n-\n-.. fn-attr:: noipa\n-\n-  Disable interprocedural optimizations between the function with this\n-  attribute and its callers, as if the body of the function is not available\n-  when optimizing callers and the callers are unavailable when optimizing\n-  the body.  This attribute implies :fn-attr:`noinline`, :fn-attr:`noclone` and\n-  :fn-attr:`no_icf` attributes.    However, this attribute is not equivalent\n-  to a combination of other attributes, because its purpose is to suppress\n-  existing and future optimizations employing interprocedural analysis,\n-  including those that do not have an attribute suitable for disabling\n-  them individually.  This attribute is supported mainly for the purpose\n-  of testing the compiler.\n-\n-.. index:: nonnull function attribute, functions with non-null pointer arguments\n-\n-.. fn-attr:: nonnull, nonnull (arg-index, ...)\n-\n-  The :fn-attr:`nonnull` attribute may be applied to a function that takes at\n-  least one argument of a pointer type.  It indicates that the referenced\n-  arguments must be non-null pointers.  For instance, the declaration:\n-\n-  .. code-block:: c++\n-\n-    extern void *\n-    my_memcpy (void *dest, const void *src, size_t len)\n-            __attribute__((nonnull (1, 2)));\n-\n-  informs the compiler that, in calls to ``my_memcpy``, arguments\n-  :samp:`{dest}` and :samp:`{src}` must be non-null.\n-\n-  The attribute has an effect both on functions calls and function definitions.\n-\n-  For function calls:\n-\n-  * If the compiler determines that a null pointer is\n-    passed in an argument slot marked as non-null, and the\n-    :option:`-Wnonnull` option is enabled, a warning is issued.\n-    See :ref:`warning-options`.\n-\n-  * The :option:`-fisolate-erroneous-paths-attribute` option can be\n-    specified to have GCC transform calls with null arguments to non-null\n-    functions into traps.  See :ref:`optimize-options`.\n-\n-  * The compiler may also perform optimizations based on the\n-    knowledge that certain function arguments cannot be null.  These\n-    optimizations can be disabled by the\n-    :option:`-fno-delete-null-pointer-checks` option. See :ref:`optimize-options`.\n-\n-  For function definitions:\n-\n-  * If the compiler determines that a function parameter that is\n-    marked with nonnull is compared with null, and\n-    :option:`-Wnonnull-compare` option is enabled, a warning is issued.\n-    See :ref:`warning-options`.\n-\n-  * The compiler may also perform optimizations based on the\n-    knowledge that ``nonnul`` parameters cannot be null.  This can\n-    currently not be disabled other than by removing the nonnull\n-    attribute.\n-\n-  If no :samp:`{arg-index}` is given to the :fn-attr:`nonnull` attribute,\n-  all pointer arguments are marked as non-null.  To illustrate, the\n-  following declaration is equivalent to the previous example:\n-\n-  .. code-block:: c++\n-\n-    extern void *\n-    my_memcpy (void *dest, const void *src, size_t len)\n-            __attribute__((nonnull));\n-\n-.. index:: noplt function attribute\n-\n-.. fn-attr:: noplt\n-\n-  The :fn-attr:`noplt` attribute is the counterpart to option :option:`-fno-plt`.\n-  Calls to functions marked with this attribute in position-independent code\n-  do not use the PLT.\n-\n-  .. code-block:: c++\n-\n-    /* Externally defined function foo.  */\n-    int foo () __attribute__ ((noplt));\n-\n-    int\n-    main (/* ... */)\n-    {\n-      /* ... */\n-      foo ();\n-      /* ... */\n-    }\n-\n-  The :fn-attr:`noplt` attribute on function ``foo``\n-  tells the compiler to assume that\n-  the function ``foo`` is externally defined and that the call to\n-  ``foo`` must avoid the PLT\n-  in position-independent code.\n-\n-  In position-dependent code, a few targets also convert calls to\n-  functions that are marked to not use the PLT to use the GOT instead.\n-\n-.. index:: noreturn function attribute, functions that never return\n-\n-.. fn-attr:: noreturn\n-\n-  A few standard library functions, such as ``abort`` and ``exit``,\n-  cannot return.  GCC knows this automatically.  Some programs define\n-  their own functions that never return.  You can declare them\n-  :fn-attr:`noreturn` to tell the compiler this fact.  For example,\n-\n-  .. code-block:: c++\n-\n-    void fatal () __attribute__ ((noreturn));\n-\n-    void\n-    fatal (/* ... */)\n-    {\n-      /* ... */ /* Print error message. */ /* ... */\n-      exit (1);\n-    }\n-\n-  The :fn-attr:`noreturn` keyword tells the compiler to assume that\n-  ``fatal`` cannot return.  It can then optimize without regard to what\n-  would happen if ``fatal`` ever did return.  This makes slightly\n-  better code.  More importantly, it helps avoid spurious warnings of\n-  uninitialized variables.\n-\n-  The :fn-attr:`noreturn` keyword does not affect the exceptional path when that\n-  applies: a :fn-attr:`noreturn` -marked function may still return to the caller\n-  by throwing an exception or calling ``longjmp``.\n-\n-  In order to preserve backtraces, GCC will never turn calls to\n-  :fn-attr:`noreturn` functions into tail calls.\n-\n-  Do not assume that registers saved by the calling function are\n-  restored before calling the :fn-attr:`noreturn` function.\n-\n-  It does not make sense for a :fn-attr:`noreturn` function to have a return\n-  type other than ``void``.\n-\n-.. index:: nothrow function attribute\n-\n-.. fn-attr:: nothrow\n-\n-  The :fn-attr:`nothrow` attribute is used to inform the compiler that a\n-  function cannot throw an exception.  For example, most functions in\n-  the standard C library can be guaranteed not to throw an exception\n-  with the notable exceptions of ``qsort`` and ``bsearch`` that\n-  take function pointer arguments.\n-\n-.. index:: optimize function attribute\n-\n-.. fn-attr:: optimize (level, ...), optimize (string, ...)\n-\n-.. fn-attr:: optimize (string, ...)\n-\n-  The ``optimize`` attribute is used to specify that a function is to\n-  be compiled with different optimization options than specified on the\n-  command line.  The optimize attribute arguments of a function behave\n-  behave as if appended to the command-line.\n-\n-  Valid arguments are constant non-negative integers and\n-  strings.  Each numeric argument specifies an optimization :samp:`{level}`.\n-  Each :samp:`{string}` argument consists of one or more comma-separated\n-  substrings.  Each substring that begins with the letter ``O`` refers\n-  to an optimization option such as :option:`-O0` or :option:`-Os`.  Other\n-  substrings are taken as suffixes to the ``-f`` prefix jointly\n-  forming the name of an optimization option.  See :ref:`optimize-options`.\n-\n-  :samp:`#pragma GCC optimize` can be used to set optimization options\n-  for more than one function.  See :ref:`function-specific-option-pragmas`,\n-  for details about the pragma.\n-\n-  Providing multiple strings as arguments separated by commas to specify\n-  multiple options is equivalent to separating the option suffixes with\n-  a comma (:samp:`,`) within a single string.  Spaces are not permitted\n-  within the strings.\n-\n-  Not every optimization option that starts with the :samp:`{-f}` prefix\n-  specified by the attribute necessarily has an effect on the function.\n-  The ``optimize`` attribute should be used for debugging purposes only.\n-  It is not suitable in production code.\n-\n-.. index:: patchable_function_entry function attribute, extra NOP instructions at the function entry point\n-\n-.. fn-attr:: patchable_function_entry\n-\n-  In case the target's text segment can be made writable at run time by\n-  any means, padding the function entry with a number of NOPs can be\n-  used to provide a universal tool for instrumentation.\n-\n-  The :fn-attr:`patchable_function_entry` function attribute can be used to\n-  change the number of NOPs to any desired value.  The two-value syntax\n-  is the same as for the command-line switch\n-  :option:`-fpatchable-function-entry=N,M`, generating :samp:`{N}` NOPs, with\n-  the function entry point before the :samp:`{M}` th NOP instruction.\n-  :samp:`{M}` defaults to 0 if omitted e.g. function entry point is before\n-  the first NOP.\n-\n-  If patchable function entries are enabled globally using the command-line\n-  option :option:`-fpatchable-function-entry=N,M`, then you must disable\n-  instrumentation on all functions that are part of the instrumentation\n-  framework with the attribute ``patchable_function_entry (0)``\n-  to prevent recursion.\n-\n-.. index:: pure function attribute, functions that have no side effects\n-\n-.. fn-attr:: pure\n-\n-  Calls to functions that have no observable effects on the state of\n-  the program other than to return a value may lend themselves to optimizations\n-  such as common subexpression elimination.  Declaring such functions with\n-  the :fn-attr:`pure` attribute allows GCC to avoid emitting some calls in repeated\n-  invocations of the function with the same argument values.\n-\n-  The :fn-attr:`pure` attribute prohibits a function from modifying the state\n-  of the program that is observable by means other than inspecting\n-  the function's return value.  However, functions declared with the :fn-attr:`pure`\n-  attribute can safely read any non-volatile objects, and modify the value of\n-  objects in a way that does not affect their return value or the observable\n-  state of the program.\n-\n-  For example,\n-\n-  .. code-block:: c++\n-\n-    int hash (char *) __attribute__ ((pure));\n-\n-  tells GCC that subsequent calls to the function ``hash`` with the same\n-  string can be replaced by the result of the first call provided the state\n-  of the program observable by ``hash``, including the contents of the array\n-  itself, does not change in between.  Even though ``hash`` takes a non-const\n-  pointer argument it must not modify the array it points to, or any other object\n-  whose value the rest of the program may depend on.  However, the caller may\n-  safely change the contents of the array between successive calls to\n-  the function (doing so disables the optimization).  The restriction also\n-  applies to member objects referenced by the ``this`` pointer in C++\n-  non-static member functions.\n-\n-  Some common examples of pure functions are ``strlen`` or ``memcmp``.\n-  Interesting non-pure functions are functions with infinite loops or those\n-  depending on volatile memory or other system resource, that may change between\n-  consecutive calls (such as the standard C ``feof`` function in\n-  a multithreading environment).\n-\n-  The :fn-attr:`pure` attribute imposes similar but looser restrictions on\n-  a function's definition than the :fn-attr:`const` attribute: :fn-attr:`pure`\n-  allows the function to read any non-volatile memory, even if it changes\n-  in between successive invocations of the function.  Declaring the same\n-  function with both the :fn-attr:`pure` and the :fn-attr:`const` attribute is\n-  diagnosed.  Because a pure function cannot have any observable side\n-  effects it does not make sense for such a function to return ``void``.\n-  Declaring such a function is diagnosed.\n-\n-.. index:: returns_nonnull function attribute\n-\n-.. fn-attr:: returns_nonnull\n-\n-  The :fn-attr:`returns_nonnull` attribute specifies that the function\n-  return value should be a non-null pointer.  For instance, the declaration:\n-\n-  .. code-block:: c++\n-\n-    extern void *\n-    mymalloc (size_t len) __attribute__((returns_nonnull));\n-\n-  lets the compiler optimize callers based on the knowledge\n-  that the return value will never be null.\n-\n-.. index:: returns_twice function attribute, functions that return more than once\n-\n-.. fn-attr:: returns_twice\n-\n-  The :fn-attr:`returns_twice` attribute tells the compiler that a function may\n-  return more than one time.  The compiler ensures that all registers\n-  are dead before calling such a function and emits a warning about\n-  the variables that may be clobbered after the second return from the\n-  function.  Examples of such functions are ``setjmp`` and ``vfork``.\n-  The ``longjmp`` -like counterpart of such function, if any, might need\n-  to be marked with the :fn-attr:`noreturn` attribute.\n-\n-.. index:: section function attribute, functions in arbitrary sections\n-\n-.. fn-attr:: section (\"section-name\")\n-\n-  Normally, the compiler places the code it generates in the ``text`` section.\n-  Sometimes, however, you need additional sections, or you need certain\n-  particular functions to appear in special sections.  The ``section``\n-  attribute specifies that a function lives in a particular section.\n-  For example, the declaration:\n-\n-  .. code-block:: c++\n-\n-    extern void foobar (void) __attribute__ ((section (\"bar\")));\n-\n-  puts the function ``foobar`` in the ``bar`` section.\n-\n-  Some file formats do not support arbitrary sections so the ``section``\n-  attribute is not available on all platforms.\n-  If you need to map the entire contents of a module to a particular\n-  section, consider using the facilities of the linker instead.\n-\n-.. index:: sentinel function attribute\n-\n-.. fn-attr:: sentinel, sentinel (position)\n-\n-  This function attribute indicates that an argument in a call to the function\n-  is expected to be an explicit ``NULL``.  The attribute is only valid on\n-  variadic functions.  By default, the sentinel is expected to be the last\n-  argument of the function call.  If the optional :samp:`{position}` argument\n-  is specified to the attribute, the sentinel must be located at\n-  :samp:`{position}` counting backwards from the end of the argument list.\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((sentinel))\n-    is equivalent to\n-    __attribute__ ((sentinel(0)))\n-\n-  The attribute is automatically set with a position of 0 for the built-in\n-  functions ``execl`` and ``execlp``.  The built-in function\n-  ``execle`` has the attribute set with a position of 1.\n-\n-  A valid ``NULL`` in this context is defined as zero with any object\n-  pointer type.  If your system defines the ``NULL`` macro with\n-  an integer type then you need to add an explicit cast.  During\n-  installation GCC replaces the system ``<stddef.h>`` header with\n-  a copy that redefines NULL appropriately.\n-\n-  The warnings for missing or incorrect sentinels are enabled with\n-  :option:`-Wformat`.\n-\n-.. index:: simd function attribute\n-\n-.. fn-attr:: simd, simd(\"mask\")\n-\n-  This attribute enables creation of one or more function versions that\n-  can process multiple arguments using SIMD instructions from a\n-  single invocation.  Specifying this attribute allows compiler to\n-  assume that such versions are available at link time (provided\n-  in the same or another translation unit).  Generated versions are\n-  target-dependent and described in the corresponding Vector ABI document.  For\n-  x86_64 target this document can be found\n-  `here <https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt>`_.\n-\n-  The optional argument :samp:`{mask}` may have the value\n-  ``notinbranch`` or ``inbranch``,\n-  and instructs the compiler to generate non-masked or masked\n-  clones correspondingly. By default, all clones are generated.\n-\n-  If the attribute is specified and ``#pragma omp declare simd`` is\n-  present on a declaration and the :option:`-fopenmp` or :option:`-fopenmp-simd`\n-  switch is specified, then the attribute is ignored.\n-\n-.. index:: stack_protect function attribute\n-\n-.. fn-attr:: stack_protect\n-\n-  This attribute adds stack protection code to the function if\n-  flags :option:`-fstack-protector`, :option:`-fstack-protector-strong`\n-  or :option:`-fstack-protector-explicit` are set.\n-\n-.. index:: no_stack_protector function attribute\n-\n-.. fn-attr:: no_stack_protector\n-\n-  This attribute prevents stack protection code for the function.\n-\n-.. index:: target function attribute\n-\n-.. fn-attr:: target (string, ...)\n-\n-  Multiple target back ends implement the ``target`` attribute\n-  to specify that a function is to\n-  be compiled with different target options than specified on the\n-  command line.  The original target command-line options are ignored.\n-  One or more strings can be provided as arguments.\n-  Each string consists of one or more comma-separated suffixes to\n-  the ``-m`` prefix jointly forming the name of a machine-dependent\n-  option.  See :ref:`submodel-options`.\n-\n-  The ``target`` attribute can be used for instance to have a function\n-  compiled with a different ISA (instruction set architecture) than the\n-  default.  :samp:`#pragma GCC target` can be used to specify target-specific\n-  options for more than one function.  See :ref:`function-specific-option-pragmas`,\n-  for details about the pragma.\n-\n-  For instance, on an x86, you could declare one function with the\n-  ``target(\"sse4.1,arch=core2\")`` attribute and another with\n-  ``target(\"sse4a,arch=amdfam10\")``.  This is equivalent to\n-  compiling the first function with :option:`-msse4.1` and\n-  :option:`-march=core2` options, and the second function with\n-  :option:`-msse4a` and :option:`-march=amdfam10` options.  It is up to you\n-  to make sure that a function is only invoked on a machine that\n-  supports the particular ISA it is compiled for (for example by using\n-  ``cpuid`` on x86 to determine what feature bits and architecture\n-  family are used).\n-\n-  .. code-block:: c++\n-\n-    int core2_func (void) __attribute__ ((__target__ (\"arch=core2\")));\n-    int sse3_func (void) __attribute__ ((__target__ (\"sse3\")));\n-\n-  Providing multiple strings as arguments separated by commas to specify\n-  multiple options is equivalent to separating the option suffixes with\n-  a comma (:samp:`,`) within a single string.  Spaces are not permitted\n-  within the strings.\n-\n-  The options supported are specific to each target; refer to :ref:`x86-function-attributes`, :ref:`powerpc-function-attributes`,\n-  :ref:`arm-function-attributes`, :ref:`aarch64-function-attributes`,\n-  :ref:`nios-ii-function-attributes`, and :ref:`s-390-function-attributes`\n-  for details.\n-\n-.. index:: symver function attribute\n-\n-.. fn-attr:: symver (\"name2@nodename\")\n-\n-  On ELF targets this attribute creates a symbol version.  The :samp:`{name2}` part\n-  of the parameter is the actual name of the symbol by which it will be\n-  externally referenced.  The ``nodename`` portion should be the name of a\n-  node specified in the version script supplied to the linker when building a\n-  shared library.  Versioned symbol must be defined and must be exported with\n-  default visibility.\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((__symver__ (\"foo@VERS_1\"))) int\n-    foo_v1 (void)\n-    {\n-    }\n-\n-  Will produce a ``.symver foo_v1, foo@VERS_1`` directive in the assembler\n-  output.\n-\n-  One can also define multiple version for a given symbol\n-  (starting from binutils 2.35).\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((__symver__ (\"foo@VERS_2\"), __symver__ (\"foo@VERS_3\")))\n-    int symver_foo_v1 (void)\n-    {\n-    }\n-\n-  This example creates a symbol name ``symver_foo_v1``\n-  which will be version ``VERS_2`` and ``VERS_3`` of ``foo``.\n-\n-  If you have an older release of binutils, then symbol alias needs to\n-  be used:\n-\n-  .. code-block:: c++\n-\n-    __attribute__ ((__symver__ (\"foo@VERS_2\")))\n-    int foo_v1 (void)\n-    {\n-      return 0;\n-    }\n-\n-    __attribute__ ((__symver__ (\"foo@VERS_3\")))\n-    __attribute__ ((alias (\"foo_v1\")))\n-    int symver_foo_v1 (void);\n-\n-  Finally if the parameter is ``\"name2@@nodename\"`` then in\n-  addition to creating a symbol version (as if\n-  ``\"name2@nodename\"`` was used) the version will be also used\n-  to resolve :samp:`{name2}` by the linker.\n-\n-.. index:: tainted_args function attribute\n-\n-.. fn-attr:: tainted_args\n-\n-  The :fn-attr:`tainted_args` attribute is used to specify that a function is called\n-  in a way that requires sanitization of its arguments, such as a system\n-  call in an operating system kernel.  Such a function can be considered part\n-  of the 'attack surface' of the program.  The attribute can be used both\n-  on function declarations, and on field declarations containing function\n-  pointers.  In the latter case, any function used as an initializer of\n-  such a callback field will be treated as being called with tainted\n-  arguments.\n-\n-  The analyzer will pay particular attention to such functions when both\n-  :option:`-fanalyzer` and :option:`-fanalyzer-checker=taint` are supplied,\n-  potentially issuing warnings guarded by\n-  :option:`-Wanalyzer-tainted-allocation-size`,\n-  :option:`-Wanalyzer-tainted-array-index`,\n-  :option:`-Wanalyzer-tainted-divisor`,\n-  :option:`-Wanalyzer-tainted-offset`,\n-  and :option:`-Wanalyzer-tainted-size`.\n-\n-.. index:: target_clones function attribute\n-\n-.. fn-attr:: target_clones (options)\n-\n-  The ``target_clones`` attribute is used to specify that a function\n-  be cloned into multiple versions compiled with different target options\n-  than specified on the command line.  The supported options and restrictions\n-  are the same as for ``target`` attribute.\n-\n-  For instance, on an x86, you could compile a function with\n-  ``target_clones(\"sse4.1,avx\")``.  GCC creates two function clones,\n-  one compiled with :option:`-msse4.1` and another with :option:`-mavx`.\n-\n-  On a PowerPC, you can compile a function with\n-  ``target_clones(\"cpu=power9,default\")``.  GCC will create two\n-  function clones, one compiled with :option:`-mcpu=power9` and another\n-  with the default options.  GCC must be configured to use GLIBC 2.23 or\n-  newer in order to use the ``target_clones`` attribute.\n-\n-  It also creates a resolver function (see\n-  the ``ifunc`` attribute above) that dynamically selects a clone\n-  suitable for current architecture.  The resolver is created only if there\n-  is a usage of a function with ``target_clones`` attribute.\n-\n-  Note that any subsequent call of a function without ``target_clone``\n-  from a ``target_clone`` caller will not lead to copying\n-  (target clone) of the called function.\n-  If you want to enforce such behaviour,\n-  we recommend declaring the calling function with the :fn-attr:`flatten` attribute?\n-\n-.. index:: unused function attribute\n-\n-.. fn-attr:: unused\n-\n-  This attribute, attached to a function, means that the function is meant\n-  to be possibly unused.  GCC does not produce a warning for this\n-  function.\n-\n-.. index:: used function attribute\n-\n-.. fn-attr:: used\n-\n-  This attribute, attached to a function, means that code must be emitted\n-  for the function even if it appears that the function is not referenced.\n-  This is useful, for example, when the function is referenced only in\n-  inline assembly.\n-\n-  When applied to a member function of a C++ class template, the\n-  attribute also means that the function is instantiated if the\n-  class itself is instantiated.\n-\n-.. index:: retain function attribute\n-\n-.. fn-attr:: retain\n-\n-  For ELF targets that support the GNU or FreeBSD OSABIs, this attribute\n-  will save the function from linker garbage collection.  To support\n-  this behavior, functions that have not been placed in specific sections\n-  (e.g. by the ``section`` attribute, or the ``-ffunction-sections``\n-  option), will be placed in new, unique sections.\n-\n-  This additional functionality requires Binutils version 2.36 or later.\n-\n-.. index:: visibility function attribute\n-\n-.. fn-attr:: visibility (\"visibility_type\")\n-\n-  This attribute affects the linkage of the declaration to which it is attached.\n-  It can be applied to variables (see :ref:`common-variable-attributes`) and types\n-  (see :ref:`common-type-attributes`) as well as functions.\n-\n-  There are four supported :samp:`{visibility_type}` values: default,\n-  hidden, protected or internal visibility.\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((visibility (\"protected\")))\n-    f () { /* Do something. */; }\n-    int i __attribute__ ((visibility (\"hidden\")));\n-\n-  The possible values of :samp:`{visibility_type}` correspond to the\n-  visibility settings in the ELF gABI.\n-\n-  .. keep this list of visibilities in alphabetical order.\n-\n-  ``default``\n-    Default visibility is the normal case for the object file format.\n-    This value is available for the visibility attribute to override other\n-    options that may change the assumed visibility of entities.\n-\n-    On ELF, default visibility means that the declaration is visible to other\n-    modules and, in shared libraries, means that the declared entity may be\n-    overridden.\n-\n-    On Darwin, default visibility means that the declaration is visible to\n-    other modules.\n-\n-    Default visibility corresponds to 'external linkage' in the language.\n-\n-  ``hidden``\n-    Hidden visibility indicates that the entity declared has a new\n-    form of linkage, which we call 'hidden linkage'.  Two\n-    declarations of an object with hidden linkage refer to the same object\n-    if they are in the same shared object.\n-\n-  ``internal``\n-    Internal visibility is like hidden visibility, but with additional\n-    processor specific semantics.  Unless otherwise specified by the\n-    psABI, GCC defines internal visibility to mean that a function is\n-    *never* called from another module.  Compare this with hidden\n-    functions which, while they cannot be referenced directly by other\n-    modules, can be referenced indirectly via function pointers.  By\n-    indicating that a function cannot be called from outside the module,\n-    GCC may for instance omit the load of a PIC register since it is known\n-    that the calling function loaded the correct value.\n-\n-  ``protected``\n-    Protected visibility is like default visibility except that it\n-    indicates that references within the defining module bind to the\n-    definition in that module.  That is, the declared entity cannot be\n-    overridden by another module.\n-\n-  All visibilities are supported on many, but not all, ELF targets\n-  (supported when the assembler supports the :samp:`.visibility`\n-  pseudo-op).  Default visibility is supported everywhere.  Hidden\n-  visibility is supported on Darwin targets.\n-\n-  The visibility attribute should be applied only to declarations that\n-  would otherwise have external linkage.  The attribute should be applied\n-  consistently, so that the same entity should not be declared with\n-  different settings of the attribute.\n-\n-  In C++, the visibility attribute applies to types as well as functions\n-  and objects, because in C++ types have linkage.  A class must not have\n-  greater visibility than its non-static data member types and bases,\n-  and class members default to the visibility of their class.  Also, a\n-  declaration without explicit visibility is limited to the visibility\n-  of its type.\n-\n-  In C++, you can mark member functions and static member variables of a\n-  class with the visibility attribute.  This is useful if you know a\n-  particular method or static member variable should only be used from\n-  one shared object; then you can mark it hidden while the rest of the\n-  class has default visibility.  Care must be taken to avoid breaking\n-  the One Definition Rule; for example, it is usually not useful to mark\n-  an inline method as hidden without marking the whole class as hidden.\n-\n-  A C++ namespace declaration can also have the visibility attribute.\n-\n-  .. code-block:: c++\n-\n-    namespace nspace1 __attribute__ ((visibility (\"protected\")))\n-    { /* Do something. */; }\n-\n-  This attribute applies only to the particular namespace body, not to\n-  other definitions of the same namespace; it is equivalent to using\n-  :samp:`#pragma GCC visibility` before and after the namespace\n-  definition (see :ref:`visibility-pragmas`).\n-\n-  In C++, if a template argument has limited visibility, this\n-  restriction is implicitly propagated to the template instantiation.\n-  Otherwise, template instantiations and specializations default to the\n-  visibility of their template.\n-\n-  If both the template and enclosing class have explicit visibility, the\n-  visibility from the template is used.\n-\n-.. index:: warn_unused_result function attribute\n-\n-.. fn-attr:: warn_unused_result\n-\n-  The :fn-attr:`warn_unused_result` attribute causes a warning to be emitted\n-  if a caller of the function with this attribute does not use its\n-  return value.  This is useful for functions where not checking\n-  the result is either a security problem or always a bug, such as\n-  ``realloc``.\n-\n-  .. code-block:: c++\n-\n-    int fn () __attribute__ ((warn_unused_result));\n-    int foo ()\n-    {\n-      if (fn () < 0) return -1;\n-      fn ();\n-      return 0;\n-    }\n-\n-  results in warning on line 5.\n-\n-.. index:: weak function attribute\n-\n-.. fn-attr:: weak\n-\n-  The :fn-attr:`weak` attribute causes a declaration of an external symbol\n-  to be emitted as a weak symbol rather than a global.  This is primarily\n-  useful in defining library functions that can be overridden in user code,\n-  though it can also be used with non-function declarations.  The overriding\n-  symbol must have the same type as the weak symbol.  In addition, if it\n-  designates a variable it must also have the same size and alignment as\n-  the weak symbol.  Weak symbols are supported for ELF targets, and also\n-  for a.out targets when using the GNU assembler and linker.\n-\n-.. index:: weakref function attribute\n-\n-.. fn-attr:: weakref, weakref (\"target\")\n-\n-  The :fn-attr:`weakref` attribute marks a declaration as a weak reference.\n-  Without arguments, it should be accompanied by an ``alias`` attribute\n-  naming the target symbol.  Alternatively, :samp:`{target}` may be given as\n-  an argument to :fn-attr:`weakref` itself, naming the target definition of\n-  the alias.  The :samp:`{target}` must have the same type as the declaration.\n-  In addition, if it designates a variable it must also have the same size\n-  and alignment as the declaration.  In either form of the declaration\n-  :fn-attr:`weakref` implicitly marks the declared symbol as :fn-attr:`weak`.  Without\n-  a :samp:`{target}` given as an argument to :fn-attr:`weakref` or to ``alias``,\n-  :fn-attr:`weakref` is equivalent to :fn-attr:`weak` (in that case the declaration\n-  may be ``extern``).\n-\n-  .. code-block:: c++\n-\n-    /* Given the declaration: */\n-    extern int y (void);\n-\n-    /* the following... */\n-    static int x (void) __attribute__ ((weakref (\"y\")));\n-\n-    /* is equivalent to... */\n-    static int x (void) __attribute__ ((weakref, alias (\"y\")));\n-\n-    /* or, alternatively, to... */\n-    static int x (void) __attribute__ ((weakref));\n-    static int x (void) __attribute__ ((alias (\"y\")));\n-\n-  A weak reference is an alias that does not by itself require a\n-  definition to be given for the target symbol.  If the target symbol is\n-  only referenced through weak references, then it becomes a :fn-attr:`weak`\n-  undefined symbol.  If it is directly referenced, however, then such\n-  strong references prevail, and a definition is required for the\n-  symbol, not necessarily in the same translation unit.\n-\n-  The effect is equivalent to moving all references to the alias to a\n-  separate translation unit, renaming the alias to the aliased symbol,\n-  declaring it as weak, compiling the two separate translation units and\n-  performing a link with relocatable output (i.e. ``ld -r``) on them.\n-\n-  A declaration to which :fn-attr:`weakref` is attached and that is associated\n-  with a named ``target`` must be ``static``.\n-\n-.. index:: zero_call_used_regs function attribute\n-\n-.. fn-attr:: zero_call_used_regs (\"choice\")\n-\n-  The ``zero_call_used_regs`` attribute causes the compiler to zero\n-  a subset of all call-used registers ([#f1]_) at function return.\n-  This is used to increase program security by either mitigating\n-  Return-Oriented Programming (ROP) attacks or preventing information leakage\n-  through registers.\n-\n-  In order to satisfy users with different security needs and control the\n-  run-time overhead at the same time, the :samp:`{choice}` parameter provides a\n-  flexible way to choose the subset of the call-used registers to be zeroed.\n-  The three basic values of :samp:`{choice}` are:\n-\n-  * :samp:`skip` doesn't zero any call-used registers.\n-\n-  * :samp:`used` only zeros call-used registers that are used in the function.\n-    A 'used' register is one whose content has been set or referenced in\n-    the function.\n-\n-  * :samp:`all` zeros all call-used registers.\n-\n-  In addition to these three basic choices, it is possible to modify\n-  :samp:`used` or :samp:`all` as follows:\n-\n-  * Adding :samp:`-gpr` restricts the zeroing to general-purpose registers.\n-\n-  * Adding :samp:`-arg` restricts the zeroing to registers that can sometimes\n-    be used to pass function arguments.  This includes all argument registers\n-    defined by the platform's calling conversion, regardless of whether the\n-    function uses those registers for function arguments or not.\n-\n-  The modifiers can be used individually or together.  If they are used\n-  together, they must appear in the order above.\n-\n-  The full list of :samp:`{choice}` s is therefore:\n-\n-  ``skip``\n-    doesn't zero any call-used register.\n-\n-  ``used``\n-    only zeros call-used registers that are used in the function.\n-\n-  ``used-gpr``\n-    only zeros call-used general purpose registers that are used in the function.\n-\n-  ``used-arg``\n-    only zeros call-used registers that are used in the function and pass arguments.\n-\n-  ``used-gpr-arg``\n-    only zeros call-used general purpose registers that are used in the function\n-    and pass arguments.\n-\n-  ``all``\n-    zeros all call-used registers.\n-\n-  ``all-gpr``\n-    zeros all call-used general purpose registers.\n-\n-  ``all-arg``\n-    zeros all call-used registers that pass arguments.\n-\n-  ``all-gpr-arg``\n-    zeros all call-used general purpose registers that pass\n-    arguments.\n-\n-  Of this list, :samp:`used-arg`, :samp:`used-gpr-arg`, :samp:`all-arg`,\n-  and :samp:`all-gpr-arg` are mainly used for ROP mitigation.\n-\n-  The default for the attribute is controlled by :option:`-fzero-call-used-regs`.\n-\n-.. This is the end of the target-independent attribute table\n-\n-.. [#f1] A 'call-used' register\n-  is a register whose contents can be changed by a function call;\n-  therefore, a caller cannot assume that the register has the same contents\n-  on return from the function as it had before calling the function.  Such\n-  registers are also called 'call-clobbered', 'caller-saved', or\n-  'volatile'.\n\\ No newline at end of file"}, {"sha": "da7441d2257c1059ec8d0988eb21a0e8e54882e0", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/epiphany-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fepiphany-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,82 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _epiphany-function-attributes:\n-\n-Epiphany Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the Epiphany back end:\n-\n-.. index:: disinterrupt function attribute, Epiphany\n-\n-.. epiphany-fn-attr:: disinterrupt\n-\n-  This attribute causes the compiler to emit\n-  instructions to disable interrupts for the duration of the given\n-  function.\n-\n-.. index:: forwarder_section function attribute, Epiphany\n-\n-.. epiphany-fn-attr:: forwarder_section\n-\n-  This attribute modifies the behavior of an interrupt handler.\n-  The interrupt handler may be in external memory which cannot be\n-  reached by a branch instruction, so generate a local memory trampoline\n-  to transfer control.  The single parameter identifies the section where\n-  the trampoline is placed.\n-\n-.. index:: interrupt function attribute, Epiphany\n-\n-.. epiphany-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.  It may also generate\n-  a special section with code to initialize the interrupt vector table.\n-\n-  On Epiphany targets one or more optional parameters can be added like this:\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((interrupt (\"dma0, dma1\"))) universal_dma_handler ();\n-\n-  Permissible values for these parameters are: :epiphany-fn-attr:`reset`,\n-  ``software_exception``, ``page_miss``,\n-  ``timer0``, ``timer1``, ``message``,\n-  ``dma0``, ``dma1``, ``wand`` and ``swi``.\n-  Multiple parameters indicate that multiple entries in the interrupt\n-  vector table should be initialized for this function, i.e. for each\n-  parameter :samp:`{name}`, a jump to the function is emitted in\n-  the section ivt_entry\\_ :samp:`{name}`.  The parameter(s) may be omitted\n-  entirely, in which case no interrupt vector table entry is provided.\n-\n-  Note that interrupts are enabled inside the function\n-  unless the :epiphany-fn-attr:`disinterrupt` attribute is also specified.\n-\n-  The following examples are all valid uses of these attributes on\n-  Epiphany targets:\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((interrupt)) universal_handler ();\n-    void __attribute__ ((interrupt (\"dma1\"))) dma1_handler ();\n-    void __attribute__ ((interrupt (\"dma0, dma1\")))\n-      universal_dma_handler ();\n-    void __attribute__ ((interrupt (\"timer0\"), disinterrupt))\n-      fast_timer_handler ();\n-    void __attribute__ ((interrupt (\"dma0, dma1\"),\n-                         forwarder_section (\"tramp\")))\n-      external_dma_handler ();\n-\n-.. index:: long_call function attribute, Epiphany, short_call function attribute, Epiphany, indirect calls, Epiphany\n-\n-.. epiphany-fn-attr:: long_call, short_call\n-\n-  These attributes specify how a particular function is called.\n-  These attributes override the\n-  :option:`-mlong-calls` (see :ref:`adapteva-epiphany-options`)\n-  command-line switch and ``#pragma long_calls`` settings.\n\\ No newline at end of file"}, {"sha": "70a929f8ad4b68f0691babd8c3f309d4cfcab3dd", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/h8-300-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fh8-300-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,39 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _h8-300-function-attributes:\n-\n-H8/300 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are available for H8/300 targets:\n-\n-.. index:: function_vector function attribute, H8/300\n-\n-.. h8-300-fn-attr:: function_vector\n-\n-  Use this attribute on the H8/300, H8/300H, and H8S to indicate\n-  that the specified function should be called through the function vector.\n-  Calling a function through the function vector reduces code size; however,\n-  the function vector has a limited size (maximum 128 entries on the H8/300\n-  and 64 entries on the H8/300H and H8S)\n-  and shares space with the interrupt vector.\n-\n-.. index:: interrupt_handler function attribute, H8/300\n-\n-.. h8-300-fn-attr:: interrupt_handler\n-\n-  Use this attribute on the H8/300, H8/300H, and H8S to\n-  indicate that the specified function is an interrupt handler.  The compiler\n-  generates function entry and exit sequences suitable for use in an\n-  interrupt handler when this attribute is present.\n-\n-.. index:: saveall function attribute, H8/300, save all registers on the H8/300, H8/300H, and H8S\n-\n-.. h8-300-fn-attr:: saveall\n-\n-  Use this attribute on the H8/300, H8/300H, and H8S to indicate that\n-  all registers except the stack pointer should be saved in the prologue\n-  regardless of whether they are used or not.\n\\ No newline at end of file"}, {"sha": "5be539efa17da2a2ada3630920f358e1d17618c7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/ia-64-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fia-64-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,36 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _ia-64-function-attributes:\n-\n-IA-64 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported on IA-64 targets:\n-\n-.. index:: syscall_linkage function attribute, IA-64\n-\n-.. ia-64-fn-attr:: syscall_linkage\n-\n-  This attribute is used to modify the IA-64 calling convention by marking\n-  all input registers as live at all function exits.  This makes it possible\n-  to restart a system call after an interrupt without having to save/restore\n-  the input registers.  This also prevents kernel data from leaking into\n-  application code.\n-\n-.. index:: version_id function attribute, IA-64\n-\n-.. ia-64-fn-attr:: version_id\n-\n-  This IA-64 HP-UX attribute, attached to a global variable or function, renames a\n-  symbol to contain a version string, thus allowing for function level\n-  versioning.  HP-UX system header files may use function level versioning\n-  for some system calls.\n-\n-  .. code-block:: c++\n-\n-    extern int foo () __attribute__((version_id (\"20040821\")));\n-\n-  Calls to ``foo`` are mapped to calls to ``foo{20040821}``.\n\\ No newline at end of file"}, {"sha": "4c1f863b84172868ba8023984b1fc90a58ca6851", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32c-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32c-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,75 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _m32c-function-attributes:\n-\n-M32C Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the M32C back end:\n-\n-.. index:: bank_switch function attribute, M32C\n-\n-.. m32c-fn-attr:: bank_switch\n-\n-  When added to an interrupt handler with the M32C port, causes the\n-  prologue and epilogue to use bank switching to preserve the registers\n-  rather than saving them on the stack.\n-\n-.. index:: fast_interrupt function attribute, M32C\n-\n-.. m32c-fn-attr:: fast_interrupt\n-\n-  Use this attribute on the M32C port to indicate that the specified\n-  function is a fast interrupt handler.  This is just like the\n-  :m32c-fn-attr:`interrupt` attribute, except that ``freit`` is used to return\n-  instead of ``reit``.\n-\n-.. index:: function_vector function attribute, M16C/M32C\n-\n-.. m32c-fn-attr:: function_vector\n-\n-  On M16C/M32C targets, the :m32c-fn-attr:`function_vector` attribute declares a\n-  special page subroutine call function. Use of this attribute reduces\n-  the code size by 2 bytes for each call generated to the\n-  subroutine. The argument to the attribute is the vector number entry\n-  from the special page vector table which contains the 16 low-order\n-  bits of the subroutine's entry address. Each vector table has special\n-  page number (18 to 255) that is used in ``jsrs`` instructions.\n-  Jump addresses of the routines are generated by adding 0x0F0000 (in\n-  case of M16C targets) or 0xFF0000 (in case of M32C targets), to the\n-  2-byte addresses set in the vector table. Therefore you need to ensure\n-  that all the special page vector routines should get mapped within the\n-  address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF\n-  (for M32C).\n-\n-  In the following example 2 bytes are saved for each call to\n-  function ``foo``.\n-\n-  .. code-block:: c++\n-\n-    void foo (void) __attribute__((function_vector(0x18)));\n-    void foo (void)\n-    {\n-    }\n-\n-    void bar (void)\n-    {\n-        foo();\n-    }\n-\n-  If functions are defined in one file and are called in another file,\n-  then be sure to write this declaration in both files.\n-\n-  This attribute is ignored for R8C target.\n-\n-.. index:: interrupt function attribute, M32C\n-\n-.. m32c-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n\\ No newline at end of file"}, {"sha": "04bb01f142346270e8f5c64537d5f5b8fd4cdf35", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m32r-d-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm32r-d-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,42 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _m32r-d-function-attributes:\n-\n-M32R/D Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the M32R/D back end:\n-\n-.. index:: interrupt function attribute, M32R/D\n-\n-.. m32r-d-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-.. index:: model function attribute, M32R/D, function addressability on the M32R/D\n-\n-.. m32r-d-fn-attr:: model (model-name)\n-\n-  On the M32R/D, use this attribute to set the addressability of an\n-  object, and of the code generated for a function.  The identifier\n-  :samp:`{model-name}` is one of ``small``, ``medium``, or\n-  ``large``, representing each of the code models.\n-\n-  Small model objects live in the lower 16MB of memory (so that their\n-  addresses can be loaded with the ``ld24`` instruction), and are\n-  callable with the ``bl`` instruction.\n-\n-  Medium model objects may live anywhere in the 32-bit address space (the\n-  compiler generates ``seth/add3`` instructions to load their addresses),\n-  and are callable with the ``bl`` instruction.\n-\n-  Large model objects may live anywhere in the 32-bit address space (the\n-  compiler generates ``seth/add3`` instructions to load their addresses),\n-  and may not be reachable with the ``bl`` instruction (the compiler\n-  generates the much slower ``seth/add3/jl`` instruction sequence).\n\\ No newline at end of file"}, {"sha": "b2fa7191f775cfbc9b8403c3da73d0e82a4936d6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/m68k-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fm68k-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,30 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _m68k-function-attributes:\n-\n-m68k Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the m68k back end:\n-\n-.. index:: interrupt function attribute, m68k, interrupt_handler function attribute, m68k\n-\n-.. m68k-fn-attr:: interrupt, interrupt_handler\n-\n-  Use this attribute to\n-  indicate that the specified function is an interrupt handler.  The compiler\n-  generates function entry and exit sequences suitable for use in an\n-  interrupt handler when this attribute is present.  Either name may be used.\n-\n-.. index:: interrupt_thread function attribute, fido\n-\n-.. m68k-fn-attr:: interrupt_thread\n-\n-  Use this attribute on fido, a subarchitecture of the m68k, to indicate\n-  that the specified function is an interrupt handler that is designed\n-  to run as a thread.  The compiler omits generate prologue/epilogue\n-  sequences and replaces the return instruction with a ``sleep``\n-  instruction.  This attribute is available only on fido.\n\\ No newline at end of file"}, {"sha": "ef90eb37f946f14b78513632120ab979a0a70f66", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mcore-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmcore-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,24 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _mcore-function-attributes:\n-\n-MCORE Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the MCORE back end:\n-\n-.. index:: naked function attribute, MCORE\n-\n-.. mcore-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file"}, {"sha": "b039c43fb18c4d8158af65cf6acdf9b251c971c0", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mep-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmep-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,53 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _mep-function-attributes:\n-\n-MeP Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the MeP back end:\n-\n-.. index:: disinterrupt function attribute, MeP\n-\n-.. mep-fn-attr:: disinterrupt\n-\n-  On MeP targets, this attribute causes the compiler to emit\n-  instructions to disable interrupts for the duration of the given\n-  function.\n-\n-.. index:: interrupt function attribute, MeP\n-\n-.. mep-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-.. index:: near function attribute, MeP\n-\n-.. mep-fn-attr:: near\n-\n-  This attribute causes the compiler to assume the called\n-  function is close enough to use the normal calling convention,\n-  overriding the :option:`-mtf <MeP -mtf>` command-line option.\n-\n-.. index:: far function attribute, MeP\n-\n-.. mep-fn-attr:: far\n-\n-  On MeP targets this causes the compiler to use a calling convention\n-  that assumes the called function is too far away for the built-in\n-  addressing modes.\n-\n-.. index:: vliw function attribute, MeP\n-\n-.. mep-fn-attr:: vliw\n-\n-  The :mep-fn-attr:`vliw` attribute tells the compiler to emit\n-  instructions in VLIW mode instead of core mode.  Note that this\n-  attribute is not allowed unless a VLIW coprocessor has been configured\n-  and enabled through command-line options.\n\\ No newline at end of file"}, {"sha": "130de9c5f85ca49c3367ef3b9a22d48866e86056", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microblaze-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicroblaze-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,46 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _microblaze-function-attributes:\n-\n-MicroBlaze Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported on MicroBlaze targets:\n-\n-.. index:: save_volatiles function attribute, MicroBlaze\n-\n-.. microblaze-fn-attr:: save_volatiles\n-\n-  Use this attribute to indicate that the function is\n-  an interrupt handler.  All volatile registers (in addition to non-volatile\n-  registers) are saved in the function prologue.  If the function is a leaf\n-  function, only volatiles used by the function are saved.  A normal function\n-  return is generated instead of a return from interrupt.\n-\n-.. index:: break_handler function attribute, MicroBlaze, break handler functions\n-\n-.. microblaze-fn-attr:: break_handler\n-\n-  Use this attribute to indicate that\n-  the specified function is a break handler.  The compiler generates function\n-  entry and exit sequences suitable for use in an break handler when this\n-  attribute is present. The return from :microblaze-fn-attr:`break_handler` is done through\n-  the ``rtbd`` instead of ``rtsd``.\n-\n-  .. code-block:: c++\n-\n-    void f () __attribute__ ((break_handler));\n-\n-.. index:: interrupt_handler function attribute, MicroBlaze, fast_interrupt function attribute, MicroBlaze\n-\n-.. microblaze-fn-attr:: interrupt_handler, fast_interrupt\n-\n-  These attributes indicate that the specified function is an interrupt\n-  handler.  Use the :microblaze-fn-attr:`fast_interrupt` attribute to indicate handlers\n-  used in low-latency interrupt mode, and :microblaze-fn-attr:`interrupt_handler` for\n-  interrupts that do not use low-latency handlers.  In both cases, GCC\n-  emits appropriate prologue code and generates a return from the handler\n-  using ``rtid`` instead of ``rtsd``.\n\\ No newline at end of file"}, {"sha": "7cdc761cfd5f20ba4b4e1980f3ece0f4db7e374b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/microsoft-windows-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmicrosoft-windows-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,104 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _microsoft-windows-function-attributes:\n-\n-Microsoft Windows Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The following attributes are available on Microsoft Windows and Symbian OS\n-targets.\n-\n-.. index:: dllexport function attribute, __declspec(dllexport)\n-\n-.. microsoft-windows-fn-attr:: dllexport\n-\n-  On Microsoft Windows targets and Symbian OS targets the\n-  :microsoft-windows-fn-attr:`dllexport` attribute causes the compiler to provide a global\n-  pointer to a pointer in a DLL, so that it can be referenced with the\n-  :microsoft-windows-fn-attr:`dllimport` attribute.  On Microsoft Windows targets, the pointer\n-  name is formed by combining ``_imp__`` and the function or variable\n-  name.\n-\n-  You can use ``__declspec(dllexport)`` as a synonym for\n-  ``__attribute__ ((dllexport))`` for compatibility with other\n-  compilers.\n-\n-  On systems that support the :microsoft-windows-fn-attr:`visibility` attribute, this\n-  attribute also implies 'default' visibility.  It is an error to\n-  explicitly specify any other visibility.\n-\n-  GCC's default behavior is to emit all inline functions with the\n-  :microsoft-windows-fn-attr:`dllexport` attribute.  Since this can cause object file-size bloat,\n-  you can use :option:`-fno-keep-inline-dllexport`, which tells GCC to\n-  ignore the attribute for inlined functions unless the\n-  :option:`-fkeep-inline-functions` flag is used instead.\n-\n-  The attribute is ignored for undefined symbols.\n-\n-  When applied to C++ classes, the attribute marks defined non-inlined\n-  member functions and static data members as exports.  Static consts\n-  initialized in-class are not marked unless they are also defined\n-  out-of-class.\n-\n-  For Microsoft Windows targets there are alternative methods for\n-  including the symbol in the DLL's export table such as using a\n-  :samp:`.def` file with an ``EXPORTS`` section or, with GNU ld, using\n-  the :option:`--export-all` linker flag.\n-\n-.. index:: dllimport function attribute, __declspec(dllimport)\n-\n-.. microsoft-windows-fn-attr:: dllimport\n-\n-  On Microsoft Windows and Symbian OS targets, the :microsoft-windows-fn-attr:`dllimport`\n-  attribute causes the compiler to reference a function or variable via\n-  a global pointer to a pointer that is set up by the DLL exporting the\n-  symbol.  The attribute implies ``extern``.  On Microsoft Windows\n-  targets, the pointer name is formed by combining ``_imp__`` and the\n-  function or variable name.\n-\n-  You can use ``__declspec(dllimport)`` as a synonym for\n-  ``__attribute__ ((dllimport))`` for compatibility with other\n-  compilers.\n-\n-  On systems that support the :microsoft-windows-fn-attr:`visibility` attribute, this\n-  attribute also implies 'default' visibility.  It is an error to\n-  explicitly specify any other visibility.\n-\n-  Currently, the attribute is ignored for inlined functions.  If the\n-  attribute is applied to a symbol *definition*, an error is reported.\n-  If a symbol previously declared :microsoft-windows-fn-attr:`dllimport` is later defined, the\n-  attribute is ignored in subsequent references, and a warning is emitted.\n-  The attribute is also overridden by a subsequent declaration as\n-  :microsoft-windows-fn-attr:`dllexport`.\n-\n-  When applied to C++ classes, the attribute marks non-inlined\n-  member functions and static data members as imports.  However, the\n-  attribute is ignored for virtual methods to allow creation of vtables\n-  using thunks.\n-\n-  On the SH Symbian OS target the :microsoft-windows-fn-attr:`dllimport` attribute also has\n-  another affect---it can cause the vtable and run-time type information\n-  for a class to be exported.  This happens when the class has a\n-  dllimported constructor or a non-inline, non-pure virtual function\n-  and, for either of those two conditions, the class also has an inline\n-  constructor or destructor and has a key function that is defined in\n-  the current translation unit.\n-\n-  For Microsoft Windows targets the use of the :microsoft-windows-fn-attr:`dllimport`\n-  attribute on functions is not necessary, but provides a small\n-  performance benefit by eliminating a thunk in the DLL.  The use of the\n-  :microsoft-windows-fn-attr:`dllimport` attribute on imported variables can be avoided by passing the\n-  :option:`--enable-auto-import` switch to the GNU linker.  As with\n-  functions, using the attribute for a variable eliminates a thunk in\n-  the DLL.\n-\n-  One drawback to using this attribute is that a pointer to a\n-  *variable* marked as :microsoft-windows-fn-attr:`dllimport` cannot be used as a constant\n-  address. However, a pointer to a *function* with the\n-  :microsoft-windows-fn-attr:`dllimport` attribute can be used as a constant initializer; in\n-  this case, the address of a stub function in the import lib is\n-  referenced.  On Microsoft Windows targets, the attribute can be disabled\n-  for functions by setting the :option:`-mnop-fun-dllimport` flag.\n\\ No newline at end of file"}, {"sha": "93e8aae09742456ea34c8a6a14367a5293541319", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/mips-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmips-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,134 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _mips-function-attributes:\n-\n-MIPS Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the MIPS back end:\n-\n-.. index:: interrupt function attribute, MIPS\n-\n-.. mips-fn-attr:: interrupt\n-\n-  Use this attribute to indicate that the specified function is an interrupt\n-  handler.  The compiler generates function entry and exit sequences suitable\n-  for use in an interrupt handler when this attribute is present.\n-  An optional argument is supported for the interrupt attribute which allows\n-  the interrupt mode to be described.  By default GCC assumes the external\n-  interrupt controller (EIC) mode is in use, this can be explicitly set using\n-  ``eic``.  When interrupts are non-masked then the requested Interrupt\n-  Priority Level (IPL) is copied to the current IPL which has the effect of only\n-  enabling higher priority interrupts.  To use vectored interrupt mode use\n-  the argument ``vector=[sw0|sw1|hw0|hw1|hw2|hw3|hw4|hw5]``, this will change\n-  the behavior of the non-masked interrupt support and GCC will arrange to mask\n-  all interrupts from sw0 up to and including the specified interrupt vector.\n-\n-  You can use the following attributes to modify the behavior\n-  of an interrupt handler:\n-\n-  ``use_shadow_register_set``\n-\n-    .. index:: use_shadow_register_set function attribute, MIPS\n-\n-    Assume that the handler uses a shadow register set, instead of\n-    the main general-purpose registers.  An optional argument ``intstack`` is\n-    supported to indicate that the shadow register set contains a valid stack\n-    pointer.\n-\n-  ``keep_interrupts_masked``\n-\n-    .. index:: keep_interrupts_masked function attribute, MIPS\n-\n-    Keep interrupts masked for the whole function.  Without this attribute,\n-    GCC tries to reenable interrupts for as much of the function as it can.\n-\n-  ``use_debug_exception_return``\n-\n-    .. index:: use_debug_exception_return function attribute, MIPS\n-\n-    Return using the ``deret`` instruction.  Interrupt handlers that don't\n-    have this attribute return using ``eret`` instead.\n-\n-    You can use any combination of these attributes, as shown below:\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((interrupt)) v0 ();\n-    void __attribute__ ((interrupt, use_shadow_register_set)) v1 ();\n-    void __attribute__ ((interrupt, keep_interrupts_masked)) v2 ();\n-    void __attribute__ ((interrupt, use_debug_exception_return)) v3 ();\n-    void __attribute__ ((interrupt, use_shadow_register_set,\n-                         keep_interrupts_masked)) v4 ();\n-    void __attribute__ ((interrupt, use_shadow_register_set,\n-                         use_debug_exception_return)) v5 ();\n-    void __attribute__ ((interrupt, keep_interrupts_masked,\n-                         use_debug_exception_return)) v6 ();\n-    void __attribute__ ((interrupt, use_shadow_register_set,\n-                         keep_interrupts_masked,\n-                         use_debug_exception_return)) v7 ();\n-    void __attribute__ ((interrupt(\"eic\"))) v8 ();\n-    void __attribute__ ((interrupt(\"vector=hw3\"))) v9 ();\n-\n-.. index:: indirect calls, MIPS, long_call function attribute, MIPS, short_call function attribute, MIPS, near function attribute, MIPS, far function attribute, MIPS\n-\n-.. mips-fn-attr:: long_call, short_call, near, far\n-\n-  These attributes specify how a particular function is called on MIPS.\n-  The attributes override the :option:`-mlong-calls` (see :ref:`mips-options`)\n-  command-line switch.  The :mips-fn-attr:`long_call` and :mips-fn-attr:`far` attributes are\n-  synonyms, and cause the compiler to always call\n-  the function by first loading its address into a register, and then using\n-  the contents of that register.  The ``short_call`` and :mips-fn-attr:`near`\n-  attributes are synonyms, and have the opposite\n-  effect; they specify that non-PIC calls should be made using the more\n-  efficient ``jal`` instruction.\n-\n-.. index:: mips16 function attribute, MIPS, nomips16 function attribute, MIPS\n-\n-.. mips-fn-attr:: mips16, nomips16\n-\n-  On MIPS targets, you can use the :mips-fn-attr:`mips16` and ``nomips16``\n-  function attributes to locally select or turn off MIPS16 code generation.\n-  A function with the :mips-fn-attr:`mips16` attribute is emitted as MIPS16 code,\n-  while MIPS16 code generation is disabled for functions with the\n-  ``nomips16`` attribute.  These attributes override the\n-  :option:`-mips16` and :option:`-mno-mips16` options on the command line\n-  (see :ref:`mips-options`).\n-\n-  When compiling files containing mixed MIPS16 and non-MIPS16 code, the\n-  preprocessor symbol ``__mips16`` reflects the setting on the command line,\n-  not that within individual functions.  Mixed MIPS16 and non-MIPS16 code\n-  may interact badly with some GCC extensions such as ``__builtin_apply``\n-  (see :ref:`constructing-calls`).\n-\n-.. index:: micromips function attribute, nomicromips function attribute\n-\n-.. mips-fn-attr:: micromips, MIPS, nomicromips, MIPS\n-\n-  On MIPS targets, you can use the ``micromips`` and ``nomicromips``\n-  function attributes to locally select or turn off microMIPS code generation.\n-  A function with the ``micromips`` attribute is emitted as microMIPS code,\n-  while microMIPS code generation is disabled for functions with the\n-  ``nomicromips`` attribute.  These attributes override the\n-  :option:`-mmicromips` and :option:`-mno-micromips` options on the command line\n-  (see :ref:`mips-options`).\n-\n-  When compiling files containing mixed microMIPS and non-microMIPS code, the\n-  preprocessor symbol ``__mips_micromips`` reflects the setting on the\n-  command line,\n-  not that within individual functions.  Mixed microMIPS and non-microMIPS code\n-  may interact badly with some GCC extensions such as ``__builtin_apply``\n-  (see :ref:`constructing-calls`).\n-\n-.. index:: nocompression function attribute, MIPS\n-\n-.. mips-fn-attr:: nocompression\n-\n-  On MIPS targets, you can use the :mips-fn-attr:`nocompression` function attribute\n-  to locally turn off MIPS16 and microMIPS code generation.  This attribute\n-  overrides the :option:`-mips16` and :option:`-mmicromips` options on the\n-  command line (see :ref:`mips-options`).\n\\ No newline at end of file"}, {"sha": "1b234c4ff4ec5a854f3447e0101a79edde535125", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/msp430-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fmsp430-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,103 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _msp430-function-attributes:\n-\n-MSP430 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the MSP430 back end:\n-\n-.. index:: critical function attribute, MSP430\n-\n-.. msp430-fn-attr:: critical\n-\n-  Critical functions disable interrupts upon entry and restore the\n-  previous interrupt state upon exit.  Critical functions cannot also\n-  have the :msp430-fn-attr:`naked`, :msp430-fn-attr:`reentrant` or :msp430-fn-attr:`interrupt` attributes.\n-\n-  The MSP430 hardware ensures that interrupts are disabled on entry to\n-  :msp430-fn-attr:`interrupt` functions, and restores the previous interrupt state\n-  on exit. The :msp430-fn-attr:`critical` attribute is therefore redundant on\n-  :msp430-fn-attr:`interrupt` functions.\n-\n-.. index:: interrupt function attribute, MSP430\n-\n-.. msp430-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  You can provide an argument to the interrupt\n-  attribute which specifies a name or number.  If the argument is a\n-  number it indicates the slot in the interrupt vector table (0 - 31) to\n-  which this handler should be assigned.  If the argument is a name it\n-  is treated as a symbolic name for the vector slot.  These names should\n-  match up with appropriate entries in the linker script.  By default\n-  the names ``watchdog`` for vector 26, ``nmi`` for vector 30 and\n-  :msp430-fn-attr:`reset` for vector 31 are recognized.\n-\n-.. index:: naked function attribute, MSP430\n-\n-.. msp430-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: reentrant function attribute, MSP430\n-\n-.. msp430-fn-attr:: reentrant\n-\n-  Reentrant functions disable interrupts upon entry and enable them\n-  upon exit.  Reentrant functions cannot also have the :msp430-fn-attr:`naked`\n-  or :msp430-fn-attr:`critical` attributes.  They can have the :msp430-fn-attr:`interrupt`\n-  attribute.\n-\n-.. index:: wakeup function attribute, MSP430\n-\n-.. msp430-fn-attr:: wakeup\n-\n-  This attribute only applies to interrupt functions.  It is silently\n-  ignored if applied to a non-interrupt function.  A wakeup interrupt\n-  function will rouse the processor from any low-power state that it\n-  might be in when the function exits.\n-\n-.. index:: lower function attribute, MSP430, upper function attribute, MSP430, either function attribute, MSP430\n-\n-.. msp430-fn-attr:: lower, upper, either\n-\n-  On the MSP430 target these attributes can be used to specify whether\n-  the function or variable should be placed into low memory, high\n-  memory, or the placement should be left to the linker to decide.  The\n-  attributes are only significant if compiling for the MSP430X\n-  architecture in the large memory model.\n-\n-  The attributes work in conjunction with a linker script that has been\n-  augmented to specify where to place sections with a ``.lower`` and\n-  a ``.upper`` prefix.  So, for example, as well as placing the\n-  ``.data`` section, the script also specifies the placement of a\n-  ``.lower.data`` and a ``.upper.data`` section.  The intention\n-  is that :msp430-fn-attr:`lower` sections are placed into a small but easier to\n-  access memory region and the upper sections are placed into a larger, but\n-  slower to access, region.\n-\n-  The ``either`` attribute is special.  It tells the linker to place\n-  the object into the corresponding :msp430-fn-attr:`lower` section if there is\n-  room for it.  If there is insufficient room then the object is placed\n-  into the corresponding :msp430-fn-attr:`upper` section instead.  Note that the\n-  placement algorithm is not very sophisticated.  It does not attempt to\n-  find an optimal packing of the :msp430-fn-attr:`lower` sections.  It just makes\n-  one pass over the objects and does the best that it can.  Using the\n-  :option:`-ffunction-sections` and :option:`-fdata-sections` command-line\n-  options can help the packing, however, since they produce smaller,\n-  easier to pack regions.\n\\ No newline at end of file"}, {"sha": "5e98215c8d1a2866a4dbed089e73bc59c36d2b89", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nds32-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnds32-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,96 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _nds32-function-attributes:\n-\n-NDS32 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the NDS32 back end:\n-\n-.. index:: exception function attribute, exception handler functions, NDS32\n-\n-.. nds32-fn-attr:: exception\n-\n-  Use this attribute on the NDS32 target to indicate that the specified function\n-  is an exception handler.  The compiler will generate corresponding sections\n-  for use in an exception handler.\n-\n-.. index:: interrupt function attribute, NDS32\n-\n-.. nds32-fn-attr:: interrupt\n-\n-  On NDS32 target, this attribute indicates that the specified function\n-  is an interrupt handler.  The compiler generates corresponding sections\n-  for use in an interrupt handler.  You can use the following attributes\n-  to modify the behavior:\n-\n-  ``nested``\n-\n-    .. index:: nested function attribute, NDS32\n-\n-    This interrupt service routine is interruptible.\n-\n-  ``not_nested``\n-\n-    .. index:: not_nested function attribute, NDS32\n-\n-    This interrupt service routine is not interruptible.\n-\n-  ``nested_ready``\n-\n-    .. index:: nested_ready function attribute, NDS32\n-\n-    This interrupt service routine is interruptible after ``PSW.GIE``\n-    (global interrupt enable) is set.  This allows interrupt service routine to\n-    finish some short critical code before enabling interrupts.\n-\n-  ``save_all``\n-\n-    .. index:: save_all function attribute, NDS32\n-\n-    The system will help save all registers into stack before entering\n-    interrupt handler.\n-\n-  ``partial_save``\n-\n-    .. index:: partial_save function attribute, NDS32\n-\n-    The system will help save caller registers into stack before entering\n-    interrupt handler.\n-\n-.. index:: naked function attribute, NDS32\n-\n-.. nds32-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: reset function attribute, NDS32, reset handler functions\n-\n-.. nds32-fn-attr:: reset\n-\n-  Use this attribute on the NDS32 target to indicate that the specified function\n-  is a reset handler.  The compiler will generate corresponding sections\n-  for use in a reset handler.  You can use the following attributes\n-  to provide extra exception handling:\n-\n-  ``nmi``\n-\n-    .. index:: nmi function attribute, NDS32\n-\n-    Provide a user-defined function to handle NMI exception.\n-\n-  ``warm``\n-\n-    .. index:: warm function attribute, NDS32\n-\n-    Provide a user-defined function to handle warm reset exception.\n\\ No newline at end of file"}, {"sha": "6e4b873021067a59f1ab9dd44cadcfd97f96deb4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nios-ii-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnios-ii-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,42 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _nios-ii-function-attributes:\n-\n-Nios II Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the Nios II back end:\n-\n-.. index:: target function attribute\n-\n-.. nios-ii-fn-attr:: target (options)\n-\n-  As discussed in :ref:`common-function-attributes`, this attribute\n-  allows specification of target-specific compilation options.\n-\n-  When compiling for Nios II, the following options are allowed:\n-\n-  :samp:`custom-{insn}={N}` :samp:`no-custom-{insn}`\n-\n-    .. index:: target(\"custom-insn=N\") function attribute, Nios II, target(\"no-custom-insn\") function attribute, Nios II\n-\n-    Each :samp:`custom-{insn}={N}` attribute locally enables use of a\n-    custom instruction with encoding :samp:`{N}` when generating code that uses\n-    :samp:`{insn}`.  Similarly, :samp:`no-custom-{insn}` locally inhibits use of\n-    the custom instruction :samp:`{insn}`.\n-    These target attributes correspond to the\n-    :option:`-mcustom-insn=N` and :option:`-mno-custom-insn`\n-    command-line options, and support the same set of :samp:`{insn}` keywords.\n-    See :ref:`nios-ii-options`, for more information.\n-\n-  :samp:`custom-fpu-cfg={name}`\n-\n-    .. index:: target(\"custom-fpu-cfg=name\") function attribute, Nios II\n-\n-    This attribute corresponds to the :option:`-mcustom-fpu-cfg=name`\n-    command-line option, to select a predefined set of custom instructions\n-    named :samp:`{name}`.\n-    See :ref:`nios-ii-options`, for more information.\n\\ No newline at end of file"}, {"sha": "700a73774afafc6adaf22a9c9276feaaef3fa4f7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/nvidia-ptx-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fnvidia-ptx-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,22 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _nvidia-ptx-function-attributes:\n-\n-Nvidia PTX Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the Nvidia PTX back end:\n-\n-.. index:: kernel attribute, Nvidia PTX\n-\n-.. nvidia-ptx-fn-attr:: kernel\n-\n-  This attribute indicates that the corresponding function should be compiled\n-  as a kernel function, which can be invoked from the host via the CUDA RT\n-  library.\n-  By default functions are only callable only from other PTX functions.\n-\n-  Kernel functions must have ``void`` return type.\n\\ No newline at end of file"}, {"sha": "f7a65acd636c71c2e4616a0c746d1e57c0ded78a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/powerpc-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fpowerpc-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,225 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _powerpc-function-attributes:\n-\n-PowerPC Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the PowerPC back end:\n-\n-.. index:: indirect calls, PowerPC, longcall function attribute, PowerPC, shortcall function attribute, PowerPC\n-\n-.. powerpc-fn-attr:: longcall, shortcall\n-\n-  The :powerpc-fn-attr:`longcall` attribute\n-  indicates that the function might be far away from the call site and\n-  require a different (more expensive) calling sequence.  The\n-  ``shortcall`` attribute indicates that the function is always close\n-  enough for the shorter calling sequence to be used.  These attributes\n-  override both the :option:`-mlongcall` switch and\n-  the ``#pragma longcall`` setting.\n-\n-  See :ref:`rs-6000-and-powerpc-options`, for more information on whether long\n-  calls are necessary.\n-\n-.. index:: target function attribute\n-\n-.. powerpc-fn-attr:: target (options)\n-\n-  As discussed in :ref:`common-function-attributes`, this attribute\n-  allows specification of target-specific compilation options.\n-\n-  On the PowerPC, the following options are allowed:\n-\n-  :samp:`altivec` :samp:`no-altivec`\n-\n-    .. index:: target(\"altivec\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) AltiVec instructions.  In\n-    32-bit code, you cannot enable AltiVec instructions unless\n-    :option:`-mabi=altivec` is used on the command line.\n-\n-  :samp:`cmpb` :samp:`no-cmpb`\n-\n-    .. index:: target(\"cmpb\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the compare bytes instruction\n-    implemented on the POWER6 processor and other processors that support\n-    the PowerPC V2.05 architecture.\n-\n-  :samp:`dlmzb` :samp:`no-dlmzb`\n-\n-    .. index:: target(\"dlmzb\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the string-search :samp:`dlmzb`\n-    instruction on the IBM 405, 440, 464 and 476 processors.  This instruction is\n-    generated by default when targeting those processors.\n-\n-  :samp:`fprnd` :samp:`no-fprnd`\n-\n-    .. index:: target(\"fprnd\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the FP round to integer\n-    instructions implemented on the POWER5+ processor and other processors\n-    that support the PowerPC V2.03 architecture.\n-\n-  :samp:`hard-dfp` :samp:`no-hard-dfp`\n-\n-    .. index:: target(\"hard-dfp\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the decimal floating-point\n-    instructions implemented on some POWER processors.\n-\n-  :samp:`isel` :samp:`no-isel`\n-\n-    .. index:: target(\"isel\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) ISEL instruction.\n-\n-  :samp:`mfcrf` :samp:`no-mfcrf`\n-\n-    .. index:: target(\"mfcrf\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the move from condition\n-    register field instruction implemented on the POWER4 processor and\n-    other processors that support the PowerPC V2.01 architecture.\n-\n-  :samp:`mulhw` :samp:`no-mulhw`\n-\n-    .. index:: target(\"mulhw\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the half-word multiply and\n-    multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors.\n-    These instructions are generated by default when targeting those\n-    processors.\n-\n-  :samp:`multiple` :samp:`no-multiple`\n-\n-    .. index:: target(\"multiple\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the load multiple word\n-    instructions and the store multiple word instructions.\n-\n-  :samp:`update` :samp:`no-update`\n-\n-    .. index:: target(\"update\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the load or store instructions\n-    that update the base register to the address of the calculated memory\n-    location.\n-\n-  :samp:`popcntb` :samp:`no-popcntb`\n-\n-    .. index:: target(\"popcntb\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the popcount and double-precision\n-    FP reciprocal estimate instruction implemented on the POWER5\n-    processor and other processors that support the PowerPC V2.02\n-    architecture.\n-\n-  :samp:`popcntd` :samp:`no-popcntd`\n-\n-    .. index:: target(\"popcntd\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the popcount instruction\n-    implemented on the POWER7 processor and other processors that support\n-    the PowerPC V2.06 architecture.\n-\n-  :samp:`powerpc-gfxopt` :samp:`no-powerpc-gfxopt`\n-\n-    .. index:: target(\"powerpc-gfxopt\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the optional PowerPC\n-    architecture instructions in the Graphics group, including\n-    floating-point select.\n-\n-  :samp:`powerpc-gpopt` :samp:`no-powerpc-gpopt`\n-\n-    .. index:: target(\"powerpc-gpopt\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the optional PowerPC\n-    architecture instructions in the General Purpose group, including\n-    floating-point square root.\n-\n-  :samp:`recip-precision` :samp:`no-recip-precision`\n-\n-    .. index:: target(\"recip-precision\") function attribute, PowerPC\n-\n-    Assume (do not assume) that the reciprocal estimate instructions\n-    provide higher-precision estimates than is mandated by the PowerPC\n-    ABI.\n-\n-  :samp:`string` :samp:`no-string`\n-\n-    .. index:: target(\"string\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the load string instructions\n-    and the store string word instructions to save multiple registers and\n-    do small block moves.\n-\n-  :samp:`vsx` :samp:`no-vsx`\n-\n-    .. index:: target(\"vsx\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) vector/scalar (VSX)\n-    instructions, and also enable the use of built-in functions that allow\n-    more direct access to the VSX instruction set.  In 32-bit code, you\n-    cannot enable VSX or AltiVec instructions unless\n-    :option:`-mabi=altivec` is used on the command line.\n-\n-  :samp:`friz` :samp:`no-friz`\n-\n-    .. index:: target(\"friz\") function attribute, PowerPC\n-\n-    Generate (do not generate) the ``friz`` instruction when the\n-    :option:`-funsafe-math-optimizations` option is used to optimize\n-    rounding a floating-point value to 64-bit integer and back to floating\n-    point.  The ``friz`` instruction does not return the same value if\n-    the floating-point number is too large to fit in an integer.\n-\n-  :samp:`avoid-indexed-addresses` :samp:`no-avoid-indexed-addresses`\n-\n-    .. index:: target(\"avoid-indexed-addresses\") function attribute, PowerPC\n-\n-    Generate code that tries to avoid (not avoid) the use of indexed load\n-    or store instructions.\n-\n-  :samp:`paired` :samp:`no-paired`\n-\n-    .. index:: target(\"paired\") function attribute, PowerPC\n-\n-    Generate code that uses (does not use) the generation of PAIRED simd\n-    instructions.\n-\n-  :samp:`longcall` :samp:`no-longcall`\n-\n-    .. index:: target(\"longcall\") function attribute, PowerPC\n-\n-    Generate code that assumes (does not assume) that all calls are far\n-    away so that a longer more expensive calling sequence is required.\n-\n-  :samp:`cpu={CPU}`\n-\n-    .. index:: target(\"cpu=CPU\") function attribute, PowerPC\n-\n-    Specify the architecture to generate code for when compiling the\n-    function.  If you select the ``target(\"cpu=power7\")`` attribute when\n-    generating 32-bit code, VSX and AltiVec instructions are not generated\n-    unless you use the :option:`-mabi=altivec` option on the command line.\n-\n-  :samp:`tune={TUNE}`\n-\n-    .. index:: target(\"tune=TUNE\") function attribute, PowerPC\n-\n-    Specify the architecture to tune for when compiling the function.  If\n-    you do not specify the ``target(\"tune=TUNE\")`` attribute and\n-    you do specify the ``target(\"cpu=CPU\")`` attribute,\n-    compilation tunes for the :samp:`{CPU}` architecture, and not the\n-    default tuning specified on the command line.\n-\n-  On the PowerPC, the inliner does not inline a\n-  function that has different target options than the caller, unless the\n-  callee has a subset of the target options of the caller.\n\\ No newline at end of file"}, {"sha": "6ef5036c53affbb64b6f3c6c6015665ea1196ca9", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/risc-v-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frisc-v-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,43 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _risc-v-function-attributes:\n-\n-RISC-V Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the RISC-V back end:\n-\n-.. index:: naked function attribute, RISC-V\n-\n-.. risc-v-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: interrupt function attribute, RISC-V\n-\n-.. risc-v-fn-attr:: interrupt\n-\n-  Use this attribute to indicate that the specified function is an interrupt\n-  handler.  The compiler generates function entry and exit sequences suitable\n-  for use in an interrupt handler when this attribute is present.\n-\n-  You can specify the kind of interrupt to be handled by adding an optional\n-  parameter to the interrupt attribute like this:\n-\n-  .. code-block:: c++\n-\n-    void f (void) __attribute__ ((interrupt (\"user\")));\n-\n-  Permissible values for this parameter are ``user``, ``supervisor``,\n-  and ``machine``.  If there is no parameter, then it defaults to\n-  ``machine``.\n\\ No newline at end of file"}, {"sha": "d963f1b863e0169bec6c8b407e0c3efba9989a47", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rl78-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frl78-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,37 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _rl78-function-attributes:\n-\n-RL78 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the RL78 back end:\n-\n-.. index:: interrupt function attribute, RL78, brk_interrupt function attribute, RL78\n-\n-.. rl78-fn-attr:: interrupt, brk_interrupt\n-\n-  These attributes indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  Use ``brk_interrupt`` instead of :rl78-fn-attr:`interrupt` for\n-  handlers intended to be used with the ``BRK`` opcode (i.e. those\n-  that must end with ``RETB`` instead of ``RETI``).\n-\n-.. index:: naked function attribute, RL78\n-\n-.. rl78-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n\\ No newline at end of file"}, {"sha": "99260f714b16a53b556cbe09939b049e1cc174a4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/rx-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Frx-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,75 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _rx-function-attributes:\n-\n-RX Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the RX back end:\n-\n-.. index:: fast_interrupt function attribute, RX\n-\n-.. rx-fn-attr:: fast_interrupt\n-\n-  Use this attribute on the RX port to indicate that the specified\n-  function is a fast interrupt handler.  This is just like the\n-  :rx-fn-attr:`interrupt` attribute, except that ``freit`` is used to return\n-  instead of ``reit``.\n-\n-.. index:: interrupt function attribute, RX\n-\n-.. rx-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n-\n-  On RX and RL78 targets, you may specify one or more vector numbers as arguments\n-  to the attribute, as well as naming an alternate table name.\n-  Parameters are handled sequentially, so one handler can be assigned to\n-  multiple entries in multiple tables.  One may also pass the magic\n-  string ``\"$default\"`` which causes the function to be used for any\n-  unfilled slots in the current table.\n-\n-  This example shows a simple assignment of a function to one vector in\n-  the default table (note that preprocessor macros may be used for\n-  chip-specific symbolic vector names):\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((interrupt (5))) txd1_handler ();\n-\n-  This example assigns a function to two slots in the default table\n-  (using preprocessor macros defined elsewhere) and makes it the default\n-  for the ``dct`` table:\n-\n-  .. code-block:: c++\n-\n-    void __attribute__ ((interrupt (RXD1_VECT,RXD2_VECT,\"dct\",\"$default\")))\n-    \ttxd1_handler ();\n-\n-.. index:: naked function attribute, RX\n-\n-.. rx-fn-attr:: naked\n-\n-  This attribute allows the compiler to construct the\n-  requisite function declaration, while allowing the body of the\n-  function to be assembly code. The specified function will not have\n-  prologue/epilogue sequences generated by the compiler. Only basic\n-  ``asm`` statements can safely be included in naked functions\n-  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of\n-  basic ``asm`` and C code may appear to work, they cannot be\n-  depended upon to work reliably and are not supported.\n-\n-.. index:: vector function attribute, RX\n-\n-.. rx-fn-attr:: vector\n-\n-  This RX attribute is similar to the :rx-fn-attr:`interrupt` attribute, including its\n-  parameters, but does not make the function an interrupt-handler type\n-  function (i.e. it retains the normal C function calling ABI).  See the\n-  :rx-fn-attr:`interrupt` attribute for a description of its arguments.\n\\ No newline at end of file"}, {"sha": "dad2caefe8d5bc973cd07aeedcde8d201bd2a9cf", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/s-390-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fs-390-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,52 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _s-390-function-attributes:\n-\n-S/390 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported on the S/390:\n-\n-.. index:: hotpatch function attribute, S/390\n-\n-.. s-390-fn-attr:: hotpatch (halfwords-before-function-label,halfwords-after-function-label)\n-\n-  On S/390 System z targets, you can use this function attribute to\n-  make GCC generate a 'hot-patching' function prologue.  If the\n-  :option:`-mhotpatch=` command-line option is used at the same time,\n-  the ``hotpatch`` attribute takes precedence.  The first of the\n-  two arguments specifies the number of halfwords to be added before\n-  the function label.  A second argument can be used to specify the\n-  number of halfwords to be added after the function label.  For\n-  both arguments the maximum allowed value is 1000000.\n-\n-  If both arguments are zero, hotpatching is disabled.\n-\n-.. index:: target function attribute\n-\n-.. s-390-fn-attr:: target (options)\n-\n-  As discussed in :ref:`common-function-attributes`, this attribute\n-  allows specification of target-specific compilation options.\n-\n-  On S/390, the following options are supported:\n-\n-  :samp:`arch=` :samp:`tune=` :samp:`stack-guard=` :samp:`stack-size=` :samp:`branch-cost=`\n-  :samp:`warn-framesize=` :samp:`backchain` :samp:`no-backchain` :samp:`hard-dfp`\n-  :samp:`no-hard-dfp` :samp:`hard-float` :samp:`soft-float` :samp:`htm` :samp:`no-htm`\n-  :samp:`vx` :samp:`no-vx` :samp:`packed-stack` :samp:`no-packed-stack` :samp:`small-exec`\n-  :samp:`no-small-exec` :samp:`mvcle` :samp:`no-mvcle` :samp:`warn-dynamicstack`\n-  :samp:`no-warn-dynamicstack`\n-\n-  The options work exactly like the S/390 specific command line\n-  options (without the prefix :samp:`-m`) except that they do not\n-  change any feature macros.  For example,\n-\n-  .. code-block:: c++\n-\n-    target(\"no-vx\")\n-\n-  does not undefine the ``__VEC__`` macro.\n\\ No newline at end of file"}, {"sha": "f60d38763ad28e4cfc1a4f0b83a603f9facb6eea", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/sh-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsh-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,101 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _sh-function-attributes:\n-\n-SH Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported on the SH family of processors:\n-\n-.. index:: function_vector function attribute, SH, calling functions through the function vector on SH2A\n-\n-.. sh-fn-attr:: function_vector\n-\n-  On SH2A targets, this attribute declares a function to be called using the\n-  TBR relative addressing mode.  The argument to this attribute is the entry\n-  number of the same function in a vector table containing all the TBR\n-  relative addressable functions.  For correct operation the TBR must be setup\n-  accordingly to point to the start of the vector table before any functions with\n-  this attribute are invoked.  Usually a good place to do the initialization is\n-  the startup routine.  The TBR relative vector table can have at max 256 function\n-  entries.  The jumps to these functions are generated using a SH2A specific,\n-  non delayed branch instruction JSR/N @(disp8,TBR).  You must use GAS and GLD\n-  from GNU binutils version 2.7 or later for this attribute to work correctly.\n-\n-  In an application, for a function being called once, this attribute\n-  saves at least 8 bytes of code; and if other successive calls are being\n-  made to the same function, it saves 2 bytes of code per each of these\n-  calls.\n-\n-.. index:: interrupt_handler function attribute, SH\n-\n-.. sh-fn-attr:: interrupt_handler\n-\n-  Use this attribute to\n-  indicate that the specified function is an interrupt handler.  The compiler\n-  generates function entry and exit sequences suitable for use in an\n-  interrupt handler when this attribute is present.\n-\n-.. index:: nosave_low_regs function attribute, SH\n-\n-.. sh-fn-attr:: nosave_low_regs\n-\n-  Use this attribute on SH targets to indicate that an :sh-fn-attr:`interrupt_handler`\n-  function should not save and restore registers R0..R7.  This can be used on SH3\\*\n-  and SH4\\* targets that have a second R0..R7 register bank for non-reentrant\n-  interrupt handlers.\n-\n-.. index:: renesas function attribute, SH\n-\n-.. sh-fn-attr:: renesas\n-\n-  On SH targets this attribute specifies that the function or struct follows the\n-  Renesas ABI.\n-\n-.. index:: resbank function attribute, SH\n-\n-.. sh-fn-attr:: resbank\n-\n-  On the SH2A target, this attribute enables the high-speed register\n-  saving and restoration using a register bank for :sh-fn-attr:`interrupt_handler`\n-  routines.  Saving to the bank is performed automatically after the CPU\n-  accepts an interrupt that uses a register bank.\n-\n-  The nineteen 32-bit registers comprising general register R0 to R14,\n-  control register GBR, and system registers MACH, MACL, and PR and the\n-  vector table address offset are saved into a register bank.  Register\n-  banks are stacked in first-in last-out (FILO) sequence.  Restoration\n-  from the bank is executed by issuing a RESBANK instruction.\n-\n-.. index:: sp_switch function attribute, SH\n-\n-.. sh-fn-attr:: sp_switch\n-\n-  Use this attribute on the SH to indicate an :sh-fn-attr:`interrupt_handler`\n-  function should switch to an alternate stack.  It expects a string\n-  argument that names a global variable holding the address of the\n-  alternate stack.\n-\n-  .. code-block:: c++\n-\n-    void *alt_stack;\n-    void f () __attribute__ ((interrupt_handler,\n-                              sp_switch (\"alt_stack\")));\n-\n-.. index:: trap_exit function attribute, SH\n-\n-.. sh-fn-attr:: trap_exit\n-\n-  Use this attribute on the SH for an :sh-fn-attr:`interrupt_handler` to return using\n-  ``trapa`` instead of ``rte``.  This attribute expects an integer\n-  argument specifying the trap number to be used.\n-\n-.. index:: trapa_handler function attribute, SH\n-\n-.. sh-fn-attr:: trapa_handler\n-\n-  On SH targets this function attribute is similar to :sh-fn-attr:`interrupt_handler`\n-  but it does not save and restore all registers.\n\\ No newline at end of file"}, {"sha": "2c57111a9543950dbffd950ba47b773498dbab9b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/symbian-os-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fsymbian-os-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,12 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _symbian-os-function-attributes:\n-\n-Symbian OS Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-See :ref:`microsoft-windows-function-attributes`, for discussion of the\n-:symbian-os-fn-attr:`dllexport` and :symbian-os-fn-attr:`dllimport` attributes.\n\\ No newline at end of file"}, {"sha": "87f7dd240bf7fb9aa24bcef4e548c1c741da8625", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/v850-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fv850-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,20 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _v850-function-attributes:\n-\n-V850 Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The V850 back end supports these function attributes:\n-\n-.. index:: interrupt function attribute, V850, interrupt_handler function attribute, V850\n-\n-.. v850-fn-attr:: interrupt, interrupt_handler\n-\n-  Use these attributes to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when either attribute is present.\n\\ No newline at end of file"}, {"sha": "1db8f75e7651673a944f707d83c966834ba4275f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/visium-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fvisium-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546", "patch": "@@ -1,22 +0,0 @@\n-..\n-  Copyright 1988-2022 Free Software Foundation, Inc.\n-  This is part of the GCC manual.\n-  For copying conditions, see the copyright.rst file.\n-\n-.. _visium-function-attributes:\n-\n-Visium Function Attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-These function attributes are supported by the Visium back end:\n-\n-.. index:: interrupt function attribute, Visium\n-\n-.. visium-fn-attr:: interrupt, interrupt_handler\n-\n-.. visium-fn-attr:: interrupt\n-\n-  Use this attribute to indicate\n-  that the specified function is an interrupt handler.  The compiler generates\n-  function entry and exit sequences suitable for use in an interrupt handler\n-  when this attribute is present.\n\\ No newline at end of file"}, {"sha": "b1a1861c6e0906094eac368c614466effa205d55", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/x86-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fx86-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "0c7981226518087de559db582b1aaab40b2c7f93", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/declaring-attributes-of-functions/xstormy16-function-attributes.rst", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdeclaring-attributes-of-functions%2Fxstormy16-function-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "2b89d34e053684a6a64bacf49cec1b065ebcaae5", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/designated-initializers.rst", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdesignated-initializers.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "ff1c0111687c3eebeaead2e5763274ae13544816", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/determining-the-alignment-of-functions-types-or-variables.rst", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdetermining-the-alignment-of-functions-types-or-variables.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "c6d6e65e75de31ddad8ebfda0b30640b7e53972d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/dollar-signs-in-identifier-names.rst", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdollar-signs-in-identifier-names.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "96d8bc3e2b822725823187c2e03e34723c95a8cc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/double-word-integers.rst", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fdouble-word-integers.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "620611bfdf5cac944e87361b92a88266351e8854", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/enumerator-attributes.rst", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fenumerator-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "27f3d0e87895d785294290360e2f91cd57f96873", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/fixed-point-types.rst", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffixed-point-types.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "6ffc76e68024e463ad603c260ccfac5bb9123a5b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/format-checks-specific-to-particular-target-machines.rst", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fformat-checks-specific-to-particular-target-machines.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "227154f638017d884a1b524bd0419395a71af71e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/function-names-as-strings.rst", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ffunction-names-as-strings.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "d3e3870b8da247778632e9e2eff400c741decd5a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/getting-the-return-or-frame-address-of-a-function.rst", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fgetting-the-return-or-frame-address-of-a-function.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "3eff48063bad403b2bd01c647be18df9680d8d98", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/half-precision-floating-point.rst", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhalf-precision-floating-point.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "25cd9645ed046ceeb9bf13a10fef24db054c0c56", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/hex-floats.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhex-floats.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "bee4092930545490db98f8e84936b1c71cd4dd84", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/how-to-use-inline-assembly-language-in-c-code.rst", "status": "removed", "additions": 0, "deletions": 1979, "changes": 1979, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fhow-to-use-inline-assembly-language-in-c-code.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "ffb06c9d4b47839818e85781e8171203245f454e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/incomplete-enum-types.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fincomplete-enum-types.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "f872130a80d1a8d105ee3ca4d1a7415d414d65dc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/label-attributes.rst", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabel-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "7c6408a7031a290455a07d0411a1cf6e7bffb391", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/labels-as-values.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flabels-as-values.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "de3e80cb6bf85902633fea93943f2c2737362abb", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/legacy-sync-built-in-functions-for-atomic-memory-access.rst", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flegacy-sync-built-in-functions-for-atomic-memory-access.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "b79e7453ea49725c0b6c576f236d2f493ffaa1bc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/locally-declared-labels.rst", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Flocally-declared-labels.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "8c22eb542ba1ca1830db09118a0e685093b52603", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/macros-with-a-variable-number-of-arguments.rst", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmacros-with-a-variable-number-of-arguments.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "090ead8b431db7e64b4ec60127aa19a2f9dfde60", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/mixed-declarations-labels-and-code.rst", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fmixed-declarations-labels-and-code.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "842042810fc3188867ae7857b4f7a5aad39758ed", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/named-address-spaces.rst", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnamed-address-spaces.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "68bcb95eaeedbcaeb60b1f794e947ea1f17d757b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/nested-functions.rst", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnested-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "e93c850a38334656612e9281cedbf3c0f199272e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/non-constant-initializers.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-constant-initializers.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1d0d1546505adc2d283889d3138c4daf3d46b35a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/non-lvalue-arrays-may-have-subscripts.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnon-lvalue-arrays-may-have-subscripts.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1aab77a6719b7772b4c6fdf3dbaf250cd9dd43e8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/nonlocal-gotos.rst", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fnonlocal-gotos.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "640498a24858fb8fff56d7bb888fb4af744b9692", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/object-size-checking-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fobject-size-checking-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "8f272a01d8e81097ecd7a1d3661e91e278450380", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.rst", "status": "removed", "additions": 0, "deletions": 1245, "changes": 1245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fother-built-in-functions-provided-by-gcc.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "772ab0f3334682987e9a2922499c21fc8adbb815", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pointer-arguments-in-variadic-functions.rst", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointer-arguments-in-variadic-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "59764f925cea346e69a47ab925038013cfcd3b35", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pointers-to-arrays-with-qualifiers-work-as-expected.rst", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpointers-to-arrays-with-qualifiers-work-as-expected.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "70430c7b71824c9f55a7fe1884bdc7723c6825b6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/pragmas-accepted-by-gcc.rst", "status": "removed", "additions": 0, "deletions": 729, "changes": 729, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fpragmas-accepted-by-gcc.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "fcaa05461082dfc5f31aa59437f9d852d56de3fc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/prototypes-and-old-style-function-definitions.rst", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fprototypes-and-old-style-function-definitions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "f84b1e0f7031e37c3e893df6cc6c726ea83d6da4", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/referring-to-a-type-with-typeof.rst", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Freferring-to-a-type-with-typeof.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "8dc368434be372f8f5e9d211e18a5716f08c4615", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/slightly-looser-rules-for-escaped-newlines.rst", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fslightly-looser-rules-for-escaped-newlines.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1703a0269dc5049281de84b114a6f8c84b8cfe76", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-types.rst", "status": "removed", "additions": 0, "deletions": 713, "changes": 713, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-types.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "9207fafb918203c246f87c76798e827484803d76", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/specifying-attributes-of-variables.rst", "status": "removed", "additions": 0, "deletions": 1187, "changes": 1187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fspecifying-attributes-of-variables.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "683347a2165228aaa014ba12aa44cc5345b72444", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/statement-attributes.rst", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatement-attributes.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "c67be39a7b8870ef3deb99ccf57aa2b022774486", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/statements-and-declarations-in-expressions.rst", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstatements-and-declarations-in-expressions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "7bd0b9fd6dcfbc471b74451d7fea6317fa0ddb58", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/structures-with-no-members.rst", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fstructures-with-no-members.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1c2a91997833e554eb3c3fb34d2876967aa7ea63", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/support-for-offsetof.rst", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fsupport-for-offsetof.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "d2fce79a84ca6bf64dbdeaf504e1d808c7f76c8b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins.rst", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "22d0426ebb3f2ff43072cfd124ee4c9e69bb4c45", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/aarch64-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faarch64-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "b119719196c8dbf9c8a67c6f8e746850c7ab8abd", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/alpha-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Falpha-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "aac982d3b13a23540c879c17742bb40521f185c6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/altera-nios-ii-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Faltera-nios-ii-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "0df309e918626bdfd8507245e6fc5247fec538b2", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 233, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1d3dd7ea7da9cb4ffa9074c4ed769863513effc8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arc-simd-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 245, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farc-simd-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "feb9fd3fac731f17bf932eef06cc7ea4535cea8b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-armv8-m-security-extensions.rst", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-armv8-m-security-extensions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1fa4a5f5f9605d979478e44ce9a07c2a642f0a32", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-c-language-extensions-acle.rst", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-c-language-extensions-acle.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "e67a0401a783d5a17013d254d38fa839067ed50a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-floating-point-status-and-control-intrinsics.rst", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-floating-point-status-and-control-intrinsics.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "a86039e344c570b0c8818087f9e1c1cd6336ee2b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/arm-iwmmxt-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Farm-iwmmxt-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "80235028c075996dd52ff8d1ebc9ba4abee77fce", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/avr-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Favr-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "0e9550cd32cbf44d8a50f2c5e22d2c2c5684206e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/basic-powerpc-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 724, "changes": 724, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbasic-powerpc-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "44189a3ef6c9b6c08c6192ee05dbeaa4931bf3b7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/blackfin-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fblackfin-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "c4718523c033542a9b2914b6d829339077cad772", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/bpf-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fbpf-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "b317839342d1363919435af8ed2b29727bf30946", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/fr-v-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 474, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Ffr-v-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "83fbb38f14cd0de5164fa6b4ece1d5997ebb9254", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-dsp-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 312, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-dsp-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "dae2f963275282d6fa5581d2a651716576f161d1", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-loongson-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 447, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-loongson-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "aeb86cfe606772da622d868736b4fa866a149a4e", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-paired-single-support.rst", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-paired-single-support.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "ba42478e84b62801a0f7c1c9864979008b33f228", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/mips-simd-architecture-msa-support.rst", "status": "removed", "additions": 0, "deletions": 812, "changes": 812, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmips-simd-architecture-msa-support.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "04560f1d60ce64850adc15e63de329b0698fe89f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/msp430-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fmsp430-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "28365f929249ee4c727dcb045ec8ba7573156dd6", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/nds32-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fnds32-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "1570348768024226cdf3fcc072b7fffe2bb40eef", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/other-mips-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fother-mips-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "03c99412e366896f54375569476254c222265ebe", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/picochip-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpicochip-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "3c08b2ec4ef5428f7b30f3054342fad989482a2f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-altivec-vsx-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 2181, "changes": 2181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-altivec-vsx-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "331d5fc7bde52a40bc65eed62025566de8109fdc", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-atomic-memory-operation-functions.rst", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-atomic-memory-operation-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "4b104a242987db498ce1f3f7b2c1ebe9e0323466", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-hardware-transactional-memory-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-hardware-transactional-memory-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "dd9e984b3918c1198fdd055f9f4a8c7da0080f28", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/powerpc-matrix-multiply-assist-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpowerpc-matrix-multiply-assist-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "840ce92f96d350cdca9ca3e16aa02e7b1c66a883", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/pru-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fpru-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "90ed798d0fe79e4a4184174f18eb651327162644", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/risc-v-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frisc-v-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "632014f11ca56965ee3d357d7da23673fa886642", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/rx-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Frx-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "3311d0b59b94146b58e843a571b6182547d062f7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/s-390-system-z-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fs-390-system-z-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "4240fb749456e3927b3ae164ddb4aa5c85fceb18", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/sh-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsh-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "23d076a71056e7760717971748ed0750eba81e6b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/sparc-vis-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fsparc-vis-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "b75dc8231c4a4f27a4ed878e831cee17ecebf18f", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/ti-c6x-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fti-c6x-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "2c03e454cb780a37e838ce6daa85f48dd07ffec7", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 1698, "changes": 1698, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "c5638838f0b7cf4de8602805384c9f4aca5f7e84", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-control-flow-protection-intrinsics.rst", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-control-flow-protection-intrinsics.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "7526ae27cd8dacdeeded6c1b1d0b64c4f1829c44", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/target-builtins/x86-transactional-memory-intrinsics.rst", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Ftarget-builtins%2Fx86-transactional-memory-intrinsics.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "b379ec6976e42a92213fc6634e9d8eefd1792a22", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/the-character-esc-in-constants.rst", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthe-character-esc-in-constants.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "ae51f8f766653b41a8a0fc73ac09402ff115519d", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/thread-local-storage.rst", "status": "removed", "additions": 0, "deletions": 219, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fthread-local-storage.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "213a16c4ccc2891574a89c564884477fb73cdd9a", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/unnamed-structure-and-union-fields.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Funnamed-structure-and-union-fields.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "808ac582e92e7ad43a3796fa387065a8d6692dcb", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/using-vector-instructions-through-built-in-functions.rst", "status": "removed", "additions": 0, "deletions": 285, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fusing-vector-instructions-through-built-in-functions.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "d3e6f6ae08208ee813f94bb81e23fb5c8e04c73b", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/when-is-a-volatile-object-accessed.rst", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fwhen-is-a-volatile-object-accessed.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "045d2f94841790dc71c07b91c029fe8e1b9c2ea8", "filename": "gcc/doc/gcc/extensions-to-the-c-language-family/x86-specific-memory-model-extensions-for-transactional-memory.rst", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fextensions-to-the-c-language-family%2Fx86-specific-memory-model-extensions-for-transactional-memory.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "04e2a26b6c952e6b25fc46ae8a377b2438603a22", "filename": "gcc/doc/gcc/funding.rst", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Ffunding.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Ffunding.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Ffunding.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "fa1e37e9a8325060a7846081ca1161cd26def8be", "filename": "gcc/doc/gcc/gcc-command-options.rst", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "283671bf0a7e2da6cfa34af46c2025c491724ddb", "filename": "gcc/doc/gcc/gcc-command-options/c++-modules.rst", "status": "removed", "additions": 0, "deletions": 352, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fc%2B%2B-modules.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fc%2B%2B-modules.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fc%2B%2B-modules.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "8dffe3756b2cda0ebd0bf307542a1bab6d051941", "filename": "gcc/doc/gcc/gcc-command-options/compiling-c++-programs.rst", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fcompiling-c%2B%2B-programs.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "33f1cc01e5f7beee847d463eb8e57370717cf5cc", "filename": "gcc/doc/gcc/gcc-command-options/description.rst", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fdescription.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "4b81a5d699bebb0d3f51f36040178daeab4094c3", "filename": "gcc/doc/gcc/gcc-command-options/environment-variables-affecting-gcc.rst", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fenvironment-variables-affecting-gcc.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "dbfc233366d760a119252e6db9219660fe7c0b51", "filename": "gcc/doc/gcc/gcc-command-options/gcc-developer-options.rst", "status": "removed", "additions": 0, "deletions": 1174, "changes": 1174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fgcc-developer-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "79dc9ddd77f80067cf429d95b87b36b1bb0a28d6", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options.rst", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "345b54e28a2b543c90ac2378f3e12d80cac49d39", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/aarch64-options.rst", "status": "removed", "additions": 0, "deletions": 550, "changes": 550, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Faarch64-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "abbcc6881b144b15d78b85e9798dbde86986cc77", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/adapteva-epiphany-options.rst", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fadapteva-epiphany-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "75fe0e3a2ea643d73f26f05c67d3cd554de17e00", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/amd-gcn-options.rst", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Famd-gcn-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "758331aa33322f371c287931243c9dfeeacf8dcc", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/arc-options.rst", "status": "removed", "additions": 0, "deletions": 759, "changes": 759, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farc-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "398b0da0133e9dfe725854d4125e76366c956c16", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/arm-options.rst", "status": "removed", "additions": 0, "deletions": 1037, "changes": 1037, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Farm-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "df82d0cf906f04f2fb9f00bff204dd2884b6c7be", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/avr-mmcu.rst", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-mmcu.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "634032cfc294e37edf4bc795f24d902e13170e5e", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/avr-options.rst", "status": "removed", "additions": 0, "deletions": 543, "changes": 543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Favr-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "7e7fbda8d6dc93987fa4ab2b812279575565272f", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/blackfin-options.rst", "status": "removed", "additions": 0, "deletions": 227, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fblackfin-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "77ebf1452bebc13bc396ff13c564f15deb274f9c", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/c-sky-options.rst", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc-sky-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "452e8ebaf497c733e4181e40cc36b54c78fafc5f", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/c6x-options.rst", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fc6x-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "c0b392ccb3cdbe0a7aa4383165543816fde3811f", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/cris-options.rst", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fcris-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "8f799f39a81c70190cd8283a405e71d4afa1d50e", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/darwin-options.rst", "status": "removed", "additions": 0, "deletions": 224, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdarwin-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}, {"sha": "f9571c4aec983730fbab27d9c3804ac0c95e199f", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/dec-alpha-options.rst", "status": "removed", "additions": 0, "deletions": 274, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1191a412bb17a734c58716237382a8348b057546/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fdec-alpha-options.rst?ref=1191a412bb17a734c58716237382a8348b057546"}]}