{"sha": "08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjZTdiYjgxZGE5ZTRhN2M0ZDc2NjliMWQwODBhMDQ2ZDViMTcxYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-24T09:41:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-24T09:41:42Z"}, "message": "[multiple changes]\n\n2011-10-24  Geert Bosch  <bosch@adacore.com>\n\n\t* s-gearop.adb (Back_Substitute): Avoid overflow if matrix\n\tbounds start at Integer'First.\n\n2011-10-24  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb, s-gearop.adb: Minor reformatting\n\n2011-10-24  Robert Dewar  <dewar@adacore.com>\n\n\t* warnsw.adb: Add some missing warnings to Set_GNAT_Mode_Warnings\n\t* warnsw.ads: Add comments to Set_GNAT_Mode_Warnings\n\nFrom-SVN: r180372", "tree": {"sha": "c3a0ab379f64187b316e836080a027a5d2435a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3a0ab379f64187b316e836080a027a5d2435a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/comments", "author": null, "committer": null, "parents": [{"sha": "d2111e2f14a65ddf677c7dd3ff15566dcce2ce8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2111e2f14a65ddf677c7dd3ff15566dcce2ce8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2111e2f14a65ddf677c7dd3ff15566dcce2ce8c"}], "stats": {"total": 156, "additions": 103, "deletions": 53}, "files": [{"sha": "a226bb8648f77fcbf5a02b134792d79e876b575e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "patch": "@@ -1,3 +1,17 @@\n+2011-10-24  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-gearop.adb (Back_Substitute): Avoid overflow if matrix\n+\tbounds start at Integer'First.\n+\n+2011-10-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb, s-gearop.adb: Minor reformatting\n+\n+2011-10-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* warnsw.adb: Add some missing warnings to Set_GNAT_Mode_Warnings\n+\t* warnsw.ads: Add comments to Set_GNAT_Mode_Warnings\n+\n 2011-10-24  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-proc.adb (Process_Expression_Variable_Decl): No special"}, {"sha": "a359f14dc286c54437a5c15e5444bbdd5b22d907", "filename": "gcc/ada/s-gearop.adb", "status": "modified", "additions": 74, "deletions": 48, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.adb?ref=08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "patch": "@@ -33,11 +33,11 @@ with Ada.Numerics; use Ada.Numerics;\n \n package body System.Generic_Array_Operations is\n \n-   --  The local function Check_Unit_Last computes the index\n-   --  of the last element returned by Unit_Vector or Unit_Matrix.\n-   --  A separate function is needed to allow raising Constraint_Error\n-   --  before declaring the function result variable. The result variable\n-   --  needs to be declared first, to allow front-end inlining.\n+   --  The local function Check_Unit_Last computes the index of the last\n+   --  element returned by Unit_Vector or Unit_Matrix. A separate function is\n+   --  needed to allow raising Constraint_Error before declaring the function\n+   --  result variable. The result variable needs to be declared first, to\n+   --  allow front-end inlining.\n \n    function Check_Unit_Last\n      (Index : Integer;\n@@ -50,7 +50,6 @@ package body System.Generic_Array_Operations is\n    --------------\n \n    function Diagonal (A : Matrix) return Vector is\n-\n       N : constant Natural := Natural'Min (A'Length (1), A'Length (2));\n       R : Vector (A'First (1) .. A'First (1) + N - 1);\n \n@@ -82,13 +81,14 @@ package body System.Generic_Array_Operations is\n    function Check_Unit_Last\n       (Index : Integer;\n        Order : Positive;\n-       First : Integer) return Integer is\n+       First : Integer) return Integer\n+   is\n    begin\n       --  Order the tests carefully to avoid overflow\n \n       if Index < First\n-           or else First > Integer'Last - Order + 1\n-           or else Index > First + (Order - 1)\n+        or else First > Integer'Last - Order + 1\n+        or else Index > First + (Order - 1)\n       then\n          raise Constraint_Error;\n       end if;\n@@ -101,11 +101,10 @@ package body System.Generic_Array_Operations is\n    ---------------------\n \n    procedure Back_Substitute (M, N : in out Matrix) is\n-      pragma Assert (M'First (1) = N'First (1) and then\n+      pragma Assert (M'First (1) = N'First (1)\n+                       and then\n                      M'Last  (1) = N'Last (1));\n \n-      Max_Col : Integer := M'Last (2);\n-\n       procedure Sub_Row\n         (M      : in out Matrix;\n          Target : Integer;\n@@ -126,27 +125,47 @@ package body System.Generic_Array_Operations is\n          end loop;\n       end Sub_Row;\n \n+      --  Local declarations\n+\n+      Max_Col : Integer := M'Last (2);\n+\n    --  Start of processing for Back_Substitute\n \n    begin\n-      for Row in reverse M'Range (1) loop\n-         Find_Non_Zero : for Col in M'First (2) .. Max_Col loop\n+      Do_Rows : for Row in reverse M'Range (1) loop\n+         Find_Non_Zero : for Col in reverse M'First (2) .. Max_Col loop\n             if Is_Non_Zero (M (Row, Col)) then\n \n-               --  Found first non-zero element, so subtract a multiple\n-               --  of this row from all higher rows, to reduce all other\n-               --  elements in this column to zero.\n+               --  Found first non-zero element, so subtract a multiple of this\n+               --  element  from all higher rows, to reduce all other elements\n+               --  in this column to zero.\n \n-               for J in M'First (1) .. Row - 1 loop\n-                  Sub_Row (N, J, Row, (M (J, Col) / M (Row, Col)));\n-                  Sub_Row (M, J, Row, (M (J, Col) / M (Row, Col)));\n-               end loop;\n+               declare\n+                  --  We can't use a for loop, as we'd need to iterate to\n+                  --  Row - 1, but that expression will overflow if M'First\n+                  --  equals Integer'First, which is true for aggregates\n+                  --  without explicit bounds..\n+\n+                  J : Integer := M'First (1);\n+\n+               begin\n+                  while J < Row loop\n+                     Sub_Row (N, J, Row, (M (J, Col) / M (Row, Col)));\n+                     Sub_Row (M, J, Row, (M (J, Col) / M (Row, Col)));\n+                     J := J + 1;\n+                  end loop;\n+               end;\n+\n+               --  Avoid potential overflow in the subtraction below\n+\n+               exit Do_Rows when Col = M'First (2);\n \n                Max_Col := Col - 1;\n+\n                exit Find_Non_Zero;\n             end if;\n          end loop Find_Non_Zero;\n-      end loop;\n+      end loop Do_Rows;\n    end Back_Substitute;\n \n    -----------------------\n@@ -158,7 +177,8 @@ package body System.Generic_Array_Operations is\n       N   : in out Matrix;\n       Det : out Scalar)\n    is\n-      pragma Assert (M'First (1) = N'First (1) and then\n+      pragma Assert (M'First (1) = N'First (1)\n+                       and then\n                      M'Last  (1) = N'Last (1));\n \n       --  The following are variations of the elementary matrix row operations:\n@@ -168,7 +188,7 @@ package body System.Generic_Array_Operations is\n       --  a reciprocal, we divide.\n \n       procedure Sub_Row\n-        (M : in out Matrix;\n+        (M      : in out Matrix;\n          Target : Integer;\n          Source : Integer;\n          Factor : Scalar);\n@@ -196,7 +216,7 @@ package body System.Generic_Array_Operations is\n          Target : Integer;\n          Source : Integer;\n          Factor : Scalar)\n-         is\n+      is\n       begin\n          for J in M'Range (2) loop\n             M (Target, J) := M (Target, J) - Factor * M (Source, J);\n@@ -220,8 +240,8 @@ package body System.Generic_Array_Operations is\n          end loop;\n \n          for J in N'Range (2) loop\n-            N (Row - M'First (1) + N'First (1), J)\n-               := N (Row - M'First (1) + N'First (1), J) / Scale;\n+            N (Row - M'First (1) + N'First (1), J) :=\n+              N (Row - M'First (1) + N'First (1), J) / Scale;\n          end loop;\n       end Divide_Row;\n \n@@ -261,6 +281,8 @@ package body System.Generic_Array_Operations is\n          end if;\n       end Switch_Row;\n \n+      --  Local declarations\n+\n       Row : Integer := M'First (1);\n \n    --  Start of processing for Forward_Eliminate\n@@ -301,7 +323,9 @@ package body System.Generic_Array_Operations is\n                Row := Row + 1;\n \n             else\n-               Det := Zero; --  Zero, but we don't have literals\n+               --  Set zero (note that we do not have literals)\n+\n+               Det := Zero;\n             end if;\n          end;\n       end loop;\n@@ -313,8 +337,7 @@ package body System.Generic_Array_Operations is\n \n    function Inner_Product\n      (Left  : Left_Vector;\n-      Right : Right_Vector)\n-      return  Result_Scalar\n+      Right : Right_Vector) return  Result_Scalar\n    is\n       R : Result_Scalar := Zero;\n \n@@ -336,7 +359,8 @@ package body System.Generic_Array_Operations is\n    -------------\n \n    function L2_Norm (X : X_Vector) return Result_Real'Base is\n-      Sum    : Result_Real'Base := 0.0;\n+      Sum : Result_Real'Base := 0.0;\n+\n    begin\n       for J in X'Range loop\n          Sum := Sum + Result_Real'Base (abs X (J))**2;\n@@ -383,17 +407,17 @@ package body System.Generic_Array_Operations is\n \n    function Matrix_Matrix_Elementwise_Operation\n      (Left  : Left_Matrix;\n-      Right : Right_Matrix)\n-      return Result_Matrix\n+      Right : Right_Matrix) return Result_Matrix\n    is\n       R : Result_Matrix (Left'Range (1), Left'Range (2));\n \n    begin\n       if Left'Length (1) /= Right'Length (1)\n-        or else Left'Length (2) /= Right'Length (2)\n+           or else\n+         Left'Length (2) /= Right'Length (2)\n       then\n          raise Constraint_Error with\n-            \"matrices are of different dimension in elementwise operation\";\n+           \"matrices are of different dimension in elementwise operation\";\n       end if;\n \n       for J in R'Range (1) loop\n@@ -423,10 +447,11 @@ package body System.Generic_Array_Operations is\n \n    begin\n       if X'Length (1) /= Y'Length (1)\n-        or else X'Length (2) /= Y'Length (2)\n+           or else\n+         X'Length (2) /= Y'Length (2)\n       then\n          raise Constraint_Error with\n-            \"matrices are of different dimension in elementwise operation\";\n+           \"matrices are of different dimension in elementwise operation\";\n       end if;\n \n       for J in R'Range (1) loop\n@@ -456,7 +481,7 @@ package body System.Generic_Array_Operations is\n    begin\n       if Left'Length /= Right'Length then\n          raise Constraint_Error with\n-            \"vectors are of different length in elementwise operation\";\n+           \"vectors are of different length in elementwise operation\";\n       end if;\n \n       for J in R'Range loop\n@@ -480,7 +505,7 @@ package body System.Generic_Array_Operations is\n    begin\n       if X'Length /= Y'Length then\n          raise Constraint_Error with\n-            \"vectors are of different length in elementwise operation\";\n+           \"vectors are of different length in elementwise operation\";\n       end if;\n \n       for J in R'Range loop\n@@ -584,6 +609,7 @@ package body System.Generic_Array_Operations is\n          end if;\n \n       elsif X > Real'Base'Last then\n+\n          --  X is infinity, which is its own square root\n \n          return X;\n@@ -629,7 +655,7 @@ package body System.Generic_Array_Operations is\n    begin\n       if Left'Length (2) /= Right'Length (1) then\n          raise Constraint_Error with\n-            \"incompatible dimensions in matrix multiplication\";\n+           \"incompatible dimensions in matrix multiplication\";\n       end if;\n \n       for J in R'Range (1) loop\n@@ -639,8 +665,8 @@ package body System.Generic_Array_Operations is\n \n             begin\n                for M in Left'Range (2) loop\n-                  S := S + Left (J, M)\n-                            * Right (M - Left'First (2) + Right'First (1), K);\n+                  S := S + Left (J, M) *\n+                             Right (M - Left'First (2) + Right'First (1), K);\n                end loop;\n \n                R (J, K) := S;\n@@ -690,9 +716,9 @@ package body System.Generic_Array_Operations is\n    ----------------------------\n \n    function Matrix_Matrix_Solution (A, X : Matrix) return Matrix is\n-      N  : constant Natural := A'Length (1);\n-      MA : Matrix (A'Range (2), A'Range (2));\n-      MB : Matrix (A'Range (2), X'Range (2));\n+      N   : constant Natural := A'Length (1);\n+      MA  : Matrix (A'Range (2), A'Range (2));\n+      MB  : Matrix (A'Range (2), X'Range (2));\n       Det : Scalar;\n \n    begin\n@@ -810,7 +836,7 @@ package body System.Generic_Array_Operations is\n         or else X'Length (2) /= Y'Length (2)\n       then\n          raise Constraint_Error with\n-            \"matrices are of different dimension in update operation\";\n+           \"matrices are of different dimension in update operation\";\n       end if;\n \n       for J in X'Range (1) loop\n@@ -829,7 +855,7 @@ package body System.Generic_Array_Operations is\n    begin\n       if X'Length /= Y'Length then\n          raise Constraint_Error with\n-            \"vectors are of different length in update operation\";\n+           \"vectors are of different length in update operation\";\n       end if;\n \n       for J in X'Range loop\n@@ -888,7 +914,7 @@ package body System.Generic_Array_Operations is\n    begin\n       if Left'Length /= Right'Length (2) then\n          raise Constraint_Error with\n-            \"incompatible dimensions in vector-matrix multiplication\";\n+           \"incompatible dimensions in vector-matrix multiplication\";\n       end if;\n \n       for J in Right'Range (2) loop"}, {"sha": "489f7244d55c3ef14306679d4d618be3bc81a502", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "patch": "@@ -8058,6 +8058,8 @@ package body Sem_Ch12 is\n \n          exit when Present (Interface_Alias (Prim_G));\n \n+         --  Here we install one hidden primitive\n+\n          if Chars (Prim_G) /= Chars (Prim_A)\n            and then Has_Suffix (Prim_A, 'P')\n            and then Remove_Suffix (Prim_A, 'P') = Chars (Prim_G)\n@@ -8076,7 +8078,7 @@ package body Sem_Ch12 is\n       end loop;\n \n       --  Append the elements to the list of temporarily visible primitives\n-      --  avoiding duplicates\n+      --  avoiding duplicates.\n \n       if Present (List) then\n          if No (Prims_List) then"}, {"sha": "78b36eb73e9d064bc1afbd260fa808b2eb950e48", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "patch": "@@ -212,12 +212,16 @@ package body Warnsw is\n       Warn_On_Modified_Unread             := True;\n       Warn_On_No_Value_Assigned           := True;\n       Warn_On_Non_Local_Exception         := False;\n-      Warn_On_Object_Renames_Function     := False;\n+      Warn_On_Object_Renames_Function     := True;\n       Warn_On_Obsolescent_Feature         := True;\n+      Warn_On_Overlap                     := True;\n+      Warn_On_Overridden_Size             := True;\n+      Warn_On_Parameter_Order             := True;\n       Warn_On_Questionable_Missing_Parens := True;\n+      Warn_On_Record_Holes                := False;\n       Warn_On_Redundant_Constructs        := True;\n       Warn_On_Reverse_Bit_Order           := False;\n-      Warn_On_Object_Renames_Function     := True;\n+      Warn_On_Suspicious_Contract         := True;\n       Warn_On_Unchecked_Conversion        := True;\n       Warn_On_Unordered_Enumeration_Type  := False;\n       Warn_On_Unrecognized_Pragma         := True;"}, {"sha": "9fd998bf45745795998db52f48b34734f384943b", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ce7bb81da9e4a7c4d7669b1d080a046d5b171b/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=08ce7bb81da9e4a7c4d7669b1d080a046d5b171b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,10 @@ package Warnsw is\n \n    procedure Set_GNAT_Mode_Warnings;\n    --  This is called in -gnatg mode to set the warnings for gnat mode. It is\n-   --  also used to set the proper warning statuses for -gnatw.g.\n+   --  also used to set the proper warning statuses for -gnatw.g. Note that\n+   --  this set of warnings is disjoint from -gnatwa, it enables warnings that\n+   --  are not included in -gnatwa, and it disables warnings that are included\n+   --  in -gnatwa (such as Warn_On_Implementation_Units, which we clearly want\n+   --  to be False for units built with -gnatg).\n \n end Warnsw;"}]}