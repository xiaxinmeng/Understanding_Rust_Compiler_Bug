{"sha": "cf70f97b951b303ba913a54d7831475af1c2d113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3MGY5N2I5NTFiMzAzYmE5MTNhNTRkNzgzMTQ3NWFmMWMyZDExMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-05-18T22:59:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-05-18T22:59:17Z"}, "message": "shared_ptr_base.h: Use noexcept.\n\n2011-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/shared_ptr_base.h: Use noexcept. Define special member\n\tfunctions as defaulted/deleted.\n\t* include/bits/shared_ptr.h: Use noexcept.\n\t* 20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error line numbers.\n\t* 20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n\nFrom-SVN: r173882", "tree": {"sha": "afa684e92abc5e3daf28b369c11046c2c298e898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afa684e92abc5e3daf28b369c11046c2c298e898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf70f97b951b303ba913a54d7831475af1c2d113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf70f97b951b303ba913a54d7831475af1c2d113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf70f97b951b303ba913a54d7831475af1c2d113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf70f97b951b303ba913a54d7831475af1c2d113/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f9eb59e568af9c0a74927727f206775ea3da55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f9eb59e568af9c0a74927727f206775ea3da55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f9eb59e568af9c0a74927727f206775ea3da55"}], "stats": {"total": 268, "additions": 141, "deletions": 127}, "files": [{"sha": "3b56f06fe244234577d897bc399251aa512036b3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf70f97b951b303ba913a54d7831475af1c2d113", "patch": "@@ -1,3 +1,11 @@\n+2011-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/shared_ptr_base.h: Use noexcept. Define special member\n+\tfunctions as defaulted/deleted.\n+\t* include/bits/shared_ptr.h: Use noexcept.\n+\t* 20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error line numbers.\n+\t* 20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n+\n 2011-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/bitmap_allocator.xml: Fix typos."}, {"sha": "2158de6bf81ddd367c341d32e84ece6b4a97922d", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=cf70f97b951b303ba913a54d7831475af1c2d113", "patch": "@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// 2.2.3.10 shared_ptr get_deleter (experimental)\n   template<typename _Del, typename _Tp, _Lock_policy _Lp>\n     inline _Del*\n-    get_deleter(const __shared_ptr<_Tp, _Lp>& __p)\n+    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept\n     {\n #ifdef __GXX_RTTI\n       return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief  Construct an empty %shared_ptr.\n        *  @post   use_count()==0 && get()==0\n        */\n-      constexpr shared_ptr()\n+      constexpr shared_ptr() noexcept\n       : __shared_ptr<_Tp>() { }\n \n       /**\n@@ -201,7 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @endcode\n        */\n       template<typename _Tp1>\n-\tshared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p)\n+\tshared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p) noexcept\n \t: __shared_ptr<_Tp>(__r, __p) { }\n \n       /**\n@@ -213,15 +213,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tshared_ptr(const shared_ptr<_Tp1>& __r)\n+\tshared_ptr(const shared_ptr<_Tp1>& __r) noexcept\n         : __shared_ptr<_Tp>(__r) { }\n \n       /**\n        *  @brief  Move-constructs a %shared_ptr instance from @a __r.\n        *  @param  __r  A %shared_ptr rvalue.\n        *  @post   *this contains the old value of @a __r, @a __r is empty.\n        */\n-      shared_ptr(shared_ptr&& __r)\n+      shared_ptr(shared_ptr&& __r) noexcept\n       : __shared_ptr<_Tp>(std::move(__r)) { }\n \n       /**\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tshared_ptr(shared_ptr<_Tp1>&& __r)\n+\tshared_ptr(shared_ptr<_Tp1>&& __r) noexcept\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n       /**\n@@ -261,12 +261,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __p  A null pointer constant.\n        *  @post   use_count() == 0 && get() == nullptr\n        */\n-      constexpr shared_ptr(nullptr_t __p)\n+      constexpr shared_ptr(nullptr_t __p) noexcept\n       : __shared_ptr<_Tp>(__p) { }\n \n       template<typename _Tp1>\n \tshared_ptr&\n-\toperator=(const shared_ptr<_Tp1>& __r) // never throws\n+\toperator=(const shared_ptr<_Tp1>& __r) noexcept\n \t{\n \t  this->__shared_ptr<_Tp>::operator=(__r);\n \t  return *this;\n@@ -283,15 +283,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       shared_ptr&\n-      operator=(shared_ptr&& __r)\n+      operator=(shared_ptr&& __r) noexcept\n       {\n \tthis->__shared_ptr<_Tp>::operator=(std::move(__r));\n \treturn *this;\n       }\n \n       template<class _Tp1>\n \tshared_ptr&\n-\toperator=(shared_ptr<_Tp1>&& __r)\n+\toperator=(shared_ptr<_Tp1>&& __r) noexcept\n \t{\n \t  this->__shared_ptr<_Tp>::operator=(std::move(__r));\n \t  return *this;\n@@ -425,23 +425,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.8.13.2.9 shared_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void\n-    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b)\n+    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept\n     { __a.swap(__b); }\n \n   // 20.8.13.2.10 shared_ptr casts.\n   template<typename _Tp, typename _Tp1>\n     inline shared_ptr<_Tp>\n-    static_pointer_cast(const shared_ptr<_Tp1>& __r)\n+    static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n     { return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get())); }\n \n   template<typename _Tp, typename _Tp1>\n     inline shared_ptr<_Tp>\n-    const_pointer_cast(const shared_ptr<_Tp1>& __r)\n+    const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n     { return shared_ptr<_Tp>(__r, const_cast<_Tp*>(__r.get())); }\n \n   template<typename _Tp, typename _Tp1>\n     inline shared_ptr<_Tp>\n-    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r)\n+    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept\n     {\n       if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))\n \treturn shared_ptr<_Tp>(__r, __p);\n@@ -458,37 +458,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class weak_ptr : public __weak_ptr<_Tp>\n     {\n     public:\n-      constexpr weak_ptr()\n+      constexpr weak_ptr() noexcept\n       : __weak_ptr<_Tp>() { }\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tweak_ptr(const weak_ptr<_Tp1>& __r)\n+\tweak_ptr(const weak_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\tweak_ptr(const shared_ptr<_Tp1>& __r)\n+\tweak_ptr(const shared_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n       template<typename _Tp1>\n \tweak_ptr&\n-\toperator=(const weak_ptr<_Tp1>& __r) // never throws\n+\toperator=(const weak_ptr<_Tp1>& __r) noexcept\n \t{\n \t  this->__weak_ptr<_Tp>::operator=(__r);\n \t  return *this;\n \t}\n \n       template<typename _Tp1>\n \tweak_ptr&\n-\toperator=(const shared_ptr<_Tp1>& __r) // never throws\n+\toperator=(const shared_ptr<_Tp1>& __r) noexcept\n \t{\n \t  this->__weak_ptr<_Tp>::operator=(__r);\n \t  return *this;\n \t}\n \n       shared_ptr<_Tp>\n-      lock() const // never throws\n+      lock() const noexcept\n       {\n #ifdef __GTHREADS\n \tif (this->expired())\n@@ -511,7 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.8.13.3.7 weak_ptr specialized algorithms.\n   template<typename _Tp>\n     inline void\n-    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b)\n+    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept\n     { __a.swap(__b); }\n \n \n@@ -538,12 +538,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class enable_shared_from_this\n     {\n     protected:\n-      constexpr enable_shared_from_this() { }\n+      constexpr enable_shared_from_this() noexcept { }\n \n-      enable_shared_from_this(const enable_shared_from_this&) { }\n+      enable_shared_from_this(const enable_shared_from_this&) noexcept { }\n \n       enable_shared_from_this&\n-      operator=(const enable_shared_from_this&)\n+      operator=(const enable_shared_from_this&) noexcept\n       { return *this; }\n \n       ~enable_shared_from_this() { }\n@@ -560,14 +560,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       template<typename _Tp1>\n \tvoid\n-\t_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const\n+\t_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept\n \t{ _M_weak_this._M_assign(__p, __n); }\n \n       template<typename _Tp1>\n \tfriend void\n \t__enable_shared_from_this_helper(const __shared_count<>& __pn,\n \t\t\t\t\t const enable_shared_from_this* __pe,\n-\t\t\t\t\t const _Tp1* __px)\n+\t\t\t\t\t const _Tp1* __px) noexcept\n \t{\n \t  if (__pe != 0)\n \t    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);"}, {"sha": "0a84b3c12595cccef4dda5d2c3d21578b7901fa7", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 102, "deletions": 96, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=cf70f97b951b303ba913a54d7831475af1c2d113", "patch": "@@ -61,7 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     virtual char const*\n-    what() const throw();\n+    what() const noexcept;\n \n     virtual ~bad_weak_ptr() throw();    \n   };\n@@ -108,21 +108,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public _Mutex_base<_Lp>\n     {\n     public:  \n-      _Sp_counted_base()\n+      _Sp_counted_base() noexcept\n       : _M_use_count(1), _M_weak_count(1) { }\n       \n       virtual\n-      ~_Sp_counted_base() // nothrow \n+      ~_Sp_counted_base() noexcept\n       { }\n   \n       // Called when _M_use_count drops to zero, to release the resources\n       // managed by *this.\n       virtual void\n-      _M_dispose() = 0; // nothrow\n+      _M_dispose() noexcept = 0;\n       \n       // Called when _M_weak_count drops to zero.\n       virtual void\n-      _M_destroy() // nothrow\n+      _M_destroy() noexcept\n       { delete this; }\n       \n       virtual void*\n@@ -136,7 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_add_ref_lock();\n       \n       void\n-      _M_release() // nothrow\n+      _M_release() noexcept\n       {\n         // Be race-detector-friendly.  For more info see bits/c++config.\n         _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);\n@@ -166,11 +166,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   \n       void\n-      _M_weak_add_ref() // nothrow\n+      _M_weak_add_ref() noexcept\n       { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }\n \n       void\n-      _M_weak_release() // nothrow\n+      _M_weak_release() noexcept\n       {\n         // Be race-detector-friendly. For more info see bits/c++config.\n         _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);\n@@ -189,16 +189,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   \n       long\n-      _M_get_use_count() const // nothrow\n+      _M_get_use_count() const noexcept\n       {\n         // No memory barrier is used here so there is no synchronization\n         // with other threads.\n         return const_cast<const volatile _Atomic_word&>(_M_use_count);\n       }\n \n     private:  \n-      _Sp_counted_base(_Sp_counted_base const&);\n-      _Sp_counted_base& operator=(_Sp_counted_base const&);\n+      _Sp_counted_base(_Sp_counted_base const&) = delete;\n+      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;\n \n       _Atomic_word  _M_use_count;     // #shared\n       _Atomic_word  _M_weak_count;    // #weak + (#shared != 0)\n@@ -289,11 +289,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_ptr(__p) { }\n \n       virtual void\n-      _M_dispose() // nothrow\n+      _M_dispose() noexcept\n       { delete _M_ptr; }\n \n       virtual void\n-      _M_destroy() // nothrow\n+      _M_destroy() noexcept\n       { delete this; }\n \n       virtual void*\n@@ -309,15 +309,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<>\n     inline void\n-    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() { }\n+    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }\n \n   template<>\n     inline void\n-    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() { }\n+    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }\n \n   template<>\n     inline void\n-    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() { }\n+    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }\n \n   // Support for custom deleter and/or allocator\n   template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>\n@@ -347,11 +347,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_ptr(__p), _M_del(__d, __a) { }\n \n       virtual void\n-      _M_dispose() // nothrow\n+      _M_dispose() noexcept\n       { _M_del._M_del(_M_ptr); }\n \n       virtual void\n-      _M_destroy() // nothrow\n+      _M_destroy() noexcept\n       {\n \t_My_alloc_type __a(_M_del);\n \tthis->~_Sp_counted_deleter();\n@@ -413,7 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Override because the allocator needs to know the dynamic type\n       virtual void\n-      _M_destroy() // nothrow\n+      _M_destroy() noexcept\n       {\n \ttypedef typename _Alloc::template\n \t    rebind<_Sp_counted_ptr_inplace>::other _My_alloc_type;\n@@ -424,7 +424,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Sneaky trick so __shared_ptr can get the managed pointer\n       virtual void*\n-      _M_get_deleter(const std::type_info& __ti)\n+      _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n #ifdef __GXX_RTTI\n \treturn __ti == typeid(_Sp_make_shared_tag)\n@@ -444,7 +444,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __shared_count\n     {\n     public:\n-      constexpr __shared_count() : _M_pi(0) // nothrow\n+      constexpr __shared_count() noexcept : _M_pi(0)\n       { }\n \n       template<typename _Ptr>\n@@ -545,21 +545,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Throw bad_weak_ptr when __r._M_get_use_count() == 0.\n       explicit __shared_count(const __weak_count<_Lp>& __r);\n \n-      ~__shared_count() // nothrow\n+      ~__shared_count() noexcept\n       {\n \tif (_M_pi != 0)\n \t  _M_pi->_M_release();\n       }\n \n-      __shared_count(const __shared_count& __r)\n-      : _M_pi(__r._M_pi) // nothrow\n+      __shared_count(const __shared_count& __r) noexcept\n+      : _M_pi(__r._M_pi)\n       {\n \tif (_M_pi != 0)\n \t  _M_pi->_M_add_ref_copy();\n       }\n \n       __shared_count&\n-      operator=(const __shared_count& __r) // nothrow\n+      operator=(const __shared_count& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \tif (__tmp != _M_pi)\n@@ -574,36 +574,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      _M_swap(__shared_count& __r) // nothrow\n+      _M_swap(__shared_count& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \t__r._M_pi = _M_pi;\n \t_M_pi = __tmp;\n       }\n \n       long\n-      _M_get_use_count() const // nothrow\n+      _M_get_use_count() const noexcept\n       { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }\n \n       bool\n-      _M_unique() const // nothrow\n+      _M_unique() const noexcept\n       { return this->_M_get_use_count() == 1; }\n \n       void*\n-      _M_get_deleter(const std::type_info& __ti) const\n+      _M_get_deleter(const std::type_info& __ti) const noexcept\n       { return _M_pi ? _M_pi->_M_get_deleter(__ti) : 0; }\n \n       bool\n-      _M_less(const __shared_count& __rhs) const\n+      _M_less(const __shared_count& __rhs) const noexcept\n       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }\n \n       bool\n-      _M_less(const __weak_count<_Lp>& __rhs) const\n+      _M_less(const __weak_count<_Lp>& __rhs) const noexcept\n       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }\n \n       // Friend function injected into enclosing namespace and found by ADL\n       friend inline bool\n-      operator==(const __shared_count& __a, const __shared_count& __b)\n+      operator==(const __shared_count& __a, const __shared_count& __b) noexcept\n       { return __a._M_pi == __b._M_pi; }\n \n     private:\n@@ -637,29 +637,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __weak_count\n     {\n     public:\n-      constexpr __weak_count() : _M_pi(0) // nothrow\n+      constexpr __weak_count() noexcept : _M_pi(0)\n       { }\n \n-      __weak_count(const __shared_count<_Lp>& __r) : _M_pi(__r._M_pi) // nothrow\n+      __weak_count(const __shared_count<_Lp>& __r) noexcept\n+      : _M_pi(__r._M_pi)\n       {\n \tif (_M_pi != 0)\n \t  _M_pi->_M_weak_add_ref();\n       }\n \n-      __weak_count(const __weak_count<_Lp>& __r) : _M_pi(__r._M_pi) // nothrow\n+      __weak_count(const __weak_count<_Lp>& __r) noexcept\n+      : _M_pi(__r._M_pi)\n       {\n \tif (_M_pi != 0)\n \t  _M_pi->_M_weak_add_ref();\n       }\n \n-      ~__weak_count() // nothrow\n+      ~__weak_count() noexcept\n       {\n \tif (_M_pi != 0)\n \t  _M_pi->_M_weak_release();\n       }\n \n       __weak_count<_Lp>&\n-      operator=(const __shared_count<_Lp>& __r) // nothrow\n+      operator=(const __shared_count<_Lp>& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \tif (__tmp != 0)\n@@ -671,7 +673,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       __weak_count<_Lp>&\n-      operator=(const __weak_count<_Lp>& __r) // nothrow\n+      operator=(const __weak_count<_Lp>& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \tif (__tmp != 0)\n@@ -683,28 +685,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      _M_swap(__weak_count<_Lp>& __r) // nothrow\n+      _M_swap(__weak_count<_Lp>& __r) noexcept\n       {\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \t__r._M_pi = _M_pi;\n \t_M_pi = __tmp;\n       }\n \n       long\n-      _M_get_use_count() const // nothrow\n+      _M_get_use_count() const noexcept\n       { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }\n \n       bool\n-      _M_less(const __weak_count& __rhs) const\n+      _M_less(const __weak_count& __rhs) const noexcept\n       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }\n \n       bool\n-      _M_less(const __shared_count<_Lp>& __rhs) const\n+      _M_less(const __shared_count<_Lp>& __rhs) const noexcept\n       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }\n \n       // Friend function injected into enclosing namespace and found by ADL\n       friend inline bool\n-      operator==(const __weak_count& __a, const __weak_count& __b)\n+      operator==(const __weak_count& __a, const __weak_count& __b) noexcept\n       { return __a._M_pi == __b._M_pi; }\n \n     private:\n@@ -732,18 +734,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     __enable_shared_from_this_helper(const __shared_count<_Lp>&,\n \t\t\t\t     const __enable_shared_from_this<_Tp1,\n-\t\t\t\t     _Lp>*, const _Tp2*);\n+\t\t\t\t     _Lp>*, const _Tp2*) noexcept;\n \n   // Friend of enable_shared_from_this.\n   template<typename _Tp1, typename _Tp2>\n     void\n     __enable_shared_from_this_helper(const __shared_count<>&,\n \t\t\t\t     const enable_shared_from_this<_Tp1>*,\n-\t\t\t\t     const _Tp2*);\n+\t\t\t\t     const _Tp2*) noexcept;\n \n   template<_Lock_policy _Lp>\n     inline void\n-    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...)\n+    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept\n     { }\n \n \n@@ -753,8 +755,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _Tp   element_type;\n \n-      constexpr __shared_ptr()\n-      : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __shared_ptr() noexcept\n+      : _M_ptr(0), _M_refcount()\n       { }\n \n       template<typename _Tp1>\n@@ -795,29 +797,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Tp1>\n-\t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p)\n+\t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept\n \t: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws\n \t{ }\n \n-      //  generated copy constructor, assignment, destructor are fine.\n+      __shared_ptr(const __shared_ptr&) noexcept = default;\n+      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;\n+      ~__shared_ptr() = default;\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r)\n-\t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws\n+\t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n+\t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)\n \t{ }\n \n-      __shared_ptr(__shared_ptr&& __r)\n-      : _M_ptr(__r._M_ptr), _M_refcount() // never throws\n+      __shared_ptr(__shared_ptr&& __r) noexcept\n+      : _M_ptr(__r._M_ptr), _M_refcount()\n       {\n \t_M_refcount._M_swap(__r._M_refcount);\n \t__r._M_ptr = 0;\n       }\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\t__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r)\n-\t: _M_ptr(__r._M_ptr), _M_refcount() // never throws\n+\t__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept\n+\t: _M_ptr(__r._M_ptr), _M_refcount()\n \t{\n \t  _M_refcount._M_swap(__r._M_refcount);\n \t  __r._M_ptr = 0;\n@@ -860,13 +864,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /* TODO: use delegating constructor */\n-      constexpr __shared_ptr(nullptr_t)\n-      : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __shared_ptr(nullptr_t) noexcept\n+      : _M_ptr(0), _M_refcount()\n       { }\n \n       template<typename _Tp1>\n \t__shared_ptr&\n-\toperator=(const __shared_ptr<_Tp1, _Lp>& __r) // never throws\n+\toperator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t{\n \t  _M_ptr = __r._M_ptr;\n \t  _M_refcount = __r._M_refcount; // __shared_count::op= doesn't throw\n@@ -884,15 +888,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       __shared_ptr&\n-      operator=(__shared_ptr&& __r)\n+      operator=(__shared_ptr&& __r) noexcept\n       {\n \t__shared_ptr(std::move(__r)).swap(*this);\n \treturn *this;\n       }\n \n       template<class _Tp1>\n \t__shared_ptr&\n-\toperator=(__shared_ptr<_Tp1, _Lp>&& __r)\n+\toperator=(__shared_ptr<_Tp1, _Lp>&& __r) noexcept\n \t{\n \t  __shared_ptr(std::move(__r)).swap(*this);\n \t  return *this;\n@@ -907,7 +911,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       void\n-      reset() // never throws\n+      reset() noexcept\n       { __shared_ptr().swap(*this); }\n \n       template<typename _Tp1>\n@@ -931,36 +935,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Allow class instantiation when _Tp is [cv-qual] void.\n       typename std::add_lvalue_reference<_Tp>::type\n-      operator*() const // never throws\n+      operator*() const noexcept\n       {\n \t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n \treturn *_M_ptr;\n       }\n \n       _Tp*\n-      operator->() const // never throws\n+      operator->() const noexcept\n       {\n \t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n \treturn _M_ptr;\n       }\n \n       _Tp*\n-      get() const // never throws\n+      get() const noexcept\n       { return _M_ptr; }\n \n       explicit operator bool() const // never throws\n       { return _M_ptr == 0 ? false : true; }\n \n       bool\n-      unique() const // never throws\n+      unique() const noexcept\n       { return _M_refcount._M_unique(); }\n \n       long\n-      use_count() const // never throws\n+      use_count() const noexcept\n       { return _M_refcount._M_get_use_count(); }\n \n       void\n-      swap(__shared_ptr<_Tp, _Lp>& __other) // never throws\n+      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept\n       {\n \tstd::swap(_M_ptr, __other._M_ptr);\n \t_M_refcount._M_swap(__other._M_refcount);\n@@ -1033,14 +1037,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       void*\n-      _M_get_deleter(const std::type_info& __ti) const\n+      _M_get_deleter(const std::type_info& __ti) const noexcept\n       { return _M_refcount._M_get_deleter(__ti); }\n \n       template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;\n       template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;\n \n       template<typename _Del, typename _Tp1, _Lock_policy _Lp1>\n-\tfriend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&);\n+\tfriend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;\n \n       _Tp*\t   \t   _M_ptr;         // Contained pointer.\n       __shared_count<_Lp>  _M_refcount;    // Reference counter.\n@@ -1151,7 +1155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Sp_less : public binary_function<_Sp, _Sp, bool>\n     {\n       bool\n-      operator()(const _Sp& __lhs, const _Sp& __rhs) const\n+      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept\n       {\n \ttypedef typename _Sp::element_type element_type;\n \treturn std::less<element_type*>()(__lhs.get(), __rhs.get());\n@@ -1166,7 +1170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 2.2.3.8 shared_ptr specialized algorithms.\n   template<typename _Tp, _Lock_policy _Lp>\n     inline void\n-    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b)\n+    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept\n     { __a.swap(__b); }\n \n   // 2.2.3.9 shared_ptr casts\n@@ -1178,7 +1182,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// static_pointer_cast\n   template<typename _Tp, typename _Tp1, _Lock_policy _Lp>\n     inline __shared_ptr<_Tp, _Lp>\n-    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r)\n+    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n     { return __shared_ptr<_Tp, _Lp>(__r, static_cast<_Tp*>(__r.get())); }\n \n   // The seemingly equivalent code:\n@@ -1188,7 +1192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// const_pointer_cast\n   template<typename _Tp, typename _Tp1, _Lock_policy _Lp>\n     inline __shared_ptr<_Tp, _Lp>\n-    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r)\n+    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n     { return __shared_ptr<_Tp, _Lp>(__r, const_cast<_Tp*>(__r.get())); }\n \n   // The seemingly equivalent code:\n@@ -1198,7 +1202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// dynamic_pointer_cast\n   template<typename _Tp, typename _Tp1, _Lock_policy _Lp>\n     inline __shared_ptr<_Tp, _Lp>\n-    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r)\n+    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n     {\n       if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))\n \treturn __shared_ptr<_Tp, _Lp>(__r, __p);\n@@ -1212,11 +1216,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _Tp element_type;\n \n-      constexpr __weak_ptr()\n-      : _M_ptr(0), _M_refcount() // never throws\n+      constexpr __weak_ptr() noexcept\n+      : _M_ptr(0), _M_refcount()\n       { }\n \n-      // Generated copy constructor, assignment, destructor are fine.\n+      __weak_ptr(const __weak_ptr&) noexcept = default;\n+      __weak_ptr& operator=(const __weak_ptr&) noexcept = default;\n+      ~__weak_ptr() = default;\n \n       // The \"obvious\" converting constructor implementation:\n       //\n@@ -1234,19 +1240,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // in multithreaded programs __r._M_ptr may be invalidated at any point.\n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\t__weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r)\n-\t: _M_refcount(__r._M_refcount) // never throws\n+\t__weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r) noexcept\n+\t: _M_refcount(__r._M_refcount)\n         { _M_ptr = __r.lock().get(); }\n \n       template<typename _Tp1, typename = typename\n \t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n-\t__weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r)\n-\t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws\n+\t__weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n+\t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)\n \t{ }\n \n       template<typename _Tp1>\n \t__weak_ptr&\n-\toperator=(const __weak_ptr<_Tp1, _Lp>& __r) // never throws\n+\toperator=(const __weak_ptr<_Tp1, _Lp>& __r) noexcept\n \t{\n \t  _M_ptr = __r.lock().get();\n \t  _M_refcount = __r._M_refcount;\n@@ -1255,15 +1261,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Tp1>\n \t__weak_ptr&\n-\toperator=(const __shared_ptr<_Tp1, _Lp>& __r) // never throws\n+\toperator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t{\n \t  _M_ptr = __r._M_ptr;\n \t  _M_refcount = __r._M_refcount;\n \t  return *this;\n \t}\n \n       __shared_ptr<_Tp, _Lp>\n-      lock() const // never throws\n+      lock() const noexcept\n       {\n #ifdef __GTHREADS\n \t// Optimization: avoid throw overhead.\n@@ -1291,11 +1297,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       } // XXX MT\n \n       long\n-      use_count() const // never throws\n+      use_count() const noexcept\n       { return _M_refcount._M_get_use_count(); }\n \n       bool\n-      expired() const // never throws\n+      expired() const noexcept\n       { return _M_refcount._M_get_use_count() == 0; }\n \n       template<typename _Tp1>\n@@ -1309,11 +1315,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n \n       void\n-      reset() // never throws\n+      reset() noexcept\n       { __weak_ptr().swap(*this); }\n \n       void\n-      swap(__weak_ptr& __s) // never throws\n+      swap(__weak_ptr& __s) noexcept\n       {\n \tstd::swap(_M_ptr, __s._M_ptr);\n \t_M_refcount._M_swap(__s._M_refcount);\n@@ -1322,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       // Used by __enable_shared_from_this.\n       void\n-      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount)\n+      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept\n       {\n \t_M_ptr = __ptr;\n \t_M_refcount = __refcount;\n@@ -1340,7 +1346,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.8.13.3.7 weak_ptr specialized algorithms.\n   template<typename _Tp, _Lock_policy _Lp>\n     inline void\n-    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b)\n+    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept\n     { __a.swap(__b); }\n \n   template<typename _Tp, typename _Tp1>\n@@ -1374,12 +1380,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __enable_shared_from_this\n     {\n     protected:\n-      constexpr __enable_shared_from_this() { }\n+      constexpr __enable_shared_from_this() noexcept { }\n \n-      __enable_shared_from_this(const __enable_shared_from_this&) { }\n+      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }\n \n       __enable_shared_from_this&\n-      operator=(const __enable_shared_from_this&)\n+      operator=(const __enable_shared_from_this&) noexcept\n       { return *this; }\n \n       ~__enable_shared_from_this() { }\n@@ -1396,14 +1402,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       template<typename _Tp1>\n \tvoid\n-\t_M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const\n+\t_M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept\n \t{ _M_weak_this._M_assign(__p, __n); }\n \n       template<typename _Tp1>\n \tfriend void\n \t__enable_shared_from_this_helper(const __shared_count<_Lp>& __pn,\n \t\t\t\t\t const __enable_shared_from_this* __pe,\n-\t\t\t\t\t const _Tp1* __px)\n+\t\t\t\t\t const _Tp1* __px) noexcept\n \t{\n \t  if (__pe != 0)\n \t    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);"}, {"sha": "42354d4999d5dedc1fa9feb34e10af8a134aa1f7", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=cf70f97b951b303ba913a54d7831475af1c2d113", "patch": "@@ -32,9 +32,9 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 766 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 768 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 858 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 862 }\n \n }"}, {"sha": "8316d483cdb96ec698c69fb2aa7da754d5339777", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70f97b951b303ba913a54d7831475af1c2d113/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=cf70f97b951b303ba913a54d7831475af1c2d113", "patch": "@@ -45,9 +45,9 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 370 }\n // { dg-warning \"note\" \"\" { target *-*-* } 365 }\n // { dg-warning \"note\" \"\" { target *-*-* } 357 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1099 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1094 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1086 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1103 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1098 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1090 }\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }"}]}