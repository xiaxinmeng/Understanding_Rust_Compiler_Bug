{"sha": "7f0d6da9e8ef47bc262e242c846d39cba4eca474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwZDZkYTllOGVmNDdiYzI2MmUyNDJjODQ2ZDM5Y2JhNGVjYTQ3NA==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-07-24T20:15:59Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-07-24T20:15:59Z"}, "message": "re PR fortran/28416 (ICE on allocatable codes)\n\nfortran/\n2006-07-24  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/28416\n        * trans-array.c (gfc_conv_array_parameter): Give special treatment\n        for ALLOCATABLEs if they are themselves dummy variables.\n\ntestsuite/\n2006-07-24  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/28416\n        * gfortran.dg/allocatable_dummy_3.f90: New.\n\nFrom-SVN: r115721", "tree": {"sha": "078b6b9aade69539702e1678802057e9036fc46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078b6b9aade69539702e1678802057e9036fc46e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0d6da9e8ef47bc262e242c846d39cba4eca474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0d6da9e8ef47bc262e242c846d39cba4eca474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0d6da9e8ef47bc262e242c846d39cba4eca474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0d6da9e8ef47bc262e242c846d39cba4eca474/comments", "author": null, "committer": null, "parents": [{"sha": "0dca5a9226d50bf959193099c5870906171aa880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dca5a9226d50bf959193099c5870906171aa880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dca5a9226d50bf959193099c5870906171aa880"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "7940ea5dbcaf8e53554d9e4ed2802499c8b896e4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7f0d6da9e8ef47bc262e242c846d39cba4eca474", "patch": "@@ -1,3 +1,9 @@\n+2006-07-24  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/28416\n+\t* trans-array.c (gfc_conv_array_parameter): Give special treatment for\n+\tALLOCATABLEs if they are themselves dummy variables.\n+\n 2006-07-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25289"}, {"sha": "a976cb909318bdf41287769b21b3c4eebd1705ad", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7f0d6da9e8ef47bc262e242c846d39cba4eca474", "patch": "@@ -4524,7 +4524,13 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n         }\n       if (sym->attr.allocatable)\n         {\n-          se->expr = gfc_conv_array_data (tmp);\n+\t  if (sym->attr.dummy)\n+\t    {\n+\t      gfc_conv_expr_descriptor (se, expr, ss);\n+\t      se->expr = gfc_conv_array_data (se->expr);\n+\t    }\n+\t  else\n+\t    se->expr = gfc_conv_array_data (tmp);\n           return;\n         }\n     }"}, {"sha": "815c7933bfe4df07eefd96b0a83d6e913e42d270", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f0d6da9e8ef47bc262e242c846d39cba4eca474", "patch": "@@ -1,3 +1,8 @@\n+2006-07-24  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/28416\n+\t* gfortran.dg/allocatable_dummy_3.f90: New.\n+\n 2006-07-24  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/28439"}, {"sha": "d2b4e1eba0273a53c6ca40058cfe4c53d40eff69", "filename": "gcc/testsuite/gfortran.dg/allocatable_dummy_3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d6da9e8ef47bc262e242c846d39cba4eca474/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90?ref=7f0d6da9e8ef47bc262e242c846d39cba4eca474", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! PR 28416: Check that allocatable dummies can be passed onwards as non-assumed\n+! shape arg.\n+program main\n+\n+    implicit none\n+    integer, allocatable :: a(:)\n+\n+    interface\n+        subroutine foo(v_out)\n+            integer, allocatable :: v_out(:)\n+        end subroutine foo\n+    end interface\n+\n+    call foo(a)\n+    if (any(a /= [ 1, 2, 3 ])) call abort()\n+\n+end program\n+\n+\n+subroutine foo(v_out)\n+    implicit none\n+    integer, allocatable :: v_out(:)\n+\n+    allocate(v_out(3))\n+    call bar(v_out, size(v_out))\n+end subroutine foo\n+\n+\n+subroutine bar(v, N)\n+    implicit none\n+    integer :: N\n+    integer :: v(N)\n+    integer :: i\n+\n+    do i = 1, N\n+        v(i) = i\n+    end do\n+end subroutine bar"}]}