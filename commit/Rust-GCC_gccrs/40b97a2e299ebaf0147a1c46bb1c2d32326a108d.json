{"sha": "40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiOTdhMmUyOTllYmFmMDE0N2ExYzQ2YmIxYzJkMzIzMjZhMTA4ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-09T10:20:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-09T10:20:12Z"}, "message": "builtins.c, [...]: Say \"argument\" instead of \"arg\" in diagnostics.\n\n\t* builtins.c, c-common.c, c-decl.c, c-format.c: Say \"argument\"\n\tinstead of \"arg\" in diagnostics.\n\ntestsuite:\n\t* gcc.dg/builtin-prefetch-1.c: Update expected diagnostic.\n\nFrom-SVN: r90338", "tree": {"sha": "05970d78d689f30edbbaad225e26af3ab895962c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05970d78d689f30edbbaad225e26af3ab895962c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e637a26797c8ffa178974764874683f12b12d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e637a26797c8ffa178974764874683f12b12d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e637a26797c8ffa178974764874683f12b12d4d"}], "stats": {"total": 79, "additions": 46, "deletions": 33}, "files": [{"sha": "edbdb47f070a83c90f66224b324abf069a3dacd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* builtins.c, c-common.c, c-decl.c, c-format.c: Say \"argument\"\n+\tinstead of \"arg\" in diagnostics.\n+\n 2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* builtins.c, c-common.c, c-decl.c, c-format.c, c-format.h,"}, {"sha": "5b476ca8fec6f7d5087af7dd33e064dbecca904a", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -922,28 +922,29 @@ expand_builtin_prefetch (tree arglist)\n   /* Argument 1 (read/write flag) must be a compile-time constant int.  */\n   if (TREE_CODE (arg1) != INTEGER_CST)\n     {\n-      error (\"second arg to %<__builtin_prefetch%> must be a constant\");\n+      error (\"second argument to %<__builtin_prefetch%> must be a constant\");\n       arg1 = integer_zero_node;\n     }\n   op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n   /* Argument 1 must be either zero or one.  */\n   if (INTVAL (op1) != 0 && INTVAL (op1) != 1)\n     {\n-      warning (\"invalid second arg to %<__builtin_prefetch%>; using zero\");\n+      warning (\"invalid second argument to %<__builtin_prefetch%>;\"\n+\t       \" using zero\");\n       op1 = const0_rtx;\n     }\n \n   /* Argument 2 (locality) must be a compile-time constant int.  */\n   if (TREE_CODE (arg2) != INTEGER_CST)\n     {\n-      error (\"third arg to %<__builtin_prefetch%> must be a constant\");\n+      error (\"third argument to %<__builtin_prefetch%> must be a constant\");\n       arg2 = integer_zero_node;\n     }\n   op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n   /* Argument 2 must be 0, 1, 2, or 3.  */\n   if (INTVAL (op2) < 0 || INTVAL (op2) > 3)\n     {\n-      warning (\"invalid third arg to %<__builtin_prefetch%>; using zero\");\n+      warning (\"invalid third argument to %<__builtin_prefetch%>; using zero\");\n       op2 = const0_rtx;\n     }\n \n@@ -4158,9 +4159,9 @@ expand_builtin_frame_address (tree fndecl, tree arglist)\n   else if (! host_integerp (TREE_VALUE (arglist), 1))\n     {\n       if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n-\terror (\"invalid arg to %<__builtin_frame_address%>\");\n+\terror (\"invalid argument to %<__builtin_frame_address%>\");\n       else\n-\terror (\"invalid arg to %<__builtin_return_address%>\");\n+\terror (\"invalid argument to %<__builtin_return_address%>\");\n       return const0_rtx;\n     }\n   else\n@@ -4174,9 +4175,9 @@ expand_builtin_frame_address (tree fndecl, tree arglist)\n       if (tem == NULL)\n \t{\n \t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n-\t    warning (\"unsupported arg to %<__builtin_frame_address%>\");\n+\t    warning (\"unsupported argument to %<__builtin_frame_address%>\");\n \t  else\n-\t    warning (\"unsupported arg to %<__builtin_return_address%>\");\n+\t    warning (\"unsupported argument to %<__builtin_return_address%>\");\n \t  return const0_rtx;\n \t}\n \n@@ -4279,7 +4280,7 @@ expand_builtin_expect (tree arglist, rtx target)\n \n   if (TREE_CODE (c) != INTEGER_CST)\n     {\n-      error (\"second arg to %<__builtin_expect%> must be a constant\");\n+      error (\"second argument to %<__builtin_expect%> must be a constant\");\n       c = integer_zero_node;\n     }\n "}, {"sha": "3a13dc7882296a09f207a1ac811b721a986fe8de", "filename": "gcc/c-common.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -4577,7 +4577,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n       id = TREE_VALUE (args);\n       if (TREE_CODE (id) != STRING_CST)\n \t{\n-\t  error (\"alias arg not a string\");\n+\t  error (\"alias argument not a string\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -4632,7 +4632,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n \n   if (TREE_CODE (id) != STRING_CST)\n     {\n-      error (\"visibility arg not a string\");\n+      error (\"visibility argument not a string\");\n       return NULL_TREE;\n     }\n \n@@ -4653,7 +4653,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n   else if (strcmp (TREE_STRING_POINTER (id), \"protected\") == 0)\n     DECL_VISIBILITY (decl) = VISIBILITY_PROTECTED;\n   else\n-    error (\"visibility arg must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+    error (\"visibility argument must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n   DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \n   /* For decls only, go ahead and attach the attribute to the node as well.\n@@ -4722,7 +4722,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n       id = TREE_VALUE (args);\n       if (TREE_CODE (id) != STRING_CST)\n \t{\n-\t  error (\"tls_model arg not a string\");\n+\t  error (\"tls_model argument not a string\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -4731,7 +4731,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n \t  && strcmp (TREE_STRING_POINTER (id), \"local-dynamic\")\n \t  && strcmp (TREE_STRING_POINTER (id), \"global-dynamic\"))\n \t{\n-\t  error (\"tls_model arg must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n+\t  error (\"tls_model argument must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -4993,7 +4993,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n       if (!get_nonnull_operand (TREE_VALUE (args), &arg_num))\n \t{\n-\t  error (\"nonnull argument has invalid operand number (arg %lu)\",\n+\t  error (\"nonnull argument has invalid operand number (argument %lu)\",\n \t\t (unsigned long) attr_arg_num);\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n@@ -5012,15 +5012,15 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \t  if (!argument\n \t      || TREE_CODE (TREE_VALUE (argument)) == VOID_TYPE)\n \t    {\n-\t      error (\"nonnull argument with out-of-range operand number (arg %lu, operand %lu)\",\n+\t      error (\"nonnull argument with out-of-range operand number (argument %lu, operand %lu)\",\n \t\t     (unsigned long) attr_arg_num, (unsigned long) arg_num);\n \t      *no_add_attrs = true;\n \t      return NULL_TREE;\n \t    }\n \n \t  if (TREE_CODE (TREE_VALUE (argument)) != POINTER_TYPE)\n \t    {\n-\t      error (\"nonnull argument references non-pointer operand (arg %lu, operand %lu)\",\n+\t      error (\"nonnull argument references non-pointer operand (argument %lu, operand %lu)\",\n \t\t   (unsigned long) attr_arg_num, (unsigned long) arg_num);\n \t      *no_add_attrs = true;\n \t      return NULL_TREE;\n@@ -5154,7 +5154,7 @@ check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n     return;\n \n   if (integer_zerop (param))\n-    warning (\"null argument where non-null required (arg %lu)\",\n+    warning (\"null argument where non-null required (argument %lu)\",\n \t     (unsigned long) param_num);\n }\n \n@@ -5225,14 +5225,14 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n   cleanup_id = TREE_VALUE (args);\n   if (TREE_CODE (cleanup_id) != IDENTIFIER_NODE)\n     {\n-      error (\"cleanup arg not an identifier\");\n+      error (\"cleanup argument not an identifier\");\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n   cleanup_decl = lookup_name (cleanup_id);\n   if (!cleanup_decl || TREE_CODE (cleanup_decl) != FUNCTION_DECL)\n     {\n-      error (\"cleanup arg not a function\");\n+      error (\"cleanup argument not a function\");\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }"}, {"sha": "f5bc6e5db6a25dc01665f0a83d8c337727539d8e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -1063,7 +1063,8 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n \t for the arg.  */\n       else if (!comptypes (oldargtype, newargtype))\n \t{\n-\t  error (\"%Jprototype for %qD declares arg %d with incompatible type\",\n+\t  error (\"%Jprototype for %qD declares argument %d\"\n+\t\t \" with incompatible type\",\n \t\t newdecl, newdecl, i);\n \t  return false;\n \t}"}, {"sha": "a0ae154ab4f44f45e2b3bd2c6320e83a8e7a236f", "filename": "gcc/c-format.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -139,7 +139,7 @@ check_format_string (tree argument, unsigned HOST_WIDE_INT format_num,\n \t  != char_type_node))\n     {\n       if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n-\terror (\"format string arg not a string type\");\n+\terror (\"format string argument not a string type\");\n       *no_add_attrs = true;\n       return false;\n     }\n@@ -219,7 +219,7 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n   if (info->first_arg_num != 0 && info->first_arg_num <= info->format_num)\n     {\n       gcc_assert (!validated_p);\n-      error (\"format string arg follows the args to be formatted\");\n+      error (\"format string argument follows the args to be formatted\");\n       return false;\n     }\n \n@@ -2069,15 +2069,15 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (\"writing through null pointer (arg %d)\",\n+\t\twarning (\"writing through null pointer (argument %d)\",\n \t\t\t arg_num);\n \n \t      /* Check for reading through a NULL pointer.  */\n \t      if (types->reading_from_flag\n \t\t  && i == 0\n \t\t  && cur_param != 0\n \t\t  && integer_zerop (cur_param))\n-\t\twarning (\"reading through null pointer (arg %d)\",\n+\t\twarning (\"reading through null pointer (argument %d)\",\n \t\t\t arg_num);\n \n \t      if (cur_param != 0 && TREE_CODE (cur_param) == ADDR_EXPR)\n@@ -2097,7 +2097,8 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t\t  && (CONSTANT_CLASS_P (cur_param)\n \t\t\t      || (DECL_P (cur_param)\n \t\t\t\t  && TREE_READONLY (cur_param))))))\n-\t\twarning (\"writing into constant object (arg %d)\", arg_num);\n+\t\twarning (\"writing into constant object (argument %d)\",\n+\t\t\t arg_num);\n \n \t      /* If there are extra type qualifiers beyond the first\n \t\t indirection, then this makes the types technically\n@@ -2107,7 +2108,8 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t\t  && (TYPE_READONLY (cur_type)\n \t\t      || TYPE_VOLATILE (cur_type)\n \t\t      || TYPE_RESTRICT (cur_type)))\n-\t\twarning (\"extra type qualifiers in format argument (arg %d)\",\n+\t\twarning (\"extra type qualifiers in format argument \"\n+\t\t\t \"(argument %d)\",\n \t\t\t arg_num);\n \n \t    }"}, {"sha": "d4e2788818ac942cea1f02e7425cfcbe5ca2fa50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -1,3 +1,7 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/builtin-prefetch-1.c: Update expected diagnostic.\n+\n 2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/builtin-prefetch-1.c: Adjust expected messages."}, {"sha": "11beb4e1bbe2fda9e33ebfa66eeb071a5e18279d", "filename": "gcc/testsuite/gcc.dg/builtin-prefetch-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b97a2e299ebaf0147a1c46bb1c2d32326a108d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c?ref=40b97a2e299ebaf0147a1c46bb1c2d32326a108d", "patch": "@@ -28,12 +28,12 @@ good (int *p)\n void\n bad (int *p)\n {\n-  __builtin_prefetch (p, -1, 0);  /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n-  __builtin_prefetch (p, 2, 0);   /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n-  __builtin_prefetch (p, bogus, 0);   /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n-  __builtin_prefetch (p, 0, -1);  /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n-  __builtin_prefetch (p, 0, 4);   /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n-  __builtin_prefetch (p, 0, bogus);   /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, -1, 0);  /* { dg-warning \"invalid second argument to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 2, 0);   /* { dg-warning \"invalid second argument to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, bogus, 0);   /* { dg-warning \"invalid second argument to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, -1);  /* { dg-warning \"invalid third argument to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, 4);   /* { dg-warning \"invalid third argument to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, bogus);   /* { dg-warning \"invalid third argument to '__builtin_prefetch'; using zero\" } */\n }\n \n int"}]}