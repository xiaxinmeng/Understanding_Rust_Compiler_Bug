{"sha": "1c563bedd20566f2808fed0054fa2c6839520748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1NjNiZWRkMjA1NjZmMjgwOGZlZDAwNTRmYTJjNjgzOTUyMDc0OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-02T06:31:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-02T06:31:08Z"}, "message": "arc.md, [...]: Replace gen_rtx with gen_rtx_fmt_e*.\n\n\t* config/arc/arc.md, config/arm/arm.c, config/arm/arm.md,\n\tconfig/c4x/c4x.c, config/c4x/c4x.md, config/cris/cris.md,\n\tconfig/frv/frv.c, config/h8300/h8300.c, config/ip2k/ip2k.md,\n\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n\tconfig/mcore/mcore.c, config/mips/mips.c, config/mmix/mmix.md,\n\tconfig/mn10300/mn10300.c, config/rs6000/rs6000.c,\n\tconfig/rs6000/rs6000.md, config/sh/sh.c, config/sh/sh.md,\n\tconfig/stormy16/stormy16.c, config/v850/v850.md,\n\tconfig/xtensa/xtensa.c: Replace gen_rtx with gen_rtx_fmt_e*.\n\nFrom-SVN: r77098", "tree": {"sha": "2249fc0052d6cffd5c822372939c700c16faed7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2249fc0052d6cffd5c822372939c700c16faed7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c563bedd20566f2808fed0054fa2c6839520748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c563bedd20566f2808fed0054fa2c6839520748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c563bedd20566f2808fed0054fa2c6839520748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c563bedd20566f2808fed0054fa2c6839520748/comments", "author": null, "committer": null, "parents": [{"sha": "67245ad3f1592c28916332c9ce03d49c0c3f0acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67245ad3f1592c28916332c9ce03d49c0c3f0acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67245ad3f1592c28916332c9ce03d49c0c3f0acd"}], "stats": {"total": 195, "additions": 106, "deletions": 89}, "files": [{"sha": "335be88d9a344278d44d76677b68b31787bf01c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,3 +1,15 @@\n+2004-02-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc.md, config/arm/arm.c, config/arm/arm.md,\n+\tconfig/c4x/c4x.c, config/c4x/c4x.md, config/cris/cris.md,\n+\tconfig/frv/frv.c, config/h8300/h8300.c, config/ip2k/ip2k.md,\n+\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n+\tconfig/mcore/mcore.c, config/mips/mips.c, config/mmix/mmix.md,\n+\tconfig/mn10300/mn10300.c, config/rs6000/rs6000.c,\n+\tconfig/rs6000/rs6000.md, config/sh/sh.c, config/sh/sh.md,\n+\tconfig/stormy16/stormy16.c, config/v850/v850.md,\n+\tconfig/xtensa/xtensa.c: Replace gen_rtx with gen_rtx_fmt_e*.\n+\n 2004-02-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/mcore/mcore.c (block_move_sequence): Replace"}, {"sha": "2e7e98a42440ea48c8d1a072c2e74c2967dacf04", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,5 +1,6 @@\n ;; Machine description of the Argonaut ARC cpu for GNU C compiler\n-;; Copyright (C) 1994, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 1997, 1998, 1999, 2000, 2004\n+;; Free Software Foundation, Inc.\n \n ;; This file is part of GCC.\n \n@@ -582,7 +583,7 @@\n     = gen_rtx_REG (SELECT_CC_MODE (code, arc_compare_op0, arc_compare_op1),\n \t\t   61);\n \n-  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n }\")\n \n ;(define_expand \"movdicc\"\n@@ -598,7 +599,7 @@\n ;   = gen_rtx_REG (SELECT_CC_MODE (code, arc_compare_op0, arc_compare_op1),\n ;\t\t   61);\n ;\n-;  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+;  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n ;}\")\n \n (define_expand \"movsfcc\"\n@@ -614,7 +615,7 @@\n     = gen_rtx_REG (SELECT_CC_MODE (code, arc_compare_op0, arc_compare_op1),\n \t\t   61);\n \n-  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n }\")\n \n ;(define_expand \"movdfcc\"\n@@ -630,7 +631,7 @@\n ;   = gen_rtx_REG (SELECT_CC_MODE (code, arc_compare_op0, arc_compare_op1),\n ;\t\t   61);\n ;\n-;  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+;  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n ;}\")\n \n (define_insn \"*movsicc_insn\""}, {"sha": "4cc8e2620ee2aa996b1932dc0a773ef828960418", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1243,7 +1243,7 @@ arm_split_constant (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t\tgen_rtx_MINUS (mode, temp, source)));\n \t      else\n \t\temit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t\tgen_rtx (code, mode, source, temp)));\n+\t\t\t\t\tgen_rtx_fmt_ee (code, mode, source, temp)));\n \t      return 2;\n \t    }\n \t}\n@@ -1406,7 +1406,7 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode,\n     {\n       if (generate)\n \temit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t(source ? gen_rtx (code, mode, source,\n+\t\t\t\t(source ? gen_rtx_fmt_ee (code, mode, source,\n \t\t\t\t\t\t   GEN_INT (val))\n \t\t\t\t : GEN_INT (val))));\n       return 1;\n@@ -1561,7 +1561,7 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode,\n \n \t\t  emit_insn (gen_rtx_SET (VOIDmode, sub, GEN_INT (val)));\n \t\t  emit_insn (gen_rtx_SET (VOIDmode, target, \n-\t\t\t\t\t  gen_rtx (code, mode, source, sub)));\n+\t\t\t\t\t  gen_rtx_fmt_ee (code, mode, source, sub)));\n \t\t}\n \t      return 2;\n \t    }"}, {"sha": "37a535efbb55502ef8940b4dd351907ebf4c2dea", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -2491,7 +2491,7 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ARM\"\n   \"*\n-  operands[3] = gen_rtx (minmax_code (operands[3]), SImode, operands[1],\n+  operands[3] = gen_rtx_fmt_ee (minmax_code (operands[3]), SImode, operands[1],\n \t\t\t operands[2]);\n   output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n   output_asm_insn (\\\"str%d3\\\\t%1, %0\\\", operands);\n@@ -2521,7 +2521,7 @@\n   {\n     enum rtx_code code = GET_CODE (operands[4]);\n \n-    operands[5] = gen_rtx (minmax_code (operands[5]), SImode, operands[2],\n+    operands[5] = gen_rtx_fmt_ee (minmax_code (operands[5]), SImode, operands[2],\n \t\t\t   operands[3]);\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n     output_asm_insn (\\\"%i4%d5\\\\t%0, %1, %2\\\", operands);\n@@ -7003,7 +7003,7 @@\n       FAIL;\n \n     ccreg = arm_gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n-    operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+    operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n   }\"\n )\n \n@@ -7028,7 +7028,7 @@\n       operands[3] = force_reg (SFmode, operands[3]);\n \n     ccreg = arm_gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n-    operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+    operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n   }\"\n )\n \n@@ -7047,7 +7047,7 @@\n       FAIL;\n \n     ccreg = arm_gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n-    operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+    operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n   }\"\n )\n "}, {"sha": "3b01c50e1b2505a98c30e07f285b0122b18ad7bd", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1390,13 +1390,13 @@ c4x_emit_libcall (rtx libcall, enum rtx_code code,\n     case 2:\n       ret = emit_library_call_value (libcall, NULL_RTX, 1, dmode, 1,\n \t\t\t\t     operands[1], smode);\n-      equiv = gen_rtx (code, dmode, operands[1]);\n+      equiv = gen_rtx_fmt_e (code, dmode, operands[1]);\n       break;\n \n     case 3:\n       ret = emit_library_call_value (libcall, NULL_RTX, 1, dmode, 2,\n \t\t\t\t     operands[1], smode, operands[2], smode);\n-      equiv = gen_rtx (code, dmode, operands[1], operands[2]);\n+      equiv = gen_rtx_fmt_ee (code, dmode, operands[1], operands[2]);\n       break;\n \n     default:\n@@ -1431,8 +1431,8 @@ c4x_emit_libcall_mulhi (rtx libcall, enum rtx_code code,\n   equiv = gen_rtx_TRUNCATE (mode,\n                    gen_rtx_LSHIFTRT (HImode,\n                             gen_rtx_MULT (HImode,\n-                                     gen_rtx (code, HImode, operands[1]),\n-                                     gen_rtx (code, HImode, operands[2])),\n+                                     gen_rtx_fmt_e (code, HImode, operands[1]),\n+                                     gen_rtx_fmt_e (code, HImode, operands[2])),\n                                      GEN_INT (32)));\n   insns = get_insns ();\n   end_sequence ();"}, {"sha": "f6a9afd26ea3d87f0ca71e28f1a959f09ad5e9bc", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -4247,7 +4247,7 @@\n     if (ccreg == NULL_RTX) FAIL;\n     emit_insn (gen_rtx_SET (QImode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (QImode,\n-                                 gen_rtx (code, VOIDmode, ccreg, const0_rtx),\n+                                 gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n                                           operands[2], operands[3])));\n     DONE;}\")\n                       \n@@ -4291,7 +4291,7 @@\n     if (ccreg == NULL_RTX) FAIL;\n     emit_insn (gen_rtx_SET (QFmode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (QFmode,\n-                                 gen_rtx (code, VOIDmode, ccreg, const0_rtx),\n+                                 gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n                                           operands[2], operands[3])));\n     DONE;}\")\n \n@@ -4334,7 +4334,7 @@\n     if (ccreg == NULL_RTX) FAIL;\n     emit_insn (gen_rtx_SET (HFmode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (HFmode,\n-                                 gen_rtx (code, VOIDmode, ccreg, const0_rtx),\n+                                 gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n                                           operands[2], operands[3])));\n     DONE;}\")\n "}, {"sha": "f3e8f695d11d849307869007cc3b17ab547ae4f9", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,5 +1,6 @@\n ;; GCC machine description for CRIS cpu cores.\n-;; Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+;; Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+;; Free Software Foundation, Inc.\n ;; Contributed by Axis Communications.\n \n ;; This file is part of GCC.\n@@ -4544,7 +4545,7 @@\n   [(set (match_dup 5) (plus:SI (mult:SI (match_dup 2) (match_dup 3))\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 1) (match_dup 8)]))]\n-  \"operands[8] = gen_rtx (GET_CODE (operands[7]), GET_MODE (operands[7]),\n+  \"operands[8] = gen_rtx_fmt_e (GET_CODE (operands[7]), GET_MODE (operands[7]),\n \t\t\t  replace_equiv_address (XEXP (operands[7], 0),\n \t\t\t\t\t\t operands[5]));\")\n \n@@ -4569,7 +4570,7 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 7)]))]\n-  \"operands[7] = gen_rtx (GET_CODE (operands[6]), GET_MODE (operands[6]),\n+  \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n \t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n \t\t\t\t\t\t operands[4]));\")\n \n@@ -4596,7 +4597,7 @@\n   [(set (match_dup 5) (plus:SI (mult:SI (match_dup 2) (match_dup 3))\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 8) (match_dup 1)]))]\n-  \"operands[8] = gen_rtx (GET_CODE (operands[6]), GET_MODE (operands[6]),\n+  \"operands[8] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n \t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n \t\t\t\t\t\t operands[5]));\")\n \n@@ -4620,7 +4621,7 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 7) (match_dup 1)]))]\n-  \"operands[7] = gen_rtx (GET_CODE (operands[5]), GET_MODE (operands[5]),\n+  \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[5]), GET_MODE (operands[5]),\n \t\t\t  replace_equiv_address (XEXP (operands[5], 0),\n \t\t\t\t\t\t operands[4]));\")\n \f"}, {"sha": "04628c859ba5eb1d642199eb74ed9a26074bf8df", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -5742,7 +5742,7 @@ frv_emit_cond_branch (enum rtx_code test, rtx label)\n \t\t\t    (label_ref <branch_label>)\n \t\t\t    (pc))) */\n   label_ref = gen_rtx_LABEL_REF (VOIDmode, label);\n-  test_rtx = gen_rtx (test, cc_mode, cc_reg, const0_rtx);\n+  test_rtx = gen_rtx_fmt_ee (test, cc_mode, cc_reg, const0_rtx);\n   if_else = gen_rtx_IF_THEN_ELSE (cc_mode, test_rtx, label_ref, pc_rtx);\n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_else));\n   return TRUE;"}, {"sha": "4fee5885b3ec45d25622ae044fb108a1ea7e71a0", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -2733,7 +2733,7 @@ expand_a_shift (enum machine_mode mode, int code, rtx operands[])\n \t     (VOIDmode,\n \t      gen_rtvec (2,\n \t\t\t gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\t      gen_rtx (code, mode, operands[0],\n+\t\t\t\t      gen_rtx_fmt_ee (code, mode, operands[0],\n \t\t\t\t\t       operands[2])),\n \t\t\t gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t  gen_rtx_SCRATCH (QImode)))));\n@@ -3876,7 +3876,7 @@ expand_a_rotate (enum rtx_code code, rtx operands[])\n       emit_label (start_label);\n \n       /* Rotate by one bit.  */\n-      tmp = gen_rtx (code, mode, dst, GEN_INT (1));\n+      tmp = gen_rtx_fmt_ee (code, mode, dst, GEN_INT (1));\n       emit_insn (gen_rtx_SET (mode, dst, tmp));\n \n       /* Decrement the counter by 1.  */\n@@ -3893,7 +3893,7 @@ expand_a_rotate (enum rtx_code code, rtx operands[])\n   else\n     {\n       /* Rotate by AMOUNT bits.  */\n-      tmp = gen_rtx (code, mode, dst, rotate_amount);\n+      tmp = gen_rtx_fmt_ee (code, mode, dst, rotate_amount);\n       emit_insn (gen_rtx_SET (mode, dst, tmp));\n     }\n \n@@ -4101,7 +4101,7 @@ fix_bit_operand (rtx *operands, int what, enum rtx_code type)\n   {\n     rtx res = gen_reg_rtx (QImode);\n     emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t    gen_rtx (type, QImode, operands[1], operands[2])));\n+\t\t\t    gen_rtx_fmt_ee (type, QImode, operands[1], operands[2])));\n     emit_insn (gen_rtx_SET (VOIDmode, operands[0], res));\n   }\n   return 1;"}, {"sha": "ea46d3cbb779ace468616329ac93d238dbc795a8", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,6 +1,7 @@\n ;; -*- Mode: Scheme -*-\n ;; GCC machine description for Ubicom IP2022 Communications Controller.\n-;; Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+;; Copyright (C) 2000, 2001, 2002, 2004\n+;; Free Software Foundation, Inc.\n ;; Contributed by Red Hat, Inc and Ubicom, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -4846,7 +4847,7 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"{\n-    operands[2] = gen_rtx (reverse_condition (GET_CODE (operands[1])),\n+    operands[2] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n \t \t\t   GET_MODE (operands[1]),\n \t\t\t   cc0_rtx, const0_rtx);\n    }\")"}, {"sha": "d599c46b7c9d355c3e6b6a114e7f6bad0b02b9d4", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1171,7 +1171,7 @@ gen_int_relational (enum rtx_code test_code, rtx result, rtx cmp0, rtx cmp1,\n   else\n     {\n       reg = (invert || eqne_p) ? gen_reg_rtx (mode) : result;\n-      convert_move (reg, gen_rtx (p_info->test_code, mode, cmp0, cmp1), 0);\n+      convert_move (reg, gen_rtx_fmt_ee (p_info->test_code, mode, cmp0, cmp1), 0);\n     }\n \n   if (test == ITEST_NE)\n@@ -1242,7 +1242,7 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n \n       /* For cmp0 != cmp1, build cmp0 == cmp1, and test for result == 0.  */\n       emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t      gen_rtx (test_code == NE ? EQ : test_code,\n+\t\t\t      gen_rtx_fmt_ee (test_code == NE ? EQ : test_code,\n \t\t\t\t       CCmode, cmp0, cmp1)));\n \n       test_code = test_code == NE ? EQ : NE;\n@@ -1253,7 +1253,7 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n       break;\n \n     default:\n-      abort_with_insn (gen_rtx (test_code, VOIDmode, cmp0, cmp1), \"bad test\");\n+      abort_with_insn (gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1), \"bad test\");\n     }\n \n   /* Generate the branch.  */\n@@ -1268,7 +1268,7 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n \n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t\t     gen_rtx (test_code, mode,\n+\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code, mode,\n \t\t\t\t\t\t\t      cmp0, cmp1),\n \t\t\t\t\t\t     label1, label2)));\n }"}, {"sha": "c7408edadbc441bb56877adba241222598a763c5", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1062,7 +1062,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t    {\n \t      emit_insn (gen_cmp_eqsi_insn (x, y));\n \t\t\n-\t      return gen_rtx (code, CCmode, cc_reg, const0_rtx);\n+\t      return gen_rtx_fmt_ee (code, CCmode, cc_reg, const0_rtx);\n \t    }\n \t  break;\n       \n@@ -1102,7 +1102,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t\t  abort ();\n \t\t}\n \t      \n-\t      return gen_rtx (code, CCmode, cc_reg, const0_rtx);\n+\t      return gen_rtx_fmt_ee (code, CCmode, cc_reg, const0_rtx);\n \t    }\n \t  break;\n \t  \n@@ -1142,7 +1142,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t\t  abort();\n \t\t}\n \t      \n-\t      return gen_rtx (code, CCmode, cc_reg, const0_rtx);\n+\t      return gen_rtx_fmt_ee (code, CCmode, cc_reg, const0_rtx);\n \t    }\n \t  break;\n \n@@ -1155,12 +1155,12 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n       /* Reg/reg equal comparison.  */\n       if (compare_code == EQ\n \t  && register_operand (y, SImode))\n-\treturn gen_rtx (code, CCmode, x, y);\n+\treturn gen_rtx_fmt_ee (code, CCmode, x, y);\n       \n       /* Reg/zero signed comparison.  */\n       if ((compare_code == EQ || compare_code == LT)\n \t  && y == const0_rtx)\n-\treturn gen_rtx (code, CCmode, x, y);\n+\treturn gen_rtx_fmt_ee (code, CCmode, x, y);\n       \n       /* Reg/smallconst equal comparison.  */\n       if (compare_code == EQ\n@@ -1170,7 +1170,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t  rtx tmp = gen_reg_rtx (SImode);\n \n \t  emit_insn (gen_addsi3 (tmp, x, GEN_INT (-INTVAL (y))));\n-\t  return gen_rtx (code, CCmode, tmp, const0_rtx);\n+\t  return gen_rtx_fmt_ee (code, CCmode, tmp, const0_rtx);\n \t}\n       \n       /* Reg/const equal comparison.  */\n@@ -1179,7 +1179,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n \t{\n \t  rtx tmp = force_reg (GET_MODE (x), y);\n \n-\t  return gen_rtx (code, CCmode, x, tmp);\n+\t  return gen_rtx_fmt_ee (code, CCmode, x, tmp);\n \t}\n     }\n \n@@ -1215,7 +1215,7 @@ gen_compare (enum rtx_code code, rtx x, rtx y, int need_compare)\n       abort ();\n     }\n \n-  return gen_rtx (branch_code, VOIDmode, cc_reg, CONST0_RTX (CCmode));\n+  return gen_rtx_fmt_ee (branch_code, VOIDmode, cc_reg, CONST0_RTX (CCmode));\n }\n \f\n /* Split a 2 word move (DI or DF) into component parts.  */"}, {"sha": "58a47623ca1d8efbacdcc09277c5e0dcb1f18feb", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -623,7 +623,7 @@ mcore_gen_compare_reg (enum rtx_code code)\n       break;\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, cc_reg, gen_rtx (code, CCmode, op0, op1)));\n+  emit_insn (gen_rtx_SET (VOIDmode, cc_reg, gen_rtx_fmt_ee (code, CCmode, op0, op1)));\n   \n   return cc_reg;\n }"}, {"sha": "50016be7fc8c3bf2775137572407f0c1dc5c5573", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -3001,7 +3001,7 @@ gen_int_relational (enum rtx_code test_code, rtx result, rtx cmp0,\n   else\n     {\n       reg = (invert || eqne_p) ? gen_reg_rtx (mode) : result;\n-      convert_move (reg, gen_rtx (p_info->test_code, mode, cmp0, cmp1), 0);\n+      convert_move (reg, gen_rtx_fmt_ee (p_info->test_code, mode, cmp0, cmp1), 0);\n     }\n \n   if (test == ITEST_NE)\n@@ -3124,7 +3124,7 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n \n       get_float_compare_codes (test_code, &cmp_code, &test_code);\n       emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t      gen_rtx (cmp_code, CCmode, cmp0, cmp1)));\n+\t\t\t      gen_rtx_fmt_ee (cmp_code, CCmode, cmp0, cmp1)));\n \n       mode = CCmode;\n       cmp0 = reg;\n@@ -3133,7 +3133,7 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n       break;\n \n     default:\n-      fatal_insn (\"bad test\", gen_rtx (test_code, VOIDmode, cmp0, cmp1));\n+      fatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1));\n     }\n \n   /* Generate the branch.  */\n@@ -3149,7 +3149,7 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n \n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t\t     gen_rtx (test_code, mode,\n+\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code, mode,\n \t\t\t\t\t\t\t      cmp0, cmp1),\n \t\t\t\t\t\t     label1, label2)));\n }\n@@ -3230,11 +3230,11 @@ gen_conditional_move (rtx *operands)\n \n   cmp_reg = gen_reg_rtx (cmp_mode);\n   emit_insn (gen_rtx_SET (cmp_mode, cmp_reg,\n-\t\t\t  gen_rtx (cmp_code, cmp_mode, op0, op1)));\n+\t\t\t  gen_rtx_fmt_ee (cmp_code, cmp_mode, op0, op1)));\n \n   emit_insn (gen_rtx_SET (op_mode, operands[0],\n \t\t\t  gen_rtx_IF_THEN_ELSE (op_mode,\n-\t\t\t\t\t\tgen_rtx (move_code, VOIDmode,\n+\t\t\t\t\t\tgen_rtx_fmt_ee (move_code, VOIDmode,\n \t\t\t\t\t\t\t cmp_reg,\n \t\t\t\t\t\t\t CONST0_RTX (SImode)),\n \t\t\t\t\t\toperands[2], operands[3])));\n@@ -3275,7 +3275,7 @@ mips_gen_conditional_trap (rtx *operands)\n     op1 = force_reg (mode, op1);\n \n   emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n-\t\t\t      gen_rtx (cmp_code, GET_MODE (operands[0]), op0, op1),\n+\t\t\t      gen_rtx_fmt_ee (cmp_code, GET_MODE (operands[0]), op0, op1),\n \t\t\t      operands[1]));\n }\n \f"}, {"sha": "dbe0eeb4c1c08734cbd221ad8e7d8147d5c2b5c6", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,5 +1,6 @@\n ;; GCC machine description for MMIX\n-;; Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+;; Copyright (C) 2000, 2001, 2002, 2003, 2004\n+;; Free Software Foundation, Inc.\n ;; Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n ;; This file is part of GCC.\n@@ -732,7 +733,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t\t\t\t     mmix_compare_op1);\n   if (cc_reg == NULL_RTX)\n     FAIL;\n-  operands[1] = gen_rtx (code, VOIDmode, cc_reg, const0_rtx);\n+  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, cc_reg, const0_rtx);\n }\")\n \n (define_expand \"movdicc\"\n@@ -749,7 +750,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t\t\t\t     mmix_compare_op1);\n   if (cc_reg == NULL_RTX)\n     FAIL;\n-  operands[1] = gen_rtx (code, VOIDmode, cc_reg, const0_rtx);\n+  operands[1] = gen_rtx_fmt_ee (code, VOIDmode, cc_reg, const0_rtx);\n }\")\n \n ;; FIXME: Is this the right way to do \"folding\" of CCmode -> DImode?"}, {"sha": "43a6d1030acf6325470b56d54a14f99fcb412794", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1800,7 +1800,7 @@ legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t  regy1 = force_reg (Pmode, force_operand (XEXP (y, 0), 0));\n \t  regy2 = force_reg (Pmode, force_operand (XEXP (y, 1), 0));\n \t  regx1 = force_reg (Pmode,\n-\t\t\t     gen_rtx (GET_CODE (y), Pmode, regx1, regy2));\n+\t\t\t     gen_rtx_fmt_ee (GET_CODE (y), Pmode, regx1, regy2));\n \t  return force_reg (Pmode, gen_rtx_PLUS (Pmode, regx1, regy1));\n \t}\n     }"}, {"sha": "41ccba8f3aed366255fa9462d8162c23a6a2211c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -9664,8 +9664,8 @@ rs6000_generate_compare (enum rtx_code code)\n \t}\n       validate_condition_mode (or1, comp_mode);\n       validate_condition_mode (or2, comp_mode);\n-      or1_rtx = gen_rtx (or1, SImode, compare_result, const0_rtx);\n-      or2_rtx = gen_rtx (or2, SImode, compare_result, const0_rtx);\n+      or1_rtx = gen_rtx_fmt_ee (or1, SImode, compare_result, const0_rtx);\n+      or2_rtx = gen_rtx_fmt_ee (or2, SImode, compare_result, const0_rtx);\n       compare2_rtx = gen_rtx_COMPARE (CCEQmode,\n \t\t\t\t      gen_rtx_IOR (SImode, or1_rtx, or2_rtx),\n \t\t\t\t      const_true_rtx);\n@@ -9677,7 +9677,7 @@ rs6000_generate_compare (enum rtx_code code)\n \n   validate_condition_mode (code, GET_MODE (compare_result));\n   \n-  return gen_rtx (code, VOIDmode, compare_result, const0_rtx);\n+  return gen_rtx_fmt_ee (code, VOIDmode, compare_result, const0_rtx);\n }\n \n \n@@ -9704,7 +9704,7 @@ rs6000_emit_sCOND (enum rtx_code code, rtx result)\n       \n       cc_mode = GET_MODE (XEXP (condition_rtx, 0));\n \n-      rev_cond_rtx = gen_rtx (rs6000_reverse_condition (cc_mode, cond_code),\n+      rev_cond_rtx = gen_rtx_fmt_ee (rs6000_reverse_condition (cc_mode, cond_code),\n \t\t\t      SImode, XEXP (condition_rtx, 0), const0_rtx);\n       not_op = gen_rtx_COMPARE (CCEQmode, rev_cond_rtx, const0_rtx);\n       emit_insn (gen_rtx_SET (VOIDmode, not_result, not_op));"}, {"sha": "d30184db1598a55bb8e62e57d87a23359d4d9a39", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -2583,10 +2583,10 @@\n {\n   rtx i;\n   i = GEN_INT (INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n-  operands[4] = gen_rtx (GET_CODE (operands[3]), SImode,\n+  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SImode,\n \t\t\t operands[1], i);\n   i = GEN_INT (INTVAL (operands[2]) & 0xffff);\n-  operands[5] = gen_rtx (GET_CODE (operands[3]), SImode,\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SImode,\n \t\t\t operands[0], i);\n }\")\n \n@@ -7363,9 +7363,9 @@\n \t\t\t     & (~ (HOST_WIDE_INT) 0xffff));\n       i4 = GEN_INT (INTVAL (operands[2]) & 0xffff);\n     }\n-  operands[4] = gen_rtx (GET_CODE (operands[3]), DImode,\n+  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[3]), DImode,\n \t\t\t operands[1], i3);\n-  operands[5] = gen_rtx (GET_CODE (operands[3]), DImode,\n+  operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), DImode,\n \t\t\t operands[0], i4);\n }\")\n \n@@ -13685,22 +13685,22 @@\n   positive_2 = branch_positive_comparison_operator (operands[3], CCEQmode);\n \n   if (! positive_1)\n-    operands[1] = gen_rtx (rs6000_reverse_condition (GET_MODE (operands[2]),\n+    operands[1] = gen_rtx_fmt_ee (rs6000_reverse_condition (GET_MODE (operands[2]),\n \t\t\t\t\t\t     GET_CODE (operands[1])),\n \t\t\t   SImode,\n \t\t\t   operands[2], const0_rtx);\n   else if (GET_MODE (operands[1]) != SImode)\n-    operands[1] = gen_rtx (GET_CODE (operands[1]),\n+    operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n \t\t\t   SImode,\n \t\t\t   operands[2], const0_rtx);\n \n   if (! positive_2)\n-    operands[3] = gen_rtx (rs6000_reverse_condition (GET_MODE (operands[4]),\n+    operands[3] = gen_rtx_fmt_ee (rs6000_reverse_condition (GET_MODE (operands[4]),\n \t\t\t\t\t\t     GET_CODE (operands[3])),\n \t\t\t   SImode,\n \t\t\t   operands[4], const0_rtx);\n   else if (GET_MODE (operands[3]) != SImode)\n-    operands[3] = gen_rtx (GET_CODE (operands[3]),\n+    operands[3] = gen_rtx_fmt_ee (GET_CODE (operands[3]),\n \t\t\t   SImode,\n \t\t\t   operands[4], const0_rtx);\n \n@@ -14207,7 +14207,7 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n (define_split\n@@ -14236,7 +14236,7 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n (define_split\n   [(set (pc)\n@@ -14262,7 +14262,7 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n (define_split\n@@ -14291,7 +14291,7 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \f\n (define_insn \"trap\""}, {"sha": "d29bc6eb05c91c239031b002d5917cd461888c70", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -958,12 +958,12 @@ prepare_scc_operands (enum rtx_code code)\n     (mode == SFmode ? emit_sf_insn : emit_df_insn)\n      (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n \t\tgen_rtx_SET (VOIDmode, t_reg,\n-\t\t\t gen_rtx (code, SImode,\n+\t\t\t gen_rtx_fmt_ee (code, SImode,\n \t\t\t\t  sh_compare_op0, sh_compare_op1)),\n \t\tgen_rtx_USE (VOIDmode, get_fpscr_rtx ()))));\n   else\n     emit_insn (gen_rtx_SET (VOIDmode, t_reg,\n-\t\t\tgen_rtx (code, SImode, sh_compare_op0,\n+\t\t\tgen_rtx_fmt_ee (code, SImode, sh_compare_op0,\n \t\t\t\t sh_compare_op1)));\n \n   return t_reg;\n@@ -997,7 +997,7 @@ from_compare (rtx *operands, int code)\n   else\n     insn = gen_rtx_SET (VOIDmode,\n \t\t\tgen_rtx_REG (SImode, T_REG),\n-\t\t\tgen_rtx (code, SImode, sh_compare_op0,\n+\t\t\tgen_rtx_fmt_ee (code, SImode, sh_compare_op0,\n \t\t\t\t sh_compare_op1));\n   if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {"}, {"sha": "66a8cbe4f784dfea2b44806da7a4c1d117e74b9c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -898,7 +898,7 @@\n   if ((GET_CODE (operands[1]) == EQ || GET_CODE (operands[1]) == NE)\n       && GET_MODE (sh_compare_op0) == DImode\n       && sh_compare_op1 == const0_rtx)\n-    operands[1] = gen_rtx (GET_CODE (operands[1]), VOIDmode,\n+    operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]), VOIDmode,\n \t\t\t   sh_compare_op0, sh_compare_op1);\n   else\n     {\n@@ -8261,7 +8261,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   operands[7] = gen_rtx_REG (SFmode,\n \t\t\t     (true_regnum (operands[0])\n \t\t\t      + (INTVAL (operands[3]) ^ endian)));\n-  operands[6] = gen_rtx (GET_CODE (operands[2]), SFmode, op1);\n+  operands[6] = gen_rtx_fmt_e (GET_CODE (operands[2]), SFmode, op1);\n }\"\n   [(set_attr \"type\" \"fparith_media\")])\n \n@@ -8297,7 +8297,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   operands[8] = gen_rtx_REG (SFmode,\n \t\t\t     (true_regnum (operands[0])\n \t\t\t      + (INTVAL (operands[4]) ^ endian)));\n-  operands[9] = gen_rtx (GET_CODE (operands[3]), SFmode, op1, op2);\n+  operands[9] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SFmode, op1, op2);\n }\"\n   [(set_attr \"type\" \"fparith_media\")])\n "}, {"sha": "a5243f5b8f51750704ee2bce54d9bcee4f9807f0", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -233,7 +233,7 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx loc)\n       op0 = tmp;\n     }\n \n-  condition_rtx = gen_rtx (code, mode, op0, op1);\n+  condition_rtx = gen_rtx_fmt_ee (code, mode, op0, op1);\n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, loc);\n   branch = gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, condition_rtx,\n@@ -1855,7 +1855,7 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t      && INTVAL (w_src1) == -(code == AND))\n \t    continue;\n \t  \n-\t  insn = gen_rtx_SET (VOIDmode, w_dest, gen_rtx (code, mode,\n+\t  insn = gen_rtx_SET (VOIDmode, w_dest, gen_rtx_fmt_ee (code, mode,\n \t\t\t\t\t\t\t w_src0, w_src1));\n \t  break;\n "}, {"sha": "32b34c0fa1bda3eb64570b95bfcf7540a163e0a4", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -1,5 +1,6 @@\n ;; GCC machine description for NEC V850\n-;; Copyright (C) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2002, 2004\n+;; Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n ;; This file is part of GCC.\n@@ -1032,7 +1033,7 @@\n   if (INTVAL (operands[2]) & 0x1)\n     operands[7] = operands[1];\n   else\n-    operands[7] = gen_rtx (reverse_condition (GET_CODE (operands[1])),\n+    operands[7] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n \t\t\t   GET_MODE (operands[1]), XEXP (operands[1], 0),\n \t\t\t   XEXP (operands[1], 1));\n }\")"}, {"sha": "359ab77e4c397d2247ed1c1c52a215a3888f2469", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c563bedd20566f2808fed0054fa2c6839520748/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=1c563bedd20566f2808fed0054fa2c6839520748", "patch": "@@ -981,7 +981,7 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n       cmp1 = temp;\n     }\n \n-  return gen_rtx (p_info->test_code, VOIDmode, cmp0, cmp1);\n+  return gen_rtx_fmt_ee (p_info->test_code, VOIDmode, cmp0, cmp1);\n }\n \n \n@@ -1006,7 +1006,7 @@ gen_float_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n     case LT: reverse_regs = 0; invert = 0; gen_fn = gen_slt_sf; break;\n     case GE: reverse_regs = 1; invert = 0; gen_fn = gen_sle_sf; break;\n     default:\n-      fatal_insn (\"bad test\", gen_rtx (test_code, VOIDmode, cmp0, cmp1));\n+      fatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1));\n       reverse_regs = 0; invert = 0; gen_fn = 0; /* avoid compiler warnings */\n     }\n \n@@ -1020,7 +1020,7 @@ gen_float_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n   brtmp = gen_rtx_REG (CCmode, FPCC_REGNUM);\n   emit_insn (gen_fn (brtmp, cmp0, cmp1));\n \n-  return gen_rtx (invert ? EQ : NE, VOIDmode, brtmp, const0_rtx);\n+  return gen_rtx_fmt_ee (invert ? EQ : NE, VOIDmode, brtmp, const0_rtx);\n }\n \n \n@@ -1038,7 +1038,7 @@ xtensa_expand_conditional_branch (rtx *operands, enum rtx_code test_code)\n     {\n     case CMP_DF:\n     default:\n-      fatal_insn (\"bad test\", gen_rtx (test_code, VOIDmode, cmp0, cmp1));\n+      fatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1));\n \n     case CMP_SI:\n       invert = FALSE;\n@@ -1047,7 +1047,7 @@ xtensa_expand_conditional_branch (rtx *operands, enum rtx_code test_code)\n \n     case CMP_SF:\n       if (!TARGET_HARD_FLOAT)\n-\tfatal_insn (\"bad test\", gen_rtx (test_code, VOIDmode, cmp0, cmp1));\n+\tfatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1));\n       invert = FALSE;\n       cmp = gen_float_relational (test_code, cmp0, cmp1);\n       break;\n@@ -1093,7 +1093,7 @@ gen_conditional_move (rtx cmp)\n \t  code = GE;\n \t  op1 = const0_rtx;\n \t}\n-      cmp = gen_rtx (code, VOIDmode, cc0_rtx, const0_rtx);\n+      cmp = gen_rtx_fmt_ee (code, VOIDmode, cc0_rtx, const0_rtx);\n \n       if (boolean_operator (cmp, VOIDmode))\n \t{\n@@ -1134,7 +1134,7 @@ gen_conditional_move (rtx cmp)\n       else\n \treturn 0;\n \n-      return gen_rtx (code, VOIDmode, op0, op1);\n+      return gen_rtx_fmt_ee (code, VOIDmode, op0, op1);\n     }\n \n   if (TARGET_HARD_FLOAT && (branch_type == CMP_SF))"}]}