{"sha": "c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkOTljYWQxMjljMWQwMzhjMmI3ZDMzZTkzZTA4ZGQzNmQ0ZGU4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-01-27T15:09:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-27T15:09:23Z"}, "message": "re PR middle-end/42874 (Error on correct code: sorry, unimplemented: function \u2018foo\u2019 can never be copied because it uses)\n\n\tPR middle-end/42874\n\t* tree-inline.c (cannot_copy_type_1): Removed.\n\t(copy_forbidden): Don't forbid copying of functions containing\n\trecords/unions with variable length fields.\n\n\t* gcc.dg/vla-22.c: New test.\n\nFrom-SVN: r156287", "tree": {"sha": "a360ac6bb7bb20f7bf2e6d6f8310b464cb87507a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a360ac6bb7bb20f7bf2e6d6f8310b464cb87507a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990dc016001e1b6b3fbd1d15a82d6054f5a7de38"}], "stats": {"total": 77, "additions": 34, "deletions": 43}, "files": [{"sha": "10a9bc9debf665b715523fcedc0ed040d0174a41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "patch": "@@ -1,3 +1,10 @@\n+2010-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/42874\n+\t* tree-inline.c (cannot_copy_type_1): Removed.\n+\t(copy_forbidden): Don't forbid copying of functions containing\n+\trecords/unions with variable length fields.\n+\n 2010-01-27  Christian Bruel  <christian.bruel@st.com>\n \n \tRevert:"}, {"sha": "fd63e1b5f3c714303b88cb285a71a6786fe982d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "patch": "@@ -1,3 +1,8 @@\n+2010-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/42874\n+\t* gcc.dg/vla-22.c: New test.\n+\n 2010-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* ada/acats/run_all.sh: Make sure norun.lst is sorted using the"}, {"sha": "f924650af03ec1caa647cbf6c725664d92fcc4ee", "filename": "gcc/testsuite/gcc.dg/vla-22.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-22.c?ref=c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void bar (int *);\n+\n+static inline __attribute__((always_inline))\n+int\n+foo (int i)\n+{\n+  struct S {\n+    int ar[1][i];\n+  } s;\n+\n+  s.ar[0][0] = 0;\n+  bar (&s.ar[0][0]);\n+}\n+\n+void\n+baz (int i)\n+{\n+  foo (i + 2);\n+}"}, {"sha": "815d88af06660bef3bdc287b6341239c4d7aea01", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d99cad129c1d038c2b7d33e93e08dd36d4de87/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c6d99cad129c1d038c2b7d33e93e08dd36d4de87", "patch": "@@ -2730,39 +2730,6 @@ has_label_address_in_static_1 (tree *nodep, int *walk_subtrees, void *fnp)\n   return NULL_TREE;\n }\n \n-/* Callback through walk_tree.  Determine if we've got an aggregate\n-   type that we can't support; return non-null if so.  */\n-\n-static tree\n-cannot_copy_type_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n-                    void *data ATTRIBUTE_UNUSED)\n-{\n-  tree t, node = *nodep;\n-\n-  if (TREE_CODE (node) == RECORD_TYPE || TREE_CODE (node) == UNION_TYPE)\n-    {\n-      /* We cannot inline a function of the form\n-\n-\t   void F (int i) { struct S { int ar[i]; } s; }\n-\n-\t Attempting to do so produces a catch-22.\n-\t If walk_tree examines the TYPE_FIELDS chain of RECORD_TYPE/\n-\t UNION_TYPE nodes, then it goes into infinite recursion on a\n-\t structure containing a pointer to its own type.  If it doesn't,\n-\t then the type node for S doesn't get adjusted properly when\n-\t F is inlined.\n-\n-\t ??? This is likely no longer true, but it's too late in the 4.0\n-\t cycle to try to find out.  This should be checked for 4.1.  */\n-      for (t = TYPE_FIELDS (node); t; t = TREE_CHAIN (t))\n-\tif (variably_modified_type_p (TREE_TYPE (t), NULL))\n-\t  return node;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-\n /* Determine if the function can be copied.  If so return NULL.  If\n    not return a string describng the reason for failure.  */\n \n@@ -2805,16 +2772,6 @@ copy_forbidden (struct function *fun, tree fndecl)\n \t\t      \"address of local label in a static variable\");\n \t  goto fail;\n \t}\n-\n-      if (!TREE_STATIC (decl) && !DECL_EXTERNAL (decl)\n-\t  && variably_modified_type_p (TREE_TYPE (decl), NULL)\n-\t  && walk_tree_without_duplicates (&TREE_TYPE (decl),\n-\t\t\t\t\t   cannot_copy_type_1, NULL))\n-\t{\n-\t  reason = G_(\"function %q+F can never be copied \"\n-\t\t      \"because it uses variable sized variables\");\n-\t  goto fail;\n-\t}\n     }\n \n  fail:"}]}