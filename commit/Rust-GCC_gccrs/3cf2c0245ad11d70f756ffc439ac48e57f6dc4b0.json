{"sha": "3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmMmMwMjQ1YWQxMWQ3MGY3NTZmZmM0MzlhYzQ4ZTU3ZjZkYzRiMA==", "commit": {"author": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1994-09-04T12:39:13Z"}, "committer": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1994-09-04T12:39:13Z"}, "message": "update for 2.6.1\n\nFrom-SVN: r8023", "tree": {"sha": "7e2f4e99493c81fc426547fd2b2b365f50412359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e2f4e99493c81fc426547fd2b2b365f50412359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0/comments", "author": null, "committer": null, "parents": [{"sha": "e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "f7a6134971c629a06bcc2b3d5ced7d96c50721d9", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Convex version.\n-   Copyright (C) 1988, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1487,21 +1487,11 @@ bss_section ()\t\t\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)\t\t\t\t\\\n     print_operand_address (FILE, ADDR)\n \f\n-/* Definitions for g++.  */\n-\n /* Do not put out GNU stabs for constructors and destructors.\n    ld bounces them.  */\n \n #define FASCIST_ASSEMBLER\n \n-/* Convex user addresses are negative, so use positive numbers\n-   to mean `vtable index'.  */\n-\n-#define VTABLE_USES_MASK\n-#define VINDEX_MAX ((unsigned) 0x80000000)\n-#define SET_DECL_VINDEX(DECL, INDEX) \\\n-  (DECL_VINDEX (DECL) = (INDEX))\n-\n /* __gcc_cleanup is loader-aliased to __ap$do_registered_functions if we\n    are linking against standard libc, 0 if old (-traditional) libc. */\n \n@@ -1513,12 +1503,6 @@ bss_section ()\t\t\t\t\t\t\t\t\\\n   _cleanup ();\t\t\t\t\t\t\t\t\\\n }\n \f\n-/* cexp.y uses LONG_TYPE_SIZE which depends on target_flags, which it\n-   doesn't have.  Until some better way exists, provide a def here. */\n-#ifdef YYBISON\n-int target_flags;\n-#endif\n-\n /* Header for convex.c.\n    Here at the end so we can use types defined above. */\n "}, {"sha": "126fadbbb07c6d2f440019c592260bc91f93442b", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=3cf2c0245ad11d70f756ffc439ac48e57f6dc4b0", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Convex Version\n-;;  Copyright (C) 1988, 1993, 1994 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1094,6 +1094,8 @@\n    shf %2,%0\"\n   [(set_attr \"type\" \"shfl,shfw\")])\n \n+;; but C2 left shift by a constant is faster via multiply\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -1453,21 +1455,21 @@\n   \"* return output_cmp (operands[0], operands[1], 'b');\")\n \n (define_insn \"\"\n-  [(set (cc0) (match_operand:QI 0 \"register_operand\" \"d,a\"))\n-   (clobber (match_scratch:QI 1 \"=d,a\"))]\n+  [(set (cc0) (match_operand:QI 0 \"register_operand\" \"d\"))\n+   (clobber (match_scratch:QI 1 \"=d\"))]\n   \"next_insn_tests_no_inequality (insn)\"\n   \"* return output_cmp (operands[0], operands[1], 'B');\")\n \n (define_insn \"\"\n-  [(set (cc0) (subreg (match_operand:QI 0 \"register_operand\" \"d,a\") 0))\n-   (clobber (match_scratch:QI 1 \"=d,a\"))]\n+  [(set (cc0) (subreg (match_operand:QI 0 \"register_operand\" \"d\") 0))\n+   (clobber (match_scratch:QI 1 \"=d\"))]\n   \"next_insn_tests_no_inequality (insn)\"\n   \"* return output_cmp (operands[0], operands[1], 'B');\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(zero_extend (subreg (match_operand:QI 0 \"register_operand\" \"d,a\") 0)))\n-   (clobber (match_scratch:QI 1 \"=d,a\"))]\n+\t(zero_extend (subreg (match_operand:QI 0 \"register_operand\" \"d\") 0)))\n+   (clobber (match_scratch:QI 1 \"=d\"))]\n   \"next_insn_tests_no_inequality (insn)\"\n   \"* return output_cmp (operands[0], operands[1], 'B');\")\n \n@@ -1553,12 +1555,12 @@\n {\n   if (which_alternative == 0)\n     {\n-      output_cmp (operands[0], constm1_rtx, 'W');\n-      return \\\"add.w #-1,%0\\\";\n+      output_cmp (operands[0], constm1_rtx, 'H');\n+      return \\\"add.h #-1,%0\\\";\n     }\n   else\n     {\n-      output_cmp (gen_rtx (REG, HImode, 7), constm1_rtx, 'W');\n+      output_cmp (gen_rtx (REG, HImode, 7), constm1_rtx, 'H');\n       return \\\"psh.w s7\\;ld.h %0,s7\\;add.h #-1,s7\\;st.h s7,%0\\;pop.w s7\\\";\n     }\n }\")\n@@ -1575,12 +1577,12 @@\n {\n   if (which_alternative == 0)\n     {\n-      output_cmp (operands[0], const0_rtx, 'W');\n-      return \\\"add.w #-1,%0\\\";\n+      output_cmp (operands[0], const0_rtx, 'H');\n+      return \\\"add.h #-1,%0\\\";\n     }\n   else\n     {\n-      output_cmp (gen_rtx (REG, HImode, 7), const0_rtx, 'W');\n+      output_cmp (gen_rtx (REG, HImode, 7), const0_rtx, 'H');\n       return \\\"psh.w s7\\;ld.h %0,s7\\;add.h #-1,s7\\;st.h s7,%0\\;pop.w s7\\\";\n     }\n }\")"}]}