{"sha": "edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjNjFkMzRlYjQyMTJkNTU0N2U5ZjYyOGI1ZjdmNGQxNWVlMDA2MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-11T13:39:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-11T17:49:39Z"}, "message": "c++: template partial instantiation mismatch [PR 99528]\n\nThis turned out to be an existing problem, which had been hidden by\nother bugs.  Templated members of templated classes can end up\ninstantiating the template itself, and we were not handling the\nmergeableness of that correctly.\n\n\tPR c++/99528\n\tgcc/cp/\n\t* module.cc (enum merge_kind): Delete MK_type_tmpl_spec,\n\tMK_decl_tmpl_spec.\n\t(trees_in::decl_value): Adjust add_mergeable_specialization call.\n\t(trees_out::get_merge_kind): Adjust detecting a partial template\n\tinstantiation.\n\t(trees_out::key_mergeable): Adjust handling same.\n\t(trees_in::key_mergeabvle): Likewise.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99528.h: New.\n\t* g++.dg/modules/pr99528_a.H: New.\n\t* g++.dg/modules/pr99528_b.H: New.\n\t* g++.dg/modules/pr99528_c.C: New.", "tree": {"sha": "645163bb20843b306d0580f3f92a692b057ce381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645163bb20843b306d0580f3f92a692b057ce381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52db241345a81207681733c5316b6fbf44596ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52db241345a81207681733c5316b6fbf44596ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52db241345a81207681733c5316b6fbf44596ac0"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "03359db28e18fce446a92debab7c21a221801e53", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "patch": "@@ -2783,11 +2783,7 @@ enum merge_kind\n   MK_tmpl_tmpl_mask = 0x1, /* We want TEMPLATE_DECL.  */\n \n   MK_type_spec = MK_template_mask,\n-  MK_type_tmpl_spec = MK_type_spec | MK_tmpl_tmpl_mask,\n-\n   MK_decl_spec = MK_template_mask | MK_tmpl_decl_mask,\n-  MK_decl_tmpl_spec = MK_decl_spec | MK_tmpl_tmpl_mask,\n-\n   MK_alias_spec = MK_decl_spec | MK_tmpl_alias_mask,\n \n   MK_hwm = 0x20\n@@ -8062,10 +8058,10 @@ trees_in::decl_value ()\n \t{\n \t  /* Add to specialization tables now that constraints etc are\n \t     added.  */\n-\t  bool is_decl = (mk & MK_template_mask) && (mk & MK_tmpl_decl_mask);\n+\t  bool is_type = mk == MK_partial || !(mk & MK_tmpl_decl_mask);\n \n-\t  spec.spec = is_decl ? inner : type;\n-\t  add_mergeable_specialization (is_decl, &spec, decl, spec_flags);\n+\t  spec.spec = is_type ? type : mk & MK_tmpl_tmpl_mask ? inner : decl;\n+\t  add_mergeable_specialization (!is_type, &spec, decl, spec_flags);\n \t}\n \n       if (TREE_CODE (decl) == INTEGER_CST && !TREE_OVERFLOW (decl))\n@@ -10229,7 +10225,6 @@ trees_out::get_merge_kind (tree decl, depset *dep)\n     case depset::EK_SPECIALIZATION:\n       {\n \tgcc_checking_assert (dep->is_special ());\n-\tspec_entry *entry = reinterpret_cast <spec_entry *> (dep->deps[0]);\n \n \tif (TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL)\n \t  /* An block-scope classes of templates are themselves\n@@ -10247,13 +10242,8 @@ trees_out::get_merge_kind (tree decl, depset *dep)\n \n \tif (TREE_CODE (decl) == TEMPLATE_DECL)\n \t  {\n-\t    tree res = DECL_TEMPLATE_RESULT (decl);\n-\t    if (!(mk & MK_tmpl_decl_mask))\n-\t      res = TREE_TYPE (res);\n-\n-\t    if (res == entry->spec)\n-\t      /* We check we can get back to the template during\n-\t\t streaming.  */\n+\t    spec_entry *entry = reinterpret_cast <spec_entry *> (dep->deps[0]);\n+\t    if (TREE_CODE (entry->spec) != TEMPLATE_DECL)\n \t      mk = merge_kind (mk | MK_tmpl_tmpl_mask);\n \t  }\n       }\n@@ -10362,15 +10352,14 @@ trees_out::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t\tgcc_assert (match_mergeable_specialization (false, entry)\n \t\t\t    == TREE_TYPE (existing));\n \t      else if (mk & MK_tmpl_tmpl_mask)\n-\t\tif (tree ti = DECL_TEMPLATE_INFO (existing))\n-\t\t  existing = TI_TEMPLATE (ti);\n+\t\texisting = DECL_TI_TEMPLATE (existing);\n \t    }\n \t  else\n \t    {\n-\t      if (!(mk & MK_tmpl_tmpl_mask))\n+\t      if (mk & MK_tmpl_tmpl_mask)\n+\t\texisting = CLASSTYPE_TI_TEMPLATE (existing);\n+\t      else\n \t\texisting = TYPE_NAME (existing);\n-\t      else if (tree ti = CLASSTYPE_TEMPLATE_INFO (existing))\n-\t\texisting = TI_TEMPLATE (ti);\n \t    }\n \n \t  /* The walkabout should have found ourselves.  */\n@@ -10677,13 +10666,6 @@ trees_in::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n       DECL_NAME (inner) = DECL_NAME (decl);\n       DECL_CONTEXT (inner) = DECL_CONTEXT (decl);\n \n-      spec.spec = decl;\n-      if (mk & MK_tmpl_tmpl_mask)\n-\t{\n-\t  if (inner == decl)\n-\t    return error_mark_node;\n-\t  spec.spec = inner;\n-\t}\n       tree constr = NULL_TREE;\n       bool is_decl = mk & MK_tmpl_decl_mask;\n       if (is_decl)\n@@ -10694,13 +10676,10 @@ trees_in::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t      if (constr)\n \t\tset_constraints (inner, constr);\n \t    }\n+\t  spec.spec = (mk & MK_tmpl_tmpl_mask) ? inner : decl;\n \t}\n       else\n-\t{\n-\t  if (mk == MK_type_spec && inner != decl)\n-\t    return error_mark_node;\n-\t  spec.spec = type;\n-\t}\n+\tspec.spec = type;\n       existing = match_mergeable_specialization (is_decl, &spec);\n       if (constr)\n \t/* We'll add these back later, if this is the new decl.  */\n@@ -10712,24 +10691,15 @@ trees_in::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t{\n \t  /* A declaration specialization.  */\n \t  if (mk & MK_tmpl_tmpl_mask)\n-\t    if (tree ti = DECL_TEMPLATE_INFO (existing))\n-\t      {\n-\t\ttree tmpl = TI_TEMPLATE (ti);\n-\t\tif (DECL_TEMPLATE_RESULT (tmpl) == existing)\n-\t\t  existing = tmpl;\n-\t      }\n+\t    existing = DECL_TI_TEMPLATE (existing);\n \t}\n       else\n \t{\n \t  /* A type specialization.  */\n-\t  if (!(mk & MK_tmpl_tmpl_mask))\n+\t  if (mk & MK_tmpl_tmpl_mask)\n+\t    existing = CLASSTYPE_TI_TEMPLATE (existing);\n+\t  else\n \t    existing = TYPE_NAME (existing);\n-\t  else if (tree ti = CLASSTYPE_TEMPLATE_INFO (existing))\n-\t    {\n-\t      tree tmpl = TI_TEMPLATE (ti);\n-\t      if (DECL_TEMPLATE_RESULT (tmpl) == TYPE_NAME (existing))\n-\t\texisting = tmpl;\n-\t    }\n \t}\n     }\n   else if (mk == MK_unique)"}, {"sha": "ea5d60f489a241974a30375b7c5829d12dc5190b", "filename": "gcc/testsuite/g++.dg/modules/pr99528.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528.h?ref=edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "patch": "@@ -0,0 +1,9 @@\n+template<typename _Tp>\n+class new_allocator\n+{\n+public:\n+  template<typename _Tp1>\n+  new_allocator(const new_allocator<_Tp1>&) noexcept { }\n+};\n+\n+extern template class new_allocator<char>;"}, {"sha": "08f766bd8798e94e7a83118a814d65c0e1f4f7e8", "filename": "gcc/testsuite/g++.dg/modules/pr99528_a.H", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_a.H?ref=edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "patch": "@@ -0,0 +1,4 @@\n+// PR 99528, ICE with template/function mismatch\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+#include \"pr99528.h\""}, {"sha": "48c4b4d974146a875b1c9fea17db26b94040c597", "filename": "gcc/testsuite/g++.dg/modules/pr99528_b.H", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_b.H?ref=edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+#include \"pr99528.h\"\n+"}, {"sha": "ca8d8677ce14b8fe2aeb0ce468324c5b63a4fe0d", "filename": "gcc/testsuite/g++.dg/modules/pr99528_c.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc61d34eb4212d5547e9f628b5f7f4d15ee0060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99528_c.C?ref=edc61d34eb4212d5547e9f628b5f7f4d15ee0060", "patch": "@@ -0,0 +1,3 @@\n+// { dg-additional-options {-fmodules-ts -fno-module-lazy} }\n+import \"pr99528_a.H\";\n+import \"pr99528_b.H\";"}]}