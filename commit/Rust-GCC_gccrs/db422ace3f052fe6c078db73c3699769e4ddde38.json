{"sha": "db422ace3f052fe6c078db73c3699769e4ddde38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0MjJhY2UzZjA1MmZlNmMwNzhkYjczYzM2OTk3NjllNGRkZGUzOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-09T17:19:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-09T17:19:12Z"}, "message": "re PR c++/51047 ([C++0x] SFINAE does not handle errors of ambiguous base members)\n\n/cp\n2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51047\n\t* search.c (lookup_member): Change to take also a tsubst_flags_t\n\tparameter.\n\t(lookup_field, lookup_fnfields): Adjust calls.\n\t* typeck.c (lookup_destructor, finish_class_member_access_expr,\n\tbuild_ptrmemfunc_access_expr): Likewise.\n\t* class.c (handle_using_decl, maybe_note_name_used_in_class):\n\tLikewise.\n\t* pt.c (resolve_typename_type): Likewise.\n\t* semantics.c (lambda_function): Likewise.\n\t* parser.c (cp_parser_perform_range_for_lookup,\n\tcp_parser_lookup_name): Likewise.\n\t* friend.c (make_friend_class): Likewise.\n\t* name-lookup.c (pushdecl_maybe_friend_1, get_class_binding,\n\tdo_class_using_decl, lookup_qualified_name): Likewise.\n\t* cp-tree.h (lookup_member): Adjust declaration.\n\n/testsuite\n2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51047\n\t* g++.dg/cpp0x/sfinae29.C: New.\n\nFrom-SVN: r181213", "tree": {"sha": "a2a0fcb5fb051aad447bef4b04723c2b47b8dd19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2a0fcb5fb051aad447bef4b04723c2b47b8dd19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db422ace3f052fe6c078db73c3699769e4ddde38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db422ace3f052fe6c078db73c3699769e4ddde38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db422ace3f052fe6c078db73c3699769e4ddde38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db422ace3f052fe6c078db73c3699769e4ddde38/comments", "author": null, "committer": null, "parents": [{"sha": "60858d8a323af88b5b67b9b40cbd606ba2232f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60858d8a323af88b5b67b9b40cbd606ba2232f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60858d8a323af88b5b67b9b40cbd606ba2232f27"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "f10a749032d634ab894171c6721d6bff2b6e46b3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -1167,7 +1167,8 @@ handle_using_decl (tree using_decl, tree t)\n \n   gcc_assert (!processing_template_decl && decl);\n \n-  old_value = lookup_member (t, name, /*protect=*/0, /*want_type=*/false);\n+  old_value = lookup_member (t, name, /*protect=*/0, /*want_type=*/false,\n+\t\t\t     tf_warning_or_error);\n   if (old_value)\n     {\n       if (is_overloaded_fn (old_value))\n@@ -7290,7 +7291,7 @@ maybe_note_name_used_in_class (tree name, tree decl)\n   /* If there's already a binding for this NAME, then we don't have\n      anything to worry about.  */\n   if (lookup_member (current_class_type, name,\n-\t\t     /*protect=*/0, /*want_type=*/false))\n+\t\t     /*protect=*/0, /*want_type=*/false, tf_warning_or_error))\n     return;\n \n   if (!current_class_stack[current_class_depth - 1].names_used)"}, {"sha": "5ba18856d16b4336654d9b90407c855d3253115d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -5367,7 +5367,8 @@ extern tree lookup_fnfields_slot\t\t(tree, tree);\n extern tree lookup_fnfields_slot_nolazy\t\t(tree, tree);\n extern int class_method_index_for_fn\t\t(tree, tree);\n extern tree lookup_fnfields\t\t\t(tree, tree, int);\n-extern tree lookup_member\t\t\t(tree, tree, int, bool);\n+extern tree lookup_member\t\t\t(tree, tree, int, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern int look_for_overrides\t\t\t(tree, tree);\n extern void get_pure_virtuals\t\t\t(tree);\n extern void maybe_suppress_debug_info\t\t(tree);"}, {"sha": "e532a30e3a3b053f921b1017b2ab841011124229", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -314,7 +314,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t    }\n \t  else\n \t    {\n-\t      decl = lookup_member (ctype, name, 0, true);\n+\t      decl = lookup_member (ctype, name, 0, true, tf_warning_or_error);\n \t      if (!decl)\n \t\t{\n \t\t  error (\"%qT is not a member of %qT\", name, ctype);"}, {"sha": "044a97f715758a3a5af902acccef94489e74937b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -1121,7 +1121,8 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\tmember = lookup_member (current_class_type,\n \t\t\t\t\tname,\n \t\t\t\t\t/*protect=*/0,\n-\t\t\t\t\t/*want_type=*/false);\n+\t\t\t\t\t/*want_type=*/false,\n+\t\t\t\t\ttf_warning_or_error);\n \t      else\n \t\tmember = NULL_TREE;\n \n@@ -2891,10 +2892,12 @@ get_class_binding (tree name, cp_binding_level *scope)\n \n   /* Get the type binding.  */\n   type_binding = lookup_member (class_type, name,\n-\t\t\t\t/*protect=*/2, /*want_type=*/true);\n+\t\t\t\t/*protect=*/2, /*want_type=*/true,\n+\t\t\t\ttf_warning_or_error);\n   /* Get the value binding.  */\n   value_binding = lookup_member (class_type, name,\n-\t\t\t\t /*protect=*/2, /*want_type=*/false);\n+\t\t\t\t /*protect=*/2, /*want_type=*/false,\n+\t\t\t\t tf_warning_or_error);\n \n   if (value_binding\n       && (TREE_CODE (value_binding) == TYPE_DECL\n@@ -3193,7 +3196,7 @@ do_class_using_decl (tree scope, tree name)\n \t}\n       else if (!name_dependent_p)\n \t{\n-\t  decl = lookup_member (binfo, name, 0, false);\n+\t  decl = lookup_member (binfo, name, 0, false, tf_warning_or_error);\n \t  if (!decl)\n \t    {\n \t      error (\"no members matching %<%T::%D%> in %q#T\", scope, name,\n@@ -4258,7 +4261,7 @@ lookup_qualified_name (tree scope, tree name, bool is_type_p, bool complain)\n   else if (cxx_dialect != cxx98 && TREE_CODE (scope) == ENUMERAL_TYPE)\n     t = lookup_enumerator (scope, name);\n   else if (is_class_type (scope, complain))\n-    t = lookup_member (scope, name, 2, is_type_p);\n+    t = lookup_member (scope, name, 2, is_type_p, tf_warning_or_error);\n \n   if (!t)\n     return error_mark_node;"}, {"sha": "931c593a447d4b246e8eacedfa62143be7f27a40", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -9495,9 +9495,11 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n       id_begin = get_identifier (\"begin\");\n       id_end = get_identifier (\"end\");\n       member_begin = lookup_member (TREE_TYPE (range), id_begin,\n-\t\t\t\t    /*protect=*/2, /*want_type=*/false);\n+\t\t\t\t    /*protect=*/2, /*want_type=*/false,\n+\t\t\t\t    tf_warning_or_error);\n       member_end = lookup_member (TREE_TYPE (range), id_end,\n-\t\t\t\t  /*protect=*/2, /*want_type=*/false);\n+\t\t\t\t  /*protect=*/2, /*want_type=*/false,\n+\t\t\t\t  tf_warning_or_error);\n \n       if (member_begin != NULL_TREE || member_end != NULL_TREE)\n \t{\n@@ -20398,7 +20400,8 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \tobject_decl = lookup_member (object_type,\n \t\t\t\t     name,\n \t\t\t\t     /*protect=*/0,\n-\t\t\t\t     tag_type != none_type);\n+\t\t\t\t     tag_type != none_type,\n+\t\t\t\t     tf_warning_or_error);\n       /* Look it up in the enclosing context, too.  */\n       decl = lookup_name_real (name, tag_type != none_type,\n \t\t\t       /*nonclass=*/0,"}, {"sha": "e53e90ffbedeb98f1732394c9cbe7fa743fc12a1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -19861,7 +19861,8 @@ resolve_typename_type (tree type, bool only_current_p)\n      longer be considered a dependent type.  */\n   pushed_scope = push_scope (scope);\n   /* Look up the declaration.  */\n-  decl = lookup_member (scope, name, /*protect=*/0, /*want_type=*/true);\n+  decl = lookup_member (scope, name, /*protect=*/0, /*want_type=*/true,\n+\t\t\ttf_warning_or_error);\n \n   result = NULL_TREE;\n   "}, {"sha": "7d9551c28bf618d8f98bb443827ae45ff9f914a3", "filename": "gcc/cp/search.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -1155,7 +1155,8 @@ build_baselink (tree binfo, tree access_binfo, tree functions, tree optype)\n    If nothing can be found return NULL_TREE and do not issue an error.  */\n \n tree\n-lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n+lookup_member (tree xbasetype, tree name, int protect, bool want_type,\n+\t       tsubst_flags_t complain)\n {\n   tree rval, rval_binfo = NULL_TREE;\n   tree type = NULL_TREE, basetype_path = NULL_TREE;\n@@ -1250,9 +1251,12 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n \n   if (errstr && protect)\n     {\n-      error (errstr, name, type);\n-      if (lfi.ambiguous)\n-\tprint_candidates (lfi.ambiguous);\n+      if (complain & tf_error)\n+\t{\n+\t  error (errstr, name, type);\n+\t  if (lfi.ambiguous)\n+\t    print_candidates (lfi.ambiguous);\n+\t}\n       rval = error_mark_node;\n     }\n \n@@ -1269,7 +1273,8 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n tree\n lookup_field (tree xbasetype, tree name, int protect, bool want_type)\n {\n-  tree rval = lookup_member (xbasetype, name, protect, want_type);\n+  tree rval = lookup_member (xbasetype, name, protect, want_type,\n+\t\t\t     tf_warning_or_error);\n \n   /* Ignore functions, but propagate the ambiguity list.  */\n   if (!error_operand_p (rval)\n@@ -1285,7 +1290,8 @@ lookup_field (tree xbasetype, tree name, int protect, bool want_type)\n tree\n lookup_fnfields (tree xbasetype, tree name, int protect)\n {\n-  tree rval = lookup_member (xbasetype, name, protect, /*want_type=*/false);\n+  tree rval = lookup_member (xbasetype, name, protect, /*want_type=*/false,\n+\t\t\t     tf_warning_or_error);\n \n   /* Ignore non-functions, but propagate the ambiguity list.  */\n   if (!error_operand_p (rval)"}, {"sha": "e9da3817577969e87ea6c805729b00e061d695dc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -8621,7 +8621,8 @@ lambda_function (tree lambda)\n       && !COMPLETE_OR_OPEN_TYPE_P (type))\n     return NULL_TREE;\n   lambda = lookup_member (type, ansi_opname (CALL_EXPR),\n-\t\t\t  /*protect=*/0, /*want_type=*/false);\n+\t\t\t  /*protect=*/0, /*want_type=*/false,\n+\t\t\t  tf_warning_or_error);\n   if (lambda)\n     lambda = BASELINK_FUNCTIONS (lambda);\n   return lambda;"}, {"sha": "2964952241a6e60dc861633edbae45437973eb53", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -2397,7 +2397,8 @@ lookup_destructor (tree object, tree scope, tree dtor_name)\n       return error_mark_node;\n     }\n   expr = lookup_member (dtor_type, complete_dtor_identifier,\n-\t\t\t/*protect=*/1, /*want_type=*/false);\n+\t\t\t/*protect=*/1, /*want_type=*/false,\n+\t\t\ttf_warning_or_error);\n   expr = (adjust_result_of_qualified_name_lookup\n \t  (expr, dtor_type, object_type));\n   return expr;\n@@ -2607,7 +2608,7 @@ finish_class_member_access_expr (tree object, tree name, bool template_p,\n \t{\n \t  /* Look up the member.  */\n \t  member = lookup_member (access_path, name, /*protect=*/1,\n-\t\t\t\t  /*want_type=*/false);\n+\t\t\t\t  /*want_type=*/false, complain);\n \t  if (member == NULL_TREE)\n \t    {\n \t      if (complain & tf_error)\n@@ -2681,7 +2682,7 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n   ptrmem_type = TREE_TYPE (ptrmem);\n   gcc_assert (TYPE_PTRMEMFUNC_P (ptrmem_type));\n   member = lookup_member (ptrmem_type, member_name, /*protect=*/0,\n-\t\t\t  /*want_type=*/false);\n+\t\t\t  /*want_type=*/false, tf_warning_or_error);\n   member_type = cp_build_qualified_type (TREE_TYPE (member),\n \t\t\t\t\t cp_type_quals (ptrmem_type));\n   return fold_build3_loc (input_location,"}, {"sha": "03691b51c0daa131890370152994960102d1b888", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51047\n+\t* g++.dg/cpp0x/sfinae29.C: New.\n+\n 2011-11-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50960"}, {"sha": "a2e10b41d3ec2d391a62cab82a8317c940e7ecc7", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae29.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db422ace3f052fe6c078db73c3699769e4ddde38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae29.C?ref=db422ace3f052fe6c078db73c3699769e4ddde38", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/51047\n+// { dg-options -std=c++0x }\n+\n+template<typename T> T &&declval();\n+template<class T> decltype(declval<T>().x) f(T *);\n+template<class T> char f(T);\n+struct B1{ int x; };\n+struct B2{ int x; };\n+struct D : public B1, B2{};\n+struct S { int x; };\n+int main()\n+{\n+  S *p = nullptr;\n+  static_assert(sizeof(f(p)) == sizeof(int), \"\");\n+  D *q = nullptr;\n+  static_assert(sizeof(f(q)) == 1u, \"\");\n+}"}]}