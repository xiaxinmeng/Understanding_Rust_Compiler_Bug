{"sha": "a31945d7ce7a91aeb5afd885777f0e87a6404188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxOTQ1ZDdjZTdhOTFhZWI1YWZkODg1Nzc3ZjBlODdhNjQwNDE4OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T09:58:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T09:58:07Z"}, "message": "[multiple changes]\n\n2011-11-04  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cdlili.ad[sb], a-cidlli.ad[sb], a-coorse.ad[sb], a-ciorse.ad[sb],\n\ta-coorma.ad[sb], a-ciorma.ad[sb], a-coormu.ad[sb], a-ciormu.ad[sb],\n\ta-cohama.ad[sb], a-cihama.ad[sb], a-cohase.ad[sb], a-cihase.ad[sb],\n\ta-convec.ad[sb], a-coinve.ad[sb] (Assign, Copy): New operations\n\tadded to package.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb: Minor reformatting\n\n2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* bindgen.adb (Gen_Elab_Calls): In the case of the AAMP target,\n\tinitialize elaboration entities to zero when specs are processed.\n\nFrom-SVN: r180930", "tree": {"sha": "5c092a2498a4cada2cfb133adc362e3c6001ea2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c092a2498a4cada2cfb133adc362e3c6001ea2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31945d7ce7a91aeb5afd885777f0e87a6404188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31945d7ce7a91aeb5afd885777f0e87a6404188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31945d7ce7a91aeb5afd885777f0e87a6404188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31945d7ce7a91aeb5afd885777f0e87a6404188/comments", "author": null, "committer": null, "parents": [{"sha": "1ba878a991190f847e28782e62f9d2f96785f3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba878a991190f847e28782e62f9d2f96785f3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba878a991190f847e28782e62f9d2f96785f3cd"}], "stats": {"total": 688, "additions": 672, "deletions": 16}, "files": [{"sha": "b422f32e1d3d9a995430f209de3633152a7521e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -1,3 +1,20 @@\n+2011-11-04  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cdlili.ad[sb], a-cidlli.ad[sb], a-coorse.ad[sb], a-ciorse.ad[sb],\n+\ta-coorma.ad[sb], a-ciorma.ad[sb], a-coormu.ad[sb], a-ciormu.ad[sb],\n+\ta-cohama.ad[sb], a-cihama.ad[sb], a-cohase.ad[sb], a-cihase.ad[sb],\n+\ta-convec.ad[sb], a-coinve.ad[sb] (Assign, Copy): New operations\n+\tadded to package.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb: Minor reformatting\n+\n+2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* bindgen.adb (Gen_Elab_Calls): In the case of the AAMP target,\n+\tinitialize elaboration entities to zero when specs are processed.\n+\n 2011-10-28  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "326c74b0785a457494692e2da8eb09f2e75b78bd", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -146,6 +146,27 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out List; Source : List) is\n+      Node : Node_Access;\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+\n+      Node := Source.First;\n+      while Node /= null loop\n+         Target.Append (Node.Element);\n+         Node := Node.Next;\n+      end loop;\n+   end Assign;\n+\n    -----------\n    -- Clear --\n    -----------\n@@ -206,6 +227,17 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : List) return List is\n+   begin\n+      return Target : List do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ------------\n    -- Delete --\n    ------------"}, {"sha": "2de03e520aa2aee914b3050bc48977478acb7a03", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -90,6 +90,10 @@ package Ada.Containers.Doubly_Linked_Lists is\n       Position  : Cursor;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n+   procedure Assign (Target : in out List; Source : List);\n+\n+   function Copy (Source : List) return List;\n+\n    procedure Move\n      (Target : in out List;\n       Source : in out List);"}, {"sha": "42bd3c48313fcfc3d78595fba5d2ea424d1483c8", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -171,6 +171,27 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out List; Source : List) is\n+      Node : Node_Access;\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+\n+      Node := Source.First;\n+      while Node /= null loop\n+         Target.Append (Node.Element.all);\n+         Node := Node.Next;\n+      end loop;\n+   end Assign;\n+\n    -----------\n    -- Clear --\n    -----------\n@@ -230,6 +251,17 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : List) return List is\n+   begin\n+      return Target : List do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ------------\n    -- Delete --\n    ------------"}, {"sha": "c40ad30b155a254c485a8e46c0aeea03df4dbd78", "filename": "gcc/ada/a-cidlli.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -90,6 +90,10 @@ package Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       Position  : Cursor;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n+   procedure Assign (Target : in out List; Source : List);\n+\n+   function Copy (Source : List) return List;\n+\n    procedure Move\n      (Target : in out List;\n       Source : in out List);"}, {"sha": "b90c5426481dc3fc8261f2056fc6902b8cdaf0e6", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -35,6 +35,8 @@ pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n \n with Ada.Unchecked_Deallocation;\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Indefinite_Hashed_Maps is\n \n    procedure Free_Key is\n@@ -132,6 +134,41 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Map; Source : Map) is\n+      procedure Insert_Item (Node : Node_Access);\n+      pragma Inline (Insert_Item);\n+\n+      procedure Insert_Items is new HT_Ops.Generic_Iteration (Insert_Item);\n+\n+      -----------------\n+      -- Insert_Item --\n+      -----------------\n+\n+      procedure Insert_Item (Node : Node_Access) is\n+      begin\n+         Target.Insert (Key => Node.Key.all, New_Item => Node.Element.all);\n+      end Insert_Item;\n+\n+   --  Start of processing for Assign\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+\n+      if Target.Capacity < Source.Length then\n+         Target.Reserve_Capacity (Source.Length);\n+      end if;\n+\n+      Insert_Items (Target.HT);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -159,6 +196,34 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       return Find (Container, Key) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Map;\n+      Capacity : Count_Type := 0) return Map\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Map do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "7c67c3155830fee5f9e98be1c06ffbb79ffcc9a6", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -134,6 +134,10 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    --  Calls Process with the key (with only a constant view) and element (with\n    --  a variable view) of the node designed by the cursor.\n \n+   procedure Assign (Target : in out Map; Source : Map);\n+\n+   function Copy (Source : Map; Capacity : Count_Type := 0) return Map;\n+\n    procedure Move (Target : in out Map; Source : in out Map);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n    --  buckets array and nodes from Source to Target."}, {"sha": "e29a204570e1adc10a68f8b2d377826102aeff4d", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -173,6 +173,16 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       Free_Element (X);\n    end Assign;\n \n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -200,6 +210,34 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Set;\n+      Capacity : Count_Type := 0) return Set\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Set do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "33994cdeffa67d2b278a05ec513363b08c70ca78", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -153,6 +153,10 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n       Position  : Cursor)\n    return Constant_Reference_Type;\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set; Capacity : Count_Type := 0) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n    --  buckets array and nodes from Source to Target."}, {"sha": "cd95b9fd5aba482885b810b53e9f7ef6039ac5e9", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -35,6 +35,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Operations);\n with Ada.Containers.Red_Black_Trees.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Indefinite_Ordered_Maps is\n    pragma Suppress (All_Checks);\n \n@@ -287,6 +289,37 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Map; Source : Map) is\n+      procedure Insert_Item (Node : Node_Access);\n+      pragma Inline (Insert_Item);\n+\n+      procedure Insert_Items is\n+         new Tree_Operations.Generic_Iteration (Insert_Item);\n+\n+      -----------------\n+      -- Insert_Item --\n+      -----------------\n+\n+      procedure Insert_Item (Node : Node_Access) is\n+      begin\n+         Target.Insert (Key => Node.Key.all, New_Item => Node.Element.all);\n+      end Insert_Item;\n+\n+   --  Start of processing for Assign\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Insert_Items (Target.Tree);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -340,6 +373,17 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n       return Find (Container, Key) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Map) return Map is\n+   begin\n+      return Target : Map do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "1c19b81161f64ec33c0b6dfaa076e772341631b9", "filename": "gcc/ada/a-ciorma.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -96,6 +96,10 @@ package Ada.Containers.Indefinite_Ordered_Maps is\n       Process   : not null access procedure (Key     : Key_Type;\n                                              Element : in out Element_Type));\n \n+   procedure Assign (Target : in out Map; Source : Map);\n+\n+   function Copy (Source : Map) return Map;\n+\n    procedure Move (Target : in out Map; Source : in out Map);\n \n    procedure Insert"}, {"sha": "e11d5045135c1b0684cd402e4e14214d873c1945", "filename": "gcc/ada/a-ciormu.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciormu.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Indefinite_Ordered_Multisets is\n \n    -----------------------------\n@@ -298,6 +300,20 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -344,6 +360,17 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Set) return Set is\n+   begin\n+      return Target : Set do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "c1d81d5b753ef0dc0f2ddac9ac188045644dede6", "filename": "gcc/ada/a-ciormu.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciormu.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,6 +118,10 @@ package Ada.Containers.Indefinite_Ordered_Multisets is\n    --  change the value of the element while Process is executing (to \"tamper\n    --  with elements\") will raise Program_Error.\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n    --  If Target denotes the same object as Source, the operation does\n    --  nothing. If either Target or Source is busy (cursor tampering is"}, {"sha": "56c33cfe670312075bd5c94a276a730fced62910", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -38,6 +38,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n with Ada.Unchecked_Deallocation;\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Indefinite_Ordered_Sets is\n \n    type Iterator is new\n@@ -321,6 +323,20 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -363,6 +379,17 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Set) return Set is\n+   begin\n+      return Target : Set do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "c0ead018bb2b76809f1e882daae29575b8f7b0af", "filename": "gcc/ada/a-ciorse.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -111,6 +111,10 @@ package Ada.Containers.Indefinite_Ordered_Sets is\n      (Position : Cursor;\n       Process  : not null access procedure (Element : Element_Type));\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n \n    procedure Insert"}, {"sha": "20e10e8daf9e99e301e09ce5c38bc5e776426e3b", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,8 @@ pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Operations);\n with Ada.Containers.Hash_Tables.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Hashed_Maps is\n \n    type Iterator is new\n@@ -131,6 +133,41 @@ package body Ada.Containers.Hashed_Maps is\n       HT_Ops.Adjust (Container.HT);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Map; Source : Map) is\n+      procedure Insert_Item (Node : Node_Access);\n+      pragma Inline (Insert_Item);\n+\n+      procedure Insert_Items is new HT_Ops.Generic_Iteration (Insert_Item);\n+\n+      -----------------\n+      -- Insert_Item --\n+      -----------------\n+\n+      procedure Insert_Item (Node : Node_Access) is\n+      begin\n+         Target.Insert (Key => Node.Key, New_Item => Node.Element);\n+      end Insert_Item;\n+\n+   --  Start of processing for Assign\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+\n+      if Target.Capacity < Source.Length then\n+         Target.Reserve_Capacity (Source.Length);\n+      end if;\n+\n+      Insert_Items (Target.HT);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -158,6 +195,34 @@ package body Ada.Containers.Hashed_Maps is\n       return Find (Container, Key) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Map;\n+      Capacity : Count_Type := 0) return Map\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Map do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "6277383324656bb5bf18d7d81ebc8abaf23ba685", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -148,6 +148,10 @@ package Ada.Containers.Hashed_Maps is\n    --  Calls Process with the key (with only a constant view) and element (with\n    --  a variable view) of the node designed by the cursor.\n \n+   procedure Assign (Target : in out Map; Source : Map);\n+\n+   function Copy (Source : Map; Capacity : Count_Type := 0) return Map;\n+\n    procedure Move (Target : in out Map; Source : in out Map);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n    --  buckets array and nodes from Source to Target."}, {"sha": "e0b2345234b4c5cf4bb316ead7cfc3fe9bad1d50", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -159,6 +159,16 @@ package body Ada.Containers.Hashed_Sets is\n       Node.Element := Item;\n    end Assign;\n \n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -186,6 +196,34 @@ package body Ada.Containers.Hashed_Sets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Set;\n+      Capacity : Count_Type := 0) return Set\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Set do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "0bb370bfe830dfae77ab24eb761ad37cb8edea3f", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -133,6 +133,10 @@ package Ada.Containers.Hashed_Sets is\n    --  Calls Process with the element (having only a constant view) of the node\n    --  designed by the cursor.\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set; Capacity : Count_Type := 0) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n    --  buckets array and nodes from Source to Target."}, {"sha": "ae72e65ed51dba13d3d86d6d5efb25dee6508b07", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -616,6 +616,20 @@ package body Ada.Containers.Indefinite_Vectors is\n          Count);\n    end Append;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Vector; Source : Vector) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Append (Source);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -698,6 +712,34 @@ package body Ada.Containers.Indefinite_Vectors is\n       return Find_Index (Container, Item) /= No_Index;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Vector;\n+      Capacity : Count_Type := 0) return Vector\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Vector do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ------------\n    -- Delete --\n    ------------"}, {"sha": "06568278997d3d769b489054f81baed66148369e", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -204,6 +204,10 @@ package Ada.Containers.Indefinite_Vectors is\n       Position  : Cursor;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n+   procedure Assign (Target : in out Vector; Source : Vector);\n+\n+   function Copy (Source : Vector; Capacity : Count_Type := 0) return Vector;\n+\n    procedure Move (Target : in out Vector; Source : in out Vector);\n \n    procedure Insert"}, {"sha": "b18de68a7370f4becd8cf9ca0b846c8446a4161e", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -432,6 +432,20 @@ package body Ada.Containers.Vectors is\n          Count);\n    end Append;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Vector; Source : Vector) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Append (Source);\n+   end Assign;\n+\n    --------------\n    -- Capacity --\n    --------------\n@@ -471,6 +485,34 @@ package body Ada.Containers.Vectors is\n       return Find_Index (Container, Item) /= No_Index;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy\n+     (Source   : Vector;\n+      Capacity : Count_Type := 0) return Vector\n+   is\n+      C : Count_Type;\n+\n+   begin\n+      if Capacity = 0 then\n+         C := Source.Length;\n+\n+      elsif Capacity >= Source.Length then\n+         C := Capacity;\n+\n+      else\n+         raise Capacity_Error\n+           with \"Requested capacity is less than Source length\";\n+      end if;\n+\n+      return Target : Vector do\n+         Target.Reserve_Capacity (C);\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ------------\n    -- Delete --\n    ------------"}, {"sha": "9eb82c791fe0b6f02c56d121cb0ce051c0dbc720", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -202,7 +202,12 @@ package Ada.Containers.Vectors is\n    function Reference (Container : Vector; Position : Index_Type)\n    return Reference_Type;\n \n+   procedure Assign (Target : in out Vector; Source : Vector);\n+\n+   function Copy (Source : Vector; Capacity : Count_Type := 0) return Vector;\n+\n    procedure Move (Target : in out Vector; Source : in out Vector);\n+\n    procedure Insert\n      (Container : in out Vector;\n       Before    : Extended_Index;"}, {"sha": "e8099c3c297f29ebc77f9aa57c9ece291aac1b27", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -35,6 +35,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Operations);\n with Ada.Containers.Red_Black_Trees.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Ordered_Maps is\n \n    type Iterator is new\n@@ -248,6 +250,37 @@ package body Ada.Containers.Ordered_Maps is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Map; Source : Map) is\n+      procedure Insert_Item (Node : Node_Access);\n+      pragma Inline (Insert_Item);\n+\n+      procedure Insert_Items is\n+         new Tree_Operations.Generic_Iteration (Insert_Item);\n+\n+      -----------------\n+      -- Insert_Item --\n+      -----------------\n+\n+      procedure Insert_Item (Node : Node_Access) is\n+      begin\n+         Target.Insert (Key => Node.Key, New_Item => Node.Element);\n+      end Insert_Item;\n+\n+   --  Start of processing for Assign\n+\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Insert_Items (Target.Tree);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -304,6 +337,17 @@ package body Ada.Containers.Ordered_Maps is\n       return Find (Container, Key) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Map) return Map is\n+   begin\n+      return Target : Map do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "53942b71fa268e27c24fb06182bfb1d476dc51bc", "filename": "gcc/ada/a-coorma.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -96,6 +96,10 @@ package Ada.Containers.Ordered_Maps is\n       Process   : not null access\n                    procedure (Key : Key_Type; Element : in out Element_Type));\n \n+   procedure Assign (Target : in out Map; Source : Map);\n+\n+   function Copy (Source : Map) return Map;\n+\n    procedure Move (Target : in out Map; Source : in out Map);\n \n    procedure Insert"}, {"sha": "2ed148192437f2c69f0a7801b2b60ca17a7d2ebe", "filename": "gcc/ada/a-coormu.adb", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coormu.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Ordered_Multisets is\n \n    -----------------------------\n@@ -266,6 +268,20 @@ package body Ada.Containers.Ordered_Multisets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -312,6 +328,17 @@ package body Ada.Containers.Ordered_Multisets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Set) return Set is\n+   begin\n+      return Target : Set do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "6f9e3d0b2d8c2e2779aaba156e22f1c67b43bbfd", "filename": "gcc/ada/a-coormu.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coormu.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,6 +117,10 @@ package Ada.Containers.Ordered_Multisets is\n    --  change the value of the element while Process is executing (to \"tamper\n    --  with elements\") will raise Program_Error.\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n    --  If Target denotes the same object as Source, the operation does\n    --  nothing. If either Target or Source is busy (cursor tampering is"}, {"sha": "4c6476864b8105290be10002243d33fed2913e16", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -38,6 +38,8 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n+with System; use type System.Address;\n+\n package body Ada.Containers.Ordered_Sets is\n \n    type Iterator is new\n@@ -281,6 +283,20 @@ package body Ada.Containers.Ordered_Sets is\n       Adjust (Container.Tree);\n    end Adjust;\n \n+   ------------\n+   -- Assign --\n+   ------------\n+\n+   procedure Assign (Target : in out Set; Source : Set) is\n+   begin\n+      if Target'Address = Source'Address then\n+         return;\n+      end if;\n+\n+      Target.Clear;\n+      Target.Union (Source);\n+   end Assign;\n+\n    -------------\n    -- Ceiling --\n    -------------\n@@ -325,6 +341,17 @@ package body Ada.Containers.Ordered_Sets is\n       return Find (Container, Item) /= No_Element;\n    end Contains;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   function Copy (Source : Set) return Set is\n+   begin\n+      return Target : Set do\n+         Target.Assign (Source);\n+      end return;\n+   end Copy;\n+\n    ---------------\n    -- Copy_Node --\n    ---------------"}, {"sha": "45e6ab90a737f45fc1a9d64e2c57f3939c5b5b84", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -113,6 +113,10 @@ package Ada.Containers.Ordered_Sets is\n      (Position : Cursor;\n       Process  : not null access procedure (Element : Element_Type));\n \n+   procedure Assign (Target : in out Set; Source : Set);\n+\n+   function Copy (Source : Set) return Set;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n \n    procedure Insert"}, {"sha": "e99d8753a9e65f3f34938f94e7f694b27c14e196", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -1050,9 +1050,8 @@ package body Bindgen is\n                          or else U.Unit_Kind /= 's')\n             then\n \n-               --  The only case in which we have to do something is if this\n-               --  is a body, with a separate spec, where the separate spec\n-               --  has an elaboration entity defined. In that case, this is\n+               --  In the case of a body with a separate spec, where the\n+               --  separate spec has an elaboration entity defined, this is\n                --  where we increment the elaboration entity.\n \n                if U.Utype = Is_Body\n@@ -1065,6 +1064,23 @@ package body Bindgen is\n                   Set_Unit_Number (Unum_Spec);\n                   Set_String (\" + 1;\");\n                   Write_Statement_Buffer;\n+\n+               --  In the special case where the target is AAMP and the unit is\n+               --  a spec with a body, the elaboration entity is initialized\n+               --  here. This is done because it's the only way to accomplish\n+               --  initialization of such entities, because there's not any\n+               --  mechanism provided to initialize global variables at load\n+               --  time on AAMP. (Also note that there is no notion of shared\n+               --  libraries for AAMP, so no possibility of reelaboration.)\n+\n+               elsif AAMP_On_Target\n+                 and then U.Utype = Is_Spec\n+                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n+               then\n+                  Set_String (\"      E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" := 0;\");\n+                  Write_Statement_Buffer;\n                end if;\n \n             --  Here if elaboration code is present. If binding a library\n@@ -1087,6 +1103,24 @@ package body Bindgen is\n             --  variables, only calls to 'Elab* subprograms.\n \n             else\n+               --  In the special case where the target is AAMP and the unit is\n+               --  a spec with a body, the elaboration entity is initialized\n+               --  here. This is done because it's the only way to accomplish\n+               --  initialization of such entities, because there's not any\n+               --  mechanism provided to initialize global variables at load\n+               --  time on AAMP. (Also note that there is no notion of shared\n+               --  libraries for AAMP, so no possibility of reelaboration.)\n+\n+               if AAMP_On_Target\n+                 and then U.Utype = Is_Spec\n+                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n+               then\n+                  Set_String (\"      E\");\n+                  Set_Unit_Number (Unum_Spec);\n+                  Set_String (\" := 0;\");\n+                  Write_Statement_Buffer;\n+               end if;\n+\n                Check_Elab_Flag :=\n                  not CodePeer_Mode\n                    and then (Force_Checking_Of_Elaboration_Flags"}, {"sha": "e51b8029803bfbadffddcc2db05f6f57eb7f29fe", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31945d7ce7a91aeb5afd885777f0e87a6404188/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a31945d7ce7a91aeb5afd885777f0e87a6404188", "patch": "@@ -7549,16 +7549,14 @@ package body Sem_Ch12 is\n                      Scop := Scope (Scop);\n                   end loop;\n \n-                  if Scop = Par_I then\n-\n-                     --  Previous instance encloses current instance\n+                  --  Previous instance encloses current instance\n \n+                  if Scop = Par_I then\n                      null;\n \n-                  elsif Is_Generic_Instance (Scop) then\n-\n-                     --  Current instance is within an unrelated instance\n+                  --  Current instance is within an unrelated instance\n \n+                  elsif Is_Generic_Instance (Scop) then\n                      null;\n \n                   else"}]}