{"sha": "185d7d97506315bcf48bae38d410f68af50eba4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1ZDdkOTc1MDYzMTViY2Y0OGJhZTM4ZDQxMGY2OGFmNTBlYmE0YQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-10-28T21:16:17Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-28T21:16:17Z"}, "message": "check.c (gfc_check_alarm_sub, [...]): New functions.\n\n\t* check.c (gfc_check_alarm_sub, gfc_check_signal,\n\tgfc_check_signal_sub): New functions.\n\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SIGNAL.\n\t* intrinsic.c (add_functions): Add signal intrinsic.\n\t(add_subroutines): Add signal and alarm intrinsics.\n\t* intrinsic.texi: Document the new intrinsics.\n\t* iresolve.c (gfc_resolve_signal, gfc_resolve_alarm_sub,\n\tgfc_resolve_signal_sub): New functions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add case\n\tfor GFC_ISYM_SIGNAL.\n\t* intrinsic.h: Add prototypes for gfc_check_alarm_sub,\n\tgfc_check_signal, gfc_check_signal_sub, gfc_resolve_signal,\n\tgfc_resolve_alarm_sub, gfc_resolve_signal_sub.\n\n\t* Makefile.am (intrinsics): Add signal.c.\n\t* Makefile.in: Regenerate.\n\t* configure.ac: Checks for signal and alarm.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* intrinsics/signal.c: New file for SIGNAL and ALARM intrinsics.\n\nFrom-SVN: r105967", "tree": {"sha": "fc0a4e0d2fc0100ea5d8070de286cf8217cb2dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0a4e0d2fc0100ea5d8070de286cf8217cb2dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/185d7d97506315bcf48bae38d410f68af50eba4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185d7d97506315bcf48bae38d410f68af50eba4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185d7d97506315bcf48bae38d410f68af50eba4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185d7d97506315bcf48bae38d410f68af50eba4a/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0dbff3607628e68395992ac86e3e659c7e1b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0dbff3607628e68395992ac86e3e659c7e1b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0dbff3607628e68395992ac86e3e659c7e1b09"}], "stats": {"total": 547, "additions": 534, "deletions": 13}, "files": [{"sha": "046cb4490527184f6e9715fda5f9e4c117f59a30", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -1,3 +1,19 @@\n+2005-10-28  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* check.c (gfc_check_alarm_sub, gfc_check_signal,\n+\tgfc_check_signal_sub): New functions.\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SIGNAL.\n+\t* intrinsic.c (add_functions): Add signal intrinsic.\n+\t(add_subroutines): Add signal and alarm intrinsics.\n+\t* intrinsic.texi: Document the new intrinsics.\n+\t* iresolve.c (gfc_resolve_signal, gfc_resolve_alarm_sub,\n+\tgfc_resolve_signal_sub): New functions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add case\n+\tfor GFC_ISYM_SIGNAL.\n+\t* intrinsic.h: Add prototypes for gfc_check_alarm_sub,\n+\tgfc_check_signal, gfc_check_signal_sub, gfc_resolve_signal,\n+\tgfc_resolve_alarm_sub, gfc_resolve_signal_sub.\n+\n 2005-10-28  Steven Bosscher  <stevenb@suse.de>\n \n \tPR fortran/24545"}, {"sha": "d5218d39f06af94cf5b254408b8a0dee507dddd1", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -2430,6 +2430,40 @@ gfc_check_irand (gfc_expr * x)\n   return SUCCESS;\n }\n \n+\n+try\n+gfc_check_alarm_sub (gfc_expr * seconds, gfc_expr * handler, gfc_expr * status)\n+{\n+  if (scalar_check (seconds, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (seconds, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (handler->ts.type != BT_INTEGER && handler->ts.type != BT_PROCEDURE)\n+    {\n+      gfc_error (\n+\t\"'%s' argument of '%s' intrinsic at %L must be INTEGER or PROCEDURE\",\n+\tgfc_current_intrinsic_arg[1], gfc_current_intrinsic, &handler->where);\n+      return FAILURE;\n+    }\n+\n+  if (handler->ts.type == BT_INTEGER && scalar_check (handler, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (status == NULL)\n+    return SUCCESS;\n+\n+  if (scalar_check (status, 2) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (status, 2, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_rand (gfc_expr * x)\n {\n@@ -2721,6 +2755,63 @@ gfc_check_unlink_sub (gfc_expr * name, gfc_expr * status)\n }\n \n \n+try\n+gfc_check_signal (gfc_expr * number, gfc_expr * handler)\n+{\n+  if (scalar_check (number, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (number, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (handler->ts.type != BT_INTEGER && handler->ts.type != BT_PROCEDURE)\n+    {\n+      gfc_error (\n+\t\"'%s' argument of '%s' intrinsic at %L must be INTEGER or PROCEDURE\",\n+\tgfc_current_intrinsic_arg[1], gfc_current_intrinsic, &handler->where);\n+      return FAILURE;\n+    }\n+\n+  if (handler->ts.type == BT_INTEGER && scalar_check (handler, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_signal_sub (gfc_expr * number, gfc_expr * handler, gfc_expr * status)\n+{\n+  if (scalar_check (number, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (number, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (handler->ts.type != BT_INTEGER && handler->ts.type != BT_PROCEDURE)\n+    {\n+      gfc_error (\n+\t\"'%s' argument of '%s' intrinsic at %L must be INTEGER or PROCEDURE\",\n+\tgfc_current_intrinsic_arg[1], gfc_current_intrinsic, &handler->where);\n+      return FAILURE;\n+    }\n+\n+  if (handler->ts.type == BT_INTEGER && scalar_check (handler, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (status == NULL)\n+    return SUCCESS;\n+\n+  if (type_check (status, 2, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (status, 2) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_system_sub (gfc_expr * cmd, gfc_expr * status)\n {"}, {"sha": "54bce8fe442fa91cca1f3b61c4c6d209c66c6b8a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -392,6 +392,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_SHAPE,\n   GFC_ISYM_SI_KIND,\n   GFC_ISYM_SIGN,\n+  GFC_ISYM_SIGNAL,\n   GFC_ISYM_SIN,\n   GFC_ISYM_SINH,\n   GFC_ISYM_SIZE,"}, {"sha": "d414a05954ee8ed2f7ba3ff03c828e550af06322", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -871,7 +871,8 @@ add_functions (void)\n     *s = \"s\", *dm = \"dim\", *kind = \"kind\", *msk = \"mask\",\n     *x = \"x\", *sh = \"shift\", *stg = \"string\", *ssg = \"substring\",\n     *y = \"y\", *sz = \"size\", *sta = \"string_a\", *stb = \"string_b\",\n-    *z = \"z\", *ln = \"len\", *ut = \"unit\";\n+    *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n+    *num = \"number\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -1916,6 +1917,12 @@ add_functions (void)\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n+  add_sym_2 (\"signal\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_signal, NULL, gfc_resolve_signal,\n+\t     num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED);\n+\n+  make_generic (\"signal\", GFC_ISYM_SIGNAL, GFC_STD_GNU);\n+\n   add_sym_1 (\"sin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_fn_rc, gfc_simplify_sin, gfc_resolve_sin,\n \t     x, BT_REAL, dr, REQUIRED);\n@@ -2121,7 +2128,8 @@ add_subroutines (void)\n     *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\",\n     *com = \"command\", *length = \"length\", *st = \"status\",\n     *val = \"value\", *num = \"number\", *name = \"name\",\n-    *trim_name = \"trim_name\", *ut = \"unit\";\n+    *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n+    *sec = \"seconds\";\n \n   int di, dr, dc, dl;\n \n@@ -2217,6 +2225,11 @@ add_subroutines (void)\n \t      gt, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n+  add_sym_3s (\"alarm\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n+\t      sec, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n+\t      st, BT_INTEGER, di, OPTIONAL);\n+\n   add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di, GFC_STD_GNU,\n              gfc_check_srand, NULL, gfc_resolve_srand,\n \t      c, BT_INTEGER, 4, REQUIRED);\n@@ -2267,6 +2280,11 @@ add_subroutines (void)\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n+  add_sym_3s (\"signal\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n+\t      num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n+\t      st, BT_INTEGER, di, OPTIONAL);\n+\n   add_sym_3s (\"symlnk\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER,"}, {"sha": "556c6e489b07081cda4ff7247bb909f1e07a7e3f", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -109,6 +109,7 @@ try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n try gfc_check_shape (gfc_expr *);\n try gfc_check_size (gfc_expr *, gfc_expr *);\n try gfc_check_sign (gfc_expr *, gfc_expr *);\n+try gfc_check_signal (gfc_expr *, gfc_expr *);\n try gfc_check_spread (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_srand (gfc_expr *);\n try gfc_check_stat (gfc_expr *, gfc_expr *);\n@@ -126,6 +127,7 @@ try gfc_check_x (gfc_expr *);\n \n \n /* Intrinsic subroutines.  */\n+try gfc_check_alarm_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_chdir_sub (gfc_expr *, gfc_expr *);\n try gfc_check_cpu_time (gfc_expr *);\n try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -147,6 +149,7 @@ try gfc_check_perror (gfc_expr *);\n try gfc_check_rename_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_link_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_symlnk_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_signal_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_sleep_sub (gfc_expr *);\n try gfc_check_stat_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_system_sub (gfc_expr *, gfc_expr *);\n@@ -360,6 +363,7 @@ void gfc_resolve_second_sub (gfc_code *);\n void gfc_resolve_set_exponent (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_shape (gfc_expr *, gfc_expr *);\n void gfc_resolve_sign (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_signal (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_sin (gfc_expr *, gfc_expr *);\n void gfc_resolve_sinh (gfc_expr *, gfc_expr *);\n void gfc_resolve_spacing (gfc_expr *, gfc_expr *);\n@@ -385,6 +389,7 @@ void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n \n \n /* Intrinsic subroutine resolution.  */\n+void gfc_resolve_alarm_sub (gfc_code *);\n void gfc_resolve_chdir_sub (gfc_code *);\n void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_exit (gfc_code *);\n@@ -405,6 +410,7 @@ void gfc_resolve_random_number (gfc_code *);\n void gfc_resolve_rename_sub (gfc_code *);\n void gfc_resolve_link_sub (gfc_code *);\n void gfc_resolve_symlnk_sub (gfc_code *);\n+void gfc_resolve_signal_sub (gfc_code *);\n void gfc_resolve_sleep_sub (gfc_code *);\n void gfc_resolve_stat_sub (gfc_code *);\n void gfc_resolve_system_clock (gfc_code *);"}, {"sha": "e731fbd2a8c11ea03fc54b9fc2dc6a877ad986d8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 113, "deletions": 1, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -41,6 +41,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{ADJUSTR}:       ADJUSTR,   Right adjust a string\n * @code{AIMAG}:         AIMAG,     Imaginary part of complex number\n * @code{AINT}:          AINT,      Truncate to a whole number\n+* @code{ALARM}:         ALARM,     Set an alarm clock\n * @code{ALL}:           ALL,       Determine if all values are true\n * @code{ALLOCATED}:     ALLOCATED, Status of allocatable entity\n * @code{ANINT}:         ANINT,     Nearest whole number\n@@ -91,9 +92,10 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n * @code{REAL}:          REAL,      Convert to real type \n-* @code{SQRT}:          SQRT,      Square-root function\n+* @code{SIGNAL}:        SIGNAL,    Signal handling subroutine (or function)\n * @code{SIN}:           SIN,       Sine function\n * @code{SINH}:          SINH,      Hyperbolic sine function\n+* @code{SQRT}:          SQRT,      Square-root function\n * @code{TAN}:           TAN,       Tangent function\n * @code{TANH}:          TANH,      Hyperbolic tangent function\n @end menu\n@@ -512,6 +514,57 @@ end program test_aint\n \n \n \n+@node ALARM\n+@section @code{ALARM} --- Execute a routine after a given delay\n+@findex @code{ALARM} intrinsic\n+@cindex \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ALARM(SECONDS [, STATUS])} causes external subroutine @var{HANDLER}\n+to be executed after a delay of @var{SECONDS} by using @code{alarm(1)} to\n+set up a signal and @code{signal(2)} to catch it. If @var{STATUS} is\n+supplied, it will be returned with the number of seconds remaining until\n+any previously scheduled alarm was due to be delivered, or zero if there\n+was no previously scheduled alarm.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL ALARM(SECONDS, HANDLER)} \n+@code{CALL ALARM(SECONDS, HANDLER, STATUS)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{SECONDS} @tab The type of the argument shall be a scalar\n+@code{INTEGER}. It is @code{INTENT(IN)}.\n+@item @var{HANDLER} @tab Signal handler (@code{INTEGER FUNCTION} or\n+@code{SUBROUTINE}) or dummy/global @code{INTEGER} scalar.\n+@code{INTEGER}. It is @code{INTENT(IN)}.\n+@item @var{STATUS}  @tab (Optional) @var{STATUS} shall be a scalar\n+@code{INTEGER} variable. It is @code{INTENT(OUT)}.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_alarm\n+  external handler_print\n+  integer i\n+  call alarm (3, handler_print, i)\n+  print *, i\n+  call sleep(10)\n+end program test_alarm\n+@end smallexample\n+This will cause the external routine @var{handler_print} to be called\n+after 3 seconds.\n+@end table\n+\n+\n+\n @node ALL\n @section @code{ALL} --- All values in @var{MASK} along @var{DIM} are true \n @findex @code{ALL} intrinsic\n@@ -2925,6 +2978,65 @@ program test_real\n @end table\n \n \n+\n+@node SIGNAL\n+@section @code{SIGNAL} --- Signal handling subroutine (or function)\n+@findex @code{SIGNAL} intrinsic\n+@cindex SIGNAL subroutine \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{SIGNAL(NUMBER, HANDLER [, STATUS])} causes external subroutine\n+@var{HANDLER} to be executed with a single integer argument when signal\n+@var{NUMBER} occurs.  If @var{HANDLER} is an integer, it can be used to\n+turn off handling of signal @var{NUMBER} or revert to its default\n+action.  See @code{signal(2)}.\n+\n+If @code{SIGNAL} is called as a subroutine and the @var{STATUS} argument\n+is supplied, it is set to the value returned by @code{signal(2)}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine, non-elemental function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .30 .80\n+@item @code{CALL ALARM(NUMBER, HANDLER)}\n+@item @code{CALL ALARM(NUMBER, HANDLER, STATUS)}\n+@item @code{STATUS = ALARM(NUMBER, HANDLER)}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{NUMBER} @tab shall be a scalar integer, with @code{INTENT(IN)}\n+@item @var{HANDLER}@tab Signal handler (@code{INTEGER FUNCTION} or\n+@code{SUBROUTINE}) or dummy/global @code{INTEGER} scalar.\n+@code{INTEGER}. It is @code{INTENT(IN)}.\n+@item @var{STATUS} @tab (Optional) @var{STATUS} shall be a scalar\n+integer. It has @code{INTENT(OUT)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The @code{SIGNAL} functions returns the value returned by @code{signal(2)}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_signal\n+  intrinsic signal\n+  external handler_print\n+\n+  call signal (12, handler_print)\n+  call signal (10, 1)\n+\n+  call sleep (30)\n+end program test_signal\n+@end smallexample\n+@end table\n+\n+\n+\n @node SIN\n @section @code{SIN} --- Sine function \n @findex @code{SIN} intrinsic"}, {"sha": "ae55aa78e87dc5058bd4e4d42de4172df90b13ac", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -1391,6 +1391,27 @@ gfc_resolve_sign (gfc_expr * f, gfc_expr * a, gfc_expr * b ATTRIBUTE_UNUSED)\n }\n \n \n+void\n+gfc_resolve_signal (gfc_expr * f, gfc_expr *number, gfc_expr *handler)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_c_int_kind;\n+\n+  /* handler can be either BT_INTEGER or BT_PROCEDURE  */\n+  if (handler->ts.type == BT_INTEGER)\n+    {\n+      if (handler->ts.kind != gfc_c_int_kind)\n+\tgfc_convert_type (handler, &f->ts, 2);\n+      f->value.function.name = gfc_get_string (PREFIX(\"signal_func_int\"));\n+    }\n+  else\n+    f->value.function.name = gfc_get_string (PREFIX(\"signal_func\"));\n+\n+  if (number->ts.kind != gfc_c_int_kind)\n+    gfc_convert_type (number, &f->ts, 2);\n+}\n+\n+\n void\n gfc_resolve_sin (gfc_expr * f, gfc_expr * x)\n {\n@@ -1700,6 +1721,37 @@ gfc_resolve_verify (gfc_expr * f, gfc_expr * string,\n \n /* Intrinsic subroutine resolution.  */\n \n+void\n+gfc_resolve_alarm_sub (gfc_code * c)\n+{\n+  const char *name;\n+  gfc_expr *seconds, *handler, *status;\n+  gfc_typespec ts;\n+\n+  seconds = c->ext.actual->expr;\n+  handler = c->ext.actual->next->expr;\n+  status = c->ext.actual->next->next->expr;\n+  ts.type = BT_INTEGER;\n+  ts.kind = gfc_c_int_kind;\n+\n+  /* handler can be either BT_INTEGER or BT_PROCEDURE  */\n+  if (handler->ts.type == BT_INTEGER)\n+    {\n+      if (handler->ts.kind != gfc_c_int_kind)\n+\tgfc_convert_type (handler, &ts, 2);\n+      name = gfc_get_string (PREFIX(\"alarm_sub_int\"));\n+    }\n+  else\n+    name = gfc_get_string (PREFIX(\"alarm_sub\"));\n+\n+  if (seconds->ts.kind != gfc_c_int_kind)\n+    gfc_convert_type (seconds, &ts, 2);\n+  if (status != NULL && status->ts.kind != gfc_c_int_kind)\n+    gfc_convert_type (status, &ts, 2);\n+\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n void\n gfc_resolve_cpu_time (gfc_code * c ATTRIBUTE_UNUSED)\n {\n@@ -1926,6 +1978,37 @@ gfc_resolve_get_environment_variable (gfc_code * code)\n   code->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+void\n+gfc_resolve_signal_sub (gfc_code * c)\n+{\n+  const char *name;\n+  gfc_expr *number, *handler, *status;\n+  gfc_typespec ts;\n+\n+  number = c->ext.actual->expr;\n+  handler = c->ext.actual->next->expr;\n+  status = c->ext.actual->next->next->expr;\n+  ts.type = BT_INTEGER;\n+  ts.kind = gfc_c_int_kind;\n+\n+  /* handler can be either BT_INTEGER or BT_PROCEDURE  */\n+  if (handler->ts.type == BT_INTEGER)\n+    {\n+      if (handler->ts.kind != gfc_c_int_kind)\n+\tgfc_convert_type (handler, &ts, 2);\n+      name = gfc_get_string (PREFIX(\"signal_sub_int\"));\n+    }\n+  else\n+    name = gfc_get_string (PREFIX(\"signal_sub\"));\n+\n+  if (number->ts.kind != gfc_c_int_kind)\n+    gfc_convert_type (number, &ts, 2);\n+  if (status != NULL && status->ts.kind != gfc_c_int_kind)\n+    gfc_convert_type (status, &ts, 2);\n+\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n /* Resolve the SYSTEM intrinsic subroutine.  */\n \n void"}, {"sha": "d14688bab5af26d41c52933226796cfe1d26d3a5", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -3100,6 +3100,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_RAND:\n     case GFC_ISYM_RENAME:\n     case GFC_ISYM_SECOND:\n+    case GFC_ISYM_SIGNAL:\n     case GFC_ISYM_STAT:\n     case GFC_ISYM_SYMLNK:\n     case GFC_ISYM_SYSTEM:"}, {"sha": "6311d64dd1f2d856b760bc771d12f3019e918a88", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -1,4 +1,13 @@\n-2005-10-20  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+2005-10-28  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* Makefile.am (intrinsics): Add signal.c.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac: Checks for signal and alarm.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* intrinsics/signal.c: New file for SIGNAL and ALARM intrinsics.\n+\n+2005-10-28  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* acinclude.m4 (LIBGFOR_CHECK_FPSETMASK): New check.\n \t* configure.ac: Check for floatingpoint.h, fptrap.h and float.h"}, {"sha": "b47b768a20ae428f0d1bfdcfa9498bb1ff80c872", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -66,6 +66,7 @@ intrinsics/link.c \\\n intrinsics/mvbits.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n+intrinsics/signal.c \\\n intrinsics/size.c \\\n intrinsics/sleep.c \\\n intrinsics/spread_generic.c \\"}, {"sha": "256fe1d38fd10ac2647d160e2c186d19315175bc", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -169,13 +169,14 @@ am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tdate_and_time.lo env.lo erf.lo eoshift0.lo eoshift2.lo \\\n \tetime.lo exit.lo flush.lo fnum.lo gerror.lo getcwd.lo \\\n \tgetlog.lo getXid.lo hyper.lo hostnm.lo kill.lo ierrno.lo \\\n-\tishftc.lo link.lo mvbits.lo pack_generic.lo perror.lo size.lo \\\n-\tsleep.lo spread_generic.lo string_intrinsics.lo system.lo \\\n-\trand.lo random.lo rename.lo reshape_generic.lo \\\n-\treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n-\tstat.lo symlnk.lo system_clock.lo time.lo transpose_generic.lo \\\n-\ttty.lo umask.lo unlink.lo unpack_generic.lo in_pack_generic.lo \\\n-\tin_unpack_generic.lo normalize.lo\n+\tishftc.lo link.lo mvbits.lo pack_generic.lo perror.lo \\\n+\tsignal.lo size.lo sleep.lo spread_generic.lo \\\n+\tstring_intrinsics.lo system.lo rand.lo random.lo rename.lo \\\n+\treshape_generic.lo reshape_packed.lo selected_int_kind.lo \\\n+\tselected_real_kind.lo stat.lo symlnk.lo system_clock.lo \\\n+\ttime.lo transpose_generic.lo tty.lo umask.lo unlink.lo \\\n+\tunpack_generic.lo in_pack_generic.lo in_unpack_generic.lo \\\n+\tnormalize.lo\n am__objects_34 =\n am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n@@ -406,6 +407,7 @@ intrinsics/link.c \\\n intrinsics/mvbits.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n+intrinsics/signal.c \\\n intrinsics/size.c \\\n intrinsics/sleep.c \\\n intrinsics/spread_generic.c \\\n@@ -2298,6 +2300,9 @@ pack_generic.lo: intrinsics/pack_generic.c\n perror.lo: intrinsics/perror.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o perror.lo `test -f 'intrinsics/perror.c' || echo '$(srcdir)/'`intrinsics/perror.c\n \n+signal.lo: intrinsics/signal.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o signal.lo `test -f 'intrinsics/signal.c' || echo '$(srcdir)/'`intrinsics/signal.c\n+\n size.lo: intrinsics/size.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o size.lo `test -f 'intrinsics/size.c' || echo '$(srcdir)/'`intrinsics/size.c\n "}, {"sha": "6dc11a1b45c1bbf3856bbcc3b1518c10ab4a1c1c", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -21,6 +21,9 @@\n /* libm includes acosl */\n #undef HAVE_ACOSL\n \n+/* Define to 1 if you have the `alarm' function. */\n+#undef HAVE_ALARM\n+\n /* libm includes asin */\n #undef HAVE_ASIN\n \n@@ -474,6 +477,9 @@\n /* libm includes scalbnl */\n #undef HAVE_SCALBNL\n \n+/* Define to 1 if you have the `signal' function. */\n+#undef HAVE_SIGNAL\n+\n /* Define to 1 if you have the <signal.h> header file. */\n #undef HAVE_SIGNAL_H\n "}, {"sha": "b5bcafafa81481ac5ba5a710c971714ec5656228", "filename": "libgfortran/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -7519,7 +7519,9 @@ done\n \n \n \n-for ac_func in sleep time ttyname\n+\n+\n+for ac_func in sleep time ttyname signal alarm\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "1808455acad06512520182150d047ee73c847d06", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -169,7 +169,7 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n # Check for library functions.\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n-AC_CHECK_FUNCS(sleep time ttyname)\n+AC_CHECK_FUNCS(sleep time ttyname signal alarm)\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])"}, {"sha": "9e403585027c1fc6812310f4a48d6868ce7c2c49", "filename": "libgfortran/intrinsics/signal.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fintrinsics%2Fsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/185d7d97506315bcf48bae38d410f68af50eba4a/libgfortran%2Fintrinsics%2Fsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsignal.c?ref=185d7d97506315bcf48bae38d410f68af50eba4a", "patch": "@@ -0,0 +1,170 @@\n+/* Implementation of the SIGNAL and ALARM g77 intrinsics\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_SIGNAL_H\n+#include <signal.h>\n+#endif\n+\n+#include <errno.h>\n+\n+/* SIGNAL subroutine with PROCEDURE as handler  */\n+extern void signal_sub (int *, void (*)(int), int *);\n+iexport_proto(signal_sub);\n+\n+void\n+signal_sub (int *number, void (*handler)(int), int *status)\n+{\n+#ifdef HAVE_SIGNAL\n+  if (status != NULL)\n+    *status = (int) signal (*number, handler);\n+  else\n+    signal (*number, handler);\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(signal_sub);\n+\n+\n+/* SIGNAL subroutine with INTEGER as handler  */\n+extern void signal_sub_int (int *, int *, int *);\n+iexport_proto(signal_sub_int);\n+\n+void\n+signal_sub_int (int *number, int *handler, int *status)\n+{\n+#ifdef HAVE_SIGNAL\n+  if (status != NULL)\n+    *status = (int) signal (*number, (void (*)(int)) *handler);\n+  else\n+    signal (*number, (void (*)(int)) *handler);\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(signal_sub_int);\n+\n+\n+/* SIGNAL function with PROCEDURE as handler  */\n+extern int signal_func (int *, void (*)(int));\n+iexport_proto(signal_func);\n+\n+int\n+signal_func (int *number, void (*handler)(int))\n+{\n+  int status;\n+  signal_sub (number, handler, &status);\n+  return status;\n+}\n+iexport(signal_func);\n+\n+\n+/* SIGNAL function with INTEGER as handler  */\n+extern int signal_func_int (int *, int *);\n+iexport_proto(signal_func_int);\n+\n+int\n+signal_func_int (int *number, int *handler)\n+{\n+  int status;\n+  signal_sub_int (number, handler, &status);\n+  return status;\n+}\n+iexport(signal_func_int);\n+\n+\n+\n+/* ALARM intrinsic with PROCEDURE as handler  */\n+extern void alarm_sub (int *, void (*)(int), int *);\n+iexport_proto(alarm_sub);\n+\n+void\n+alarm_sub (int *seconds, void (*handler)(int), int *status)\n+{\n+#if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n+  if (status != NULL)\n+    {\n+      if (signal (SIGALRM, handler) == SIG_ERR)\n+\t*status = -1;\n+      else\n+\t*status = alarm (*seconds);\n+    }\n+  else\n+    {\n+      signal (SIGALRM, handler);\n+      alarm (*seconds);\n+    }\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(alarm_sub);\n+\n+\n+/* ALARM intrinsic with INTEGER as handler  */\n+extern void alarm_sub_int (int *, int *, int *);\n+iexport_proto(alarm_sub_int);\n+\n+void\n+alarm_sub_int (int *seconds, int *handler, int *status)\n+{\n+#if defined (SIGALRM) && defined (HAVE_ALARM) && defined (HAVE_SIGNAL)\n+  if (status != NULL)\n+    {\n+      if (signal (SIGALRM, (void (*)(int)) handler) == SIG_ERR)\n+\t*status = -1;\n+      else\n+\t*status = alarm (*seconds);\n+    }\n+  else\n+    {\n+      signal (SIGALRM, (void (*)(int)) handler);\n+      alarm (*seconds);\n+    }\n+#else\n+  errno = ENOSYS;\n+  if (status != NULL)\n+    *status = -1;\n+#endif\n+}\n+iexport(alarm_sub_int);\n+"}]}