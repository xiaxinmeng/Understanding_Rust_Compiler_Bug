{"sha": "ec903a9c42e640af51c771cb3a844283acdc566b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5MDNhOWM0MmU2NDBhZjUxYzc3MWNiM2E4NDQyODNhY2RjNTY2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-12-15T17:42:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-12-15T17:42:47Z"}, "message": "functional (function::function): Move construct target.\n\n2009-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/functional (function::function): Move construct target.\n\t(function::operator=): Use perfect forwarding for argument.\n\t(function::operator()): Use new __throw_bad_function_call.\n\t* include/bits/functexcept.h (__throw_bad_function_call): Declare.\n\t* src/functexcept.cc (__throw_bad_function_call): Define.\n\t* config/abi/pre/gnu.ver: Add new symbol.\n\t* testsuite/20_util/function/cons/move_target.cc: New.\n\t* testsuite/20_util/function/assign/move_target.cc: New.\n\nFrom-SVN: r155261", "tree": {"sha": "c2f8524e3fae97a6caa54a748bb213d265ab2a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f8524e3fae97a6caa54a748bb213d265ab2a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec903a9c42e640af51c771cb3a844283acdc566b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec903a9c42e640af51c771cb3a844283acdc566b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec903a9c42e640af51c771cb3a844283acdc566b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec903a9c42e640af51c771cb3a844283acdc566b/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a71eb48e4348f8bc33f9b02e45fd69adbe66b9c"}], "stats": {"total": 151, "additions": 132, "deletions": 19}, "files": [{"sha": "4605d04e6bb2fb9076bf2058af17912f23e371e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -1,3 +1,14 @@\n+2009-12-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/functional (function::function): Move construct target.\n+\t(function::operator=): Use perfect forwarding for argument.\n+\t(function::operator()): Use new __throw_bad_function_call.\n+\t* include/bits/functexcept.h (__throw_bad_function_call): Declare.\n+\t* src/functexcept.cc (__throw_bad_function_call): Define.\n+\t* config/abi/pre/gnu.ver: Add new symbol.\n+\t* testsuite/20_util/function/cons/move_target.cc: New.\n+\t* testsuite/20_util/function/assign/move_target.cc: New.\n+\n 2009-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/42379"}, {"sha": "c40288a4b6b481f7718d1532ac91f143a50133c7", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -1068,6 +1068,8 @@ GLIBCXX_3.4.14 {\n     _ZNSs18_S_construct_aux_2*;\n     _ZNSbIwSt11char_traitsIwESaIwEE18_S_construct_aux_2*;\n \n+    _ZSt25__throw_bad_function_callv;\n+\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "5b2e9fc0455a2fc9c65f1606818b9b39c051d3b6", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -91,6 +91,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   void\n   __throw_future_error(int) __attribute__((__noreturn__));\n \n+  // Helpers for exception objects in <functional>\n+  void\n+  __throw_bad_function_call() __attribute__((__noreturn__));\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "19503bdf05e0f5951fe60717b062c74e065b9a4c", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -1571,8 +1571,8 @@ namespace std\n \t}\n \n \tstatic void\n-\t_M_init_functor(_Any_data& __functor, const _Functor& __f)\n-\t{ _M_init_functor(__functor, __f, _Local_storage()); }\n+\t_M_init_functor(_Any_data& __functor, _Functor&& __f)\n+\t{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }\n \t\n \ttemplate<typename _Signature>\n \t  static bool\n@@ -1595,13 +1595,13 @@ namespace std\n \t  { return true; }\n \n       private:\n-\tstatic void\n-\t_M_init_functor(_Any_data& __functor, const _Functor& __f, true_type)\n-\t{ new (__functor._M_access()) _Functor(__f); }\n+        static void\n+\t_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)\n+\t{ new (__functor._M_access()) _Functor(std::move(__f)); }\n \n \tstatic void\n-\t_M_init_functor(_Any_data& __functor, const _Functor& __f, false_type)\n-\t{ __functor._M_access<_Functor*>() = new _Functor(__f); }\n+\t_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)\n+\t{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }\n       };\n \n     template<typename _Functor>\n@@ -1927,9 +1927,9 @@ namespace std\n       template<typename _Functor>\n         typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value,\n \t                                function&>::__type\n-\toperator=(_Functor __f)\n+\toperator=(_Functor&& __f)\n \t{\n-\t  function(__f).swap(*this);\n+\t  function(std::forward<_Functor>(__f)).swap(*this);\n \t  return *this;\n \t}\n \n@@ -1969,9 +1969,10 @@ namespace std\n       /*\n       template<typename _Functor, typename _Alloc>\n         void\n-        assign(_Functor __f, const _Alloc& __a)\n+        assign(_Functor&& __f, const _Alloc& __a)\n         {\n-          function(__f, __a).swap(*this);\n+          function(allocator_arg, __a,\n+                   std::forward<_Functor>(__f)).swap(*this);\n         }\n       */\n       \n@@ -2066,7 +2067,7 @@ namespace std\n \t  {\n \t    _M_invoker = &_My_handler::_M_invoke;\n \t    _M_manager = &_My_handler::_M_manager;\n-\t    _My_handler::_M_init_functor(_M_functor, __f);\n+\t    _My_handler::_M_init_functor(_M_functor, std::move(__f));\n \t  }\n       }\n \n@@ -2076,13 +2077,7 @@ namespace std\n     operator()(_ArgTypes... __args) const\n     {\n       if (_M_empty())\n-        {\n-#if __EXCEPTIONS\n-          throw bad_function_call();\n-#else\n-          __builtin_abort();\n-#endif\n-        }\n+        __throw_bad_function_call();\n       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);\n     }\n "}, {"sha": "d47eccbe11c6b838ed4384be49ac1821bd94e5f6", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -29,6 +29,7 @@\n #include <ios>\n #include <system_error>\n #include <future>\n+#include <functional>\n \n #ifdef _GLIBCXX_USE_NLS\n # include <libintl.h>\n@@ -104,6 +105,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __throw_future_error(int __i)\n   { throw future_error(future_errc(__i)); }\n \n+  void\n+  __throw_bad_function_call()\n+  { throw bad_function_call(); }\n #else\n   void\n   __throw_bad_exception(void)\n@@ -169,6 +173,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __throw_future_error(int)\n   { std::abort(); }\n \n+  void\n+  __throw_bad_function_call()\n+  { std::abort(); }\n+\n #endif //__EXCEPTIONS\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "0a1c189e5048a9eb570440cf1a888ff51f3182a8", "filename": "libstdc++-v3/testsuite/20_util/function/assign/move_target.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fassign%2Fmove_target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fassign%2Fmove_target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fassign%2Fmove_target.cc?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+\n+struct moveable\n+{\n+  moveable() = default;\n+  ~moveable() = default;\n+  // target object must be CopyConstructible,\n+  // but should not be copied during this test\n+  moveable(const moveable& c) { throw \"copied\"; }\n+  moveable& operator=(const moveable&) = delete;\n+  moveable(moveable&&) { }\n+\n+  void operator()() const { }\n+};\n+\n+void test01()\n+{\n+  std::function<void ()> f;\n+  f = moveable();\n+  f();\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "2396ca10171dd9c09f35fd2d342ed43c25c01b4e", "filename": "libstdc++-v3/testsuite/20_util/function/cons/move_target.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec903a9c42e640af51c771cb3a844283acdc566b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fmove_target.cc?ref=ec903a9c42e640af51c771cb3a844283acdc566b", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+\n+struct moveable\n+{\n+  moveable() = default;\n+  ~moveable() = default;\n+  // target object must be CopyConstructible,\n+  // but should not be copied during this test\n+  moveable(const moveable& c) { throw \"copied\"; }\n+  moveable& operator=(const moveable&) = delete;\n+  moveable(moveable&&) { }\n+\n+  void operator()() const { }\n+};\n+\n+void test01()\n+{\n+  std::function<void ()> f = moveable();\n+  f();\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}]}