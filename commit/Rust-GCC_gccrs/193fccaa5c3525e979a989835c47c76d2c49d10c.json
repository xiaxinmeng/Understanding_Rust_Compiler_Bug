{"sha": "193fccaa5c3525e979a989835c47c76d2c49d10c", "node_id": "C_kwDOANBUbNoAKDE5M2ZjY2FhNWMzNTI1ZTk3OWE5ODk4MzVjNDdjNzZkMmM0OWQxMGM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-02T15:56:31Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-12-21T18:32:26Z"}, "message": "Fix PR 105532: match.pd patterns calling tree_nonzero_bits with vector types\n\nEven though this PR was reported with an ubsan issue, the problem is\ntree_nonzero_bits is being called with an expression which is a vector type.\nThis fixes three patterns I noticed which does that.\nAnd adds a testcase for one of the patterns.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/105532\n\t* match.pd (~(X >> Y) -> ~X >> Y): Check if it is an integral\n\ttype before calling tree_nonzero_bits.\n\t(popcount(X) + popcount(Y)): Likewise.\n\t(popcount(X&C1)): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/vector-shift-1.c: New test.", "tree": {"sha": "09f58b9f53e9287c91aa6a4eeb8a8ecf9a497b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f58b9f53e9287c91aa6a4eeb8a8ecf9a497b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/193fccaa5c3525e979a989835c47c76d2c49d10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193fccaa5c3525e979a989835c47c76d2c49d10c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193fccaa5c3525e979a989835c47c76d2c49d10c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193fccaa5c3525e979a989835c47c76d2c49d10c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e0d22025e0bf2af2e364cb7214a05512a0c431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e0d22025e0bf2af2e364cb7214a05512a0c431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e0d22025e0bf2af2e364cb7214a05512a0c431"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "697d8de9a40c35c244ed32c2936e695a7a3b1a96", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193fccaa5c3525e979a989835c47c76d2c49d10c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193fccaa5c3525e979a989835c47c76d2c49d10c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=193fccaa5c3525e979a989835c47c76d2c49d10c", "patch": "@@ -1370,7 +1370,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    /* For logical right shifts, this is possible only if @0 doesn't\n       have MSB set and the logical right shift is changed into\n       arithmetic shift.  */\n-   (if (!wi::neg_p (tree_nonzero_bits (@0)))\n+   (if (INTEGRAL_TYPE_P (type)\n+        && !wi::neg_p (tree_nonzero_bits (@0)))\n     (with { tree stype = signed_type_for (TREE_TYPE (@0)); }\n      (convert (rshift (bit_not! (convert:stype @0)) @1))))))\n \n@@ -7623,7 +7624,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */\n (simplify\n   (plus (POPCOUNT:s @0) (POPCOUNT:s @1))\n-  (if (wi::bit_and (tree_nonzero_bits (@0), tree_nonzero_bits (@1)) == 0)\n+  (if (INTEGRAL_TYPE_P (type)\n+       && wi::bit_and (tree_nonzero_bits (@0), tree_nonzero_bits (@1)) == 0)\n     (POPCOUNT (bit_ior @0 @1))))\n \n /* popcount(X) == 0 is X == 0, and related (in)equalities.  */\n@@ -7655,15 +7657,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for pfun (POPCOUNT PARITY)\n   (simplify\n     (pfun @0)\n-    (with { wide_int nz = tree_nonzero_bits (@0); }\n-      (switch\n-\t(if (nz == 1)\n-\t  (convert @0))\n-\t(if (wi::popcount (nz) == 1)\n-\t  (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n-\t    (convert (rshift:utype (convert:utype @0)\n-\t\t\t\t   { build_int_cst (integer_type_node,\n-\t\t\t\t\t\t    wi::ctz (nz)); }))))))))\n+    (if (INTEGRAL_TYPE_P (type))\n+     (with { wide_int nz = tree_nonzero_bits (@0); }\n+       (switch\n+\t (if (nz == 1)\n+\t   (convert @0))\n+\t (if (wi::popcount (nz) == 1)\n+\t   (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n+\t     (convert (rshift:utype (convert:utype @0)\n+\t\t\t\t    { build_int_cst (integer_type_node,\n+\t\t\t\t\t\t     wi::ctz (nz)); })))))))))\n \n #if GIMPLE\n /* 64- and 32-bits branchless implementations of popcount are detected:"}, {"sha": "142ea56d5bb06e490cb2913849f567175788ef31", "filename": "gcc/testsuite/gcc.c-torture/compile/vector-shift-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/193fccaa5c3525e979a989835c47c76d2c49d10c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvector-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/193fccaa5c3525e979a989835c47c76d2c49d10c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvector-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fvector-shift-1.c?ref=193fccaa5c3525e979a989835c47c76d2c49d10c", "patch": "@@ -0,0 +1,8 @@\n+typedef unsigned char __attribute__((__vector_size__ (1))) U;\n+\n+U\n+foo (U u)\n+{\n+  u = u == u;\n+  return (~(u >> 255));\n+}"}]}