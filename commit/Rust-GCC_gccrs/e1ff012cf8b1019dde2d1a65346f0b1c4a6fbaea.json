{"sha": "e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmZjAxMmNmOGIxMDE5ZGRlMmQxYTY1MzQ2ZjBiMWM0YTZmYmFlYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-29T00:51:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-29T00:51:21Z"}, "message": "i386.c: Don't error on EXTRA_CONSTRAINT defined.\n\n        * config/i386/i386.c: Don't error on EXTRA_CONSTRAINT defined.\n        (call_insn_operand): Don't expect a surrounding mem.\n        (constant_call_address_operand): Likewise.\n        * config/i386/i386.h (PREDICATE_CODES): Update.\n        * config/i386/i386.md (call patterns): Move the match_operand\n        for the call destination inside the mem.\n\nFrom-SVN: r36024", "tree": {"sha": "8f525e55c0a3ddb2de3321636646544d9b0e18b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f525e55c0a3ddb2de3321636646544d9b0e18b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/comments", "author": null, "committer": null, "parents": [{"sha": "c2cba7a96e04069011ae508e3027bbf128208040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cba7a96e04069011ae508e3027bbf128208040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cba7a96e04069011ae508e3027bbf128208040"}], "stats": {"total": 60, "additions": 25, "deletions": 35}, "files": [{"sha": "5e5f8e4c1d556eabc51a53bae83d9a000a872f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "patch": "@@ -1,3 +1,12 @@\n+2000-08-28  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/i386/i386.c: Don't error on EXTRA_CONSTRAINT defined.\n+\t(call_insn_operand): Don't expect a surrounding mem.\n+\t(constant_call_address_operand): Likewise.\n+\t* config/i386/i386.h (PREDICATE_CODES): Update.\n+\t* config/i386/i386.md (call patterns): Move the match_operand\n+\tfor the call destination inside the mem.\n+\n 2000-08-28  Richard Henderson  <rth@cygnus.com>\n \n \t* local-alloc.c (requires_inout): Don't use reserved range for"}, {"sha": "a1746a15695388951b69815daa4f5d45ad6bf09d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "patch": "@@ -42,15 +42,6 @@ Boston, MA 02111-1307, USA. */\n #include \"basic-block.h\"\n #include \"ggc.h\"\n \n-#ifdef EXTRA_CONSTRAINT\n-/* If EXTRA_CONSTRAINT is defined, then the 'S'\n-   constraint in REG_CLASS_FROM_LETTER will no longer work, and various\n-   asm statements that need 'S' for class SIREG will break.  */\n- error EXTRA_CONSTRAINT conflicts with S constraint letter\n-/* The previous line used to be #error, but some compilers barf\n-   even if the conditional was untrue.  */\n-#endif\n-\n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT -1\n #endif\n@@ -1078,10 +1069,6 @@ call_insn_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  if (GET_CODE (op) != MEM)\n-    return 0;\n-  op = XEXP (op, 0);\n-\n   /* Disallow indirect through a virtual register.  This leads to\n      compiler aborts when trying to eliminate them.  */\n   if (GET_CODE (op) == REG\n@@ -1114,9 +1101,7 @@ constant_call_address_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (op) == MEM\n-\t  && CONSTANT_ADDRESS_P (XEXP (op, 0))\n-\t  && GET_CODE (XEXP (op, 0)) !=  CONST_INT);\n+  return GET_CODE (op) == SYMBOL_REF;\n }\n \n /* Match exactly zero and one.  */"}, {"sha": "e32a16822ca4bdba2fd5b96d667742725236698f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "patch": "@@ -2585,8 +2585,8 @@ do { long l;\t\t\t\t\t\t\\\n   {\"aligned_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n \t\t       LABEL_REF, SUBREG, REG, MEM}},\t\t\t\\\n   {\"pic_symbolic_operand\", {CONST}},\t\t\t\t\t\\\n-  {\"call_insn_operand\", {MEM}},\t\t\t\t\t\t\\\n-  {\"constant_call_address_operand\", {MEM}},\t\t\t\t\\\n+  {\"call_insn_operand\", {REG, SUBREG, MEM, SYMBOL_REF}},\t\t\\\n+  {\"constant_call_address_operand\", {SYMBOL_REF}},\t\t\t\\\n   {\"const0_operand\", {CONST_INT, CONST_DOUBLE}},\t\t\t\\\n   {\"const1_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"const248_operand\", {CONST_INT}},\t\t\t\t\t\\"}, {"sha": "c377978a5c437c72ecbdaeaf462304cea5697d82", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e1ff012cf8b1019dde2d1a65346f0b1c4a6fbaea", "patch": "@@ -8457,12 +8457,12 @@\n       && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF\n \t  || !SYMBOL_REF_FLAG (XEXP (operands[0], 0))))\n     current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (operands[0], QImode))\n+  if (! call_insn_operand (XEXP (operands[0], 0), Pmode))\n     XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n }\")\n \n (define_insn \"*call_pop_0\"\n-  [(call (match_operand:QI 0 \"constant_call_address_operand\" \"\")\n+  [(call (mem:QI (match_operand:SI 0 \"constant_call_address_operand\" \"\"))\n \t (match_operand:SI 1 \"\" \"\"))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"\")))]\n@@ -8477,21 +8477,20 @@\n   [(set_attr \"type\" \"call\")])\n   \n (define_insn \"*call_pop_1\"\n-  [(call (match_operand:QI 0 \"call_insn_operand\" \"m\")\n+  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"rsm\"))\n \t (match_operand:SI 1 \"\" \"\"))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"*\n {\n-  if (constant_call_address_operand (operands[0], QImode))\n+  if (constant_call_address_operand (operands[0], Pmode))\n     {\n       if (SIBLING_CALL_P (insn))\n \treturn \\\"jmp\\\\t%P0\\\";\n       else\n \treturn \\\"call\\\\t%P0\\\";\n     }\n-  operands[0] = XEXP (operands[0], 0);\n   if (SIBLING_CALL_P (insn))\n     return \\\"jmp\\\\t%*%0\\\";\n   else\n@@ -8513,12 +8512,12 @@\n       && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF\n \t  || !SYMBOL_REF_FLAG (XEXP (operands[0], 0))))\n     current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (operands[0], QImode))\n+  if (! call_insn_operand (XEXP (operands[0], 0), Pmode))\n     XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n }\")\n \n (define_insn \"*call_0\"\n-  [(call (match_operand:QI 0 \"constant_call_address_operand\" \"\")\n+  [(call (mem:QI (match_operand:SI 0 \"constant_call_address_operand\" \"\"))\n \t (match_operand:SI 1 \"\" \"\"))]\n   \"\"\n   \"*\n@@ -8531,7 +8530,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_1\"\n-  [(call (match_operand:QI 0 \"call_insn_operand\" \"m\")\n+  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"rsm\"))\n \t (match_operand:SI 1 \"\" \"\"))]\n   \"\"\n   \"*\n@@ -8543,7 +8542,6 @@\n       else\n \treturn \\\"call\\\\t%P0\\\";\n     }\n-  operands[0] = XEXP (operands[0], 0);\n   if (SIBLING_CALL_P (insn))\n     return \\\"jmp\\\\t%*%0\\\";\n   else\n@@ -8576,7 +8574,7 @@\n       && (GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF\n \t  || !SYMBOL_REF_FLAG (XEXP (operands[1], 0))))\n     current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (operands[1], QImode))\n+  if (! call_insn_operand (XEXP (operands[1], 0), Pmode))\n     XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n }\")\n \n@@ -8595,7 +8593,7 @@\n       && (GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF\n \t  || !SYMBOL_REF_FLAG (XEXP (operands[1], 0))))\n     current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (operands[1], QImode))\n+  if (! call_insn_operand (XEXP (operands[1], 0), Pmode))\n     XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n }\")\n \n@@ -11056,7 +11054,7 @@\n \n (define_insn \"*call_value_pop_0\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"constant_call_address_operand\" \"\")\n+\t(call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n \t      (match_operand:SI 2 \"\" \"\")))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))]\n@@ -11072,7 +11070,7 @@\n \n (define_insn \"*call_value_pop_1\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"call_insn_operand\" \"m\")\n+\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"rsm\"))\n \t      (match_operand:SI 2 \"\" \"\")))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n@@ -11086,7 +11084,6 @@\n       else\n \treturn \\\"call\\\\t%P1\\\";\n     }\n-  operands[1] = XEXP (operands[1], 0);\n   if (SIBLING_CALL_P (insn))\n     return \\\"jmp\\\\t%*%1\\\";\n   else\n@@ -11096,7 +11093,7 @@\n \n (define_insn \"*call_value_0\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"constant_call_address_operand\" \"\")\n+\t(call (mem:QI (match_operand:SI 1 \"constant_call_address_operand\" \"\"))\n \t      (match_operand:SI 2 \"\" \"\")))]\n   \"\"\n   \"*\n@@ -11110,7 +11107,7 @@\n \n (define_insn \"*call_value_1\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"call_insn_operand\" \"m\")\n+\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"rsm\"))\n \t      (match_operand:SI 2 \"\" \"\")))]\n   \"\"\n   \"*\n@@ -11122,7 +11119,6 @@\n       else\n \treturn \\\"call\\\\t%P1\\\";\n     }\n-  operands[1] = XEXP (operands[1], 0);\n   if (SIBLING_CALL_P (insn))\n     return \\\"jmp\\\\t%*%1\\\";\n   else"}]}