{"sha": "8f6e6bf375959dc0c4aad0df8374af715dd2e440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2ZTZiZjM3NTk1OWRjMGM0YWFkMGRmODM3NGFmNzE1ZGQyZTQ0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-12-04T07:47:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-12-04T07:47:32Z"}, "message": "tree.c (walk_type_fields): Do not handle TYPE_MIN_VALUE and TYPE_MAX_VALUE for scalar types here but...\n\n\t* tree.c (walk_type_fields): Do not handle TYPE_MIN_VALUE and\n\tTYPE_MAX_VALUE for scalar types here but...\n\t(walk_tree): ...there instead.  Return NULL_TREE if the TYPE_DECL\n\tis attached an error mark, and the return value of the callback\n\tif it is not NULL_TREE.\n\ncp/\n\t* pt.c (for_each_template_parm_r) <INTEGER_TYPE>: New case.\n\tCall for_each_template_parm on TYPE_MIN_VALUE and TYPE_MAX_VALUE.\n\ntestsuite/\n\t* gnat.dg/pointer_variable_bounds.adb: New test.\n\t* gnat.dg/pointer_variable_bounds.ads: Likewise.\n\t* gnat.dg/pointer_variable_bounds_q.ads: Likewise.\n\nFrom-SVN: r119481", "tree": {"sha": "d48f078695e6c5b3e49f0ae019a91f707e95c60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48f078695e6c5b3e49f0ae019a91f707e95c60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f6e6bf375959dc0c4aad0df8374af715dd2e440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6e6bf375959dc0c4aad0df8374af715dd2e440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6e6bf375959dc0c4aad0df8374af715dd2e440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6e6bf375959dc0c4aad0df8374af715dd2e440/comments", "author": null, "committer": null, "parents": [{"sha": "b4fc8a637bbef0296d3edcc6d21051f79092491f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fc8a637bbef0296d3edcc6d21051f79092491f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fc8a637bbef0296d3edcc6d21051f79092491f"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "0a0984d96da4c98bc6520de8e01da5aa2b0222df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -1,3 +1,11 @@\n+2006-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (walk_type_fields): Do not handle TYPE_MIN_VALUE and\n+\tTYPE_MAX_VALUE for scalar types here but...\n+\t(walk_tree): ...there instead.  Return NULL_TREE if the TYPE_DECL\n+\tis attached an error mark, and the return value of the callback\n+\tif it is not NULL_TREE.\n+\n 2006-12-04  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu.md (_mulv4si3): Remove unused local variables."}, {"sha": "cf577f0d9f84ddaaa9f1b629b87cf49ca3e7be60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -1,3 +1,8 @@\n+2006-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* pt.c (for_each_template_parm_r) <INTEGER_TYPE>: New case.\n+\tCall for_each_template_parm on TYPE_MIN_VALUE and TYPE_MAX_VALUE.\n+\n 2006-12-03  Richard Henderson  <rth@redhat.com>\n             Andrew Pinski  <pinskia@gmail.com>\n "}, {"sha": "0b8eecac3ff4cd16ada73a383a58613c112991ea", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -4958,6 +4958,14 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n \treturn error_mark_node;\n       break;\n \n+    case INTEGER_TYPE:\n+      if (for_each_template_parm (TYPE_MIN_VALUE (t),\n+\t\t\t\t  fn, data, pfd->visited)\n+\t  || for_each_template_parm (TYPE_MAX_VALUE (t),\n+\t\t\t\t     fn, data, pfd->visited))\n+\treturn error_mark_node;\n+      break;\n+\n     case METHOD_TYPE:\n       /* Since we're not going to walk subtrees, we have to do this\n \t explicitly here.  */"}, {"sha": "c460815853501332234fd398a7c05b82e46489cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -1,3 +1,9 @@\n+2006-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pointer_variable_bounds.adb: New test.\n+\t* gnat.dg/pointer_variable_bounds.ads: Likewise.\n+\t* gnat.dg/pointer_variable_bounds_q.ads: Likewise.\n+\n 2006-12-03  Eric Christopher  <echristo@apple.com>\n \n \t* gcc.target/i386/stack-prot-kernel.c: Skip for x86_64-*-darwin."}, {"sha": "5cc838a383ef88ead703cccf716ae958d8eb41f5", "filename": "gcc/testsuite/gnat.dg/pointer_variable_bounds.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.adb?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile }\r\n+-- { dg-options \"-gnatws\" }\r\n+\r\n+package body pointer_variable_bounds is\r\n+\r\n+  function COMPONENT_DAT(BP : in BUNDLE_POINTER_TYPE; CP : in COMP_POINTER_TYPE) return HALF_INTEGER is\r\n+    type CP_TYPE is access COMP_POINTER_TYPE;\r\n+    type CD_TYPE is access HALF_INTEGER;\r\n+    CD : CD_TYPE;\r\n+  begin\r\n+    return CD.all;\r\n+  end;\r\n+\r\n+  procedure BUNDLE_DAT(BP : in BUNDLE_POINTER_TYPE) is\r\n+    N0 : C_POINTER_TYPE := COMPONENT_DAT(BP, 4);\r\n+  begin\r\n+    null;\r\n+  end;\r\n+\r\n+  procedure SEQUENCE_DAT(BP : in BUNDLE_POINTER_TYPE) is\r\n+    N0 : C_POINTER_TYPE := COMPONENT_DAT(BP, 4);\r\n+  begin\r\n+    null;\r\n+  end;\r\n+\r\n+end pointer_variable_bounds;\r"}, {"sha": "b18c354077d59c2cba3408540c7fbb5a24f18424", "filename": "gcc/testsuite/gnat.dg/pointer_variable_bounds.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds.ads?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -0,0 +1,16 @@\n+with pointer_variable_bounds_q; use pointer_variable_bounds_q;\r\n+\r\n+package pointer_variable_bounds is\r\n+\r\n+  type HALF_INTEGER is range -32768 .. 32767;\r\n+  subtype HALF_NATURAL is HALF_INTEGER range 0 .. 32767;\r\n+\r\n+  MAX_COMPS : constant HALF_NATURAL := HALF_NATURAL(A_MAX_COMPS);\r\n+  subtype COMP_POINTER_TYPE is HALF_NATURAL range 0 .. MAX_COMPS;\r\n+  subtype BUNDLE_POINTER_TYPE is HALF_NATURAL range 0 .. 1;\r\n+  subtype C_POINTER_TYPE is HALF_NATURAL range 0 .. 1;\r\n+\r\n+  procedure BUNDLE_DAT(BP : in BUNDLE_POINTER_TYPE);\r\n+  procedure SEQUENCE_DAT(BP : in BUNDLE_POINTER_TYPE);\r\n+\r\n+end pointer_variable_bounds;\r"}, {"sha": "03997f77e630cc10d23210fb4f3caa34a3452b55", "filename": "gcc/testsuite/gnat.dg/pointer_variable_bounds_q.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds_q.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds_q.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpointer_variable_bounds_q.ads?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -0,0 +1,6 @@\n+package pointer_variable_bounds_q is\n+\n+  type A_SIZE_TYPE is new INTEGER range 0 .. 65536;\n+  function A_MAX_COMPS return A_SIZE_TYPE;\n+\n+end pointer_variable_bounds_q;"}, {"sha": "2d2ef08e5f7091e0f7651ebbbdd91c5ecf8c4959", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6e6bf375959dc0c4aad0df8374af715dd2e440/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8f6e6bf375959dc0c4aad0df8374af715dd2e440", "patch": "@@ -7442,14 +7442,6 @@ walk_type_fields (tree type, walk_tree_fn func, void *data,\n       WALK_SUBTREE (TYPE_DOMAIN (type));\n       break;\n \n-    case BOOLEAN_TYPE:\n-    case ENUMERAL_TYPE:\n-    case INTEGER_TYPE:\n-    case REAL_TYPE:\n-      WALK_SUBTREE (TYPE_MIN_VALUE (type));\n-      WALK_SUBTREE (TYPE_MAX_VALUE (type));\n-      break;\n-\n     case OFFSET_TYPE:\n       WALK_SUBTREE (TREE_TYPE (type));\n       WALK_SUBTREE (TYPE_OFFSET_BASETYPE (type));\n@@ -7518,7 +7510,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \n   result = lang_hooks.tree_inlining.walk_subtrees (tp, &walk_subtrees, func,\n \t\t\t\t\t\t   data, pset);\n-  if (result || ! walk_subtrees)\n+  if (result || !walk_subtrees)\n     return result;\n \n   switch (code)\n@@ -7648,23 +7640,29 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n       }\n \n     case DECL_EXPR:\n-      /* Walk into various fields of the type that it's defining.  We only\n-\t want to walk into these fields of a type in this case.  Note that\n-\t decls get walked as part of the processing of a BIND_EXPR.\n-\n-\t ??? Precisely which fields of types that we are supposed to walk in\n-\t this case vs. the normal case aren't well defined.  */\n-      if (TREE_CODE (DECL_EXPR_DECL (*tp)) == TYPE_DECL\n-\t  && TREE_CODE (TREE_TYPE (DECL_EXPR_DECL (*tp))) != ERROR_MARK)\n+      /* If this is a TYPE_DECL, walk into the fields of the type that it's\n+\t defining.  We only want to walk into these fields of a type in this\n+\t case and not in the general case of a mere reference to the type.\n+\n+\t The criterion is as follows: if the field can be an expression, it\n+\t must be walked only here.  This should be in keeping with the fields\n+\t that are directly gimplified in gimplify_type_sizes in order for the\n+\t mark/copy-if-shared/unmark machinery of the gimplifier to work with\n+\t variable-sized types.\n+  \n+\t Note that DECLs get walked as part of processing the BIND_EXPR.  */\n+      if (TREE_CODE (DECL_EXPR_DECL (*tp)) == TYPE_DECL)\n \t{\n \t  tree *type_p = &TREE_TYPE (DECL_EXPR_DECL (*tp));\n+\t  if (TREE_CODE (*type_p) == ERROR_MARK)\n+\t    return NULL_TREE;\n \n \t  /* Call the function for the type.  See if it returns anything or\n \t     doesn't want us to continue.  If we are to continue, walk both\n \t     the normal fields and those for the declaration case.  */\n \t  result = (*func) (type_p, &walk_subtrees, data);\n \t  if (result || !walk_subtrees)\n-\t    return NULL_TREE;\n+\t    return result;\n \n \t  result = walk_type_fields (*type_p, func, data, pset);\n \t  if (result)\n@@ -7695,6 +7693,16 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \t\t}\n \t    }\n \n+\t  /* Same for scalar types.  */\n+\t  else if (TREE_CODE (*type_p) == BOOLEAN_TYPE\n+\t\t   || TREE_CODE (*type_p) == ENUMERAL_TYPE\n+\t\t   || TREE_CODE (*type_p) == INTEGER_TYPE\n+\t\t   || TREE_CODE (*type_p) == REAL_TYPE)\n+\t    {\n+\t      WALK_SUBTREE (TYPE_MIN_VALUE (*type_p));\n+\t      WALK_SUBTREE (TYPE_MAX_VALUE (*type_p));\n+\t    }\n+\n \t  WALK_SUBTREE (TYPE_SIZE (*type_p));\n \t  WALK_SUBTREE_TAIL (TYPE_SIZE_UNIT (*type_p));\n \t}"}]}