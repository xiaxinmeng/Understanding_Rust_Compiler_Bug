{"sha": "bde63fdea41c6c9952ab3607eb497d5c698e85c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlNjNmZGVhNDFjNmM5OTUyYWIzNjA3ZWI0OTdkNWM2OThlODVjMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-05-31T12:26:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-05-31T12:26:03Z"}, "message": "[1/2] Add get_next_strinfo helper function\n\nThis patch just adds a helper function for getting the next strinfo\nin a chain, since part 2 adds another place where we do that.\n\n2017-05-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-ssa-strlen.c (get_next_strinfo): New function.\n\t(get_stridx_plus_constant): Use it.\n\t(zero_length_string): Likewise.\n\t(adjust_related_strinfos): Likewise.\n\t(adjust_last_stmt): Likewise.\n\nFrom-SVN: r248732", "tree": {"sha": "bded8b42d9c1dd7f594f3f10734dd4f18d2ec0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bded8b42d9c1dd7f594f3f10734dd4f18d2ec0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde63fdea41c6c9952ab3607eb497d5c698e85c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde63fdea41c6c9952ab3607eb497d5c698e85c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde63fdea41c6c9952ab3607eb497d5c698e85c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde63fdea41c6c9952ab3607eb497d5c698e85c3/comments", "author": null, "committer": null, "parents": [{"sha": "89c88990a86d03d9c01fee81ef662d993c35f5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c88990a86d03d9c01fee81ef662d993c35f5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c88990a86d03d9c01fee81ef662d993c35f5e9"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "01c06b16e1e6dff33a533d237802c5a2edd35e96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde63fdea41c6c9952ab3607eb497d5c698e85c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde63fdea41c6c9952ab3607eb497d5c698e85c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bde63fdea41c6c9952ab3607eb497d5c698e85c3", "patch": "@@ -1,3 +1,11 @@\n+2017-05-31  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-ssa-strlen.c (get_next_strinfo): New function.\n+\t(get_stridx_plus_constant): Use it.\n+\t(zero_length_string): Likewise.\n+\t(adjust_related_strinfos): Likewise.\n+\t(adjust_last_stmt): Likewise.\n+\n 2017-05-31  Richard Biener  <rguenther@suse.de>\n \n \tPR target/80880"}, {"sha": "e4f18dba1e7d7f27bb15e4d0d4c979e7a1553cee", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde63fdea41c6c9952ab3607eb497d5c698e85c3/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde63fdea41c6c9952ab3607eb497d5c698e85c3/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=bde63fdea41c6c9952ab3607eb497d5c698e85c3", "patch": "@@ -156,6 +156,19 @@ get_strinfo (int idx)\n   return (*stridx_to_strinfo)[idx];\n }\n \n+/* Get the next strinfo in the chain after SI, or null if none.  */\n+\n+static inline strinfo *\n+get_next_strinfo (strinfo *si)\n+{\n+  if (si->next == 0)\n+    return NULL;\n+  strinfo *nextsi = get_strinfo (si->next);\n+  if (nextsi == NULL || nextsi->first != si->first || nextsi->prev != si->idx)\n+    return NULL;\n+  return nextsi;\n+}\n+\n /* Helper function for get_stridx.  */\n \n static int\n@@ -665,10 +678,8 @@ get_stridx_plus_constant (strinfo *basesi, HOST_WIDE_INT off, tree ptr)\n   gcc_checking_assert (compare_tree_int (si->length, off) != -1);\n   for (chainsi = si; chainsi->next; chainsi = si)\n     {\n-      si = get_strinfo (chainsi->next);\n+      si = get_next_strinfo (chainsi);\n       if (si == NULL\n-\t  || si->first != chainsi->first\n-\t  || si->prev != chainsi->idx\n \t  || si->length == NULL_TREE\n \t  || TREE_CODE (si->length) != INTEGER_CST)\n \tbreak;\n@@ -736,26 +747,18 @@ zero_length_string (tree ptr, strinfo *chainsi)\n       si = verify_related_strinfos (chainsi);\n       if (si)\n \t{\n-\t  chainsi = si;\n-\t  for (; chainsi->next; chainsi = si)\n+\t  do\n \t    {\n-\t      if (chainsi->endptr == NULL_TREE)\n+\t      gcc_assert (si->length || si->stmt);\n+\t      if (si->endptr == NULL_TREE)\n \t\t{\n-\t\t  chainsi = unshare_strinfo (chainsi);\n-\t\t  chainsi->endptr = ptr;\n+\t\t  si = unshare_strinfo (si);\n+\t\t  si->endptr = ptr;\n \t\t}\n-\t      si = get_strinfo (chainsi->next);\n-\t      if (si == NULL\n-\t\t  || si->first != chainsi->first\n-\t\t  || si->prev != chainsi->idx)\n-\t\tbreak;\n-\t    }\n-\t  gcc_assert (chainsi->length || chainsi->stmt);\n-\t  if (chainsi->endptr == NULL_TREE)\n-\t    {\n-\t      chainsi = unshare_strinfo (chainsi);\n-\t      chainsi->endptr = ptr;\n+\t      chainsi = si;\n+\t      si = get_next_strinfo (si);\n \t    }\n+\t  while (si != NULL);\n \t  if (chainsi->length && integer_zerop (chainsi->length))\n \t    {\n \t      if (chainsi->next)\n@@ -833,12 +836,8 @@ adjust_related_strinfos (location_t loc, strinfo *origsi, tree adj)\n \t  si->endptr = NULL_TREE;\n \t  si->dont_invalidate = true;\n \t}\n-      if (si->next == 0)\n-\treturn;\n-      nsi = get_strinfo (si->next);\n-      if (nsi == NULL\n-\t  || nsi->first != si->first\n-\t  || nsi->prev != si->idx)\n+      nsi = get_next_strinfo (si);\n+      if (nsi == NULL)\n \treturn;\n       si = nsi;\n     }\n@@ -995,15 +994,9 @@ adjust_last_stmt (strinfo *si, gimple *stmt, bool is_strcat)\n \treturn;\n       while (firstsi != lastsi)\n \t{\n-\t  strinfo *nextsi;\n-\t  if (firstsi->next == 0)\n-\t    return;\n-\t  nextsi = get_strinfo (firstsi->next);\n-\t  if (nextsi == NULL\n-\t      || nextsi->prev != firstsi->idx\n-\t      || nextsi->first != si->first)\n+\t  firstsi = get_next_strinfo (firstsi);\n+\t  if (firstsi == NULL)\n \t    return;\n-\t  firstsi = nextsi;\n \t}\n     }\n "}]}