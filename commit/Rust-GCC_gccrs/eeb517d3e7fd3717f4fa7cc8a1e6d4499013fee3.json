{"sha": "eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViNTE3ZDNlN2ZkMzcxN2Y0ZmE3Y2M4YTFlNmQ0NDk5MDEzZmVlMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-25T12:42:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-25T12:42:53Z"}, "message": "Fix filesystem::path::lexically_normal algorithm\n\n\t* src/filesystem/std-path.cc (path::lexically_normal): Add missing\n\tstep to algorithm, for removing dot-dot elements after root-directory.\n\t* testsuite/27_io/filesystem/operations/canonical.cc: Use\n\tcompare_paths for more exhaustive checks.\n\t* testsuite/27_io/filesystem/operations/proximate.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/append/path.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/concat/path.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/concat/strings.cc: Fix comment.\n\t* testsuite/27_io/filesystem/path/construct/locale.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/path/generation/normal.cc: Use\n\tcompare_paths for more exhaustive checks. Add extra testcases.\n\t* testsuite/27_io/filesystem/path/generation/proximate.cc: Use\n\tcompare_paths for more exhaustive checks.\n\t* testsuite/27_io/filesystem/path/generation/relative.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Remove\n\tunused header.\n\t* testsuite/27_io/filesystem/path/modifiers/make_preferred.cc: Fix\n\tcomment.\n\t* testsuite/27_io/filesystem/path/modifiers/remove_filename.cc: Use\n\tcompare_paths for more exhaustive checks.\n\t* testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/path/modifiers/replace_filename.cc:\n\tLikewise.\n\t* testsuite/util/testsuite_fs.h (compare_paths): Also compare native\n\tstrings.\n\nFrom-SVN: r254075", "tree": {"sha": "9e06daf731c47d427c3aa8fd30441f6be11bd4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e06daf731c47d427c3aa8fd30441f6be11bd4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de583cc1809a49a4b38950d2fc4633e31085a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de583cc1809a49a4b38950d2fc4633e31085a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de583cc1809a49a4b38950d2fc4633e31085a33"}], "stats": {"total": 300, "additions": 201, "deletions": 99}, "files": [{"sha": "5a694c74675a7e38abdcda02eef010c802d493b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -1,5 +1,34 @@\n 2017-10-25  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/filesystem/std-path.cc (path::lexically_normal): Add missing\n+\tstep to algorithm, for removing dot-dot elements after root-directory.\n+\t* testsuite/27_io/filesystem/operations/canonical.cc: Use\n+\tcompare_paths for more exhaustive checks.\n+\t* testsuite/27_io/filesystem/operations/proximate.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/append/path.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/concat/path.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/concat/strings.cc: Fix comment.\n+\t* testsuite/27_io/filesystem/path/construct/locale.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/generation/normal.cc: Use\n+\tcompare_paths for more exhaustive checks. Add extra testcases.\n+\t* testsuite/27_io/filesystem/path/generation/proximate.cc: Use\n+\tcompare_paths for more exhaustive checks.\n+\t* testsuite/27_io/filesystem/path/generation/relative.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Remove\n+\tunused header.\n+\t* testsuite/27_io/filesystem/path/modifiers/make_preferred.cc: Fix\n+\tcomment.\n+\t* testsuite/27_io/filesystem/path/modifiers/remove_filename.cc: Use\n+\tcompare_paths for more exhaustive checks.\n+\t* testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/modifiers/replace_filename.cc:\n+\tLikewise.\n+\t* testsuite/util/testsuite_fs.h (compare_paths): Also compare native\n+\tstrings.\n+\n \tPR libstdc++/82706\n \t* testsuite/27_io/filesystem/operations/permissions.cc: Fix test.\n "}, {"sha": "1e2a8fad584ad322d99337fc56bb9f63291fa5cc", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -365,6 +365,8 @@ path::lexically_normal() const\n   - As long as any appear, remove a non-dot-dot filename immediately followed\n     by a directory-separator and a dot-dot filename, along with any immediately\n     following directory-separator.\n+  - If there is a root-directory, remove all dot-dot filenames and any\n+    directory-separators immediately following them.\n   - If the last filename is dot-dot, remove any trailing directory-separator.\n   - If the path is empty, add a dot.\n   */\n@@ -388,7 +390,7 @@ path::lexically_normal() const\n \t{\n \t  if (ret.has_filename() && !is_dotdot(ret.filename()))\n \t    ret.remove_filename();\n-\t  else\n+\t  else if (ret.has_filename() || !ret.has_root_directory())\n \t    ret /= p;\n \t}\n       else if (is_dot(p))"}, {"sha": "47305a8f5273179274955a932b4d0b57f0488c4c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/canonical.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -24,6 +24,7 @@\n #include <testsuite_fs.h>\n \n namespace fs = std::filesystem;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n@@ -36,42 +37,42 @@ test01()\n \n   create_directory(p);\n   auto p2 = canonical( p, ec );\n-  VERIFY( p2 == fs::current_path()/p );\n+  compare_paths( p2, fs::current_path()/p );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p2 = canonical( fs::current_path() / \".\" / (p.native() + \"////././.\"), ec );\n-  VERIFY( p2 == fs::current_path()/p );\n+  compare_paths( p2, fs::current_path()/p );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p = fs::current_path();\n   p2 = canonical( p, ec );\n-  VERIFY( p2 == p );\n+  compare_paths( p2, p );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p = \"/\";\n   p = canonical( p, ec );\n-  VERIFY( p == \"/\" );\n+  compare_paths( p, \"/\" );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p = \"/.\";\n   p = canonical( p, ec );\n-  VERIFY( p == \"/\" );\n+  compare_paths( p, \"/\" );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p = \"/..\";\n   p = canonical( p, ec );\n-  VERIFY( p == \"/\" );\n+  compare_paths( p, \"/\" );\n   VERIFY( !ec );\n \n   ec = bad_ec;\n   p = \"/../.././.\";\n   p = canonical( p, ec );\n-  VERIFY( p == \"/\" );\n+  compare_paths( p, \"/\" );\n   VERIFY( !ec );\n }\n \n@@ -115,17 +116,17 @@ test03()\n   auto barc = canonical(bar);\n \n   auto p1 = fs::canonical(dir/\"foo//.///..//./\");\n-  VERIFY( p1 == dirc );\n+  compare_paths( p1, dirc );\n   auto p2 = fs::canonical(dir/\"foo//./baz///..//./\");\n-  VERIFY( p2 == dirc );\n+  compare_paths( p2, dirc );\n   auto p3 = fs::canonical(dir/\"foo//./baz////./\");\n-  VERIFY( p3 == barc );\n+  compare_paths( p3, barc );\n   auto p4 = fs::canonical(dir/\"foo//./baz///..//./bar\");\n-  VERIFY( p4 == barc );\n+  compare_paths( p4, barc );\n   auto p5 = fs::canonical(dir/\"foo//./baz///..//./bar/\");\n-  VERIFY( p5 == p4 );\n+  compare_paths( p5, p4 );\n   auto p6 = fs::canonical(dir/\"foo//./baz///..//./bar/.\");\n-  VERIFY( p6 == p4 );\n+  compare_paths( p6, p4 );\n \n   remove_all(dir);\n }"}, {"sha": "99b6568abeb5c9e3cd88e78b1fb3a1865b7c1d53", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/proximate.cc", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -21,41 +21,43 @@\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n \n using std::filesystem::proximate;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n-  VERIFY( proximate(\"/a/d\", \"/a/b/c\") == \"../../d\" );\n-  VERIFY( proximate(\"/a/b/c\", \"/a/d\") == \"../b/c\" );\n-  VERIFY( proximate(\"a/b/c\", \"a\") == \"b/c\" );\n-  VERIFY( proximate(\"a/b/c\", \"a/b/c/x/y\") == \"../..\" );\n-  VERIFY( proximate(\"a/b/c\", \"a/b/c\") == \".\" );\n-  VERIFY( proximate(\"a/b\", \"c/d\") == \"../../a/b\" );\n+  compare_paths( proximate(\"/a/d\", \"/a/b/c\"), \"../../d\" );\n+  compare_paths( proximate(\"/a/b/c\", \"/a/d\"), \"../b/c\" );\n+  compare_paths( proximate(\"a/b/c\", \"a\"), \"b/c\" );\n+  compare_paths( proximate(\"a/b/c\", \"a/b/c/x/y\"), \"../..\" );\n+  compare_paths( proximate(\"a/b/c\", \"a/b/c\"), \".\" );\n+  compare_paths( proximate(\"a/b\", \"c/d\"), \"../../a/b\" );\n }\n \n void\n test02()\n {\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   std::error_code ec = bad_ec;\n-  VERIFY( proximate(\"/a/d\", \"/a/b/c\", ec) == \"../../d\" );\n+  compare_paths( proximate(\"/a/d\", \"/a/b/c\", ec), \"../../d\" );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( proximate(\"/a/b/c\", \"/a/d\", ec) == \"../b/c\" );\n+  compare_paths( proximate(\"/a/b/c\", \"/a/d\", ec), \"../b/c\" );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( proximate(\"a/b/c\", \"a\", ec) == \"b/c\" );\n+  compare_paths( proximate(\"a/b/c\", \"a\", ec), \"b/c\" );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( proximate(\"a/b/c\", \"a/b/c/x/y\", ec) == \"../..\" );\n+  compare_paths( proximate(\"a/b/c\", \"a/b/c/x/y\", ec), \"../..\" );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( proximate(\"a/b/c\", \"a/b/c\", ec) == \".\" );\n+  compare_paths( proximate(\"a/b/c\", \"a/b/c\", ec), \".\" );\n   VERIFY( !ec );\n   ec = bad_ec;\n-  VERIFY( proximate(\"a/b\", \"c/d\", ec) == \"../../a/b\" );\n+  compare_paths( proximate(\"a/b\", \"c/d\", ec), \"../../a/b\" );\n   VERIFY( !ec );\n }\n "}, {"sha": "0942d6fdf7e12d034665a3823b1c6b5df6d4cbea", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/path.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,13 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.3 path appends [path.append]\n+// 30.10.7.4.3 path appends [fs.path.append]\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n #include <testsuite_fs.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n@@ -34,16 +35,16 @@ test01()\n \n   path pp = p;\n   pp /= p;\n-  VERIFY( pp.native() == p.native() );\n+  compare_paths( pp, p );\n \n   path q(\"baz\");\n \n   path qq = q;\n   qq /= q;\n-  VERIFY( qq.native() == \"baz/baz\" );\n+  compare_paths( qq, \"baz/baz\" );\n \n   q /= p;\n-  VERIFY( q.native() == p.native() );\n+  compare_paths( q, p );\n \n   path r = \"\";\n   r /= path();\n@@ -54,11 +55,11 @@ test01()\n \n   path s = \"dir/\";\n   s /= path(\"/file\");\n-  VERIFY( s.native() == \"/file\" );\n+  compare_paths( s, \"/file\" );\n \n   s = \"dir/\";\n   s /= path(\"file\");\n-  VERIFY( s.native() == \"dir/file\" );\n+  compare_paths( s, \"dir/file\" );\n }\n \n void\n@@ -67,16 +68,16 @@ test02()\n   // C++17 [fs.path.append] p4\n \n   path p = path(\"//host\") / \"foo\";\n-  VERIFY( p == \"//host/foo\" );\n+  compare_paths( p, \"//host/foo\" );\n \n   path pp = path(\"//host/\") / \"foo\";\n-  VERIFY( pp == \"//host/foo\" );\n+  compare_paths( pp, \"//host/foo\" );\n \n   path q = path(\"foo\") / \"\";\n-  VERIFY( q == \"foo/\" );\n+  compare_paths( q, \"foo/\" );\n \n   path qq = path(\"foo\") / \"/bar\";\n-  VERIFY( qq == \"/bar\" );\n+  compare_paths( qq, \"/bar\" );\n }\n \n int"}, {"sha": "1a987c1966b4c6d1a7fdf2765d02db930efd041b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/concat/path.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fpath.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,13 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.4 path concatenation [path.concat]\n+// 30.10.7.4.4 path concatenation [fs.path.concat]\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n #include <testsuite_fs.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n@@ -34,19 +35,16 @@ test01()\n \n   path pp = p;\n   pp += p;\n-  VERIFY( pp.native() == \"/foo/bar/foo/bar\" );\n-  VERIFY( std::distance(pp.begin(), pp.end()) == 5 );\n+  compare_paths( pp, \"/foo/bar/foo/bar\" );\n \n   path q(\"foo/bar\");\n \n   path qq = q;\n   qq += q;\n-  VERIFY( qq.native() == \"foo/barfoo/bar\" );\n-  VERIFY( std::distance(qq.begin(), qq.end()) == 3 );\n+  compare_paths( qq, \"foo/barfoo/bar\" );\n \n   q += p;\n-  VERIFY( q.native() == \"foo/bar/foo/bar\" );\n-  VERIFY( std::distance(q.begin(), q.end()) == 4 );\n+  compare_paths( q, \"foo/bar/foo/bar\" );\n }\n \n void"}, {"sha": "8d298f8a57d7328b26105f793a0c0e2ae76a1d61", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.4 path concatenation [path.concat]\n+// 30.10.7.4.4 path concatenation [fs.path.concat]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "8bbff810652c043dc69e29b5f1f5ddbd9dab4648", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Flocale.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.1 path constructors [path.construct]\n+// 30.10.7.4.1 path constructors [fs.path.construct]\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n@@ -30,7 +30,7 @@ void\n test01()\n {\n   path p(\"/foo/bar\", std::locale::classic());\n-  VERIFY( p.string() == \"/foo/bar\" );\n+  VERIFY( p.native() == \"/foo/bar\" );\n }\n \n int"}, {"sha": "8cd1976a9469610e14d3ade2e43f4efe958c1674", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/decompose/root_directory.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.9 path decomposition [path.decompose]\n+// 30.10.7.4.9 path decomposition [fs.path.decompose]\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "789ce186f82a8eeb4c5baba94ebc2b306cb7bccc", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generation/normal.cc", "status": "modified", "additions": 81, "deletions": 9, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -20,33 +20,105 @@\n // { dg-require-filesystem-ts \"\" }\n \n #include <filesystem>\n+#include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n   // C++17 [fs.path.gen] p2\n-  VERIFY( path(\"foo/./bar/..\").lexically_normal() == \"foo/\" );\n-  VERIFY( path(\"foo/.///bar/../\").lexically_normal() == \"foo/\" );\n+  compare_paths( path(\"foo/./bar/..\").lexically_normal(), \"foo/\" );\n+  compare_paths( path(\"foo/.///bar/../\").lexically_normal(), \"foo/\" );\n }\n \n void\n test02()\n {\n-  VERIFY( path(\"foo/../bar\").lexically_normal() == \"bar\" );\n-  VERIFY( path(\"../foo/../bar\").lexically_normal() == \"../bar\" );\n-  VERIFY( path(\"foo/../\").lexically_normal() == \".\" );\n-  VERIFY( path(\"../../\").lexically_normal() == \"../..\" );\n-  VERIFY( path(\"../\").lexically_normal() == \"..\" );\n-  VERIFY( path(\"./\").lexically_normal() == \".\" );\n-  VERIFY( path().lexically_normal() == \"\" );\n+  compare_paths( path(\"foo/../bar\").lexically_normal(), \"bar\" );\n+  compare_paths( path(\"../foo/../bar\").lexically_normal(), \"../bar\" );\n+  compare_paths( path(\"foo/../\").lexically_normal(), \".\" );\n+  compare_paths( path(\"../../\").lexically_normal(), \"../..\" );\n+  compare_paths( path(\"../\").lexically_normal(), \"..\" );\n+  compare_paths( path(\"./\").lexically_normal(), \".\" );\n+  compare_paths( path().lexically_normal(), \"\" );\n+\n+  compare_paths( path(\"/..\").lexically_normal(), \"/\" );\n+}\n+\n+void\n+test03()\n+{\n+  struct\n+  {\n+    const char* input;\n+    const char* normalized;\n+  } testcases[] = {\n+    {\"\"            , \"\" },\n+    {\".\"           , \".\"  },\n+    {\"..\"          , \"..\" },\n+    {\"/\"           , \"/\" },\n+    {\"//\"          , \"//\" },\n+\n+    {\"/foo\"        , \"/foo\" },\n+    {\"/foo/\"       , \"/foo/\" },\n+    {\"/foo/.\"      , \"/foo/\" },\n+    {\"/foo/bar/..\" , \"/foo/\" },\n+    {\"/foo/..\"     , \"/\" },\n+\n+    {\"/.\"          , \"/\" },\n+    {\"/./\"         , \"/\" },\n+    {\"/./.\"        , \"/\" },\n+    {\"/././\"       , \"/\" },\n+    {\"/././.\"      , \"/\" },\n+\n+    {\"./\"          , \".\" },\n+    {\"./.\"         , \".\" },\n+    {\"././\"        , \".\" },\n+    {\"././.\"       , \".\" },\n+    {\"./././\"      , \".\" },\n+    {\"./././.\"     , \".\" },\n+\n+    {\"foo/..\"      , \".\" },\n+    {\"foo/../\"     , \".\" },\n+    {\"foo/../..\"   , \"..\" },\n+\n+    // with root name (OS-dependent):\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+    {\"C:bar/..\"    , \"C:.\" },\n+#else\n+    {\"C:bar/..\"    , \".\" },\n+#endif\n+    {\"C:/bar/..\"   , \"C:/\" },\n+    {\"C:\"          , \"C:\" },\n+#ifdef __CYGWIN__\n+    {\"//host/bar/..\" , \"//host/\" },\n+    {\"//host\"        , \"//host\" },\n+#else\n+    {\"//host/bar/..\" , \"/host/\" },\n+    {\"//host\"        , \"/host\" },\n+#endif\n+\n+    // a few others:\n+    {\"foo/../foo/..\"   , \".\" },\n+    {\"foo/../foo/../..\"   , \"..\" },\n+    {\"../foo/../foo/..\"   , \"..\" },\n+    {\"../.f/../f\"   , \"../f\" },\n+    {\"../f/../.f\"   , \"../.f\" },\n+    {\".././../.\"    , \"../..\" },\n+    {\".././.././\"   , \"../..\" },\n+    {\"/..\"          , \"/\" },\n+  };\n+  for (auto& test : testcases)\n+    compare_paths( path(test.input).lexically_normal(), test.normalized );\n }\n \n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "ee77e16d1f82d79891cd322085a0e33fe89e4c5b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generation/proximate.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fproximate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fproximate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fproximate.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -21,28 +21,30 @@\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n   // C++17 [fs.path.gen] p5\n-  VERIFY( path(\"/a/d\").lexically_proximate(\"/a/b/c\") == \"../../d\" );\n-  VERIFY( path(\"/a/b/c\").lexically_proximate(\"/a/d\") == \"../b/c\" );\n-  VERIFY( path(\"a/b/c\").lexically_proximate(\"a\") == \"b/c\" );\n-  VERIFY( path(\"a/b/c\").lexically_proximate(\"a/b/c/x/y\") == \"../..\" );\n-  VERIFY( path(\"a/b/c\").lexically_proximate(\"a/b/c\") == \".\" );\n-  VERIFY( path(\"a/b\").lexically_proximate(\"c/d\") == \"../../a/b\" );\n+  compare_paths( path(\"/a/d\").lexically_proximate(\"/a/b/c\"), \"../../d\" );\n+  compare_paths( path(\"/a/b/c\").lexically_proximate(\"/a/d\"), \"../b/c\" );\n+  compare_paths( path(\"a/b/c\").lexically_proximate(\"a\"), \"b/c\" );\n+  compare_paths( path(\"a/b/c\").lexically_proximate(\"a/b/c/x/y\"), \"../..\" );\n+  compare_paths( path(\"a/b/c\").lexically_proximate(\"a/b/c\"), \".\" );\n+  compare_paths( path(\"a/b\").lexically_proximate(\"c/d\"), \"../../a/b\" );\n }\n \n void\n test02()\n {\n   path p = \"a/b/c\";\n-  VERIFY( p.lexically_proximate(p) == \".\" );\n-  VERIFY( p.lexically_proximate(\"a/../a/b/../b/c/../c/.\") == \"../../b/c\" );\n-  VERIFY( p.lexically_proximate(\"../../../\") == p );\n+  compare_paths( p.lexically_proximate(p), \".\" );\n+  compare_paths( p.lexically_proximate(\"a/../a/b/../b/c/../c/.\"), \"../../b/c\" );\n+  compare_paths( p.lexically_proximate(\"../../../\"), p );\n }\n \n int"}, {"sha": "3e78344a6186c3e66369a6ab6de6d2adfd46cd69", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generation/relative.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Frelative.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -21,28 +21,30 @@\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n   // C++17 [fs.path.gen] p5\n-  VERIFY( path(\"/a/d\").lexically_relative(\"/a/b/c\") == \"../../d\" );\n-  VERIFY( path(\"/a/b/c\").lexically_relative(\"/a/d\") == \"../b/c\" );\n-  VERIFY( path(\"a/b/c\").lexically_relative(\"a\") == \"b/c\" );\n-  VERIFY( path(\"a/b/c\").lexically_relative(\"a/b/c/x/y\") == \"../..\" );\n-  VERIFY( path(\"a/b/c\").lexically_relative(\"a/b/c\") == \".\" );\n-  VERIFY( path(\"a/b\").lexically_relative(\"c/d\") == \"../../a/b\" );\n+  compare_paths( path(\"/a/d\").lexically_relative(\"/a/b/c\"), \"../../d\" );\n+  compare_paths( path(\"/a/b/c\").lexically_relative(\"/a/d\"), \"../b/c\" );\n+  compare_paths( path(\"a/b/c\").lexically_relative(\"a\"), \"b/c\" );\n+  compare_paths( path(\"a/b/c\").lexically_relative(\"a/b/c/x/y\"), \"../..\" );\n+  compare_paths( path(\"a/b/c\").lexically_relative(\"a/b/c\"), \".\" );\n+  compare_paths( path(\"a/b\").lexically_relative(\"c/d\"), \"../../a/b\" );\n }\n \n void\n test02()\n {\n   path p = \"a/b/c\";\n-  VERIFY( p.lexically_relative(p) == \".\" );\n-  VERIFY( p.lexically_relative(\"a/../a/b/../b/c/../c/.\") == \"../../b/c\" );\n-  VERIFY( p.lexically_relative(\"../../../\") == \"\" );\n+  compare_paths( p.lexically_relative(p), \".\" );\n+  compare_paths( p.lexically_relative(\"a/../a/b/../b/c/../c/.\"), \"../../b/c\" );\n+  compare_paths( p.lexically_relative(\"../../../\"), \"\" );\n }\n \n int"}, {"sha": "78224339b42517f7f91a137c8ca872e9118f95af", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -22,7 +22,6 @@\n // C++17 30.10.7.4.7 path generic format observers [fs.path.generic.obs]\n \n #include <filesystem>\n-#include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;"}, {"sha": "6e306a41c2b7891ee8b68358ff0a95d63c0bbe3e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/make_preferred.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.5 path modifiers [path.modifiers]\n+// 30.10.7.4.5 path modifiers [fs.path.modifiers]\n \n #include <filesystem>\n #include <testsuite_fs.h>"}, {"sha": "cb764cd158560c568b7c8d275508f662d2ec3e2a", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/remove_filename.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fremove_filename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fremove_filename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fremove_filename.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -26,21 +26,18 @@\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n   // C++17 [fs.path.modifiers] p8\n-  VERIFY( path(\"foo/bar\").remove_filename() == \"foo/\" );\n-  VERIFY( path(\"foo/\").remove_filename()    == \"foo/\" );\n-  VERIFY( path(\"/foo\").remove_filename()    == \"/\" );\n-  VERIFY( path(\"/\").remove_filename()       == \"/\" );\n+  compare_paths( path(\"foo/bar\").remove_filename(), \"foo/\" );\n+  compare_paths( path(\"foo/\").remove_filename()   , \"foo/\" );\n+  compare_paths( path(\"/foo\").remove_filename()   , \"/\" );\n+  compare_paths( path(\"/\").remove_filename()      , \"/\" );\n }\n \n-#undef VERIFY\n-#define VERIFY(X) do { if (!(X)) { __builtin_puts(\"FAIL: \" #X); } } while(false)\n-#define DUMP(X, Y) do { if (!(X == Y)) { __builtin_printf(\"%s %s\\n\", X.c_str(), Y.c_str()); } } while(false)\n-\n void\n test02()\n {\n@@ -49,8 +46,7 @@ test02()\n     path p2(p);\n     p2.remove_filename();\n     p2 /= p.filename();\n-    VERIFY( p2 == p );\n-    DUMP( p2 , p );\n+    compare_paths( p2, p );\n   }\n }\n "}, {"sha": "fca189ce040542a028b3c9896fcc9b5d895d7a3b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/replace_extension.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_extension.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -19,20 +19,21 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 8.4.5 path modifiers [path.modifiers]\n+// 30.10.7.4.5 path modifiers [fs.path.modifiers]\n \n #include <filesystem>\n #include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n-  VERIFY( path(\"/foo.txt\").replace_extension(\"cpp\") == \"/foo.cpp\" );\n-  VERIFY( path(\"/foo.txt\").replace_extension(\".cpp\") == \"/foo.cpp\" );\n-  VERIFY( path(\"/\").replace_extension(\"bar\") == \"/.bar\" );\n+  compare_paths( path(\"/foo.txt\").replace_extension(\"cpp\"), \"/foo.cpp\" );\n+  compare_paths( path(\"/foo.txt\").replace_extension(\".cpp\"), \"/foo.cpp\" );\n+  compare_paths( path(\"/\").replace_extension(\"bar\"), \"/.bar\" );\n }\n \n void\n@@ -41,7 +42,7 @@ test02()\n   for (const path& p : __gnu_test::test_paths)\n   {\n     path p2 = p;\n-    VERIFY(p2.replace_extension(p2.extension()) == p);\n+    compare_paths( p2.replace_extension(p2.extension()), p );\n   }\n }\n "}, {"sha": "d5c36565aca667959c811bf696d71f85eb6912ac", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/replace_filename.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_filename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_filename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Freplace_filename.cc?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -26,28 +26,24 @@\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n {\n   // C++17 [fs.path.modifiers] p11\n-  VERIFY( path(\"/foo\").replace_filename(\"bar\") == \"/bar\" );\n-  VERIFY( path(\"/\").replace_filename(\"bar\")    == \"/bar\" );\n+  compare_paths( path(\"/foo\").replace_filename(\"bar\"), \"/bar\" );\n+  compare_paths( path(\"/\").replace_filename(\"bar\")   , \"/bar\" );\n }\n \n-#undef VERIFY\n-#define VERIFY(X) do { if (!(X)) { __builtin_puts(\"FAIL: \" #X); } } while(false)\n-#define DUMP(X, Y) do { if (!(X == Y)) { __builtin_printf(\"%s %s\\n\", X.c_str(), Y.c_str()); } } while(false)\n-\n void\n test02()\n {\n   for (const path& p : __gnu_test::test_paths)\n   {\n     path p2(p);\n     p2.replace_filename(p.filename());\n-    VERIFY( p2 == p );\n-    DUMP( p2 , p );\n+    compare_paths( p2, p );\n   }\n }\n "}, {"sha": "47f56090b4755772709cc35d3a646f43f8558da1", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "patch": "@@ -47,6 +47,7 @@ namespace __gnu_test\n   compare_paths(const test_fs::path& p1,\n \t\tconst test_fs::path& p2)\n   {\n+    PATH_CHK( p1, p2, native );\n     PATH_CHK( p1, p2, string );\n     PATH_CHK( p1, p2, empty );\n     PATH_CHK( p1, p2, has_root_path );"}]}