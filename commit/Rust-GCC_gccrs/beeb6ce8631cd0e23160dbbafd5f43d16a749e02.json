{"sha": "beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlYjZjZTg2MzFjZDBlMjMxNjBkYmJhZmQ1ZjQzZDE2YTc0OWUwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-01T15:14:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-01T15:14:56Z"}, "message": "[07/11] Use single basic block array in loop_vec_info\n\n_loop_vec_info::_loop_vec_info used get_loop_array to get the\norder of the blocks when creating stmt_vec_infos, but then used\ndfs_enumerate_from to get the order of the blocks that the rest\nof the vectoriser uses.  We should be able to use that order\nfor creating stmt_vec_infos too.\n\n2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Use the\n\tresult of dfs_enumerate_from when constructing stmt_vec_infos,\n\tinstead of additionally calling get_loop_body.\n\nFrom-SVN: r263221", "tree": {"sha": "96e5a885c8df7a281abe581a0c5cc4f15cca4234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e5a885c8df7a281abe581a0c5cc4f15cca4234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeb6ce8631cd0e23160dbbafd5f43d16a749e02/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d4bca81bd7dceb0701e5cd87132d8e3892c22ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4bca81bd7dceb0701e5cd87132d8e3892c22ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4bca81bd7dceb0701e5cd87132d8e3892c22ba"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "3e7367de13ac334301f77d790ba7b6efe1b7b1ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeb6ce8631cd0e23160dbbafd5f43d16a749e02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeb6ce8631cd0e23160dbbafd5f43d16a749e02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "patch": "@@ -1,3 +1,9 @@\n+2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Use the\n+\tresult of dfs_enumerate_from when constructing stmt_vec_infos,\n+\tinstead of additionally calling get_loop_body.\n+\n 2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_create_data_ref_ptr): Remove inv_p"}, {"sha": "92c01a21345762c7d98c64c5c75b338f747e9dab", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeb6ce8631cd0e23160dbbafd5f43d16a749e02/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeb6ce8631cd0e23160dbbafd5f43d16a749e02/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=beeb6ce8631cd0e23160dbbafd5f43d16a749e02", "patch": "@@ -834,11 +834,18 @@ _loop_vec_info::_loop_vec_info (struct loop *loop_in, vec_info_shared *shared)\n     scalar_loop (NULL),\n     orig_loop_info (NULL)\n {\n-  /* Create/Update stmt_info for all stmts in the loop.  */\n-  basic_block *body = get_loop_body (loop);\n-  for (unsigned int i = 0; i < loop->num_nodes; i++)\n+  /* CHECKME: We want to visit all BBs before their successors (except for\n+     latch blocks, for which this assertion wouldn't hold).  In the simple\n+     case of the loop forms we allow, a dfs order of the BBs would the same\n+     as reversed postorder traversal, so we are safe.  */\n+\n+  unsigned int nbbs = dfs_enumerate_from (loop->header, 0, bb_in_loop_p,\n+\t\t\t\t\t  bbs, loop->num_nodes, loop);\n+  gcc_assert (nbbs == loop->num_nodes);\n+\n+  for (unsigned int i = 0; i < nbbs; i++)\n     {\n-      basic_block bb = body[i];\n+      basic_block bb = bbs[i];\n       gimple_stmt_iterator si;\n \n       for (si = gsi_start_phis (bb); !gsi_end_p (si); gsi_next (&si))\n@@ -855,16 +862,6 @@ _loop_vec_info::_loop_vec_info (struct loop *loop_in, vec_info_shared *shared)\n \t  add_stmt (stmt);\n \t}\n     }\n-  free (body);\n-\n-  /* CHECKME: We want to visit all BBs before their successors (except for\n-     latch blocks, for which this assertion wouldn't hold).  In the simple\n-     case of the loop forms we allow, a dfs order of the BBs would the same\n-     as reversed postorder traversal, so we are safe.  */\n-\n-  unsigned int nbbs = dfs_enumerate_from (loop->header, 0, bb_in_loop_p,\n-\t\t\t\t\t  bbs, loop->num_nodes, loop);\n-  gcc_assert (nbbs == loop->num_nodes);\n }\n \n /* Free all levels of MASKS.  */"}]}