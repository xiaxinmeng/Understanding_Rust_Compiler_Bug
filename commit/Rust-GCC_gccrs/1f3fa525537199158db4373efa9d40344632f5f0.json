{"sha": "1f3fa525537199158db4373efa9d40344632f5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzZmE1MjU1MzcxOTkxNThkYjQzNzNlZmE5ZDQwMzQ0NjMyZjVmMA==", "commit": {"author": {"name": "Than McIntosh", "email": "thanm@google.com", "date": "2018-06-20T21:11:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-06-20T21:11:23Z"}, "message": "re PR libgcc/86213 (-fsplit-stack runtime may clobber SSE input param reg)\n\nlibgcc/:\n\tPR libgcc/86213\n\t* generic-morestack.c (allocate_segment): Move calls to getenv and\n\tgetpagesize to __morestack_load_mmap.\n\t(__morestack_load_mmap) Initialize static_pagesize and\n\tuse_guard_page here so as to avoid clobbering SSE regs during a\n\t__morestack call.\ngcc/testsuite/:\n\t* gcc.dg/split-8.c: New.\n\nFrom-SVN: r261823", "tree": {"sha": "1803178fb1693ddac061d3dff68dcd8bc7fc3ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1803178fb1693ddac061d3dff68dcd8bc7fc3ff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f3fa525537199158db4373efa9d40344632f5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3fa525537199158db4373efa9d40344632f5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3fa525537199158db4373efa9d40344632f5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3fa525537199158db4373efa9d40344632f5f0/comments", "author": {"login": "thanm", "id": 12280172, "node_id": "MDQ6VXNlcjEyMjgwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/12280172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanm", "html_url": "https://github.com/thanm", "followers_url": "https://api.github.com/users/thanm/followers", "following_url": "https://api.github.com/users/thanm/following{/other_user}", "gists_url": "https://api.github.com/users/thanm/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanm/subscriptions", "organizations_url": "https://api.github.com/users/thanm/orgs", "repos_url": "https://api.github.com/users/thanm/repos", "events_url": "https://api.github.com/users/thanm/events{/privacy}", "received_events_url": "https://api.github.com/users/thanm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8e7bf49a8c27e168f64edcaf5ea308b21340e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e7bf49a8c27e168f64edcaf5ea308b21340e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e7bf49a8c27e168f64edcaf5ea308b21340e73"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "2e333b41109cc66b76dfe88a043b4a81dcf1f2de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fa525537199158db4373efa9d40344632f5f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fa525537199158db4373efa9d40344632f5f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f3fa525537199158db4373efa9d40344632f5f0", "patch": "@@ -1,3 +1,8 @@\n+2018-06-20  Than McIntosh  <thanm@google.com>\n+\n+\tPR libgcc/86213\n+\t* gcc.dg/split-8.c: New.\n+\n 2018-06-20  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/builtins-1.c: Adjust dg directives to scan"}, {"sha": "33662e24c4f8928d0d61a9e3c713bc3af37872d4", "filename": "gcc/testsuite/gcc.dg/split-8.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fa525537199158db4373efa9d40344632f5f0/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fa525537199158db4373efa9d40344632f5f0/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsplit-8.c?ref=1f3fa525537199158db4373efa9d40344632f5f0", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target split_stack } */\n+/* { dg-options \"-fsplit-stack\" } */\n+\n+/* Testcase for PR86213. On the first call to __morestack there is a live\n+   value in xmm0, which was being clobbered by a call to getenv().  */\n+\n+#include <stdlib.h>\n+\n+double gd[8];\n+int z;\n+\n+double bar(double q)  __attribute__ ((noinline));\n+double foo(double q)  __attribute__ ((noinline));\n+int ck(double q)  __attribute__ ((noinline));\n+int main(int argc, char **argv) __attribute__ ((no_split_stack));\n+\n+double bar(double q)\n+{\n+  double d[8];\n+  for (unsigned i = 0; i < 8; ++i)\n+    d[i] = gd[8-i-1];\n+  return q + d[z&3];\n+}\n+\n+double foo(double d)\n+{\n+  return bar(d);\n+}\n+\n+int ck(double d)\n+{\n+  if (d != 64.0)\n+    abort();\n+  return 0;\n+}\n+\n+typedef double (*fp)(double);\n+fp g = foo;\n+\n+int main(int argc, char **argv) {\n+  return ck(g(64.0));\n+}"}, {"sha": "238b08f366a3ca9083576b1b3e219e5a48ce8ad8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fa525537199158db4373efa9d40344632f5f0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fa525537199158db4373efa9d40344632f5f0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1f3fa525537199158db4373efa9d40344632f5f0", "patch": "@@ -1,3 +1,12 @@\n+2018-06-20  Than McIntosh  <thanm@google.com>\n+\n+\tPR libgcc/86213\n+\t* generic-morestack.c (allocate_segment): Move calls to getenv and\n+\tgetpagesize to __morestack_load_mmap.\n+\t(__morestack_load_mmap) Initialize static_pagesize and\n+\tuse_guard_page here so as to avoid clobbering SSE regs during a\n+\t__morestack call.\n+\n 2018-06-18  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/t-float128 (FP128_CFLAGS_SW): Compile float128"}, {"sha": "d70ca0922ceac3c35be2fd513b3614a092cf89de", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3fa525537199158db4373efa9d40344632f5f0/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3fa525537199158db4373efa9d40344632f5f0/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=1f3fa525537199158db4373efa9d40344632f5f0", "patch": "@@ -243,6 +243,12 @@ __thread struct initial_sp __morestack_initial_sp\n \n static sigset_t __morestack_fullmask;\n \n+/* Page size, as returned from getpagesize(). Set on startup. */\n+static unsigned int static_pagesize;\n+\n+/* Set on startup to non-zero value if SPLIT_STACK_GUARD env var is set. */\n+static int use_guard_page;\n+\n /* Convert an integer to a decimal string without using much stack\n    space.  Return a pointer to the part of the buffer to use.  We this\n    instead of sprintf because sprintf will require too much stack\n@@ -320,36 +326,13 @@ __morestack_fail (const char *msg, size_t len, int err)\n static struct stack_segment *\n allocate_segment (size_t frame_size)\n {\n-  static unsigned int static_pagesize;\n-  static int use_guard_page;\n   unsigned int pagesize;\n   unsigned int overhead;\n   unsigned int allocate;\n   void *space;\n   struct stack_segment *pss;\n \n   pagesize = static_pagesize;\n-  if (pagesize == 0)\n-    {\n-      unsigned int p;\n-\n-      pagesize = getpagesize ();\n-\n-#ifdef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n-      p = __sync_val_compare_and_swap (&static_pagesize, 0, pagesize);\n-#else\n-      /* Just hope this assignment is atomic.  */\n-      static_pagesize = pagesize;\n-      p = 0;\n-#endif\n-\n-      use_guard_page = getenv (\"SPLIT_STACK_GUARD\") != 0;\n-\n-      /* FIXME: I'm not sure this assert should be in the released\n-\t code.  */\n-      assert (p == 0 || p == pagesize);\n-    }\n-\n   overhead = sizeof (struct stack_segment);\n \n   allocate = pagesize;\n@@ -815,7 +798,10 @@ __generic_findstack (void *stack)\n /* This function is called at program startup time to make sure that\n    mmap, munmap, and getpagesize are resolved if linking dynamically.\n    We want to resolve them while we have enough stack for them, rather\n-   than calling into the dynamic linker while low on stack space.  */\n+   than calling into the dynamic linker while low on stack space.\n+   Similarly, invoke getenv here to check for split-stack related control\n+   variables, since doing do as part of the __morestack path can result\n+   in unwanted use of SSE/AVX registers (see GCC PR 86213). */\n \n void\n __morestack_load_mmap (void)\n@@ -825,7 +811,12 @@ __morestack_load_mmap (void)\n      TLS accessor function is resolved.  */\n   mmap (__morestack_current_segment, 0, PROT_READ, MAP_ANONYMOUS, -1, 0);\n   mprotect (NULL, 0, 0);\n-  munmap (0, getpagesize ());\n+  munmap (0, static_pagesize);\n+\n+  /* Initialize these values here, so as to avoid dynamic linker\n+     activity as part of a __morestack call. */\n+  static_pagesize = getpagesize();\n+  use_guard_page = getenv (\"SPLIT_STACK_GUARD\") != 0;\n }\n \n /* This function may be used to iterate over the stack segments."}]}