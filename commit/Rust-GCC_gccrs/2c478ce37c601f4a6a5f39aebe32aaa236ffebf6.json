{"sha": "2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0NzhjZTM3YzYwMWY0YTZhNWYzOWFlYmUzMmFhYTIzNmZmZWJmNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-09T07:55:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-09T07:55:59Z"}, "message": "2003-05-09  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/ByteBufferImpl.java\n\t(nio_cast): Removed.\n\t(ByteBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t(asCharBuffer): Removed implementation and throw exception.\n\t(asShortBuffer): Likewise.\n\t(asIntBuffer): Likewise.\n\t(asLongBuffer): Likewise.\n\t(asFloatBuffer): Likewise.\n\t(asDoubleBuffer): Likewise.\n\t* gnu/java/nio/CharBufferImpl.java\n\t(CharBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/DoubleBufferImpl.java\n\t(DoubleBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/FloatBufferImpl.java\n\t(FloatBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/IntBufferImpl.java\n\t(IntBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/LongBufferImpl.java\n\t(LongBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/ShortBufferImpl.java\n\t(ShortBufferImpl): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t(asByteBuffer): Removed.\n\t* gnu/java/nio/natByteBufferImpl.cc\n\t(nio_cast): Removed.\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\t* gnu/java/nio/natCharBufferImpl.cc\n\t(nio_get_Byte): Removed.\n\t(nio_put_Byte): Removed.\n\nFrom-SVN: r66626", "tree": {"sha": "16dd377894dfcb8d80f85ad93c37bb5fb9d4fdf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16dd377894dfcb8d80f85ad93c37bb5fb9d4fdf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/comments", "author": null, "committer": null, "parents": [{"sha": "44db872cf5e9f65d8968a5e3f4c88d7886c0ca42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44db872cf5e9f65d8968a5e3f4c88d7886c0ca42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44db872cf5e9f65d8968a5e3f4c88d7886c0ca42"}], "stats": {"total": 327, "additions": 58, "deletions": 269}, "files": [{"sha": "7458c91d83e6fef62c287d99b7cc9ca0e0567dea", "filename": "libjava/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -1,3 +1,55 @@\n+2003-05-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/ByteBufferImpl.java\n+\t(nio_cast): Removed.\n+\t(ByteBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t(asCharBuffer): Removed implementation and throw exception.\n+\t(asShortBuffer): Likewise.\n+\t(asIntBuffer): Likewise.\n+\t(asLongBuffer): Likewise.\n+\t(asFloatBuffer): Likewise.\n+\t(asDoubleBuffer): Likewise.\n+\t* gnu/java/nio/CharBufferImpl.java\n+\t(CharBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/DoubleBufferImpl.java\n+\t(DoubleBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/FloatBufferImpl.java\n+\t(FloatBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/IntBufferImpl.java\n+\t(IntBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/LongBufferImpl.java\n+\t(LongBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/ShortBufferImpl.java\n+\t(ShortBufferImpl): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t(asByteBuffer): Removed.\n+\t* gnu/java/nio/natByteBufferImpl.cc\n+\t(nio_cast): Removed.\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\t* gnu/java/nio/natCharBufferImpl.cc\n+\t(nio_get_Byte): Removed.\n+\t(nio_put_Byte): Removed.\n+\n 2003-05-09  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/JarURLConnection.java"}, {"sha": "ede16aa2e252c0cea2b0945fb45c593c6b2360bb", "filename": "libjava/gnu/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 6, "deletions": 86, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -79,138 +79,58 @@ void inc_pos (int toAdd)\n     position (position () + toAdd);\n   }\n \n-  private static native byte[] nio_cast(byte[]copy);\n-  private static native byte[] nio_cast(char[]copy);\n-  private static native byte[] nio_cast(short[]copy);\n-  private static native byte[] nio_cast(long[]copy);\n-  private static native byte[] nio_cast(int[]copy);\n-  private static native byte[] nio_cast(float[]copy);\n-  private static native byte[] nio_cast(double[]copy);\n-\n-  ByteBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (ByteBufferImpl b, int index, int limit);\n-  \n-  private static native void nio_put_Byte (ByteBufferImpl b, int index, int limit, byte value);\n-  \n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 1);\n-    return res;\n-  }\n-\n-  ByteBufferImpl (char[] copy)\n-  {\n-    super (copy.length * 2, copy.length * 2, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-\n   private static native char nio_get_Char (ByteBufferImpl b, int index, int limit);\n \n   private static native void nio_put_Char (ByteBufferImpl b, int index, int limit, char value);\n \n   public CharBuffer asCharBuffer ()\n   {\n-    CharBufferImpl res = new CharBufferImpl (backing_buffer);\n-    res.limit ((limit () * 2) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n-  ByteBufferImpl (short[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-  \n   private static native short nio_get_Short (ByteBufferImpl b, int index, int limit);\n   \n   private static native void nio_put_Short (ByteBufferImpl b, int index, int limit, short value);\n   \n   public ShortBuffer asShortBuffer ()\n   {\n-    ShortBufferImpl res = new ShortBufferImpl (backing_buffer);\n-    res.limit ((limit () * 2) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n-  ByteBufferImpl (int[] copy)\n-  {\n-    super (copy.length * 4, copy.length * 4, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast(copy) : null;\n-    readOnly = false;\n-  }\n-  \n   private static native int nio_get_Int (ByteBufferImpl b, int index, int limit);\n   \n   private static native void nio_put_Int (ByteBufferImpl b, int index, int limit, int value);\n   \n   public IntBuffer asIntBuffer ()\n   {\n-    IntBufferImpl res = new IntBufferImpl (backing_buffer);\n-    res.limit ((limit() * 4) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n-  ByteBufferImpl (long[] copy)\n-  {\n-    super (copy.length * 8, copy.length * 8, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-  \n   private static native long nio_get_Long (ByteBufferImpl b, int index, int limit);\n   \n   private static native void nio_put_Long (ByteBufferImpl b, int index, int limit, long value);\n   \n   public LongBuffer asLongBuffer ()\n   {\n-    LongBufferImpl res = new LongBufferImpl (backing_buffer);\n-    res.limit ((limit() * 8) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n-  ByteBufferImpl (float[] copy)\n-  {\n-    super (copy.length * 4, copy.length * 4, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-  \n   private static native float nio_get_Float (ByteBufferImpl b, int index, int limit);\n   \n   private static native void nio_put_Float (ByteBufferImpl b, int index, int limit, float value);\n   \n   public FloatBuffer asFloatBuffer ()\n   {\n-    FloatBufferImpl res = new FloatBufferImpl (backing_buffer);\n-    res.limit ((limit() * 4) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n-  ByteBufferImpl (double[] copy)\n-  {\n-    super (copy.length * 8, copy.length * 8, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-  \n   private static native double nio_get_Double (ByteBufferImpl b, int index, int limit);\n   \n   private static native void nio_put_Double (ByteBufferImpl b, int index, int limit, double value);\n   \n   public DoubleBuffer asDoubleBuffer ()\n   {\n-    DoubleBufferImpl res = new DoubleBufferImpl (backing_buffer);\n-    res.limit ((limit () * 8) / 1);\n-    return res;\n+    throw new Error (\"Not implemented\");\n   }\n \n   public boolean isReadOnly()"}, {"sha": "ca769742ccab1786ce1f528d151c81198fd7c995", "filename": "libjava/gnu/java/nio/CharBufferImpl.java", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -72,25 +72,6 @@ public CharBufferImpl (CharBufferImpl copy)\n   \n   private static native char[] nio_cast (byte[] copy);\n \n-  CharBufferImpl (byte[] copy)\n-  {\n-    super (copy.length / 2, copy.length / 2, 0, 0);\n-    this.backing_buffer = (copy != null ? nio_cast (copy) : null);\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (CharBufferImpl b, int index, int limit);\n-\n-  private static native void nio_put_Byte (CharBufferImpl b, int index, int limit, byte value);\n-\n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 2);\n-    return res;\n-  }\n-\n-  \n   public boolean isReadOnly()\n   {\n     return readOnly;"}, {"sha": "7d4f69311d0d4c0110addfa471ddc616bc384bb5", "filename": "libjava/gnu/java/nio/DoubleBufferImpl.java", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -70,26 +70,6 @@ public DoubleBufferImpl(DoubleBufferImpl copy)\n     readOnly = copy.isReadOnly ();\n   }\n   \n-  DoubleBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (DoubleBufferImpl b, int index, int limit);\n-\n-  private static native void nio_put_Byte (DoubleBufferImpl b, int index, int limit, byte value);\n-\n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 8);\n-    return res;\n-  }\n-\n-  private static native double[] nio_cast (byte[] copy);\n-\n   public boolean isReadOnly ()\n   {\n     return readOnly;"}, {"sha": "4acde80b747938d8339a555ee626077802eee437", "filename": "libjava/gnu/java/nio/FloatBufferImpl.java", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -70,26 +70,6 @@ public FloatBufferImpl(FloatBufferImpl copy)\n     readOnly = copy.isReadOnly ();\n   }\n   \n-  private static native float[] nio_cast (byte[] copy);\n-  \n-  FloatBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast  (copy) : null;\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (FloatBufferImpl b, int index, int limit);\n-\n-  private static native void nio_put_Byte (FloatBufferImpl b, int index, int limit, byte value);\n-\n-  public ByteBuffer asByteBuffer()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 4);\n-    return res;\n-  }\n-  \n   public boolean isReadOnly ()\n   {\n     return readOnly;"}, {"sha": "cfa3efe597a92c0f289bb702c70c280fdaf514c3", "filename": "libjava/gnu/java/nio/IntBufferImpl.java", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -70,26 +70,6 @@ public IntBufferImpl(IntBufferImpl copy)\n     readOnly = copy.isReadOnly ();\n   }\n \n-  private static native int[] nio_cast (byte[] copy);\n-\n-  IntBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (IntBufferImpl b, int index, int limit);\n-\n-  private static native void nio_put_Byte (IntBufferImpl b, int index, int limit, byte value);\n-\n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 4);\n-    return res;\n-  }\n-\n   public boolean isReadOnly()\n   {\n     return readOnly;"}, {"sha": "8a295fa5a35eaaffe687cc506b978e74f625f5c4", "filename": "libjava/gnu/java/nio/LongBufferImpl.java", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -70,26 +70,6 @@ public LongBufferImpl(LongBufferImpl copy)\n     readOnly = copy.isReadOnly ();\n   }\n \n-  private static native long[] nio_cast (byte[] copy);\n-\n-  LongBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-\n-  private static native byte nio_get_Byte (LongBufferImpl b, int index, int limit);\n-\n-  private static native void nio_put_Byte (LongBufferImpl b, int index, int limit, byte value);\n-\n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 8);\n-    return res;\n-  }\n-\n   public boolean isReadOnly()\n   {\n     return readOnly;"}, {"sha": "c4f679b7ce81d9423b7c9c540668346ca11537e5", "filename": "libjava/gnu/java/nio/ShortBufferImpl.java", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -70,26 +70,6 @@ public ShortBufferImpl(ShortBufferImpl copy)\n     readOnly = copy.isReadOnly ();\n   }\n \n-  private static native short[] nio_cast (byte[] copy);\n-\n-  ShortBufferImpl (byte[] copy)\n-  {\n-    super (copy.length, copy.length, 0, 0);\n-    this.backing_buffer = copy != null ? nio_cast (copy) : null;\n-    readOnly = false;\n-  }\n-  \n-  private static native byte nio_get_Byte (ShortBufferImpl b, int index, int limit);\n-  \n-  private static native void nio_put_Byte (ShortBufferImpl b, int index, int limit, byte value);\n-  \n-  public ByteBuffer asByteBuffer ()\n-  {\n-    ByteBufferImpl res = new ByteBufferImpl (backing_buffer);\n-    res.limit ((limit () * 1) / 2);\n-    return res;\n-  }\n-\n   public boolean isReadOnly()\n   {\n     return readOnly;"}, {"sha": "c6ba45669ffefec66bc9305b97f51450fdf2591b", "filename": "libjava/gnu/java/nio/natByteBufferImpl.cc", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatByteBufferImpl.cc?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -15,53 +15,6 @@ details.  */\n \n #include <gnu/java/nio/ByteBufferImpl.h>\n \n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jbyte>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jshort>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jint>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jlong>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jchar>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jfloat>*)\n-{\n-  return NULL;\n-}\n-\n-JArray<jbyte>*\n-gnu::java::nio::ByteBufferImpl::nio_cast(JArray<jdouble>*)\n-{\n-  return NULL;\n-}\n-\n-void\n-gnu::java::nio::ByteBufferImpl::nio_put_Byte(gnu::java::nio::ByteBufferImpl*, jint, jint, jbyte)\n-{\n-}\n-\n void\n gnu::java::nio::ByteBufferImpl::nio_put_Char(gnu::java::nio::ByteBufferImpl*, jint, jint, jchar)\n {\n@@ -92,12 +45,6 @@ gnu::java::nio::ByteBufferImpl::nio_put_Double(gnu::java::nio::ByteBufferImpl*,\n {\n }\n \n-jbyte\n-gnu::java::nio::ByteBufferImpl::nio_get_Byte(gnu::java::nio::ByteBufferImpl*, jint, jint)\n-{\n-  return 0;\n-}\n-\n jchar\n gnu::java::nio::ByteBufferImpl::nio_get_Char(gnu::java::nio::ByteBufferImpl*, jint, jint)\n {"}, {"sha": "eb729277d3ac24063801c776439af958e6dbf857", "filename": "libjava/gnu/java/nio/natCharBufferImpl.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatCharBufferImpl.cc?ref=2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "patch": "@@ -20,14 +20,3 @@ gnu::java::nio::CharBufferImpl::nio_cast(JArray<jbyte>*)\n {\n   return NULL;\n }\n-\n-void\n-gnu::java::nio::CharBufferImpl::nio_put_Byte(gnu::java::nio::CharBufferImpl*, jint, jint, jbyte)\n-{\n-}\n-\n-jbyte\n-gnu::java::nio::CharBufferImpl::nio_get_Byte(gnu::java::nio::CharBufferImpl*, jint, jint)\n-{\n-  return 0;\n-}"}]}