{"sha": "1a8821c54a5ff570e5d6005924ab9a165090d1cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4ODIxYzU0YTVmZjU3MGU1ZDYwMDU5MjRhYjlhMTY1MDkwZDFjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-13T10:40:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-13T10:40:42Z"}, "message": "graphite-isl-ast-to-gimple.c (max_mode_int_precision, [...]): Avoid global constructor by moving ...\n\n2017-10-13  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-isl-ast-to-gimple.c (max_mode_int_precision,\n\tgraphite_expression_type_precision): Avoid global constructor\n\tby moving ...\n\t(translate_isl_ast_to_gimple::translate_isl_ast_to_gimple): Here.\n\t(translate_isl_ast_to_gimple::graphite_expr_type): Add type\n\tmember.\n\t(translate_isl_ast_to_gimple::translate_isl_ast_node_for): Use it.\n\t(translate_isl_ast_to_gimple::build_iv_mapping): Likewise.\n\t(translate_isl_ast_to_gimple::graphite_create_new_guard): Likewise.\n\t* graphite-sese-to-poly.c (build_original_schedule): Return nothing.\n\n\t* gcc.dg/graphite/scop-10.c: Enlarge array to avoid undefined\n\tbehavior.\n\t* gcc.dg/graphite/scop-7.c: Likewise.\n\t* gcc.dg/graphite/scop-8.c: Likewise.\n\nFrom-SVN: r253719", "tree": {"sha": "a3e1d74a124b61dedb97cad341da58005d69f3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e1d74a124b61dedb97cad341da58005d69f3d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8821c54a5ff570e5d6005924ab9a165090d1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8821c54a5ff570e5d6005924ab9a165090d1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8821c54a5ff570e5d6005924ab9a165090d1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8821c54a5ff570e5d6005924ab9a165090d1cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ecf9ac7060bc6b902f5bed252e4a39f59d6f30b"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "8f764889fb4700fbd2a27cab11837db9008058b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -1,3 +1,16 @@\n+2017-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-isl-ast-to-gimple.c (max_mode_int_precision,\n+\tgraphite_expression_type_precision): Avoid global constructor\n+\tby moving ...\n+\t(translate_isl_ast_to_gimple::translate_isl_ast_to_gimple): Here.\n+\t(translate_isl_ast_to_gimple::graphite_expr_type): Add type\n+\tmember.\n+\t(translate_isl_ast_to_gimple::translate_isl_ast_node_for): Use it.\n+\t(translate_isl_ast_to_gimple::build_iv_mapping): Likewise.\n+\t(translate_isl_ast_to_gimple::graphite_create_new_guard): Likewise.\n+\t* graphite-sese-to-poly.c (build_original_schedule): Return nothing.\n+\n 2017-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/82499"}, {"sha": "b761fadef205bc18da2b58eaf9eb3ab04d6702b7", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -58,15 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"graphite.h\"\n \n-/* We always try to use signed 128 bit types, but fall back to smaller types\n-   in case a platform does not provide types of these sizes. In the future we\n-   should use isl to derive the optimal type for each subexpression.  */\n-\n-static int max_mode_int_precision =\n-  GET_MODE_PRECISION (int_mode_for_size (MAX_FIXED_MODE_SIZE, 0).require ());\n-static int graphite_expression_type_precision = 128 <= max_mode_int_precision ?\n-\t\t\t\t\t\t128 : max_mode_int_precision;\n-\n struct ast_build_info\n {\n   ast_build_info()\n@@ -143,8 +134,7 @@ enum phi_node_kind\n class translate_isl_ast_to_gimple\n {\n  public:\n-  translate_isl_ast_to_gimple (sese_info_p r)\n-    : region (r), codegen_error (false) { }\n+  translate_isl_ast_to_gimple (sese_info_p r);\n   edge translate_isl_ast (loop_p context_loop, __isl_keep isl_ast_node *node,\n \t\t\t  edge next_e, ivs_params &ip);\n   edge translate_isl_ast_node_for (loop_p context_loop,\n@@ -235,8 +225,24 @@ class translate_isl_ast_to_gimple\n \n   /* A vector of all the edges at if_condition merge points.  */\n   auto_vec<edge, 2> merge_points;\n+\n+  tree graphite_expr_type;\n };\n \n+translate_isl_ast_to_gimple::translate_isl_ast_to_gimple (sese_info_p r)\n+  : region (r), codegen_error (false)\n+{\n+  /* We always try to use signed 128 bit types, but fall back to smaller types\n+     in case a platform does not provide types of these sizes. In the future we\n+     should use isl to derive the optimal type for each subexpression.  */\n+  int max_mode_int_precision\n+    = GET_MODE_PRECISION (int_mode_for_size (MAX_FIXED_MODE_SIZE, 0).require ());\n+  int graphite_expr_type_precision\n+    = 128 <= max_mode_int_precision ?  128 : max_mode_int_precision;\n+  graphite_expr_type\n+    = build_nonstandard_integer_type (graphite_expr_type_precision, 0);\n+}\n+\n /* Return the tree variable that corresponds to the given isl ast identifier\n    expression (an isl_ast_expr of type isl_ast_expr_id).\n \n@@ -702,8 +708,7 @@ translate_isl_ast_node_for (loop_p context_loop, __isl_keep isl_ast_node *node,\n \t\t\t    edge next_e, ivs_params &ip)\n {\n   gcc_assert (isl_ast_node_get_type (node) == isl_ast_node_for);\n-  tree type\n-    = build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n+  tree type = graphite_expr_type;\n \n   isl_ast_expr *for_init = isl_ast_node_for_get_init (node);\n   tree lb = gcc_expression_from_isl_expression (type, for_init, ip);\n@@ -742,8 +747,7 @@ build_iv_mapping (vec<tree> iv_map, gimple_poly_bb_p gbb,\n   for (i = 1; i < isl_ast_expr_get_op_n_arg (user_expr); i++)\n     {\n       arg_expr = isl_ast_expr_get_op_arg (user_expr, i);\n-      tree type =\n-\tbuild_nonstandard_integer_type (graphite_expression_type_precision, 0);\n+      tree type = graphite_expr_type;\n       tree t = gcc_expression_from_isl_expression (type, arg_expr, ip);\n \n       /* To fail code generation, we generate wrong code until we discard it.  */\n@@ -841,8 +845,7 @@ edge translate_isl_ast_to_gimple::\n graphite_create_new_guard (edge entry_edge, __isl_take isl_ast_expr *if_cond,\n \t\t\t   ivs_params &ip)\n {\n-  tree type =\n-    build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n+  tree type = graphite_expr_type;\n   tree cond_expr = gcc_expression_from_isl_expression (type, if_cond, ip);\n \n   /* To fail code generation, we generate wrong code until we discard it.  */"}, {"sha": "fc16ca969ebe3537b11154bb3f3a8f2a1da4da44", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -1194,7 +1194,7 @@ build_schedule_loop_nest (scop_p scop, int *index, loop_p context_loop)\n \n /* Build the schedule of the SCOP.  */\n \n-static bool\n+static void\n build_original_schedule (scop_p scop)\n {\n   int i = 0;\n@@ -1216,9 +1216,6 @@ build_original_schedule (scop_p scop)\n       fprintf (dump_file, \"[sese-to-poly] original schedule:\\n\");\n       print_isl_schedule (dump_file, scop->original_schedule);\n     }\n-  if (!scop->original_schedule)\n-    return false;\n-  return true;\n }\n \n /* Builds the polyhedral representation for a SESE region.  */"}, {"sha": "29dace4446286e8fb177b96df5ea1f1d53cd3f9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/graphite/scop-10.c: Enlarge array to avoid undefined\n+\tbehavior.\n+\t* gcc.dg/graphite/scop-7.c: Likewise.\n+\t* gcc.dg/graphite/scop-8.c: Likewise.\n+\n 2017-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/82499"}, {"sha": "20d53510b4ec508ddeb3837b55b97379a9d7c52c", "filename": "gcc/testsuite/gcc.dg/graphite/scop-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-10.c?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -4,7 +4,7 @@ int toto()\n {\n   int i, j, k;\n   int a[100][100];\n-  int b[100];\n+  int b[200];\n \n   for (i = 1; i < 100; i++)\n     {"}, {"sha": "2f0a50470e912e7461531132ecf4bef22f8fbace", "filename": "gcc/testsuite/gcc.dg/graphite/scop-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-7.c?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -4,7 +4,7 @@ int toto()\n {\n   int i, j, k;\n   int a[100][100];\n-  int b[100];\n+  int b[200];\n \n   for (i = 1; i < 100; i++)\n     {"}, {"sha": "3ceb5d874d604679b9a7ce9e171e0d4a9aae23f8", "filename": "gcc/testsuite/gcc.dg/graphite/scop-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8821c54a5ff570e5d6005924ab9a165090d1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-8.c?ref=1a8821c54a5ff570e5d6005924ab9a165090d1cd", "patch": "@@ -4,7 +4,7 @@ int toto()\n {\n   int i, j, k;\n   int a[100][100];\n-  int b[100];\n+  int b[200];\n \n   for (i = 1; i < 100; i++)\n     {"}]}