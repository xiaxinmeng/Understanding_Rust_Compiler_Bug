{"sha": "39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkOGM3ZDJjMTEwNGVlOGU5ZTE5ZGVjMGMzYTQ5NzM4MDVmZGI5ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-05-05T07:39:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-05-05T07:39:36Z"}, "message": "cvt.c (ocp_convert): Early handle the special case of a null_ptr_cst_p expr converted to a...\n\n2018-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cvt.c (ocp_convert): Early handle the special case of a\n\tnull_ptr_cst_p expr converted to a NULLPTR_TYPE_P type.\n\nFrom-SVN: r259966", "tree": {"sha": "f0105f418ff20ef1d0feecb79a1a34efbc1af87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0105f418ff20ef1d0feecb79a1a34efbc1af87f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e/comments", "author": null, "committer": null, "parents": [{"sha": "c3f57fa1008774cd8a13d73f6747df927c32994e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f57fa1008774cd8a13d73f6747df927c32994e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f57fa1008774cd8a13d73f6747df927c32994e"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "f7969d40c8d495320de2bd49179c6b3052ab55df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cvt.c (ocp_convert): Early handle the special case of a\n+\tnull_ptr_cst_p expr converted to a NULLPTR_TYPE_P type.\n+\n 2018-05-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85600 - virtual delete failure."}, {"sha": "9494f292d8db72f09c4c17957473051cba285abd", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=39d8c7d2c1104ee8e9e19dec0c3a4973805fdb9e", "patch": "@@ -711,6 +711,15 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n   if (error_operand_p (e))\n     return error_mark_node;\n \n+  if (NULLPTR_TYPE_P (type) && null_ptr_cst_p (e))\n+    {\n+      if (complain & tf_warning)\n+\tmaybe_warn_zero_as_null_pointer_constant (e, loc);\n+\n+      if (!TREE_SIDE_EFFECTS (e))\n+\treturn nullptr_node;\n+    }\n+\n   if (MAYBE_CLASS_TYPE_P (type) && (convtype & CONV_FORCE_TEMP))\n     /* We need a new temporary; don't take this shortcut.  */;\n   else if (same_type_ignoring_top_level_qualifiers_p (type, TREE_TYPE (e)))\n@@ -832,12 +841,6 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n       /* Ignore any integer overflow caused by the conversion.  */\n       return ignore_overflows (converted, e);\n     }\n-  if (NULLPTR_TYPE_P (type) && e && null_ptr_cst_p (e))\n-    {\n-      if (complain & tf_warning)\n-\tmaybe_warn_zero_as_null_pointer_constant (e, loc);\n-      return nullptr_node;\n-    }\n   if (POINTER_TYPE_P (type) || TYPE_PTRMEM_P (type))\n     return cp_convert_to_pointer (type, e, dofold, complain);\n   if (code == VECTOR_TYPE)"}]}