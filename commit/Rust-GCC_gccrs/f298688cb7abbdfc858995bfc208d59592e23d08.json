{"sha": "f298688cb7abbdfc858995bfc208d59592e23d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI5ODY4OGNiN2FiYmRmYzg1ODk5NWJmYzIwOGQ1OTU5MmUyM2QwOA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-10-10T02:04:20Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2012-10-10T02:04:20Z"}, "message": "Make Niagara-4 instruction scheduling more accurate.\n\n\t* config/sparc/sparc.md (type attribute): Add new types 'visl'\n\t(VIS logical operation), 'vismv' (VIS move), and 'pdistn'.  Rename\n\t'fgm_pdist' to 'pdist'.\n\t(*movsi_insn): Use vismv and visl.\n\t(*movdi_insn_sp64): Likewise.\n\t(*movsf_insn): Likewise.\n\t(*movdf_insn_sp64): Likewise.\n\t(*mov<VM32:mode>_insn): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n\t(*mov<VM64:mode>_insn_sp64): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n\t(*mov<VM64:mode>_insn_sp32): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n\t(VIS logical instructions): Mark as visl.\n\t(pdist_vis): Use 'pdist'.\n\t(pditsn<mode>_vis): Use 'pdistn'.\n\t* config/sparc/ultra1_2.md: Adjust for new VIS attribute types.\n\t* config/sparc/ultra3.md: Likewise.\n\t* config/sparc/niagara.md: Likewise.\n\t* config/sparc/niagara2.md: Likewise.\n\t* config/sparc/niagara4.md: Add cpu units \"n4_slot2\" and\n\t\"n4_load_store\" for special store scheduling.  Use them in load\n\tand store reservations.  Integer divide and multiply can only\n\tissue in slot-1.  Represent 1-cycle VIS moves and 3-cycle VIS\n\tlogic operations.\n\nFrom-SVN: r192286", "tree": {"sha": "c6c254d8e0f894af05784624945a4e9e9952b57e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c254d8e0f894af05784624945a4e9e9952b57e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f298688cb7abbdfc858995bfc208d59592e23d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f298688cb7abbdfc858995bfc208d59592e23d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f298688cb7abbdfc858995bfc208d59592e23d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f298688cb7abbdfc858995bfc208d59592e23d08/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e368f44fefd6a8559fd1b444117afe0a17bc0d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e368f44fefd6a8559fd1b444117afe0a17bc0d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e368f44fefd6a8559fd1b444117afe0a17bc0d7b"}], "stats": {"total": 136, "additions": 96, "deletions": 40}, "files": [{"sha": "f428d074c221513f0ac25edc684c122831f7c4c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -1,3 +1,28 @@\n+2012-10-09  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (type attribute): Add new types 'visl'\n+\t(VIS logical operation), 'vismv' (VIS move), and 'pdistn'.  Rename\n+\t'fgm_pdist' to 'pdist'.\n+\t(*movsi_insn): Use vismv and visl.\n+\t(*movdi_insn_sp64): Likewise.\n+\t(*movsf_insn): Likewise.\n+\t(*movdf_insn_sp64): Likewise.\n+\t(*mov<VM32:mode>_insn): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n+\t(*mov<VM64:mode>_insn_sp64): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n+\t(*mov<VM64:mode>_insn_sp32): Likewise, use 'fsrc2s' instead of 'fsrc1s'.\n+\t(VIS logical instructions): Mark as visl.\n+\t(pdist_vis): Use 'pdist'.\n+\t(pditsn<mode>_vis): Use 'pdistn'.\n+\t* config/sparc/ultra1_2.md: Adjust for new VIS attribute types.\n+\t* config/sparc/ultra3.md: Likewise.\n+\t* config/sparc/niagara.md: Likewise.\n+\t* config/sparc/niagara2.md: Likewise.\n+\t* config/sparc/niagara4.md: Add cpu units \"n4_slot2\" and\n+\t\"n4_load_store\" for special store scheduling.  Use them in load\n+\tand store reservations.  Integer divide and multiply can only\n+\tissue in slot-1.  Represent 1-cycle VIS moves and 3-cycle VIS\n+\tlogic operations.\n+\n 2012-10-10  Dehao Chen  <dehao@google.com>\n \n \t* tree-eh.c (lower_try_finally_onedest): Set correct location for"}, {"sha": "e471b84168ad5734d20acfffcee3a816a5c8beb9", "filename": "gcc/config/sparc/niagara.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -114,5 +114,5 @@\n  */\n (define_insn_reservation \"niag_vis\" 8\n   (and (eq_attr \"cpu\" \"niagara\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_pdist,edge,edgen,gsr,array\"))\n+    (eq_attr \"type\" \"fga,visl,vismv,fgm_pack,fgm_mul,pdist,edge,edgen,gsr,array\"))\n   \"niag_pipe*8\")"}, {"sha": "856fc018fc9b1ac1a8e3f10978be718a6dc1b2f5", "filename": "gcc/config/sparc/niagara2.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -111,10 +111,10 @@\n \n (define_insn_reservation \"niag2_vis\" 6\n   (and (eq_attr \"cpu\" \"niagara2\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_pdist,edge,edgen,array,gsr\"))\n+    (eq_attr \"type\" \"fga,vismv,visl,fgm_pack,fgm_mul,pdist,edge,edgen,array,gsr\"))\n   \"niag2_pipe*6\")\n \n (define_insn_reservation \"niag3_vis\" 9\n   (and (eq_attr \"cpu\" \"niagara3\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_pdist,edge,edgen,array,gsr\"))\n+    (eq_attr \"type\" \"fga,vismv,visl,fgm_pack,fgm_mul,pdist,pdistn,edge,edgen,array,gsr\"))\n   \"niag2_pipe*9\")"}, {"sha": "272c8ff94a82170b1d19f29e7abd4b6bc3577428", "filename": "gcc/config/sparc/niagara4.md", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fniagara4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara4.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -19,12 +19,14 @@\n \n (define_automaton \"niagara4_0\")\n \n-(define_cpu_unit \"n4_slot0,n4_slot1\" \"niagara4_0\")\n-(define_reservation \"n4_single_issue\" \"n4_slot0 + n4_slot1\")\n+(define_cpu_unit \"n4_slot0,n4_slot1,n4_slot2\" \"niagara4_0\")\n+(define_reservation \"n4_single_issue\" \"n4_slot0 + n4_slot1 + n4_slot2\")\n+\n+(define_cpu_unit \"n4_load_store\" \"niagara4_0\")\n \n (define_insn_reservation \"n4_single\" 1\n   (and (eq_attr \"cpu\" \"niagara4\")\n-    (eq_attr \"type\" \"multi,savew,flushw,iflush,trap,gsr\"))\n+    (eq_attr \"type\" \"multi,savew,flushw,iflush,trap\"))\n   \"n4_single_issue\")\n \n (define_insn_reservation \"n4_integer\" 1\n@@ -35,22 +37,22 @@\n (define_insn_reservation \"n4_imul\" 12\n   (and (eq_attr \"cpu\" \"niagara4\")\n     (eq_attr \"type\" \"imul\"))\n-  \"(n4_slot0 | n4_slot1), nothing*11\")\n+  \"n4_slot1, nothing*11\")\n \n (define_insn_reservation \"n4_idiv\" 35\n   (and (eq_attr \"cpu\" \"niagara4\")\n     (eq_attr \"type\" \"idiv\"))\n-  \"(n4_slot0 | n4_slot1), nothing*34\")\n+  \"n4_slot1, nothing*34\")\n \n (define_insn_reservation \"n4_load\" 5\n   (and (eq_attr \"cpu\" \"niagara4\")\n     (eq_attr \"type\" \"load,fpload,sload\"))\n-  \"n4_slot0, nothing*4\")\n+  \"(n4_slot0 + n4_load_store), nothing*4\")\n \n (define_insn_reservation \"n4_store\" 1\n   (and (eq_attr \"cpu\" \"niagara4\")\n     (eq_attr \"type\" \"store,fpstore\"))\n-  \"n4_slot0\")\n+  \"(n4_slot0 | n4_slot2) + n4_load_store\")\n \n (define_insn_reservation \"n4_cti\" 2\n   (and (eq_attr \"cpu\" \"niagara4\")\n@@ -67,9 +69,38 @@\n     (eq_attr \"type\" \"array,edge,edgen\"))\n   \"n4_slot1, nothing*11\")\n \n-(define_insn_reservation \"n4_vis\" 11\n+(define_insn_reservation \"n4_vis_move_1cycle\" 1\n+  (and (eq_attr \"cpu\" \"niagara4\")\n+    (and (eq_attr \"type\" \"vismv\")\n+      (eq_attr \"fptype\" \"double\")))\n+  \"n4_slot1\")\n+\n+(define_insn_reservation \"n4_vis_move_11cycle\" 11\n+  (and (eq_attr \"cpu\" \"niagara4\")\n+    (and (eq_attr \"type\" \"vismv\")\n+      (eq_attr \"fptype\" \"single\")))\n+  \"n4_slot1, nothing*10\")\n+\n+(define_insn_reservation \"n4_vis_logical\" 3\n+  (and (eq_attr \"cpu\" \"niagara4\")\n+    (and (eq_attr \"type\" \"visl,pdistn\")\n+      (eq_attr \"fptype\" \"double\")))\n+  \"n4_slot1, nothing*2\")\n+\n+(define_insn_reservation \"n4_vis_logical_11cycle\" 11\n+  (and (eq_attr \"cpu\" \"niagara4\")\n+    (and (eq_attr \"type\" \"visl\")\n+      (eq_attr \"fptype\" \"single\")))\n+  \"n4_slot1, nothing*10\")\n+\n+(define_insn_reservation \"n4_vis_fga\" 11\n+  (and (eq_attr \"cpu\" \"niagara4\")\n+    (eq_attr \"type\" \"fga,gsr\"))\n+  \"n4_slot1, nothing*10\")\n+\n+(define_insn_reservation \"n4_vis_fgm\" 11\n   (and (eq_attr \"cpu\" \"niagara4\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_pdist\"))\n+    (eq_attr \"type\" \"fgm_pack,fgm_mul,pdist\"))\n   \"n4_slot1, nothing*10\")\n \n (define_insn_reservation \"n4_fpdivs\" 24"}, {"sha": "f604f46610eda96e82331e03fc2d31772dc3fe25", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -264,7 +264,7 @@\n    fpcmp,\n    fpmul,fpdivs,fpdivd,\n    fpsqrts,fpsqrtd,\n-   fga,fgm_pack,fgm_mul,fgm_pdist,edge,edgen,gsr,array,\n+   fga,visl,vismv,fgm_pack,fgm_mul,pdist,pdistn,edge,edgen,gsr,array,\n    cmove,\n    ialuX,\n    multi,savew,flushw,iflush,trap\"\n@@ -1457,7 +1457,7 @@\n    st\\t%1, %0\n    fzeros\\t%0\n    fones\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,*,*,fpmove,fpload,fpstore,fga,fga\")\n+  [(set_attr \"type\" \"*,*,load,store,vismv,vismv,fpmove,fpload,fpstore,visl,visl\")\n    (set_attr \"cpu_feature\" \"*,*,*,*,vis3,vis3,*,*,*,vis,vis\")])\n \n (define_insn \"*movsi_lo_sum\"\n@@ -1622,7 +1622,7 @@\n    std\\t%1, %0\n    fzero\\t%0\n    fone\\t%0\"\n-  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,fpmove,*,*,*,fpload,fpstore,fga,fga\")\n+  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,fpmove,*,*,*,fpload,fpstore,visl,visl\")\n    (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,*,2,2,2,*,*,*,*\")\n    (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*,*,*,*,double,double\")\n    (set_attr \"cpu_feature\" \"v9,*,*,*,*,*,*,*,fpu,fpu,fpu,fpu,v9,fpunotv9,vis3,vis3,fpu,fpu,vis,vis\")])\n@@ -1645,7 +1645,7 @@\n    std\\t%1, %0\n    fzero\\t%0\n    fone\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,*,*,fpmove,fpload,fpstore,fga,fga\")\n+  [(set_attr \"type\" \"*,*,load,store,vismv,vismv,fpmove,fpload,fpstore,visl,visl\")\n    (set_attr \"fptype\" \"*,*,*,*,*,*,double,*,*,double,double\")\n    (set_attr \"cpu_feature\" \"*,*,*,*,vis3,vis3,*,*,*,vis,vis\")])\n \n@@ -2251,7 +2251,7 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,*,*,fpload,load,fpstore,store\")\n+  [(set_attr \"type\" \"visl,visl,fpmove,*,*,*,vismv,vismv,fpload,load,fpstore,store\")\n    (set_attr \"cpu_feature\" \"vis,vis,fpu,*,*,*,vis3,vis3,fpu,*,fpu,*\")])\n \n ;; The following 3 patterns build SFmode constants in integer registers.\n@@ -2323,7 +2323,7 @@\n   #\n   #\n   #\"\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,fpload,store,fpstore,load,store,*,*,*,*\")\n+  [(set_attr \"type\" \"visl,visl,fpmove,*,*,*,fpload,store,fpstore,load,store,*,*,*,*\")\n    (set_attr \"length\" \"*,*,*,2,2,2,*,*,*,*,*,2,2,2,2\")\n    (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*,*,*,*,*\")\n    (set_attr \"cpu_feature\" \"vis,vis,v9,fpunotv9,vis3,vis3,fpu,v9,fpu,*,*,fpu,*,*,fpu\")])\n@@ -2346,7 +2346,7 @@\n   ldx\\t%1, %0\n   stx\\t%r1, %0\n   #\"\n-  [(set_attr \"type\" \"fga,fga,fpmove,*,*,load,store,*,load,store,*\")\n+  [(set_attr \"type\" \"visl,visl,fpmove,vismv,vismv,load,store,*,load,store,*\")\n    (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,*,2\")\n    (set_attr \"fptype\" \"double,double,double,double,double,*,*,*,*,*,*\")\n    (set_attr \"cpu_feature\" \"vis,vis,fpu,vis3,vis3,fpu,fpu,*,*,*,*\")])\n@@ -7876,7 +7876,7 @@\n   \"@\n   fzeros\\t%0\n   fones\\t%0\n-  fsrc1s\\t%1, %0\n+  fsrc2s\\t%1, %0\n   ld\\t%1, %0\n   st\\t%1, %0\n   st\\t%r1, %0\n@@ -7885,7 +7885,7 @@\n   mov\\t%1, %0\n   movstouw\\t%1, %0\n   movwtos\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")\n+  [(set_attr \"type\" \"visl,visl,vismv,fpload,fpstore,store,load,store,*,vismv,vismv\")\n    (set_attr \"cpu_feature\" \"vis,vis,vis,*,*,*,*,*,*,vis3,vis3\")])\n \n (define_insn \"*mov<VM64:mode>_insn_sp64\"\n@@ -7898,7 +7898,7 @@\n   \"@\n   fzero\\t%0\n   fone\\t%0\n-  fsrc1\\t%1, %0\n+  fsrc2\\t%1, %0\n   ldd\\t%1, %0\n   std\\t%1, %0\n   stx\\t%r1, %0\n@@ -7907,7 +7907,7 @@\n   movdtox\\t%1, %0\n   movxtod\\t%1, %0\n   mov\\t%1, %0\"\n-  [(set_attr \"type\" \"fga,fga,fga,fpload,fpstore,store,load,store,*,*,*\")\n+  [(set_attr \"type\" \"visl,visl,vismv,fpload,fpstore,store,load,store,vismv,vismv,*\")\n    (set_attr \"cpu_feature\" \"vis,vis,vis,*,*,*,*,*,vis3,vis3,*\")])\n \n (define_insn \"*mov<VM64:mode>_insn_sp32\"\n@@ -7920,7 +7920,7 @@\n   \"@\n   fzero\\t%0\n   fone\\t%0\n-  fsrc1\\t%1, %0\n+  fsrc2\\t%1, %0\n   #\n   #\n   ldd\\t%1, %0\n@@ -7930,7 +7930,7 @@\n   std\\t%1, %0\n   #\n   #\"\n-  [(set_attr \"type\" \"fga,fga,fga,*,*,fpload,fpstore,store,load,store,*,*\")\n+  [(set_attr \"type\" \"visl,visl,vismv,*,*,fpload,fpstore,store,load,store,*,*\")\n    (set_attr \"length\" \"*,*,*,2,2,*,*,*,*,*,2,2\")\n    (set_attr \"cpu_feature\" \"vis,vis,vis,vis3,vis3,*,*,*,*,*,*,*\")])\n \n@@ -8025,7 +8025,7 @@\n \t\t (match_operand:VL 2 \"register_operand\" \"<vconstr>\")))]\n   \"TARGET_VIS\"\n   \"f<vlinsn><vlsuf>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n (define_insn \"*not_<code><mode>3\"\n@@ -8034,7 +8034,7 @@\n \t\t\t (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n   \"TARGET_VIS\"\n   \"f<vlninsn><vlsuf>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n ;; (ior (not (op1)) (not (op2))) is the canonical form of NAND.\n@@ -8044,7 +8044,7 @@\n \t\t(not:VL (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n   \"TARGET_VIS\"\n   \"fnand<vlsuf>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n (define_code_iterator vlnotop [ior and])\n@@ -8055,7 +8055,7 @@\n \t\t    (match_operand:VL 2 \"register_operand\" \"<vconstr>\")))]\n   \"TARGET_VIS\"\n   \"f<vlinsn>not1<vlsuf>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n (define_insn \"*<code>_not2<mode>_vis\"\n@@ -8064,15 +8064,15 @@\n \t\t    (not:VL (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n   \"TARGET_VIS\"\n   \"f<vlinsn>not2<vlsuf>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(not:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\")))]\n   \"TARGET_VIS\"\n   \"fnot1<vlsuf>\\t%1, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"<vfptype>\")])\n \n ;; Hard to generate VIS instructions.  We have builtins for these.\n@@ -8351,7 +8351,7 @@\n          UNSPEC_PDIST))]\n   \"TARGET_VIS\"\n   \"pdist\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fgm_pdist\")\n+  [(set_attr \"type\" \"pdist\")\n    (set_attr \"fptype\" \"double\")])\n \n ;; Edge instructions produce condition codes equivalent to a 'subcc'\n@@ -8433,7 +8433,7 @@\n \t UNSPEC_FCMP))]\n   \"TARGET_VIS\"\n   \"fcmp<code><GCM:gcm_name>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")\n+  [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_expand \"vcond<mode><mode>\"\n@@ -8674,7 +8674,7 @@\n          UNSPEC_PDISTN))]\n   \"TARGET_VIS3\"\n   \"pdistn\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fgm_pdist\")\n+  [(set_attr \"type\" \"pdistn\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"fmean16_vis\"\n@@ -8724,7 +8724,7 @@\n \t UNSPEC_FUCMP))]\n   \"TARGET_VIS3\"\n   \"fucmp<code>8\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"fga\")])\n+  [(set_attr \"type\" \"visl\")])\n \n (define_insn \"*naddsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")"}, {"sha": "0ab32e5c5d2e37f961db4838c6fb362d8d69711e", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -255,7 +255,7 @@\n   2\n   (and (and\n          (eq_attr \"cpu\" \"ultrasparc\")\n-         (eq_attr \"type\" \"fga\"))\n+         (eq_attr \"type\" \"fga,visl,vismv\"))\n        (eq_attr \"fptype\" \"single\"))\n   \"us1_fpa + us1_fp_single + us1_slotany, nothing\")\n \n@@ -265,7 +265,7 @@\n   2\n   (and (and\n          (eq_attr \"cpu\" \"ultrasparc\")\n-         (eq_attr \"type\" \"fga\"))\n+         (eq_attr \"type\" \"fga,visl,vismv\"))\n        (eq_attr \"fptype\" \"double\"))\n   \"us1_fpa + us1_fp_double + us1_slotany, nothing\")\n \n@@ -294,7 +294,7 @@\n (define_insn_reservation \"us1_pdist\"\n   4\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n-       (eq_attr \"type\" \"fgm_pdist\"))\n+       (eq_attr \"type\" \"pdist\"))\n   \"us1_fpm + us1_fp_double + us1_slotany, nothing*3\")\n \n (define_bypass 3 \"us1_pdist\" \"us1_fga_double,us1_fga_single\")"}, {"sha": "f85734b948bf2fb9138145112c8e20cca04d4cc4", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f298688cb7abbdfc858995bfc208d59592e23d08/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=f298688cb7abbdfc858995bfc208d59592e23d08", "patch": "@@ -176,7 +176,7 @@\n (define_insn_reservation \"us3_fga\"\n   3\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n-       (eq_attr \"type\" \"fga\"))\n+       (eq_attr \"type\" \"fga,visl,vismv\"))\n   \"us3_fpa + us3_slotany, nothing*2\")\n \n (define_insn_reservation \"us3_fgm\"\n@@ -188,7 +188,7 @@\n (define_insn_reservation \"us3_pdist\"\n   4\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n-       (eq_attr \"type\" \"fgm_pdist\"))\n+       (eq_attr \"type\" \"pdist\"))\n   \"us3_fpm + us3_slotany, nothing*3\")\n \n (define_bypass 1 \"us3_pdist\" \"us3_pdist\")"}]}