{"sha": "6b10f1741a1d79c9e32e8790fb98ba93c864b219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxMGYxNzQxYTFkNzljOWUzMmU4NzkwZmI5OGJhOTNjODY0YjIxOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-23T20:39:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-23T20:39:59Z"}, "message": "re PR debug/82630 (Bogus DW_AT_GNU_call_site_value)\n\n\tPR debug/82630\n\t* target.def (const_not_ok_for_debug_p): Default to\n\tdefault_const_not_ok_for_debug_p instead of hook_bool_rtx_false.\n\t* targhooks.h (default_const_not_ok_for_debug_p): New declaration.\n\t* targhooks.c (default_const_not_ok_for_debug_p): New function.\n\t* dwarf2out.c (const_ok_for_output_1): Only reject UNSPECs for\n\twhich targetm.const_not_ok_for_debug_p returned true.\n\t* config/arm/arm.c (arm_const_not_ok_for_debug_p): Return true\n\tfor UNSPECs.\n\t* config/powerpcspe/powerpcspe.c (rs6000_const_not_ok_for_debug_p):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_const_not_ok_for_debug_p): Likewise.\n\t* config/i386/i386.c (ix86_delegitimize_address_1): Don't delegitimize\n\tUNSPEC_GOTOFF with addend into addend - _GLOBAL_OFFSET_TABLE_ + symbol\n\tif !base_term_p.\n\t(ix86_const_not_ok_for_debug_p): New function.\n\t(i386_asm_output_addr_const_extra): Handle UNSPEC_GOTOFF.\n\t(TARGET_CONST_NOT_OK_FOR_DEBUG_P): Redefine.\n\n\t* g++.dg/guality/pr82630.C: New test.\n\nFrom-SVN: r254025", "tree": {"sha": "6be0cd9642ffdeb173e3fdad8079590f6f59e342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6be0cd9642ffdeb173e3fdad8079590f6f59e342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b10f1741a1d79c9e32e8790fb98ba93c864b219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b10f1741a1d79c9e32e8790fb98ba93c864b219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b10f1741a1d79c9e32e8790fb98ba93c864b219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b10f1741a1d79c9e32e8790fb98ba93c864b219/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b367de5dc31371f88b59e165aa6b8be4ed9ee070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b367de5dc31371f88b59e165aa6b8be4ed9ee070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b367de5dc31371f88b59e165aa6b8be4ed9ee070"}], "stats": {"total": 154, "additions": 142, "deletions": 12}, "files": [{"sha": "b9be7254ff79b8b2a2a2a67efaba773cf48180f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -1,3 +1,24 @@\n+2017-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/82630\n+\t* target.def (const_not_ok_for_debug_p): Default to\n+\tdefault_const_not_ok_for_debug_p instead of hook_bool_rtx_false.\n+\t* targhooks.h (default_const_not_ok_for_debug_p): New declaration.\n+\t* targhooks.c (default_const_not_ok_for_debug_p): New function.\n+\t* dwarf2out.c (const_ok_for_output_1): Only reject UNSPECs for\n+\twhich targetm.const_not_ok_for_debug_p returned true.\n+\t* config/arm/arm.c (arm_const_not_ok_for_debug_p): Return true\n+\tfor UNSPECs.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_const_not_ok_for_debug_p):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_const_not_ok_for_debug_p): Likewise.\n+\t* config/i386/i386.c (ix86_delegitimize_address_1): Don't delegitimize\n+\tUNSPEC_GOTOFF with addend into addend - _GLOBAL_OFFSET_TABLE_ + symbol\n+\tif !base_term_p.\n+\t(ix86_const_not_ok_for_debug_p): New function.\n+\t(i386_asm_output_addr_const_extra): Handle UNSPEC_GOTOFF.\n+\t(TARGET_CONST_NOT_OK_FOR_DEBUG_P): Redefine.\n+\n 2017-10-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR bootstrap/82610"}, {"sha": "22e169318ad2d890c4d27aa83645478626df896c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -30391,6 +30391,8 @@ arm_const_not_ok_for_debug_p (rtx p)\n   tree decl_op0 = NULL;\n   tree decl_op1 = NULL;\n \n+  if (GET_CODE (p) == UNSPEC)\n+    return true;\n   if (GET_CODE (p) == MINUS)\n     {\n       if (GET_CODE (XEXP (p, 1)) == SYMBOL_REF)"}, {"sha": "72caf62bbf8e7e39bffbf8392dc532c4ea8d500d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -16840,13 +16840,17 @@ ix86_delegitimize_address_1 (rtx x, bool base_term_p)\n \t movl foo@GOTOFF(%ecx), %edx\n \t in which case we return (%ecx - %ebx) + foo\n \t or (%ecx - _GLOBAL_OFFSET_TABLE_) + foo if pseudo_pic_reg\n-\t and reload has completed.  */\n+\t and reload has completed.  Don't do the latter for debug,\n+\t as _GLOBAL_OFFSET_TABLE_ can't be expressed in the assembly.  */\n       if (pic_offset_table_rtx\n \t  && (!reload_completed || !ix86_use_pseudo_pic_reg ()))\n         result = gen_rtx_PLUS (Pmode, gen_rtx_MINUS (Pmode, copy_rtx (addend),\n \t\t\t\t\t\t     pic_offset_table_rtx),\n \t\t\t       result);\n-      else if (pic_offset_table_rtx && !TARGET_MACHO && !TARGET_VXWORKS_RTP)\n+      else if (base_term_p\n+\t       && pic_offset_table_rtx\n+\t       && !TARGET_MACHO\n+\t       && !TARGET_VXWORKS_RTP)\n \t{\n \t  rtx tmp = gen_rtx_SYMBOL_REF (Pmode, GOT_SYMBOL_NAME);\n \t  tmp = gen_rtx_MINUS (Pmode, copy_rtx (addend), tmp);\n@@ -16899,6 +16903,25 @@ ix86_find_base_term (rtx x)\n \n   return ix86_delegitimize_address_1 (x, true);\n }\n+\n+/* Return true if X shouldn't be emitted into the debug info.\n+   Disallow UNSPECs other than @gotoff - we can't emit _GLOBAL_OFFSET_TABLE_\n+   symbol easily into the .debug_info section, so we need not to\n+   delegitimize, but instead assemble as @gotoff.\n+   Disallow _GLOBAL_OFFSET_TABLE_ SYMBOL_REF - the assembler magically\n+   assembles that as _GLOBAL_OFFSET_TABLE_-. expression.  */\n+\n+static bool\n+ix86_const_not_ok_for_debug_p (rtx x)\n+{\n+  if (GET_CODE (x) == UNSPEC && XINT (x, 1) != UNSPEC_GOTOFF)\n+    return true;\n+\n+  if (SYMBOL_REF_P (x) && strcmp (XSTR (x, 0), GOT_SYMBOL_NAME) == 0)\n+    return true;\n+\n+  return false;\n+}\n \f\n static void\n put_condition_code (enum rtx_code code, machine_mode mode, bool reverse,\n@@ -18217,6 +18240,10 @@ i386_asm_output_addr_const_extra (FILE *file, rtx x)\n   op = XVECEXP (x, 0, 0);\n   switch (XINT (x, 1))\n     {\n+    case UNSPEC_GOTOFF:\n+      output_addr_const (file, op);\n+      fputs (\"@gotoff\", file);\n+      break;\n     case UNSPEC_GOTTPOFF:\n       output_addr_const (file, op);\n       /* FIXME: This might be @TPOFF in Sun ld.  */\n@@ -49827,6 +49854,9 @@ ix86_run_selftests (void)\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS ix86_delegitimize_address\n \n+#undef TARGET_CONST_NOT_OK_FOR_DEBUG_P\n+#define TARGET_CONST_NOT_OK_FOR_DEBUG_P ix86_const_not_ok_for_debug_p\n+\n #undef TARGET_MS_BITFIELD_LAYOUT_P\n #define TARGET_MS_BITFIELD_LAYOUT_P ix86_ms_bitfield_layout_p\n "}, {"sha": "b5fc656a8f1d9bd279b6faade023e784c70bdb29", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -9539,6 +9539,8 @@ rs6000_delegitimize_address (rtx orig_x)\n static bool\n rs6000_const_not_ok_for_debug_p (rtx x)\n {\n+  if (GET_CODE (x) == UNSPEC)\n+    return true;\n   if (GET_CODE (x) == SYMBOL_REF\n       && CONSTANT_POOL_ADDRESS_P (x))\n     {"}, {"sha": "309541933cd0b9224b29aa310e6bb4348e0e9054", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -8988,6 +8988,8 @@ rs6000_delegitimize_address (rtx orig_x)\n static bool\n rs6000_const_not_ok_for_debug_p (rtx x)\n {\n+  if (GET_CODE (x) == UNSPEC)\n+    return true;\n   if (GET_CODE (x) == SYMBOL_REF\n       && CONSTANT_POOL_ADDRESS_P (x))\n     {"}, {"sha": "dcc624e6fe011d4311c40dc0e30ec98f693bc34f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -13740,9 +13740,17 @@ expansion_failed (tree expr, rtx rtl, char const *reason)\n static bool\n const_ok_for_output_1 (rtx rtl)\n {\n-  if (GET_CODE (rtl) == UNSPEC)\n+  if (targetm.const_not_ok_for_debug_p (rtl))\n     {\n-      /* If delegitimize_address couldn't do anything with the UNSPEC, assume\n+      if (GET_CODE (rtl) != UNSPEC)\n+\t{\n+\t  expansion_failed (NULL_TREE, rtl,\n+\t\t\t    \"Expression rejected for debug by the backend.\\n\");\n+\t  return false;\n+\t}\n+\n+      /* If delegitimize_address couldn't do anything with the UNSPEC, and\n+\t the target hook doesn't explicitly allow it in debug info, assume\n \t we can't express it in the debug info.  */\n       /* Don't complain about TLS UNSPECs, those are just too hard to\n \t delegitimize.  Note this could be a non-decl SYMBOL_REF such as\n@@ -13769,13 +13777,6 @@ const_ok_for_output_1 (rtx rtl)\n       return false;\n     }\n \n-  if (targetm.const_not_ok_for_debug_p (rtl))\n-    {\n-      expansion_failed (NULL_TREE, rtl,\n-\t\t\t\"Expression rejected for debug by the backend.\\n\");\n-      return false;\n-    }\n-\n   /* FIXME: Refer to PR60655. It is possible for simplification\n      of rtl expressions in var tracking to produce such expressions.\n      We should really identify / validate expressions"}, {"sha": "435849c3d35f506e1285fc6834f543994c574414", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -2822,7 +2822,7 @@ DEFHOOK\n  \"This hook should return true if @var{x} should not be emitted into\\n\\\n debug sections.\",\n  bool, (rtx x),\n- hook_bool_rtx_false)\n+ default_const_not_ok_for_debug_p)\n \n /* Given an address RTX, say whether it is valid.  */\n DEFHOOK"}, {"sha": "41cab3825df20ddf8baa2a98bb57de6e41fda4ba", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -177,6 +177,14 @@ default_legitimize_address_displacement (rtx *disp ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+bool\n+default_const_not_ok_for_debug_p (rtx x)\n+{\n+  if (GET_CODE (x) == UNSPEC)\n+    return true;\n+  return false;\n+}\n+\n rtx\n default_expand_builtin_saveregs (void)\n {"}, {"sha": "1510bb97a9ca46aed2a43d0eb130629376e085da", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -26,6 +26,7 @@ extern void default_external_libcall (rtx);\n extern rtx default_legitimize_address (rtx, rtx, machine_mode);\n extern bool default_legitimize_address_displacement (rtx *, rtx *,\n \t\t\t\t\t\t     machine_mode);\n+extern bool default_const_not_ok_for_debug_p (rtx);\n \n extern int default_unspec_may_trap_p (const_rtx, unsigned);\n extern machine_mode default_promote_function_mode (const_tree, machine_mode,"}, {"sha": "f6fd200329a60e8d728c35aed2d5bcca3d92e6e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -1,3 +1,8 @@\n+2017-10-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/82630\n+\t* g++.dg/guality/pr82630.C: New test.\n+\n 2017-10-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/82662"}, {"sha": "71d11acf5e2403661b259f32e21af7704e2cd5e8", "filename": "gcc/testsuite/g++.dg/guality/pr82630.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr82630.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b10f1741a1d79c9e32e8790fb98ba93c864b219/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr82630.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr82630.C?ref=6b10f1741a1d79c9e32e8790fb98ba93c864b219", "patch": "@@ -0,0 +1,58 @@\n+// PR debug/82630\n+// { dg-do run }\n+// { dg-additional-options \"-fPIC\" { target fpic } }\n+\n+struct C\n+{\n+  int &c;\n+  long d;\n+  __attribute__((always_inline)) C (int &x) : c(x), d() {}\n+};\n+int v;\n+\n+__attribute__((noipa)) void\n+fn1 (const void *x)\n+{\n+  asm volatile (\"\" : : \"g\" (x) : \"memory\");\n+}\n+\n+__attribute__((noipa)) void\n+fn2 (C x)\n+{\n+  int a = x.c + x.d;\n+  asm volatile (\"\" : : \"g\" (a) : \"memory\");\n+}\n+\n+__attribute__((noipa)) void\n+fn3 (void)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+__attribute__((noipa))\n+#ifdef __i386__\n+__attribute__((regparm (2)))\n+#endif\n+static void\n+fn4 (int *x, const char *y, C z)\n+{\n+  fn2 (C (*x));\n+  fn1 (\"baz\");\n+  fn2 (z);\t// { dg-final { gdb-test 41 \"y\\[0\\]\" \"'f'\" } }\n+  fn1 (\"baz\");\t// { dg-final { gdb-test 41 \"y\\[1\\]\" \"'o'\" } }\n+}\n+\n+__attribute__((noipa)) void\n+fn5 (int *x)\n+{\n+  fn4 (x, \"foo\", C (*x));\n+  fn3 ();\n+}\n+\n+int\n+main ()\n+{\n+  int a = 10;\n+  fn5 (&a);\n+  return 0;\n+}"}]}