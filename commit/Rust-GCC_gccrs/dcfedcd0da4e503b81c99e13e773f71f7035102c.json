{"sha": "dcfedcd0da4e503b81c99e13e773f71f7035102c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmZWRjZDBkYTRlNTAzYjgxYzk5ZTEzZTc3M2Y3MWY3MDM1MTAyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-12T21:11:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-12T21:11:03Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r730", "tree": {"sha": "4f6f4ba406a519023d5c578c157b17085ecc8fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f6f4ba406a519023d5c578c157b17085ecc8fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfedcd0da4e503b81c99e13e773f71f7035102c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfedcd0da4e503b81c99e13e773f71f7035102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfedcd0da4e503b81c99e13e773f71f7035102c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfedcd0da4e503b81c99e13e773f71f7035102c/comments", "author": null, "committer": null, "parents": [{"sha": "cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc54cc9f9c16d7df406c8018a8d5a279be492dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc54cc9f9c16d7df406c8018a8d5a279be492dc"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "ae08a33d51c15e4dd9a8f4dffb2b9b7b3834887a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dcfedcd0da4e503b81c99e13e773f71f7035102c", "patch": "@@ -813,7 +813,7 @@ recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n    insn-flags.h insn-codes.h real.h\n reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H) \\\n    regs.h hard-reg-set.h flags.h insn-config.h\n-   \n+\n aux-output.o : aux-output.c $(CONFIG_H) \\\n    $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h \\\n    insn-flags.h output.h insn-attr.h insn-codes.h\n@@ -1153,6 +1153,7 @@ mostlyclean:\n \tfor name in $(LIB1FUNCS); do rm -f $${name}.c; done\n # Delete other temporary files.\n \t-rm -f tmp-float.h tmp-*proto.1 tmp-gcc.xtar.Z tmp-limits.h gccnew\n+\t-rm -f tmp-foo1 tmp-foo2\n # Delete the stamp files.\n \t-rm -f stamp-* tmp-*\n # Delete debugging dump files.\n@@ -1550,6 +1551,26 @@ bootstrap2: force\n bootstrap3: force\n \t$(MAKE) CC=\"stage2/gcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n+# Compare the object files in the current directory with those in the\n+# stage2 directory.\n+\n+compare: force\n+\tfor file in *.o; do \\\n+\t  tail +10c $file > tmp-foo1; \\\n+\t  tail +10c stage2/$file > tmp-foo2; \\\n+\t  cmp tmp-foo1 tmp-foo2 || echo $file differs; \\\n+\tdone\n+\t-rm -f tmp-foo*\n+\n+# Similar, but compare with stage3 directory\n+compare3: force\n+\tfor file in *.o; do \\\n+\t  tail +10c $file > tmp-foo1; \\\n+\t  tail +10c stage3/$file > tmp-foo2; \\\n+\t  cmp tmp-foo1 tmp-foo2 || echo $file differs; \\\n+\tdone\n+\t-rm -f tmp-foo*\n+\n # Copy the object files from a particular stage into a subdirectory.\n stage1: force\n \t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi"}, {"sha": "e190d807e3a82220e931f6054acf9447c7370ffb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dcfedcd0da4e503b81c99e13e773f71f7035102c", "patch": "@@ -98,6 +98,17 @@ u_short_cint_operand (op, mode)\n   return (GET_CODE (op) == CONST_INT && (INTVAL (op) & 0xffff0000) == 0);\n }\n \n+/* Return 1 if OP is a CONST_INT that cannot fit in a signed D field.  */\n+\n+int\n+non_short_cint_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (unsigned) (INTVAL (op) + 0x8000) >= 0x10000);\n+}\n+\n /* Returns 1 if OP is a register that is not special (i.e., not MQ,\n    ctr, or lr).  */\n \n@@ -248,6 +259,18 @@ add_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && (INTVAL (op) & 0xffff) == 0));\n }\n \n+/* Return 1 if OP is a constant but not a valid add_operand.  */\n+\n+int\n+non_add_cint_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (unsigned) (INTVAL (op) + 0x8000) >= 0x10000\n+\t  && (INTVAL (op) & 0xffff) != 0);\n+}\n+\n /* Return 1 if the operand is a non-special register or a constant that\n    can be used as the operand of an OR or XOR insn on the RS/6000.  */\n \n@@ -262,6 +285,19 @@ logical_operand (op, mode)\n \t\t  || (INTVAL (op) & 0xffff) == 0)));\n }\n \n+/* Return 1 if C is a constant that is not a logical operand (as\n+   above).  */\n+\n+int\n+non_logical_cint_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (INTVAL (op) & 0xffff0000) != 0\n+\t  && (INTVAL (op) & 0xffff) != 0);\n+}\n+\n /* Return 1 if C is a constant that can be encoded in a mask on the\n    RS/6000.  It is if there are no more than two 1->0 or 0->1 transitions.\n    Reject all ones and all zeros, since these should have been optimized\n@@ -310,6 +346,17 @@ and_operand (op, mode)\n \t  || mask_operand (op, mode));\n }\n \n+/* Return 1 if the operand is a constant but not a valid operand for an AND\n+   insn.  */\n+\n+int\n+non_and_cint_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return GET_CODE (op) == CONST_INT && ! and_operand (op, mode);\n+}\n+\n /* Return 1 if the operand is a general register or memory operand.  */\n \n int"}, {"sha": "1c531648584944087c6b90a61cdf81d86abd5e3b", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=dcfedcd0da4e503b81c99e13e773f71f7035102c", "patch": "@@ -1155,6 +1155,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n \t  if (j < 0)\n \t    {\n+\t      if (j == -3)\n+\t\tcontinue;\n+\n \t      error (\"unknown register name `%s' in `asm'\", regname);\n \t      return;\n \t    }"}, {"sha": "a2f7e8f8f5679a87956304092264839f5026ce77", "filename": "gcc/varasm.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfedcd0da4e503b81c99e13e773f71f7035102c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=dcfedcd0da4e503b81c99e13e773f71f7035102c", "patch": "@@ -208,11 +208,13 @@ strip_reg_name (name)\n     name++;\n   return name;\n }\n-\n+\f\n /* Decode an `asm' spec for a declaration as a register name.\n    Return the register number, or -1 if nothing specified,\n-   or -2 if the name is not a register.  Accept an exact spelling or\n-   a decimal number.  Prefixes such as % are optional.  */\n+   or -2 if the ASMSPEC is not `cc' and is recognized,\n+   or -3 if ASMSPEC is `cc' and is not recognized.\n+   Accept an exact spelling or a decimal number.\n+   Prefixes such as % are optional.  */\n \n int\n decode_reg_name (asmspec)\n@@ -254,6 +256,9 @@ decode_reg_name (asmspec)\n       }\n #endif /* ADDITIONAL_REGISTER_NAMES */\n \n+      if (!strcmp (asmspec, \"cc\"))\n+\treturn -3;\n+\n       return -2;\n     }\n \n@@ -302,10 +307,10 @@ make_decl_rtl (decl, asmspec, top_level)\n       if (TREE_REGDECL (decl) && reg_number == -1)\n \terror_with_decl (decl,\n \t\t\t \"register name not specified for `%s'\");\n-      else if (TREE_REGDECL (decl) && reg_number == -2)\n+      else if (TREE_REGDECL (decl) && reg_number < 0)\n \terror_with_decl (decl,\n \t\t\t \"invalid register name for `%s'\");\n-      else if (reg_number >= 0 && ! TREE_REGDECL (decl))\n+      else if ((reg_number >= 0 || reg_number == -3) && ! TREE_REGDECL (decl))\n \terror_with_decl (decl,\n \t\t\t \"register name given for non-register variable `%s'\");\n       else if (TREE_REGDECL (decl) && TREE_CODE (decl) == FUNCTION_DECL)"}]}