{"sha": "941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxYWU4YjQ4ZWJhOGQ1YjZmZjY5NmY5YmRjNmM2Y2ZmZjMyNDdkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-23T13:52:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-23T13:52:23Z"}, "message": "re PR c++/83958 (ICE: Segmentation fault (in find_decomp_class_base))\n\n\tPR c++/83958\n\t* decl.c (cp_finish_decomp): Diagnose if reference structure binding\n\trefers to incomplete type.\n\n\t* g++.dg/cpp1z/decomp35.C: New test.\n\nFrom-SVN: r256984", "tree": {"sha": "674742c8ae0d0392946a1255a04c3d022e9b59d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674742c8ae0d0392946a1255a04c3d022e9b59d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a53d4f2004efef705435ea3e6bacfcca002d6c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53d4f2004efef705435ea3e6bacfcca002d6c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53d4f2004efef705435ea3e6bacfcca002d6c64"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "5adf93075d5221ac7a0a9dbfe16da5ff8d86aa51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "patch": "@@ -1,3 +1,9 @@\n+2018-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83958\n+\t* decl.c (cp_finish_decomp): Diagnose if reference structure binding\n+\trefers to incomplete type.\n+\n 2018-01-23  Nathan Sidwell  <nathan@acm.org>\n \n \tDeprecate ARM-era for scope handling"}, {"sha": "5f197ef68d8c4a8383ef433f76d06b0f2017fbc2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "patch": "@@ -7435,6 +7435,12 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n       type = complete_type (TREE_TYPE (type));\n       if (type == error_mark_node)\n \tgoto error_out;\n+      if (!COMPLETE_TYPE_P (type))\n+\t{\n+\t  error_at (loc, \"structured binding refers to incomplete type %qT\",\n+\t\t    type);\n+\t  goto error_out;\n+\t}\n     }\n \n   tree eltype = NULL_TREE;"}, {"sha": "8a997aa8614c14ce836892735f45eaf6fab5043d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "patch": "@@ -1,3 +1,8 @@\n+2018-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/83958\n+\t* g++.dg/cpp1z/decomp35.C: New test.\n+\n 2018-01-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/cpp0x/range-for10.C: Adjust."}, {"sha": "844ad43e141967838abd64173b28aa45e9b3a455", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp35.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp35.C?ref=941ae8b48eba8d5b6ff696f9bdc6c6cfff3247d0", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/83958\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template <typename = void> struct A;\n+class B;\n+template <typename, typename, typename = A<>> class C;\n+template <typename, typename> struct D;\n+template <typename T, typename U, typename V, typename, typename, typename W>\n+struct E {\n+  using X = W;\n+  X operator* ();\n+  T operator++ ();\n+  template <typename P, typename R, typename S, typename Q>\n+  bool operator!= (E<P, U, V, R, S, Q>);\n+};\n+template <typename T, typename U, typename>\n+struct F {\n+  class G;\n+  using H = D<T, U>;\n+  using I = E<G, T, U, G, H, H &>;\n+  class G : public I {};\n+  G begin ();\n+  G end ();\n+};\n+template <typename T, typename U, typename V> struct C : F<T, U, V> {\n+  using J = F<T, U, V>;\n+  using J::begin;\n+  using J::end;\n+};\n+using K = class L;\n+struct M {\n+  void foo () { for (auto & [ a ] : m) {} }\t// { dg-error \"incomplete type\" }\n+  C<K, B> m;\t\t\t\t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-1 }\n+};"}]}