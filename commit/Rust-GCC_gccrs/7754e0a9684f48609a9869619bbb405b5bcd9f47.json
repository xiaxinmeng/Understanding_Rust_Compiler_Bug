{"sha": "7754e0a9684f48609a9869619bbb405b5bcd9f47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1NGUwYTk2ODRmNDg2MDlhOTg2OTYxOWJiYjQwNWI1YmNkOWY0Nw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-10-04T02:58:39Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-10-04T02:58:39Z"}, "message": "parse.y (patch_assignment): Use lvalue's original TYPE when building the final COMPOUND_EXPR.\n\n2001-10-03  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (patch_assignment): Use lvalue's original TYPE when\n\tbuilding the final COMPOUND_EXPR.\n\t(try_reference_assignconv): Fixed leading comment.\n\n( http://gcc.gnu.org/ml/java-patches/2001-q4/msg00027.html )\n\nFrom-SVN: r46004", "tree": {"sha": "a3dd68ed74022c80754e02db8c64eaa9a7f613a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3dd68ed74022c80754e02db8c64eaa9a7f613a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7754e0a9684f48609a9869619bbb405b5bcd9f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7754e0a9684f48609a9869619bbb405b5bcd9f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7754e0a9684f48609a9869619bbb405b5bcd9f47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7754e0a9684f48609a9869619bbb405b5bcd9f47/comments", "author": null, "committer": null, "parents": [{"sha": "8276ed21b0ddcca0037255fddc290895356f7548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8276ed21b0ddcca0037255fddc290895356f7548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8276ed21b0ddcca0037255fddc290895356f7548"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "71fdf9251b4637d032e530e84aa2f0cd5c66758a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7754e0a9684f48609a9869619bbb405b5bcd9f47/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7754e0a9684f48609a9869619bbb405b5bcd9f47/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7754e0a9684f48609a9869619bbb405b5bcd9f47", "patch": "@@ -1,3 +1,9 @@\n+2001-10-03  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (patch_assignment): Use lvalue's original TYPE when\n+\tbuilding the final COMPOUND_EXPR.\n+\t(try_reference_assignconv): Fixed leading comment.\n+\n 2001-09-26  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (check_final_variable_indirect_assignment): For"}, {"sha": "6fa305486d42c6afb2adc5119ad10c12f6f62d2e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7754e0a9684f48609a9869619bbb405b5bcd9f47/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7754e0a9684f48609a9869619bbb405b5bcd9f47/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7754e0a9684f48609a9869619bbb405b5bcd9f47", "patch": "@@ -13002,10 +13002,11 @@ patch_assignment (node, wfl_op1, wfl_op2)\n             build (COMPOUND_EXPR, void_type_node, bound_check, check);\n \n           /* Re-assemble the augmented array access. */\n-          lvalue = build (COMPOUND_EXPR, lhs_type, new_compound, lvalue);\n+          lvalue = build (COMPOUND_EXPR, TREE_TYPE (lvalue),\n+\t\t\t  new_compound, lvalue);\n         }\n       else\n-        lvalue = build (COMPOUND_EXPR, lhs_type, check, lvalue);\n+        lvalue = build (COMPOUND_EXPR, TREE_TYPE (lvalue), check, lvalue);\n     }\n \n   /* Final locals can be used as case values in switch\n@@ -13028,9 +13029,8 @@ patch_assignment (node, wfl_op1, wfl_op2)\n }\n \n /* Check that type SOURCE can be cast into type DEST. If the cast\n-   can't occur at all, return 0 otherwise 1. This function is used to\n-   produce accurate error messages on the reasons why an assignment\n-   failed. */\n+   can't occur at all, return NULL; otherwise, return a possibly\n+   modified rhs.  */\n \n static tree\n try_reference_assignconv (lhs_type, rhs)"}]}