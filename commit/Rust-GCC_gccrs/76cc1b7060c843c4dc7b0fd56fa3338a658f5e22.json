{"sha": "76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjYzFiNzA2MGM4NDNjNGRjN2IwZmQ1NmZhMzMzOGE2NThmNWUyMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-25T16:39:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-25T16:39:15Z"}, "message": "stl_algo.h (__find_if_not, [...]): Add in C++0x, per N2666.\n\n2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (__find_if_not, find_if_not, all_of,\n\tany_of, none_of): Add in C++0x, per N2666.\n\t* include/bits/algorithmfwd.h: Update.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Likewise.\n\t* testsuite/25_algorithms/all_of/check_type.cc: New.\n\t* testsuite/25_algorithms/all_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/\n\t2.cc: Likewise.\n\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\t* testsuite/25_algorithms/any_of/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/any_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/\n\t2.cc: Likewise.\n\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/1.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/\n\t2.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/\n\tpod.cc: Likewise.\n\t* testsuite/25_algorithms/find_if_not/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/find_if_not/1.cc: Likewise.\n\t* testsuite/25_algorithms/find_if_not/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/find_if_not/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/copy_if/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/remove_copy_if/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/find_if/1.cc: Minor tweaks.\n\nFrom-SVN: r137118", "tree": {"sha": "673197ed2c6bb05d178cef599c6670d678b7ecaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/673197ed2c6bb05d178cef599c6670d678b7ecaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/comments", "author": null, "committer": null, "parents": [{"sha": "0ee6106531e53069f50e2dd9cacd4ae7f9fbe657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee6106531e53069f50e2dd9cacd4ae7f9fbe657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee6106531e53069f50e2dd9cacd4ae7f9fbe657"}], "stats": {"total": 1201, "additions": 1191, "deletions": 10}, "files": [{"sha": "093c030489fd6316a15cf30c8ad085dc41eff758", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -1,3 +1,37 @@\n+2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (__find_if_not, find_if_not, all_of,\n+\tany_of, none_of): Add in C++0x, per N2666.\n+\t* include/bits/algorithmfwd.h: Update.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Likewise.\n+\t* testsuite/25_algorithms/all_of/check_type.cc: New.\n+\t* testsuite/25_algorithms/all_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/\n+\t2.cc: Likewise.\n+\t* testsuite/25_algorithms/all_of/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\t* testsuite/25_algorithms/any_of/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/any_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/\n+\t2.cc: Likewise.\n+\t* testsuite/25_algorithms/any_of/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/1.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/\n+\t2.cc: Likewise.\n+\t* testsuite/25_algorithms/none_of/requirements/explicit_instantiation/\n+\tpod.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if_not/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if_not/1.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if_not/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if_not/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_if/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/remove_copy_if/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/find_if/1.cc: Minor tweaks.\n+\n 2008-06-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/manual/parallel_mode.xml: Clarify use of explicit"}, {"sha": "992dc4f5afeed025554e3e6abeb88ac00cbc270d", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -169,6 +169,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // generate\n   // generate_n\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    all_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    any_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    none_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    _IIter\n+    find_if_not(_IIter, _IIter, _Predicate);\n+#endif\n+\n   template<typename _IIter1, typename _IIter2>\n     bool \n     includes(_IIter1, _IIter1, _IIter2, _IIter2);\n@@ -461,7 +479,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _IIter, typename _Predicate>\n-    _IIter \n+    _IIter\n     find_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Funct>"}, {"sha": "cee7d613d6ac98e927c92c190ff6e0fdf4efbc32", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 135, "deletions": 1, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -260,6 +260,67 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /// This is an overload used by find_if_not() for the Input Iterator case.\n+  template<typename _InputIterator, typename _Predicate>\n+    inline _InputIterator\n+    __find_if_not(_InputIterator __first, _InputIterator __last,\n+\t\t  _Predicate __pred, input_iterator_tag)\n+    {\n+      while (__first != __last && bool(__pred(*__first)))\n+\t++__first;\n+      return __first;\n+    }\n+\n+  /// This is an overload used by find_if_not() for the RAI case.\n+  template<typename _RandomAccessIterator, typename _Predicate>\n+    _RandomAccessIterator\n+    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t\t  _Predicate __pred, random_access_iterator_tag)\n+    {\n+      typename iterator_traits<_RandomAccessIterator>::difference_type\n+\t__trip_count = (__last - __first) >> 2;\n+\n+      for (; __trip_count > 0; --__trip_count)\n+\t{\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\t}\n+\n+      switch (__last - __first)\n+\t{\n+\tcase 3:\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\tcase 2:\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\tcase 1:\n+\t  if (!bool(__pred(*__first)))\n+\t    return __first;\n+\t  ++__first;\n+\tcase 0:\n+\tdefault:\n+\t  return __last;\n+\t}\n+    }\n+#endif\n+\n   // set_difference\n   // set_intersection\n   // set_symmetric_difference\n@@ -667,6 +728,79 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t     __comp);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief Checks that a predicate is true for all the elements\n+   *         of a sequence.\n+   *  @param  first   An input iterator.\n+   *  @param  last    An input iterator.\n+   *  @param  pred    A predicate.\n+   *  @return  True if the check is true, false otherwise.\n+   *\n+   *  Returns true if @p pred is true for each element in the range\n+   *  @p [first,last), and false otherwise.\n+  */\n+  template<typename _InputIterator, typename _Predicate>\n+    inline bool\n+    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n+    { return __last == std::find_if_not(__first, __last, __pred); }\n+\n+  /**\n+   *  @brief Checks that a predicate is false for all the elements\n+   *         of a sequence.\n+   *  @param  first   An input iterator.\n+   *  @param  last    An input iterator.\n+   *  @param  pred    A predicate.\n+   *  @return  True if the check is true, false otherwise.\n+   *\n+   *  Returns true if @p pred is false for each element in the range\n+   *  @p [first,last), and false otherwise.\n+  */\n+  template<typename _InputIterator, typename _Predicate>\n+    inline bool\n+    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n+    { return __last == _GLIBCXX_STD_P::find_if(__first, __last, __pred); }\n+\n+  /**\n+   *  @brief Checks that a predicate is false for at least an element\n+   *         of a sequence.\n+   *  @param  first   An input iterator.\n+   *  @param  last    An input iterator.\n+   *  @param  pred    A predicate.\n+   *  @return  True if the check is true, false otherwise.\n+   *\n+   *  Returns true if an element exists in the range @p [first,last) such that\n+   *  @p pred is true, and false otherwise.\n+  */\n+  template<typename _InputIterator, typename _Predicate>\n+    inline bool\n+    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n+    { return !std::none_of(__first, __last, __pred); }\n+\n+  /**\n+   *  @brief Find the first element in a sequence for which a\n+   *         predicate is false.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  pred   A predicate.\n+   *  @return   The first iterator @c i in the range @p [first,last)\n+   *  such that @p pred(*i) is false, or @p last if no such iterator exists.\n+  */\n+  template<typename _InputIterator, typename _Predicate>\n+    inline _InputIterator\n+    find_if_not(_InputIterator __first, _InputIterator __last,\n+\t\t_Predicate __pred)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n+\t      typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+      return std::__find_if_not(__first, __last, __pred,\n+\t\t\t\tstd::__iterator_category(__first));\n+    }\n+#endif\n+\n \n   /**\n    *  @brief Copy a sequence, removing elements of a given value.\n@@ -1171,7 +1305,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _BidirectionalIterator, typename _OutputIterator>\n     _OutputIterator\n     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,\n-\t\t\t     _OutputIterator __result)\n+\t\t _OutputIterator __result)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_BidirectionalIteratorConcept<"}, {"sha": "819aa44edd50e35b4c96237405531fe0645e2361", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2F1.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 0; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+  VERIFY( std::all_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  Container con(array, array + 1);\n+  VERIFY( std::all_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 6);\n+  VERIFY( !std::all_of(con.begin(), con.end(), predicate) );\n+}\n+\n+int\n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "bf2191e1c048d1c1ecc08ff7a8a29e2b0a7a3949", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+bool\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::all_of(begin, end, pred_function); }\n+\n+bool\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::all_of(begin, end, pred_obj()); }"}, {"sha": "323fb6a25ba32e1e32d73892a07fc03ad7b4aac4", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool all_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "547e2d3808ed9c743c22d7edbf2532a2f5906136", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool all_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "68d2ee77fff0517172391f15130019f9fa64a5e2", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2F1.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+  VERIFY( !std::any_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  Container con(array, array + 1);\n+  VERIFY( !std::any_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 6);\n+  VERIFY( std::any_of(con.begin(), con.end(), predicate) );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "6b337f2a1e31b8862f53c36b357d111c3e1642d3", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+bool\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::any_of(begin, end, pred_function); }\n+\n+bool\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::any_of(begin, end, pred_obj()); }"}, {"sha": "417becf440e193114875c304f01f574885de1102", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool any_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "37aa1540043dce0cdd858ec6239c2c626042356d", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool any_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "c50649d09be8dcab58ab632c1f37a2713462febe", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_if/check_type.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_if%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,60 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Z\n+{\n+  Z&\n+  operator=(const X&)\n+  { return *this; }\n+};\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+output_iterator_wrapper<Z>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output)\n+{ return std::copy_if(begin, end, output, pred_function); }\n+\n+output_iterator_wrapper<Z>\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output)\n+{ return std::copy_if(begin, end, output, pred_obj()); }"}, {"sha": "dae925a120de7803f341c71d4ff8dfa0d3ddcf1d", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/1.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,25 +35,31 @@ predicate(const int& i)\n void\n test1()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   Container con(array, array);\n-  VERIFY(std::find_if(con.begin(), con.end(), \n-\t\t      predicate).ptr == array);\n+  VERIFY( std::find_if(con.begin(), con.end(), \n+\t\t       predicate).ptr == array );\n }\n \n void\n test2()\n {\n+  bool test __attribute__((unused)) = true;\n+  \n   Container con(array, array + 1);\n-  VERIFY(std::find_if(con.begin(), con.end(), \n-\t\t      predicate).ptr == array + 1);\n+  VERIFY( std::find_if(con.begin(), con.end(), \n+\t\t       predicate).ptr == array + 1 );\n }\n \n void\n test3()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   Container con(array, array + 6);\n-  VERIFY(std::find_if(con.begin(), con.end(),\n-\t\t      predicate).ptr == array + 3);\n+  VERIFY( std::find_if(con.begin(), con.end(),\n+\t\t       predicate).ptr == array + 3 );\n }\n \n int \n@@ -62,4 +68,5 @@ main()\n   test1();\n   test2();\n   test3();\n+  return 0;\n }"}, {"sha": "e16e8088231b25f20c25438af44f21035c9011e4", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2F1.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 0; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+  VERIFY( std::find_if_not(con.begin(), con.end(), \n+\t\t\t   predicate).ptr == array );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  Container con(array, array + 1);\n+  VERIFY( std::find_if_not(con.begin(), con.end(), \n+\t\t\t   predicate).ptr == array + 1 );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 6);\n+  VERIFY( std::find_if_not(con.begin(), con.end(),\n+\t\t\t   predicate).ptr == array + 3 );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "6f445eb326125c60aef2fa53c3af83e469178e5c", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+input_iterator_wrapper<X>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::find_if_not(begin, end, pred_function); }\n+\n+input_iterator_wrapper<X>\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::find_if_not(begin, end, pred_obj()); }"}, {"sha": "b348dd0561aadfec5b11b8b8c2cdbb3197d2cdbf", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type find_if_not(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "f1854b880f9b8d969716a9cfb3d9bb78d112e829", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if_not/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if_not%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type find_if_not(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "8bfb22b4f608af4e206f2dc4f1714885b0c98ebc", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -32,9 +32,27 @@ namespace std\n     find(_IIter, _IIter, const _Tp&);\n \n   template<typename _IIter, typename _Predicate>\n-    _IIter \n+    _IIter\n     find_if(_IIter, _IIter, _Predicate);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    all_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    any_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    none_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    _IIter\n+    find_if_not(_IIter, _IIter, _Predicate);\n+#endif\n+\n   template<typename _FIter1, typename _FIter2>\n     _FIter1\n     find_end(_FIter1, _FIter1, _FIter2, _FIter2);"}, {"sha": "bc4ec0aa1f9bbd8bfdcbc88bafa2234cd55d4e48", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2F1.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+  VERIFY( std::none_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  Container con(array, array + 1);\n+  VERIFY( std::none_of(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 6);\n+  VERIFY( !std::none_of(con.begin(), con.end(), predicate) );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "2b71f995a183d4ac0cf9a881342f251c24a664db", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+bool\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::none_of(begin, end, pred_function); }\n+\n+bool\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::none_of(begin, end, pred_obj()); }"}, {"sha": "8fb36fd82b056348689704ddea9c649c4b776aa4", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool none_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "da7e18aaa148ecad4575be0e78b8fd3a56d80f17", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool none_of(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "cea646ddbc2b04b1fa36ef10a8f625e4a67d30c4", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy_if/check_type.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76cc1b7060c843c4dc7b0fd56fa3338a658f5e22/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fcheck_type.cc?ref=76cc1b7060c843c4dc7b0fd56fa3338a658f5e22", "patch": "@@ -0,0 +1,59 @@\n+// 2008-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Z\n+{\n+  Z&\n+  operator=(const X&)\n+  { return *this; }\n+};\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+output_iterator_wrapper<Z>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output)\n+{ return std::remove_copy_if(begin, end, output, pred_function); }\n+\n+output_iterator_wrapper<Z>\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output)\n+{ return std::remove_copy_if(begin, end, output, pred_obj()); }"}]}