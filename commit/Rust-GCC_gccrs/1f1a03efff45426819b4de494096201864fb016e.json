{"sha": "1f1a03efff45426819b4de494096201864fb016e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxYTAzZWZmZjQ1NDI2ODE5YjRkZTQ5NDA5NjIwMTg2NGZiMDE2ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-02T14:53:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-02T14:53:41Z"}, "message": "basic_types.hpp (comp_hash_): Remove, format.\n\n2006-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/basic_types.hpp (comp_hash_): Remove,\n\tformat.\t\n\t* include/ext/pb_ds/detail/types_traits.hpp\n\t(types_traits::comp_hash): Use pair typedef.\t\n\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n\nFrom-SVN: r117371", "tree": {"sha": "3f39c7c9052cbdbf908e91459ba8cc9bc6e739df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f39c7c9052cbdbf908e91459ba8cc9bc6e739df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f1a03efff45426819b4de494096201864fb016e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1a03efff45426819b4de494096201864fb016e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1a03efff45426819b4de494096201864fb016e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1a03efff45426819b4de494096201864fb016e/comments", "author": null, "committer": null, "parents": [{"sha": "93a8f49bfad3672fa3ae104b5ff9f086652794e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a8f49bfad3672fa3ae104b5ff9f086652794e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a8f49bfad3672fa3ae104b5ff9f086652794e1"}], "stats": {"total": 444, "additions": 161, "deletions": 283}, "files": [{"sha": "d756a7ed2da9b0259244548108a859d442c14147", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f1a03efff45426819b4de494096201864fb016e", "patch": "@@ -1,3 +1,12 @@\n+2006-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/basic_types.hpp (comp_hash_): Remove,\n+\tformat.\t\n+\t* include/ext/pb_ds/detail/types_traits.hpp\n+\t(types_traits::comp_hash): Use pair typedef.\t\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n+\n 2006-10-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (xor_combine<>::_M_initialize_max_aux): New."}, {"sha": "69288ce5ec50c608e953908425f88722c7d51463", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_types.hpp", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp?ref=1f1a03efff45426819b4de494096201864fb016e", "patch": "@@ -59,12 +59,6 @@ namespace pb_ds\n     template<typename Key, typename Mapped, typename Allocator, bool Store_Hash>\n     struct value_type_base;\n \n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    value_type_base<Key, Mapped, Allocator, false>\n-\n     /**\n      * Specialization of value_type_base for the case where the hash value\n      * is not stored alongside each value.\n@@ -92,15 +86,6 @@ namespace pb_ds\n       };\n     };\n \n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    value_type_base<Key, Mapped, Allocator, true>\n-\n     /**\n      * Specialization of value_type_base for the case where the hash value\n      * is stored alongside each value.\n@@ -129,9 +114,6 @@ namespace pb_ds\n       };\n     };\n \n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n #define PB_DS_CLASS_T_DEC \\\n     template<typename Key, typename Allocator>\n \n@@ -217,28 +199,17 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-    template<typename Key, typename Mapped>\n-    struct no_throw_copies;\n-\n     template<typename Key, typename Mapped>\n     struct no_throw_copies\n     {\n-      typedef\n-      integral_constant<int, is_simple<Key>::value && is_simple<Mapped>::value>\n-      indicator;\n+      typedef integral_constant<int, is_simple<Key>::value && is_simple<Mapped>::value> indicator;\n     };\n \n     template<typename Key>\n     struct no_throw_copies<Key, null_mapped_type>\n     {\n       typedef integral_constant<int, is_simple<Key>::value> indicator;\n     };\n-\n-    template<typename Size_Type>\n-    struct comp_hash_\n-    {\n-      typedef std::pair<Size_Type, Size_Type> comp_hash;\n-    };\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "179e59358fcf4492a179f603d20fbe698df9a47f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp", "status": "modified", "additions": 98, "deletions": 179, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp?ref=1f1a03efff45426819b4de494096201864fb016e", "patch": "@@ -41,8 +41,8 @@\n \n /**\n  * @file ranged_hash_fn.hpp\n- * Contains a unified ranged hash functor, allowing the hash tables to deal with\n- *    a single class for ranged hashing.\n+ * Contains a unified ranged hash functor, allowing the hash tables\n+ * to deal with a single class for ranged hashing.\n  */\n \n #ifndef PB_DS_RANGED_HASH_FN_HPP\n@@ -56,190 +56,134 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-    template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Hash_Fn,\n-\t     bool Store_Hash>\n+    template<typename Key, typename Hash_Fn, typename Allocator, \n+\t     typename Comb_Hash_Fn, bool Store_Hash>\n     class ranged_hash_fn;\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tclass Comb_Hash_Fn>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_hash_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+\t     typename Comb_Hash_Fn>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_hash_fn<Key,\tHash_Fn, Allocator, Comb_Hash_Fn, false>\n \n     /**\n-     * Specialization 1- The client supplies a hash function and a ranged\n-     *    hash function, and requests that hash values not be stored.\n+     * Specialization 1\n+     * The client supplies a hash function and a ranged hash function,\n+     * and requests that hash values not be stored.\n      **/\n-    template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Hash_Fn>\n-    class ranged_hash_fn<\n-      Key,\n-      Hash_Fn,\n-      Allocator,\n-      Comb_Hash_Fn,\n-      false> : public Hash_Fn,\n-\t       public Comb_Hash_Fn\n+    template<typename Key, typename Hash_Fn, typename Allocator, \n+\t     typename Comb_Hash_Fn>\n+    class ranged_hash_fn< Key, Hash_Fn, Allocator, Comb_Hash_Fn, false> \n+    : public Hash_Fn, public Comb_Hash_Fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n       typedef Hash_Fn hash_fn_base;\n-\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-\n       typedef typename Allocator::template rebind< Key>::other key_allocator;\n-\n       typedef typename key_allocator::const_reference const_key_reference;\n \n-    protected:\n-      ranged_hash_fn(size_type size);\n+      ranged_hash_fn(size_type);\n \n-      ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn);\n+      ranged_hash_fn(size_type, const Hash_Fn&);\n \n-      ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const Hash_Fn&, const Comb_Hash_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       void\n-      notify_resized(size_type size);\n+      notify_resized(size_type);\n \n       inline size_type\n-      operator()(const_key_reference r_key) const;\n+      operator()(const_key_reference) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn) :\n-      Hash_Fn(r_hash_fn)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn) \n+    : Hash_Fn(r_hash_fn)\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Hash_Fn(r_comb_hash_fn)\n-    {\n-      comb_hash_fn_base::notify_resized(size);\n-    }\n+    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Hash_Fn(r_comb_hash_fn)\n+    { comb_hash_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n       comb_hash_fn_base::swap(other);\n-\n       std::swap((Hash_Fn& )(*this), (Hash_Fn& )other);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     notify_resized(size_type size)\n-    {\n-      comb_hash_fn_base::notify_resized(size);\n-    }\n+    { comb_hash_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference r_key) const\n-    {\n-      return (comb_hash_fn_base::operator()(\n-\t\t\t\t\t    hash_fn_base::operator()(r_key)));\n-    }\n+    { return (comb_hash_fn_base::operator()(hash_fn_base::operator()(r_key)));}\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tclass Comb_Hash_Fn>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_hash_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+\t     typename Comb_Hash_Fn>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_hash_fn<Key,Hash_Fn,\tAllocator, Comb_Hash_Fn, true>\n \n     /**\n-     * Specialization 2- The client supplies a hash function and a ranged\n-     *    hash function, and requests that hash values be stored.\n+     * Specialization 2\n+     * The client supplies a hash function and a ranged hash function,\n+     * and requests that hash values be stored.\n      **/\n-    template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Hash_Fn>\n-    class ranged_hash_fn<\n-      Key,\n-      Hash_Fn,\n-      Allocator,\n-      Comb_Hash_Fn,\n-      true> :\n-      public Hash_Fn,\n-      public Comb_Hash_Fn\n+    template<typename Key, typename Hash_Fn, typename Allocator,\n+\t     typename Comb_Hash_Fn>\n+    class ranged_hash_fn<Key, Hash_Fn, Allocator, Comb_Hash_Fn, true> \n+    : public Hash_Fn, public Comb_Hash_Fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n-      typedef typename comp_hash_< size_type>::comp_hash comp_hash;\n-\n+      typedef std::pair<size_type, size_type> comp_hash;\n       typedef Hash_Fn hash_fn_base;\n-\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-\n-      typedef typename Allocator::template rebind< Key>::other key_allocator;\n-\n+      typedef typename Allocator::template rebind<Key>::other key_allocator;\n       typedef typename key_allocator::const_reference const_key_reference;\n \n-    protected:\n-      ranged_hash_fn(size_type size);\n+      ranged_hash_fn(size_type);\n \n-      ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn);\n+      ranged_hash_fn(size_type, const Hash_Fn&);\n \n-      ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const Hash_Fn&, const Comb_Hash_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       void\n-      notify_resized(size_type size);\n+      notify_resized(size_type);\n \n       inline comp_hash\n-      operator()(const_key_reference r_key) const;\n+      operator()(const_key_reference) const;\n \n       inline comp_hash\n-      operator()(const_key_reference r_key, size_type hash) const;\n+      operator()(const_key_reference, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -255,9 +199,9 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Hash_Fn(r_comb_hash_fn)\n+    ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Hash_Fn(r_comb_hash_fn)\n     { comb_hash_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n@@ -301,48 +245,34 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n-    template<typename Key, class Allocator, class Comb_Hash_Fn>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_hash_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tnull_hash_fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_hash_fn<Key,\tnull_hash_fn, Allocator, Comb_Hash_Fn, false>\n \n     /**\n-     * Specialization 3- The client does not supply a hash function\n-     *    (by specifying null_hash_fn as the Hash_Fn parameter),\n-     *    and requests that hash values not be stored.\n-\n-    **/\n-    template<typename Key, class Allocator, class Comb_Hash_Fn>\n-    class ranged_hash_fn<\n-      Key,\n-      null_hash_fn,\n-      Allocator,\n-      Comb_Hash_Fn,\n-      false> :\n-      public null_hash_fn,\n-      public Comb_Hash_Fn\n+     * Specialization 3\n+     * The client does not supply a hash function (by specifying\n+     * null_hash_fn as the Hash_Fn parameter), and requests that hash\n+     * values not be stored.\n+     **/\n+    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n+    class ranged_hash_fn<Key, null_hash_fn, Allocator, Comb_Hash_Fn, false> \n+    : public null_hash_fn, public Comb_Hash_Fn\n     {\n     protected:\n-\n       typedef typename Allocator::size_type size_type;\n-\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n \n-    protected:\n-      ranged_hash_fn(size_type size);\n+      ranged_hash_fn(size_type);\n \n-      ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const Comb_Hash_Fn&);\n \n-      ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const null_hash_fn&, const Comb_Hash_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -358,8 +288,9 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n-      Comb_Hash_Fn(r_comb_hash_fn)\n+    ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n+    : Comb_Hash_Fn(r_comb_hash_fn)\n     { }\n \n     PB_DS_CLASS_T_DEC\n@@ -371,47 +302,34 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n-    template<typename Key, class Allocator, class Comb_Hash_Fn>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_hash_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tnull_hash_fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_hash_fn<Key,\tnull_hash_fn, Allocator, Comb_Hash_Fn, true>\n \n     /**\n-     * Specialization 4- The client does not supply a hash function\n-     *    (by specifying null_hash_fn as the Hash_Fn parameter),\n-     *    and requests that hash values be stored.\n-\n-    **/\n-    template<typename Key, class Allocator, class Comb_Hash_Fn>\n-    class ranged_hash_fn<\n-      Key,\n-      null_hash_fn,\n-      Allocator,\n-      Comb_Hash_Fn,\n-      true> :\n-      public null_hash_fn,\n-      public Comb_Hash_Fn\n+     * Specialization 4\n+     * The client does not supply a hash function (by specifying\n+     * null_hash_fn as the Hash_Fn parameter), and requests that hash\n+     * values be stored.\n+     **/\n+    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n+    class ranged_hash_fn<Key, null_hash_fn, Allocator, Comb_Hash_Fn, true> \n+    : public null_hash_fn, public Comb_Hash_Fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n \n-    protected:\n-      ranged_hash_fn(size_type size);\n+      ranged_hash_fn(size_type);\n \n-      ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const Comb_Hash_Fn&);\n \n-      ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type, const null_hash_fn&, const Comb_Hash_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -421,14 +339,15 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn) :\n-      Comb_Hash_Fn(r_comb_hash_fn)\n+    ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn) \n+    : Comb_Hash_Fn(r_comb_hash_fn)\n     { }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const null_hash_fn           & r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n-      Comb_Hash_Fn(r_comb_hash_fn)\n+    ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n+    : Comb_Hash_Fn(r_comb_hash_fn)\n     { }\n \n     PB_DS_CLASS_T_DEC"}, {"sha": "b665dbf36f8d9786685a5887cd6e94286ab8da5e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 49, "deletions": 69, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=1f1a03efff45426819b4de494096201864fb016e", "patch": "@@ -56,12 +56,8 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-    template<typename Key,\n-\t     typename Hash_Fn,\n-\t     typename Allocator,\n-\t     typename Comb_Probe_Fn,\n-\t     typename Probe_Fn,\n-\t     bool Store_Hash>\n+    template<typename Key, typename Hash_Fn, typename Allocator,\n+\t     typename Comb_Probe_Fn, typename Probe_Fn, bool Store_Hash>\n     class ranged_probe_fn;\n \n #define PB_DS_CLASS_T_DEC \\\n@@ -72,8 +68,9 @@ namespace pb_ds\n     ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, false>\n \n     /**\n-     * Specialization 1- The client supplies a probe function and a ranged\n-     *    probe function, and requests that hash values not be stored.\n+     * Specialization 1     \n+     * The client supplies a probe function and a ranged probe\n+     * function, and requests that hash values not be stored.\n      **/\n     template<typename Key, typename Hash_Fn, typename Allocator,\n \t     typename Comb_Probe_Fn, typename Probe_Fn>\n@@ -83,37 +80,32 @@ namespace pb_ds\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n-\n       typedef Hash_Fn hash_fn_base;\n-\n       typedef Probe_Fn probe_fn_base;\n-\n       typedef typename Allocator::template rebind<Key>::other key_allocator;\n-\n       typedef typename key_allocator::const_reference const_key_reference;\n \n-    protected:\n-      ranged_probe_fn(size_type size);\n+      ranged_probe_fn(size_type);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&, const Comb_Probe_Fn&);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&, const Comb_Probe_Fn&, \n+\t\t      const Probe_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       void\n-      notify_resized(size_type size);\n+      notify_resized(size_type);\n \n       inline size_type\n-      operator()(const_key_reference r_key) const;\n+      operator()(const_key_reference) const;\n \n       inline size_type\n-      operator()(const_key_reference r_key, size_type hash, size_type i) const;\n+      operator()(const_key_reference, size_type, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -123,23 +115,23 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) :\n-      Hash_Fn(r_hash_fn)\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) \n+    : Hash_Fn(r_hash_fn)\n     { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Probe_Fn(r_comb_probe_fn)\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t    const Comb_Probe_Fn& r_comb_probe_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Probe_Fn(r_comb_probe_fn)\n     { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Probe_Fn(r_comb_probe_fn),\n-      Probe_Fn(r_probe_fn)\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t    const Comb_Probe_Fn& r_comb_probe_fn, \n+\t\t    const Probe_Fn& r_probe_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Probe_Fn(r_comb_probe_fn), Probe_Fn(r_probe_fn)\n     { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n@@ -175,8 +167,8 @@ namespace pb_ds\n #undef PB_DS_CLASS_C_DEC\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, class Hash_Fn, class Allocator,\t\\\n-\t     class Comb_Probe_Fn, class Probe_Fn>\n+    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+\t     typename Comb_Probe_Fn, typename Probe_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n     ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, true>\n@@ -193,44 +185,37 @@ namespace pb_ds\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n-      typedef typename comp_hash_<size_type>::comp_hash comp_hash;\n-\n+      typedef std::pair<size_type, size_type> comp_hash;\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n-\n       typedef Hash_Fn hash_fn_base;\n-\n       typedef Probe_Fn probe_fn_base;\n-\n       typedef typename Allocator::template rebind<Key>::other key_allocator;\n-\n       typedef typename key_allocator::const_reference const_key_reference;\n \n-      ranged_probe_fn(size_type size);\n+      ranged_probe_fn(size_type);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n-\t\t      const Comb_Probe_Fn& r_comb_probe_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&, \n+\t\t      const Comb_Probe_Fn&);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n-\t\t      const Comb_Probe_Fn& r_comb_probe_fn, \n-\t\t      const Probe_Fn& r_probe_fn);\n+      ranged_probe_fn(size_type, const Hash_Fn&, const Comb_Probe_Fn&, \n+\t\t      const Probe_Fn&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       void\n-      notify_resized(size_type size);\n+      notify_resized(size_type);\n \n       inline comp_hash\n-      operator()(const_key_reference r_key) const;\n+      operator()(const_key_reference) const;\n \n       inline size_type\n-      operator()(const_key_reference r_key, size_type hash, size_type i) const;\n+      operator()(const_key_reference, size_type, size_type) const;\n \n       inline size_type\n-      operator()(const_key_reference r_key, size_type hash) const;\n+      operator()(const_key_reference, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -240,26 +225,23 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) :\n-      Hash_Fn(r_hash_fn)\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) \n+    : Hash_Fn(r_hash_fn)\n     { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n-\t\t    const Comb_Probe_Fn& r_comb_probe_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Probe_Fn(r_comb_probe_fn)\n+\t\t    const Comb_Probe_Fn& r_comb_probe_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Probe_Fn(r_comb_probe_fn)\n     { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n \t\t    const Comb_Probe_Fn& r_comb_probe_fn, \n-\t\t    const Probe_Fn& r_probe_fn) :\n-      Hash_Fn(r_hash_fn),\n-      Comb_Probe_Fn(r_comb_probe_fn),\n-      Probe_Fn(r_probe_fn)\n+\t\t    const Probe_Fn& r_probe_fn) \n+    : Hash_Fn(r_hash_fn), Comb_Probe_Fn(r_comb_probe_fn), Probe_Fn(r_probe_fn)\n     { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n@@ -312,8 +294,9 @@ namespace pb_ds\n #undef PB_DS_CLASS_C_DEC\n \n     /**\n-     * Specialization 3 and 4- The client does not supply a hash function or\n-     *    probe function, and requests that hash values not be stored.\n+     * Specialization 3 and 4\n+     * The client does not supply a hash function or probe function,\n+     * and requests that hash values not be stored.\n      **/\n     template<typename Key, typename Allocator, typename Comb_Probe_Fn>\n     class ranged_probe_fn<Key, null_hash_fn, Allocator, Comb_Probe_Fn, \n@@ -322,23 +305,20 @@ namespace pb_ds\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n-\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n-\n       typedef typename Allocator::template rebind<Key>::other key_allocator;\n-\n       typedef typename key_allocator::const_reference const_key_reference;\n \n       ranged_probe_fn(size_type size)\n       { Comb_Probe_Fn::notify_resized(size); }\n \n-      ranged_probe_fn(size_type size, const Comb_Probe_Fn& r_comb_probe_fn)\n+      ranged_probe_fn(size_type, const Comb_Probe_Fn& r_comb_probe_fn)\n       : Comb_Probe_Fn(r_comb_probe_fn)\n       { }\n \n-      ranged_probe_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+      ranged_probe_fn(size_type, const null_hash_fn&, \n \t\t      const Comb_Probe_Fn& r_comb_probe_fn, \n-\t\t      const null_probe_fn& r_null_probe_fn)\n+\t\t      const null_probe_fn&)\n       : Comb_Probe_Fn(r_comb_probe_fn)\n       { }\n "}, {"sha": "8272c8a71a4c40ebfeff66e6941fb943e08fadb6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1a03efff45426819b4de494096201864fb016e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=1f1a03efff45426819b4de494096201864fb016e", "patch": "@@ -65,20 +65,19 @@ namespace pb_ds\n     struct types_traits \n     : public vt_base_selector<Key, Mapped, Alloc, Store_Extra>::type\n     {\n-\n-      typedef typename Alloc::template rebind< Key>::other key_allocator;\n+      typedef typename Alloc::template rebind<Key>::other key_allocator;\n       typedef typename key_allocator::value_type key_type;\n       typedef typename key_allocator::pointer key_pointer;\n       typedef typename key_allocator::const_pointer const_key_pointer;\n       typedef typename key_allocator::reference key_reference;\n       typedef typename key_allocator::const_reference const_key_reference;\n       typedef typename Alloc::size_type size_type;\n \n+      // Extra value (used when the extra value is stored with each value).\n+      typedef std::pair<size_type, size_type> comp_hash;\n+\n       integral_constant<int, Store_Extra> m_store_extra_indicator;\n       typename no_throw_copies<Key, Mapped>::indicator m_no_throw_copies_indicator;\n-\n-      // Extra value (used when the extra value is stored with each value).\n-      typedef typename comp_hash_<size_type>::comp_hash comp_hash;\n     };\n   } // namespace detail\n } // namespace pb_ds"}]}