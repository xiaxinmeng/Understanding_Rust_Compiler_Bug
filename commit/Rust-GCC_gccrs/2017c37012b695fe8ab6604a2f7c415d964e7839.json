{"sha": "2017c37012b695fe8ab6604a2f7c415d964e7839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxN2MzNzAxMmI2OTVmZThhYjY2MDRhMmY3YzQxNWQ5NjRlNzgzOQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-05-29T20:56:20Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2009-05-29T20:56:20Z"}, "message": "Fix PR40190; use localtime_r, gmtime_r, add fallback implementations\n\nFrom-SVN: r147985", "tree": {"sha": "b84f225a725d0a72b45acb270ce8b68993bf148e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84f225a725d0a72b45acb270ce8b68993bf148e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2017c37012b695fe8ab6604a2f7c415d964e7839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017c37012b695fe8ab6604a2f7c415d964e7839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017c37012b695fe8ab6604a2f7c415d964e7839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017c37012b695fe8ab6604a2f7c415d964e7839/comments", "author": null, "committer": null, "parents": [{"sha": "bb870b58e27150a19d8e456074e348e9e768d7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb870b58e27150a19d8e456074e348e9e768d7c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb870b58e27150a19d8e456074e348e9e768d7c1"}], "stats": {"total": 173, "additions": 165, "deletions": 8}, "files": [{"sha": "7519578da6b9ebd03ddc75533603891d69a50dbd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2017c37012b695fe8ab6604a2f7c415d964e7839", "patch": "@@ -1,3 +1,17 @@\n+2009-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/40190\n+\t* configure.ac: Check for localtime_r and gmtime_r.\n+\t* intrinsics/date_and_time.c: Add fallback implementations for\n+\tlocaltime_r and gmtime_r.\n+\t(date_and_time): Change to use localtime_r and gmtime_r instead of\n+\tlocaltime and gmtime, respectively.\n+\t(itime0): Use localtime_r instead of localtime.\n+\t(ltime_0): Likewise.\n+\t(gmtime_0): Use gmtime_r instead of gmtime.\n+\t* config.h.in: Regenerated\n+\t* configure: Regenerated.\n+\n 2009-05-27  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/39178"}, {"sha": "3bab479635a2686f0fb768eb810386b4260bb3e3", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=2017c37012b695fe8ab6604a2f7c415d964e7839", "patch": "@@ -426,6 +426,9 @@\n /* libc includes getuid */\n #undef HAVE_GETUID\n \n+/* Define to 1 if you have the `gmtime_r' function. */\n+#undef HAVE_GMTIME_R\n+\n /* Define if the compiler has a thread header that is non single. */\n #undef HAVE_GTHR_DEFAULT\n \n@@ -507,6 +510,9 @@\n /* libm includes llroundl */\n #undef HAVE_LLROUNDL\n \n+/* Define to 1 if you have the `localtime_r' function. */\n+#undef HAVE_LOCALTIME_R\n+\n /* libm includes log */\n #undef HAVE_LOG\n "}, {"sha": "043884bad5a86b128492636067b6ce32211ac1ce", "filename": "libgfortran/configure", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=2017c37012b695fe8ab6604a2f7c415d964e7839", "patch": "@@ -19503,6 +19503,114 @@ fi\n done\n \n \n+\n+for ac_func in localtime_r gmtime_r\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n # Check for glibc backtrace functions\n \n \n@@ -34881,6 +34989,9 @@ ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n multi_basedir=\"$multi_basedir\"\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n CC=\"$CC\"\n+CXX=\"$CXX\"\n+GFORTRAN=\"$GFORTRAN\"\n+GCJ=\"$GCJ\"\n AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"\n \n "}, {"sha": "b1e5d1e2c3580d495c6781850b695ae247ceca2b", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=2017c37012b695fe8ab6604a2f7c415d964e7839", "patch": "@@ -226,6 +226,7 @@ AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n AC_CHECK_FUNCS(gettimeofday stat fstat lstat getpwuid vsnprintf dup getcwd)\n+AC_CHECK_FUNCS(localtime_r gmtime_r)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)"}, {"sha": "be64626637c19268c1cf39118e14386cf8dfed5d", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017c37012b695fe8ab6604a2f7c415d964e7839/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=2017c37012b695fe8ab6604a2f7c415d964e7839", "patch": "@@ -48,6 +48,31 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define abs(x) ((x)>=0 ? (x) : -(x))\n #endif\n \n+\n+/* If the re-entrant versions of localtime and gmtime are not\n+   available, provide fallback implementations.  On some targets where\n+   the _r versions are not available, localtime and gmtime use\n+   thread-local storage so they are threadsafe.  */\n+\n+#ifndef HAVE_LOCALTIME_R\n+static struct tm *\n+localtime_r (const time_t * timep, struct tm * result)\n+{\n+  *result = *localtime (timep);\n+  return result;\n+}\n+#endif\n+\n+#ifndef HAVE_GMTIME_R\n+static struct tm *\n+gmtime_r (const time_t * timep, struct tm * result)\n+{\n+  *result = *gmtime (timep);\n+  return result;\n+}\n+#endif\n+\n+\n /* DATE_AND_TIME ([DATE, TIME, ZONE, VALUES])\n \n    Description: Returns data on the real-time clock and date in a form\n@@ -166,8 +191,8 @@ date_and_time (char *__date, char *__time, char *__zone,\n \n   if (lt != (time_t) -1)\n     {\n-      local_time = *localtime (&lt);\n-      UTC_time = *gmtime (&lt);\n+      localtime_r (&lt, &local_time);\n+      gmtime_r (&lt, &UTC_time);\n \n       /* All arguments can be derived from VALUES.  */\n       values[0] = 1900 + local_time.tm_year;\n@@ -361,7 +386,7 @@ itime0 (int x[3])\n \n   if (lt != (time_t) -1)\n     {\n-      local_time = *localtime (&lt);\n+      localtime_r (&lt, &local_time);\n \n       x[0] = local_time.tm_hour;\n       x[1] = local_time.tm_min;\n@@ -443,7 +468,7 @@ idate0 (int x[3])\n \n   if (lt != (time_t) -1)\n     {\n-      local_time = *localtime (&lt);\n+      localtime_r (&lt, &local_time);\n \n       x[0] = local_time.tm_mday;\n       x[1] = 1 + local_time.tm_mon;\n@@ -510,7 +535,7 @@ idate_i8 (gfc_array_i8 *__values)\n /* GMTIME(STIME, TARRAY) - Non-standard\n \n    Description: Given a system time value STime, fills TArray with values\n-   extracted from it appropriate to the GMT time zone using gmtime(3).\n+   extracted from it appropriate to the GMT time zone using gmtime_r(3).\n \n    The array elements are as follows:\n \n@@ -530,7 +555,7 @@ gmtime_0 (const time_t * t, int x[9])\n {\n   struct tm lt;\n \n-  lt = *gmtime (t);\n+  gmtime_r (t, &lt);\n   x[0] = lt.tm_sec;\n   x[1] = lt.tm_min;\n   x[2] = lt.tm_hour;\n@@ -602,7 +627,7 @@ gmtime_i8 (GFC_INTEGER_8 * t, gfc_array_i8 * tarray)\n /* LTIME(STIME, TARRAY) - Non-standard\n \n    Description: Given a system time value STime, fills TArray with values\n-   extracted from it appropriate to the local time zone using localtime(3).\n+   extracted from it appropriate to the local time zone using localtime_r(3).\n \n    The array elements are as follows:\n \n@@ -622,7 +647,7 @@ ltime_0 (const time_t * t, int x[9])\n {\n   struct tm lt;\n \n-  lt = *localtime (t);\n+  localtime_r (t, &lt);\n   x[0] = lt.tm_sec;\n   x[1] = lt.tm_min;\n   x[2] = lt.tm_hour;"}]}