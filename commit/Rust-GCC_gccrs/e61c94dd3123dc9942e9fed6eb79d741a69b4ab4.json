{"sha": "e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxYzk0ZGQzMTIzZGM5OTQyZTlmZWQ2ZWI3OWQ3NDFhNjliNGFiNA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2012-07-25T13:01:35Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-07-25T13:01:35Z"}, "message": "Changelog entry:\n\n2012-07-25  Kirill Yukhin  <kirill.yukhin@intel.com>\n            Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n\n        * common/config/i386/i386-common.c (OPTION_MASK_ISA_PRFCHW_SET): New.\n        (OPTION_MASK_ISA_PRFCHW_UNSET): Likewise.\n        (ix86_handle_option): Handle mprfchw option.\n        * config.gcc (i[34567]86-*-*): Add prfchwintrin.h.\n        (x86_64-*-*): Likewise.\n        * config/i386/prfchwintrin.h: New header.\n        * config/i386/cpuid.h (bit_PRFCHW): New.\n        (bit_BMI): Formatting fix.\n        (bit_HLE): Likewise.\n        (bit_RTM): Likewise.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        PREFETCHW support.\n        * config/i386/i386-c.c: Define __PRFCHW__ if needed.\n        * config/i386/i386.c (ix86_target_string): Define\n        -mprfchw option. Formatting fixes.\n        (PTA_HLE): Formatting fix.\n        (PTA_PRFCHW): New.\n        (ix86_option_override_internal): Handle new option.\n        (ix86_valid_target_attribute_inner_p): Add OPT_mprfchw.\n        * config/i386/i386.h (TARGET_PRFCHW): New.\n        * config/i386/i386.md (prefetch): Enable for TARGET_PRFCHW.\n        * config/i386/i386.opt (mprfchw): New.\n        * config/i386/mm3dnow.h: Move _m_prefetchw from here to\n        prfchwintrin.h.\n        * config/i386/x86intrin.h: Include prfchwintrin.h.\n\ntestsuite/Changelog entry:\n2012-07-24  Kirill Yukhin  <kirill.yukhin@intel.com>\n            Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n\n        * gcc.target/i386/prefetchw-1.c: New.\n        * gcc.target/i386/sse-12.c: Add -mprfchw.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\n\n\n\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r189844", "tree": {"sha": "a704ce8415af6bc99783d154d5b17b24a96677fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a704ce8415af6bc99783d154d5b17b24a96677fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/comments", "author": null, "committer": null, "parents": [{"sha": "4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd5abcae190858b0c1408f6d6f9d33481d18dbb"}], "stats": {"total": 196, "additions": 164, "deletions": 32}, "files": [{"sha": "576eb263edfa6028f2b1c13b56b65e371dceaeb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,3 +1,32 @@\n+2012-07-25  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+        * common/config/i386/i386-common.c (OPTION_MASK_ISA_PRFCHW_SET): New.\n+        (OPTION_MASK_ISA_PRFCHW_UNSET): Likewise.\n+        (ix86_handle_option): Handle mprfchw option.\n+        * config.gcc (i[34567]86-*-*): Add prfchwintrin.h.\n+        (x86_64-*-*): Likewise.\n+        * config/i386/prfchwintrin.h: New header.\n+        * config/i386/cpuid.h (bit_PRFCHW): New.\n+        (bit_BMI): Formatting fix.\n+        (bit_HLE): Likewise.\n+        (bit_RTM): Likewise.\n+        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+        PREFETCHW support.\n+        * config/i386/i386-c.c: Define __PRFCHW__ if needed.\n+        * config/i386/i386.c (ix86_target_string): Define\n+        -mprfchw option. Formatting fixes.\n+        (PTA_HLE): Formatting fix.\n+        (PTA_PRFCHW): New.\n+        (ix86_option_override_internal): Handle new option.\n+        (ix86_valid_target_attribute_inner_p): Add OPT_mprfchw.\n+        * config/i386/i386.h (TARGET_PRFCHW): New.\n+        * config/i386/i386.md (prefetch): Enable for TARGET_PRFCHW.\n+        * config/i386/i386.opt (mprfchw): New.\n+        * config/i386/mm3dnow.h: Move _m_prefetchw from here to\n+        prfchwintrin.h.\n+        * config/i386/x86intrin.h: Include prfchwintrin.h.\n+\n 2012-07-25 Sergey Melnikov <sergey.melnikov@intel.com>\n \n \t* config/i386/i386.md (stack_protect_set): Disable the pattern"}, {"sha": "e2e4814e808172d31d46367da5237981c56154b7", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX2_SET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n+#define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -123,6 +124,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n #define OPTION_MASK_ISA_AVX2_UNSET OPTION_MASK_ISA_AVX2\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n+#define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -568,6 +570,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mprfchw:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PRFCHW_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PRFCHW_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_PRFCHW_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_PRFCHW_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "1a28f37923466dd55e185f0df7255bfde9b8b636", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -361,7 +361,7 @@ i[34567]86-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h\"\n+\t\t       xtestintrin.h prfchwintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -375,7 +375,7 @@ x86_64-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h\"\n+\t\t       xtestintrin.h prfchwintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "1ac3174ef3a2d4540f2dc5583c80d5a5352992ea", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -65,11 +65,14 @@\n \n /* Extended Features (%eax == 7) */\n #define bit_FSGSBASE\t(1 << 0)\n-#define bit_BMI\t\t(1 << 3)\n-#define bit_HLE\t\t(1 << 4)\n+#define bit_BMI\t(1 << 3)\n+#define bit_HLE\t(1 << 4)\n #define bit_AVX2\t(1 << 5)\n #define bit_BMI2\t(1 << 8)\n-#define bit_RTM\t\t(1 << 11)\n+#define bit_PRFCHW\t(1 << 8)\n+#define bit_RTM\t(1 << 11)\n+#define bit_RDSEED\t(1 << 18)\n+#define bit_ADX\t(1 << 19)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "1529810c78fc42f8dd4ebc1ac41e74fcaabfca33", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -399,6 +399,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n   unsigned int has_hle = 0, has_rtm = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n+  unsigned int has_prfchw = 0;\n \n   bool arch;\n \n@@ -465,6 +466,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx2 = ebx & bit_AVX2;\n       has_bmi2 = ebx & bit_BMI2;\n       has_fsgsbase = ebx & bit_FSGSBASE;\n+      has_prfchw = ecx & bit_PRFCHW;\n     }\n \n   /* Check cpuid level of extended features.  */\n@@ -745,11 +747,12 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *rdrnd = has_rdrnd ? \" -mrdrnd\" : \" -mno-rdrnd\";\n       const char *f16c = has_f16c ? \" -mf16c\" : \" -mno-f16c\";\n       const char *fsgsbase = has_fsgsbase ? \" -mfsgsbase\" : \" -mno-fsgsbase\";\n+      const char *prfchw = has_prfchw ? \" -mprfchw\" : \" -mno-prfchw\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n-\t\t\thle, rdrnd, f16c, fsgsbase, NULL);\n+\t\t\thle, rdrnd, f16c, fsgsbase, prfchw, NULL);\n     }\n \n done:"}, {"sha": "c803c509a1e040dc49e6d41ec965fbb2726d72b6", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -296,6 +296,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__RDRND__\");\n   if (isa_flag & OPTION_MASK_ISA_F16C)\n     def_or_undef (parse_in, \"__F16C__\");\n+  if (isa_flag & OPTION_MASK_ISA_PRFCHW)\n+    def_or_undef (parse_in, \"__PRFCHW__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "3b4117eb3fff15c16bc1b55544f3a2b9bf954ef7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -2748,25 +2748,26 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n      preceding options while match those first.  */\n   static struct ix86_target_opts isa_opts[] =\n   {\n-    { \"-mfma4\",\t\tOPTION_MASK_ISA_FMA4 },\n+    { \"-mfma4\",\tOPTION_MASK_ISA_FMA4 },\n     { \"-mfma\",\t\tOPTION_MASK_ISA_FMA },\n     { \"-mxop\",\t\tOPTION_MASK_ISA_XOP },\n     { \"-mlwp\",\t\tOPTION_MASK_ISA_LWP },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n     { \"-mssse3\",\tOPTION_MASK_ISA_SSSE3 },\n-    { \"-msse3\",\t\tOPTION_MASK_ISA_SSE3 },\n-    { \"-msse2\",\t\tOPTION_MASK_ISA_SSE2 },\n+    { \"-msse3\",\tOPTION_MASK_ISA_SSE3 },\n+    { \"-msse2\",\tOPTION_MASK_ISA_SSE2 },\n     { \"-msse\",\t\tOPTION_MASK_ISA_SSE },\n     { \"-m3dnow\",\tOPTION_MASK_ISA_3DNOW },\n     { \"-m3dnowa\",\tOPTION_MASK_ISA_3DNOW_A },\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n-    { \"-mbmi2\", \tOPTION_MASK_ISA_BMI2 },\n+    { \"-mbmi2\",\tOPTION_MASK_ISA_BMI2 },\n     { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n+    { \"-mprfchw\",\tOPTION_MASK_ISA_PRFCHW },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n@@ -2775,7 +2776,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n     { \"-mfsgsbase\",\tOPTION_MASK_ISA_FSGSBASE },\n     { \"-mrdrnd\",\tOPTION_MASK_ISA_RDRND },\n-    { \"-mf16c\",\t\tOPTION_MASK_ISA_F16C },\n+    { \"-mf16c\",\tOPTION_MASK_ISA_F16C },\n     { \"-mrtm\",\t\tOPTION_MASK_ISA_RTM },\n   };\n \n@@ -3042,7 +3043,8 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_AVX2\t\t(HOST_WIDE_INT_1 << 30)\n #define PTA_BMI2\t \t(HOST_WIDE_INT_1 << 31)\n #define PTA_RTM\t\t \t(HOST_WIDE_INT_1 << 32)\n-#define PTA_HLE\t \t\t(HOST_WIDE_INT_1 << 33)\n+#define PTA_HLE\t\t\t(HOST_WIDE_INT_1 << 33)\n+#define PTA_PRFCHW\t\t(HOST_WIDE_INT_1 << 34)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -3528,6 +3530,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_HLE\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_HLE))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_HLE;\n+\tif (processor_alias_table[i].flags & PTA_PRFCHW\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_PRFCHW))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_PRFCHW;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -3735,10 +3740,11 @@ ix86_option_override_internal (bool main_args_p)\n \n   /* Turn on MMX builtins for -msse.  */\n   if (TARGET_SSE)\n-    {\n-      ix86_isa_flags |= OPTION_MASK_ISA_MMX & ~ix86_isa_flags_explicit;\n-      x86_prefetch_sse = true;\n-    }\n+    ix86_isa_flags |= OPTION_MASK_ISA_MMX & ~ix86_isa_flags_explicit;\n+\n+  /* Enable SSE prefetch.  */\n+  if (TARGET_SSE || TARGET_PRFCHW)\n+    x86_prefetch_sse = true;\n \n   /* Turn on popcnt instruction for -msse4.2 or -mabm.  */\n   if (TARGET_SSE4_2 || TARGET_ABM)\n@@ -4348,6 +4354,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"f16c\",\tOPT_mf16c),\n     IX86_ATTR_ISA (\"rtm\",\tOPT_mrtm),\n     IX86_ATTR_ISA (\"hle\",\tOPT_mhle),\n+    IX86_ATTR_ISA (\"prfchw\",\tOPT_mprfchw),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "8f87f1276d8b26ddfd5d923b523a489c0c8414de", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -76,6 +76,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_F16C\tOPTION_ISA_F16C\n #define TARGET_RTM      OPTION_ISA_RTM\n #define TARGET_HLE\tOPTION_ISA_HLE\n+#define TARGET_PRFCHW\tOPTION_ISA_PRFCHW\n \n #define TARGET_LP64\tOPTION_ABI_64\n #define TARGET_X32\tOPTION_ABI_X32"}, {"sha": "2154946ad8a35cdfa209c3b3d3ef952ce46dbd7a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -17626,12 +17626,14 @@\n   gcc_assert (locality >= 0 && locality <= 3);\n   gcc_assert (GET_MODE (operands[0]) == Pmode\n \t      || GET_MODE (operands[0]) == VOIDmode);\n+  if (TARGET_PRFCHW && rw)\n+    operands[2] = GEN_INT (3);\n \n   /* Use 3dNOW prefetch in case we are asking for write prefetch not\n      supported by SSE counterpart or the SSE prefetch is not available\n      (K6 machines).  Otherwise use SSE prefetch as it allows specifying\n      of locality.  */\n-  if (TARGET_3DNOW && (!TARGET_PREFETCH_SSE || rw))\n+  else if (TARGET_3DNOW && (!TARGET_PREFETCH_SSE || rw))\n     operands[2] = GEN_INT (3);\n   else\n     operands[1] = const0_rtx;\n@@ -17662,7 +17664,7 @@\n   [(prefetch (match_operand:P 0 \"address_operand\" \"p\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t     (const_int 3))]\n-  \"TARGET_3DNOW\"\n+  \"TARGET_3DNOW || TARGET_PRFCHW\"\n {\n   if (INTVAL (operands[1]) == 0)\n     return \"prefetch\\t%a0\";"}, {"sha": "223a6468e56d36257336a9d911008f3043764009", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -532,6 +532,10 @@ mhle\n Target Report Mask(ISA_HLE) Var(ix86_isa_flags) Save\n Support Hardware Lock Elision prefixes\n \n+mprfchw\n+Target Report Mask(ISA_PRFCHW) Var(ix86_isa_flags) Save\n+Support PREFETCHW instruction\n+\n mtbm\n Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation"}, {"sha": "c2cc01c7f18722b799068351d5d58b66f6467753", "filename": "gcc/config/i386/mm3dnow.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -30,6 +30,7 @@\n #ifdef __3dNOW__\n \n #include <mmintrin.h>\n+#include <prfchwintrin.h>\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_femms (void)\n@@ -157,12 +158,6 @@ _m_prefetch (void *__P)\n   __builtin_prefetch (__P, 0, 3 /* _MM_HINT_T0 */);\n }\n \n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_m_prefetchw (void *__P)\n-{\n-  __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n-}\n-\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_from_float (float __A)\n {"}, {"sha": "6d4c722015640c386aaade0335395af49206c7b2", "filename": "gcc/config/i386/prfchwintrin.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED && !defined _MM3DNOW_H_INCLUDED\n+# error \"Never use <prfchwintrin.h> directly; include <x86intrin.h> or <mm3dnow.h> instead.\"\n+#endif\n+\n+\n+#if !defined (__PRFCHW__) && !defined (__3dNOW__)\n+# error \"PRFCHW instruction not enabled\"\n+#endif /* __PRFCHW__ or  __3dNOW__*/\n+\n+#ifndef _PRFCHWINTRIN_H_INCLUDED\n+#define _PRFCHWINTRIN_H_INCLUDED\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_m_prefetchw (void *__P)\n+{\n+  __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n+}\n+\n+#endif /* _PRFCHWINTRIN_H_INCLUDED */"}, {"sha": "70b23160ac1dd3e7490cda339a0939e079034a33", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -97,4 +97,8 @@\n #include <popcntintrin.h>\n #endif\n \n+#ifdef __PRFCHW__\n+#include <prfchwintrin.h>\n+#endif\n+\n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "d46615fe769c545225351f5596df0197b57f4a5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,3 +1,15 @@\n+2012-07-25  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+        * gcc.target/i386/prefetchw-1.c: New.\n+\t* gcc.target/i386/sse-12.c: Add -mprfchw.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2012-07-24  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* lib/gcc-dg.exp (process-message): Don't ignore errors."}, {"sha": "c40f3d326647f5166ecb13d30a76e58fe82963e8", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "03bdfd2bda398a498b1555b52ee02b2890b6687e", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "d0babe4d1d5d49a9fdfe3de9175f57c524aa836a", "filename": "gcc/testsuite/gcc.target/i386/prefetchw-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fprefetchw-1.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mprfchw -O2\" } */\n+/* { dg-final { scan-assembler \"\\[ \\\\t\\]+prefetchw\\[ \\\\t\\]+\" } } */\n+\n+#include <x86intrin.h>\n+\n+void *p;\n+\n+void extern\n+prefetchw__test (void)\n+{\n+    _m_prefetchw (p);\n+}"}, {"sha": "19e0071b297aa45f0cd6c185dc25e4b243153304", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "7a2bdb3e437cf9cf29894b1ebc28f4b17cece129", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "8b19a88bcefd28394609b3c9e55094afca09fc8d", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mprfchw\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "99dddfd7d8e5b2c924b261fe3e682dfd1c7d2b01", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -50,7 +50,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,prfchw\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -264,7 +264,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,prfchw\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "a06ee5e0d57602b1db826f903bbd1934e355de0c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c94dd3123dc9942e9fed6eb79d741a69b4ab4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=e61c94dd3123dc9942e9fed6eb79d741a69b4ab4", "patch": "@@ -183,7 +183,7 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,prfchw\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}