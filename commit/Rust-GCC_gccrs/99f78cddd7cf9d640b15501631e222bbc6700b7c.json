{"sha": "99f78cddd7cf9d640b15501631e222bbc6700b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmNzhjZGRkN2NmOWQ2NDBiMTU1MDE2MzFlMjIyYmJjNjcwMGI3Yw==", "commit": {"author": {"name": "Ira Ruben", "email": "ira@apple.com", "date": "2001-12-14T23:17:18Z"}, "committer": {"name": "Ira Ruben", "email": "ira@gcc.gnu.org", "date": "2001-12-14T23:17:18Z"}, "message": "Added changes to support -### (previously ok'ed by R. Henderson).\n\nAdded changes to prevent -save-temps from clobbering the\ninput file (previously ok'ed by R. Henderson).\n\n2001-12-14  Ira Ruben\t<ira@apple.com>\n\n\tAdd -### option (displays driver-generated commands without\n\texecuting and quotes all arguments).\n\t* doc/invoke.texi: Add -###.\n\t* gcc.c (verbose_only_flag) - New flag.\n\t* (execute): If -### write quoted arguments and return.\n\t* (display_help): Print meaning of -###.\n\t* (process_command): Handle -###.\n\n2001-12-14  Ira Ruben\t<ira@apple.com>\n\n\tFix to no allow -save-temps to clobber user's source file.\n\t* gcc.c: Add static globals input_stat and input_stat_set.\n\t(do_spec_1): For 'g', 'u', 'U' case with save_temps_flag\n\tset, check that user's input file is not overwritten.\n\t(set_input): Reset input_stat_set for each new file.\n\nFrom-SVN: r48019", "tree": {"sha": "fc2f86584e6c9de369cdd5425bdbf8ecf5881304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2f86584e6c9de369cdd5425bdbf8ecf5881304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f78cddd7cf9d640b15501631e222bbc6700b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f78cddd7cf9d640b15501631e222bbc6700b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f78cddd7cf9d640b15501631e222bbc6700b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f78cddd7cf9d640b15501631e222bbc6700b7c/comments", "author": null, "committer": null, "parents": [{"sha": "f172748112d29afc2d4eddcdc68845761ad78ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f172748112d29afc2d4eddcdc68845761ad78ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f172748112d29afc2d4eddcdc68845761ad78ad9"}], "stats": {"total": 120, "additions": 112, "deletions": 8}, "files": [{"sha": "8b531429fc0804a789a56bf40318b5168d08e98b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f78cddd7cf9d640b15501631e222bbc6700b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f78cddd7cf9d640b15501631e222bbc6700b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99f78cddd7cf9d640b15501631e222bbc6700b7c", "patch": "@@ -1,3 +1,21 @@\n+2001-12-14  Ira Ruben\t<ira@apple.com>\n+\n+\tAdd -### option (displays driver-generated commands without\n+\texecuting and quotes all arguments).\n+\t* doc/invoke.texi: Add -###.\n+\t* gcc.c (verbose_only_flag) - New flag.\n+\t* (execute): If -### write quoted arguments and return.\n+\t* (display_help): Print meaning of -###.\n+\t* (process_command): Handle -###.\n+\n+2001-12-14  Ira Ruben\t<ira@apple.com>\n+\n+\tFix to no allow -save-temps to clobber user's source file.\n+\t* gcc.c: Add static globals input_stat and input_stat_set.\n+\t(do_spec_1): For 'g', 'u', 'U' case with save_temps_flag\n+\tset, check that user's input file is not overwritten.\n+\t(set_input): Reset input_stat_set for each new file.\n+\n Fri Dec 14 22:14:44 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (estimate_probability): Fix LOOP_EXIT heuristic."}, {"sha": "6c9beb579e934af983219818be631b38fa9990ad", "filename": "gcc/gcc.c", "status": "modified", "additions": 94, "deletions": 8, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f78cddd7cf9d640b15501631e222bbc6700b7c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f78cddd7cf9d640b15501631e222bbc6700b7c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=99f78cddd7cf9d640b15501631e222bbc6700b7c", "patch": "@@ -186,6 +186,13 @@ static int print_help_list;\n \n static int verbose_flag;\n \n+/* Flag indicating whether we should ONLY print the command and\n+   arguments (like verbose_flag) without executing the command.\n+   Displayed arguments are quoted so that the generated command\n+   line is suitable for execution.  This is intended for use in\n+   shell scripts to capture the driver-generated command line.  */\n+static int verbose_only_flag;\n+\n /* Flag indicating to print target specific command line options.  */\n \n static int target_help_flag;\n@@ -2726,15 +2733,33 @@ execute ()\n \t{\n \t  const char *const *j;\n \n-\t  for (j = commands[i].argv; *j; j++)\n-\t    fprintf (stderr, \" %s\", *j);\n+     \t  if (verbose_only_flag)\n+     \t    {\n+\t      for (j = commands[i].argv; *j; j++)\n+\t\t{\n+\t\t  char *p;\n+\t\t  fprintf (stderr, \" \\\"\");\n+\t\t  for (p = *j; *p; ++p)\n+\t\t    {\n+\t\t      if (*p == '\"' || *p == '\\\\' || *p == '$')\n+\t\t\tfputc ('\\\\', stderr);\n+\t\t      fputc (*p, stderr);\n+\t\t    }\n+\t\t  fputc ('\"', stderr);\n+\t\t}\n+     \t    }\n+     \t  else\n+\t    for (j = commands[i].argv; *j; j++)\n+\t      fprintf (stderr, \" %s\", *j);\n \n \t  /* Print a pipe symbol after all but the last command.  */\n \t  if (i + 1 != n_commands)\n \t    fprintf (stderr, \" |\");\n \t  fprintf (stderr, \"\\n\");\n \t}\n       fflush (stderr);\n+      if (verbose_only_flag != 0)\n+        return 0;\n #ifdef DEBUG\n       notice (\"\\nGo ahead? (y or n) \");\n       fflush (stderr);\n@@ -3018,6 +3043,7 @@ display_help ()\n   fputs (_(\"  -b <machine>             Run gcc for target <machine>, if installed\\n\"), stdout);\n   fputs (_(\"  -V <version>             Run gcc version number <version>, if installed\\n\"), stdout);\n   fputs (_(\"  -v                       Display the programs invoked by the compiler\\n\"), stdout);\n+  fputs (_(\"  -###                     Like -v but options quoted and commands not executed\\n\"), stdout);\n   fputs (_(\"  -E                       Preprocess only; do not compile, assemble or link\\n\"), stdout);\n   fputs (_(\"  -S                       Compile only; do not assemble or link\\n\"), stdout);\n   fputs (_(\"  -c                       Compile and assemble, but do not link\\n\"), stdout);\n@@ -3452,6 +3478,15 @@ process_command (argc, argv)\n \t}\n       else if (strcmp (argv[i], \"-time\") == 0)\n \treport_times = 1;\n+      else if (strcmp (argv[i], \"-###\") == 0)\n+\t{\n+\t  /* This is similar to -v except that there is no execution\n+\t     of the commands and the echoed arguments are quoted.  It\n+\t     is intended for use in shell scripts to capture the\n+\t     driver-generated command line.  */\n+\t  verbose_only_flag++;\n+\t  verbose_flag++;\n+\t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  const char *p = &argv[i][1];\n@@ -3870,6 +3905,8 @@ process_command (argc, argv)\n \t  else if (report_times)\n \t    error (\"warning: -pipe ignored because -time specified\");\n \t}\n+      else if (strcmp (argv[i], \"-###\") == 0)\n+\t;\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  const char *p = &argv[i][1];\n@@ -4077,6 +4114,8 @@ static int basename_length;\n static int suffixed_basename_length;\n static const char *input_basename;\n static const char *input_suffix;\n+static struct stat input_stat;\n+static int input_stat_set;\n \n /* The compiler used to process the current input file.  */\n static struct compiler *input_file_compiler;\n@@ -4442,12 +4481,6 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  case 'g':\n \t  case 'u':\n \t  case 'U':\n-\t    if (save_temps_flag)\n-\t      {\n-\t\tobstack_grow (&obstack, input_basename, basename_length);\n-\t\tdelete_this_arg = 0;\n-\t      }\n-\t    else\n \t      {\n \t\tstruct temp_name *t;\n \t\tint suffix_length;\n@@ -4476,6 +4509,54 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t      }\n \t\t    suffix_length += strlen (TARGET_OBJECT_SUFFIX);\n \t\t  }\n+\t\t\n+\t\t/* If the input_filename has the same suffix specified\n+\t\t   for the %g, %u, or %U, and -save-temps is specified,\n+\t\t   we could end up using that file as an intermediate\n+\t\t   thus clobbering the user's source file (.e.g.,\n+\t\t   gcc -save-temps foo.s would clobber foo.s with the\n+\t\t   output of cpp0).  So check for this condition and\n+\t\t   generate a temp file as the intermediate.  */\n+\t\t   \n+\t\tif (save_temps_flag)\n+\t\t  {\n+\t\t    temp_filename_length = basename_length + suffix_length;\n+\t\t    temp_filename = alloca (temp_filename_length + 1);\n+\t\t    strncpy ((char *) temp_filename, input_basename, basename_length);\n+\t\t    strncpy ((char *) temp_filename + basename_length, suffix,\n+\t\t    \t     suffix_length);\n+\t\t    *((char *) temp_filename + temp_filename_length) = '\\0';\n+\t\t    if (strcmp (temp_filename, input_filename) != 0)\n+\t\t      {\n+\t\t      \tstruct stat st_temp;\n+\t\t      \t\n+\t\t      \t/* Note, set_input() resets input_stat_set to 0.  */\n+\t\t      \tif (input_stat_set == 0)\n+\t\t      \t  {\n+\t\t      \t    input_stat_set = stat (input_filename, &input_stat);\n+\t\t      \t    if (input_stat_set >= 0)\n+\t\t      \t      input_stat_set = 1;\n+\t\t      \t  }\n+\t\t      \t  \n+\t\t      \t/* If we have the stat for the input_filename\n+\t\t      \t   and we can do the stat for the temp_filename\n+\t\t      \t   then the they could still refer to the same\n+\t\t      \t   file if st_dev/st_ino's are the same.  */\n+\t\t      \t\n+\t\t\tif (input_stat_set != 1\n+\t\t\t    || stat (temp_filename, &st_temp) < 0\n+\t\t\t    || input_stat.st_dev != st_temp.st_dev\n+\t\t\t    || input_stat.st_ino != st_temp.st_ino)\n+ \t\t      \t  {\n+\t\t\t    temp_filename = save_string (temp_filename,\n+\t\t\t\t\t\t\t temp_filename_length + 1);\n+\t\t\t    obstack_grow (&obstack, temp_filename,\n+\t\t\t    \t\t\t    temp_filename_length);\n+\t\t\t    arg_going = 1;\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t      }\n+\t\t  }\n \n \t\t/* See if we already have an association of %g/%u/%U and\n \t\t   suffix.  */\n@@ -5618,6 +5699,11 @@ set_input (filename)\n     }\n   else\n     input_suffix = \"\";\n+  \n+  /* If a spec for 'g', 'u', or 'U' is seen with -save-temps then\n+     we will need to do a stat on the input_filename.  The\n+     INPUT_STAT_SET signals that the stat is needed.  */\n+  input_stat_set = 0;\n }\n \f\n /* On fatal signals, delete all the temporary files.  */"}]}