{"sha": "cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5OThmZDVmNDNhMjk2ZTFhMTJiZjRkZTYzYzRjOWRkMWQzOWNmYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T16:29:33Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T16:29:33Z"}, "message": "rs6000: ws -> wa\n\n\"ws\" is just \"wa\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"ws\"):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_ws.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271916", "tree": {"sha": "2a9306c229c1f69122816dabe3c3cf95f5fce3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9306c229c1f69122816dabe3c3cf95f5fce3f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "208a040511b9c4d9a59af1caafa855a031a7a0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208a040511b9c4d9a59af1caafa855a031a7a0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208a040511b9c4d9a59af1caafa855a031a7a0ca"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "aad388597260537ef8f3030be4bc994125b0f8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -1,3 +1,15 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"ws\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_ws.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wv\"):"}, {"sha": "22286670f390392d9cf5e0983917864791ea5130", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -82,9 +82,6 @@\n (define_register_constraint \"wr\" \"rs6000_constraints[RS6000_CONSTRAINT_wr]\"\n   \"General purpose register if 64-bit instructions are enabled or NO_REGS.\")\n \n-(define_register_constraint \"ws\" \"rs6000_constraints[RS6000_CONSTRAINT_ws]\"\n-  \"VSX vector register to hold scalar double values or NO_REGS.\")\n-\n (define_register_constraint \"ww\" \"rs6000_constraints[RS6000_CONSTRAINT_ww]\"\n   \"FP or VSX register to perform float operations under -mvsx or NO_REGS.\")\n "}, {"sha": "464c9707f3270829b8b70e186315bde06a2296b1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -2514,7 +2514,6 @@ rs6000_debug_reg_global (void)\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n-\t   \"ws reg_class = %s\\n\"\n \t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n@@ -2529,7 +2528,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ws]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]]);\n@@ -3144,7 +3142,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twf - Preferred register class for V4SFmode.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n-\tws - Register class to do ISA 2.06 DF operations.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.  */\n \n@@ -3159,7 +3156,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wd] = VSX_REGS;\t/* V2DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n-      rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\t/* DFmode  */\n     }\n \n   /* Add conditional constraints based on various options, to allow us to"}, {"sha": "c7fd7a2ac94e8bc8da8f892ce01ccd66dea31daf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -1262,7 +1262,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n-  RS6000_CONSTRAINT_ws,\t\t/* VSX register for DF */\n   RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */"}, {"sha": "a0628c12b522fa11149c1a3fc61b6f7e3e59e815", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -469,10 +469,10 @@\n \t\t\t   (TD \"wn\")])\n \n ; Definitions for 64-bit VSX\n-(define_mode_attr f64_vsx [(DF \"ws\") (DD \"wn\")])\n+(define_mode_attr f64_vsx [(DF \"wa\") (DD \"wn\")])\n \n ; Definitions for 64-bit direct move\n-(define_mode_attr f64_dm  [(DF \"ws\") (DD \"d\")])\n+(define_mode_attr f64_dm  [(DF \"wa\") (DD \"d\")])\n \n ; Definitions for 64-bit use of altivec registers\n (define_mode_attr f64_av  [(DF \"v\") (DD \"wn\")])\n@@ -526,12 +526,12 @@\n ; ISA 2.06 (power7).  This includes instructions that normally target DF mode,\n ; but are used on SFmode, since internally SFmode values are kept in the DFmode\n ; format.\n-(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"ws\") (DI \"wa\")])\n+(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"wa\") (DI \"wa\")])\n \n ; SF/DF constraint for arithmetic on VSX registers.  This is intended to be\n ; used for DFmode instructions added in ISA 2.06 (power7) and SFmode\n ; instructions added in ISA 2.07 (power8)\n-(define_mode_attr Fv2\t\t[(SF \"wa\") (DF \"ws\") (DI \"wa\")])\n+(define_mode_attr Fv2\t\t[(SF \"wa\") (DF \"wa\") (DI \"wa\")])\n \n ; Which isa is needed for those float instructions?\n (define_mode_attr Fisa\t\t[(SF \"p8v\")  (DF \"*\") (DI \"*\")])\n@@ -626,7 +626,7 @@\n \t\t\t(DI \"Y\")])\n \n (define_mode_attr rreg [(SF   \"f\")\n-\t\t\t(DF   \"ws\")\n+\t\t\t(DF   \"wa\")\n \t\t\t(TF   \"f\")\n \t\t\t(TD   \"f\")\n \t\t\t(V4SF \"wf\")\n@@ -4783,7 +4783,7 @@\n })\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wa,v\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,wa,?wa,wa,v\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wa,Z,wY\")))]\n   \"TARGET_HARD_FLOAT && !HONOR_SNANS (SFmode)\"\n   \"@\n@@ -4804,7 +4804,7 @@\n    (set_attr \"isa\" \"*,*,*,*,p8v,p8v,p9v\")])\n \n (define_insn \"*extendsfdf2_snan\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f,wa\")))]\n   \"TARGET_HARD_FLOAT && HONOR_SNANS (SFmode)\"\n   \"@\n@@ -4821,7 +4821,7 @@\n \n (define_insn \"*truncdfsf2_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n-\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"d,ws\")))]\n+\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"@\n    frsp %0,%1\n@@ -6027,8 +6027,8 @@\n ;; since the friz instruction does not truncate the value if the floating\n ;; point value is < LONG_MIN or > LONG_MAX.\n (define_insn \"*friz\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n-\t(float:DF (fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"d,ws\"))))]\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n+\t(float:DF (fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"d,wa\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRND\n    && flag_unsafe_math_optimizations && !flag_trapping_math && TARGET_FRIZ\"\n   \"@\n@@ -6223,7 +6223,7 @@\n })\n \n (define_insn \"floatdidf2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_FCFID && TARGET_HARD_FLOAT\"\n   \"@\n@@ -6237,7 +6237,7 @@\n ; hit.  We will split after reload to avoid the trip through the GPRs\n \n (define_insn_and_split \"*floatdidf2_mem\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(float:DF (match_operand:DI 1 \"memory_operand\" \"m,Z\")))\n    (clobber (match_scratch:DI 2 \"=d,wa\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFID\"\n@@ -6257,7 +6257,7 @@\n   \"\")\n \n (define_insn \"*floatunsdidf2_fcfidu\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(unsigned_float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDU\"\n   \"@\n@@ -6266,7 +6266,7 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn_and_split \"*floatunsdidf2_mem\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,wa\")\n \t(unsigned_float:DF (match_operand:DI 1 \"memory_operand\" \"m,Z\")))\n    (clobber (match_scratch:DI 2 \"=d,wa\"))]\n   \"TARGET_HARD_FLOAT && (TARGET_FCFIDU || VECTOR_UNIT_VSX_P (DFmode))\"\n@@ -7855,7 +7855,7 @@\n (define_insn_and_split \"extenddf<mode>2_vsx\"\n   [(set (match_operand:IBM128 0 \"gpc_reg_operand\" \"=d,d\")\n \t(float_extend:IBM128\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"ws,m\")))]\n+\t (match_operand:DF 1 \"nonimmediate_operand\" \"wa,m\")))]\n   \"TARGET_LONG_DOUBLE_128 && TARGET_VSX && FLOAT128_IBM_P (<MODE>mode)\"\n   \"#\"\n   \"&& reload_completed\""}, {"sha": "57f99632547bffe2dd44d315bf70abcc97dceb1d", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -115,7 +115,7 @@\n \t\t\t (V2DI  \"wd\")\n \t\t\t (V2DF  \"wd\")\n \t\t\t (DI\t\"wa\")\n-\t\t\t (DF    \"ws\")\n+\t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (TF\t\"wp\")\n \t\t\t (KF\t\"wq\")\n@@ -127,28 +127,28 @@\n ;; hold the data\n (define_mode_attr VSr2\t[(V2DF  \"wd\")\n \t\t\t (V4SF  \"wf\")\n-\t\t\t (DF    \"ws\")\n+\t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n \n (define_mode_attr VSr3\t[(V2DF  \"wa\")\n \t\t\t (V4SF  \"wa\")\n-\t\t\t (DF    \"ws\")\n+\t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n \n ;; Map the register class for sp<->dp float conversions, destination\n-(define_mode_attr VSr4\t[(SF\t\"ws\")\n+(define_mode_attr VSr4\t[(SF\t\"wa\")\n \t\t\t (DF\t\"f\")\n \t\t\t (V2DF  \"wd\")\n \t\t\t (V4SF\t\"v\")])\n \n ;; Map the register class for sp<->dp float conversions, source\n-(define_mode_attr VSr5\t[(SF\t\"ws\")\n+(define_mode_attr VSr5\t[(SF\t\"wa\")\n \t\t\t (DF\t\"f\")\n \t\t\t (V2DF  \"v\")\n \t\t\t (V4SF\t\"wd\")])\n@@ -163,7 +163,7 @@\n \t\t\t (V2DI  \"wa\")\n \t\t\t (V2DF  \"wa\")\n \t\t\t (DI\t\"wa\")\n-\t\t\t (DF    \"ws\")\n+\t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n \t\t\t (V1TI\t\"wa\")\n \t\t\t (TI    \"wa\")\n@@ -277,7 +277,7 @@\n \n ;; Map register class for 64-bit element in 128-bit vector for normal register\n ;; to register moves\n-(define_mode_attr VS_64reg [(V2DF\t\"ws\")\n+(define_mode_attr VS_64reg [(V2DF\t\"wa\")\n \t\t\t    (V2DI\t\"wa\")])\n \n ;; Iterators for loading constants with xxspltib\n@@ -2199,7 +2199,7 @@\n \n ;; xscvspdp, represent the scalar SF type as V4SF\n (define_insn \"vsx_xscvspdp\"\n-  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws\")\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_CVSPDP))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n@@ -2237,14 +2237,14 @@\n ;; ISA 2.07 xscvdpspn/xscvspdpn that does not raise an error on signalling NaNs\n (define_insn \"vsx_xscvdpspn\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=ww\")\n-\t(unspec:V4SF [(match_operand:DF 1 \"vsx_register_operand\" \"ws\")]\n+\t(unspec:V4SF [(match_operand:DF 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVDPSPN))]\n   \"TARGET_XSCVDPSPN\"\n   \"xscvdpspn %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"vsx_xscvspdpn\"\n-  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws\")\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_CVSPDPN))]\n   \"TARGET_XSCVSPDPN\"\n@@ -2453,7 +2453,7 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvsxwdp_df\"\n-  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws\")\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_CVSXWDP))]\n   \"TARGET_VSX\"\n@@ -2469,7 +2469,7 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvuxwdp_df\"\n-  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=ws\")\n+  [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_CVUXWDP))]\n   \"TARGET_VSX\"\n@@ -3771,7 +3771,7 @@\n ;; Optimize double d = (double) vec_extract (vi, <n>)\n ;; Get the element into the top position and use XVCVSWDP/XVCVUWDP\n (define_insn_and_split \"*vsx_extract_si_<uns>float_df\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=ws\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=wa\")\n \t(any_float:DF\n \t (vec_select:SI\n \t  (match_operand:V4SI 1 \"gpc_reg_operand\" \"v\")\n@@ -3818,7 +3818,7 @@\n \t  (match_operand:V4SI 1 \"gpc_reg_operand\" \"v\")\n \t  (parallel [(match_operand:QI 2 \"const_0_to_3_operand\" \"n\")]))))\n    (clobber (match_scratch:V4SI 3 \"=v\"))\n-   (clobber (match_scratch:DF 4 \"=ws\"))]\n+   (clobber (match_scratch:DF 4 \"=wa\"))]\n   \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& 1\"\n@@ -4350,7 +4350,7 @@\n ;; to the top element of the V2DF array without doing an extract.\n \n (define_insn_and_split \"*vsx_reduc_<VEC_reduc_name>_v2df_scalar\"\n-  [(set (match_operand:DF 0 \"vfloat_operand\" \"=&ws,&?ws,ws,?ws\")\n+  [(set (match_operand:DF 0 \"vfloat_operand\" \"=&wa,&?wa,wa,?wa\")\n \t(vec_select:DF\n \t (VEC_reduc:V2DF\n \t  (vec_concat:V2DF"}, {"sha": "b0a74548330da5f732bd7d582f181a5904327ef0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=cc998fd5f43a296e1a12bf4de63c4c9dd1d39cfa", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd}, @code{wf},\n-@code{wp}, @code{wq}, @code{ws}, or @code{ww})\n+@code{wp}, @code{wq}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3266,9 +3266,6 @@ VSX register to use for IEEE 128-bit floating point, or NO_REGS.\n @item wr\n General purpose register if 64-bit instructions are enabled or NO_REGS.\n \n-@item ws\n-VSX vector register to hold scalar double values or NO_REGS.\n-\n @item ww\n FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n "}]}