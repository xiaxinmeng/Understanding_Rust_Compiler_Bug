{"sha": "bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlYzEzM2ZhOWIxZjY1YWRjYjY4ZGJmN2M5Nzk0MDE5ZGRiNjZmMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-01-31T15:01:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-01-31T15:01:40Z"}, "message": "re PR rtl-optimization/84071 (wrong elimination of zero-extension after sign-extended load)\n\n\tPR rtl-optimization/84071\n\t* doc/tm.texi.in (WORD_REGISTER_OPERATIONS): Add explicit case.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r257237", "tree": {"sha": "14576ed965c324b15e9dd502eac9e09e6adcae37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14576ed965c324b15e9dd502eac9e09e6adcae37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/comments", "author": null, "committer": null, "parents": [{"sha": "cb6a6b25e409efd06ad7ffb87cf73bbe243d704a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6a6b25e409efd06ad7ffb87cf73bbe243d704a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6a6b25e409efd06ad7ffb87cf73bbe243d704a"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "40d570bbfc88b76057558ea8c627869f369b49c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "patch": "@@ -1,3 +1,9 @@\n+2018-01-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/84071\n+\t* doc/tm.texi.in (WORD_REGISTER_OPERATIONS): Add explicit case.\n+\t* doc/tm.texi: Regenerate.\n+\n 2018-01-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84132"}, {"sha": "ddf48cb4b4d2f491d1c13ef8d4582cc5d78fbbf9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "patch": "@@ -10766,8 +10766,12 @@ five otherwise.  This is best for most machines.\n \n @defmac WORD_REGISTER_OPERATIONS\n Define this macro to 1 if operations between registers with integral mode\n-smaller than a word are always performed on the entire register.\n-Most RISC machines have this property and most CISC machines do not.\n+smaller than a word are always performed on the entire register.  To be\n+more explicit, if you start with a pair of @code{word_mode} registers with\n+known values and you do a subword, for example @code{QImode}, addition on\n+the low part of the registers, then the compiler may consider that the\n+result has a known value in @code{word_mode} too if the macro is defined\n+to 1.  Most RISC machines have this property and most CISC machines do not.\n @end defmac\n \n @deftypefn {Target Hook} {unsigned int} TARGET_MIN_ARITHMETIC_PRECISION (void)"}, {"sha": "0aab45f4992c45b5393a4b8bfd3bfcdedcbdc0ec", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcec133fa9b1f65adcb68dbf7c9794019ddb66f3/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=bcec133fa9b1f65adcb68dbf7c9794019ddb66f3", "patch": "@@ -7376,8 +7376,12 @@ is in effect.\n \n @defmac WORD_REGISTER_OPERATIONS\n Define this macro to 1 if operations between registers with integral mode\n-smaller than a word are always performed on the entire register.\n-Most RISC machines have this property and most CISC machines do not.\n+smaller than a word are always performed on the entire register.  To be\n+more explicit, if you start with a pair of @code{word_mode} registers with\n+known values and you do a subword, for example @code{QImode}, addition on\n+the low part of the registers, then the compiler may consider that the\n+result has a known value in @code{word_mode} too if the macro is defined\n+to 1.  Most RISC machines have this property and most CISC machines do not.\n @end defmac\n \n @hook TARGET_MIN_ARITHMETIC_PRECISION"}]}