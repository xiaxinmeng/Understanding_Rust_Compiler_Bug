{"sha": "97f6bd406c546b1669a4231a12b62df236af2188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmNmJkNDA2YzU0NmIxNjY5YTQyMzFhMTJiNjJkZjIzNmFmMjE4OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-12-06T18:56:26Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-12-06T18:56:26Z"}, "message": "re PR c/29172 (--combine can't handle #pragma once)\n\ngcc\n\tPR c/29172:\n\t* c-opts.c (c_common_parse_file): Call cpp_clear_file_cache.\nlibcpp\n\tPR c/29172:\n\t* internal.h (struct cpp_reader) <file_hash_entries>: Changed\n\ttype.\n\t<file_hash_entries_allocated, file_hash_entries_used>: Removed.\n\t* files.c (FILE_HASH_POOL_SIZE): New macro.\n\t(struct file_hash_entry_pool): New.\n\t(destroy_all_cpp_files): New function.\n\t(allocate_file_hash_entries): Allocate a file_hash_entry_pool.\n\t(new_file_hash_entry): Update.\n\t(free_file_hash_entries): New function.\n\t(_cpp_cleanup_files): Call free_file_hash_entries and\n\tdestroy_all_cpp_files.\n\t(cpp_clear_file_cache): New function.\n\t* include/cpplib.h (cpp_clear_file_cache): Declare.\n\nFrom-SVN: r130656", "tree": {"sha": "b934a2743256c5e4e95dea15cdccc9504bf5ed64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b934a2743256c5e4e95dea15cdccc9504bf5ed64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f6bd406c546b1669a4231a12b62df236af2188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f6bd406c546b1669a4231a12b62df236af2188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f6bd406c546b1669a4231a12b62df236af2188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f6bd406c546b1669a4231a12b62df236af2188/comments", "author": null, "committer": null, "parents": [{"sha": "3ef50b629c91af90152fb2f7747c82c6fdd8e581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef50b629c91af90152fb2f7747c82c6fdd8e581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef50b629c91af90152fb2f7747c82c6fdd8e581"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "5af2db9c88cb9dda8b331cf37b33a416c787f6bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -1,3 +1,8 @@\n+2007-12-06  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c/29172:\n+\t* c-opts.c (c_common_parse_file): Call cpp_clear_file_cache.\n+\n 2007-12-06  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.c (mips_function_ok_for_sibcall): Check"}, {"sha": "a5c2270c025aeaf9f984cee09738ea005bbc7fd2", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -1281,6 +1281,7 @@ c_common_parse_file (int set_yydebug)\n       if (++i >= num_in_fnames)\n \tbreak;\n       cpp_undef_all (parse_in);\n+      cpp_clear_file_cache (parse_in);\n       this_input_filename\n \t= cpp_read_main_file (parse_in, in_fnames[i]);\n       /* If an input file is missing, abandon further compilation."}, {"sha": "1cc5d7f57f146f8832fd3a093375b49c7cff2d53", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -1,3 +1,20 @@\n+2007-12-06  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR c/29172:\n+\t* internal.h (struct cpp_reader) <file_hash_entries>: Changed\n+\ttype.\n+\t<file_hash_entries_allocated, file_hash_entries_used>: Removed.\n+\t* files.c (FILE_HASH_POOL_SIZE): New macro.\n+\t(struct file_hash_entry_pool): New.\n+\t(destroy_all_cpp_files): New function.\n+\t(allocate_file_hash_entries): Allocate a file_hash_entry_pool.\n+\t(new_file_hash_entry): Update.\n+\t(free_file_hash_entries): New function.\n+\t(_cpp_cleanup_files): Call free_file_hash_entries and\n+\tdestroy_all_cpp_files.\n+\t(cpp_clear_file_cache): New function.\n+\t* include/cpplib.h (cpp_clear_file_cache): Declare.\n+\n 2007-12-03  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/34288:"}, {"sha": "467bb145ab9d517df5663697ca57d689a46b29ea", "filename": "libcpp/files.c", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -150,6 +150,21 @@ struct file_hash_entry\n   } u;\n };\n \n+/* Number of entries to put in a file_hash_entry pool.  */\n+#define FILE_HASH_POOL_SIZE 127\n+\n+/* A file hash entry pool.  We allocate file_hash_entry object from\n+   one of these.  */\n+struct file_hash_entry_pool\n+{\n+  /* Number of entries used from this pool.  */\n+  unsigned int file_hash_entries_used;\n+  /* Next pool in the chain; used when freeing.  */\n+  struct file_hash_entry_pool *next;\n+  /* The memory pool.  */\n+  struct file_hash_entry pool[FILE_HASH_POOL_SIZE];\n+};\n+\n static bool open_file (_cpp_file *file);\n static bool pch_open_file (cpp_reader *pfile, _cpp_file *file,\n \t\t\t   bool *invalid_pch);\n@@ -964,6 +979,19 @@ destroy_cpp_file (_cpp_file *file)\n   free (file);\n }\n \n+/* Release all the files allocated by this reader.  */\n+static void\n+destroy_all_cpp_files (cpp_reader *pfile)\n+{\n+  _cpp_file *iter = pfile->all_files;\n+  while (iter)\n+    {\n+      _cpp_file *next = iter->next_file;\n+      destroy_cpp_file (iter);\n+      iter = next;\n+    }\n+}\n+\n /* A hash of directory names.  The directory names are the path names\n    of files which contain a #include \"\", the included file name is\n    appended to this directories.\n@@ -1009,20 +1037,35 @@ make_cpp_dir (cpp_reader *pfile, const char *dir_name, int sysp)\n static void\n allocate_file_hash_entries (cpp_reader *pfile)\n {\n-  pfile->file_hash_entries_used = 0;\n-  pfile->file_hash_entries_allocated = 127;\n-  pfile->file_hash_entries = XNEWVEC (struct file_hash_entry,\n-                                      pfile->file_hash_entries_allocated);\n+  struct file_hash_entry_pool *pool = XNEW (struct file_hash_entry_pool);\n+  pool->file_hash_entries_used = 0;\n+  pool->next = pfile->file_hash_entries;\n+  pfile->file_hash_entries = pool;\n }\n \n /* Return a new file hash entry.  */\n static struct file_hash_entry *\n new_file_hash_entry (cpp_reader *pfile)\n {\n-  if (pfile->file_hash_entries_used == pfile->file_hash_entries_allocated)\n+  unsigned int idx;\n+  if (pfile->file_hash_entries->file_hash_entries_used == FILE_HASH_POOL_SIZE)\n     allocate_file_hash_entries (pfile);\n \n-  return &pfile->file_hash_entries[pfile->file_hash_entries_used++];\n+  idx = pfile->file_hash_entries->file_hash_entries_used++;\n+  return &pfile->file_hash_entries->pool[idx];\n+}\n+\n+/* Free the file hash entry pools.  */\n+static void\n+free_file_hash_entries (cpp_reader *pfile)\n+{\n+  struct file_hash_entry_pool *iter = pfile->file_hash_entries;\n+  while (iter)\n+    {\n+      struct file_hash_entry_pool *next = iter->next;\n+      free (iter);\n+      iter = next;\n+    }\n }\n \n /* Returns TRUE if a file FNAME has ever been successfully opened.\n@@ -1125,6 +1168,19 @@ _cpp_cleanup_files (cpp_reader *pfile)\n   htab_delete (pfile->dir_hash);\n   htab_delete (pfile->nonexistent_file_hash);\n   obstack_free (&pfile->nonexistent_file_ob, 0);\n+  free_file_hash_entries (pfile);\n+  destroy_all_cpp_files (pfile);\n+}\n+\n+/* Make the parser forget about files it has seen.  This can be useful\n+   for resetting the parser to start another run.  */\n+void\n+cpp_clear_file_cache (cpp_reader *pfile)\n+{\n+  _cpp_cleanup_files (pfile);\n+  pfile->file_hash_entries = NULL;\n+  pfile->all_files = NULL;\n+  _cpp_init_files (pfile);\n }\n \n /* Enter a file name in the hash for the sake of cpp_included.  */"}, {"sha": "e205be7cd6c91c816dbd619b657e5ce8e9e54b76", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -862,6 +862,7 @@ extern cpp_dir *cpp_get_dir (struct _cpp_file *);\n extern cpp_buffer *cpp_get_buffer (cpp_reader *);\n extern struct _cpp_file *cpp_get_file (cpp_buffer *);\n extern cpp_buffer *cpp_get_prev (cpp_buffer *);\n+extern void cpp_clear_file_cache (cpp_reader *);\n \n /* In cpppch.c */\n struct save_macro_data;"}, {"sha": "6110e5cdb08f97f3c6004b76c728a75964b78e1f", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f6bd406c546b1669a4231a12b62df236af2188/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=97f6bd406c546b1669a4231a12b62df236af2188", "patch": "@@ -360,8 +360,7 @@ struct cpp_reader\n   /* File and directory hash table.  */\n   struct htab *file_hash;\n   struct htab *dir_hash;\n-  struct file_hash_entry *file_hash_entries;\n-  unsigned int file_hash_entries_allocated, file_hash_entries_used;\n+  struct file_hash_entry_pool *file_hash_entries;\n \n   /* Negative path lookup hash table.  */\n   struct htab *nonexistent_file_hash;"}]}