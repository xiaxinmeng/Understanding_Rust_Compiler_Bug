{"sha": "bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhZjhiZTFiMmUzNTE0YjhiYmNkZDEwNDIxMzZlN2Q5MWIzYzNmMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-22T21:45:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-22T21:45:27Z"}, "message": "re PR c/90677 (gcc-9.1.0 fails to build __gcc_diag__ souce: error: 'cgraph_node' is not defined as a type)\n\n\tPR c/90677\n\t* c-common.h (identifier_global_tag): Declare.\n\t* c-format.c (get_pointer_to_named_type): Renamed to ...\n\t(get_named_type): ... this.  Use identifier_global_tag instead of\n\tidentifier_global_value, handle the return value being a TYPE_P.\n\t(init_dynamic_diag_info): Adjust get_pointer_to_named_type callers\n\tto call get_named_type instead.  Formatting fixes.\nc/\n\t* c-decl.c (identifier_global_tag): Define.\ncp/\n\t* cp-objcp-common.c (identifier_global_tag): Define.\ntestsuite/\n\t* c-c++-common/pr90677.c: New test.\n\nFrom-SVN: r278634", "tree": {"sha": "45bcd47159e0eaa0651fa0f09f2a27ff62f35a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bcd47159e0eaa0651fa0f09f2a27ff62f35a14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df418f1d3cba53a4d3d20c2f640a250dd4c1bfa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df418f1d3cba53a4d3d20c2f640a250dd4c1bfa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df418f1d3cba53a4d3d20c2f640a250dd4c1bfa3"}], "stats": {"total": 94, "additions": 75, "deletions": 19}, "files": [{"sha": "1cf0fef54655d9b01143c23eaf715b1d613becd5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -1,5 +1,13 @@\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/90677\n+\t* c-common.h (identifier_global_tag): Declare.\n+\t* c-format.c (get_pointer_to_named_type): Renamed to ...\n+\t(get_named_type): ... this.  Use identifier_global_tag instead of\n+\tidentifier_global_value, handle the return value being a TYPE_P.\n+\t(init_dynamic_diag_info): Adjust get_pointer_to_named_type callers\n+\tto call get_named_type instead.  Formatting fixes.\n+\n \tImplement P1920R1, Missing feature-test macros 2017-2019.\n \t* c-cppbuiltin.c (c_cpp_builtins): Bump __cpp_init_captures\n \tand __cpp_generic_lambdas for -std=c++2a.  Define"}, {"sha": "2bcb54f66b91f2f53a6fdc202c6abbf3247d9fd9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -811,6 +811,7 @@ extern void c_register_addr_space (const char *str, addr_space_t as);\n extern bool in_late_binary_op;\n extern const char *c_addr_space_name (addr_space_t as);\n extern tree identifier_global_value (tree);\n+extern tree identifier_global_tag (tree);\n extern bool names_builtin_p (const char *);\n extern tree c_linkage_bindings (tree);\n extern void record_builtin_type (enum rid, const char *, tree);"}, {"sha": "d70d1e0f9c2c61a9424d5cead96f3b952ccef132", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -4899,31 +4899,32 @@ init_dynamic_gfc_info (void)\n     }\n }\n \n-/* Lookup the type named NAME and return a pointer-to-NAME type if found.\n-   Otherwise, return void_type_node if NAME has not been used yet, or NULL_TREE if\n-   NAME is not a type (issuing an error).  */\n+/* Lookup the type named NAME and return a NAME type if found.\n+   Otherwise, return void_type_node if NAME has not been used yet,\n+   or NULL_TREE if NAME is not a type (issuing an error).  */\n \n static tree\n-get_pointer_to_named_type (const char *name)\n+get_named_type (const char *name)\n {\n-  tree result;\n-  if ((result = maybe_get_identifier (name)))\n+  if (tree result = maybe_get_identifier (name))\n     {\n-      result = identifier_global_value (result);\n+      result = identifier_global_tag (result);\n       if (result)\n \t{\n-\t  if (TREE_CODE (result) != TYPE_DECL)\n+\t  if (TYPE_P (result))\n+\t    ;\n+\t  else if (TREE_CODE (result) == TYPE_DECL)\n+\t    result = TREE_TYPE (result);\n+\t  else\n \t    {\n \t      error (\"%qs is not defined as a type\", name);\n \t      result = NULL_TREE;\n \t    }\n-\t  else\n-\t    result = TREE_TYPE (result);\n \t}\n+      return result;\n     }\n   else\n-    result = void_type_node;\n-  return result;\n+    return void_type_node;\n }\n \n /* Determine the types of \"tree\" and \"location_t\" in the code being\n@@ -4953,23 +4954,24 @@ init_dynamic_diag_info (void)\n \t an extra type level.  */\n       if ((local_tree_type_node = maybe_get_identifier (\"tree\")))\n \t{\n-\t  local_tree_type_node = identifier_global_value (local_tree_type_node);\n+\t  local_tree_type_node\n+\t    = identifier_global_value (local_tree_type_node);\n \t  if (local_tree_type_node)\n \t    {\n \t      if (TREE_CODE (local_tree_type_node) != TYPE_DECL)\n \t\t{\n \t\t  error (\"%<tree%> is not defined as a type\");\n-\t\t  local_tree_type_node = 0;\n+\t\t  local_tree_type_node = NULL_TREE;\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (local_tree_type_node))\n \t\t       != POINTER_TYPE)\n \t\t{\n \t\t  error (\"%<tree%> is not defined as a pointer type\");\n-\t\t  local_tree_type_node = 0;\n+\t\t  local_tree_type_node = NULL_TREE;\n \t\t}\n \t      else\n-\t\tlocal_tree_type_node =\n-\t\t  TREE_TYPE (TREE_TYPE (local_tree_type_node));\n+\t\tlocal_tree_type_node\n+\t\t  = TREE_TYPE (TREE_TYPE (local_tree_type_node));\n \t    }\n \t}\n       else\n@@ -4979,12 +4981,12 @@ init_dynamic_diag_info (void)\n   /* Similar to the above but for gimple*.  */\n   if (!local_gimple_ptr_node\n       || local_gimple_ptr_node == void_type_node)\n-    local_gimple_ptr_node = get_pointer_to_named_type (\"gimple\");\n+    local_gimple_ptr_node = get_named_type (\"gimple\");\n \n   /* Similar to the above but for cgraph_node*.  */\n   if (!local_cgraph_node_ptr_node\n       || local_cgraph_node_ptr_node == void_type_node)\n-    local_cgraph_node_ptr_node = get_pointer_to_named_type (\"cgraph_node\");\n+    local_cgraph_node_ptr_node = get_named_type (\"cgraph_node\");\n \n   static tree hwi;\n "}, {"sha": "cb1ea0948dd3f011186d2391e6d72922e65b54ad", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -1,3 +1,8 @@\n+2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/90677\n+\t* c-decl.c (identifier_global_tag): Define.\n+\n 2019-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR c/92088"}, {"sha": "7fd3cc26e87ec10642f5a7c97b8dc73387440cd4", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -10168,6 +10168,20 @@ identifier_global_value\t(tree t)\n   return NULL_TREE;\n }\n \n+/* Return the global value of tag T as a symbol.  */\n+\n+tree\n+identifier_global_tag (tree t)\n+{\n+  struct c_binding *b;\n+\n+  for (b = I_TAG_BINDING (t); b; b = b->shadowed)\n+    if (B_IN_FILE_SCOPE (b) || B_IN_EXTERNAL_SCOPE (b))\n+      return b->decl;\n+\n+  return NULL_TREE;\n+}\n+\n /* Returns true if NAME refers to a built-in function or function-like\n    operator.  */\n "}, {"sha": "762da085cb608bb1e440d79b7bef95554f61ee89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -1,5 +1,8 @@\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/90677\n+\t* cp-objcp-common.c (identifier_global_tag): Define.\n+\n \tPR c++/92458\n \t* init.c (nsdmi_inst): Change type to\n \tdecl_tree_cache_map * from tree_cache_map *."}, {"sha": "a65802f5b8a31d7b03d43d5b2c6e1625fbe1e88e", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -349,6 +349,15 @@ identifier_global_value (tree name)\n   return get_global_binding (name);\n }\n \n+/* Similarly, but return struct/class/union NAME instead.  */\n+\n+tree\n+identifier_global_tag (tree name)\n+{\n+  return lookup_qualified_name (global_namespace, name, /*prefer_type*/2,\n+\t\t\t\t/*complain*/false);\n+}\n+\n /* Returns true if NAME refers to a built-in function or function-like\n    operator.  */\n "}, {"sha": "201d044b7657d77cfc8d195a6ea053d1f8f7ad37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -1,5 +1,8 @@\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/90677\n+\t* c-c++-common/pr90677.c: New test.\n+\n \tPR c++/92458\n \t* g++.dg/pch/pr92458.C: New test.\n \t* g++.dg/pch/pr92458.Hs: New test."}, {"sha": "897fbc6e13e416731c3c5b600129c2614251fe64", "filename": "gcc/testsuite/c-c++-common/pr90677.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr90677.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr90677.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr90677.c?ref=bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/90677 */\n+/* { dg-do compile } */\n+/* { dg-options \"-W -Wall\" } */\n+\n+struct cgraph_node;\n+union tree_node;\n+typedef union tree_node *tree;\n+union gimple_statement_d;\n+typedef union gimple_statement_d *gimple;\n+struct cgraph_node *cgraph_node (tree);\n+void foo (int, const char *, ...) __attribute__((__format__(__gcc_diag__, 2, 3)));"}]}