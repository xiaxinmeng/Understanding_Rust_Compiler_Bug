{"sha": "6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxYWE4NDgzNmUxNjZmYmZiNGI1M2FjMDA0ZDFkNjNlMDNkOWYwNQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2012-11-20T21:21:30Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2012-11-20T21:21:30Z"}, "message": "Introduce vNULL to use as a nil initializer for vec<>.\n\nThis patch implements Jakub's idea of adding an empty struct with\na typecast operator that returns nil vectors.  This is useful to\nshorten all the initializers when declaring vec instances or passing\nnil vectors as function arguments.\n\n2012-11-20  Diego Novillo  <dnovillo@google.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\nChangeLog\n\t* vec.h (struct vnull): Declare.\n\t(vNULL): Declare.\n\t* vec.c (vNULL): Define.\n\t* bb-reorder.c: Replace all vec<T, A>() initializers with vNULL.\n\t* cfgexpand.c: Likewise.\n\t* cfgloop.c: Likewise.\n\t* cfgloopanal.c: Likewise.\n\t* cfgloopmanip.c: Likewise.\n\t* cgraph.c: Likewise.\n\t* config/c6x/c6x.c: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* df-core.c: Likewise.\n\t* dominance.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* except.c: Likewise.\n\t* function.c: Likewise.\n\t* gcse.c: Likewise.\n\t* genautomata.c: Likewise.\n\t* graphds.c: Likewise.\n\t* graphite-scop-detection.c: Likewise.\n\t* graphite.c: Likewise.\n\t* haifa-sched.c: Likewise.\n\t* ifcvt.c: Likewise.\n\t* ipa-cp.c: Likewise.\n\t* ipa-inline-analysis.c: Likewise.\n\t* ipa-inline-transform.c: Likewise.\n\t* ipa-inline.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* ipa-split.c: Likewise.\n\t* ipa-utils.c: Likewise.\n\t* ira-build.c: Likewise.\n\t* lto-cgraph.c: Likewise.\n\t* lto-streamer-in.c: Likewise.\n\t* lto-symtab.c: Likewise.\n\t* opts-global.c: Likewise.\n\t* passes.c: Likewise.\n\t* ree.c: Likewise.\n\t* sched-deps.c: Likewise.\n\t* sel-sched-ir.c: Likewise.\n\t* sel-sched-ir.h: Likewise.\n\t* sel-sched.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-call-cdce.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-data-ref.c: Likewise.\n\t* tree-diagnostic.c: Likewise.\n\t* tree-eh.c: Likewise.\n\t* tree-loop-distribution.c: Likewise.\n\t* tree-predcom.c: Likewise.\n\t* tree-ssa-loop-im.c: Likewise.\n\t* tree-ssa-loop-ivcanon.c: Likewise.\n\t* tree-ssa-loop-manip.c: Likewise.\n\t* tree-ssa-loop-niter.c: Likewise.\n\t* tree-ssa-loop-prefetch.c: Likewise.\n\t* tree-ssa-math-opts.c: Likewise.\n\t* tree-ssa-phiopt.c: Likewise.\n\t* tree-ssa-pre.c: Likewise.\n\t* tree-ssa-propagate.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* tree-ssa-sccvn.c: Likewise.\n\t* tree-ssa-structalias.c: Likewise.\n\t* tree-ssa-threadedge.c: Likewise.\n\t* tree-ssa-uninit.c: Likewise.\n\t* tree-stdarg.c: Likewise.\n\t* tree-switch-conversion.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* tree-vect-loop.c: Likewise.\n\t* tree-vect-slp.c: Likewise.\n\t* tree-vect-stmts.c: Likewise.\n\t* value-prof.c: Likewise.\n\t* varasm.c: Likewise.\n\nada/ChangeLog\n\t* gcc-interface/decl.c: Replace all vec<T,A>()\n\tinitializers with vNULL.\n\ncp/ChangeLog\n\t* name-lookup.c: Replace all vec<T, A>() initializers\n\twith vNULL.\n\t* semantics.c: Likewise.\n\nfortran/ChangeLog\n\t* trans-openmp.c: Replace all vec<T, A>() initializers\n\twith vNULL.\n\nlto/ChangeLog\n\t* lto.c: Replace all vec<T, A>() initializers with vNULL.\n\nobjc/ChangeLog\n\t* objc-act.c: Replace all vec<T, A>() initializers with vNULL.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r193677", "tree": {"sha": "df5dd32febb0dc65ea6ce7f725aab90791a1dbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df5dd32febb0dc65ea6ce7f725aab90791a1dbc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b014e124e46edd418d02316ce4c65563d0568ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b014e124e46edd418d02316ce4c65563d0568ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b014e124e46edd418d02316ce4c65563d0568ad8"}], "stats": {"total": 606, "additions": 355, "deletions": 251}, "files": [{"sha": "513d0493fdee2610f0253b56ac078be464bfdce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -57,6 +57,82 @@\n \t* config/rs6000/rs6000.md (largetoc_low): Revert.\n \t(largetoc_low_aix<mode>): New.\n \n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* vec.h (struct vnull): Declare.\n+\t(vNULL): Declare.\n+\t* vec.c (vNULL): Define.\n+\t* bb-reorder.c: Replace all vec<T, A>() initializers with vNULL.\n+\t* cfgexpand.c: Likewise.\n+\t* cfgloop.c: Likewise.\n+\t* cfgloopanal.c: Likewise.\n+\t* cfgloopmanip.c: Likewise.\n+\t* cgraph.c: Likewise.\n+\t* config/c6x/c6x.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* df-core.c: Likewise.\n+\t* dominance.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* except.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* genautomata.c: Likewise.\n+\t* graphds.c: Likewise.\n+\t* graphite-scop-detection.c: Likewise.\n+\t* graphite.c: Likewise.\n+\t* haifa-sched.c: Likewise.\n+\t* ifcvt.c: Likewise.\n+\t* ipa-cp.c: Likewise.\n+\t* ipa-inline-analysis.c: Likewise.\n+\t* ipa-inline-transform.c: Likewise.\n+\t* ipa-inline.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* ipa-split.c: Likewise.\n+\t* ipa-utils.c: Likewise.\n+\t* ira-build.c: Likewise.\n+\t* lto-cgraph.c: Likewise.\n+\t* lto-streamer-in.c: Likewise.\n+\t* lto-symtab.c: Likewise.\n+\t* opts-global.c: Likewise.\n+\t* passes.c: Likewise.\n+\t* ree.c: Likewise.\n+\t* sched-deps.c: Likewise.\n+\t* sel-sched-ir.c: Likewise.\n+\t* sel-sched-ir.h: Likewise.\n+\t* sel-sched.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-call-cdce.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-data-ref.c: Likewise.\n+\t* tree-diagnostic.c: Likewise.\n+\t* tree-eh.c: Likewise.\n+\t* tree-loop-distribution.c: Likewise.\n+\t* tree-predcom.c: Likewise.\n+\t* tree-ssa-loop-im.c: Likewise.\n+\t* tree-ssa-loop-ivcanon.c: Likewise.\n+\t* tree-ssa-loop-manip.c: Likewise.\n+\t* tree-ssa-loop-niter.c: Likewise.\n+\t* tree-ssa-loop-prefetch.c: Likewise.\n+\t* tree-ssa-math-opts.c: Likewise.\n+\t* tree-ssa-phiopt.c: Likewise.\n+\t* tree-ssa-pre.c: Likewise.\n+\t* tree-ssa-propagate.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* tree-ssa-sccvn.c: Likewise.\n+\t* tree-ssa-structalias.c: Likewise.\n+\t* tree-ssa-threadedge.c: Likewise.\n+\t* tree-ssa-uninit.c: Likewise.\n+\t* tree-stdarg.c: Likewise.\n+\t* tree-switch-conversion.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* tree-vect-loop.c: Likewise.\n+\t* tree-vect-slp.c: Likewise.\n+\t* tree-vect-stmts.c: Likewise.\n+\t* value-prof.c: Likewise.\n+\t* varasm.c: Likewise.\n+\n 2012-11-20  Diego Novillo  <dnovillo@google.com>\n \n \t* Makefile.in (tlink.o): Add dependency on VEC_H."}, {"sha": "9b5eabdcc678f7b6f91769c521c1187da6d308a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1,3 +1,9 @@\n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/decl.c: Replace all vec<T,A>()\n+\tinitializers with vNULL.\n+\n 2012-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c: Remove trailing spaces."}, {"sha": "88afccfb20d5485849f44b0ebe5f5de73477e965", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3327,7 +3327,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  gnu_variant_list\n \t\t    = build_variant_list (TREE_TYPE (gnu_variant_part),\n \t\t\t\t\t  gnu_subst_list,\n-\t\t\t\t\t  vec<variant_desc>());\n+\t\t\t\t\t  vNULL);\n \n \t\t  /* If all the qualifiers are unconditionally true, the\n \t\t     innermost variant is statically selected.  */\n@@ -7552,7 +7552,7 @@ build_position_list (tree gnu_type, bool do_not_flatten_variant, tree gnu_pos,\n static vec<subst_pair>\n build_subst_list (Entity_Id gnat_subtype, Entity_Id gnat_type, bool definition)\n {\n-  vec<subst_pair> gnu_list = vec<subst_pair>();\n+  vec<subst_pair> gnu_list = vNULL;\n   Entity_Id gnat_discrim;\n   Node_Id gnat_value;\n "}, {"sha": "ed22bdfa69caab269968d6fc955f57ae3fb5e395", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1461,7 +1461,7 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n static vec<edge> \n find_rarely_executed_basic_blocks_and_crossing_edges (void)\n {\n-  vec<edge> crossing_edges = vec<edge>();\n+  vec<edge> crossing_edges = vNULL;\n   basic_block bb;\n   edge e;\n   edge_iterator ei;"}, {"sha": "083e52a739282bd3e94ced5f3279cdde8daf0d73", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1521,7 +1521,7 @@ static rtx\n expand_used_vars (void)\n {\n   tree var, outer_block = DECL_INITIAL (current_function_decl);\n-  vec<tree> maybe_local_decls = vec<tree>();\n+  vec<tree> maybe_local_decls = vNULL;\n   rtx var_end_seq = NULL_RTX;\n   struct pointer_map_t *ssa_name_decls;\n   unsigned i;\n@@ -1675,8 +1675,8 @@ expand_used_vars (void)\n     {\n       struct stack_vars_data data;\n \n-      data.asan_vec = vec<HOST_WIDE_INT>();\n-      data.asan_decl_vec = vec<tree>();\n+      data.asan_vec = vNULL;\n+      data.asan_decl_vec = vNULL;\n \n       /* Reorder decls to be protected by iterating over the variables\n \t array multiple times, and allocating out of each phase in turn.  */"}, {"sha": "b45493a16bb6c40b0f42f88632ca474724cb8bc8", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -92,7 +92,7 @@ get_loop_latch_edges (const struct loop *loop)\n {\n   edge_iterator ei;\n   edge e;\n-  vec<edge> ret = vec<edge>();\n+  vec<edge> ret = vNULL;\n \n   FOR_EACH_EDGE (e, ei, loop->header->preds)\n     {\n@@ -225,7 +225,7 @@ flow_loops_free (struct loops *loops)\n int\n flow_loop_nodes_find (basic_block header, struct loop *loop)\n {\n-  vec<basic_block> stack = vec<basic_block>();\n+  vec<basic_block> stack = vNULL;\n   int num_nodes = 1;\n   edge latch;\n   edge_iterator latch_ei;\n@@ -1117,7 +1117,7 @@ release_recorded_exits (void)\n vec<edge> \n get_loop_exit_edges (const struct loop *loop)\n {\n-  vec<edge> edges = vec<edge>();\n+  vec<edge> edges = vNULL;\n   edge e;\n   unsigned i;\n   basic_block *body;"}, {"sha": "7fdbd4ae7d4f060bd621bb1e9568a3e8e5145621", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -493,7 +493,7 @@ vec<basic_block>\n get_loop_hot_path (const struct loop *loop)\n {\n   basic_block bb = loop->header;\n-  vec<basic_block> path = vec<basic_block>();\n+  vec<basic_block> path = vNULL;\n   bitmap visited = BITMAP_ALLOC (NULL);\n \n   while (true)"}, {"sha": "34f730166088992d297679e44d6ec071062da232", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -588,7 +588,7 @@ scale_loop_profile (struct loop *loop, int scale, int iteration_bound)\n static void\n update_dominators_in_loop (struct loop *loop)\n {\n-  vec<basic_block> dom_bbs = vec<basic_block>();\n+  vec<basic_block> dom_bbs = vNULL;\n   sbitmap seen;\n   basic_block *body;\n   unsigned i;"}, {"sha": "3af545671e1cb564aa8b11c59ddb807f0ecdfbae", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2184,7 +2184,7 @@ collect_callers_of_node_1 (struct cgraph_node *node, void *data)\n vec<cgraph_edge_p> \n collect_callers_of_node (struct cgraph_node *node)\n {\n-  vec<cgraph_edge_p> redirect_callers = vec<cgraph_edge_p>();\n+  vec<cgraph_edge_p> redirect_callers = vNULL;\n   cgraph_for_node_and_aliases (node, collect_callers_of_node_1,\n \t\t\t       &redirect_callers, false);\n   return redirect_callers;"}, {"sha": "0c9af2cf1de4f7266f9dc134843b28a558b187a1", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3420,7 +3420,7 @@ try_rename_operands (rtx head, rtx tail, unit_req_table reqs, rtx insn,\n   int i;\n   unsigned tmp_mask;\n   int best_reg, old_reg;\n-  vec<du_head_p> involved_chains = vec<du_head_p>();\n+  vec<du_head_p> involved_chains = vNULL;\n   unit_req_table new_reqs;\n \n   for (i = 0, tmp_mask = op_mask; tmp_mask; i++)"}, {"sha": "c9f027a00ce92175f77f12ad38708ed9210191ed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -28768,7 +28768,7 @@ dispatch_function_versions (tree dispatch_decl,\n   /* Function version dispatch is via IFUNC.  IFUNC resolvers fire before\n      constructors, so explicity call __builtin_cpu_init here.  */\n   ifunc_cpu_init_stmt = gimple_build_call_vec (\n-                     ix86_builtins [(int) IX86_BUILTIN_CPU_INIT], vec<tree>());\n+                     ix86_builtins [(int) IX86_BUILTIN_CPU_INIT], vNULL);\n   gimple_seq_add_stmt (&gseq, ifunc_cpu_init_stmt);\n   gimple_set_bb (ifunc_cpu_init_stmt, *empty_bb);\n   set_bb_seq (*empty_bb, gseq);\n@@ -29275,7 +29275,7 @@ ix86_generate_version_dispatcher_body (void *node_p)\n {\n   tree resolver_decl;\n   basic_block empty_bb;\n-  vec<tree> fn_ver_vec = vec<tree>();\n+  vec<tree> fn_ver_vec = vNULL;\n   tree default_ver_decl;\n   struct cgraph_node *versn;\n   struct cgraph_node *node;"}, {"sha": "edcc81f499e65d3517d177b1f87a91db4c8f5c6f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1,3 +1,10 @@\n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* name-lookup.c: Replace all vec<T, A>() initializers\n+\twith vNULL.\n+\t* semantics.c: Likewise.\n+\n 2012-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55368"}, {"sha": "87b1f51536fcf8357f1c1bf8e09afef645621787", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -4222,8 +4222,8 @@ remove_hidden_names (tree fns)\n void\n suggest_alternatives_for (location_t location, tree name)\n {\n-  vec<tree> candidates = vec<tree>();\n-  vec<tree> namespaces_to_search = vec<tree>();\n+  vec<tree> candidates = vNULL;\n+  vec<tree> namespaces_to_search = vNULL;\n   int max_to_search = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n   int n_searched = 0;\n   tree t;\n@@ -5900,7 +5900,7 @@ store_binding (tree id, vec<cxx_saved_binding, va_gc> **old_bindings)\n static void\n store_bindings (tree names, vec<cxx_saved_binding, va_gc> **old_bindings)\n {\n-  static vec<tree> bindings_need_stored = vec<tree>();\n+  static vec<tree> bindings_need_stored = vNULL;\n   tree t, id;\n   size_t i;\n \n@@ -5936,7 +5936,7 @@ static void\n store_class_bindings (vec<cp_class_binding, va_gc> *names,\n \t\t      vec<cxx_saved_binding, va_gc> **old_bindings)\n {\n-  static vec<tree> bindings_need_stored = vec<tree>();\n+  static vec<tree> bindings_need_stored = vNULL;\n   size_t i;\n   cp_class_binding *cb;\n "}, {"sha": "74b897cb58d1b5f094792b1014bfab1b86935c41", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -6510,7 +6510,7 @@ cxx_bind_parameters_in_call (const constexpr_call *old_call, tree t,\n    These do not need to be marked for PCH or GC.  */\n \n /* FIXME remember and print actual constant arguments.  */\n-static vec<tree> call_stack = vec<tree>();\n+static vec<tree> call_stack = vNULL;\n static int call_stack_tick;\n static int last_cx_error_tick;\n \n@@ -6536,7 +6536,7 @@ pop_cx_call_context (void)\n vec<tree> \n cx_error_context (void)\n {\n-  vec<tree> r = vec<tree>();\n+  vec<tree> r = vNULL;\n   if (call_stack_tick != last_cx_error_tick\n       && !call_stack.is_empty ())\n     r = call_stack;"}, {"sha": "9218cb6a075d1eaa519b61750b40b27778bdf8aa", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -991,7 +991,7 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n   bitmap worklist = BITMAP_ALLOC (&df_bitmap_obstack);\n   int age = 0;\n   bool changed;\n-  vec<int> last_visit_age = vec<int>();\n+  vec<int> last_visit_age = vNULL;\n   int prev_age;\n   basic_block bb;\n   int i;"}, {"sha": "0f1e265ff1c4e745fa08750b79caeb0adc512033", "filename": "gcc/dominance.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -745,12 +745,12 @@ get_dominated_by (enum cdi_direction dir, basic_block bb)\n {\n   unsigned int dir_index = dom_convert_dir_to_idx (dir);\n   struct et_node *node = bb->dom[dir_index], *son = node->son, *ason;\n-  vec<basic_block> bbs = vec<basic_block>();\n+  vec<basic_block> bbs = vNULL;\n \n   gcc_checking_assert (dom_computed[dir_index]);\n \n   if (!son)\n-    return vec<basic_block>();\n+    return vNULL;\n \n   bbs.safe_push ((basic_block) son->data);\n   for (ason = son->right; ason != son; ason = ason->right)\n@@ -769,7 +769,7 @@ get_dominated_by_region (enum cdi_direction dir, basic_block *region,\n {\n   unsigned i;\n   basic_block dom;\n-  vec<basic_block> doms = vec<basic_block>();\n+  vec<basic_block> doms = vNULL;\n \n   for (i = 0; i < n_region; i++)\n     region[i]->flags |= BB_DUPLICATED;\n@@ -793,7 +793,7 @@ get_dominated_by_region (enum cdi_direction dir, basic_block *region,\n vec<basic_block> \n get_dominated_to_depth (enum cdi_direction dir, basic_block bb, int depth)\n {\n-  vec<basic_block> bbs = vec<basic_block>();\n+  vec<basic_block> bbs = vNULL;\n   unsigned i;\n   unsigned next_level_start;\n "}, {"sha": "f0256aeade405c266536ef8a98a393c908f5ea74", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -18740,7 +18740,7 @@ static char *\n gen_producer_string (void)\n {\n   size_t j;\n-  vec<dchar_p> switches = vec<dchar_p>();\n+  vec<dchar_p> switches = vNULL;\n   const char *language_string = lang_hooks.name;\n   char *producer, *tail;\n   const char *p;"}, {"sha": "287b75bc975ef99e267114a9f25fda52b99527f5", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1239,7 +1239,7 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n   eh_region r;\n   edge e;\n   int i, disp_index;\n-  vec<tree> dispatch_labels = vec<tree>();\n+  vec<tree> dispatch_labels = vNULL;\n \n   fc = crtl->eh.sjlj_fc;\n "}, {"sha": "d53bf1ae6cd1304e2855a4f8393854b9dab2cc41", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1,3 +1,9 @@\n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.c: Replace all vec<T, A>() initializers\n+\twith vNULL.\n+\n 2012-11-17  Diego Novillo  <dnovillo@google.com>\n \n \tAdjust for new vec API (http://gcc.gnu.org/wiki/cxx-conversion/cxx-vec)"}, {"sha": "8e44338459e018eff3ac3cb60f00369aa18b698d", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1305,7 +1305,7 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n   stmtblock_t body;\n   gfc_omp_clauses *clauses = code->ext.omp_clauses;\n   int i, collapse = clauses->collapse;\n-  vec<dovar_init> inits = vec<dovar_init>();\n+  vec<dovar_init> inits = vNULL;\n   dovar_init *di;\n   unsigned ix;\n "}, {"sha": "9a8e0aed7e2d5951062a1293c83c305d96cfd223", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2265,7 +2265,7 @@ assign_parms_augmented_arg_list (struct assign_parm_data_all *all)\n {\n   tree fndecl = current_function_decl;\n   tree fntype = TREE_TYPE (fndecl);\n-  vec<tree> fnargs = vec<tree>();\n+  vec<tree> fnargs = vNULL;\n   tree arg;\n \n   for (arg = DECL_ARGUMENTS (fndecl); arg; arg = DECL_CHAIN (arg))\n@@ -5874,7 +5874,7 @@ thread_prologue_and_epilogue_insns (void)\n {\n   bool inserted;\n #ifdef HAVE_simple_return\n-  vec<edge> unconverted_simple_returns = vec<edge>();\n+  vec<edge> unconverted_simple_returns = vNULL;\n   bool nonempty_prologue;\n   bitmap_head bb_flags;\n   unsigned max_grow_size;\n@@ -6374,7 +6374,7 @@ thread_prologue_and_epilogue_insns (void)\n \n \t  if (LABEL_P (BB_HEAD (last_bb))\n \t      && !active_insn_between (BB_HEAD (last_bb), BB_END (last_bb)))\n-\t    convert_jumps_to_returns (last_bb, false, vec<edge>());\n+\t    convert_jumps_to_returns (last_bb, false, vNULL);\n \n \t  if (EDGE_COUNT (last_bb->preds) != 0\n \t      && single_succ_p (last_bb))"}, {"sha": "ad09afd0d6deba71b17ded7a7b015bbde50ac87a", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3193,7 +3193,7 @@ hoist_code (void)\n \t      /* Number of occurrences of EXPR that can be hoisted to BB.  */\n \t      int hoistable = 0;\n \t      /* Occurrences reachable from BB.  */\n-\t      vec<occr_t> occrs_to_hoist = vec<occr_t>();\n+\t      vec<occr_t> occrs_to_hoist = vNULL;\n \t      /* We want to insert the expression into BB only once, so\n \t\t note when we've inserted it.  */\n \t      int insn_inserted_p;"}, {"sha": "8d93f0ee75127cc2d2ad2b5e370ebc3139234798", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -6255,7 +6255,7 @@ set_new_cycle_flags (state_t state)\n static void\n minimize_DFA (automaton_t automaton)\n {\n-  vec<state_t> equiv_classes = vec<state_t>();\n+  vec<state_t> equiv_classes = vNULL;\n \n   evaluate_equiv_classes (automaton, &equiv_classes);\n   merge_states (automaton, equiv_classes);"}, {"sha": "beaef1660db33ba5685ab016410543eed5467e5d", "filename": "gcc/graphds.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphds.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -274,7 +274,7 @@ int\n graphds_scc (struct graph *g, bitmap subgraph)\n {\n   int *queue = XNEWVEC (int, g->n_vertices);\n-  vec<int> postorder = vec<int>();\n+  vec<int> postorder = vNULL;\n   int nq, i, comp;\n   unsigned v;\n   bitmap_iterator bi;\n@@ -400,7 +400,7 @@ void\n graphds_domtree (struct graph *g, int entry,\n \t\t int *parent, int *son, int *brother)\n {\n-  vec<int> postorder = vec<int>();\n+  vec<int> postorder = vNULL;\n   int *marks = XCNEWVEC (int, g->n_vertices);\n   int mark = 1, i, v, idom;\n   bool changed = true;"}, {"sha": "d6bb0db295308d908240dd91ec5d8ddf3b3e6beb", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -267,7 +267,7 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop ATTRIBUTE_UNUSED,\n   unsigned i;\n   int j;\n   bool res = true;\n-  vec<data_reference_p> drs = vec<data_reference_p>();\n+  vec<data_reference_p> drs = vNULL;\n   loop_p outer;\n \n   for (outer = loop_containing_stmt (stmt); outer; outer = loop_outer (outer))\n@@ -1585,7 +1585,7 @@ dot_all_scops (vec<scop_p> scops)\n DEBUG_FUNCTION void\n dot_scop (scop_p scop)\n {\n-  vec<scop_p> scops = vec<scop_p>();\n+  vec<scop_p> scops = vNULL;\n \n   if (scop)\n     scops.safe_push (scop);"}, {"sha": "b45659c971740e3d999a139d0af3a94eb6b51b10", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -255,7 +255,7 @@ graphite_transform_loops (void)\n   int i;\n   scop_p scop;\n   bool need_cfg_cleanup_p = false;\n-  vec<scop_p> scops = vec<scop_p>();\n+  vec<scop_p> scops = vNULL;\n   htab_t bb_pbb_mapping;\n   isl_ctx *ctx;\n "}, {"sha": "40350eb9b503e94f9d8eab89fff032ff1c908f32", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -383,13 +383,13 @@ const struct common_sched_info_def haifa_common_sched_info =\n   };\n \n /* Mapping from instruction UID to its Logical UID.  */\n-vec<int> sched_luids = vec<int>();\n+vec<int> sched_luids = vNULL;\n \n /* Next LUID to assign to an instruction.  */\n int sched_max_luid = 1;\n \n /* Haifa Instruction Data.  */\n-vec<haifa_insn_data_def> h_i_d = vec<haifa_insn_data_def>();\n+vec<haifa_insn_data_def> h_i_d = vNULL;\n \n void (* sched_init_only_bb) (basic_block, basic_block);\n \n@@ -4187,7 +4187,7 @@ undo_replacements_for_backtrack (struct haifa_saved_data *save)\n static void\n unschedule_insns_until (rtx insn)\n {\n-  vec<rtx> recompute_vec = vec<rtx>();\n+  vec<rtx> recompute_vec = vNULL;\n \n   /* Make two passes over the insns to be unscheduled.  First, we clear out\n      dependencies and other trivial bookkeeping.  */"}, {"sha": "b518b0ea27b106507a5ccbb1cda4cb7149d7b6a8", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2850,8 +2850,8 @@ cond_move_process_if_block (struct noce_if_info *if_info)\n   int c;\n   struct pointer_map_t *then_vals;\n   struct pointer_map_t *else_vals;\n-  vec<rtx> then_regs = vec<rtx>();\n-  vec<rtx> else_regs = vec<rtx>();\n+  vec<rtx> then_regs = vNULL;\n+  vec<rtx> else_regs = vNULL;\n   unsigned int i;\n   int success_p = FALSE;\n "}, {"sha": "c22f63bf6529a36442f44af0037f9b99dad36a78", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1575,7 +1575,7 @@ devirtualization_time_bonus (struct cgraph_node *node,\n       tree target;\n \n       target = ipa_get_indirect_edge_target (ie, known_csts, known_binfos,\n-\t\t\t\t\tvec<ipa_agg_jump_function_p>());\n+\t\t\t\t\tvNULL);\n       if (!target)\n \tcontinue;\n \n@@ -2248,9 +2248,7 @@ ipcp_discover_new_direct_edges (struct cgraph_node *node,\n       tree target;\n \n       next_ie = ie->next_callee;\n-      target = ipa_get_indirect_edge_target (ie, known_vals,\n-\t\t\t\t\tvec<tree>(),\n-\t\t\t\t\tvec<ipa_agg_jump_function_p>());\n+      target = ipa_get_indirect_edge_target (ie, known_vals, vNULL, vNULL);\n       if (target)\n \t{\n \t  ipa_make_edge_direct_to_target (ie, target);\n@@ -2731,10 +2729,10 @@ find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n static vec<ipa_agg_jf_item_t>\n copy_plats_to_inter (struct ipcp_param_lattices *plats, HOST_WIDE_INT offset)\n {\n-  vec<ipa_agg_jf_item_t> res = vec<ipa_agg_jf_item_t>();\n+  vec<ipa_agg_jf_item_t> res = vNULL;\n \n   if (!plats->aggs || plats->aggs_contain_variable || plats->aggs_bottom)\n-    return vec<ipa_agg_jf_item>();\n+    return vNULL;\n \n   for (struct ipcp_agg_lattice *aglat = plats->aggs; aglat; aglat = aglat->next)\n     if (ipa_lat_is_single_const (aglat))\n@@ -2796,7 +2794,7 @@ static vec<ipa_agg_jf_item_t>\n agg_replacements_to_vector (struct cgraph_node *node, HOST_WIDE_INT offset)\n {\n   struct ipa_agg_replacement_value *av;\n-  vec<ipa_agg_jf_item_t> res = vec<ipa_agg_jf_item_t>();\n+  vec<ipa_agg_jf_item_t> res = vNULL;\n \n   for (av = ipa_get_agg_replacements_for_node (node); av; av = av->next)\n     {\n@@ -2874,7 +2872,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n   for (i = 0; i < count ; i++)\n     {\n       struct cgraph_edge *cs;\n-      vec<ipa_agg_jf_item_t> inter = vec<ipa_agg_jf_item_t>();\n+      vec<ipa_agg_jf_item_t> inter = vNULL;\n       struct ipa_agg_jf_item *item;\n       int j;\n \n@@ -3283,7 +3281,7 @@ decide_whether_version_node (struct cgraph_node *node)\n   struct ipa_node_params *info = IPA_NODE_REF (node);\n   int i, count = ipa_get_param_count (info);\n   vec<tree> known_csts, known_binfos;\n-  vec<ipa_agg_jump_function_t> known_aggs = vec<ipa_agg_jump_function_t>();\n+  vec<ipa_agg_jump_function_t> known_aggs = vNULL;\n   bool ret = false;\n \n   if (count == 0)"}, {"sha": "8f5b1f2641c481690227d192ac1efe57608d4889", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -848,9 +848,8 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n {\n   struct cgraph_node *callee = cgraph_function_or_thunk_node (e->callee, NULL);\n   struct inline_summary *info = inline_summary (callee);\n-  vec<tree> known_vals = vec<tree>();\n-  vec<ipa_agg_jump_function_p> known_aggs\n-      = vec<ipa_agg_jump_function_p>();\n+  vec<tree> known_vals = vNULL;\n+  vec<ipa_agg_jump_function_p> known_aggs = vNULL;\n \n   if (clause_ptr)\n     *clause_ptr = inline_p ? 0 : 1 << predicate_not_inlined_condition;\n@@ -1086,7 +1085,7 @@ inline_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n       vec<size_time_entry, va_gc> *entry = info->entry;\n       /* Use SRC parm info since it may not be copied yet.  */\n       struct ipa_node_params *parms_info = IPA_NODE_REF (src);\n-      vec<tree> known_vals = vec<tree>();\n+      vec<tree> known_vals = vNULL;\n       int count = ipa_get_param_count (parms_info);\n       int i,j;\n       clause_t possible_truths;\n@@ -1115,8 +1114,7 @@ inline_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n \t    }\n \t}\n       possible_truths = evaluate_conditions_for_known_args (dst, false,\n-\t\t\t\t    known_vals,\n-\t\t\t\t    vec<ipa_agg_jump_function_p>());\n+\t\t\t\t    known_vals, vNULL);\n       known_vals.release ();\n \n       account_size_time (info, 0, 0, &true_pred);\n@@ -2290,7 +2288,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n   struct inline_summary *info = inline_summary (node);\n   struct predicate bb_predicate;\n   struct ipa_node_params *parms_info = NULL;\n-  vec<predicate_t> nonconstant_names = vec<predicate_t>();\n+  vec<predicate_t> nonconstant_names = vNULL;\n   int nblocks, n;\n   int *order;\n   predicate array_index = true_predicate ();\n@@ -2962,8 +2960,7 @@ estimate_ipcp_clone_size_and_time (struct cgraph_node *node,\n   clause = evaluate_conditions_for_known_args (node, false, known_vals,\n \t\t\t\t\t       known_aggs);\n   estimate_node_size_and_time (node, clause, known_vals, known_binfos,\n-\t\t\t       known_aggs, ret_size, ret_time, hints,\n-\t\t\t       vec<inline_param_summary_t>());\n+\t\t\t       known_aggs, ret_size, ret_time, hints, vNULL);\n }\n \n /* Translate all conditions from callee representation into caller\n@@ -3255,8 +3252,8 @@ inline_merge_summary (struct cgraph_edge *edge)\n   struct inline_summary *info = inline_summary (to);\n   clause_t clause = 0;\t\t/* not_inline is known to be false.  */\n   size_time_entry *e;\n-  vec<int> operand_map = vec<int>();\n-  vec<int> offset_map = vec<int>();\n+  vec<int> operand_map = vNULL;\n+  vec<int> offset_map = vNULL;\n   int i;\n   struct predicate toplev_predicate;\n   struct predicate true_p = true_predicate ();\n@@ -3378,9 +3375,7 @@ inline_update_overall_summary (struct cgraph_node *node)\n     }\n   estimate_calls_size_and_time (node, &info->size, &info->time, NULL,\n \t\t\t\t~(clause_t)(1 << predicate_false_condition),\n-\t\t\t\tvec<tree>(),\n-\t\t\t\tvec<tree>(),\n-\t\t\t\tvec<ipa_agg_jump_function_p>());\n+\t\t\t\tvNULL, vNULL, vNULL);\n   info->time = (info->time + INLINE_TIME_SCALE / 2) / INLINE_TIME_SCALE;\n   info->size = (info->size + INLINE_SIZE_SCALE / 2) / INLINE_SIZE_SCALE;\n }\n@@ -3485,8 +3480,7 @@ do_estimate_edge_size (struct cgraph_edge *edge)\n \t\t\t\t&clause, &known_vals, &known_binfos,\n \t\t\t\t&known_aggs);\n   estimate_node_size_and_time (callee, clause, known_vals, known_binfos,\n-\t\t\t       known_aggs, &size, NULL, NULL,\n-\t\t\t       vec<inline_param_summary_t>());\n+\t\t\t       known_aggs, &size, NULL, NULL, vNULL);\n   known_vals.release ();\n   known_binfos.release ();\n   known_aggs.release ();\n@@ -3525,8 +3519,7 @@ do_estimate_edge_hints (struct cgraph_edge *edge)\n \t\t\t\t&clause, &known_vals, &known_binfos,\n \t\t\t\t&known_aggs);\n   estimate_node_size_and_time (callee, clause, known_vals, known_binfos,\n-\t\t\t       known_aggs, NULL, NULL, &hints,\n-\t\t\t       vec<inline_param_summary_t>());\n+\t\t\t       known_aggs, NULL, NULL, &hints, vNULL);\n   known_vals.release ();\n   known_binfos.release ();\n   known_aggs.release ();\n@@ -3775,8 +3768,7 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,\n-\t\t\theader->string_size,\n-\t\t\tvec<ld_plugin_symbol_resolution_t>());\n+\t\t\theader->string_size, vNULL);\n   f_count = streamer_read_uhwi (&ib);\n   for (i = 0; i < f_count; i++)\n     {"}, {"sha": "84f4fcc2529c22565ff057ce84fa899e829fb9b2", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -171,8 +171,7 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n \t  struct cgraph_node *n;\n \t  n = cgraph_clone_node (e->callee, e->callee->symbol.decl,\n \t\t\t\t e->count, e->frequency,\n-\t\t\t\t update_original, vec<cgraph_edge_p>(),\n-\t\t\t\t true);\n+\t\t\t\t update_original, vNULL, true);\n \t  cgraph_redirect_edge_callee (e, n);\n \t}\n     }"}, {"sha": "501358828c56db876be9f35fc590a51e2163c4a9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1313,8 +1313,7 @@ recursive_inlining (struct cgraph_edge *edge,\n \t  /* We need original clone to copy around.  */\n \t  master_clone = cgraph_clone_node (node, node->symbol.decl,\n \t\t\t\t\t    node->count, CGRAPH_FREQ_BASE,\n-\t\t\t\t\t    false, vec<cgraph_edge_p>(),\n-\t\t\t\t\t    true);\n+\t\t\t\t\t    false, vNULL, true);\n \t  for (e = master_clone->callees; e; e = e->next_callee)\n \t    if (!e->inline_failed)\n \t      clone_inlined_nodes (e, true, false, NULL);\n@@ -1403,7 +1402,7 @@ inline_small_functions (void)\n   fibheap_t edge_heap = fibheap_new ();\n   bitmap updated_nodes = BITMAP_ALLOC (NULL);\n   int min_size, max_size;\n-  vec<cgraph_edge_p> new_indirect_edges = vec<cgraph_edge_p>();\n+  vec<cgraph_edge_p> new_indirect_edges = vNULL;\n   int initial_size = 0;\n   struct cgraph_node **order = XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n "}, {"sha": "b7da25440449eac4d0c66465a310f523144d3586", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3534,8 +3534,7 @@ ipa_prop_read_section (struct lto_file_decl_data *file_data, const char *data,\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,\n-\t\t\theader->string_size,\n-\t\t\tvec<ld_plugin_symbol_resolution_t>());\n+\t\t\theader->string_size, vNULL);\n   count = streamer_read_uhwi (&ib_main);\n \n   for (i = 0; i < count; i++)\n@@ -3708,8 +3707,7 @@ read_replacements_section (struct lto_file_decl_data *file_data,\n \t\t\theader->main_size);\n \n   data_in = lto_data_in_create (file_data, (const char *) data + string_offset,\n-\t\t\t\theader->string_size,\n-\t\t\t\tvec<ld_plugin_symbol_resolution>());\n+\t\t\t\theader->string_size, vNULL);\n   count = streamer_read_uhwi (&ib_main);\n \n   for (i = 0; i < count; i++)\n@@ -3790,7 +3788,7 @@ adjust_agg_replacement_values (struct cgraph_node *node,\n unsigned int\n ipcp_transform_function (struct cgraph_node *node)\n {\n-  vec<ipa_param_descriptor_t> descriptors = vec<ipa_param_descriptor_t>();\n+  vec<ipa_param_descriptor_t> descriptors = vNULL;\n   struct param_analysis_info *parms_ainfo;\n   struct ipa_agg_replacement_value *aggval;\n   gimple_stmt_iterator gsi;"}, {"sha": "f6b469a776deed2b2364d25ee156d0129bad06ff", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -190,7 +190,7 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \t\t     basic_block return_bb)\n {\n   bitmap seen = BITMAP_ALLOC (NULL);\n-  vec<basic_block> worklist = vec<basic_block>();\n+  vec<basic_block> worklist = vNULL;\n   edge e;\n   edge_iterator ei;\n   bool ok = true;\n@@ -889,7 +889,7 @@ static void\n find_split_points (int overall_time, int overall_size)\n {\n   stack_entry first;\n-  vec<stack_entry> stack = vec<stack_entry>();\n+  vec<stack_entry> stack = vNULL;\n   basic_block bb;\n   basic_block return_bb = find_return_bb ();\n   struct split_point current;\n@@ -1038,7 +1038,7 @@ find_split_points (int overall_time, int overall_size)\n static void\n split_function (struct split_point *split_point)\n {\n-  vec<tree> args_to_pass = vec<tree>();\n+  vec<tree> args_to_pass = vNULL;\n   bitmap args_to_skip;\n   tree parm;\n   int num = 0;\n@@ -1183,7 +1183,7 @@ split_function (struct split_point *split_point)\n \n   /* Now create the actual clone.  */\n   rebuild_cgraph_edges ();\n-  node = cgraph_function_versioning (cur_node, vec<cgraph_edge_p>(),\n+  node = cgraph_function_versioning (cur_node, vNULL,\n \t\t\t\t     NULL,\n \t\t\t\t     args_to_skip,\n \t\t\t\t     !split_part_return_p,"}, {"sha": "ba15e36b5e2f12f01643a0d853c5197627c8fddf", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -240,7 +240,7 @@ ipa_free_postorder_info (void)\n vec<cgraph_node_ptr> \n ipa_get_nodes_in_cycle (struct cgraph_node *node)\n {\n-  vec<cgraph_node_ptr> v = vec<cgraph_node_ptr>();\n+  vec<cgraph_node_ptr> v = vNULL;\n   struct ipa_dfs_info *node_dfs_info;\n   while (node)\n     {"}, {"sha": "9cd1016dddbee480fc720f9696b32666be7446e8", "filename": "gcc/ira-build.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1475,7 +1475,7 @@ static vec<ira_loop_tree_node_t>\n ira_loop_tree_body_rev_postorder (ira_loop_tree_node_t loop_node ATTRIBUTE_UNUSED,\n \t\t\t\t  vec<ira_loop_tree_node_t> loop_preorder)\n {\n-  vec<ira_loop_tree_node_t> topsort_nodes = vec<ira_loop_tree_node_t>();\n+  vec<ira_loop_tree_node_t> topsort_nodes = vNULL;\n   unsigned int n_loop_preorder;\n \n   n_loop_preorder = loop_preorder.length ();\n@@ -1580,7 +1580,7 @@ ira_traverse_loop_tree (bool bb_p, ira_loop_tree_node_t loop_node,\n   if (bb_p)\n     {\n       vec<ira_loop_tree_node_t>\n-\t  loop_preorder = vec<ira_loop_tree_node_t>();\n+\t  loop_preorder = vNULL;\n       unsigned int i;\n \n       /* Add all nodes to the set of nodes to visit.  The IRA loop tree"}, {"sha": "427362230df29559132f1a317480f2b8a0f38d01", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -913,7 +913,7 @@ input_node (struct lto_file_decl_data *file_data,\n     {\n       node = cgraph_clone_node (cgraph (nodes[clone_ref]), fn_decl,\n \t\t\t\t0, CGRAPH_FREQ_BASE, false,\n-\t\t\t\tvec<cgraph_edge_p>(), false);\n+\t\t\t\tvNULL, false);\n     }\n   else\n     node = cgraph_get_create_node (fn_decl);\n@@ -926,7 +926,7 @@ input_node (struct lto_file_decl_data *file_data,\n   node->count_materialization_scale = streamer_read_hwi (ib);\n \n   count = streamer_read_hwi (ib);\n-  node->ipa_transforms_to_apply = vec<ipa_opt_pass>();\n+  node->ipa_transforms_to_apply = vNULL;\n   for (i = 0; i < count; i++)\n     {\n       struct opt_pass *pass;\n@@ -1126,7 +1126,7 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n \t\tstruct lto_input_block *ib)\n {\n   enum LTO_symtab_tags tag;\n-  vec<symtab_node> nodes = vec<symtab_node>();\n+  vec<symtab_node> nodes = vNULL;\n   symtab_node node;\n   unsigned i;\n \n@@ -1573,8 +1573,7 @@ input_cgraph_opt_section (struct lto_file_decl_data *file_data,\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,\n-\t\t\theader->string_size,\n-\t\t\tvec<ld_plugin_symbol_resolution_t>());\n+\t\t\theader->string_size, vNULL);\n   count = streamer_read_uhwi (&ib_main);\n \n   for (i = 0; i < count; i++)"}, {"sha": "e2629254782e3ab5edb06736292e2b175ff9ac89", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -925,8 +925,7 @@ lto_read_body (struct lto_file_decl_data *file_data, tree fn_decl,\n \t\t\theader->main_size);\n \n   data_in = lto_data_in_create (file_data, data + string_offset,\n-\t\t\t      header->string_size,\n-\t\t\t      vec<ld_plugin_symbol_resolution_t>());\n+\t\t\t      header->string_size, vNULL);\n \n   /* Make sure the file was generated by the exact same compiler.  */\n   lto_check_version (header->lto_header.major_version,\n@@ -1124,8 +1123,7 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n \t\t\theader->main_size);\n \n   data_in = lto_data_in_create (file_data, data + string_offset,\n-\t\t\t      header->string_size,\n-\t\t\t      vec<ld_plugin_symbol_resolution_t>());\n+\t\t\t      header->string_size, vNULL);\n \n   /* Make sure the file was generated by the exact same compiler.  */\n   lto_check_version (header->lto_header.major_version,"}, {"sha": "0b0cdacb1441691c0eee7da3715623ccbf84ace6", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -353,7 +353,7 @@ static void\n lto_symtab_merge_decls_2 (symtab_node first, bool diagnosed_p)\n {\n   symtab_node prevailing, e;\n-  vec<tree> mismatches = vec<tree>();\n+  vec<tree> mismatches = vNULL;\n   unsigned i;\n   tree decl;\n "}, {"sha": "9e0de2a0691da1848a50413c7e9da9251e55df0a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1,3 +1,8 @@\n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lto.c: Replace all vec<T, A>() initializers with vNULL.\n+\n 2012-11-16  Diego Novillo  <dnovillo@google.com>\n \n \tAdjust for new vec API (http://gcc.gnu.org/wiki/cxx-conversion/cxx-vec)"}, {"sha": "376af85a704fc41fd760a37928f821bcd7f22af6", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -873,7 +873,7 @@ gimple_types_compatible_p_1 (tree t1, tree t2, type_pair_t p,\n static bool\n gimple_types_compatible_p (tree t1, tree t2)\n {\n-  vec<type_pair_t> sccstack = vec<type_pair_t>();\n+  vec<type_pair_t> sccstack = vNULL;\n   struct pointer_map_t *sccstate;\n   struct obstack sccstate_obstack;\n   type_pair_t p = NULL;\n@@ -1298,7 +1298,7 @@ static hashval_t\n gimple_type_hash (const void *p)\n {\n   const_tree t = (const_tree) p;\n-  vec<tree> sccstack = vec<tree>();\n+  vec<tree> sccstack = vNULL;\n   struct pointer_map_t *sccstate;\n   struct obstack sccstate_obstack;\n   hashval_t val;\n@@ -2318,7 +2318,7 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file)\n   const char *data;\n   size_t len;\n   vec<ld_plugin_symbol_resolution_t>\n-\tresolutions = vec<ld_plugin_symbol_resolution_t>();\n+\tresolutions = vNULL;\n   int i;\n   res_pair *rp;\n "}, {"sha": "8681d0b9849fbfb7930556c0f859d4b0cb9e8eae", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1,3 +1,7 @@\n+2012-11-20  Diego Novillo  <dnovillo@google.com>\n+\n+\t* objc-act.c: Replace all vec<T, A>() initializers with vNULL.\n+\n 2012-11-16  Diego Novillo  <dnovillo@google.com>\n \n \tAdjust for new vec API (http://gcc.gnu.org/wiki/cxx-conversion/cxx-vec)"}, {"sha": "816e3393718447544f641a95d81ffcdef2068f18", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2067,7 +2067,7 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n   tree s = objc_start_struct (name);\n   tree super = (super_name ? xref_tag (RECORD_TYPE, super_name) : NULL_TREE);\n   tree t;\n-  vec<tree> objc_info = vec<tree>();\n+  vec<tree> objc_info = vNULL;\n   int i;\n \n   if (super)"}, {"sha": "6409ea7b8bcba8bb616da4616549d9c1a200f0a3", "filename": "gcc/opts-global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -353,7 +353,7 @@ handle_common_deferred_options (void)\n   if (common_deferred_options)\n     v = *((vec<cl_deferred_option> *) common_deferred_options);\n   else\n-    v = vec<cl_deferred_option>();\n+    v = vNULL;\n \n   if (flag_dump_all_passed)\n     enable_rtl_dump_file ();"}, {"sha": "909f49eec9cd5a2c63244ae90dec7b8134a97eec", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -633,7 +633,7 @@ register_pass_name (struct opt_pass *pass, const char *name)\n /* Map from pass id to canonicalized pass name.  */\n \n typedef const char *char_ptr;\n-static vec<char_ptr> pass_tab = vec<char_ptr>();\n+static vec<char_ptr> pass_tab = vNULL;\n \n /* Callback function for traversing NAME_TO_PASS_MAP.  */\n \n@@ -770,9 +770,9 @@ typedef struct uid_range *uid_range_p;\n \n \n static vec<uid_range_p>\n-      enabled_pass_uid_range_tab = vec<uid_range_p>();\n+      enabled_pass_uid_range_tab = vNULL;\n static vec<uid_range_p>\n-      disabled_pass_uid_range_tab = vec<uid_range_p>();\n+      disabled_pass_uid_range_tab = vNULL;\n \n \n /* Parse option string for -fdisable- and -fenable-"}, {"sha": "63f84cb62d770f4169a0ecfa5612b92ba235013e", "filename": "gcc/ree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -829,7 +829,7 @@ add_removable_extension (const_rtx expr, rtx insn,\n static vec<ext_cand>\n find_removable_extensions (void)\n {\n-  vec<ext_cand> insn_list = vec<ext_cand>();\n+  vec<ext_cand> insn_list = vNULL;\n   basic_block bb;\n   rtx insn, set;\n   unsigned *def_map = XCNEWVEC (unsigned, max_insn_uid);"}, {"sha": "f8b124d46f146980a8b727b09b7e5bff0b2b2458", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -59,7 +59,7 @@ struct sched_deps_info_def *sched_deps_info;\n \n /* The data is specific to the Haifa scheduler.  */\n vec<haifa_deps_insn_data_def>\n-    h_d_i_d = vec<haifa_deps_insn_data_def>();\n+    h_d_i_d = vNULL;\n \n /* Return the major type present in the DS.  */\n enum reg_note"}, {"sha": "2c0403cae475c2b41ca7c6d263b0b9487ca89d44", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -50,11 +50,11 @@ along with GCC; see the file COPYING3.  If not see\n \n /* A vector holding bb info for whole scheduling pass.  */\n vec<sel_global_bb_info_def>\n-    sel_global_bb_info = vec<sel_global_bb_info_def>();\n+    sel_global_bb_info = vNULL;\n \n /* A vector holding bb info.  */\n vec<sel_region_bb_info_def>\n-    sel_region_bb_info = vec<sel_region_bb_info_def>();\n+    sel_region_bb_info = vNULL;\n \n /* A pool for allocating all lists.  */\n alloc_pool sched_lists_pool;\n@@ -70,7 +70,7 @@ struct loop *current_loop_nest;\n \n /* LOOP_NESTS is a vector containing the corresponding loop nest for\n    each region.  */\n-static vec<loop_p> loop_nests = vec<loop_p>();\n+static vec<loop_p> loop_nests = vNULL;\n \n /* Saves blocks already in loop regions, indexed by bb->index.  */\n static sbitmap bbs_in_loop_rgns = NULL;\n@@ -1652,7 +1652,7 @@ init_expr (expr_t expr, vinsn_t vi, int spec, int use, int priority,\n void\n copy_expr (expr_t to, expr_t from)\n {\n-  vec<expr_history_def> temp = vec<expr_history_def>();\n+  vec<expr_history_def> temp = vNULL;\n \n   if (EXPR_HISTORY_OF_CHANGES (from).exists ())\n     {\n@@ -1687,7 +1687,7 @@ copy_expr_onside (expr_t to, expr_t from)\n   init_expr (to, EXPR_VINSN (from), EXPR_SPEC (from), EXPR_USEFULNESS (from),\n \t     EXPR_PRIORITY (from), EXPR_SCHED_TIMES (from), 0,\n \t     EXPR_SPEC_DONE_DS (from), EXPR_SPEC_TO_CHECK_DS (from), 0,\n-\t     vec<expr_history_def>(),\n+\t     vNULL,\n \t     EXPR_TARGET_AVAILABLE (from), EXPR_WAS_SUBSTITUTED (from),\n \t     EXPR_WAS_RENAMED (from), EXPR_NEEDS_SPEC_CHECK_P (from),\n              EXPR_CANT_MOVE (from));\n@@ -3004,7 +3004,7 @@ init_global_and_expr_for_insn (insn_t insn)\n     /* Initialize INSN's expr.  */\n     init_expr (INSN_EXPR (insn), vinsn_create (insn, force_unique_p), 0,\n \t       REG_BR_PROB_BASE, INSN_PRIORITY (insn), 0, BLOCK_NUM (insn),\n-\t       spec_done_ds, 0, 0, vec<expr_history_def>(), true,\n+\t       spec_done_ds, 0, 0, vNULL, true,\n \t       false, false, false, CANT_MOVE (insn));\n   }\n \n@@ -4135,7 +4135,7 @@ finish_region_bb_info (void)\n \f\n \n /* Data for each insn in current region.  */\n-vec<sel_insn_data_def> s_i_d = vec<sel_insn_data_def>();\n+vec<sel_insn_data_def> s_i_d = vNULL;\n \n /* Extend data structures for insns from current region.  */\n static void\n@@ -4253,7 +4253,7 @@ init_simplejump_data (insn_t insn)\n {\n   init_expr (INSN_EXPR (insn), vinsn_create (insn, false), 0,\n \t     REG_BR_PROB_BASE, 0, 0, 0, 0, 0, 0,\n-\t     vec<expr_history_def>(), true, false, false,\n+\t     vNULL, true, false, false,\n \t     false, true);\n   INSN_SEQNO (insn) = get_seqno_for_a_jump (insn);\n   init_first_time_insn_data (insn);\n@@ -4504,7 +4504,7 @@ get_av_level (insn_t insn)\n /* The basic block that already has been processed by the sched_data_update (),\n    but hasn't been in sel_add_bb () yet.  */\n static vec<basic_block>\n-    last_added_blocks = vec<basic_block>();\n+    last_added_blocks = vNULL;\n \n /* A pool for allocating successor infos.  */\n static struct"}, {"sha": "ddcfeef2b13256580dcac8a31687e80fd059c4ab", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1050,7 +1050,7 @@ inner_loop_header_p (basic_block bb)\n static inline vec<edge> \n get_loop_exit_edges_unique_dests (const struct loop *loop)\n {\n-  vec<edge> edges = vec<edge>();\n+  vec<edge> edges = vNULL;\n   struct loop_exit *exit;\n \n   gcc_assert (loop->latch != EXIT_BLOCK_PTR\n@@ -1104,7 +1104,7 @@ sel_bb_empty_or_nop_p (basic_block bb)\n static inline vec<edge> \n get_all_loop_exits (basic_block bb)\n {\n-  vec<edge> exits = vec<edge>();\n+  vec<edge> exits = vNULL;\n \n   /* If bb is empty, and we're skipping to loop exits, then\n      consider bb as a possible gate to the inner loop now.  */"}, {"sha": "6fe11b26fa3826c687f013d69542e27cb3a13d91", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -500,7 +500,7 @@ static int max_ws;\n static int num_insns_scheduled;\n \n /* A vector of expressions is used to be able to sort them.  */\n-static vec<expr_t> vec_av_set = vec<expr_t>();\n+static vec<expr_t> vec_av_set = vNULL;\n \n /* A vector of vinsns is used to hold temporary lists of vinsns.  */\n typedef vec<vinsn_t> vinsn_vec_t;\n@@ -518,7 +518,7 @@ static vinsn_vec_t vec_target_unavailable_vinsns = vinsn_vec_t();\n \n /* Vector to store temporary nops inserted in move_op to prevent removal\n    of empty bbs.  */\n-static vec<insn_t> vec_temp_moveop_nops = vec<insn_t>();\n+static vec<insn_t> vec_temp_moveop_nops = vNULL;\n \n /* These bitmaps record original instructions scheduled on the current\n    iteration and bookkeeping copies created by them.  */"}, {"sha": "03da59e0f1f62e7df4a4d9c309156f60ecc02160", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -189,7 +189,7 @@ static tree\n self_referential_size (tree size)\n {\n   static unsigned HOST_WIDE_INT fnno = 0;\n-  vec<tree> self_refs = vec<tree>();\n+  vec<tree> self_refs = vNULL;\n   tree param_type_list = NULL, param_decl_list = NULL;\n   tree t, ref, return_type, fntype, fnname, fndecl;\n   unsigned int i;"}, {"sha": "0a428fea80064fc9000b878ddf1a101ab9cd3681", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1841,10 +1841,10 @@ tm_region_init (struct tm_region *region)\n   edge_iterator ei;\n   edge e;\n   basic_block bb;\n-  vec<basic_block> queue = vec<basic_block>();\n+  vec<basic_block> queue = vNULL;\n   bitmap visited_blocks = BITMAP_ALLOC (NULL);\n   struct tm_region *old_region;\n-  vec<tm_region_p> bb_regions = vec<tm_region_p>();\n+  vec<tm_region_p> bb_regions = vNULL;\n \n   all_tm_regions = region;\n   bb = single_succ (ENTRY_BLOCK_PTR);\n@@ -2403,7 +2403,7 @@ get_tm_region_blocks (basic_block entry_block,\n \t\t      bitmap all_region_blocks,\n \t\t      bool stop_at_irrevocable_p)\n {\n-  vec<basic_block> bbs = vec<basic_block>();\n+  vec<basic_block> bbs = vNULL;\n   unsigned i;\n   edge e;\n   edge_iterator ei;\n@@ -4689,9 +4689,7 @@ ipa_tm_create_version (struct cgraph_node *old_node)\n   if (DECL_ONE_ONLY (new_decl))\n     DECL_COMDAT_GROUP (new_decl) = tm_mangle (DECL_COMDAT_GROUP (old_decl));\n \n-  new_node = cgraph_copy_node_for_versioning (old_node, new_decl,\n-\t\t\t\t\t      vec<cgraph_edge_p>(),\n-\t\t\t\t\t      NULL);\n+  new_node = cgraph_copy_node_for_versioning (old_node, new_decl, vNULL, NULL);\n   new_node->symbol.externally_visible = old_node->symbol.externally_visible;\n   new_node->lowered = true;\n   new_node->tm_clone = 1;\n@@ -4980,7 +4978,7 @@ ipa_tm_transform_calls (struct cgraph_node *node, struct tm_region *region,\n   bool need_ssa_rename = false;\n   edge e;\n   edge_iterator ei;\n-  vec<basic_block> queue = vec<basic_block>();\n+  vec<basic_block> queue = vNULL;\n   bitmap visited_blocks = BITMAP_ALLOC (NULL);\n \n   queue.safe_push (bb);"}, {"sha": "273aed20a93e2d1a6f12f907909e8fd5f58a67b4", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -861,7 +861,7 @@ tree_call_cdce (void)\n   basic_block bb;\n   gimple_stmt_iterator i;\n   bool something_changed = false;\n-  vec<gimple> cond_dead_built_in_calls = vec<gimple>();\n+  vec<gimple> cond_dead_built_in_calls = vNULL;\n   FOR_EACH_BB (bb)\n     {\n       /* Collect dead call candidates.  */"}, {"sha": "169a205d39ab3be5e64e43ead8fe36762f3f0329", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -7269,8 +7269,8 @@ gimple_flow_call_edges_add (sbitmap blocks)\n void\n remove_edge_and_dominated_blocks (edge e)\n {\n-  vec<basic_block> bbs_to_remove = vec<basic_block>();\n-  vec<basic_block> bbs_to_fix_dom = vec<basic_block>();\n+  vec<basic_block> bbs_to_remove = vNULL;\n+  vec<basic_block> bbs_to_fix_dom = vNULL;\n   bitmap df, df_idom;\n   edge f;\n   edge_iterator ei;"}, {"sha": "7e95ad710b5535c9b12145888b7f08eed4327711", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -820,7 +820,7 @@ dr_analyze_innermost (struct data_reference *dr, struct loop *nest)\n static void\n dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n {\n-  vec<tree> access_fns = vec<tree>();\n+  vec<tree> access_fns = vNULL;\n   tree ref, op;\n   tree base, off, access_fn;\n   basic_block before_loop;\n@@ -4615,8 +4615,7 @@ compute_data_dependences_for_bb (basic_block bb,\n   if (find_data_references_in_bb (NULL, bb, datarefs) == chrec_dont_know)\n     return false;\n \n-  return compute_all_dependences (*datarefs, dependence_relations,\n-\t\t\t\t  vec<loop_p>(),\n+  return compute_all_dependences (*datarefs, dependence_relations, vNULL,\n \t\t\t\t  compute_self_and_read_read_dependences);\n }\n "}, {"sha": "7c63069efc10cc7b094c69c81df289e7550cff2c", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -104,7 +104,7 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n                                  source_location where)\n {\n   const struct line_map *map;\n-  vec<loc_map_pair> loc_vec = vec<loc_map_pair>();\n+  vec<loc_map_pair> loc_vec = vNULL;\n   unsigned ix;\n   loc_map_pair loc, *iter;\n "}, {"sha": "8cc624b764cad8dc39ef56ab946995e1a433414e", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3332,7 +3332,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n     {\n     case ERT_TRY:\n       {\n-\tvec<tree> labels = vec<tree>();\n+\tvec<tree> labels = vNULL;\n \ttree default_label = NULL;\n \teh_catch c;\n \tedge_iterator ei;"}, {"sha": "33d4c45648c93bfefea203c3afe88c41a9b1f17b", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1020,7 +1020,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \treturn;\n       /* Now check that if there is a dependence this dependence is\n          of a suitable form for memmove.  */\n-      vec<loop_p> loops = vec<loop_p>();\n+      vec<loop_p> loops = vNULL;\n       ddr_p ddr;\n       loops.safe_push (loop);\n       ddr = initialize_data_dependence_relation (single_load, single_store,\n@@ -1506,7 +1506,7 @@ tree_loop_distribution (void)\n      walking to innermost loops.  */\n   FOR_EACH_LOOP (li, loop, LI_ONLY_INNERMOST)\n     {\n-      vec<gimple> work_list = vec<gimple>();\n+      vec<gimple> work_list = vNULL;\n       basic_block *bbs;\n       int num = loop->num;\n       int nb_generated_loops = 0;"}, {"sha": "1338a0480a7c90ade6e2a6d22335c4955a8931df", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2300,7 +2300,7 @@ try_combine_chains (vec<chain_p> *chains)\n {\n   unsigned i, j;\n   chain_p ch1, ch2, cch;\n-  vec<chain_p> worklist = vec<chain_p>();\n+  vec<chain_p> worklist = vNULL;\n \n   FOR_EACH_VEC_ELT (*chains, i, ch1)\n     if (chain_can_be_combined_p (ch1))\n@@ -2415,7 +2415,7 @@ tree_predictive_commoning_loop (struct loop *loop)\n   vec<data_reference_p> datarefs;\n   vec<ddr_p> dependences;\n   struct component *components;\n-  vec<chain_p> chains = vec<chain_p>();\n+  vec<chain_p> chains = vNULL;\n   unsigned unroll_factor;\n   struct tree_niter_desc desc;\n   bool unroll = false;"}, {"sha": "d9265db44e58dfdb4dd8605af7a4faaef607cb3a", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1806,7 +1806,7 @@ rewrite_mem_refs (struct loop *loop, mem_ref_p ref, tree tmp_var)\n {\n   unsigned i;\n   mem_ref_loc_p loc;\n-  vec<mem_ref_loc_p> locs = vec<mem_ref_loc_p>();\n+  vec<mem_ref_loc_p> locs = vNULL;\n \n   get_all_locs_in_loop (loop, ref, &locs);\n   FOR_EACH_VEC_ELT (locs, i, loc)\n@@ -2078,7 +2078,7 @@ execute_sm_if_changed_flag_set (struct loop *loop, mem_ref_p ref)\n   unsigned i;\n   mem_ref_loc_p loc;\n   tree flag;\n-  vec<mem_ref_loc_p> locs = vec<mem_ref_loc_p>();\n+  vec<mem_ref_loc_p> locs = vNULL;\n   char *str = get_lsm_tmp_name (ref->mem, ~0);\n \n   lsm_tmp_name_add (\"_flag\");\n@@ -2199,7 +2199,7 @@ hoist_memory_references (struct loop *loop, bitmap mem_refs,\n static bool\n ref_always_accessed_p (struct loop *loop, mem_ref_p ref, bool stored_p)\n {\n-  vec<mem_ref_loc_p> locs = vec<mem_ref_loc_p>();\n+  vec<mem_ref_loc_p> locs = vNULL;\n   unsigned i;\n   mem_ref_loc_p loc;\n   bool ret = false;"}, {"sha": "dbf643b65a8f059c673950a432b5f3eb25ed1120", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -699,7 +699,7 @@ try_unroll_loop_completely (struct loop *loop,\n       sbitmap wont_exit;\n       edge e;\n       unsigned i;\n-      vec<edge> to_remove = vec<edge>();\n+      vec<edge> to_remove = vNULL;\n       if (ul == UL_SINGLE_ITER)\n \treturn false;\n "}, {"sha": "845c40e712a79ec0953896b5bedce5eadb83abb9", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1038,7 +1038,7 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n   unsigned new_est_niter, i, prob;\n   unsigned irr = loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP;\n   sbitmap wont_exit;\n-  vec<edge> to_remove = vec<edge>();\n+  vec<edge> to_remove = vNULL;\n \n   est_niter = expected_loop_iterations (loop);\n   determine_exit_conditions (loop, desc, factor,"}, {"sha": "d3007d78aec8e2b1d0b2a1f4ef787a3e15a14d6e", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2996,8 +2996,8 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n {\n   pointer_map_t *bb_bounds;\n   struct nb_iter_bound *elt;\n-  vec<double_int> bounds = vec<double_int>();\n-  vec<bb_queue> queues = vec<bb_queue>();\n+  vec<double_int> bounds = vNULL;\n+  vec<bb_queue> queues = vNULL;\n   bb_queue queue = bb_queue();\n   ptrdiff_t queue_index;\n   ptrdiff_t latch_index = 0;\n@@ -3166,7 +3166,7 @@ maybe_lower_iteration_bound (struct loop *loop)\n   pointer_set_t *not_executed_last_iteration = NULL;\n   struct nb_iter_bound *elt;\n   bool found_exit = false;\n-  vec<basic_block> queue = vec<basic_block>();\n+  vec<basic_block> queue = vNULL;\n   bitmap visited;\n \n   /* Collect all statements with interesting (i.e. lower than"}, {"sha": "33cf6ec82c623863312078a332f1a198723aefe4", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1541,11 +1541,11 @@ determine_loop_nest_reuse (struct loop *loop, struct mem_ref_group *refs,\n \t\t\t   bool no_other_refs)\n {\n   struct loop *nest, *aloop;\n-  vec<data_reference_p> datarefs = vec<data_reference_p>();\n-  vec<ddr_p> dependences = vec<ddr_p>();\n+  vec<data_reference_p> datarefs = vNULL;\n+  vec<ddr_p> dependences = vNULL;\n   struct mem_ref_group *gr;\n   struct mem_ref *ref, *refb;\n-  vec<loop_p> vloops = vec<loop_p>();\n+  vec<loop_p> vloops = vNULL;\n   unsigned *loop_data_size;\n   unsigned i, j, n;\n   unsigned volume, dist, adist;"}, {"sha": "7a41cfe58831a686dfc84a1c19f556ec56c46695", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -701,7 +701,7 @@ execute_cse_sincos_1 (tree name)\n   tree fndecl, res, type;\n   gimple def_stmt, use_stmt, stmt;\n   int seen_cos = 0, seen_sin = 0, seen_cexpi = 0;\n-  vec<gimple> stmts = vec<gimple>();\n+  vec<gimple> stmts = vNULL;\n   basic_block top_bb = NULL;\n   int i;\n   bool cfg_changed = false;"}, {"sha": "8a3789d94d2bbb4af62dbb41471bba462dca9378", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1657,9 +1657,9 @@ cond_if_else_store_replacement (basic_block then_bb, basic_block else_bb,\n   then_ddrs.create (1);\n   else_ddrs.create (1);\n   if (!compute_all_dependences (then_datarefs, &then_ddrs,\n-\t\t\t\tvec<loop_p>(), false)\n+\t\t\t\tvNULL, false)\n       || !compute_all_dependences (else_datarefs, &else_ddrs,\n-\t\t\t\t   vec<loop_p>(), false))\n+\t\t\t\t   vNULL, false))\n     {\n       free_dependence_relations (then_ddrs);\n       free_dependence_relations (else_ddrs);"}, {"sha": "1b20a13e26888b7b66fd624d5cfb00162c778d81", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1534,8 +1534,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \tvec<vn_reference_op_s> operands = ref->operands;\n \ttree vuse = ref->vuse;\n \ttree newvuse = vuse;\n-\tvec<vn_reference_op_s> newoperands\n-\t    = vec<vn_reference_op_s>();\n+\tvec<vn_reference_op_s> newoperands = vNULL;\n \tbool changed = false, same_valid = true;\n \tunsigned int i, j, n;\n \tvn_reference_op_t operand;\n@@ -3262,7 +3261,7 @@ do_regular_insertion (basic_block block, basic_block dom)\n   bool new_stuff = false;\n   vec<pre_expr> exprs;\n   pre_expr expr;\n-  vec<pre_expr> avail = vec<pre_expr>();\n+  vec<pre_expr> avail = vNULL;\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (ANTIC_IN (block));\n@@ -3432,7 +3431,7 @@ do_partial_partial_insertion (basic_block block, basic_block dom)\n   bool new_stuff = false;\n   vec<pre_expr> exprs;\n   pre_expr expr;\n-  vec<pre_expr> avail = vec<pre_expr>();\n+  vec<pre_expr> avail = vNULL;\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (PA_IN (block));\n@@ -3787,8 +3786,7 @@ compute_avail (void)\n \t      {\n \t\tvn_reference_t ref;\n \t\tpre_expr result = NULL;\n-\t\tvec<vn_reference_op_s> ops\n-\t\t    = vec<vn_reference_op_s>();\n+\t\tvec<vn_reference_op_s> ops = vNULL;\n \n \t\t/* We can value number only calls to real functions.  */\n \t\tif (gimple_call_internal_p (stmt))"}, {"sha": "2203b66ec0a696c0f059a68ff8284a499e7b25cf", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -732,7 +732,7 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n       tree fn = CALL_EXPR_FN (expr);\n       unsigned i;\n       unsigned nargs = call_expr_nargs (expr);\n-      vec<tree> args = vec<tree>();\n+      vec<tree> args = vNULL;\n       gimple new_stmt;\n \n       if (nargs > 0)"}, {"sha": "7318ecff187fc3b44298432adcb25c2c05f66481", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2519,7 +2519,7 @@ maybe_optimize_range_tests (gimple stmt)\n   basic_block bb;\n   edge_iterator ei;\n   edge e;\n-  vec<operand_entry_t> ops = vec<operand_entry_t>();\n+  vec<operand_entry_t> ops = vNULL;\n \n   /* Consider only basic blocks that end with GIMPLE_COND or\n      a cast statement satisfying final_range_test_p.  All\n@@ -4067,7 +4067,7 @@ reassociate_bb (basic_block bb)\n \n \t  if (associative_tree_code (rhs_code))\n \t    {\n-\t      vec<operand_entry_t> ops = vec<operand_entry_t>();\n+\t      vec<operand_entry_t> ops = vNULL;\n \t      tree powi_result = NULL_TREE;\n \n \t      /* There may be no immediate uses left by the time we\n@@ -4228,7 +4228,7 @@ init_reassoc (void)\n \n   free (bbs);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n-  plus_negates = vec<tree>();\n+  plus_negates = vNULL;\n }\n \n /* Cleanup after the reassociation pass, and print stats if"}, {"sha": "a7f0f9aada1ec01c098a8342bc58072ef687ab67", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1027,7 +1027,7 @@ copy_reference_ops_from_call (gimple call,\n static vec<vn_reference_op_s> \n create_reference_ops_from_ref (tree ref)\n {\n-  vec<vn_reference_op_s> result = vec<vn_reference_op_s>();\n+  vec<vn_reference_op_s> result = vNULL;\n \n   copy_reference_ops_from_ref (ref, &result);\n   return result;\n@@ -1039,7 +1039,7 @@ create_reference_ops_from_ref (tree ref)\n static vec<vn_reference_op_s> \n create_reference_ops_from_call (gimple call)\n {\n-  vec<vn_reference_op_s> result = vec<vn_reference_op_s>();\n+  vec<vn_reference_op_s> result = vNULL;\n \n   copy_reference_ops_from_call (call, &result);\n   return result;\n@@ -1316,7 +1316,7 @@ static vec<vn_reference_op_s>\n valueize_shared_reference_ops_from_ref (tree ref, bool *valueized_anything)\n {\n   if (!ref)\n-    return vec<vn_reference_op_s>();\n+    return vNULL;\n   shared_lookup_references.truncate (0);\n   copy_reference_ops_from_ref (ref, &shared_lookup_references);\n   shared_lookup_references = valueize_refs_1 (shared_lookup_references,\n@@ -1332,7 +1332,7 @@ static vec<vn_reference_op_s>\n valueize_shared_reference_ops_from_call (gimple call)\n {\n   if (!call)\n-    return vec<vn_reference_op_s>();\n+    return vNULL;\n   shared_lookup_references.truncate (0);\n   copy_reference_ops_from_call (call, &shared_lookup_references);\n   shared_lookup_references = valueize_refs (shared_lookup_references);\n@@ -1452,7 +1452,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n   tree base;\n   HOST_WIDE_INT offset, maxsize;\n   static vec<vn_reference_op_s>\n-    lhs_ops = vec<vn_reference_op_s>();\n+    lhs_ops = vNULL;\n   ao_ref lhs_ref;\n   bool lhs_ref_ok = false;\n \n@@ -1658,7 +1658,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       HOST_WIDE_INT offset2, size2, maxsize2;\n       int i, j;\n       vec<vn_reference_op_s>\n-\t  rhs = vec<vn_reference_op_s>();\n+\t  rhs = vNULL;\n       vn_reference_op_t vro;\n       ao_ref r;\n \n@@ -1715,7 +1715,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  vr->operands.safe_grow (i + 1 + rhs.length ());\n \t  if (old == shared_lookup_references\n \t      && vr->operands != old)\n-\t    shared_lookup_references = vec<vn_reference_op_s>();\n+\t    shared_lookup_references = vNULL;\n \t}\n       else\n \tvr->operands.truncate (i + 1 + rhs.length ());\n@@ -2507,7 +2507,7 @@ vn_phi_insert (gimple phi, tree result)\n   void **slot;\n   vn_phi_t vp1 = (vn_phi_t) pool_alloc (current_info->phis_pool);\n   unsigned i;\n-  vec<tree> args = vec<tree>();\n+  vec<tree> args = vNULL;\n \n   /* Canonicalize the SSA_NAME's to their value number.  */\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n@@ -3672,7 +3672,7 @@ process_scc (vec<tree> scc)\n static bool\n extract_and_process_scc_for_name (tree name)\n {\n-  vec<tree> scc = vec<tree>();\n+  vec<tree> scc = vNULL;\n   tree x;\n \n   /* Found an SCC, pop the components off the SCC stack and\n@@ -3721,8 +3721,8 @@ extract_and_process_scc_for_name (tree name)\n static bool\n DFS (tree name)\n {\n-  vec<ssa_op_iter> itervec = vec<ssa_op_iter>();\n-  vec<tree> namevec = vec<tree>();\n+  vec<ssa_op_iter> itervec = vNULL;\n+  vec<tree> namevec = vNULL;\n   use_operand_p usep = NULL;\n   gimple defstmt;\n   tree use;"}, {"sha": "5ff4ce1a7a4208fa91554d0af673fa4dd4315803", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -2441,7 +2441,7 @@ eliminate_indirect_cycles (unsigned int node)\n       && !bitmap_empty_p (get_varinfo (node)->solution))\n     {\n       unsigned int i;\n-      vec<unsigned> queue = vec<unsigned>();\n+      vec<unsigned> queue = vNULL;\n       int queuepos;\n       unsigned int to = find (graph->indirect_cycles[node]);\n       bitmap_iterator bi;\n@@ -3337,7 +3337,7 @@ get_constraint_for_1 (tree t, vec<ce_s> *results, bool address_p,\n \t    {\n \t      unsigned int i;\n \t      tree val;\n-\t      vec<ce_s> tmp = vec<ce_s>();\n+\t      vec<ce_s> tmp = vNULL;\n \t      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), i, val)\n \t\t{\n \t\t  struct constraint_expr *rhsp;\n@@ -3437,8 +3437,8 @@ static void\n do_structure_copy (tree lhsop, tree rhsop)\n {\n   struct constraint_expr *lhsp, *rhsp;\n-  vec<ce_s> lhsc = vec<ce_s>();\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n+  vec<ce_s> rhsc = vNULL;\n   unsigned j;\n \n   get_constraint_for (lhsop, &lhsc);\n@@ -3524,7 +3524,7 @@ make_constraints_to (unsigned id, vec<ce_s> rhsc)\n static void\n make_constraint_to (unsigned id, tree op)\n {\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> rhsc = vNULL;\n   get_constraint_for_rhs (op, &rhsc);\n   make_constraints_to (id, rhsc);\n   rhsc.release ();\n@@ -3798,7 +3798,7 @@ handle_rhs_call (gimple stmt, vec<ce_s> *results)\n       && gimple_call_lhs (stmt) != NULL_TREE\n       && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (stmt))))\n     {\n-      vec<ce_s> tmpc = vec<ce_s>();\n+      vec<ce_s> tmpc = vNULL;\n       struct constraint_expr lhsc, *c;\n       get_constraint_for_address_of (gimple_call_lhs (stmt), &tmpc);\n       lhsc.var = escaped_id;\n@@ -3824,7 +3824,7 @@ static void\n handle_lhs_call (gimple stmt, tree lhs, int flags, vec<ce_s> rhsc,\n \t\t tree fndecl)\n {\n-  vec<ce_s> lhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n \n   get_constraint_for (lhs, &lhsc);\n   /* If the store is to a global decl make sure to\n@@ -3909,7 +3909,7 @@ handle_const_call (gimple stmt, vec<ce_s> *results)\n   for (k = 0; k < gimple_call_num_args (stmt); ++k)\n     {\n       tree arg = gimple_call_arg (stmt, k);\n-      vec<ce_s> argc = vec<ce_s>();\n+      vec<ce_s> argc = vNULL;\n       unsigned i;\n       struct constraint_expr *argp;\n       get_constraint_for_rhs (arg, &argc);\n@@ -4010,8 +4010,8 @@ static bool\n find_func_aliases_for_builtin_call (gimple t)\n {\n   tree fndecl = gimple_call_fndecl (t);\n-  vec<ce_s> lhsc = vec<ce_s>();\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n+  vec<ce_s> rhsc = vNULL;\n   varinfo_t fi;\n \n   if (fndecl != NULL_TREE\n@@ -4155,7 +4155,7 @@ find_func_aliases_for_builtin_call (gimple t)\n \tif (gimple_call_lhs (t))\n \t  {\n \t    handle_lhs_call (t, gimple_call_lhs (t), gimple_call_flags (t),\n-\t\t\t     vec<ce_s>(), fndecl);\n+\t\t\t     vNULL, fndecl);\n \t    get_constraint_for_ptr_offset (gimple_call_lhs (t),\n \t\t\t\t\t   NULL_TREE, &lhsc);\n \t    get_constraint_for_ptr_offset (gimple_call_arg (t, 0),\n@@ -4334,8 +4334,8 @@ static void\n find_func_aliases_for_call (gimple t)\n {\n   tree fndecl = gimple_call_fndecl (t);\n-  vec<ce_s> lhsc = vec<ce_s>();\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n+  vec<ce_s> rhsc = vNULL;\n   varinfo_t fi;\n \n   if (fndecl != NULL_TREE\n@@ -4347,7 +4347,7 @@ find_func_aliases_for_call (gimple t)\n   if (!in_ipa_mode\n       || (fndecl && !fi->is_fn_info))\n     {\n-      vec<ce_s> rhsc = vec<ce_s>();\n+      vec<ce_s> rhsc = vNULL;\n       int flags = gimple_call_flags (t);\n \n       /* Const functions can return their arguments and addresses\n@@ -4404,7 +4404,7 @@ find_func_aliases_for_call (gimple t)\n \t      && DECL_RESULT (fndecl)\n \t      && DECL_BY_REFERENCE (DECL_RESULT (fndecl)))\n \t    {\n-\t      vec<ce_s> tem = vec<ce_s>();\n+\t      vec<ce_s> tem = vNULL;\n \t      tem.safe_push (rhs);\n \t      do_deref (&tem);\n \t      rhs = tem[0];\n@@ -4453,8 +4453,8 @@ static void\n find_func_aliases (gimple origt)\n {\n   gimple t = origt;\n-  vec<ce_s> lhsc = vec<ce_s>();\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n+  vec<ce_s> rhsc = vNULL;\n   struct constraint_expr *c;\n   varinfo_t fi;\n \n@@ -4536,7 +4536,7 @@ find_func_aliases (gimple origt)\n \t  else if (code == COND_EXPR)\n \t    {\n \t      /* The result is a merge of both COND_EXPR arms.  */\n-\t      vec<ce_s> tmp = vec<ce_s>();\n+\t      vec<ce_s> tmp = vNULL;\n \t      struct constraint_expr *rhsp;\n \t      unsigned i;\n \t      get_constraint_for_rhs (gimple_assign_rhs2 (t), &rhsc);\n@@ -4552,7 +4552,7 @@ find_func_aliases (gimple origt)\n \t  else\n \t    {\n \t      /* All other operations are merges.  */\n-\t      vec<ce_s> tmp = vec<ce_s>();\n+\t      vec<ce_s> tmp = vNULL;\n \t      struct constraint_expr *rhsp;\n \t      unsigned i, j;\n \t      get_constraint_for_rhs (gimple_assign_rhs1 (t), &rhsc);\n@@ -4625,7 +4625,7 @@ find_func_aliases (gimple origt)\n \t     any global memory.  */\n \t  if (op)\n \t    {\n-\t      vec<ce_s> lhsc = vec<ce_s>();\n+\t      vec<ce_s> lhsc = vNULL;\n \t      struct constraint_expr rhsc, *lhsp;\n \t      unsigned j;\n \t      get_constraint_for (op, &lhsc);\n@@ -4669,7 +4669,7 @@ find_func_aliases (gimple origt)\n static void\n process_ipa_clobber (varinfo_t fi, tree ptr)\n {\n-  vec<ce_s> ptrc = vec<ce_s>();\n+  vec<ce_s> ptrc = vNULL;\n   struct constraint_expr *c, lhs;\n   unsigned i;\n   get_constraint_for_rhs (ptr, &ptrc);\n@@ -4687,8 +4687,8 @@ static void\n find_func_clobbers (gimple origt)\n {\n   gimple t = origt;\n-  vec<ce_s> lhsc = vec<ce_s>();\n-  vec<ce_s> rhsc = vec<ce_s>();\n+  vec<ce_s> lhsc = vNULL;\n+  vec<ce_s> rhsc = vNULL;\n   varinfo_t fi;\n \n   /* Add constraints for clobbered/used in IPA mode.\n@@ -5458,7 +5458,7 @@ create_variable_info_for_1 (tree decl, const char *name)\n   varinfo_t vi, newvi;\n   tree decl_type = TREE_TYPE (decl);\n   tree declsize = DECL_P (decl) ? DECL_SIZE (decl) : TYPE_SIZE (decl_type);\n-  vec<fieldoff_s> fieldstack = vec<fieldoff_s>();\n+  vec<fieldoff_s> fieldstack = vNULL;\n   fieldoff_s *fo;\n   unsigned int i;\n \n@@ -5609,7 +5609,7 @@ create_variable_info_for (tree decl, const char *name)\n \t  if (DECL_INITIAL (decl)\n \t      && vnode->analyzed)\n \t    {\n-\t      vec<ce_s> rhsc = vec<ce_s>();\n+\t      vec<ce_s> rhsc = vNULL;\n \t      struct constraint_expr lhs, *rhsp;\n \t      unsigned i;\n \t      get_constraint_for_rhs (DECL_INITIAL (decl), &rhsc);"}, {"sha": "88c3f26c5d32b0a96597c4ebaf1ed88c936c4c8b", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -638,7 +638,7 @@ propagate_threaded_block_debug_into (basic_block dest, basic_block src)\n       i++;\n     }\n \n-  vec<tree, va_stack> fewvars = vec<tree, va_stack>();\n+  vec<tree, va_stack> fewvars = vNULL;\n   pointer_set_t *vars = NULL;\n \n   /* If we're already starting with 3/4 of alloc_count, go for a"}, {"sha": "cdfcd5a87001b6b050451ba5ae28d9735e3a8f44", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -424,7 +424,7 @@ find_predicates (vec<use_pred_info_t> **preds,\n {\n   size_t num_chains = 0, i;\n   vec<edge> *dep_chains = 0;\n-  vec<edge> cur_chain = vec<edge>();\n+  vec<edge> cur_chain = vNULL;\n   bool has_valid_pred = false;\n   basic_block cd_root = 0;\n \n@@ -525,8 +525,8 @@ find_def_preds (vec<use_pred_info_t> **preds,\n {\n   size_t num_chains = 0, i, n;\n   vec<edge> *dep_chains = 0;\n-  vec<edge> cur_chain = vec<edge>();\n-  vec<edge> def_edges = vec<edge>();\n+  vec<edge> cur_chain = vNULL;\n+  vec<edge> def_edges = vNULL;\n   bool has_valid_pred = false;\n   basic_block phi_bb, cd_root = 0;\n   struct pointer_set_t *visited_phis;\n@@ -1633,7 +1633,7 @@ normalize_preds (vec<use_pred_info_t> *preds, size_t *n)\n {\n   size_t i, j, ll;\n   vec<use_pred_info_t> pred_chain;\n-  vec<use_pred_info_t> x = vec<use_pred_info_t>();\n+  vec<use_pred_info_t> x = vNULL;\n   use_pred_info_t xj = 0, nxj = 0;\n \n   if (*n < 2)\n@@ -1954,7 +1954,7 @@ execute_late_warn_uninitialized (void)\n {\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n-  vec<gimple> worklist = vec<gimple>();\n+  vec<gimple> worklist = vNULL;\n   struct pointer_set_t *added_to_worklist;\n \n   calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "121044ec68407964eab8e80336f71b62209c75d9", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n static bool\n reachable_at_most_once (basic_block va_arg_bb, basic_block va_start_bb)\n {\n-  vec<edge> stack = vec<edge>();\n+  vec<edge> stack = vNULL;\n   edge e;\n   edge_iterator ei;\n   sbitmap visited;"}, {"sha": "9eed5e0e6a4f746b2f9f2b28736766abaa4d599e", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -301,7 +301,7 @@ emit_case_bit_tests (gimple swtch, tree index_expr,\n   edge default_edge;\n   bool update_dom = dom_info_available_p (CDI_DOMINATORS);\n \n-  vec<basic_block> bbs_to_fix_dom = vec<basic_block>();\n+  vec<basic_block> bbs_to_fix_dom = vNULL;\n \n   tree index_type = TREE_TYPE (index_expr);\n   tree unsigned_index_type = unsigned_type_for (index_type);"}, {"sha": "44fe374f965f57c001733e80f438c422003e6549", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -792,7 +792,7 @@ vect_analyze_data_ref_dependences (loop_vec_info loop_vinfo,\n                                    bb_vec_info bb_vinfo, int *max_vf)\n {\n   unsigned int i;\n-  vec<ddr_p> ddrs = vec<ddr_p>();\n+  vec<ddr_p> ddrs = vNULL;\n   struct data_dependence_relation *ddr;\n \n   if (dump_enabled_p ())\n@@ -3007,7 +3007,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n \t}\n       if (!compute_all_dependences (BB_VINFO_DATAREFS (bb_vinfo),\n \t\t\t\t    &BB_VINFO_DDRS (bb_vinfo),\n-\t\t\t\t    vec<loop_p>(), true))\n+\t\t\t\t    vNULL, true))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n@@ -4745,7 +4745,7 @@ void\n vect_transform_grouped_load (gimple stmt, vec<tree> dr_chain, int size,\n \t\t\t     gimple_stmt_iterator *gsi)\n {\n-  vec<tree> result_chain = vec<tree>();\n+  vec<tree> result_chain = vNULL;\n \n   /* DR_CHAIN contains input data-refs that are a part of the interleaving.\n      RESULT_CHAIN is the output of vect_permute_load_chain, it contains permuted"}, {"sha": "04c3760598d9a337ed014bf692ec9a25cab581ad", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -3698,13 +3698,13 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n   bool extract_scalar_result = false;\n   gimple use_stmt, orig_stmt, reduction_phi = NULL;\n   bool nested_in_vect_loop = false;\n-  vec<gimple> new_phis = vec<gimple>();\n-  vec<gimple> inner_phis = vec<gimple>();\n+  vec<gimple> new_phis = vNULL;\n+  vec<gimple> inner_phis = vNULL;\n   enum vect_def_type dt = vect_unknown_def_type;\n   int j, i;\n-  vec<tree> scalar_results = vec<tree>();\n+  vec<tree> scalar_results = vNULL;\n   unsigned int group_size = 1, k, ratio;\n-  vec<tree> vec_initial_defs = vec<tree>();\n+  vec<tree> vec_initial_defs = vNULL;\n   vec<gimple> phis;\n   bool slp_reduc = false;\n   tree new_phi_result;\n@@ -4575,10 +4575,10 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n   struct loop * def_stmt_loop, *outer_loop = NULL;\n   tree def_arg;\n   gimple def_arg_stmt;\n-  vec<tree> vec_oprnds0 = vec<tree>();\n-  vec<tree> vec_oprnds1 = vec<tree>();\n-  vec<tree> vect_defs = vec<tree>();\n-  vec<gimple> phis = vec<gimple>();\n+  vec<tree> vec_oprnds0 = vNULL;\n+  vec<tree> vec_oprnds1 = vNULL;\n+  vec<tree> vect_defs = vNULL;\n+  vec<gimple> phis = vNULL;\n   int vec_num;\n   tree def0, def1, tem, op0, op1 = NULL_TREE;\n "}, {"sha": "a4f537a8412787be0efd46c34440f592b47f2855", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -960,7 +960,7 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\t\t\t   prologue_cost_vec, body_cost_vec))\n         {\n \t  if (child)\n-\t    oprnd_info->def_stmts = vec<gimple>();\n+\t    oprnd_info->def_stmts = vNULL;\n \t  vect_free_slp_tree (child);\n \t  vect_free_oprnd_info (oprnds_info);\n    \t  return false;\n@@ -1058,7 +1058,7 @@ vect_supported_slp_permutation_p (slp_instance instance)\n   slp_tree node = SLP_INSTANCE_LOADS (instance)[0];\n   gimple stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n   gimple first_load = GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt));\n-  vec<slp_tree> sorted_loads = vec<slp_tree>();\n+  vec<slp_tree> sorted_loads = vNULL;\n   int index;\n   slp_tree *tmp_loads = NULL;\n   int group_size = SLP_INSTANCE_GROUP_SIZE (instance), i, j;\n@@ -1102,7 +1102,7 @@ vect_supported_slp_permutation_p (slp_instance instance)\n   SLP_INSTANCE_LOADS (instance) = sorted_loads;\n   free (tmp_loads);\n \n-  if (!vect_transform_slp_perm_load (stmt, vec<tree>(), NULL,\n+  if (!vect_transform_slp_perm_load (stmt, vNULL, NULL,\n                                      SLP_INSTANCE_UNROLLING_FACTOR (instance),\n                                      instance, true))\n     return false;\n@@ -1705,8 +1705,8 @@ vect_analyze_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n {\n   unsigned int i;\n   vec<gimple> grouped_stores;\n-  vec<gimple> reductions = vec<gimple>();\n-  vec<gimple> reduc_chains = vec<gimple>();\n+  vec<gimple> reductions = vNULL;\n+  vec<gimple> reduc_chains = vNULL;\n   gimple first_element;\n   bool ok = false;\n "}, {"sha": "1e8d7ee44017a4b068be7674e3dc608e39b334cc", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1722,7 +1722,7 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n     = {vect_unknown_def_type, vect_unknown_def_type, vect_unknown_def_type};\n   gimple new_stmt = NULL;\n   int ncopies, j;\n-  vec<tree> vargs = vec<tree>();\n+  vec<tree> vargs = vNULL;\n   enum { NARROW, NONE, WIDEN } modifier;\n   size_t i, nargs;\n   tree lhs;\n@@ -2239,7 +2239,7 @@ vect_create_vectorized_promotion_stmts (vec<tree> *vec_oprnds0,\n   int i;\n   tree vop0, vop1, new_tmp1, new_tmp2;\n   gimple new_stmt1, new_stmt2;\n-  vec<tree> vec_tmp = vec<tree>();\n+  vec<tree> vec_tmp = vNULL;\n \n   vec_tmp.create (vec_oprnds0->length () * 2);\n   FOR_EACH_VEC_ELT (*vec_oprnds0, i, vop0)\n@@ -2305,13 +2305,13 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n   int ncopies, i, j;\n   tree lhs_type, rhs_type;\n   enum { NARROW, NONE, WIDEN } modifier;\n-  vec<tree> vec_oprnds0 = vec<tree>();\n-  vec<tree> vec_oprnds1 = vec<tree>();\n+  vec<tree> vec_oprnds0 = vNULL;\n+  vec<tree> vec_oprnds1 = vNULL;\n   tree vop0;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   int multi_step_cvt = 0;\n-  vec<tree> vec_dsts = vec<tree>();\n-  vec<tree> interm_types = vec<tree>();\n+  vec<tree> vec_dsts = vNULL;\n+  vec<tree> interm_types = vNULL;\n   tree last_oprnd, intermediate_type, cvt_type = NULL_TREE;\n   int op_type;\n   enum machine_mode rhs_mode;\n@@ -2878,7 +2878,7 @@ vectorizable_assignment (gimple stmt, gimple_stmt_iterator *gsi,\n   unsigned int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   int ncopies;\n   int i, j;\n-  vec<tree> vec_oprnds = vec<tree>();\n+  vec<tree> vec_oprnds = vNULL;\n   tree vop;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   gimple new_stmt = NULL;\n@@ -3087,8 +3087,8 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n   tree op1_vectype;\n   int ncopies;\n   int j, i;\n-  vec<tree> vec_oprnds0 = vec<tree>();\n-  vec<tree> vec_oprnds1 = vec<tree>();\n+  vec<tree> vec_oprnds0 = vNULL;\n+  vec<tree> vec_oprnds1 = vNULL;\n   tree vop0, vop1;\n   unsigned int k;\n   bool scalar_shift_arg = true;\n@@ -3465,9 +3465,9 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n   tree vectype_out;\n   int ncopies;\n   int j, i;\n-  vec<tree> vec_oprnds0 = vec<tree>();\n-  vec<tree> vec_oprnds1 = vec<tree>();\n-  vec<tree> vec_oprnds2 = vec<tree>();\n+  vec<tree> vec_oprnds0 = vNULL;\n+  vec<tree> vec_oprnds1 = vNULL;\n+  vec<tree> vec_oprnds2 = vNULL;\n   tree vop0, vop1, vop2;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   int vf;\n@@ -3820,11 +3820,11 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   bool grouped_store = false;\n   bool store_lanes_p = false;\n   unsigned int group_size, i;\n-  vec<tree> dr_chain = vec<tree>();\n-  vec<tree> oprnds = vec<tree>();\n-  vec<tree> result_chain = vec<tree>();\n+  vec<tree> dr_chain = vNULL;\n+  vec<tree> oprnds = vNULL;\n+  vec<tree> result_chain = vNULL;\n   bool inv_p;\n-  vec<tree> vec_oprnds = vec<tree>();\n+  vec<tree> vec_oprnds = vNULL;\n   bool slp = (slp_node != NULL);\n   unsigned int vec_num;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n@@ -4337,7 +4337,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   tree offset = NULL_TREE;\n   tree realignment_token = NULL_TREE;\n   gimple phi = NULL;\n-  vec<tree> dr_chain = vec<tree>();\n+  vec<tree> dr_chain = vNULL;\n   bool grouped_load = false;\n   bool load_lanes_p = false;\n   gimple first_stmt;\n@@ -5290,10 +5290,10 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   stmt_vec_info prev_stmt_info = NULL;\n   int i, j;\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n-  vec<tree> vec_oprnds0 = vec<tree>();\n-  vec<tree> vec_oprnds1 = vec<tree>();\n-  vec<tree> vec_oprnds2 = vec<tree>();\n-  vec<tree> vec_oprnds3 = vec<tree>();\n+  vec<tree> vec_oprnds0 = vNULL;\n+  vec<tree> vec_oprnds1 = vNULL;\n+  vec<tree> vec_oprnds2 = vNULL;\n+  vec<tree> vec_oprnds3 = vNULL;\n   tree vec_cmp_type = vectype;\n \n   if (slp_node || PURE_SLP_STMT (stmt_info))"}, {"sha": "471b26c2e13e4394479dbbfdc58eb786cef82fcc", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -1086,7 +1086,7 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n }\n \n static vec<cgraph_node_ptr> cgraph_node_map\n-    = vec<cgraph_node_ptr>();\n+    = vNULL;\n \n /* Initialize map from FUNCDEF_NO to CGRAPH_NODE.  */\n "}, {"sha": "4598cf29433edfad1898fb118f4728d24e1efe03", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -5718,7 +5718,7 @@ tm_alias_pair_cmp (const void *x, const void *y)\n void\n finish_tm_clone_pairs (void)\n {\n-  vec<tm_alias_pair> tm_alias_pairs = vec<tm_alias_pair>();\n+  vec<tm_alias_pair> tm_alias_pairs = vNULL;\n \n   if (tm_clone_hash == NULL)\n     return;"}, {"sha": "f5f2d114b94d9663ed383838e403f1b64dbd60a4", "filename": "gcc/vec.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -35,6 +35,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"hashtab.h\"\n \n+/* vNULL is an empty type with a template cast operation that returns\n+   a zero-initialized vec<T, A, L> instance.  Use this when you want\n+   to assign nil values to new vec instances or pass a nil vector as\n+   a function call argument.\n+\n+   We use this technique because vec<T, A, L> must be PODs (they are\n+   stored in unions and passed in vararg functions), this means that\n+   they cannot have ctors/dtors.  */\n+vnull vNULL;\n+\n+\n /* Store information about each particular vector.  */\n struct vec_descriptor\n {"}, {"sha": "bfc1811f6518e8a4eb7d52a458abeef2931581f7", "filename": "gcc/vec.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1aa84836e166fbfb4b53ac004d1d63e03d9f05/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=6e1aa84836e166fbfb4b53ac004d1d63e03d9f05", "patch": "@@ -510,6 +510,17 @@ class GTY((user)) vec\n {\n };\n \n+/* Type to provide NULL values for vec<T, A, L>.  This is used to\n+   provide nil initializers for vec instances.  Since vec must be\n+   a POD, we cannot have proper ctor/dtor for it.  To initialize\n+   a vec instance, you can assign it the value vNULL.  */\n+struct vnull\n+{\n+  template <typename T, typename A, typename L>\n+  operator vec<T, A, L> () { return vec<T, A, L>(); }\n+};\n+extern vnull vNULL;\n+\n \n /* Embeddable vector.  These vectors are suitable to be embedded\n    in other data structures so that they can be pre-allocated in a\n@@ -1432,7 +1443,7 @@ template<typename T, typename A>\n inline vec<T, A, vl_ptr>\n vec<T, A, vl_ptr>::copy (ALONE_MEM_STAT_DECL) const\n {\n-  vec<T, A, vl_ptr> new_vec = vec<T, A, vl_ptr>();\n+  vec<T, A, vl_ptr> new_vec = vNULL;\n   if (length ())\n     new_vec.vec_ = vec_->copy ();\n   return new_vec;"}]}