{"sha": "f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhMThhNWM2Y2IxZmVkNjhlYTUxOWY3MzFjODA3OGFmMmYyZjY1Nw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-01-21T17:12:09Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-01-21T17:12:09Z"}, "message": "re PR c/88928 (ICE segfault in check_address_or_pointer_of_packed_member since r268075)\n\n2019-01-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c/88928\n        * c-warn.c (check_alignment_of_packed_member): Add a boolean parameter\n        for rvalue context.  Handle rvalues correctly.  Use min_align_of_type\n        instead of TYPE_ALIGN.\n        (check_address_or_pointer_of_packed_member): Handle rvalues coorrectly.\n        Use min_align_of_type instead of TYPE_ALIGN_UNIT.  Check for NULL\n        pointer from TYPE_STUB_DECL.\n\ntestsuite:\n2019-01-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c/88928\n        * c-c++-common/Waddress-of-packed-member-1.c: New test case.\n        * gcc.dg/pr88928.c: New test case.\n\nFrom-SVN: r268118", "tree": {"sha": "c0fe35267116ff647019a5081d6f5c3a4a6f3d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0fe35267116ff647019a5081d6f5c3a4a6f3d41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fba41e0f0b1fd1db24709577564866dec047c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fba41e0f0b1fd1db24709577564866dec047c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fba41e0f0b1fd1db24709577564866dec047c3b"}], "stats": {"total": 137, "additions": 115, "deletions": 22}, "files": [{"sha": "ff92634df4ddcd37bcef605cb62b9aabed89001d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "patch": "@@ -1,3 +1,13 @@\n+2019-01-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c/88928\n+\t* c-warn.c (check_alignment_of_packed_member): Add a boolean parameter\n+\tfor rvalue context.  Handle rvalues correctly.  Use min_align_of_type\n+\tinstead of TYPE_ALIGN.\n+\t(check_address_or_pointer_of_packed_member): Handle rvalues coorrectly.\n+\tUse min_align_of_type instead of TYPE_ALIGN_UNIT.  Check for NULL\n+\tpointer from TYPE_STUB_DECL.\n+\n 2019-01-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88934"}, {"sha": "43b307acafec11f00fcb7e292f0f27a4111f7f3a", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"c-family/c-indentation.h\"\n #include \"calls.h\"\n+#include \"stor-layout.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -2688,25 +2689,26 @@ warn_for_multistatement_macros (location_t body_loc, location_t next_loc,\n }\n \n /* Return struct or union type if the alignment of data memeber, FIELD,\n-   is less than the alignment of TYPE.  Otherwise, return NULL_TREE.  */\n+   is less than the alignment of TYPE.  Otherwise, return NULL_TREE.\n+   If RVALUE is true, only arrays evaluate to pointers.  */\n \n static tree\n-check_alignment_of_packed_member (tree type, tree field)\n+check_alignment_of_packed_member (tree type, tree field, bool rvalue)\n {\n   /* Check alignment of the data member.  */\n   if (TREE_CODE (field) == FIELD_DECL\n-      && (DECL_PACKED (field)\n-\t  || TYPE_PACKED (TREE_TYPE (field))))\n+      && (DECL_PACKED (field) || TYPE_PACKED (TREE_TYPE (field)))\n+      && (!rvalue || TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE))\n     {\n       /* Check the expected alignment against the field alignment.  */\n-      unsigned int type_align = TYPE_ALIGN (type);\n+      unsigned int type_align = min_align_of_type (type);\n       tree context = DECL_CONTEXT (field);\n-      unsigned int record_align = TYPE_ALIGN (context);\n-      if ((record_align % type_align) != 0)\n+      unsigned int record_align = min_align_of_type (context);\n+      if (record_align < type_align)\n \treturn context;\n       tree field_off = byte_position (field);\n       if (!multiple_of_p (TREE_TYPE (field_off), field_off,\n-\t\t\t  size_int (type_align / BITS_PER_UNIT)))\n+\t\t\t  size_int (type_align)))\n \treturn context;\n     }\n \n@@ -2722,44 +2724,58 @@ check_alignment_of_packed_member (tree type, tree field)\n static tree\n check_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n+  bool rvalue = true;\n+\n   if (INDIRECT_REF_P (rhs))\n     rhs = TREE_OPERAND (rhs, 0);\n \n   if (TREE_CODE (rhs) == ADDR_EXPR)\n-    rhs = TREE_OPERAND (rhs, 0);\n+    {\n+      rhs = TREE_OPERAND (rhs, 0);\n+      rvalue = false;\n+    }\n+\n+  if (!POINTER_TYPE_P (type))\n+    return NULL_TREE;\n \n-  if (POINTER_TYPE_P (type))\n-    type = TREE_TYPE (type);\n+  type = TREE_TYPE (type);\n \n   if (TREE_CODE (rhs) == PARM_DECL\n       || VAR_P (rhs)\n       || TREE_CODE (rhs) == CALL_EXPR)\n     {\n+      tree rhstype = TREE_TYPE (rhs);\n       if (TREE_CODE (rhs) == CALL_EXPR)\n \t{\n \t  rhs = CALL_EXPR_FN (rhs);\t/* Pointer expression.  */\n \t  if (rhs == NULL_TREE)\n \t    return NULL_TREE;\n \t  rhs = TREE_TYPE (rhs);\t/* Pointer type.  */\n \t  rhs = TREE_TYPE (rhs);\t/* Function type.  */\n+\t  rhstype = TREE_TYPE (rhs);\n+\t  if (!POINTER_TYPE_P (rhstype))\n+\t    return NULL_TREE;\n+\t  rvalue = true;\n \t}\n-      tree rhstype = TREE_TYPE (rhs);\n-      if ((POINTER_TYPE_P (rhstype)\n-\t   || TREE_CODE (rhstype) == ARRAY_TYPE)\n-\t  && TYPE_PACKED (TREE_TYPE (rhstype)))\n+      if (rvalue && POINTER_TYPE_P (rhstype))\n+\trhstype = TREE_TYPE (rhstype);\n+      while (TREE_CODE (rhstype) == ARRAY_TYPE)\n+\trhstype = TREE_TYPE (rhstype);\n+      if (TYPE_PACKED (rhstype))\n \t{\n-\t  unsigned int type_align = TYPE_ALIGN_UNIT (type);\n-\t  unsigned int rhs_align = TYPE_ALIGN_UNIT (TREE_TYPE (rhstype));\n-\t  if ((rhs_align % type_align) != 0)\n+\t  unsigned int type_align = min_align_of_type (type);\n+\t  unsigned int rhs_align = min_align_of_type (rhstype);\n+\t  if (rhs_align < type_align)\n \t    {\n \t      location_t location = EXPR_LOC_OR_LOC (rhs, input_location);\n \t      warning_at (location, OPT_Waddress_of_packed_member,\n \t\t\t  \"converting a packed %qT pointer (alignment %d) \"\n-\t\t\t  \"to %qT (alignment %d) may result in an \"\n+\t\t\t  \"to a %qT pointer (alignment %d) may result in an \"\n \t\t\t  \"unaligned pointer value\",\n \t\t\t  rhstype, rhs_align, type, type_align);\n-\t      tree decl = TYPE_STUB_DECL (TREE_TYPE (rhstype));\n-\t      inform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n+\t      tree decl = TYPE_STUB_DECL (rhstype);\n+\t      if (decl)\n+\t\tinform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n \t      decl = TYPE_STUB_DECL (type);\n \t      if (decl)\n \t\tinform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n@@ -2776,7 +2792,7 @@ check_address_or_pointer_of_packed_member (tree type, tree rhs)\n       if (TREE_CODE (rhs) == COMPONENT_REF)\n \t{\n \t  tree field = TREE_OPERAND (rhs, 1);\n-\t  context = check_alignment_of_packed_member (type, field);\n+\t  context = check_alignment_of_packed_member (type, field, rvalue);\n \t  if (context)\n \t    break;\n \t}"}, {"sha": "c86de12e9a77ce1c003880cd81d1c44a27e5f419", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "patch": "@@ -1,3 +1,9 @@\n+2019-01-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c/88928\n+\t* c-c++-common/Waddress-of-packed-member-1.c: New test case.\n+\t* gcc.dg/pr88928.c: New test case.\n+\n 2019-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/utf-array.c: Allow wchar_t to be printed as"}, {"sha": "a1374fb10f4fce73acfbd7967a9e9c6d9265ad02", "filename": "gcc/testsuite/c-c++-common/Waddress-of-packed-member-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c?ref=f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Waddress-of-packed-member\" } */\n+\n+struct t {\n+  char a;\n+  int b;\n+  int *c;\n+  int d[10];\n+} __attribute__((packed));\n+\n+struct t t0;\n+struct t t10[10];\n+struct t t100[10][10];\n+struct t *t1;\n+struct t **t2;\n+struct t *bar();\n+struct t (*baz())[10];\n+struct t (*bazz())[10][10];\n+int *i1;\n+__UINTPTR_TYPE__ u1;\n+__UINTPTR_TYPE__ baa();\n+\n+void foo (void)\n+{\n+  t1 = &t0;                    /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = t10;                    /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t2 = &t1;                    /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t2 = t2;                     /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**)t2;         /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = (struct t*)t2;          /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = bar();                  /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = (struct t*) baz();      /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = (struct t*) bazz();     /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = *baz();                 /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = **bazz();               /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t1 = (struct t*) baa();      /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) baa();     /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = t0.c;                   /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = t1->c;                  /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = t10[0].c;               /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  u1 = (__UINTPTR_TYPE__) &t0; /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  u1 = (__UINTPTR_TYPE__) t1;  /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) t10;     /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) t100;    /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) t1;      /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) bar();   /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) baz();   /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  t2 = (struct t**) bazz();  /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = &t0.b;                /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = &t1->b;               /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = &t10[0].b;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = t0.d;                 /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = t1->d;                /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = t10[0].d;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+}"}, {"sha": "c0a1f766cb0b992189a970218fe17e334293c4f1", "filename": "gcc/testsuite/gcc.dg/pr88928.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88928.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a18a5c6cb1fed68ea519f731c8078af2f2f657/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88928.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88928.c?ref=f3a18a5c6cb1fed68ea519f731c8078af2f2f657", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-pedantic -Waddress-of-packed-member\" } */\n+struct a { } __attribute__((__packed__));\n+void c (struct a **);\n+void d (const struct a *b) { c ((struct a **) b); }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}]}