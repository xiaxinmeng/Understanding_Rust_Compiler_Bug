{"sha": "06553c89f521477d6c3ec4023d5162f90c57111d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1NTNjODlmNTIxNDc3ZDZjM2VjNDAyM2Q1MTYyZjkwYzU3MTExZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-12-14T21:35:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-12-14T21:35:36Z"}, "message": "x86; Add -mmanual-endbr and cf_check function attribute\n\nCurrently GCC inserts ENDBR instruction at entries of all non-static\nfunctions, unless LTO compilation is used.  Marking all functions,\nwhich are not called indirectly with nocf_check attribute, is not\nideal since 99% of functions in a program may be of this kind.\n\nThis patch adds -mmanual-endbr and cf_check function attribute.  They\ncan be used together with -fcf-protection such that ENDBR instruction\nis inserted only at entries of functions with cf_check attribute.  It\ncan limit number of ENDBR instructions to reduce program size.\n\ngcc/\n\n\t* config/i386/i386.c (rest_of_insert_endbranch): Insert ENDBR\n\tat the function entry only when -mmanual-endbr isn't used or\n\tthere is cf_check function attribute.\n\t(ix86_attribute_table): Add cf_check.\n\t* config/i386/i386.opt: Add -mmanual-endbr.\n\t* doc/extend.texi: Document cf_check attribute.\n\t* doc/invoke.texi: Document -mmanual-endbr.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/cf_check-1.c: New test.\n\t* gcc.target/i386/cf_check-2.c: Likewise.\n\t* gcc.target/i386/cf_check-3.c: Likewise.\n\t* gcc.target/i386/cf_check-4.c: Likewise.\n\t* gcc.target/i386/cf_check-5.c: Likewise.\n\nFrom-SVN: r267154", "tree": {"sha": "c6d500a4d04a1fcee026fc1b5125e4a7a2b05a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d500a4d04a1fcee026fc1b5125e4a7a2b05a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06553c89f521477d6c3ec4023d5162f90c57111d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06553c89f521477d6c3ec4023d5162f90c57111d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06553c89f521477d6c3ec4023d5162f90c57111d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06553c89f521477d6c3ec4023d5162f90c57111d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c759830b29fff2288bc0cebfb4b2c479f0b5b30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c759830b29fff2288bc0cebfb4b2c479f0b5b30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c759830b29fff2288bc0cebfb4b2c479f0b5b30e"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "a612dad682f22cef370cc43a0b419d3c8e451ed2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -1,3 +1,13 @@\n+2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (rest_of_insert_endbranch): Insert ENDBR\n+\tat the function entry only when -mmanual-endbr isn't used or\n+\tthere is cf_check function attribute.\n+\t(ix86_attribute_table): Add cf_check.\n+\t* config/i386/i386.opt: Add -mmanual-endbr.\n+\t* doc/extend.texi: Document cf_check attribute.\n+\t* doc/invoke.texi: Document -mmanual-endbr.\n+\n 2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "4599ca2a7d5932daf47bc16bb4ac8d7aaf8779f1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -2640,6 +2640,9 @@ rest_of_insert_endbranch (void)\n \n   if (!lookup_attribute (\"nocf_check\",\n \t\t\t TYPE_ATTRIBUTES (TREE_TYPE (cfun->decl)))\n+      && (!flag_manual_endbr\n+\t  || lookup_attribute (\"cf_check\",\n+\t\t\t       DECL_ATTRIBUTES (cfun->decl)))\n       && !cgraph_node::get (cfun->decl)->only_called_directly_p ())\n     {\n       /* Queue ENDBR insertion to x86_function_profiler.  */\n@@ -45260,6 +45263,9 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fentry_name, NULL },\n   { \"fentry_section\", 1, 1, true, false, false, false,\n     ix86_handle_fentry_name, NULL },\n+  { \"cf_check\", 0, 0, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n+\n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };"}, {"sha": "007e88b57f9e48f085ceddd936442b9d914d677b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -1028,6 +1028,11 @@ Target Report Undocumented Var(flag_cet_switch) Init(0)\n Turn on CET instrumentation for switch statements that use a jump table and\n an indirect jump.\n \n+mmanual-endbr\n+Target Report Var(flag_manual_endbr) Init(0)\n+Insert ENDBR instruction at function entry only via cf_check attribute\n+for CET instrumentation.\n+\n mforce-indirect-call\n Target Report Var(flag_force_indirect_call) Init(0)\n Make all function calls indirect."}, {"sha": "8f3a21cfb271f16ef925c26d3166ccbe203518e2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -6095,6 +6095,13 @@ foo (void)\n @}\n @end smallexample\n \n+@item cf_check\n+@cindex @code{cf_check} function attribute, x86\n+\n+The @code{cf_check} attribute on a function is used to inform the\n+compiler that ENDBR instruction should be placed at the function\n+entry when @option{-fcf-protection=branch} is enabled.\n+\n @item indirect_return\n @cindex @code{indirect_return} function attribute, x86\n "}, {"sha": "9a14170d084bd6c0e98783e4e9a7a5b256af2bfc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -1263,7 +1263,7 @@ See RS/6000 and PowerPC Options.\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp @gol\n -mmwaitx  -mclzero  -mpku  -mthreads  -mgfni  -mvaes  -mwaitpkg @gol\n--mshstk  -mforce-indirect-call  -mavx512vbmi2 @gol\n+-mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n@@ -27968,6 +27968,13 @@ Force all calls to functions to be indirect. This is useful\n when using Intel Processor Trace where it generates more precise timing\n information for function calls.\n \n+@item -mmanual-endbr\n+@opindex mmanual-endbr\n+Insert ENDBR instruction at function entry only via the @code{cf_check}\n+function attribute. This is useful when used with the option\n+@option{-fcf-protection=branch} to control ENDBR insertion at the\n+function entry.\n+\n @item -mcall-ms2sysv-xlogues\n @opindex mcall-ms2sysv-xlogues\n @opindex mno-call-ms2sysv-xlogues"}, {"sha": "a0879161104dc29ff11b9efeeb494499f7d18978", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -1,3 +1,11 @@\n+2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/cf_check-1.c: New test.\n+\t* gcc.target/i386/cf_check-2.c: Likewise.\n+\t* gcc.target/i386/cf_check-3.c: Likewise.\n+\t* gcc.target/i386/cf_check-4.c: Likewise.\n+\t* gcc.target/i386/cf_check-5.c: Likewise.\n+\n 2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "c433eab854acff100572d48d33e3c192ee83b969", "filename": "gcc/testsuite/gcc.target/i386/cf_check-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-1.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mmanual-endbr\" } */\n+/* { dg-final { scan-assembler-not {\\mendbr} } } */\n+\n+extern void bar (void) __attribute__((__cf_check__));\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}"}, {"sha": "e2b9c4dbcb2478627221af7883e80695561323c6", "filename": "gcc/testsuite/gcc.target/i386/cf_check-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-2.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mno-manual-endbr\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 1 } } */\n+\n+extern void bar (void) __attribute__((__cf_check__));\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}"}, {"sha": "d835cc3a21bee7fe2c0b7893794befbb8878acdc", "filename": "gcc/testsuite/gcc.target/i386/cf_check-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-3.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection=none\" } */\n+/* { dg-final { scan-assembler-not {\\mendbr} } } */\n+\n+extern void bar (void) __attribute__((__cf_check__));\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}"}, {"sha": "d6cb27cf20b66f2cae53740f14964c2c2386e9c3", "filename": "gcc/testsuite/gcc.target/i386/cf_check-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-4.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mmanual-endbr\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 1 } } */\n+\n+extern void foo (void) __attribute__((__cf_check__));\n+\n+void\n+foo (void)\n+{\n+}"}, {"sha": "f2c0c5c2c0986787332ddb40841cf2bd8983e528", "filename": "gcc/testsuite/gcc.target/i386/cf_check-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06553c89f521477d6c3ec4023d5162f90c57111d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcf_check-5.c?ref=06553c89f521477d6c3ec4023d5162f90c57111d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mmanual-endbr\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 1 } } */\n+\n+__attribute__((__cf_check__))\n+void\n+foo (void)\n+{\n+}"}]}