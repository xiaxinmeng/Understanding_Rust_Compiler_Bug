{"sha": "d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyZTNjZWViMmViM2FmMzU1MDhlZTAwZjI4OGQ4Y2YzNDgzZmYyMQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2010-10-22T09:28:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T09:28:24Z"}, "message": "Make-lang.in: Remove ttypef.ads\n\n2010-10-22  Geert Bosch  <bosch@adacore.com>\n\n\t* gcc-interface/Make-lang.in: Remove ttypef.ads\n\t* checks.adb: Use Machine_Mantissa_Value and Machine_Radix_Value instead\n\tof Machine_Mantissa and Machine_Radix.\n\t* cstand.adb (P_Float_Range): Directly print the Type_Low_Bound and\n\tType_High_Bound of the type, instead of choosing constants from Ttypef.\n\t(Set_Float_Bounds): Compute the bounds based on Machine_Radix_Value,\n\tMachine_Emax_Value and Machine_Mantissa_Value instead of special-casing\n\teach type.\n\t* einfo.ads (Machine_Emax_Value, Machine_Emin_Value,\n\tMachine_Mantissa_Value, Machine_Radix_Value, Model_Emin_Value,\n\tModel_Epsilon_Value, Model_Mantissa_Value, Model_Small_Value,\n\tSafe_Emax_Value, Safe_First_Value, Safe_Last_Value): Add new\n\tsynthesized floating point attributes.\n\t* einfo.adb (Float_Rep): Determine the kind of floating point\n\trepresentation used for a given type.\n\t(Machine_Emax_Value, Machine_Emin_Value, Machine_Mantissa_Value,\n\tMachine_Radix_Value): Implement based on Float_Rep_Kind of a type and\n\tthe number of digits in the type.\n\t(Model_Emin_Value, Model_Epsilon_Value, Model_Mantissa_Value,\n\tModel_Small_Value, Safe_Emax_Value, Safe_First_Value, Safe_Last_Value):\n\tImplement new synthesized floating point attributes based on the various\n\tmachine attributes.\n\t* eval_fat.ads: Remove Machine_Mantissa and Machine_Radix.\n\t* eval_fat.adb (Machine_Mantissa, Machine_Radix): Remove. Use the\n\tMachine_Mantissa_Value and Machine_Radix_Value functions instead.\n\t* exp_vfpt.adb (VAXFF_Digits, VAXDF_Digits, VAXFG_Digits): Define local\n\tconstants, instead of using constants from Ttypef.\n\t* gnat_rm.texi: Reword comments referencing Ttypef.\n\t* sem_attr.ads: Reword comment referencing Ttypef.\n\t* sem_attr.adb (Float_Attribute_Universal_Integer,\n\tFloat_Attribute_Universal_Real): Remove.\n\t(Attribute_Machine_Emax, Attribute_Machine_Emin,\n\tAttribute_Machine_Mantissa, Attribute_Model_Epsilon,\n\tAttribute_Model_Mantissa, Attribute_Model_Small, Attribute_Safe_Emax,\n\tAttribute_Safe_First, Attribute_Safe_Last, Model_Small_Value): Use\n\tattributes in Einfo instead of Float_Attribute_Universal_Real and\n\tFloat_Attribute_Universal_Integer and all explicit constants.\n\t* sem_util.ads, sem_util.adb (Real_Convert): Remove.\n\t* sem_vfpt.adb (VAXDF_Digits, VAXFF_Digits, VAXGF_Digits, IEEEL_Digits,\n\tIEEES_Digits): New local constants, in order to remove dependency on\n\tTtypef.\n\t* tbuild.ads (Make_Float_Literal): New function.\n\t* tbuild.adb (Make_Float_Literal): New function to create a new\n\tN_Real_Literal, constructing it as simple as possible for best\n\toutput of constants in -gnatS.\n\t* ttypef.ads: Remove.\n\nFrom-SVN: r165808", "tree": {"sha": "7f0e836c6c46bdea870554de215d6ec19f206413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f0e836c6c46bdea870554de215d6ec19f206413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/comments", "author": null, "committer": null, "parents": [{"sha": "8110ee3b6349ae4b1a369996a25161dc6a0f067e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8110ee3b6349ae4b1a369996a25161dc6a0f067e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8110ee3b6349ae4b1a369996a25161dc6a0f067e"}], "stats": {"total": 1109, "additions": 346, "deletions": 763}, "files": [{"sha": "0dd91b931d8b3383b759b03509cd25bd56ee530f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -1,3 +1,52 @@\n+2010-10-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: Remove ttypef.ads\n+\t* checks.adb: Use Machine_Mantissa_Value and Machine_Radix_Value instead\n+\tof Machine_Mantissa and Machine_Radix.\n+\t* cstand.adb (P_Float_Range): Directly print the Type_Low_Bound and\n+\tType_High_Bound of the type, instead of choosing constants from Ttypef.\n+\t(Set_Float_Bounds): Compute the bounds based on Machine_Radix_Value,\n+\tMachine_Emax_Value and Machine_Mantissa_Value instead of special-casing\n+\teach type.\n+\t* einfo.ads (Machine_Emax_Value, Machine_Emin_Value,\n+\tMachine_Mantissa_Value, Machine_Radix_Value, Model_Emin_Value,\n+\tModel_Epsilon_Value, Model_Mantissa_Value, Model_Small_Value,\n+\tSafe_Emax_Value, Safe_First_Value, Safe_Last_Value): Add new\n+\tsynthesized floating point attributes.\n+\t* einfo.adb (Float_Rep): Determine the kind of floating point\n+\trepresentation used for a given type.\n+\t(Machine_Emax_Value, Machine_Emin_Value, Machine_Mantissa_Value,\n+\tMachine_Radix_Value): Implement based on Float_Rep_Kind of a type and\n+\tthe number of digits in the type.\n+\t(Model_Emin_Value, Model_Epsilon_Value, Model_Mantissa_Value,\n+\tModel_Small_Value, Safe_Emax_Value, Safe_First_Value, Safe_Last_Value):\n+\tImplement new synthesized floating point attributes based on the various\n+\tmachine attributes.\n+\t* eval_fat.ads: Remove Machine_Mantissa and Machine_Radix.\n+\t* eval_fat.adb (Machine_Mantissa, Machine_Radix): Remove. Use the\n+\tMachine_Mantissa_Value and Machine_Radix_Value functions instead.\n+\t* exp_vfpt.adb (VAXFF_Digits, VAXDF_Digits, VAXFG_Digits): Define local\n+\tconstants, instead of using constants from Ttypef.\n+\t* gnat_rm.texi: Reword comments referencing Ttypef.\n+\t* sem_attr.ads: Reword comment referencing Ttypef.\n+\t* sem_attr.adb (Float_Attribute_Universal_Integer,\n+\tFloat_Attribute_Universal_Real): Remove.\n+\t(Attribute_Machine_Emax, Attribute_Machine_Emin,\n+\tAttribute_Machine_Mantissa, Attribute_Model_Epsilon,\n+\tAttribute_Model_Mantissa, Attribute_Model_Small, Attribute_Safe_Emax,\n+\tAttribute_Safe_First, Attribute_Safe_Last, Model_Small_Value): Use\n+\tattributes in Einfo instead of Float_Attribute_Universal_Real and\n+\tFloat_Attribute_Universal_Integer and all explicit constants.\n+\t* sem_util.ads, sem_util.adb (Real_Convert): Remove.\n+\t* sem_vfpt.adb (VAXDF_Digits, VAXFF_Digits, VAXGF_Digits, IEEEL_Digits,\n+\tIEEES_Digits): New local constants, in order to remove dependency on\n+\tTtypef.\n+\t* tbuild.ads (Make_Float_Literal): New function.\n+\t* tbuild.adb (Make_Float_Literal): New function to create a new\n+\tN_Real_Literal, constructing it as simple as possible for best\n+\toutput of constants in -gnatS.\n+\t* ttypef.ads: Remove.\n+\n 2010-10-22  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Apply_Predicate_Check): Remove attempt at optimization"}, {"sha": "234317ff2074b49780e2bb27038241c84354087a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -1564,8 +1564,8 @@ package body Checks is\n       Truncate  : constant Boolean := Float_Truncate (Par);\n       Max_Bound : constant Uint :=\n                     UI_Expon\n-                      (Machine_Radix (Expr_Type),\n-                       Machine_Mantissa (Expr_Type) - 1) - 1;\n+                      (Machine_Radix_Value (Expr_Type),\n+                       Machine_Mantissa_Value (Expr_Type) - 1) - 1;\n \n       --  Largest bound, so bound plus or minus half is a machine number of F\n "}, {"sha": "db1034fec6ceac4d31d016f7eac1ef59e70d502c", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 15, "deletions": 118, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -36,7 +36,6 @@ with Output;   use Output;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n-with Ttypef;   use Ttypef;\n with Scn;\n with Sem_Mech; use Sem_Mech;\n with Sem_Util; use Sem_Util;\n@@ -1670,61 +1669,11 @@ package body CStand is\n       -------------------\n \n       procedure P_Float_Range (Id : Entity_Id) is\n-         Digs : constant Nat := UI_To_Int (Digits_Value (Id));\n-\n       begin\n          Write_Str (\"     range \");\n-\n-         if Vax_Float (Id) then\n-            if Digs = VAXFF_Digits then\n-               Write_Str (VAXFF_First'Universal_Literal_String);\n-               Write_Str (\" .. \");\n-               Write_Str (VAXFF_Last'Universal_Literal_String);\n-\n-            elsif Digs = VAXDF_Digits then\n-               Write_Str (VAXDF_First'Universal_Literal_String);\n-               Write_Str (\" .. \");\n-               Write_Str (VAXDF_Last'Universal_Literal_String);\n-\n-            else\n-               pragma Assert (Digs = VAXGF_Digits);\n-\n-               Write_Str (VAXGF_First'Universal_Literal_String);\n-               Write_Str (\" .. \");\n-               Write_Str (VAXGF_Last'Universal_Literal_String);\n-            end if;\n-\n-         elsif Is_AAMP_Float (Id) then\n-            if Digs = AAMPS_Digits then\n-               Write_Str (AAMPS_First'Universal_Literal_String);\n-               Write_Str (\" .. \");\n-               Write_Str (AAMPS_Last'Universal_Literal_String);\n-\n-            else\n-               pragma Assert (Digs = AAMPL_Digits);\n-               Write_Str (AAMPL_First'Universal_Literal_String);\n-               Write_Str (\" .. \");\n-               Write_Str (AAMPL_Last'Universal_Literal_String);\n-            end if;\n-\n-         elsif Digs = IEEES_Digits then\n-            Write_Str (IEEES_First'Universal_Literal_String);\n-            Write_Str (\" .. \");\n-            Write_Str (IEEES_Last'Universal_Literal_String);\n-\n-         elsif Digs = IEEEL_Digits then\n-            Write_Str (IEEEL_First'Universal_Literal_String);\n-            Write_Str (\" .. \");\n-            Write_Str (IEEEL_Last'Universal_Literal_String);\n-\n-         else\n-            pragma Assert (Digs = IEEEX_Digits);\n-\n-            Write_Str (IEEEX_First'Universal_Literal_String);\n-            Write_Str (\" .. \");\n-            Write_Str (IEEEX_Last'Universal_Literal_String);\n-         end if;\n-\n+         UR_Write (Realval (Type_Low_Bound (Id)));\n+         Write_Str (\" .. \");\n+         UR_Write (Realval (Type_High_Bound (Id)));\n          Write_Str (\";\");\n          Write_Eol;\n       end P_Float_Range;\n@@ -1908,81 +1857,29 @@ package body CStand is\n    ----------------------\n \n    procedure Set_Float_Bounds (Id  : Entity_Id) is\n-      L  : Node_Id;\n+      L : Node_Id;\n       --  Low bound of literal value\n \n-      H  : Node_Id;\n+      H : Node_Id;\n       --  High bound of literal value\n \n-      R  : Node_Id;\n+      R : Node_Id;\n       --  Range specification\n \n-      Digs  : constant Nat := UI_To_Int (Digits_Value (Id));\n-      --  Digits value, used to select bounds\n+      Radix       : constant Uint := Machine_Radix_Value (Id);\n+      Mantissa    : constant Uint := Machine_Mantissa_Value (Id);\n+      Emax        : constant Uint := Machine_Emax_Value (Id);\n+      Significand : constant Uint := Radix ** Mantissa - 1;\n+      Exponent    : constant Uint := Emax - Mantissa;\n \n    begin\n       --  Note: for the call from Cstand to initially create the types in\n       --  Standard, Vax_Float will always be False. Circuitry in Sem_Vfpt\n-      --  will adjust these types appropriately in the Vax_Float case if\n-      --  a pragma Float_Representation (VAX_Float) is used.\n-\n-      if Vax_Float (Id) then\n-         if Digs = VAXFF_Digits then\n-            L := Real_Convert\n-                   (VAXFF_First'Universal_Literal_String);\n-            H := Real_Convert\n-                   (VAXFF_Last'Universal_Literal_String);\n-\n-         elsif Digs = VAXDF_Digits then\n-            L := Real_Convert\n-                   (VAXDF_First'Universal_Literal_String);\n-            H := Real_Convert\n-                   (VAXDF_Last'Universal_Literal_String);\n-\n-         else\n-            pragma Assert (Digs = VAXGF_Digits);\n-\n-            L := Real_Convert\n-                   (VAXGF_First'Universal_Literal_String);\n-            H := Real_Convert\n-                   (VAXGF_Last'Universal_Literal_String);\n-         end if;\n-\n-      elsif Is_AAMP_Float (Id) then\n-         if Digs = AAMPS_Digits then\n-            L := Real_Convert\n-                   (AAMPS_First'Universal_Literal_String);\n-            H := Real_Convert\n-                   (AAMPS_Last'Universal_Literal_String);\n-\n-         else\n-            pragma Assert (Digs = AAMPL_Digits);\n-            L := Real_Convert\n-                   (AAMPL_First'Universal_Literal_String);\n-            H := Real_Convert\n-                   (AAMPL_Last'Universal_Literal_String);\n-         end if;\n+      --  will adjust these types appropriately in the Vax_Float case if a\n+      --  pragma Float_Representation (VAX_Float) is used.\n \n-      elsif Digs = IEEES_Digits then\n-         L := Real_Convert\n-                (IEEES_First'Universal_Literal_String);\n-         H := Real_Convert\n-                (IEEES_Last'Universal_Literal_String);\n-\n-      elsif Digs = IEEEL_Digits then\n-         L := Real_Convert\n-                (IEEEL_First'Universal_Literal_String);\n-         H := Real_Convert\n-                (IEEEL_Last'Universal_Literal_String);\n-\n-      else\n-         pragma Assert (Digs = IEEEX_Digits);\n-\n-         L := Real_Convert\n-                (IEEEX_First'Universal_Literal_String);\n-         H := Real_Convert\n-                (IEEEX_Last'Universal_Literal_String);\n-      end if;\n+      H := Make_Float_Literal (Stloc, Radix, Significand, Exponent);\n+      L := Make_Float_Literal (Stloc, Radix, -Significand, Exponent);\n \n       Set_Etype                (L, Id);\n       Set_Is_Static_Expression (L);"}, {"sha": "ad5eba98474fe69c7f224f1f077e15564b3e677d", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 157, "deletions": 6, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -32,11 +32,12 @@\n pragma Style_Checks (All_Checks);\n --  Turn off subprogram ordering, not used for this unit\n \n-with Atree;  use Atree;\n-with Nlists; use Nlists;\n-with Output; use Output;\n-with Sinfo;  use Sinfo;\n-with Stand;  use Stand;\n+with Atree;    use Atree;\n+with Nlists;   use Nlists;\n+with Output;   use Output;\n+with Sinfo;    use Sinfo;\n+with Stand;    use Stand;\n+with Targparm; use Targparm;\n \n package body Einfo is\n \n@@ -520,6 +521,12 @@ package body Einfo is\n    --    (unused)                        Flag253\n    --    (unused)                        Flag254\n \n+   -----------------\n+   -- Local types --\n+   -----------------\n+\n+   type Float_Rep_Kind is (IEEE_Binary, VAX_Native, AAMP);\n+\n    -----------------------\n    -- Local subprograms --\n    -----------------------\n@@ -528,6 +535,25 @@ package body Einfo is\n    --  Returns the attribute definition clause for Id whose name is Rep_Name.\n    --  Returns Empty if no matching attribute definition clause found for Id.\n \n+   function Float_Rep (Id : E) return Float_Rep_Kind;\n+   --  Returns the floating point representation used for the given type\n+\n+   ---------------\n+   -- Float_Rep --\n+   ---------------\n+\n+   function Float_Rep (Id : E) return Float_Rep_Kind is\n+      pragma Assert (Is_Floating_Point_Type (Id));\n+   begin\n+      if AAMP_On_Target then\n+         return AAMP;\n+      elsif Vax_Float (Id) then\n+         return VAX_Native;\n+      else\n+         return IEEE_Binary;\n+      end if;\n+   end Float_Rep;\n+\n    ----------------\n    -- Rep_Clause --\n    ----------------\n@@ -2185,12 +2211,84 @@ package body Einfo is\n       return Flag205 (Id);\n    end Low_Bound_Tested;\n \n+   function Machine_Emax_Value (Id : E) return Uint is\n+      Digs : constant Pos := UI_To_Int (Digits_Value (Base_Type (Id)));\n+\n+   begin\n+      case Float_Rep (Id) is\n+         when IEEE_Binary =>\n+            case Digs is\n+               when  1 ..  6 => return Uint_128;\n+               when  7 .. 15 => return 2**10;\n+               when 16 .. 18 => return 2**14;\n+               when others => return No_Uint;\n+            end case;\n+\n+         when VAX_Native =>\n+            case Digs is\n+               when  1 ..  9 => return 2**7 - 1;\n+               when 10 .. 15 => return 2**10 - 1;\n+               when others => return No_Uint;\n+            end case;\n+\n+         when AAMP =>\n+            return Uint_2 ** Uint_7 - Uint_1;\n+      end case;\n+   end Machine_Emax_Value;\n+\n+   function Machine_Emin_Value (Id : E) return Uint is\n+   begin\n+      case Float_Rep (Id) is\n+         when IEEE_Binary => return Uint_3 - Machine_Emax_Value (Id);\n+         when VAX_Native  => return -Machine_Emax_Value (Id);\n+         when AAMP        => return -Machine_Emax_Value (Id);\n+      end case;\n+   end Machine_Emin_Value;\n+\n+   function Machine_Mantissa_Value (Id : E) return Uint is\n+      Digs : constant Pos := UI_To_Int (Digits_Value (Base_Type (Id)));\n+\n+   begin\n+      case Float_Rep (Id) is\n+         when IEEE_Binary =>\n+            case Digs is\n+               when  1 ..  6 => return Uint_24;\n+               when  7 .. 15 => return UI_From_Int (53);\n+               when 16 .. 18 => return Uint_64;\n+               when others => return No_Uint;\n+            end case;\n+\n+         when VAX_Native =>\n+            case Digs is\n+               when  1 ..  6 => return Uint_24;\n+               when  7 ..  9 => return UI_From_Int (56);\n+               when 10 .. 15 => return UI_From_Int (53);\n+               when others => return No_Uint;\n+            end case;\n+\n+         when AAMP =>\n+            case Digs is\n+               when  1 ..  6 => return Uint_24;\n+               when  7 ..  9 => return UI_From_Int (40);\n+               when others => return No_Uint;\n+            end case;\n+      end case;\n+   end Machine_Mantissa_Value;\n+\n    function Machine_Radix_10 (Id : E) return B is\n    begin\n       pragma Assert (Is_Decimal_Fixed_Point_Type (Id));\n       return Flag84 (Id);\n    end Machine_Radix_10;\n \n+   function Machine_Radix_Value (Id : E) return U is\n+   begin\n+      case Float_Rep (Id) is\n+         when IEEE_Binary | VAX_Native | AAMP =>\n+            return Uint_2;\n+      end case;\n+   end Machine_Radix_Value;\n+\n    function Master_Id (Id : E) return E is\n    begin\n       pragma Assert (Is_Access_Type (Id));\n@@ -2208,6 +2306,28 @@ package body Einfo is\n       return UI_To_Int (Uint8 (Id));\n    end Mechanism;\n \n+   function Model_Emin_Value (Id : E) return Uint is\n+   begin\n+      return Machine_Emin_Value (Id);\n+   end Model_Emin_Value;\n+\n+   function Model_Epsilon_Value (Id : E) return Ureal is\n+      Radix : constant Ureal := UR_From_Uint (Machine_Radix_Value (Id));\n+   begin\n+      return Radix ** (1 - Model_Mantissa_Value (Id));\n+   end Model_Epsilon_Value;\n+\n+   function Model_Mantissa_Value (Id : E) return Uint is\n+   begin\n+      return Machine_Mantissa_Value (Id);\n+   end Model_Mantissa_Value;\n+\n+   function Model_Small_Value (Id : E) return Ureal is\n+      Radix : constant Ureal := UR_From_Uint (Machine_Radix_Value (Id));\n+   begin\n+      return Radix ** (Model_Emin_Value (Id) - 1);\n+   end Model_Small_Value;\n+\n    function Modulus (Id : E) return Uint is\n    begin\n       pragma Assert (Is_Modular_Integer_Type (Id));\n@@ -2540,6 +2660,38 @@ package body Einfo is\n       return Uint13 (Id);\n    end RM_Size;\n \n+   function Safe_Emax_Value (Id : E) return Uint is\n+   begin\n+      return Machine_Emax_Value (Id);\n+   end Safe_Emax_Value;\n+\n+   function Safe_First_Value (Id : E) return Ureal is\n+   begin\n+      return -Safe_Last_Value (Id);\n+   end Safe_First_Value;\n+\n+   function Safe_Last_Value (Id : E) return Ureal is\n+      Radix       : constant Uint := Machine_Radix_Value (Id);\n+      Mantissa    : constant Uint := Machine_Mantissa_Value (Id);\n+      Emax        : constant Uint := Safe_Emax_Value (Id);\n+      Significand : constant Uint := Radix ** Mantissa - 1;\n+      Exponent    : constant Uint := Emax - Mantissa;\n+   begin\n+      if Radix = 2 then\n+         return\n+           UR_From_Components\n+             (Num   => Significand * 2 ** (Exponent mod 4),\n+              Den   => -Exponent / 4,\n+              Rbase => 16);\n+      else\n+         return\n+           UR_From_Components\n+             (Num => Significand,\n+              Den => -Exponent,\n+              Rbase => 16);\n+      end if;\n+   end Safe_Last_Value;\n+\n    function Scalar_Range (Id : E) return N is\n    begin\n       return Node20 (Id);\n@@ -6549,7 +6701,6 @@ package body Einfo is\n       --  of analyzing default expressions.\n \n       P := Id;\n-\n       loop\n          P := Next_Entity (P);\n "}, {"sha": "f496a131a9c9454d00d4389bec47a2ff0592f8d2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -5094,6 +5094,17 @@ package Einfo is\n    --  E_Floating_Point_Type\n    --  E_Floating_Point_Subtype\n    --    Digits_Value                        (Uint17)\n+   --    Machine_Emax_Value                  (synth)\n+   --    Machine_Emin_Value                  (synth)\n+   --    Machine_Mantissa_Value              (synth)\n+   --    Machine_Radix_Value                 (synth)\n+   --    Model_Emin_Value                    (synth)\n+   --    Model_Epsilon_Value                 (synth)\n+   --    Model_Mantissa_Value                (synth)\n+   --    Model_Small_Value                   (synth)\n+   --    Safe_Emax_Value                     (synth)\n+   --    Safe_First_Value                    (synth)\n+   --    Safe_Last_Value                     (synth)\n    --    Scalar_Range                        (Node20)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n@@ -6334,6 +6345,14 @@ package Einfo is\n    function Is_Task_Record_Type                 (Id : E) return B;\n    function Is_Wrapper_Package                  (Id : E) return B;\n    function Last_Formal                         (Id : E) return E;\n+   function Machine_Emax_Value                  (Id : E) return U;\n+   function Machine_Emin_Value                  (Id : E) return U;\n+   function Machine_Mantissa_Value              (Id : E) return U;\n+   function Machine_Radix_Value                 (Id : E) return U;\n+   function Model_Emin_Value                    (Id : E) return U;\n+   function Model_Epsilon_Value                 (Id : E) return R;\n+   function Model_Mantissa_Value                (Id : E) return U;\n+   function Model_Small_Value                   (Id : E) return R;\n    function Next_Component                      (Id : E) return E;\n    function Next_Component_Or_Discriminant      (Id : E) return E;\n    function Next_Discriminant                   (Id : E) return E;\n@@ -6347,6 +6366,9 @@ package Einfo is\n    function Parameter_Mode                      (Id : E) return Formal_Kind;\n    function Primitive_Operations                (Id : E) return L;\n    function Root_Type                           (Id : E) return E;\n+   function Safe_Emax_Value                     (Id : E) return U;\n+   function Safe_First_Value                    (Id : E) return R;\n+   function Safe_Last_Value                     (Id : E) return R;\n    function Scope_Depth_Set                     (Id : E) return B;\n    function Size_Clause                         (Id : E) return N;\n    function Stream_Size_Clause                  (Id : E) return N;"}, {"sha": "3d0bff6a30fd915248fe236b2d3054c834b7581b", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 14, "deletions": 121, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,8 +25,6 @@\n \n with Einfo;    use Einfo;\n with Errout;   use Errout;\n-with Sem_Util; use Sem_Util;\n-with Ttypef;   use Ttypef;\n with Targparm; use Targparm;\n \n package body Eval_Fat is\n@@ -67,13 +65,11 @@ package body Eval_Fat is\n       Mode     : Rounding_Mode);\n    --  This is similar to Decompose, except that the Fraction value returned\n    --  is an integer representing the value Fraction * Scale, where Scale is\n-   --  the value (Radix ** Machine_Mantissa (RT)). The value is obtained by\n-   --  using biased rounding (halfway cases round away from zero), round to\n-   --  even, a floor operation or a ceiling operation depending on the setting\n-   --  of Mode (see corresponding descriptions in Urealp).\n-\n-   function Machine_Emin (RT : R) return Int;\n-   --  Return value of the Machine_Emin attribute\n+   --  the value (Machine_Radix_Value (RT) ** Machine_Mantissa_Value (RT)). The\n+   --  value is obtained by using biased rounding (halfway cases round away\n+   --  from zero), round to even, a floor operation or a ceiling operation\n+   --  depending on the setting of Mode (see corresponding descriptions in\n+   --  Urealp).\n \n    --------------\n    -- Adjacent --\n@@ -155,7 +151,7 @@ package body Eval_Fat is\n \n       Fraction := UR_From_Components\n        (Num      => Int_F,\n-        Den      => UI_From_Int (Machine_Mantissa (RT)),\n+        Den      => Machine_Mantissa_Value (RT),\n         Rbase    => Radix,\n         Negative => False);\n \n@@ -192,7 +188,7 @@ package body Eval_Fat is\n       --  True iff Fraction is even\n \n       Most_Significant_Digit : constant UI :=\n-                                 Radix ** (Machine_Mantissa (RT) - 1);\n+                                 Radix ** (Machine_Mantissa_Value (RT) - 1);\n \n       Uintp_Mark : Uintp.Save_Mark;\n       --  The code is divided into blocks that systematically release\n@@ -475,7 +471,7 @@ package body Eval_Fat is\n    ------------------\n \n    function Leading_Part (RT : R; X : T; Radix_Digits : UI) return T is\n-      RD : constant UI := UI_Min (Radix_Digits, Machine_Mantissa (RT));\n+      RD : constant UI := UI_Min (Radix_Digits, Machine_Mantissa_Value (RT));\n       L  : UI;\n       Y  : T;\n    begin\n@@ -496,7 +492,7 @@ package body Eval_Fat is\n    is\n       X_Frac : T;\n       X_Exp  : UI;\n-      Emin   : constant UI := UI_From_Int (Machine_Emin (RT));\n+      Emin   : constant UI := Machine_Emin_Value (RT);\n \n    begin\n       Decompose (RT, X, X_Frac, X_Exp, Mode);\n@@ -513,9 +509,8 @@ package body Eval_Fat is\n \n       if X_Exp < Emin then\n          declare\n-            Emin_Den : constant UI :=\n-                         UI_From_Int\n-                           (Machine_Emin (RT) - Machine_Mantissa (RT) + 1);\n+            Emin_Den : constant UI := Machine_Emin_Value (RT)\n+                                        - Machine_Mantissa_Value (RT) + Uint_1;\n          begin\n             if X_Exp < Emin_Den or not Denorm_On_Target then\n                if UR_Is_Negative (X) then\n@@ -569,108 +564,6 @@ package body Eval_Fat is\n       return Scaling (RT, X_Frac, X_Exp);\n    end Machine;\n \n-   ------------------\n-   -- Machine_Emin --\n-   ------------------\n-\n-   function Machine_Emin (RT : R) return Int is\n-      Digs : constant UI := Digits_Value (RT);\n-      Emin : Int;\n-\n-   begin\n-      if Vax_Float (RT) then\n-         if Digs = VAXFF_Digits then\n-            Emin := VAXFF_Machine_Emin;\n-\n-         elsif Digs = VAXDF_Digits then\n-            Emin := VAXDF_Machine_Emin;\n-\n-         else\n-            pragma Assert (Digs = VAXGF_Digits);\n-            Emin := VAXGF_Machine_Emin;\n-         end if;\n-\n-      elsif Is_AAMP_Float (RT) then\n-         if Digs = AAMPS_Digits then\n-            Emin := AAMPS_Machine_Emin;\n-\n-         else\n-            pragma Assert (Digs = AAMPL_Digits);\n-            Emin := AAMPL_Machine_Emin;\n-         end if;\n-\n-      else\n-         if Digs = IEEES_Digits then\n-            Emin := IEEES_Machine_Emin;\n-\n-         elsif Digs = IEEEL_Digits then\n-            Emin := IEEEL_Machine_Emin;\n-\n-         else\n-            pragma Assert (Digs = IEEEX_Digits);\n-            Emin := IEEEX_Machine_Emin;\n-         end if;\n-      end if;\n-\n-      return Emin;\n-   end Machine_Emin;\n-\n-   ----------------------\n-   -- Machine_Mantissa --\n-   ----------------------\n-\n-   function Machine_Mantissa (RT : R) return Nat is\n-      Digs : constant UI := Digits_Value (RT);\n-      Mant : Nat;\n-\n-   begin\n-      if Vax_Float (RT) then\n-         if Digs = VAXFF_Digits then\n-            Mant := VAXFF_Machine_Mantissa;\n-\n-         elsif Digs = VAXDF_Digits then\n-            Mant := VAXDF_Machine_Mantissa;\n-\n-         else\n-            pragma Assert (Digs = VAXGF_Digits);\n-            Mant := VAXGF_Machine_Mantissa;\n-         end if;\n-\n-      elsif Is_AAMP_Float (RT) then\n-         if Digs = AAMPS_Digits then\n-            Mant := AAMPS_Machine_Mantissa;\n-\n-         else\n-            pragma Assert (Digs = AAMPL_Digits);\n-            Mant := AAMPL_Machine_Mantissa;\n-         end if;\n-\n-      else\n-         if Digs = IEEES_Digits then\n-            Mant := IEEES_Machine_Mantissa;\n-\n-         elsif Digs = IEEEL_Digits then\n-            Mant := IEEEL_Machine_Mantissa;\n-\n-         else\n-            pragma Assert (Digs = IEEEX_Digits);\n-            Mant := IEEEX_Machine_Mantissa;\n-         end if;\n-      end if;\n-\n-      return Mant;\n-   end Machine_Mantissa;\n-\n-   -------------------\n-   -- Machine_Radix --\n-   -------------------\n-\n-   function Machine_Radix (RT : R) return Nat is\n-      pragma Warnings (Off, RT);\n-   begin\n-      return Radix;\n-   end Machine_Radix;\n-\n    -----------\n    -- Model --\n    -----------\n@@ -818,8 +711,8 @@ package body Eval_Fat is\n    ----------\n \n    function Succ (RT : R; X : T) return T is\n-      Emin     : constant UI := UI_From_Int (Machine_Emin (RT));\n-      Mantissa : constant UI := UI_From_Int (Machine_Mantissa (RT));\n+      Emin     : constant UI := Machine_Emin_Value (RT);\n+      Mantissa : constant UI := Machine_Mantissa_Value (RT);\n       Exp      : UI := UI_Max (Emin, Exponent (RT, X));\n       Frac     : T;\n       New_Frac : T;"}, {"sha": "964dd2224a52c6cf86d1b8b249a345642bc816bb", "filename": "gcc/ada/eval_fat.ads", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feval_fat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Feval_fat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.ads?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,10 +65,6 @@ package Eval_Fat is\n \n    function Leading_Part      (RT : R; X : T; Radix_Digits : UI)    return T;\n \n-   function Machine_Mantissa  (RT : R)                              return Nat;\n-\n-   function Machine_Radix     (RT : R)                              return Nat;\n-\n    function Model             (RT : R; X : T)                       return T;\n \n    function Pred              (RT : R; X : T)                       return T;"}, {"sha": "592114cf1d843ce3d09a218180d4644a97e34cc4", "filename": "gcc/ada/exp_vfpt.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fexp_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fexp_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_vfpt.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,12 +32,15 @@ with Sem_Res;  use Sem_Res;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n-with Ttypef;   use Ttypef;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n \n package body Exp_VFpt is\n \n+   VAXFF_Digits : constant := 6;\n+   VAXDF_Digits : constant := 9;\n+   VAXGF_Digits : constant := 15;\n+\n    ----------------------\n    -- Expand_Vax_Arith --\n    ----------------------"}, {"sha": "835c093598000ff2920810871f5c9952947c0f1a", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -328,7 +328,6 @@ GNAT_ADA_OBJS =\t\\\n  ada/tree_io.o\t\\\n  ada/treepr.o\t\\\n  ada/treeprs.o\t\\\n- ada/ttypef.o\t\\\n  ada/ttypes.o\t\\\n  ada/types.o\t\\\n  ada/uintp.o\t\\\n@@ -1549,7 +1548,7 @@ ada/cstand.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n    ada/s-traent.ads ada/s-unstyp.ads ada/s-utf_32.ads ada/s-wchcon.ads \\\n    ada/table.ads ada/table.adb ada/targparm.ads ada/tbuild.ads \\\n-   ada/tree_io.ads ada/ttypef.ads ada/ttypes.ads ada/types.ads \\\n+   ada/tree_io.ads ada/ttypes.ads ada/types.ads \\\n    ada/uintp.ads ada/uintp.adb ada/uname.ads ada/unchconv.ads \\\n    ada/unchdeal.ads ada/urealp.ads ada/urealp.adb ada/widechar.ads \n \n@@ -1643,7 +1642,7 @@ ada/eval_fat.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n    ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n    ada/s-wchcon.ads ada/table.ads ada/table.adb ada/targparm.ads \\\n-   ada/tree_io.ads ada/ttypef.ads ada/types.ads ada/uintp.ads \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n    ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n    ada/urealp.adb \n \n@@ -2388,7 +2387,7 @@ ada/exp_vfpt.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads \\\n    ada/s-parame.ads ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads \\\n    ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/tbuild.ads ada/tree_io.ads ada/ttypef.ads ada/types.ads \\\n+   ada/tbuild.ads ada/tree_io.ads ada/types.ads \\\n    ada/uintp.ads ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads \\\n    ada/urealp.ads ada/urealp.adb \n \n@@ -3351,7 +3350,7 @@ ada/sem_attr.o : ada/ada.ads ada/a-charac.ads ada/a-chlat1.ads \\\n    ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n    ada/s-traent.ads ada/s-unstyp.ads ada/s-utf_32.ads ada/s-wchcon.ads \\\n    ada/table.ads ada/table.adb ada/targparm.ads ada/tbuild.ads \\\n-   ada/tbuild.adb ada/tree_io.ads ada/ttypef.ads ada/ttypes.ads \\\n+   ada/tbuild.adb ada/tree_io.ads ada/ttypes.ads \\\n    ada/types.ads ada/types.adb ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n    ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/urealp.adb \\\n    ada/validsw.ads ada/widechar.ads \n@@ -4120,7 +4119,7 @@ ada/sem_vfpt.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n    ada/s-stalib.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n    ada/s-wchcon.ads ada/table.ads ada/table.adb ada/targparm.ads \\\n-   ada/tree_io.ads ada/ttypef.ads ada/types.ads ada/uintp.ads \\\n+   ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n    ada/uintp.adb ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \n \n ada/sem_warn.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n@@ -4434,8 +4433,6 @@ ada/treeprs.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/treeprs.ads ada/types.ads ada/uintp.ads ada/unchconv.ads \\\n    ada/unchdeal.ads ada/urealp.ads \n \n-ada/ttypef.o : ada/system.ads ada/ttypef.ads \n-\n ada/ttypes.o : ada/ada.ads ada/a-unccon.ads ada/get_targ.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-stalib.ads ada/s-unstyp.ads \\\n    ada/ttypes.ads ada/types.ads ada/unchconv.ads ada/unchdeal.ads "}, {"sha": "a59bb4e86c47e3dd2df13d42a133f5767f3c7c36", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -6450,9 +6450,7 @@ number.  The static result is the string consisting of the characters of\n the number as defined in the original source.  This allows the user\n program to access the actual text of named numbers without intermediate\n conversions and without the need to enclose the strings in quotes (which\n-would preclude their use as numbers).  This is used internally for the\n-construction of values of the floating-point attributes from the file\n-@file{ttypef.ads}, but may also be used by user programs.\n+would preclude their use as numbers).\n \n For example, the following program prints the first 50 digits of pi:\n \n@@ -9181,8 +9179,8 @@ random numbers is one microsecond.\n Annex is not supported.  See A.5.3(72).\n @end cartouche\n @noindent\n-See the source file @file{ttypef.ads} for the values of all numeric\n-attributes.\n+Run the compiler with @option{-gnatS} to produce a listing of package\n+@code{Standard}, has the values of all numeric attributes.\n \n @sp 1\n @cartouche"}, {"sha": "e62e55cde09c6c1b8bde31d849f131d68b82db58", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 12, "deletions": 235, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -66,7 +66,6 @@ with Style;\n with Stylesw;  use Stylesw;\n with Targparm; use Targparm;\n with Ttypes;   use Ttypes;\n-with Ttypef;   use Ttypef;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n@@ -4922,35 +4921,6 @@ package body Sem_Attr is\n       --  but compile time known value given by Val. It includes the\n       --  necessary checks for out of range values.\n \n-      procedure Float_Attribute_Universal_Integer\n-        (IEEES_Val : Int;\n-         IEEEL_Val : Int;\n-         IEEEX_Val : Int;\n-         VAXFF_Val : Int;\n-         VAXDF_Val : Int;\n-         VAXGF_Val : Int;\n-         AAMPS_Val : Int;\n-         AAMPL_Val : Int);\n-      --  This procedure evaluates a float attribute with no arguments that\n-      --  returns a universal integer result. The parameters give the values\n-      --  for the possible floating-point root types. See ttypef for details.\n-      --  The prefix type is a float type (and is thus not a generic type).\n-\n-      procedure Float_Attribute_Universal_Real\n-        (IEEES_Val : String;\n-         IEEEL_Val : String;\n-         IEEEX_Val : String;\n-         VAXFF_Val : String;\n-         VAXDF_Val : String;\n-         VAXGF_Val : String;\n-         AAMPS_Val : String;\n-         AAMPL_Val : String);\n-      --  This procedure evaluates a float attribute with no arguments that\n-      --  returns a universal real result. The parameters give the values\n-      --  required for the possible floating-point root types in string\n-      --  format as real literals with a possible leading minus sign.\n-      --  The prefix type is a float type (and is thus not a generic type).\n-\n       function Fore_Value return Nat;\n       --  Computes the Fore value for the current attribute prefix, which is\n       --  known to be a static fixed-point type. Used by Fore and Width.\n@@ -5052,103 +5022,6 @@ package body Sem_Attr is\n            Compile_Time_Known_Value (Type_High_Bound (Typ));\n       end Compile_Time_Known_Bounds;\n \n-      ---------------------------------------\n-      -- Float_Attribute_Universal_Integer --\n-      ---------------------------------------\n-\n-      procedure Float_Attribute_Universal_Integer\n-        (IEEES_Val : Int;\n-         IEEEL_Val : Int;\n-         IEEEX_Val : Int;\n-         VAXFF_Val : Int;\n-         VAXDF_Val : Int;\n-         VAXGF_Val : Int;\n-         AAMPS_Val : Int;\n-         AAMPL_Val : Int)\n-      is\n-         Val  : Int;\n-         Digs : constant Nat := UI_To_Int (Digits_Value (P_Base_Type));\n-\n-      begin\n-         if Vax_Float (P_Base_Type) then\n-            if Digs = VAXFF_Digits then\n-               Val := VAXFF_Val;\n-            elsif Digs = VAXDF_Digits then\n-               Val := VAXDF_Val;\n-            else pragma Assert (Digs = VAXGF_Digits);\n-               Val := VAXGF_Val;\n-            end if;\n-\n-         elsif Is_AAMP_Float (P_Base_Type) then\n-            if Digs = AAMPS_Digits then\n-               Val := AAMPS_Val;\n-            else pragma Assert (Digs = AAMPL_Digits);\n-               Val := AAMPL_Val;\n-            end if;\n-\n-         else\n-            if Digs = IEEES_Digits then\n-               Val := IEEES_Val;\n-            elsif Digs = IEEEL_Digits then\n-               Val := IEEEL_Val;\n-            else pragma Assert (Digs = IEEEX_Digits);\n-               Val := IEEEX_Val;\n-            end if;\n-         end if;\n-\n-         Fold_Uint (N, UI_From_Int (Val), True);\n-      end Float_Attribute_Universal_Integer;\n-\n-      ------------------------------------\n-      -- Float_Attribute_Universal_Real --\n-      ------------------------------------\n-\n-      procedure Float_Attribute_Universal_Real\n-        (IEEES_Val : String;\n-         IEEEL_Val : String;\n-         IEEEX_Val : String;\n-         VAXFF_Val : String;\n-         VAXDF_Val : String;\n-         VAXGF_Val : String;\n-         AAMPS_Val : String;\n-         AAMPL_Val : String)\n-      is\n-         Val  : Node_Id;\n-         Digs : constant Nat := UI_To_Int (Digits_Value (P_Base_Type));\n-\n-      begin\n-         if Vax_Float (P_Base_Type) then\n-            if Digs = VAXFF_Digits then\n-               Val := Real_Convert (VAXFF_Val);\n-            elsif Digs = VAXDF_Digits then\n-               Val := Real_Convert (VAXDF_Val);\n-            else pragma Assert (Digs = VAXGF_Digits);\n-               Val := Real_Convert (VAXGF_Val);\n-            end if;\n-\n-         elsif Is_AAMP_Float (P_Base_Type) then\n-            if Digs = AAMPS_Digits then\n-               Val := Real_Convert (AAMPS_Val);\n-            else pragma Assert (Digs = AAMPL_Digits);\n-               Val := Real_Convert (AAMPL_Val);\n-            end if;\n-\n-         else\n-            if Digs = IEEES_Digits then\n-               Val := Real_Convert (IEEES_Val);\n-            elsif Digs = IEEEL_Digits then\n-               Val := Real_Convert (IEEEL_Val);\n-            else pragma Assert (Digs = IEEEX_Digits);\n-               Val := Real_Convert (IEEEX_Val);\n-            end if;\n-         end if;\n-\n-         Set_Sloc (Val, Loc);\n-         Rewrite (N, Val);\n-         Set_Is_Static_Expression (N, Static);\n-         Analyze_And_Resolve (N, C_Type);\n-      end Float_Attribute_Universal_Real;\n-\n       ----------------\n       -- Fore_Value --\n       ----------------\n@@ -6402,45 +6275,21 @@ package body Sem_Attr is\n       ------------------\n \n       when Attribute_Machine_Emax =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Machine_Emax,\n-           IEEEL_Machine_Emax,\n-           IEEEX_Machine_Emax,\n-           VAXFF_Machine_Emax,\n-           VAXDF_Machine_Emax,\n-           VAXGF_Machine_Emax,\n-           AAMPS_Machine_Emax,\n-           AAMPL_Machine_Emax);\n+         Fold_Uint (N, Machine_Emax_Value (P_Type), Static);\n \n       ------------------\n       -- Machine_Emin --\n       ------------------\n \n       when Attribute_Machine_Emin =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Machine_Emin,\n-           IEEEL_Machine_Emin,\n-           IEEEX_Machine_Emin,\n-           VAXFF_Machine_Emin,\n-           VAXDF_Machine_Emin,\n-           VAXGF_Machine_Emin,\n-           AAMPS_Machine_Emin,\n-           AAMPL_Machine_Emin);\n+         Fold_Uint (N, Machine_Emin_Value (P_Type), Static);\n \n       ----------------------\n       -- Machine_Mantissa --\n       ----------------------\n \n       when Attribute_Machine_Mantissa =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Machine_Mantissa,\n-           IEEEL_Machine_Mantissa,\n-           IEEEX_Machine_Mantissa,\n-           VAXFF_Machine_Mantissa,\n-           VAXDF_Machine_Mantissa,\n-           VAXGF_Machine_Mantissa,\n-           AAMPS_Machine_Mantissa,\n-           AAMPL_Machine_Mantissa);\n+         Fold_Uint (N, Machine_Mantissa_Value (P_Type), Static);\n \n       -----------------------\n       -- Machine_Overflows --\n@@ -6731,60 +6580,28 @@ package body Sem_Attr is\n       ----------------\n \n       when Attribute_Model_Emin =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Model_Emin,\n-           IEEEL_Model_Emin,\n-           IEEEX_Model_Emin,\n-           VAXFF_Model_Emin,\n-           VAXDF_Model_Emin,\n-           VAXGF_Model_Emin,\n-           AAMPS_Model_Emin,\n-           AAMPL_Model_Emin);\n+         Fold_Uint (N, Model_Emin_Value (P_Base_Type), Static);\n \n       -------------------\n       -- Model_Epsilon --\n       -------------------\n \n       when Attribute_Model_Epsilon =>\n-         Float_Attribute_Universal_Real (\n-           IEEES_Model_Epsilon'Universal_Literal_String,\n-           IEEEL_Model_Epsilon'Universal_Literal_String,\n-           IEEEX_Model_Epsilon'Universal_Literal_String,\n-           VAXFF_Model_Epsilon'Universal_Literal_String,\n-           VAXDF_Model_Epsilon'Universal_Literal_String,\n-           VAXGF_Model_Epsilon'Universal_Literal_String,\n-           AAMPS_Model_Epsilon'Universal_Literal_String,\n-           AAMPL_Model_Epsilon'Universal_Literal_String);\n+         Fold_Ureal (N, Model_Epsilon_Value (P_Base_Type), Static);\n \n       --------------------\n       -- Model_Mantissa --\n       --------------------\n \n       when Attribute_Model_Mantissa =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Model_Mantissa,\n-           IEEEL_Model_Mantissa,\n-           IEEEX_Model_Mantissa,\n-           VAXFF_Model_Mantissa,\n-           VAXDF_Model_Mantissa,\n-           VAXGF_Model_Mantissa,\n-           AAMPS_Model_Mantissa,\n-           AAMPL_Model_Mantissa);\n+         Fold_Uint (N, Model_Mantissa_Value (P_Base_Type), Static);\n \n       -----------------\n       -- Model_Small --\n       -----------------\n \n       when Attribute_Model_Small =>\n-         Float_Attribute_Universal_Real (\n-           IEEES_Model_Small'Universal_Literal_String,\n-           IEEEL_Model_Small'Universal_Literal_String,\n-           IEEEX_Model_Small'Universal_Literal_String,\n-           VAXFF_Model_Small'Universal_Literal_String,\n-           VAXDF_Model_Small'Universal_Literal_String,\n-           VAXGF_Model_Small'Universal_Literal_String,\n-           AAMPS_Model_Small'Universal_Literal_String,\n-           AAMPL_Model_Small'Universal_Literal_String);\n+         Fold_Ureal (N, Model_Small_Value (P_Base_Type), Static);\n \n       -------------\n       -- Modulus --\n@@ -7002,30 +6819,14 @@ package body Sem_Attr is\n       ---------------\n \n       when Attribute_Safe_Emax =>\n-         Float_Attribute_Universal_Integer (\n-           IEEES_Safe_Emax,\n-           IEEEL_Safe_Emax,\n-           IEEEX_Safe_Emax,\n-           VAXFF_Safe_Emax,\n-           VAXDF_Safe_Emax,\n-           VAXGF_Safe_Emax,\n-           AAMPS_Safe_Emax,\n-           AAMPL_Safe_Emax);\n+         Fold_Uint (N, Safe_Emax_Value (P_Type), Static);\n \n       ----------------\n       -- Safe_First --\n       ----------------\n \n       when Attribute_Safe_First =>\n-         Float_Attribute_Universal_Real (\n-           IEEES_Safe_First'Universal_Literal_String,\n-           IEEEL_Safe_First'Universal_Literal_String,\n-           IEEEX_Safe_First'Universal_Literal_String,\n-           VAXFF_Safe_First'Universal_Literal_String,\n-           VAXDF_Safe_First'Universal_Literal_String,\n-           VAXGF_Safe_First'Universal_Literal_String,\n-           AAMPS_Safe_First'Universal_Literal_String,\n-           AAMPL_Safe_First'Universal_Literal_String);\n+         Fold_Ureal (N, Safe_First_Value (P_Type), Static);\n \n       ----------------\n       -- Safe_Large --\n@@ -7036,31 +6837,15 @@ package body Sem_Attr is\n             Fold_Ureal\n               (N, Expr_Value_R (Type_High_Bound (P_Base_Type)), Static);\n          else\n-            Float_Attribute_Universal_Real (\n-              IEEES_Safe_Large'Universal_Literal_String,\n-              IEEEL_Safe_Large'Universal_Literal_String,\n-              IEEEX_Safe_Large'Universal_Literal_String,\n-              VAXFF_Safe_Large'Universal_Literal_String,\n-              VAXDF_Safe_Large'Universal_Literal_String,\n-              VAXGF_Safe_Large'Universal_Literal_String,\n-              AAMPS_Safe_Large'Universal_Literal_String,\n-              AAMPL_Safe_Large'Universal_Literal_String);\n+            Fold_Ureal (N, Safe_Last_Value (P_Type), Static);\n          end if;\n \n       ---------------\n       -- Safe_Last --\n       ---------------\n \n       when Attribute_Safe_Last =>\n-         Float_Attribute_Universal_Real (\n-           IEEES_Safe_Last'Universal_Literal_String,\n-           IEEEL_Safe_Last'Universal_Literal_String,\n-           IEEEX_Safe_Last'Universal_Literal_String,\n-           VAXFF_Safe_Last'Universal_Literal_String,\n-           VAXDF_Safe_Last'Universal_Literal_String,\n-           VAXGF_Safe_Last'Universal_Literal_String,\n-           AAMPS_Safe_Last'Universal_Literal_String,\n-           AAMPL_Safe_Last'Universal_Literal_String);\n+         Fold_Ureal (N, Safe_Last_Value (P_Type), Static);\n \n       ----------------\n       -- Safe_Small --\n@@ -7078,15 +6863,7 @@ package body Sem_Attr is\n          --  Ada 83 Safe_Small for floating-point cases\n \n          else\n-            Float_Attribute_Universal_Real (\n-              IEEES_Safe_Small'Universal_Literal_String,\n-              IEEEL_Safe_Small'Universal_Literal_String,\n-              IEEEX_Safe_Small'Universal_Literal_String,\n-              VAXFF_Safe_Small'Universal_Literal_String,\n-              VAXDF_Safe_Small'Universal_Literal_String,\n-              VAXGF_Safe_Small'Universal_Literal_String,\n-              AAMPS_Safe_Small'Universal_Literal_String,\n-              AAMPL_Safe_Small'Universal_Literal_String);\n+            Fold_Ureal (N, Model_Small_Value (P_Type), Static);\n          end if;\n \n       -----------"}, {"sha": "6db8949be33ab826b517bfcb62901f087ba7d6a8", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -502,15 +502,12 @@ package Sem_Attr is\n       ------------------------------\n \n       Attribute_Universal_Literal_String => True,\n-      --  The prefix of 'Universal_Literal_String must be a named number. The\n-      --  static result is the string consisting of the characters of the\n-      --  number as defined in the original source. This allows the user\n-      --  program to access the actual text of named numbers without\n-      --  intermediate conversions and without the need to enclose the strings\n-      --  in quotes (which would preclude their use as numbers). This is used\n-      --  internally for the construction of values of the floating-point\n-      --  attributes from the file ttypef.ads, but may also be used by user\n-      --  programs.\n+      --  The prefix of 'Universal_Literal_String must be a named number.\n+      --  The static result is the string consisting of the characters of\n+      --  the number as defined in the original source. This allows the\n+      --  user program to access the actual text of named numbers without\n+      --  intermediate conversions and without the need to enclose the\n+      --  strings in quotes (which would preclude their use as numbers).\n \n       -------------------------\n       -- Unrestricted_Access --"}, {"sha": "109ee5809760b1c74e1cdf22f1942f953682bb61", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -41,8 +41,6 @@ with Nlists;   use Nlists;\n with Output;   use Output;\n with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n-with Scans;    use Scans;\n-with Scn;      use Scn;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Attr; use Sem_Attr;\n@@ -10164,45 +10162,6 @@ package body Sem_Util is\n       Set_Sloc (Endl, Loc);\n    end Process_End_Label;\n \n-   ------------------\n-   -- Real_Convert --\n-   ------------------\n-\n-   --  We do the conversion to get the value of the real string by using\n-   --  the scanner, see Sinput for details on use of the internal source\n-   --  buffer for scanning internal strings.\n-\n-   function Real_Convert (S : String) return Node_Id is\n-      Save_Src : constant Source_Buffer_Ptr := Source;\n-      Negative : Boolean;\n-\n-   begin\n-      Source := Internal_Source_Ptr;\n-      Scan_Ptr := 1;\n-\n-      for J in S'Range loop\n-         Source (Source_Ptr (J)) := S (J);\n-      end loop;\n-\n-      Source (S'Length + 1) := EOF;\n-\n-      if Source (Scan_Ptr) = '-' then\n-         Negative := True;\n-         Scan_Ptr := Scan_Ptr + 1;\n-      else\n-         Negative := False;\n-      end if;\n-\n-      Scan;\n-\n-      if Negative then\n-         Set_Realval (Token_Node, UR_Negate (Realval (Token_Node)));\n-      end if;\n-\n-      Source := Save_Src;\n-      return Token_Node;\n-   end Real_Convert;\n-\n    ------------------------------------\n    -- References_Generic_Formal_Type --\n    ------------------------------------"}, {"sha": "be4987b9494c62802f43fcef297ba77e9dd50e8f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -1096,10 +1096,6 @@ package Sem_Util is\n    --  parameter Ent gives the entity to which the End_Label refers,\n    --  and to which cross-references are to be generated.\n \n-   function Real_Convert (S : String) return Node_Id;\n-   --  S is a possibly signed syntactically valid real literal. The result\n-   --  returned is an N_Real_Literal node representing the literal value.\n-\n    function References_Generic_Formal_Type (N : Node_Id) return Boolean;\n    --  Returns True if the expression Expr contains any references to a\n    --  generic type. This can only happen within a generic template."}, {"sha": "2ffd122278d44c217297fb7a732b9f43f175b30a", "filename": "gcc/ada/sem_vfpt.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Fsem_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_vfpt.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -28,7 +28,6 @@ with Einfo;    use Einfo;\n with Opt;      use Opt;\n with Stand;    use Stand;\n with Targparm; use Targparm;\n-with Ttypef;   use Ttypef;\n \n package body Sem_VFpt is\n \n@@ -37,6 +36,8 @@ package body Sem_VFpt is\n    -----------------\n \n    procedure Set_D_Float (E : Entity_Id) is\n+      VAXDF_Digits : constant := 9;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -55,6 +56,8 @@ package body Sem_VFpt is\n    -----------------\n \n    procedure Set_F_Float (E : Entity_Id) is\n+      VAXFF_Digits : constant := 6;\n+\n    begin\n       Init_Size         (Base_Type (E), 32);\n       Init_Alignment    (Base_Type (E));\n@@ -73,6 +76,8 @@ package body Sem_VFpt is\n    -----------------\n \n    procedure Set_G_Float (E : Entity_Id) is\n+      VAXGF_Digits : constant := 15;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -91,6 +96,8 @@ package body Sem_VFpt is\n    -------------------\n \n    procedure Set_IEEE_Long (E : Entity_Id) is\n+      IEEEL_Digits : constant := 15;\n+\n    begin\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n@@ -109,6 +116,8 @@ package body Sem_VFpt is\n    --------------------\n \n    procedure Set_IEEE_Short (E : Entity_Id) is\n+      IEEES_Digits : constant := 6;\n+\n    begin\n       Init_Size         (Base_Type (E), 32);\n       Init_Alignment    (Base_Type (E));"}, {"sha": "3edb41e6e93c12f4dc906bb9ccab80f6b3783cfa", "filename": "gcc/ada/tbuild.adb", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Ftbuild.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Ftbuild.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.adb?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -36,7 +36,7 @@ with Sem_Aux;  use Sem_Aux;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Uintp;    use Uintp;\n+with Urealp;   use Urealp;\n \n package body Tbuild is\n \n@@ -198,6 +198,40 @@ package body Tbuild is\n               New_Reference_To (First_Tag_Component (Full_Type), Loc)));\n    end Make_DT_Access;\n \n+   ------------------------\n+   -- Make_Float_Literal --\n+   ------------------------\n+\n+   function Make_Float_Literal\n+     (Loc         : Source_Ptr;\n+      Radix       : Uint;\n+      Significand : Uint;\n+      Exponent    : Uint) return Node_Id\n+   is\n+   begin\n+      if Radix = 2 and then abs Significand /= 1 then\n+         return\n+           Make_Float_Literal\n+             (Loc, Uint_16,\n+              Significand * Radix**(Exponent mod 4),\n+              Exponent / 4);\n+\n+      else\n+         declare\n+            N : constant Node_Id := New_Node (N_Real_Literal, Loc);\n+\n+         begin\n+            Set_Realval (N,\n+              UR_From_Components\n+                (Num      => abs Significand,\n+                 Den      => -Exponent,\n+                 Rbase    => UI_To_Int (Radix),\n+                 Negative => Significand < 0));\n+            return N;\n+         end;\n+      end if;\n+   end Make_Float_Literal;\n+\n    -------------------------------------\n    -- Make_Implicit_Exception_Handler --\n    -------------------------------------"}, {"sha": "9ba042705922d9772f70aad3311cfff41cb6b329", "filename": "gcc/ada/tbuild.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Ftbuild.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21/gcc%2Fada%2Ftbuild.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftbuild.ads?ref=d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "patch": "@@ -29,6 +29,7 @@\n with Namet; use Namet;\n with Sinfo; use Sinfo;\n with Types; use Types;\n+with Uintp; use Uintp;\n \n package Tbuild is\n \n@@ -75,6 +76,14 @@ package Tbuild is\n    --  Create an access to the Dispatch Table by using the Tag field of a\n    --  tagged record : Acc_Dt (Rec.tag).all\n \n+   function Make_Float_Literal\n+     (Loc         : Source_Ptr;\n+      Radix       : Uint;\n+      Significand : Uint;\n+      Exponent    : Uint) return Node_Id;\n+   --  Create a real literal for the floating point expression value\n+   --  Significand * Radix ** Exponent. Radix must be greater than 1.\n+\n    function Make_Implicit_Exception_Handler\n      (Sloc              : Source_Ptr;\n       Choice_Parameter  : Node_Id := Empty;"}, {"sha": "58cdbff834226ac3e0425a216e011dd4347d3f85", "filename": "gcc/ada/ttypef.ads", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8110ee3b6349ae4b1a369996a25161dc6a0f067e/gcc%2Fada%2Fttypef.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8110ee3b6349ae4b1a369996a25161dc6a0f067e/gcc%2Fada%2Fttypef.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypef.ads?ref=8110ee3b6349ae4b1a369996a25161dc6a0f067e", "patch": "@@ -1,204 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               T T Y P E F                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This module contains values for the predefined floating-point attributes.\n---  All references to these attribute values in a program being compiled must\n---  use the values in this package, not the values returned by referencing\n---  the corresponding attributes (since that would give host machine values).\n---  Boolean-valued attributes are defined in System.Parameters, because they\n---  need a finer control than what is provided by the formats described below.\n-\n---  The codes for the eight floating-point formats supported are:\n-\n---      IEEES - IEEE Single Float\n---      IEEEL - IEEE Double Float\n---      IEEEX - IEEE Double Extended Float\n---      VAXFF - VAX F Float\n---      VAXDF - VAX D Float\n---      VAXGF - VAX G Float\n---      AAMPS - AAMP 32-bit Float\n---      AAMPL - AAMP 48-bit Float\n-\n-package Ttypef is\n-\n-   ----------------------------------\n-   -- Universal Integer Attributes --\n-   ----------------------------------\n-\n-   --  Note that the constant declarations below specify values\n-   --  using the Ada model, so IEEES_Machine_Emax does not specify\n-   --  the IEEE definition of the single precision float type,\n-   --  but the value of the Ada attribute which is one higher\n-   --  as the binary point is at a different location.\n-\n-   IEEES_Digits            : constant := 6;\n-   IEEEL_Digits            : constant := 15;\n-   IEEEX_Digits            : constant := 18;\n-   VAXFF_Digits            : constant := 6;\n-   VAXDF_Digits            : constant := 9;\n-   VAXGF_Digits            : constant := 15;\n-   AAMPS_Digits            : constant := 6;\n-   AAMPL_Digits            : constant := 9;\n-\n-   IEEES_Machine_Emax      : constant := 128;\n-   IEEEL_Machine_Emax      : constant := 1024;\n-   IEEEX_Machine_Emax      : constant := 16384;\n-   VAXFF_Machine_Emax      : constant := 127;\n-   VAXDF_Machine_Emax      : constant := 127;\n-   VAXGF_Machine_Emax      : constant := 1023;\n-   AAMPS_Machine_Emax      : constant := 127;\n-   AAMPL_Machine_Emax      : constant := 127;\n-\n-   IEEES_Machine_Emin      : constant := -125;\n-   IEEEL_Machine_Emin      : constant := -1021;\n-   IEEEX_Machine_Emin      : constant := -16381;\n-   VAXFF_Machine_Emin      : constant := -127;\n-   VAXDF_Machine_Emin      : constant := -127;\n-   VAXGF_Machine_Emin      : constant := -1023;\n-   AAMPS_Machine_Emin      : constant := -127;\n-   AAMPL_Machine_Emin      : constant := -127;\n-\n-   IEEES_Machine_Mantissa  : constant := 24;\n-   IEEEL_Machine_Mantissa  : constant := 53;\n-   IEEEX_Machine_Mantissa  : constant := 64;\n-   VAXFF_Machine_Mantissa  : constant := 24;\n-   VAXDF_Machine_Mantissa  : constant := 56;\n-   VAXGF_Machine_Mantissa  : constant := 53;\n-   AAMPS_Machine_Mantissa  : constant := 24;\n-   AAMPL_Machine_Mantissa  : constant := 40;\n-\n-   IEEES_Model_Emin        : constant := -125;\n-   IEEEL_Model_Emin        : constant := -1021;\n-   IEEEX_Model_Emin        : constant := -16381;\n-   VAXFF_Model_Emin        : constant := -127;\n-   VAXDF_Model_Emin        : constant := -127;\n-   VAXGF_Model_Emin        : constant := -1023;\n-   AAMPS_Model_Emin        : constant := -127;\n-   AAMPL_Model_Emin        : constant := -127;\n-\n-   IEEES_Model_Mantissa    : constant := 24;\n-   IEEEL_Model_Mantissa    : constant := 53;\n-   IEEEX_Model_Mantissa    : constant := 64;\n-   VAXFF_Model_Mantissa    : constant := 24;\n-   VAXDF_Model_Mantissa    : constant := 56;\n-   VAXGF_Model_Mantissa    : constant := 53;\n-   AAMPS_Model_Mantissa    : constant := 24;\n-   AAMPL_Model_Mantissa    : constant := 40;\n-\n-   IEEES_Safe_Emax         : constant := 128;\n-   IEEEL_Safe_Emax         : constant := 1024;\n-   IEEEX_Safe_Emax         : constant := 16384;\n-   VAXFF_Safe_Emax         : constant := 127;\n-   VAXDF_Safe_Emax         : constant := 127;\n-   VAXGF_Safe_Emax         : constant := 1023;\n-   AAMPS_Safe_Emax         : constant := 127;\n-   AAMPL_Safe_Emax         : constant := 127;\n-\n-   -------------------------------\n-   -- Universal Real Attributes --\n-   -------------------------------\n-\n-   IEEES_Model_Epsilon     : constant := 2#1.0#E-23;\n-   IEEEL_Model_Epsilon     : constant := 2#1.0#E-52;\n-   IEEEX_Model_Epsilon     : constant := 2#1.0#E-63;\n-   VAXFF_Model_Epsilon     : constant := 2#1.0#E-23;\n-   VAXDF_Model_Epsilon     : constant := 2#1.0#E-55;\n-   VAXGF_Model_Epsilon     : constant := 2#1.0#E-52;\n-   AAMPS_Model_Epsilon     : constant := 2#1.0#E-23;\n-   AAMPL_Model_Epsilon     : constant := 2#1.0#E-39;\n-\n-   IEEES_Model_Small       : constant := 2#1.0#E-126;\n-   IEEEL_Model_Small       : constant := 2#1.0#E-1022;\n-   IEEEX_Model_Small       : constant := 2#1.0#E-16382;\n-   VAXFF_Model_Small       : constant := 2#1.0#E-128;\n-   VAXDF_Model_Small       : constant := 2#1.0#E-128;\n-   VAXGF_Model_Small       : constant := 2#1.0#E-1024;\n-   AAMPS_Model_Small       : constant := 2#1.0#E-128;\n-   AAMPL_Model_Small       : constant := 2#1.0#E-128;\n-\n-   IEEES_Safe_First        : constant := -16#0.FFFF_FF#E+32;\n-   IEEEL_Safe_First        : constant := -16#0.FFFF_FFFF_FFFF_F8#E+256;\n-   IEEEX_Safe_First        : constant := -16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_Safe_First        : constant := -16#0.7FFF_FF8#E+32;\n-   VAXDF_Safe_First        : constant := -16#0.7FFF_FFFF_FFFF_FF8#E+32;\n-   VAXGF_Safe_First        : constant := -16#0.7FFF_FFFF_FFFF_FC#E+256;\n-   AAMPS_Safe_First        : constant := -16#0.7FFF_FF8#E+32;\n-   AAMPL_Safe_First        : constant := -16#0.7FFF_FFFF_FF8#E+32;\n-\n-   IEEES_Safe_Large        : constant := 16#0.FFFF_FF#E+32;\n-   IEEEL_Safe_Large        : constant := 16#0.FFFF_FFFF_FFFF_F8#E+256;\n-   IEEEX_Safe_Large        : constant := 16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_Safe_Large        : constant := 16#0.7FFF_FF8#E+32;\n-   VAXDF_Safe_Large        : constant := 16#0.7FFF_FFFF_FFFF_FF8#E+32;\n-   VAXGF_Safe_Large        : constant := 16#0.7FFF_FFFF_FFFF_FC#E+256;\n-   AAMPS_Safe_Large        : constant := 16#0.7FFF_FF8#E+32;\n-   AAMPL_Safe_Large        : constant := 16#0.7FFF_FFFF_FF8#E+32;\n-\n-   IEEES_Safe_Last         : constant := 16#0.FFFF_FF#E+32;\n-   IEEEL_Safe_Last         : constant := 16#0.FFFF_FFFF_FFFF_F8#E+256;\n-   IEEEX_Safe_Last         : constant := 16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_Safe_Last         : constant := 16#0.7FFF_FF8#E+32;\n-   VAXDF_Safe_Last         : constant := 16#0.7FFF_FFFF_FFFF_FF8#E+32;\n-   VAXGF_Safe_Last         : constant := 16#0.7FFF_FFFF_FFFF_FC#E+256;\n-   AAMPS_Safe_Last         : constant := 16#0.7FFF_FF8#E+32;\n-   AAMPL_Safe_Last         : constant := 16#0.7FFF_FFFF_FF8#E+32;\n-\n-   IEEES_Safe_Small        : constant := 2#1.0#E-126;\n-   IEEEL_Safe_Small        : constant := 2#1.0#E-1022;\n-   IEEEX_Safe_Small        : constant := 2#1.0#E-16382;\n-   VAXFF_Safe_Small        : constant := 2#1.0#E-128;\n-   VAXDF_Safe_Small        : constant := 2#1.0#E-128;\n-   VAXGF_Safe_Small        : constant := 2#1.0#E-1024;\n-   AAMPS_Safe_Small        : constant := 2#1.0#E-128;\n-   AAMPL_Safe_Small        : constant := 2#1.0#E-128;\n-\n-   ----------------------\n-   -- Typed Attributes --\n-   ----------------------\n-\n-   --  The attributes First and Last are typed attributes in Ada, and yield\n-   --  values of the appropriate float type. However we still describe them\n-   --  as universal real values in this file, since we are talking about the\n-   --  target floating-point types, not the host floating-point types.\n-\n-   IEEES_First             : constant := -16#0.FFFF_FF#E+32;\n-   IEEEL_First             : constant := -16#0.FFFF_FFFF_FFFF_F8#E+256;\n-   IEEEX_First             : constant := -16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_First             : constant := -16#0.7FFF_FF8#E+32;\n-   VAXDF_First             : constant := -16#0.7FFF_FFFF_FFFF_FF8#E+32;\n-   VAXGF_First             : constant := -16#0.7FFF_FFFF_FFFF_FC#E+256;\n-   AAMPS_First             : constant := -16#0.7FFF_FF8#E+32;\n-   AAMPL_First             : constant := -16#0.7FFF_FFFF_FF8#E+32;\n-\n-   IEEES_Last              : constant := 16#0.FFFF_FF#E+32;\n-   IEEEL_Last              : constant := 16#0.FFFF_FFFF_FFFF_F8#E+256;\n-   IEEEX_Last              : constant := 16#0.FFFF_FFFF_FFFF_FFFF#E+4096;\n-   VAXFF_Last              : constant := 16#0.7FFF_FF8#E+32;\n-   VAXDF_Last              : constant := 16#0.7FFF_FFFF_FFFF_FF8#E+32;\n-   VAXGF_Last              : constant := 16#0.7FFF_FFFF_FFFF_FC#E+256;\n-   AAMPS_Last              : constant := 16#0.7FFF_FF8#E+32;\n-   AAMPL_Last              : constant := 16#0.7FFF_FFFF_FF8#E+32;\n-\n-end Ttypef;"}]}