{"sha": "574817a219778a2800ff781cb583205b391821f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0ODE3YTIxOTc3OGEyODAwZmY3ODFjYjU4MzIwNWIzOTE4MjFmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-01T21:07:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-01T21:07:22Z"}, "message": "pt.c (instantiate_class_template): Don't mess with friends if our type uses template parms.\n\n\t* pt.c (instantiate_class_template): Don't mess with friends if\n\tour type uses template parms.\n\nFrom-SVN: r18350", "tree": {"sha": "e2752f6fe2f012885159b6748862769c1389710b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2752f6fe2f012885159b6748862769c1389710b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574817a219778a2800ff781cb583205b391821f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574817a219778a2800ff781cb583205b391821f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574817a219778a2800ff781cb583205b391821f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574817a219778a2800ff781cb583205b391821f0/comments", "author": null, "committer": null, "parents": [{"sha": "ab63953e195fafba4a81e18d6f785a8b2fb60669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab63953e195fafba4a81e18d6f785a8b2fb60669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab63953e195fafba4a81e18d6f785a8b2fb60669"}], "stats": {"total": 110, "additions": 56, "deletions": 54}, "files": [{"sha": "cf011cc396787c46b381e86e6e598db1500f4ba5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574817a219778a2800ff781cb583205b391821f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574817a219778a2800ff781cb583205b391821f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=574817a219778a2800ff781cb583205b391821f0", "patch": "@@ -1,3 +1,8 @@\n+Sun Mar  1 21:06:37 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Don't mess with friends if\n+\tour type uses template parms.\n+\n Sat Feb 28 12:06:44 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* parse.y (nested_name_specifier): Use explicit_template_type."}, {"sha": "027700e4b938b3f47f4626f660843404a1be2b4b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574817a219778a2800ff781cb583205b391821f0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574817a219778a2800ff781cb583205b391821f0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=574817a219778a2800ff781cb583205b391821f0", "patch": "@@ -3153,74 +3153,71 @@ instantiate_class_template (type)\n \tgrok_op_properties (t, DECL_VIRTUAL_P (t), 0);\n     }\n \n-  /* Construct the DECL_FRIENDLIST for the new class type.  */\n-  typedecl = TYPE_MAIN_DECL (type);\n-  for (t = DECL_FRIENDLIST (TYPE_MAIN_DECL (pattern));\n-       t != NULL_TREE;\n-       t = TREE_CHAIN (t))\n+  if (! uses_template_parms (type))\n     {\n-      tree friends;\n+      /* Construct the DECL_FRIENDLIST for the new class type.  */\n+      typedecl = TYPE_MAIN_DECL (type);\n+      for (t = DECL_FRIENDLIST (TYPE_MAIN_DECL (pattern));\n+\t   t != NULL_TREE;\n+\t   t = TREE_CHAIN (t))\n+\t{\n+\t  tree friends;\n \n-      DECL_FRIENDLIST (typedecl)\n-\t= tree_cons (TREE_PURPOSE (t), NULL_TREE, \n-\t\t     DECL_FRIENDLIST (typedecl));\n+\t  DECL_FRIENDLIST (typedecl)\n+\t    = tree_cons (TREE_PURPOSE (t), NULL_TREE, \n+\t\t\t DECL_FRIENDLIST (typedecl));\n \n-      for (friends = TREE_VALUE (t);\n-\t   friends != NULL_TREE;\n-\t   friends = TREE_CHAIN (friends))\n-\t{\n-\t  if (TREE_PURPOSE (friends) == error_mark_node)\n+\t  for (friends = TREE_VALUE (t);\n+\t       friends != NULL_TREE;\n+\t       friends = TREE_CHAIN (friends))\n \t    {\n-\t      TREE_VALUE (DECL_FRIENDLIST (typedecl))\n-\t\t= tree_cons (error_mark_node, \n-\t\t\t     tsubst_friend_function (TREE_VALUE (friends),\n-\t\t\t\t\t\t     args),\n-\t\t\t     TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n-\t    }\n-\t  else\n-\t    {\n-\t      TREE_VALUE (DECL_FRIENDLIST (typedecl))\n-\t\t= tree_cons (tsubst (TREE_PURPOSE (friends), args, NULL_TREE),\n-\t\t\t     NULL_TREE,\n-\t\t\t     TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n+\t      if (TREE_PURPOSE (friends) == error_mark_node)\n+\t\t{\n+\t\t  TREE_VALUE (DECL_FRIENDLIST (typedecl))\n+\t\t    = tree_cons (error_mark_node, \n+\t\t\t\t tsubst_friend_function (TREE_VALUE (friends),\n+\t\t\t\t\t\t\t args),\n+\t\t\t\t TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  TREE_VALUE (DECL_FRIENDLIST (typedecl))\n+\t\t    = tree_cons (tsubst (TREE_PURPOSE (friends), args, NULL_TREE),\n+\t\t\t\t NULL_TREE,\n+\t\t\t\t TREE_VALUE (DECL_FRIENDLIST (typedecl)));\n \n+\t\t}\n \t    }\n \t}\n-    }\n \n-  {\n-    tree d = CLASSTYPE_FRIEND_CLASSES (type)\n-      = tsubst (CLASSTYPE_FRIEND_CLASSES (pattern), args, NULL_TREE);\n+      t = CLASSTYPE_FRIEND_CLASSES (type)\n+\t= tsubst (CLASSTYPE_FRIEND_CLASSES (pattern), args, NULL_TREE);\n \n-    /* This does injection for friend classes.  */\n-    for (; d; d = TREE_CHAIN (d))\n-      TREE_VALUE (d) = xref_tag_from_type (TREE_VALUE (d), NULL_TREE, 1);\n+      /* This does injection for friend classes.  */\n+      for (; t; t = TREE_CHAIN (t))\n+\tTREE_VALUE (t) = xref_tag_from_type (TREE_VALUE (t), NULL_TREE, 1);\n \n-    /* This does injection for friend functions. */\n-    if (!processing_template_decl)\n-      {\n-\td = tsubst (DECL_TEMPLATE_INJECT (template), args, NULL_TREE);\n+      /* This does injection for friend functions. */\n+      if (!processing_template_decl)\n+\t{\n+\t  t = tsubst (DECL_TEMPLATE_INJECT (template), args, NULL_TREE);\n \n-\tfor (; d; d = TREE_CHAIN (d))\n-\t  {\n-\t    tree t = TREE_VALUE (d);\n+\t  for (; t; t = TREE_CHAIN (t))\n+\t    {\n+\t      tree d = TREE_VALUE (t);\n \n-\t    if (TREE_CODE (t) == TYPE_DECL)\n-\t      /* Already injected.  */;\n-\t    else\n-\t      pushdecl (t);\n-\t  }\n-      } \n-  }\n+\t      if (TREE_CODE (d) == TYPE_DECL)\n+\t\t/* Already injected.  */;\n+\t      else\n+\t\tpushdecl (d);\n+\t    }\n+\t} \n \n-  if (! uses_template_parms (type))\n-    {\n-      tree tmp;\n-      for (tmp = TYPE_FIELDS (type); tmp; tmp = TREE_CHAIN (tmp))\n-\tif (TREE_CODE (tmp) == FIELD_DECL)\n+      for (t = TYPE_FIELDS (type); t; t = TREE_CHAIN (t))\n+\tif (TREE_CODE (t) == FIELD_DECL)\n \t  {\n-\t    TREE_TYPE (tmp) = complete_type (TREE_TYPE (tmp));\n-\t    require_complete_type (tmp);\n+\t    TREE_TYPE (t) = complete_type (TREE_TYPE (t));\n+\t    require_complete_type (t);\n \t  }\n \n       type = finish_struct_1 (type, 0);"}]}