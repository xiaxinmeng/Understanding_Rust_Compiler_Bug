{"sha": "9c5108032251ba012f8671abaf40a6a58d83efc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1MTA4MDMyMjUxYmEwMTJmODY3MWFiYWY0MGE2YTU4ZDgzZWZjNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-08-31T10:24:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-31T10:24:10Z"}, "message": "sem_ch3.adb: The predicate Is_Descendent_Of_Address is now an entity flag, for effiency.\n\n2007-08-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: The predicate Is_Descendent_Of_Address is now an entity\n\tflag, for effiency. It is called when analyzing arithmetic operators\n\tand also for actuals in calls that are universal_integers. The flag is\n\tset for the predefined type address, and for any type or subtype\n\tderived from it.\n\n\t* sem_ch4.adb (Analyze_One_Call): Reject an actual that is a\n\tUniversal_Integer, when the formal is a descendent of address and the\n\tcall appears in user code.\n\t(Analyze_Selected_Component): if the prefix is a private extension, the\n\ttag component is visible.\n\n\t* sem_util.ads, sem_util.adb: Remove Is_Descendent_Of_Address, now an\n\tentity flag.\n\nFrom-SVN: r127980", "tree": {"sha": "0d6a52ff3b47753a1b7d93ce02531ac9dca15f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d6a52ff3b47753a1b7d93ce02531ac9dca15f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5108032251ba012f8671abaf40a6a58d83efc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5108032251ba012f8671abaf40a6a58d83efc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5108032251ba012f8671abaf40a6a58d83efc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5108032251ba012f8671abaf40a6a58d83efc5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19d161545bb1c8c58dbc23b6f708b12403193f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19d161545bb1c8c58dbc23b6f708b12403193f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19d161545bb1c8c58dbc23b6f708b12403193f3"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "c581b62e35eb45c6fc9a107699b9d3f156caf7de", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9c5108032251ba012f8671abaf40a6a58d83efc5", "patch": "@@ -35,6 +35,7 @@ with Exp_Ch3;  use Exp_Ch3;\n with Exp_Dist; use Exp_Dist;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Itypes;   use Itypes;\n with Layout;   use Layout;\n@@ -3380,8 +3381,9 @@ package body Sem_Ch3 is\n \n       T := Etype (Id);\n \n-      Set_Is_Immediately_Visible (Id, True);\n-      Set_Depends_On_Private     (Id, Has_Private_Component (T));\n+      Set_Is_Immediately_Visible   (Id, True);\n+      Set_Depends_On_Private       (Id, Has_Private_Component (T));\n+      Set_Is_Descendent_Of_Address (Id, Is_Descendent_Of_Address (T));\n \n       if Is_Interface (T) then\n          Set_Is_Interface (Id);\n@@ -3783,6 +3785,15 @@ package body Sem_Ch3 is\n          Generate_Definition (Def_Id);\n       end if;\n \n+      if Chars (Scope (Def_Id)) =  Name_System\n+        and then Chars (Def_Id) = Name_Address\n+        and then Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (N)))\n+      then\n+         Set_Is_Descendent_Of_Address (Def_Id);\n+         Set_Is_Descendent_Of_Address (Base_Type (Def_Id));\n+         Set_Is_Descendent_Of_Address (Prev);\n+      end if;\n+\n       Check_Eliminated (Def_Id);\n    end Analyze_Type_Declaration;\n \n@@ -4979,6 +4990,11 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n+      Set_Is_Descendent_Of_Address (Derived_Type,\n+        Is_Descendent_Of_Address (Parent_Type));\n+      Set_Is_Descendent_Of_Address (Implicit_Base,\n+        Is_Descendent_Of_Address (Parent_Type));\n+\n       --  Set remaining type-specific fields, depending on numeric type\n \n       if Is_Modular_Integer_Type (Parent_Type) then"}, {"sha": "3eec997f24050c7e4f75a9ec5652569dace460aa", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9c5108032251ba012f8671abaf40a6a58d83efc5", "patch": "@@ -2136,6 +2136,8 @@ package body Sem_Ch4 is\n             --  of the analysis of the call with the user-defined operation,\n             --  because the parameter names may be wrong and yet the hiding\n             --  takes place. Fixes b34014o.\n+            --  The abstract operations on address do not hide the predefined\n+            --  operator (this is the purpose of making them abstract).\n \n             if Is_Overloaded (Name (N)) then\n                declare\n@@ -2146,6 +2148,11 @@ package body Sem_Ch4 is\n                   Get_First_Interp (Name (N), I, It);\n                   while Present (It.Nam) loop\n                      if Ekind (It.Nam) /= E_Operator\n+                        and then not\n+                          (Is_Abstract_Subprogram (It.Nam)\n+                            and then\n+                              Is_Descendent_Of_Address\n+                                 (Etype (First_Formal (It.Nam))))\n                         and then Hides_Op (It.Nam, Nam)\n                         and then\n                           Has_Compatible_Type\n@@ -2196,7 +2203,21 @@ package body Sem_Ch4 is\n             if Nkind (Parent (Actual)) /= N_Parameter_Association\n               or else Chars (Selector_Name (Parent (Actual))) = Chars (Formal)\n             then\n-               if Has_Compatible_Type (Actual, Etype (Formal)) then\n+               --  The actual can be compatible with the formal, but we must\n+               --  also check that the context is not an address type that is\n+               --  visibly an integer type, as is the case in VMS_64. In this\n+               --  case the use of literals is illegal, except in the body of\n+               --  descendents of system, where arithmetic operations on\n+               --  address are of course used.\n+\n+               if Has_Compatible_Type (Actual, Etype (Formal))\n+                 and then\n+                  (Etype (Actual) /= Universal_Integer\n+                    or else not Is_Descendent_Of_Address (Etype (Formal))\n+                    or else\n+                      Is_Predefined_File_Name\n+                        (Unit_File_Name (Get_Source_Unit (N))))\n+               then\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n@@ -2889,9 +2910,12 @@ package body Sem_Ch4 is\n             end if;\n \n             --  If the prefix is a private extension, check only the visible\n-            --  components of the partial view.\n+            --  components of the partial view. This must include the tag,\n+            --  wich can appear in expanded code in a tag check.\n \n-            if Ekind (Type_To_Use) = E_Record_Type_With_Private then\n+            if Ekind (Type_To_Use) = E_Record_Type_With_Private\n+              and then  Chars (Selector_Name (N)) /= Name_uTag\n+            then\n                exit when Comp = Last_Entity (Type_To_Use);\n             end if;\n \n@@ -4855,7 +4879,7 @@ package body Sem_Ch4 is\n                   exit;\n \n                --  In Ada 2005, this operation does not participate in Overload\n-               --  resolution. If the operation is defined in in a predefined\n+               --  resolution. If the operation is defined in a predefined\n                --  unit, it is one of the operations declared abstract in some\n                --  variants of System, and it must be removed as well.\n "}, {"sha": "42a2fedfeb519eab734c0fa98ebd34f66c6112b2", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9c5108032251ba012f8671abaf40a6a58d83efc5", "patch": "@@ -5421,25 +5421,6 @@ package body Sem_Util is\n       raise Program_Error;\n    end Is_Descendent_Of;\n \n-   ------------------------------\n-   -- Is_Descendent_Of_Address --\n-   ------------------------------\n-\n-   function Is_Descendent_Of_Address (T1 : Entity_Id) return Boolean is\n-   begin\n-      --  If Address has not been loaded, answer must be False\n-\n-      if not RTU_Loaded (System) then\n-         return False;\n-\n-      --  Otherwise we can get the entity we are interested in without\n-      --  causing an unwanted dependency on System, and do the test.\n-\n-      else\n-         return Is_Descendent_Of (T1, Base_Type (RTE (RE_Address)));\n-      end if;\n-   end Is_Descendent_Of_Address;\n-\n    --------------\n    -- Is_False --\n    --------------"}, {"sha": "5ae79ebcda2dee93af9b95a36c563c792664fe4e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5108032251ba012f8671abaf40a6a58d83efc5/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9c5108032251ba012f8671abaf40a6a58d83efc5", "patch": "@@ -609,11 +609,6 @@ package Sem_Util is\n    --  This is the RM definition, a type is a descendent of another type if it\n    --  is the same type or is derived from a descendent of the other type.\n \n-   function Is_Descendent_Of_Address (T1 : Entity_Id) return Boolean;\n-   --  Returns True if type T1 is a descendent of Address or its base type.\n-   --  Similar to calling Is_Descendent_Of with Base_Type (RTE (RE_Address))\n-   --  except that it avoids creating an unconditional dependency on System.\n-\n    function Is_False (U : Uint) return Boolean;\n    --  The argument is a Uint value which is the Boolean'Pos value of a\n    --  Boolean operand (i.e. is either 0 for False, or 1 for True). This"}]}