{"sha": "3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkMjY0NGMwMDNhNzk1ZTFlZTBiOGE1MzdiYzkwYmY2OGQ0Yjg3Ng==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-09-28T20:30:51Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-09-28T20:30:51Z"}, "message": "stl_algo.h (remove_copy, [...]): Declare inline.\n\n2013-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algo.h (remove_copy, remove_copy_if): Declare\n\tinline.\n\t(rotate_copy, stable_partition, partial_sort_copy): Likewise.\n\t(lower_bound, upper_bound, equal_range, inplace_merge): Likewise.\n\t(includes, next_permutation, prev_permutation): Likewise.\n\t(replace_copy, replace_copy_if, is_sorted_until): Likewise.\n\t(minmax_element, is_permutation, adjacent_find): Likewise.\n\t(count, count_if, search, search_n, merge): Likewise.\n\t(set_intersection, set_difference): Likewise.\n\t(set_symmetric_difference, min_element, max_element): Likewise.\n\t* include/bits/stl_algobase.h (lower_bound): Likewise.\n\t(lexicographical_compare, mismatch): Likewise.\n\nFrom-SVN: r203008", "tree": {"sha": "43a6fdfe0c9bec14b6dbd2db5e129cfcdbc0031c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a6fdfe0c9bec14b6dbd2db5e129cfcdbc0031c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/comments", "author": null, "committer": null, "parents": [{"sha": "7540a2c787301dc04f72c2fb236de8333ff41786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7540a2c787301dc04f72c2fb236de8333ff41786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7540a2c787301dc04f72c2fb236de8333ff41786"}], "stats": {"total": 140, "additions": 77, "deletions": 63}, "files": [{"sha": "7eba2be702446a67eedeeedbf9ecd02f22af8b84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "patch": "@@ -1,3 +1,18 @@\n+2013-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h (remove_copy, remove_copy_if): Declare\n+\tinline.\n+\t(rotate_copy, stable_partition, partial_sort_copy): Likewise.\n+\t(lower_bound, upper_bound, equal_range, inplace_merge): Likewise.\n+\t(includes, next_permutation, prev_permutation): Likewise.\n+\t(replace_copy, replace_copy_if, is_sorted_until): Likewise.\n+\t(minmax_element, is_permutation, adjacent_find): Likewise.\n+\t(count, count_if, search, search_n, merge): Likewise.\n+\t(set_intersection, set_difference): Likewise.\n+\t(set_symmetric_difference, min_element, max_element): Likewise.\n+\t* include/bits/stl_algobase.h (lower_bound): Likewise.\n+\t(lexicographical_compare, mismatch): Likewise.\n+\n 2013-09-28  Tim Shen <timshen91@gmail.com>\n \n \t* include/bits/regex_scanner.tcc (_Scanner<>::_M_eat_escape_posix):"}, {"sha": "efd7998c5fd2a6cd38576c4c6ea9a05a98580530", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 53, "deletions": 54, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "patch": "@@ -661,7 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  are copied is unchanged.\n   */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n-    _OutputIterator\n+    inline _OutputIterator\n     remove_copy(_InputIterator __first, _InputIterator __last,\n \t\t_OutputIterator __result, const _Tp& __value)\n     {\n@@ -694,7 +694,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate>\n-    _OutputIterator\n+    inline _OutputIterator\n     remove_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t   _OutputIterator __result, _Predicate __pred)\n     {\n@@ -1414,9 +1414,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n \n-      typedef typename iterator_traits<_ForwardIterator>::iterator_category\n-\t_IterType;\n-      std::__rotate(__first, __middle, __last, _IterType());\n+      std::__rotate(__first, __middle, __last,\n+\t\t    std::__iterator_category(__first));\n     }\n \n   /**\n@@ -1440,7 +1439,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  for each @p n in the range @p [0,__last-__first).\n   */\n   template<typename _ForwardIterator, typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,\n                 _ForwardIterator __last, _OutputIterator __result)\n     {\n@@ -1647,7 +1646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  relative ordering after calling @p stable_partition().\n   */\n   template<typename _ForwardIterator, typename _Predicate>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     stable_partition(_ForwardIterator __first, _ForwardIterator __last,\n \t\t     _Predicate __pred)\n     {\n@@ -1733,7 +1732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  The value returned is @p __result_first+N.\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator>\n-    _RandomAccessIterator\n+    inline _RandomAccessIterator\n     partial_sort_copy(_InputIterator __first, _InputIterator __last,\n \t\t      _RandomAccessIterator __result_first,\n \t\t      _RandomAccessIterator __result_last)\n@@ -1782,7 +1781,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator,\n \t   typename _Compare>\n-    _RandomAccessIterator\n+    inline _RandomAccessIterator\n     partial_sort_copy(_InputIterator __first, _InputIterator __last,\n \t\t      _RandomAccessIterator __result_first,\n \t\t      _RandomAccessIterator __result_last,\n@@ -2016,7 +2015,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n@@ -2073,7 +2072,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binary_search_algorithms\n   */\n   template<typename _ForwardIterator, typename _Tp>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n@@ -2105,7 +2104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     upper_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n@@ -2179,7 +2178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  but does not actually call those functions.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n-    pair<_ForwardIterator, _ForwardIterator>\n+    inline pair<_ForwardIterator, _ForwardIterator>\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n@@ -2216,7 +2215,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  but does not actually call those functions.\n   */\n   template<typename _ForwardIterator, typename _Tp, typename _Compare>\n-    pair<_ForwardIterator, _ForwardIterator>\n+    inline pair<_ForwardIterator, _ForwardIterator>\n     equal_range(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val, _Compare __comp)\n     {\n@@ -2580,7 +2579,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  distance(__first,__last).\n   */\n   template<typename _BidirectionalIterator>\n-    void\n+    inline void\n     inplace_merge(_BidirectionalIterator __first,\n \t\t  _BidirectionalIterator __middle,\n \t\t  _BidirectionalIterator __last)\n@@ -2620,7 +2619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the function used for the initial sort.\n   */\n   template<typename _BidirectionalIterator, typename _Compare>\n-    void\n+    inline void\n     inplace_merge(_BidirectionalIterator __first,\n \t\t  _BidirectionalIterator __middle,\n \t\t  _BidirectionalIterator __last,\n@@ -2827,7 +2826,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  returned.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n-    bool\n+    inline bool\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n@@ -2870,7 +2869,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _Compare>\n-    bool\n+    inline bool\n     includes(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t     _Compare __comp)\n@@ -2951,7 +2950,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  is the largest of the set, the smallest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator>\n-    bool\n+    inline bool\n     next_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last)\n     {\n@@ -2982,7 +2981,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  smallest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator, typename _Compare>\n-    bool\n+    inline bool\n     next_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last, _Compare __comp)\n     {\n@@ -3049,7 +3048,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  returned.\n   */\n   template<typename _BidirectionalIterator>\n-    bool\n+    inline bool\n     prev_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last)\n     {\n@@ -3080,7 +3079,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  the largest is generated and false returned.\n   */\n   template<typename _BidirectionalIterator, typename _Compare>\n-    bool\n+    inline bool\n     prev_permutation(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __last, _Compare __comp)\n     {\n@@ -3129,7 +3128,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  equal to @p __old_value with @p __new_value.\n   */\n   template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n-    _OutputIterator\n+    inline _OutputIterator\n     replace_copy(_InputIterator __first, _InputIterator __last,\n \t\t _OutputIterator __result,\n \t\t const _Tp& __old_value, const _Tp& __new_value)\n@@ -3164,7 +3163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _Predicate, typename _Tp>\n-    _OutputIterator\n+    inline _OutputIterator\n     replace_copy_if(_InputIterator __first, _InputIterator __last,\n \t\t    _OutputIterator __result,\n \t\t    _Predicate __pred, const _Tp& __new_value)\n@@ -3245,7 +3244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           for which the range [__first, i) is sorted.\n   */\n   template<typename _ForwardIterator>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n@@ -3268,7 +3267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           for which the range [__first, i) is sorted.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    _Compare __comp)\n     {\n@@ -3390,7 +3389,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           such that no other element in the range is larger.\n   */\n   template<typename _ForwardIterator>\n-    pair<_ForwardIterator, _ForwardIterator>\n+    inline pair<_ForwardIterator, _ForwardIterator>\n     minmax_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n@@ -3416,7 +3415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           such that no other element in the range is larger.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n-    pair<_ForwardIterator, _ForwardIterator>\n+    inline pair<_ForwardIterator, _ForwardIterator>\n     minmax_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t   _Compare __comp)\n     {\n@@ -3520,7 +3519,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          returns true; otherwise, returns false.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n-    bool\n+    inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2)\n     {\n@@ -3552,7 +3551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n-    bool\n+    inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _BinaryPredicate __pred)\n     {\n@@ -3643,7 +3642,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          otherwise, returns false.\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n-    bool\n+    inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n     {\n@@ -3671,7 +3670,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n-    bool\n+    inline bool\n     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t\t   _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n \t\t   _BinaryPredicate __pred)\n@@ -3891,7 +3890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  or @p __last if no such iterator exists.\n   */\n   template<typename _ForwardIterator>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     adjacent_find(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n@@ -3916,7 +3915,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  exists.\n   */\n   template<typename _ForwardIterator, typename _BinaryPredicate>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     adjacent_find(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  _BinaryPredicate __binary_pred)\n     {\n@@ -3941,7 +3940,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  for which @c *i == @p __value\n   */\n   template<typename _InputIterator, typename _Tp>\n-    typename iterator_traits<_InputIterator>::difference_type\n+    inline typename iterator_traits<_InputIterator>::difference_type\n     count(_InputIterator __first, _InputIterator __last, const _Tp& __value)\n     {\n       // concept requirements\n@@ -3964,7 +3963,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  for which @p __pred(*i) is true.\n   */\n   template<typename _InputIterator, typename _Predicate>\n-    typename iterator_traits<_InputIterator>::difference_type\n+    inline typename iterator_traits<_InputIterator>::difference_type\n     count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)\n     {\n       // concept requirements\n@@ -4004,7 +4003,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @p [__first1,__last1-(__last2-__first2))\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2>\n-    _ForwardIterator1\n+    inline _ForwardIterator1\n     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t   _ForwardIterator2 __first2, _ForwardIterator2 __last2)\n     {\n@@ -4044,7 +4043,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _ForwardIterator1, typename _ForwardIterator2,\n \t   typename _BinaryPredicate>\n-    _ForwardIterator1\n+    inline _ForwardIterator1\n     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n \t   _ForwardIterator2 __first2, _ForwardIterator2 __last2,\n \t   _BinaryPredicate  __predicate)\n@@ -4078,7 +4077,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  equal to @p __val.\n   */\n   template<typename _ForwardIterator, typename _Integer, typename _Tp>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Integer __count, const _Tp& __val)\n     {\n@@ -4112,7 +4111,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _ForwardIterator, typename _Integer, typename _Tp,\n            typename _BinaryPredicate>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     search_n(_ForwardIterator __first, _ForwardIterator __last,\n \t     _Integer __count, const _Tp& __val,\n \t     _BinaryPredicate __binary_pred)\n@@ -4751,7 +4750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n \t  _OutputIterator __result)\n@@ -4799,7 +4798,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n+    inline _OutputIterator\n     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n \t  _InputIterator2 __first2, _InputIterator2 __last2,\n \t  _OutputIterator __result, _Compare __comp)\n@@ -4961,7 +4960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n \t      _OutputIterator __result)\n@@ -5008,7 +5007,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n \t      _InputIterator2 __first2, _InputIterator2 __last2,\n \t      _OutputIterator __result, _Compare __comp)\n@@ -5076,7 +5075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t     _OutputIterator __result)\n@@ -5122,7 +5121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t     _OutputIterator __result, _Compare __comp)\n@@ -5192,7 +5191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t   _OutputIterator __result)\n@@ -5240,7 +5239,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t   _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t   _OutputIterator __result, _Compare __comp)\n@@ -5316,7 +5315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t\t     _OutputIterator __result)\n@@ -5364,7 +5363,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _OutputIterator, typename _Compare>\n-    _OutputIterator\n+    inline _OutputIterator\n     set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n \t\t\t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t\t     _OutputIterator __result,\n@@ -5414,7 +5413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _ForwardIterator>\n     _ForwardIterator\n-    min_element(_ForwardIterator __first, _ForwardIterator __last)\n+    inline min_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n@@ -5436,7 +5435,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  according to __comp.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     min_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Compare __comp)\n     {\n@@ -5472,7 +5471,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  Iterator referencing the first instance of the largest value.\n   */\n   template<typename _ForwardIterator>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     max_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n       // concept requirements\n@@ -5495,7 +5494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  according to __comp.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     max_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Compare __comp)\n     {"}, {"sha": "a7432da150c9335eeda5963e045445b24b0554a2", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd2644c003a795e1ee0b8a537bc90bf68d4b876/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3bd2644c003a795e1ee0b8a537bc90bf68d4b876", "patch": "@@ -898,9 +898,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __lexicographical_compare<_BoolType>::\n       __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n       {\n-\treturn std::__lexicographical_compare_impl(\n-\t\t__first1, __last1, __first2, __last2,\n-\t\t__gnu_cxx::__ops::__iter_less_iter());\n+\treturn std::__lexicographical_compare_impl(__first1, __last1,\n+\t\t\t\t\t\t   __first2, __last2,\n+\t\t\t\t\t__gnu_cxx::__ops::__iter_less_iter());\n       }\n \n   template<>\n@@ -976,7 +976,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup binary_search_algorithms\n   */\n   template<typename _ForwardIterator, typename _Tp>\n-    _ForwardIterator\n+    inline _ForwardIterator\n     lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\tconst _Tp& __val)\n     {\n@@ -1226,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  comp parameter instead of @c <.\n   */\n   template<typename _II1, typename _II2, typename _Compare>\n-    bool\n+    inline bool\n     lexicographical_compare(_II1 __first1, _II1 __last1,\n \t\t\t    _II2 __first2, _II2 __last2, _Compare __comp)\n     {\n@@ -1269,7 +1269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  to by the iterators are not equal.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n-    pair<_InputIterator1, _InputIterator2>\n+    inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2)\n     {\n@@ -1303,7 +1303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n-    pair<_InputIterator1, _InputIterator2>\n+    inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n     {\n@@ -1349,7 +1349,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  to by the iterators are not equal.\n   */\n   template<typename _InputIterator1, typename _InputIterator2>\n-    pair<_InputIterator1, _InputIterator2>\n+    inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2)\n     {\n@@ -1385,7 +1385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n   */\n   template<typename _InputIterator1, typename _InputIterator2,\n \t   typename _BinaryPredicate>\n-    pair<_InputIterator1, _InputIterator2>\n+    inline pair<_InputIterator1, _InputIterator2>\n     mismatch(_InputIterator1 __first1, _InputIterator1 __last1,\n \t     _InputIterator2 __first2, _InputIterator2 __last2,\n \t     _BinaryPredicate __binary_pred)"}]}