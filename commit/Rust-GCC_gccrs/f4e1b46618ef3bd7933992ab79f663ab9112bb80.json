{"sha": "f4e1b46618ef3bd7933992ab79f663ab9112bb80", "node_id": "C_kwDOANBUbNoAKGY0ZTFiNDY2MThlZjNiZDc5MzM5OTJhYjc5ZjY2M2FiOTExMmJiODA", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-02T14:53:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-02T14:53:34Z"}, "message": "rtl-ssa: Fix splitting of clobber groups [PR108508]\n\nSince rtl-ssa isn't a real/native SSA representation, it has\nto honour the constraints of the underlying rtl representation.\nPart of this involves maintaining an rpo list of definitions\nfor each rtl register, backed by a splay tree where necessary\nfor quick lookup/insertion.\n\nHowever, clobbers of a register don't act as barriers to\nother clobbers of a register.  E.g. it's possible to move one\nflag-clobbering instruction across an arbitrary number of other\nflag-clobbering instructions.  In order to allow passes to do\nthat without quadratic complexity, the splay tree groups all\nconsecutive clobbers into groups, with only the group being\nentered into the splay tree.  These groups in turn have an\ninternal splay tree of clobbers where necessary.\n\nThis means that, if we insert a new definition and use into\nthe middle of a sea of clobbers, we need to split the clobber\ngroup into two groups.  This was quite a difficult condition\nto trigger during development, and the PR shows that the code\nto handle it had (at least) two bugs.\n\nFirst, the process involves searching the clobber tree for\nthe split point.  This search can give either the previous\nclobber (which will belong to the first of the split groups)\nor the next clobber (which will belong to the second of the\nsplit groups).  The code for the former case handled the\nsplit correctly but the code for the latter case didn't.\n\nSecond, I'd forgotten to add the second clobber group to the\nmain splay tree. :-(\n\ngcc/\n\tPR rtl-optimization/108508\n\t* rtl-ssa/accesses.cc (function_info::split_clobber_group): When\n\tthe splay tree search gives the first clobber in the second group,\n\tmake sure that the root of the first clobber group is updated\n\tcorrectly.  Enter the new clobber group into the definition splay\n\ttree.\n\ngcc/testsuite/\n\tPR rtl-optimization/108508\n\t* gcc.target/aarch64/pr108508.c: New test.", "tree": {"sha": "a898c45b552a67b40a804e64b5797f6b97f6b31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a898c45b552a67b40a804e64b5797f6b97f6b31a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e1b46618ef3bd7933992ab79f663ab9112bb80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e1b46618ef3bd7933992ab79f663ab9112bb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e1b46618ef3bd7933992ab79f663ab9112bb80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e1b46618ef3bd7933992ab79f663ab9112bb80/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7b9d2da7691abba0a86c6e6c6935e29f365191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7b9d2da7691abba0a86c6e6c6935e29f365191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7b9d2da7691abba0a86c6e6c6935e29f365191"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "f12b5f4dd775878daa1b06f4ec9e2b294ba3a2b9", "filename": "gcc/rtl-ssa/accesses.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e1b46618ef3bd7933992ab79f663ab9112bb80/gcc%2Frtl-ssa%2Faccesses.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e1b46618ef3bd7933992ab79f663ab9112bb80/gcc%2Frtl-ssa%2Faccesses.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Faccesses.cc?ref=f4e1b46618ef3bd7933992ab79f663ab9112bb80", "patch": "@@ -794,23 +794,26 @@ function_info::merge_clobber_groups (clobber_info *clobber1,\n // GROUP spans INSN, and INSN now sets the resource that GROUP clobbers.\n // Split GROUP around INSN and return the clobber that comes immediately\n // before INSN.\n+//\n+// The resource that GROUP clobbers is known to have an associated\n+// splay tree.\n clobber_info *\n function_info::split_clobber_group (clobber_group *group, insn_info *insn)\n {\n   // Search for either the previous or next clobber in the group.\n   // The result is less than zero if CLOBBER should come before NEIGHBOR\n   // or greater than zero if CLOBBER should come after NEIGHBOR.\n-  int comparison = lookup_clobber (group->m_clobber_tree, insn);\n+  clobber_tree &tree1 = group->m_clobber_tree;\n+  int comparison = lookup_clobber (tree1, insn);\n   gcc_checking_assert (comparison != 0);\n-  clobber_info *neighbor = group->m_clobber_tree.root ();\n+  clobber_info *neighbor = tree1.root ();\n \n-  clobber_tree tree1, tree2;\n+  clobber_tree tree2;\n   clobber_info *prev;\n   clobber_info *next;\n   if (comparison > 0)\n     {\n       // NEIGHBOR is the last clobber in what will become the first group.\n-      tree1 = neighbor;\n       tree2 = tree1.split_after_root ();\n       prev = neighbor;\n       next = as_a<clobber_info *> (prev->next_def ());\n@@ -843,6 +846,9 @@ function_info::split_clobber_group (clobber_group *group, insn_info *insn)\n   tree2->set_group (group2);\n   last_clobber->set_group (group2);\n \n+  // Insert GROUP2 into the splay tree as an immediate successor of GROUP1.\n+  def_splay_tree::insert_child (group1, 1, group2);\n+\n   return prev;\n }\n "}, {"sha": "e97896b6a1bbda138d1ae371402e760639906782", "filename": "gcc/testsuite/gcc.target/aarch64/pr108508.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e1b46618ef3bd7933992ab79f663ab9112bb80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e1b46618ef3bd7933992ab79f663ab9112bb80/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr108508.c?ref=f4e1b46618ef3bd7933992ab79f663ab9112bb80", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-O3 -fharden-conditional-branches -fno-dce -fno-guess-branch-probability\" } */\n+\n+#include <arm_neon.h>\n+\n+int\n+test_vld3q_lane_f64 (void)\n+{\n+  float64x2x3_t vectors;\n+  float64_t temp[2];\n+  int i, j;\n+\n+  for (i = 0; i < 3; i++)\n+  {\n+    vst1q_f64 (temp, vectors.val[i]);\n+    for (j = 0; j < 2; j++)\n+      if (temp[j])\n+        return 1;\n+  }\n+\n+  return 0;\n+}\n+\n+void\n+foo (void)\n+{\n+  if (test_vld3q_lane_f64 () || test_vld3q_lane_f64 ())\n+    __builtin_abort ();\n+}"}]}