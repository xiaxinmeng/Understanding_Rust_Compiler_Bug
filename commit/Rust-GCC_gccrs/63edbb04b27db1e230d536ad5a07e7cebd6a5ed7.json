{"sha": "63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlZGJiMDRiMjdkYjFlMjMwZDUzNmFkNWEwN2U3Y2ViZDZhNWVkNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-12-05T18:36:57Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-12-05T18:36:57Z"}, "message": "regrename.c (find_best_rename_reg): Rename to ...\n\n2014-12-05  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * regrename.c (find_best_rename_reg): Rename to ...\n    (find_rename_reg): This. Also add a parameter to skip tick check.\n    * regrename.h: Likewise.\n    * config/c6x/c6x.c (try_rename_operands): Adapt to above renaming.\n\nFrom-SVN: r218434", "tree": {"sha": "4445a1a13ee2c2dc663ead126b3330874b434e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4445a1a13ee2c2dc663ead126b3330874b434e75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fda3e2851e6f415354eb4045d288d3e91c4aa1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda3e2851e6f415354eb4045d288d3e91c4aa1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda3e2851e6f415354eb4045d288d3e91c4aa1ec"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "d0375513a23beccc6ae5c255668ab7e2f4ae1534", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "patch": "@@ -1,3 +1,10 @@\n+2014-12-05  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* regrename.c (find_best_rename_reg): Rename to ...\n+\t(find_rename_reg): This. Also add a parameter to skip tick check.\n+\t* regrename.h: Likewise.\n+\t* config/c6x/c6x.c (try_rename_operands): Adapt to above renaming.\n+\n 2014-12-05  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/64192"}, {"sha": "9d2415a73796d969f9e62cc45c51788c947fc3e2", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "patch": "@@ -3513,7 +3513,8 @@ try_rename_operands (rtx_insn *head, rtx_insn *tail, unit_req_table reqs,\n   COMPL_HARD_REG_SET (unavailable, reg_class_contents[(int) super_class]);\n \n   old_reg = this_head->regno;\n-  best_reg = find_best_rename_reg (this_head, super_class, &unavailable, old_reg);\n+  best_reg =\n+    find_rename_reg (this_head, super_class, &unavailable, old_reg, true);\n \n   regrename_do_replace (this_head, best_reg);\n "}, {"sha": "88321d03e547ea6dd1b68ad7a9a17632a3573651", "filename": "gcc/regrename.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "patch": "@@ -357,11 +357,13 @@ check_new_reg_p (int reg ATTRIBUTE_UNUSED, int new_reg,\n /* For the chain THIS_HEAD, compute and return the best register to\n    rename to.  SUPER_CLASS is the superunion of register classes in\n    the chain.  UNAVAILABLE is a set of registers that cannot be used.\n-   OLD_REG is the register currently used for the chain.  */\n+   OLD_REG is the register currently used for the chain.  BEST_RENAME\n+   controls whether the register chosen must be better than the\n+   current one or just respect the given constraint.  */\n \n int\n-find_best_rename_reg (du_head_p this_head, enum reg_class super_class,\n-\t\t      HARD_REG_SET *unavailable, int old_reg)\n+find_rename_reg (du_head_p this_head, enum reg_class super_class,\n+\t\t HARD_REG_SET *unavailable, int old_reg, bool best_rename)\n {\n   bool has_preferred_class;\n   enum reg_class preferred_class;\n@@ -400,15 +402,19 @@ find_best_rename_reg (du_head_p this_head, enum reg_class super_class,\n \t\t\t\t    new_reg))\n \t    continue;\n \n+\t  if (!check_new_reg_p (old_reg, new_reg, this_head, *unavailable))\n+\t    continue;\n+\n+\t  if (!best_rename)\n+\t    return new_reg;\n+\n \t  /* In the first pass, we force the renaming of registers that\n \t     don't belong to PREFERRED_CLASS to registers that do, even\n \t     though the latters were used not very long ago.  */\n-\t  if (check_new_reg_p (old_reg, new_reg, this_head,\n-\t\t\t       *unavailable)\n-\t      && ((pass == 0\n-\t\t   && !TEST_HARD_REG_BIT (reg_class_contents[preferred_class],\n-\t\t\t\t\t  best_new_reg))\n-\t\t  || tick[best_new_reg] > tick[new_reg]))\n+\t  if ((pass == 0\n+\t      && !TEST_HARD_REG_BIT (reg_class_contents[preferred_class],\n+\t\t\t\t     best_new_reg))\n+\t      || tick[best_new_reg] > tick[new_reg])\n \t    best_new_reg = new_reg;\n \t}\n       if (pass == 0 && best_new_reg != old_reg)\n@@ -480,8 +486,8 @@ rename_chains (void)\n       if (n_uses < 2)\n \tcontinue;\n \n-      best_new_reg = find_best_rename_reg (this_head, super_class,\n-\t\t\t\t\t   &this_unavailable, reg);\n+      best_new_reg = find_rename_reg (this_head, super_class,\n+\t\t\t\t      &this_unavailable, reg, true);\n \n       if (dump_file)\n \t{"}, {"sha": "05c78ad5a459d51e6c32456c465fd0be58c9d1cf", "filename": "gcc/regrename.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fregrename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63edbb04b27db1e230d536ad5a07e7cebd6a5ed7/gcc%2Fregrename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.h?ref=63edbb04b27db1e230d536ad5a07e7cebd6a5ed7", "patch": "@@ -89,8 +89,8 @@ extern void regrename_init (bool);\n extern void regrename_finish (void);\n extern void regrename_analyze (bitmap);\n extern du_head_p regrename_chain_from_id (unsigned int);\n-extern int find_best_rename_reg (du_head_p, enum reg_class, HARD_REG_SET *,\n-\t\t\t\t int);\n+extern int find_rename_reg (du_head_p, enum reg_class, HARD_REG_SET *, int,\n+\t\t\t    bool);\n extern void regrename_do_replace (du_head_p, int);\n \n #endif"}]}