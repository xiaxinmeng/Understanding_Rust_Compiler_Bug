{"sha": "6e059adb240df3f9918401dbacca61c283e618ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwNTlhZGIyNDBkZjNmOTkxODQwMWRiYWNjYTYxYzI4M2U2MThlZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-20T11:55:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-20T11:55:27Z"}, "message": "[multiple changes]\n\n2004-02-20  Robert Dewar  <dewar@gnat.com>\n\n\t* bld.adb, exp_util.adb, gprcmd.adb: Minor reformatting\n\n2004-02-20  Ed Schonberg  <schonberg@gnat.com>\n\n\t* freeze.adb (Freeze_Record_Type): Generalize mechanism that generates\n\titype references for the constrained designated type of a component\n\twhose base type is already frozen.\n\n2004-02-20  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* init.c (__gnat_error_handler [tru64]): Rewrite previous change to\n\tavoid GCC warnings.\n\n2004-02-20  Sergey Rybin  <rybin@act-europe.fr>\n\n\t* sem_ch12.adb (Analyze_Formal_Package): Create a new defining\n\tidentifier for a phantom package that rewrites the formal package\n\tdeclaration with a box. The Add semantic decorations for the defining\n\tidentifier from the original node (that represents the formal package).\n\nFrom-SVN: r78164", "tree": {"sha": "090dd01dc14b79f968d8f244e3b4dc22b2c55e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090dd01dc14b79f968d8f244e3b4dc22b2c55e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e059adb240df3f9918401dbacca61c283e618ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e059adb240df3f9918401dbacca61c283e618ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e059adb240df3f9918401dbacca61c283e618ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e059adb240df3f9918401dbacca61c283e618ed/comments", "author": null, "committer": null, "parents": [{"sha": "d80d3d962235927d1c27c624852f54f80db7bccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80d3d962235927d1c27c624852f54f80db7bccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80d3d962235927d1c27c624852f54f80db7bccf"}], "stats": {"total": 205, "additions": 122, "deletions": 83}, "files": [{"sha": "4605412ada0638d755ab21bbc38ac18dc5aa91b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -1,3 +1,25 @@\n+2004-02-20  Robert Dewar  <dewar@gnat.com>\n+\n+\t* bld.adb, exp_util.adb, gprcmd.adb: Minor reformatting\n+\n+2004-02-20  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Generalize mechanism that generates\n+\titype references for the constrained designated type of a component\n+\twhose base type is already frozen.\n+\n+2004-02-20  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* init.c (__gnat_error_handler [tru64]): Rewrite previous change to\n+\tavoid GCC warnings.\n+\n+2004-02-20  Sergey Rybin  <rybin@act-europe.fr>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package): Create a new defining\n+\tidentifier for a phantom package that rewrites the formal package\n+\tdeclaration with a box. The Add semantic decorations for the defining\n+\tidentifier from the original node (that represents the formal package).\n+\n 2004-02-19  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* Make-lang.in (ada/stamp-sdefault): Use the top level"}, {"sha": "59a4ac0f5877a59155b5722a186cbe7d6fb1550c", "filename": "gcc/ada/bld.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fbld.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fbld.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld.adb?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -1972,16 +1972,16 @@ package body Bld is\n \n                      elsif Pkg = Snames.Name_Linker then\n                         if Item_Name = Snames.Name_Linker_Options then\n-                           --  Only add linker options if this is not the root\n-                           --  project.\n+\n+                           --  Only add linker options if this is not the\n+                           --  root project.\n \n                            Put (\"ifeq ($(\");\n                            Put (Project_Name);\n                            Put (\".root),False)\");\n                            New_Line;\n \n-                           --  Add the linker options to FLDFLAGS, in reverse\n-                           --  order.\n+                           --  Add linker options to FLDFLAGS in reverse order\n \n                            Put (\"   FLDFLAGS:=$(shell gprcmd linkopts $(\");\n                            Put (Project_Name);\n@@ -1994,10 +1994,10 @@ package body Bld is\n                            Put (\"endif\");\n                            New_Line;\n \n-                        else\n-                           --  Other attribute are of no interest; suppress\n-                           --  their declarations.\n+                        --  Other attributes are of no interest. Suppress\n+                        --  their declarations.\n \n+                        else\n                            Put_Declaration := False;\n                         end if;\n                      end if;"}, {"sha": "1abb7a2ba43f9d7804363b50c9f5ca5249e8c218", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -3353,8 +3353,7 @@ package body Exp_Util is\n             when N_Character_Literal    |\n                  N_Integer_Literal      |\n                  N_Real_Literal         |\n-                 N_String_Literal\n-              =>\n+                 N_String_Literal       =>\n                return True;\n \n             --  We consider that anything else has side effects. This is a bit"}, {"sha": "73861b72fc6e7148c3798a216c26682ad9ccc075", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -1473,6 +1473,41 @@ package body Freeze is\n          --  Set True if we find at least one component with a component\n          --  clause (used to warn about useless Bit_Order pragmas).\n \n+         procedure Check_Itype (Desig : Entity_Id);\n+         --  If the component subtype is an access to a constrained subtype\n+         --  of an already frozen type, make the subtype frozen as well. It\n+         --  might otherwise be frozen in the wrong scope, and a freeze node\n+         --  on subtype has no effect.\n+\n+         procedure Check_Itype (Desig : Entity_Id) is\n+         begin\n+            if not Is_Frozen (Desig)\n+              and then Is_Frozen (Base_Type (Desig))\n+            then\n+               Set_Is_Frozen (Desig);\n+\n+               --  In addition, add an Itype_Reference to ensure that the\n+               --  access subtype is elaborated early enough. This cannot\n+               --  be done if the subtype may depend on discriminants.\n+\n+               if Ekind (Comp) = E_Component\n+                 and then Is_Itype (Etype (Comp))\n+                 and then not Has_Discriminants (Rec)\n+               then\n+                  IR := Make_Itype_Reference (Sloc (Comp));\n+                  Set_Itype (IR, Desig);\n+\n+                  if No (Result) then\n+                     Result := New_List (IR);\n+                  else\n+                     Append (IR, Result);\n+                  end if;\n+               end if;\n+            end if;\n+         end Check_Itype;\n+\n+      --  Start of processing for Freeze_Record_Type\n+\n       begin\n          --  If this is a subtype of a controlled type, declared without\n          --  a constraint, the _controller may not appear in the component\n@@ -1548,40 +1583,19 @@ package body Freeze is\n                            Loc, Result);\n                      end if;\n \n+                  elsif Is_Itype (Designated_Type (Etype (Comp))) then\n+                     Check_Itype (Designated_Type (Etype (Comp)));\n+\n                   else\n                      Freeze_And_Append\n                        (Designated_Type (Etype (Comp)), Loc, Result);\n                   end if;\n                end;\n \n-            --  If this is a constrained subtype of an already frozen type,\n-            --  make the subtype frozen as well. It might otherwise be frozen\n-            --  in the wrong scope, and a freeze node on subtype has no effect.\n-\n             elsif Is_Access_Type (Etype (Comp))\n-              and then not Is_Frozen (Designated_Type (Etype (Comp)))\n               and then Is_Itype (Designated_Type (Etype (Comp)))\n-              and then Is_Frozen (Base_Type (Designated_Type (Etype (Comp))))\n             then\n-               Set_Is_Frozen (Designated_Type (Etype (Comp)));\n-\n-               --  In addition, add an Itype_Reference to ensure that the\n-               --  access subtype is elaborated early enough. This cannot\n-               --  be done if the subtype may depend on discriminants.\n-\n-               if Ekind (Comp) = E_Component\n-                 and then Is_Itype (Etype (Comp))\n-                 and then not Has_Discriminants (Rec)\n-               then\n-                  IR := Make_Itype_Reference (Sloc (Comp));\n-                  Set_Itype (IR, Designated_Type (Etype (Comp)));\n-\n-                  if No (Result) then\n-                     Result := New_List (IR);\n-                  else\n-                     Append (IR, Result);\n-                  end if;\n-               end if;\n+               Check_Itype (Designated_Type (Etype (Comp)));\n \n             elsif Is_Array_Type (Etype (Comp))\n               and then Is_Access_Type (Component_Type (Etype (Comp)))"}, {"sha": "b6658e1930d4ceacca18ff4c30127e57ffdc7a2b", "filename": "gcc/ada/gprcmd.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fgprcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fgprcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprcmd.adb?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -454,19 +454,20 @@ begin\n             Dir : constant String := Argument (2);\n \n          begin\n-            for J in 3 .. Argument_Count loop\n-\n-               --  Remove quotes that may have been added around each argument\n+            --  Loop to remove quotes that may have been added around arguments\n \n+            for J in 3 .. Argument_Count loop\n                declare\n                   Arg   : constant String := Argument (J);\n                   First : Natural := Arg'First;\n                   Last  : Natural := Arg'Last;\n+\n                begin\n                   if Arg (First) = '\"' and then Arg (Last) = '\"' then\n                      First := First + 1;\n                      Last  := Last - 1;\n                   end if;\n+\n                   if Is_Absolute_Path (Arg (First .. Last)) then\n                      Extend (Format_Pathname (Arg (First .. Last), UNIX));\n                   else"}, {"sha": "f16025528873142fe4787394e226761e31136240", "filename": "gcc/ada/init.c", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -388,6 +388,7 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n   static int recurse = 0;\n   struct sigcontext *mstate;\n   const char *msg;\n+  jmp_buf handler_jmpbuf;\n \n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n   if (SI_FROMUSER (sip))\n@@ -397,6 +398,43 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n     }\n \n   /* Otherwise, treat it as something we handle.  */\n+\n+  /* We are now going to raise the exception corresponding to the signal we\n+     caught, which may eventually end up resuming the application code if the\n+     exception is handled.\n+\n+     When the exception is handled, merely arranging for the *exception*\n+     handler's context (stack pointer, program counter, other registers, ...)\n+     to be installed is *not* enough to let the kernel think we've left the\n+     *signal* handler.  This has annoying implications if an alternate stack\n+     has been setup for this *signal* handler, because the kernel thinks we\n+     are still running on that alternate stack even after the jump, which\n+     causes trouble at least as soon as another signal is raised.\n+\n+     We deal with this by forcing a \"local\" longjmp within the signal handler\n+     below, forcing the \"on alternate stack\" indication to be reset (kernel\n+     wise) on the way.  If no alternate stack has been setup, this should be a\n+     neutral operation. Otherwise, we will be in a delicate situation for a\n+     short while because we are going to run the exception propagation code\n+     within the alternate stack area (that is, with the stack pointer inside\n+     the alternate stack bounds), but with the corresponding flag off from the\n+     kernel's standpoint.  We expect this to be ok as long as the propagation\n+     code does not trigger a signal itself, which is expected.\n+\n+     ??? A better approach would be to at least delay this operation until the\n+     last second, that is, until just before we jump to the exception handler,\n+     if any.  */\n+\n+  if (setjmp (handler_jmpbuf) == 0)\n+    {\n+#define JB_ONSIGSTK 0\n+\n+      /* Arrange for the \"on alternate stack\" flag to be reset.  See the\n+\t comments around \"jmp_buf offsets\" in /usr/include/setjmp.h.  */\n+      handler_jmpbuf [JB_ONSIGSTK] = 0;\n+      longjmp (handler_jmpbuf, 1);\n+    }\n+\n   switch (sig)\n     {\n     case SIGSEGV:\n@@ -448,48 +486,7 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n   if (mstate != 0)\n     *mstate = *context;\n \n-  /* We are now going to raise the exception corresponding to the signal we\n-     caught, which may eventually end up resuming the application code if the\n-     exception is handled.\n-\n-     When the exception is handled, merely arranging for the *exception*\n-     handler's context (stack pointer, program counter, other registers, ...)\n-     to be installed is *not* enough to let the kernel think we've left the\n-     *signal* handler.  This has annoying implications if an alternate stack\n-     has been setup for this *signal* handler, because the kernel thinks we\n-     are still running on that alternate stack even after the jump, which\n-     causes trouble at least as soon as another signal is raised.\n-\n-     We deal with this by forcing a \"local\" longjmp within the signal handler\n-     below, forcing the \"on alternate stack\" indication to be reset (kernel\n-     wise) on the way.  If no alternate stack has been setup, this should be a\n-     neutral operation. Otherwise, we will be in a delicate situation for a\n-     short while because we are going to run the exception propagation code\n-     within the alternate stack area (that is, with the stack pointer inside\n-     the alternate stack bounds), but with the corresponding flag off from the\n-     kernel's standpoint.  We expect this to be ok as long as the propagation\n-     code does not trigger a signal itself, which is expected.\n-\n-     ??? A better approach would be to at least delay this operation until the\n-     last second, that is, until just before we jump to the exception handler,\n-     if any.  */\n-  {\n-    jmp_buf handler_jmpbuf;\n-\n-    if (setjmp (handler_jmpbuf) != 0)\n-      Raise_From_Signal_Handler (exception, (char *) msg);\n-    else\n-      {\n-\t/* Arrange for the \"on alternate stack\" flag to be reset.  See the\n-\t   comments around \"jmp_buf offsets\" in /usr/include/setjmp.h.  */\n-\tstruct sigcontext * handler_context\n-\t  = (struct sigcontext *) & handler_jmpbuf;\n-\n-\thandler_context->sc_onstack = 0;\n-\t\n-\tlongjmp (handler_jmpbuf, 1);\n-      }\n-  }\n+  Raise_From_Signal_Handler (exception, (char *) msg);\n }\n \n void"}, {"sha": "4a83b46cc13388e3244b58b5f0383416ee13b236", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e059adb240df3f9918401dbacca61c283e618ed/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=6e059adb240df3f9918401dbacca61c283e618ed", "patch": "@@ -1578,7 +1578,8 @@ package body Sem_Ch12 is\n \n    procedure Analyze_Formal_Package (N : Node_Id) is\n       Loc              : constant Source_Ptr := Sloc (N);\n-      Formal           : constant Entity_Id  := Defining_Identifier (N);\n+      Pack_Id          : constant Entity_Id := Defining_Identifier (N);\n+      Formal           : Entity_Id;\n       Gen_Id           : constant Node_Id    := Name (N);\n       Gen_Decl         : Node_Id;\n       Gen_Unit         : Entity_Id;\n@@ -1653,20 +1654,20 @@ package body Sem_Ch12 is\n          --  and analyze it like a regular package, except that we treat the\n          --  formals as additional visible components.\n \n-         Set_Instance_Env (Gen_Unit, Formal);\n-\n          Gen_Decl := Unit_Declaration_Node (Gen_Unit);\n \n          if In_Extended_Main_Source_Unit (N) then\n             Set_Is_Instantiated (Gen_Unit);\n             Generate_Reference  (Gen_Unit, N);\n          end if;\n \n+         Formal := New_Copy (Pack_Id);\n          New_N :=\n            Copy_Generic_Node\n              (Original_Node (Gen_Decl), Empty, Instantiating => True);\n-         Set_Defining_Unit_Name (Specification (New_N), Formal);\n          Rewrite (N, New_N);\n+         Set_Defining_Unit_Name (Specification (New_N), Formal);\n+         Set_Instance_Env (Gen_Unit, Formal);\n \n          Enter_Name (Formal);\n          Set_Ekind  (Formal, E_Generic_Package);\n@@ -1728,6 +1729,11 @@ package body Sem_Ch12 is\n          Set_Ekind (Formal, E_Package);\n          Set_Generic_Parent (Specification (N), Gen_Unit);\n          Set_Has_Completion (Formal, True);\n+\n+         Set_Ekind (Pack_Id, E_Package);\n+         Set_Etype (Pack_Id, Standard_Void_Type);\n+         Set_Scope (Pack_Id, Scope (Formal));\n+         Set_Has_Completion (Pack_Id, True);\n       end if;\n    end Analyze_Formal_Package;\n "}]}