{"sha": "4d2321314a656dd3e30117e2a5266cbacb1e60eb", "node_id": "C_kwDOANBUbNoAKDRkMjMyMTMxNGE2NTZkZDNlMzAxMTdlMmE1MjY2Y2JhY2IxZTYwZWI", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-01-22T20:04:30Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-01-24T00:40:24Z"}, "message": "x86: Also check mode of memory broadcast in bcst_mem_operand\n\nReturn false for invalid mode on memory broadcast in bcst_mem_operand:\n\n(vec_duplicate:V16SF (mem/j:V4SF (reg/v/f:DI 109 [ b ])))\n\ngcc/\n\n\tPR target/104188\n\t* config/i386/predicates.md (bcst_mem_operand): Also check mode\n\tof memory broadcast.\n\ngcc/testsuite/\n\n\tPR target/104188\n\t* gcc.target/i386/pr104188.c: New test.", "tree": {"sha": "7e9e54f886e86cfbcc5af680880ac914507f73de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e9e54f886e86cfbcc5af680880ac914507f73de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2321314a656dd3e30117e2a5266cbacb1e60eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2321314a656dd3e30117e2a5266cbacb1e60eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2321314a656dd3e30117e2a5266cbacb1e60eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2321314a656dd3e30117e2a5266cbacb1e60eb/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c940703f00ded736c42745ac542904e22db8d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c940703f00ded736c42745ac542904e22db8d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c940703f00ded736c42745ac542904e22db8d51"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "a8cc17a054dec76cf60635228e1ce670de62c5fd", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2321314a656dd3e30117e2a5266cbacb1e60eb/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2321314a656dd3e30117e2a5266cbacb1e60eb/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=4d2321314a656dd3e30117e2a5266cbacb1e60eb", "patch": "@@ -1157,6 +1157,8 @@\n \t    (ior (match_test \"TARGET_AVX512VL\")\n \t\t (match_test \"GET_MODE_SIZE (GET_MODE (op)) == 64\")))\n        (match_test \"VALID_BCST_MODE_P (GET_MODE_INNER (GET_MODE (op)))\")\n+       (match_test \"GET_MODE (XEXP (op, 0))\n+\t\t    == GET_MODE_INNER (GET_MODE (op))\")\n        (match_test \"memory_operand (XEXP (op, 0), GET_MODE (XEXP (op, 0)))\")))\n \n ; Return true when OP is bcst_mem_operand or vector_memory_operand."}, {"sha": "c6f615b962521bcbc04ed2a04c289837c589eb4d", "filename": "gcc/testsuite/gcc.target/i386/pr104188.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2321314a656dd3e30117e2a5266cbacb1e60eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104188.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2321314a656dd3e30117e2a5266cbacb1e60eb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104188.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104188.c?ref=4d2321314a656dd3e30117e2a5266cbacb1e60eb", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target avx512f } } */\n+/* { dg-options \"-O2 -mfpmath=sse\" } */\n+\n+#include <x86intrin.h>\n+\n+union U {\n+  float m[4][4];\n+  __m128 r[4];\n+  __m512 s;\n+};\n+\n+__attribute__((noipa, target(\"avx512f\")))\n+void\n+foo (union U *x, union U *a, union U *b)\n+{\n+  __m512 c = _mm512_loadu_ps (&a->s);\n+  __m512 d = _mm512_broadcast_f32x4 (b->r[0]);\n+  __m512 e = _mm512_broadcast_f32x4 (b->r[1]);\n+  __m512 f = _mm512_broadcast_f32x4 (b->r[2]);\n+  __m512 g = _mm512_broadcast_f32x4 (b->r[3]);\n+  __m512 h = _mm512_mul_ps (_mm512_permute_ps (c, 0x00), d);\n+  h = _mm512_fmadd_ps (_mm512_permute_ps (c, 0x55), e, h);\n+  h = _mm512_fmadd_ps (_mm512_permute_ps (c, 0xaa), f, h);\n+  h = _mm512_fmadd_ps (_mm512_permute_ps (c, 0xff), g, h);\n+  _mm512_storeu_ps (&x->s, h);\n+}\n+\n+__attribute__((noipa, target(\"avx512f\")))\n+void\n+do_test (void)\n+{\n+  union U a = { .m = { { 1.0f, 2.0f, 3.0f, 4.0f },\n+\t\t       { 5.0f, 6.0f, 7.0f, 8.0f },\n+\t\t       { 9.0f, 10.0f, 11.0f, 12.0f },\n+\t\t       { 13.0f, 14.0f, 15.0f, 16.0f } } };\n+  union U b = { .m = { { 17.0f, 18.0f, 19.0f, 20.0f },\n+\t\t       { 21.0f, 22.0f, 23.0f, 24.0f },\n+\t\t       { 25.0f, 26.0f, 27.0f, 28.0f },\n+\t\t       { 29.0f, 30.0f, 31.0f, 32.0f } } };\n+  union U c;\n+  foo (&c, &a, &b);\n+  if (c.m[0][0] != 250.0f\n+      || c.m[0][1] != 260.0f\n+      || c.m[0][2] != 270.0f\n+      || c.m[0][3] != 280.0f)\n+    __builtin_abort ();\n+  if (c.m[1][0] != 618.0f\n+      || c.m[1][1] != 644.0f\n+      || c.m[1][2] != 670.0f\n+      || c.m[1][3] != 696.0f)\n+    __builtin_abort ();\n+  if (c.m[2][0] != 986.0f\n+      || c.m[2][1] != 1028.0f\n+      || c.m[2][2] != 1070.0f\n+      || c.m[2][3] != 1112.0f)\n+    __builtin_abort ();\n+  if (c.m[3][0] != 1354.0f\n+      || c.m[3][1] != 1412.0f\n+      || c.m[3][2] != 1470.0f\n+      || c.m[3][3] != 1528.0f)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  if (__builtin_cpu_supports (\"avx512f\"))\n+    do_test ();\n+  return 0;\n+}"}]}