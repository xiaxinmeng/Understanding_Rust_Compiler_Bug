{"sha": "ada5287e5505e44f570ae5c548afd5db221a5671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhNTI4N2U1NTA1ZTQ0ZjU3MGFlNWM1NDhhZmQ1ZGIyMjFhNTY3MQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-08-05T10:39:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-08-05T10:39:31Z"}, "message": "[AArch64] Implement some vmul*_lane*_f* intrinsics in arm_neon.h.\n\n\t* config/aarch64/arm_neon.h (vmul_f64): New intrinsic.\n\t(vmuld_laneq_f64): Likewise.\n\t(vmuls_laneq_f32): Likewise.\n\t(vmul_n_f64): Likewise.\n\t(vmuld_lane_f64): Reimplement in C.\n\t(vmuls_lane_f32): Likewise.\n\n\t* gcc.target/aarch64/simd/vmul_f64_1.c: New test.\n\t* gcc.target/aarch64/simd/vmul_n_f64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmuld_lane_f64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmuld_laneq_f64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmuls_lane_f32_1.c: Likewise.\n\t* gcc.target/aarch64/simd/vmuls_laneq_f32_1.c: Likewise.\n\nFrom-SVN: r213634", "tree": {"sha": "6eab01f224a5505836d34c3ffcd5ae5207558df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eab01f224a5505836d34c3ffcd5ae5207558df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ada5287e5505e44f570ae5c548afd5db221a5671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada5287e5505e44f570ae5c548afd5db221a5671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada5287e5505e44f570ae5c548afd5db221a5671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada5287e5505e44f570ae5c548afd5db221a5671/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad784b91ac27636d106ae0ee55093dba958bd98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad784b91ac27636d106ae0ee55093dba958bd98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad784b91ac27636d106ae0ee55093dba958bd98d"}], "stats": {"total": 291, "additions": 265, "deletions": 26}, "files": [{"sha": "8d18b7a699ccfe3e01e072b866412b78c6895543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -1,3 +1,12 @@\n+2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vmul_f64): New intrinsic.\n+\t(vmuld_laneq_f64): Likewise.\n+\t(vmuls_laneq_f32): Likewise.\n+\t(vmul_n_f64): Likewise.\n+\t(vmuld_lane_f64): Reimplement in C.\n+\t(vmuls_lane_f32): Likewise.\n+\n 2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/cortex-a15.md (cortex_a15_alu_shift): Add crc type"}, {"sha": "b5c1254653089f976dfabd8eeff40da8561377ee", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -1277,6 +1277,12 @@ vmul_f32 (float32x2_t __a, float32x2_t __b)\n   return __a * __b;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmul_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return __a * __b;\n+}\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vmul_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -8299,19 +8305,6 @@ vmul_n_u32 (uint32x2_t a, uint32_t b)\n   return result;\n }\n \n-#define vmuld_lane_f64(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64x2_t b_ = (b);                                            \\\n-       float64_t a_ = (a);                                              \\\n-       float64_t result;                                                \\\n-       __asm__ (\"fmul %d0,%d1,%2.d[%3]\"                                 \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n #define vmull_high_lane_s16(a, b, c)                                    \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -8828,19 +8821,6 @@ vmulq_n_u32 (uint32x4_t a, uint32_t b)\n   return result;\n }\n \n-#define vmuls_lane_f32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x4_t b_ = (b);                                            \\\n-       float32_t a_ = (a);                                              \\\n-       float32_t result;                                                \\\n-       __asm__ (\"fmul %s0,%s1,%2.s[%3]\"                                 \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmulx_f32 (float32x2_t a, float32x2_t b)\n {\n@@ -18985,6 +18965,34 @@ vmul_lane_u32 (uint32x2_t __a, uint32x2_t __b, const int __lane)\n   return __a * __aarch64_vget_lane_u32 (__b, __lane);\n }\n \n+/* vmuld_lane  */\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vmuld_lane_f64 (float64_t __a, float64x1_t __b, const int __lane)\n+{\n+  return __a * vget_lane_f64 (__b, __lane);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vmuld_laneq_f64 (float64_t __a, float64x2_t __b, const int __lane)\n+{\n+  return __a * vgetq_lane_f64 (__b, __lane);\n+}\n+\n+/* vmuls_lane  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmuls_lane_f32 (float32_t __a, float32x2_t __b, const int __lane)\n+{\n+  return __a * vget_lane_f32 (__b, __lane);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmuls_laneq_f32 (float32_t __a, float32x4_t __b, const int __lane)\n+{\n+  return __a * vgetq_lane_f32 (__b, __lane);\n+}\n+\n /* vmul_laneq  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n@@ -19023,6 +19031,14 @@ vmul_laneq_u32 (uint32x2_t __a, uint32x4_t __b, const int __lane)\n   return __a * __aarch64_vgetq_lane_u32 (__b, __lane);\n }\n \n+/* vmul_n  */\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmul_n_f64  (float64x1_t __a, float64_t __b)\n+{\n+  return (float64x1_t) { vget_lane_f64 (__a, 0) * __b };\n+}\n+\n /* vmulq_lane  */\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))"}, {"sha": "8aa22a807acdbd10816f4a97cc5acb4a071f5226", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -1,3 +1,12 @@\n+2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vmul_f64_1.c: New test.\n+\t* gcc.target/aarch64/simd/vmul_n_f64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmuld_lane_f64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmuld_laneq_f64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmuls_lane_f32_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmuls_laneq_f32_1.c: Likewise.\n+\n 2014-08-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.dg/torture/ftrapv-1.c: Correct usage of dg-require-fork."}, {"sha": "8308175f4b0a47e096db9fcba5107aa5661df23a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_f64_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_f64_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,30 @@\n+/* Test the vmul_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float64_t minus_e, pi;\n+  float64_t expected, actual;\n+\n+  pi = 3.14159265359;\n+  minus_e = -2.71828;\n+\n+  expected = pi * minus_e;\n+\n+  actual = vget_lane_f64 (vmul_f64 ((float64x1_t) { pi },\n+                                    (float64x1_t) { minus_e }), 0);\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"fmul\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f8f3cd2ed91d1a8a58fd8c2ec82777d178bd2913", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmul_n_f64_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmul_n_f64_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,27 @@\n+/* Test the vmul_n_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float64_t minus_e, pi;\n+  float64_t expected, actual;\n+\n+  pi = 3.14159265359;\n+  minus_e = -2.71828;\n+\n+  expected = pi * minus_e;\n+\n+  actual = vget_lane_f64 (vmul_n_f64 ((float64x1_t) { pi },\n+                                       minus_e), 0);\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "818abb0a546e4279a51430d7554938a9f0b38f6b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmuld_lane_f64_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_lane_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_lane_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_lane_f64_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,26 @@\n+/* Test the vmuld_lane_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \" -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float64_t minus_e, pi;\n+  float64_t expected, actual;\n+\n+  pi = 3.14159265359;\n+  minus_e = -2.71828;\n+\n+  expected = pi * minus_e;\n+\n+  actual = vmuld_lane_f64 (pi, (float64x1_t) { minus_e }, 0);\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "9848b6f6e58f32aa62ba1af26085a5f0c259ac9c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmuld_laneq_f64_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_laneq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_laneq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuld_laneq_f64_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vmuld_laneq_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \" -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float64_t minus_e, pi, ln2;\n+  float64_t expected, actual;\n+  float64x2_t arg2;\n+  float64_t arr[2];\n+\n+  pi = 3.14159265359;\n+  arr[0] = minus_e = -2.71828;\n+  arr[1] = ln2 = 0.69314718056;\n+\n+  arg2 = vld1q_f64 (arr);\n+  actual = vmuld_laneq_f64 (pi, arg2, 0);\n+  expected = pi * minus_e;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  expected = pi * ln2;\n+  actual = vmuld_laneq_f64 (pi, arg2, 1);\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6cd114720cd4a4c6e75fef4ec129ce1ed9cb9b2e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmuls_lane_f32_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_lane_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_lane_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_lane_f32_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vmuls_lane_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \" -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float32_t minus_e, pi, ln2;\n+  float32_t expected, actual;\n+  float32x2_t arg2;\n+  float32_t arr[2];\n+\n+  pi = 3.14159265359;\n+  arr[0] = minus_e = -2.71828;\n+  arr[1] = ln2 = 0.69314718056;\n+\n+  arg2 = vld1_f32 (arr);\n+  actual = vmuls_lane_f32 (pi, arg2, 0);\n+  expected = pi * minus_e;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  expected = pi * ln2;\n+  actual = vmuls_lane_f32 (pi, arg2, 1);\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "5b88e893fa1dcc5cf5bb595a42fd84851435c16d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmuls_laneq_f32_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_laneq_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada5287e5505e44f570ae5c548afd5db221a5671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_laneq_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmuls_laneq_f32_1.c?ref=ada5287e5505e44f570ae5c548afd5db221a5671", "patch": "@@ -0,0 +1,50 @@\n+/* Test the vmuls_laneq_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \" -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  volatile float32_t minus_e, pi, ln2, sqrt2, phi;\n+  float32_t expected, actual;\n+  float32x4_t arg2;\n+  float32_t arr[4];\n+\n+  pi = 3.14159265359;\n+  arr[0] = minus_e = -2.71828;\n+  arr[1] = ln2 = 0.69314718056;\n+  arr[2] = sqrt2 = 1.41421356237;\n+  arr[3] = phi = 1.61803398874;\n+\n+  arg2 = vld1q_f32 (arr);\n+  actual = vmuls_laneq_f32 (pi, arg2, 0);\n+  expected = pi * minus_e;\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  expected = pi * ln2;\n+  actual = vmuls_laneq_f32 (pi, arg2, 1);\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  expected = pi * sqrt2;\n+  actual = vmuls_laneq_f32 (pi, arg2, 2);\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  expected = pi * phi;\n+  actual = vmuls_laneq_f32 (pi, arg2, 3);\n+\n+  if (expected != actual)\n+    abort ();\n+\n+  return 0;\n+}"}]}