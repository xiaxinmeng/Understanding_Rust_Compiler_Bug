{"sha": "6f4176b08982177ba8eb590818d648986ffabcea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0MTc2YjA4OTgyMTc3YmE4ZWI1OTA4MThkNjQ4OTg2ZmZhYmNlYQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-09-04T15:05:01Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-09-04T15:05:01Z"}, "message": "libunwind.S (UNWIND_WRAPPER _Unwind_Backtrace): New.\n\n2007-08-08  Andrew Haley  <aph@redhat.com>\n\n        * config/arm/libunwind.S (UNWIND_WRAPPER _Unwind_Backtrace): New.\n        * config/arm/unwind-arm.h (__gnu_Unwind_Backtrace): New.\n        * config/arm/unwind-arm.c (__gnu_Unwind_Backtrace): New.\n\nFrom-SVN: r128087", "tree": {"sha": "5a319de7534ebec38fb5f1ac5caf21f1c810bbce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a319de7534ebec38fb5f1ac5caf21f1c810bbce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4176b08982177ba8eb590818d648986ffabcea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4176b08982177ba8eb590818d648986ffabcea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4176b08982177ba8eb590818d648986ffabcea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4176b08982177ba8eb590818d648986ffabcea/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29741d6ae5740e31ff7551bf97826b7b8e3c040a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29741d6ae5740e31ff7551bf97826b7b8e3c040a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29741d6ae5740e31ff7551bf97826b7b8e3c040a"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "aa53b22418f24b8f7ae7471cf92ca2475c50a93d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f4176b08982177ba8eb590818d648986ffabcea", "patch": "@@ -1,3 +1,9 @@\n+2007-08-08  Andrew Haley  <aph@redhat.com>\n+\n+\t* config/arm/libunwind.S (UNWIND_WRAPPER _Unwind_Backtrace): New.\n+\t* config/arm/unwind-arm.h (__gnu_Unwind_Backtrace): New.\n+\t* config/arm/unwind-arm.c (__gnu_Unwind_Backtrace): New.\n+\n 2007-09-04  Emmanuel Thome  <Emmanuel.Thome@inria.fr>\n \n \tPR c++/14178"}, {"sha": "0732e9f0af9d2b047cb17789d3d4c0b933a3cba4", "filename": "gcc/config/arm/libunwind.S", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibunwind.S?ref=6f4176b08982177ba8eb590818d648986ffabcea", "patch": "@@ -237,5 +237,6 @@ UNWIND_WRAPPER _Unwind_RaiseException 1\n UNWIND_WRAPPER _Unwind_Resume 1\n UNWIND_WRAPPER _Unwind_Resume_or_Rethrow 1\n UNWIND_WRAPPER _Unwind_ForcedUnwind 3\n+UNWIND_WRAPPER _Unwind_Backtrace 2\n \n-#endif  /* __symbian__ */\n+#endif  /* ndef __symbian__ */"}, {"sha": "d9f8a855925c86d16bfcfb256fa2909f15d5d160", "filename": "gcc/config/arm/unwind-arm.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.c?ref=6f4176b08982177ba8eb590818d648986ffabcea", "patch": "@@ -950,6 +950,66 @@ _Unwind_DeleteException (_Unwind_Exception * exc)\n }\n \n \n+/* Perform stack backtrace through unwind data.  */\n+_Unwind_Reason_Code\n+__gnu_Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument,\n+\t\t       phase2_vrs * entry_vrs);\n+_Unwind_Reason_Code\n+__gnu_Unwind_Backtrace(_Unwind_Trace_Fn trace, void * trace_argument,\n+\t\t       phase2_vrs * entry_vrs)\n+{\n+  phase1_vrs saved_vrs;\n+  _Unwind_Reason_Code code;\n+\n+  _Unwind_Control_Block ucb;\n+  _Unwind_Control_Block *ucbp = &ucb;\n+\n+  /* Set the pc to the call site.  */\n+  entry_vrs->core.r[R_PC] = entry_vrs->core.r[R_LR];\n+\n+  /* Save the core registers.  */\n+  saved_vrs.core = entry_vrs->core;\n+  /* Set demand-save flags.  */\n+  saved_vrs.demand_save_flags = ~(_uw) 0;\n+  \n+  do\n+    {\n+      /* Find the entry for this routine.  */\n+      if (get_eit_entry (ucbp, saved_vrs.core.r[R_PC]) != _URC_OK)\n+\t{\n+\t  code = _URC_FAILURE;\n+\t  break;\n+\t}\n+\n+      /* The dwarf unwinder assumes the context structure holds things\n+\t like the function and LSDA pointers.  The ARM implementation\n+\t caches these in the exception header (UCB).  To avoid\n+\t rewriting everything we make the virtual IP register point at\n+\t the UCB.  */\n+      _Unwind_SetGR((_Unwind_Context *)&saved_vrs, 12, (_Unwind_Ptr) ucbp);\n+\n+      /* Call trace function.  */\n+      if ((*trace) ((_Unwind_Context *) &saved_vrs, trace_argument) \n+\t  != _URC_NO_REASON)\n+\t{\n+\t  code = _URC_FAILURE;\n+\t  break;\n+\t}\n+\n+      /* Call the pr to decide what to do.  */\n+      code = ((personality_routine) UCB_PR_ADDR (ucbp))\n+\t(_US_VIRTUAL_UNWIND_FRAME | _US_FORCE_UNWIND, \n+\t ucbp, (void *) &saved_vrs);\n+    }\n+  while (code != _URC_END_OF_STACK\n+\t && code != _URC_FAILURE);\n+\n+ finish:\n+  restore_non_core_regs (&saved_vrs);\n+  return code;\n+}\n+\n+\n /* Common implementation for ARM ABI defined personality routines.\n    ID is the index of the personality routine, other arguments are as defined\n    by __aeabi_unwind_cpp_pr{0,1,2}.  */"}, {"sha": "896e410c7378f2caef9574d80896b9c146b20f3d", "filename": "gcc/config/arm/unwind-arm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4176b08982177ba8eb590818d648986ffabcea/gcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.h?ref=6f4176b08982177ba8eb590818d648986ffabcea", "patch": "@@ -205,6 +205,13 @@ extern \"C\" {\n \t_Unwind_Control_Block *, struct _Unwind_Context *, void *);\n   _Unwind_Reason_Code _Unwind_ForcedUnwind (_Unwind_Control_Block *,\n \t\t\t\t\t    _Unwind_Stop_Fn, void *);\n+  /* @@@ Use unwind data to perform a stack backtrace.  The trace callback\n+     is called for every stack frame in the call chain, but no cleanup\n+     actions are performed.  */\n+  typedef _Unwind_Reason_Code (*_Unwind_Trace_Fn) (_Unwind_Context *, void *);\n+  _Unwind_Reason_Code _Unwind_Backtrace(_Unwind_Trace_Fn,\n+\t\t\t\t\tvoid*);\n+\n   _Unwind_Word _Unwind_GetCFA (struct _Unwind_Context *);\n   void _Unwind_Complete(_Unwind_Control_Block *ucbp);\n   void _Unwind_DeleteException (_Unwind_Exception *);"}]}