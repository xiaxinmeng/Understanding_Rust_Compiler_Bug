{"sha": "e0704143164953a2e74f79fb3ed4994843c009f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MDQxNDMxNjQ5NTNhMmU3NGY3OWZiM2VkNDk5NDg0M2MwMDlmNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-08-13T21:13:56Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-08-13T21:13:56Z"}, "message": "re PR libfortran/15930 ([irix6.5] gfortran libraries not built)\n\n\n\tPR libgfortran/15930\n\t* fixinc/inclhack.def (irix___generic1, irix___generic2): New.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/internal/math_core.h: New file.\n\nCo-Authored-By: David Billinghurst <David.Billinghurst@riotinto.com>\n\nFrom-SVN: r85962", "tree": {"sha": "3e23c45a9e22bb9938b4258e587b8c5d90df71ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e23c45a9e22bb9938b4258e587b8c5d90df71ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0704143164953a2e74f79fb3ed4994843c009f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0704143164953a2e74f79fb3ed4994843c009f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0704143164953a2e74f79fb3ed4994843c009f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0704143164953a2e74f79fb3ed4994843c009f4/comments", "author": null, "committer": null, "parents": [{"sha": "a2ab121e831f4d3ac222a97a00a75c1cd665ebfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ab121e831f4d3ac222a97a00a75c1cd665ebfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ab121e831f4d3ac222a97a00a75c1cd665ebfc"}], "stats": {"total": 188, "additions": 183, "deletions": 5}, "files": [{"sha": "610345d1dbeb09cd29998325f39fd4456871a32a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0704143164953a2e74f79fb3ed4994843c009f4", "patch": "@@ -1,3 +1,11 @@\n+2004-08-13  Roger Sayle  <roger@eyesopen.com>\n+\t    David Billinghurst  <David.Billinghurst@riotinto.com>\n+\n+\tPR libgfortran/15930\n+\t* fixinc/inclhack.def (irix___generic1, irix___generic2): New.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/internal/math_core.h: New file.\n+\n 2004-08-13  Richard Henderson  <rth@redhat.com>\n \n \t* dbxout.c (NO_DBX_FUNCTION_END): Default to zero."}, {"sha": "b8a2342d4306f62366427809d7111f33c4fc892e", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 99, "deletions": 5, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=e0704143164953a2e74f79fb3ed4994843c009f4", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Monday May  3, 2004 at 05:17:48 PM MEST\n+ * It has been AutoGen-ed  Thursday August 12, 2004 at 05:42:28 PM MDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Mon May  3 17:17:49 MEST 2004\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Aug 12 17:42:28 MDT 2004\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 175 fixup descriptions.\n+ * This file contains 177 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -2828,6 +2828,88 @@ static const char* apzIrix___RestrictPatch[] = {\n #  endif\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Irix___Generic1 fix\n+ */\n+tSCC zIrix___Generic1Name[] =\n+     \"irix___generic1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zIrix___Generic1List[] =\n+  \"|internal/math_core.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzIrix___Generic1Machs[] = {\n+        \"mips-sgi-irix6.5\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zIrix___Generic1Select0[] =\n+       \"#define ([a-z]+)\\\\(x\\\\) *__generic.*\";\n+\n+#define    IRIX___GENERIC1_TEST_CT  1\n+static tTestDesc aIrix___Generic1Tests[] = {\n+  { TT_EGREP,    zIrix___Generic1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Irix___Generic1\n+ */\n+static const char* apzIrix___Generic1Patch[] = {\n+    \"format\",\n+    \"extern int %1(double);\\n\\\n+extern int %1f(float);\\n\\\n+extern int %1l(long double);\\n\\\n+#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\\\\n\\\n+               : sizeof(x) == sizeof(float) ? _%1f(x) \\\\\\n\\\n+               : _%1l(x))\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Irix___Generic2 fix\n+ */\n+tSCC zIrix___Generic2Name[] =\n+     \"irix___generic2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zIrix___Generic2List[] =\n+  \"|internal/math_core.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzIrix___Generic2Machs[] = {\n+        \"mips-sgi-irix6.5\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zIrix___Generic2Select0[] =\n+       \"#define ([a-z]+)\\\\(x,y\\\\) *__generic.*\";\n+\n+#define    IRIX___GENERIC2_TEST_CT  1\n+static tTestDesc aIrix___Generic2Tests[] = {\n+  { TT_EGREP,    zIrix___Generic2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Irix___Generic2\n+ */\n+static const char* apzIrix___Generic2Patch[] = {\n+    \"format\",\n+    \"#define %1(x,y) \\\\\\n\\\n+  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\\\\n\\\n+   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\\\\n\\\n+   : _%1l(x,y))\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Irix_Asm_Apostrophe fix\n@@ -6936,9 +7018,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          197\n+#define REGEX_COUNT          199\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            175\n+#define FIX_COUNT            177\n \n /*\n  *  Enumerate the fixes\n@@ -7012,6 +7094,8 @@ typedef enum {\n     IO_QUOTES_USE_FIXIDX,\n     IP_MISSING_SEMI_FIXIDX,\n     IRIX___RESTRICT_FIXIDX,\n+    IRIX___GENERIC1_FIXIDX,\n+    IRIX___GENERIC2_FIXIDX,\n     IRIX_ASM_APOSTROPHE_FIXIDX,\n     IRIX_LIMITS_CONST_FIXIDX,\n     IRIX_SOCKLEN_T_FIXIDX,\n@@ -7462,6 +7546,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      IRIX___RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aIrix___RestrictTests,   apzIrix___RestrictPatch, 0 },\n \n+  {  zIrix___Generic1Name,    zIrix___Generic1List,\n+     apzIrix___Generic1Machs,\n+     IRIX___GENERIC1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aIrix___Generic1Tests,   apzIrix___Generic1Patch, 0 },\n+\n+  {  zIrix___Generic2Name,    zIrix___Generic2List,\n+     apzIrix___Generic2Machs,\n+     IRIX___GENERIC2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aIrix___Generic2Tests,   apzIrix___Generic2Patch, 0 },\n+\n   {  zIrix_Asm_ApostropheName,    zIrix_Asm_ApostropheList,\n      apzIrix_Asm_ApostropheMachs,\n      IRIX_ASM_APOSTROPHE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "62ad4d5bdc94507cdd5931b12bb7d18f1d5a2a92", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=e0704143164953a2e74f79fb3ed4994843c009f4", "patch": "@@ -1575,6 +1575,52 @@ fix = {\n     test_text = \"#ifdef __c99\\n#  define __restrict restrict\";\n };\n \n+/*\n+ * IRIX 6.5.22 <internal/math_core.h> uses the SGI c99 __generic() intrinsic\n+ * to define the fpclasify, isfinite, isinf, isnan, isnormal and signbit \n+ * functions.\n+ *\n+ * This was probably introduced around IRIX 6.5.18\n+ */\n+fix = {\n+    hackname  = irix___generic1;\n+    files     = internal/math_core.h;\n+    mach      = \"mips-sgi-irix6.5\";\n+    select    = \"#define ([a-z]+)\\\\(x\\\\) *__generic.*\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"extern int %1(double);\\n\"\n+\t\t\"extern int %1f(float);\\n\"\n+\t\t\"extern int %1l(long double);\\n\"\n+\t\t\"#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\\\\n\"\n+\t\t\"               : sizeof(x) == sizeof(float) ? _%1f(x) \\\\\\n\"\n+\t\t\"               : _%1l(x))\\n\";\n+\n+    test_text = \n+      \"#define isnan(x) __generic(x,,, _isnan, _isnanf, _isnanl,,,)(x)\\n\";\n+};\n+\n+\n+/* Likewise <internal/math_core.h> on IRIX 6.5.19 and later uses the SGI\n+   compiler's __generic intrinsic to define isgreater, isgreaterequal,\n+   isless, islessequal, islessgreater and isunordered functions.  */\n+fix = {\n+    hackname  = irix___generic2;\n+    files     = internal/math_core.h;\n+    mach      = \"mips-sgi-irix6.5\";\n+    select    = \"#define ([a-z]+)\\\\(x,y\\\\) *__generic.*\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#define %1(x,y) \\\\\\n\"\n+\t\t\"  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\\\\n\"\n+\t\t\"   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\\\\n\"\n+\t\t\"   : _%1l(x,y))\\n\";\n+\n+    test_text = \n+      \"#define isless(x,y)         __generic(x,y,, _isless, _islessf, _islessl,,,)(x,y)\";\n+};\n+\n+\n /*\n  *  IRIX 5.2's <sys/asm.h> contains an asm comment with a contraction\n  *  that causes the assembly preprocessor to complain about an"}, {"sha": "f39ac3f90cf01fe879dae60a81ebaa74e359b5d3", "filename": "gcc/fixinc/tests/base/internal/math_core.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0704143164953a2e74f79fb3ed4994843c009f4/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Finternal%2Fmath_core.h?ref=e0704143164953a2e74f79fb3ed4994843c009f4", "patch": "@@ -0,0 +1,30 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/internal/math_core.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( IRIX___GENERIC1_CHECK )\n+extern int isnan(double);\n+extern int isnanf(float);\n+extern int isnanl(long double);\n+#define isnan(x) (sizeof(x) == sizeof(double) ? _isnan(x) \\\n+               : sizeof(x) == sizeof(float) ? _isnanf(x) \\\n+               : _isnanl(x))\n+\n+\n+#endif  /* IRIX___GENERIC1_CHECK */\n+\n+\n+#if defined( IRIX___GENERIC2_CHECK )\n+#define isless(x,y) \\\n+  ((sizeof(x)<=4 && sizeof(y)<=4) ? _islessf(x,y) \\\n+   : (sizeof(x)<=8 && sizeof(y)<=8) ? _isless(x,y) \\\n+   : _islessl(x,y))\n+\n+#endif  /* IRIX___GENERIC2_CHECK */"}]}