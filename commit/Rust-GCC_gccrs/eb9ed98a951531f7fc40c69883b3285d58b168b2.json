{"sha": "eb9ed98a951531f7fc40c69883b3285d58b168b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5ZWQ5OGE5NTE1MzFmN2ZjNDBjNjk4ODNiMzI4NWQ1OGIxNjhiMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-06-08T16:28:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-08T16:28:38Z"}, "message": "tree-object-size.c (addr_object_size): Add OSI argument.\n\n\t* tree-object-size.c (addr_object_size): Add OSI argument.\n\tHandle also INDIRECT_REF with SSA_NAME inside of it as base address.\n\t(compute_builtin_object_size, expr_object_size): Adjust callers.\n\t(plus_stmt_object_size): Call addr_object_size instead of\n\tcompute_builtin_object_size.\n\n\t* gcc.dg/builtin-object-size-2.c (test1): Adjust expected results.\n\t* gcc.dg/builtin-object-size-4.c (test1): Adjust expected results.\n\t* gcc.dg/builtin-object-size-6.c: New test.\n\nFrom-SVN: r148279", "tree": {"sha": "f54d4b6d485536ab23d045265ac6e8eaccdd76dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f54d4b6d485536ab23d045265ac6e8eaccdd76dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb9ed98a951531f7fc40c69883b3285d58b168b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9ed98a951531f7fc40c69883b3285d58b168b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9ed98a951531f7fc40c69883b3285d58b168b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9ed98a951531f7fc40c69883b3285d58b168b2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85a988d14eba08447282db312f99637a527bfba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a988d14eba08447282db312f99637a527bfba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a988d14eba08447282db312f99637a527bfba0"}], "stats": {"total": 676, "additions": 618, "deletions": 58}, "files": [{"sha": "c31e618ea6a1d0c22173d0ef08548b1f85bcc9a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -1,3 +1,11 @@\n+2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-object-size.c (addr_object_size): Add OSI argument.\n+\tHandle also INDIRECT_REF with SSA_NAME inside of it as base address.\n+\t(compute_builtin_object_size, expr_object_size): Adjust callers.\n+\t(plus_stmt_object_size): Call addr_object_size instead of\n+\tcompute_builtin_object_size.\n+\n 2009-06-08  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n             Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n \t\n@@ -20,7 +28,6 @@\n 2009-06-08  Michael Matz  <matz@suse.de>\n \n \tPR debug/40012\n-\n \t* cfgexpand.c (set_rtl): Store place also in DECL_RTL, if all\n \tpartitions use the same.\n \t(expand_one_var): Deal with DECL_RTL sometimes begin set also"}, {"sha": "2a32d8fa4b23da1683b91795edff85de65d545c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -1,5 +1,9 @@\n 2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/builtin-object-size-2.c (test1): Adjust expected results.\n+\t* gcc.dg/builtin-object-size-4.c (test1): Adjust expected results.\n+\t* gcc.dg/builtin-object-size-6.c: New test.\n+\n \tPR c++/40370\n \tPR c++/40372\n \t* g++.dg/template/error41.C: New test."}, {"sha": "34f16759d680cec15eb290a400d2e66d36d19f00", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -130,15 +130,15 @@ test1 (void *q, int x)\n     abort ();    \n   if (__builtin_object_size (&vara[5], 1) != (size_t) -1)\n     abort ();\n-  if (__builtin_object_size (&vara[0].a, 1) != (size_t) -1)\n+  if (__builtin_object_size (&vara[0].a, 1) != sizeof (vara[0].a))\n     abort ();\n-  if (__builtin_object_size (&vara[10].a[0], 1) != (size_t) -1)\n+  if (__builtin_object_size (&vara[10].a[0], 1) != sizeof (vara[0].a))\n     abort ();\n-  if (__builtin_object_size (&vara[5].a[4], 1) != (size_t) -1)\n+  if (__builtin_object_size (&vara[5].a[4], 1) != sizeof (vara[0].a) - 4)\n     abort ();\n-  if (__builtin_object_size (&vara[5].b, 1) != (size_t) -1)\n+  if (__builtin_object_size (&vara[5].b, 1) != sizeof (vara[0].b))\n     abort ();\n-  if (__builtin_object_size (&vara[7].c[7], 1) != (size_t) -1)\n+  if (__builtin_object_size (&vara[7].c[7], 1) != sizeof (vara[0].c) - 7)\n     abort ();\n   if (__builtin_object_size (zerol, 1) != 0)\n     abort ();"}, {"sha": "1eb30d1ba536b820c84ad9b85b4dd6dff9c50c53", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -130,15 +130,15 @@ test1 (void *q, int x)\n     abort ();    \n   if (__builtin_object_size (&vara[5], 3) != 0)\n     abort ();\n-  if (__builtin_object_size (&vara[0].a, 3) != 0)\n+  if (__builtin_object_size (&vara[0].a, 3) != sizeof (vara[0].a))\n     abort ();\n-  if (__builtin_object_size (&vara[10].a[0], 3) != 0)\n+  if (__builtin_object_size (&vara[10].a[0], 3) != sizeof (vara[0].a))\n     abort ();\n-  if (__builtin_object_size (&vara[5].a[4], 3) != 0)\n+  if (__builtin_object_size (&vara[5].a[4], 3) != sizeof (vara[0].a) - 4)\n     abort ();\n-  if (__builtin_object_size (&vara[5].b, 3) != 0)\n+  if (__builtin_object_size (&vara[5].b, 3) != sizeof (vara[0].b))\n     abort ();\n-  if (__builtin_object_size (&vara[7].c[7], 3) != 0)\n+  if (__builtin_object_size (&vara[7].c[7], 3) != sizeof (vara[0].c) - 7)\n     abort ();\n   if (__builtin_object_size (zerol, 3) != 0)\n     abort ();"}, {"sha": "9a285dfb88355949365b72b9eb8c648339a26a1c", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-6.c", "status": "added", "additions": 435, "deletions": 0, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-6.c?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -0,0 +1,435 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern void exit (int);\n+extern void *malloc (size_t);\n+extern void free (void *);\n+\n+struct A\n+{\n+  char a[10];\n+  int b;\n+  char c[10];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test1 (struct A *p)\n+{\n+  char *c;\n+  if (__builtin_object_size (&p->a, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != (size_t) -1)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != 0)\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != 0)\n+    abort ();\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test2 (void)\n+{\n+  char *c;\n+  size_t s = 2 * sizeof (struct A);\n+  struct A *p = malloc (2 * sizeof (struct A));\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (struct A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 0) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 0) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (struct A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 0) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 1) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 1) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 1) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 2) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 2) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 2) != s - __builtin_offsetof (struct A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 2) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 2) != s)\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 2) != s - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (struct A, b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 2) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  if (__builtin_object_size (&p->a, 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 3) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 3) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 3) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 3) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  c = p->a;\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[0];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a))\n+    abort ();\n+  c = &p->a[3];\n+  if (__builtin_object_size (c, 3) != sizeof (p->a) - 3)\n+    abort ();\n+  c = (char *) &p->b;\n+  if (__builtin_object_size (c, 3) != sizeof (p->b))\n+    abort ();\n+  c = (char *) &p->c;\n+  if (__builtin_object_size (c, 3) != s - __builtin_offsetof (struct A, c))\n+    abort ();\n+  free (p);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+test3 (void)\n+{\n+  char *c;\n+  size_t s;\n+  struct A *p = malloc (4);\n+  if (__builtin_object_size (&p->a, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != 0)\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 0)\n+    abort ();\n+  free (p);\n+  s = __builtin_offsetof (struct A, c) + 4;\n+  p = malloc (s);\n+  if (__builtin_object_size (&p->a, 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 0) != s)\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 0) != s - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 0) != s - __builtin_offsetof (struct A, b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 0) != 4)\n+    abort ();\n+  if (__builtin_object_size (&p->a, 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[0], 1) != sizeof (p->a))\n+    abort ();\n+  if (__builtin_object_size (&p->a[3], 1) != sizeof (p->a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&p->b, 1) != sizeof (p->b))\n+    abort ();\n+  if (__builtin_object_size (&p->c, 1) != 4)\n+    abort ();\n+  free (p);\n+}\n+\n+struct B\n+{\n+  struct A a[4];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test4 (struct B *q, int i)\n+{\n+  if (__builtin_object_size (&q->a[2].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[2].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[3].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].a[2], 1) != sizeof (q->a[0].a) - 2)\n+    abort ();\n+  if (__builtin_object_size (&q->a[i].c[2], 1) != sizeof (q->a[0].c) - 2)\n+    abort ();\n+}\n+\n+struct C\n+{\n+  char a[10];\n+  char b;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test5 (struct C *c)\n+{\n+  if (__builtin_object_size (&c->b, 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 1) != 1)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&c->b, 3) != 1)\n+    abort ();\n+}\n+\n+struct D\n+{\n+  int i;\n+  struct D1\n+  {\n+    char b;\n+    char a[10];\n+  } j;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test6 (struct D *d)\n+{\n+  if (__builtin_object_size (&d->j.a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 1) != sizeof (d->j.a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&d->j.a[3], 3) != sizeof (d->j.a) - 3)\n+    abort ();\n+}\n+\n+struct E\n+{\n+  int i;\n+  struct E1\n+  {\n+    char b;\n+    char a[10];\n+  } j[1];\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test7 (struct E *e)\n+{\n+  if (__builtin_object_size (&e->j[0].a[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 1) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&e->j[0].a[3], 3) != sizeof (e->j[0].a) - 3)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 1) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size ((char *) &e->j[0], 3) != 0)\n+    abort ();\n+}\n+\n+union F\n+{\n+  char a[1];\n+  struct F1\n+  {\n+    char b;\n+    char c[10];\n+  } d;\n+};\n+\n+void\n+__attribute__ ((noinline))\n+test8 (union F *f)\n+{\n+  if (__builtin_object_size (&f->d.c[3], 0) != (size_t) -1)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 1) != sizeof (f->d.c) - 3)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 2) != 0)\n+    abort ();\n+  if (__builtin_object_size (&f->d.c[3], 3) != sizeof (f->d.c) - 3)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  struct A a, *p = &a;\n+  int i = 1;\n+  __asm (\"\" : \"+r\" (p));\n+  test1 (p);\n+  test2 ();\n+  test3 ();\n+  struct B b, *q = &b;\n+  __asm (\"\" : \"+r\" (q), \"+r\" (i));\n+  test4 (q, i);\n+  struct C c, *cp = &c;\n+  __asm (\"\" : \"+r\" (cp));\n+  test5 (cp);\n+  struct D d, *dp = &d;\n+  __asm (\"\" : \"+r\" (dp));\n+  test6 (dp);\n+  struct E e, *ep = &e;\n+  __asm (\"\" : \"+r\" (ep));\n+  test7 (ep);\n+  union F f, *fp = &f;\n+  __asm (\"\" : \"+r\" (fp));\n+  test8 (fp);\n+  exit (0);\n+}"}, {"sha": "dbd8af482da18aa25815cca26a214a19a7c0f6f2", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 161, "deletions": 47, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9ed98a951531f7fc40c69883b3285d58b168b2/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=eb9ed98a951531f7fc40c69883b3285d58b168b2", "patch": "@@ -43,7 +43,8 @@ struct object_size_info\n static unsigned HOST_WIDE_INT unknown[4] = { -1, -1, 0, 0 };\n \n static tree compute_object_offset (const_tree, const_tree);\n-static unsigned HOST_WIDE_INT addr_object_size (const_tree, int);\n+static unsigned HOST_WIDE_INT addr_object_size (struct object_size_info *,\n+\t\t\t\t\t\tconst_tree, int);\n static unsigned HOST_WIDE_INT alloc_object_size (const_gimple, int);\n static tree pass_through_call (const_gimple);\n static void collect_object_sizes_for (struct object_size_info *, tree);\n@@ -152,9 +153,10 @@ compute_object_offset (const_tree expr, const_tree var)\n    If unknown, return unknown[object_size_type].  */\n \n static unsigned HOST_WIDE_INT\n-addr_object_size (const_tree ptr, int object_size_type)\n+addr_object_size (struct object_size_info *osi, const_tree ptr,\n+\t\t  int object_size_type)\n {\n-  tree pt_var;\n+  tree pt_var, pt_var_size = NULL_TREE, var_size, bytes;\n \n   gcc_assert (TREE_CODE (ptr) == ADDR_EXPR);\n \n@@ -163,58 +165,170 @@ addr_object_size (const_tree ptr, int object_size_type)\n     pt_var = get_base_address (pt_var);\n \n   if (pt_var\n-      && (SSA_VAR_P (pt_var) || TREE_CODE (pt_var) == STRING_CST)\n-      && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n-      && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n-      && (unsigned HOST_WIDE_INT)\n-\t tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1) < offset_limit)\n+      && TREE_CODE (pt_var) == INDIRECT_REF\n+      && TREE_CODE (TREE_OPERAND (pt_var, 0)) == SSA_NAME\n+      && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (pt_var, 0))))\n     {\n-      tree bytes;\n+      unsigned HOST_WIDE_INT sz;\n \n-      if (pt_var != TREE_OPERAND (ptr, 0))\n+      if (!osi)\n+\tsz = compute_builtin_object_size (TREE_OPERAND (pt_var, 0),\n+\t\t\t\t\t  object_size_type);\n+      else\n \t{\n-\t  tree var;\n+\t  tree var = TREE_OPERAND (pt_var, 0);\n+\t  if (osi->pass == 0)\n+\t    collect_object_sizes_for (osi, var);\n+\t  if (bitmap_bit_p (computed[object_size_type],\n+\t\t\t    SSA_NAME_VERSION (var)))\n+\t    sz = object_sizes[object_size_type][SSA_NAME_VERSION (var)];\n+\t  else\n+\t    sz = unknown[object_size_type];\n+\t}\n+\n+      if (sz != unknown[object_size_type] && sz < offset_limit)\n+\tpt_var_size = size_int (sz);\n+    }\n+  else if (pt_var\n+\t   && (SSA_VAR_P (pt_var) || TREE_CODE (pt_var) == STRING_CST)\n+\t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n+\t   && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n+\t   && (unsigned HOST_WIDE_INT)\n+\t      tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n+\t      < offset_limit)\n+    pt_var_size = TYPE_SIZE_UNIT (TREE_TYPE (pt_var));\n+  else\n+    return unknown[object_size_type];\n+\n+  if (pt_var != TREE_OPERAND (ptr, 0))\n+    {\n+      tree var;\n \n-\t  if (object_size_type & 1)\n+      if (object_size_type & 1)\n+\t{\n+\t  var = TREE_OPERAND (ptr, 0);\n+\n+\t  while (var != pt_var\n+\t\t && TREE_CODE (var) != BIT_FIELD_REF\n+\t\t && TREE_CODE (var) != COMPONENT_REF\n+\t\t && TREE_CODE (var) != ARRAY_REF\n+\t\t && TREE_CODE (var) != ARRAY_RANGE_REF\n+\t\t && TREE_CODE (var) != REALPART_EXPR\n+\t\t && TREE_CODE (var) != IMAGPART_EXPR)\n+\t    var = TREE_OPERAND (var, 0);\n+\t  if (var != pt_var && TREE_CODE (var) == ARRAY_REF)\n+\t      var = TREE_OPERAND (var, 0);\n+\t  if (! TYPE_SIZE_UNIT (TREE_TYPE (var))\n+\t      || ! host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (var)), 1)\n+\t      || (pt_var_size\n+\t\t  && tree_int_cst_lt (pt_var_size,\n+\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (var)))))\n+\t    var = pt_var;\n+\t  else if (var != pt_var && TREE_CODE (pt_var) == INDIRECT_REF)\n \t    {\n-\t      var = TREE_OPERAND (ptr, 0);\n-\n-\t      while (var != pt_var\n-\t\t      && TREE_CODE (var) != BIT_FIELD_REF\n-\t\t      && TREE_CODE (var) != COMPONENT_REF\n-\t\t      && TREE_CODE (var) != ARRAY_REF\n-\t\t      && TREE_CODE (var) != ARRAY_RANGE_REF\n-\t\t      && TREE_CODE (var) != REALPART_EXPR\n-\t\t      && TREE_CODE (var) != IMAGPART_EXPR)\n-\t\tvar = TREE_OPERAND (var, 0);\n-\t      if (var != pt_var && TREE_CODE (var) == ARRAY_REF)\n-\t\tvar = TREE_OPERAND (var, 0);\n-\t      if (! TYPE_SIZE_UNIT (TREE_TYPE (var))\n-\t\t  || ! host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (var)), 1)\n-\t\t  || tree_int_cst_lt (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)),\n-\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (var))))\n+\t      tree v = var;\n+\t      /* For &X->fld, compute object size only if fld isn't the last\n+\t\t field, as struct { int i; char c[1]; } is often used instead\n+\t\t of flexible array member.  */\n+\t      while (v && v != pt_var)\n+\t\tswitch (TREE_CODE (v))\n+\t\t  {\n+\t\t  case ARRAY_REF:\n+\t\t    if (TYPE_SIZE_UNIT (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t&& TREE_CODE (TREE_OPERAND (v, 1)) == INTEGER_CST)\n+\t\t      {\n+\t\t\ttree domain\n+\t\t\t  = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (v, 0)));\n+\t\t\tif (domain\n+\t\t\t    && TYPE_MAX_VALUE (domain)\n+\t\t\t    && TREE_CODE (TYPE_MAX_VALUE (domain))\n+\t\t\t       == INTEGER_CST\n+\t\t\t    && tree_int_cst_lt (TREE_OPERAND (v, 1),\n+\t\t\t\t\t\tTYPE_MAX_VALUE (domain)))\n+\t\t\t  {\n+\t\t\t    v = NULL_TREE;\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t      }\n+\t\t    v = TREE_OPERAND (v, 0);\n+\t\t    break;\n+\t\t  case REALPART_EXPR:\n+\t\t  case IMAGPART_EXPR:\n+\t\t    v = NULL_TREE;\n+\t\t    break;\n+\t\t  case COMPONENT_REF:\n+\t\t    if ((TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t == RECORD_TYPE\n+\t\t\t && TREE_CHAIN (TREE_OPERAND (v, 1)))\n+\t\t\t|| TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE)\n+\t\t      v = NULL_TREE;\n+\t\t    else\n+\t\t      {\n+\t\t\tif (TREE_CODE (TREE_TYPE (TREE_OPERAND (v, 0)))\n+\t\t\t    == RECORD_TYPE)\n+\t\t\t  v = TREE_OPERAND (v, 0);\n+\t\t\twhile (v && v != pt_var && TREE_CODE (v) == COMPONENT_REF)\n+\t\t\t  if (TREE_CODE (TREE_TYPE (v)) != UNION_TYPE\n+\t\t\t      && TREE_CODE (TREE_TYPE (v)) != QUAL_UNION_TYPE)\n+\t\t\t    break;\n+\t\t\t  else\n+\t\t\t    v = TREE_OPERAND (v, 0);\n+\t\t\tif (v && v != pt_var)\n+\t\t\t  v = NULL_TREE;\n+\t\t\telse\n+\t\t\t  v = pt_var;\n+\t\t      }\n+\t\t    break;\n+\t\t  default:\n+\t\t    v = pt_var;\n+\t\t    break;\n+\t\t  }\n+\t      if (v == pt_var)\n \t\tvar = pt_var;\n \t    }\n-\t  else\n-\t    var = pt_var;\n+\t}\n+      else\n+\tvar = pt_var;\n \n-\t  bytes = compute_object_offset (TREE_OPERAND (ptr, 0), var);\n-\t  if (bytes != error_mark_node)\n+      if (var != pt_var)\n+\tvar_size = TYPE_SIZE_UNIT (TREE_TYPE (var));\n+      else if (!pt_var_size)\n+\treturn unknown[object_size_type];\n+      else\n+\tvar_size = pt_var_size;\n+      bytes = compute_object_offset (TREE_OPERAND (ptr, 0), var);\n+      if (bytes != error_mark_node)\n+\t{\n+\t  if (TREE_CODE (bytes) == INTEGER_CST\n+\t      && tree_int_cst_lt (var_size, bytes))\n+\t    bytes = size_zero_node;\n+\t  else\n+\t    bytes = size_binop (MINUS_EXPR, var_size, bytes);\n+\t}\n+      if (var != pt_var\n+\t  && pt_var_size\n+\t  && TREE_CODE (pt_var) == INDIRECT_REF\n+\t  && bytes != error_mark_node)\n+\t{\n+\t  tree bytes2 = compute_object_offset (TREE_OPERAND (ptr, 0), pt_var);\n+\t  if (bytes2 != error_mark_node)\n \t    {\n-\t      if (TREE_CODE (bytes) == INTEGER_CST\n-\t\t  && tree_int_cst_lt (TYPE_SIZE_UNIT (TREE_TYPE (var)), bytes))\n-\t\tbytes = size_zero_node;\n+\t      if (TREE_CODE (bytes2) == INTEGER_CST\n+\t\t  && tree_int_cst_lt (pt_var_size, bytes2))\n+\t\tbytes2 = size_zero_node;\n \t      else\n-\t\tbytes = size_binop (MINUS_EXPR,\n-\t\t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (var)), bytes);\n+\t\tbytes2 = size_binop (MINUS_EXPR, var_size, bytes2);\n+\t      bytes = size_binop (MIN_EXPR, bytes, bytes2);\n \t    }\n \t}\n-      else\n-\tbytes = TYPE_SIZE_UNIT (TREE_TYPE (pt_var));\n-\n-      if (host_integerp (bytes, 1))\n-\treturn tree_low_cst (bytes, 1);\n     }\n+  else if (!pt_var_size)\n+    return unknown[object_size_type];\n+  else\n+    bytes = pt_var_size;\n+\n+  if (host_integerp (bytes, 1))\n+    return tree_low_cst (bytes, 1);\n \n   return unknown[object_size_type];\n }\n@@ -332,11 +446,11 @@ compute_builtin_object_size (tree ptr, int object_size_type)\n     init_offset_limit ();\n \n   if (TREE_CODE (ptr) == ADDR_EXPR)\n-    return addr_object_size (ptr, object_size_type);\n+    return addr_object_size (NULL, ptr, object_size_type);\n \n   if (TREE_CODE (ptr) == SSA_NAME\n-\t   && POINTER_TYPE_P (TREE_TYPE (ptr))\n-\t   && object_sizes[object_size_type] != NULL)\n+      && POINTER_TYPE_P (TREE_TYPE (ptr))\n+      && object_sizes[object_size_type] != NULL)\n     {\n       if (!bitmap_bit_p (computed[object_size_type], SSA_NAME_VERSION (ptr)))\n \t{\n@@ -477,7 +591,7 @@ expr_object_size (struct object_size_info *osi, tree ptr, tree value)\n \t      || !POINTER_TYPE_P (TREE_TYPE (value)));\n \n   if (TREE_CODE (value) == ADDR_EXPR)\n-    bytes = addr_object_size (value, object_size_type);\n+    bytes = addr_object_size (osi, value, object_size_type);\n   else\n     bytes = unknown[object_size_type];\n \n@@ -633,7 +747,7 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple stmt)\n \t  unsigned HOST_WIDE_INT off = tree_low_cst (op1, 1);\n \n           /* op0 will be ADDR_EXPR here.  */\n-\t  bytes = compute_builtin_object_size (op0, object_size_type);\n+\t  bytes = addr_object_size (osi, op0, object_size_type);\n \t  if (bytes == unknown[object_size_type])\n \t    ;\n \t  else if (off > offset_limit)"}]}