{"sha": "e2eb57b721527a5e8740fe5a25a90bb63cb7ee86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlYjU3YjcyMTUyN2E1ZTg3NDBmZTVhMjVhOTBiYjYzY2I3ZWU4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-01T12:31:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-01T12:31:19Z"}, "message": "(subst_constants): Use proper mode when getting equivalent constant for paradoxical SUBREG in SET_DEST.\n\n(subst_constants): Use proper mode when getting equivalent constant for\nparadoxical SUBREG in SET_DEST.\n(mark_stores): Clean up and tighten to properly handle hard regs.\n\nFrom-SVN: r3574", "tree": {"sha": "58eaf115da32a38f5313ba93d06b0c245efe143b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58eaf115da32a38f5313ba93d06b0c245efe143b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86/comments", "author": null, "committer": null, "parents": [{"sha": "5e2a751adc022f8afeffcb22182d79ff6e1d1cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2a751adc022f8afeffcb22182d79ff6e1d1cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2a751adc022f8afeffcb22182d79ff6e1d1cc2"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "1b358e10e3392e8218f6dee70ab3f923cc05ea6c", "filename": "gcc/integrate.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2eb57b721527a5e8740fe5a25a90bb63cb7ee86/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=e2eb57b721527a5e8740fe5a25a90bb63cb7ee86", "patch": "@@ -2411,7 +2411,8 @@ subst_constants (loc, insn, map)\n \t    && GET_MODE_SIZE (GET_MODE (SUBREG_REG (dest))) <= UNITS_PER_WORD\n \t    && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (dest)))\n \t\t      <= GET_MODE_SIZE (GET_MODE (dest)))\n-\t    && (tem = gen_lowpart_if_possible (GET_MODE (dest), src)))\n+\t    && (tem = gen_lowpart_if_possible (GET_MODE (SUBREG_REG (dest)),\n+\t\t\t\t\t       src)))\n \t  src = tem, dest = SUBREG_REG (dest);\n \n \t/* If storing a recognizable value save it for later recording.  */\n@@ -2537,11 +2538,29 @@ mark_stores (dest, x)\n      rtx dest;\n      rtx x;\n {\n-  if (GET_CODE (dest) == SUBREG)\n-    dest = SUBREG_REG (dest);\n+  int regno = -1;\n+  enum machine_mode mode;\n+\n+  /* DEST is always the innermost thing set, except in the case of\n+     SUBREGs of hard registers.  */\n \n   if (GET_CODE (dest) == REG)\n-    global_const_equiv_map[REGNO (dest)] = 0;\n+    regno = REGNO (dest), mode = GET_MODE (dest);\n+  else if (GET_CODE (dest) == SUBREG && GET_CODE (SUBREG_REG (dest)) == REG)\n+    {\n+      regno = REGNO (SUBREG_REG (dest)) + SUBREG_WORD (dest);\n+      mode = GET_MODE (SUBREG_REG (dest));\n+    }\n+\n+  if (regno >= 0)\n+    {\n+      int last_reg = (regno >= FIRST_PSEUDO_REGISTER ? regno\n+\t\t      : regno + HARD_REGNO_NREGS (regno, mode) - 1);\n+      int i;\n+\n+      for (i = regno; i <= last_reg; i++)\n+\tglobal_const_equiv_map[i] = 0;\n+    }\n }\n \f\n /* If any CONST expressions with RTX_INTEGRATED_P are present in the rtx"}]}