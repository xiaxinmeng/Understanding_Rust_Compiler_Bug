{"sha": "88b590c5128b80298568fe15f341cdcf94d9acb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiNTkwYzUxMjhiODAyOTg1NjhmZTE1ZjM0MWNkY2Y5NGQ5YWNiNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-11T20:03:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-11T20:03:29Z"}, "message": "re PR target/49781 ([x32] Unnecessary lea in x32 mode)\n\n\tPR target/49781\n\t* config/i386/i386.md (*lea_5_zext): New.\n\t(*lea_6_zext): Ditto.\n\t* config/i386/predicates.md (const_32bit_mask): New predicate.\n\t(lea_address_operand): Reject AND.\n\t* config/i386/i386.c (ix86_decompose_address): Allow Dimode AND with\n\tconst_32bit_mask immediate.\n\t(ix86_print_operand_address): Handle AND.\n\t(memory_address_length): Ditto.\n\nFrom-SVN: r177683", "tree": {"sha": "4f5ce01cdc39362370b5979fb89a1c34daeeb057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f5ce01cdc39362370b5979fb89a1c34daeeb057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b590c5128b80298568fe15f341cdcf94d9acb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b590c5128b80298568fe15f341cdcf94d9acb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b590c5128b80298568fe15f341cdcf94d9acb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b590c5128b80298568fe15f341cdcf94d9acb7/comments", "author": null, "committer": null, "parents": [{"sha": "a4eeb8220731f47d917bf9fc9419bbb2657f4732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4eeb8220731f47d917bf9fc9419bbb2657f4732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4eeb8220731f47d917bf9fc9419bbb2657f4732"}], "stats": {"total": 120, "additions": 85, "deletions": 35}, "files": [{"sha": "5d6e2d0fc26b803d1def545f40f925fca433aa68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88b590c5128b80298568fe15f341cdcf94d9acb7", "patch": "@@ -1,5 +1,17 @@\n+2011-08-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49781\n+\t* config/i386/i386.md (*lea_5_zext): New.\n+\t(*lea_6_zext): Ditto.\n+\t* config/i386/predicates.md (const_32bit_mask): New predicate.\n+\t(lea_address_operand): Reject AND.\n+\t* config/i386/i386.c (ix86_decompose_address): Allow Dimode AND with\n+\tconst_32bit_mask immediate.\n+\t(ix86_print_operand_address): Handle AND.\n+\t(memory_address_length): Ditto.\n+\n 2011-08-11  Romain Geissler  <romain.geissler@gmail.com>\n-            Brian Hackett  <bhackett1024@gmail.com>\n+\t    Brian Hackett  <bhackett1024@gmail.com>\n \n \t* plugin.def: Add event for finish_decl.\n \t* plugin.c (register_callback, invoke_plugin_callbacks): Same.\n@@ -40,8 +52,7 @@\n \n 2011-08-11   Kazuhiro Inaoka  <kazuhiro.inaoka.ud@renesas.com>\n \n-\t* config/rx/rx.md (movsicc): Allow register to register\n-\ttransfers.\n+\t* config/rx/rx.md (movsicc): Allow register to register transfers.\n \t(*movsicc): Likewise.\n \t(*stcc): Restrict this pattern to EQ and NE compares.\n \t(*stcc_reg): New pattern.  Works for any comparison but only for\n@@ -71,8 +82,7 @@\n \t(lto_materialize_tree): ... here.\n \tHandle CALL_EXPR codes.\n \tRemove call to lto_streamer_cache_append.\n-\t* tree-streamer-out.c (lto_output_tree_header): Handle\n-\tCALL_EXPR nodes.\n+\t* tree-streamer-out.c (lto_output_tree_header): Handle CALL_EXPR nodes.\n \t* tree-streamer.h (tree_read_bitfields): Declare.\n \n \t* Makefile.in (TREE_STREAMER_H): Add STREAMER_HOOKS_H.\n@@ -96,8 +106,7 @@\n \tRemove assertions and adjustments for nodes\n \tmain_identifier_node, ptrdiff_type_node and fileptr_type_node.\n \t(lto_streamer_hooks_init): Set streamer_hooks.write_tree to\n-\tlto_output_tree and streamer_hooks.read_tree to\n-\tlto_input_tree.\n+\tlto_output_tree and streamer_hooks.read_tree to lto_input_tree.\n \t* lto-streamer.h (lto_input_tree): Declare.\n \t(lto_output_tree_ref): Remove.\n \t* streamer-hooks.h (struct streamer_hooks): Remove fields\n@@ -121,8 +130,7 @@\n \t(lto_output_integer_cst): Likewise.\n \t(lto_write_tree): Move to lto-streamer-out.c.\n \t(lto_output_tree): Likewise.\n-\t* tree-streamer.c (lto_record_common_node): Move from\n-\tlto-streamer.c\n+\t* tree-streamer.c (lto_record_common_node): Move from lto-streamer.c\n \t(preload_common_nodes): Likewise.\n \t(lto_streamer_cache_create): Call it.\n \t* tree-streamer.h: Include streamer-hooks.h.\n@@ -281,7 +289,7 @@\n \t* doc/tm.texi: Regenerate.\n \n 2011-08-10  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/29560\n \t* config/avr/avr.md (*ashlhiqi3): New insn-and-split.\n \t(*ashl<extend_prefix>qihiqi3): New insn-and-splits.\n@@ -337,12 +345,12 @@\n \n 2011-08-09  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-       * config/i386/i386.c: Remove traling spaces.\n-       * config/i386/sse.md: Likewise.\n-       (*fma_fmadd_<mode>): Fix insn alternative 1 mnemonic.\n-       (*fma_fmsub_<mode>): Likewise.\n-       (*fma_fnmadd_<mode>): Likewise.\n-       (*fma_fnmsub_<mode>): Likewise.\n+\t* config/i386/i386.c: Remove traling spaces.\n+\t* config/i386/sse.md: Likewise.\n+\t(*fma_fmadd_<mode>): Fix insn alternative 1 mnemonic.\n+\t(*fma_fmsub_<mode>): Likewise.\n+\t(*fma_fnmadd_<mode>): Likewise.\n+\t(*fma_fnmsub_<mode>): Likewise.\n \n 2011-08-09  Nick Clifton  <nickc@redhat.com>\n "}, {"sha": "fedb2cacc710a58535c06bf619910cf82b765104", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88b590c5128b80298568fe15f341cdcf94d9acb7", "patch": "@@ -11146,11 +11146,22 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n \n   /* Allow zero-extended SImode addresses,\n      they will be emitted with addr32 prefix.  */\n-  if (TARGET_64BIT\n-      && GET_CODE (addr) == ZERO_EXTEND\n-      && GET_MODE (addr) == DImode\n-      && GET_MODE (XEXP (addr, 0)) == SImode)\n-    addr = XEXP (addr, 0);\n+  if (TARGET_64BIT && GET_MODE (addr) == DImode)\n+    {\n+      if (GET_CODE (addr) == ZERO_EXTEND\n+\t  && GET_MODE (XEXP (addr, 0)) == SImode)\n+\taddr = XEXP (addr, 0);\n+      else if (GET_CODE (addr) == AND\n+\t       && const_32bit_mask (XEXP (addr, 1), DImode))\n+\t{\n+\t  addr = XEXP (addr, 0);\n+\n+\t  /* Strip subreg.  */\n+\t  if (GET_CODE (addr) == SUBREG\n+\t      && GET_MODE (SUBREG_REG (addr)) == SImode)\n+\t    addr = SUBREG_REG (addr);\n+\t}\n+    }\n \n   if (REG_P (addr))\n     base = addr;\n@@ -14174,7 +14185,10 @@ ix86_print_operand_address (FILE *file, rtx addr)\n       /* Print SImode registers for zero-extended addresses to force\n \t addr32 prefix.  Otherwise print DImode registers to avoid it.  */\n       if (TARGET_64BIT)\n-\tcode = (GET_CODE (addr) == ZERO_EXTEND) ? 'l' : 'q';\n+\tcode = ((GET_CODE (addr) == ZERO_EXTEND\n+\t\t || GET_CODE (addr) == AND)\n+\t\t? 'l'\n+\t\t: 'q');\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \t{\n@@ -21785,9 +21799,9 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n   return s->rtl;\n }\n \f\n-/* Calculate the length of the memory address in the instruction\n-   encoding.  Includes addr32 prefix, does not include the one-byte modrm,\n-   opcode, or other prefixes.  */\n+/* Calculate the length of the memory address in the instruction encoding.\n+   Includes addr32 prefix, does not include the one-byte modrm, opcode,\n+   or other prefixes.  */\n \n int\n memory_address_length (rtx addr)\n@@ -21816,7 +21830,8 @@ memory_address_length (rtx addr)\n   disp = parts.disp;\n \n   /* Add length of addr32 prefix.  */\n-  len = (GET_CODE (addr) == ZERO_EXTEND);\n+  len = (GET_CODE (addr) == ZERO_EXTEND\n+\t || GET_CODE (addr) == AND);\n \n   /* Rule of thumb:\n        - esp as the base always wants an index,"}, {"sha": "e61b0f4a03ea2208ec65ca4914a6544ca83ab840", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=88b590c5128b80298568fe15f341cdcf94d9acb7", "patch": "@@ -5477,14 +5477,31 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*lea_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0))]\n+  \"TARGET_64BIT\"\n+  \"lea{l}\\t{%a1, %0|%0, %a1}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*lea<mode>_2\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(match_operand:SWI48 1 \"lea_address_operand\" \"p\"))]\n   \"\"\n   \"lea{<imodesuffix>}\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*lea_1_zext\"\n+(define_insn \"*lea_3_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0)))]\n+  \"TARGET_64BIT\"\n+  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*lea_4_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (match_operand:SI 1 \"lea_address_operand\" \"p\")))]\n@@ -5493,18 +5510,21 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*lea_2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0))]\n+(define_insn \"*lea_5_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI\n+\t  (subreg:DI (match_operand:SI 1 \"lea_address_operand\" \"p\") 0)\n+\t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n   \"TARGET_64BIT\"\n-  \"lea{l}\\t{%a1, %0|%0, %a1}\"\n+  \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*lea_2_zext\"\n+(define_insn \"*lea_6_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0)))]\n+\t(and:DI\n+\t  (match_operand:DI 1 \"lea_address_operand\" \"p\")\n+\t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")"}, {"sha": "bc0a357b74444735202fbad4c1827996ce42ba33", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b590c5128b80298568fe15f341cdcf94d9acb7/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=88b590c5128b80298568fe15f341cdcf94d9acb7", "patch": "@@ -597,6 +597,12 @@\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) == 128\")))\n \n+;; Match exactly 0x0FFFFFFFF in anddi as a zero-extension operation\n+(define_predicate \"const_32bit_mask\"\n+  (and (match_code \"const_int\")\n+       (match_test \"trunc_int_for_mode (INTVAL (op), DImode)\n+\t\t    == (HOST_WIDE_INT) 0xffffffff\")))\n+\n ;; Match 2, 4, or 8.  Used for leal multiplicands.\n (define_predicate \"const248_operand\"\n   (match_code \"const_int\")\n@@ -802,7 +808,8 @@\n   int ok;\n \n   /*  LEA handles zero-extend by itself.  */\n-  if (GET_CODE (op) == ZERO_EXTEND)\n+  if (GET_CODE (op) == ZERO_EXTEND\n+      || GET_CODE (op) == AND)\n     return false;\n \n   ok = ix86_decompose_address (op, &parts);"}]}