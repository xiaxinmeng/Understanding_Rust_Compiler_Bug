{"sha": "50ceefc2f53381e444e60014b624da28d2583765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjZWVmYzJmNTMzODFlNDQ0ZTYwMDE0YjYyNGRhMjhkMjU4Mzc2NQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.co.uk", "date": "2000-09-18T19:31:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-09-18T19:31:28Z"}, "message": "sh.c (addsubcosts): CONST is not cheap.\n\n\t* sh.c (addsubcosts): CONST is not cheap.\n\t(find_barrier): For Sh1, take alignment after jumps into account.\n\nFrom-SVN: r36512", "tree": {"sha": "854585c0d006970d8e757dc662975bf84ed8d6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/854585c0d006970d8e757dc662975bf84ed8d6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50ceefc2f53381e444e60014b624da28d2583765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ceefc2f53381e444e60014b624da28d2583765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ceefc2f53381e444e60014b624da28d2583765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ceefc2f53381e444e60014b624da28d2583765/comments", "author": null, "committer": null, "parents": [{"sha": "659e47fb241303d55e264111360d41aa132947e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659e47fb241303d55e264111360d41aa132947e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659e47fb241303d55e264111360d41aa132947e1"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "00b1f24316bb0635a58854dc44ac16c5ad0de243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ceefc2f53381e444e60014b624da28d2583765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ceefc2f53381e444e60014b624da28d2583765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50ceefc2f53381e444e60014b624da28d2583765", "patch": "@@ -1,3 +1,8 @@\n+Mon Sep 18 20:26:50 2000  J\"orn Rennecke <amylaar@redhat.co.uk>\n+\n+\t* sh.c (addsubcosts): CONST is not cheap.\n+\t(find_barrier): For Sh1, take alignment after jumps into account.\n+\n 2000-09-15  Andrew Haley  <aph@redhat.com>\n \n \t* toplev.c (rest_of_compilation): Call purge_hard_subreg_sets to"}, {"sha": "a945666b34eefebcddddfcf7588b35a52d46d4e8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50ceefc2f53381e444e60014b624da28d2583765/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50ceefc2f53381e444e60014b624da28d2583765/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=50ceefc2f53381e444e60014b624da28d2583765", "patch": "@@ -1020,7 +1020,8 @@ addsubcosts (x)\n      rtx x;\n {\n   /* Adding a register is a single cycle insn.  */\n-  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+  if (GET_CODE (XEXP (x, 1)) == REG\n+      || GET_CODE (XEXP (x, 1)) == SUBREG)\n     return 1;\n \n   /* Likewise for small constants.  */\n@@ -2247,26 +2248,31 @@ find_barrier (num_mova, mova, from)\n \t      inc = XVECLEN (body, 1) * GET_MODE_SIZE (GET_MODE (body));\n \t    }\n \t}\n+      /* For the SH1, we generate alignments even after jumps-around-jumps.  */\n+      else if (GET_CODE (from) == JUMP_INSN\n+\t       && ! TARGET_SH2\n+\t       && ! TARGET_SMALLCODE)\n+\tnew_align = 4;\n \n       if (found_si)\n \t{\n+\t  count_si += inc;\n \t  if (new_align > si_align)\n \t    {\n \t      si_limit -= (count_si - 1) & (new_align - si_align);\n \t      si_align = new_align;\n \t    }\n \t  count_si = (count_si + new_align - 1) & -new_align;\n-\t  count_si += inc;\n \t}\n       if (found_hi)\n \t{\n+\t  count_hi += inc;\n \t  if (new_align > hi_align)\n \t    {\n \t      hi_limit -= (count_hi - 1) & (new_align - hi_align);\n \t      hi_align = new_align;\n \t    }\n \t  count_hi = (count_hi + new_align - 1) & -new_align;\n-\t  count_hi += inc;\n \t}\n       from = NEXT_INSN (from);\n     }"}]}