{"sha": "03ad478dc5a08e2f5b20296035ab14fc2019aab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhZDQ3OGRjNWEwOGUyZjViMjAyOTYwMzVhYjE0ZmMyMDE5YWFiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-25T15:17:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-25T15:17:25Z"}, "message": "[multiple changes]\n\n2012-04-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch9.adb: Add comments on the usage of the\n\tlock-free data structures.\n\n2012-04-25  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_intr.adb (Expand_Shift): Convert the left\n\toperand and the operator when the type of the call differs from\n\tthe type of the operator.\n\n2012-04-25  Geert Bosch  <bosch@adacore.com>\n\n\t* stand.ads: Minor comment fix.\n\n2012-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Slice): Handle the case where the prefix\n\tis a string literal. Retrieve the first index from the base type\n\twhen slicing a string literal.\n\t* sem_ch12.adb (Check_Private_View): Move the initialization\n\tof the type inside the loop to reflect the changing index.\n\t* sem_eval.adb (Eval_Relational_Op): Retrieve the first index\n\tfrom the base type when dealing with a string literal.\n\t* sem_res.adb (Resolve_Slice): Retrieve the first index from\n\tthe base type when slicing a string literal.\n\t* sem_util.adb (Is_Internally_Generated_Renaming): New routine.\n\t(Is_Object_Reference): String literals may act\n\tas object references only when they are renamed internally.\n\t(Proper_First_Index): New routine.\n\t* sem_util.ads (Proper_First_Index): New routine.\n\nFrom-SVN: r186829", "tree": {"sha": "fb430d94bc43da0b5a140cd3a1e77684ce6e44dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb430d94bc43da0b5a140cd3a1e77684ce6e44dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ad478dc5a08e2f5b20296035ab14fc2019aab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ad478dc5a08e2f5b20296035ab14fc2019aab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ad478dc5a08e2f5b20296035ab14fc2019aab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ad478dc5a08e2f5b20296035ab14fc2019aab4/comments", "author": null, "committer": null, "parents": [{"sha": "39ad16657c9de8b8c1736e2145f8e8f38cb8bff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ad16657c9de8b8c1736e2145f8e8f38cb8bff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ad16657c9de8b8c1736e2145f8e8f38cb8bff1"}], "stats": {"total": 166, "additions": 140, "deletions": 26}, "files": [{"sha": "35f82130730d4fe9d2f72f44cd65b3ce405982c8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -1,3 +1,35 @@\n+2012-04-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.adb: Add comments on the usage of the\n+\tlock-free data structures.\n+\n+2012-04-25  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Shift): Convert the left\n+\toperand and the operator when the type of the call differs from\n+\tthe type of the operator.\n+\n+2012-04-25  Geert Bosch  <bosch@adacore.com>\n+\n+\t* stand.ads: Minor comment fix.\n+\n+2012-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Slice): Handle the case where the prefix\n+\tis a string literal. Retrieve the first index from the base type\n+\twhen slicing a string literal.\n+\t* sem_ch12.adb (Check_Private_View): Move the initialization\n+\tof the type inside the loop to reflect the changing index.\n+\t* sem_eval.adb (Eval_Relational_Op): Retrieve the first index\n+\tfrom the base type when dealing with a string literal.\n+\t* sem_res.adb (Resolve_Slice): Retrieve the first index from\n+\tthe base type when slicing a string literal.\n+\t* sem_util.adb (Is_Internally_Generated_Renaming): New routine.\n+\t(Is_Object_Reference): String literals may act\n+\tas object references only when they are renamed internally.\n+\t(Proper_First_Index): New routine.\n+\t* sem_util.ads (Proper_First_Index): New routine.\n+\n 2012-04-25  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, csinfo.adb, lib-writ.adb, sem_ch12.adb,"}, {"sha": "9d21af2accc8d0c511a51a846cef193b58acff81", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -81,16 +81,24 @@ package body Exp_Ch9 is\n    -- Lock Free Data Structure --\n    ------------------------------\n \n+   --  A lock-free subprogram is a protected routine which references a unique\n+   --  protected scalar component and does not contain statements that cause\n+   --  side effects. Due to this restricted behavior, all references to shared\n+   --  data from within the subprogram can be synchronized through the use of\n+   --  atomic operations rather than relying on locks.\n+\n    type Lock_Free_Subprogram is record\n       Sub_Body : Node_Id;\n-      Comp_Id  : Entity_Id;\n+      --  Reference to the body of a protected subprogram which meets the lock-\n+      --  free requirements.\n+\n+      Comp_Id : Entity_Id;\n+      --  Reference to the scalar component referenced from within Sub_Body\n    end record;\n-   --  This data structure and its fields must be documented, ALL global\n-   --  data structures must be documented. We never rely on guessing what\n-   --  things mean from their names.\n \n-   --  The following table establishes a relation between a subprogram body and\n-   --  an unique protected component referenced in this body.\n+   --  This table establishes a relation between a protected subprogram body\n+   --  and a unique component it references. The table is used when building\n+   --  the lock-free versions of a protected subprogram body.\n \n    package Lock_Free_Subprogram_Table is new Table.Table (\n      Table_Component_Type => Lock_Free_Subprogram,"}, {"sha": "50f404e6bc88cf3633f20e88e889393b85e3752b", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -650,20 +650,20 @@ package body Exp_Intr is\n    --  and Resolve. Such shift operator nodes will not be seen by Expand_Shift.\n \n    procedure Expand_Shift (N : Node_Id; E : Entity_Id; K : Node_Kind) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : constant Entity_Id  := Etype (N);\n+      Entyp : constant Entity_Id  := Etype (E);\n       Left  : constant Node_Id    := First_Actual (N);\n+      Loc   : constant Source_Ptr := Sloc (N);\n       Right : constant Node_Id    := Next_Actual (Left);\n       Ltyp  : constant Node_Id    := Etype (Left);\n       Rtyp  : constant Node_Id    := Etype (Right);\n+      Typ   : constant Entity_Id  := Etype (N);\n       Snode : Node_Id;\n \n    begin\n       Snode := New_Node (K, Loc);\n-      Set_Left_Opnd  (Snode, Relocate_Node (Left));\n       Set_Right_Opnd (Snode, Relocate_Node (Right));\n       Set_Chars      (Snode, Chars (E));\n-      Set_Etype      (Snode, Base_Type (Typ));\n+      Set_Etype      (Snode, Base_Type (Entyp));\n       Set_Entity     (Snode, E);\n \n       if Compile_Time_Known_Value (Type_High_Bound (Rtyp))\n@@ -672,12 +672,30 @@ package body Exp_Intr is\n          Set_Shift_Count_OK (Snode, True);\n       end if;\n \n-      --  Do the rewrite. Note that we don't call Analyze and Resolve on\n-      --  this node, because it already got analyzed and resolved when\n-      --  it was a function call!\n+      if Typ = Entyp then\n \n-      Rewrite (N, Snode);\n-      Set_Analyzed (N);\n+         --  Note that we don't call Analyze and Resolve on this node, because\n+         --  it already got analyzed and resolved when it was a function call.\n+\n+         Set_Left_Opnd (Snode, Relocate_Node (Left));\n+         Rewrite (N, Snode);\n+         Set_Analyzed (N);\n+\n+      else\n+\n+         --  If the context type is not the type of the operator, it is an\n+         --  inherited operator for a derived type. Wrap the node in a\n+         --  conversion so that it is type-consistent for possible further\n+         --  expansion (e.g. within a lock-free protected type).\n+\n+         Set_Left_Opnd (Snode,\n+           Unchecked_Convert_To (Base_Type (Entyp), Relocate_Node (Left)));\n+         Rewrite (N, Unchecked_Convert_To (Typ, Snode));\n+\n+         --  Analyze and resolve result formed by conversion to target type\n+\n+         Analyze_And_Resolve (N, Typ);\n+      end if;\n    end Expand_Shift;\n \n    ------------------------"}, {"sha": "6f398006d581403e83d5e45a2f0086926f298108", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -6128,8 +6128,9 @@ package body Sem_Ch12 is\n \n             begin\n                Indx := First_Index (T);\n-               Typ  := Base_Type (Etype (Indx));\n                while Present (Indx) loop\n+                  Typ := Base_Type (Etype (Indx));\n+\n                   if Is_Private_Type (Typ)\n                     and then Present (Full_View (Typ))\n                   then"}, {"sha": "d6c12b67f41c2bcc569b7a7f047aad88c4e6719b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -4514,9 +4514,9 @@ package body Sem_Ch4 is\n               (\"type is not one-dimensional array in slice prefix\", N);\n \n          elsif not\n-           Has_Compatible_Type (D, Etype (First_Index (Array_Type)))\n+           Has_Compatible_Type (D, Etype (Proper_First_Index (Array_Type)))\n          then\n-            Wrong_Type (D, Etype (First_Index (Array_Type)));\n+            Wrong_Type (D, Etype (Proper_First_Index (Array_Type)));\n \n          else\n             Set_Etype (N, Array_Type);"}, {"sha": "6cd045823a43711f26c68789d0d00023a7e8cf70", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -2747,7 +2747,7 @@ package body Sem_Eval is\n \n                --  General case\n \n-               T := Etype (First_Index (Etype (Op)));\n+               T := Etype (Proper_First_Index (Etype (Op)));\n \n                --  The simple case, both bounds are known at compile time\n "}, {"sha": "43e12551175bc79bf611edbdd15352f70a3bf591", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -9003,7 +9003,7 @@ package body Sem_Res is\n       --  necessary. Else resolve the bounds, and apply needed checks.\n \n       if not Is_Entity_Name (Drange) then\n-         Index := First_Index (Array_Type);\n+         Index := Proper_First_Index (Array_Type);\n          Resolve (Drange, Base_Type (Etype (Index)));\n \n          if Nkind (Drange) = N_Range then"}, {"sha": "d7bafb2771d4305d787a286250fb0722864796ea", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -3573,7 +3573,6 @@ package body Sem_Util is\n       if Present (C)\n         and then Restriction_Check_Required (SPARK)\n       then\n-\n          declare\n             Enclosing_Subp : constant Node_Id := Enclosing_Subprogram (Def_Id);\n             Enclosing_Pack : constant Node_Id := Enclosing_Package (Def_Id);\n@@ -7587,6 +7586,34 @@ package body Sem_Util is\n    -------------------------\n \n    function Is_Object_Reference (N : Node_Id) return Boolean is\n+\n+      function Is_Internally_Generated_Renaming (N : Node_Id) return Boolean;\n+      --  Determine whether N is the name of an internally-generated renaming\n+\n+      --------------------------------------\n+      -- Is_Internally_Generated_Renaming --\n+      --------------------------------------\n+\n+      function Is_Internally_Generated_Renaming (N : Node_Id) return Boolean is\n+         P : Node_Id := N;\n+\n+      begin\n+         while Present (P) loop\n+            if Nkind (P) = N_Object_Renaming_Declaration then\n+               return not Comes_From_Source (P);\n+\n+            elsif Is_List_Member (P) then\n+               return False;\n+            end if;\n+\n+            P := Parent (P);\n+         end loop;\n+\n+         return False;\n+      end Is_Internally_Generated_Renaming;\n+\n+   --  Start of processing for Is_Object_Reference\n+\n    begin\n       if Is_Entity_Name (N) then\n          return Present (Entity (N)) and then Is_Object (Entity (N));\n@@ -7633,6 +7660,14 @@ package body Sem_Util is\n             when N_Unchecked_Type_Conversion =>\n                return True;\n \n+            --  Allow string literals to act as objects as long as they appear\n+            --  in internally-generated renamings. The expansion of iterators\n+            --  may generate such renamings when the range involves a string\n+            --  literal.\n+\n+            when N_String_Literal =>\n+               return Is_Internally_Generated_Renaming (Parent (N));\n+\n             when others =>\n                return False;\n          end case;\n@@ -11619,6 +11654,21 @@ package body Sem_Util is\n       Set_Sloc (Endl, Loc);\n    end Process_End_Label;\n \n+   ------------------------\n+   -- Proper_First_Index --\n+   ------------------------\n+\n+   function Proper_First_Index (Array_Typ : Entity_Id) return Entity_Id is\n+      Typ : Entity_Id := Array_Typ;\n+\n+   begin\n+      if Ekind (Typ) = E_String_Literal_Subtype then\n+         Typ := Base_Type (Typ);\n+      end if;\n+\n+      return First_Index (Typ);\n+   end Proper_First_Index;\n+\n    ------------------------------------\n    -- References_Generic_Formal_Type --\n    ------------------------------------"}, {"sha": "8e7d7bd81c6751f5d82c70001d7832d51e577da4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -1284,6 +1284,11 @@ package Sem_Util is\n    --  parameter Ent gives the entity to which the End_Label refers,\n    --  and to which cross-references are to be generated.\n \n+   function Proper_First_Index (Array_Typ : Entity_Id) return Entity_Id;\n+   --  Return the First_Index attribute of an arbitrary array type unless it\n+   --  is a string literal subtype in which case return the First_Index of the\n+   --  base type.\n+\n    function References_Generic_Formal_Type (N : Node_Id) return Boolean;\n    --  Returns True if the expression Expr contains any references to a\n    --  generic type. This can only happen within a generic template."}, {"sha": "16f388d5fe6d9c7e4d178386afcebf6bc9b8f50c", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ad478dc5a08e2f5b20296035ab14fc2019aab4/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=03ad478dc5a08e2f5b20296035ab14fc2019aab4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -460,12 +460,12 @@ package Stand is\n    -----------------\n \n    procedure Tree_Read;\n-   --  Initializes entity values in this package from the current tree\n-   --  file using Osint.Tree_Read. Note that Tree_Read includes all the\n-   --  initialization that is carried out by Create_Standard.\n+   --  Initializes entity values in this package from the current tree file\n+   --  using Tree_IO. Note that Tree_Read includes all the initialization that\n+   --  is carried out by Create_Standard.\n \n    procedure Tree_Write;\n    --  Writes out the entity values in this package to the current tree file\n-   --  using Osint.Tree_Write.\n+   --  using Tree_IO.\n \n end Stand;"}]}