{"sha": "7afac11005625275db3bbdb22a1bdd778871efae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmYWMxMTAwNTYyNTI3NWRiM2JiZGIyMmExYmRkNzc4ODcxZWZhZQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2011-08-18T17:24:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-18T17:24:39Z"}, "message": "Add -mavx2.\n\n2011-08-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX2_SET): New.\n\t(OPTION_MASK_ISA_AVX_UNSET): Update.\n\t(OPTION_MASK_ISA_AVX2_UNSET): New.\n\t(ix86_handle_option): Handle OPT_mavx2 case.\n\t* config/i386/cpuid.h (bit_AVX2): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tAVX2 feature.\n\t* config/i386/i386-c.c (ix86_target_macros_internal):\n\tConditionally define __AVX2__.\n\t* config/i386/i386.c (ix86_option_override_internal): Define\n\tPTA_AVX2.  Define \"core-avx2\" processor alias.  Handle avx2\n\toption.\n\t(ix86_valid_target_attribute_inner_p): Handle avx2 option.\n\t* config/i386/i386.h (TARGET_AVX2): New.\n\t* config/i386/i386.opt (mavx2): New.\n\t* doc/invoke.texi: Document -mavx2.\n\nFrom-SVN: r177876", "tree": {"sha": "b59f28405a8840d4ab39c3854797c53cc153f3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59f28405a8840d4ab39c3854797c53cc153f3e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afac11005625275db3bbdb22a1bdd778871efae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afac11005625275db3bbdb22a1bdd778871efae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afac11005625275db3bbdb22a1bdd778871efae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afac11005625275db3bbdb22a1bdd778871efae/comments", "author": null, "committer": null, "parents": [{"sha": "6277a71071d0af461e0016cee626fa37c01f8e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6277a71071d0af461e0016cee626fa37c01f8e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6277a71071d0af461e0016cee626fa37c01f8e02"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "5ade55a15648cf7c461e2b7c6f3f63a25087fcac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -1,3 +1,22 @@\n+2011-08-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX2_SET): New.\n+\t(OPTION_MASK_ISA_AVX_UNSET): Update.\n+\t(OPTION_MASK_ISA_AVX2_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mavx2 case.\n+\t* config/i386/cpuid.h (bit_AVX2): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tAVX2 feature.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal):\n+\tConditionally define __AVX2__.\n+\t* config/i386/i386.c (ix86_option_override_internal): Define\n+\tPTA_AVX2.  Define \"core-avx2\" processor alias.  Handle avx2\n+\toption.\n+\t(ix86_valid_target_attribute_inner_p): Handle avx2 option.\n+\t* config/i386/i386.h (TARGET_AVX2): New.\n+\t* config/i386/i386.opt (mavx2): New.\n+\t* doc/invoke.texi: Document -mavx2.\n+\n 2011-08-18  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/49890"}, {"sha": "b2018357dfd1e0a17f21b4d4931f9b301a2f4d0f", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_SSE4_2_SET)\n #define OPTION_MASK_ISA_FMA_SET \\\n   (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_AVX_SET)\n+#define OPTION_MASK_ISA_AVX2_SET \\\n+  (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX_SET)\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -114,8 +116,10 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_AVX_UNSET )\n #define OPTION_MASK_ISA_AVX_UNSET \\\n   (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_FMA_UNSET \\\n-   | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET)\n+   | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET \\\n+   | OPTION_MASK_ISA_AVX2_UNSET)\n #define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n+#define OPTION_MASK_ISA_AVX2_UNSET OPTION_MASK_ISA_AVX2\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -277,6 +281,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx2:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX2_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "d53743fa158f55478049286db4f2d896231cc488", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -66,6 +66,7 @@\n /* Extended Features (%eax == 7) */\n #define bit_FSGSBASE\t(1 << 0)\n #define bit_BMI\t\t(1 << 3)\n+#define bit_AVX2\t(1 << 5)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "b7a1f523c139ff879a1e41536094157c2e622925", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -393,7 +393,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_lahf_lm = 0, has_sse4a = 0;\n   unsigned int has_longmode = 0, has_3dnowp = 0, has_3dnow = 0;\n   unsigned int has_movbe = 0, has_sse4_1 = 0, has_sse4_2 = 0;\n-  unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0;\n+  unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0, has_avx2 = 0;\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n   unsigned int has_bmi = 0, has_tbm = 0, has_lzcnt = 0;\n@@ -474,6 +474,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       __cpuid (0x7, eax, ebx, ecx, edx);\n \n       has_bmi = ebx & bit_BMI;\n+      has_avx2 = ebx & bit_AVX2;\n     }\n \n   if (!arch)\n@@ -716,13 +717,14 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *bmi = has_bmi ? \" -mbmi\" : \" -mno-bmi\";\n       const char *tbm = has_tbm ? \" -mtbm\" : \" -mno-tbm\";\n       const char *avx = has_avx ? \" -mavx\" : \" -mno-avx\";\n+      const char *avx2 = has_avx2 ? \" -mavx2\" : \" -mno-avx2\";\n       const char *sse4_2 = has_sse4_2 ? \" -msse4.2\" : \" -mno-sse4.2\";\n       const char *sse4_1 = has_sse4_1 ? \" -msse4.1\" : \" -mno-sse4.1\";\n       const char *lzcnt = has_lzcnt ? \" -mlzcnt\" : \" -mno-lzcnt\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, tbm,\n-\t\t\tavx, sse4_2, sse4_1, lzcnt, NULL);\n+\t\t\tavx2, avx, sse4_2, sse4_1, lzcnt, NULL);\n     }\n \n done:"}, {"sha": "5c1dfe61038a6d143a87a33317e6dbf2ec6512bd", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -257,6 +257,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PCLMUL__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX)\n     def_or_undef (parse_in, \"__AVX__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX2)\n+    def_or_undef (parse_in, \"__AVX2__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)\n     def_or_undef (parse_in, \"__FMA__\");\n   if (isa_flag & OPTION_MASK_ISA_SSE4A)"}, {"sha": "53c59445ce1762d61eb90a4648796092e35d7d27", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -2920,6 +2920,7 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_SSSE3\t\t(HOST_WIDE_INT_1 << 27)\n #define PTA_TBM\t\t \t(HOST_WIDE_INT_1 << 28)\n #define PTA_XOP\t\t \t(HOST_WIDE_INT_1 << 29)\n+#define PTA_AVX2\t\t(HOST_WIDE_INT_1 << 30)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -2973,6 +2974,12 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n \t| PTA_RDRND | PTA_F16C},\n+      {\"core-avx2\", PROCESSOR_COREI7_64, CPU_COREI7,\n+\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX | PTA_AVX2\n+\t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n+\t| PTA_RDRND | PTA_F16C | PTA_BMI | PTA_LZCNT | PTA_FMA\n+\t| PTA_MOVBE},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE},\n@@ -3263,6 +3270,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_AVX\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_AVX;\n+\tif (processor_alias_table[i].flags & PTA_AVX2\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX2))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_AVX2;\n \tif (processor_alias_table[i].flags & PTA_FMA\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_FMA))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_FMA;\n@@ -4047,6 +4057,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"tbm\",\tOPT_mtbm),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n     IX86_ATTR_ISA (\"avx\",\tOPT_mavx),\n+    IX86_ATTR_ISA (\"avx2\",\tOPT_mavx2),\n     IX86_ATTR_ISA (\"mmx\",\tOPT_mmmx),\n     IX86_ATTR_ISA (\"pclmul\",\tOPT_mpclmul),\n     IX86_ATTR_ISA (\"popcnt\",\tOPT_mpopcnt),"}, {"sha": "f8a35ba99aec06476c4c4752fe6f955a15174bbf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -53,6 +53,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_SSE4_1\tOPTION_ISA_SSE4_1\n #define TARGET_SSE4_2\tOPTION_ISA_SSE4_2\n #define TARGET_AVX\tOPTION_ISA_AVX\n+#define TARGET_AVX2\tOPTION_ISA_AVX2\n #define TARGET_FMA\tOPTION_ISA_FMA\n #define TARGET_SSE4A\tOPTION_ISA_SSE4A\n #define TARGET_FMA4\tOPTION_ISA_FMA4"}, {"sha": "54d7af1d2500776c8ad76f3d0e93bc4063b1da16", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -457,6 +457,10 @@ mavx\n Target Report Mask(ISA_AVX) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation\n \n+mavx2\n+Target Report Mask(ISA_AVX2) Var(ix86_isa_flags) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 built-in functions and code generation\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation"}, {"sha": "fdc32979a57a31855cb0483e199d3abca19fee3f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afac11005625275db3bbdb22a1bdd778871efae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7afac11005625275db3bbdb22a1bdd778871efae", "patch": "@@ -605,7 +605,7 @@ Objective-C and Objective-C++ Dialects}.\n -mincoming-stack-boundary=@var{num} @gol\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n--maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n+-mavx2 -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n -mlwp -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n@@ -12666,6 +12666,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-sse4\n @itemx -mavx\n @itemx -mno-avx\n+@itemx -mavx2\n+@itemx -mno-avx2\n @itemx -maes\n @itemx -mno-aes\n @itemx -mpclmul\n@@ -12707,7 +12709,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n-SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA,\n+SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA,\n SSE4A, FMA4, XOP, LWP, ABM, BMI, LZCNT or 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and"}]}