{"sha": "9e160526440decfabecbe06e7ed22ee828d93010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxNjA1MjY0NDBkZWNmYWJlY2JlMDZlN2VkMjJlZTgyOGQ5MzAxMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-12-12T16:13:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-12-12T16:13:49Z"}, "message": "Overload std::distance and std::advance for path::iterator\n\nAlthough filesystem::path::iterator is only a bidirectional iterator,\nthe underlying sequence has random access iterators (specifically, raw\npointers). This means std::distance and std::advance can be implemented\nmore efficiently than the generic versions which apply ++ and --\nrepeatedly.\n\n\tPR libstdc++/71044 (partial)\n\t* include/bits/fs_path.h (__path_iter_distance, __path_iter_advance):\n\tNew friend functions to implement std::distance and std::advance more\n\tefficiently.\n\t(distance, advance): Add overloads for path::iterator.\n\t* testsuite/27_io/filesystem/path/itr/components.cc: Test new\n\toverload.\n\nFrom-SVN: r267057", "tree": {"sha": "81f49981f5999dc6c0ecbbb872db30467b46e1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81f49981f5999dc6c0ecbbb872db30467b46e1d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e160526440decfabecbe06e7ed22ee828d93010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e160526440decfabecbe06e7ed22ee828d93010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e160526440decfabecbe06e7ed22ee828d93010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e160526440decfabecbe06e7ed22ee828d93010/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b7c0b5559316028d392d2bf9a4a0ca9e7562ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7c0b5559316028d392d2bf9a4a0ca9e7562ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7c0b5559316028d392d2bf9a4a0ca9e7562ce7"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "cd7c7ee65bfab80d4626d8c471ec49b67cbc3463", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e160526440decfabecbe06e7ed22ee828d93010", "patch": "@@ -1,5 +1,13 @@\n 2018-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/71044 (partial)\n+\t* include/bits/fs_path.h (__path_iter_distance, __path_iter_advance):\n+\tNew friend functions to implement std::distance and std::advance more\n+\tefficiently.\n+\t(distance, advance): Add overloads for path::iterator.\n+\t* testsuite/27_io/filesystem/path/itr/components.cc: Test new\n+\toverload.\n+\n \tPR libstdc++/80762\n \t* include/bits/fs_path.h (path::_Path): Use remove_cv_t and is_void.\n \t* include/experimental/bits/fs_path.h (path::_Path): Likewise."}, {"sha": "075b3ab5ef82b43293eada2bf0131c0c284904e8", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=9e160526440decfabecbe06e7ed22ee828d93010", "patch": "@@ -733,6 +733,37 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   private:\n     friend class path;\n \n+    bool _M_is_multi() const { return _M_path->_M_type == _Type::_Multi; }\n+\n+    friend difference_type\n+    __path_iter_distance(const iterator& __first, const iterator& __last)\n+    {\n+      __glibcxx_assert(__first._M_path != nullptr);\n+      __glibcxx_assert(__first._M_path == __last._M_path);\n+      if (__first._M_is_multi())\n+\treturn std::distance(__first._M_cur, __last._M_cur);\n+      else if (__first._M_at_end == __last._M_at_end)\n+\treturn 0;\n+      else\n+\treturn __first._M_at_end ? -1 : 1;\n+    }\n+\n+    friend void\n+    __path_iter_advance(iterator& __i, difference_type __n)\n+    {\n+      if (__n == 1)\n+\t++__i;\n+      else if (__n == -1)\n+\t--__i;\n+      else if (__n != 0)\n+\t{\n+\t  __glibcxx_assert(__i._M_path != nullptr);\n+\t  __glibcxx_assert(__i._M_is_multi());\n+\t  // __glibcxx_assert(__i._M_path->_M_cmpts.end() - __i._M_cur >= __n);\n+\t  __i._M_cur += __n;\n+\t}\n+    }\n+\n     iterator(const path* __path, path::_List::const_iterator __iter)\n     : _M_path(__path), _M_cur(__iter), _M_at_end()\n     { }\n@@ -1160,6 +1191,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace filesystem\n \n+inline ptrdiff_t\n+distance(filesystem::path::iterator __first, filesystem::path::iterator __last)\n+{ return __path_iter_distance(__first, __last); }\n+\n+template<typename _InputIterator, typename _Distance>\n+  void\n+  advance(filesystem::path::iterator& __i, _Distance __n)\n+  { __path_iter_advance(__i, static_cast<ptrdiff_t>(__n)); }\n+\n extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "55760e82a9ad676a45ae4349a8a783f056b84c62", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/itr/traversal.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e160526440decfabecbe06e7ed22ee828d93010/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fitr%2Ftraversal.cc?ref=9e160526440decfabecbe06e7ed22ee828d93010", "patch": "@@ -136,10 +136,28 @@ test03()\n     }\n }\n \n+void\n+test04()\n+{\n+  std::filesystem::path p = \"/a/b/c/d/e/f/g\";\n+  VERIFY( std::distance(p.begin(), p.end()) == 8);\n+  auto it = p.begin();\n+  std::advance(it, 1);\n+  VERIFY( std::distance(p.begin(), it) == 1 );\n+  VERIFY( it->native() == \"a\" );\n+  std::advance(it, 3);\n+  VERIFY( std::distance(p.begin(), it) == 4 );\n+  VERIFY( it->native() == \"d\" );\n+  std::advance(it, -2);\n+  VERIFY( std::distance(p.begin(), it) == 2 );\n+  VERIFY( it->native() == \"b\" );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}