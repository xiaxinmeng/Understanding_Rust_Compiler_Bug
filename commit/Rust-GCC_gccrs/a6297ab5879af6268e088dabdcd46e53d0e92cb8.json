{"sha": "a6297ab5879af6268e088dabdcd46e53d0e92cb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyOTdhYjU4NzlhZjYyNjhlMDg4ZGFiZGNkNDZlNTNkMGU5MmNiOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-13T22:00:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-13T22:00:50Z"}, "message": "Adjust for new empty class parameter passing ABI.\n\n\t* include/bits/c++config (_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES,\n\t_GLIBCXX_END_NAMESPACE_EMPTY_TYPES, _GLIBCXX_ABI_TAG_EMPTY): Define.\n\t* include/bits/hashtable.h (_Hashtable::_M_emplace): Change signatures\n\tof functions taking empty structs by value. Add a template parameter\n\tto overloads without hints. Rename overloads with hints to\n\t_M_emplace_hint.\n\t(_Hashtable::_M_erase(true_type, const_iterator),\n\t_Hashtable::_M_erase(false_type, const_iterator)): Change signatures\n\tby reordering parameters.\n\t* include/bits/hashtable_policy.h (_Insert::insert): Adjust to call\n\t_M_emplace_hint instead of _M_emplace.\n\t* include/bits/shared_ptr.h (shared_ptr(_Tp1*, _Deleter, _Alloc),\n\tshared_ptr(nullptr_t, _Deleter, _Alloc)): Use _GLIBCXX_ABI_TAG_EMPTY.\n\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter, __shared_count,\n\t__shared_ptr): Likewise.\n\t* include/bits/stl_algo.h (replace_if): Likewise.\n\t* include/bits/stl_pair.h (piecewise_construct_t,\n\tpiecewise_construct): Use _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES.\n\t* include/bits/uses_allocator.h (allocator_arg_t, allocator_arg,\n\t__uses_alloc0): Likewise.\n\t* include/ext/pb_ds/assoc_container.hpp (basic_hash_table): Likewise.\n\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n\t* testsuite/20_util/uses_allocator/69293_neg.cc: Likewise.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Likewise.\n\nFrom-SVN: r234964", "tree": {"sha": "fd0e08b795e1472a7808be3be87fd65081269452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0e08b795e1472a7808be3be87fd65081269452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6297ab5879af6268e088dabdcd46e53d0e92cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6297ab5879af6268e088dabdcd46e53d0e92cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6297ab5879af6268e088dabdcd46e53d0e92cb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6297ab5879af6268e088dabdcd46e53d0e92cb8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93c452f1885b63e70e5b8a8dc288132357260f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93c452f1885b63e70e5b8a8dc288132357260f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93c452f1885b63e70e5b8a8dc288132357260f0"}], "stats": {"total": 141, "additions": 111, "deletions": 30}, "files": [{"sha": "2abb015006d4e93bb50bda886268e1006b03ee1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -1,3 +1,33 @@\n+2016-04-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES,\n+\t_GLIBCXX_END_NAMESPACE_EMPTY_TYPES, _GLIBCXX_ABI_TAG_EMPTY): Define.\n+\t* include/bits/hashtable.h (_Hashtable::_M_emplace): Change signatures\n+\tof functions taking empty structs by value. Add a template parameter\n+\tto overloads without hints. Rename overloads with hints to\n+\t_M_emplace_hint.\n+\t(_Hashtable::_M_erase(true_type, const_iterator),\n+\t_Hashtable::_M_erase(false_type, const_iterator)): Change signatures\n+\tby reordering parameters.\n+\t* include/bits/hashtable_policy.h (_Insert::insert): Adjust to call\n+\t_M_emplace_hint instead of _M_emplace.\n+\t* include/bits/shared_ptr.h (shared_ptr(_Tp1*, _Deleter, _Alloc),\n+\tshared_ptr(nullptr_t, _Deleter, _Alloc)): Use _GLIBCXX_ABI_TAG_EMPTY.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_deleter, __shared_count,\n+\t__shared_ptr): Likewise.\n+\t* include/bits/stl_algo.h (replace_if): Likewise.\n+\t* include/bits/stl_pair.h (piecewise_construct_t,\n+\tpiecewise_construct): Use _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES.\n+\t* include/bits/uses_allocator.h (allocator_arg_t, allocator_arg,\n+\t__uses_alloc0): Likewise.\n+\t* include/ext/pb_ds/assoc_container.hpp (basic_hash_table): Likewise.\n+\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n+\t* testsuite/20_util/uses_allocator/69293_neg.cc: Likewise.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Likewise.\n+\n 2016-04-12  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tDocument C++17/TR29124 C++ Special Math Functions."}, {"sha": "bde003c68a03e9cfb38b1ae5680632895ba99544", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -84,13 +84,32 @@\n # define _GLIBCXX_DEPRECATED\n #endif\n \n+#if __cplusplus\n+\n // Macros for ABI tag attributes.\n #ifndef _GLIBCXX_ABI_TAG_CXX11\n # define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ (\"cxx11\")))\n #endif\n \n-\n-#if __cplusplus\n+#if __GXX_ABI_VERSION >= 1010\n+namespace std\n+{\n+  inline namespace _V2 { }\n+}\n+# define _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES \\\n+  _GLIBCXX_END_NAMESPACE_VERSION \\\n+  namespace _V2 { \\\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+# define _GLIBCXX_END_NAMESPACE_EMPTY_TYPES \\\n+  _GLIBCXX_END_NAMESPACE_VERSION \\\n+  } \\\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+# define _GLIBCXX_ABI_TAG_EMPTY __attribute ((__abi_tag__ (\"cxxempty\")))\n+#else\n+# define _GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n+# define _GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n+# define _GLIBCXX_ABI_TAG_EMPTY\n+#endif\n \n // Macro for constexpr, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_CONSTEXPR"}, {"sha": "22b718761299f0dadbbb13a4ec69118c7fcbf709", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -663,24 +663,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_insert_multi_node(__node_type* __hint,\n \t\t\t   __hash_code __code, __node_type* __n);\n \n-      template<typename... _Args>\n-\tstd::pair<iterator, bool>\n-\t_M_emplace(std::true_type, _Args&&... __args);\n+      template<bool _Uniq, typename... _Args>\n+\ttypename enable_if<_Uniq, std::pair<iterator, bool>>::type\n+\t_M_emplace(__bool_constant<_Uniq>, _Args&&... __args);\n \n-      template<typename... _Args>\n-\titerator\n-\t_M_emplace(std::false_type __uk, _Args&&... __args)\n-\t{ return _M_emplace(cend(), __uk, std::forward<_Args>(__args)...); }\n+      template<bool _Uniq, typename... _Args>\n+\ttypename enable_if<!_Uniq, iterator>::type\n+\t_M_emplace(__bool_constant<_Uniq> __uk, _Args&&... __args)\n+\t{\n+\t  return _M_emplace_hint(cend(), __uk, std::forward<_Args>(__args)...);\n+\t}\n \n       // Emplace with hint, useless when keys are unique.\n       template<typename... _Args>\n \titerator\n-\t_M_emplace(const_iterator, std::true_type __uk, _Args&&... __args)\n+\t_M_emplace_hint(const_iterator, std::true_type __uk, _Args&&... __args)\n \t{ return _M_emplace(__uk, std::forward<_Args>(__args)...).first; }\n \n       template<typename... _Args>\n \titerator\n-\t_M_emplace(const_iterator, std::false_type, _Args&&... __args);\n+\t_M_emplace_hint(const_iterator, std::false_type, _Args&&... __args);\n \n       template<typename _Arg, typename _NodeGenerator>\n \tstd::pair<iterator, bool>\n@@ -712,10 +714,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  const _NodeGenerator&, std::false_type);\n \n       size_type\n-      _M_erase(std::true_type, const key_type&);\n+      _M_erase(const key_type&, std::true_type);\n \n       size_type\n-      _M_erase(std::false_type, const key_type&);\n+      _M_erase(const key_type&, std::false_type);\n \n       iterator\n       _M_erase(size_type __bkt, __node_base* __prev_n, __node_type* __n);\n@@ -731,8 +733,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \titerator\n \templace_hint(const_iterator __hint, _Args&&... __args)\n \t{\n-\t  return _M_emplace(__hint, __unique_keys(),\n-\t\t\t    std::forward<_Args>(__args)...);\n+\t  return _M_emplace_hint(__hint, __unique_keys(),\n+\t\t\t\t std::forward<_Args>(__args)...);\n \t}\n \n       // Insert member functions via inheritance.\n@@ -748,7 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       erase(const key_type& __k)\n-      { return _M_erase(__unique_keys(), __k); }\n+      { return _M_erase(__k, __unique_keys()); }\n \n       iterator\n       erase(const_iterator, const_iterator);\n@@ -1502,12 +1504,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Alloc, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   typename _Traits>\n-    template<typename... _Args>\n+    template<bool _Uniq, typename... _Args>\n       auto\n       _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-      _M_emplace(std::true_type, _Args&&... __args)\n-      -> pair<iterator, bool>\n+      _M_emplace(__bool_constant<_Uniq>, _Args&&... __args)\n+      -> typename enable_if<_Uniq, pair<iterator, bool>>::type\n       {\n \t// First build the node to get access to the hash code\n \t__node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);\n@@ -1544,7 +1546,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       auto\n       _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-      _M_emplace(const_iterator __hint, std::false_type, _Args&&... __args)\n+      _M_emplace_hint(const_iterator __hint, std::false_type, _Args&&... __args)\n       -> iterator\n       {\n \t// First build the node to get its hash code.\n@@ -1769,7 +1771,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     auto\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-    _M_erase(std::true_type, const key_type& __k)\n+    _M_erase(const key_type& __k, std::true_type)\n     -> size_type\n     {\n       __hash_code __code = this->_M_hash_code(__k);\n@@ -1793,7 +1795,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     auto\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-    _M_erase(std::false_type, const key_type& __k)\n+    _M_erase(const key_type& __k, std::false_type)\n     -> size_type\n     {\n       __hash_code __code = this->_M_hash_code(__k);"}, {"sha": "ceb78b4d709450e7043fb622c9b6505689c4a13f", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -906,8 +906,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tinsert(const_iterator __hint, _Pair&& __v)\n \t{\n \t  __hashtable& __h = this->_M_conjure_hashtable();\n-\t  return __h._M_emplace(__hint, __unique_keys(),\n-\t\t\t\tstd::forward<_Pair>(__v));\n+\t  return __h._M_emplace_hint(__hint, __unique_keys(),\n+\t\t\t\t     std::forward<_Pair>(__v));\n \t}\n    };\n "}, {"sha": "f4c27543c7bd49f5ebfc7dd69e9223e871fd201f", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -166,6 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  __shared_ptr will release __p by calling __d(__p)\n        */\n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \tshared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n \t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n \n@@ -185,6 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The last owner will call __d(__p)\n        */\n       template<typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \tshared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n \t: __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }\n "}, {"sha": "6d523e1798612f5ccb3014b5adfe57af5d4cc9a8", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -436,6 +436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef _Sp_ebo_helper<1, _Alloc>\t_Alloc_base;\n \n       public:\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \t_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n \t: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)\n \t{ }\n@@ -454,6 +455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_impl(__p, __d, _Alloc()) { }\n \n       // __d(__p) must not throw.\n+      _GLIBCXX_ABI_TAG_EMPTY\n       _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept\n       : _M_impl(__p, __d, __a) { }\n \n@@ -584,6 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Ptr, typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \t__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)\n \t{\n \t  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;\n@@ -900,6 +903,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \t__shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n \t: _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))\n \t{\n@@ -914,6 +918,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n         __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)\n \t: _M_ptr(0), _M_refcount(__p, __d, std::move(__a))\n \t{ }\n@@ -1039,6 +1044,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ __shared_ptr(__p, __d).swap(*this); }\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n+\t_GLIBCXX_ABI_TAG_EMPTY\n \tvoid\n         reset(_Tp1* __p, _Deleter __d, _Alloc __a)\n         { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }"}, {"sha": "28e1e3b2331b9b706da65051432b6cf14dcec49c", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -4270,6 +4270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  is true then the assignment @c *i = @p __new_value is performed.\n   */\n   template<typename _ForwardIterator, typename _Predicate, typename _Tp>\n+    _GLIBCXX_ABI_TAG_EMPTY\n     void\n     replace_if(_ForwardIterator __first, _ForwardIterator __last,\n \t       _Predicate __pred, const _Tp& __new_value)"}, {"sha": "e6ff00eec17d491911cdd0ff99ab5992a85a1902", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -72,12 +72,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #if __cplusplus >= 201103L\n+\n+_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n+\n   /// piecewise_construct_t\n   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };\n \n   /// piecewise_construct\n   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();\n \n+_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n+\n   // Forward declarations.\n   template<typename...>\n     class tuple;"}, {"sha": "86162a8af8a01bbdf4a996348e514d813bb90000", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -42,11 +42,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __is_erased_or_convertible\n       = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;\n \n+_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n+\n   /// [allocator.tag]\n   struct allocator_arg_t { explicit allocator_arg_t() = default; };\n \n   constexpr allocator_arg_t allocator_arg = allocator_arg_t();\n \n+_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n+\n   template<typename _Tp, typename _Alloc, typename = __void_t<>>\n     struct __uses_allocator_helper\n     : false_type { };\n@@ -65,11 +69,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct __uses_alloc_base { };\n \n+_GLIBCXX_BEGIN_NAMESPACE_EMPTY_TYPES\n+\n   struct __uses_alloc0 : __uses_alloc_base\n   {\n     struct _Sink { void operator=(const void*) { } } _M_a;\n   };\n \n+_GLIBCXX_END_NAMESPACE_EMPTY_TYPES\n+\n   template<typename _Alloc>\n     struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };\n "}, {"sha": "a6b1e277a306d892eba3f76bf0b9efb17313923a", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -120,36 +120,44 @@ namespace __gnu_pbds\n       basic_hash_table(T0 t0) : base_type(t0) { }\n \n     template<typename T0, typename T1>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1) : base_type(t0, t1) { }\n \n     template<typename T0, typename T1, typename T2>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2) { }\n \n     template<typename T0, typename T1, typename T2, typename T3>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3)\n       : base_type(t0, t1, t2, t3) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4)\n       : base_type(t0, t1, t2, t3, t4) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)\n       : base_type(t0, t1, t2, t3, t4, t5) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)\n       : base_type(t0, t1, t2, t3, t4, t5, t6) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6, typename T7>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7)\n       : base_type(t0, t1, t2, t3, t4, t5, t6, t7) { }\n \n     template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t     typename T5, typename T6, typename T7, typename T8>\n+      _GLIBCXX_ABI_TAG_EMPTY\n       basic_hash_table(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6,\n \t\t       T7 t7, T8 t8)\n       : base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)"}, {"sha": "5487b0ac6a1a58487c1b2e2478487c0f9d8017bb", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -47,5 +47,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }\n }"}, {"sha": "a0ce1f5a61b621bb3c23bd1240152e0fb00707cc", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 889 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 892 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "88036fdcee91bf1b52c86d94ca60b606824594fe", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 888 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 891 }\n }"}, {"sha": "88e1ea10d84808d408effc4191c370dd408660bb", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -45,5 +45,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }\n }"}, {"sha": "e4cd2765bf792e54f7f6449c2aa16e95070906e7", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 97 }"}, {"sha": "8ffdee89f2a9a588af552ccc7aab208db3ac2102", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6297ab5879af6268e088dabdcd46e53d0e92cb8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=a6297ab5879af6268e088dabdcd46e53d0e92cb8", "patch": "@@ -25,7 +25,7 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 324 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 343 }\n \n // \"template argument 1 is invalid\"\n // { dg-prune-output \"tuple:993\" }"}]}