{"sha": "9eb8785b3fa3a180bd216cf68b53f1621628efc6", "node_id": "C_kwDOANBUbNoAKDllYjg3ODViM2ZhM2ExODBiZDIxNmNmNjhiNTNmMTYyMTYyOGVmYzY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-10T10:40:54Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-13T13:58:34Z"}, "message": "inline: fix ICE with -fprofile-generate\n\n\tPR ipa/103636\n\ngcc/ChangeLog:\n\n\t* ipa-inline.c (can_inline_edge_p): Move logic checking\n\tno_profile_instrument_function logic to ...\n\t(can_early_inline_edge_p): ... here.", "tree": {"sha": "c798fb96f9409ffde717f57ecaef95258058820b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c798fb96f9409ffde717f57ecaef95258058820b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eb8785b3fa3a180bd216cf68b53f1621628efc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb8785b3fa3a180bd216cf68b53f1621628efc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb8785b3fa3a180bd216cf68b53f1621628efc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb8785b3fa3a180bd216cf68b53f1621628efc6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fb12f12fee7313be1d3fb965e63d4c8580eb95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fb12f12fee7313be1d3fb965e63d4c8580eb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55fb12f12fee7313be1d3fb965e63d4c8580eb95"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "a1c312f1774979912c865628967c032469bf1060", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eb8785b3fa3a180bd216cf68b53f1621628efc6/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eb8785b3fa3a180bd216cf68b53f1621628efc6/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9eb8785b3fa3a180bd216cf68b53f1621628efc6", "patch": "@@ -396,22 +396,6 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_SANITIZE_ATTRIBUTE_MISMATCH;\n       inlinable = false;\n     }\n-  else if (profile_arc_flag\n-\t   && (lookup_attribute (\"no_profile_instrument_function\",\n-\t\t\t\t DECL_ATTRIBUTES (caller->decl)) == NULL_TREE)\n-\t   != (lookup_attribute (\"no_profile_instrument_function\",\n-\t\t\t\t DECL_ATTRIBUTES (callee->decl)) == NULL_TREE))\n-    {\n-      cgraph_node *origin = caller;\n-      while (origin->clone_of)\n-\torigin = origin->clone_of;\n-\n-      if (!DECL_STRUCT_FUNCTION (origin->decl)->always_inline_functions_inlined)\n-\t{\n-\t  e->inline_failed = CIF_UNSPECIFIED;\n-\t  inlinable = false;\n-\t}\n-    }\n \n   if (!inlinable && report)\n     report_inline_failed_reason (e);\n@@ -637,6 +621,8 @@ can_inline_edge_by_limits_p (struct cgraph_edge *e, bool report,\n static bool\n can_early_inline_edge_p (struct cgraph_edge *e)\n {\n+  cgraph_node *caller = (e->caller->inlined_to\n+\t\t\t ? e->caller->inlined_to : e->caller);\n   struct cgraph_node *callee = e->callee->ultimate_alias_target ();\n   /* Early inliner might get called at WPA stage when IPA pass adds new\n      function.  In this case we cannot really do any of early inlining\n@@ -660,6 +646,13 @@ can_early_inline_edge_p (struct cgraph_edge *e)\n \t\t\t \"  edge not inlinable: not in SSA form\\n\");\n       return false;\n     }\n+  else if (profile_arc_flag\n+\t   && ((lookup_attribute (\"no_profile_instrument_function\",\n+\t\t\t\t DECL_ATTRIBUTES (caller->decl)) == NULL_TREE)\n+\t       != (lookup_attribute (\"no_profile_instrument_function\",\n+\t\t\t\t     DECL_ATTRIBUTES (callee->decl)) == NULL_TREE)))\n+    return false;\n+\n   if (!can_inline_edge_p (e, true, true)\n       || !can_inline_edge_by_limits_p (e, true, false, true))\n     return false;"}]}