{"sha": "a2264f2d5402eae62020d5e7556fb1a5ebd28729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyNjRmMmQ1NDAyZWFlNjIwMjBkNWU3NTU2ZmIxYTVlYmQyODcyOQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2007-08-14T08:44:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:44:02Z"}, "message": "s-osinte-mingw.ads: Add support for Ada.Execution_Time on Windows.\n\n2007-08-14  Pascal Obry  <obry@adacore.com>\n\n\t* s-osinte-mingw.ads: Add support for Ada.Execution_Time on Windows.\n\t(SYSTEM_INFO): New record.\n\t(SetThreadIdealProcessor): New imported routine needed for supporting\n\ttask_info pragma on Windows.\n\n\t* s-taprop-mingw.adb (Enter_Task): Check if CPU number given in task\n\tinfo can be applied to the current host.\n\t(Create_Task): Set the ideal processor if information is present.\n\n\t* s-tasinf-mingw.adb, s-tasinf-mingw.ads,\n\ta-exetim-mingw.adb, a-exetim-mingw.ads: New files.\n\nFrom-SVN: r127434", "tree": {"sha": "c0fcdfb991e1fa07e98bedeff17e18a4ec61598a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0fcdfb991e1fa07e98bedeff17e18a4ec61598a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2264f2d5402eae62020d5e7556fb1a5ebd28729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2264f2d5402eae62020d5e7556fb1a5ebd28729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2264f2d5402eae62020d5e7556fb1a5ebd28729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2264f2d5402eae62020d5e7556fb1a5ebd28729/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43316a012f70cb4f549d4a0a512d9a9e7d632c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43316a012f70cb4f549d4a0a512d9a9e7d632c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43316a012f70cb4f549d4a0a512d9a9e7d632c03"}], "stats": {"total": 495, "additions": 494, "deletions": 1}, "files": [{"sha": "bf2f271c045963526b1b5d91870b473d6e283891", "filename": "gcc/ada/a-exetim-mingw.adb", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fa-exetim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fa-exetim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.adb?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -0,0 +1,160 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                   A D A . E X E C U T I O N _ T I M E                    --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Windows native version of this package\n+\n+with Ada.Task_Identification;           use Ada.Task_Identification;\n+with Ada.Unchecked_Conversion;\n+\n+with System.OS_Interface;               use System.OS_Interface;\n+with System.Task_Primitives.Operations; use System.Task_Primitives.Operations;\n+with System.Tasking;                    use System.Tasking;\n+\n+package body Ada.Execution_Time is\n+\n+   ---------\n+   -- \"+\" --\n+   ---------\n+\n+   function \"+\"\n+     (Left  : CPU_Time;\n+      Right : Ada.Real_Time.Time_Span) return CPU_Time\n+   is\n+      use type Ada.Real_Time.Time;\n+   begin\n+      return CPU_Time (Ada.Real_Time.Time (Left) + Right);\n+   end \"+\";\n+\n+   function \"+\"\n+     (Left  : Ada.Real_Time.Time_Span;\n+      Right : CPU_Time) return CPU_Time\n+   is\n+      use type Ada.Real_Time.Time;\n+   begin\n+      return CPU_Time (Left + Ada.Real_Time.Time (Right));\n+   end \"+\";\n+\n+   ---------\n+   -- \"-\" --\n+   ---------\n+\n+   function \"-\"\n+     (Left  : CPU_Time;\n+      Right : Ada.Real_Time.Time_Span) return CPU_Time\n+   is\n+      use type Ada.Real_Time.Time;\n+   begin\n+      return CPU_Time (Ada.Real_Time.Time (Left) - Right);\n+   end \"-\";\n+\n+   function \"-\"\n+     (Left  : CPU_Time;\n+      Right : CPU_Time) return Ada.Real_Time.Time_Span\n+   is\n+      use type Ada.Real_Time.Time;\n+   begin\n+      return (Ada.Real_Time.Time (Left) - Ada.Real_Time.Time (Right));\n+   end \"-\";\n+\n+   -----------\n+   -- Clock --\n+   -----------\n+\n+   function Clock\n+     (T : Ada.Task_Identification.Task_Id :=\n+            Ada.Task_Identification.Current_Task) return CPU_Time\n+   is\n+      Hundreds_Nano_In_Sec : constant Long_Long_Float := 1.0E7;\n+\n+      function To_Time is new Ada.Unchecked_Conversion\n+        (Duration, Ada.Real_Time.Time);\n+\n+      function To_Task_Id is new Ada.Unchecked_Conversion\n+        (Ada.Task_Identification.Task_Id, System.Tasking.Task_Id);\n+\n+      C_Time : aliased Long_Long_Integer;\n+      E_Time : aliased Long_Long_Integer;\n+      K_Time : aliased Long_Long_Integer;\n+      U_Time : aliased Long_Long_Integer;\n+      Res    : BOOL;\n+\n+   begin\n+      if T = Ada.Task_Identification.Null_Task_Id then\n+         raise Program_Error;\n+      end if;\n+\n+      Res :=\n+        GetThreadTimes\n+          (HANDLE (Get_Thread_Id (To_Task_Id (T))),\n+           C_Time'Access, E_Time'Access, K_Time'Access, U_Time'Access);\n+\n+      if Res = False then\n+         raise Program_Error;\n+      end if;\n+\n+      return\n+        CPU_Time\n+          (To_Time\n+             (Duration\n+                ((Long_Long_Float (K_Time) / Hundreds_Nano_In_Sec)\n+                 + (Long_Long_Float (U_Time) / Hundreds_Nano_In_Sec))));\n+   end Clock;\n+\n+   -----------\n+   -- Split --\n+   -----------\n+\n+   procedure Split\n+     (T  : CPU_Time;\n+      SC : out Ada.Real_Time.Seconds_Count;\n+      TS : out Ada.Real_Time.Time_Span)\n+   is\n+      use type Ada.Real_Time.Time;\n+   begin\n+      Ada.Real_Time.Split (Ada.Real_Time.Time (T), SC, TS);\n+   end Split;\n+\n+   -------------\n+   -- Time_Of --\n+   -------------\n+\n+   function Time_Of\n+     (SC : Ada.Real_Time.Seconds_Count;\n+      TS : Ada.Real_Time.Time_Span := Ada.Real_Time.Time_Span_Zero)\n+      return CPU_Time\n+   is\n+   begin\n+      return CPU_Time (Ada.Real_Time.Time_Of (SC, TS));\n+   end Time_Of;\n+\n+end Ada.Execution_Time;"}, {"sha": "7ec45ba353de8be3369c19ad87ee3252a86a00bf", "filename": "gcc/ada/a-exetim-mingw.ads", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fa-exetim-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fa-exetim-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.ads?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -0,0 +1,98 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                   A D A . E X E C U T I O N _ T I M E                    --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+------------------------------------------------------------------------------\n+\n+--  This is the Windows native version of this package\n+\n+with Ada.Task_Identification;\n+with Ada.Real_Time;\n+\n+package Ada.Execution_Time is\n+\n+   type CPU_Time is private;\n+\n+   CPU_Time_First : constant CPU_Time;\n+   CPU_Time_Last  : constant CPU_Time;\n+   CPU_Time_Unit  : constant := 0.000001;\n+   CPU_Tick       : constant Ada.Real_Time.Time_Span;\n+\n+   function Clock\n+     (T : Ada.Task_Identification.Task_Id :=\n+            Ada.Task_Identification.Current_Task) return CPU_Time;\n+\n+   function \"+\"\n+     (Left  : CPU_Time;\n+      Right : Ada.Real_Time.Time_Span) return CPU_Time;\n+\n+   function \"+\"\n+     (Left  : Ada.Real_Time.Time_Span;\n+      Right : CPU_Time) return CPU_Time;\n+\n+   function \"-\"\n+     (Left  : CPU_Time;\n+      Right : Ada.Real_Time.Time_Span) return CPU_Time;\n+\n+   function \"-\"\n+     (Left  : CPU_Time;\n+      Right : CPU_Time) return Ada.Real_Time.Time_Span;\n+\n+   function \"<\"  (Left, Right : CPU_Time) return Boolean;\n+   function \"<=\" (Left, Right : CPU_Time) return Boolean;\n+   function \">\"  (Left, Right : CPU_Time) return Boolean;\n+   function \">=\" (Left, Right : CPU_Time) return Boolean;\n+\n+   procedure Split\n+     (T  : CPU_Time;\n+      SC : out Ada.Real_Time.Seconds_Count;\n+      TS : out Ada.Real_Time.Time_Span);\n+\n+   function Time_Of\n+      (SC : Ada.Real_Time.Seconds_Count;\n+       TS : Ada.Real_Time.Time_Span := Ada.Real_Time.Time_Span_Zero)\n+       return CPU_Time;\n+\n+private\n+\n+   type CPU_Time is new Ada.Real_Time.Time;\n+\n+   CPU_Time_First : constant CPU_Time  := CPU_Time (Ada.Real_Time.Time_First);\n+   CPU_Time_Last  : constant CPU_Time  := CPU_Time (Ada.Real_Time.Time_Last);\n+\n+   CPU_Tick : constant Ada.Real_Time.Time_Span := Ada.Real_Time.Tick;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+\n+end Ada.Execution_Time;"}, {"sha": "0fc713f774f9e5c330bf5f1bb2bf36b32f534d4e", "filename": "gcc/ada/s-osinte-mingw.ads", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-osinte-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-osinte-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-mingw.ads?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -95,6 +95,25 @@ package System.OS_Interface is\n    NO_ERROR : constant := 0;\n    FUNC_ERR : constant := -1;\n \n+   ------------------------\n+   -- System Information --\n+   ------------------------\n+\n+   type SYSTEM_INFO is record\n+      dwOemId                     : DWORD;\n+      dwPageSize                  : DWORD;\n+      lpMinimumApplicationAddress : PVOID;\n+      lpMaximumApplicationAddress : PVOID;\n+      dwActiveProcessorMask       : DWORD;\n+      dwNumberOfProcessors        : DWORD;\n+      dwProcessorType             : DWORD;\n+      dwAllocationGranularity     : DWORD;\n+      dwReserved                  : DWORD;\n+   end record;\n+\n+   procedure GetSystemInfo (SI : access SYSTEM_INFO);\n+   pragma Import (Stdcall, GetSystemInfo, \"GetSystemInfo\");\n+\n    -------------\n    -- Signals --\n    -------------\n@@ -194,6 +213,14 @@ package System.OS_Interface is\n    procedure SwitchToThread;\n    pragma Import (Stdcall, SwitchToThread, \"SwitchToThread\");\n \n+   function GetThreadTimes\n+     (hThread        : HANDLE;\n+      lpCreationTime : access Long_Long_Integer;\n+      lpExitTime     : access Long_Long_Integer;\n+      lpKernelTime   : access Long_Long_Integer;\n+      lpUserTime     : access Long_Long_Integer) return BOOL;\n+   pragma Import (Stdcall, GetThreadTimes, \"GetThreadTimes\");\n+\n    -----------------------\n    -- Critical sections --\n    -----------------------\n@@ -221,6 +248,8 @@ package System.OS_Interface is\n    -- Thread Creation, Activation, Suspension And Termination --\n    -------------------------------------------------------------\n \n+   subtype ProcessorId is DWORD;\n+\n    type PTHREAD_START_ROUTINE is access function\n      (pThreadParameter : PVOID) return DWORD;\n    pragma Convention (Stdcall, PTHREAD_START_ROUTINE);\n@@ -329,6 +358,11 @@ package System.OS_Interface is\n       fAlertable     : BOOL) return DWORD;\n    pragma Import (Stdcall, WaitForSingleObjectEx, \"WaitForSingleObjectEx\");\n \n+   function SetThreadIdealProcessor\n+     (hThread          : HANDLE;\n+      dwIdealProcessor : ProcessorId) return DWORD;\n+   pragma Import (Stdcall, SetThreadIdealProcessor, \"SetThreadIdealProcessor\");\n+\n    Wait_Infinite : constant := DWORD'Last;\n    WAIT_TIMEOUT  : constant := 16#0000_0102#;\n    WAIT_FAILED   : constant := 16#FFFF_FFFF#;"}, {"sha": "603e2430378ac36773e5fb9e2cae3618c5d457ac", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -80,6 +80,7 @@ package body System.Task_Primitives.Operations is\n    use System.OS_Interface;\n    use System.Parameters;\n    use System.OS_Primitives;\n+   use System.Task_Info;\n \n    pragma Link_With (\"-Xlinker --stack=0x200000,0x1000\");\n    --  Change the default stack size (2 MB) for tasking programs on Windows.\n@@ -786,6 +787,13 @@ package body System.Task_Primitives.Operations is\n       Specific.Set (Self_ID);\n       Init_Float;\n \n+      if Self_ID.Common.Task_Info /= null\n+        and then\n+          Self_ID.Common.Task_Info.CPU >= CPU_Number (Number_Of_Processors)\n+      then\n+         raise Invalid_CPU_Number;\n+      end if;\n+\n       Self_ID.Common.LL.Thread_Id := GetCurrentThreadId;\n \n       Lock_RTS;\n@@ -925,7 +933,16 @@ package body System.Task_Primitives.Operations is\n          SetThreadPriorityBoost (hTask, DisablePriorityBoost => True);\n       end if;\n \n-      --  Step 4: Now, start it for good:\n+      --  Step 4: Handle Task_Info\n+\n+      if T.Common.Task_Info /= null then\n+         if T.Common.Task_Info.CPU /= Task_Info.Any_CPU then\n+            Result := SetThreadIdealProcessor (hTask, T.Common.Task_Info.CPU);\n+            pragma Assert (Result = 1);\n+         end if;\n+      end if;\n+\n+      --  Step 5: Now, start it for good:\n \n       Result := ResumeThread (hTask);\n       pragma Assert (Result = 1);\n@@ -1275,4 +1292,23 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n end System.Task_Primitives.Operations;"}, {"sha": "530924efaca8ba45076ea3d483983edef2beeeea", "filename": "gcc/ada/s-tasinf-mingw.adb", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-tasinf-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-tasinf-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-mingw.adb?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -0,0 +1,61 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . T A S K _ I N F O                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the Windows (native) version of this module\n+\n+package body System.Task_Info is\n+\n+   N_CPU : Natural := 0;\n+   pragma Atomic (N_CPU);\n+   --  Cache CPU number. Use pragma Atomic to avoid a race condition when\n+   --  setting N_CPU in Number_Of_Processors below.\n+\n+   --------------------------\n+   -- Number_Of_Processors --\n+   --------------------------\n+\n+   function Number_Of_Processors return Positive is\n+   begin\n+      if N_CPU = 0 then\n+         declare\n+            SI : aliased System.OS_Interface.SYSTEM_INFO;\n+         begin\n+            System.OS_Interface.GetSystemInfo (SI'Access);\n+            N_CPU := Positive (SI.dwNumberOfProcessors);\n+         end;\n+      end if;\n+\n+      return N_CPU;\n+   end Number_Of_Processors;\n+\n+end System.Task_Info;"}, {"sha": "baf2d8eaedcc2277352c089935fa68a184460316", "filename": "gcc/ada/s-tasinf-mingw.ads", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-tasinf-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2264f2d5402eae62020d5e7556fb1a5ebd28729/gcc%2Fada%2Fs-tasinf-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-mingw.ads?ref=a2264f2d5402eae62020d5e7556fb1a5ebd28729", "patch": "@@ -0,0 +1,104 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . T A S K _ I N F O                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the definitions and routines associated with the\n+--  implementation and use of the Task_Info pragma. It is specialized\n+--  appropriately for targets that make use of this pragma.\n+\n+--  Note: the compiler generates direct calls to this interface, via Rtsfind.\n+--  Any changes to this interface may require corresponding compiler changes.\n+\n+--  This unit may be used directly from an application program by providing\n+--  an appropriate WITH, and the interface can be expected to remain stable.\n+\n+--  This is the Windows (native) version of this module.\n+\n+with System.OS_Interface;\n+\n+package System.Task_Info is\n+   pragma Preelaborate;\n+   pragma Elaborate_Body;\n+   --  To ensure that a body is allowed\n+\n+   use type System.OS_Interface.ProcessorId;\n+\n+   --  Windows provides a way to define the ideal processor to use for a given\n+   --  thread. The ideal processor is not necessarily the one that will be used\n+   --  by the OS but the OS will always try to schedule this thread to the\n+   --  specified processor if it is available.\n+\n+   --  The Task_Info pragma:\n+\n+   --    pragma Task_Info (EXPRESSION);\n+\n+   --  allows the specification on a task by task basis of a value of type\n+   --  System.Task_Info.Task_Info_Type to be passed to a task when it is\n+   --  created. The specification of this type, and the effect on the task\n+   --  that is created is target dependent.\n+\n+   --  The Task_Info pragma appears within a task definition (compare the\n+   --  definition and implementation of pragma Priority). If no such pragma\n+   --  appears, then the value Unspecified_Task_Info is passed. If a pragma\n+   --  is present, then it supplies an alternative value. If the argument of\n+   --  the pragma is a discriminant reference, then the value can be set on\n+   --  a task by task basis by supplying the appropriate discriminant value.\n+\n+   --  Note that this means that the type used for Task_Info_Type must be\n+   --  suitable for use as a discriminant (i.e. a scalar or access type).\n+\n+   -----------------------\n+   -- Thread Attributes --\n+   -----------------------\n+\n+   subtype CPU_Number is System.OS_Interface.ProcessorId;\n+\n+   Any_CPU : constant CPU_Number := -1;\n+\n+   Invalid_CPU_Number : exception;\n+   --  Raised when an invalid CPU number has been specified\n+   --  i.e. CPU > Number_Of_Processors.\n+\n+   type Thread_Attributes is record\n+      CPU : CPU_Number := Any_CPU;\n+   end record;\n+\n+   Default_Thread_Attributes : constant Thread_Attributes := (others => <>);\n+\n+   type Task_Info_Type is access all Thread_Attributes;\n+\n+   Unspecified_Task_Info : constant Task_Info_Type := null;\n+\n+   function Number_Of_Processors return Positive;\n+   --  Returns the number of processors on the running host\n+\n+end System.Task_Info;"}]}