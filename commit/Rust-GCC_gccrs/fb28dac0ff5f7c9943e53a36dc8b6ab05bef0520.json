{"sha": "fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyOGRhYzBmZjVmN2M5OTQzZTUzYTM2ZGM4YjZhYjA1YmVmMDUyMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-01-13T19:17:45Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-01-13T19:17:45Z"}, "message": "msp430.md (call_internal): Don't allow memory references with SP as the base register.\n\n* config/msp430/msp430.md (call_internal): Don't allow memory\nreferences with SP as the base register.\n(call_value_internal): Likewise.\n* config/msp430/constraints.md (Yc): New.  For memory references\nthat don't use SP as a base register.\n\n* config/msp430/msp430.c (msp430_print_operand): Add 'J' to mean\n\"an integer without a # prefix\"\n* config/msp430/msp430.md (epilogue_helper): Use it.\n\nFrom-SVN: r206586", "tree": {"sha": "8e52ce60f78867347d1d225030648e00b2b503cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e52ce60f78867347d1d225030648e00b2b503cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/comments", "author": null, "committer": null, "parents": [{"sha": "03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b9e8e48dfb02c43661102ce25d968dd4b2e09d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b9e8e48dfb02c43661102ce25d968dd4b2e09d"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "5c674bc5b4438d789ea3d1ba4b769d3a129877cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "patch": "@@ -1,3 +1,15 @@\n+2014-01-10  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/msp430/msp430.md (call_internal): Don't allow memory\n+\treferences with SP as the base register.\n+\t(call_value_internal): Likewise.\n+\t* config/msp430/constraints.md (Yc): New.  For memory references\n+\tthat don't use SP as a base register.\n+\n+\t* config/msp430/msp430.c (msp430_print_operand): Add 'J' to mean\n+\t\"an integer without a # prefix\"\n+\t* config/msp430/msp430.md (epilogue_helper): Use it.\n+\n 2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59617"}, {"sha": "8ab057fd1c93ff9b67bdb703202606ce36b266f8", "filename": "gcc/config/msp430/constraints.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fconstraints.md?ref=fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "patch": "@@ -70,3 +70,16 @@\n \t\t  (match_test (\"IN_RANGE (INTVAL (XEXP (XEXP (op, 0), 1)), -1 << 15, (1 << 15)-1)\"))))\n \t(match_code \"reg\" \"0\")\n \t)))\n+\n+(define_constraint \"Yc\"\n+  \"Memory reference, for CALL - we can't use SP\"\n+  (and (match_code \"mem\")\n+       (match_code \"mem\" \"0\")\n+       (not (ior\n+\t     (and (match_code \"plus\" \"00\")\n+\t\t  (and (match_code \"reg\" \"000\")\n+\t\t       (match_test (\"REGNO (XEXP (XEXP (op, 0), 0)) != SP_REGNO\"))))\n+\t     (and (match_code \"reg\" \"0\")\n+\t\t  (match_test (\"REGNO (XEXP (XEXP (op, 0), 0)) != SP_REGNO\")))\n+\t     ))))\n+"}, {"sha": "d49b9a463743bc2b6e780e70188b1e6ec6114bb2", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "patch": "@@ -1920,6 +1920,7 @@ msp430_print_operand_addr (FILE * file, rtx addr)\n    D   bits 48-63 of a 64-bit value/reg 4 of a DImode value\n    H   like %B (for backwards compatibility)\n    I   inverse of value\n+   J   an integer without a # prefix\n    L   like %A (for backwards compatibility)\n    O   offset of the top of the stack\n    Q   like X but generates an A postfix\n@@ -1950,7 +1951,6 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       /* Print the constant value, less four.  */\n       fprintf (file, \"#%ld\", INTVAL (op) - 4);\n       return;\n-      /* case 'D': used for \"decimal without '#'\" */\n     case 'I':\n       if (GET_CODE (op) == CONST_INT)\n \t{\n@@ -2110,6 +2110,8 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t        - 2);\n       return;\n \n+    case 'J':\n+      gcc_assert (GET_CODE (op) == CONST_INT);\n     case 0:\n       break;\n     default:"}, {"sha": "6a40fd9e2925b6894ff1ee07b154243aa900c83b", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=fb28dac0ff5f7c9943e53a36dc8b6ab05bef0520", "patch": "@@ -920,7 +920,7 @@\n (define_insn \"epilogue_helper\"\n   [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")] UNS_EPILOGUE_HELPER)]\n   \"\"\n-  \"BR%Q0\\t#__mspabi_func_epilog_%0\"\n+  \"BR%Q0\\t#__mspabi_func_epilog_%J0\"\n   )\n \n \n@@ -953,7 +953,7 @@\n )\n \n (define_insn \"call_internal\"\n-  [(call (mem:HI (match_operand 0 \"general_operand\" \"rmi\"))\n+  [(call (mem:HI (match_operand 0 \"general_operand\" \"rYci\"))\n \t (match_operand 1 \"\"))]\n   \"\"\n   \"CALL%Q0\\t%0\"\n@@ -969,7 +969,7 @@\n \n (define_insn \"call_value_internal\"\n   [(set (match_operand               0 \"register_operand\" \"=r\")\n-\t(call (mem:HI (match_operand 1 \"general_operand\" \"rmi\"))\n+\t(call (mem:HI (match_operand 1 \"general_operand\" \"rYci\"))\n \t      (match_operand 2 \"\")))]\n   \"\"\n   \"CALL%Q0\\t%1\""}]}