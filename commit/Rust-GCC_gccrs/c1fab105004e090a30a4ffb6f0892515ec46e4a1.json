{"sha": "c1fab105004e090a30a4ffb6f0892515ec46e4a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYWIxMDUwMDRlMDkwYTMwYTRmZmI2ZjA4OTI1MTVlYzQ2ZTRhMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T22:26:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T22:26:54Z"}, "message": "pa.md (pre_ldwm, pre_stwm): Name these patterns to make generating them easier.\n\n\t* pa.md (pre_ldwm, pre_stwm): Name these patterns to make\n\tgenerating them easier.\n\t*post_ldwm, post_stwm): New patterns.\n\t(add_high_const): New pattern.\n\t(return): New pattern.\n\nFrom-SVN: r3772", "tree": {"sha": "e966484c30ce5ef0804530d8d85163dac5ada368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e966484c30ce5ef0804530d8d85163dac5ada368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fab105004e090a30a4ffb6f0892515ec46e4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fab105004e090a30a4ffb6f0892515ec46e4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fab105004e090a30a4ffb6f0892515ec46e4a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fab105004e090a30a4ffb6f0892515ec46e4a1/comments", "author": null, "committer": null, "parents": [{"sha": "6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7d5990f4a5c2c03bce867fbf5ca2395636e794"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "53cdb2b503fc9cd1c6c257a1ed1624e7037e8e87", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fab105004e090a30a4ffb6f0892515ec46e4a1/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fab105004e090a30a4ffb6f0892515ec46e4a1/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=c1fab105004e090a30a4ffb6f0892515ec46e4a1", "patch": "@@ -911,7 +911,7 @@\n \n ;; Load or store with base-register modification.\n \n-(define_insn \"\"\n+(define_insn \"pre_ldwm\"\n   [(set (match_operand:SI 3 \"register_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t (match_operand:SI 2 \"pre_cint_operand\" \"\"))))\n@@ -927,7 +927,7 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"pre_stwm\"\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t (match_operand:SI 2 \"pre_cint_operand\" \"\")))\n \t(match_operand:SI 3 \"reg_or_0_operand\" \"rM\"))\n@@ -943,6 +943,38 @@\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"1\")])\n \n+(define_insn \"post_ldwm\"\n+  [(set (match_operand:SI 3 \"register_operand\" \"r\")\n+\t(mem:SI (match_operand:SI 1 \"register_operand\" \"0\")))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) \n+\t\t (match_operand:SI 2 \"post_cint_operand\" \"\")))]\n+  \"\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) > 0)\n+    return \\\"ldwm %2(0,%0),%3\\\";\n+  return \\\"ldws,ma %2(0,%0),%3\\\";\n+}\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"post_stwm\"\n+  [(set (mem:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n+\t(match_operand:SI 3 \"reg_or_0_operand\" \"rM\"))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) \n+\t\t (match_operand:SI 2 \"post_cint_operand\" \"\")))]\n+  \"\"\n+  \"*\n+{\n+  if (INTVAL (operands[2]) > 0)\n+    return \\\"stwm %r3,%2(0,%0)\\\";\n+  return \\\"stws,ma %r3,%2(0,%0)\\\";\n+}\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"1\")])\n+\n ;; For pic\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1006,6 +1038,22 @@\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"1,2\")])\n \n+;; This is for use in the prologue/epilogue code.  We need it \n+;; to add large constants to a stack pointer or frame pointer.\n+;; Because of the additional %r1 pressure, we probably do not\n+;; want to use this in general code, so make it available\n+;; only after reload.\n+(define_insn \"add_high_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=!a,*r\")\n+\t(plus (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t      (high:SI (match_operand 2 \"const_int_operand\" \"\"))))]\n+  \"reload_completed\"\n+  \"@\n+   addil L'%G2,%1\n+   ldil L'%G2,%0\\;add %0,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"1,2\")])\n+\n ;; For function addresses when TARGET_SHARED_LIBS\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2512,6 +2560,12 @@\n \f\n ;; Unconditional and other jump instructions.\n \n+(define_insn \"return\"\n+  [(return)]\n+  \"hppa_can_use_return_insn_p ()\"\n+  \"bv%* 0(%%r2)\"\n+  [(set_attr \"type\" \"branch\")])\n+\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\""}]}