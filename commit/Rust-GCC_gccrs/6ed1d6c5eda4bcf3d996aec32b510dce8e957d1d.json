{"sha": "6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkMWQ2YzVlZGE0YmNmM2Q5OTZhZWMzMmI1MTBkY2U4ZTk1N2QxZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-09T16:59:32Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-09T16:59:32Z"}, "message": "(POPSTACK): Pop discarded elts off all the stacks as we go.\n\nFrom-SVN: r2383", "tree": {"sha": "e5fea263537c14d30f7d2d0dc0ffbfbe0db37124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5fea263537c14d30f7d2d0dc0ffbfbe0db37124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d/comments", "author": null, "committer": null, "parents": [{"sha": "cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb00f51acf20fd1ff03cd9d4fdb74bb12bd71da5"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "4800129cd3fa44b8465cf037c4d888e420939206", "filename": "gcc/stmt.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6ed1d6c5eda4bcf3d996aec32b510dce8e957d1d", "patch": "@@ -332,6 +332,8 @@ struct nesting\n /* Chain of all pending binding contours.  */\n struct nesting *block_stack;\n \n+/* If any new stacks are added here, add them to POPSTACKS too.  */\n+\n /* Chain of all pending binding contours that restore stack levels\n    or have cleanups.  */\n struct nesting *stack_block_stack;\n@@ -360,17 +362,31 @@ int nesting_depth;\n #define ALLOC_NESTING() \\\n  (struct nesting *) obstack_alloc (&stmt_obstack, sizeof (struct nesting))\n \n-/* Pop one of the sub-stacks, such as `loop_stack' or `cond_stack';\n-   and pop off `nesting_stack' down to the same level.  */\n+/* Pop the nesting stack element by element until we pop off\n+   the element which is at the top of STACK.\n+   Update all the other stacks, popping off elements from them\n+   as we pop them from nesting_stack.  */\n \n #define POPSTACK(STACK)\t\t\t\t\t\\\n-do { int initial_depth = nesting_stack->depth;\t\t\\\n-     do { struct nesting *this = STACK;\t\t\t\\\n-\t  STACK = this->next;\t\t\t\t\\\n+do { struct nesting *target = STACK;\t\t\t\\\n+     struct nesting *this;\t\t\t\t\\\n+     do { this = nesting_stack;\t\t\t\t\\\n+\t  if (loop_stack == this)\t\t\t\\\n+\t    loop_stack = loop_stack->next;\t\t\\\n+\t  if (cond_stack == this)\t\t\t\\\n+\t    cond_stack = cond_stack->next;\t\t\\\n+\t  if (block_stack == this)\t\t\t\\\n+\t    block_stack = block_stack->next;\t\t\\\n+\t  if (stack_block_stack == this)\t\t\\\n+\t    stack_block_stack = stack_block_stack->next; \\\n+\t  if (case_stack == this)\t\t\t\\\n+\t    case_stack = case_stack->next;\t\t\\\n+\t  if (except_stack == this)\t\t\t\\\n+\t    except_stack = except_stack->next;\t\t\\\n+\t  nesting_depth = nesting_stack->depth - 1;\t\\\n \t  nesting_stack = this->all;\t\t\t\\\n-\t  nesting_depth = this->depth;\t\t\t\\\n \t  obstack_free (&stmt_obstack, this); }\t\t\\\n-     while (nesting_depth > initial_depth); } while (0)\n+     while (this != target); } while (0)\n \f\n /* In some cases it is impossible to generate code for a forward goto\n    until the label definition is seen.  This happens when it may be necessary"}]}