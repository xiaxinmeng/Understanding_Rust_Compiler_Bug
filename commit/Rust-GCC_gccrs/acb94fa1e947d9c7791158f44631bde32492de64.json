{"sha": "acb94fa1e947d9c7791158f44631bde32492de64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiOTRmYTFlOTQ3ZDljNzc5MTE1OGY0NDYzMWJkZTMyNDkyZGU2NA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-10-04T14:07:02Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-10-04T14:07:02Z"}, "message": "(adddi3_1, subdi3_1): insns renamed from adddi3 and subdi3;\n\nadded missing earlyclobbers. (adddi3_1): removed duplicates from commutativity.\n(adddi3, subdi3): new define_expands.\n\nFrom-SVN: r12898", "tree": {"sha": "570f676236142508659e6ff70774fb6323b6468e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570f676236142508659e6ff70774fb6323b6468e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb94fa1e947d9c7791158f44631bde32492de64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb94fa1e947d9c7791158f44631bde32492de64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb94fa1e947d9c7791158f44631bde32492de64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb94fa1e947d9c7791158f44631bde32492de64/comments", "author": null, "committer": null, "parents": [{"sha": "1b90646a5b03ce4a7747ee3a37b20633a1ff9ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b90646a5b03ce4a7747ee3a37b20633a1ff9ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b90646a5b03ce4a7747ee3a37b20633a1ff9ae0"}], "stats": {"total": 146, "additions": 121, "deletions": 25}, "files": [{"sha": "341f10022d5b08a27ef9d0c882449e68207a092d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 121, "deletions": 25, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb94fa1e947d9c7791158f44631bde32492de64/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb94fa1e947d9c7791158f44631bde32492de64/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=acb94fa1e947d9c7791158f44631bde32492de64", "patch": "@@ -1128,7 +1128,9 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], SFmode)))\n+      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], SFmode))\n+      && (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+\t  < N_ALLOCATABLE_REGISTERS))\n     {\n       rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], SFmode))\n \t\t\t\t\t\t? gen_movsf_push\n@@ -1234,7 +1236,8 @@\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(match_operand:SF 1 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"\"\n+  \"N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+   < N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   output_asm_insn (AS2 (mov%L2,%1,%2), operands);\n@@ -1245,7 +1248,10 @@\n (define_insn \"movsf_normal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=*rfm,*rf,f,!*rm\")\n \t(match_operand:SF 1 \"general_operand\" \"*rf,*rfm,fG,fF\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+  \"! TARGET_MOVE || GET_CODE (operands[0]) != MEM\n+   || GET_CODE (operands[1]) != MEM\n+   || (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+       == N_ALLOCATABLE_REGISTERS)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n@@ -1323,7 +1329,9 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], DFmode)))\n+      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], DFmode))\n+      && (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+\t  < N_ALLOCATABLE_REGISTERS))\n     {\n       rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], DFmode))\n \t\t\t\t\t\t? gen_movdf_push\n@@ -1423,15 +1431,18 @@\n \t(match_operand:DF 1 \"memory_operand\" \"o,o\"))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))\n    (clobber (match_scratch:SI 3 \"=&r,X\"))]\n-  \"\"\n+  \"N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+   < N_ALLOCATABLE_REGISTERS\"\n   \"* return output_move_memory (operands, insn, GET_MODE_SIZE (DFmode), 2, 4);\")\n \n ;; For the purposes of regclass, prefer FLOAT_REGS.\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:DF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n-   || (GET_CODE (operands[1]) != MEM)\"\n+  \"! TARGET_MOVE || GET_CODE (operands[0]) != MEM\n+   || GET_CODE (operands[1]) != MEM\n+   || (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+       == N_ALLOCATABLE_REGISTERS)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n@@ -1510,7 +1521,9 @@\n   if (TARGET_MOVE\n       && (reload_in_progress | reload_completed) == 0\n       && GET_CODE (operands[0]) == MEM\n-      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], XFmode)))\n+      && (GET_CODE (operands[1]) == MEM || push_operand (operands[0], XFmode))\n+      && (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+\t  < N_ALLOCATABLE_REGISTERS))\n     {\n       rtx (*genfunc) PROTO((rtx, rtx)) = (push_operand (operands[0], XFmode))\n \t\t\t\t\t\t? gen_movxf_push\n@@ -1608,14 +1621,17 @@\n \t(match_operand:XF 1 \"memory_operand\" \"o,o\"))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))\n    (clobber (match_scratch:SI 3 \"=&r,X\"))]\n-  \"\"\n+  \"N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+   < N_ALLOCATABLE_REGISTERS\"\n   \"* return output_move_memory (operands, insn, GET_MODE_SIZE (XFmode), 2, 4);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,fm,!*rf,!*rm\")\n \t(match_operand:XF 1 \"general_operand\" \"fmG,f,*rfm,*rfF\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n-   || (GET_CODE (operands[1]) != MEM)\"\n+  \"! TARGET_MOVE || GET_CODE (operands[0]) != MEM\n+   || GET_CODE (operands[1]) != MEM\n+   || (N_REGS_USED (operands[0]) + N_REGS_USED (operands[1])\n+       == N_ALLOCATABLE_REGISTERS)\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n@@ -2703,12 +2719,16 @@\n \f\n ;;- add instructions\n \n-(define_insn \"addsidi3_1\"\n+(define_insn \"*addsidi3_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,r,o,&r,r,o,o\")\n \t(plus:DI (match_operand:DI 1 \"general_operand\" \"0,0,0,o,riF,riF,o\")\n \t\t (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,ri,roi,roi,ri,ri\"))))\n    (clobber (match_scratch:SI 3 \"=X,X,X,X,X,X,&r\"))]\n-  \"\"\n+  \"((rtx_equal_p (operands[0], operands[1]) ? 0\n+     : (N_REGS_USED (operands[0])\n+\t+ (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)))\n+    + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+   <= N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   rtx low[3], high[3], xops[7], temp;\n@@ -2751,12 +2771,16 @@\n   RET;\n }\")\n \n-(define_insn \"addsidi3_2\"\n+(define_insn \"*addsidi3_2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,r,o,&r,r,o,o\")\n \t(plus:DI (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,ri,o,ri,ri,ri\"))\n \t\t (match_operand:DI 1 \"general_operand\" \"0,0,0,roiF,roiF,riF,o\")))\n    (clobber (match_scratch:SI 3 \"=X,X,X,X,X,X,&r\"))]\n-  \"\"\n+  \"((rtx_equal_p (operands[0], operands[2]) ? 0\n+     : (N_REGS_USED (operands[0])\n+\t+ (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)))\n+    + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+   <= N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   rtx low[3], high[3], xops[7], temp;\n@@ -2829,12 +2853,49 @@\n   RET;\n }\")\n \n-(define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,o,&r,ro,o,&r,o,o,o\")\n-\t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0,0,0,o,riF,o,or,riF,riF,o\")\n-\t\t (match_operand:DI 2 \"general_operand\" \"o,riF,o,0,0,0,oriF,riF,o,o\")))\n-   (clobber (match_scratch:SI 3 \"=X,X,&r,X,&r,&r,X,&r,&r,&r\"))]\n+(define_expand \"adddi3\"\n+  [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t\t   (plus:DI (match_operand:DI 1 \"general_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"general_operand\" \"\")))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n   \"\"\n+  \"\n+{\n+  if ((((rtx_equal_p (operands[0], operands[1])\n+\t || rtx_equal_p (operands[0], operands[2]))\n+\t? (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM\n+\t   && GET_CODE (operands[2]) == MEM)\n+\t: N_REGS_USED (operands[0]) + (GET_CODE (operands[0]) == MEM))\n+       + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+      > N_ALLOCATABLE_REGISTERS)\n+    {\n+      if (GET_CODE (operands[0]) == REG)\n+\t{\n+\t  gen_movdi (operands[0], operands[1]);\n+\t  operands[1] = operands[0];\n+\t}\n+      else\n+\t{\n+\t  rtx tmp = force_reg (DImode, operands[0]);\n+\t  emit_insn (gen_adddi3 (tmp, operands[1], operands[2]));\n+\t  emit_insn (gen_movdi (operands[0], tmp));\n+\t  DONE;\n+\t}\n+    }\n+}\")\n+\n+(define_insn \"*adddi3_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,&ro,o,&r,o,o,o\")\n+\t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0,0,0,or,riF,riF,o\")\n+\t\t (match_operand:DI 2 \"general_operand\" \"o,riF,o,oriF,riF,o,o\")))\n+   (clobber (match_scratch:SI 3 \"=X,X,&r,X,&r,&r,&r\"))]\n+  \"(((rtx_equal_p (operands[0], operands[1])\n+      || rtx_equal_p (operands[0], operands[2]))\n+     ? (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM\n+\t&& GET_CODE (operands[2]) == MEM)\n+     : N_REGS_USED (operands[0]) + (GET_CODE (operands[0]) == MEM))\n+    + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+   <= N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   rtx low[3], high[3], xops[7], temp;\n@@ -3105,12 +3166,16 @@\n \f\n ;;- subtract instructions\n \n-(define_insn \"subsidi3\"\n+(define_insn \"*subsidi3\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,&r,o,o\")\n \t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0,roiF,riF,o\")\n \t\t  (zero_extend:DI (match_operand:SI 2 \"general_operand\" \"o,ri,roi,ri,ri\"))))\n    (clobber (match_scratch:SI 3 \"=X,X,X,X,&r\"))]\n-  \"\"\n+  \"((rtx_equal_p (operands[0], operands[1]) ? 0\n+     : (N_REGS_USED (operands[0])\n+\t+ (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)))\n+    + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+   <= N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   rtx low[3], high[3], xops[7];\n@@ -3153,12 +3218,43 @@\n   RET;\n }\")\n \n-(define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,&r,o,o\")\n+(define_expand \"subdi3\"\n+  [(parallel [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t\t   (minus:DI (match_operand:DI 1 \"general_operand\" \"\")\n+\t\t\t     (match_operand:DI 2 \"general_operand\" \"\")))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n+  \"\"\n+  \"\n+{\n+  if (((rtx_equal_p (operands[0], operands[1]) ? 0\n+\t: N_REGS_USED (operands[0]) + (GET_CODE (operands[0]) == MEM))\n+       + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+      > N_ALLOCATABLE_REGISTERS)\n+    {\n+      if (GET_CODE (operands[0]) == REG)\n+\t{\n+\t  gen_movdi (operands[0], operands[1]);\n+\t  operands[1] = operands[0];\n+\t}\n+      else\n+\t{\n+\t  rtx tmp = force_reg (DImode, operands[0]);\n+\t  emit_insn (gen_subdi3 (tmp, operands[1], operands[2]));\n+\t  emit_insn (gen_movdi (operands[0], tmp));\n+\t  DONE;\n+\t}\n+    }\n+}\")\n+\n+(define_insn \"*subdi3_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&r,&ro,&r,o,o\")\n \t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0,roiF,riF,o\")\n \t\t  (match_operand:DI 2 \"general_operand\" \"o,riF,roiF,riF,o\")))\n    (clobber (match_scratch:SI 3 \"=X,X,X,&r,&r\"))]\n-  \"\"\n+  \"((rtx_equal_p (operands[0], operands[1]) ? 0\n+     : N_REGS_USED (operands[0]) + (GET_CODE (operands[0]) == MEM))\n+    + N_REGS_USED (operands[1]) + N_REGS_USED (operands[2]))\n+   <= N_ALLOCATABLE_REGISTERS\"\n   \"*\n {\n   rtx low[3], high[3], xops[7];"}]}