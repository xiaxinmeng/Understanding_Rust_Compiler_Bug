{"sha": "e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzYWRmOTRmZDZjNGRmZWVlYmI2ZmZkNGMxNGExNjAwYzRlYTVmNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-04T08:00:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-04T08:00:32Z"}, "message": "mips.md (mask): New mode attribute.\n\n\t* config/mips/mips.md (mask): New mode attribute.\n\t(zero_extendsidi2): Add memory alternative.\n\t(*zero_extendsidi2_mem): Delete.\n\t(zero_extend[qh]i[sd]i2): Redefine using :GPR and :SHORT.  Use\n\tmemory_operand in the TARGET_MIPS16 check.\n\t(*zero_extend[qh]i[sd]i2{,_mips16}): Name previously unnamed patterns.\n\tRedefine using :GPR and :SHORT.\n\t(zero_extendqihi2): Use memory_operand in the TARGET_MIPS16 check.\n\nFrom-SVN: r87077", "tree": {"sha": "d6d38f1ed5d020a9a700572a912a02a52fdd6f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d38f1ed5d020a9a700572a912a02a52fdd6f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4/comments", "author": null, "committer": null, "parents": [{"sha": "edeacc1415d3cd9c67463c600fa11d0689bae9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edeacc1415d3cd9c67463c600fa11d0689bae9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edeacc1415d3cd9c67463c600fa11d0689bae9e9"}], "stats": {"total": 207, "additions": 54, "deletions": 153}, "files": [{"sha": "1bb969c7fc9c23d657a4ae6ab1b551ecb6fcfc34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "patch": "@@ -1,3 +1,14 @@\n+2004-09-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (mask): New mode attribute.\n+\t(zero_extendsidi2): Add memory alternative.\n+\t(*zero_extendsidi2_mem): Delete.\n+\t(zero_extend[qh]i[sd]i2): Redefine using :GPR and :SHORT.  Use\n+\tmemory_operand in the TARGET_MIPS16 check.\n+\t(*zero_extend[qh]i[sd]i2{,_mips16}): Name previously unnamed patterns.\n+\tRedefine using :GPR and :SHORT.\n+\t(zero_extendqihi2): Use memory_operand in the TARGET_MIPS16 check.\n+\n 2004-09-04  Uros Bizjak  <uros@kss-loka.si>\n \n \t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_RINT{,F,L}"}, {"sha": "317e29b87d073185f76bd4c669e8e2a6b4b42721", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 43, "deletions": 153, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=e83adf94fd6c4dfeeebb6ffd4c14a1600c4ea5f4", "patch": "@@ -346,6 +346,9 @@\n ;; instruction.\n (define_mode_attr size [(QI \"b\") (HI \"h\")])\n \n+;; This attributes gives the mode mask of a SHORT.\n+(define_mode_attr mask [(QI \"0x00ff\") (HI \"0xffff\")])\n+\n ;; Mode attributes for GPR loads and stores.\n (define_mode_attr load [(SI \"lw\") (DI \"ld\")])\n (define_mode_attr store [(SI \"sw\") (DI \"sd\")])\n@@ -2257,201 +2260,88 @@ beq\\t%2,%.,1b\\;\\\n ;;  ....................\n \n ;; Extension insns.\n-;; Those for integer source operand are ordered widest source type first.\n \n (define_insn_and_split \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,W\")))]\n   \"TARGET_64BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n+  \"@\n+   #\n+   lwu\\t%0,%1\"\n+  \"&& reload_completed && REG_P (operands[1])\"\n   [(set (match_dup 0)\n         (ashift:DI (match_dup 1) (const_int 32)))\n    (set (match_dup 0)\n         (lshiftrt:DI (match_dup 0) (const_int 32)))]\n-  \"operands[1] = gen_lowpart (DImode, operands[1]);\"\n-  [(set_attr \"type\" \"multi\")\n+  { operands[1] = gen_lowpart (DImode, operands[1]); }\n+  [(set_attr \"type\" \"multi,load\")\n    (set_attr \"mode\" \"DI\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn \"*zero_extendsidi2_mem\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:SI 1 \"memory_operand\" \"W\")))]\n-  \"TARGET_64BIT\"\n-  \"lwu\\t%0,%1\"\n-  [(set_attr \"type\"     \"load\")\n-   (set_attr \"mode\"     \"DI\")])\n+   (set_attr \"length\" \"8,*\")])\n \n-(define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\")))]\n+(define_expand \"zero_extend<SHORT:mode><GPR:mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+        (zero_extend:GPR (match_operand:SHORT 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n-  if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n+  if (TARGET_MIPS16 && !memory_operand (operands[1], <SHORT:MODE>mode))\n     {\n-      rtx op = gen_lowpart (SImode, operands[1]);\n-      rtx temp = force_reg (SImode, GEN_INT (0xffff));\n-\n-      emit_insn (gen_andsi3 (operands[0], op, temp));\n+      emit_insn (gen_and<GPR:mode>3 (operands[0],\n+\t\t\t\t     gen_lowpart (<GPR:MODE>mode, operands[1]),\n+\t\t\t\t     force_reg (<GPR:MODE>mode,\n+\t\t\t\t\t\tGEN_INT (<SHORT:mask>))));\n       DONE;\n     }\n })\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"d,m\")))]\n+(define_insn \"*zero_extend<SHORT:mode><GPR:mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (zero_extend:GPR\n+\t     (match_operand:SHORT 1 \"nonimmediate_operand\" \"d,m\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n-   andi\\t%0,%1,0xffff\n-   lhu\\t%0,%1\"\n-  [(set_attr \"type\"     \"arith,load\")\n-   (set_attr \"mode\"     \"SI\")\n-   (set_attr \"length\"   \"4,*\")])\n+   andi\\t%0,%1,<SHORT:mask>\n+   l<SHORT:size>u\\t%0,%1\"\n+  [(set_attr \"type\" \"arith,load\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+(define_insn \"*zero_extend<SHORT:mode><GPR:mode>2_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (zero_extend:GPR (match_operand:SHORT 1 \"memory_operand\" \"m\")))]\n   \"TARGET_MIPS16\"\n-  \"lhu\\t%0,%1\"\n-  [(set_attr \"type\"     \"load\")\n-   (set_attr \"mode\"     \"SI\")])\n-\n-(define_expand \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-        (zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n-    {\n-      rtx op = gen_lowpart (DImode, operands[1]);\n-      rtx temp = force_reg (DImode, GEN_INT (0xffff));\n-\n-      emit_insn (gen_anddi3 (operands[0], op, temp));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"@\n-   andi\\t%0,%1,0xffff\n-   lhu\\t%0,%1\"\n-  [(set_attr \"type\"     \"arith,load\")\n-   (set_attr \"mode\"     \"DI\")\n-   (set_attr \"length\"   \"4,*\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"lhu\\t%0,%1\"\n-  [(set_attr \"type\"     \"load\")\n-   (set_attr \"mode\"     \"DI\")])\n+  \"l<SHORT:size>u\\t%0,%1\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_expand \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"\"\n {\n-  if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n+  if (TARGET_MIPS16 && !memory_operand (operands[1], QImode))\n     {\n-      rtx op0 = gen_lowpart (SImode, operands[0]);\n-      rtx op1 = gen_lowpart (SImode, operands[1]);\n-      rtx temp = force_reg (SImode, GEN_INT (0xff));\n-\n-      emit_insn (gen_andsi3 (op0, op1, temp));\n+      emit_insn (gen_zero_extendqisi2 (gen_lowpart (SImode, operands[0]),\n+\t\t\t\t       operands[1]));\n       DONE;\n     }\n })\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n         (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n    andi\\t%0,%1,0x00ff\n    lbu\\t%0,%1\"\n-  [(set_attr \"type\"     \"arith,load\")\n-   (set_attr \"mode\"     \"HI\")\n-   (set_attr \"length\"   \"4,*\")])\n+  [(set_attr \"type\" \"arith,load\")\n+   (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqihi2_mips16\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n         (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_MIPS16\"\n   \"lbu\\t%0,%1\"\n-  [(set_attr \"type\"     \"load\")\n-   (set_attr \"mode\"     \"HI\")])\n-\n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\")))]\n-  \"\"\n-{\n-  if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n-    {\n-      rtx op = gen_lowpart (SImode, operands[1]);\n-      rtx temp = force_reg (SImode, GEN_INT (0xff));\n-\n-      emit_insn (gen_andsi3 (operands[0], op, temp));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"!TARGET_MIPS16\"\n-  \"@\n-   andi\\t%0,%1,0x00ff\n-   lbu\\t%0,%1\"\n-  [(set_attr \"type\"     \"arith,load\")\n-   (set_attr \"mode\"     \"SI\")\n-   (set_attr \"length\"   \"4,*\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_MIPS16\"\n-  \"lbu\\t%0,%1\"\n-  [(set_attr \"type\"     \"load\")\n-   (set_attr \"mode\"     \"SI\")])\n-\n-(define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16 && GET_CODE (operands[1]) != MEM)\n-    {\n-      rtx op = gen_lowpart (DImode, operands[1]);\n-      rtx temp = force_reg (DImode, GEN_INT (0xff));\n-\n-      emit_insn (gen_anddi3 (operands[0], op, temp));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"@\n-   andi\\t%0,%1,0x00ff\n-   lbu\\t%0,%1\"\n-  [(set_attr \"type\"     \"arith,load\")\n-   (set_attr \"mode\"     \"DI\")\n-   (set_attr \"length\"   \"4,*\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(zero_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"lbu\\t%0,%1\"\n-  [(set_attr \"type\"\t\"load\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"mode\" \"HI\")])\n \f\n ;;\n ;;  ...................."}]}