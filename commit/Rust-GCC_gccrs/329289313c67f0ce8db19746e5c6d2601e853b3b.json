{"sha": "329289313c67f0ce8db19746e5c6d2601e853b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5Mjg5MzEzYzY3ZjBjZThkYjE5NzQ2ZTVjNmQyNjAxZTg1M2IzYg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-01-06T19:19:47Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-01-06T19:19:47Z"}, "message": "vsx.md (*p9_vecload_<mode>): Replace VSX_M mode iterator with VSX_M2.\n\n[gcc]\n\n2015-01-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/vsx.md (*p9_vecload_<mode>): Replace VSX_M\n\tmode iterator with VSX_M2.\n\t(*p9_vecstore_<mode>): Likewise.\n\t(*vsx_le_permute_<mode>): Restrict to !TARGET_P9_VECTOR.\n\t(*vsx_le_perm_load_<mode> for VSX_LE_128): Likewise.\n\t(*vsx_le_perm_store_<mode> for VSX_LE_128): Likewise.\n\t(define_split for VSX_LE128 stores): Likewise.\n\t(define_peephole2 for TImode LE swaps): Likewise.\n\t(define_split for VSX_LE128 post-reload stores): Likewise.\n\n[gcc/testsuite]\n\n2015-01-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-lxvx-stxvx-3.c: New test.\n\nFrom-SVN: r232109", "tree": {"sha": "c8b465838383af87b6f65a286865bdd14db401bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b465838383af87b6f65a286865bdd14db401bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329289313c67f0ce8db19746e5c6d2601e853b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329289313c67f0ce8db19746e5c6d2601e853b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329289313c67f0ce8db19746e5c6d2601e853b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329289313c67f0ce8db19746e5c6d2601e853b3b/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9b596c13252df2f1cea3f27183e9969ede54fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b596c13252df2f1cea3f27183e9969ede54fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b596c13252df2f1cea3f27183e9969ede54fbd"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "eaae4ec69e15fd9f490e08ffc58fc8f57cdfa23a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=329289313c67f0ce8db19746e5c6d2601e853b3b", "patch": "@@ -1,3 +1,15 @@\n+2015-01-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (*p9_vecload_<mode>): Replace VSX_M\n+\tmode iterator with VSX_M2.\n+\t(*p9_vecstore_<mode>): Likewise.\n+\t(*vsx_le_permute_<mode>): Restrict to !TARGET_P9_VECTOR.\n+\t(*vsx_le_perm_load_<mode> for VSX_LE_128): Likewise.\n+\t(*vsx_le_perm_store_<mode> for VSX_LE_128): Likewise.\n+\t(define_split for VSX_LE128 stores): Likewise.\n+\t(define_peephole2 for TImode LE swaps): Likewise.\n+\t(define_split for VSX_LE128 post-reload stores): Likewise.\n+\n 2016-01-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/69099"}, {"sha": "997ff31aef3714bb4594c49ad3b105a6fb48da29", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=329289313c67f0ce8db19746e5c6d2601e853b3b", "patch": "@@ -304,16 +304,16 @@\n ;; VSX (P9) moves\n \n (define_insn \"*p9_vecload_<mode>\"\n-  [(set (match_operand:VSX_M 0 \"vsx_register_operand\" \"=<VSa>\")\n-        (match_operand:VSX_M 1 \"memory_operand\" \"Z\"))]\n+  [(set (match_operand:VSX_M2 0 \"vsx_register_operand\" \"=<VSa>\")\n+        (match_operand:VSX_M2 1 \"memory_operand\" \"Z\"))]\n   \"TARGET_P9_VECTOR\"\n   \"lxvx %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*p9_vecstore_<mode>\"\n-  [(set (match_operand:VSX_M 0 \"memory_operand\" \"=Z\")\n-        (match_operand:VSX_M 1 \"vsx_register_operand\" \"<VSa>\"))]\n+  [(set (match_operand:VSX_M2 0 \"memory_operand\" \"=Z\")\n+        (match_operand:VSX_M2 1 \"vsx_register_operand\" \"<VSa>\"))]\n   \"TARGET_P9_VECTOR\"\n   \"stxvx %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")\n@@ -680,7 +680,7 @@\n \t(rotate:VSX_LE_128\n \t (match_operand:VSX_LE_128 1 \"input_operand\" \"<VSa>,Z,<VSa>\")\n \t (const_int 64)))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"@\n    xxpermdi %x0,%x1,%x1,2\n    lxvd2x %x0,%y1\n@@ -714,9 +714,9 @@\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=<VSa>\")\n         (match_operand:VSX_LE_128 1 \"memory_operand\" \"Z\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n \t(rotate:VSX_LE_128 (match_dup 1)\n \t\t\t   (const_int 64)))\n@@ -735,15 +735,15 @@\n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"=Z\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+<VSa>\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"#\"\n   [(set_attr \"type\" \"vecstore\")\n    (set_attr \"length\" \"12\")])\n \n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed && !TARGET_P9_VECTOR\"\n   [(set (match_dup 2)\n \t(rotate:VSX_LE_128 (match_dup 1)\n \t\t\t   (const_int 64)))\n@@ -765,7 +765,7 @@\n    (set (match_operand:TI 2 \"vsx_register_operand\" \"\")\n \t(rotate:TI (match_dup 0)\n \t\t   (const_int 64)))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n    && (rtx_equal_p (operands[0], operands[2])\n        || peep2_reg_dead_p (2, operands[0]))\"\n    [(set (match_dup 2) (match_dup 1))])\n@@ -775,7 +775,7 @@\n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed && !TARGET_P9_VECTOR\"\n   [(set (match_dup 1)\n \t(rotate:VSX_LE_128 (match_dup 1)\n \t\t\t   (const_int 64)))"}, {"sha": "ad953153de73d432583659247a405ebdfb78270e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=329289313c67f0ce8db19746e5c6d2601e853b3b", "patch": "@@ -1,3 +1,7 @@\n+2015-01-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-3.c: New test.\n+\n 2016-01-06  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* gcc.dg/atomic-invalid-2.c: Remove duplicated content."}, {"sha": "b298173b131650fbbd5465e0d74344c9cd987f8b", "filename": "gcc/testsuite/gcc.target/powerpc/p9-lxvx-stxvx-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329289313c67f0ce8db19746e5c6d2601e853b3b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-lxvx-stxvx-3.c?ref=329289313c67f0ce8db19746e5c6d2601e853b3b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O3\" } */\n+/* { dg-final { scan-assembler \"lxvx\" } } */\n+/* { dg-final { scan-assembler \"stxvx\" } } */\n+/* { dg-final { scan-assembler-not \"lxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"stxvd2x\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* Verify P9 vector loads and stores are used rather than the\n+   load-swap/swap-store workarounds for P8.  */\n+#define SIZE (16384/sizeof(__float128))\n+\n+static __float128 x[SIZE] __attribute__ ((aligned (16)));\n+static __float128 y[SIZE] __attribute__ ((aligned (16)));\n+static __float128 a;\n+\n+void obfuscate(void *a, ...);\n+\n+void __attribute__((noinline)) do_one(void)\n+{\n+  unsigned long i;\n+\n+  obfuscate(x, y, &a);\n+\n+  for (i = 0; i < SIZE; i++)\n+    y[i] = a * x[i];\n+\n+  obfuscate(x, y, &a);\n+}"}]}