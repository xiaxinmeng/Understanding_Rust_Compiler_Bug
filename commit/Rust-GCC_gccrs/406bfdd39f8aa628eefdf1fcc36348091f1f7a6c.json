{"sha": "406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2YmZkZDM5ZjhhYTYyOGVlZmRmMWZjYzM2MzQ4MDkxZjFmN2E2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-14T10:50:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-14T10:50:46Z"}, "message": "re PR tree-optimization/61757 (genmodes failure with enable-checking)\n\n2014-07-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61757\n\tPR tree-optimization/61783\n\tPR tree-optimization/61787\n\t* tree-ssa-dom.c (record_equality): Revert canonicalization\n\tchange and add comment.\n\t(propagate_rhs_into_lhs): Revert previous fix, removing\n\tloop depth restriction again.\n\n\t* gcc.dg/torture/pr61757.c: New testcase.\n\t* gcc.dg/torture/pr61787.c: Likewise.\n\nFrom-SVN: r212513", "tree": {"sha": "5f0ec3e7aa038ab7102aea97cac2074fee30395f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f0ec3e7aa038ab7102aea97cac2074fee30395f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04ae06daaa6a2d1f31a7bf37b39b57a0023df205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ae06daaa6a2d1f31a7bf37b39b57a0023df205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ae06daaa6a2d1f31a7bf37b39b57a0023df205"}], "stats": {"total": 140, "additions": 110, "deletions": 30}, "files": [{"sha": "43f871fce81657d5f6092fb499d8d737b76bbfd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "patch": "@@ -1,3 +1,13 @@\n+2014-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61757\n+\tPR tree-optimization/61783\n+\tPR tree-optimization/61787\n+\t* tree-ssa-dom.c (record_equality): Revert canonicalization\n+\tchange and add comment.\n+\t(propagate_rhs_into_lhs): Revert previous fix, removing\n+\tloop depth restriction again.\n+\n 2014-07-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/cortex-a15.md (cortex_a15_alu): Handle clz, rbit."}, {"sha": "a2529fc17b3deb2a93e7d26bb27b5a61fff88c36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "patch": "@@ -1,3 +1,11 @@\n+2014-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61757\n+\tPR tree-optimization/61783\n+\tPR tree-optimization/61787\n+\t* gcc.dg/torture/pr61757.c: New testcase.\n+\t* gcc.dg/torture/pr61787.c: Likewise.\n+\n 2014-07-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/61294"}, {"sha": "9a921a06ca8165502187d9e4f7997751d9374d1f", "filename": "gcc/testsuite/gcc.dg/torture/pr61757.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61757.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61757.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61757.c?ref=406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+struct X { void *p; int res; } a[32];\n+\n+int foo (unsigned i, unsigned n, void *q)\n+{\n+  if (i + 1 < n && q == a[i + 1].p)\n+    {\n+      do {\n+\t  ++i;\n+      } while (i < n && q == a[i].p);\n+      --i;\n+      return a[i].res;\n+    }\n+  else\n+    return a[i].res;\n+}\n+\n+int main ()\n+{\n+  int x;\n+  a[0].p = &x;\n+  a[0].res = -1;\n+  a[1].p = &x;\n+  a[1].res = 1;\n+  a[2].p = (void *)0;\n+  a[2].res = 0;\n+  if (foo (0, 3, &x) != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "a7eefe87f55a44adcfad10c5f6a5e889e1a3a6bf", "filename": "gcc/testsuite/gcc.dg/torture/pr61787.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61787.c?ref=406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+unsigned int a = 1;\n+\n+int\n+fn1 ()\n+{\n+  char b;\n+  for (;;)\n+    {\n+      for (b = 0; b < 5; b++)\n+\tif (!a - (unsigned int) b)\n+\t  return 0;\n+      a = 0;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+\n+  if (a != 1) \n+    __builtin_abort (); \n+\n+  return 0;\n+}"}, {"sha": "c4ec4e5415c8dc749fd85b0c330361eebb32a9e4", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406bfdd39f8aa628eefdf1fcc36348091f1f7a6c/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=406bfdd39f8aa628eefdf1fcc36348091f1f7a6c", "patch": "@@ -1589,6 +1589,33 @@ record_const_or_copy (tree x, tree y)\n   record_const_or_copy_1 (x, y, prev_x);\n }\n \n+/* Return the loop depth of the basic block of the defining statement of X.\n+   This number should not be treated as absolutely correct because the loop\n+   information may not be completely up-to-date when dom runs.  However, it\n+   will be relatively correct, and as more passes are taught to keep loop info\n+   up to date, the result will become more and more accurate.  */\n+\n+static int\n+loop_depth_of_name (tree x)\n+{\n+  gimple defstmt;\n+  basic_block defbb;\n+\n+  /* If it's not an SSA_NAME, we have no clue where the definition is.  */\n+  if (TREE_CODE (x) != SSA_NAME)\n+    return 0;\n+\n+  /* Otherwise return the loop depth of the defining statement's bb.\n+     Note that there may not actually be a bb for this statement, if the\n+     ssa_name is live on entry.  */\n+  defstmt = SSA_NAME_DEF_STMT (x);\n+  defbb = gimple_bb (defstmt);\n+  if (!defbb)\n+    return 0;\n+\n+  return bb_loop_depth (defbb);\n+}\n+\n /* Similarly, but assume that X and Y are the two operands of an EQ_EXPR.\n    This constrains the cases in which we may treat this as assignment.  */\n \n@@ -1608,7 +1635,10 @@ record_equality (tree x, tree y)\n      long as we canonicalize on one value.  */\n   if (is_gimple_min_invariant (y))\n     ;\n-  else if (is_gimple_min_invariant (x))\n+  else if (is_gimple_min_invariant (x)\n+\t   /* ???  When threading over backedges the following is important\n+\t      for correctness.  See PR61757.  */\n+\t   || (loop_depth_of_name (x) <= loop_depth_of_name (y)))\n     prev_x = x, x = y, y = prev_x, prev_x = prev_y;\n   else if (prev_x && is_gimple_min_invariant (prev_x))\n     x = y, y = prev_x, prev_x = prev_y;\n@@ -2638,33 +2668,6 @@ get_lhs_or_phi_result (gimple stmt)\n     gcc_unreachable ();\n }\n \n-/* Return the loop depth of the basic block of the defining statement of X.\n-   This number should not be treated as absolutely correct because the loop\n-   information may not be completely up-to-date when dom runs.  However, it\n-   will be relatively correct, and as more passes are taught to keep loop info\n-   up to date, the result will become more and more accurate.  */\n-\n-static int\n-loop_depth_of_name (tree x)\n-{\n-  gimple defstmt;\n-  basic_block defbb;\n-\n-  /* If it's not an SSA_NAME, we have no clue where the definition is.  */\n-  if (TREE_CODE (x) != SSA_NAME)\n-    return 0;\n-\n-  /* Otherwise return the loop depth of the defining statement's bb.\n-     Note that there may not actually be a bb for this statement, if the\n-     ssa_name is live on entry.  */\n-  defstmt = SSA_NAME_DEF_STMT (x);\n-  defbb = gimple_bb (defstmt);\n-  if (!defbb)\n-    return 0;\n-\n-  return bb_loop_depth (defbb);\n-}\n-\n /* Propagate RHS into all uses of LHS (when possible).\n \n    RHS and LHS are derived from STMT, which is passed in solely so\n@@ -2680,8 +2683,7 @@ static void\n propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_names)\n {\n   /* First verify that propagation is valid.  */\n-  if (may_propagate_copy (lhs, rhs)\n-      && loop_depth_of_name (lhs) >= loop_depth_of_name (rhs))\n+  if (may_propagate_copy (lhs, rhs))\n     {\n       use_operand_p use_p;\n       imm_use_iterator iter;"}]}