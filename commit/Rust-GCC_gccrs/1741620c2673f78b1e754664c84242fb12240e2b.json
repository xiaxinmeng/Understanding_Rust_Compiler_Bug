{"sha": "1741620c2673f78b1e754664c84242fb12240e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0MTYyMGMyNjczZjc4YjFlNzU0NjY0Yzg0MjQyZmIxMjI0MGUyYg==", "commit": {"author": {"name": "Jeroen Dobbelaere", "email": "jeroen.dobbelaere@acunia.com", "date": "2002-11-15T11:21:36Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-11-15T11:21:36Z"}, "message": "Jeroen Dobbelaere <jeroen.dobbelaere@acunia.com>\n\nJeroen Dobbelaere  <jeroen.dobbelaere@acunia.com>\n* config/arm/arm.h (EXPAND_BUILTIN_VA_ARG,\nFUNCTION_ARG_PASS_BY_REFERENCE): Define.\n* config/arm/arm.c (arm_va_arg,\narm_function_arg_pass_by_reference): New.\n* config/arm/arm-protos.h: Add prototypes.\n\nFrom-SVN: r59127", "tree": {"sha": "f67c410d927ea568413f1da37eb5bc0959afecec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67c410d927ea568413f1da37eb5bc0959afecec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1741620c2673f78b1e754664c84242fb12240e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1741620c2673f78b1e754664c84242fb12240e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1741620c2673f78b1e754664c84242fb12240e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1741620c2673f78b1e754664c84242fb12240e2b/comments", "author": null, "committer": null, "parents": [{"sha": "8e746279f38c69339f8a694e174e28c70faa5588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e746279f38c69339f8a694e174e28c70faa5588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e746279f38c69339f8a694e174e28c70faa5588"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "0041b2a7c429efe108b69212b1167c41fa8a7c12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1741620c2673f78b1e754664c84242fb12240e2b", "patch": "@@ -1,3 +1,11 @@\n+2002-11-14  Jeroen Dobbelaere  <jeroen.dobbelaere@acunia.com>\n+\n+\t* config/arm/arm.h (EXPAND_BUILTIN_VA_ARG,\n+\tFUNCTION_ARG_PASS_BY_REFERENCE): Define.\n+\t* config/arm/arm.c (arm_va_arg,\n+\tarm_function_arg_pass_by_reference): New.\n+\t* config/arm/arm-protos.h: Add prototypes.\n+\n 2002-11-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gthr-single.h: Fix formatting."}, {"sha": "cae9bea4ce8efd955fcb2f404d8212dd2b93147c", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=1741620c2673f78b1e754664c84242fb12240e2b", "patch": "@@ -45,7 +45,8 @@ extern void   arm_encode_call_attribute\tPARAMS ((tree, int));\n extern int    arm_function_ok_for_sibcall PARAMS ((tree));\n #endif\n #ifdef RTX_CODE\n-extern int    arm_hard_regno_mode_ok\tPARAMS ((unsigned int, enum machine_mode));\n+extern int    arm_hard_regno_mode_ok\tPARAMS ((unsigned int,\n+\t\t\t\t\t\tenum machine_mode));\n extern int    const_ok_for_arm\t\tPARAMS ((HOST_WIDE_INT));\n extern int    arm_split_constant\tPARAMS ((RTX_CODE, enum machine_mode,\n \t\t\t\t\t\tHOST_WIDE_INT, rtx, rtx, int));\n@@ -124,7 +125,8 @@ extern const char * output_move_double\tPARAMS ((rtx *));\n extern const char * output_mov_immediate PARAMS ((rtx *));\n extern const char * output_add_immediate PARAMS ((rtx *));\n extern const char * arithmetic_instr\tPARAMS ((rtx, int));\n-extern void   output_ascii_pseudo_op\tPARAMS ((FILE *, const unsigned char *, int));\n+extern void   output_ascii_pseudo_op\tPARAMS ((FILE *, const unsigned char *,\n+\t\t\t\t\t\tint));\n extern const char * output_return_instruction PARAMS ((rtx, int, int));\n extern void   arm_poke_function_name\tPARAMS ((FILE *, const char *));\n extern void   arm_print_operand\t\tPARAMS ((FILE *, rtx, int));\n@@ -139,6 +141,11 @@ extern rtx    arm_function_arg\t\tPARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\tenum machine_mode, tree, int));\n extern void   arm_init_cumulative_args\tPARAMS ((CUMULATIVE_ARGS *, tree, rtx,\n \t\t\t\t\t\tint));\n+extern rtx    arm_va_arg                PARAMS ((tree, tree));\n+extern int    arm_function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t         tree, int));\n+\n #endif\n \n #if defined AOF_ASSEMBLER "}, {"sha": "bc89418e1e5e27d817638092543477092d684740", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1741620c2673f78b1e754664c84242fb12240e2b", "patch": "@@ -1952,6 +1952,35 @@ arm_function_arg (pcum, mode, type, named)\n   \n   return gen_rtx_REG (mode, pcum->nregs);\n }\n+\n+/* Variable sized types are passed by reference.  This is a GCC\n+   extension to the ARM ABI.  */\n+\n+int\n+arm_function_arg_pass_by_reference (cum, mode, type, named)\n+     CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     tree type;\n+     int named ATTRIBUTE_UNUSED;\n+{\n+  return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n+}\n+\n+/* Implement va_arg.  */\n+\n+rtx\n+arm_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  /* Variable sized types are passed by reference.  */\n+  if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+    {\n+      rtx addr = std_expand_builtin_va_arg (valist, build_pointer_type (type));\n+      return gen_rtx_MEM (ptr_mode, force_reg (Pmode, addr));\n+    }\n+\n+  return std_expand_builtin_va_arg (valist, type);\n+}\n \f\n /* Encode the current state of the #pragma [no_]long_calls.  */\n typedef enum"}, {"sha": "eda2d47feff7ed5ab6b4b457c81e074e052ef4ee", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1741620c2673f78b1e754664c84242fb12240e2b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1741620c2673f78b1e754664c84242fb12240e2b", "patch": "@@ -1487,6 +1487,14 @@ typedef struct\n    && (NUM_ARG_REGS < ((CUM).nregs + ARM_NUM_REGS2 (MODE, TYPE)))\t\\\n    ?   NUM_ARG_REGS - (CUM).nregs : 0)\n \n+/* A C expression that indicates when an argument must be passed by\n+   reference.  If nonzero for an argument, a copy of that argument is\n+   made in memory and a pointer to the argument is passed instead of\n+   the argument itself.  The pointer is passed in whatever way is\n+   appropriate for passing a pointer to that type.  */\n+#define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED) \\\n+  arm_function_arg_pass_by_reference (&CUM, MODE, TYPE, NAMED)\n+\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n@@ -1504,6 +1512,10 @@ typedef struct\n    On the ARM, r0-r3 are used to pass args.  */\n #define FUNCTION_ARG_REGNO_P(REGNO)\t(IN_RANGE ((REGNO), 0, 3))\n \n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  arm_va_arg (valist, type)\n+\n \f\n /* Tail calling.  */\n "}]}