{"sha": "06089a8b2388b284287a073b26cbeefc71d9d615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwODlhOGIyMzg4YjI4NDI4N2EwNzNiMjZjYmVlZmM3MWQ5ZDYxNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-01T02:26:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-01T02:26:50Z"}, "message": "(save_nocopied_parts, expand_expr): Call assign_temp with extra arg.\n\n(expand_expr, case SAVE_EXPR): Set TEMP to (const_int 0) if MODE is VOIDmode.\n(expand_expr): Don't use assign_temp for pseudos when might want to be TMODE.\n\nFrom-SVN: r10924", "tree": {"sha": "c1eab35b689c69917b14fb8c6f7bf9c6e440cce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1eab35b689c69917b14fb8c6f7bf9c6e440cce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06089a8b2388b284287a073b26cbeefc71d9d615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06089a8b2388b284287a073b26cbeefc71d9d615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06089a8b2388b284287a073b26cbeefc71d9d615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06089a8b2388b284287a073b26cbeefc71d9d615/comments", "author": null, "committer": null, "parents": [{"sha": "b55d9ff81426a8eaf68fbd962e5e41f788c82102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55d9ff81426a8eaf68fbd962e5e41f788c82102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55d9ff81426a8eaf68fbd962e5e41f788c82102"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "2fb7304bdafda48dd5804e3018143eb05bfdb060", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06089a8b2388b284287a073b26cbeefc71d9d615/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06089a8b2388b284287a073b26cbeefc71d9d615/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=06089a8b2388b284287a073b26cbeefc71d9d615", "patch": "@@ -4110,7 +4110,7 @@ save_noncopied_parts (lhs, list)\n \ttree part = TREE_VALUE (tail);\n \ttree part_type = TREE_TYPE (part);\n \ttree to_be_saved = build (COMPONENT_REF, part_type, lhs, part);\n-\trtx target = assign_temp (part_type, 0, 1);\n+\trtx target = assign_temp (part_type, 0, 1, 1);\n \tif (! memory_address_p (TYPE_MODE (part_type), XEXP (target, 0)))\n \t  target = change_address (target, TYPE_MODE (part_type), NULL_RTX);\n \tparts = tree_cons (to_be_saved,\n@@ -4673,7 +4673,10 @@ expand_expr (exp, target, tmode, modifier)\n \t}\n       if (SAVE_EXPR_RTL (exp) == 0)\n \t{\n-\t  temp = assign_temp (type, 0, 0);\n+\t  if (mode == VOIDmode)\n+\t    temp = const0_rtx;\n+\t  else\n+\t    temp = assign_temp (type, 0, 0, 0);\n \n \t  SAVE_EXPR_RTL (exp) = temp;\n \t  if (!optimize && GET_CODE (temp) == REG)\n@@ -4865,7 +4868,12 @@ expand_expr (exp, target, tmode, modifier)\n       else\n \t{\n \t  if (target == 0 || ! safe_from_p (target, exp))\n-\t    target = assign_temp (type, 0, TREE_ADDRESSABLE (exp));\n+\t    {\n+\t      if (mode != BLKmode && ! TREE_ADDRESSABLE (exp))\n+\t\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n+\t      else\n+\t\ttarget = assign_temp (type, 0, 1, 1);\n+\t    }\n \n \t  if (TREE_READONLY (exp))\n \t    {\n@@ -5436,7 +5444,12 @@ expand_expr (exp, target, tmode, modifier)\n \t{\n \t  tree valtype = TREE_TYPE (TREE_OPERAND (exp, 0));\n \t  if (target == 0)\n-\t    target = assign_temp (type, 0, 0);\n+\t    {\n+\t      if (mode != BLKmode)\n+\t\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n+\t      else\n+\t\ttarget = assign_temp (type, 0, 1, 1);\n+\t    }\n \n \t  if (GET_CODE (target) == MEM)\n \t    /* Store data into beginning of memory target.  */\n@@ -6140,7 +6153,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t       && MEM_VOLATILE_P (original_target)))\n \t  temp = original_target;\n \telse\n-\t  temp = assign_temp (type, 0, 0);\n+\t  temp = assign_temp (type, 0, 0, 1);\n \n \t/* Check for X ? A + B : A.  If we have this, we can copy\n \t   A to the output and conditionally add B.  Similarly for unary\n@@ -6454,7 +6467,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      }\n \t    else\n \t      {\n-\t\ttarget = assign_temp (type, 2, 1);\n+\t\ttarget = assign_temp (type, 2, 1, 1);\n \t\t/* All temp slots at this level must not conflict.  */\n \t\tpreserve_temp_slots (target);\n \t\tDECL_RTL (slot) = target;\n@@ -6661,7 +6674,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      /* If this object is in a register, it must be not\n \t\t be BLKmode. */\n \t      tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n-\t      rtx memloc = assign_temp (inner_type, 1, 1);\n+\t      rtx memloc = assign_temp (inner_type, 1, 1, 1);\n \n \t      mark_temp_addr_taken (memloc);\n \t      emit_move_insn (memloc, op0);"}]}