{"sha": "457c5df44bb8524134ce27184f206368aa5c8e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3YzVkZjQ0YmI4NTI0MTM0Y2UyNzE4NGYyMDYzNjhhYTVjOGUyMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:32:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:32:44Z"}, "message": "[multiple changes]\n\n2012-01-30  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_dim.adb (Expand_Put_Call_With_Dimension_Symbol): Minor\n\tcode clean up.\n\t* s-diflio.ads: Minor change.\n\n2012-01-30  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch9.adb (Build_Dispatching_Requeue): Add missing call\n\tto Get_Entry_Index.  Required to generate code which provides\n\tthe correct value of Entry_Index in the target entry.\n\n2012-01-30  Nicolas Roche  <roche@adacore.com>\n\n\t* system-vxworks-ppc.ads: Add pragma Linker_Options -crtbe to\n\tfix issue with zcx on VxWorks5.\n\n2012-01-30  Pascal Obry  <obry@adacore.com>\n\n\t* prj.ads, prj.adb (For_Every_Project_Imported): Remove\n\tIn_Aggregate_Lib.\n\t(For_Every_Project_Imported_Context): New generic routine with\n\ta context parameter.\n\t* prj-nmsc.adb: Revert to use For_Every_Project_Imported Avoid\n\tdistributed complexity.\n\t* prj-env.adb, prj-conf.adb, makeutl.adb, gnatcmd.adb: Ditto.\n\nFrom-SVN: r183702", "tree": {"sha": "4aab5110df376caf9a50bb92412077d06203f096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aab5110df376caf9a50bb92412077d06203f096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/457c5df44bb8524134ce27184f206368aa5c8e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457c5df44bb8524134ce27184f206368aa5c8e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457c5df44bb8524134ce27184f206368aa5c8e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457c5df44bb8524134ce27184f206368aa5c8e21/comments", "author": null, "committer": null, "parents": [{"sha": "1b6897ce5df7413135001c2a1383238394411e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6897ce5df7413135001c2a1383238394411e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6897ce5df7413135001c2a1383238394411e67"}], "stats": {"total": 495, "additions": 303, "deletions": 192}, "files": [{"sha": "efd983c628d54fb3d1d9749234d89a9f44f00411", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -1,3 +1,30 @@\n+2012-01-30  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_dim.adb (Expand_Put_Call_With_Dimension_Symbol): Minor\n+\tcode clean up.\n+\t* s-diflio.ads: Minor change.\n+\n+2012-01-30  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Dispatching_Requeue): Add missing call\n+\tto Get_Entry_Index.  Required to generate code which provides\n+\tthe correct value of Entry_Index in the target entry.\n+\n+2012-01-30  Nicolas Roche  <roche@adacore.com>\n+\n+\t* system-vxworks-ppc.ads: Add pragma Linker_Options -crtbe to\n+\tfix issue with zcx on VxWorks5.\n+\n+2012-01-30  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj.ads, prj.adb (For_Every_Project_Imported): Remove\n+\tIn_Aggregate_Lib.\n+\t(For_Every_Project_Imported_Context): New generic routine with\n+\ta context parameter.\n+\t* prj-nmsc.adb: Revert to use For_Every_Project_Imported Avoid\n+\tdistributed complexity.\n+\t* prj-env.adb, prj-conf.adb, makeutl.adb, gnatcmd.adb: Ditto.\n+\n 2012-01-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_aggr.adb (Expand_Record_Aggregate): After creating the"}, {"sha": "e61ba1366ec72d1fa01b65c2642c76d1d24b1876", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -9022,42 +9022,68 @@ package body Exp_Ch9 is\n          --  Process the entry wrapper's position in the primary dispatch\n          --  table parameter. Generate:\n \n-         --    Ada.Tags.Get_Offset_Index\n-         --      (Ada.Tags.Tag (Concval),\n-         --       <interface dispatch table position of Ename>)\n+         --    Ada.Tags.Get_Entry_Index\n+         --      (T => To_Tag_Ptr (Obj'Address).all,\n+         --       Position => Ada.Tags.Get_Offset_Index\n+         --                    (Ada.Tags.Tag (Concval),\n+         --         i           <interface dispatch table position of Ename>));\n+\n+         --  Note that Obj'Address is recursively expanded into a call to\n+         --  Base_Address (Obj)\n \n          if Tagged_Type_Expansion then\n             Prepend_To (Params,\n               Make_Function_Call (Loc,\n-                Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                Name => New_Reference_To (RTE (RE_Get_Entry_Index), Loc),\n                 Parameter_Associations => New_List (\n-                  Unchecked_Convert_To (RTE (RE_Tag), Concval),\n-                  Make_Integer_Literal (Loc, DT_Position (Entity (Ename))))));\n+\n+                  Make_Explicit_Dereference (Loc,\n+                    Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix => New_Copy_Tree (Concval),\n+                        Attribute_Name => Name_Address))),\n+\n+                  Make_Function_Call (Loc,\n+                    Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n+                    Parameter_Associations => New_List (\n+                      Unchecked_Convert_To (RTE (RE_Tag), Concval),\n+                      Make_Integer_Literal (Loc,\n+                        DT_Position (Entity (Ename))))))));\n \n          --  VM targets\n \n          else\n             Prepend_To (Params,\n-              Make_Function_Call (Loc,\n-                Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n \n+              Make_Function_Call (Loc,\n+                Name => New_Reference_To (RTE (RE_Get_Entry_Index), Loc),\n                 Parameter_Associations => New_List (\n \n-                  --  Obj_Typ\n-\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => Concval,\n                     Attribute_Name => Name_Tag),\n \n-                  --  Tag_Typ\n+                  Make_Function_Call (Loc,\n+                    Name => New_Reference_To (RTE (RE_Get_Offset_Index), Loc),\n \n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => New_Reference_To (Etype (Concval), Loc),\n-                    Attribute_Name => Name_Tag),\n+                    Parameter_Associations => New_List (\n+\n+                      --  Obj_Tag\n+\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix => Concval,\n+                        Attribute_Name => Name_Tag),\n+\n+                      --  Tag_Typ\n+\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix => New_Reference_To (Etype (Concval), Loc),\n+                        Attribute_Name => Name_Tag),\n \n-                  --  Position\n+                      --  Position\n \n-                  Make_Integer_Literal (Loc, DT_Position (Entity (Ename))))));\n+                      Make_Integer_Literal (Loc,\n+                        DT_Position (Entity (Ename))))))));\n          end if;\n \n          --  Specific actuals for protected to XXX requeue"}, {"sha": "87983997a7a5471566eaf39055883d7a227f190e", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -264,7 +264,6 @@ procedure GNATCmd is\n    procedure Set_Library_For\n      (Project           : Project_Id;\n       Tree              : Project_Tree_Ref;\n-      In_Aggregate_Lib  : Boolean;\n       Libraries_Present : in out Boolean);\n    --  If Project is a library project, add the correct -L and -l switches to\n    --  the linker invocation.\n@@ -1265,10 +1264,9 @@ procedure GNATCmd is\n    procedure Set_Library_For\n      (Project           : Project_Id;\n       Tree              : Project_Tree_Ref;\n-      In_Aggregate_Lib  : Boolean;\n       Libraries_Present : in out Boolean)\n    is\n-      pragma Unreferenced (Tree, In_Aggregate_Lib);\n+      pragma Unreferenced (Tree);\n \n       Path_Option : constant String_Access :=\n                       MLib.Linker_Library_Path_Option;"}, {"sha": "413fb6a0b7a89d97b9fc60e130d59e25cc3f9916", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -692,10 +692,9 @@ package body Makeutl is\n    is\n \n       procedure Recursive_Add\n-        (Project          : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Extended         : in out Boolean);\n+        (Project  : Project_Id;\n+         Tree     : Project_Tree_Ref;\n+         Extended : in out Boolean);\n       --  Add all the source directories of a project to the path only if\n       --  this project has not been visited. Calls itself recursively for\n       --  projects being extended, and imported projects.\n@@ -732,13 +731,10 @@ package body Makeutl is\n       -------------------\n \n       procedure Recursive_Add\n-        (Project          : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Extended         : in out Boolean)\n+        (Project  : Project_Id;\n+         Tree     : Project_Tree_Ref;\n+         Extended : in out Boolean)\n       is\n-         pragma Unreferenced (In_Aggregate_Lib);\n-\n          Current   : String_List_Id;\n          Dir       : String_Element;\n          OK        : Boolean := False;\n@@ -1234,23 +1230,21 @@ package body Makeutl is\n       In_Tree  : Project_Tree_Ref) return String_List\n    is\n       procedure Recursive_Add\n-        (Proj             : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean);\n+        (Proj    : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  The recursive routine used to add linker options\n \n       -------------------\n       -- Recursive_Add --\n       -------------------\n \n       procedure Recursive_Add\n-        (Proj             : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean)\n+        (Proj    : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy);\n \n          Linker_Package : Package_Id;\n          Options        : Variable_Value;"}, {"sha": "b0ea74100131d515d10ed7c710814f7e5ecfe245", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2006-2011, Free Software Foundation, Inc.       --\n+--            Copyright (C) 2006-2012, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -728,10 +728,9 @@ package body Prj.Conf is\n                  Value_Of (Name_Ide, Project.Decl.Packages, Shared);\n \n          procedure Add_Config_Switches_For_Project\n-           (Project          : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean;\n-            With_State       : in out Integer);\n+           (Project    : Project_Id;\n+            Tree       : Project_Tree_Ref;\n+            With_State : in out Integer);\n          --  Add all --config switches for this project. This is also called\n          --  for aggregate projects.\n \n@@ -740,12 +739,11 @@ package body Prj.Conf is\n          -------------------------------------\n \n          procedure Add_Config_Switches_For_Project\n-           (Project          : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean;\n-            With_State       : in out Integer)\n+           (Project    : Project_Id;\n+            Tree       : Project_Tree_Ref;\n+            With_State : in out Integer)\n          is\n-            pragma Unreferenced (With_State, In_Aggregate_Lib);\n+            pragma Unreferenced (With_State);\n \n             Shared : constant Shared_Project_Tree_Data_Access := Tree.Shared;\n "}, {"sha": "23d2cbf526f8c8833a4defdf7481d7cba3304d75", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 50, "deletions": 64, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -115,23 +115,21 @@ package body Prj.Env is\n       Buffer_Last : Natural := 0;\n \n       procedure Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean);\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Add source dirs of Project to the path\n \n       ---------\n       -- Add --\n       ---------\n \n       procedure Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean)\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy);\n       begin\n          Add_To_Path\n            (Project.Source_Dirs, In_Tree.Shared, Buffer, Buffer_Last);\n@@ -187,23 +185,21 @@ package body Prj.Env is\n       Buffer_Last : Natural := 0;\n \n       procedure Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean);\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Add all the object directories of a project to the path\n \n       ---------\n       -- Add --\n       ---------\n \n       procedure Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean)\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Tree, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy, In_Tree);\n \n          Path : constant Path_Name_Type :=\n                   Get_Object_Directory\n@@ -476,10 +472,9 @@ package body Prj.Env is\n       Current_Naming : Naming_Id;\n \n       procedure Check\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         State            : in out Integer);\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer);\n       --  Recursive procedure that put in the config pragmas file any non\n       --  standard naming schemes, if it is not already in the file, then call\n       --  itself for any imported project.\n@@ -501,12 +496,11 @@ package body Prj.Env is\n       -----------\n \n       procedure Check\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         State            : in out Integer)\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer)\n       is\n-         pragma Unreferenced (State, In_Aggregate_Lib);\n+         pragma Unreferenced (State);\n \n          Lang   : constant Language_Ptr :=\n                     Get_Language_From_Name (Project, \"ada\");\n@@ -792,10 +786,9 @@ package body Prj.Env is\n       --  Put the line contained in the Name_Buffer in the global buffer\n \n       procedure Process\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         State            : in out Integer);\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer);\n       --  Generate the mapping file for Project (not recursively)\n \n       ---------------------\n@@ -818,12 +811,11 @@ package body Prj.Env is\n       -------------\n \n       procedure Process\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         State            : in out Integer)\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         State   : in out Integer)\n       is\n-         pragma Unreferenced (State, In_Aggregate_Lib);\n+         pragma Unreferenced (State);\n \n          Source : Source_Id;\n          Suffix : File_Name_Type;\n@@ -1233,23 +1225,21 @@ package body Prj.Env is\n       Tree    : Project_Tree_Ref)\n    is\n       procedure For_Project\n-        (Prj              : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Integer);\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Integer);\n       --  Get all object directories of Prj\n \n       -----------------\n       -- For_Project --\n       -----------------\n \n       procedure For_Project\n-        (Prj              : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Integer)\n+        (Prj   : Project_Id;\n+         Tree  : Project_Tree_Ref;\n+         Dummy : in out Integer)\n       is\n-         pragma Unreferenced (Dummy, Tree, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy, Tree);\n \n       begin\n          --  ??? Set_Ada_Paths has a different behavior for library project\n@@ -1280,23 +1270,21 @@ package body Prj.Env is\n       In_Tree : Project_Tree_Ref)\n    is\n       procedure For_Project\n-        (Prj              : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Integer);\n+        (Prj     : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Integer);\n       --  Get all object directories of Prj\n \n       -----------------\n       -- For_Project --\n       -----------------\n \n       procedure For_Project\n-        (Prj              : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Integer)\n+        (Prj     : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Integer)\n       is\n-         pragma Unreferenced (Dummy, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy);\n \n          Current    : String_List_Id := Prj.Source_Dirs;\n          The_String : String_Element;\n@@ -1654,10 +1642,9 @@ package body Prj.Env is\n       Buffer_Last : Natural := 0;\n \n       procedure Recursive_Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean);\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean);\n       --  Recursive procedure to add the source/object paths of extended/\n       --  imported projects.\n \n@@ -1666,12 +1653,11 @@ package body Prj.Env is\n       -------------------\n \n       procedure Recursive_Add\n-        (Project          : Project_Id;\n-         In_Tree          : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Dummy            : in out Boolean)\n+        (Project : Project_Id;\n+         In_Tree : Project_Tree_Ref;\n+         Dummy   : in out Boolean)\n       is\n-         pragma Unreferenced (Dummy, In_Tree, In_Aggregate_Lib);\n+         pragma Unreferenced (Dummy, In_Tree);\n \n          Path : Path_Name_Type;\n "}, {"sha": "06450b199c31bec5b8a6ba1ad45a5fb9ffc66bf6", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2000-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8201,10 +8201,10 @@ package body Prj.Nmsc is\n       --  Process the naming scheme for a single project\n \n       procedure Recursive_Check\n-        (Project          : Project_Id;\n-         Prj_Tree         : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Data             : in out Tree_Processing_Data);\n+        (Project  : Project_Id;\n+         Prj_Tree : Project_Tree_Ref;\n+         Context  : Project_Context;\n+         Data     : in out Tree_Processing_Data);\n       --  Check_Naming_Scheme for the project\n \n       -----------\n@@ -8345,10 +8345,10 @@ package body Prj.Nmsc is\n       ---------------------\n \n       procedure Recursive_Check\n-        (Project          : Project_Id;\n-         Prj_Tree         : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         Data             : in out Tree_Processing_Data)\n+        (Project  : Project_Id;\n+         Prj_Tree : Project_Tree_Ref;\n+         Context  : Project_Context;\n+         Data     : in out Tree_Processing_Data)\n       is\n       begin\n          if Current_Verbosity = High then\n@@ -8357,17 +8357,17 @@ package body Prj.Nmsc is\n          end if;\n \n          Data.Tree := Prj_Tree;\n-         Data.In_Aggregate_Lib := In_Aggregate_Lib;\n+         Data.In_Aggregate_Lib := Context.In_Aggregate_Lib;\n \n-         Check (Project, In_Aggregate_Lib, Data);\n+         Check (Project, Context.In_Aggregate_Lib, Data);\n \n          if Current_Verbosity = High then\n             Debug_Decrease_Indent (\"done Processing_Naming_Scheme\");\n          end if;\n       end Recursive_Check;\n \n-      procedure Check_All_Projects is new\n-        For_Every_Project_Imported (Tree_Processing_Data, Recursive_Check);\n+      procedure Check_All_Projects is new For_Every_Project_Imported_Context\n+        (Tree_Processing_Data, Recursive_Check);\n \n       Data : Tree_Processing_Data;\n "}, {"sha": "ed2c8572869dfcd8b26046fc5c5e4f52d5a46ad3", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 101, "deletions": 44, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -517,7 +517,7 @@ package body Prj is\n    -- For_Every_Project_Imported --\n    --------------------------------\n \n-   procedure For_Every_Project_Imported\n+   procedure For_Every_Project_Imported_Context\n      (By                 : Project_Id;\n       Tree               : Project_Tree_Ref;\n       With_State         : in out State;\n@@ -527,9 +527,10 @@ package body Prj is\n       use Project_Boolean_Htable;\n \n       procedure Recursive_Check_Context\n-        (Project          : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean);\n+        (Project               : Project_Id;\n+         Tree                  : Project_Tree_Ref;\n+         In_Aggregate_Lib      : Boolean;\n+         From_Encapsulated_Lib : Boolean);\n       --  Recursively handle the project tree creating a new context for\n       --  keeping track about already handled projects.\n \n@@ -538,9 +539,10 @@ package body Prj is\n       -----------------------------\n \n       procedure Recursive_Check_Context\n-        (Project          : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean)\n+        (Project               : Project_Id;\n+         Tree                  : Project_Tree_Ref;\n+         In_Aggregate_Lib      : Boolean;\n+         From_Encapsulated_Lib : Boolean)\n       is\n          package Name_Id_Set is\n            new Ada.Containers.Ordered_Sets (Element_Type => Name_Id);\n@@ -550,9 +552,10 @@ package body Prj is\n          --  project twice in the context of aggregate libraries.\n \n          procedure Recursive_Check\n-           (Project          : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean);\n+           (Project               : Project_Id;\n+            Tree                  : Project_Tree_Ref;\n+            In_Aggregate_Lib      : Boolean;\n+            From_Encapsulated_Lib : Boolean);\n          --  Check if project has already been seen. If not, mark it as Seen,\n          --  Call Action, and check all its imported and aggregated projects.\n \n@@ -561,9 +564,10 @@ package body Prj is\n          ---------------------\n \n          procedure Recursive_Check\n-           (Project          : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean)\n+           (Project               : Project_Id;\n+            Tree                  : Project_Tree_Ref;\n+            In_Aggregate_Lib      : Boolean;\n+            From_Encapsulated_Lib : Boolean)\n          is\n             List : Project_List;\n             T    : Project_Tree_Ref;\n@@ -577,20 +581,30 @@ package body Prj is\n                Seen_Name.Include (Project.Name);\n \n                if not Imported_First then\n-                  Action (Project, Tree, In_Aggregate_Lib, With_State);\n+                  Action\n+                    (Project,\n+                     Tree,\n+                     Project_Context'(In_Aggregate_Lib, From_Encapsulated_Lib),\n+                     With_State);\n                end if;\n \n                --  Visit all extended projects\n \n                if Project.Extends /= No_Project then\n-                  Recursive_Check (Project.Extends, Tree, In_Aggregate_Lib);\n+                  Recursive_Check\n+                    (Project.Extends, Tree,\n+                     In_Aggregate_Lib, From_Encapsulated_Lib);\n                end if;\n \n                --  Visit all imported projects\n \n                List := Project.Imported_Projects;\n                while List /= null loop\n-                  Recursive_Check (List.Project, Tree, In_Aggregate_Lib);\n+                  Recursive_Check\n+                    (List.Project, Tree,\n+                     In_Aggregate_Lib,\n+                     From_Encapsulated_Lib\n+                       or (Project.Standalone_Library = Encapsulated));\n                   List := List.Next;\n                end loop;\n \n@@ -612,7 +626,11 @@ package body Prj is\n \n                         if Project.Qualifier = Aggregate_Library then\n                            T := Tree;\n-                           Recursive_Check (Agg.Project, T, True);\n+                           Recursive_Check\n+                             (Agg.Project, T,\n+                              True,\n+                              From_Encapsulated_Lib or\n+                                Project.Standalone_Library = Encapsulated);\n \n                         else\n                            T := Agg.Tree;\n@@ -621,7 +639,8 @@ package body Prj is\n                            --  project in different project tree for aggregated\n                            --  projects.\n \n-                           Recursive_Check_Context (Agg.Project, T, False);\n+                           Recursive_Check_Context\n+                             (Agg.Project, T, False, False);\n                         end if;\n \n                         Agg := Agg.Next;\n@@ -630,22 +649,66 @@ package body Prj is\n                end if;\n \n                if Imported_First then\n-                  Action (Project, Tree, In_Aggregate_Lib, With_State);\n+                  Action\n+                    (Project,\n+                     Tree,\n+                     Project_Context'(In_Aggregate_Lib, From_Encapsulated_Lib),\n+                     With_State);\n                end if;\n             end if;\n          end Recursive_Check;\n \n       --  Start of processing for Recursive_Check_Context\n \n       begin\n-         Recursive_Check (Project, Tree, In_Aggregate_Lib);\n+         Recursive_Check\n+           (Project, Tree, In_Aggregate_Lib, From_Encapsulated_Lib);\n       end Recursive_Check_Context;\n \n    --  Start of processing for For_Every_Project_Imported\n \n    begin\n       Recursive_Check_Context\n-        (Project => By, Tree => Tree, In_Aggregate_Lib => False);\n+        (Project               => By,\n+         Tree                  => Tree,\n+         In_Aggregate_Lib      => False,\n+         From_Encapsulated_Lib => False);\n+   end For_Every_Project_Imported_Context;\n+\n+   procedure For_Every_Project_Imported\n+     (By                 : Project_Id;\n+      Tree               : Project_Tree_Ref;\n+      With_State         : in out State;\n+      Include_Aggregated : Boolean := True;\n+      Imported_First     : Boolean := False)\n+   is\n+      procedure Internal\n+        (Project    : Project_Id;\n+         Tree       : Project_Tree_Ref;\n+         Context    : Project_Context;\n+         With_State : in out State);\n+      --  Action wrapper for handling the context\n+\n+      --------------\n+      -- Internal --\n+      --------------\n+\n+      procedure Internal\n+        (Project    : Project_Id;\n+         Tree       : Project_Tree_Ref;\n+         Context    : Project_Context;\n+         With_State : in out State)\n+      is\n+         pragma Unreferenced (Context);\n+      begin\n+         Action (Project, Tree, With_State);\n+      end Internal;\n+\n+      procedure For_Projects is\n+        new For_Every_Project_Imported_Context (State, Internal);\n+\n+   begin\n+      For_Projects (By, Tree, With_State, Include_Aggregated, Imported_First);\n    end For_Every_Project_Imported;\n \n    -----------------\n@@ -663,24 +726,20 @@ package body Prj is\n       Result : Source_Id  := No_Source;\n \n       procedure Look_For_Sources\n-        (Proj         : Project_Id;\n-         Tree         : Project_Tree_Ref;\n-         In_Aggregate : Boolean;\n-         Src          : in out Source_Id);\n+        (Proj : Project_Id;\n+         Tree : Project_Tree_Ref;\n+         Src  : in out Source_Id);\n       --  Look for Base_Name in the sources of Proj\n \n       ----------------------\n       -- Look_For_Sources --\n       ----------------------\n \n       procedure Look_For_Sources\n-        (Proj         : Project_Id;\n-         Tree         : Project_Tree_Ref;\n-         In_Aggregate : Boolean;\n-         Src          : in out Source_Id)\n+        (Proj : Project_Id;\n+         Tree : Project_Tree_Ref;\n+         Src  : in out Source_Id)\n       is\n-         pragma Unreferenced (In_Aggregate);\n-\n          Iterator : Source_Iterator;\n \n       begin\n@@ -715,14 +774,14 @@ package body Prj is\n       if In_Extended_Only then\n          Proj := Project;\n          while Proj /= No_Project loop\n-            Look_For_Sources (Proj, In_Tree, False, Result);\n+            Look_For_Sources (Proj, In_Tree, Result);\n             exit when Result /= No_Source;\n \n             Proj := Proj.Extends;\n          end loop;\n \n       elsif In_Imported_Only then\n-         Look_For_Sources (Project, In_Tree, False, Result);\n+         Look_For_Sources (Project, In_Tree, Result);\n \n          if Result = No_Source then\n             For_Imported_Projects\n@@ -733,7 +792,7 @@ package body Prj is\n          end if;\n \n       else\n-         Look_For_Sources (No_Project, In_Tree, False, Result);\n+         Look_For_Sources (No_Project, In_Tree, Result);\n       end if;\n \n       return Result;\n@@ -1418,10 +1477,9 @@ package body Prj is\n          Project : Project_Id;\n \n          procedure Recursive_Add\n-           (Prj              : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean;\n-            Dummy            : in out Boolean);\n+           (Prj   : Project_Id;\n+            Tree  : Project_Tree_Ref;\n+            Dummy : in out Boolean);\n          --  Recursively add the projects imported by project Project, but not\n          --  those that are extended.\n \n@@ -1430,12 +1488,11 @@ package body Prj is\n          -------------------\n \n          procedure Recursive_Add\n-           (Prj              : Project_Id;\n-            Tree             : Project_Tree_Ref;\n-            In_Aggregate_Lib : Boolean;\n-            Dummy            : in out Boolean)\n+           (Prj   : Project_Id;\n+            Tree  : Project_Tree_Ref;\n+            Dummy : in out Boolean)\n          is\n-            pragma Unreferenced (Dummy, Tree, In_Aggregate_Lib);\n+            pragma Unreferenced (Dummy, Tree);\n \n             List : Project_List;\n             Prj2 : Project_Id;"}, {"sha": "93e25df456401c6a58d4b5799d6debfb70f7fdc3", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1562,10 +1562,9 @@ package Prj is\n    generic\n       type State is limited private;\n       with procedure Action\n-        (Project          : Project_Id;\n-         Tree             : Project_Tree_Ref;\n-         In_Aggregate_Lib : Boolean;\n-         With_State       : in out State);\n+        (Project    : Project_Id;\n+         Tree       : Project_Tree_Ref;\n+         With_State : in out State);\n    procedure For_Every_Project_Imported\n      (By                 : Project_Id;\n       Tree               : Project_Tree_Ref;\n@@ -1597,6 +1596,27 @@ package Prj is\n    --  The Tree argument passed to the callback is required in the case of\n    --  aggregated projects, since they might not be using the same tree as 'By'\n \n+   type Project_Context is record\n+      In_Aggregate_Lib      : Boolean;\n+      --  True if the project is part of an aggregate library\n+      From_Encapsulated_Lib : Boolean;\n+      --  True if the project is imported from an encapsulated library\n+   end record;\n+\n+   generic\n+      type State is limited private;\n+      with procedure Action\n+        (Project    : Project_Id;\n+         Tree       : Project_Tree_Ref;\n+         Context    : Project_Context;\n+         With_State : in out State);\n+   procedure For_Every_Project_Imported_Context\n+     (By                 : Project_Id;\n+      Tree               : Project_Tree_Ref;\n+      With_State         : in out State;\n+      Include_Aggregated : Boolean := True;\n+      Imported_First     : Boolean := False);\n+\n    function Extend_Name\n      (File        : File_Name_Type;\n       With_Suffix : String) return File_Name_Type;"}, {"sha": "7e705f5b1188a39a2dda1535f6209b445766167d", "filename": "gcc/ada/s-diflio.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fs-diflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fs-diflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.ads?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -53,7 +53,7 @@ package System.Dim_Float_IO is\n       Fore    : Field  := Default_Fore;\n       Aft     : Field  := Default_Aft;\n       Exp     : Field  := Default_Exp;\n-      Symbols : String      := \"\");\n+      Symbols : String := \"\");\n \n    procedure Put\n      (Item    : Num_Dim_Float;"}, {"sha": "b5502dea7bbcc6fd4f3ceddeedde5c0422cf625a", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -2331,19 +2331,21 @@ package body Sem_Dim is\n             Actual := First (Actuals);\n \n             while Present (Actual) loop\n-               --  Copy every comes from source actuals in New_Actuals\n-\n-               if Comes_From_Source (Actual) then\n-                  if Nkind (Actual) = N_Parameter_Association then\n-                     Append (\n-                        Make_Parameter_Association (Loc,\n-                           Selector_Name => New_Copy (Selector_Name (Actual)),\n-                           Explicit_Actual_Parameter =>\n-                              New_Copy (Explicit_Actual_Parameter (Actual))),\n-                        New_Actuals);\n-                  else\n-                     Append (New_Copy (Actual), New_Actuals);\n-                  end if;\n+               --  Copy every actuals in New_Actuals except the Symbols\n+               --  parameter association.\n+\n+               if Nkind (Actual) = N_Parameter_Association\n+                 and then Chars (Selector_Name (Actual)) /= Name_Symbols\n+               then\n+                  Append (\n+                     Make_Parameter_Association (Loc,\n+                        Selector_Name => New_Copy (Selector_Name (Actual)),\n+                        Explicit_Actual_Parameter =>\n+                           New_Copy (Explicit_Actual_Parameter (Actual))),\n+                     New_Actuals);\n+\n+               elsif Nkind (Actual) /= N_Parameter_Association then\n+                  Append (New_Copy (Actual), New_Actuals);\n                end if;\n \n                Next (Actual);"}, {"sha": "6c24b971db3fb2b56ce6f20d78fa48d700aeae2f", "filename": "gcc/ada/system-vxworks-ppc.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457c5df44bb8524134ce27184f206368aa5c8e21/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-ppc.ads?ref=457c5df44bb8524134ce27184f206368aa5c8e21", "patch": "@@ -5,9 +5,9 @@\n --                               S Y S T E M                                --\n --                                                                          --\n --                                 S p e c                                  --\n---                    (VxWorks 5 and MILS Version PPC)                      --\n+--                         (VxWorks 5 Version PPC)                          --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -115,6 +115,9 @@ package System is\n \n private\n \n+   pragma Linker_Options (\"-crtbe\");\n+   --  Required by ZCX on VxWorks kernel\n+\n    type Address is mod Memory_Size;\n    Null_Address : constant Address := 0;\n "}]}