{"sha": "bab4d587a04002521bf2d39932fa3e30bd6a7a94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiNGQ1ODdhMDQwMDI1MjFiZjJkMzk5MzJmYTNlMzBiZDZhN2E5NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-01T21:30:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-01T21:30:26Z"}, "message": "re PR tree-optimization/43949 (bogus warning: array subscript is above array bounds)\n\n2010-05-01  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43949\n\t* tree-vrp.c (ssa_name_nonnegative_p): Return true for unsigned\n\ttypes.\n\t(extract_range_from_binary_expr): Handle *_MOD_EXPR.\n\n\t* g++.dg/warn/Warray-bounds-5.C: New testcase.\n\nFrom-SVN: r158965", "tree": {"sha": "97f124b29810b764f35f68f70433b948f8558b80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f124b29810b764f35f68f70433b948f8558b80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab4d587a04002521bf2d39932fa3e30bd6a7a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab4d587a04002521bf2d39932fa3e30bd6a7a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab4d587a04002521bf2d39932fa3e30bd6a7a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab4d587a04002521bf2d39932fa3e30bd6a7a94/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d825422c0a49237db41221f5731351a416ada89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d825422c0a49237db41221f5731351a416ada89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d825422c0a49237db41221f5731351a416ada89"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "7f636b3c90833e2884c239474f19032d46570eaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bab4d587a04002521bf2d39932fa3e30bd6a7a94", "patch": "@@ -1,3 +1,10 @@\n+2010-05-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43949\n+\t* tree-vrp.c (ssa_name_nonnegative_p): Return true for unsigned\n+\ttypes.\n+\t(extract_range_from_binary_expr): Handle *_MOD_EXPR.\n+\n 2010-05-01  Anatoly Sokolov  <aesok@post.ru>\n \n \t* rtl.h (CONST_DOUBLE_P): Define."}, {"sha": "39a8d977d6ec784676ea9a208922873c74683b37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bab4d587a04002521bf2d39932fa3e30bd6a7a94", "patch": "@@ -1,3 +1,8 @@\n+2010-05-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43949\n+\t* g++.dg/warn/Warray-bounds-5.C: New testcase.\n+\n 2010-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/43951"}, {"sha": "06d776a400bb78f92eb16f0fc13b9b1fa99a1ef0", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-5.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-5.C?ref=bab4d587a04002521bf2d39932fa3e30bd6a7a94", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+void f();\n+\n+int c[3];\n+int result;\n+\n+struct Vector {\n+    static int get(int i) {\n+        if (i >= 3)\n+            f();\n+        return c[i];\n+    }\n+};\n+\n+void g()\n+{\n+    for (int i = 0; i < 3; ++i) {\n+        const int index = i % 3;\n+        result = Vector::get(index) + Vector::get(index);\n+    }\n+}\n+"}, {"sha": "83ff665c61d86e25b6f168762e88e690a6bc89f3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab4d587a04002521bf2d39932fa3e30bd6a7a94/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=bab4d587a04002521bf2d39932fa3e30bd6a7a94", "patch": "@@ -1364,6 +1364,10 @@ ssa_name_nonnegative_p (const_tree t)\n {\n   value_range_t *vr = get_value_range (t);\n \n+  if (INTEGRAL_TYPE_P (t)\n+      && TYPE_UNSIGNED (t))\n+    return true;\n+\n   if (!vr)\n     return false;\n \n@@ -2079,6 +2083,10 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != CEIL_DIV_EXPR\n       && code != EXACT_DIV_EXPR\n       && code != ROUND_DIV_EXPR\n+      && code != TRUNC_MOD_EXPR\n+      && code != FLOOR_MOD_EXPR\n+      && code != CEIL_MOD_EXPR\n+      && code != ROUND_MOD_EXPR\n       && code != RSHIFT_EXPR\n       && code != MIN_EXPR\n       && code != MAX_EXPR\n@@ -2147,6 +2155,10 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != CEIL_DIV_EXPR\n       && code != EXACT_DIV_EXPR\n       && code != ROUND_DIV_EXPR\n+      && code != TRUNC_MOD_EXPR\n+      && code != FLOOR_MOD_EXPR\n+      && code != CEIL_MOD_EXPR\n+      && code != ROUND_MOD_EXPR\n       && (vr0.type == VR_VARYING\n \t  || vr1.type == VR_VARYING\n \t  || vr0.type != vr1.type\n@@ -2497,6 +2509,28 @@ extract_range_from_binary_expr (value_range_t *vr,\n \t    }\n \t}\n     }\n+  else if (code == TRUNC_MOD_EXPR\n+\t   || code == FLOOR_MOD_EXPR\n+\t   || code == CEIL_MOD_EXPR\n+\t   || code == ROUND_MOD_EXPR)\n+    {\n+      bool sop = false;\n+      if (vr0.type == VR_ANTI_RANGE\n+\t  || vr1.type != VR_RANGE\n+\t  || symbolic_range_p (&vr1)\n+\t  || range_includes_zero_p (&vr1))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+      type = VR_RANGE;\n+      max = int_const_binop (MINUS_EXPR, vr1.max, integer_one_node, 0);\n+      if (vrp_expr_computes_nonnegative (op0, &sop)\n+\t  && vrp_expr_computes_nonnegative (op1, &sop) && !sop)\n+\tmin = build_int_cst (TREE_TYPE (vr1.max), 0);\n+      else\n+\tmin = fold_unary (NEGATE_EXPR, TREE_TYPE (max), max);\n+    }\n   else if (code == MINUS_EXPR)\n     {\n       /* If we have a MINUS_EXPR with two VR_ANTI_RANGEs, drop to"}]}