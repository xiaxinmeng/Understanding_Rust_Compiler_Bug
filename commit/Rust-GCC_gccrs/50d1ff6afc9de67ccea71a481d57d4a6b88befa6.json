{"sha": "50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkMWZmNmFmYzlkZTY3Y2NlYTcxYTQ4MWQ1N2Q0YTZiODhiZWZhNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T11:16:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T11:16:30Z"}, "message": "v850.c (print_operand): Use SYMBOL_REF_[ZST]DA.\n\n        * config/v850/v850.c (print_operand): Use SYMBOL_REF_[ZST]DA.\n        (print_operand_address): Likewise.\n        (ep_memory_operand): Likewise.\n        (special_symbolref_operand): Likewise.\n        (v850_encode_data_area): Use SYMBOL_REF_FLAGS.\n        (v850_encode_section_info): Call default_encode_section_info.\n        (v850_strip_name_encoding): Remove.\n        * config/v850/v850.h (EXTRA_CONSTRAINT): Use SYMBOL_REF_[ZST]DA.\n        (ASM_OUTPUT_LABELREF): Remove.\n        (ZDA_NAME_FLAG_CHAR, ZDA_NAME_P): Remove.\n        (SDA_NAME_FLAG_CHAR, SDA_NAME_P): Remove.\n        (TDA_NAME_FLAG_CHAR, TDA_NAME_P): Remove.\n        (ENCODED_NAME_P): Remove.\n        (SYMBOL_FLAG_ZDA, SYMBOL_REF_ZDA_P): New.\n        (SYMBOL_FLAG_SDA, SYMBOL_REF_SDA_P): New.\n        (SYMBOL_FLAG_TDA, SYMBOL_REF_TDA_P): New.\n\nFrom-SVN: r65738", "tree": {"sha": "02db13e8e601a8bc1eab568ed1a713dc0d47f66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02db13e8e601a8bc1eab568ed1a713dc0d47f66d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/comments", "author": null, "committer": null, "parents": [{"sha": "e7d687bba681c44a9d8925690a72c31a1798628a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d687bba681c44a9d8925690a72c31a1798628a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d687bba681c44a9d8925690a72c31a1798628a"}], "stats": {"total": 194, "additions": 91, "deletions": 103}, "files": [{"sha": "4831d5d3f849d2c18abc83a91b7db2934169e1b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "patch": "@@ -1,3 +1,22 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/v850/v850.c (print_operand): Use SYMBOL_REF_[ZST]DA.\n+\t(print_operand_address): Likewise.\n+\t(ep_memory_operand): Likewise.\n+\t(special_symbolref_operand): Likewise.\n+\t(v850_encode_data_area): Use SYMBOL_REF_FLAGS.\n+\t(v850_encode_section_info): Call default_encode_section_info.\n+\t(v850_strip_name_encoding): Remove.\n+\t* config/v850/v850.h (EXTRA_CONSTRAINT): Use SYMBOL_REF_[ZST]DA.\n+\t(ASM_OUTPUT_LABELREF): Remove.\n+\t(ZDA_NAME_FLAG_CHAR, ZDA_NAME_P): Remove.\n+\t(SDA_NAME_FLAG_CHAR, SDA_NAME_P): Remove.\n+\t(TDA_NAME_FLAG_CHAR, TDA_NAME_P): Remove.\n+\t(ENCODED_NAME_P): Remove.\n+\t(SYMBOL_FLAG_ZDA, SYMBOL_REF_ZDA_P): New.\n+\t(SYMBOL_FLAG_SDA, SYMBOL_REF_SDA_P): New.\n+\t(SYMBOL_FLAG_TDA, SYMBOL_REF_TDA_P): New.\n+\n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/stormy16/stormy16.c (xstormy16_encode_section_info): Kill."}, {"sha": "b3cd34e5ac42e2f9e87d9b0b734db7d0524923d6", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 59, "deletions": 79, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "patch": "@@ -63,7 +63,6 @@ static void v850_insert_attributes   PARAMS ((tree, tree *));\n static void v850_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static void v850_encode_data_area    PARAMS ((tree));\n static void v850_encode_section_info PARAMS ((tree, int));\n-static const char *v850_strip_name_encoding PARAMS ((const char *));\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -104,8 +103,6 @@ static int v850_interrupt_p = FALSE;\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO v850_encode_section_info\n-#undef TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING v850_strip_name_encoding\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS v850_rtx_costs\n@@ -509,20 +506,18 @@ print_operand (file, x, code)\n     case 'O':\n       if (special_symbolref_operand (x, VOIDmode))\n         {\n-          const char *name;\n-\n \t  if (GET_CODE (x) == SYMBOL_REF)\n-\t    name = XSTR (x, 0);\n+\t    ;\n \t  else if (GET_CODE (x) == CONST)\n-\t    name = XSTR (XEXP (XEXP (x, 0), 0), 0);\n+\t    x = XEXP (XEXP (x, 0), 0);\n \t  else\n \t    abort ();\n \n-          if (ZDA_NAME_P (name))\n+          if (SYMBOL_REF_ZDA_P (x))\n             fprintf (file, \"zdaoff\");\n-          else if (SDA_NAME_P (name))\n+          else if (SYMBOL_REF_SDA_P (x))\n             fprintf (file, \"sdaoff\");\n-          else if (TDA_NAME_P (name))\n+          else if (SYMBOL_REF_TDA_P (x))\n             fprintf (file, \"tdaoff\");\n           else\n             abort ();\n@@ -539,20 +534,18 @@ print_operand (file, x, code)\n     case 'Q':\n       if (special_symbolref_operand (x, VOIDmode))\n         {\n-          const char *name;\n-\n \t  if (GET_CODE (x) == SYMBOL_REF)\n-\t    name = XSTR (x, 0);\n+\t    ;\n \t  else if (GET_CODE (x) == CONST)\n-\t    name = XSTR (XEXP (XEXP (x, 0), 0), 0);\n+\t    x = XEXP (XEXP (x, 0), 0);\n \t  else\n \t    abort ();\n \n-          if (ZDA_NAME_P (name))\n+          if (SYMBOL_REF_ZDA_P (x))\n             fprintf (file, \"r0\");\n-          else if (SDA_NAME_P (name))\n+          else if (SYMBOL_REF_SDA_P (x))\n             fprintf (file, \"gp\");\n-          else if (TDA_NAME_P (name))\n+          else if (SYMBOL_REF_TDA_P (x))\n             fprintf (file, \"ep\");\n           else\n             abort ();\n@@ -692,55 +685,51 @@ print_operand_address (file, addr)\n \t}\n       break;\n     case SYMBOL_REF:\n-      if (ENCODED_NAME_P (XSTR (addr, 0)))\n-        {\n-          const char *name = XSTR (addr, 0);\n-          const char *off_name;\n-          const char *reg_name;\n-\n-          if (ZDA_NAME_P (name))\n-            {\n-              off_name = \"zdaoff\";\n-              reg_name = \"r0\";\n-            }\n-          else if (SDA_NAME_P (name))\n-            {\n-              off_name = \"sdaoff\";\n-              reg_name = \"gp\";\n-            }\n-          else if (TDA_NAME_P (name))\n-            {\n-              off_name = \"tdaoff\";\n-              reg_name = \"ep\";\n-            }\n-          else\n-            abort ();\n-\n+      {\n+        const char *off_name = NULL;\n+        const char *reg_name = NULL;\n+\n+\tif (SYMBOL_REF_ZDA_P (addr))\n+          {\n+            off_name = \"zdaoff\";\n+            reg_name = \"r0\";\n+          }\n+        else if (SYMBOL_REF_SDA_P (addr))\n+          {\n+            off_name = \"sdaoff\";\n+            reg_name = \"gp\";\n+          }\n+        else if (SYMBOL_REF_TDA_P (addr))\n+          {\n+            off_name = \"tdaoff\";\n+            reg_name = \"ep\";\n+          }\n+\n+\tif (off_name)\n           fprintf (file, \"%s(\", off_name);\n-          output_addr_const (file, addr);\n-          fprintf (file, \")[%s]\", reg_name);\n-        }\n-      else\n         output_addr_const (file, addr);\n+\tif (reg_name)\n+          fprintf (file, \")[%s]\", reg_name);\n+      }\n       break;\n     case CONST:\n       if (special_symbolref_operand (addr, VOIDmode))\n         {\n-          const char *name = XSTR (XEXP (XEXP (addr, 0), 0), 0);\n+\t  rtx x = XEXP (XEXP (addr, 0), 0);\n           const char *off_name;\n           const char *reg_name;\n \n-          if (ZDA_NAME_P (name))\n+          if (SYMBOL_REF_ZDA_P (x))\n             {\n               off_name = \"zdaoff\";\n               reg_name = \"r0\";\n             }\n-          else if (SDA_NAME_P (name))\n+          else if (SYMBOL_REF_SDA_P (x))\n             {\n               off_name = \"sdaoff\";\n               reg_name = \"gp\";\n             }\n-          else if (TDA_NAME_P (name))\n+          else if (SYMBOL_REF_TDA_P (x))\n             {\n               off_name = \"tdaoff\";\n               reg_name = \"ep\";\n@@ -1051,7 +1040,7 @@ ep_memory_operand (op, mode, unsigned_load)\n       break;\n \n     case SYMBOL_REF:\n-      return TDA_NAME_P (XSTR (addr, 0));\n+      return SYMBOL_REF_TDA_P (addr);\n \n     case REG:\n       return REGNO (addr) == EP_REGNUM;\n@@ -1067,7 +1056,7 @@ ep_memory_operand (op, mode, unsigned_load)\n \t  if (GET_CODE (op0) == REG && REGNO (op0) == EP_REGNUM)\n \t    return TRUE;\n \n-\t  if (GET_CODE (op0) == SYMBOL_REF && TDA_NAME_P (XSTR (op0, 0)))\n+\t  if (GET_CODE (op0) == SYMBOL_REF && SYMBOL_REF_TDA_P (op0))\n \t    return TRUE;\n \t}\n       break;\n@@ -1151,15 +1140,15 @@ special_symbolref_operand (op, mode)\n      rtx op;\n      enum machine_mode ATTRIBUTE_UNUSED mode;\n {\n-  if (GET_CODE (op) == SYMBOL_REF)\n-    return ENCODED_NAME_P (XSTR (op, 0));\n+  if (GET_CODE (op) == CONST\n+      && GET_CODE (XEXP (op, 0)) == PLUS\n+      && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT\n+      && CONST_OK_FOR_K (INTVAL (XEXP (XEXP (op, 0), 1))))\n+    op = XEXP (XEXP (op, 0), 0);\n \n-  else if (GET_CODE (op) == CONST)\n-    return (GET_CODE (XEXP (op, 0)) == PLUS\n-\t    && GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n-\t    && ENCODED_NAME_P (XSTR (XEXP (XEXP (op, 0), 0), 0))\n-\t    && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT\n-\t    && CONST_OK_FOR_K (INTVAL (XEXP (XEXP (op, 0), 1))));\n+  if (GET_CODE (op) == SYMBOL_REF)\n+    return (SYMBOL_REF_FLAGS (op)\n+\t    & (SYMBOL_FLAG_ZDA | SYMBOL_FLAG_TDA | SYMBOL_FLAG_SDA)) != 0;\n \n   return FALSE;\n }\n@@ -2338,9 +2327,8 @@ static void\n v850_encode_data_area (decl)\n      tree decl;\n {\n-  const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-  int    len = strlen (str);\n-  char * newstr;\n+  int flags;\n+  rtx symbol;\n \n   /* Map explict sections into the appropriate attribute */\n   if (v850_get_data_area (decl) == DATA_AREA_NORMAL)\n@@ -2380,38 +2368,30 @@ v850_encode_data_area (decl)\n \treturn;\n     }\n \n-  newstr = alloca (len + 2);\n-\n-  strcpy (newstr + 1, str);\n-\n+  symbol = XEXP (DECL_RTL (decl), 0);\n+  flags = SYMBOL_REF_FLAGS (symbol);\n   switch (v850_get_data_area (decl))\n     {\n-    case DATA_AREA_ZDA: *newstr = ZDA_NAME_FLAG_CHAR; break;\n-    case DATA_AREA_TDA: *newstr = TDA_NAME_FLAG_CHAR; break;\n-    case DATA_AREA_SDA: *newstr = SDA_NAME_FLAG_CHAR; break;\n+    case DATA_AREA_ZDA: flags |= SYMBOL_FLAG_ZDA; break;\n+    case DATA_AREA_TDA: flags |= SYMBOL_FLAG_TDA; break;\n+    case DATA_AREA_SDA: flags |= SYMBOL_FLAG_SDA; break;\n     default: abort ();\n     }\n-\n-  XSTR (XEXP (DECL_RTL (decl), 0), 0) = ggc_alloc_string (newstr, len + 2);\n+  SYMBOL_REF_FLAGS (symbol) = flags;\n }\n \n static void\n v850_encode_section_info (decl, first)\n      tree decl;\n      int first;\n {\n-  if (first && TREE_CODE (decl) == VAR_DECL\n+  default_encode_section_info (decl, first);\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n     v850_encode_data_area (decl);\n }\n \n-static const char *\n-v850_strip_name_encoding (str)\n-     const char *str;\n-{\n-  return str + (ENCODED_NAME_P (str) || *str == '*');\n-}\n-\n /* Return true if the given RTX is a register which can be restored\n    by a function epilogue.  */\n int"}, {"sha": "cbd0d1da2710148b27735babdfd0ad56a5a2c113", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d1ff6afc9de67ccea71a481d57d4a6b88befa6/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=50d1ff6afc9de67ccea71a481d57d4a6b88befa6", "patch": "@@ -924,15 +924,17 @@ struct cum_arg { int nbytes; int anonymous_args; };\n    register class that does not include r0 on the output.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n- ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP), 0)\t\t\t\\\n+ ((C) == 'Q'   ? ep_memory_operand (OP, GET_MODE (OP), 0)\t\t\\\n   : (C) == 'R' ? special_symbolref_operand (OP, VOIDmode)\t\t\\\n-  : (C) == 'S' ? (GET_CODE (OP) == SYMBOL_REF && ! ZDA_NAME_P (XSTR (OP, 0))) \\\n-  : (C) == 'T' ? ep_memory_operand(OP,GET_MODE(OP),TRUE)\t\t\t\\\n-  : (C) == 'U' ? ((GET_CODE (OP) == SYMBOL_REF && ZDA_NAME_P (XSTR (OP, 0))) \\\n+  : (C) == 'S' ? (GET_CODE (OP) == SYMBOL_REF\t\t\t\t\\\n+\t\t  && !SYMBOL_REF_ZDA_P (OP))\t\t\t\t\\\n+  : (C) == 'T' ? ep_memory_operand(OP,GET_MODE(OP),TRUE)\t\t\\\n+  : (C) == 'U' ? ((GET_CODE (OP) == SYMBOL_REF\t\t\t\t\\\n+\t\t   && SYMBOL_REF_ZDA_P (OP))\t\t\t\t\\\n \t\t  || (GET_CODE (OP) == CONST\t\t\t\t\\\n \t\t      && GET_CODE (XEXP (OP, 0)) == PLUS\t\t\\\n \t\t      && GET_CODE (XEXP (XEXP (OP, 0), 0)) == SYMBOL_REF \\\n-\t\t      && ZDA_NAME_P (XSTR (XEXP (XEXP (OP, 0), 0), 0)))) \\\n+\t\t      && SYMBOL_REF_ZDA_P (XEXP (XEXP (OP, 0), 0))))\t\\\n   : 0)\n \f\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n@@ -1201,13 +1203,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.global \"\n \n-/* This is how to output a reference to a user-level label named NAME.\n-   `assemble_name' uses this.  */\n-\n-#undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE, NAME) \\\n-  asm_fprintf (FILE, \"%U%s\", (*targetm.strip_name_encoding) (NAME))\n-\n #define ASM_PN_FORMAT \"%s___%lu\"\n \n /* This is how we tell the assembler that two symbols have the same value.  */\n@@ -1433,18 +1428,12 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n \n #define EP_REGNUM 30\t/* ep register number */\n \n-#define ZDA_NAME_FLAG_CHAR '@'\n-#define TDA_NAME_FLAG_CHAR '%'\n-#define SDA_NAME_FLAG_CHAR '&'\n-\n-#define ZDA_NAME_P(NAME) (*(NAME) == ZDA_NAME_FLAG_CHAR)\n-#define TDA_NAME_P(NAME) (*(NAME) == TDA_NAME_FLAG_CHAR)\n-#define SDA_NAME_P(NAME) (*(NAME) == SDA_NAME_FLAG_CHAR)\n-\n-#define ENCODED_NAME_P(SYMBOL_NAME)    \\\n-  (   ZDA_NAME_P (SYMBOL_NAME)         \\\n-   || TDA_NAME_P (SYMBOL_NAME)         \\\n-   || SDA_NAME_P (SYMBOL_NAME))\n+#define SYMBOL_FLAG_ZDA\t\t(SYMBOL_FLAG_MACH_DEP << 0)\n+#define SYMBOL_FLAG_TDA\t\t(SYMBOL_FLAG_MACH_DEP << 1)\n+#define SYMBOL_FLAG_SDA\t\t(SYMBOL_FLAG_MACH_DEP << 2)\n+#define SYMBOL_REF_ZDA_P(X)\t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_ZDA) != 0)\n+#define SYMBOL_REF_TDA_P(X)\t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_TDA) != 0)\n+#define SYMBOL_REF_SDA_P(X)\t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_SDA) != 0)\n \n /* Define this if you have defined special-purpose predicates in the\n    file `MACHINE.c'.  This macro is called within an initializer of an"}]}