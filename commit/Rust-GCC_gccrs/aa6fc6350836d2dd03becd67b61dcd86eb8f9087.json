{"sha": "aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2ZmM2MzUwODM2ZDJkZDAzYmVjZDY3YjYxZGNkODZlYjhmOTA4Nw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jblomqvi@cc.hut.fi", "date": "2004-08-06T21:47:03Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-06T21:47:03Z"}, "message": "intrinsic.c (add_subroutines): Add getenv and get_environment_variable.\n\n2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n\n\t* intrinsic.c (add_subroutines): Add getenv and\n\tget_environment_variable. (add_sym_5s): New function.\n\t* intrinsic.h (gfc_resolve_get_environment_variable): Add\n\tprototype.\n\t* iresolve.c (gfc_resolve_get_environment_variable): New\n\tfunction.\nlibgfortran/\n\t* intrinsics/env.c: New file.\n\t* Makefile.am: Add env.c to build.\n\t* Makefile.in: Regenerate.\ntestsuite/\n\t* gfortran.dg/getenv_1.f90: New test.\n\nFrom-SVN: r85656", "tree": {"sha": "c74733622978a45c69d005d29049be3d1ac7b4da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74733622978a45c69d005d29049be3d1ac7b4da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/comments", "author": null, "committer": null, "parents": [{"sha": "c7d78bbe0e447685dacd1063f28da8c0c50c289f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d78bbe0e447685dacd1063f28da8c0c50c289f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d78bbe0e447685dacd1063f28da8c0c50c289f"}], "stats": {"total": 294, "additions": 289, "deletions": 5}, "files": [{"sha": "b4338512ce7a1792801ae295c6a57161de9b61f0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -1,3 +1,12 @@\n+2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\t* intrinsic.c (add_subroutines): Add getenv and\n+\tget_environment_variable. (add_sym_5s): New function.\n+\t* intrinsic.h (gfc_resolve_get_environment_variable): Add\n+\tprototype.\n+\t* iresolve.c (gfc_resolve_get_environment_variable): New\n+\tfunction.\n+\n 2004-08-06  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Fix the number of"}, {"sha": "c80909f8f6cee986d13ef23306f8e3eba53ff9f2", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -617,6 +617,36 @@ static void add_sym_5 (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n+static void add_sym_5s  \n+(\n+ const char *name, int elemental, int actual_ok, bt type, int kind,\n+ try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n+ gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n+ void (*resolve)(gfc_code *),\n+ const char* a1, bt type1, int kind1, int optional1,\n+ const char* a2, bt type2, int kind2, int optional2,\n+ const char* a3, bt type3, int kind3, int optional3,\n+ const char* a4, bt type4, int kind4, int optional4,\n+ const char* a5, bt type5, int kind5, int optional5) \n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f5 = check;\n+  sf.f5 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+\t   a1, type1, kind1, optional1,\n+\t   a2, type2, kind2, optional2,\n+\t   a3, type3, kind3, optional3,\n+\t   a4, type4, kind4, optional4,\n+\t   a5, type5, kind5, optional5,\n+\t   (void*)0);\n+}\n+\n+\n /* Locate an intrinsic symbol given a base pointer, number of elements\n    in the table and a pointer to a name.  Returns the NULL pointer if\n    a name is not found.  */\n@@ -1742,13 +1772,15 @@ add_subroutines (void)\n     *t = \"to\", *zn = \"zone\", *fp = \"frompos\", *cm = \"count_max\",\n     *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\",\n     *com = \"command\", *length = \"length\", *st = \"status\",\n-    *val = \"value\", *num = \"number\";\n+    *val = \"value\", *num = \"number\", *name = \"name\",\n+    *trim_name = \"trim_name\";\n \n-  int di, dr, dc;\n+  int di, dr, dc, dl;\n \n   di = gfc_default_integer_kind ();\n   dr = gfc_default_real_kind ();\n   dc = gfc_default_character_kind ();\n+  dl = gfc_default_logical_kind ();\n \n   add_sym_0s (\"abort\", 1, NULL);\n \n@@ -1775,6 +1807,11 @@ add_subroutines (void)\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n \n+  add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0,\n+\t      NULL, NULL, NULL,\n+\t      name, BT_CHARACTER, dc, 0,\n+\t      val, BT_CHARACTER, dc, 0);\n+\n   add_sym_2s (\"getarg\", 0, 1, BT_UNKNOWN, 0,\n \t      NULL, NULL, gfc_resolve_getarg,\n \t      c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n@@ -1793,8 +1830,18 @@ add_subroutines (void)\n \t      val, BT_CHARACTER, dc, 1,\n \t      length, BT_INTEGER, di, 1,\n \t      st, BT_INTEGER, di, 1);\n-\t     \n-  /* Extension */\n+\n+\n+  /* F2003 subroutine to get environment variables. */\n+\n+  add_sym_5s (\"get_environment_variable\", 0, 1, BT_UNKNOWN, 0,\n+\t     NULL, NULL, gfc_resolve_get_environment_variable,\n+\t     name, BT_CHARACTER, dc, 0,\n+\t     val, BT_CHARACTER, dc, 1,\n+\t     length, BT_INTEGER, di, 1,\n+\t     st, BT_INTEGER, di, 1,\n+\t     trim_name, BT_LOGICAL, dl, 1);\n+\n \n   /* This needs changing to add_sym_5s if it gets a resolution function.  */\n   add_sym_5 (\"mvbits\", 1, 1, BT_UNKNOWN, 0,"}, {"sha": "3a50d05b8c56447f737d6eb9ca28a1c00983df3a", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -318,6 +318,7 @@ void gfc_resolve_random_number (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);\n void gfc_resolve_get_command (gfc_code *);\n void gfc_resolve_get_command_argument (gfc_code *);\n+void gfc_resolve_get_environment_variable (gfc_code *);\n \n \n /* The mvbits() subroutine requires the most arguments: five.  */"}, {"sha": "b42294d7d232a41649e6a3f2d3c3e7cf77210502", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -1449,6 +1449,19 @@ gfc_resolve_get_command_argument (gfc_code * c)\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+/* Resolve the get_environment_variable intrinsic subroutine. */\n+\n+void\n+gfc_resolve_get_environment_variable (gfc_code * code)\n+{\n+  const char *name;\n+  int kind;\n+\n+  kind = gfc_default_integer_kind();\n+  name = gfc_get_string (PREFIX(\"get_environment_variable_i%d\"), kind);\n+  code->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n \n /* Determine if the arguments to SYSTEM_CLOCK are INTEGER(4) or INTEGER(8) */\n "}, {"sha": "8caed21c95a106a238eed1f407340c493fbf98a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -1,3 +1,7 @@\n+2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\t* gfortran.dg/getenv_1.f90: New test.\n+\n 2004-08-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/symbian4.c: Expect a 2-byte wchar_t, not a 4-byte"}, {"sha": "8a96bd7f6eb4d1dbf95bf21266a7f1b06e0815c6", "filename": "gcc/testsuite/gfortran.dg/getenv_1.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ftestsuite%2Fgfortran.dg%2Fgetenv_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/gcc%2Ftestsuite%2Fgfortran.dg%2Fgetenv_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgetenv_1.f90?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -0,0 +1,12 @@\n+! { dg do-run }\n+! Test the getenv and get_environment_variable intrinsics.\n+! Ignore the return value because it's not supported/meaningful on all targets\n+program getenv_1\n+  implicit none\n+  character(len=101) ::  var\n+  character(len=*), parameter :: home = 'HOME'\n+  integer :: len, stat\n+  call getenv(name=home, value=var)\n+  call get_environment_variable(name=home, value=var, &\n+       length=len, status=stat)\n+end program getenv_1"}, {"sha": "fc7f6654c2c49f2e45ed5d33c92fb19742c0c158", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -1,3 +1,9 @@\n+2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\t* intrinsics/env.c: New file.\n+\t* Makefile.am: Add env.c to build.\n+\t* Makefile.in: Regenerate.\n+\n 2004-08-05  Victor Leikehman  <lei@il.ibm.com>\n \n \tPR libgfortran/16704"}, {"sha": "35332dc4c073097a9dc2baa56a0a2e7de4fe09da", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -43,6 +43,7 @@ intrinsics/c99_functions.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/date_and_time.c \\\n+intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/etime.c \\"}, {"sha": "b0fa2ec7bba28536a7d9b809e5cab96ae91a8e3a", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -119,7 +119,7 @@ am__objects_32 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo rewind.lo transfer.lo \\\n \tunit.lo unix.lo write.lo\n am__objects_33 = associated.lo abort.lo args.lo c99_functions.lo \\\n-\tcpu_time.lo cshift0.lo date_and_time.lo eoshift0.lo \\\n+\tcpu_time.lo cshift0.lo date_and_time.lo env.lo eoshift0.lo \\\n \teoshift2.lo etime.lo ishftc.lo pack_generic.lo size.lo \\\n \tspread_generic.lo string_intrinsics.lo rand.lo random.lo \\\n \treshape_generic.lo reshape_packed.lo selected_kind.lo \\\n@@ -314,6 +314,7 @@ intrinsics/c99_functions.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/date_and_time.c \\\n+intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/etime.c \\\n@@ -2025,6 +2026,15 @@ date_and_time.obj: intrinsics/date_and_time.c\n date_and_time.lo: intrinsics/date_and_time.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o date_and_time.lo `test -f 'intrinsics/date_and_time.c' || echo '$(srcdir)/'`intrinsics/date_and_time.c\n \n+env.o: intrinsics/env.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o env.o `test -f 'intrinsics/env.c' || echo '$(srcdir)/'`intrinsics/env.c\n+\n+env.obj: intrinsics/env.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o env.obj `if test -f 'intrinsics/env.c'; then $(CYGPATH_W) 'intrinsics/env.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/env.c'; fi`\n+\n+env.lo: intrinsics/env.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o env.lo `test -f 'intrinsics/env.c' || echo '$(srcdir)/'`intrinsics/env.c\n+\n eoshift0.o: intrinsics/eoshift0.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o eoshift0.o `test -f 'intrinsics/eoshift0.c' || echo '$(srcdir)/'`intrinsics/eoshift0.c\n "}, {"sha": "9898471844ae019d37fa7e2312805a8e79d96643", "filename": "libgfortran/intrinsics/env.c", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2Fintrinsics%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6fc6350836d2dd03becd67b61dcd86eb8f9087/libgfortran%2Fintrinsics%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fenv.c?ref=aa6fc6350836d2dd03becd67b61dcd86eb8f9087", "patch": "@@ -0,0 +1,181 @@\n+/* Implementation of the GETENV g77, and\n+   GET_ENVIRONMENT_VARIABLE F2003, intrinsics. \n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Janne Blomqvist.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include \"libgfortran.h\"\n+\n+\n+/* GETENV (NAME, VALUE), g77 intrinsic for retrieving the value of\n+ an environment variable. The name of the variable is specified in\n+ NAME, and the result is stored into VALUE.  */\n+\n+void \n+prefix(getenv) (char * name, \n+\t\tchar * value, \n+\t\tgfc_strlen_type name_len, \n+\t\tgfc_strlen_type value_len)\n+{\n+\n+  /* Make a null-terminated copy of the name string so that c library\n+     functions work correctly.  This is a C99 VLA, which ought to be\n+     faster than malloc and free.  */\n+\n+  char name_nt[name_len+1];\n+\n+  char *res = NULL;\n+  int res_len;\n+\n+  if (name == NULL || value == NULL)\n+    runtime_error (\"Both arguments to getenv are mandatory.\");\n+\n+  if (value_len < 1 || name_len < 1)\n+    runtime_error (\"Zero length string(s) passed to getenv.\");\n+  else\n+    memset (value, ' ', value_len); /* Blank the string.  */\n+\n+  memcpy (name_nt, name, name_len);\n+  memset (&name_nt[name_len], '\\0', 1); \n+\n+  res = getenv(name_nt);\n+\n+  /* If res is NULL, it means that the environment variable didn't \n+     exist, so just return.  */\n+  if (res == NULL)\n+    return;\n+\n+  res_len = strlen(res);\n+  if (value_len < res_len)\n+    memcpy (value, res, value_len);\n+  else\n+    memcpy (value, res, res_len);\n+}\n+\n+\n+/* GET_ENVIRONMENT_VARIABLE (name, [value, length, status, trim_name])\n+   is a F2003 intrinsic for getting an environment variable.  Note that as\n+   Un*x doesn't consider trailing blanks in environment variables to be\n+   significant, the trim_name argument has no meaning.  */\n+\n+/* Status codes specifyed by the standard. */\n+#define GFC_SUCCESS 0\n+#define GFC_VALUE_TOO_SHORT -1\n+#define GFC_NAME_DOES_NOT_EXIST 1\n+\n+/* This is also specified by the standard and means that the\n+   processor doesn't support environment variables.  At the moment,\n+   gfortran doesn't use it.  */\n+#define GFC_NOT_SUPPORTED 2\n+\n+/* Processor-specific failure code.  */\n+#define GFC_FAILURE 42\n+\n+void\n+prefix(get_environment_variable_i4) \n+  (\n+   char *name,\n+   char *value,\n+   GFC_INTEGER_4 *length,\n+   GFC_INTEGER_4 *status,\n+   GFC_LOGICAL_4 *trim_name,\n+   gfc_strlen_type name_len,\n+   gfc_strlen_type value_len)\n+{\n+  int stat = GFC_SUCCESS, res_len = 0;\n+  char name_nt[name_len+1], *res;\n+\n+  if (name == NULL)\n+    runtime_error (\"Name is required for get_environment_variable.\");\n+\n+  if (value == NULL && length == NULL && status == NULL && trim_name == NULL)\n+    return;\n+\n+  if (name_len < 1)\n+    runtime_error (\"Zero-length string passed as name to \"\n+\t\t   \"get_environment_variable.\");\n+\n+  if (value != NULL)\n+    { \n+      if (value_len < 1)\n+\truntime_error (\"Zero-length string passed as value to \"\n+\t\t       \"get_environment_variable.\");\n+      else\n+\tmemset (value, ' ', value_len); /* Blank the string.  */\n+    }\n+\n+  memcpy (name_nt, name, name_len);\n+  memset (&name_nt[name_len], '\\0', 1); \n+  \n+  res = getenv(name_nt);\n+\n+  if (res == NULL)\n+    stat = GFC_NAME_DOES_NOT_EXIST;\n+  else\n+    {\n+      res_len = strlen(res);\n+      if (value != NULL)\n+\t{\n+\t  if (value_len < res_len)\n+\t    {\n+\t      memcpy (value, res, value_len);\n+\t      stat = GFC_VALUE_TOO_SHORT;\n+\t    }\n+\t  else\n+\t    memcpy (value, res, res_len);\n+\t}\n+    }\n+\n+  if (status != NULL)\n+    *status = stat;\n+\n+  if (length != NULL)\n+    *length = res_len;\n+}\n+\n+\n+/* INTEGER*8 wrapper for get_environment_variable.  */\n+\n+void\n+prefix(get_environment_variable_i8)\n+  (\n+   char *name,\n+   char *value,\n+   GFC_INTEGER_8 *length,\n+   GFC_INTEGER_8 *status,\n+   GFC_LOGICAL_8 *trim_name,\n+   gfc_strlen_type name_len,\n+   gfc_strlen_type value_len)\n+{\n+  GFC_INTEGER_4 length4, status4;\n+  GFC_LOGICAL_4 trim_name4;\n+\n+  prefix (get_environment_variable_i4) (name, value, &length4, &status4, \n+\t\t\t\t\t&trim_name4, name_len, value_len);\n+\n+  if (length)\n+    *length = length4;\n+\n+  if (status)\n+    *status = status4;\n+}"}]}