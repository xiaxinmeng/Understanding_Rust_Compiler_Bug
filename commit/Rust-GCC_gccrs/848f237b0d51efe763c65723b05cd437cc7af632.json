{"sha": "848f237b0d51efe763c65723b05cd437cc7af632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4ZjIzN2IwZDUxZWZlNzYzYzY1NzIzYjA1Y2Q0MzdjYzdhZjYzMg==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-11-18T11:36:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-18T11:36:00Z"}, "message": "re PR c++/40892 (maybe_warn_cpp0x i18n problems)\n\n/cp\n2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\tPR c++/40892\n\t* error.c (maybe_warn_cpp0x): Accept enum cpp0x_warn_str as argument.\n\t(maybe_warn_variadic_templates): Update the maybe_warn_cpp0x calls to\n\tmatch the new declaration.\n\t* cp-tree.h (cpp0x_warn_str): New type.\n\t(maybe_warn_cpp0x): Adjust prototype with new argument.\n\t* call.c (reference_binding): Update the maybe_warn_cpp0x calls.\n\t* decl.c (reshape_init_r, check_initializer, grokdeclarator):\n\tLikewise.\n\t* parser.c (cp_parser_primary_expression)\n\t(cp_parser_parenthesized_expression_list, cp_parser_new_initializer)\n\t(cp_parser_assignment_expression, cp_parser_condition)\n\t(cp_parser_jump_statement, cp_parser_mem_initializer)\n\t(cp_parser_simple_type_specifier, cp_parser_elaborated_type_specifier)\n\t(cp_parser_enum_specifier, cp_parser_initializer)\n\t(cp_parser_pure_specifier, cp_parser_functional_cast): Likewise.\n\n/testsuite\n2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* g++.old-deja/g++.other/crash28.C: Make expected dg-error strings\n\texplicit.\n\t* g++.dg/inherit/error4.C: Likewise.\n\t* g++.dg/template/crash90.C: Likewise.\n\nFrom-SVN: r154288", "tree": {"sha": "7036ec08c88d6e80941c5ee33f0aeb272eecb880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7036ec08c88d6e80941c5ee33f0aeb272eecb880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848f237b0d51efe763c65723b05cd437cc7af632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848f237b0d51efe763c65723b05cd437cc7af632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848f237b0d51efe763c65723b05cd437cc7af632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848f237b0d51efe763c65723b05cd437cc7af632/comments", "author": null, "committer": null, "parents": [{"sha": "7b98c16f7ae55a9e74e93aeadfc7e3c456dd6a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b98c16f7ae55a9e74e93aeadfc7e3c456dd6a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b98c16f7ae55a9e74e93aeadfc7e3c456dd6a01"}], "stats": {"total": 135, "additions": 110, "deletions": 25}, "files": [{"sha": "4e1f46966c36c85e4999798f39405183ee90f975", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -1,3 +1,22 @@\n+2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c++/40892\n+\t* error.c (maybe_warn_cpp0x): Accept enum cpp0x_warn_str as argument.\n+\t(maybe_warn_variadic_templates): Update the maybe_warn_cpp0x calls to\n+\tmatch the new declaration.\n+\t* cp-tree.h (cpp0x_warn_str): New type.\n+\t(maybe_warn_cpp0x): Adjust prototype with new argument.\n+\t* call.c (reference_binding): Update the maybe_warn_cpp0x calls.\n+\t* decl.c (reshape_init_r, check_initializer, grokdeclarator):\n+\tLikewise.\n+\t* parser.c (cp_parser_primary_expression)\n+\t(cp_parser_parenthesized_expression_list, cp_parser_new_initializer)\n+\t(cp_parser_assignment_expression, cp_parser_condition)\n+\t(cp_parser_jump_statement, cp_parser_mem_initializer)\n+\t(cp_parser_simple_type_specifier, cp_parser_elaborated_type_specifier)\n+\t(cp_parser_enum_specifier, cp_parser_initializer)\n+\t(cp_parser_pure_specifier, cp_parser_functional_cast): Likewise.\n+\n 2009-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/3187"}, {"sha": "ca6bd0b74621e8e866d16fb63d68ea9d2389dbdc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -1228,7 +1228,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n \n   if (expr && BRACE_ENCLOSED_INITIALIZER_P (expr))\n     {\n-      maybe_warn_cpp0x (\"extended initializer lists\");\n+      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       conv = implicit_conversion (to, from, expr, c_cast_p,\n \t\t\t\t  flags);\n       if (!CLASS_TYPE_P (to)"}, {"sha": "3aff7ec14e2d76ca42c30cd5ea101f71f09e1c8f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -382,6 +382,28 @@ typedef enum cp_id_kind\n   CP_ID_KIND_QUALIFIED\n } cp_id_kind;\n \n+\n+/* The various kinds of C++0x warnings we encounter. */\n+\n+typedef enum cpp0x_warn_str\n+{\n+  /* extended initializer lists */\n+  CPP0X_INITIALIZER_LISTS,\n+  /* explicit conversion operators */\n+  CPP0X_EXPLICIT_CONVERSION,\n+  /* variadic templates */\n+  CPP0X_VARIADIC_TEMPLATES,\n+  /* lambda expressions */\n+  CPP0X_LAMBDA_EXPR,\n+  /* C++0x auto */\n+  CPP0X_AUTO,\n+  /* scoped enums */\n+  CPP0X_SCOPED_ENUMS,\n+  /* defaulted and deleted functions */\n+  CPP0X_DEFAULTED_DELETED\n+} cpp0x_warn_str;\n+  \n+\n /* Macros for access to language-specific slots in an identifier.  */\n \n #define IDENTIFIER_NAMESPACE_BINDINGS(NODE)\t\\\n@@ -4672,7 +4694,7 @@ extern const char *language_to_string\t\t(enum languages);\n extern const char *class_key_or_enum_as_string\t(tree);\n extern void print_instantiation_context\t\t(void);\n extern void maybe_warn_variadic_templates       (void);\n-extern void maybe_warn_cpp0x\t\t\t(const char *);\n+extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_CXXDIAG(3,4);\n \n /* in except.c */"}, {"sha": "599b39a9728ad8ec033fde1a0ed3d3531c12df27", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -4929,7 +4929,7 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n \t      init = error_mark_node;\n \t    }\n \t  else\n-\t    maybe_warn_cpp0x (\"extended initializer lists\");\n+\t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t}\n \n       d->cur++;\n@@ -5173,7 +5173,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t{\n \t  if (init_len == 0)\n \t    {\n-\t      maybe_warn_cpp0x (\"extended initializer lists\");\n+\t      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t      init = build_zero_init (type, NULL_TREE, false);\n \t    }\n \t  else if (init_len != 1)\n@@ -8526,7 +8526,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\tif (explicitp == 1)\n \t\t  {\n-\t\t    maybe_warn_cpp0x (\"explicit conversion operators\");\n+\t\t    maybe_warn_cpp0x (CPP0X_EXPLICIT_CONVERSION);\n \t\t    explicitp = 2;\n \t\t  }\n \t      }"}, {"sha": "a424299627e5518a99fd4beac9350621865be457", "filename": "gcc/cp/error.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -2885,20 +2885,57 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n \f\n /* Warn about the use of C++0x features when appropriate.  */\n void\n-maybe_warn_cpp0x (const char* str)\n+maybe_warn_cpp0x (cpp0x_warn_str str)\n {\n   if ((cxx_dialect == cxx98) && !in_system_header)\n     /* We really want to suppress this warning in system headers,\n        because libstdc++ uses variadic templates even when we aren't\n        in C++0x mode. */\n-    pedwarn (input_location, 0, \"%s only available with -std=c++0x or -std=gnu++0x\", str);\n+    switch (str)\n+      {\n+      case CPP0X_INITIALIZER_LISTS:\n+\tpedwarn (input_location, 0, \n+\t\t \"extended initializer lists \"\n+\t\t \"only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\n+      case CPP0X_EXPLICIT_CONVERSION:\n+\tpedwarn (input_location, 0,\n+\t\t \"explicit conversion operators \"\n+\t\t \"only available with -std=c++0x or -std=gnu++0x\"); \n+\tbreak;\n+      case CPP0X_VARIADIC_TEMPLATES:\n+\tpedwarn (input_location, 0,\n+\t\t \"variadic templates \"\n+\t\t \"only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\n+      case CPP0X_LAMBDA_EXPR:\n+\tpedwarn (input_location, 0,\n+\t\t \"lambda expressions \"\n+\t\t  \"only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\n+      case CPP0X_AUTO:\n+\tpedwarn (input_location, 0,\n+\t\t \"C++0x auto only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\n+      case CPP0X_SCOPED_ENUMS:\n+\tpedwarn (input_location, 0,\n+\t\t \"scoped enums only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\n+      case CPP0X_DEFAULTED_DELETED:\n+\tpedwarn (input_location, 0,\n+\t\t \"defaulted and deleted functions \"\n+\t\t \"only available with -std=c++0x or -std=gnu++0x\");\n+\tbreak;\t\n+      default:\n+\tgcc_unreachable();\n+      }\n }\n \n /* Warn about the use of variadic templates when appropriate.  */\n void\n maybe_warn_variadic_templates (void)\n {\n-  maybe_warn_cpp0x (\"variadic templates\");\n+  maybe_warn_cpp0x (CPP0X_VARIADIC_TEMPLATES);\n }\n \n "}, {"sha": "284d167003395de900c9b5ae3edded1a492cfafb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -3329,7 +3329,7 @@ cp_parser_primary_expression (cp_parser *parser,\n       if (c_dialect_objc ())\n         /* We have an Objective-C++ message. */\n         return cp_parser_objc_expression (parser);\n-      maybe_warn_cpp0x (\"lambda expressions\");\n+      maybe_warn_cpp0x (CPP0X_LAMBDA_EXPR);\n       return cp_parser_lambda_expression (parser);\n \n     case CPP_OBJC_STRING:\n@@ -5275,7 +5275,7 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t    if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t      {\n \t\t/* A braced-init-list.  */\n-\t\tmaybe_warn_cpp0x (\"extended initializer lists\");\n+\t\tmaybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t\texpr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t\tif (non_constant_p && expr_non_constant_p)\n \t\t  *non_constant_p = true;\n@@ -5992,7 +5992,7 @@ cp_parser_new_initializer (cp_parser* parser)\n     {\n       tree t;\n       bool expr_non_constant_p;\n-      maybe_warn_cpp0x (\"extended initializer lists\");\n+      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       t = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (t) = 1;\n       expression_list = make_tree_vector_single (t);\n@@ -6553,7 +6553,7 @@ cp_parser_assignment_expression (cp_parser* parser, bool cast_p,\n \t      tree rhs = cp_parser_initializer_clause (parser, &non_constant_p);\n \n \t      if (BRACE_ENCLOSED_INITIALIZER_P (rhs))\n-\t\tmaybe_warn_cpp0x (\"extended initializer lists\");\n+\t\tmaybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \n \t      /* An assignment may not appear in a\n \t\t constant-expression.  */\n@@ -8143,7 +8143,7 @@ cp_parser_condition (cp_parser* parser)\n \t      initializer = cp_parser_initializer_clause (parser, &non_constant_p);\n \t    }\n \t  if (BRACE_ENCLOSED_INITIALIZER_P (initializer))\n-\t    maybe_warn_cpp0x (\"extended initializer lists\");\n+\t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \n \t  if (!non_constant_p)\n \t    initializer = fold_non_dependent_expr (initializer);\n@@ -8407,7 +8407,7 @@ cp_parser_jump_statement (cp_parser* parser)\n \n \tif (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t  {\n-\t    maybe_warn_cpp0x (\"extended initializer lists\");\n+\t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t    expr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t  }\n \telse if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n@@ -9922,7 +9922,7 @@ cp_parser_mem_initializer (cp_parser* parser)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n       bool expr_non_constant_p;\n-      maybe_warn_cpp0x (\"extended initializer lists\");\n+      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;\n       expression_list = build_tree_list (NULL_TREE, expression_list);\n@@ -11933,7 +11933,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       break;\n       \n     case RID_AUTO:\n-      maybe_warn_cpp0x (\"C++0x auto\");\n+      maybe_warn_cpp0x (CPP0X_AUTO);\n       type = make_auto ();\n       break;\n \n@@ -12240,7 +12240,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n           || cp_lexer_next_token_is_keyword (parser->lexer, RID_STRUCT))\n         {\n           if (cxx_dialect == cxx98)\n-            maybe_warn_cpp0x (\"scoped enums\");\n+            maybe_warn_cpp0x (CPP0X_SCOPED_ENUMS);\n \n           /* Consume the `struct' or `class'.  */\n           cp_lexer_consume_token (parser->lexer);\n@@ -12577,7 +12577,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n       || cp_lexer_next_token_is_keyword (parser->lexer, RID_STRUCT))\n     {\n       if (cxx_dialect == cxx98)\n-        maybe_warn_cpp0x (\"scoped enums\");\n+        maybe_warn_cpp0x (CPP0X_SCOPED_ENUMS);\n \n       /* Consume the `struct' or `class' token.  */\n       cp_lexer_consume_token (parser->lexer);\n@@ -12611,7 +12611,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n \treturn NULL_TREE;\n \n       if (cxx_dialect == cxx98)\n-        maybe_warn_cpp0x (\"scoped enums\");\n+        maybe_warn_cpp0x (CPP0X_SCOPED_ENUMS);\n \n       has_underlying_type = true;\n \n@@ -15425,7 +15425,7 @@ cp_parser_initializer (cp_parser* parser, bool* is_direct_init,\n     }\n   else if (token->type == CPP_OPEN_BRACE)\n     {\n-      maybe_warn_cpp0x (\"extended initializer lists\");\n+      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       init = cp_parser_braced_list (parser, non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (init) = 1;\n     }\n@@ -16895,7 +16895,7 @@ cp_parser_pure_specifier (cp_parser* parser)\n   if (token->keyword == RID_DEFAULT\n       || token->keyword == RID_DELETE)\n     {\n-      maybe_warn_cpp0x (\"defaulted and deleted functions\");\n+      maybe_warn_cpp0x (CPP0X_DEFAULTED_DELETED);\n       return token->u.value;\n     }\n \n@@ -18895,7 +18895,7 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n-      maybe_warn_cpp0x (\"extended initializer lists\");\n+      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &nonconst_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;\n       if (TREE_CODE (type) == TYPE_DECL)"}, {"sha": "01961823f9e4363c0b03b2a9058cdab392cc90fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -1,3 +1,10 @@\n+2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* g++.old-deja/g++.other/crash28.C: Make expected dg-error strings\n+\texplicit.\n+\t* g++.dg/inherit/error4.C: Likewise.\n+\t* g++.dg/template/crash90.C: Likewise.\n+\n 2009-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/3187"}, {"sha": "4f6866ed8eed381185a989ff6c6137468cc38843", "filename": "gcc/testsuite/g++.dg/inherit/error4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror4.C?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -2,7 +2,7 @@\n \n struct A { virtual ~A(); };\n \n-struct B : A A {};\t\t// { dg-error \"\" }\n+struct B : A A {};\t\t// { dg-error \"expected|initializer|invalid\" }\n \n A foo(const B &b)\t\t// { dg-error \"\" }\n {"}, {"sha": "6fe247cc30df0697079f0b4fdd85ac7863279a86", "filename": "gcc/testsuite/g++.dg/template/crash90.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -4,5 +4,5 @@ template < unsigned >\n struct A ;\n template < typename >\n struct B ;\n-template < typename T , A < B < T > // { dg-error \"\" }\n+template < typename T , A < B < T > // { dg-error \"initializer|parse error|valid type|expected\" }\n { }"}, {"sha": "59f1e844eeab50be2d893ac43a7e35536d073943", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848f237b0d51efe763c65723b05cd437cc7af632/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash28.C?ref=848f237b0d51efe763c65723b05cd437cc7af632", "patch": "@@ -31,5 +31,5 @@ public:\n };\n void foo::x() throw(bar)\n {\n-  if (!b) throw bar (static_cast<::N::X*>(this));\t// { dg-error \"\" } parse error\n+  if (!b) throw bar (static_cast<::N::X*>(this));\t// { dg-error \"lambda expressions|expected\" } parse error\n }"}]}