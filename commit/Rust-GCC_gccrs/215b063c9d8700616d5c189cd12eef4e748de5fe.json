{"sha": "215b063c9d8700616d5c189cd12eef4e748de5fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE1YjA2M2M5ZDg3MDA2MTZkNWMxODljZDEyZWVmNGU3NDhkZTVmZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-10-16T09:13:47Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2007-10-16T09:13:47Z"}, "message": "target.h (unspec_may_trap_p): New target hook.\n\n2007-10-16  Paolo Bonzini  <bonzini@gnu.org>\n\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n\n\t* target.h (unspec_may_trap_p): New target hook.\n\t* target-def.h (TARGET_UNSPEC_MAY_TRAP_P): New macro.\n\t* targhooks.c (default_unspec_may_trap_p): Default implementation of\n\tthe hook.\n\t* targhooks.h (default_unspec_may_trap_p): Declare it.\n\t* doc/tm.texi (TARGET_UNSPEC_MAY_TRAP_P): Document new hook.\n\t* rtlanal.c (may_trap_p_1): Use new hook.  Make global.\n\t* rtl.h (may_trap_p_1): Declare.\n\t\n\t* config/ia64/ia64.c (ia64_unspec_may_trap_p): New function to\n\toverride default hook implementation.\n\t(TARGET_UNSPEC_MAY_TRAP_P): Override default implementation of the\n\thook.\n\t\n\t* gcc.target/ia64/20040709-2.c: New test.\n\nCo-Authored-By: Maxim Kuvyrkov <maxim@codesourcery.com>\n\nFrom-SVN: r129378", "tree": {"sha": "f33444e9bf6a5e0115d66e6ac3261973224f32ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f33444e9bf6a5e0115d66e6ac3261973224f32ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/215b063c9d8700616d5c189cd12eef4e748de5fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215b063c9d8700616d5c189cd12eef4e748de5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215b063c9d8700616d5c189cd12eef4e748de5fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215b063c9d8700616d5c189cd12eef4e748de5fe/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50f2fe3ad42ccf45a62d3bc899f55d5c068891ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f2fe3ad42ccf45a62d3bc899f55d5c068891ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f2fe3ad42ccf45a62d3bc899f55d5c068891ac"}], "stats": {"total": 246, "additions": 244, "deletions": 2}, "files": [{"sha": "b8f4984406cfdc36e5693bdc9a344369774ac7d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -1,3 +1,20 @@\n+2007-10-16  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* target.h (unspec_may_trap_p): New target hook.\n+\t* target-def.h (TARGET_UNSPEC_MAY_TRAP_P): New macro.\n+\t* targhooks.c (default_unspec_may_trap_p): Default implementation of\n+\tthe hook.\n+\t* targhooks.h (default_unspec_may_trap_p): Declare it.\n+\t* doc/tm.texi (TARGET_UNSPEC_MAY_TRAP_P): Document new hook.\n+\t* rtlanal.c (may_trap_p_1): Use new hook.  Make global.\n+\t* rtl.h (may_trap_p_1): Declare.\n+\t\n+\t* config/ia64/ia64.c (ia64_unspec_may_trap_p): New function to\n+\toverride default hook implementation.\n+\t(TARGET_UNSPEC_MAY_TRAP_P): Override default implementation of the\n+\thook.\n+\n 2007-10-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (Wextra): Move it just after Wall, list the"}, {"sha": "537f9f014a31e8dfcf3cb3eb442e8d39ad369bc5", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -203,6 +203,7 @@ static int ia64_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n static bool ia64_function_ok_for_sibcall (tree, tree);\n static bool ia64_return_in_memory (const_tree, const_tree);\n static bool ia64_rtx_costs (rtx, int, int, int *);\n+static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n static bool ia64_handle_option (size_t, const char *, int);\n static struct machine_function * ia64_init_machine_status (void);\n@@ -409,6 +410,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+#undef TARGET_UNSPEC_MAY_TRAP_P\n+#define TARGET_UNSPEC_MAY_TRAP_P ia64_unspec_may_trap_p\n+\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG ia64_reorg\n \n@@ -5072,6 +5076,29 @@ ia64_secondary_reload_class (enum reg_class class,\n   return NO_REGS;\n }\n \n+\f\n+/* Implement targetm.unspec_may_trap_p hook.  */\n+static int\n+ia64_unspec_may_trap_p (const_rtx x, unsigned flags)\n+{\n+  if (GET_CODE (x) == UNSPEC)\n+    {\n+      switch (XINT (x, 1))\n+\t{\n+\tcase UNSPEC_LDA:\n+\tcase UNSPEC_LDS:\n+\tcase UNSPEC_LDSA:\n+\tcase UNSPEC_LDCCLR:\n+\tcase UNSPEC_CHKACLR:\n+\tcase UNSPEC_CHKS:\n+\t  /* These unspecs are just wrappers.  */\n+\t  return may_trap_p_1 (XVECEXP (x, 0, 0), flags);\n+\t}\n+    }\n+\n+  return default_unspec_may_trap_p (x, flags);\n+}\n+\n \f\n /* Parse the -mfixed-range= option string.  */\n "}, {"sha": "074fba2821cdb34d40590a893384a1f1d9744929", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -10151,6 +10151,15 @@ The default value of this hook is @code{NULL}, which disables any special\n allocation.\n @end deftypefn\n \n+@deftypefn {Target Hook} int TARGET_UNSPEC_MAY_TRAP_P (const_rtx @var{x}, unsigned @var{flags})\n+This target hook returns nonzero if @var{x}, an @code{unspec} or\n+@code{unspec_volatile} operation, might cause a trap.  Targets can use\n+this hook to enhance precision of analysis for @code{unspec} and\n+@code{unspec_volatile} operations.  You may call @code{may_trap_p_1}\n+to analyze inner elements of @var{x} in which case @var{flags} should be\n+passed along.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_SET_CURRENT_FUNCTION (tree @var{decl})\n The compiler invokes this hook whenever it changes its current function \n context (@code{cfun}).  You can define this function if"}, {"sha": "b65be8c613c736f2a8e406b61c105919965527f7", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -1739,6 +1739,7 @@ extern void remove_reg_equal_equiv_notes (rtx);\n extern int side_effects_p (const_rtx);\n extern int volatile_refs_p (const_rtx);\n extern int volatile_insn_p (const_rtx);\n+extern int may_trap_p_1 (const_rtx, unsigned);\n extern int may_trap_p (const_rtx);\n extern int may_trap_after_code_motion_p (const_rtx);\n extern int may_trap_or_fault_p (const_rtx);"}, {"sha": "0e0f7e3dfbbfd740f4b1bcaf77b56fac16451571", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -2182,7 +2182,7 @@ enum may_trap_p_flags\n    cannot trap at its current location, but it might become trapping if moved\n    elsewhere.  */\n \n-static int\n+int\n may_trap_p_1 (const_rtx x, unsigned flags)\n {\n   int i;\n@@ -2209,8 +2209,11 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n     case SCRATCH:\n       return 0;\n \n-    case ASM_INPUT:\n+    case UNSPEC:\n     case UNSPEC_VOLATILE:\n+      return targetm.unspec_may_trap_p (x, flags);\n+\n+    case ASM_INPUT:\n     case TRAP_IF:\n       return 1;\n "}, {"sha": "c2f7d3f2ff3a40fe0c4f3e219116248205f646c7", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -480,6 +480,8 @@\n #define TARGET_MANGLE_TYPE hook_constcharptr_const_tree_null\n #define TARGET_ALLOCATE_INITIAL_VALUE NULL\n \n+#define TARGET_UNSPEC_MAY_TRAP_P default_unspec_may_trap_p\n+\n #ifndef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION hook_void_tree\n #endif\n@@ -741,6 +743,7 @@\n   TARGET_RTX_COSTS,\t\t\t\t\\\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_ALLOCATE_INITIAL_VALUE,\t\t\\\n+  TARGET_UNSPEC_MAY_TRAP_P,                     \\\n   TARGET_DWARF_REGISTER_SPAN,                   \\\n   TARGET_INIT_DWARF_REG_SIZES_EXTRA,\t\t\\\n   TARGET_FIXED_CONDITION_CODE_REGS,\t\t\\"}, {"sha": "27f5d5e795588b2195a0408ff5d73809ef560c2c", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -652,6 +652,10 @@ struct gcc_target\n      value.  */\n   rtx (* allocate_initial_value) (rtx x);\n \n+  /* Return nonzero if evaluating UNSPEC[_VOLATILE] X might cause a trap.\n+     FLAGS has the same meaning as in rtlanal.c: may_trap_p_1.  */\n+  int (* unspec_may_trap_p) (const_rtx x, unsigned flags);\n+\n   /* Given a register, this hook should return a parallel of registers\n      to represent where to find the register pieces.  Define this hook\n      if the register and its mode are represented in Dwarf in"}, {"sha": "bfd1905e1d33bbd9ef6785c4c287f633c36634d9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -75,6 +75,26 @@ default_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n #endif\n }\n \n+int\n+default_unspec_may_trap_p (const_rtx x, unsigned flags)\n+{\n+  int i;\n+\n+  if (GET_CODE (x) == UNSPEC_VOLATILE\n+      /* Any floating arithmetic may trap.  */\n+      || (SCALAR_FLOAT_MODE_P (GET_MODE (x))\n+\t  && flag_trapping_math))\n+    return 1;\n+\n+  for (i = 0; i < XVECLEN (x, 0); ++i)\n+    {\n+      if (may_trap_p_1 (XVECEXP (x, 0, i), flags))\n+\treturn 1;\n+    }\n+\n+  return 0;\n+}\n+\n enum machine_mode\n default_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n {"}, {"sha": "5576f9804c3ce31223c0cf5c10ba6a76adacbf33", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -19,6 +19,8 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void default_external_libcall (rtx);\n \n+extern int default_unspec_may_trap_p (const_rtx, unsigned);\n+\n extern enum machine_mode default_cc_modes_compatible (enum machine_mode,\n \t\t\t\t\t\t      enum machine_mode);\n "}, {"sha": "a9157cacb0325576776a14c2771d97265763435f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -1,3 +1,8 @@\n+2007-10-15  Paolo Bonzini  <bonzini@gnu.org>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcc.target/ia64/20040709-2.c: New test.\n+\n 2007-10-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/gamma_5.f90: xfail on FreeBSD"}, {"sha": "585ab06f00e0013cd983ee7baaf9cdfedb63ad9b", "filename": "gcc/testsuite/gcc.target/ia64/20040709-2.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20040709-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215b063c9d8700616d5c189cd12eef4e748de5fe/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20040709-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20040709-2.c?ref=215b063c9d8700616d5c189cd12eef4e748de5fe", "patch": "@@ -0,0 +1,151 @@\n+/* Check for ia64 data speculation failure with '-O2 -funroll-loops'.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funroll-loops -Wno-overflow\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+unsigned int\n+myrnd (void)\n+{\n+  static unsigned int s = 1388815473;\n+  s *= 1103515245;\n+  s += 12345;\n+  return (s / 65536) % 2048;\n+}\n+\n+#define T(S)\t\t\t\t\t\\\n+struct S s##S;\t\t\t\t\t\\\n+struct S retme##S (struct S x)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return x;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+unsigned int fn1##S (unsigned int x)\t\t\\\n+{\t\t\t\t\t\t\\\n+  struct S y = s##S;\t\t\t\t\\\n+  y.k += x;\t\t\t\t\t\\\n+  y = retme##S (y);\t\t\t\t\\\n+  return y.k;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+unsigned int fn2##S (unsigned int x)\t\t\\\n+{\t\t\t\t\t\t\\\n+  struct S y = s##S;\t\t\t\t\\\n+  y.k += x;\t\t\t\t\t\\\n+  y.k %= 15;\t\t\t\t\t\\\n+  return y.k;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+unsigned int retit##S (void)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return s##S.k;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+unsigned int fn3##S (unsigned int x)\t\t\\\n+{\t\t\t\t\t\t\\\n+  s##S.k += x;\t\t\t\t\t\\\n+  return retit##S ();\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void test##S (void)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\\\n+  unsigned int mask, v, a, r;\t\t\t\\\n+  struct S x;\t\t\t\t\t\\\n+  char *p = (char *) &s##S;\t\t\t\\\n+  for (i = 0; i < sizeof (s##S); ++i)\t\t\\\n+    *p++ = myrnd ();\t\t\t\t\\\n+  if (__builtin_classify_type (s##S.l) == 8)\t\\\n+    s##S.l = 5.25;\t\t\t\t\\\n+  s##S.k = -1;\t\t\t\t\t\\\n+  mask = s##S.k;\t\t\t\t\\\n+  v = myrnd ();\t\t\t\t\t\\\n+  a = myrnd ();\t\t\t\t\t\\\n+  s##S.k = v;\t\t\t\t\t\\\n+  x = s##S;\t\t\t\t\t\\\n+  r = fn1##S (a);\t\t\t\t\\\n+  if (x.i != s##S.i || x.j != s##S.j\t\t\\\n+      || x.k != s##S.k || x.l != s##S.l\t\t\\\n+      || ((v + a) & mask) != r)\t\t\t\\\n+    abort ();\t\t\t\t\t\\\n+  v = myrnd ();\t\t\t\t\t\\\n+  a = myrnd ();\t\t\t\t\t\\\n+  s##S.k = v;\t\t\t\t\t\\\n+  x = s##S;\t\t\t\t\t\\\n+  r = fn2##S (a);\t\t\t\t\\\n+  if (x.i != s##S.i || x.j != s##S.j\t\t\\\n+      || x.k != s##S.k || x.l != s##S.l\t\t\\\n+      || ((((v + a) & mask) % 15) & mask) != r)\t\\\n+    abort ();\t\t\t\t\t\\\n+  v = myrnd ();\t\t\t\t\t\\\n+  a = myrnd ();\t\t\t\t\t\\\n+  s##S.k = v;\t\t\t\t\t\\\n+  x = s##S;\t\t\t\t\t\\\n+  r = fn3##S (a);\t\t\t\t\\\n+  if (x.i != s##S.i || x.j != s##S.j\t\t\\\n+      || s##S.k != r || x.l != s##S.l\t\t\\\n+      || ((v + a) & mask) != r)\t\t\t\\\n+    abort ();\t\t\t\t\t\\\n+}\n+\n+#define pck __attribute__((packed))\n+struct pck A { unsigned short i : 1, l : 1, j : 3, k : 11; }; T(A)\n+struct pck B { unsigned short i : 4, j : 1, k : 11; unsigned int l; }; T(B)\n+struct pck C { unsigned int l; unsigned short i : 4, j : 1, k : 11; }; T(C)\n+struct pck D { unsigned long long l : 6, i : 6, j : 23, k : 29; }; T(D)\n+struct pck E { unsigned long long l, i : 12, j : 23, k : 29; }; T(E)\n+struct pck F { unsigned long long i : 12, j : 23, k : 29, l; }; T(F)\n+struct pck G { unsigned short i : 1, j : 1, k : 6; unsigned long long l; }; T(G)\n+struct pck H { unsigned short i : 6, j : 2, k : 8; unsigned long long l; }; T(H)\n+struct pck I { unsigned short i : 1, j : 6, k : 1; unsigned long long l; }; T(I)\n+struct pck J { unsigned short i : 1, j : 8, k : 7; unsigned short l; }; T(J)\n+struct pck K { unsigned int k : 6, l : 1, j : 10, i : 15; }; T(K)\n+struct pck L { unsigned int k : 6, j : 11, i : 15; unsigned int l; }; T(L)\n+struct pck M { unsigned int l; unsigned short k : 6, j : 11, i : 15; }; T(M)\n+struct pck N { unsigned long long l : 6, k : 6, j : 23, i : 29; }; T(N)\n+struct pck O { unsigned long long l, k : 12, j : 23, i : 29; }; T(O)\n+struct pck P { unsigned long long k : 12, j : 23, i : 29, l; }; T(P)\n+struct pck Q { unsigned short k : 12, j : 1, i : 3; unsigned long long l; }; T(Q)\n+struct pck R { unsigned short k : 2, j : 11, i : 3; unsigned long long l; }; T(R)\n+struct pck S { unsigned short k : 1, j : 6, i : 9; unsigned long long l; }; T(S)\n+struct pck T { unsigned short k : 1, j : 8, i : 7; unsigned short l; }; T(T)\n+struct pck U { unsigned short j : 6, k : 1, i : 9; unsigned long long l; }; T(U)\n+struct pck V { unsigned short j : 8, k : 1, i : 7; unsigned short l; }; T(V)\n+struct pck W { long double l; unsigned int k : 12, j : 13, i : 7; }; T(W)\n+struct pck X { unsigned int k : 12, j : 13, i : 7; long double l; }; T(X)\n+struct pck Y { unsigned int k : 12, j : 11, i : 9; long double l; }; T(Y)\n+struct pck Z { long double l; unsigned int j : 13, i : 7, k : 12; }; T(Z)\n+\n+int\n+main (void)\n+{\n+  testA ();\n+  testB ();\n+  testC ();\n+  testD ();\n+  testE ();\n+  testF ();\n+  testG ();\n+  testH ();\n+  testI ();\n+  testJ ();\n+  testK ();\n+  testL ();\n+  testM ();\n+  testN ();\n+  testO ();\n+  testP ();\n+  testQ ();\n+  testR ();\n+  testS ();\n+  testT ();\n+  testU ();\n+  testV ();\n+  testW ();\n+  testX ();\n+  testY ();\n+  testZ ();\n+  exit (0);\n+}"}]}