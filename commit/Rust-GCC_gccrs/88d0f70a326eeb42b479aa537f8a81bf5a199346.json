{"sha": "88d0f70a326eeb42b479aa537f8a81bf5a199346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkMGY3MGEzMjZlZWI0MmI0NzlhYTUzN2Y4YTgxYmY1YTE5OTM0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-28T08:52:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-28T08:52:51Z"}, "message": "i386: Improve AVX2 expansion of vector >> vector DImode arithm. shifts [PR101611]\n\nAVX2 introduced vector >> vector shifts, but unfortunately for V{2,4}DImode\nit only supports logical and not arithmetic shifts, only AVX512F for\nV8DImode or AVX512VL for V{2,4}DImode fixed that omission.\nEarlier in GCC12 cycle I've committed vector >> scalar arithmetic shift\nemulation using various sequences, this patch handles the vector >> vector\ncase.  No need to adjust costs, the previous cost adjustment actually\ncovers even the vector by vector shifts.\nThe patch emits the right arithmetic V{2,4}DImode shifts using 2 logical right\nV{2,4}DImode shifts (once of the original operands, once of sign mask\nconstant by the vector shift count), xor and subtraction, on each element\n(long long) x >> y is done as\n(((unsigned long long) x >> y) ^ (0x8000000000000000ULL >> y))\n- (0x8000000000000000ULL >> y)\ni.e. if x doesn't have in some element the MSB set, it is just the logical\nshift, if it does, then the xor and subtraction cause also all higher bits\nto be set.\n\n2021-07-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/101611\n\t* config/i386/sse.md (vashr<mode>3): Split into vashrv8di3 expander\n\tand vashrv4di3 expander, where the latter requires just TARGET_AVX2\n\tand has special !TARGET_AVX512VL expansion.\n\t(vashrv2di3<mask_name>): Rename to ...\n\t(vashrv2di3): ... this.  Change condition to TARGET_XOP || TARGET_AVX2\n\tand add special !TARGET_XOP && !TARGET_AVX512VL expansion.\n\n\t* gcc.target/i386/avx2-pr101611-1.c: New test.\n\t* gcc.target/i386/avx2-pr101611-2.c: New test.", "tree": {"sha": "4e8f8d05dd96cc2aac695286be821f8ea642e025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e8f8d05dd96cc2aac695286be821f8ea642e025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d0f70a326eeb42b479aa537f8a81bf5a199346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d0f70a326eeb42b479aa537f8a81bf5a199346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d0f70a326eeb42b479aa537f8a81bf5a199346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d0f70a326eeb42b479aa537f8a81bf5a199346/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af0c50a29346f97a370f76bd881ccb4252b1e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af0c50a29346f97a370f76bd881ccb4252b1e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af0c50a29346f97a370f76bd881ccb4252b1e4d"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "b5a08988590123879ee48152876f49298f3e909b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=88d0f70a326eeb42b479aa537f8a81bf5a199346", "patch": "@@ -20499,13 +20499,34 @@\n \t  (match_operand:VI48_256 2 \"nonimmediate_operand\")))]\n   \"TARGET_AVX2\")\n \n-(define_expand \"vashr<mode>3\"\n-  [(set (match_operand:VI8_256_512 0 \"register_operand\")\n-\t(ashiftrt:VI8_256_512\n-\t  (match_operand:VI8_256_512 1 \"register_operand\")\n-\t  (match_operand:VI8_256_512 2 \"nonimmediate_operand\")))]\n+(define_expand \"vashrv8di3\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+\t(ashiftrt:V8DI\n+\t  (match_operand:V8DI 1 \"register_operand\")\n+\t  (match_operand:V8DI 2 \"nonimmediate_operand\")))]\n   \"TARGET_AVX512F\")\n \n+(define_expand \"vashrv4di3\"\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n+\t(ashiftrt:V4DI\n+\t  (match_operand:V4DI 1 \"register_operand\")\n+\t  (match_operand:V4DI 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\"\n+{\n+  if (!TARGET_AVX512VL)\n+    {\n+      rtx mask = ix86_build_signbit_mask (V4DImode, 1, 0);\n+      rtx t1 = gen_reg_rtx (V4DImode);\n+      rtx t2 = gen_reg_rtx (V4DImode);\n+      rtx t3 = gen_reg_rtx (V4DImode);\n+      emit_insn (gen_vlshrv4di3 (t1, operands[1], operands[2]));\n+      emit_insn (gen_vlshrv4di3 (t2, mask, operands[2]));\n+      emit_insn (gen_xorv4di3 (t3, t1, t2));\n+      emit_insn (gen_subv4di3 (operands[0], t3, t2));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"vashr<mode>3\"\n   [(set (match_operand:VI12_128 0 \"register_operand\")\n \t(ashiftrt:VI12_128\n@@ -20527,12 +20548,12 @@\n     }\n })\n \n-(define_expand \"vashrv2di3<mask_name>\"\n+(define_expand \"vashrv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(ashiftrt:V2DI\n \t  (match_operand:V2DI 1 \"register_operand\")\n \t  (match_operand:V2DI 2 \"nonimmediate_operand\")))]\n-  \"TARGET_XOP || TARGET_AVX512VL\"\n+  \"TARGET_XOP || TARGET_AVX2\"\n {\n   if (TARGET_XOP)\n     {\n@@ -20541,6 +20562,18 @@\n       emit_insn (gen_xop_shav2di3 (operands[0], operands[1], neg));\n       DONE;\n     }\n+  if (!TARGET_AVX512VL)\n+    {\n+      rtx mask = ix86_build_signbit_mask (V2DImode, 1, 0);\n+      rtx t1 = gen_reg_rtx (V2DImode);\n+      rtx t2 = gen_reg_rtx (V2DImode);\n+      rtx t3 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_vlshrv2di3 (t1, operands[1], operands[2]));\n+      emit_insn (gen_vlshrv2di3 (t2, mask, operands[2]));\n+      emit_insn (gen_xorv2di3 (t3, t1, t2));\n+      emit_insn (gen_subv2di3 (operands[0], t3, t2));\n+      DONE;\n+    }\n })\n \n (define_expand \"vashrv4si3\""}, {"sha": "9fc780218f274f98f77946ab936e46a50ca099f9", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr101611-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-1.c?ref=88d0f70a326eeb42b479aa537f8a81bf5a199346", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/101611 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-times {\\mvpsrlvq\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvpxor\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvpsubq\\M} 2 } } */\n+\n+typedef long long V __attribute__((vector_size(32)));\n+typedef long long W __attribute__((vector_size(16)));\n+\n+V foo (V a, V b) { return a >> b; }\n+W bar (W a, W b) { return a >> b; }"}, {"sha": "14bc7cdadc207f1dc403b597e2598acaec75f892", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr101611-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d0f70a326eeb42b479aa537f8a81bf5a199346/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr101611-2.c?ref=88d0f70a326eeb42b479aa537f8a81bf5a199346", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/101611 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx2 -mno-avx512f\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+typedef long long V __attribute__((vector_size(32)));\n+typedef long long W __attribute__((vector_size(16)));\n+\n+__attribute__((noipa)) V\n+foo (V a, V b)\n+{\n+  return a >> b;\n+}\n+\n+__attribute__((noipa)) W\n+bar (W a, W b)\n+{\n+  return a >> b;\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  V a = { 0x7f123456789abcdeLL, -0x30edcba987654322LL,\n+\t  -0x30edcba987654322LL, 0x7f123456789abcdeLL };\n+  V b = { 17, 11, 23, 0 };\n+  V c = foo (a, b);\n+  if (c[0] != 0x3f891a2b3c4dLL\n+      || c[1] != -0x61db97530eca9LL\n+      || c[2] != -0x61db97530fLL\n+      || c[3] != 0x7f123456789abcdeLL)\n+    abort ();\n+  W d = { 0x7f123456789abcdeLL, -0x30edcba987654322LL };\n+  W e = { 45, 27 };\n+  W f = bar (d, e);\n+  if (f[0] != 0x3f891LL\n+      || f[1] != -0x61db97531LL)\n+    abort ();\n+}"}]}