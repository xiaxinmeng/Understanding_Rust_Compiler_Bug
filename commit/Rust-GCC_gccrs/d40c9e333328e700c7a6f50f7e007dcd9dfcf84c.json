{"sha": "d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwYzllMzMzMzI4ZTcwMGM3YTZmNTBmN2UwMDdkY2Q5ZGZjZjg0Yw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2008-08-08T21:40:18Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2008-08-08T21:40:18Z"}, "message": "invoke.texi: Add cpu_type power7.\n\n2008-08-08  Peter Bergner  <bergner@vnet.ibm.com>\n\n        * doc/invoke.texi: Add cpu_type power7.\n        * config.in (HAVE_AS_VSX): New.\n        * config.gcc: Add cpu_type power7.\n        * configure.ac (HAVE_AS_VSX): Check for assembler support of the\n        VSX instructions.\n        * configure: Regenerate.\n        * config/rs6000/rs6000.c (rs6000_override_options): Alias power7 to\n        power5.\n        * config/rs6000/rs6000.h (ASM_CPU_POWER7_SPEC): Define.\n        (ASM_CPU_SPEC): Pass %(asm_cpu_power7) for -mcpu=power7.\n        (EXTRA_SPECS): Add asm_cpu_power7 spec string.\n\nFrom-SVN: r138887", "tree": {"sha": "766701be8c066b954001791b8c9f965f6a6a1e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766701be8c066b954001791b8c9f965f6a6a1e4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76871f0f310eb6e7fec812d33884be46a5da6833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76871f0f310eb6e7fec812d33884be46a5da6833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76871f0f310eb6e7fec812d33884be46a5da6833"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "ed2707a7923e225df8c51f1a10d5f46dcb1fcb70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -1,3 +1,17 @@\n+2008-08-08  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+        * doc/invoke.texi: Add cpu_type power7.\n+        * config.in (HAVE_AS_VSX): New.\n+        * config.gcc: Add cpu_type power7.\n+        * configure.ac (HAVE_AS_VSX): Check for assembler support of the\n+        VSX instructions.\n+        * configure: Regenerate.\n+        * config/rs6000/rs6000.c (rs6000_override_options): Alias power7 to\n+        power5.\n+        * config/rs6000/rs6000.h (ASM_CPU_POWER7_SPEC): Define.\n+        (ASM_CPU_SPEC): Pass %(asm_cpu_power7) for -mcpu=power7.\n+        (EXTRA_SPECS): Add asm_cpu_power7 spec string.\n+ \n 2008-08-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-transform.c (vectorizable_conversion): Pass the integral"}, {"sha": "d1381a4721cc8cf714a25cffd266585ef58a5411", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -334,7 +334,7 @@ powerpc*-*-*)\n \textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n-\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[3456]|xpower6x|xrs64a|xcell)\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[34567]|xpower6x|xrs64a|xcell)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n@@ -2842,7 +2842,7 @@ case \"${target}\" in\n \t\t\t\teval \"with_$which=405\"\n \t\t\t\t;;\n \t\t\t\"\" | common \\\n-\t\t\t| power | power[23456] | power6x | powerpc | powerpc64 \\\n+\t\t\t| power | power[234567] | power6x | powerpc | powerpc64 \\\n \t\t\t| rios | rios1 | rios2 | rsc | rsc1 | rs64a \\\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 464 | 464fp \\\n \t\t\t| 505 | 601 | 602 | 603 | 603e | ec603e | 604 \\"}, {"sha": "f4604d257197d621e0a217a22c309f4933563ddd", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -377,6 +377,10 @@\n #undef HAVE_AS_TLS\n #endif\n \n+/* Define if your assembler supports VSX instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_VSX\n+#endif\n \n /* Define to 1 if you have the `atoll' function. */\n #ifndef USED_FOR_TARGET"}, {"sha": "0f2779e54bf0123354ca1c4330bd14d0d5389e37", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -1507,6 +1507,9 @@ rs6000_override_options (const char *default_cpu)\n \t {\"power6x\", PROCESSOR_POWER6,\n \t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n \t  | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_MFPGPR},\n+\t {\"power7\", PROCESSOR_POWER5,\n+\t  POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n+\t  | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP},\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},"}, {"sha": "1f6d07b8c06e03f264a1cab13955a5da4ef8717d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -72,6 +72,12 @@\n #define ASM_CPU_POWER6_SPEC \"-mpower4 -maltivec\"\n #endif\n \n+#ifdef HAVE_AS_VSX\n+#define ASM_CPU_POWER7_SPEC \"-mpower7\"\n+#else\n+#define ASM_CPU_POWER7_SPEC \"-mpower4 -maltivec\"\n+#endif\n+\n /* Common ASM definitions used by ASM_SPEC among the various targets\n    for handling -mcpu=xxx switches.  */\n #define ASM_CPU_SPEC \\\n@@ -92,6 +98,7 @@\n %{mcpu=power5+: %(asm_cpu_power5)} \\\n %{mcpu=power6: %(asm_cpu_power6) -maltivec} \\\n %{mcpu=power6x: %(asm_cpu_power6) -maltivec} \\\n+%{mcpu=power7: %(asm_cpu_power7)} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n@@ -160,6 +167,7 @@\n   { \"cc1_cpu\",\t\t\tCC1_CPU_SPEC },\t\t\t\t\\\n   { \"asm_cpu_power5\",\t\tASM_CPU_POWER5_SPEC },\t\t\t\\\n   { \"asm_cpu_power6\",\t\tASM_CPU_POWER6_SPEC },\t\t\t\\\n+  { \"asm_cpu_power7\",\t\tASM_CPU_POWER7_SPEC },\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n /* -mcpu=native handling only makes sense with compiler running on"}, {"sha": "f136d57431a427ac98fb6a09dd469935bc59e621", "filename": "gcc/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -22621,6 +22621,52 @@ cat >>confdefs.h <<\\_ACEOF\n #define HAVE_AS_DFP 1\n _ACEOF\n \n+fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr7\"\n+\t.csect .text[PR]\n+\tlxvd2x 1,2,3';;\n+      *) conftest_s='\t.machine power7\n+\t.text\n+\tlxvd2x 1,2,3';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for vector-scalar support\" >&5\n+echo $ECHO_N \"checking assembler for vector-scalar support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_vsx+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_vsx=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 9 \\* 1000 \\) + 99 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_vsx=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as -a32 -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_vsx=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_vsx\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_vsx\" >&6\n+if test $gcc_cv_as_powerpc_vsx = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_VSX 1\n+_ACEOF\n+\n fi\n \n     echo \"$as_me:$LINENO: checking assembler for .gnu_attribute support\" >&5"}, {"sha": "a0e3f56767b0d489cc4fd577d24981aeabad0fe1", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -3031,6 +3031,21 @@ LCF0:\n       [AC_DEFINE(HAVE_AS_DFP, 1,\n \t  [Define if your assembler supports DFP instructions.])])\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr7\"\n+\t.csect .text[[PR]]\n+\tlxvd2x 1,2,3';;\n+      *) conftest_s='\t.machine power7\n+\t.text\n+\tlxvd2x 1,2,3';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([vector-scalar support],\n+      gcc_cv_as_powerpc_vsx, [9,99,0], -a32,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_VSX, 1,\n+\t  [Define if your assembler supports VSX instructions.])])\n+\n     gcc_GAS_CHECK_FEATURE([.gnu_attribute support],\n       gcc_cv_as_powerpc_gnu_attribute, [2,18,0],,\n       [.gnu_attribute 4,1],,"}, {"sha": "cb0299585d8edd73f5663def9475912ec97cc2d8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "patch": "@@ -13024,7 +13024,7 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{860}, @samp{970}, @samp{8540}, @samp{e300c2}, @samp{e300c3},\n @samp{e500mc}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{power}, @samp{power2}, @samp{power3}, @samp{power4},\n-@samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x},\n+@samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x}, @samp{power7}\n @samp{common}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n @samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}.\n "}]}