{"sha": "811f902b764c5a13178cbd7588e96c16b3fab504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExZjkwMmI3NjRjNWExMzE3OGNiZDc1ODhlOTZjMTZiM2ZhYjUwNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-05-31T08:26:40Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-05-31T10:00:07Z"}, "message": "Finalization depends on the expression, not on the component.\n\nThis patch fixes a 8/9/10/11 regression, where finalized types\nwere not finalized (and deallocated), which led to memory\nleaks.\n\ngcc/fortran/ChangeLog:\n\n2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94361\n\t* class.c (finalize_component): Use expr->finalized instead of\n\tcomp->finalized.\n\t* gfortran.h (gfc_component): Remove finalized member.\n\t(gfc_expr): Add it here instead.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94361\n\t* gfortran.dg/finalize_28.f90: Adjusted free counts.\n\t* gfortran.dg/finalize_33.f90: Likewise.\n\t* gfortran.dg/finalize_34.f90: Likewise.\n\t* gfortran.dg/finalize_35.f90: New test.", "tree": {"sha": "ec0b2e9b0a0ca1429e8158101c49e49dc5694a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0b2e9b0a0ca1429e8158101c49e49dc5694a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811f902b764c5a13178cbd7588e96c16b3fab504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811f902b764c5a13178cbd7588e96c16b3fab504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811f902b764c5a13178cbd7588e96c16b3fab504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811f902b764c5a13178cbd7588e96c16b3fab504/comments", "author": null, "committer": null, "parents": [{"sha": "dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "b1764073ab41692e599639daf5490b83cf2b42f4", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -921,7 +921,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n   if (!comp_is_finalizable (comp))\n     return;\n \n-  if (comp->finalized)\n+  if (expr->finalized)\n     return;\n \n   e = gfc_copy_expr (expr);\n@@ -1012,6 +1012,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \t}\n       else\n \t(*code) = cond;\n+\n     }\n   else if (comp->ts.type == BT_DERIVED\n \t    && comp->ts.u.derived->f2k_derived\n@@ -1051,7 +1052,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \t\t\t    sub_ns);\n       gfc_free_expr (e);\n     }\n-  comp->finalized = true;\n+  expr->finalized = 1;\n }\n \n "}, {"sha": "5af44847f9b0152dc67437278933f3177f8115cb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -1107,7 +1107,6 @@ typedef struct gfc_component\n   struct gfc_typebound_proc *tb;\n   /* When allocatable/pointer and in a coarray the associated token.  */\n   tree caf_token;\n-  bool finalized;\n }\n gfc_component;\n \n@@ -2218,6 +2217,9 @@ typedef struct gfc_expr\n   /* Set this if the expression came from expanding an array constructor.  */\n   unsigned int from_constructor : 1;\n \n+  /* Set this if the expression has already been finalized.  */\n+  unsigned int finalized : 1;\n+\n   /* If an expression comes from a Hollerith constant or compile-time\n      evaluation of a transfer statement, it may have a prescribed target-\n      memory representation, and these cannot always be backformed from"}, {"sha": "f0c9665252f46a455fe8877b0dae51f9af381e02", "filename": "gcc/testsuite/gfortran.dg/finalize_28.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -21,4 +21,4 @@ subroutine coo_dump_edges(g, edges)\n     integer, intent(out) :: edges(:,:)\n   end subroutine coo_dump_edges\n end module coo_graphs\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 6 \"original\" } }"}, {"sha": "3857e4485ee8b9ec7ceeb9baaa64c5d6ea9df8fb", "filename": "gcc/testsuite/gfortran.dg/finalize_33.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -116,4 +116,4 @@ end subroutine event_transforms_1            ! generates 3 final calls to mci_mi\n                                                ! (iii) mci_template\n end program main_ut\n ! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 17 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 19 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 20 \"original\" } }"}, {"sha": "fef7dac6d89cfde84ef004155ec82fd9153b8918", "filename": "gcc/testsuite/gfortran.dg/finalize_34.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_34.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_34.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_34.f90?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -22,4 +22,4 @@ program main\n   use testmodule\n   type(evtlist_type), dimension(10) :: a\n end program main\n-! { dg-final  { scan-tree-dump-times \"__builtin_free\" 8 \"original\" } }\n+! { dg-final  { scan-tree-dump-times \"__builtin_free\" 12 \"original\" } }"}, {"sha": "66435c43ecc36839f8a1e086da1fa712963cbd1a", "filename": "gcc/testsuite/gfortran.dg/finalize_35.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811f902b764c5a13178cbd7588e96c16b3fab504/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_35.f90?ref=811f902b764c5a13178cbd7588e96c16b3fab504", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! PR 94361 - this left open some memory leaks.  Original test case by\n+! Antony Lewis.\n+\n+module debug\n+  private\n+\n+  Type TypeWithFinal\n+   contains\n+     FINAL :: finalizer  !No leak if this line is commented\n+  end type TypeWithFinal\n+\n+  Type Tester\n+     real, dimension(:), allocatable :: Dat\n+     Type(TypeWithFinal) :: X\n+  end Type Tester\n+\n+  Type :: TestType2\n+     Type(Tester) :: T\n+  end type TestType2\n+  public Leaker\n+contains\n+\n+  subroutine Leaker\n+    type(TestType2) :: Test\n+\n+    allocate(Test%T%Dat(1000))\n+  end subroutine Leaker\n+\n+  subroutine finalizer(this)\n+    Type(TypeWithFinal) :: this\n+  end subroutine finalizer\n+\n+end module debug\n+\n+\n+program run\n+  use debug\n+  implicit none\n+  integer i\n+\n+  do i=1, 1000\n+     call Leaker()\n+  end do\n+\n+end program run\n+! { dg-final  { scan-tree-dump-times \"__builtin_free\\\\ \\\\(ptr2\" 2 \"original\" } }"}]}