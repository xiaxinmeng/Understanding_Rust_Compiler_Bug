{"sha": "10a32d479861c3a39987d3468f6a400e907499a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMzJkNDc5ODYxYzNhMzk5ODdkMzQ2OGY2YTQwMGU5MDc0OTlhMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-27T15:35:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-27T17:47:17Z"}, "message": "libstdc++: -D_GLIBCXX_DEBUG fixes in the constrained algos tests\n\nThis fixes the failures in the constrained algos tests when they are run in\ndebug mode.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/25_algorithms/copy/constrained.cc: Don't assume that the\n\tbase() of a vector<>::iterator is a pointer.\n\t* testsuite/25_algorithms/copy_backward/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/move/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/inplace_merge/constrained.cc: Use foo.data()\n\tinstead of &foo[0].\n\t* testsuite/25_algorithms/partial_sort/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/partial_sort_copy/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/shuffle/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/sort/constrained.cc: Likewise.\n\t* testsuite/25_algorithms/stable_sort/constrained.cc: Likewise.", "tree": {"sha": "7438b7765ea450b31f100a6b4fbb606c1b3a9828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7438b7765ea450b31f100a6b4fbb606c1b3a9828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a32d479861c3a39987d3468f6a400e907499a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a32d479861c3a39987d3468f6a400e907499a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a32d479861c3a39987d3468f6a400e907499a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a32d479861c3a39987d3468f6a400e907499a2/comments", "author": null, "committer": null, "parents": [{"sha": "cfeef9acd2cec93ed6338cc0d9fad98bdc0f7599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeef9acd2cec93ed6338cc0d9fad98bdc0f7599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfeef9acd2cec93ed6338cc0d9fad98bdc0f7599"}], "stats": {"total": 105, "additions": 60, "deletions": 45}, "files": [{"sha": "b3efeae221a5f6c3d72aa30f626737c8006f6beb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -1,3 +1,18 @@\n+2020-02-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/25_algorithms/copy/constrained.cc: Don't assume that the\n+\tbase() of a vector<>::iterator is a pointer.\n+\t* testsuite/25_algorithms/copy_backward/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/move/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/inplace_merge/constrained.cc: Use foo.data()\n+\tinstead of &foo[0].\n+\t* testsuite/25_algorithms/partial_sort/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/partial_sort_copy/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/shuffle/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/sort/constrained.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_sort/constrained.cc: Likewise.\n+\n 2020-02-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/debug/array (operator<=>): Define for C++20."}, {"sha": "aafe845db3a3f7d73cf9c3101d8815d812acf1b7", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/constrained.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -70,8 +70,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::copy(x, ranges::begin(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data()+3 );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -81,8 +81,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::copy(x, ranges::begin(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data()+3 );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -93,8 +93,8 @@ test01()\n       auto [in,out] = ranges::copy(make_reverse_iterator(x.end()),\n \t\t\t\t   make_reverse_iterator(x.begin()),\n \t\t\t\t   make_reverse_iterator(y.end()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data() );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -105,8 +105,8 @@ test01()\n       auto [in,out] = ranges::copy(make_reverse_iterator(x.end()),\n \t\t\t\t   make_reverse_iterator(x.begin()),\n \t\t\t\t   make_reverse_iterator(y.end()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data() );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n }"}, {"sha": "9df2a2ff593fead417c137ad0b7cda90b0adebeb", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/constrained.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -57,8 +57,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::copy_backward(x, ranges::end(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data() );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -68,8 +68,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::copy_backward(x, ranges::end(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data() );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -80,8 +80,8 @@ test01()\n       auto [in,out] = ranges::copy_backward(make_reverse_iterator(x.end()),\n \t\t\t\t\t    make_reverse_iterator(x.begin()),\n \t\t\t\t\t    make_reverse_iterator(y.begin()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data()+3 );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -92,8 +92,8 @@ test01()\n       auto [in,out] = ranges::copy_backward(make_reverse_iterator(x.end()),\n \t\t\t\t\t    make_reverse_iterator(x.begin()),\n \t\t\t\t\t    make_reverse_iterator(y.begin()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data()+3 );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n }"}, {"sha": "e6e16c85382444e61ecf7f104f566079ce164c1c", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/constrained.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -40,7 +40,7 @@ test01()\n \tv.insert(v.end(), x, x+j);\n \tranges::sort(v);\n \n-\ttest_range<int, bidirectional_iterator_wrapper> rz(&v[0], &v[0]+i+j);\n+\ttest_range<int, bidirectional_iterator_wrapper> rz(v.data(), v.data()+i+j);\n \tauto result = ranges::inplace_merge(rz, next(ranges::begin(rz), i));\n \tVERIFY( result == rz.end() );\n "}, {"sha": "f15de54870971f3cd2b566ff78d1f1ed359c4acb", "filename": "libstdc++-v3/testsuite/25_algorithms/move/constrained.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -99,8 +99,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::move(x, ranges::begin(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data()+3 );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -110,8 +110,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::move(x, ranges::begin(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data()+3 );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -122,8 +122,8 @@ test01()\n       auto [in,out] = ranges::move(make_reverse_iterator(x.end()),\n \t\t\t\t   make_reverse_iterator(x.begin()),\n \t\t\t\t   make_reverse_iterator(y.end()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data() );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -134,8 +134,8 @@ test01()\n       auto [in,out] = ranges::move(make_reverse_iterator(x.end()),\n \t\t\t\t   make_reverse_iterator(x.begin()),\n \t\t\t\t   make_reverse_iterator(y.end()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data() );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n }"}, {"sha": "14f215578c762dd987484223eea434147cbc514a", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/constrained.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -86,8 +86,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::move_backward(x, ranges::end(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data() );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -97,8 +97,8 @@ test01()\n       std::vector<int> y(3);\n       const int z[3] = { 1, 2, 3 };\n       auto [in, out] = ranges::move_backward(x, ranges::end(y));\n-      VERIFY( in.base() == x.data()+3 );\n-      VERIFY( out.base() == y.data() );\n+      VERIFY( in == x.begin()+3 );\n+      VERIFY( out == y.begin() );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -109,8 +109,8 @@ test01()\n       auto [in,out] = ranges::move_backward(make_reverse_iterator(x.end()),\n \t\t\t\t\t    make_reverse_iterator(x.begin()),\n \t\t\t\t\t    make_reverse_iterator(y.begin()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data()+3 );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n \n@@ -121,8 +121,8 @@ test01()\n       auto [in,out] = ranges::move_backward(make_reverse_iterator(x.end()),\n \t\t\t\t\t    make_reverse_iterator(x.begin()),\n \t\t\t\t\t    make_reverse_iterator(y.begin()));\n-      VERIFY( in.base().base() == x.data()+3 );\n-      VERIFY( out.base().base() == y.data()+3 );\n+      VERIFY( in.base() == x.begin()+3 );\n+      VERIFY( out.base() == y.begin()+3 );\n       VERIFY( ranges::equal(y, z) && ranges::equal(x, z) );\n     }\n }"}, {"sha": "3b61fe73fd7220af33c50c4f30faa29ded591fda", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -40,9 +40,9 @@ test01()\n       std::iota(vref.begin(), vref.end(), 0);\n       std::vector<int> v1(vref), v2(vref);\n       test_container<int, random_access_iterator_wrapper> c\n-\t= {&v1[0], &v1[0] + size};\n+\t= {v1.data(), v1.data() + size};\n       test_range<int, random_access_iterator_wrapper> r\n-\t= {&v2[0], &v2[0] + size};\n+\t= {v2.data(), v2.data() + size};\n \n       std::ranlux48_base g1(size), g2(size + 1);\n       ranges::shuffle(c, g1);"}, {"sha": "519c41f2bde4e11c14dae3ede25aa058c66b0763", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/constrained.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -49,15 +49,15 @@ test01()\n       for (unsigned middle = 0; middle < 10; ++middle)\n \t{\n \t  test_container<int, forward_iterator_wrapper> c\n-\t    = {&v1[0], &v1[0] + size};\n+\t    = {v1.data(), v1.data() + size};\n \t  test_range<int, input_iterator_wrapper> r\n-\t    = {&v2[0], &v2[0] + size};\n+\t    = {v2.data(), v2.data() + size};\n \n \t  std::vector<int> o1(middle), o2(middle);\n \t  test_range<int, random_access_iterator_wrapper> w1\n-\t    = {&o1[0], &o1[0]+middle};\n+\t    = {o1.data(), o1.data()+middle};\n \t  test_range<int, random_access_iterator_wrapper> w2\n-\t    = {&o2[0], &o2[0]+middle};\n+\t    = {o2.data(), o2.data()+middle};\n \n \t  auto [in1, out1] = ranges::partial_sort_copy(c.begin(), c.end(),\n \t\t\t\t\t\t       w1.begin(), w1.end(),"}, {"sha": "3f976005b37df74dee3b85f9238254a2c9e04bad", "filename": "libstdc++-v3/testsuite/25_algorithms/shuffle/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fshuffle%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -42,9 +42,9 @@ test01()\n       std::iota(vref.begin(), vref.end(), 0);\n       std::vector<int> v1(vref), v2(vref);\n       test_container<int, random_access_iterator_wrapper> c\n-\t= {&v1[0], &v1[0] + size};\n+\t= {v1.data(), v1.data() + size};\n       test_range<int, random_access_iterator_wrapper> r\n-\t= {&v2[0], &v2[0] + size};\n+\t= {v2.data(), v2.data() + size};\n \n       std::ranlux48_base g1(size), g2(size + 1);\n       VERIFY( ranges::shuffle(c, g1) == c.end() );"}, {"sha": "b5a99b73cc3115250aaec361db7b24573d91eaad", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -40,9 +40,9 @@ test01()\n       std::iota(vref.begin(), vref.end(), 0);\n       std::vector<int> v1(vref), v2(vref);\n       test_container<int, random_access_iterator_wrapper> c\n-\t= {&v1[0], &v1[0] + size};\n+\t= {v1.data(), v1.data() + size};\n       test_range<int, random_access_iterator_wrapper> r\n-\t= {&v2[0], &v2[0] + size};\n+\t= {v2.data(), v2.data() + size};\n \n       std::ranlux48_base g1(size), g2(size + 1);\n       ranges::shuffle(c, g1);"}, {"sha": "ef02ccaae45e7e4fe07b266ec6730c17806b3a9c", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a32d479861c3a39987d3468f6a400e907499a2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fconstrained.cc?ref=10a32d479861c3a39987d3468f6a400e907499a2", "patch": "@@ -44,9 +44,9 @@ test01()\n       std::iota(vref.begin(), vref.end(), 0);\n       std::vector<int> v1(vref), v2(vref);\n       test_container<int, random_access_iterator_wrapper> c\n-\t= {&v1[0], &v1[0] + size};\n+\t= {v1.data(), v1.data() + size};\n       test_range<int, random_access_iterator_wrapper> r\n-\t= {&v2[0], &v2[0] + size};\n+\t= {v2.data(), v2.data() + size};\n \n       std::ranlux48_base g1(size), g2(size + 1);\n       ranges::shuffle(c, g1);"}]}