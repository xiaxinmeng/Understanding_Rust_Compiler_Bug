{"sha": "3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjZGI1ZGVjNzJiNmQ3YjE5NzgyMWMyYjgxNGJjOWZjMDdmNDYyOA==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-04-20T18:01:43Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-04-22T17:19:33Z"}, "message": "Use plq/pstq for atomic_{load,store}<mode>\n\nFor future architecture with prefix instructions, always use plq/pstq\nrather than lq/stq for atomic load of quadword. Then we never have to\ndo the doubleword swap on little endian. Before this fix, -mno-pcrel\nwould generate lq with the doubleword swap (which was ok) and -mpcrel\nwould generate plq, also with the doubleword swap, which was wrong.\n\n2020-04-20  Aaron Sawdey  <acsawdey@linux.ibm.com>\n\n\tPR target/94622\n\t* config/rs6000/sync.md (load_quadpti): Add attr \"prefixed\"\n\tif TARGET_PREFIXED.\n\t(store_quadpti): Ditto.\n\t(atomic_load<mode>): Do not swap doublewords if TARGET_PREFIXED as\n\tplq will be used and doesn't need it.\n\t(atomic_store<mode>): Ditto, for pstq.", "tree": {"sha": "fc0cf4cab07bd73a5607091c2c158aafbaf92652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0cf4cab07bd73a5607091c2c158aafbaf92652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464092e0f1123878cda3e2fa37b1cdc6a26ebbd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464092e0f1123878cda3e2fa37b1cdc6a26ebbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464092e0f1123878cda3e2fa37b1cdc6a26ebbd4"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "d4cc33e3acc6cc821e7e056c54186949f8063a87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "patch": "@@ -1,3 +1,13 @@\n+2020-04-20  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\tPR target/94622\n+\t* config/rs6000/sync.md (load_quadpti): Add attr \"prefixed\"\n+\tif TARGET_PREFIXED.\n+\t(store_quadpti): Ditto.\n+\t(atomic_load<mode>): Do not swap doublewords if TARGET_PREFIXED as\n+\tplq will be used and doesn't need it.\n+\t(atomic_store<mode>): Ditto, for pstq.\n+\n 2020-04-22  Erick Ochoa  <erick.ochoa@theobroma-systems.com>\n \n \t* doc/invoke.texi: Update flags turned on by -O3."}, {"sha": "5ad88806818ffa3be096ee70eaa5be47f6598f18", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bcdb5dec72b6d7b197821c2b814bc9fc07f4628/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=3bcdb5dec72b6d7b197821c2b814bc9fc07f4628", "patch": "@@ -122,15 +122,26 @@\n   [(set_attr \"type\" \"isync\")\n    (set_attr \"length\" \"12\")])\n \n+;; If TARGET_PREFIXED, always use plq rather than lq.\n (define_insn \"load_quadpti\"\n   [(set (match_operand:PTI 0 \"quad_int_reg_operand\" \"=&r\")\n \t(unspec:PTI\n \t [(match_operand:TI 1 \"quad_memory_operand\" \"wQ\")] UNSPEC_LSQ))]\n   \"TARGET_SYNC_TI\n    && !reg_mentioned_p (operands[0], operands[1])\"\n   \"lq %0,%1\"\n-  [(set_attr \"type\" \"load\")])\n-\n+  [(set_attr \"type\" \"load\")\n+   (set (attr \"prefixed\") (if_then_else (match_test \"TARGET_PREFIXED\")\n+\t\t\t\t\t(const_string \"yes\")\n+\t\t\t\t\t(const_string \"no\")))])\n+\n+;; Pattern load_quadpti will always use plq for atomic TImode if\n+;; TARGET_PREFIXED.  It has the correct doubleword ordering on either LE\n+;; or BE, so we can just move the result into the output register and\n+;; do not need to do the doubleword swap for LE.  Also this avoids any\n+;; confusion about whether the lq vs plq might be used based on whether\n+;; op1 has PC-relative addressing.  We could potentially allow BE to\n+;; use lq because it doesn't have the doubleword ordering problem.\n (define_expand \"atomic_load<mode>\"\n   [(set (match_operand:AINT 0 \"register_operand\")\t\t;; output\n \t(match_operand:AINT 1 \"memory_operand\"))\t\t;; memory\n@@ -162,7 +173,7 @@\n \n       emit_insn (gen_load_quadpti (pti_reg, op1));\n \n-      if (WORDS_BIG_ENDIAN)\n+      if (WORDS_BIG_ENDIAN || TARGET_PREFIXED)\n \temit_move_insn (op0, gen_lowpart (TImode, pti_reg));\n       else\n \t{\n@@ -186,14 +197,20 @@\n   DONE;\n })\n \n+;; If TARGET_PREFIXED, always use pstq rather than stq.\n (define_insn \"store_quadpti\"\n   [(set (match_operand:PTI 0 \"quad_memory_operand\" \"=wQ\")\n \t(unspec:PTI\n \t [(match_operand:PTI 1 \"quad_int_reg_operand\" \"r\")] UNSPEC_LSQ))]\n   \"TARGET_SYNC_TI\"\n   \"stq %1,%0\"\n-  [(set_attr \"type\" \"store\")])\n+  [(set_attr \"type\" \"store\")\n+   (set (attr \"prefixed\") (if_then_else (match_test \"TARGET_PREFIXED\")\n+\t\t\t\t\t(const_string \"yes\")\n+\t\t\t\t\t(const_string \"no\")))])\n \n+;; Pattern store_quadpti will always use pstq if TARGET_PREFIXED,\n+;; so the doubleword swap is never needed in that case.\n (define_expand \"atomic_store<mode>\"\n   [(set (match_operand:AINT 0 \"memory_operand\")\t\t;; memory\n \t(match_operand:AINT 1 \"register_operand\"))\t;; input\n@@ -232,7 +249,7 @@\n \t  operands[0] = op0 = replace_equiv_address (op0, new_addr);\n \t}\n \n-      if (WORDS_BIG_ENDIAN)\n+      if (WORDS_BIG_ENDIAN || TARGET_PREFIXED)\n \temit_move_insn (pti_reg, gen_lowpart (PTImode, op1));\n       else\n \t{"}]}