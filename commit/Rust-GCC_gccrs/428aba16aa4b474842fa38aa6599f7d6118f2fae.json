{"sha": "428aba16aa4b474842fa38aa6599f7d6118f2fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4YWJhMTZhYTRiNDc0ODQyZmEzOGFhNjU5OWY3ZDYxMThmMmZhZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-10-30T17:51:46Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-10-30T17:51:46Z"}, "message": "builtins.c (expand_builtin_mathfn_3): Correct coding style.\n\n\n\t* builtins.c (expand_builtin_mathfn_3): Correct coding style.\n\t* ddg.c (print_ddg_edge): Likewise.\n\t* dwarf2out.c (prune_unused_types_walk): Likewise.\n\t* ifcvt.c (noce_try_cmove_arith): Likewise.\n\t* langhooks.c (add_builtin_function): Likewise.\n\t* reg-stack.c (subst_stack_regs_pat): Likewise.\n\t* tree.c (expanded_location): Likewise.\n\t* tree-dump.c (dequeue_and_dump): Likewise.\n\nFrom-SVN: r118187", "tree": {"sha": "2ce04ecaaae7281c4ae1af515ef85ebd6c45735a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce04ecaaae7281c4ae1af515ef85ebd6c45735a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428aba16aa4b474842fa38aa6599f7d6118f2fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428aba16aa4b474842fa38aa6599f7d6118f2fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428aba16aa4b474842fa38aa6599f7d6118f2fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428aba16aa4b474842fa38aa6599f7d6118f2fae/comments", "author": null, "committer": null, "parents": [{"sha": "0e697399655c6ae1a53267d3d38e462b8848910e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e697399655c6ae1a53267d3d38e462b8848910e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e697399655c6ae1a53267d3d38e462b8848910e"}], "stats": {"total": 159, "additions": 90, "deletions": 69}, "files": [{"sha": "0c63a5501f0aac971a0c09f7c8417b4e0418914f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -1,3 +1,14 @@\n+2006-10-30  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_mathfn_3): Correct coding style.\n+\t* ddg.c (print_ddg_edge): Likewise.\n+\t* dwarf2out.c (prune_unused_types_walk): Likewise.\n+\t* ifcvt.c (noce_try_cmove_arith): Likewise.\n+\t* langhooks.c (add_builtin_function): Likewise.\n+\t* reg-stack.c (subst_stack_regs_pat): Likewise.\n+\t* tree.c (expanded_location): Likewise.\n+\t* tree-dump.c (dequeue_and_dump): Likewise.\n+\n 2006-10-30  David Daney  <ddaney@avtrex.com>\n \n \t* config/mips/linux.h (NO_SHARED_SPECS): Correct syntax error."}, {"sha": "3a71e0462db8f9034fd0681544eee0124d586c43", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -2089,7 +2089,7 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \n   /* Check if sincos insn is available, otherwise fallback\n      to sin or cos insn.  */\n-  if (builtin_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing) {\n+  if (builtin_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n     switch (DECL_FUNCTION_CODE (fndecl))\n       {\n       CASE_FLT_FN (BUILT_IN_SIN):\n@@ -2099,7 +2099,6 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n       default:\n \tgcc_unreachable ();\n       }\n-  }\n \n   /* Before working hard, check whether the instruction is available.  */\n   if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)"}, {"sha": "3952666a71a5cd8169c639a05330423147f1c322", "filename": "gcc/ddg.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -549,7 +549,8 @@ print_ddg_edge (FILE *file, ddg_edge_ptr e)\n {\n   char dep_c;\n \n-  switch (e->type) {\n+  switch (e->type)\n+    {\n     case OUTPUT_DEP :\n       dep_c = 'O';\n       break;\n@@ -558,7 +559,7 @@ print_ddg_edge (FILE *file, ddg_edge_ptr e)\n       break;\n     default:\n       dep_c = 'T';\n-  }\n+    }\n \n   fprintf (file, \" [%d -(%c,%d,%d)-> %d] \", INSN_UID (e->src->insn),\n \t   dep_c, e->latency, e->distance, INSN_UID (e->dest->insn));"}, {"sha": "13c0e2b2794cd3c547900556efcb3c7a17d84cf2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -14045,35 +14045,36 @@ prune_unused_types_walk (dw_die_ref die)\n   if (die->die_mark)\n     return;\n \n-  switch (die->die_tag) {\n-  case DW_TAG_const_type:\n-  case DW_TAG_packed_type:\n-  case DW_TAG_pointer_type:\n-  case DW_TAG_reference_type:\n-  case DW_TAG_volatile_type:\n-  case DW_TAG_typedef:\n-  case DW_TAG_array_type:\n-  case DW_TAG_structure_type:\n-  case DW_TAG_union_type:\n-  case DW_TAG_class_type:\n-  case DW_TAG_friend:\n-  case DW_TAG_variant_part:\n-  case DW_TAG_enumeration_type:\n-  case DW_TAG_subroutine_type:\n-  case DW_TAG_string_type:\n-  case DW_TAG_set_type:\n-  case DW_TAG_subrange_type:\n-  case DW_TAG_ptr_to_member_type:\n-  case DW_TAG_file_type:\n-    if (die->die_perennial_p)\n-      break;\n+  switch (die->die_tag)\n+    {\n+    case DW_TAG_const_type:\n+    case DW_TAG_packed_type:\n+    case DW_TAG_pointer_type:\n+    case DW_TAG_reference_type:\n+    case DW_TAG_volatile_type:\n+    case DW_TAG_typedef:\n+    case DW_TAG_array_type:\n+    case DW_TAG_structure_type:\n+    case DW_TAG_union_type:\n+    case DW_TAG_class_type:\n+    case DW_TAG_friend:\n+    case DW_TAG_variant_part:\n+    case DW_TAG_enumeration_type:\n+    case DW_TAG_subroutine_type:\n+    case DW_TAG_string_type:\n+    case DW_TAG_set_type:\n+    case DW_TAG_subrange_type:\n+    case DW_TAG_ptr_to_member_type:\n+    case DW_TAG_file_type:\n+      if (die->die_perennial_p)\n+\tbreak;\n \n-    /* It's a type node --- don't mark it.  */\n-    return;\n+      /* It's a type node --- don't mark it.  */\n+      return;\n \n-  default:\n-    /* Mark everything else.  */\n-    break;\n+    default:\n+      /* Mark everything else.  */\n+      break;\n   }\n \n   die->die_mark = 1;"}, {"sha": "4d7341cec887e0b24f44e2d575a339143150c95d", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -1329,16 +1329,15 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \treturn FALSE;\n     }\n   else\n+    insn_cost = 0;\n+\n+  if (insn_b)\n     {\n-      insn_cost = 0;\n+      insn_cost += insn_rtx_cost (PATTERN (insn_b));\n+      if (insn_cost == 0 || insn_cost > COSTS_N_INSNS (BRANCH_COST))\n+        return FALSE;\n     }\n \n-  if (insn_b) {\n-    insn_cost += insn_rtx_cost (PATTERN (insn_b));\n-    if (insn_cost == 0 || insn_cost > COSTS_N_INSNS (BRANCH_COST))\n-      return FALSE;\n-  }\n-\n   /* Possibly rearrange operands to make things come out more natural.  */\n   if (reversed_comparison_code (if_info->cond, if_info->jump) != UNKNOWN)\n     {"}, {"sha": "7fca436e89dbaf0c4d3372e8b074cc23427b7010", "filename": "gcc/langhooks.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -605,10 +605,11 @@ add_builtin_function (const char *name,\n   DECL_BUILT_IN_CLASS (decl) = cl;\n   DECL_FUNCTION_CODE (decl)  = function_code;\n \n-  if (library_name) {\n-    tree libname = get_identifier (library_name);\n-    SET_DECL_ASSEMBLER_NAME (decl, libname);\n-  }\n+  if (library_name)\n+    {\n+      tree libname = get_identifier (library_name);\n+      SET_DECL_ASSEMBLER_NAME (decl, libname);\n+    }\n \n   /* Possibly apply some default attributes to this built-in function.  */\n   if (attrs)"}, {"sha": "0b8b1565e0c6c5445fe7317f3c1713c7e609beae", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -1702,11 +1702,12 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t\t/* Push the result back onto stack. Empty stack slot\n \t\t   will be filled in second part of insn.  */\n-\t\tif (STACK_REG_P (*dest)) {\n-\t\t  regstack->reg[regstack->top] = REGNO (*dest);\n-\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n-\t\t  replace_reg (dest, FIRST_STACK_REG);\n-\t\t}\n+\t\tif (STACK_REG_P (*dest))\n+\t\t  {\n+\t\t    regstack->reg[regstack->top] = REGNO (*dest);\n+\t\t    SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t    replace_reg (dest, FIRST_STACK_REG);\n+\t\t  }\n \n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\treplace_reg (src2, FIRST_STACK_REG + 1);\n@@ -1733,11 +1734,12 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t\t/* Push the result back onto stack. Fill empty slot from\n \t\t   first part of insn and fix top of stack pointer.  */\n-\t\tif (STACK_REG_P (*dest)) {\n-\t\t  regstack->reg[regstack->top - 1] = REGNO (*dest);\n-\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n-\t\t  replace_reg (dest, FIRST_STACK_REG + 1);\n-\t\t}\n+\t\tif (STACK_REG_P (*dest))\n+\t\t  {\n+\t\t    regstack->reg[regstack->top - 1] = REGNO (*dest);\n+\t\t    SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t    replace_reg (dest, FIRST_STACK_REG + 1);\n+\t\t  }\n \n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\treplace_reg (src2, FIRST_STACK_REG + 1);\n@@ -1760,11 +1762,12 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t\t/* Push the result back onto stack. Empty stack slot\n \t\t   will be filled in second part of insn.  */\n-\t\tif (STACK_REG_P (*dest)) {\n-\t\t  regstack->reg[regstack->top + 1] = REGNO (*dest);\n-\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n-\t\t  replace_reg (dest, FIRST_STACK_REG);\n-\t\t}\n+\t\tif (STACK_REG_P (*dest))\n+\t\t  {\n+\t\t    regstack->reg[regstack->top + 1] = REGNO (*dest);\n+\t\t    SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t    replace_reg (dest, FIRST_STACK_REG);\n+\t\t  }\n \n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\tbreak;\n@@ -1786,13 +1789,14 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t\t/* Push the result back onto stack. Fill empty slot from\n \t\t   first part of insn and fix top of stack pointer.  */\n-\t\tif (STACK_REG_P (*dest)) {\n-\t\t  regstack->reg[regstack->top] = REGNO (*dest);\n-\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n-\t\t  replace_reg (dest, FIRST_STACK_REG + 1);\n+\t\tif (STACK_REG_P (*dest))\n+\t\t  {\n+\t\t    regstack->reg[regstack->top] = REGNO (*dest);\n+\t\t    SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t    replace_reg (dest, FIRST_STACK_REG + 1);\n \n-\t\t  regstack->top++;\n-\t\t}\n+\t\t    regstack->top++;\n+\t\t  }\n \n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\tbreak;"}, {"sha": "db315c8229f67c48cf6817994912c9e3796ad5fd", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -650,12 +650,12 @@ dequeue_and_dump (dump_info_p di)\n \n     case CASE_LABEL_EXPR:\n       dump_child (\"name\", CASE_LABEL (t));\n-      if (CASE_LOW (t)) {\n-        dump_child (\"low \", CASE_LOW (t));\n-\tif (CASE_HIGH (t)) {\n-\t  dump_child (\"high\", CASE_HIGH (t));\n+      if (CASE_LOW (t))\n+\t{\n+\t  dump_child (\"low \", CASE_LOW (t));\n+\t  if (CASE_HIGH (t))\n+\t    dump_child (\"high\", CASE_HIGH (t));\n \t}\n-      }\n       break;\n     case LABEL_EXPR:\n       dump_child (\"name\", TREE_OPERAND (t,0));"}, {"sha": "4ee65f0e1b2ed7f8cd6a38851f0eaa73037b6532", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428aba16aa4b474842fa38aa6599f7d6118f2fae/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=428aba16aa4b474842fa38aa6599f7d6118f2fae", "patch": "@@ -3220,7 +3220,12 @@ expanded_location\n expand_location (source_location loc)\n {\n   expanded_location xloc;\n-  if (loc == 0) { xloc.file = NULL; xloc.line = 0;  xloc.column = 0; }\n+  if (loc == 0)\n+    {\n+      xloc.file = NULL;\n+      xloc.line = 0;\n+      xloc.column = 0;\n+    }\n   else\n     {\n       const struct line_map *map = linemap_lookup (&line_table, loc);"}]}