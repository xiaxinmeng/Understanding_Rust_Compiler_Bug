{"sha": "17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkYzA4ZWRjMjhmNGZjMjVmNmNkN2I3MWYwZDBhMGQxZWMyZjgzMw==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-08-03T15:38:13Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-08-13T09:11:55Z"}, "message": "nvptx: Add support for subword compare-and-swap\n\nThis adds support for __sync_val_compare_and_swap and\n__sync_bool_compare_and_swap for 1-byte and 2-byte long\nvalues, which are not natively supported on nvptx.\n\nBuild and reg-tested on nvptx.\nBuild and reg-tested libgomp on x86_64 with nvptx accelerator.\n\n2020-07-16  Kwok Cheung Yeung  <kcy@codesourcery.com>\n\n\tlibgcc/\n\t* config/nvptx/atomic.c: New.\n\t* config/nvptx/t-nvptx (LIB2ADD): Add atomic.c.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/ia64-sync-5.c: New.\n\n\tlibgomp/\n\t* testsuite/libgomp.c-c++-common/reduction-16.c: New.", "tree": {"sha": "a495d89e7e4224e222589aa3860869dac48711de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a495d89e7e4224e222589aa3860869dac48711de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91770216eade83f068528c1e4f00e2ac3b23044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91770216eade83f068528c1e4f00e2ac3b23044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91770216eade83f068528c1e4f00e2ac3b23044"}], "stats": {"total": 131, "additions": 130, "deletions": 1}, "files": [{"sha": "ec40f2ca7a9ccc372072c75ad8d5dd4e71a5d24e", "filename": "gcc/testsuite/gcc.target/nvptx/ia64-sync-5.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fia64-sync-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fia64-sync-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fia64-sync-5.c?ref=17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-do run } */\n+#include \"../../gcc.dg/ia64-sync-5.c\""}, {"sha": "e1ea078692afe0b4286cf3092691c49541b83ba2", "filename": "libgcc/config/nvptx/atomic.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgcc%2Fconfig%2Fnvptx%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgcc%2Fconfig%2Fnvptx%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnvptx%2Fatomic.c?ref=17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "patch": "@@ -0,0 +1,73 @@\n+/* NVPTX atomic operations\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Mentor Graphics.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdbool.h>\n+\n+/* Implement __sync_val_compare_and_swap and __sync_bool_compare_and_swap\n+   for 1 and 2-byte values (which are not natively supported) in terms of\n+   __sync_val_compare_and_swap for 4-byte values (which is supported).\n+   This assumes that the contents of the word surrounding the subword\n+   value that we are interested in are accessible as well (which should\n+   normally be the case).  Note that if the contents of the word surrounding\n+   the subword changes between the __sync_val_compare_and_swap_4 and the\n+   preceeding load of oldword, while the subword does not, the implementation\n+   loops, which may manifest worst-case as a hang.  */\n+\n+#define __SYNC_SUBWORD_COMPARE_AND_SWAP(TYPE, SIZE)\t\t\t     \\\n+\t\t\t\t\t\t\t\t\t     \\\n+TYPE\t\t\t\t\t\t\t\t\t     \\\n+__sync_val_compare_and_swap_##SIZE (TYPE *ptr, TYPE oldval, TYPE newval)     \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  unsigned int *wordptr = (unsigned int *)((__UINTPTR_TYPE__ ) ptr & ~3UL);  \\\n+  int shift = ((__UINTPTR_TYPE__ ) ptr & 3UL) * 8;\t\t\t     \\\n+  unsigned int valmask = (1 << (SIZE * 8)) - 1;\t\t\t\t     \\\n+  unsigned int wordmask = ~(valmask << shift);\t\t\t\t     \\\n+  unsigned int oldword = *wordptr;\t\t\t\t\t     \\\n+  for (;;)\t\t\t\t\t\t\t\t     \\\n+    {\t\t\t\t\t\t\t\t\t     \\\n+      TYPE prevval = (oldword >> shift) & valmask;\t\t\t     \\\n+      /* Exit if the subword value previously read from memory is not */     \\\n+      /* equal to the expected value OLDVAL.  */\t\t\t     \\\n+      if (__builtin_expect (prevval != oldval, 0))\t\t\t     \\\n+\treturn prevval;\t\t\t\t\t\t\t     \\\n+      unsigned int newword = oldword & wordmask;\t\t\t     \\\n+      newword |= ((unsigned int) newval) << shift;\t\t\t     \\\n+      unsigned int prevword\t\t\t\t\t\t     \\\n+\t  = __sync_val_compare_and_swap_4 (wordptr, oldword, newword);\t     \\\n+      /* Exit only if the compare-and-swap succeeds on the whole word */     \\\n+      /* (i.e. the contents of *WORDPTR have not changed since the last */   \\\n+      /* memory read).  */\t\t\t\t\t\t     \\\n+      if (__builtin_expect (prevword == oldword, 1))\t\t\t     \\\n+\treturn oldval;\t\t\t\t\t\t\t     \\\n+      oldword = prevword;\t\t\t\t\t\t     \\\n+    }\t\t\t\t\t\t\t\t\t     \\\n+}\t\t\t\t\t\t\t\t\t     \\\n+\t\t\t\t\t\t\t\t\t     \\\n+bool\t\t\t\t\t\t\t\t\t     \\\n+__sync_bool_compare_and_swap_##SIZE (TYPE *ptr, TYPE oldval, TYPE newval)    \\\n+{\t\t\t\t\t\t\t\t\t     \\\n+  return __sync_val_compare_and_swap_##SIZE (ptr, oldval, newval) == oldval; \\\n+}\n+\n+__SYNC_SUBWORD_COMPARE_AND_SWAP (unsigned char, 1)\n+__SYNC_SUBWORD_COMPARE_AND_SWAP (unsigned short, 2)"}, {"sha": "ede0bf0f87dd35ab7221af3c5ca92f6e6e1a2b4b", "filename": "libgcc/config/nvptx/t-nvptx", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "patch": "@@ -1,5 +1,6 @@\n LIB2ADD=$(srcdir)/config/nvptx/reduction.c \\\n-\t$(srcdir)/config/nvptx/mgomp.c\n+\t$(srcdir)/config/nvptx/mgomp.c \\\n+\t$(srcdir)/config/nvptx/atomic.c\n \n LIB2ADDEH=\n LIB2FUNCS_EXCLUDE=__main"}, {"sha": "d0e82b047909d48857e85cb5874a7d6a3e4c3b89", "filename": "libgomp/testsuite/libgomp.c-c++-common/reduction-16.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Freduction-16.c?ref=17dc08edc28f4fc25f6cd7b71f0d0a0d1ec2f833", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+#define N 512\n+\n+#define GENERATE_TEST(T)\t\\\n+int test_##T (void)\t\t\\\n+{\t\t\t\t\\\n+  T a[N], res = 0;\t\t\\\n+\t\t\t\t\\\n+  for (int i = 0; i < N; ++i)\t\\\n+    a[i] = i & 1;\t\t\\\n+\t\t\t\t\\\n+_Pragma(\"omp target teams distribute reduction(||:res) defaultmap(tofrom:scalar)\") \\\n+  for (int i = 0; i < N; ++i)\t\\\n+    res = res || a[i];\t\t\\\n+\t\t\t\t\\\n+  /* res should be non-zero.  */\\\n+  if (!res)\t\t\t\\\n+    return 1;\t\t\t\\\n+\t\t\t\t\\\n+_Pragma(\"omp target teams distribute reduction(&&:res) defaultmap(tofrom:scalar)\") \\\n+  for (int i = 0; i < N; ++i)\t\\\n+    res = res && a[i];\t\t\\\n+\t\t\t\t\\\n+  /* res should be zero.  */\t\\\n+  return res;\t\t\t\\\n+}\n+\n+GENERATE_TEST(char)\n+GENERATE_TEST(short)\n+GENERATE_TEST(int)\n+GENERATE_TEST(long)\n+#ifdef __SIZEOF_INT128__\n+GENERATE_TEST(__int128)\n+#endif\n+\n+int main(void)\n+{\n+  if (test_char ())\n+    abort ();\n+  if (test_short ())\n+    abort ();\n+  if (test_int ())\n+    abort ();\n+  if (test_long ())\n+    abort ();\n+#ifdef __SIZEOF_INT128__\n+  if (test___int128 ())\n+    abort ();\n+#endif\n+}"}]}