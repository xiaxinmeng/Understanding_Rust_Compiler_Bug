{"sha": "4b03970c423c1914d4fed9dfd56a1959c41626fb", "node_id": "C_kwDOANBUbNoAKDRiMDM5NzBjNDIzYzE5MTRkNGZlZDlkZmQ1NmExOTU5YzQxNjI2ZmI", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-05T12:44:16Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-05T12:44:16Z"}, "message": "Remove sanity checking in stream_out_histogram_value.\n\ngcc/ChangeLog:\n\n\t* value-prof.cc (stream_out_histogram_value): Remove sanity\n\tchecking.", "tree": {"sha": "7516b42f94ed199d840005432a3b1d7d53f92dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7516b42f94ed199d840005432a3b1d7d53f92dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b03970c423c1914d4fed9dfd56a1959c41626fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b03970c423c1914d4fed9dfd56a1959c41626fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b03970c423c1914d4fed9dfd56a1959c41626fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b03970c423c1914d4fed9dfd56a1959c41626fb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1cb43bc76de800efa0ade687b0cd28e62a5f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1cb43bc76de800efa0ade687b0cd28e62a5f82"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "9656ce5870d9b70f957a3b5d3a7e85f675befd39", "filename": "gcc/value-prof.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b03970c423c1914d4fed9dfd56a1959c41626fb/gcc%2Fvalue-prof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b03970c423c1914d4fed9dfd56a1959c41626fb/gcc%2Fvalue-prof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.cc?ref=4b03970c423c1914d4fed9dfd56a1959c41626fb", "patch": "@@ -331,18 +331,6 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)\n       /* When user uses an unsigned type with a big value, constant converted\n \t to gcov_type (a signed type) can be negative.  */\n       gcov_type value = hist->hvalue.counters[i];\n-      if (hist->type == HIST_TYPE_TOPN_VALUES\n-\t  || hist->type == HIST_TYPE_IOR)\n-\t/* Note that the IOR counter tracks pointer values and these can have\n-\t   sign bit set.  */\n-\t;\n-      else if (hist->type == HIST_TYPE_INDIR_CALL && i == 0)\n-\t/* 'all' counter overflow is stored as a negative value. Individual\n-\t   counters and values are expected to be non-negative.  */\n-\t;\n-      else\n-\tgcc_assert (value >= 0);\n-\n       streamer_write_gcov_count (ob, value);\n     }\n   if (hist->hvalue.next)"}]}