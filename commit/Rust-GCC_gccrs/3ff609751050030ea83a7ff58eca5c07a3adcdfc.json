{"sha": "3ff609751050030ea83a7ff58eca5c07a3adcdfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmNjA5NzUxMDUwMDMwZWE4M2E3ZmY1OGVjYTVjMDdhM2FkY2RmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-07T21:54:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-07T21:54:07Z"}, "message": "re PR c++/48969 (ICE with -std=c++0x)\n\n\tPR c++/48969\n\tPR c++/44175\ngcc/c-family/\n\t* c-common.c (max_tinst_depth): Lower default to 900.\ngcc/cp/\n\t* error.c (subst_to_string): New.\n\t(cp_printer): Use it for 'S'.\n\t(print_instantiation_partial_context_line): Handle subst context.\n\t* pt.c (push_tinst_level): Handle subst context.\n\t(deduction_tsubst_fntype): Don't track specific substitutions.\n\tUse push_tinst_level.\n\nFrom-SVN: r174772", "tree": {"sha": "98e87e498bdd1f36569c008ebee5e40e0895652a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98e87e498bdd1f36569c008ebee5e40e0895652a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff609751050030ea83a7ff58eca5c07a3adcdfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff609751050030ea83a7ff58eca5c07a3adcdfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff609751050030ea83a7ff58eca5c07a3adcdfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff609751050030ea83a7ff58eca5c07a3adcdfc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "783c26ae6798141f9822f52b45b24abf685c0afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783c26ae6798141f9822f52b45b24abf685c0afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783c26ae6798141f9822f52b45b24abf685c0afc"}], "stats": {"total": 805, "additions": 451, "deletions": 354}, "files": [{"sha": "97913c477ff11fa846d85d495d56e8a6ec4078f4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,5 +1,7 @@\n 2011-06-07  Jason Merrill  <jason@redhat.com>\n \n+\t* c-common.c (max_tinst_depth): Lower default to 900.\n+\n \t* c-format.c (gcc_cxxdiag_char_table): Add 'S' format.\n \n 2011-06-07  Richard Guenther  <rguenther@suse.de>"}, {"sha": "37a5f1e45d447c854bc3156b00b46a376c2154b9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -255,10 +255,13 @@ int flag_use_repository;\n enum cxx_dialect cxx_dialect = cxx98;\n \n /* Maximum template instantiation depth.  This limit exists to limit the\n-   time it takes to notice excessively recursive template instantiations;\n-   the default value of 1024 is likely to be in the next C++ standard.  */\n+   time it takes to notice excessively recursive template instantiations.\n \n-int max_tinst_depth = 1024;\n+   The default is lower than the 1024 recommended by the C++0x standard\n+   because G++ runs out of stack before 1024 with highly recursive template\n+   argument deduction substitution (g++.dg/cpp0x/enum11.C).  */\n+\n+int max_tinst_depth = 900;\n \n /* The elements of `ridpointers' are identifier nodes for the reserved\n    type names and storage classes.  It is indexed by a RID_... value.  */"}, {"sha": "5b47f21d2622313f4f473149032fcdcf4ae3cf32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,5 +1,14 @@\n 2011-06-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48969\n+\tPR c++/44175\n+\t* error.c (subst_to_string): New.\n+\t(cp_printer): Use it for 'S'.\n+\t(print_instantiation_partial_context_line): Handle subst context.\n+\t* pt.c (push_tinst_level): Handle subst context.\n+\t(deduction_tsubst_fntype): Don't track specific substitutions.\n+\tUse push_tinst_level.\n+\n \t* pt.c (deduction_tsubst_fntype): Use push_deduction_access_scope.\n \t(fn_type_unification): Don't call push_deduction_access_scope here.\n "}, {"sha": "d9652dc10efa05259b9c9c16c204bafc0d62660c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -2665,6 +2665,32 @@ args_to_string (tree p, int verbose)\n   return pp_formatted_text (cxx_pp);\n }\n \n+/* Pretty-print a deduction substitution (from deduction_tsubst_fntype).  P\n+   is a TREE_LIST with purpose the TEMPLATE_DECL, value the template\n+   arguments.  */\n+\n+static const char *\n+subst_to_string (tree p)\n+{\n+  tree decl = TREE_PURPOSE (p);\n+  tree targs = TREE_VALUE (p);\n+  tree tparms = DECL_TEMPLATE_PARMS (decl);\n+  int flags = TFF_DECL_SPECIFIERS|TFF_TEMPLATE_HEADER;\n+\n+  if (p == NULL_TREE)\n+    return \"\";\n+\n+  reinit_cxx_pp ();\n+  dump_template_decl (TREE_PURPOSE (p), flags);\n+  pp_cxx_whitespace (cxx_pp);\n+  pp_cxx_left_bracket (cxx_pp);\n+  pp_cxx_ws_string (cxx_pp, M_(\"with\"));\n+  pp_cxx_whitespace (cxx_pp);\n+  dump_template_bindings (tparms, targs, NULL);\n+  pp_cxx_right_bracket (cxx_pp);\n+  return pp_formatted_text (cxx_pp);\n+}\n+\n static const char *\n cv_to_string (tree p, int v)\n {\n@@ -2888,38 +2914,34 @@ print_instantiation_partial_context_line (diagnostic_context *context,\n   expanded_location xloc;\n   xloc = expand_location (loc);\n \n-  if (t != NULL) \n+  if (context->show_column)\n+    pp_verbatim (context->printer, _(\"%s:%d:%d:   \"),\n+\t\t xloc.file, xloc.line, xloc.column);\n+  else\n+    pp_verbatim (context->printer, _(\"%s:%d:   \"),\n+\t\t xloc.file, xloc.line);\n+\n+  if (t != NULL)\n     {\n-      const char *str;\n-      str = decl_as_string_translate (t->decl,\n-\t\t\t\t      TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE);\n-      if (context->show_column)\n+      if (TREE_CODE (t->decl) == TREE_LIST)\n \tpp_verbatim (context->printer,\n \t\t     recursive_p\n-\t\t     ? _(\"%s:%d:%d:   recursively instantiated from %qs\\n\")\n-\t\t     : _(\"%s:%d:%d:   instantiated from %qs\\n\"),\n-\t\t     xloc.file, xloc.line, xloc.column, str);\n+\t\t     ? _(\"recursively required by substitution of %qS\\n\")\n+\t\t     : _(\"required by substitution of %qS\\n\"),\n+\t\t     t->decl);\n       else\n \tpp_verbatim (context->printer,\n \t\t     recursive_p\n-\t\t     ? _(\"%s:%d:   recursively instantiated from %qs\\n\")\n-\t\t     : _(\"%s:%d:   recursively instantiated from %qs\\n\"),\n-\t\t     xloc.file, xloc.line, str);\n+\t\t     ? _(\"recursively required from %q#D\\n\")\n+\t\t     : _(\"required from %q#D\\n\"),\n+\t\t     t->decl);\n     }\n   else\n     {\n-      if (context->show_column)\n-\tpp_verbatim (context->printer, \n-\t\t     recursive_p\n-\t\t     ? _(\"%s:%d:%d:   recursively instantiated from here\")\n-\t\t     : _(\"%s:%d:%d:   instantiated from here\"),\n-\t\t     xloc.file, xloc.line, xloc.column);\n-      else\n-\tpp_verbatim (context->printer,\n-\t\t     recursive_p\n-\t\t     ? _(\"%s:%d:   recursively instantiated from here\")\n-\t\t     : _(\"%s:%d:   instantiated from here\"),\n-\t\t     xloc.file, xloc.line);\n+      pp_verbatim (context->printer,\n+\t\t   recursive_p\n+\t\t   ? _(\"recursively required from here\")\n+\t\t   : _(\"required from here\"));\n     }\n }\n \n@@ -3093,6 +3115,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'O': result = op_to_string (next_tcode);\t\tbreak;\n     case 'P': result = parm_to_string (next_int);\t\tbreak;\n     case 'Q': result = assop_to_string (next_tcode);\t\tbreak;\n+    case 'S': result = subst_to_string (next_tree);\t\tbreak;\n     case 'T': result = type_to_string (next_tree, verbose);\tbreak;\n     case 'V': result = cv_to_string (next_tree, verbose);\tbreak;\n "}, {"sha": "f93fa7fd6cc1afa9eeec8f7cad3a33c1405bda73", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 124, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7490,16 +7490,15 @@ push_tinst_level (tree d)\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n-      /* If the instantiation in question still has unbound template parms,\n-\t we don't really care if we can't instantiate it, so just return.\n-\t This happens with base instantiation for implicit `typename'.  */\n-      if (uses_template_parms (d))\n-\treturn 0;\n-\n       last_template_error_tick = tinst_level_tick;\n-      error (\"template instantiation depth exceeds maximum of %d (use \"\n-\t     \"-ftemplate-depth= to increase the maximum) instantiating %qD\",\n-\t     max_tinst_depth, d);\n+      if (TREE_CODE (d) == TREE_LIST)\n+\terror (\"template instantiation depth exceeds maximum of %d (use \"\n+\t       \"-ftemplate-depth= to increase the maximum) substituting %qS\",\n+\t       max_tinst_depth, d);\n+      else\n+\terror (\"template instantiation depth exceeds maximum of %d (use \"\n+\t       \"-ftemplate-depth= to increase the maximum) instantiating %qD\",\n+\t       max_tinst_depth, d);\n \n       print_instantiation_context ();\n \n@@ -13594,11 +13593,6 @@ check_instantiated_args (tree tmpl, tree args, tsubst_flags_t complain)\n   return result;\n }\n \n-DEF_VEC_O (spec_entry);\n-DEF_VEC_ALLOC_O (spec_entry,gc);\n-static GTY(()) VEC(spec_entry,gc) *current_deduction_vec;\n-static GTY((param_is (spec_entry))) htab_t current_deduction_htab;\n-\n /* In C++0x, it's possible to have a function template whose type depends\n    on itself recursively.  This is most obvious with decltype, but can also\n    occur with enumeration scope (c++/48969).  So we need to catch infinite\n@@ -13609,133 +13603,48 @@ static GTY((param_is (spec_entry))) htab_t current_deduction_htab;\n    f<N-1> across all integers, and returns error_mark_node for all the\n    substitutions back up to the initial one.\n \n-   This is, of course, not reentrant.\n-\n-   Use of a VEC here is O(n^2) in the depth of function template argument\n-   deduction substitution, but using a hash table creates a lot of constant\n-   overhead for the typical case of very low depth.  So to make the typical\n-   case fast we start out with a VEC and switch to a hash table only if\n-   depth gets to be significant; in one metaprogramming testcase, even at\n-   depth 80 the overhead of the VEC relative to a hash table was only about\n-   0.5% of compile time.  */\n+   This is, of course, not reentrant.  */\n \n static tree\n deduction_tsubst_fntype (tree fn, tree targs)\n {\n   static bool excessive_deduction_depth;\n-\n-  unsigned i;\n-  spec_entry **slot;\n-  spec_entry *p;\n-  spec_entry elt;\n-  tree r;\n-  hashval_t hash;\n+  static int deduction_depth;\n+  location_t save_loc = input_location;\n \n   tree fntype = TREE_TYPE (fn);\n+  tree tinst;\n+  tree r;\n \n-  /* We don't need to worry about this in C++98.  */\n-  if (cxx_dialect < cxx0x)\n-    {\n-      push_deduction_access_scope (fn);\n-      r = tsubst (fntype, targs, tf_none, NULL_TREE);\n-      pop_deduction_access_scope (fn);\n-      return r;\n-    }\n-\n-  /* If we're seeing a lot of recursion, switch over to a hash table.  The\n-     constant 40 is fairly arbitrary.  */\n-  if (!current_deduction_htab\n-      && VEC_length (spec_entry, current_deduction_vec) > 40)\n-    {\n-      current_deduction_htab = htab_create_ggc (40*2, hash_specialization,\n-\t\t\t\t\t\teq_specializations, ggc_free);\n-      FOR_EACH_VEC_ELT (spec_entry, current_deduction_vec, i, p)\n-\t{\n-\t  slot = (spec_entry **) htab_find_slot (current_deduction_htab,\n-\t\t\t\t\t\t p, INSERT);\n-\t  *slot = ggc_alloc_spec_entry ();\n-\t  **slot = *p;\n-\t}\n-      VEC_free (spec_entry, gc, current_deduction_vec);\n-    }\n-\n-  /* Now check everything in the vector, if any.  */\n-  FOR_EACH_VEC_ELT (spec_entry, current_deduction_vec, i, p)\n-    if (p->tmpl == fn && comp_template_args (p->args, targs))\n-      {\n-\tp->spec = error_mark_node;\n-\treturn error_mark_node;\n-      }\n-\n-  elt.tmpl = fn;\n-  elt.args = targs;\n-  elt.spec = NULL_TREE;\n-\n-  /* If we've created a hash table, look there.  */\n-  if (current_deduction_htab)\n-    {\n-      if (htab_elements (current_deduction_htab)\n-\t  > (unsigned) max_tinst_depth)\n-\t{\n-\t  /* Trying to recurse across all integers or some such.  */\n-\t  excessive_deduction_depth = true;\n-\t  return error_mark_node;\n-\t}\n+  if (excessive_deduction_depth)\n+    return error_mark_node;\n \n-      hash = hash_specialization (&elt);\n-      slot = (spec_entry **)\n-\thtab_find_slot_with_hash (current_deduction_htab, &elt, hash, INSERT);\n-      if (*slot)\n-\t{\n-\t  /* We already have an entry for this.  */\n-\t  (*slot)->spec = error_mark_node;\n-\t  return error_mark_node;\n-\t}\n-      else\n-\t{\n-\t  /* Create a new entry.  */\n-\t  *slot = ggc_alloc_spec_entry ();\n-\t  **slot = elt;\n-\t}\n-    }\n-  else\n+  tinst = build_tree_list (fn, targs);\n+  if (!push_tinst_level (tinst))\n     {\n-      /* No hash table, so add it to the VEC.  */\n-      hash = 0;\n-      VEC_safe_push (spec_entry, gc, current_deduction_vec, &elt);\n+      excessive_deduction_depth = true;\n+      ggc_free (tinst);\n+      return error_mark_node;\n     }\n \n+  input_location = DECL_SOURCE_LOCATION (fn);\n+  ++deduction_depth;\n   push_deduction_access_scope (fn);\n   r = tsubst (fntype, targs, tf_none, NULL_TREE);\n   pop_deduction_access_scope (fn);\n+  --deduction_depth;\n+  input_location = save_loc;\n \n-  /* After doing the substitution, make sure we didn't hit it again.  Note\n-     that we might have switched to a hash table during tsubst.  */\n-  if (current_deduction_htab)\n-    {\n-      if (hash == 0)\n-\thash = hash_specialization (&elt);\n-      slot = (spec_entry **)\n-\thtab_find_slot_with_hash (current_deduction_htab, &elt, hash,\n-\t\t\t\t  NO_INSERT);\n-      if ((*slot)->spec == error_mark_node)\n-\tr = error_mark_node;\n-      htab_clear_slot (current_deduction_htab, (void**)slot);\n-    }\n-  else\n-    {\n-      if (VEC_last (spec_entry, current_deduction_vec)->spec\n-\t  == error_mark_node)\n-\tr = error_mark_node;\n-      VEC_pop (spec_entry, current_deduction_vec);\n-    }\n   if (excessive_deduction_depth)\n     {\n       r = error_mark_node;\n-      if (htab_elements (current_deduction_htab) == 0)\n+      if (deduction_depth == 0)\n \t/* Reset once we're all the way out.  */\n \texcessive_deduction_depth = false;\n     }\n+\n+  pop_tinst_level ();\n+  ggc_free (tinst);\n   return r;\n }\n \n@@ -19562,11 +19471,6 @@ print_template_statistics (void)\n \t   \"%f collisions\\n\", (long) htab_size (type_specializations),\n \t   (long) htab_elements (type_specializations),\n \t   htab_collisions (type_specializations));\n-  if (current_deduction_htab)\n-    fprintf (stderr, \"current_deduction_htab: size %ld, %ld elements, \"\n-\t     \"%f collisions\\n\", (long) htab_size (current_deduction_htab),\n-\t     (long) htab_elements (current_deduction_htab),\n-\t     htab_collisions (current_deduction_htab));\n }\n \n #include \"gt-cp-pt.h\""}, {"sha": "ab0cf0a9b7e8773d60d58dd88c9e012c90d2d43c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -2069,7 +2069,8 @@ Set the maximum instantiation depth for template classes to @var{n}.\n A limit on the template instantiation depth is needed to detect\n endless recursions during template class instantiation.  ANSI/ISO C++\n conforming programs must not rely on a maximum depth greater than 17\n-(changed to 1024 in C++0x).\n+(changed to 1024 in C++0x).  The default value is 900, as the compiler\n+can run out of stack space before hitting 1024 in some situations.\n \n @item -fno-threadsafe-statics\n @opindex fno-threadsafe-statics"}, {"sha": "b9f3aa3313b793da974425b8b5c8575cb0998040", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,3 +1,131 @@\n+2011-06-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/prune.exp: Look for \"required\" rather than \"instantiated\".\n+\t* g++.dg/abi/mangle11.C: Likewise.\n+\t* g++.dg/abi/mangle12.C: Likewise.\n+\t* g++.dg/abi/mangle17.C: Likewise.\n+\t* g++.dg/abi/mangle20-2.C: Likewise.\n+\t* g++.dg/abi/pragma-pack1.C: Likewise.\n+\t* g++.dg/cpp0x/decltype26.C: Likewise.\n+\t* g++.dg/cpp0x/decltype28.C: Likewise.\n+\t* g++.dg/cpp0x/decltype29.C: Likewise.\n+\t* g++.dg/cpp0x/enum11.C: Likewise.\n+\t* g++.dg/cpp0x/forw_enum8.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-errloc2.C: Likewise.\n+\t* g++.dg/cpp0x/pr47416.C: Likewise.\n+\t* g++.dg/ext/case-range2.C: Likewise.\n+\t* g++.dg/ext/case-range3.C: Likewise.\n+\t* g++.dg/gomp/for-19.C: Likewise.\n+\t* g++.dg/gomp/pr37533.C: Likewise.\n+\t* g++.dg/gomp/pr38639.C: Likewise.\n+\t* g++.dg/gomp/tpl-parallel-2.C: Likewise.\n+\t* g++.dg/inherit/base3.C: Likewise.\n+\t* g++.dg/inherit/using6.C: Likewise.\n+\t* g++.dg/init/placement4.C: Likewise.\n+\t* g++.dg/init/reference3.C: Likewise.\n+\t* g++.dg/lookup/scoped6.C: Likewise.\n+\t* g++.dg/lookup/using7.C: Likewise.\n+\t* g++.dg/other/abstract1.C: Likewise.\n+\t* g++.dg/other/error10.C: Likewise.\n+\t* g++.dg/other/error5.C: Likewise.\n+\t* g++.dg/other/field1.C: Likewise.\n+\t* g++.dg/other/offsetof5.C: Likewise.\n+\t* g++.dg/parse/bitfield2.C: Likewise.\n+\t* g++.dg/parse/constant4.C: Likewise.\n+\t* g++.dg/parse/crash20.C: Likewise.\n+\t* g++.dg/parse/invalid-op1.C: Likewise.\n+\t* g++.dg/parse/non-dependent2.C: Likewise.\n+\t* g++.dg/parse/template18.C: Likewise.\n+\t* g++.dg/tc1/dr152.C: Likewise.\n+\t* g++.dg/tc1/dr166.C: Likewise.\n+\t* g++.dg/tc1/dr176.C: Likewise.\n+\t* g++.dg/tc1/dr213.C: Likewise.\n+\t* g++.dg/template/access11.C: Likewise.\n+\t* g++.dg/template/access2.C: Likewise.\n+\t* g++.dg/template/access3.C: Likewise.\n+\t* g++.dg/template/access7.C: Likewise.\n+\t* g++.dg/template/arg7.C: Likewise.\n+\t* g++.dg/template/cond2.C: Likewise.\n+\t* g++.dg/template/crash13.C: Likewise.\n+\t* g++.dg/template/crash40.C: Likewise.\n+\t* g++.dg/template/crash7.C: Likewise.\n+\t* g++.dg/template/crash84.C: Likewise.\n+\t* g++.dg/template/ctor5.C: Likewise.\n+\t* g++.dg/template/defarg13.C: Likewise.\n+\t* g++.dg/template/defarg14.C: Likewise.\n+\t* g++.dg/template/dtor7.C: Likewise.\n+\t* g++.dg/template/eh2.C: Likewise.\n+\t* g++.dg/template/error2.C: Likewise.\n+\t* g++.dg/template/error43.C: Likewise.\n+\t* g++.dg/template/friend32.C: Likewise.\n+\t* g++.dg/template/injected1.C: Likewise.\n+\t* g++.dg/template/instantiate1.C: Likewise.\n+\t* g++.dg/template/instantiate3.C: Likewise.\n+\t* g++.dg/template/instantiate5.C: Likewise.\n+\t* g++.dg/template/instantiate7.C: Likewise.\n+\t* g++.dg/template/local6.C: Likewise.\n+\t* g++.dg/template/lookup2.C: Likewise.\n+\t* g++.dg/template/member5.C: Likewise.\n+\t* g++.dg/template/memfriend15.C: Likewise.\n+\t* g++.dg/template/memfriend16.C: Likewise.\n+\t* g++.dg/template/memfriend17.C: Likewise.\n+\t* g++.dg/template/memfriend7.C: Likewise.\n+\t* g++.dg/template/meminit1.C: Likewise.\n+\t* g++.dg/template/nested3.C: Likewise.\n+\t* g++.dg/template/non-type-template-argument-1.C: Likewise.\n+\t* g++.dg/template/nontype12.C: Likewise.\n+\t* g++.dg/template/nontype13.C: Likewise.\n+\t* g++.dg/template/nontype6.C: Likewise.\n+\t* g++.dg/template/pr23510.C: Likewise.\n+\t* g++.dg/template/pr35240.C: Likewise.\n+\t* g++.dg/template/ptrmem15.C: Likewise.\n+\t* g++.dg/template/ptrmem6.C: Likewise.\n+\t* g++.dg/template/qualified-id1.C: Likewise.\n+\t* g++.dg/template/qualttp20.C: Likewise.\n+\t* g++.dg/template/qualttp3.C: Likewise.\n+\t* g++.dg/template/qualttp4.C: Likewise.\n+\t* g++.dg/template/qualttp5.C: Likewise.\n+\t* g++.dg/template/qualttp6.C: Likewise.\n+\t* g++.dg/template/qualttp7.C: Likewise.\n+\t* g++.dg/template/qualttp8.C: Likewise.\n+\t* g++.dg/template/recurse.C: Likewise.\n+\t* g++.dg/template/recurse2.C: Likewise.\n+\t* g++.dg/template/ref5.C: Likewise.\n+\t* g++.dg/template/scope2.C: Likewise.\n+\t* g++.dg/template/sfinae10.C: Likewise.\n+\t* g++.dg/template/sfinae3.C: Likewise.\n+\t* g++.dg/template/sizeof3.C: Likewise.\n+\t* g++.dg/template/static9.C: Likewise.\n+\t* g++.dg/template/template-id-2.C: Likewise.\n+\t* g++.dg/template/typedef13.C: Likewise.\n+\t* g++.dg/template/typename4.C: Likewise.\n+\t* g++.dg/template/using14.C: Likewise.\n+\t* g++.dg/template/using2.C: Likewise.\n+\t* g++.dg/template/warn1.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-13.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-15.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-16.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-17.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-18.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-19.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-20.C: Likewise.\n+\t* g++.dg/warn/Wparentheses-23.C: Likewise.\n+\t* g++.dg/warn/Wstrict-aliasing-3.C: Likewise.\n+\t* g++.dg/warn/noeffect2.C: Likewise.\n+\t* g++.dg/warn/noeffect4.C: Likewise.\n+\t* g++.dg/warn/pr8570.C: Likewise.\n+\t* g++.old-deja/g++.brendan/init2.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec6.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash10.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash36.C: Likewise.\n+\t* g++.old-deja/g++.pt/derived3.C: Likewise.\n+\t* g++.old-deja/g++.pt/error2.C: Likewise.\n+\t* g++.old-deja/g++.pt/explicit70.C: Likewise.\n+\t* g++.old-deja/g++.pt/infinite1.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp89.C: Likewise.\n+\t* g++.old-deja/g++.pt/overload7.C: Likewise.\n+\t* g++.old-deja/g++.pt/vaarg3.C: Likewise.\n+\n 2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \t    Iain Sandoe  <iains@gcc.gnu.org>\n "}, {"sha": "722d43c85a83e4e451c456bee38400aeadbafd74", "filename": "gcc/testsuite/g++.dg/abi/mangle11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7,4 +7,4 @@ struct S {\n   typedef int X;\n };\n \n-template void f<S> (int); // { dg-message \"instantiated\" }\n+template void f<S> (int); // { dg-message \"required\" }"}, {"sha": "92f49c22fdf308ac28450fbc2a70ebc7b506bd87", "filename": "gcc/testsuite/g++.dg/abi/mangle12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,4 +8,4 @@ struct S {\n   typedef int X;\n };\n \n-template void f<S> (int);  // { dg-message \"instantiated\" }\n+template void f<S> (int);  // { dg-message \"required\" }"}, {"sha": "f98e2717d847d325be201bc424aa24acf2cd00f1", "filename": "gcc/testsuite/g++.dg/abi/mangle17.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -5,7 +5,7 @@ enum E { e = 3 };\n template <int I> struct S {};\n \n template <int I> void f (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n-template void f<7>(S<7 + e + int (3.7)>); // { dg-message \"instantiated\" }\n+template void f<7>(S<7 + e + int (3.7)>); // { dg-message \"required\" }\n \n template <int I> void g (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n-template void g<7>(S<7 + e + int (3.7)>); // { dg-message \"instantiated\" }\n+template void g<7>(S<7 + e + int (3.7)>); // { dg-message \"required\" }"}, {"sha": "5ba6bac03a677854781ff6ad10deeebee05277ce", "filename": "gcc/testsuite/g++.dg/abi/mangle20-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,7 +10,7 @@\n template <int I> void f(int (*)[2]) {} // { dg-warning \"mangled name\" }\n template <int I> void g(int (*)[I+2]) {}\n \n-template void f<1>(int (*)[2]);  // { dg-message \"instantiated\" }\n+template void f<1>(int (*)[2]);  // { dg-message \"required\" }\n //  { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvPALi2E_i\\[: \\t\\n\\]\" } }\n template void g<1>(int (*)[3]);\n //  { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvPAplT_Li2E_i\\[: \\t\\n\\]\" } }"}, {"sha": "9b76071c9d86ee46774c6f6d169fc1bb7a78a472", "filename": "gcc/testsuite/g++.dg/abi/pragma-pack1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpragma-pack1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpragma-pack1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpragma-pack1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -23,7 +23,7 @@ template struct T<int>;   /* T<int> is instantiated here */\n template int f<int>();\n \n #pragma pack(4)\n-template struct T<float>; /* T<float> is instantiated here */\n+template struct T<float>; /* T<float> is required here */\n template int f<double>();\n \n int main()"}, {"sha": "a81d411558c3848dfb72b7a98b3be70c65231d18", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -3,7 +3,7 @@\n struct A { };\n \n template <class T>\n-decltype(f(T())) f(T t)\n+decltype(f(T())) f(T t)\t\t// { dg-error \"depth\" }\n {\n   return f(t);\n }"}, {"sha": "c97fd202c1dc8be9537192936fa1eab1239f9b05", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype28.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,8 +9,8 @@ void ft (F f, typename enable_if<N!=0, int>::type) {}\n \n template< class F, int N >\n decltype(ft<F, N-1> (F(), 0))\n-ft (F f, typename enable_if<N==0, int>::type) {}\n+ft (F f, typename enable_if<N==0, int>::type) {} // { dg-error \"depth\" }\n \n int main() {\n-  ft<struct a*, 2> (0, 0);\n+  ft<struct a*, 2> (0, 0);\t// { dg-message \"from here\" }\n }"}, {"sha": "2bb79d07e78aa855790163d2ad727b2a44a000e2", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,7 +10,7 @@ ft() {}\n \n template<class F, int N>\n decltype (ft<F> (F()))\n-ft() {}\n+ft() {}\t\t\t\t// { dg-error \"depth\" }\n \n int main() {\n     ft<struct a*, 0>();\t\t// { dg-error \"no match\" }"}, {"sha": "156c765beaf38359d26aa1f595150b067c451ed7", "filename": "gcc/testsuite/g++.dg/cpp0x/enum11.C", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,10 +1,14 @@\n // PR c++/48969\n-// { dg-options -std=c++0x }\n+// { dg-options \"-std=c++0x -ftemplate-depth=10\" }\n \n template<unsigned int N> struct Pair { };\n struct Foo { enum { Mask = 1 }; } foo;\n template<typename A, typename B> class Pair<A::Mask | B::Mask>\n-operator|(const A &, const B &)\n+operator|(const A &, const B &)\t// { dg-message \"substitution\" }\n { }\n \n-Pair<Foo::Mask> f = foo|foo;\n+Pair<Foo::Mask> f = foo|foo;\t// { dg-message \"no match\" }\n+\n+// { dg-prune-output \"note\" }\n+// { dg-prune-output \"here\" }\n+// { dg-prune-output \"instantiation depth\" }"}, {"sha": "69e73119e0c5a6835bd1e07144c3e94e9d081079", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -15,7 +15,7 @@ template<typename T> struct S2\n     enum E : int;   // { dg-error \"previous definition\" }\n     enum E : T;     // { dg-error \"different underlying type\" }\n };\n-template struct S2<short>; // { dg-message \"instantiated from here\" }\n+template struct S2<short>; // { dg-message \"required from here\" }\n \n //This error is diagnosed at compilation time\n template<typename T> struct S3"}, {"sha": "f94d64ec0ea351aec3fbe7aaf477faa5371ca7b1", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-errloc2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-errloc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-errloc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-errloc2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -15,5 +15,5 @@ void f()\n \n int main()\n {\n-  f<A>();\t\t\t// { dg-message \"instantiated\" }\n+  f<A>();\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "55426c1f81d9473b255983aa2d4bbeae664320ea", "filename": "gcc/testsuite/g++.dg/cpp0x/pr47416.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr47416.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -210,7 +210,7 @@ namespace boost\n   private:table table_;\n   public: unordered_map (size_type n = boost::unordered_detail::default_bucket_count,\n \t\t\t hasher hf = hasher (), key_equal eql = key_equal (),\n-\t\t\t allocator_type a = allocator_type ()):table_ (n, hf, eql, a)\t// { dg-message \"instantiated\" }\n+\t\t\t allocator_type a = allocator_type ()):table_ (n, hf, eql, a)\t// { dg-message \"required\" }\n     {\n     }\n   };\n@@ -220,6 +220,6 @@ void\n foo (const int &a)\n {\n   typedef boost::unordered_map < std::string, int >Name2Port;\n-  Name2Port b;\t\t\t// { dg-message \"instantiated\" }\n+  Name2Port b;\t\t\t// { dg-message \"required\" }\n   std::make_pair (a, b);\n }"}, {"sha": "985ded3362e1712063d858b0f91c3ab8c0813c4f", "filename": "gcc/testsuite/g++.dg/ext/case-range2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,6 +22,6 @@ int f (int i)\n   switch (i) {\n     case 1 ... 10: return i + 1;       // { dg-error \"first entry\" }\n     case 3 ... 5 : return i + 3;       // { dg-error \"duplicate\" }\n-    default: return f2 (i);            // { dg-message \"instantiated\" }\n+    default: return f2 (i);            // { dg-message \"required\" }\n   }\n }"}, {"sha": "0b0c1fc69a8c777540bba1c5be1e986aac082e3b", "filename": "gcc/testsuite/g++.dg/ext/case-range3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcase-range3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -18,6 +18,6 @@ int f (int i)\n {\n   switch (i) {\n     case 1 ... 10: return i + 1;      // { dg-warning \"non-standard\" }\n-    default: return f2 (i);           // { dg-message \"instantiated\" }\n+    default: return f2 (i);           // { dg-message \"required\" }\n   }\n }"}, {"sha": "7c56719cc1615ca2816523fd41f400670a83c941", "filename": "gcc/testsuite/g++.dg/gomp/for-19.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ffor-19.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -34,8 +34,8 @@ f3 (void)\n int\n main (void)\n {\n-  f1 <int> ();\t\t// { dg-message \"instantiated from here\" }\n+  f1 <int> ();\t\t// { dg-message \"required from here\" }\n   f2 <int> ();\n   f3 <const char *> ();\n-  f3 <void *> ();\t// { dg-message \"instantiated from here\" }\n+  f3 <void *> ();\t// { dg-message \"required from here\" }\n }"}, {"sha": "4cbf256200bd2317e4f42edc5cfdc4d49d01d6d2", "filename": "gcc/testsuite/g++.dg/gomp/pr37533.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37533.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37533.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr37533.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -43,8 +43,8 @@ f4 ()\n void\n bar ()\n {\n-  f1<0> ();\t\t\t// { dg-message \"instantiated from here\" }\n-  f2<1> ();\t\t\t// { dg-message \"instantiated from here\" }\n-  f3<int> ();\t\t\t// { dg-message \"instantiated from here\" }\n-  f4<int> ();\t\t\t// { dg-message \"instantiated from here\" }\n+  f1<0> ();\t\t\t// { dg-message \"required from here\" }\n+  f2<1> ();\t\t\t// { dg-message \"required from here\" }\n+  f3<int> ();\t\t\t// { dg-message \"required from here\" }\n+  f4<int> ();\t\t\t// { dg-message \"required from here\" }\n }"}, {"sha": "e7145ffbeb9fd5bc886ae960be0b2396d3df28d1", "filename": "gcc/testsuite/g++.dg/gomp/pr38639.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr38639.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr38639.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr38639.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -13,5 +13,5 @@ foo ()\n void\n bar ()\n {\n-  foo<0> ();\t\t\t\t// { dg-message \"instantiated from here\" }\n+  foo<0> ();\t\t\t\t// { dg-message \"required from here\" }\n }"}, {"sha": "93e076047e7f8bd95e29e2808f3a201788d3d543", "filename": "gcc/testsuite/g++.dg/gomp/tpl-parallel-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-parallel-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-parallel-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftpl-parallel-2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -17,4 +17,4 @@ void S<T>::test()\n \n template struct S<int>;\n template struct S<long>;\n-template struct S<float>;\t// { dg-message \"instantiated from here\" }\n+template struct S<float>;\t// { dg-message \"required from here\" }"}, {"sha": "313d04242918f93d2fc14d8189cff58a1b0782ec", "filename": "gcc/testsuite/g++.dg/inherit/base3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fbase3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -5,4 +5,4 @@ template<typename T> struct A : T {};  // { dg-error \"struct or class type\" }\n \n struct B;\n \n-A<void (B::*)()> a;  // { dg-message \"instantiated\" }\n+A<void (B::*)()> a;  // { dg-message \"required\" }"}, {"sha": "1877d671ae138b0e17234d48d4f08b9ca9c03bc9", "filename": "gcc/testsuite/g++.dg/inherit/using6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -12,4 +12,4 @@ template <typename T> struct TPL : A\n };\n \n TPL<int> i;\n-TPL<float> j; // { dg-message \"instantiated\" }\n+TPL<float> j; // { dg-message \"required\" }"}, {"sha": "3cfe27d63e634178cc34ac267b3eb9d6fca3f5e3", "filename": "gcc/testsuite/g++.dg/init/placement4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement4.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -27,6 +27,6 @@ void operator delete(void *p,Pool<T>& pool)\n int main ()\n {\n   Pool<int> pool;\n-  new (pool) A();\t\t// { dg-message \"instantiated\" }\n+  new (pool) A();\t\t// { dg-message \"required\" }\n   return 0;\n }"}, {"sha": "8cc5afd6f4c127dc320c29f9f92364d4267dd6cf", "filename": "gcc/testsuite/g++.dg/init/reference3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,5 +9,5 @@ T f()\n   T a = T();  // { dg-error \"value-initialization of reference\" }\n }\n \n-int &a = f<int&>(); // { dg-message \"instantiated from here\" }\n+int &a = f<int&>(); // { dg-message \"required from here\" }\n "}, {"sha": "51393961ab28f66735663f167ca915ec70ef4c19", "filename": "gcc/testsuite/g++.dg/lookup/scoped6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,7 +10,7 @@ public:\n class Bar {\n   Foo<int> foo_;\n public:\n-  Bar() {}  // { dg-message \"instantiated\" }\n+  Bar() {}  // { dg-message \"required\" }\n };\n \n template class Foo<int>;"}, {"sha": "0c75a2df6bab9dcc34bd191750fa87b37da231fc", "filename": "gcc/testsuite/g++.dg/lookup/using7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,4 +9,4 @@ template <typename T> struct B : A<T> // { dg-error \"incomplete\" }\n                  // { dg-error \"using\" \"using\" { target *-*-* } 8 }\n };\n \n-B<void> b; // { dg-message \"instantiated\" }\n+B<void> b; // { dg-message \"required\" }"}, {"sha": "53d767acd453026750d5d4807e1af647b186275b", "filename": "gcc/testsuite/g++.dg/other/abstract1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -35,7 +35,7 @@ template <class T> struct K {\n   T (*a)[2];   // { dg-error \"abstract class type\" }\n };\n \n-template struct K<Abstract>;  // { dg-message \"instantiated\" }\n+template struct K<Abstract>;  // { dg-message \"required\" }\n \n \n "}, {"sha": "5c17277abbf85db5b4fe9ad00265a2f749f828c1", "filename": "gcc/testsuite/g++.dg/other/error10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,6 +10,6 @@ void foo(const A<N> &a)\n \n void bar()\n {\n-    foo(A<0>()); // { dg-message \"instantiated from here\" \"\" }\n+    foo(A<0>()); // { dg-message \"required from here\" \"\" }\n }\n "}, {"sha": "44c4a4747a6d27ca8213a74fa3ca10447c31bbd6", "filename": "gcc/testsuite/g++.dg/other/error5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,4 +10,4 @@ template <typename T> struct S2 : S<T> {\n     using S<T>::operator typename S<T>::I*; // { dg-error \"operator S\\\\<int\\\\>\" \"\" }\n };\n \n-template struct S2<int>;  // { dg-message \"instantiated\" \"\" }\n+template struct S2<int>;  // { dg-message \"required\" \"\" }"}, {"sha": "a719135e3f9d035528e6421d47ca81239a505e83", "filename": "gcc/testsuite/g++.dg/other/field1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffield1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,4 +22,4 @@ template <> struct X<int> {\n   X();\n };\n \n-X<float> i; // { dg-message \"instantiated from\" \"\" }\n+X<float> i; // { dg-message \"required from\" \"\" }"}, {"sha": "b53b06ffb52e8bc713c249fb3866c7bf5ebf975c", "filename": "gcc/testsuite/g++.dg/other/offsetof5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -19,4 +19,4 @@ struct S\n   static const int j = offsetof (S, i);\t// { dg-warning \"invalid access|offsetof\" }\n };\n \n-int k = S<int>::j;\t\t\t// { dg-message \"instantiated from here\" }\n+int k = S<int>::j;\t\t\t// { dg-message \"required from here\" }"}, {"sha": "f84cc673e57475e66fcafe77040c47c251f0512b", "filename": "gcc/testsuite/g++.dg/parse/bitfield2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fbitfield2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,7 +22,7 @@ struct D\n   T t : 3;              // { dg-error \"non-integral type\" }\n };\n \n-D<double> d;            // { dg-message \"instantiated\" }\n+D<double> d;            // { dg-message \"required\" }\n \n template <typename T>\n struct E"}, {"sha": "626dd9e2e0558400ade17885357c40680c99908d", "filename": "gcc/testsuite/g++.dg/parse/constant4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -34,7 +34,7 @@ template <typename> struct X\n \n void Baz ()\n {\n-  Foo<int> (); // { dg-message \"instantiated\" \"\" }\n+  Foo<int> (); // { dg-message \"required\" \"\" }\n }\n \n   "}, {"sha": "b601408a581b5505a804056350b8a0507fb28838", "filename": "gcc/testsuite/g++.dg/parse/crash20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash20.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -11,4 +11,4 @@ template<typename T> struct A\n   typedef typename T::X Y; // { dg-error \"not a class\" \"\" }\n };\n \n-A<int>::Y y; // { dg-message \"instantiated from here\" \"\" }\n+A<int>::Y y; // { dg-message \"required from here\" \"\" }"}, {"sha": "8d745c1a61d53d594b21d4c21e4b220014740969", "filename": "gcc/testsuite/g++.dg/parse/invalid-op1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid-op1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -11,4 +11,4 @@ template <int I> struct A\n     };\n };\n \n-A<0>::B<0> a; // { dg-message \"instantiated\" }\n+A<0>::B<0> a; // { dg-message \"required\" }"}, {"sha": "fee66d495a46494ad22a5f171b99e73b538f9191", "filename": "gcc/testsuite/g++.dg/parse/non-dependent2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -31,7 +31,7 @@ int main()\n   Bar<int> bar;\n \n   bar.baz ();\n-  bar.foo (); // { dg-message \"instantiated\" \"\" }\n+  bar.foo (); // { dg-message \"required\" \"\" }\n   \n   return 0;\n }"}, {"sha": "4c2d2e7fb7b4620991063e7ebd863a1fd34e0286", "filename": "gcc/testsuite/g++.dg/parse/template18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate18.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -49,4 +49,4 @@ template<int I> void f2()\n   A::template B<I>::template b2<double>(0);\n }\n \n-template void f2<0>(); // { dg-message \"instantiated\" }\n+template void f2<0>(); // { dg-message \"required\" }"}, {"sha": "bf742ee9b8ae56e7be98efb26030dc2abbe69de4", "filename": "gcc/testsuite/g++.dg/tc1/dr152.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr152.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -34,5 +34,5 @@ namespace N2 {\n     // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 33 }\n   }\n \n-  template int foo<float>();  // { dg-message \"instantiated from here\" }\n+  template int foo<float>();  // { dg-message \"required from here\" }\n }"}, {"sha": "7ca275ed92d6f620f80103a2ec8aae39ce7875bf", "filename": "gcc/testsuite/g++.dg/tc1/dr166.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr166.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -32,7 +32,7 @@ namespace N {\n     template <> void f<double>(double )\n     { \n       M::B::x = 0; \n-      M::f<long>(0);   // { dg-message \"instantiated\" }\n+      M::f<long>(0);   // { dg-message \"required\" }\n     }\n \n     void g(void)\n@@ -47,7 +47,7 @@ namespace N {\n \n   template <> void f<int>(int )\n   { \n-    N::f<long>(0);        // { dg-message \"instantiated\" }\n+    N::f<long>(0);        // { dg-message \"required\" }\n     M::A::x = 0; \n     M::B::x = 0;       // { dg-error \"within this context\" }\n   }"}, {"sha": "7f4d83050e2d94d24bb525074e0ae60b482b7197", "filename": "gcc/testsuite/g++.dg/tc1/dr176.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr176.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -15,7 +15,7 @@ namespace N1 {\n     typename Derived::Base* p3;   // { dg-bogus \"\" \"injected class name in derived classes\" }\n   };\n \n-  template struct Derived<void>;  // { dg-bogus \"instantiated from here\" \"everything should be looked up at parsing time (after DR224)\" }\n+  template struct Derived<void>;  // { dg-bogus \"required from here\" \"everything should be looked up at parsing time (after DR224)\" }\n }\n \n "}, {"sha": "15438517be0f31bfd91182cc16557198d031e93c", "filename": "gcc/testsuite/g++.dg/tc1/dr213.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -23,5 +23,5 @@ int main()\n {\n   A<B> ab;\n   B b;\n-  ab.h(b);   // { dg-message \"instantiated\" }\n+  ab.h(b);   // { dg-message \"required\" }\n }"}, {"sha": "73e2caaf03fe0972f420b01b30d8a0eadc38e811", "filename": "gcc/testsuite/g++.dg/template/access11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -21,4 +21,4 @@ template <typename T> struct X::Y {\n   typename T::X x;\t\t// { dg-error \"this context\" }\n };\n \n-template struct X::Y<A>;\t// { dg-message \"instantiated from here\" }\n+template struct X::Y<A>;\t// { dg-message \"required from here\" }"}, {"sha": "0b4657d1a8a4335bf1440f2e07362b552ae4bb3e", "filename": "gcc/testsuite/g++.dg/template/access2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -15,6 +15,6 @@ class B {\n \n int main()\n {\n-  A<B> ab;\t\t\t\t// { dg-message \"instantiated\" }\n-  ab.f();\t\t\t\t// { dg-message \"instantiated\" }\n+  A<B> ab;\t\t\t\t// { dg-message \"required\" }\n+  ab.f();\t\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "ab56620772ed88604b6171b26a416c10a1312bd2", "filename": "gcc/testsuite/g++.dg/template/access3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -13,5 +13,5 @@ class B {\n \n int main()\n {\n-  A<B> ab;\t\t\t\t// { dg-message \"instantiated\" }\n+  A<B> ab;\t\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "bd38e4e0f4e8e2325e86d093ff21b099270b0e96", "filename": "gcc/testsuite/g++.dg/template/access7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -14,5 +14,5 @@ typename A::T* f (A) {\t\t\t// { dg-error \"this context\" }\n }\n \n void g () {\n-  f (S<int> ());\t\t\t// { dg-message \"instantiated\" }\n+  f (S<int> ());\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "dfd26bd2d975e7c7c3493c2c97d7bf33e9a65a02", "filename": "gcc/testsuite/g++.dg/template/arg7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,4 +8,4 @@ template<typename T> struct A\n   B<C> b;\n };\n \n-A<void> a;\t\t\t// { dg-message \"instantiated\" }\n+A<void> a;\t\t\t// { dg-message \"required\" }"}, {"sha": "fad86bebe5105e056ef960862da6d337cc529469", "filename": "gcc/testsuite/g++.dg/template/cond2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -6,5 +6,5 @@ template<int X> class c;\n template<int X, int Y> int test(c<X ? : Y>&); // { dg-error \"omitted\" }\n \n void test(c<2>*c2) {\n-\ttest<0, 2>(*c2); // { dg-message \"instantiated\" }\t\n+\ttest<0, 2>(*c2); // { dg-message \"required\" }\n }"}, {"sha": "917ddf09f10569a6acbe4a0d88439f8488f35bbd", "filename": "gcc/testsuite/g++.dg/template/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -15,4 +15,4 @@ template <typename T> struct C\n     X::Y;\t\t\t// { dg-error \"not a base type\" }\n };\n \n-C<void> c;\t\t\t// { dg-message \"instantiated\" }\n+C<void> c;\t\t\t// { dg-message \"required\" }"}, {"sha": "d720fe850cca6545c5d27e1838104bc790ee9833", "filename": "gcc/testsuite/g++.dg/template/crash40.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash40.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7,4 +7,4 @@ template<typename T> void foo()\n   T::~T(); // { dg-error \"member\" }\n }\n \n-template void foo<A>(); // { dg-message \"instantiated\" }\n+template void foo<A>(); // { dg-message \"required\" }"}, {"sha": "88d3af86009846955ca0c964b287ffd72a42a6bd", "filename": "gcc/testsuite/g++.dg/template/crash7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,5 +10,5 @@ template <typename> struct A\t// { dg-message \"A.void.::A.const A\" }\n     template <typename> A(typename A::X) {} // { dg-error \"no type\" }\n };\n \n-A<void> a;\t// { dg-error \"instantiated|no match\" }\n+A<void> a;\t// { dg-error \"required|no match\" }\n // { dg-prune-output \"note\" }"}, {"sha": "c42f85ce550b39cc40aa01070c36e5dddda0314d", "filename": "gcc/testsuite/g++.dg/template/crash84.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash84.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash84.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash84.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -13,7 +13,7 @@ template<typename T> struct a\n void\n foo ()\n {\n-    a<int> v; // { dg-message \"instantiated from here\" }\n+    a<int> v; // { dg-message \"required from here\" }\n }\n \n "}, {"sha": "047543cf85b90b57f44a506dc55c68ae5f345827", "filename": "gcc/testsuite/g++.dg/template/ctor5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -5,4 +5,4 @@ template<typename T> struct A\n   A() : T(0) {} // { dg-error \"base\" }\n };\n \n-A<int*> a; // { dg-message \"instantiated\" }\n+A<int*> a; // { dg-message \"required\" }"}, {"sha": "1d515343eb144b422f7b96002c75200d7ef721e3", "filename": "gcc/testsuite/g++.dg/template/defarg13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg13.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -16,4 +16,4 @@ struct C\n   typename T::F f;\t\t// { dg-error \"no type\" }\n };\n \n-C<B, B> c;\t\t\t// { dg-message \"instantiated\" }\n+C<B, B> c;\t\t\t// { dg-message \"required\" }"}, {"sha": "352ccc41508fcc0a2334ae89d7a0ca1b701b96b2", "filename": "gcc/testsuite/g++.dg/template/defarg14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg14.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,5 +1,5 @@\n // PR c++/46129\n-// The default argument for A<int>::B::operator() should not be instantiated\n+// The default argument for A<int>::B::operator() should not be required\n \n template <class T>\n struct A {"}, {"sha": "a96332047fb84ba473496be0b6dbb804007f3dee", "filename": "gcc/testsuite/g++.dg/template/dtor7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -18,5 +18,5 @@ foo (T t)\n void\n bar ()\n {\n-  foo (B ());\t// { dg-bogus \"instantiated from here\" \"\" { xfail *-*-* } }\n+  foo (B ());\t// { dg-bogus \"required from here\" \"\" { xfail *-*-* } }\n }"}, {"sha": "9559b4eccc11eb06958abad65e5f62712ce6e30f", "filename": "gcc/testsuite/g++.dg/template/eh2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Feh2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7,4 +7,4 @@ template<typename T> struct A\n     void foo() throw(typename T::X);  // { dg-error \"not a class\" }\n };\n \n-A<void> a;                            // { dg-message \"instantiated\" }\n+A<void> a;                            // { dg-message \"required\" }"}, {"sha": "96f0bcae66110c82abcf8c3f54f335e49195796c", "filename": "gcc/testsuite/g++.dg/template/error2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -3,7 +3,7 @@\n // Copyright (C) 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 14 Aug 2003 <nathan@codesourcery.com>\n \n-// instantiated from did not indicate the nested class\n+// required from did not indicate the nested class\n \n template<class T> struct X\n {\n@@ -15,16 +15,16 @@ template<class T> struct X\n template<class T >\n struct Derived\n {\n-  class Nested : public X<T> // { dg-message \"instantiated\" \"\" }\n+  class Nested : public X<T> // { dg-message \"required\" \"\" }\n   {\n   };\n   \n-  Nested m; // { dg-message \"instantiated\" \"\" }\n+  Nested m; // { dg-message \"required\" \"\" }\n   \n   void Foo ();\n };\n \n void Foo (Derived<void> &x)\n {\n-  x.Foo (); // { dg-message \"instantiated\" \"\" }\n+  x.Foo (); // { dg-message \"required\" \"\" }\n }"}, {"sha": "03f29d1f14ab05cab268955dc24e3dcb850d78eb", "filename": "gcc/testsuite/g++.dg/template/error43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror43.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -6,4 +6,4 @@ template<int> void foo()\n   struct A {} a;\n }\n \n-template void foo<0>();\t\t// { dg-message \"instantiated\" }\n+template void foo<0>();\t\t// { dg-message \"required\" }"}, {"sha": "d5b78e058073f1b0d44e6507f83a8edb2513e124", "filename": "gcc/testsuite/g++.dg/template/friend32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend32.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -17,5 +17,5 @@ template<class T> class B\n \n int f ()\n {\n-  B<int> b;\t\t\t// { dg-message \"instantiated\" }\n+  B<int> b;\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "58b86569387af15d2c7ca2913c23862ce33805cd", "filename": "gcc/testsuite/g++.dg/template/injected1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finjected1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,4 +30,4 @@ struct D4: Base<T>, Base<T*> {\n   typename D4::Base* p1;\t// { dg-error \"\" }\n   typename D4::template Base<double>* p2;\n };\n-template struct D4<void>;\t// { dg-message \"instantiated\" }\n+template struct D4<void>;\t// { dg-message \"required\" }"}, {"sha": "dd501684e6389708defce5de0d7d57368282e002", "filename": "gcc/testsuite/g++.dg/template/instantiate1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,11 +9,11 @@ template <class T> struct X {\n };\n \n template <class T> struct Y {\n-  X<T> x;\t\t\t// { dg-message \"instantiated\" }\n+  X<T> x;\t\t\t// { dg-message \"required\" }\n };\n \n template <class T> struct Z {\t// { dg-error \"declaration\" }\n-  Y<Z<T> > y;\t\t\t// { dg-message \"instantiated\" }\n+  Y<Z<T> > y;\t\t\t// { dg-message \"required\" }\n };\n \n struct ZZ : Z<int>"}, {"sha": "0e9fd706015c1e70214614c428ca14446dc1f277", "filename": "gcc/testsuite/g++.dg/template/instantiate3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -14,4 +14,4 @@ struct ACE_Cleanup_Adapter\n   TYPE object_;\t\t// { dg-error \"incomplete type\" }\n };\n \n-template class ACE_Cleanup_Adapter<ACE_Null_Mutex>; // { dg-message \"instantiated from here\" }\n+template class ACE_Cleanup_Adapter<ACE_Null_Mutex>; // { dg-message \"required from here\" }"}, {"sha": "2198087abf96c3e97072ededa6fe4075ec4f0bd3", "filename": "gcc/testsuite/g++.dg/template/instantiate5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,4 +22,4 @@ template <typename T> struct C\n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 21 }\n };\n \n-C<B> c;\t\t\t\t// { dg-message \"instantiated\" }\n+C<B> c;\t\t\t\t// { dg-message \"required\" }"}, {"sha": "8ddbdb19ab8dbea63597add7f599fee8238f1032", "filename": "gcc/testsuite/g++.dg/template/instantiate7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7,4 +7,4 @@ template<typename T> struct A\n     template<T&> struct B;  // { dg-error \"reference to void\" }\n };\n \n-A<void> a;                  // { dg-message \"instantiated\" }\n+A<void> a;                  // { dg-message \"required\" }"}, {"sha": "777349a195329e3e77fcc142e778e6e294619330", "filename": "gcc/testsuite/g++.dg/template/local6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -16,5 +16,5 @@ void findIntersection( PCVector2<double>& p0, PCVector2<double>& p1);\n \n void findIntersection( PCVector2<double>& p0, PCVector2<double>& p1)\n {\n-    PCVector2<double> e = p1 - p0;\t// { dg-message \"instantiated\" }\n+    PCVector2<double> e = p1 - p0;\t// { dg-message \"required\" }\n }"}, {"sha": "de4e1d9899e547be263dbc36b5c5011e9260fae3", "filename": "gcc/testsuite/g++.dg/template/lookup2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -14,5 +14,5 @@ template <typename T> void Bar ()\n \n void Foo ()\n {\n-  Bar<B> (); // { dg-message \"instantiated\" \"\" }\n+  Bar<B> (); // { dg-message \"required\" \"\" }\n }"}, {"sha": "0cdd52aea89a51aef60e030623604146a7f69ed0", "filename": "gcc/testsuite/g++.dg/template/member5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmember5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -28,6 +28,6 @@ struct S {\n template< typename _A > void S::foo() {} \n \n template void S::foo< 0 >();    // { dg-error \"no definition available\" \"no def\" }\n-\t\t\t\t// { dg-message \"instantiated\" \"instantiated\" { target *-*-* } 30 }\n+\t\t\t\t// { dg-message \"required\" \"instantiated\" { target *-*-* } 30 }\n \n }"}, {"sha": "a620c3b15ce19d77ef606b9b8ab3753870507ee8", "filename": "gcc/testsuite/g++.dg/template/memfriend15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend15.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,5 +30,5 @@ template<class T> void A<T>::B2::f()\n int main()\n {\n   A<int>::B2 b1;\n-  b1.f();\t// { dg-message \"instantiated\" }\n+  b1.f();\t// { dg-message \"required\" }\n }"}, {"sha": "1276970e34490223859afe746dc04363a2f0b51f", "filename": "gcc/testsuite/g++.dg/template/memfriend16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend16.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,5 +30,5 @@ template<class T> template <class U> void A<T>::B2<U>::f()\n int main()\n {\n   A<int>::B2<int> b1;\n-  b1.f();\t// { dg-message \"instantiated\" }\n+  b1.f();\t// { dg-message \"required\" }\n }"}, {"sha": "5f4b8e7b3791b72e4660345d7b1807f58c32c076", "filename": "gcc/testsuite/g++.dg/template/memfriend17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend17.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -43,4 +43,4 @@ void A<T>::B::func2(void)\n     (void)F2<T*>::foo;\n }\n \n-template class A<int>;\t// { dg-message \"instantiated\" }\n+template class A<int>;\t// { dg-message \"required\" }"}, {"sha": "26ca6d8e9f0a9e652cab9b0c98b0df0eddf28667", "filename": "gcc/testsuite/g++.dg/template/memfriend7.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemfriend7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -116,18 +116,18 @@ template <> void A<char>::j<0>()\n int main()\n {\n   A<int *> a1;\n-  a1.f(0);\t\t\t\t// { dg-message \"instantiated\" }\n-  a1.g<char>();\t\t\t\t// { dg-message \"instantiated\" }\n-  a1.g<int>();\t\t\t\t// { dg-message \"instantiated\" }\n-  a1.h();\t\t\t\t// { dg-message \"instantiated\" }\n-  a1.i('a');\t\t\t\t// { dg-message \"instantiated\" }\n-  a1.j<1>();\t\t\t\t// { dg-message \"instantiated\" }\n+  a1.f(0);\t\t\t\t// { dg-message \"required\" }\n+  a1.g<char>();\t\t\t\t// { dg-message \"required\" }\n+  a1.g<int>();\t\t\t\t// { dg-message \"required\" }\n+  a1.h();\t\t\t\t// { dg-message \"required\" }\n+  a1.i('a');\t\t\t\t// { dg-message \"required\" }\n+  a1.j<1>();\t\t\t\t// { dg-message \"required\" }\n   A<char> a2;\n   a2.f(0);\n-  a2.g<char>();\t\t\t\t// { dg-message \"instantiated\" }\n+  a2.g<char>();\t\t\t\t// { dg-message \"required\" }\n   a2.g<int>();\n   a2.h();\n   a2.i('a');\n-  a2.j<1>();\t\t\t\t// { dg-message \"instantiated\" }\n+  a2.j<1>();\t\t\t\t// { dg-message \"required\" }\n   a2.j<0>();\n }"}, {"sha": "b1c4d424b8a67c90c48df1e71538124f44d8f9ef", "filename": "gcc/testsuite/g++.dg/template/meminit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -5,4 +5,4 @@ struct S\n   S() : S() {} // { dg-error \"base\" }\n };\n \n-S<int> s; // { dg-message \"instantiated\" }\n+S<int> s; // { dg-message \"required\" }"}, {"sha": "4544cc903b4033618ced7b178e6ed7bc80b5a9c6", "filename": "gcc/testsuite/g++.dg/template/nested3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -24,7 +24,7 @@ class B {\n \n \n int main() {\n-  B<char> objB; // { dg-message \"instantiated\" }\n+  B<char> objB; // { dg-message \"required\" }\n \n   return 0;\n }"}, {"sha": "99b00ccb8e508ec9ef58c938da91f54a699389ae", "filename": "gcc/testsuite/g++.dg/template/non-type-template-argument-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,4 +9,4 @@ template <typename T> struct D\n    C<T::X> c;                   // { dg-error \"parsed as a non-type|if a type is meant\" }\n };\n \n-D<B> d;                         // { dg-message \"instantiated from here\" }\n+D<B> d;                         // { dg-message \"required from here\" }"}, {"sha": "b4bb41d109b42af9f78ada63a54c5a2c761213a9", "filename": "gcc/testsuite/g++.dg/template/nontype12.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype12.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,7 +9,7 @@ template<typename T> struct A\n };\n \n A<char>   a1;\n-A<double> a2;                                   // { dg-message \"instantiated\" }\n+A<double> a2;                                   // { dg-message \"required\" }\n \n template<typename T> struct B\n {\n@@ -27,9 +27,9 @@ template<typename T> struct C\n   template<T> int foo();                        // { dg-error \"double\" }\n };\n \n-template<typename T> int baz(T) { C<T> c; }     // { dg-message \"instantiated\" }\n+template<typename T> int baz(T) { C<T> c; }     // { dg-message \"required\" }\n \n void foobar()\n {\n-  baz(1.2);                                     // { dg-message \"instantiated\" }\n+  baz(1.2);                                     // { dg-message \"required\" }\n }"}, {"sha": "4b3e862ba8003e4d1fbeb14aa7115c9d86b430b9", "filename": "gcc/testsuite/g++.dg/template/nontype13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype13.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -24,6 +24,6 @@ struct Dummy\n int main()\n {\n   Dummy<int> d;\n-  d.tester<true> (); // { dg-message \"instantiated\" }\n+  d.tester<true> (); // { dg-message \"required\" }\n }\n "}, {"sha": "b51474f83ea488f1fc614a99273c4a75b7ded0b4", "filename": "gcc/testsuite/g++.dg/template/nontype6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -16,4 +16,4 @@ void func(void)\n // { dg-message \"if a type\" \"note\" { target *-*-* } 15 }\n }\n \n-template void func<float>(void);    // { dg-message \"instantiated from here\" }\n+template void func<float>(void);    // { dg-message \"required from here\" }"}, {"sha": "86310d33b290db124aec741de8d7498ae4179e06", "filename": "gcc/testsuite/g++.dg/template/pr23510.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -4,7 +4,7 @@ template<unsigned int nFactor>\n struct Factorial\n {\n   enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" } \n-  // { dg-message \"recursively instantiated\" \"\" { target *-*-* } 6 } \n+  // { dg-message \"recursively required\" \"\" { target *-*-* } 6 }\n   // { dg-error \"incomplete type\" \"\" { target *-*-* } 6 } \n } // { dg-error \"expected ';' after\" }\n "}, {"sha": "88e25050fdadb03d83dbc286d7de8ec6b6a9b4ed", "filename": "gcc/testsuite/g++.dg/template/pr35240.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,5 +8,5 @@ template<int N> A<sizeof(new int[N][N])> foo(); // { dg-message \"unimplemented\"\n \n void bar()\n {\n-  foo<1>(); // { dg-message \"instantiated\" }\n+  foo<1>(); // { dg-message \"required\" }\n }"}, {"sha": "30556414f88dd87e1401d4b3d679b00d4e52c448", "filename": "gcc/testsuite/g++.dg/template/ptrmem15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem15.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -6,4 +6,4 @@ template<typename T> struct A\n     T A::* p;  // { dg-error \"void\" }\n };\n \n-A<void> a;     // { dg-message \"instantiated\" }\n+A<void> a;     // { dg-message \"required\" }"}, {"sha": "21475c6391186e8c85b3be841fc3742dd6256223", "filename": "gcc/testsuite/g++.dg/template/ptrmem6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -7,4 +7,4 @@ void f (int T::* volatile *p) {\n   g(p); // { dg-error \"conversion\" }\n }\n \n-template void f(int S::* volatile *); // { dg-message \"instantiated\" }\n+template void f(int S::* volatile *); // { dg-message \"required\" }"}, {"sha": "c46a6a4de5d228fb89eb7a2cddded3dabb813823", "filename": "gcc/testsuite/g++.dg/template/qualified-id1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -23,5 +23,5 @@ template <typename T> void foo()\n \n void bar()\n {\n-  foo<A>(); // { dg-message \"instantiated\" }\n+  foo<A>(); // { dg-message \"required\" }\n }"}, {"sha": "8073fe382f40cbf8d318e55a5271e7783f8d2a22", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -32,5 +32,5 @@ template <typename T> struct B2 : T\n   myconst b;\n };\n \n-B1<AS> b1;\t// { dg-message \"instantiated\" \"\" }\n+B1<AS> b1;\t// { dg-message \"required\" \"\" }\n B2<AS> b2;"}, {"sha": "61141b399fb2e1e01ba9a5e546dfa199cde5c3d8", "filename": "gcc/testsuite/g++.dg/template/qualttp3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -19,5 +19,5 @@ template <class T> struct C\n \n int main()\n {\n-\tC<A> c; // { dg-message \"instantiated\" }\n+\tC<A> c; // { dg-message \"required\" }\n }"}, {"sha": "0f45c8c832e6a43a79a0d527c1e6e9154f1cc38b", "filename": "gcc/testsuite/g++.dg/template/qualttp4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp4.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -20,5 +20,5 @@ template <class T> struct C\n \n int main()\n {\n-\tC<A> c; // { dg-message \"instantiated\" }\n+\tC<A> c; // { dg-message \"required\" }\n }"}, {"sha": "8ac1952f9abae8843c534ec24e43994d65e0da76", "filename": "gcc/testsuite/g++.dg/template/qualttp5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -16,11 +16,11 @@ template <template <class> class TT> void f()\n \n template <class T> struct C\n {\n-\tvoid g() { f<A<T>::template B>(); } // { dg-message \"instantiated\" }\n+\tvoid g() { f<A<T>::template B>(); } // { dg-message \"required\" }\n };\n \n int main()\n {\n \tC<int> c;\n-\tc.g(); // { dg-message \"instantiated\" }\n+\tc.g(); // { dg-message \"required\" }\n }"}, {"sha": "7bd3c24f29a08133f9b5598edfb0691ed350ad9d", "filename": "gcc/testsuite/g++.dg/template/qualttp6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -12,4 +12,4 @@ template <class T> struct D {\n struct E {\n };\n \n-D<E> d; // { dg-message \"instantiated\" }\n+D<E> d; // { dg-message \"required\" }"}, {"sha": "e922f1d81fff29f88f3c67e4561e3d1b8ce03474", "filename": "gcc/testsuite/g++.dg/template/qualttp7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,4 +9,4 @@ template <class T> struct D {\n \tC<T::template B> c; // { dg-error \"no class template\" }\n };\n \n-D<int> d; // { dg-message \"instantiated\" }\n+D<int> d; // { dg-message \"required\" }"}, {"sha": "c1396dbad02e932ca828110d7a68bec684fd7ffa", "filename": "gcc/testsuite/g++.dg/template/qualttp8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp8.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -14,4 +14,4 @@ struct E {\n \ttemplate <class T> class B {}; // { dg-error \"private\" }\n };\n \n-D<E> d; // { dg-message \"instantiated\" }\n+D<E> d; // { dg-message \"required\" }"}, {"sha": "94b56f67e99376a3f14ee57ebda22b0fc03b4176", "filename": "gcc/testsuite/g++.dg/template/recurse.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,7 +8,7 @@ template <int I> struct F\n       F<I+1> f;\t\t\t// { dg-error \"incomplete type\" \"incomplete\" }\n \t\t\t\t// { dg-bogus \"exceeds maximum.*exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n                                 // { dg-error \"exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n-      return f()*I;             // { dg-message \"recursively instantiated\" \"recurse\" }\n+      return f()*I;             // { dg-message \"recursively\" \"recurse\" }\n     }\n };\n \n@@ -20,8 +20,8 @@ template <> struct F<52>\n int main ()\n {\n   F<1> f;\n-  return f();\t\t// { dg-message \"instantiated from here\" \"excessive recursion\" }\n+  return f();\t\t// { dg-message \"from here\" \"excessive recursion\" }\n }\n \n // Ignore excess messages from recursion.\n-// { dg-prune-output \"instantiated from 'int\" }\n+// { dg-prune-output \"from 'int\" }"}, {"sha": "eae411b5ead9d7948ead4c8ed5791ff505e58f63", "filename": "gcc/testsuite/g++.dg/template/recurse2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -3,6 +3,6 @@\n \n template <int N> struct X {\n     static const int value = X<N-1>::value; // { dg-error \"instantiation|incomplete\" }\n-  // { dg-message \"recursively instantiated\" \"\" { target *-*-* } 5 }\n+  // { dg-message \"recursively required\" \"\" { target *-*-* } 5 }\n };\n template struct X<1000>;"}, {"sha": "69c2d6989c7b2181681577f3da3ea0372c0bf5ba", "filename": "gcc/testsuite/g++.dg/template/ref5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fref5.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,4 +8,4 @@ template<typename T> struct B\n   A<t> a;\t\t\t// { dg-error \"reference variable\" }\n };\n \n-B<int&> b;\t\t\t// { dg-message \"instantiated\" }\n+B<int&> b;\t\t\t// { dg-message \"required\" }"}, {"sha": "ad9bf8e9d426ee19a7a152d69e804a1aa8b0ce97", "filename": "gcc/testsuite/g++.dg/template/scope2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -3,7 +3,7 @@\n // Copyright (C) 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 15 Aug 2003 <nathan@codesourcery.com>\n \n-// checked instantiated bases in wrong scope.\n+// checked required bases in wrong scope.\n \n class Helper {};\n "}, {"sha": "c6cb12f30123ea884744cd6ae1881d2e20ef1ddf", "filename": "gcc/testsuite/g++.dg/template/sfinae10.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae10.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -169,13 +169,13 @@ STATIC_ASSERT((has_postdecrement<X>::value));\n STATIC_ASSERT((!has_postdecrement<Y>::value));\n \n // Check for private members\n-STATIC_ASSERT((has_unary_plus<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((is_negatable<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((is_dereferenceable<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_bitwise_not<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_truth_not<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_preincrement<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_predecrement<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_postincrement<Z>::value)); // { dg-message \"instantiated from here\" }\n-STATIC_ASSERT((has_postdecrement<Z>::value)); // { dg-message \"instantiated from here\" }\n+STATIC_ASSERT((has_unary_plus<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((is_negatable<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((is_dereferenceable<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_bitwise_not<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_truth_not<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_preincrement<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_predecrement<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_postincrement<Z>::value)); // { dg-message \"required from here\" }\n+STATIC_ASSERT((has_postdecrement<Z>::value)); // { dg-message \"required from here\" }\n "}, {"sha": "b08d201127217f06303b7d096063a5b4415796d6", "filename": "gcc/testsuite/g++.dg/template/sfinae3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -14,4 +14,4 @@ template<typename> struct B\n   template<typename T> B(T, Y);\n };\n \n-B<int> b(0,0); // { dg-message \"instantiated from here\" }\n+B<int> b(0,0); // { dg-message \"required from here\" }"}, {"sha": "7c9d0d2c9da22423db13d00850212d7de7f57a4c", "filename": "gcc/testsuite/g++.dg/template/sizeof3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,5 +1,5 @@\n // The call to f is not potentially evaluated (3.2), so f<int> is not used,\n-// so it should not be instantiated.\n+// so it should not be required.\n \n template <class T>\n T f (T)"}, {"sha": "058d4dec5a771cb4e9f60d182c37588a32f7161c", "filename": "gcc/testsuite/g++.dg/template/static9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic9.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -5,4 +5,4 @@ template<typename T> struct A\n   static const T i = 0; // { dg-error \"declared void\" \"void\" }\n };\n \n-A<void> a; // { dg-message \"instantiated\" }\n+A<void> a; // { dg-message \"required\" }"}, {"sha": "333e33d5aa5240bf3d4f222eb51bdb3d794aa196", "filename": "gcc/testsuite/g++.dg/template/template-id-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftemplate-id-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftemplate-id-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftemplate-id-2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -18,5 +18,5 @@ template<> struct A<void>\n void bar()\n {\n     A<void> a;\n-    a.foo<int>();\t\t// { dg-message \"instantiated\" }\n+    a.foo<int>();\t\t// { dg-message \"required\" }\n }"}, {"sha": "5d40e63f1e2e69ae596bf7600075cea2069b04b1", "filename": "gcc/testsuite/g++.dg/template/typedef13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef13.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -12,5 +12,5 @@ template <class T> class B : public A\n   mytype mem; // { dg-error \"within this context\"  }\n };\n \n-B<int> b; // { dg-message \"instantiated from here\" }\n+B<int> b; // { dg-message \"required from here\" }\n "}, {"sha": "56b505142e275f96f9aff3257e62ce626301e6f2", "filename": "gcc/testsuite/g++.dg/template/typename4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename4.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,3 +1,3 @@\n struct B { template <typename U> struct C; };\n template <typename T> struct A { typedef typename T::C V; }; // { dg-error \"not a type\" }\n-void f () { A<B>::V p; } // { dg-message \"instantiated\" }\n+void f () { A<B>::V p; } // { dg-message \"required\" }"}, {"sha": "276c40b876cdcffe8db6164f00332b659434aa08", "filename": "gcc/testsuite/g++.dg/template/using14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing14.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -17,5 +17,5 @@ template <class T> struct C : public B1<T>, public B2\n int main()\n {\n   C<int> c;\n-  c.f();\t\t\t// { dg-message \"instantiated\" }\n+  c.f();\t\t\t// { dg-message \"required\" }\n }"}, {"sha": "6dd9ef46ce73bb6b8fe2d450e1cf319a7b6b93d3", "filename": "gcc/testsuite/g++.dg/template/using2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -25,6 +25,6 @@ struct Bar : public Foo<T>, Baz {\n \n void foo (Bar<int> &bar)\n {\n-  bar.foo(); // { dg-message \"instantiated\" }\n+  bar.foo(); // { dg-message \"required\" }\n }\n "}, {"sha": "5067d76e8e38be4584414d0aee462f59f5f885f0", "filename": "gcc/testsuite/g++.dg/template/warn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fwarn1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -17,7 +17,7 @@ template <class T>  void Foo(T i)\n  \n void Bar ()\n { \n-  Foo (1);  // { dg-message \"instantiated\" }\n+  Foo (1);  // { dg-message \"required\" }\n }\n \n struct M {};"}, {"sha": "22a139f23a4edc3df3fa043a94e4268ca0007de4", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-13.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -66,4 +66,4 @@ bar (T)\n   foo (27);\n }\n \n-template void bar<int> (int); // { dg-message \"instantiated\" }\n+template void bar<int> (int); // { dg-message \"required\" }"}, {"sha": "c088b76dfc45f372a3ee73472067b239b0827983", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-15.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -65,4 +65,4 @@ bar (T a, T b, T c)\n   foo (1 != (2 != 3));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "0f80cb9c42bacc796d856a1f5d41dadd35e87de8", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-16.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -83,4 +83,4 @@ bar (T a, T b, T c)\n   foo (6 >> (5 - 4));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "b7c28e0424b6516396604383439fe5e54557d15e", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-17.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -29,4 +29,4 @@ bar (T a, T b, T c)\n   foo (1 || (2 && 3));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "83efaff41898501548dd71e03e997477ffb701e6", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-18.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -119,4 +119,4 @@ bar (T a, T b, T c)\n   foo (1 | (2 <= 3));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "f0e2b805c9ec276520e45170a1603abe40cdfab7", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-19.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -119,4 +119,4 @@ bar (T a, T b, T c)\n   foo (1 ^ (2 < 3));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "746a3103772cb8888067b705827b6bcd5ed6f7f7", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-20.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -101,4 +101,4 @@ bar (T a, T b, T c)\n   foo (1 & (2 != 3));\n }\n \n-template void bar<int> (int, int, int); // { dg-message \"instantiated\" }\n+template void bar<int> (int, int, int); // { dg-message \"required\" }"}, {"sha": "f1749c2b8da2d667359504d304fec5e811b1490a", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-23.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-23.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -114,8 +114,8 @@ bar4 (T)\n   return (a = a);\n }\n \n-template void bar<int> (int); // { dg-message \"instantiated\" }\n-template bool bar1<int> (int); // { dg-message \"instantiated\" }\n+template void bar<int> (int); // { dg-message \"required\" }\n+template bool bar1<int> (int); // { dg-message \"required\" }\n template bool bar2<int> (int);\n-template bool bar3<int> (int); // { dg-message \"instantiated\" }\n+template bool bar3<int> (int); // { dg-message \"required\" }\n template bool bar4<int> (int);"}, {"sha": "408de0ef4f19862a36b547d22e044e23307a7ee6", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,6 +9,6 @@ T *foo(void)\n   return (T *)&x; /* { dg-warning \"strict-aliasing\" } */\n }\n \n-template int *foo<int>(void); /* { dg-message \"instantiated from here\" } */\n-template char *foo<char>(void); /* { dg-bogus \"instantiated from here\" } */\n+template int *foo<int>(void); /* { dg-message \"required from here\" } */\n+template char *foo<char>(void); /* { dg-bogus \"required from here\" } */\n "}, {"sha": "8b012c8ca79918c50410351d2675360ac8157e80", "filename": "gcc/testsuite/g++.dg/warn/noeffect2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -12,9 +12,9 @@ extern \"C\" void FormatDisk();\n   struct C {\n     C(){ FormatDisk(), 0; }  // { dg-warning \"right operand of comma\" \"\" }\n   };\n-  template struct C<int>; // { dg-message \"instantiated\" }\n+  template struct C<int>; // { dg-message \"required\" }\n   template <class T>\n   void f() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" \"\" }\n-  template void f<int> (); // { dg-message \"instantiated\" }\n+  template void f<int> (); // { dg-message \"required\" }\n void g() { FormatDisk(), 0; } // { dg-warning \"right operand of comma\" \"\" }\n "}, {"sha": "612db48eec6bddbab8973e5be9a4df694d17d501", "filename": "gcc/testsuite/g++.dg/warn/noeffect4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect4.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -85,4 +85,4 @@ template<int I> void Foo (X &x)\n   __alignof__ (x++);           // { dg-warning \"no effect\" \"\" }\n }\n \n-template void Foo<4> (X&);     // { dg-message \"instantiated\" }\n+template void Foo<4> (X&);     // { dg-message \"required\" }"}, {"sha": "4c34c6c336c7ea770d83060657f624fd6a553e59", "filename": "gcc/testsuite/g++.dg/warn/pr8570.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8570.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8570.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8570.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -10,4 +10,4 @@ private:\n   template <typename U> friend class X; // { dg-error \"redeclared with 1 template parameter\" }\n };\n \n-X<int, int> i;\t\t// { dg-message \"instantiated\" }\n+X<int, int> i;\t\t// { dg-message \"required\" }"}, {"sha": "0bf0abab262e6a2944bd8d217f633daa51f4bb3c", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n // GROUPS passed initialization\n-// this should give an error in require_instantiated_type about not\n+// this should give an error in require_required_type about not\n // being allowed to have an initializer list in an argument list.\n int f(int a = {1});// { dg-error \"\" } .*"}, {"sha": "7780c4a9dafddca6cb02ba5763da09480f6c6eee", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -25,7 +25,7 @@ template<class T> void fnx(T *) throw(T){}  // { dg-error \"\" } invalid use of vo\n void fx()\n {\n   fnx((int *)0);\n-  fnx((void *)0);\t\t// { dg-message \"instantiated from here\" }\n+  fnx((void *)0);\t\t// { dg-message \"required from here\" }\n }\n \n // [except.spec] 2, exception specifiers must be the same set of types (but"}, {"sha": "2f785b4b9e63a63a28cfa3f09359e841e1d47111", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,5 +9,5 @@ public:\n };\n \n int main() {\n-  GCD< 1, 0 >::val; // { dg-message \"instantiated\" }\n+  GCD< 1, 0 >::val; // { dg-message \"required\" }\n }"}, {"sha": "22687c7862af69841fcc37b6d4ed49e8b4428d51", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash36.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -13,7 +13,7 @@ struct iterator {\n \n \n template <class Iterator>\n-struct reverse_iterator : public // { dg-message \"instantiated\" } no type iterator_category\n+struct reverse_iterator : public // { dg-message \"required\" } no type iterator_category\n iterator<typename iterator_traits<Iterator>::iterator_category> {\n   protected:\n   Iterator current;"}, {"sha": "41e03b2cf0758eb2e46befb38cf20ebad2b506dd", "filename": "gcc/testsuite/g++.old-deja/g++.pt/derived3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fderived3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fderived3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fderived3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -8,9 +8,9 @@ class X {\n \tclass Y : public T\t// { dg-error \"base type .* fails to be\" }\n \t{\n \t};\n-\tY y;\t\t\t// { dg-message \"instantiated\" }\n+\tY y;\t\t\t// { dg-message \"required\" }\n };\n int main() {\n-\tX<int> x;\t\t// { dg-message \"instantiated\" }\n+\tX<int> x;\t\t// { dg-message \"required\" }\n }\n "}, {"sha": "2e65718b67957f8f304c26cfc2bc95750944a933", "filename": "gcc/testsuite/g++.old-deja/g++.pt/error2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ferror2.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -9,7 +9,7 @@ public:\n \n void f ()\n {\n-  Test<void> c; // { dg-message \"instantiated\" }\n+  Test<void> c; // { dg-message \"required\" }\n }\n \n "}, {"sha": "dc9c6c945d650a20b48f888d28700115cece8f06", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit70.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -41,4 +41,4 @@ template <class T>\n void g(T);\n \n template void g(int); // { dg-error \"no definition available\" \"no def\" }\n-// { dg-message \"instantiated\" \"inst\" { target *-*-* } 43 }\n+// { dg-message \"required\" \"inst\" { target *-*-* } 43 }"}, {"sha": "1e2a9f0fbddab9dc0e22070b1c47e0a26341db8c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/infinite1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -19,3 +19,5 @@ int main()\n {\n   f<0>();\n }\n+\n+// { dg-prune-output \"note\" }"}, {"sha": "1a1b5ea5f9f0c50ab1232014d396187a252079ab", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp89.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -12,4 +12,4 @@ template<template<class> class XX>\n class Y {\n \tXX<int> x_;\n };\n-Y<Q::X> y;\t\t\t// { dg-error \"\" } instantiated from here\n+Y<Q::X> y;\t\t\t// { dg-error \"\" } required from here"}, {"sha": "c41beb0f0c04b1370b0fe425c7df86f7d5a8f604", "filename": "gcc/testsuite/g++.old-deja/g++.pt/overload7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Foverload7.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -17,5 +17,5 @@ template<class T> void foo(moo_t<T>) {\n \n int main() {\n   moo_t<int> x;\n-  foo(x); // { dg-bogus \"\" \"\" { xfail *-*-* } }  - instantiated from here - \n+  foo(x); // { dg-bogus \"\" \"\" { xfail *-*-* } }  - required from here -\n }"}, {"sha": "e88011942831bba60aeae37c0c37ded4654a7b9f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/vaarg3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvaarg3.C?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,6 +22,6 @@ int main (void)\n {\n A dummy;\n PrintArgs (dummy, dummy); // { dg-error \"cannot pass\" } cannot pass non-POD\n-// { dg-message \"instantiated\" \"inst\" { target *-*-* } 24 }\n+// { dg-message \"required\" \"inst\" { target *-*-* } 24 }\n return 0;\n }"}, {"sha": "58b59a49dd63d33872ed07b3e6923c5ce96790d1", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -22,7 +22,7 @@ proc prune_gcc_output { text } {\n \n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?instantiated from \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: error: ld returned \\[^\\n\\]*\" $text \"\" text"}, {"sha": "b259e9a97827abaedc4289d053f017041f3865a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -1,3 +1,24 @@\n+2011-06-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/lib/prune.exp: s/required/instantiated/.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Likewise.\n+\t* testsuite/20_util/forward/1_neg.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Likewise.\n+\t* testsuite/20_util/ratio/operations/ops_overflow_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n+\t* testsuite/ext/ext_pointer/1_neg.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Likewise.\n+\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Likewise.\n+\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Likewise.\n+\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Likewise.\n+\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc: Likewise.\n+\n 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/move.h (struct __move_if_noexcept_cond): Add."}, {"sha": "a5f4b286bc0a2d6c0511254448d5d375f5af4f99", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -25,5 +25,5 @@\n \n void test01()\n {\n-  std::declval<int>();\t\t// { dg-error \"instantiated from here\" }\n+  std::declval<int>();\t\t// { dg-error \"required from here\" }\n }"}, {"sha": "1e9c69ebf89fc6c868fb12a84b8212fcc11404ac", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 226 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 31 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 31 }"}, {"sha": "c30d94c2e0a5f765c3410fbf99a4b69826c0c995", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -33,5 +33,5 @@ void test01()\n }\n \n // { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 227 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 32 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 32 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "940af7f805cfebc26aa5a15f8b6bffde7015ff5a", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -34,4 +34,4 @@ void test01()\n }\n \n // { dg-error \"period must be positive\" \"\" { target *-*-* } 229 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 33 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 33 }"}, {"sha": "978ea52c7f86b831367cae42080c3dc28f75d31f", "filename": "libstdc++-v3/testsuite/20_util/forward/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -38,7 +38,7 @@ struct A\n \n void g()\n {\n-  std::shared_ptr<A> sp1 = factory<A>(2, 1.414); // { dg-error \"instantiated from here\" }\n+  std::shared_ptr<A> sp1 = factory<A>(2, 1.414); // { dg-error \"required from here\" }\n }\n \n // { dg-excess-errors \"\" }"}, {"sha": "f37d4fbf88a182cf10d9ae5ba3932d7f1a74364a", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -43,10 +43,10 @@ void test01()\n }\n \n // { dg-error \"does not name a type\" \"\" { target *-*-* } 33 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 35 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 37 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 35 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 37 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n // { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1511 }\n // { dg-error \"declaration of\" \"\" { target *-*-* } 1475 }"}, {"sha": "497f170d97aa641fc779ebb05973f22847e0f40b", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -43,10 +43,10 @@ void test01()\n }\n \n // { dg-error \"does not name a type\" \"\" { target *-*-* } 33 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 35 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 37 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 35 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 37 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n // { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1435 }\n // { dg-error \"declaration of\" \"\" { target *-*-* } 1399 }"}, {"sha": "83f5ce11f03ef34d56b25e8a24509e3d10bd18ee", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -46,9 +46,9 @@ test04()\n   std::ratio<1,0> r1 __attribute__((unused));\n }\n \n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 34 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 46 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 34 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 46 }\n // { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 268 }\n // { dg-error \"out of range\" \"\" { target *-*-* } 269 }\n // { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 109 }"}, {"sha": "07b1a567b01bc3411c432393c9b9242b05b87f5e", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -36,9 +36,9 @@ test02()\n   std::ratio_multiply<std::ratio<INTMAX_MAX>, std::ratio<INTMAX_MAX>>::type r2;\n }\n \n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 29 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 35 }\n-// { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 29 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 35 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"overflow in addition\" \"\" { target *-*-* } 432 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 104 }\n // { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 100 }"}, {"sha": "a56148a3f9a7f64fe76837e10dc284214ad4960e", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -49,4 +49,4 @@ main()\n }\n // { dg-error \"In member function\" \"\" { target *-*-* } 0 }\n // { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 0 }\n+// { dg-error \"required from\" \"\" { target *-*-* } 0 }"}, {"sha": "c87e35de0fdd0f646585f867bc79be05491dc1d4", "filename": "libstdc++-v3/testsuite/ext/ext_pointer/1_neg.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2F1_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -54,38 +54,38 @@ void test01(void) {\n   A_pointer aptr( &a );\n \n   // Can't implicitly cast from A* to B*\n-  B_pointer bptr1(aptr); // { dg-error \"instantiated from here\" 31 }\n-  B_pointer bptr2(&a); // { dg-error \"instantiated from here\" 32 }\n+  B_pointer bptr1(aptr); // { dg-error \"required from here\" 31 }\n+  B_pointer bptr2(&a); // { dg-error \"required from here\" 32 }\n \n   // but explicit cast/conversion is OK.\n   B_pointer bptr3(__static_pointer_cast<B_pointer>(aptr)); // ok\n   B_pointer bptr4(__static_pointer_cast<B_pointer>(&a)); // ok\n \n   // Can't implicitly cast from A* to B*\n-  bptr1 = aptr; // { dg-error \"instantiated from here\" 39 }\n-  bptr1 = &a; // { dg-error \"instantiated from here\" 40 }\n+  bptr1 = aptr; // { dg-error \"required from here\" 39 }\n+  bptr1 = &a; // { dg-error \"required from here\" 40 }\n \n   // but explicit cast/conversion is OK.\n   bptr1 = __static_pointer_cast<B_pointer>(aptr); // ok\n   bptr1 = __static_pointer_cast<B_pointer>(&a); // ok\n \n   // Similarly, can't shed constness via implicit cast\n   const_A_pointer captr(&a);\n-  A_pointer aptr2(captr); // { dg-error \"instantiated from here\" 48 }\n+  A_pointer aptr2(captr); // { dg-error \"required from here\" 48 }\n \n   // but explicit cast/conversion is OK.\n   A_pointer aptr3(__const_pointer_cast<A_pointer>(captr)); // ok\n \n   // Similarly, can't shed constness via implicit cast\n-  aptr2 = captr; // { dg-error \"instantiated from here\" 54 }\n+  aptr2 = captr; // { dg-error \"required from here\" 54 }\n \n   // but explicit cast/conversion is OK.\n   aptr3 = __const_pointer_cast<A_pointer>(captr); // ok\n \n   // Combine explicit const cast with implicit downcast.\n   const_B_pointer cbptr(&b);\n-  A_pointer aptr4(cbptr); // { dg-error \"instantiated from here\" 61 }\n-  aptr4 = cbptr; // { dg-error \"instantiated from here\" 62 }\n+  A_pointer aptr4(cbptr); // { dg-error \"required from here\" 61 }\n+  aptr4 = cbptr; // { dg-error \"required from here\" 62 }\n \n   A_pointer aptr5(__const_pointer_cast<B_pointer>(cbptr)); // ok\n   aptr5 = __const_pointer_cast<B_pointer>(cbptr);  // ok"}, {"sha": "c5b2bd2e98fe6c07cd29a233846c3875cb16d9f3", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_resize_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -57,7 +57,7 @@ int main()\n   // The following line won't compile. The resize policy needs to be\n   // configured to allow external resize (by default, this is not\n   // available).\n-  h.resize(20); // { dg-error \"instantiated from\" }\n+  h.resize(20); // { dg-error \"required from\" }\n }\n \n // { dg-error \"invalid\" \"\" { target *-*-* } 187 } "}, {"sha": "fbd5f1d704af6cdc3333cd4e0667c1f3e6596d1e", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_floating_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,9 +30,9 @@ template<typename T>\n \n int main()\n {\n-  check_add_unsigned<float>();  // { dg-error \"instantiated from\" }\n+  check_add_unsigned<float>();  // { dg-error \"required from\" }\n   return 0;\n }\n \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 28 } \n+// { dg-error \"required from\" \"\" { target *-*-* } 28 }\n // { dg-error \"no type\" \"\" { target *-*-* } 69 } "}, {"sha": "b976de022b4f0b8fa91826b6da165421700edc69", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_integer_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,8 +30,8 @@ template<typename T>\n \n int main()\n {\n-  check_add_unsigned<bool>();  // { dg-error \"instantiated from\" }\n-  check_add_unsigned<wchar_t>();  // { dg-error \"instantiated from\" }\n+  check_add_unsigned<bool>();  // { dg-error \"required from\" }\n+  check_add_unsigned<wchar_t>();  // { dg-error \"required from\" }\n   return 0;\n }\n "}, {"sha": "2e04046965a8db91fe6070d21a07b7ab563d318d", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_floating_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,9 +30,9 @@ template<typename T>\n \n int main()\n {\n-  check_remove_unsigned<float>();  // { dg-error \"instantiated from\" }\n+  check_remove_unsigned<float>();  // { dg-error \"required from\" }\n   return 0;\n }\n \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 28 }\n+// { dg-error \"required from\" \"\" { target *-*-* } 28 }\n // { dg-error \"no type\" \"\" { target *-*-* } 112 }"}, {"sha": "bd5c4237e027e6dedbd32a1384bd4c9b525867c7", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_integer_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -30,8 +30,8 @@ template<typename T>\n \n int main()\n {\n-  check_remove_unsigned<bool>();  // { dg-error \"instantiated from\" }\n-  check_remove_unsigned<wchar_t>();  // { dg-error \"instantiated from\" }\n+  check_remove_unsigned<bool>();  // { dg-error \"required from\" }\n+  check_remove_unsigned<wchar_t>();  // { dg-error \"required from\" }\n   return 0;\n }\n "}, {"sha": "e7d6a5acb8b55d024e866b478da025684c6d2742", "filename": "libstdc++-v3/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -39,7 +39,7 @@ proc libstdc++-dg-prune { system text } {\n     # definitions, etc as these confuse dejagnu\n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?instantiated from \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     # Why doesn't GCC need these to strip header context?"}, {"sha": "8114531e2d71f397a86862dd4c659cdabe277025", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff609751050030ea83a7ff58eca5c07a3adcdfc/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=3ff609751050030ea83a7ff58eca5c07a3adcdfc", "patch": "@@ -48,4 +48,4 @@ main()\n }\n // { dg-error \"In member function\" \"\" { target *-*-* } 0 }\n // { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 0 }\n+// { dg-error \"required from\" \"\" { target *-*-* } 0 }"}]}