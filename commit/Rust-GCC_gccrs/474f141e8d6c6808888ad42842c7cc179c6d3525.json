{"sha": "474f141e8d6c6808888ad42842c7cc179c6d3525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0ZjE0MWU4ZDZjNjgwODg4OGFkNDI4NDJjN2NjMTc5YzZkMzUyNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-05-07T10:40:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-07T10:40:09Z"}, "message": "gcov-io.h (GCOV_LOCKED): New #define.\n\n\t* gcov-io.h (GCOV_LOCKED): New #define.\n\t(GCOV_LINKAGE): Make sure it is #defined.\n\t(gcov_write_string, gcov_write_tag, gcov_write_length,\n\tgcov_read_string, gcov_time): Poison in libgcov.\n\t(gcov_seek_end): Remove.\n\t(gcov_write_tag_length, gcov_sync, gcov_rewrite): New.\n\t(GCOV_TAG_FUNCTION_LENGTH, GCOV_TAG_BLOCKS_LENGTH,\n\tGCOV_TAG_ARCS_LENGTH, GCOV_TAG_COUNTER_LENGTH,\n\tGCOV_TAG_SUMMARY_LENGTH): New #defines.\n\t(gcov_write_tag, gcov_write_length): Not in libgcov.\n\t* gcov-io.c (gcov_open): Use GCOV_LOCKED.\n\t(gcov_write_tag, gcov_write_length): Not in libgcov.\n\t(gcov_write_tag_length): New.\n\t(gcov_write_summary): Use gcov_write_tag_length.\n\t* libgcov.c: Always #include gcov-io.h.\n\t(IN_LIBGCOV): -1 for inhibit_libc, +1 otherwise.\n\t(GCOV_LINKAGE): Define to nothing for L_gcov.\n\t(gcov_exit): Replace gcov_write_tag, gcov_write_length with\n\tgcov_write_tag_length. Use gcov_rewrite & gcov_seek.\n\t* gcov.c (read_graph_file): Replace gcov_seek by gcov_sync.\n\t(read_count_file): Likewise.\n\t* gcov-dump.c (dump_file): Likewise.\n\t* coverag.c (read_counts_file): Likewise.\n\nFrom-SVN: r66555", "tree": {"sha": "aa2fd5f968bcc9f49c44463d7bb9b157b0c4d790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa2fd5f968bcc9f49c44463d7bb9b157b0c4d790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/474f141e8d6c6808888ad42842c7cc179c6d3525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474f141e8d6c6808888ad42842c7cc179c6d3525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474f141e8d6c6808888ad42842c7cc179c6d3525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474f141e8d6c6808888ad42842c7cc179c6d3525/comments", "author": null, "committer": null, "parents": [{"sha": "6cbeaa7e52a2ba53925b916a4b181d63e2712014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbeaa7e52a2ba53925b916a4b181d63e2712014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbeaa7e52a2ba53925b916a4b181d63e2712014"}], "stats": {"total": 245, "additions": 152, "deletions": 93}, "files": [{"sha": "7b932059cfad41cf6f963c59eb54c64117245c36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -1,3 +1,29 @@\n+2003-05-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcov-io.h (GCOV_LOCKED): New #define.\n+\t(GCOV_LINKAGE): Make sure it is #defined.\n+\t(gcov_write_string, gcov_write_tag, gcov_write_length,\n+\tgcov_read_string, gcov_time): Poison in libgcov.\n+\t(gcov_seek_end): Remove.\n+\t(gcov_write_tag_length, gcov_sync, gcov_rewrite): New.\n+\t(GCOV_TAG_FUNCTION_LENGTH, GCOV_TAG_BLOCKS_LENGTH,\n+\tGCOV_TAG_ARCS_LENGTH, GCOV_TAG_COUNTER_LENGTH,\n+\tGCOV_TAG_SUMMARY_LENGTH): New #defines.\n+\t(gcov_write_tag, gcov_write_length): Not in libgcov.\n+\t* gcov-io.c (gcov_open): Use GCOV_LOCKED.\n+\t(gcov_write_tag, gcov_write_length): Not in libgcov.\n+\t(gcov_write_tag_length): New.\n+\t(gcov_write_summary): Use gcov_write_tag_length.\n+\t* libgcov.c: Always #include gcov-io.h.\n+\t(IN_LIBGCOV): -1 for inhibit_libc, +1 otherwise.\n+\t(GCOV_LINKAGE): Define to nothing for L_gcov.\n+\t(gcov_exit): Replace gcov_write_tag, gcov_write_length with\n+\tgcov_write_tag_length. Use gcov_rewrite & gcov_seek.\n+\t* gcov.c (read_graph_file): Replace gcov_seek by gcov_sync.\n+\t(read_count_file): Likewise.\n+\t* gcov-dump.c (dump_file): Likewise.\n+\t* coverag.c (read_counts_file): Likewise.\n+\n 2003-05-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR other/10658"}, {"sha": "00da73c7d12881f699a30c6047f7f95a86a6f5b6", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -271,7 +271,7 @@ read_counts_file ()\n \t  for (ix = 0; ix != n_counts; ix++)\n \t    entry->counts[ix] += gcov_read_counter ();\n \t}\n-      gcov_seek (offset, length);\n+      gcov_sync (offset, length);\n       if ((error = gcov_is_error ()))\n \t{\n \t  warning (error < 0 ? \"`%s' has overflowed\" : \"`%s' is corrupted\","}, {"sha": "fb64243ab83a6558aa083b000f50e948fe0075bc", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -237,7 +237,7 @@ dump_file (filename)\n \t    printf (\"%s:record size mismatch %lu bytes unread\\n\",\n \t\t    filename, length - actual_length);\n \t}\n-      gcov_seek (base, length);\n+      gcov_sync (base, length);\n       if ((error = gcov_is_error ()))\n \t{\n \t  printf (error < 0 ? \"%s:counter overflow at %lu\\n\" :"}, {"sha": "188d27a1bc4c922f3237e84b4f6083eec151a127", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -37,7 +37,7 @@ gcov_open (const char *name, int mode)\n {\n   int result = 1;\n   size_t alloc = 1024;\n-#if defined (TARGET_HAS_F_SETLKW) && IN_LIBGCOV\n+#if GCOV_LOCKED\n   struct flock s_flock;\n \n   s_flock.l_type = F_WRLCK;\n@@ -61,7 +61,7 @@ gcov_open (const char *name, int mode)\n   if (!gcov_var.file)\n     return 0;\n \n-#if defined (TARGET_HAS_F_SETLKW) && IN_LIBGCOV\n+#if GCOV_LOCKED\n   while (fcntl (fileno (gcov_var.file), F_SETLKW, &s_flock)\n \t && errno == EINTR)\n     continue;\n@@ -257,6 +257,7 @@ gcov_write_string (const char *string)\n }\n #endif\n \n+#if !IN_LIBGCOV\n /* Write a tag TAG and reserve space for the record length. Return a\n    value to be used for gcov_write_length.  */\n \n@@ -299,6 +300,30 @@ gcov_write_length (unsigned long position)\n \t}\n     }\n }\n+#endif\n+\n+/* Write a tag TAG and length LENGTH.  */\n+\n+GCOV_LINKAGE void\n+gcov_write_tag_length (unsigned tag, unsigned length)\n+{\n+  unsigned char *buffer = gcov_write_bytes (8);\n+  unsigned ix;\n+\n+  if (!buffer)\n+    return;\n+  for (ix = 4; ix--; )\n+    {\n+      buffer[ix] = tag;\n+      tag >>= 8;\n+    }\n+  for (ix = 4; ix--; )\n+    {\n+      buffer[ix + 4] = length;\n+      length >>= 8;\n+    }\n+  return;\n+}\n \n #if IN_LIBGCOV\n /* Write a summary structure to the gcov file.  Return non-zero on\n@@ -309,9 +334,8 @@ gcov_write_summary (unsigned tag, const struct gcov_summary *summary)\n {\n   unsigned ix;\n   const struct gcov_ctr_summary *csum;\n-  unsigned long base;\n \n-  base = gcov_write_tag (tag);\n+  gcov_write_tag_length (tag, GCOV_TAG_SUMMARY_LENGTH);\n   gcov_write_unsigned (summary->checksum);\n   for (csum = summary->ctrs, ix = GCOV_COUNTERS; ix--; csum++)\n     {\n@@ -321,7 +345,6 @@ gcov_write_summary (unsigned tag, const struct gcov_summary *summary)\n       gcov_write_counter (csum->run_max);\n       gcov_write_counter (csum->sum_max);\n     }\n-  gcov_write_length (base);\n }\n #endif /* IN_LIBGCOV */\n "}, {"sha": "2cad103f231d191f7c61cf2a4ea2234fe2ad728f", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -168,56 +168,56 @@ typedef long long gcov_type;\n #else\n #define GCOV_LOCKED 0\n #endif\n-#endif /* IN_LIBGCOV */\n+#else /* !IN_LIBGCOV */\n+#if defined (HOST_HAS_F_SETLKW)\n+#define GCOV_LOCKED 1\n+#else\n+#define GCOV_LOCKED 0\n+#endif\n #if IN_GCOV\n+#define GCOV_LINKAGE static\n typedef HOST_WIDEST_INT gcov_type;\n #if IN_GCOV > 0\n #include <sys/types.h>\n #endif\n #endif\n+#endif /* !IN_LIBGCOV */\n \n /* In gcov we want function linkage to be static, so we do not\n    polute the global namespace. In libgcov we need these functions\n    to be extern, so prefix them with __gcov so that we do not conflict.\n    In the compiler we want it extern, so that they can be accessed from\n    elsewhere.  */\n #if IN_LIBGCOV\n-\n-#define GCOV_LINKAGE /* nothing */\n #define gcov_var __gcov_var\n #define gcov_open __gcov_open\n #define gcov_close __gcov_close\n #define gcov_write_bytes __gcov_write_bytes\n #define gcov_write_unsigned __gcov_write_unsigned\n #define gcov_write_counter __gcov_write_counter\n-#define gcov_write_string __gcov_write_string\n-#define gcov_write_tag __gcov_write_tag\n-#define gcov_write_length __gcov_write_length\n+#pragma GCC poison gcov_write_string\n+#pragma GCC poison gcov_write_tag\n+#pragma GCC poison gcov_write_length\n+#define gcov_write_tag_length __gcov_write_tag_length\n #define gcov_write_summary __gcov_write_summary\n #define gcov_read_bytes __gcov_read_bytes\n #define gcov_read_unsigned __gcov_read_unsigned\n #define gcov_read_counter __gcov_read_counter\n-#define gcov_read_string __gcov_read_string\n+#pragma GCC poison gcov_read_string\n #define gcov_read_summary __gcov_read_summary\n #define gcov_position __gcov_position\n+#define gcov_sync __gcov_sync\n #define gcov_seek __gcov_seek\n-#define gcov_seek_end __gcov_seek_end\n+#define gcov_rewrite __gcov_rewrite\n #define gcov_is_eof __gcov_is_eof\n #define gcov_is_error __gcov_is_error\n-#define gcov_time __gcov_time\n-\n-#elif IN_GCOV\n-\n-#define GCOV_LINKAGE static\n-\n-#else /* !IN_LIBGCOV && !IN_GCOV */\n+#pragma GCC poison gcov_time\n+#endif\n \n #ifndef GCOV_LINKAGE\n #define GCOV_LINKAGE extern\n #endif\n \n-#endif\n-\n /* File suffixes.  */\n #define GCOV_DATA_SUFFIX \".da\"\n #define GCOV_GRAPH_SUFFIX \".bbg\"\n@@ -237,12 +237,17 @@ typedef HOST_WIDEST_INT gcov_type;\n    the data file.  */\n \n #define GCOV_TAG_FUNCTION\t ((unsigned)0x01000000)\n+#define GCOV_TAG_FUNCTION_LENGTH (2 * 4)\n #define GCOV_TAG_BLOCKS\t\t ((unsigned)0x01410000)\n+#define GCOV_TAG_BLOCKS_LENGTH(NUM) ((NUM) * 4)\n #define GCOV_TAG_ARCS\t\t ((unsigned)0x01430000)\n+#define GCOV_TAG_ARCS_LENGTH(NUM)  (1 * 4 + (NUM) * (2 * 4))\n #define GCOV_TAG_LINES\t\t ((unsigned)0x01450000)\n #define GCOV_TAG_COUNTER_BASE \t ((unsigned)0x01a10000) /* First counter */\n+#define GCOV_TAG_COUNTER_LENGTH(NUM) ((NUM) * 8)\n #define GCOV_TAG_OBJECT_SUMMARY  ((unsigned)0xa1000000)\n #define GCOV_TAG_PROGRAM_SUMMARY ((unsigned)0xa3000000)\n+#define GCOV_TAG_SUMMARY_LENGTH  (1 * 4 + GCOV_COUNTERS * (2 * 4 + 3 * 8))\n \n /* Counters that are collected.  */\n #define GCOV_COUNTER_ARCS \t0  /* Arc transitions.  */\n@@ -359,6 +364,8 @@ extern void __gcov_flush (void);\n extern void __gcov_merge_add (gcov_type *, unsigned);\n #endif /* IN_LIBGCOV */\n \n+#if IN_LIBGCOV >= 0\n+\n /* Because small reads and writes, interspersed with seeks cause lots\n    of disk activity, we buffer the entire count files.  */\n \n@@ -384,8 +391,11 @@ GCOV_LINKAGE void gcov_write_counter (gcov_type);\n #else\n GCOV_LINKAGE void gcov_write_string (const char *);\n #endif\n+#if !IN_LIBGCOV\n GCOV_LINKAGE unsigned long gcov_write_tag (unsigned);\n GCOV_LINKAGE void gcov_write_length (unsigned long /*position*/);\n+#endif\n+GCOV_LINKAGE void gcov_write_tag_length (unsigned, unsigned);\n #if IN_LIBGCOV\n GCOV_LINKAGE void gcov_write_summary (unsigned, const struct gcov_summary *);\n #endif\n@@ -398,8 +408,9 @@ GCOV_LINKAGE const char *gcov_read_string (void);\n #endif\n GCOV_LINKAGE void gcov_read_summary (struct gcov_summary *);\n static unsigned long gcov_position (void);\n-static void gcov_seek (unsigned long /*base*/, unsigned /*length */);\n-static unsigned long gcov_seek_end (void);\n+static void gcov_sync (unsigned long /*base*/, unsigned /*length */);\n+static void gcov_seek (unsigned long /*position*/);\n+static void gcov_rewrite (void);\n static int gcov_is_eof (void);\n static int gcov_is_error (void);\n #if IN_GCOV > 0\n@@ -418,7 +429,7 @@ gcov_position (void)\n    gcov_save_position, LENGTH should be a record length, or zero.  */\n \n static inline void\n-gcov_seek (unsigned long base, unsigned length)\n+gcov_sync (unsigned long base, unsigned length)\n {\n   if (gcov_var.buffer)\n     {\n@@ -434,11 +445,18 @@ gcov_seek (unsigned long base, unsigned length)\n \n /* Move to the end of the gcov file.  */\n \n-static inline unsigned long\n-gcov_seek_end ()\n+static inline void\n+gcov_seek (unsigned long base)\n {\n-  gcov_var.position = gcov_var.length;\n-  return gcov_var.position;\n+  gcov_var.position = base < gcov_var.length ? base : gcov_var.length;\n+}\n+\n+/* Move to beginning of file and intialize for writing.  */\n+\n+static inline void\n+gcov_rewrite (void)\n+{\n+  gcov_var.position = 0;\n }\n \n /* Tests whether we have reached end of .da file.  */\n@@ -457,4 +475,6 @@ gcov_is_error ()\n   return gcov_var.file ? gcov_var.error : 1;\n }\n \n+#endif /* IN_LIBGCOV >= 0 */\n+\n #endif /* GCC_GCOV_IO_H */"}, {"sha": "2225f02f9ab8fdd959bc3197fe59a3b91dfa2eb0", "filename": "gcc/gcov.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -904,7 +904,7 @@ read_graph_file ()\n \t  fn = NULL;\n \t  current_tag = 0;\n \t}\n-      gcov_seek (base, length);\n+      gcov_sync (base, length);\n       if (gcov_is_error ())\n \t{\n \tcorrupt:;\n@@ -1059,7 +1059,7 @@ read_count_file ()\n \t  for (ix = 0; ix != fn->num_counts; ix++)\n \t    fn->counts[ix] += gcov_read_counter ();\n \t}\n-      gcov_seek (base, length);\n+      gcov_sync (base, length);\n       if ((error = gcov_is_error ()))\n \t{\n \t  fnotice (stderr, error < 0"}, {"sha": "ed2d3d7d1d744391db9d8bb21876137f06995e63", "filename": "gcc/libgcov.c", "status": "modified", "additions": 50, "deletions": 60, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474f141e8d6c6808888ad42842c7cc179c6d3525/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=474f141e8d6c6808888ad42842c7cc179c6d3525", "patch": "@@ -29,25 +29,6 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-#if defined(inhibit_libc)\n-/* If libc and its header files are not available, provide dummy functions.  */\n-\n-#ifdef L_gcov\n-void __gcov_init (void *p);\n-void __gcov_flush (void);\n-\n-void __gcov_init (void *p) { }\n-void __gcov_flush (void) { }\n-#endif\n-\n-#ifdef L_gcov_merge_add\n-void __gcov_merge_add (void *, unsigned);\n-\n-void __gcov_merge_add (void *counters, unsigned n_counters) { }\n-#endif\n-\n-#else\n-\n /* It is incorrect to include config.h here, because this file is being\n    compiled for the target, and hence definitions concerning only the host\n    do not apply.  */\n@@ -57,16 +38,38 @@ void __gcov_merge_add (void *counters, unsigned n_counters) { }\n #include \"coretypes.h\"\n #include \"tm.h\"\n \n+#if defined(inhibit_libc)\n+#define IN_LIBGCOV (-1)\n+#else\n #undef NULL /* Avoid errors if stdio.h and our stddef.h mismatch.  */\n #include <stdio.h>\n+#define IN_LIBGCOV 1\n+#if defined(L_gcov)\n+#define GCOV_LINKAGE /* nothing */\n+#endif\n+#endif\n+#include \"gcov-io.h\"\n+\n+#if defined(inhibit_libc)\n+/* If libc and its header files are not available, provide dummy functions.  */\n+\n+#ifdef L_gcov\n+void __gcov_init (struct gcov_info *p __attribute__ ((unused))) {}\n+void __gcov_flush (void) {}\n+#endif\n+\n+#ifdef L_gcov_merge_add\n+void __gcov_merge_add (gcov_type *counters  __attribute__ ((unused)),\n+\t\t       unsigned n_counters __attribute__ ((unused))) {}\n+#endif\n+\n+#else\n \n #include <string.h>\n-#if defined (TARGET_HAS_F_SETLKW)\n+#if GCOV_LOCKED\n #include <fcntl.h>\n #include <errno.h>\n #endif\n-#define IN_LIBGCOV 1\n-#include \"gcov-io.h\"\n \n #ifdef L_gcov\n #include \"gcov-io.c\"\n@@ -151,9 +154,8 @@ gcov_exit (void)\n       struct gcov_ctr_summary *cs_obj, *cs_tobj, *cs_prg, *cs_tprg, *cs_all;\n       int error;\n       int merging;\n-      unsigned long base;\n       unsigned tag, length;\n-      unsigned long summary_pos = 0;\n+      unsigned long summary_pos = ~0UL;\n \n       /* Totals for this object file.  */\n       memset (&this_object, 0, sizeof (this_object));\n@@ -223,6 +225,7 @@ gcov_exit (void)\n \n \t      /* Check function */\n \t      if (tag != GCOV_TAG_FUNCTION\n+\t\t  || length != GCOV_TAG_FUNCTION_LENGTH\n \t\t  || gcov_read_unsigned () != fi_ptr->ident\n \t\t  || gcov_read_unsigned () != fi_ptr->checksum)\n \t\t{\n@@ -236,17 +239,14 @@ gcov_exit (void)\n \t      for (c_ix = t_ix = 0; t_ix != GCOV_COUNTERS; t_ix++)\n \t\tif ((1 << t_ix) & gi_ptr->ctr_mask)\n \t\t  {\n-\t\t    unsigned n_counts;\n-\t\t    gcov_merge_fn merge;\n+\t\t    unsigned n_counts = fi_ptr->n_ctrs[c_ix];\n+\t\t    gcov_merge_fn merge = gi_ptr->counts[c_ix].merge;\n \t\t    \n \t\t    tag = gcov_read_unsigned ();\n \t\t    length = gcov_read_unsigned ();\n-\n \t\t    if (tag != GCOV_TAG_FOR_COUNTER (t_ix)\n-\t\t\t|| fi_ptr->n_ctrs[c_ix] * 8 != length)\n+\t\t\t|| length != GCOV_TAG_COUNTER_LENGTH (n_counts))\n \t\t      goto read_mismatch;\n-\t\t    n_counts = fi_ptr->n_ctrs[c_ix];\n-\t\t    merge = gi_ptr->counts[c_ix].merge;\n \t\t    (*merge) (values[c_ix], n_counts);\n \t\t    values[c_ix] += n_counts;\n \t\t    c_ix++;\n@@ -255,41 +255,38 @@ gcov_exit (void)\n \t\tgoto read_error;\n \t    }\n \n-\t  /* Check object summary */\n-\t  if (gcov_read_unsigned () != GCOV_TAG_OBJECT_SUMMARY)\n-\t    goto read_mismatch;\n-\t  gcov_read_unsigned ();\n-\t  gcov_read_summary (&object);\n-\n-\t  /* Check program summary */\n+\t  /* Check program & object summary */\n \t  while (!gcov_is_eof ())\n \t    {\n-\t      base = gcov_position ();\n+\t      unsigned long base = gcov_position ();\n+\t      int is_program;\n+\t      \n \t      tag = gcov_read_unsigned ();\n-\t      gcov_read_unsigned ();\n-\t      if (tag != GCOV_TAG_PROGRAM_SUMMARY)\n+\t      length = gcov_read_unsigned ();\n+\t      is_program = tag == GCOV_TAG_PROGRAM_SUMMARY;\n+\t      if (length != GCOV_TAG_SUMMARY_LENGTH\n+\t\t  || (!is_program && tag != GCOV_TAG_OBJECT_SUMMARY))\n \t\tgoto read_mismatch;\n-\t      gcov_read_summary (&program);\n+\t      gcov_read_summary (is_program ? &program : &object);\n \t      if ((error = gcov_is_error ()))\n \t\t{\n \t\tread_error:;\n \t\t  fprintf (stderr, error < 0 ?\n \t\t\t   \"profiling:%s:Overflow merging\\n\" :\n-\t\t\t   \"profiling:%s:Error merging\\n\",\n-\t\t\t   gi_ptr->filename);\n+\t\t\t   \"profiling:%s:Error merging\\n\", gi_ptr->filename);\n \t\t  goto read_fatal;\n \t\t}\n \t      \n-\t      if (program.checksum != gcov_crc32)\n+\t      if (!is_program || program.checksum != gcov_crc32)\n \t\tcontinue;\n \t      summary_pos = base;\n \t      break;\n \t    }\n-\t  gcov_seek (0, 0);\n+\t  gcov_rewrite ();\n \t}\n       else\n \tmemset (&object, 0, sizeof (object));\n-      if (!summary_pos)\n+      if (!(summary_pos + 1))\n \tmemset (&program, 0, sizeof (program));\n \n       /* Merge the summaries.  */\n@@ -352,23 +349,22 @@ gcov_exit (void)\n \t     ((const char *) fi_ptr + fi_stride))\n \t{\n \t  /* Announce function.  */\n-\t  base = gcov_write_tag (GCOV_TAG_FUNCTION);\n+\t  gcov_write_tag_length (GCOV_TAG_FUNCTION, GCOV_TAG_FUNCTION_LENGTH);\n \t  gcov_write_unsigned (fi_ptr->ident);\n \t  gcov_write_unsigned (fi_ptr->checksum);\n-\t  gcov_write_length (base);\n \n \t  for (c_ix = t_ix = 0; t_ix != GCOV_COUNTERS; t_ix++)\n \t    if ((1 << t_ix) & gi_ptr->ctr_mask)\n \t      {\n-\t\tunsigned n_counts;\n+\t\tunsigned n_counts = fi_ptr->n_ctrs[c_ix];\n \t\tgcov_type *c_ptr;\n \t\t    \n-\t\tbase = gcov_write_tag (GCOV_TAG_FOR_COUNTER (t_ix));\n+\t\tgcov_write_tag_length (GCOV_TAG_FOR_COUNTER (t_ix),\n+\t\t\t\t       GCOV_TAG_COUNTER_LENGTH (n_counts));\n \t\tc_ptr = values[c_ix];\n-\t\tfor (n_counts = fi_ptr->n_ctrs[c_ix]; n_counts--; c_ptr++)\n-\t\t  gcov_write_counter (*c_ptr);\n+\t\twhile (n_counts--)\n+\t\t  gcov_write_counter (*c_ptr++);\n \t\tvalues[c_ix] = c_ptr;\n-\t\tgcov_write_length (base);\n \t\tc_ix++;\n \t      }\n \t}\n@@ -377,19 +373,13 @@ gcov_exit (void)\n       gcov_write_summary (GCOV_TAG_OBJECT_SUMMARY, &object);\n \n       /* Generate whole program statistics.  */\n-      if (summary_pos)\n-\tgcov_seek (summary_pos, 0);\n-      else\n-\tgcov_seek_end ();\n+      gcov_seek (summary_pos);\n       gcov_write_summary (GCOV_TAG_PROGRAM_SUMMARY, &program);\n       if ((error = gcov_close ()))\n-\t{\n \t  fprintf (stderr, error  < 0 ?\n \t\t   \"profiling:%s:Overflow writing\\n\" :\n \t\t   \"profiling:%s:Error writing\\n\",\n \t\t   gi_ptr->filename);\n-\t  gi_ptr->filename = 0;\n-\t}\n     }\n }\n "}]}