{"sha": "fcac92297367e6274fad4392fc8a183076920943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhYzkyMjk3MzY3ZTYyNzRmYWQ0MzkyZmM4YTE4MzA3NjkyMDk0Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-12-22T03:56:43Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-12-22T03:56:43Z"}, "message": "trans-array.c (gfc_trans_create_temp_array): When the size is known at compile-time, avoid an unnecessary conditional assignment.\n\n\n\t* trans-array.c (gfc_trans_create_temp_array): When the size is known\n\tat compile-time, avoid an unnecessary conditional assignment.\n\t(gfc_array_init_size): Likewise.\n\nFrom-SVN: r120141", "tree": {"sha": "adbb7a661462cedae996976a49b3c181619884c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adbb7a661462cedae996976a49b3c181619884c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcac92297367e6274fad4392fc8a183076920943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcac92297367e6274fad4392fc8a183076920943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcac92297367e6274fad4392fc8a183076920943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcac92297367e6274fad4392fc8a183076920943/comments", "author": null, "committer": null, "parents": [{"sha": "458e3389dc0700a327cbdfaa46e1ebfd4eeebe71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458e3389dc0700a327cbdfaa46e1ebfd4eeebe71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458e3389dc0700a327cbdfaa46e1ebfd4eeebe71"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "d25f5bf15234019dd47e27f8b051d5c12b085da8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcac92297367e6274fad4392fc8a183076920943/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcac92297367e6274fad4392fc8a183076920943/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fcac92297367e6274fad4392fc8a183076920943", "patch": "@@ -1,3 +1,9 @@\n+2006-12-21  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* trans-array.c (gfc_trans_create_temp_array): When the size is known\n+\tat compile-time, avoid an unnecessary conditional assignment.\n+\t(gfc_array_init_size): Likewise.\n+\n 2006-12-22  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* interface.c: Fix a comment typo."}, {"sha": "56e69a3d43503673e6f6a782f8742096b7ba0083", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcac92297367e6274fad4392fc8a183076920943/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcac92297367e6274fad4392fc8a183076920943/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=fcac92297367e6274fad4392fc8a183076920943", "patch": "@@ -701,24 +701,33 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n     {\n       if (function)\n \t{\n-\t  var = gfc_create_var (TREE_TYPE (size), \"size\");\n-\t  gfc_start_block (&thenblock);\n-\t  gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);\n-\t  thencase = gfc_finish_block (&thenblock);\n-\n-\t  gfc_start_block (&elseblock);\n-\t  gfc_add_modify_expr (&elseblock, var, size);\n-\t  elsecase = gfc_finish_block (&elseblock);\n+\t  /* If we know at compile-time whether any dimension size is\n+\t     negative, we can avoid a conditional and pass the true size\n+\t     to gfc_trans_allocate_array_storage, which can then decide\n+\t     whether to allocate this on the heap or on the stack.  */\n+\t  if (integer_zerop (or_expr))\n+\t    ;\n+\t  else if (integer_onep (or_expr))\n+\t    size = gfc_index_zero_node;\n+\t  else\n+\t    {\n+\t      var = gfc_create_var (TREE_TYPE (size), \"size\");\n+\t      gfc_start_block (&thenblock);\n+\t      gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);\n+\t      thencase = gfc_finish_block (&thenblock);\n+\n+\t      gfc_start_block (&elseblock);\n+\t      gfc_add_modify_expr (&elseblock, var, size);\n+\t      elsecase = gfc_finish_block (&elseblock);\n \t  \n-\t  tmp = gfc_evaluate_now (or_expr, pre);\n-\t  tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n-\t  gfc_add_expr_to_block (pre, tmp);\n-\t  nelem = var;\n-\t  size = var;\n+\t      tmp = gfc_evaluate_now (or_expr, pre);\n+\t      tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n+\t      gfc_add_expr_to_block (pre, tmp);\n+\t      size = var;\n+\t    }\n \t}\n-      else\n-\t  nelem = size;\n \n+      nelem = size;\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n \t\t\t  TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n     }\n@@ -3275,6 +3284,11 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n       *poffset = offset;\n     }\n \n+  if (integer_zerop (or_expr))\n+    return size;\n+  if (integer_onep (or_expr))\n+    return gfc_index_zero_node;\n+\n   var = gfc_create_var (TREE_TYPE (size), \"size\");\n   gfc_start_block (&thenblock);\n   gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);"}]}