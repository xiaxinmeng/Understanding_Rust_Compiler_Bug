{"sha": "da19e37cedc2acd1c560012dc41a57b7145dc181", "node_id": "C_kwDOANBUbNoAKGRhMTllMzdjZWRjMmFjZDFjNTYwMDEyZGM0MWE1N2I3MTQ1ZGMxODE", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-08-22T09:05:39Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2023-03-02T14:34:23Z"}, "message": "s390: Add LEN_LOAD/LEN_STORE support.\n\nThis patch adds LEN_LOAD/LEN_STORE support for z13 and newer.\nIt defines a bias value of -1 and implements the LEN_LOAD and LEN_STORE\noptabs.\n\nAdd vll/vstl testcases adapted from Power.\n\nAlso change expectations for SLP testcases with more than one rgroup.\n\ngcc/ChangeLog:\n\n\t* config/s390/predicates.md (vll_bias_operand): Add -1 bias.\n\t* config/s390/s390.cc (s390_option_override_internal): Make\n\tpartial vector usage the default from z13 on.\n\t* config/s390/vector.md (len_load_v16qi): Add.\n\t(len_store_v16qi): Add.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/s390.exp: Add partial subdirectory.\n\t* gcc.target/s390/vector/vec-nopeel-2.c: Change test\n\texpectation.\n\t* lib/target-supports.exp: Add s390.\n\t* gcc.target/s390/vector/partial/s390-vec-length-1.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-2.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-3.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-7.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-1.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-2.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-3.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-7.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-1.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-2.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-3.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-epil-run-7.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-1.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-2.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-3.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-7.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-1.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-2.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-3.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-full-run-7.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-run-1.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-run-2.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-run-3.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-run-7.h: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length-small.c: New test.\n\t* gcc.target/s390/vector/partial/s390-vec-length.h: New test.", "tree": {"sha": "869ce374c83db14908f6632d13aa04617945c53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869ce374c83db14908f6632d13aa04617945c53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da19e37cedc2acd1c560012dc41a57b7145dc181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da19e37cedc2acd1c560012dc41a57b7145dc181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da19e37cedc2acd1c560012dc41a57b7145dc181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da19e37cedc2acd1c560012dc41a57b7145dc181/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61407e018940633a9ca997bf3773f794faa25e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61407e018940633a9ca997bf3773f794faa25e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61407e018940633a9ca997bf3773f794faa25e23"}], "stats": {"total": 453, "additions": 450, "deletions": 3}, "files": [{"sha": "0c369197fd93dc1e199e5075ca653bea27ab8a65", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -606,3 +606,11 @@\n        (and (match_code \"reg\")\n \t    (match_test \"reload_completed || reload_in_progress\")\n \t    (match_test \"register_operand (op, GET_MODE (op))\"))))\n+\n+; Bias value for LEN_LOAD and LEN_STORE.  The bias will be added to the\n+; length (in bytes for s390) to be loaded.  vll/vstl expect the lowest byte\n+; to load while LEN_LOAD/LEN_STORE use the actual length in bytes.  This implies\n+; that we cannot load a length of 0.\n+(define_predicate \"vll_bias_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"op == CONSTM1_RTX (QImode)\")))"}, {"sha": "505de995da87b5a8eff5531581fb43a1ef136fb1", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -15857,6 +15857,14 @@ s390_option_override_internal (struct gcc_options *opts,\n \n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   SET_OPTION_IF_UNSET (opts, opts_set, param_sched_pressure_algorithm, 2);\n+\n+  /* Allow simple vector masking using vll/vstl for epilogues.  */\n+  if (TARGET_Z13)\n+    SET_OPTION_IF_UNSET (opts, opts_set, param_vect_partial_vector_usage, 1);\n+  else\n+    SET_OPTION_IF_UNSET (opts, opts_set, param_vect_partial_vector_usage, 0);\n+\n+  /* Do not vectorize loops with a low trip count for now.  */\n   SET_OPTION_IF_UNSET (opts, opts_set, param_min_vect_loop_bound, 2);\n \n   /* Set the default alignment.  */\n@@ -17825,7 +17833,6 @@ s390_vectorize_vec_perm_const (machine_mode vmode, machine_mode op_mode,\n #undef TARGET_VECTORIZE_VEC_PERM_CONST\n #define TARGET_VECTORIZE_VEC_PERM_CONST s390_vectorize_vec_perm_const\n \n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "21bec729efa738ece0ff905860a4a48d4090e22e", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -2947,6 +2947,41 @@\n   \"\"\n   [(set_attr \"op_type\"      \"*,VRX,VRX\")])\n \n+;\n+; Implement len_load/len_store optabs with vll/vstl.\n+(define_expand \"len_load_v16qi\"\n+  [(match_operand:V16QI 0 \"register_operand\")\n+   (match_operand:V16QI 1 \"memory_operand\")\n+   (match_operand:QI 2 \"register_operand\")\n+   (match_operand:QI 3 \"vll_bias_operand\")\n+  ]\n+  \"TARGET_VX && TARGET_64BIT\"\n+{\n+  rtx mem = adjust_address (operands[1], BLKmode, 0);\n+\n+  rtx len = gen_reg_rtx (SImode);\n+  emit_move_insn (len, gen_rtx_ZERO_EXTEND (SImode, operands[2]));\n+  emit_insn (gen_vllv16qi (operands[0], len, mem));\n+  DONE;\n+})\n+\n+(define_expand \"len_store_v16qi\"\n+  [(match_operand:V16QI 0 \"memory_operand\")\n+   (match_operand:V16QI 1 \"register_operand\")\n+   (match_operand:QI 2 \"register_operand\")\n+   (match_operand:QI 3 \"vll_bias_operand\")\n+  ]\n+  \"TARGET_VX && TARGET_64BIT\"\n+{\n+  rtx mem = adjust_address (operands[0], BLKmode, 0);\n+\n+  rtx len = gen_reg_rtx (SImode);\n+  emit_move_insn (len, gen_rtx_ZERO_EXTEND (SImode, operands[2]));\n+  emit_insn (gen_vstlv16qi (operands[1], len, mem));\n+  DONE;\n+});;\n+\n+\n ; reduc_smin\n ; reduc_smax\n ; reduc_umin"}, {"sha": "58258492f832685c5c3bd45a09518c7004afa0e4", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -236,6 +236,9 @@ dg-runtest [lsort [prune [glob -nocomplain $srcdir/$subdir/*.{c,S}] \\\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.{c,S}]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/partial/*.{c,S}]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n gfortran-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.F90]] \\\n \t\"\" $DEFAULT_FFLAGS\n "}, {"sha": "5a27c32a6d98de56b5f1ade30887a35520e736ec", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-1.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-1.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,18 @@\n+#include \"s390-vec-length.h\"\n+\n+/* Test the case loop iteration is known.  */\n+\n+#define N 127\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N];                                                     \\\n+  extern TYPE b_##TYPE[N];                                                     \\\n+  extern TYPE c_##TYPE[N];                                                     \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE ()                       \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "a9a188c4d16fe08bfb827fb2f9bc975456d85207", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-2.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-2.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,18 @@\n+#include \"s390-vec-length.h\"\n+\n+/* Test the case loop iteration is unknown.  */\n+\n+#define N 255\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N];                                                     \\\n+  extern TYPE b_##TYPE[N];                                                     \\\n+  extern TYPE c_##TYPE[N];                                                     \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE (unsigned int n)         \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < n; i++)                                                    \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "30d7c383d7275dfe08d459dcfc94d7262a6170a7", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-3.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-3.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,31 @@\n+#include \"s390-vec-length.h\"\n+\n+/* Test the case loop iteration less than VF.  */\n+\n+/* For char.  */\n+#define N_uint8_t 15\n+#define N_int8_t 15\n+/* For short.  */\n+#define N_uint16_t 6\n+#define N_int16_t 6\n+/* For int/float.  */\n+#define N_uint32_t 3\n+#define N_int32_t 3\n+#define N_float 3\n+/* For long/double.  */\n+#define N_uint64_t 1\n+#define N_int64_t 1\n+#define N_double 1\n+\n+#define test(TYPE)                                                             \\\n+  extern TYPE a_##TYPE[N_##TYPE];                                              \\\n+  extern TYPE b_##TYPE[N_##TYPE];                                              \\\n+  extern TYPE c_##TYPE[N_##TYPE];                                              \\\n+  void __attribute__ ((noinline, noclone)) test##TYPE ()                       \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      c_##TYPE[i] = a_##TYPE[i] + b_##TYPE[i];                                 \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "e441bf6ed08b86b57f9d8271aa51873cc5a5eaf5", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-7.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-7.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,17 @@\n+#include \"s390-vec-length.h\"\n+\n+#define N 64\n+#define START 1\n+#define END 59\n+\n+#define test(TYPE)                                                             \\\n+  TYPE x_##TYPE[N] __attribute__((aligned(16)));                                \\\n+  void __attribute__((noinline, noclone)) test_npeel_##TYPE() {                \\\n+    TYPE v = 0;                                                                \\\n+    for (unsigned int i = START; i < END; i++) {                               \\\n+      x_##TYPE[i] = v;                                                         \\\n+      v += 1;                                                                  \\\n+    }                                                                          \\\n+  }\n+\n+TEST_ALL (test)"}, {"sha": "ca844f79f61760fa950cc9b2ccb9c409e18e1a9d", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-1.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1 --param=min-vect-loop-bound=0\" } */\n+\n+/* Test that we only vectorize the epilogue with vector load/store with length,\n+   the main body still uses normal vector load/store.  */\n+\n+#include \"s390-vec-length-1.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 14 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 7 } } */\n+"}, {"sha": "31850f81c809867fe583a756f8c44ef065aed2c9", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-2.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1 --param=min-vect-loop-bound=0\" } */\n+\n+/* Test that we only vectorize the epilogue with vector load/store with length,\n+   the main body still uses normal vector load/store.  */\n+\n+#include \"s390-vec-length-2.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 10 } } */\n+"}, {"sha": "4e342de331c492cfa9d8c9b39667382f78b19208", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-3.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1 --param=min-vect-loop-bound=0\" } */\n+\n+/* Test that we only vectorize the epilogue with vector load/store with length,\n+   the main body still uses normal vector load/store.  */\n+\n+#include \"s390-vec-length-3.h\"\n+\n+/* { dg-final { scan-assembler-not   {\\mvl\\M} } } */\n+/* { dg-final { scan-assembler-not   {\\mvst\\M} } } */\n+/* 64bit types get completely unrolled, so only check the others.  */\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 14 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 7 } } */\n+"}, {"sha": "c85c93e17d875e831eaf3b59c2785764abecb3eb", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-7.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-7.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -ffast-math -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1 --param=min-vect-loop-bound=0\" } */\n+\n+/* Test that we only vectorize the epilogue with vector load/store with length,\n+   the main body still uses normal vector load/store.  */\n+\n+#include \"s390-vec-length-7.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 4 } } */"}, {"sha": "83d986451cb069c66cb60452c3aaf2fd86454d72", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-run-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-1.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+#include \"s390-vec-length-run-1.h\"\n+"}, {"sha": "8b3b19516bfa74f10933ff5d047e161d9679c915", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-run-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-2.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+#include \"s390-vec-length-run-2.h\"\n+"}, {"sha": "f2f94efc14bbc35d088a82c48c3d78412915eab6", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-run-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-3.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+#include \"s390-vec-length-run-3.h\"\n+"}, {"sha": "c1f58c3ee4273866609148cd28abb9eef38ad7d9", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-epil-run-7.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-epil-run-7.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -ffast-math -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=1\" } */\n+\n+#include \"s390-vec-length-run-7.h\"\n+"}, {"sha": "0ff86e70e48ef537a81b7e8d4bc45122360bd382", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-1.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test that the loop body uses vector load/store with length,\n+   there should not be any epilogues.  */\n+\n+#include \"s390-vec-length-1.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 10 } } */"}, {"sha": "f47fb8949437588991ee5c5c7ec254937c6cafb0", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-2.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test that the loop body uses vector load/store with length,\n+   there should not be any epilogues.  */\n+\n+#include \"s390-vec-length-2.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 20 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 10 } } */"}, {"sha": "086185f461b026d80d0d2934c1ef7d93088dbf00", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-3.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2 --param=min-vect-loop-bound=0\" } */\n+\n+/* Test that the loop body uses vector load/store with length,\n+   there should not be any epilogues.  */\n+\n+#include \"s390-vec-length-3.h\"\n+\n+/* 64bit types get completely unrolled, so only check the others.  */\n+/* { dg-final { scan-assembler-times {\\mvll\\M} 14 } } */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 7 } } */"}, {"sha": "23856e1c5fa0e95328cc44a088d9505c31146ef3", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-7.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+/* Test that the loop body uses vector load/store with length,\n+   there should not be any epilogues.  */\n+\n+#include \"s390-vec-length-7.h\"\n+\n+/* Each type should have one vstl but we do not currently vectorize the\n+   float and double variants and the [u]int64_t ones which do not require\n+   partial vectors.  */\n+/* { dg-final { scan-assembler-times {\\mvstl\\M} 6 } } */"}, {"sha": "b064706c63edf06f75d0b07dc1868bc1b99230c9", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-run-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-1.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+#include \"s390-vec-length-run-1.h\"\n+"}, {"sha": "c9a4ae8f3a6aac163653e76bbfa5c883db9f75c2", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-run-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-2.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+#include \"s390-vec-length-run-2.h\"\n+"}, {"sha": "b422119b7ecea29ce956967c2261203d3c83c29b", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-run-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-3.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+#include \"s390-vec-length-run-3.h\"\n+"}, {"sha": "dea7a0acec74e3d878b4b24a85287822b913d05e", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-full-run-7.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-full-run-7.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-march=native -O2 -ftree-vectorize -fno-vect-cost-model -ffast-math -fno-trapping-math\" } */\n+\n+/* { dg-additional-options \"--param=vect-partial-vector-usage=2\" } */\n+\n+#include \"s390-vec-length-run-7.h\"\n+"}, {"sha": "ba9e113dc64080198bbfe15a089b9549f53c49e0", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-run-1.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-1.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,34 @@\n+#include \"s390-vec-length-1.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N];                                                            \\\n+  TYPE b_##TYPE[N];                                                            \\\n+  TYPE c_##TYPE[N];\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE ();                                                             \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "87582cefe7de1f03ac79753091c433b953722631", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-run-2.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-2.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,36 @@\n+#include \"s390-vec-length-2.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N];                                                            \\\n+  TYPE b_##TYPE[N];                                                            \\\n+  TYPE c_##TYPE[N];\n+\n+#define N1 195\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N; i++)                                                    \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE (N1);                                                           \\\n+    for (i = 0; i < N1; i++)                                                   \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "eef57f41dbb1e9bec3e6186bc3ab73fb9728ca5b", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-run-3.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-3.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,34 @@\n+#include \"s390-vec-length-3.h\"\n+\n+#define decl(TYPE)                                                             \\\n+  TYPE a_##TYPE[N_##TYPE];                                                     \\\n+  TYPE b_##TYPE[N_##TYPE];                                                     \\\n+  TYPE c_##TYPE[N_##TYPE];\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      {                                                                        \\\n+\ta_##TYPE[i] = i * 2 + 1;                                               \\\n+\tb_##TYPE[i] = i % 2 - 2;                                               \\\n+      }                                                                        \\\n+    test##TYPE ();                                                             \\\n+    for (i = 0; i < N_##TYPE; i++)                                             \\\n+      {                                                                        \\\n+\tTYPE a1 = i * 2 + 1;                                                   \\\n+\tTYPE b1 = i % 2 - 2;                                                   \\\n+\tTYPE exp_c = a1 + b1;                                                  \\\n+\tif (c_##TYPE[i] != exp_c)                                              \\\n+\t  __builtin_abort ();                                                  \\\n+      }                                                                        \\\n+  }\n+\n+TEST_ALL (decl)\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (run)\n+  return 0;\n+}"}, {"sha": "39af9a64714d7e92947d18732c4ec10085d6e2fe", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-run-7.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-run-7.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,16 @@\n+#include \"s390-vec-length-7.h\"\n+\n+#define run(TYPE)                                                              \\\n+  {                                                                            \\\n+    unsigned int i = 0;                                                        \\\n+    test_npeel_##TYPE();                                                       \\\n+    for (int i = 0; i < N; ++i) {                                              \\\n+      if (x_##TYPE[i] != (i < START || i >= END ? 0 : (i - START)))            \\\n+        __builtin_abort();                                                     \\\n+    }                                                                          \\\n+  }\n+\n+int main() {\n+  TEST_ALL(run)\n+  return 0;\n+}"}, {"sha": "ed953c876e4bc4984a211d3e33d6dee8d53fe2d2", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length-small.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length-small.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { lp64 && s390_vx } } } */\n+/* { dg-options \"-mzarch -march=native -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops\" } */\n+\n+/* { dg-additional-options \"--param=min-vect-loop-bound=0 --param=vect-partial-vector-usage=2 -fno-trapping-math\" } */\n+\n+#define SZ 333\n+\n+void foo (char *restrict a, char *restrict b, char *restrict c, int n)\n+{\n+#pragma gcc unroll 0\n+    for (int i = 0; i < 17; i++)\n+          c[i] = a[i] + b[i];\n+/* { dg-final { scan-assembler-times \"lhi\\t%r\\[0-9\\]*,0\\n\" 1 } } */\n+}\n+"}, {"sha": "83418b0b6418a5f3f3a269c11f7356c489fd0b7a", "filename": "gcc/testsuite/gcc.target/s390/vector/partial/s390-vec-length.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fpartial%2Fs390-vec-length.h?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -0,0 +1,14 @@\n+#include <stdint.h>\n+\n+#define TEST_ALL(T)                                                            \\\n+  T (int8_t)                                                                   \\\n+  T (uint8_t)                                                                  \\\n+  T (int16_t)                                                                  \\\n+  T (uint16_t)                                                                 \\\n+  T (int32_t)                                                                  \\\n+  T (uint32_t)                                                                 \\\n+  T (int64_t)                                                                  \\\n+  T (uint64_t)                                                                 \\\n+  T (float)                                                                    \\\n+  T (double)\n+"}, {"sha": "03bf5ee60f10793c67800a8156e253af944f0b2e", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-nopeel-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-2.c?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -9,4 +9,4 @@ void foo(int *restrict a, int *restrict b, unsigned int n)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Vectorizing an unaligned access\" \"vect\" } } */"}, {"sha": "4236c920baeb5a1a5f994253d34ad3404ffb22ee", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da19e37cedc2acd1c560012dc41a57b7145dc181/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=da19e37cedc2acd1c560012dc41a57b7145dc181", "patch": "@@ -7778,7 +7778,8 @@ proc check_effective_target_vect_fully_masked { } {\n # @code{len_store} optabs.\n \n proc check_effective_target_vect_len_load_store { } {\n-    return [check_effective_target_has_arch_pwr9]\n+    return [expr { [check_effective_target_has_arch_pwr9]\n+      || [check_effective_target_s390_vx] }]\n }\n \n # Return the value of parameter vect-partial-vector-usage specified for"}]}