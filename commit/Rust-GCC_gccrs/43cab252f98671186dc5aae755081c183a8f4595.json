{"sha": "43cab252f98671186dc5aae755081c183a8f4595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjYWIyNTJmOTg2NzExODZkYzVhYWU3NTUwODFjMTgzYThmNDU5NQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-10-01T10:53:39Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-10-01T10:53:39Z"}, "message": "Replace occurances of HANDLE_SYSV_PRAGMA with HANDLE_GENERIC_PRAGMAS.\n\nhandle_generic_pragma() New function: Parse generic pragmas.\n\nFrom-SVN: r22712", "tree": {"sha": "fc626d778b9504a825599cf41a22ed452f2d8a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc626d778b9504a825599cf41a22ed452f2d8a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43cab252f98671186dc5aae755081c183a8f4595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43cab252f98671186dc5aae755081c183a8f4595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43cab252f98671186dc5aae755081c183a8f4595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43cab252f98671186dc5aae755081c183a8f4595/comments", "author": null, "committer": null, "parents": [{"sha": "a09a009c459a7314cef619c329c9291a59fdb077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09a009c459a7314cef619c329c9291a59fdb077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09a009c459a7314cef619c329c9291a59fdb077"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "34f804440aa5136ca5d5a689a41295c711289d8d", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cab252f98671186dc5aae755081c183a8f4595/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cab252f98671186dc5aae755081c183a8f4595/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=43cab252f98671186dc5aae755081c183a8f4595", "patch": "@@ -1,3 +1,9 @@\n+Thu Oct  1 10:43:45 1998  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* lex.c: Replace occurances of HANDLE_SYSV_PRAGMA with\n+\tHANDLE_GENERIC_PRAGMAS.\n+\t(handle_generic_pragma): New function: Parse generic pragmas.\n+\t\n Wed Sep 30 20:22:34 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parse.c (emit_label): Fix return-type of prototype."}, {"sha": "38c8fa46276d769fbca93ccfbbb330a8732dee3a", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cab252f98671186dc5aae755081c183a8f4595/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cab252f98671186dc5aae755081c183a8f4595/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=43cab252f98671186dc5aae755081c183a8f4595", "patch": "@@ -1480,6 +1480,49 @@ pragma_ungetc (arg)\n }\n #endif /* HANDLE_PRAGMA */\n \n+#ifdef HANDLE_GENERIC_PRAGMAS\n+/* Handle a generic #pragma directive.\n+   BUFFER contains the text we read after `#pragma'.  Processes the entire input\n+   line and return non-zero iff the pragma was successfully processed.  */\n+\n+static int\n+handle_generic_pragma (buffer)\n+     char * buffer;\n+{\n+  register int c;\n+\n+  for (;;)\n+    {\n+      char * buff;\n+      \n+      handle_pragma_token (buffer, NULL);\n+\n+      c = getc (finput);\n+\n+      while (c == ' ' || c == '\\t')\n+\tc = getc (finput);\n+      ungetc (c, finput);\n+      \n+      if (c == '\\n' || c == EOF)\n+\treturn handle_pragma_token (NULL, NULL);\n+\n+      /* Read the next word of the pragma into the buffer.  */\n+      buff = buffer;\n+      do\n+\t{\n+\t  * buff ++ = c;\n+\t  c = getc (finput);\n+\t}\n+      while (c != EOF && isascii (c) && ! isspace (c) && c != '\\n'\n+\t     && buff < buffer + 128); /* XXX shared knowledge about size of buffer.  */\n+      \n+      ungetc (c, finput);\n+      \n+      * -- buff = 0;\n+    }\n+}\n+#endif /* HANDLE_GENERIC_PRAGMAS */\n+\f\n /* At the beginning of a line, increment the line number and process\n    any #-directive on this line.  If the line is a #-directive, read\n    the entire line and return a newline.  Otherwise, return the line's\n@@ -1557,8 +1600,15 @@ check_newline ()\n \t\t\n \t      * -- buff = 0;\n \t      \n-\t      (void) HANDLE_PRAGMA (pragma_getc, pragma_ungetc, buffer);\n+\t      if (HANDLE_PRAGMA (pragma_getc, pragma_ungetc, buffer))\n+\t\tgoto skipline;\n #endif /* HANDLE_PRAGMA */\n+\t      \n+#ifdef HANDLE_GENERIC_PRAGMAS\n+\t      if (handle_generic_pragma (buffer))\n+\t\tgoto skipline;\n+#endif /* HANDLE_GENERIC_PRAGMAS */\n+\t      \n \t      goto skipline;\n \t    }\n \t}"}]}