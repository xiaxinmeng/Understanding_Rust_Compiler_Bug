{"sha": "dbe9dfdd501cea13034c7b809330e82a54883b1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlOWRmZGQ1MDFjZWExMzAzNGM3YjgwOTMzMGU4MmE1NDg4M2IxZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-07-20T14:46:57Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-20T14:46:57Z"}, "message": "avr.c (avr_legitimize_address): Force constant addresses outside [0,0xc0] into a register.\n\ngcc/\n\t* gcc/config/avr.c (avr_legitimize_address) [AVR_TINY]: Force\n\tconstant addresses outside [0,0xc0] into a register.\n\t(avr_out_movhi_r_mr_reg_no_disp_tiny): Pass insn.  And handle\n\tcases where the base address register is unused after.\n\t(avr_out_movhi_r_mr_reg_disp_tiny): Same.\n\t(avr_out_movhi_mr_r_reg_disp_tiny): Same.\n\t(avr_out_store_psi_reg_disp_tiny): Same.\n\ngcc/testsuite/\n\t* gcc.target/avr/torture/get-mem.c: New test.\n\t* gcc.target/avr/torture/set-mem.c: New test.\n\nFrom-SVN: r238528", "tree": {"sha": "340de8a19b1645bf355f6f2a045baa9284cc9bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/340de8a19b1645bf355f6f2a045baa9284cc9bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe9dfdd501cea13034c7b809330e82a54883b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe9dfdd501cea13034c7b809330e82a54883b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe9dfdd501cea13034c7b809330e82a54883b1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe9dfdd501cea13034c7b809330e82a54883b1e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25e1d82bf149151af72a8a38db2160b1ca46002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25e1d82bf149151af72a8a38db2160b1ca46002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25e1d82bf149151af72a8a38db2160b1ca46002"}], "stats": {"total": 258, "additions": 199, "deletions": 59}, "files": [{"sha": "36c13358443fb343d7bc046b63be298ab6518560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe9dfdd501cea13034c7b809330e82a54883b1e", "patch": "@@ -1,3 +1,13 @@\n+2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* gcc/config/avr.c (avr_legitimize_address) [AVR_TINY]: Force\n+\tconstant addresses outside [0,0xc0] into a register.\n+\t(avr_out_movhi_r_mr_reg_no_disp_tiny): Pass insn.  And handle\n+\tcases where the base address register is unused after.\n+\t(avr_out_movhi_r_mr_reg_disp_tiny): Same.\n+\t(avr_out_movhi_mr_r_reg_disp_tiny): Same.\n+\t(avr_out_store_psi_reg_disp_tiny): Same.\n+\n 2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \tImplement attribute progmem on reduced Tiny cores by adding"}, {"sha": "8beda9f110345675918da645b3d406c829731d17", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 77, "deletions": 59, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dbe9dfdd501cea13034c7b809330e82a54883b1e", "patch": "@@ -1926,6 +1926,16 @@ avr_legitimize_address (rtx x, rtx oldx, machine_mode mode)\n \n   x = oldx;\n \n+  if (AVR_TINY)\n+    {\n+      if (CONSTANT_ADDRESS_P (x)\n+          && !(CONST_INT_P (x)\n+               && IN_RANGE (INTVAL (x), 0, 0xc0 - GET_MODE_SIZE (mode))))\n+        {\n+          x = force_reg (Pmode, x);\n+        }\n+    }\n+\n   if (GET_CODE (oldx) == PLUS\n       && REG_P (XEXP (oldx, 0)))\n     {\n@@ -3537,7 +3547,7 @@ out_movqi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n /* Same as movhi_r_mr, but TINY does not have ADIW, SBIW and LDD */\n \n static const char*\n-avr_out_movhi_r_mr_reg_no_disp_tiny (rtx op[], int *plen)\n+avr_out_movhi_r_mr_reg_no_disp_tiny (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3551,17 +3561,20 @@ avr_out_movhi_r_mr_reg_no_disp_tiny (rtx op[], int *plen)\n \t\t\t\"ld %B0,%1\"          CR_TAB\n \t\t\t\"mov %A0,__tmp_reg__\", op, plen, -3);\n \n-  return avr_asm_len (\"ld %A0,%1\"             CR_TAB\n-                      TINY_ADIW (%E1, %F1, 1) CR_TAB\n-                      \"ld %B0,%1\"             CR_TAB\n-                      TINY_SBIW (%E1, %F1, 1), op, plen, -6);\n+  avr_asm_len (\"ld %A0,%1+\"                  CR_TAB\n+               \"ld %B0,%1\", op, plen, -2);\n+\n+  if (!reg_unused_after (insn, base))\n+    avr_asm_len (TINY_SBIW (%E1, %F1, 1), op, plen, 2);\n+\n+  return \"\";\n }\n \n \n /* Same as movhi_r_mr, but TINY does not have ADIW, SBIW and LDD */\n \n static const char*\n-avr_out_movhi_r_mr_reg_disp_tiny (rtx op[], int *plen)\n+avr_out_movhi_r_mr_reg_disp_tiny (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3579,10 +3592,14 @@ avr_out_movhi_r_mr_reg_disp_tiny (rtx op[], int *plen)\n     }\n   else\n     {\n-      return avr_asm_len (TINY_ADIW (%I1, %J1, %o1) CR_TAB\n-                          \"ld %A0,%b1+\"             CR_TAB\n-                          \"ld %B0,%b1\"              CR_TAB\n-                          TINY_SBIW (%I1, %J1, %o1+1), op, plen, -6);\n+      avr_asm_len (TINY_ADIW (%I1, %J1, %o1) CR_TAB\n+                   \"ld %A0,%b1+\"             CR_TAB\n+                   \"ld %B0,%b1\", op, plen, -4);\n+\n+      if (!reg_unused_after (insn, XEXP (base, 0)))\n+        avr_asm_len (TINY_SBIW (%I1, %J1, %o1+1), op, plen, 2);\n+\n+      return \"\";\n     }\n }\n \n@@ -3630,7 +3647,7 @@ out_movhi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n   if (reg_base > 0)\n     {\n       if (AVR_TINY)\n-        return avr_out_movhi_r_mr_reg_no_disp_tiny (op, plen);\n+        return avr_out_movhi_r_mr_reg_no_disp_tiny (insn, op, plen);\n \n       if (reg_dest == reg_base)         /* R = (R) */\n         return avr_asm_len (\"ld __tmp_reg__,%1+\" CR_TAB\n@@ -3655,7 +3672,7 @@ out_movhi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n       int reg_base = true_regnum (XEXP (base, 0));\n \n       if (AVR_TINY)\n-        return avr_out_movhi_r_mr_reg_disp_tiny (op, plen);\n+        return avr_out_movhi_r_mr_reg_disp_tiny (insn, op, plen);\n \n       if (disp > MAX_LD_OFFSET (GET_MODE (src)))\n         {\n@@ -4404,8 +4421,8 @@ avr_out_load_psi_reg_no_disp_tiny (rtx_insn *insn, rtx *op, int *plen)\n \t\t   \"ld %B0,%1+\"  CR_TAB\n \t\t   \"ld %C0,%1\", op, plen, -3);\n \n-      if (reg_dest != reg_base - 2 &&\n-          !reg_unused_after (insn, base))\n+      if (reg_dest != reg_base - 2\n+          && !reg_unused_after (insn, base))\n         {\n           avr_asm_len (TINY_SBIW (%E1, %F1, 2), op, plen, 2);\n         }\n@@ -4435,13 +4452,13 @@ avr_out_load_psi_reg_disp_tiny (rtx_insn *insn, rtx *op, int *plen)\n   else\n     {\n       avr_asm_len (TINY_ADIW (%I1, %J1, %o1)   CR_TAB\n-                          \"ld %A0,%b1+\"              CR_TAB\n-                          \"ld %B0,%b1+\"              CR_TAB\n-                          \"ld %C0,%b1\", op, plen, -5);\n+                   \"ld %A0,%b1+\"               CR_TAB\n+                   \"ld %B0,%b1+\"               CR_TAB\n+                   \"ld %C0,%b1\", op, plen, -5);\n \n-      if (reg_dest != (reg_base - 2)\n+      if (reg_dest != reg_base - 2\n           && !reg_unused_after (insn, XEXP (base, 0)))\n-          avr_asm_len (TINY_SBIW (%I1, %J1, %o1+2), op, plen, 2);\n+        avr_asm_len (TINY_SBIW (%I1, %J1, %o1+2), op, plen, 2);\n \n       return \"\";\n     }\n@@ -4626,7 +4643,7 @@ avr_out_store_psi_reg_no_disp_tiny (rtx_insn *insn, rtx *op, int *plen)\n }\n \n static const char*\n-avr_out_store_psi_reg_disp_tiny (rtx *op, int *plen)\n+avr_out_store_psi_reg_disp_tiny (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4635,31 +4652,29 @@ avr_out_store_psi_reg_disp_tiny (rtx *op, int *plen)\n   int reg_src = true_regnum (src);\n \n   if (reg_src == reg_base)\n-    {\n-      return avr_asm_len (\"mov __tmp_reg__,%A1\"          CR_TAB\n-                          \"mov __zero_reg__,%B1\"         CR_TAB\n-                          TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n-                          \"st %b0+,__tmp_reg__\"          CR_TAB\n-                          \"st %b0+,__zero_reg__\"         CR_TAB\n-                          \"st %b0,%C1\"                   CR_TAB\n-                          \"clr __zero_reg__\"             CR_TAB\n-                          TINY_SBIW (%I0, %J0, %o0+2), op, plen, -10);\n-    }\n+    avr_asm_len (\"mov __tmp_reg__,%A1\"          CR_TAB\n+                 \"mov __zero_reg__,%B1\"         CR_TAB\n+                 TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n+                 \"st %b0+,__tmp_reg__\"          CR_TAB\n+                 \"st %b0+,__zero_reg__\"         CR_TAB\n+                 \"st %b0,%C1\"                   CR_TAB\n+                 \"clr __zero_reg__\", op, plen, -8);\n   else if (reg_src == reg_base - 2)\n-    {\n-      return avr_asm_len (\"mov __tmp_reg__,%C1\"          CR_TAB\n-                          TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n-                          \"st %b0+,%A1\"                  CR_TAB\n-                          \"st %b0+,%B1\"                  CR_TAB\n-                          \"st %b0,__tmp_reg__\"           CR_TAB\n-                          TINY_SBIW (%I0, %J0, %o0+2), op, plen, -8);\n-    }\n+    avr_asm_len (\"mov __tmp_reg__,%C1\"          CR_TAB\n+                 TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n+                 \"st %b0+,%A1\"                  CR_TAB\n+                 \"st %b0+,%B1\"                  CR_TAB\n+                 \"st %b0,__tmp_reg__\", op, plen, -6);\n+  else\n+    avr_asm_len (TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n+                 \"st %b0+,%A1\"                  CR_TAB\n+                 \"st %b0+,%B1\"                  CR_TAB\n+                 \"st %b0,%C1\", op, plen, -5);\n \n-  return avr_asm_len (TINY_ADIW (%I0, %J0, %o0)      CR_TAB\n-                          \"st %b0+,%A1\"                  CR_TAB\n-                          \"st %b0+,%B1\"                  CR_TAB\n-                          \"st %b0,%C1\"                   CR_TAB\n-                          TINY_SBIW (%I0, %J0, %o0+2), op, plen, -7);\n+  if (!reg_unused_after (insn, XEXP (base, 0)))\n+    avr_asm_len (TINY_SBIW (%I0, %J0, %o0+2), op, plen, 2);\n+\n+  return \"\";\n }\n \n /* Handle store of 24-bit type from register or zero to memory.  */\n@@ -4708,7 +4723,7 @@ avr_out_store_psi (rtx_insn *insn, rtx *op, int *plen)\n       int disp = INTVAL (XEXP (base, 1));\n \n       if (AVR_TINY)\n-        return avr_out_store_psi_reg_disp_tiny (op, plen);\n+        return avr_out_store_psi_reg_disp_tiny (insn, op, plen);\n \n       reg_base = REGNO (XEXP (base, 0));\n \n@@ -4842,7 +4857,7 @@ avr_out_movqi_mr_r_reg_disp_tiny (rtx_insn *insn, rtx op[], int *plen)\n     else\n     {\n       avr_asm_len (TINY_ADIW (%I0, %J0, %o0) CR_TAB\n-          \"st %b0,%1\" , op, plen, -3);\n+                   \"st %b0,%1\", op, plen, -3);\n     }\n \n   if (!reg_unused_after (insn, XEXP (x,0)))\n@@ -5066,27 +5081,30 @@ avr_out_movhi_mr_r_reg_no_disp_tiny (rtx_insn *insn, rtx op[], int *plen)\n }\n \n static const char*\n-avr_out_movhi_mr_r_reg_disp_tiny (rtx op[], int *plen)\n+avr_out_movhi_mr_r_reg_disp_tiny (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n   rtx base = XEXP (dest, 0);\n   int reg_base = REGNO (XEXP (base, 0));\n   int reg_src = true_regnum (src);\n \n-  return reg_src == reg_base\n-        ? avr_asm_len (\"mov __tmp_reg__,%A1\"          CR_TAB\n-                       \"mov __zero_reg__,%B1\"         CR_TAB\n-                       TINY_ADIW (%I0, %J0, %o0+1)    CR_TAB\n-                       \"st %b0,__zero_reg__\"          CR_TAB\n-                       \"st -%b0,__tmp_reg__\"          CR_TAB\n-                       \"clr __zero_reg__\"             CR_TAB\n-                       TINY_SBIW (%I0, %J0, %o0), op, plen, -9)\n+  if (reg_src == reg_base)\n+    avr_asm_len (\"mov __tmp_reg__,%A1\"          CR_TAB\n+                 \"mov __zero_reg__,%B1\"         CR_TAB\n+                 TINY_ADIW (%I0, %J0, %o0+1)    CR_TAB\n+                 \"st %b0,__zero_reg__\"          CR_TAB\n+                 \"st -%b0,__tmp_reg__\"          CR_TAB\n+                 \"clr __zero_reg__\", op, plen, -7);\n+  else\n+    avr_asm_len (TINY_ADIW (%I0, %J0, %o0+1) CR_TAB\n+                 \"st %b0,%B1\"                CR_TAB\n+                 \"st -%b0,%A1\", op, plen, -4);\n+\n+  if (!reg_unused_after (insn, XEXP (base, 0)))\n+    avr_asm_len (TINY_SBIW (%I0, %J0, %o0), op, plen, 2);\n \n-        : avr_asm_len (TINY_ADIW (%I0, %J0, %o0+1) CR_TAB\n-                       \"st %b0,%B1\"                CR_TAB\n-                       \"st -%b0,%A1\"               CR_TAB\n-                       TINY_SBIW (%I0, %J0, %o0), op, plen, -6);\n+  return \"\";\n }\n \n static const char*\n@@ -5163,7 +5181,7 @@ out_movhi_mr_r (rtx_insn *insn, rtx op[], int *plen)\n       int disp = INTVAL (XEXP (base, 1));\n \n       if (AVR_TINY)\n-        return avr_out_movhi_mr_r_reg_disp_tiny (op, plen);\n+        return avr_out_movhi_mr_r_reg_disp_tiny (insn, op, plen);\n \n       reg_base = REGNO (XEXP (base, 0));\n       if (disp > MAX_LD_OFFSET (GET_MODE (dest)))"}, {"sha": "7e801c00a448993da9068bdc4ea9910dedeaf1d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbe9dfdd501cea13034c7b809330e82a54883b1e", "patch": "@@ -1,3 +1,8 @@\n+2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* gcc.target/avr/torture/get-mem.c: New test.\n+\t* gcc.target/avr/torture/set-mem.c: New test.\n+\n 2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/71948"}, {"sha": "46f47f10429ee162943b4047223d2c38d0eeb7d6", "filename": "gcc/testsuite/gcc.target/avr/torture/get-mem.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fget-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fget-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fget-mem.c?ref=dbe9dfdd501cea13034c7b809330e82a54883b1e", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+#define NI __attribute__((noinline, noclone))\n+\n+typedef __INT8_TYPE__ s8;\n+typedef __INT16_TYPE__ s16;\n+typedef __int24 s24;\n+typedef __INT32_TYPE__ s32;\n+\n+static const s8 arr8[] = { 12, 23, 34 };\n+static const s16 arr16[] = { 123, 234, 345 };\n+static const s24 arr24[] = { 1234, 2345, 3456 };\n+static const s32 arr32[] = { 12345, 23456, 34567 };\n+\n+NI s8  add8  (const s8  *p) { return p[0] + p[1] + p[2]; }\n+NI s16 add16 (const s16 *p) { return p[0] + p[1] + p[2]; }\n+NI s24 add24 (const s24 *p) { return p[0] + p[1] + p[2]; }\n+NI s32 add32 (const s32 *p) { return p[0] + p[1] + p[2]; }\n+\n+void test8 (void)\n+{\n+  if (add8 (arr8) != arr8[0] + arr8[1] + arr8[2])\n+    __builtin_abort();\n+}\n+\n+void test16 (void)\n+{\n+  if (add16 (arr16) != arr16[0] + arr16[1] + arr16[2])\n+    __builtin_abort();\n+}\n+\n+void test24 (void)\n+{\n+  if (add24 (arr24) != arr24[0] + arr24[1] + arr24[2])\n+    __builtin_abort();\n+}\n+\n+void test32 (void)\n+{\n+  if (add32 (arr32) != arr32[0] + arr32[1] + arr32[2])\n+    __builtin_abort();\n+}\n+\n+int main (void)\n+{\n+  test8();\n+  test16();\n+  test24();\n+  test32();\n+\n+  return 0;\n+}"}, {"sha": "60ded19d4b64127bc085c30aa25587b2eade21d4", "filename": "gcc/testsuite/gcc.target/avr/torture/set-mem.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fset-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9dfdd501cea13034c7b809330e82a54883b1e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fset-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fset-mem.c?ref=dbe9dfdd501cea13034c7b809330e82a54883b1e", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+\n+#define NI __attribute__((noinline, noclone))\n+\n+typedef __INT8_TYPE__ s8;\n+typedef __INT16_TYPE__ s16;\n+typedef __int24 s24;\n+typedef __INT32_TYPE__ s32;\n+\n+static s8 arr8[3];\n+static s16 arr16[3];\n+static s24 arr24[3];\n+static s32 arr32[3];\n+\n+NI void set8  (s8  *p) { p[0] = -123; p[1]  = -23; p[2]  = -34; }\n+NI void set16 (s16 *p) { p[0] = -123; p[1] = -234; p[2] = -345; }\n+NI void set24 (s24 *p) { p[0] = -123; p[1] = -234; p[2] = -345; }\n+NI void set32 (s32 *p) { p[0] = -123; p[1] = -234; p[2] = -345; }\n+\n+void test8 (void)\n+{\n+  set8 (arr8);\n+  if (arr8[0] != -123 || arr8[1] != -23 || arr8[2] != -34)\n+    __builtin_abort();\n+}\n+\n+void test16 (void)\n+{\n+  set16 (arr16);\n+  if (arr16[0] != -123 || arr16[1] != -234 || arr16[2] != -345)\n+    __builtin_abort();\n+}\n+\n+void test24 (void)\n+{\n+  set24 (arr24);\n+  if (arr24[0] != -123 || arr24[1] != -234 || arr24[2] != -345)\n+    __builtin_abort();\n+}\n+\n+void test32 (void)\n+{\n+  set32 (arr32);\n+  if (arr32[0] != -123 || arr32[1] != -234 || arr32[2] != -345)\n+    __builtin_abort();\n+}\n+\n+int main (void)\n+{\n+  test8();\n+  test16();\n+  test24();\n+  test32();\n+  return 0;\n+}"}]}