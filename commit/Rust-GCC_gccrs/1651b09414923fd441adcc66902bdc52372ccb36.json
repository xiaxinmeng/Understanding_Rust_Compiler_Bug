{"sha": "1651b09414923fd441adcc66902bdc52372ccb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1MWIwOTQxNDkyM2ZkNDQxYWRjYzY2OTAyYmRjNTIzNzJjY2IzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-01T08:44:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-01T08:44:23Z"}, "message": "re PR tree-optimization/89143 (comparison of abs(i) against excessive constant less than UXXX_MAX no longer folded)\n\n\tPR tree-optimization/89143\n\t* wide-int-range.h (wide_int_range_absu): Declare.\n\t* wide-int-range.cc (wide_int_range_absu): New function.\n\t* tree-vrp.c (extract_range_from_unary_expr): Handle ABSU_EXPR.\n\n\t* gcc.dg/tree-ssa/vrp121.c: New test.\n\nFrom-SVN: r268445", "tree": {"sha": "c2e9b408f3b29c2c682ed9666c7e8b10ec15bb6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2e9b408f3b29c2c682ed9666c7e8b10ec15bb6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1651b09414923fd441adcc66902bdc52372ccb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651b09414923fd441adcc66902bdc52372ccb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1651b09414923fd441adcc66902bdc52372ccb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651b09414923fd441adcc66902bdc52372ccb36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac33bce89cdab0c0c43edec60b98a1fccdf3bd4b"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "0da61908fee02feba34559dfc8ec6c517b30af6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -1,5 +1,10 @@\n 2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89143\n+\t* wide-int-range.h (wide_int_range_absu): Declare.\n+\t* wide-int-range.cc (wide_int_range_absu): New function.\n+\t* tree-vrp.c (extract_range_from_unary_expr): Handle ABSU_EXPR.\n+\n \tPR tree-optimization/88107\n \t* tree-cfg.c (find_outermost_region_in_block): Add ALL argument,\n \tinstead of assertion that eh_region_outermost is non-NULL, if it"}, {"sha": "9d50c3e082a6201d30d501332ee2e21f8b0e58f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -1,5 +1,8 @@\n 2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89143\n+\t* gcc.dg/tree-ssa/vrp121.c: New test.\n+\n \tPR tree-optimization/88107\n \t* gcc.dg/gomp/pr88107.c: New test.\n "}, {"sha": "3af5a9a2ec7ebe10705e20866b9987ae4625bc92", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp121.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp121.c?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -0,0 +1,67 @@\n+/* PR tree-optimization/89143 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error \\\\\\(\" \"optimized\" } } */\n+\n+void link_error (void);\n+\n+void\n+f1 (signed char i)\n+{\n+  if (__builtin_abs (i) < 0 || __builtin_abs (i) > __SCHAR_MAX__ + 1)\n+    link_error ();\n+}\n+\n+void\n+f2 (signed char i)\n+{\n+  if (i < 0 || i > 15)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 0 || __builtin_abs (i) > 15)\n+    link_error ();\n+}\n+\n+void\n+f3 (signed char i)\n+{\n+  if (i < 19 || i > 25)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 19 || __builtin_abs (i) > 25)\n+    link_error ();\n+}\n+\n+void\n+f4 (signed char i)\n+{\n+  if (i > -60)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 60 || __builtin_abs (i) > __SCHAR_MAX__ + 1)\n+    link_error ();\n+}\n+\n+void\n+f5 (signed char i)\n+{\n+  if (i < -__SCHAR_MAX__ || i > -30)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 30 || __builtin_abs (i) > __SCHAR_MAX__)\n+    link_error ();\n+}\n+\n+void\n+f6 (signed char i)\n+{\n+  if (i < -__SCHAR_MAX__ || i > 30)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 0 || __builtin_abs (i) > __SCHAR_MAX__)\n+    link_error ();\n+}\n+\n+void\n+f7 (signed char i)\n+{\n+  if (i < -31 || i > 30)\n+    __builtin_unreachable ();\n+  if (__builtin_abs (i) < 0 || __builtin_abs (i) > 31)\n+    link_error ();\n+}"}, {"sha": "bde0751ec1e6cd19ea8b52702f86ce9ec3a641f1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -2196,6 +2196,16 @@ extract_range_from_unary_expr (value_range_base *vr,\n \tvr->set_varying ();\n       return;\n     }\n+  else if (code == ABSU_EXPR)\n+    {\n+      wide_int wmin, wmax;\n+      wide_int vr0_min, vr0_max;\n+      extract_range_into_wide_ints (&vr0, SIGNED, prec, vr0_min, vr0_max);\n+      wide_int_range_absu (wmin, wmax, prec, vr0_min, vr0_max);\n+      vr->set (VR_RANGE, wide_int_to_tree (type, wmin),\n+\t       wide_int_to_tree (type, wmax));\n+      return;\n+    }\n \n   /* For unhandled operations fall back to varying.  */\n   vr->set_varying ();"}, {"sha": "90c58f6bb6ecda09a7d86b103d53b1ef62be6d84", "filename": "gcc/wide-int-range.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Fwide-int-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Fwide-int-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.cc?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -735,6 +735,37 @@ wide_int_range_abs (wide_int &min, wide_int &max,\n   return true;\n }\n \n+/* Calculate ABSU_EXPR on a range and store the result in [MIN, MAX].  */\n+\n+void\n+wide_int_range_absu (wide_int &min, wide_int &max,\n+\t\t     unsigned prec, const wide_int &vr0_min,\n+\t\t     const wide_int &vr0_max)\n+{\n+  /* Pass through VR0 the easy cases.  */\n+  if (wi::ges_p (vr0_min, 0))\n+    {\n+      min = vr0_min;\n+      max = vr0_max;\n+      return;\n+    }\n+\n+  min = wi::abs (vr0_min);\n+  max = wi::abs (vr0_max);\n+\n+  /* If the range contains zero then we know that the minimum value in the\n+     range will be zero.  */\n+  if (wi::ges_p (vr0_max, 0))\n+    {\n+      if (wi::gtu_p (min, max))\n+\tmax = min;\n+      min = wi::zero (prec);\n+    }\n+  else\n+    /* Otherwise, swap MIN and MAX.  */\n+    std::swap (min, max);\n+}\n+\n /* Convert range in [VR0_MIN, VR0_MAX] with INNER_SIGN and INNER_PREC,\n    to a range in [MIN, MAX] with OUTER_SIGN and OUTER_PREC.\n "}, {"sha": "fc9af72b12732432ef4fd46b993c061f567704d7", "filename": "gcc/wide-int-range.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Fwide-int-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651b09414923fd441adcc66902bdc52372ccb36/gcc%2Fwide-int-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.h?ref=1651b09414923fd441adcc66902bdc52372ccb36", "patch": "@@ -107,6 +107,10 @@ extern bool wide_int_range_abs (wide_int &min, wide_int &max,\n \t\t\t\tconst wide_int &vr0_min,\n \t\t\t\tconst wide_int &vr0_max,\n \t\t\t\tbool overflow_undefined);\n+extern void wide_int_range_absu (wide_int &min, wide_int &max,\n+\t\t\t\t unsigned prec,\n+\t\t\t\t const wide_int &vr0_min,\n+\t\t\t\t const wide_int &vr0_max);\n extern bool wide_int_range_convert (wide_int &min, wide_int &max,\n \t\t\t\t    signop inner_sign,\n \t\t\t\t    unsigned inner_prec,"}]}