{"sha": "80a2dd51defd8933d425927f8c77d71bb4496620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBhMmRkNTFkZWZkODkzM2Q0MjU5MjdmOGM3N2Q3MWJiNDQ5NjYyMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2018-10-25T20:16:39Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-25T20:16:39Z"}, "message": "emmintrin.h (_mm_slli_epi16): Replace deprecated function with vec_sl.\n\n2018-10-25  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Jinsong Ji <jji@us.ibm.com>\n\n\t* config/rs6000/emmintrin.h (_mm_slli_epi16): Replace deprecated\n\tfunction with vec_sl.\n\t(_mm_slli_epi32): Likewise.\n\t(_mm_slli_epi64): Likewise.\n\t(_mm_srai_epi16): Replace deprecated function with vec_sra.\n\t(_mm_srai_epi32): Likewise.\n\t(_mm_srli_epi16): Replace deprecated function with vec_sr.\n\t(_mm_srli_epi32): Likewise.\n\t(_mm_srli_epi64): Likewise.\n\t(_mm_sll_epi16): Replace deprecated function with vec_sl.\n\t(_mm_sll_epi32): Likewise.\n\t(_mm_sll_epi64): Likewise.\n\t(_mm_sra_epi16): Replace deprecated function with vec_sra.\n\t(_mm_sra_epi32): Likewise.\n\t(_mm_srl_epi16): Replace deprecated function with vec_sr.\n\t(_mm_srl_epi32): Likewise.\n\t(_mm_srl_epi64): Likewise.\n\n\nCo-Authored-By: Jinsong Ji <jji@us.ibm.com>\n\nFrom-SVN: r265508", "tree": {"sha": "ced6782d35464ea8a861b87ffc7de21ed51f370a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced6782d35464ea8a861b87ffc7de21ed51f370a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80a2dd51defd8933d425927f8c77d71bb4496620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a2dd51defd8933d425927f8c77d71bb4496620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a2dd51defd8933d425927f8c77d71bb4496620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a2dd51defd8933d425927f8c77d71bb4496620/comments", "author": null, "committer": null, "parents": [{"sha": "1d3d27032b489c5237434fbc2623e87db9b08985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3d27032b489c5237434fbc2623e87db9b08985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3d27032b489c5237434fbc2623e87db9b08985"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "265d6d999163a0f94a863a6facf40af4eb6e17c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a2dd51defd8933d425927f8c77d71bb4496620/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a2dd51defd8933d425927f8c77d71bb4496620/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80a2dd51defd8933d425927f8c77d71bb4496620", "patch": "@@ -1,3 +1,24 @@\n+2018-10-25  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Jinsong Ji <jji@us.ibm.com>\n+\n+\t* config/rs6000/emmintrin.h (_mm_slli_epi16): Replace deprecated\n+\tfunction with vec_sl.\n+\t(_mm_slli_epi32): Likewise.\n+\t(_mm_slli_epi64): Likewise.\n+\t(_mm_srai_epi16): Replace deprecated function with vec_sra.\n+\t(_mm_srai_epi32): Likewise.\n+\t(_mm_srli_epi16): Replace deprecated function with vec_sr.\n+\t(_mm_srli_epi32): Likewise.\n+\t(_mm_srli_epi64): Likewise.\n+\t(_mm_sll_epi16): Replace deprecated function with vec_sl.\n+\t(_mm_sll_epi32): Likewise.\n+\t(_mm_sll_epi64): Likewise.\n+\t(_mm_sra_epi16): Replace deprecated function with vec_sra.\n+\t(_mm_sra_epi32): Likewise.\n+\t(_mm_srl_epi16): Replace deprecated function with vec_sr.\n+\t(_mm_srl_epi32): Likewise.\n+\t(_mm_srl_epi64): Likewise.\n+\n 2018-10-25  Bill Schmidt  <wschmidt@linux.ibm.com>\n \t    Jinsong Ji <jji@us.ibm.com>\n "}, {"sha": "50a866852c73599abe08fe0de7c4a2bfe4a971d0", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a2dd51defd8933d425927f8c77d71bb4496620/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a2dd51defd8933d425927f8c77d71bb4496620/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=80a2dd51defd8933d425927f8c77d71bb4496620", "patch": "@@ -1504,7 +1504,7 @@ _mm_slli_epi16 (__m128i __A, int __B)\n       else\n \tlshift = vec_splats ((unsigned short) __B);\n \n-      result = vec_vslh ((__v8hi) __A, lshift);\n+      result = vec_sl ((__v8hi) __A, lshift);\n     }\n \n   return (__m128i) result;\n@@ -1523,7 +1523,7 @@ _mm_slli_epi32 (__m128i __A, int __B)\n       else\n \tlshift = vec_splats ((unsigned int) __B);\n \n-      result = vec_vslw ((__v4si) __A, lshift);\n+      result = vec_sl ((__v4si) __A, lshift);\n     }\n \n   return (__m128i) result;\n@@ -1543,7 +1543,7 @@ _mm_slli_epi64 (__m128i __A, int __B)\n       else\n \tlshift = (__v2du) vec_splats ((unsigned int) __B);\n \n-      result = vec_vsld ((__v2di) __A, lshift);\n+      result = vec_sl ((__v2di) __A, lshift);\n     }\n \n   return (__m128i) result;\n@@ -1563,7 +1563,7 @@ _mm_srai_epi16 (__m128i __A, int __B)\n       else\n \trshift = vec_splats ((unsigned short) __B);\n     }\n-  result = vec_vsrah ((__v8hi) __A, rshift);\n+  result = vec_sra ((__v8hi) __A, rshift);\n \n   return (__m128i) result;\n }\n@@ -1586,7 +1586,7 @@ _mm_srai_epi32 (__m128i __A, int __B)\n       else\n \trshift = vec_splats ((unsigned int) __B);\n     }\n-  result = vec_vsraw ((__v4si) __A, rshift);\n+  result = vec_sra ((__v4si) __A, rshift);\n \n   return (__m128i) result;\n }\n@@ -1666,7 +1666,7 @@ _mm_srli_epi16 (__m128i  __A, int __B)\n       else\n \trshift = vec_splats ((unsigned short) __B);\n \n-      result = vec_vsrh ((__v8hi) __A, rshift);\n+      result = vec_sr ((__v8hi) __A, rshift);\n     }\n \n   return (__m128i) result;\n@@ -1690,7 +1690,7 @@ _mm_srli_epi32 (__m128i __A, int __B)\n       else\n \trshift = vec_splats ((unsigned int) __B);\n \n-      result = vec_vsrw ((__v4si) __A, rshift);\n+      result = vec_sr ((__v4si) __A, rshift);\n     }\n \n   return (__m128i) result;\n@@ -1715,7 +1715,7 @@ _mm_srli_epi64 (__m128i __A, int __B)\n       else\n \trshift = (__v2du) vec_splats ((unsigned int) __B);\n \n-      result = vec_vsrd ((__v2di) __A, rshift);\n+      result = vec_sr ((__v2di) __A, rshift);\n     }\n \n   return (__m128i) result;\n@@ -1736,7 +1736,7 @@ _mm_sll_epi16 (__m128i __A, __m128i __B)\n   lshift = vec_splat ((__v8hu) __B, 3);\n #endif\n   shmask = vec_cmple (lshift, shmax);\n-  result = vec_vslh ((__v8hu) __A, lshift);\n+  result = vec_sl ((__v8hu) __A, lshift);\n   result = vec_sel ((__v8hu) shmask, result, shmask);\n \n   return (__m128i) result;\n@@ -1755,7 +1755,7 @@ _mm_sll_epi32 (__m128i __A, __m128i __B)\n   lshift = vec_splat ((__v4su) __B, 1);\n #endif\n   shmask = vec_cmplt (lshift, shmax);\n-  result = vec_vslw ((__v4su) __A, lshift);\n+  result = vec_sl ((__v4su) __A, lshift);\n   result = vec_sel ((__v4su) shmask, result, shmask);\n \n   return (__m128i) result;\n@@ -1772,7 +1772,7 @@ _mm_sll_epi64 (__m128i __A, __m128i __B)\n \n   lshift = vec_splat ((__v2du) __B, 0);\n   shmask = vec_cmplt (lshift, shmax);\n-  result = vec_vsld ((__v2du) __A, lshift);\n+  result = vec_sl ((__v2du) __A, lshift);\n   result = vec_sel ((__v2du) shmask, result, shmask);\n \n   return (__m128i) result;\n@@ -1792,7 +1792,7 @@ _mm_sra_epi16 (__m128i __A, __m128i __B)\n   rshift = vec_splat ((__v8hu)__B, 3);\n #endif\n   rshift = vec_min (rshift, rshmax);\n-  result = vec_vsrah ((__v8hi) __A, rshift);\n+  result = vec_sra ((__v8hi) __A, rshift);\n \n   return (__m128i) result;\n }\n@@ -1810,7 +1810,7 @@ _mm_sra_epi32 (__m128i __A, __m128i __B)\n   rshift = vec_splat ((__v4su)__B, 1);\n #endif\n   rshift = vec_min (rshift, rshmax);\n-  result = vec_vsraw ((__v4si) __A, rshift);\n+  result = vec_sra ((__v4si) __A, rshift);\n \n   return (__m128i) result;\n }\n@@ -1829,7 +1829,7 @@ _mm_srl_epi16 (__m128i __A, __m128i __B)\n   rshift = vec_splat ((__v8hu) __B, 3);\n #endif\n   shmask = vec_cmple (rshift, shmax);\n-  result = vec_vsrh ((__v8hu) __A, rshift);\n+  result = vec_sr ((__v8hu) __A, rshift);\n   result = vec_sel ((__v8hu) shmask, result, shmask);\n \n   return (__m128i) result;\n@@ -1849,7 +1849,7 @@ _mm_srl_epi32 (__m128i __A, __m128i __B)\n   rshift = vec_splat ((__v4su) __B, 1);\n #endif\n   shmask = vec_cmplt (rshift, shmax);\n-  result = vec_vsrw ((__v4su) __A, rshift);\n+  result = vec_sr ((__v4su) __A, rshift);\n   result = vec_sel ((__v4su) shmask, result, shmask);\n \n   return (__m128i) result;\n@@ -1866,7 +1866,7 @@ _mm_srl_epi64 (__m128i __A, __m128i __B)\n \n   rshift = vec_splat ((__v2du) __B, 0);\n   shmask = vec_cmplt (rshift, shmax);\n-  result = vec_vsrd ((__v2du) __A, rshift);\n+  result = vec_sr ((__v2du) __A, rshift);\n   result = vec_sel ((__v2du) shmask, result, shmask);\n \n   return (__m128i) result;"}]}