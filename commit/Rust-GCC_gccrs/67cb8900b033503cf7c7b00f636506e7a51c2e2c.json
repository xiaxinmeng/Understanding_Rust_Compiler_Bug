{"sha": "67cb8900b033503cf7c7b00f636506e7a51c2e2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjYjg5MDBiMDMzNTAzY2Y3YzdiMDBmNjM2NTA2ZTdhNTFjMmUyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-09-09T02:19:08Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-09-09T02:19:08Z"}, "message": "sparc.h (TARGET_CM_MEDMID): Fix documentation.\n\n\t* config/sparc/sparc.h (TARGET_CM_MEDMID): Fix documentation.\n\t(CASE_VECTOR_MODE): Set to SImode even if PTR64, when MEDLOW and\n\tnot doing pic.\n\t(ASM_OUTPUT_ADDR_{VEC,DIFF}_ELT): Check CASE_VECTOR_MODE not\n\tPmode.\n\t* config/sparc/sparc.md (tablejump): Likewise, and sign extend op0\n\tto Pmode if CASE_VECTOR_MODE is something else.\n\nFrom-SVN: r22344", "tree": {"sha": "00ee39dbe76de1b6820e19d2b285777a840f9501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ee39dbe76de1b6820e19d2b285777a840f9501"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67cb8900b033503cf7c7b00f636506e7a51c2e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cb8900b033503cf7c7b00f636506e7a51c2e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67cb8900b033503cf7c7b00f636506e7a51c2e2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cb8900b033503cf7c7b00f636506e7a51c2e2c/comments", "author": null, "committer": null, "parents": [{"sha": "b54ccf71d5b67087aa1848fa8f580446dba28104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54ccf71d5b67087aa1848fa8f580446dba28104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54ccf71d5b67087aa1848fa8f580446dba28104"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "98311b7389f11a358986772a09fe7df6b61d51d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67cb8900b033503cf7c7b00f636506e7a51c2e2c", "patch": "@@ -1,3 +1,13 @@\n+Wed Sep  9 01:07:30 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+\t* config/sparc/sparc.h (TARGET_CM_MEDMID): Fix documentation.\n+\t(CASE_VECTOR_MODE): Set to SImode even if PTR64, when MEDLOW and\n+\tnot doing pic.\n+\t(ASM_OUTPUT_ADDR_{VEC,DIFF}_ELT): Check CASE_VECTOR_MODE not\n+\tPmode.\n+\t* config/sparc/sparc.md (tablejump): Likewise, and sign extend op0\n+\tto Pmode if CASE_VECTOR_MODE is something else.\n+\n Wed Sep  9 00:10:31 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* prefix.c (update_path): Correctly handle cases where PATH is"}, {"sha": "3891fd669db83fdad4519c20775d80ca4be5b783", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=67cb8900b033503cf7c7b00f636506e7a51c2e2c", "patch": "@@ -55,7 +55,8 @@ Boston, MA 02111-1307, USA.  */\n    TARGET_CM_MEDMID: 64 bit address space.\n                      The executable must be in the low 16 TB of memory.\n                      This corresponds to the low 44 bits, and the %[hml]44\n-                     relocs are used.\n+                     relocs are used.  The text segment has a maximum size\n+                     of 31 bits.\n \n    TARGET_CM_MEDANY: 64 bit address space.\n                      The text and data segments have a maximum size of 31\n@@ -2469,7 +2470,10 @@ extern struct rtx_def *legitimize_pic_address ();\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n-#define CASE_VECTOR_MODE Pmode\n+/* If we ever implement any of the full models (such as CM_FULLANY),\n+   this has to be DImode in that case */\n+#define CASE_VECTOR_MODE \\\n+(! TARGET_PTR64 ? SImode : flag_pic ? SImode : TARGET_CM_MEDLOW ? SImode : DImode)\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n@@ -2967,7 +2971,7 @@ extern int ultrasparc_variable_issue ();\n do {\t\t\t\t\t\t\t\t\t\\\n   char label[30];\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\t\t\\\n-  if (Pmode == SImode)\t\t\t\t\t\t\t\\\n+  if (CASE_VECTOR_MODE == SImode)\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t\");\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.xword\\t\");\t\t\t\t\t\\\n@@ -2982,7 +2986,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   char label[30];\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (label, \"L\", (VALUE));\t\t\t\\\n-  if (Pmode == SImode)\t\t\t\t\t\t\t\\\n+  if (CASE_VECTOR_MODE == SImode)\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t\");\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.xword\\t\");\t\t\t\t\t\\"}, {"sha": "781719c87ef4f21d412440f091031fd3187c245c", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cb8900b033503cf7c7b00f636506e7a51c2e2c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=67cb8900b033503cf7c7b00f636506e7a51c2e2c", "patch": "@@ -7109,17 +7109,20 @@\n   \"\"\n   \"\n {\n-  if (GET_MODE (operands[0]) != Pmode)\n+  if (GET_MODE (operands[0]) != CASE_VECTOR_MODE)\n     abort ();\n \n   /* In pic mode, our address differences are against the base of the\n      table.  Add that base value back in; CSE ought to be able to combine\n      the two address loads.  */\n   if (flag_pic)\n     {\n-      rtx tmp;\n+      rtx tmp, tmp2;\n       tmp = gen_rtx_LABEL_REF (Pmode, operands[1]);\n-      tmp = gen_rtx_PLUS (Pmode, operands[0], tmp);\n+      tmp2 = operands[0];\n+      if (CASE_VECTOR_MODE != Pmode)\n+        tmp2 = gen_rtx_SIGN_EXTEND (Pmode, tmp2);\n+      tmp = gen_rtx_PLUS (Pmode, tmp2, tmp);\n       operands[0] = memory_address (Pmode, tmp);\n     }\n }\")"}]}