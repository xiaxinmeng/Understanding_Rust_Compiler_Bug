{"sha": "b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmZDA0NDBkYzhiOTdmNDE2ZThkMzlkMGExYWY3NzEyNGEyM2NmZQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2015-07-23T11:13:00Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-07-23T11:13:00Z"}, "message": "PR tree-optimization/66926,66951\n\ngcc/\n\n\tPR tree-optimization/66926,66951\n\t* tree-vect-loop-manip.c (slpeel_tree_peel_loop_to_edge): Delete\n\tINNER_LOOP and fix up condition for renaming virtual operands.\n\ngcc/testsuite/\n\n\tPR tree-optimization/66926,66951\n\t* gcc.dg/vect/pr66951.c: New test.\n\nFrom-SVN: r226103", "tree": {"sha": "1de329752b88f9cd2f13eaf58dc596d6a7efa8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de329752b88f9cd2f13eaf58dc596d6a7efa8cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25f05e7bf142ad370a0da6681a6971ce565dc5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f05e7bf142ad370a0da6681a6971ce565dc5c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f05e7bf142ad370a0da6681a6971ce565dc5c2"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "6e1b53e988cb78673d3838e0e25a837748d49479", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "patch": "@@ -1,3 +1,9 @@\n+2015-07-23  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/66926,66951\n+\t* tree-vect-loop-manip.c (slpeel_tree_peel_loop_to_edge): Delete\n+\tINNER_LOOP and fix up condition for renaming virtual operands.\n+\n 2015-07-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* combine.c (try_combine): Use std::swap instead of manually"}, {"sha": "6f3310361c88f75cfda0d37d51be5785fc39a62d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "patch": "@@ -1,3 +1,8 @@\n+2015-07-23  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/66926,66951\n+\t* gcc.dg/vect/pr66951.c: New test.\n+\n 2015-07-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/52987"}, {"sha": "628e1ee77b2ba7bdd03020681bf7ef1e92f80cd9", "filename": "gcc/testsuite/gcc.dg/vect/pr66951.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66951.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66951.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66951.c?ref=b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+int a, b[16], c, d;\n+\n+void\n+fn1 ()\n+{\n+  for (; d; d++)\n+    {\n+      for (a = 0; a < 2; a++)\n+\t;\n+      c ^= b[d];\n+    }\n+}"}, {"sha": "efcc4bb03365202b9a2e9bffb0bb4083957c5805", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5fd0440dc8b97f416e8d39d0a1af77124a23cfe/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=b5fd0440dc8b97f416e8d39d0a1af77124a23cfe", "patch": "@@ -1178,7 +1178,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop, struct loop *scalar_loop,\n \t\t\t       int bound1, int bound2)\n {\n   struct loop *new_loop = NULL, *first_loop, *second_loop;\n-  struct loop *inner_loop = NULL;\n   edge skip_e;\n   tree pre_condition = NULL_TREE;\n   basic_block bb_before_second_loop, bb_after_second_loop;\n@@ -1199,9 +1198,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop, struct loop *scalar_loop,\n   if (!slpeel_can_duplicate_loop_p (loop, e))\n     return NULL;\n \n-  if (loop->inner)\n-    inner_loop = loop->inner;\n-\n   /* We might have a queued need to update virtual SSA form.  As we\n      delete the update SSA machinery below after doing a regular\n      incremental SSA update during loop copying make sure we don't\n@@ -1237,9 +1233,8 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop, struct loop *scalar_loop,\n \t    add_phi_arg (new_phi, vop, exit_e, UNKNOWN_LOCATION);\n \t    gimple_phi_set_result (new_phi, new_vop);\n \t    FOR_EACH_IMM_USE_STMT (stmt, imm_iter, vop)\n-\t      if (stmt != new_phi && gimple_bb (stmt) != loop->header\n-\t\t  /* Do not rename PHI arguments in inner-loop.  */\n-\t\t  && (!inner_loop || gimple_bb (stmt) != inner_loop->header))\n+\t      if (stmt != new_phi\n+\t\t  && !flow_bb_inside_loop_p (loop, gimple_bb (stmt)))\n \t\tFOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n \t\t  SET_USE (use_p, new_vop);\n \t  }"}]}