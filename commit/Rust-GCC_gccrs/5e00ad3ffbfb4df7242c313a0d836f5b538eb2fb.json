{"sha": "5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwMGFkM2ZmYmZiNGRmNzI0MmMzMTNhMGQ4MzZmNWI1MzhlYjJmYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-12T02:16:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-12T02:16:45Z"}, "message": "analyzer: warn on invalid shift counts [PR97424]\n\nThis patch implements -Wanalyzer-shift-count-negative\nand -Wanalyzer-shift-count-overflow, analogous to the C/C++\nwarnings -Wshift-count-negative and -Wshift-count-overflow, but\nimplemented via interprocedural path analysis rather than via parsing\nin a front end, and thus capable of detecting interprocedural cases that the\nwarnings implemented in the front ends can miss.\n\ngcc/analyzer/ChangeLog:\n\tPR tree-optimization/97424\n\t* analyzer.opt (Wanalyzer-shift-count-negative): New.\n\t(Wanalyzer-shift-count-overflow): New.\n\t* region-model.cc (class shift_count_negative_diagnostic): New.\n\t(class shift_count_overflow_diagnostic): New.\n\t(region_model::get_gassign_result): Complain about shift counts that\n\tare negative or are >= the operand's type's width.\n\ngcc/ChangeLog:\n\tPR tree-optimization/97424\n\t* doc/invoke.texi (Static Analyzer Options): Add\n\t-Wno-analyzer-shift-count-negative and\n\t-Wno-analyzer-shift-count-overflow.\n\t(-Wno-analyzer-shift-count-negative): New.\n\t(-Wno-analyzer-shift-count-overflow): New.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/97424\n\t* gcc.dg/analyzer/invalid-shift-1.c: New test.", "tree": {"sha": "f06accd1c2401b59cc964b54a4cc174512940b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f06accd1c2401b59cc964b54a4cc174512940b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f5f9ed5e5a041b636cc002451b1e8b2295f8e4f"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "bbf9e429c991445b1715267a3e61a733f4ab17a5", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "patch": "@@ -98,6 +98,14 @@ Wanalyzer-null-dereference\n Common Var(warn_analyzer_null_dereference) Init(1) Warning\n Warn about code paths in which a NULL pointer is dereferenced.\n \n+Wanalyzer-shift-count-negative\n+Common Var(warn_analyzer_shift_count_negative) Init(1) Warning\n+Warn about code paths in which a shift with negative count is attempted.\n+\n+Wanalyzer-shift-count-overflow\n+Common Var(warn_analyzer_shift_count_overflow) Init(1) Warning\n+Warn about code paths in which a shift with count >= width of type is attempted.\n+\n Wanalyzer-stale-setjmp-buffer\n Common Var(warn_analyzer_stale_setjmp_buffer) Init(1) Warning\n Warn about code paths in which a longjmp rewinds to a jmp_buf saved in a stack frame that has returned."}, {"sha": "57c657bf6b8ea9b112fbbfdfffed61e1ec4a276f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "patch": "@@ -363,6 +363,88 @@ class poisoned_value_diagnostic\n   enum poison_kind m_pkind;\n };\n \n+/* A subclass of pending_diagnostic for complaining about shifts\n+   by negative counts.  */\n+\n+class shift_count_negative_diagnostic\n+: public pending_diagnostic_subclass<shift_count_negative_diagnostic>\n+{\n+public:\n+  shift_count_negative_diagnostic (const gassign *assign, tree count_cst)\n+  : m_assign (assign), m_count_cst (count_cst)\n+  {}\n+\n+  const char *get_kind () const FINAL OVERRIDE\n+  {\n+    return \"shift_count_negative_diagnostic\";\n+  }\n+\n+  bool operator== (const shift_count_negative_diagnostic &other) const\n+  {\n+    return (m_assign == other.m_assign\n+\t    && same_tree_p (m_count_cst, other.m_count_cst));\n+  }\n+\n+  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  {\n+    return warning_at (rich_loc, OPT_Wanalyzer_shift_count_negative,\n+\t\t       \"shift by negative count (%qE)\", m_count_cst);\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  {\n+    return ev.formatted_print (\"shift by negative amount here (%qE)\", m_count_cst);\n+  }\n+\n+private:\n+  const gassign *m_assign;\n+  tree m_count_cst;\n+};\n+\n+/* A subclass of pending_diagnostic for complaining about shifts\n+   by counts >= the width of the operand type.  */\n+\n+class shift_count_overflow_diagnostic\n+: public pending_diagnostic_subclass<shift_count_overflow_diagnostic>\n+{\n+public:\n+  shift_count_overflow_diagnostic (const gassign *assign,\n+\t\t\t\t   int operand_precision,\n+\t\t\t\t   tree count_cst)\n+  : m_assign (assign), m_operand_precision (operand_precision),\n+    m_count_cst (count_cst)\n+  {}\n+\n+  const char *get_kind () const FINAL OVERRIDE\n+  {\n+    return \"shift_count_overflow_diagnostic\";\n+  }\n+\n+  bool operator== (const shift_count_overflow_diagnostic &other) const\n+  {\n+    return (m_assign == other.m_assign\n+\t    && m_operand_precision == other.m_operand_precision\n+\t    && same_tree_p (m_count_cst, other.m_count_cst));\n+  }\n+\n+  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  {\n+    return warning_at (rich_loc, OPT_Wanalyzer_shift_count_overflow,\n+\t\t       \"shift by count (%qE) >= precision of type (%qi)\",\n+\t\t       m_count_cst, m_operand_precision);\n+  }\n+\n+  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  {\n+    return ev.formatted_print (\"shift by count %qE here\", m_count_cst);\n+  }\n+\n+private:\n+  const gassign *m_assign;\n+  int m_operand_precision;\n+  tree m_count_cst;\n+};\n+\n /* If ASSIGN is a stmt that can be modelled via\n      set_value (lhs_reg, SVALUE, CTXT)\n    for some SVALUE, get the SVALUE.\n@@ -514,6 +596,26 @@ region_model::get_gassign_result (const gassign *assign,\n \tconst svalue *rhs1_sval = get_rvalue (rhs1, ctxt);\n \tconst svalue *rhs2_sval = get_rvalue (rhs2, ctxt);\n \n+\tif (ctxt && (op == LSHIFT_EXPR || op == RSHIFT_EXPR))\n+\t  {\n+\t    /* \"INT34-C. Do not shift an expression by a negative number of bits\n+\t       or by greater than or equal to the number of bits that exist in\n+\t       the operand.\"  */\n+\t    if (const tree rhs2_cst = rhs2_sval->maybe_get_constant ())\n+\t      if (TREE_CODE (rhs2_cst) == INTEGER_CST)\n+\t\t{\n+\t\t  if (tree_int_cst_sgn (rhs2_cst) < 0)\n+\t\t    ctxt->warn (new shift_count_negative_diagnostic\n+\t\t\t\t  (assign, rhs2_cst));\n+\t\t  else if (compare_tree_int (rhs2_cst,\n+\t\t\t\t\t     TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t\t\t   >= 0)\n+\t\t    ctxt->warn (new shift_count_overflow_diagnostic\n+\t\t\t\t  (assign, TYPE_PRECISION (TREE_TYPE (rhs1)),\n+\t\t\t\t   rhs2_cst));\n+\t\t}\n+\t  }\n+\n \tconst svalue *sval_binop\n \t  = m_mgr->get_or_create_binop (TREE_TYPE (lhs), op,\n \t\t\t\t\trhs1_sval, rhs2_sval);"}, {"sha": "69bf1fa89dd390635b5084b049664675c179a9f5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "patch": "@@ -425,6 +425,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-analyzer-null-dereference @gol\n -Wno-analyzer-possible-null-argument @gol\n -Wno-analyzer-possible-null-dereference @gol\n+-Wno-analyzer-shift-count-negative @gol\n+-Wno-analyzer-shift-count-overflow @gol\n -Wno-analyzer-stale-setjmp-buffer @gol\n -Wno-analyzer-tainted-array-index @gol\n -Wanalyzer-too-complex @gol\n@@ -8897,6 +8899,8 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-possible-null-dereference @gol\n -Wanalyzer-null-argument @gol\n -Wanalyzer-null-dereference @gol\n+-Wanalyzer-shift-count-negative @gol\n+-Wanalyzer-shift-count-overflow @gol\n -Wanalyzer-stale-setjmp-buffer @gol\n -Wanalyzer-tainted-array-index @gol\n -Wanalyzer-unsafe-call-within-signal-handler @gol\n@@ -9030,6 +9034,35 @@ This warning requires @option{-fanalyzer}, which enables it; use\n This diagnostic warns for paths through the code in which a\n value known to be NULL is dereferenced.\n \n+@item -Wno-analyzer-shift-count-negative\n+@opindex Wanalyzer-shift-count-negative\n+@opindex Wno-analyzer-shift-count-negative\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-shift-count-negative} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+shift is attempted with a negative count.  It is analogous to\n+the @option{-Wshift-count-negative} diagnostic implemented in\n+the C/C++ front ends, but is implemented based on analyzing\n+interprocedural paths, rather than merely parsing the syntax tree.\n+However, the analyzer does not prioritize detection of such paths, so\n+false negatives are more likely relative to other warnings.\n+\n+@item -Wno-analyzer-shift-count-overflow\n+@opindex Wanalyzer-shift-count-overflow\n+@opindex Wno-analyzer-shift-count-overflow\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-shift-count-overflow} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+shift is attempted with a count greater than or equal to the\n+precision of the operand's type.  It is analogous to\n+the @option{-Wshift-count-overflow} diagnostic implemented in\n+the C/C++ front ends, but is implemented based on analyzing\n+interprocedural paths, rather than merely parsing the syntax tree.\n+However, the analyzer does not prioritize detection of such paths, so\n+false negatives are more likely relative to other warnings.\n+\n @item -Wno-analyzer-stale-setjmp-buffer\n @opindex Wanalyzer-stale-setjmp-buffer\n @opindex Wno-analyzer-stale-setjmp-buffer"}, {"sha": "08e52728748babb0a360ae181832b376de7c77f9", "filename": "gcc/testsuite/gcc.dg/analyzer/invalid-shift-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finvalid-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finvalid-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finvalid-shift-1.c?ref=5e00ad3ffbfb4df7242c313a0d836f5b538eb2fb", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/97424.  */\n+\n+#include <stdint.h>\n+\n+static inline uint32_t\n+_dl_hwcaps_subdirs_build_bitmask (int subdirs, int active)\n+{\n+  /* Leading subdirectories that are not active.  */\n+  int inactive = subdirs - active;\n+  if (inactive == 32)\n+    return 0;\n+\n+  uint32_t mask;\n+  if (subdirs != 32)\n+    mask = (1 << subdirs) - 1; /* { dg-message \"shift by count \\\\('33'\\\\) >= precision of type \\\\('\\[0-9\\]+'\\\\)\" } */\n+  else\n+    mask = -1;\n+  return mask ^ ((1U << inactive) - 1); /* { dg-message \"shift by negative count \\\\('-1'\\\\)\" } */\n+}\n+\n+void f1 (int);\n+\n+void\n+f2 (void)\n+{\n+  f1 (_dl_hwcaps_subdirs_build_bitmask (1, 2));\n+  f1 (_dl_hwcaps_subdirs_build_bitmask (33, 31));\n+}\n+\n+static int __attribute__((noinline)) op3 (int op, int c) { return op << c; } /* { dg-message \"shift by negative count \\\\('-1'\\\\)\" } */\n+int test_3 (void) { return op3 (1, -1); }\n+\n+static int __attribute__((noinline)) op4 (int op, int c) { return op << c; }\n+int test_4 (void) { return op4 (1, 0); }"}]}