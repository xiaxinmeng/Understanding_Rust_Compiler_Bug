{"sha": "9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlZTJjNzZiODdhYTk3OGQ2ZWUzNjZkODc3ZDZkZDMyYzE3ZmU0NQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-06-10T10:24:48Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-06-10T10:24:48Z"}, "message": "m68hc11.md (\"extendhisi2\"): Fix constraints to prefer a memory for operand 1.\n\n\t* config/m68hc11/m68hc11.md (\"extendhisi2\"): Fix constraints to\n\tprefer a memory for operand 1.\n\t(\"*addsi3\"): Fix constraints, the '!' was too strong.\n\t(\"*addsi3_split\"): Accept soft register and split accordingly.\n\nFrom-SVN: r43137", "tree": {"sha": "afccbd3d054c3b4c065eda31f082e71cab47adfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afccbd3d054c3b4c065eda31f082e71cab47adfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eee2c76b87aa978d6ee366d877d6dd32c17fe45/comments", "author": null, "committer": null, "parents": [{"sha": "3bcda5fbcedaf4504e05e9173ad81d43e3404524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcda5fbcedaf4504e05e9173ad81d43e3404524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcda5fbcedaf4504e05e9173ad81d43e3404524"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "634634a91e324497f49a419ad7d81501350139fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eee2c76b87aa978d6ee366d877d6dd32c17fe45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eee2c76b87aa978d6ee366d877d6dd32c17fe45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "patch": "@@ -1,3 +1,10 @@\n+2001-06-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"extendhisi2\"): Fix constraints to\n+\tprefer a memory for operand 1.\n+\t(\"*addsi3\"): Fix constraints, the '!' was too strong.\n+\t(\"*addsi3_split\"): Accept soft register and split accordingly.\n+\n 2001-06-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11-protos.h (m68hc11_initialize_trampoline): "}, {"sha": "005472d28ebf6a14b607387df4ba080613d5fd9c", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eee2c76b87aa978d6ee366d877d6dd32c17fe45/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eee2c76b87aa978d6ee366d877d6dd32c17fe45/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=9eee2c76b87aa978d6ee366d877d6dd32c17fe45", "patch": "@@ -1444,8 +1444,8 @@\n   \"\")\n \n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"dm,!uA\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"m,!r,0\")))]\n   \"\"\n   \"*\n {\n@@ -1776,9 +1776,9 @@\n }\")\n \n (define_insn \"*addsi3\"\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=m,D,!u,D,!D\")\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"=m,D,!u,?D,D\")\n \t(plus:SI (match_operand:SI 1 \"non_push_operand\" \"%0,0,0,0,0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"ML,i,L,?miu,!D\")))\n+\t\t (match_operand:SI 2 \"general_operand\" \"ML,i,ML,?D,?miu\")))\n    (clobber (match_scratch:HI 3 \"=d,X,d,X,X\"))]\n   \"\"\n   \"*\n@@ -1878,14 +1878,26 @@\n }\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,u\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n \t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n-   (clobber (match_scratch:HI 3 \"=X\"))]\n+   (clobber (match_scratch:HI 3 \"=X,d\"))]\n   \"reload_completed && z_replacement_completed == 2\n    && ((INTVAL (operands[2]) & 0x0FFFF) == 0)\"\n-  [(set (reg:HI X_REGNUM) (plus:HI (reg:HI X_REGNUM) (match_dup 3)))]\n-  \"operands[3] = m68hc11_gen_highpart (HImode, operands[2]);\")\n+  [(set (match_dup 5) (match_dup 6))\n+   (set (reg:HI 0) (plus:HI (reg:HI 0) (match_dup 4)))\n+   (set (match_dup 6) (match_dup 5))]\n+  \"operands[4] = m68hc11_gen_highpart (HImode, operands[2]);\n+   if (X_REG_P (operands[0]))\n+     {\n+       operands[5] = operands[6] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+     }\n+   else\n+     {\n+       operands[6] = m68hc11_gen_highpart (HImode, operands[1]);\n+       operands[5] = operands[3];\n+     }\n+   \")\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")"}]}