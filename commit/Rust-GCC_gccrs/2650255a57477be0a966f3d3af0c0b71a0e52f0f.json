{"sha": "2650255a57477be0a966f3d3af0c0b71a0e52f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1MDI1NWE1NzQ3N2JlMGE5NjZmM2QzYWYwYzBiNzFhMGU1MmYwZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-11-19T21:07:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-19T21:07:24Z"}, "message": "decl.c (init_decl_processing): Correct name of pure virtual function under the new ABI.\n\n\t* decl.c (init_decl_processing): Correct name of pure virtual\n\tfunction under the new ABI.\n\t* rtti.c (throw_bad_cast): Likewise, for bad cast function.\n\t(throw_bad_typeid): Likewise for bad typeid function.\n\n\t* libsupc++/exception_support.cc (__throw_bad_cast): Name it\n\t__cxa_bad_cast under the new ABI.\n\t(__throw_bad_typeid): Name it __cxa_bad_typeid under the new ABI.\n\t* libsupc++/pure.cc (__pure_virtual): Name it __cxa_pure_virtual\n\tunder the new ABI.\n\nFrom-SVN: r37575", "tree": {"sha": "5861a1bb1ac543a2762679aef288e1adb7e494e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5861a1bb1ac543a2762679aef288e1adb7e494e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2650255a57477be0a966f3d3af0c0b71a0e52f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650255a57477be0a966f3d3af0c0b71a0e52f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2650255a57477be0a966f3d3af0c0b71a0e52f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650255a57477be0a966f3d3af0c0b71a0e52f0f/comments", "author": null, "committer": null, "parents": [{"sha": "b7ac5370c28ab2edd426f5f7b3432b7b323962cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac5370c28ab2edd426f5f7b3432b7b323962cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ac5370c28ab2edd426f5f7b3432b7b323962cf"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "7886ddca74ae17b4f8923930975d6da586cc9c72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -1,3 +1,10 @@\n+2000-11-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (init_decl_processing): Correct name of pure virtual\n+\tfunction under the new ABI.\n+\t* rtti.c (throw_bad_cast): Likewise, for bad cast function.\n+\t(throw_bad_typeid): Likewise for bad typeid function.\n+\n 2000-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (grokparms): Don't even function types of `void' type,"}, {"sha": "380b734551e322b02def3fea98424f4daccc3b34", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -6656,7 +6656,10 @@ init_decl_processing ()\n   }\n \n   abort_fndecl\n-    = build_library_fn_ptr (\"__pure_virtual\", void_ftype);\n+    = build_library_fn_ptr ((flag_new_abi \n+\t\t\t     ? \"__cxa_pure_virtual\"\n+\t\t\t     : \"__pure_virtual\"),\n+\t\t\t    void_ftype);\n \n   /* Perform other language dependent initializations.  */\n   init_class_processing ();"}, {"sha": "3a54fc4753d42ca474f7e1296153be9f241f92d0", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -182,7 +182,9 @@ build_headof (exp)\n static tree\n throw_bad_cast ()\n {\n-  tree fn = get_identifier (\"__throw_bad_cast\");\n+  tree fn = get_identifier (flag_new_abi \n+\t\t\t    ? \"__cxa_bad_cast\" : \n+\t\t\t    \"__throw_bad_cast\");\n   if (IDENTIFIER_GLOBAL_VALUE (fn))\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else\n@@ -195,7 +197,9 @@ throw_bad_cast ()\n static tree\n throw_bad_typeid ()\n {\n-  tree fn = get_identifier (\"__throw_bad_typeid\");\n+  tree fn = get_identifier (flag_new_abi \n+\t\t\t    ? \"__cxa_bad_typeid\"\n+\t\t\t    : \"__throw_bad_typeid\");\n   if (IDENTIFIER_GLOBAL_VALUE (fn))\n     fn = IDENTIFIER_GLOBAL_VALUE (fn);\n   else"}, {"sha": "bec0beae1b7ce5a27d9f86248e99a590382907c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -1,3 +1,11 @@\n+2000-11-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libsupc++/exception_support.cc (__throw_bad_cast): Name it \n+\t__cxa_bad_cast under the new ABI.\n+\t(__throw_bad_typeid): Name it __cxa_bad_typeid under the new ABI.\n+\t* libsupc++/pure.cc (__pure_virtual): Name it __cxa_pure_virtual\n+\tunder the new ABI.\n+\n 2000-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/exception_support.h: New header file."}, {"sha": "42958744707c7a75009876f1370ef5c5ce7a05fc", "filename": "libstdc++-v3/libsupc++/exception_support.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -348,15 +348,23 @@ __check_null_eh_spec (void)\n // Helpers for rtti. Although these don't return, we give them return types so\n // that the type system is not broken.\n \n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+#define THROW_BAD_CAST __throw_bad_cast\n+#define THROW_BAD_TYPEID __throw_bad_typeid\n+#else \n+#define THROW_BAD_CAST __cxa_bad_cast\n+#define THROW_BAD_TYPEID __cxa_bad_typeid\n+#endif\n+\n extern \"C\" void *\n-__throw_bad_cast ()\n+THROW_BAD_CAST ()\n {\n   throw std::bad_cast ();\n   return 0;\n }\n \n extern \"C\" std::type_info const &\n-__throw_bad_typeid ()\n+THROW_BAD_TYPEID ()\n {\n   throw std::bad_typeid ();\n   return typeid (void);"}, {"sha": "7ada0666856a6fe90fc8c9ce8809c10186be7561", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650255a57477be0a966f3d3af0c0b71a0e52f0f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=2650255a57477be0a966f3d3af0c0b71a0e52f0f", "patch": "@@ -46,8 +46,16 @@ extern \"C\" {\n \n extern void __terminate(void) __attribute__ ((__noreturn__));\n \n+// The name of the function to be placed in vtables in place of a pure\n+// virtual function is different in the two ABIs.\n+#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n+#define PURE_VIRTUAL_NAME __pure_virtual\n+#else\n+#define PURE_VIRTUAL_NAME __cxa_pure_virtual\n+#endif\n+\n void\n-__pure_virtual (void)\n+PURE_VIRTUAL_NAME (void)\n {\n   writestr (\"pure virtual method called\\n\");\n   __terminate ();"}]}