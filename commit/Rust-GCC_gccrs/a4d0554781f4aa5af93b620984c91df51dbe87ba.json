{"sha": "a4d0554781f4aa5af93b620984c91df51dbe87ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkMDU1NDc4MWY0YWE1YWY5M2I2MjA5ODRjOTFkZjUxZGJlODdiYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-08-06T13:26:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-08-06T13:26:35Z"}, "message": "Makefile.in, [...]: Fix comment/doc typos.\n\n\t* Makefile.in, cfgexpand.c, cfgloop.h, cfgloopmanip.c,\n\tconfig.gcc, ipa-cp.c, ipa-prop.c, ipa-prop.h, reg-stack.c,\n\ttree-ssa-structalias.c, tree-vrp.c, value-prof.c, vec.h,\n\tconfig/linux.h, config/alpha/alpha.h, config/alpha/linux.h,\n\tconfig/alpha/predicates.md, config/arc/arc.h,\n\tconfig/arm/arm.h, config/arm/ieee754-df.S,\n\tconfig/arm/ieee754-sf.S, config/bfin/bfin.c,\n\tconfig/bfin/bfin.h, config/c4x/c4x.h, config/crx/crx.c,\n\tconfig/fr30/fr30.h, config/frv/frv.h, config/h8300/h8300.h,\n\tconfig/i386/i386.h, config/ia64/ia64.c, config/ia64/ia64.h,\n\tconfig/m68hc11/m68hc11.h, config/mips/mips.c,\n\tconfig/mips/mips.h, config/mips/openbsd.h,\n\tconfig/mn10300/mn10300.h, config/pa/pa.c, config/pa/pa.h,\n\tconfig/pdp11/pdp11.h, config/rs6000/linux-unwind.h,\n\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h,\n\tconfig/s390/s390.c, config/sh/sh.c, config/sh/sh.h,\n\tconfig/sparc/linux.h, config/sparc/linux64.h,\n\tconfig/sparc/sparc.h, config/v850/v850.h, config/vax/vax.h,\n\tdoc/extend.texi, doc/gcov.texi, doc/install.texi,\n\tdoc/invoke.texi, doc/rtl.texi, doc/tm.texi: Fix comment/doc\n\ttypos.  Follow spelling conventions.\n\nFrom-SVN: r102809", "tree": {"sha": "9c1e3b572dafd3d3ac5162fc738c5579d768ad9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c1e3b572dafd3d3ac5162fc738c5579d768ad9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d0554781f4aa5af93b620984c91df51dbe87ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d0554781f4aa5af93b620984c91df51dbe87ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d0554781f4aa5af93b620984c91df51dbe87ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d0554781f4aa5af93b620984c91df51dbe87ba/comments", "author": null, "committer": null, "parents": [{"sha": "49de9e7395964c94b4c1cd88c1b861e1777fc90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49de9e7395964c94b4c1cd88c1b861e1777fc90f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49de9e7395964c94b4c1cd88c1b861e1777fc90f"}], "stats": {"total": 158, "additions": 91, "deletions": 67}, "files": [{"sha": "2497692dae0ea9c892a691153144c4ee51629465", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1,3 +1,27 @@\n+2005-08-06  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Makefile.in, cfgexpand.c, cfgloop.h, cfgloopmanip.c,\n+\tconfig.gcc, ipa-cp.c, ipa-prop.c, ipa-prop.h, reg-stack.c,\n+\ttree-ssa-structalias.c, tree-vrp.c, value-prof.c, vec.h,\n+\tconfig/linux.h, config/alpha/alpha.h, config/alpha/linux.h,\n+\tconfig/alpha/predicates.md, config/arc/arc.h,\n+\tconfig/arm/arm.h, config/arm/ieee754-df.S,\n+\tconfig/arm/ieee754-sf.S, config/bfin/bfin.c,\n+\tconfig/bfin/bfin.h, config/c4x/c4x.h, config/crx/crx.c,\n+\tconfig/fr30/fr30.h, config/frv/frv.h, config/h8300/h8300.h,\n+\tconfig/i386/i386.h, config/ia64/ia64.c, config/ia64/ia64.h,\n+\tconfig/m68hc11/m68hc11.h, config/mips/mips.c,\n+\tconfig/mips/mips.h, config/mips/openbsd.h,\n+\tconfig/mn10300/mn10300.h, config/pa/pa.c, config/pa/pa.h,\n+\tconfig/pdp11/pdp11.h, config/rs6000/linux-unwind.h,\n+\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.h,\n+\tconfig/s390/s390.c, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/sparc/linux.h, config/sparc/linux64.h,\n+\tconfig/sparc/sparc.h, config/v850/v850.h, config/vax/vax.h,\n+\tdoc/extend.texi, doc/gcov.texi, doc/install.texi,\n+\tdoc/invoke.texi, doc/rtl.texi, doc/tm.texi: Fix comment/doc\n+\ttypos.  Follow spelling conventions.\n+\n 2005-08-06  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/23113"}, {"sha": "9234698a4764ae2ab2e7a987e59f1aa42864bb4a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -3141,7 +3141,7 @@ s-macro_list : $(GCC_PASSES)\n # working directory in object files (-g absent, or -fno-working-dir\n # present), and build and host are the same, fixincl for the host will\n # build after fixincl for the build machine, getting a cache hit,\n-# thereby updating the timestamp of fixincl.o in the the host tree.\n+# thereby updating the timestamp of fixincl.o in the host tree.\n # Because of CCACHE_HARDLINK, this will also update the timestamp in\n # the build tree, and so fixincl in the build tree will appear to be\n # out of date.  Yuck."}, {"sha": "d2c865556afc54c79cd8871a45dce90cae01d917", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -808,8 +808,8 @@ stack_protect_classify_type (tree type)\n   return ret;\n }\n \n-/* Return non-zero if DECL should be segregated into the \"vulnerable\" upper\n-   part of the local stack frame.  Remember if we ever return non-zero for\n+/* Return nonzero if DECL should be segregated into the \"vulnerable\" upper\n+   part of the local stack frame.  Remember if we ever return nonzero for\n    any variable in this function.  The return value is the phase number in\n    which the variable should be allocated.  */\n "}, {"sha": "cc3992e6a4b4d91d2b00f298c7f6ec878376d959", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -299,7 +299,7 @@ extern bool can_duplicate_loop_p (struct loop *loop);\n #define DLTHE_RECORD_COPY_NUMBER 2\t/* Record copy number in the aux\n \t\t\t\t\t   field of newly create BB.  */\n #define DLTHE_FLAG_COMPLETTE_PEEL 4\t/* Update frequencies expecting\n-\t\t\t\t\t   a complette peeling. */\n+\t\t\t\t\t   a complete peeling.  */\n \n extern struct loop * duplicate_loop (struct loops *, struct loop *,\n \t\t\t\t     struct loop *);"}, {"sha": "02c3add4717b5158299179aeb5a34e2728c3c515", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -913,7 +913,7 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n \t\t\t\t? prob_pass_wont_exit\n \t\t\t\t: prob_pass_thru;\n \n-      /* Complette peeling is special as the probability of exit in last\n+      /* Complete peeling is special as the probability of exit in last\n          copy becomes 1.  */\n       if (flags & DLTHE_FLAG_COMPLETTE_PEEL)\n \t{\n@@ -923,7 +923,7 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n \t    wanted_freq = freq_in;\n \n \t  gcc_assert (!is_latch);\n-\t  /* First copy has frequency of incomming edge.  Each subseqeuent\n+\t  /* First copy has frequency of incoming edge.  Each subsequent\n \t     frequency should be reduced by prob_pass_wont_exit.  Caller\n \t     should've managed the flags so all except for original loop\n \t     has won't exist set.  */"}, {"sha": "c7c2cf12ea4f05d486c0403c0a61acd998da4719", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -2847,7 +2847,7 @@ case ${target} in\n \t\t\t;;\n \t\tesac\n \n-\t\t# The Sparc port checks this value at compile-time.\n+\t\t# The SPARC port checks this value at compile-time.\n \t\ttarget_cpu_default2=\"TARGET_CPU_$with_cpu\"\n \t\t;;\n \tv850*-*-*)"}, {"sha": "d00e1bbc17f139406e7e4a92355820c589d8e8fb", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -735,7 +735,7 @@ extern int alpha_memory_latency;\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "2768748a2d919d0c02041b0dac689e0495613713", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02110-1301, USA.  */\n /* Define this so that all GNU/Linux targets handle the same pragmas.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n \n-/* Determine whether the the entire c99 runtime is present in the\n+/* Determine whether the entire c99 runtime is present in the\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n "}, {"sha": "fc330ff12c3fc6725acccf5ada43becd5ab5ce40", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -72,7 +72,7 @@\n   (and (match_code \"const_int,const_double,const_vector\")\n        (not (match_operand 0 \"add_operand\"))))\n \n-;; Return 1 if the operand is a non-symbolic, non-zero constant operand.\n+;; Return 1 if the operand is a non-symbolic, nonzero constant operand.\n (define_predicate \"non_zero_const_operand\"\n   (and (match_code \"const_int,const_double,const_vector\")\n        (match_test \"op != CONST0_RTX (mode)\")))"}, {"sha": "c7253b1146f6b1eb3a38a06f8cade1be0e49c601", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -455,7 +455,7 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    pointer to a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "1f906c83e1493f061bcc35f112061e2fe40b032b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1337,7 +1337,7 @@ enum reg_class\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD  1\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "0d6bf969c4a5b556f9e4a79d4d022cf772a033d0", "filename": "gcc/config/arm/ieee754-df.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-df.S?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -994,7 +994,7 @@ LSYM(Ldv_s):\n \tmov\txl, yl\n \tmov\txh, yh\n \tb\tLSYM(Lml_n)\t\t@ <anything> / NAN -> NAN\n-2:\t@ If both are non-zero, we need to normalize and resume above.\n+2:\t@ If both are nonzero, we need to normalize and resume above.\n \torrs\tr6, xl, xh, lsl #1\n \torrnes\tr6, yl, yh, lsl #1\n \tbne\tLSYM(Lml_d)"}, {"sha": "f74f458dd185d8b45744b319853239fb3bb45b52", "filename": "gcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -705,7 +705,7 @@ LSYM(Ldv_s):\n \tbeq\tLSYM(Lml_z)\t\t@ <anything> / INF -> 0\n \tmov\tr0, r1\n \tb\tLSYM(Lml_n)\t\t@ <anything> / NAN -> NAN\n-2:\t@ If both are non-zero, we need to normalize and resume above.\n+2:\t@ If both are nonzero, we need to normalize and resume above.\n \tbics\tip, r0, #0x80000000\n \tbicnes\tip, r1, #0x80000000\n \tbne\tLSYM(Ldv_d)"}, {"sha": "76b6f044fa21cd19537ae1516059ad6a98fc3157", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -435,7 +435,7 @@ bfin_frame_pointer_required (void)\n   if (fkind != SUBROUTINE)\n     return 1;\n \n-  /* We turn on on -fomit-frame-pointer if -momit-leaf-frame-pointer is used,\n+  /* We turn on -fomit-frame-pointer if -momit-leaf-frame-pointer is used,\n      so we have to override it for non-leaf functions.  */\n   if (TARGET_OMIT_LEAF_FRAME_POINTER && ! current_function_is_leaf)\n     return 1;"}, {"sha": "c959e4538b7502247a51fa79e7690a84826a34f9", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -79,7 +79,7 @@ extern const char *bfin_library_id_string;\n \n #define STACK_PUSH_CODE PRE_DEC\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "43d44b1ce8c8d6571081a0295a637c2223885362", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -863,7 +863,7 @@ enum reg_class\n /* #define STACK_GROWS_DOWNWARD.  */\n /* Like the dsp16xx, i370, i960, and we32k ports.  */\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "02bbe435a02528dfd3c5e244db60b677b13d1f39", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -96,7 +96,7 @@\n /* STATIC VARIABLES\t\t\t\t\t\t\t     */\n /*****************************************************************************/\n \n-/* Non-zero if the last param processed is passed in a register.  */\n+/* Nonzero if the last param processed is passed in a register.  */\n static int last_parm_in_reg;\n \n /* Will hold the number of the last register the prologue saves, -1 if no\n@@ -522,7 +522,7 @@ crx_function_arg_advance (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n \n }\n \n-/* Implements the macro FUNCTION_ARG_REGNO_P defined in crx.h.  Return non-zero\n+/* Implements the macro FUNCTION_ARG_REGNO_P defined in crx.h.  Return nonzero\n  * if N is a register used for passing parameters.  */\n \n int\n@@ -666,8 +666,8 @@ crx_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \n /* Return the cost of moving data of mode MODE between a register of class\n  * CLASS and memory; IN is zero if the value is to be written to memory,\n- * non-zero if it is to be read in. This cost is relative to those in\n- * REGISTER_MOVE_COST. */\n+ * nonzero if it is to be read in. This cost is relative to those in\n+ * REGISTER_MOVE_COST.  */\n \n int\n crx_memory_move_cost (enum machine_mode mode,"}, {"sha": "b423b0a66ce2a05b618b0b3aa07a9aa6812049a5", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -463,7 +463,7 @@ enum reg_class\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this to macro non-zero if the addresses of local variable slots\n+/* Define this to macro nonzero if the addresses of local variable slots\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n "}, {"sha": "d5586c06493e6e3fd47303bade9a1c27467bc46e", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1445,7 +1445,7 @@ typedef struct frv_stack {\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this macro to non-zero if the addresses of local variable slots\n+/* Define this macro to nonzero if the addresses of local variable slots\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n "}, {"sha": "cf64b09d2ae64de52a34e64b98c3a02534359fb5", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -485,7 +485,7 @@ enum reg_class {\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "3213ee5b98c44fb07ff056235aba6eb1dc879953", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1359,7 +1359,7 @@ enum reg_class\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "f4b8cee2706b8ff45ecbaf500d41cf3203ef3af9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -7439,7 +7439,7 @@ final_emit_insn_group_barriers (FILE *dump ATTRIBUTE_UNUSED)\n \n \f\n \n-/* If the following function returns TRUE, we will use the the DFA\n+/* If the following function returns TRUE, we will use the DFA\n    insn scheduler.  */\n \n static int"}, {"sha": "cefed69cf89f90eeda29d997902f6f7f0646c64d", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -956,7 +956,7 @@ enum reg_class\n    to a smaller address.  */\n #define STACK_GROWS_DOWNWARD 1\n \n-/* Define this macro to non-zero if the addresses of local variable slots\n+/* Define this macro to nonzero if the addresses of local variable slots\n    are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 0\n "}, {"sha": "d452726897053eb1a24f64fcd0a82590cfcef583", "filename": "gcc/config/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -99,7 +99,7 @@ Boston, MA 02110-1301, USA.  */\n #define USE_LD_AS_NEEDED 1\n #endif\n \n-/* Determine whether the the entire c99 runtime\n+/* Determine whether the entire c99 runtime\n    is present in the runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n "}, {"sha": "008887bacddf485963c38b7e92fbf7c48a717c94", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -800,7 +800,7 @@ extern enum reg_class m68hc11_tmp_regs_class;\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame."}, {"sha": "af2db04f61a0eb88f8c0e949f3fc32f5ac43b46b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -6184,7 +6184,7 @@ mips_save_reg_p (unsigned int regno)\n /* Return the bytes needed to compute the frame pointer from the current\n    stack pointer.  SIZE is the size (in bytes) of the local variables.\n \n-   Mips stack frames look like:\n+   MIPS stack frames look like:\n \n              Before call\t\t        After call\n         +-----------------------+\t+-----------------------+"}, {"sha": "2d11a88a7d4f8586182cb5046a1ddece577d0e42", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1746,7 +1746,7 @@ extern enum reg_class mips_char_to_class[256];\n /* Similar, but for floating constants, and defining letters G and H.\n    Here VALUE is the CONST_DOUBLE rtx itself.  */\n \n-/* For Mips\n+/* For MIPS\n \n   'G'\t: Floating point 0 */\n "}, {"sha": "69cc0c6ad1a633fb4a5d7eb7c58bc8de8ffe5bbb", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1,4 +1,4 @@\n-/* Configuration for  a Mips ABI32 OpenBSD target.\n+/* Configuration for  a MIPS ABI32 OpenBSD target.\n    Copyright (C) 1999, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC."}, {"sha": "20751fd18a080dac1e8f8ed335c1c9913e47b43b", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -480,7 +480,7 @@ enum reg_class {\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "260d2125e944bde1ac644734b5204363cea31c21", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -3504,7 +3504,7 @@ pa_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n   /* The SAVE_SP flag is used to indicate that register %r3 is stored\n      at the beginning of the frame and that it is used as the frame\n      pointer for the frame.  We do this because our current frame\n-     layout doesn't conform to that specified in the the HP runtime\n+     layout doesn't conform to that specified in the HP runtime\n      documentation and we need a way to indicate to programs such as\n      GDB where %r3 is saved.  The SAVE_SP flag was chosen because it\n      isn't used by HP compilers but is supported by the assembler."}, {"sha": "d56ebcf7a12e8bb58f6e9e576d5d2c461747a7b8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -500,7 +500,7 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n /* Believe it or not.  */\n #define ARGS_GROW_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "09de325b7a9ee720fa890688408205bbf7a9c42a", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -415,7 +415,7 @@ loading is easier into LOAD_FPU_REGS than FPU_REGS! */\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame."}, {"sha": "6e822bde0e2a52cb31734c05ff6d617521f57c6f", "filename": "gcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -276,7 +276,7 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n   if (hwcap == 0)\n     {\n       hwcap = ppc_linux_aux_vector (16);\n-      /* These will already be set if we found AT_HWCAP.  A non-zero\n+      /* These will already be set if we found AT_HWCAP.  A nonzero\n \t value stops us looking again if for some reason we couldn't\n \t find AT_HWCAP.  */\n #ifdef __powerpc64__"}, {"sha": "625f8b74375906c883a254ea239ca6f4d3419e5a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -4674,7 +4674,7 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, tree type,\n    This code is also used for function return values.  RETVAL indicates\n    whether this is the case.\n \n-   Much of this is taken from the Sparc V9 port, which has a similar\n+   Much of this is taken from the SPARC V9 port, which has a similar\n    calling convention.  */\n \n static rtx"}, {"sha": "2b5be35dba12911df595d8beeb8f0568cbbed611", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1227,7 +1227,7 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n /* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n #define DWARF_CIE_DATA_ALIGNMENT (-((int) (TARGET_32BIT ? 4 : 8)))\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame."}, {"sha": "8be77077189b3a04fd9148c4d39d8e510fa4d80b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -6207,7 +6207,7 @@ save_gprs (rtx base, int offset, int first, int last)\n      However, we must not emit DWARF records for registers 2..5\n      if they are stored for use by variable arguments ...\n \n-     ??? Unfortunately, it is not enough to simply not the the\n+     ??? Unfortunately, it is not enough to simply not the\n      FRAME_RELATED flags for those SETs, because the first SET\n      of the PARALLEL is always treated as if it had the flag\n      set, even if it does not.  Therefore we emit a new pattern"}, {"sha": "c9cd3c83d4555f1f3772e9da1192c814a27a6f57", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -10459,7 +10459,7 @@ sh_contains_memref_p_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n   return (GET_CODE (*loc) == MEM);\n }\n \n-/* Return non-zero iff INSN contains a MEM.  */\n+/* Return nonzero iff INSN contains a MEM.  */\n int\n sh_contains_memref_p (rtx insn)\n {"}, {"sha": "3d16f449504a34d7d899a5557a83ec0c01ea4af8", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1704,7 +1704,7 @@ extern enum reg_class reg_class_from_letter[];\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/*  Define this macro to non-zero if the addresses of local variable slots\n+/*  Define this macro to nonzero if the addresses of local variable slots\n     are at negative offsets from the frame pointer.  */\n #define FRAME_GROWS_DOWNWARD 1\n "}, {"sha": "813a18dc01acd123998ab42adbc5ca62806ec68e", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -204,7 +204,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-/* Determine whether the the entire c99 runtime is present in the\n+/* Determine whether the entire c99 runtime is present in the\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n "}, {"sha": "dc89408d5268222c5623841027f963c4b5da5f8d", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -338,7 +338,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-/* Determine whether the the entire c99 runtime is present in the\n+/* Determine whether the entire c99 runtime is present in the\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n "}, {"sha": "bb81dcc2208fa7ad398818b38a21109fe1933ff0", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1360,7 +1360,7 @@ extern char leaf_reg_remap[];\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "6bde40b02327e5972e7af450900deb26d1d39ddb", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -434,7 +434,7 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "787e32119e88e0fbec54c7ccb876ba6af24ceb08", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -314,7 +314,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Define this to non-zero if the nominal address of the stack frame\n+/* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated\n    goes at a more negative offset in the frame.  */"}, {"sha": "e0ade59502aa9d05c3b5107ad9a8297517afb066", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -4775,7 +4775,7 @@ returns @code{(size_t) -1} for @var{type} 0 or 1 and @code{(size_t) 0}\n for @var{type} 2 or 3.  If there are multiple objects @var{ptr} can\n point to and all of them are known at compile time, the returned number\n is the maximum of remaining byte counts in those objects if @var{type} & 2 is\n-0 and minimum if non-zero.  If it is not possible to determine which objects\n+0 and minimum if nonzero.  If it is not possible to determine which objects\n @var{ptr} points to at compile time, @code{__builtin_object_size} should\n return @code{(size_t) -1} for @var{type} 0 or 1 and @code{(size_t) 0}\n for @var{type} 2 or 3.\n@@ -4861,7 +4861,7 @@ additional security measures the checking function might take, such as\n handling @code{%n} differently.\n \n The @var{os} argument is the object size @var{s} points to, like in the\n-other built-in functions.  There is a small difference in the behaviour\n+other built-in functions.  There is a small difference in the behavior\n though, if @var{os} is @code{(size_t) -1}, the built-in functions are\n optimized into the non-checking functions only if @var{flag} is 0, otherwise\n the checking function is called with @var{os} argument set to"}, {"sha": "d1ad47cf04a88250c0099356f26a8f37c98b3add", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -570,4 +570,4 @@ setting will name the data file @file{/target/run/build/foo.gcda}.\n \n You must move the data files to the expected directory tree in order to\n use them for profile directed optimizations (@option{--use-profile}), or to\n-use the the @command{gcov} tool.\n+use the @command{gcov} tool."}, {"sha": "27f44f885ec88a105a19c7371bce16c6bb757145", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -2645,7 +2645,7 @@ GCC@ for building a CRX cross-compiler. The option @samp{--target=crx-elf}\n is also used to build the @samp{newlib} C library for CRX.\n \n It is also possible to build libstdc++-v3 for the CRX architecture. This\n-needs to be done in a sepearate step with the following configure settings:\n+needs to be done in a separate step with the following configure settings:\n @samp{gcc/libstdc++-v3/configure --host=crx-elf --with-newlib\n --enable-sjlj-exceptions --enable-cxx-flags='-fexceptions -frtti'}\n \n@@ -3336,10 +3336,10 @@ the use of break, use the @option{--with-divide=breaks}\n @command{configure} option when configuring GCC@.  The default is to\n use traps on systems that support them.\n \n-Cross-compilers for the Mips as target using the Mips assembler\n+Cross-compilers for the MIPS as target using the MIPS assembler\n currently do not work, because the auxiliary programs\n @file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on\n-anything but a Mips.  It does work to cross compile for a Mips\n+anything but a MIPS.  It does work to cross compile for a MIPS\n if you use the GNU assembler and linker.\n \n @html"}, {"sha": "c4dcd88866875ad79a7a6f137fdb33268d3fa595", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -9077,7 +9077,7 @@ compatible with arrays or structures in code compiled without that switch.\n @opindex mlarge-data-threshold=@var{number}\n When @option{-mcmodel=medium} is specified, the data greater than\n @var{threshold} are placed in large data section.  This value must be the\n-same across all object linked into the binarry and defaults to 65535.\n+same across all object linked into the binary and defaults to 65535.\n \n @item -msvr3-shlib\n @itemx -mno-svr3-shlib"}, {"sha": "05baadaa8db5522a2c9cc542c9cfa2f4d8160377", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1505,7 +1505,7 @@ value of @code{FIRST_PARM_OFFSET}.\n @findex VIRTUAL_STACK_VARS_REGNUM\n @cindex @code{FRAME_GROWS_DOWNWARD} and virtual registers\n @item VIRTUAL_STACK_VARS_REGNUM\n-If @code{FRAME_GROWS_DOWNWARD} is defined to a non-zero value, this points\n+If @code{FRAME_GROWS_DOWNWARD} is defined to a nonzero value, this points\n to immediately above the first variable on the stack.  Otherwise, it points\n to the first variable on the stack.\n "}, {"sha": "4f4be2380db412b22d68ea630e35491ede6fd9ae", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -2753,7 +2753,7 @@ which is often wrong.\n @end defmac\n \n @defmac FRAME_GROWS_DOWNWARD\n-Define this macro to non-zero value if the addresses of local variable slots\n+Define this macro to nonzero value if the addresses of local variable slots\n are at negative offsets from the frame pointer.\n @end defmac\n \n@@ -8955,7 +8955,7 @@ this macro.\n @end defmac\n \n @defmac VECTOR_STORE_FLAG_VALUE (@var{mode})\n-A C expression that gives a rtx representing the non-zero true element\n+A C expression that gives a rtx representing the nonzero true element\n for vector comparisons.  The returned rtx should be valid for the inner\n mode of @var{mode} which is guaranteed to be a vector mode.  Define\n this macro on machines that have vector comparison operations that"}, {"sha": "18d5bc0421be92f7217d3483c8f1a4fd4a5f7509", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -166,7 +166,7 @@ ipcp_method_set_orig_node (struct cgraph_node *node,\n   IPA_NODE_REF (node)->ipcp_orig_node = orig_node;\n }\n \n-/* Create ipa_node and its data strutures for NEW_NODE.\n+/* Create ipa_node and its data structures for NEW_NODE.\n    Set ORIG_NODE as the orig_node field in ipa_node.  */\n static void\n ipcp_cloned_create (struct cgraph_node *orig_node,\n@@ -434,7 +434,7 @@ ipcp_method_cval_init (struct cgraph_node *mt)\n }\n \n /* Create a new assignment statment and make\n-   it the first statemant in the function FN\n+   it the first statement in the function FN\n    tree.\n    PARM1 is the lhs of the assignment and\n    VAL is the rhs. */\n@@ -706,7 +706,7 @@ ipcp_profile_mt_count_print (FILE * f)\n     }\n }\n \n-/* Print counts of all cgraph edgess.  */\n+/* Print counts of all cgraph edges.  */\n static void\n ipcp_profile_cs_count_print (FILE * f)\n {"}, {"sha": "ab19489c4d26a91af9b9101bc5c0398fd8306e24", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -492,7 +492,7 @@ ipa_callsite_compute_param (struct cgraph_edge *cs)\n \t}\n       /* This is for the case of Fortran. If the address of a const_decl \n          was passed as argument then we store \n-         CONST_IPATYPE_REF/CONST_IPATYPE_REF and the costant \n+         CONST_IPATYPE_REF/CONST_IPATYPE_REF and the constant \n          value as the jump function corresponding to this argument.  */\n       else if (TREE_CODE (TREE_VALUE (arg)) == ADDR_EXPR\n \t       && TREE_CODE (TREE_OPERAND (TREE_VALUE (arg), 0)) =="}, {"sha": "159f566ce16abc6c2e8663d1c923b4f2398d9598", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -157,7 +157,7 @@ struct ipa_methodlist\n   struct ipa_methodlist *next_method;\n };\n \n-/* A pointer to a methodlist elemement.  */\n+/* A pointer to a methodlist element.  */\n typedef struct ipa_methodlist *ipa_methodlist_p;\n \n /* ipa_methodlist interface.  */"}, {"sha": "34e2dd9e33d21299494731a3ca3d55b3195fe6c1", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -2770,7 +2770,7 @@ better_edge (edge e1, edge e2)\n   if (EDGE_CRITICAL_P (e1) != EDGE_CRITICAL_P (e2))\n     return EDGE_CRITICAL_P (e1) ? e1 : e2;\n \n-  /* Avoid non-deterministic behaviour.  */\n+  /* Avoid non-deterministic behavior.  */\n   return (e1->src->index < e2->src->index) ? e1 : e2;\n }\n "}, {"sha": "13b9751288ff442dad4b4bd1bad42d1986d2d355", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1594,7 +1594,7 @@ perform_var_substitution (constraint_graph_t graph)\n \t  unsigned int w;\n \t  weight = get_graph_weights (graph, *ce);\n \t\n-\t  /* We can't eliminate variables that have non-zero weighted\n+\t  /* We can't eliminate variables that have nonzero weighted\n \t     edges between them.  */\n \t  if (bitmap_other_than_zero_bit_set (weight))\n \t    {"}, {"sha": "0bdce592b325d0fe98440c9cb1ff87ba752218ac", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -1289,7 +1289,7 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n   /* Refuse to operate on varying and symbolic ranges.  Also, if the\n      operand is neither a pointer nor an integral type, set the\n      resulting range to VARYING.  TODO, in some cases we may be able\n-     to derive anti-ranges (like non-zero values).  */\n+     to derive anti-ranges (like nonzero values).  */\n   if (vr0.type == VR_VARYING\n       || (!INTEGRAL_TYPE_P (TREE_TYPE (op0))\n \t  && !POINTER_TYPE_P (TREE_TYPE (op0)))"}, {"sha": "f08979020e9d958a138fa155e88e3f44c80e0a72", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -88,7 +88,7 @@ static bool tree_mod_subtract_transform (tree);\n \n /* The overall number of invocations of the counter should match execution count\n    of basic block.  Report it as error rather than internal error as it might\n-   mean that user has missused the profile somehow.  */\n+   mean that user has misused the profile somehow.  */\n static bool\n check_counter (tree stmt, const char * name, gcov_type all, gcov_type bb_count)\n {"}, {"sha": "586797a6eec7ad1d48cac26511ff8fafaf7ed615", "filename": "gcc/vec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d0554781f4aa5af93b620984c91df51dbe87ba/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=a4d0554781f4aa5af93b620984c91df51dbe87ba", "patch": "@@ -151,7 +151,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n /* Check if vector is empty\n    int VEC_T_empty(const VEC(T) *v);\n \n-   Return non-zero if V is an empty vector (or V is NULL), zero otherwise. */\n+   Return nonzero if V is an empty vector (or V is NULL), zero otherwise.  */\n \n #define VEC_empty(T,V)\t(VEC_length (T,V) == 0)\n "}]}