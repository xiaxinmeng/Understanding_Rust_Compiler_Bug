{"sha": "cec11ec4142e5d300aa36cbee1b54adefdee7711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjMTFlYzQxNDJlNWQzMDBhYTM2Y2JlZTFiNTRhZGVmZGVlNzcxMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-05T14:50:34Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-05T14:50:34Z"}, "message": "Fix PR47654: Loop blocking should strip-mine at least two loops.\n\n\tPR tree-optimization/47654\n\t* graphite-blocking.c (pbb_strip_mine_time_depth): Do not return bool.\n\t(lst_do_strip_mine_loop): Return an int.\n\t(lst_do_strip_mine): Same.\n\t(scop_do_strip_mine): Same.\n\t(scop_do_block): Loop blocking should strip-mine at least two loops.\n\t* graphite-interchange.c (lst_interchange_select_outer): Return an int.\n\t(scop_do_interchange): Same.\n\t* graphite-poly.h (scop_do_interchange): Update declaration.\n\t(scop_do_strip_mine): Same.\n\n\t* gcc.dg/graphite/block-pr47654.c: New.\n\nFrom-SVN: r175861", "tree": {"sha": "bb332b8bbbc0bb93e01d2b53950af05852a521d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb332b8bbbc0bb93e01d2b53950af05852a521d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec11ec4142e5d300aa36cbee1b54adefdee7711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec11ec4142e5d300aa36cbee1b54adefdee7711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec11ec4142e5d300aa36cbee1b54adefdee7711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec11ec4142e5d300aa36cbee1b54adefdee7711/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0d314a45803f7663e37f669488c695bcf253fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0d314a45803f7663e37f669488c695bcf253fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0d314a45803f7663e37f669488c695bcf253fa"}], "stats": {"total": 129, "additions": 83, "deletions": 46}, "files": [{"sha": "418f5dce6a7a9cf012079603d0421046cb7502c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -1,3 +1,16 @@\n+2011-07-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/47654\n+\t* graphite-blocking.c (pbb_strip_mine_time_depth): Do not return bool.\n+\t(lst_do_strip_mine_loop): Return an int.\n+\t(lst_do_strip_mine): Same.\n+\t(scop_do_strip_mine): Same.\n+\t(scop_do_block): Loop blocking should strip-mine at least two loops.\n+\t* graphite-interchange.c (lst_interchange_select_outer): Return an int.\n+\t(scop_do_interchange): Same.\n+\t* graphite-poly.h (scop_do_interchange): Update declaration.\n+\t(scop_do_strip_mine): Same.\n+\n 2011-07-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (precision_for_value): Removed."}, {"sha": "967de9d94627c58253f6792a60bb16f54369ed40", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -89,7 +89,7 @@ along with GCC; see the file COPYING3.  If not see\n    # }\n */\n \n-static bool\n+static void\n pbb_strip_mine_time_depth (poly_bb_p pbb, int time_depth, int stride)\n {\n   ppl_dimension_type iter, dim, strip;\n@@ -151,8 +151,6 @@ pbb_strip_mine_time_depth (poly_bb_p pbb, int time_depth, int stride)\n     ppl_Polyhedron_add_constraint (res, new_cstr);\n     ppl_delete_Constraint (new_cstr);\n   }\n-\n-  return true;\n }\n \n /* Returns true when strip mining with STRIDE of the loop LST is\n@@ -177,37 +175,37 @@ lst_strip_mine_profitable_p (lst_p lst, int stride)\n   return res;\n }\n \n-/* Strip-mines all the loops of LST with STRIDE.  Return true if it\n-   did strip-mined some loops.  */\n+/* Strip-mines all the loops of LST with STRIDE.  Return the number of\n+   loops strip-mined.  */\n \n-static bool\n+static int\n lst_do_strip_mine_loop (lst_p lst, int depth, int stride)\n {\n   int i;\n   lst_p l;\n   poly_bb_p pbb;\n \n   if (!lst)\n-    return false;\n+    return 0;\n \n   if (LST_LOOP_P (lst))\n     {\n-      bool res = false;\n+      int res = 0;\n \n       FOR_EACH_VEC_ELT (lst_p, LST_SEQ (lst), i, l)\n-\tres |= lst_do_strip_mine_loop (l, depth, stride);\n+\tres += lst_do_strip_mine_loop (l, depth, stride);\n \n       return res;\n     }\n \n   pbb = LST_PBB (lst);\n-  return pbb_strip_mine_time_depth (pbb, psct_dynamic_dim (pbb, depth),\n-\t\t\t\t    stride);\n+  pbb_strip_mine_time_depth (pbb, psct_dynamic_dim (pbb, depth), stride);\n+  return 1;\n }\n \n /* Strip-mines all the loops of LST with STRIDE.  When STRIDE is zero,\n-   read the stride from the PARAM_LOOP_BLOCK_TILE_SIZE.  Return true\n-   if it did strip-mined some loops.\n+   read the stride from the PARAM_LOOP_BLOCK_TILE_SIZE.  Return the\n+   number of strip-mined loops.\n \n    Strip mining transforms a loop\n \n@@ -221,12 +219,12 @@ lst_do_strip_mine_loop (lst_p lst, int depth, int stride)\n    |     S (i = k + j);\n */\n \n-static bool\n+static int\n lst_do_strip_mine (lst_p lst, int stride)\n {\n   int i;\n   lst_p l;\n-  bool res = false;\n+  int res = 0;\n   int depth;\n \n   if (!stride)\n@@ -237,23 +235,23 @@ lst_do_strip_mine (lst_p lst, int stride)\n     return false;\n \n   FOR_EACH_VEC_ELT (lst_p, LST_SEQ (lst), i, l)\n-    res |= lst_do_strip_mine (l, stride);\n+    res += lst_do_strip_mine (l, stride);\n \n   depth = lst_depth (lst);\n   if (depth >= 0\n       && lst_strip_mine_profitable_p (lst, stride))\n     {\n-      res |= lst_do_strip_mine_loop (lst, lst_depth (lst), stride);\n+      res += lst_do_strip_mine_loop (lst, lst_depth (lst), stride);\n       lst_add_loop_under_loop (lst);\n     }\n \n   return res;\n }\n \n-/* Strip mines all the loops in SCOP.  Returns true when some loops\n-   have been strip-mined.  */\n+/* Strip mines all the loops in SCOP.  Returns the number of\n+   strip-mined loops.  */\n \n-bool\n+int\n scop_do_strip_mine (scop_p scop, int stride)\n {\n   return lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop), stride);\n@@ -265,27 +263,22 @@ scop_do_strip_mine (scop_p scop, int stride)\n bool\n scop_do_block (scop_p scop)\n {\n-  bool strip_mined = false;\n-  bool interchanged = false;\n-\n   store_scattering (scop);\n \n-  strip_mined = lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n-  interchanged = scop_do_interchange (scop);\n-\n-  /* If we don't interchange loops, the strip mine alone will not be\n-     profitable, and the transform is not a loop blocking: so revert\n-     the transform.  */\n-  if (!interchanged)\n+  /* If we don't strip mine at least two loops, or not interchange\n+     loops, the strip mine alone will not be profitable, and the\n+     transform is not a loop blocking: so revert the transform.  */\n+  if (lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop), 0) < 2\n+      || scop_do_interchange (scop) == 0)\n     {\n       restore_scattering (scop);\n       return false;\n     }\n-  else if (strip_mined && interchanged\n-\t   && dump_file && (dump_flags & TDF_DETAILS))\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"SCoP will be loop blocked.\\n\");\n \n-  return strip_mined || interchanged;\n+  return true;\n }\n \n #endif"}, {"sha": "cb4d32cc0d2f7d7734f1124bdc6c5c0fc4f95ccf", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -664,45 +664,46 @@ lst_interchange_select_inner (scop_p scop, lst_p outer_father, int outer,\n }\n \n /* Interchanges all the loops of LOOP and the loops of its body that\n-   are considered profitable to interchange.  Return true if it did\n-   interchanged some loops.  OUTER is the index in LST_SEQ (LOOP) that\n+   are considered profitable to interchange.  Return the number of\n+   interchanged loops.  OUTER is the index in LST_SEQ (LOOP) that\n    points to the next outer loop to be considered for interchange.  */\n \n-static bool\n+static int\n lst_interchange_select_outer (scop_p scop, lst_p loop, int outer)\n {\n   lst_p l;\n-  bool res = false;\n+  int res = 0;\n   int i = 0;\n   lst_p father;\n \n   if (!loop || !LST_LOOP_P (loop))\n-    return false;\n+    return 0;\n \n   father = LST_LOOP_FATHER (loop);\n   if (father)\n     {\n       while (lst_interchange_select_inner (scop, father, outer, loop))\n \t{\n-\t  res = true;\n+\t  res++;\n \t  loop = VEC_index (lst_p, LST_SEQ (father), outer);\n \t}\n     }\n \n   if (LST_LOOP_P (loop))\n     FOR_EACH_VEC_ELT (lst_p, LST_SEQ (loop), i, l)\n       if (LST_LOOP_P (l))\n-\tres |= lst_interchange_select_outer (scop, l, i);\n+\tres += lst_interchange_select_outer (scop, l, i);\n \n   return res;\n }\n \n-/* Interchanges all the loop depths that are considered profitable for SCOP.  */\n+/* Interchanges all the loop depths that are considered profitable for\n+   SCOP.  Return the number of interchanged loops.  */\n \n-bool\n+int\n scop_do_interchange (scop_p scop)\n {\n-  bool res = lst_interchange_select_outer\n+  int res = lst_interchange_select_outer\n     (scop, SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n \n   lst_update_scattering (SCOP_TRANSFORMED_SCHEDULE (scop));"}, {"sha": "417e99eef25485001a91f6de6a6d949c5821d81b", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -410,8 +410,8 @@ extern void print_iteration_domain (FILE *, poly_bb_p, int);\n extern void print_iteration_domains (FILE *, scop_p, int);\n extern void debug_iteration_domain (poly_bb_p, int);\n extern void debug_iteration_domains (scop_p, int);\n-extern bool scop_do_interchange (scop_p);\n-extern bool scop_do_strip_mine (scop_p, int);\n+extern int scop_do_interchange (scop_p);\n+extern int scop_do_strip_mine (scop_p, int);\n extern bool scop_do_block (scop_p);\n extern bool flatten_all_loops (scop_p);\n extern void pbb_number_of_iterations_at_time (poly_bb_p, graphite_dim_t, mpz_t);"}, {"sha": "282990f311df1031e34b2073bccc5643c727e5f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -1,3 +1,8 @@\n+2011-07-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/47654\n+\t* gcc.dg/graphite/block-pr47654.c: New.\n+\n 2011-07-05  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/lambda/lambda-ref2.C: New.\n@@ -39,7 +44,7 @@\n \t* gcc.dg/pr49602.c: New test.\n \n 2011-07-04  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/34734\n \tPR target/44643\n \t* gcc.target/avr/avr.exp: Run over cpp files, too."}, {"sha": "9cdeb0c35795b5f2a921cefeff6bc0ec79fdff43", "filename": "gcc/testsuite/gcc.dg/graphite/block-pr47654.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-pr47654.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec11ec4142e5d300aa36cbee1b54adefdee7711/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-pr47654.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-pr47654.c?ref=cec11ec4142e5d300aa36cbee1b54adefdee7711", "patch": "@@ -0,0 +1,25 @@\n+int a[128][40];\n+\n+void __attribute__ ((noinline, noclone))\n+foo (void)\n+{\n+  int i, j;\n+  for (i = 0; i < 40; i++)\n+    for (j = 0; j < 128; j++)\n+      a[j][i] = 4;\n+}\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  foo ();\n+  for (i = 0; i < 40; i++)\n+    for (j = 0; j < 128; j++)\n+      if (a[j][i] != 4)\n+\t__builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"will be loop blocked\" \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}]}