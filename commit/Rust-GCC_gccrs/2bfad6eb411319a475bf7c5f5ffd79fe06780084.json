{"sha": "2bfad6eb411319a475bf7c5f5ffd79fe06780084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmYWQ2ZWI0MTEzMTlhNDc1YmY3YzVmNWZmZDc5ZmUwNjc4MDA4NA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-10-27T11:46:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:46:38Z"}, "message": "inline.adb (Is_Expression_Function): Removed.\n\n2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* inline.adb (Is_Expression_Function): Removed.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): An internally\n\tgenerated subprogram body that completes an expression function\n\tinherits the SPARK_Mode from the spec.\n\t* sem_res.adb (Resolve_Call): Update all calls to\n\tIs_Expression_Function.\n\t* sem_util.ads, sem_util.adb (Is_Expression_Function): Reimplemented.\n\t(Is_Expression_Function_Or_Completion): New routine.\n\nFrom-SVN: r229420", "tree": {"sha": "de083c5e99a31d445fae58ac36235a1c5b4b2f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de083c5e99a31d445fae58ac36235a1c5b4b2f48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfad6eb411319a475bf7c5f5ffd79fe06780084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfad6eb411319a475bf7c5f5ffd79fe06780084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfad6eb411319a475bf7c5f5ffd79fe06780084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfad6eb411319a475bf7c5f5ffd79fe06780084/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdabbb526556b8779df24df30b837dfe61554694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdabbb526556b8779df24df30b837dfe61554694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdabbb526556b8779df24df30b837dfe61554694"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "de9d8b3c61e4bd50d73b632b6e5b53312c055818", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -1,3 +1,14 @@\n+2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* inline.adb (Is_Expression_Function): Removed.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): An internally\n+\tgenerated subprogram body that completes an expression function\n+\tinherits the SPARK_Mode from the spec.\n+\t* sem_res.adb (Resolve_Call): Update all calls to\n+\tIs_Expression_Function.\n+\t* sem_util.ads, sem_util.adb (Is_Expression_Function): Reimplemented.\n+\t(Is_Expression_Function_Or_Completion): New routine.\n+\n 2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* lib-xref-spark_specific.adb, a-dirval-mingw.adb, exp_ch6.adb,"}, {"sha": "1330df9b91800b47bf0e15e5e5fa2f5971ed52cf", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -1357,10 +1357,6 @@ package body Inline is\n       --  Returns True if subprogram Id is defined in the visible part of a\n       --  package specification.\n \n-      function Is_Expression_Function (Id : Entity_Id) return Boolean;\n-      --  Returns True if subprogram Id was defined originally as an expression\n-      --  function.\n-\n       ---------------------------------------------------\n       -- Has_Formal_With_Discriminant_Dependent_Fields --\n       ---------------------------------------------------\n@@ -1472,20 +1468,6 @@ package body Inline is\n            and then List_Containing (Decl) = Visible_Declarations (P);\n       end In_Package_Visible_Spec;\n \n-      ----------------------------\n-      -- Is_Expression_Function --\n-      ----------------------------\n-\n-      function Is_Expression_Function (Id : Entity_Id) return Boolean is\n-         Decl : Node_Id := Parent (Parent (Id));\n-      begin\n-         if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n-            Decl := Parent (Decl);\n-         end if;\n-\n-         return Nkind (Original_Node (Decl)) = N_Expression_Function;\n-      end Is_Expression_Function;\n-\n       ------------------------\n       -- Is_Unit_Subprogram --\n       ------------------------"}, {"sha": "9fcaed9c333abd6a243d54c3cff8f059bbd154d5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -3493,15 +3493,40 @@ package body Sem_Ch6 is\n          Generate_Reference_To_Formals (Body_Id);\n       end if;\n \n-      --  Set the SPARK_Mode from the current context (may be overwritten later\n-      --  with explicit pragma). This is not done for entry barrier functions\n-      --  because they are generated outside the protected type and should not\n-      --  carry the mode of the enclosing context.\n+      --  Entry barrier functions are generated outside the protected type and\n+      --  should not carry the SPARK_Mode of the enclosing context.\n \n       if Nkind (N) = N_Subprogram_Body\n         and then Is_Entry_Barrier_Function (N)\n       then\n          null;\n+\n+      --  The body is generated as part of expression function expansion. When\n+      --  the expression function appears in the visible declarations of a\n+      --  package, the body is added to the private declarations. Since both\n+      --  declarative lists may be subject to a different SPARK_Mode, inherit\n+      --  the mode of the spec.\n+\n+      --    package P with SPARK_Mode is\n+      --       function Expr_Func ... is (...);         --  original\n+      --       [function Expr_Func ...;]                --  generated spec\n+      --                                                --    mode is ON\n+      --    private\n+      --       pragma SPARK_Mode (Off);\n+      --       [function Expr_Func ... is return ...;]  --  generated body\n+      --    end P;                                      --    mode is ON\n+\n+      elsif not Comes_From_Source (N)\n+        and then Present (Prev_Id)\n+        and then Is_Expression_Function (Prev_Id)\n+      then\n+         Set_SPARK_Pragma (Body_Id, SPARK_Pragma (Prev_Id));\n+         Set_SPARK_Pragma_Inherited\n+           (Body_Id, SPARK_Pragma_Inherited (Prev_Id));\n+\n+      --  Set the SPARK_Mode from the current context (may be overwritten later\n+      --  with explicit pragma).\n+\n       else\n          Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n          Set_SPARK_Pragma_Inherited (Body_Id);"}, {"sha": "13034546ce8659ecbf6bcc948b3d23b1e9ef92e2", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -5793,10 +5793,11 @@ package body Sem_Res is\n       --  is frozen in the usual fashion, by the appearance of a real body,\n       --  or at the end of a declarative part.\n \n-      if Is_Entity_Name (Subp) and then not In_Spec_Expression\n-        and then not Is_Expression_Function (Current_Scope)\n+      if Is_Entity_Name (Subp)\n+        and then not In_Spec_Expression\n+        and then not Is_Expression_Function_Or_Completion (Current_Scope)\n         and then\n-          (not Is_Expression_Function (Entity (Subp))\n+          (not Is_Expression_Function_Or_Completion (Entity (Subp))\n             or else Scope (Entity (Subp)) = Current_Scope)\n       then\n          Freeze_Expression (Subp);"}, {"sha": "a576862dcecde1f1045fe57b0043801dbe17833b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -5081,7 +5081,6 @@ package body Sem_Util is\n               (Is_Concurrent_Type (Scope (Discriminal_Link (E)))\n                 or else\n                   Is_Concurrent_Record_Type (Scope (Discriminal_Link (E)))));\n-\n    end Denotes_Discriminant;\n \n    -------------------------\n@@ -11677,26 +11676,46 @@ package body Sem_Util is\n    ----------------------------\n \n    function Is_Expression_Function (Subp : Entity_Id) return Boolean is\n-      Decl : Node_Id;\n-\n    begin\n-      if Ekind (Subp) /= E_Function then\n+      if Ekind_In (Subp, E_Function, E_Subprogram_Body) then\n+         return\n+           Nkind (Original_Node (Unit_Declaration_Node (Subp))) =\n+             N_Expression_Function;\n+      else\n          return False;\n+      end if;\n+   end Is_Expression_Function;\n+\n+   ------------------------------------------\n+   -- Is_Expression_Function_Or_Completion --\n+   ------------------------------------------\n+\n+   function Is_Expression_Function_Or_Completion\n+     (Subp : Entity_Id) return Boolean\n+   is\n+      Subp_Decl : Node_Id;\n+\n+   begin\n+      if Ekind (Subp) = E_Function then\n+         Subp_Decl := Unit_Declaration_Node (Subp);\n+\n+         --  The function declaration is either an expression function or is\n+         --  completed by an expression function body.\n+\n+         return\n+           Is_Expression_Function (Subp)\n+             or else (Nkind (Subp_Decl) = N_Subprogram_Declaration\n+                       and then Present (Corresponding_Body (Subp_Decl))\n+                       and then Is_Expression_Function\n+                                  (Corresponding_Body (Subp_Decl)));\n+\n+      elsif Ekind (Subp) = E_Subprogram_Body then\n+         return Is_Expression_Function (Subp);\n \n       else\n-         Decl := Unit_Declaration_Node (Subp);\n-         return Nkind (Decl) = N_Subprogram_Declaration\n-           and then\n-             (Nkind (Original_Node (Decl)) = N_Expression_Function\n-               or else\n-                 (Present (Corresponding_Body (Decl))\n-                   and then\n-                     Nkind (Original_Node\n-                             (Unit_Declaration_Node\n-                               (Corresponding_Body (Decl)))) =\n-                                  N_Expression_Function));\n+         return False;\n       end if;\n-   end Is_Expression_Function;\n+   end Is_Expression_Function_Or_Completion;\n \n    -----------------------\n    -- Is_EVF_Expression --"}, {"sha": "03a1c21ba6655c8eb18ba7bb363d7fd1e3499a60", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfad6eb411319a475bf7c5f5ffd79fe06780084/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=2bfad6eb411319a475bf7c5f5ffd79fe06780084", "patch": "@@ -1334,9 +1334,12 @@ package Sem_Util is\n    --  Determine whether entity Id is the spec entity of an entry [family]\n \n    function Is_Expression_Function (Subp : Entity_Id) return Boolean;\n-   --  Predicate to determine whether a scope entity comes from a rewritten\n-   --  expression function call, and should be inlined unconditionally. Also\n-   --  used to determine that such a call does not constitute a freeze point.\n+   --  Determine whether subprogram [body] Subp denotes an expression function\n+\n+   function Is_Expression_Function_Or_Completion\n+     (Subp : Entity_Id) return Boolean;\n+   --  Determine whether subprogram [body] Subp denotes an expression function\n+   --  or is completed by an expression function body.\n \n    function Is_EVF_Expression (N : Node_Id) return Boolean;\n    --  Determine whether node N denotes a reference to a formal parameter of"}]}