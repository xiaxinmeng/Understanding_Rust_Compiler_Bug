{"sha": "1c613165a55b212c59a83796b20a1d555e096504", "node_id": "C_kwDOANBUbNoAKDFjNjEzMTY1YTU1YjIxMmM1OWE4Mzc5NmIyMGExZDU1NWUwOTY1MDQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-13T19:50:19Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-14T15:56:50Z"}, "message": "Fortran: PACK intrinsic should not try to read from zero-sized array\n\nlibgfortran/ChangeLog:\n\n\tPR libfortran/103634\n\t* intrinsics/pack_generic.c (pack_internal): Handle case when the\n\tarray argument of PACK has one or more extents of size zero to\n\tavoid invalid reads.\n\ngcc/testsuite/ChangeLog:\n\n\tPR libfortran/103634\n\t* gfortran.dg/intrinsic_pack_6.f90: New test.", "tree": {"sha": "ba8584c09200fc8eb9c7fa31566987e6e3a62264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba8584c09200fc8eb9c7fa31566987e6e3a62264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c613165a55b212c59a83796b20a1d555e096504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c613165a55b212c59a83796b20a1d555e096504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c613165a55b212c59a83796b20a1d555e096504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c613165a55b212c59a83796b20a1d555e096504/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3305135c29e1c3e988bd9bad40aefc01d138aaca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3305135c29e1c3e988bd9bad40aefc01d138aaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3305135c29e1c3e988bd9bad40aefc01d138aaca"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "917944d88464e158b0b65ffbd62dcf0465acb3b3", "filename": "gcc/testsuite/gfortran.dg/intrinsic_pack_6.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c613165a55b212c59a83796b20a1d555e096504/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c613165a55b212c59a83796b20a1d555e096504/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_pack_6.f90?ref=1c613165a55b212c59a83796b20a1d555e096504", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+! PR libfortran/103634 - Runtime crash with PACK on zero-sized arrays\n+! Exercise PACK intrinsic for cases when it calls pack_internal\n+\n+program p\n+  implicit none\n+  type t\n+     real :: r(24) = -99.\n+  end type\n+  type(t), allocatable :: new(:), old(:), vec(:)\n+  logical, allocatable :: mask(:)\n+  integer              :: n, m\n+! m = 1    ! works\n+  m = 0    ! failed with SIGSEGV in pack_internal\n+  do m = 0, 2\n+     print *, m\n+     allocate (old(m), mask(m), vec(m))\n+     if (m > 0) vec(m)% r(1) = 42\n+     mask(:) = .true.\n+     n = count (mask)\n+     allocate (new(n))\n+\n+     mask(:) = .false.\n+     if (size (pack (old, mask)) /= 0) stop 1\n+     mask(:) = .true.\n+     if (size (pack (old, mask)) /= m) stop 2\n+     new(:) = pack (old, mask)              ! this used to segfault for m=0\n+\n+     mask(:) = .false.\n+     if (size (pack (old, mask, vector=vec)) /= m) stop 3\n+     new(:) = t()\n+     new(:) = pack (old, mask, vector=vec)  ! this used to segfault for m=0\n+     if (m > 0) then\n+        if (     new( m  )% r(1) /=  42)  stop 4\n+        if (any (new(:m-1)% r(1) /= -99)) stop 5\n+     end if\n+\n+     if (m > 0) mask(m) = .true.\n+     if (size (pack (old, mask, vector=vec)) /= m) stop 6\n+     new(:) = t()\n+     new(:) = pack (old, mask, vector=vec)  ! this used to segfault for m=0\n+     if (m > 0) then\n+        if (new(1)% r(1) /= -99) stop 7\n+     end if\n+     if (m > 1) then\n+        if (new(m)% r(1) /=  42) stop 8\n+     end if\n+\n+     if (size (pack (old(:0), mask(:0), vector=vec)) /= m) stop 9\n+     new(:) = t()\n+     new(:) = pack (old(:0), mask(:0), vector=vec) ! did segfault for m=0\n+     if (m > 0) then\n+        if (new(m)% r(1) /= 42) stop 10\n+     end if\n+     deallocate (old, mask, new, vec)\n+  end do\n+end"}, {"sha": "15880e743480ec45efbbb3454d75897567201ac2", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c613165a55b212c59a83796b20a1d555e096504/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c613165a55b212c59a83796b20a1d555e096504/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=1c613165a55b212c59a83796b20a1d555e096504", "patch": "@@ -85,6 +85,7 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n \n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n+  bool zero_sized;\n   index_type n;\n   index_type dim;\n   index_type nelem;\n@@ -114,10 +115,13 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n   else\n     runtime_error (\"Funny sized logical array\");\n \n+  zero_sized = false;\n   for (n = 0; n < dim; n++)\n     {\n       count[n] = 0;\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+      if (extent[n] <= 0)\n+\tzero_sized = true;\n       sstride[n] = GFC_DESCRIPTOR_STRIDE_BYTES(array,n);\n       mstride[n] = GFC_DESCRIPTOR_STRIDE_BYTES(mask,n);\n     }\n@@ -126,6 +130,11 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n   if (mstride[0] == 0)\n     mstride[0] = mask_kind;\n \n+  if (zero_sized)\n+    sptr = NULL;\n+  else\n+    sptr = array->base_addr;\n+\n   if (ret->base_addr == NULL || unlikely (compile_options.bounds_check))\n     {\n       /* Count the elements, either for allocating memory or"}]}