{"sha": "412c4af7f17e3211b83bc66a4a1599e5f74eb167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyYzRhZjdmMTdlMzIxMWI4M2JjNjZhNGExNTk5ZTVmNzRlYjE2Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-09-11T06:46:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-11T06:46:23Z"}, "message": "re PR middle-end/63186 (Undefined .L* symbols because of fnsplit)\n\n\n\tPR tree-optimization/63186\n\t* ipa-split.c (test_nonssa_use): Skip nonforced labels.\n\t(mark_nonssa_use): Likewise.\n\t(verify_non_ssa_vars): Verify all header blocks for label\n\tdefinitions.\n\n\t* gcc.dg/pr63186.c: New testcase.\n\nFrom-SVN: r215149", "tree": {"sha": "2c571d839379bebb75313b494193d5ccf49e6fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c571d839379bebb75313b494193d5ccf49e6fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/412c4af7f17e3211b83bc66a4a1599e5f74eb167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412c4af7f17e3211b83bc66a4a1599e5f74eb167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412c4af7f17e3211b83bc66a4a1599e5f74eb167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412c4af7f17e3211b83bc66a4a1599e5f74eb167/comments", "author": null, "committer": null, "parents": [{"sha": "cf92ae7f061c922227f76feaeb443c01fbe5c195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf92ae7f061c922227f76feaeb443c01fbe5c195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf92ae7f061c922227f76feaeb443c01fbe5c195"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "242704859b927a807fa0ff3880dd390cc40c9e74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=412c4af7f17e3211b83bc66a4a1599e5f74eb167", "patch": "@@ -1,3 +1,11 @@\n+2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-optimization/63186\n+\t* ipa-split.c (test_nonssa_use): Skip nonforced labels.\n+\t(mark_nonssa_use): Likewise.\n+\t(verify_non_ssa_vars): Verify all header blocks for label\n+\tdefinitions.\n+\n 2014-09-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "fde436538f53897dd6555d54999a8269ad8f244c", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=412c4af7f17e3211b83bc66a4a1599e5f74eb167", "patch": "@@ -167,7 +167,11 @@ test_nonssa_use (gimple, tree t, tree, void *data)\n       || (TREE_CODE (t) == VAR_DECL\n \t  && auto_var_in_fn_p (t, current_function_decl))\n       || TREE_CODE (t) == RESULT_DECL\n-      || TREE_CODE (t) == LABEL_DECL)\n+\t /* Normal labels are part of CFG and will be handled gratefuly.\n+\t    Forced labels however can be used directly by statements and\n+\t    need to stay in one partition along with their uses.  */\n+      || (TREE_CODE (t) == LABEL_DECL\n+\t  && FORCED_LABEL (t)))\n     return bitmap_bit_p ((bitmap)data, DECL_UID (t));\n \n   /* For DECL_BY_REFERENCE, the return value is actually a pointer.  We want\n@@ -213,6 +217,7 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n   edge e;\n   edge_iterator ei;\n   bool ok = true;\n+  basic_block bb;\n \n   FOR_EACH_EDGE (e, ei, current->entry_bb->preds)\n     if (e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n@@ -225,8 +230,8 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n   while (!worklist.is_empty ())\n     {\n       gimple_stmt_iterator bsi;\n-      basic_block bb = worklist.pop ();\n \n+      bb = worklist.pop ();\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tif (e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n \t    && bitmap_set_bit (seen, e->src->index))\n@@ -250,10 +255,10 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \t  if (gimple_code (stmt) == GIMPLE_LABEL\n \t      && test_nonssa_use (stmt, gimple_label_label (stmt),\n \t\t\t\t  NULL_TREE, non_ssa_vars))\n-\t  {\n-\t    ok = false;\n-\t    goto done;\n-\t  }\n+\t    {\n+\t      ok = false;\n+\t      goto done;\n+\t    }\n \t}\n       for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n@@ -286,6 +291,27 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \t    }\n \t}\n     }\n+\n+  /* Verify that the rest of function does not define any label\n+     used by the split part.  */\n+  FOR_EACH_BB_FN (bb, cfun)\n+    if (!bitmap_bit_p (current->split_bbs, bb->index)\n+\t&& !bitmap_bit_p (seen, bb->index))\n+      {\n+        gimple_stmt_iterator bsi;\n+        for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+\t  if (gimple_code (gsi_stmt (bsi)) == GIMPLE_LABEL\n+\t      && test_nonssa_use (gsi_stmt (bsi),\n+\t\t\t\t  gimple_label_label (gsi_stmt (bsi)),\n+\t\t\t\t  NULL_TREE, non_ssa_vars))\n+\t    {\n+\t      ok = false;\n+\t      goto done;\n+\t    }\n+\t  else if (gimple_code (gsi_stmt (bsi)) != GIMPLE_LABEL)\n+\t    break;\n+      }\n+    \n done:\n   BITMAP_FREE (seen);\n   worklist.release ();\n@@ -735,7 +761,8 @@ mark_nonssa_use (gimple, tree t, tree, void *data)\n   if ((TREE_CODE (t) == VAR_DECL\n        && auto_var_in_fn_p (t, current_function_decl))\n       || TREE_CODE (t) == RESULT_DECL\n-      || TREE_CODE (t) == LABEL_DECL)\n+      || (TREE_CODE (t) == LABEL_DECL\n+\t  && FORCED_LABEL (t)))\n     bitmap_set_bit ((bitmap)data, DECL_UID (t));\n \n   /* For DECL_BY_REFERENCE, the return value is actually a pointer.  We want"}, {"sha": "1432e77f73f0bc70f3435424b6c0681a1deb4fb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=412c4af7f17e3211b83bc66a4a1599e5f74eb167", "patch": "@@ -1,3 +1,8 @@\n+2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-optimization/63186\n+\t* gcc.dg/pr63186.c: New testcase.\n+\n 2014-09-10  Xinliang David Li  <davidxl@google.com>\n \n \tPR target/63209"}, {"sha": "b3648757c7a30f0f9cb5b9baa580ce8b5374f168", "filename": "gcc/testsuite/gcc.dg/pr63186.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412c4af7f17e3211b83bc66a4a1599e5f74eb167/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63186.c?ref=412c4af7f17e3211b83bc66a4a1599e5f74eb167", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+void *a;\n+int b, c, d;\n+\n+void\n+bar ()\n+{\n+  switch (c)\n+    {\n+    case 0:\n+    lab:\n+      __asm__ (\"\");\n+      return;\n+    default:\n+      break;\n+    }\n+  b = 0;\n+  d = 0;\n+  a = &&lab;\n+}\n+\n+void\n+foo ()\n+{\n+  bar ();\n+}\n+main()\n+{\n+}"}]}