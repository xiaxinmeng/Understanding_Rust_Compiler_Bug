{"sha": "ce531b14126bf5f1dcd70224a1131198ddf58875", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1MzFiMTQxMjZiZjVmMWRjZDcwMjI0YTExMzExOThkZGY1ODg3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-03T19:22:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-03T19:22:03Z"}, "message": "options: Fix up opts_set saving/restoring for underlying vars of Mask/InverseMask options\n\nSeems I've missed that set_option has special treatment for\nCLVC_BIT_CLEAR/CLVC_BIT_SET.\nWhich means I'll need to change the generic handling, so that for\nglobal_options_set elements mentioned in CLVC_BIT_* options are treated\ndifferently, instead of using the accumulated bitmasks they'll need to use\ntheir specific bitmask variables during the option saving/restoring.\n\nHere is a patch that implements that.\n\n2020-10-03  Jakub Jelinek  <jakub@redhat.com>\n\n\t* opth-gen.awk: For variables referenced in Mask and InverseMask,\n\tdon't use the explicit_mask bitmask array, but add separate\n\texplicit_mask_* members with the same types as the variables.\n\t* optc-save-gen.awk: Save, restore, compare and hash the separate\n\texplicit_mask_* members.", "tree": {"sha": "b628e50a97e2eebd0ae2d3f2f77f50bd48b037ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b628e50a97e2eebd0ae2d3f2f77f50bd48b037ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce531b14126bf5f1dcd70224a1131198ddf58875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce531b14126bf5f1dcd70224a1131198ddf58875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce531b14126bf5f1dcd70224a1131198ddf58875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce531b14126bf5f1dcd70224a1131198ddf58875/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f77106ec3f0005f0cfd3e1d083837afeb432f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f77106ec3f0005f0cfd3e1d083837afeb432f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f77106ec3f0005f0cfd3e1d083837afeb432f6"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "56a5df3d33efa21aab338662c2feb688d4d952a0", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce531b14126bf5f1dcd70224a1131198ddf58875/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce531b14126bf5f1dcd70224a1131198ddf58875/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ce531b14126bf5f1dcd70224a1131198ddf58875", "patch": "@@ -516,6 +516,10 @@ if (have_save) {\n \n \t\t\tvar_save_seen[name]++;\n \t\t\totype = var_type_struct(flags[i])\n+\t\t\tif (opt_args(\"Mask\", flags[i]) != \"\" \\\n+\t\t\t    || opt_args(\"InverseMask\", flags[i]))\n+\t\t\t\tvar_target_explicit_mask[name] = 1;\n+\n \t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n \t\t\t\tvar_target_int[n_target_int++] = name;\n \n@@ -545,6 +549,7 @@ if (have_save) {\n \t}\n } else {\n \tvar_target_int[n_target_int++] = \"target_flags\";\n+\tvar_target_explicit_mask[\"target_flags\"] = 1;\n }\n \n have_assert = 0;\n@@ -608,6 +613,10 @@ for (i = 0; i < n_extra_target_vars; i++) {\n }\n \n for (i = 0; i < n_target_other; i++) {\n+\tif (var_target_other[i] in var_target_explicit_mask) {\n+\t\tprint \"  ptr->explicit_mask_\" var_target_other[i] \" = opts_set->x_\" var_target_other[i] \";\";\n+\t\tcontinue;\n+\t}\n \tprint \"  if (opts_set->x_\" var_target_other[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n \tj++;\n \tif (j == 64) {\n@@ -630,6 +639,10 @@ for (i = 0; i < n_target_enum; i++) {\n }\n \n for (i = 0; i < n_target_int; i++) {\n+\tif (var_target_int[i] in var_target_explicit_mask) {\n+\t\tprint \"  ptr->explicit_mask_\" var_target_int[i] \" = opts_set->x_\" var_target_int[i] \";\";\n+\t\tcontinue;\n+\t}\n \tprint \"  if (opts_set->x_\" var_target_int[i] \") mask |= HOST_WIDE_INT_1U << \" j \";\";\n \tj++;\n \tif (j == 64) {\n@@ -739,6 +752,10 @@ for (i = 0; i < n_extra_target_vars; i++) {\n }\n \n for (i = 0; i < n_target_other; i++) {\n+\tif (var_target_other[i] in var_target_explicit_mask) {\n+\t\tprint \"  opts_set->x_\" var_target_other[i] \" = ptr->explicit_mask_\" var_target_other[i] \";\";\n+\t\tcontinue;\n+\t}\n \tif (j == 64) {\n \t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n \t\tk++;\n@@ -761,6 +778,10 @@ for (i = 0; i < n_target_enum; i++) {\n }\n \n for (i = 0; i < n_target_int; i++) {\n+\tif (var_target_int[i] in var_target_explicit_mask) {\n+\t\tprint \"  opts_set->x_\" var_target_int[i] \" = ptr->explicit_mask_\" var_target_int[i] \";\";\n+\t\tcontinue;\n+\t}\n \tif (j == 64) {\n \t\tprint \"  mask = ptr->explicit_mask[\" k \"];\";\n \t\tk++;\n@@ -1058,6 +1079,20 @@ print \"  for (size_t i = 0; i < sizeof (ptr1->explicit_mask) / sizeof (ptr1->exp\n print \"    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])\";\n print \"      return false;\"\n \n+for (i = 0; i < n_target_other; i++) {\n+\tif (var_target_other[i] in var_target_explicit_mask) {\n+\t\tprint \"  if (ptr1->explicit_mask_\" var_target_other[i] \" != ptr2->explicit_mask_\" var_target_other[i] \")\";\n+\t\tprint \"    return false;\";\n+\t}\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tif (var_target_int[i] in var_target_explicit_mask) {\n+\t\tprint \"  if (ptr1->explicit_mask_\" var_target_int[i] \" != ptr2->explicit_mask_\" var_target_int[i] \")\";\n+\t\tprint \"    return false;\";\n+\t}\n+}\n+\n print \"  return true;\";\n \n print \"}\";\n@@ -1088,6 +1123,17 @@ for (i = 0; i < n_target_val; i++) {\n }\n print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n print \"    hstate.add_hwi (ptr->explicit_mask[i]);\";\n+\n+for (i = 0; i < n_target_other; i++) {\n+\tif (var_target_other[i] in var_target_explicit_mask)\n+\t\tprint \"  hstate.add_hwi (ptr->explicit_mask_\" var_target_other[i] \");\";\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tif (var_target_int[i] in var_target_explicit_mask)\n+\t\tprint \"  hstate.add_hwi (ptr->explicit_mask_\" var_target_int[i] \");\";\n+}\n+\n print \"  return hstate.end ();\";\n print \"}\";\n "}, {"sha": "a1ca579f24fec41ebbf4358fc268f57ac02f505d", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce531b14126bf5f1dcd70224a1131198ddf58875/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce531b14126bf5f1dcd70224a1131198ddf58875/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=ce531b14126bf5f1dcd70224a1131198ddf58875", "patch": "@@ -209,6 +209,7 @@ n_target_int = 0;\n n_target_enum = 0;\n n_target_other = 0;\n n_target_explicit = n_extra_target_vars;\n+n_target_explicit_mask = 0;\n \n for (i = 0; i < n_target_save; i++) {\n \tif (target_save_decl[i] ~ \"^((un)?signed +)?int +[_\" alnum \"]+$\")\n@@ -240,6 +241,12 @@ if (have_save) {\n \t\t\tvar_save_seen[name]++;\n \t\t\tn_target_explicit++;\n \t\t\totype = var_type_struct(flags[i])\n+\n+\t\t\tif (opt_args(\"Mask\", flags[i]) != \"\" \\\n+\t\t\t    || opt_args(\"InverseMask\", flags[i]))\n+\t\t\t\tvar_target_explicit_mask[n_target_explicit_mask++] \\\n+\t\t\t\t    = otype \"explicit_mask_\" name;\n+\n \t\t\tif (otype ~ \"^((un)?signed +)?int *$\")\n \t\t\t\tvar_target_int[n_target_int++] = otype \"x_\" name;\n \n@@ -259,6 +266,8 @@ if (have_save) {\n } else {\n \tvar_target_int[n_target_int++] = \"int x_target_flags\";\n \tn_target_explicit++;\n+\tvar_target_explicit_mask[n_target_explicit_mask++] \\\n+\t    = \"int explicit_mask_target_flags\";\n }\n \n for (i = 0; i < n_target_other; i++) {\n@@ -281,8 +290,12 @@ for (i = 0; i < n_target_char; i++) {\n \tprint \"  \" var_target_char[i] \";\";\n }\n \n-print \"  /* \" n_target_explicit \" members */\";\n-print \"  unsigned HOST_WIDE_INT explicit_mask[\" int ((n_target_explicit + 63) / 64) \"];\";\n+print \"  /* \" n_target_explicit - n_target_explicit_mask \" members */\";\n+print \"  unsigned HOST_WIDE_INT explicit_mask[\" int ((n_target_explicit - n_target_explicit_mask + 63) / 64) \"];\";\n+\n+for (i = 0; i < n_target_explicit_mask; i++) {\n+\tprint \"  \" var_target_explicit_mask[i] \";\";\n+}\n \n print \"};\";\n print \"\";"}]}