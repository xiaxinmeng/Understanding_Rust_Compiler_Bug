{"sha": "7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzMWJmMDZiYzJiYjAxYTMwN2E3OTZiZjRkZTU3ZDljYTQ4YmIzOA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-09T20:25:19Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-09T20:25:19Z"}, "message": "re PR fortran/41579 ([OOP] Nesting of SELECT TYPE)\n\n2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41579\n\t* gfortran.h (gfc_select_type_stack): New struct, to be used as a stack\n\tfor SELECT TYPE statements.\n\t(select_type_stack): New global variable.\n\t(type_selector,select_type_tmp): Removed.\n\t* match.c (type_selector,type_selector): Removed.\n\t(select_type_stack): New variable, serving as a stack for\n\tSELECT TYPE statements.\n\t(select_type_push,select_type_set_tmp): New functions.\n\t(gfc_match_select_type): Call select_type_push.\n\t(gfc_match_type_is): Call select_type_set_tmp.\n\t* parse.c (select_type_pop): New function.\n\t(parse_select_type_block): Call select_type_pop.\n\t* symbol.c (select_type_insert_tmp): New function.\n\t(gfc_find_sym_tree): Call select_type_insert_tmp.\n\n\n2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41579\n\t* gfortran.dg/select_type_6.f03: New test.\n\nFrom-SVN: r152600", "tree": {"sha": "4469b291b15c4ee960294436b60b6b3e388e3d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4469b291b15c4ee960294436b60b6b3e388e3d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ece9b288130746b5b772a7b18b50ef7a8bc706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ece9b288130746b5b772a7b18b50ef7a8bc706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ece9b288130746b5b772a7b18b50ef7a8bc706"}], "stats": {"total": 154, "additions": 135, "deletions": 19}, "files": [{"sha": "c54639a15b54154d5b309ca420b66ef7e37cf981", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -1,3 +1,21 @@\n+2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41579\n+\t* gfortran.h (gfc_select_type_stack): New struct, to be used as a stack\n+\tfor SELECT TYPE statements.\n+\t(select_type_stack): New global variable.\n+\t(type_selector,select_type_tmp): Removed.\n+\t* match.c (type_selector,type_selector): Removed.\n+\t(select_type_stack): New variable, serving as a stack for\n+\tSELECT TYPE statements.\n+\t(select_type_push,select_type_set_tmp): New functions.\n+\t(gfc_match_select_type): Call select_type_push.\n+\t(gfc_match_type_is): Call select_type_set_tmp.\n+\t* parse.c (select_type_pop): New function.\n+\t(parse_select_type_block): Call select_type_pop.\n+\t* symbol.c (select_type_insert_tmp): New function.\n+\t(gfc_find_sym_tree): Call select_type_insert_tmp.\n+\n 2009-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* arith.c (arith_power): Use mpc_pow_z."}, {"sha": "c602600165be106c074c765daf0c0cd695670cb3", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -2208,6 +2208,18 @@ iterator_stack;\n extern iterator_stack *iter_stack;\n \n \n+/* Used for (possibly nested) SELECT TYPE statements.  */\n+typedef struct gfc_select_type_stack\n+{\n+  gfc_symbol *selector;\t\t\t/* Current selector variable.  */\n+  gfc_symtree *tmp;\t\t\t/* Current temporary variable.  */\n+  struct gfc_select_type_stack *prev;\t/* Previous element on stack.  */\n+}\n+gfc_select_type_stack;\n+extern gfc_select_type_stack *select_type_stack;\n+#define gfc_get_select_type_stack() XCNEW (gfc_select_type_stack)\n+\n+\n /* Node in the linked list used for storing finalizer procedures.  */\n \n typedef struct gfc_finalizer\n@@ -2566,10 +2578,6 @@ void gfc_free_equiv (gfc_equiv *);\n void gfc_free_data (gfc_data *);\n void gfc_free_case_list (gfc_case *);\n \n-/* Used for SELECT TYPE statements.  */\n-extern gfc_symbol *type_selector;\n-extern gfc_symtree *select_type_tmp;\n-\n /* matchexp.c -- FIXME too?  */\n gfc_expr *gfc_get_parentheses (gfc_expr *);\n "}, {"sha": "3542944a50b8d2a74911ce45c10726a91a5976c0", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -29,9 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n int gfc_matching_procptr_assignment = 0;\n bool gfc_matching_prefix = false;\n \n-/* Used for SELECT TYPE statements.  */\n-gfc_symbol *type_selector;\n-gfc_symtree *select_type_tmp;\n+/* Stack of SELECT TYPE statements.  */\n+gfc_select_type_stack *select_type_stack = NULL;\n \n /* For debugging and diagnostic purposes.  Return the textual representation\n    of the intrinsic operator OP.  */\n@@ -4021,6 +4020,38 @@ gfc_match_select (void)\n }\n \n \n+/* Push the current selector onto the SELECT TYPE stack.  */\n+\n+static void\n+select_type_push (gfc_symbol *sel)\n+{\n+  gfc_select_type_stack *top = gfc_get_select_type_stack ();\n+  top->selector = sel;\n+  top->tmp = NULL;\n+  top->prev = select_type_stack;\n+\n+  select_type_stack = top;\n+}\n+\n+\n+/* Set the temporary for the current SELECT TYPE selector.  */\n+\n+static void\n+select_type_set_tmp (gfc_typespec *ts)\n+{\n+  char name[GFC_MAX_SYMBOL_LEN];\n+  gfc_symtree *tmp;\n+\n+  sprintf (name, \"tmp$%s\", ts->u.derived->name);\n+  gfc_get_sym_tree (name, gfc_current_ns, &tmp, false);\n+  tmp->n.sym->ts = *ts;\n+  tmp->n.sym->attr.referenced = 1;\n+  tmp->n.sym->attr.pointer = 1;\n+\n+  select_type_stack->tmp = tmp;\n+}\n+\n+\n /* Match a SELECT TYPE statement.  */\n \n match\n@@ -4082,7 +4113,7 @@ gfc_match_select_type (void)\n   new_st.expr2 = expr2;\n   new_st.ext.ns = gfc_current_ns;\n \n-  type_selector = expr1->symtree->n.sym;\n+  select_type_push (expr1->symtree->n.sym);\n \n   return MATCH_YES;\n }\n@@ -4167,7 +4198,6 @@ gfc_match_type_is (void)\n {\n   gfc_case *c = NULL;\n   match m;\n-  char name[GFC_MAX_SYMBOL_LEN];\n \n   if (gfc_current_state () != COMP_SELECT_TYPE)\n     {\n@@ -4199,11 +4229,7 @@ gfc_match_type_is (void)\n   new_st.ext.case_list = c;\n \n   /* Create temporary variable.  */\n-  sprintf (name, \"tmp$%s\", c->ts.u.derived->name);\n-  gfc_get_sym_tree (name, gfc_current_ns, &select_type_tmp, false);\n-  select_type_tmp->n.sym->ts = c->ts;\n-  select_type_tmp->n.sym->attr.referenced = 1;\n-  select_type_tmp->n.sym->attr.pointer = 1;\n+  select_type_set_tmp (&c->ts);\n \n   return MATCH_YES;\n "}, {"sha": "49d449cfdc8a8deb590d32e08b4a7bd606d3c247", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -2887,6 +2887,17 @@ parse_select_block (void)\n }\n \n \n+/* Pop the current selector from the SELECT TYPE stack.  */\n+\n+static void\n+select_type_pop (void)\n+{\n+  gfc_select_type_stack *old = select_type_stack;\n+  select_type_stack = old->prev;\n+  gfc_free (old);\n+}\n+\n+\n /* Parse a SELECT TYPE construct (F03:R821).  */\n \n static void\n@@ -2959,6 +2970,7 @@ parse_select_type_block (void)\n   pop_state ();\n   accept_statement (st);\n   gfc_current_ns = gfc_current_ns->parent;\n+  select_type_pop ();\n }\n \n "}, {"sha": "2641df82b359bd74e432c4bb2a1ea920dbf48093", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -2461,6 +2461,19 @@ ambiguous_symbol (const char *name, gfc_symtree *st)\n }\n \n \n+/* If we're in a SELECT TYPE block, check if the variable 'st' matches any\n+   selector on the stack. If yes, replace it by the corresponding temporary.  */\n+\n+static void\n+select_type_insert_tmp (gfc_symtree **st)\n+{\n+  gfc_select_type_stack *stack = select_type_stack;\n+  for (; stack; stack = stack->prev)\n+    if ((*st)->n.sym == stack->selector)\n+      *st = stack->tmp;\n+}\n+\n+\n /* Search for a symtree starting in the current namespace, resorting to\n    any parent namespaces if requested by a nonzero parent_flag.\n    Returns nonzero if the name is ambiguous.  */\n@@ -2479,11 +2492,7 @@ gfc_find_sym_tree (const char *name, gfc_namespace *ns, int parent_flag,\n       st = gfc_find_symtree (ns->sym_root, name);\n       if (st != NULL)\n \t{\n-\t  /* Special case: If we're in a SELECT TYPE block,\n-\t    replace the selector variable by a temporary.  */\n-\t  if (gfc_current_state () == COMP_SELECT_TYPE\n-\t      && st && st->n.sym == type_selector)\n-\t    st = select_type_tmp;\n+\t  select_type_insert_tmp (&st);\n \n \t  *result = st;\n \t  /* Ambiguous generic interfaces are permitted, as long"}, {"sha": "537f11fb1408ccdd42420560ebcb7adc8e7f5654", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -1,3 +1,8 @@\n+2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41579\n+\t* gfortran.dg/select_type_6.f03: New test.\n+\n 2009-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/41445"}, {"sha": "3b3c08e2296f0f25a53e9d9b4e6cca9b3583fe75", "filename": "gcc/testsuite/gfortran.dg/select_type_6.f03", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431bf06bc2bb01a307a796bf4de57d9ca48bb38/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_6.f03?ref=7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+!\n+! PR 41579: [OOP/Polymorphism] Nesting of SELECT TYPE\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+ type t1\n+ end type t1\n+\n+ type, extends(t1) :: t2\n+  integer :: i\n+ end type t2\n+\n+ type, extends(t1) :: t3\n+  integer :: j\n+ end type t3\n+\n+ class(t1), allocatable :: mt2, mt3\n+ allocate(t2 :: mt2)\n+ allocate(t3 :: mt3)\n+\n+ select type (mt2)\n+ type is(t2)\n+   mt2%i = 5\n+   print *,mt2%i\n+   select type(mt3)\n+   type is(t3)\n+     mt3%j = 2*mt2%i\n+     print *,mt3%j\n+     if (mt3%j /= 10) call abort()\n+   class default\n+     call abort()\n+   end select\n+ class default\n+   call abort()\n+ end select\n+\n+end"}]}