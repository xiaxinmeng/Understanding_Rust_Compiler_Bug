{"sha": "1a79e03b8012d5094e5bd432df59abeca5c2fe18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3OWUwM2I4MDEyZDUwOTRlNWJkNDMyZGY1OWFiZWNhNWMyZmUxOA==", "commit": {"author": {"name": "Nicolas Roche", "email": "roche@adacore.com", "date": "2019-07-22T13:56:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:56:45Z"}, "message": "[Ada] Ensure Ctrl-C is not emited on terminated processes\n\nDue to the reuse policy of PID on Windows. Sending a Ctrl-C to a dead\nprocess might result in a Ctrl-C sent to the wrong process. The check is\nalso implemented on Unix platforms and avoid unecessary waits.\n\n2019-07-22  Nicolas Roche  <roche@adacore.com>\n\ngcc/ada/\n\n\t* terminals.c (__gnat_tty_waitpid): Support both blocking and\n\tnot blocking mode.\n\t* libgnat/g-exptty.ads (Is_Process_Running): New function.\n\t* libgnat/g-exptty.adb (Close): Don't try to interrupt/terminate\n\ta process if it is already dead.\n\nFrom-SVN: r273672", "tree": {"sha": "48f88a355759883e437a94913f8890a9695587ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48f88a355759883e437a94913f8890a9695587ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a79e03b8012d5094e5bd432df59abeca5c2fe18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79e03b8012d5094e5bd432df59abeca5c2fe18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a79e03b8012d5094e5bd432df59abeca5c2fe18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79e03b8012d5094e5bd432df59abeca5c2fe18/comments", "author": {"login": "Nikokrock", "id": 7796165, "node_id": "MDQ6VXNlcjc3OTYxNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7796165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nikokrock", "html_url": "https://github.com/Nikokrock", "followers_url": "https://api.github.com/users/Nikokrock/followers", "following_url": "https://api.github.com/users/Nikokrock/following{/other_user}", "gists_url": "https://api.github.com/users/Nikokrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nikokrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nikokrock/subscriptions", "organizations_url": "https://api.github.com/users/Nikokrock/orgs", "repos_url": "https://api.github.com/users/Nikokrock/repos", "events_url": "https://api.github.com/users/Nikokrock/events{/privacy}", "received_events_url": "https://api.github.com/users/Nikokrock/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4123b473427ca6854f874c77f5ce78c7e8c133a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4123b473427ca6854f874c77f5ce78c7e8c133a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4123b473427ca6854f874c77f5ce78c7e8c133a7"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "ec1b81aeb59c141bcd05becaa72fed47fcf2ab4c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a79e03b8012d5094e5bd432df59abeca5c2fe18", "patch": "@@ -1,3 +1,11 @@\n+2019-07-22  Nicolas Roche  <roche@adacore.com>\n+\n+\t* terminals.c (__gnat_tty_waitpid): Support both blocking and\n+\tnot blocking mode.\n+\t* libgnat/g-exptty.ads (Is_Process_Running): New function.\n+\t* libgnat/g-exptty.adb (Close): Don't try to interrupt/terminate\n+\ta process if it is already dead.\n+\n 2019-07-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_Fixed_Point_Type):  When freezing a"}, {"sha": "728c5c6528092d076b77be08609640ef30138358", "filename": "gcc/ada/libgnat/g-exptty.adb", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Flibgnat%2Fg-exptty.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Flibgnat%2Fg-exptty.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-exptty.adb?ref=1a79e03b8012d5094e5bd432df59abeca5c2fe18", "patch": "@@ -38,6 +38,28 @@ package body GNAT.Expect.TTY is\n    On_Windows : constant Boolean := Directory_Separator = '\\';\n    --  True when on Windows\n \n+   function Waitpid (Process : System.Address; Blocking : Integer)\n+                     return Integer;\n+   pragma Import (C, Waitpid, \"__gnat_tty_waitpid\");\n+   --  Wait for a specific process id, and return its exit code\n+\n+   ------------------------\n+   -- Is_Process_Running --\n+   ------------------------\n+\n+   function Is_Process_Running\n+      (Descriptor : in out TTY_Process_Descriptor)\n+      return Boolean\n+   is\n+   begin\n+      if Descriptor.Process = System.Null_Address then\n+         return False;\n+      end if;\n+\n+      Descriptor.Exit_Status := Waitpid (Descriptor.Process, Blocking => 0);\n+      return Descriptor.Exit_Status = Still_Active;\n+   end Is_Process_Running;\n+\n    -----------\n    -- Close --\n    -----------\n@@ -49,10 +71,6 @@ package body GNAT.Expect.TTY is\n       procedure Terminate_Process (Process : System.Address);\n       pragma Import (C, Terminate_Process, \"__gnat_terminate_process\");\n \n-      function Waitpid (Process : System.Address) return Integer;\n-      pragma Import (C, Waitpid, \"__gnat_tty_waitpid\");\n-      --  Wait for a specific process id, and return its exit code\n-\n       procedure Free_Process (Process : System.Address);\n       pragma Import (C, Free_Process, \"__gnat_free_process\");\n \n@@ -63,7 +81,7 @@ package body GNAT.Expect.TTY is\n       --  If we haven't already closed the process\n \n       if Descriptor.Process = System.Null_Address then\n-         Status := -1;\n+         Status := Descriptor.Exit_Status;\n \n       else\n          --  Send a Ctrl-C to the process first. This way, if the launched\n@@ -75,9 +93,6 @@ package body GNAT.Expect.TTY is\n          --  signal, so this needs to be done while the file descriptors are\n          --  still open (it used to be after the closes and that was wrong).\n \n-         Interrupt (Descriptor);\n-         delay (0.05);\n-\n          if Descriptor.Input_Fd /= Invalid_FD then\n             Close (Descriptor.Input_Fd);\n          end if;\n@@ -92,8 +107,23 @@ package body GNAT.Expect.TTY is\n             Close (Descriptor.Output_Fd);\n          end if;\n \n-         Terminate_Process (Descriptor.Process);\n-         Status := Waitpid (Descriptor.Process);\n+         if Descriptor.Exit_Status = Still_Active then\n+            Status := Waitpid (Descriptor.Process, Blocking => 0);\n+\n+            if Status = Still_Active then\n+               --  In theory the process might hav died since the check. In\n+               --  practice the following calls should not cause any issue.\n+               Interrupt (Descriptor);\n+               delay (0.05);\n+               Terminate_Process (Descriptor.Process);\n+               Status := Waitpid (Descriptor.Process, Blocking => 1);\n+               Descriptor.Exit_Status := Status;\n+            end if;\n+         else\n+            --  If Exit_Status is not STILL_ACTIVE just retrieve the saved\n+            --  exit status\n+            Status := Descriptor.Exit_Status;\n+         end if;\n \n          if not On_Windows then\n             Close_TTY (Descriptor.Process);\n@@ -258,6 +288,7 @@ package body GNAT.Expect.TTY is\n       pragma Import (C, Internal, \"__gnat_setup_communication\");\n \n    begin\n+      Pid.Exit_Status := Still_Active;\n       if Internal (Pid.Process'Address) /= 0 then\n          raise Invalid_Process with \"cannot setup communication.\";\n       end if;"}, {"sha": "57aa8d792cc124ff76e429361a4c6c8d64f92503", "filename": "gcc/ada/libgnat/g-exptty.ads", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Flibgnat%2Fg-exptty.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Flibgnat%2Fg-exptty.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-exptty.ads?ref=1a79e03b8012d5094e5bd432df59abeca5c2fe18", "patch": "@@ -92,6 +92,11 @@ package GNAT.Expect.TTY is\n       Columns    : Natural);\n    --  Sets up the size of the terminal as reported to the spawned process\n \n+   function Is_Process_Running\n+      (Descriptor : in out TTY_Process_Descriptor)\n+      return Boolean;\n+   --  Return True is the process is still alive\n+\n private\n \n    --  All declarations in the private part must be fully commented ???\n@@ -129,9 +134,14 @@ private\n       Cmd   : String;\n       Args  : System.Address);\n \n+   Still_Active : constant Integer := -1;\n+\n    type TTY_Process_Descriptor is new Process_Descriptor with record\n-      Process   : System.Address;  --  Underlying structure used in C\n-      Use_Pipes : Boolean := True;\n+      Process     : System.Address;\n+      --  Underlying structure used in C\n+      Exit_Status : Integer := Still_Active;\n+      --  Hold the exit status of the process.\n+      Use_Pipes   : Boolean := True;\n    end record;\n \n end GNAT.Expect.TTY;"}, {"sha": "320ad2843065543d8add93de910704a2d24ea414", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79e03b8012d5094e5bd432df59abeca5c2fe18/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=1a79e03b8012d5094e5bd432df59abeca5c2fe18", "patch": "@@ -108,7 +108,7 @@ __gnat_tty_supported (void)\n }\n \n int\n-__gnat_tty_waitpid (void *desc ATTRIBUTE_UNUSED)\n+__gnat_tty_waitpid (void *desc ATTRIBUTE_UNUSED, int blocking)\n {\n   return 1;\n }\n@@ -152,6 +152,7 @@ __gnat_setup_winsize (void *desc ATTRIBUTE_UNUSED,\n #include <stdlib.h>\n \n #include <windows.h>\n+#include <winternl.h>\n \n #define MAXPATHLEN 1024\n \n@@ -1014,20 +1015,28 @@ __gnat_terminate_pid (int pid)\n    the Win32 API instead of the C one. */\n \n int\n-__gnat_tty_waitpid (struct TTY_Process* p)\n+__gnat_tty_waitpid (struct TTY_Process* p, int blocking)\n {\n   DWORD exitcode;\n-  DWORD res;\n-  HANDLE proc_hand = p->procinfo.hProcess;\n+  HANDLE hprocess = p->procinfo.hProcess;\n \n-  res = WaitForSingleObject (proc_hand, 0);\n-  GetExitCodeProcess (proc_hand, &exitcode);\n+  if (blocking) {\n+     /* Wait is needed on Windows only in blocking mode. */\n+     WaitForSingleObject (hprocess, 0);\n+  }\n \n-  CloseHandle (p->procinfo.hThread);\n-  CloseHandle (p->procinfo.hProcess);\n+  GetExitCodeProcess (hprocess, &exitcode);\n \n-  /* No need to close the handles: they were closed on the ada side */\n+  if (exitcode == STILL_ACTIVE) {\n+     /* If process is still active return -1. */\n+     exitcode = -1;\n+  } else {\n+     /* Process is dead, so handle to process and main thread can be closed. */\n+     CloseHandle (p->procinfo.hThread);\n+     CloseHandle (hprocess);\n+  }\n \n+  /* No need to close the handles: they were closed on the ada side */\n   return (int) exitcode;\n }\n \n@@ -1556,11 +1565,21 @@ __gnat_terminate_pid (int pid)\n  *   exit status of the child process\n  */\n int\n-__gnat_tty_waitpid (pty_desc *desc)\n+__gnat_tty_waitpid (pty_desc *desc, int blocking)\n {\n-  int status = 0;\n-  waitpid (desc->child_pid, &status, 0);\n-  return WEXITSTATUS (status);\n+  int status = -1;\n+  int options = 0;\n+\n+  if (blocking) {\n+     options = 0;\n+  } else {\n+     options = WNOHANG;\n+  }\n+  waitpid (desc->child_pid, &status, options);\n+  if WIFEXITED (status) {\n+     status = WEXITSTATUS (status);\n+  }\n+  return status;\n }\n \n /* __gnat_tty_supported - Are tty supported ?"}]}