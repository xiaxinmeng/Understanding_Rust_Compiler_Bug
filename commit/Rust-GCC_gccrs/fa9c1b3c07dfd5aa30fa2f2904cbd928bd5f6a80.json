{"sha": "fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5YzFiM2MwN2RmZDVhYTMwZmEyZjI5MDRjYmQ5MjhiZDVmNmE4MA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-03-13T12:56:00Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-03-13T12:56:00Z"}, "message": "[ARC] Add code density instructions.\n\ngcc/\n2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_output_addsi): Emit code density adds.\n\t* config/arc/arc.md (cpu_facility): Add cd variant.\n\t(*movqi_insn): Add code density variant.\n\t(*movhi_insn): Likewise.\n\t(*movqi_insn): Likewise.\n\t(*addsi3_mixed): Likewise.\n\t(subsi3_insn): Likewise.\n\nFrom-SVN: r246089", "tree": {"sha": "433634962d4dc120a8bcef7cd443bc0107318b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433634962d4dc120a8bcef7cd443bc0107318b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27ffcc3602e2c5f47130efcb6d4ca0df7a5ea587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ffcc3602e2c5f47130efcb6d4ca0df7a5ea587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ffcc3602e2c5f47130efcb6d4ca0df7a5ea587"}], "stats": {"total": 151, "additions": 94, "deletions": 57}, "files": [{"sha": "6fdef52944db91e0aaecb8d36a4c87c5c3851afb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "patch": "@@ -1,3 +1,13 @@\n+2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_output_addsi): Emit code density adds.\n+\t* config/arc/arc.md (cpu_facility): Add cd variant.\n+\t(*movqi_insn): Add code density variant.\n+\t(*movhi_insn): Likewise.\n+\t(*movqi_insn): Likewise.\n+\t(*addsi3_mixed): Likewise.\n+\t(subsi3_insn): Likewise.\n+\n 2017-03-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (movsi_cond_exec): Update constraint."}, {"sha": "5826c40ca7f1558d104c7a748ee0bf3499366637", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "patch": "@@ -7336,6 +7336,17 @@ arc_output_addsi (rtx *operands, bool cond_p, bool output_p)\n \t  || (REGNO (operands[0]) == STACK_POINTER_REGNUM\n \t      && match && !(neg_intval & ~124)))\n \tADDSI_OUTPUT1 (\"sub%? %0,%1,%n2\");\n+\n+      if (REG_P(operands[0]) && REG_P(operands[1])\n+\t  && (REGNO(operands[0]) <= 31) && (REGNO(operands[0]) == REGNO(operands[1]))\n+\t  && CONST_INT_P (operands[2]) && ( (intval>= -1) && (intval <= 6)))\n+\tADDSI_OUTPUT1 (\"add%? %0,%1,%2\");\n+\n+      if (TARGET_CODE_DENSITY && REG_P(operands[0]) && REG_P(operands[1])\n+\t  && ((REGNO(operands[0]) == 0) || (REGNO(operands[0]) == 1))\n+\t  && satisfies_constraint_Rcq (operands[1])\n+\t  && satisfies_constraint_L (operands[2]))\n+\tADDSI_OUTPUT1 (\"add%? %0,%1,%2 ;3\");\n     }\n \n   /* Now try to emit a 32 bit insn without long immediate.  */"}, {"sha": "3e715b5c52d3deba628abf3d44c02560e5aae577", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 73, "deletions": 57, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=fa9c1b3c07dfd5aa30fa2f2904cbd928bd5f6a80", "patch": "@@ -261,7 +261,7 @@\n \t\t     - get_attr_length (insn)\")))\n \n ; for ARCv2 we need to disable/enable different instruction alternatives\n-(define_attr \"cpu_facility\" \"std,av1,av2,fpx\"\n+(define_attr \"cpu_facility\" \"std,av1,av2,fpx,cd\"\n   (const_string \"std\"))\n \n ; We should consider all the instructions enabled until otherwise\n@@ -277,6 +277,11 @@\n \t (and (eq_attr \"cpu_facility\" \"fpx\")\n \t      (match_test \"TARGET_FP_DP_AX\"))\n \t (const_string \"no\")\n+\n+\t (and (eq_attr \"cpu_facility\" \"cd\")\n+\t      (not (and (match_test \"TARGET_V2\")\n+\t\t\t(match_test \"TARGET_CODE_DENSITY\"))))\n+\t (const_string \"no\")\n \t ]\n \t(const_string \"yes\")))\n \n@@ -611,15 +616,17 @@\n ; The iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n (define_insn \"*movqi_insn\"\n-  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,   h, w,w,???w, w,Rcq,  S,!*x,  r,r, Ucm,m,???m\")\n-\t(match_operand:QI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,hCm1,cL,I,?Rac,?i,  T,Rcq,Usd,Ucm,m,?Rac,c,?Rac\"))]\n+  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,h, w,Rcq,  S,!*x,  r,r, Ucm,m,???m,Usc\")\n+\t(match_operand:QI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,i,?i,  T,Rcq,Usd,Ucm,m,?Rac,c,?Rac,Cm3\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n    mov%? %0,%1%&\n    mov%? %0,%1%&\n    mov%? %0,%1%&\n    mov%? %0,%1%&\n+   mov%? %0,%1%&\n+   mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%1\n@@ -631,11 +638,12 @@\n    ldb%U1%V1 %0,%1\n    xstb%U0 %1,%0\n    stb%U0%V0 %1,%0\n+   stb%U0%V0 %1,%0\n    stb%U0%V0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,load,store,load,load,load,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,false,false,false,false,true,true,true,false,false,false,false,false\")\n-   (set_attr \"predicable\" \"yes,no,yes,no,yes,no,yes,yes,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,av2,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,move,load,store,load,load,load,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,maybe_limm,false,true,true,true,false,false,false,false,false,false\")\n+   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,yes,yes,yes,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"move_dest_operand\" \"\")\n@@ -644,8 +652,8 @@\n   \"if (prepare_move_operands (operands, HImode)) DONE;\")\n \n (define_insn \"*movhi_insn\"\n-  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,   h, w,w,???w,Rcq#q, w,Rcq,  S,  r,r, Ucm,m,???m,VUsc,VUsc\")\n-\t(match_operand:HI 1 \"move_src_operand\" \"   cL,   cP,Rcq#q,hCm1,cL,I,?Rac,   ?i,?i,  T,Rcq,Ucm,m,?Rac,c,?Rac, Cm3,i\"))]\n+  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,Rcq#q,h, w,Rcq,  S,  r,r, Ucm,m,???m,VUsc,VUsc\")\n+\t(match_operand:HI 1 \"move_src_operand\" \"   cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,    i,i,?i,  T,Rcq,Ucm,m,?Rac,c,?Rac, Cm3,i\"))]\n   \"register_operand (operands[0], HImode)\n    || register_operand (operands[1], HImode)\n    || (CONSTANT_P (operands[1])\n@@ -658,11 +666,13 @@\n    mov%? %0,%1%&\n    mov%? %0,%1%&\n    mov%? %0,%1%&\n+   mov%? %0,%1%&\n    mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%1\n    mov%? %0,%S1%&\n    mov%? %0,%S1\n+   mov%? %0,%S1\n    ld%_%? %0,%1%&\n    st%_%? %1,%0%&\n    xld%_%U1 %0,%1\n@@ -672,10 +682,10 @@\n    st%_%U0%V0 %1,%0\n    st%_%U0%V0 %S1,%0\n    st%_%U0%V0 %S1,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,load,store,load,load,store,store,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,false,false,false,maybe_limm,false,true,true,false,false,false,false,false,false,false\")\n-   (set_attr \"predicable\" \"yes,no,yes,no,yes,no,yes,yes,yes,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,av2,*,*,*,*,*,*,*,*,*,*,*,*,av2,*\")])\n+  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,move,move,load,store,load,load,store,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,maybe_limm,maybe_limm,false,true,true,false,false,false,false,false,false,false\")\n+   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,yes,yes,yes,yes,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,*\")])\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"move_dest_operand\" \"\")\n@@ -693,9 +703,9 @@\n ; the iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n ; N.B. operand 1 of alternative 7 expands into pcl,symbol@gotpc .\n-(define_insn \"*movsi_insn\"                      ;   0     1     2     3  4 5   6   7   8   9   10  11  12    13   14  15  16     17     18 19   20    21    22 23 24    25 26  27   28   29\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,    h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,VUsc,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,hPCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,?Cal,  T,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac, Cm3, C32\"))]\n+(define_insn \"*movsi_insn\"                      ;   0     1     2     3    4  5 6   7   8   9   10  11  12  13    14  15   16  17  18     19     20  21  22    23    24 25 26    27 28  29   30   31\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,  h,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,VUsc,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,Cal,?Cal,  T,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac, Cm3, C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n@@ -708,39 +718,42 @@\n    mov%? %0,%1%&\t;1\n    mov%? %0,%1%&\t;2\n    mov%? %0,%1%&\t;3\n-   mov%? %0,%1\t\t;4\n+   mov%? %0,%1%&\t;4\n    mov%? %0,%1\t\t;5\n-   ror %0,((%1*2+1) & 0x3f) ;6\n-   movl.cl %0,%1\t;7\n-   movh.cl %0,%L1>>16   ;8\n-   * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl %0,%1 >> %p1,%p1,8;8\\\" : \\\"movbi.cl %0,%L1 >> 24,24,8;9\\\";\n-   mov%? %0,%1\t\t;10\n-   add %0,%S1\t\t;11\n-   add %0,pcl,%1@pcl    ;12\n-   mov%? %0,%S1%&\t;13\n-   mov%? %0,%S1\t\t;14\n-   ld%? %0,%1%&\t\t;15\n-   st%? %1,%0%&\t\t;16\n+   mov%? %0,%1\t\t;6\n+   ror %0,((%1*2+1) & 0x3f) ;7\n+   movl.cl %0,%1\t;8\n+   movh.cl %0,%L1>>16   ;9\n+   * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl %0,%1 >> %p1,%p1,8;10\\\" : \\\"movbi.cl %0,%L1 >> 24,24,8;10\\\";\n+   mov%? %0,%1\t\t;11\n+   add %0,%S1\t\t;12\n+   add %0,pcl,%1@pcl    ;13\n+   mov%? %0,%S1%&\t;14\n+   mov%? %0,%S1\t\t;15\n+   mov%? %0,%S1\t\t;16\n+   ld%? %0,%1%&\t\t;17\n+   st%? %1,%0%&\t\t;18\n    * return arc_short_long (insn, \\\"push%? %1%&\\\", \\\"st%U0 %1,%0%&\\\");\n    * return arc_short_long (insn, \\\"pop%? %0%&\\\",  \\\"ld%U1 %0,%1%&\\\");\n-   ld%? %0,%1%&\t\t;19\n-   xld%U1 %0,%1\t\t;20\n    ld%? %0,%1%&\t\t;21\n-   ld%? %0,%1%&\t\t;22\n-   ld%U1%V1 %0,%1\t;23\n-   xst%U0 %1,%0\t\t;24\n-   st%? %1,%0%&\t\t;25\n-   st%U0%V0 %1,%0\t;26\n-   st%U0%V0 %1,%0\t;27\n+   xld%U1 %0,%1\t\t;22\n+   ld%? %0,%1%&\t\t;23\n+   ld%? %0,%1%&\t\t;24\n+   ld%U1%V1 %0,%1\t;25\n+   xst%U0 %1,%0\t\t;26\n+   st%? %1,%0%&\t\t;27\n    st%U0%V0 %1,%0\t;28\n-   st%U0%V0 %S1,%0\t;29\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,two_cycle_core,shift,shift,shift,move,binary,binary,move,move,load,store,store,load,load,load,load,load,load,store,store,store,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,false,false,false,false,false,maybe_limm,false,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false\")\n+   st%U0%V0 %1,%0\t;29\n+   st%U0%V0 %1,%0\t;30\n+   st%U0%V0 %S1,%0\t;31\"\n+   ;                         0     1     2     3    4    5      6       7           8     9    10     11    12    13           14        15    16   17    18    19   20    21    22   23  24    25    26    27    28    29   30   31\n+  [(set_attr \"type\"       \"move, move, move,move,move, move, move,two_cycle_core,shift,shift,shift, move,binary,binary,      move,      move, move,load,store,store,load,load, load,load,load, load,store,store,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,         false,false,false,false,false, false, false,maybe_limm,maybe_limm,false,true, true, true,true,true,false,true,true,false,false, true,false,false,false,false\")\n    ; Use default length for iscompact to allow for COND_EXEC.  But set length\n    ; of Crr to 4.\n-   (set_attr \"length\" \"*,*,*,*,4,4,4,4,4,4,4,8,8,*,8,*,*,*,*,*,4,*,4,*,*,*,*,*,4,8\")\n-   (set_attr \"predicable\" \"yes,no,yes,no,yes,no,no,no,no,no,yes,no,no,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n+   (set_attr \"length\" \"*,*,*,*,*,4,4,4,4,4,4,4,8,8,*,*,*,*,*,*,*,*,4,*,4,*,*,*,*,*,4,8\")\n+   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,no,no,no,no,yes,no,no,yes,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n \n ;; Sometimes generated by the epilogue code.  We don't want to\n ;; recognize these addresses in general, because the limm is costly,\n@@ -1798,10 +1811,10 @@\n ; We avoid letting this pattern use LP_COUNT as a register by specifying\n ;  register class 'W' instead of 'w'.\n (define_insn_and_split \"*addsi3_mixed\"\n-  ;;                                                      0       1   2   3   4   5   6    7     8    9     a   b c   d    e   f  10\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcq#q,Rcq,Rcw,Rcw,Rcq,Rcb,Rcq, Rcw, Rcqq,Rcqq,    W,  W,W,  W,Rcqq,Rcw,  W\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,      c,  0,  c,  0,  0,Rcb,   0, Rcqq,   0,    c,  c,0,  0,   0,  0,  c\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"cL,     0, cL,  0,CL2,Csp,CM4,cCca,RcqqK,  cO,cLCmL,Cca,I,C2a, Cal,Cal,Cal\")))]\n+  ;;                                                      0       1    2    3   4   5   6     7    8   9   a    b     c   d e   f  10  11  12\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcq#q,Rcq,   h,!*Rsd,Rcq,Rcb,Rcq, Rcqq,Rcqq,Rcw,Rcw, Rcw,    W,  W,W,  W,Rcqq,Rcw,  W\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,      c,   0, Rcqq,  0,  0,Rcb, Rcqq,   0,  0,  c,   0,    c,  c,0,  0,   0,  0,  c\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"cL,     0, Cm1,    L,CL2,Csp,CM4,RcqqK,  cO, cL,  0,cCca,cLCmL,Cca,I,C2a, Cal,Cal,Cal\")))]\n   \"\"\n {\n   arc_output_addsi (operands, arc_ccfsm_cond_exec_p (), true);\n@@ -1812,16 +1825,16 @@\n    && GET_CODE (PATTERN (insn)) != COND_EXEC\"\n   [(set (match_dup 0) (match_dup 3)) (set (match_dup 0) (match_dup 4))]\n   \"split_addsi (operands);\"\n-  [(set_attr \"type\" \"*,*,*,*,two_cycle_core,two_cycle_core,*,two_cycle_core,*,*,*,two_cycle_core,*,two_cycle_core,*,*,*\")\n+  [(set_attr \"type\" \"*,*,*,*,two_cycle_core,two_cycle_core,*,*,*,*,*,two_cycle_core,*,two_cycle_core,*,two_cycle_core,*,*,*\")\n    (set (attr \"iscompact\")\n \t(cond [(match_test \"~arc_output_addsi (operands, false, false) & 2\")\n \t       (const_string \"false\")\n \t       (match_operand 2 \"long_immediate_operand\" \"\")\n \t       (const_string \"maybe_limm\")]\n \t      (const_string \"maybe\")))\n-   (set_attr \"length\" \"*,*,4,4,*,*,*,4,*,*,4,4,4,4,*,8,8\")\n-   (set_attr \"predicable\" \"no,no,yes,yes,no,no,no,yes,no,no,no,no,no,no,no,yes,no\")\n-   (set_attr \"cond\" \"canuse,canuse,canuse,canuse,canuse,canuse,nocond,canuse,nocond,nocond,nocond,nocond,canuse_limm,canuse_limm,canuse,canuse,nocond\")\n+   (set_attr \"length\"     \"*,*,*,*,*,*,*,*,*,4,4,4,4,4,4,4,*,8,8\")\n+   (set_attr \"predicable\" \"no,no,no,no,no,no,no,no,no,yes,yes,yes,no,no,no,no,no,yes,no\")\n+   (set_attr \"cond\"       \"canuse,nocond,nocond,nocond,canuse,canuse,nocond,nocond,nocond,canuse,canuse,canuse,nocond,nocond,canuse_limm,canuse_limm,canuse,canuse,nocond\")\n ])\n \n ;; ARCv2 MPYW and MPYUW\n@@ -2766,12 +2779,13 @@\n ; the casesi expander might generate a sub of zero, so we have to recognize it.\n ; combine should make such an insn go away.\n (define_insn_and_split \"subsi3_insn\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcqq,Rcw,Rcw,w,w,w,  w,  w,  w\")\n-\t(minus:SI (match_operand:SI 1 \"nonmemory_operand\"   \"0,  0, cL,c,L,I,Cal,Cal,  c\")\n-\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"Rcqq, c,  0,c,c,0,  0,  c,Cal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=Rcqq,Rcqq,Rcw,Rcw,w,w,w,  w,  w,  w\")\n+\t(minus:SI (match_operand:SI 1 \"nonmemory_operand\"    \"0,Rcqq,  0, cL,c,L,I,Cal,Cal,  c\")\n+\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"Rcqq,Rcqq,  c,  0,c,c,0,  0,  c,Cal\")))]\n   \"register_operand (operands[1], SImode)\n    || register_operand (operands[2], SImode)\"\n   \"@\n+    sub%? %0,%1,%2%&\n     sub%? %0,%1,%2%&\n     sub%? %0,%1,%2\n     rsub%? %0,%2,%1\n@@ -2786,10 +2800,12 @@\n    && GET_CODE (PATTERN (insn)) != COND_EXEC\"\n   [(set (match_dup 0) (match_dup 3)) (set (match_dup 0) (match_dup 4))]\n   \"split_subsi (operands);\"\n-  [(set_attr \"iscompact\" \"maybe,false,false,false,false,false,false,false, false\")\n-  (set_attr \"length\" \"*,4,4,4,4,4,8,8,8\")\n-  (set_attr \"predicable\" \"yes,yes,yes,no,no,no,yes,no,no\")\n-  (set_attr \"cond\" \"canuse,canuse,canuse,nocond,nocond,canuse_limm,canuse,nocond,nocond\")])\n+  [(set_attr \"iscompact\" \"maybe,maybe,false,false,false,false,false,false,false, false\")\n+  (set_attr \"length\" \"*,*,4,4,4,4,4,8,8,8\")\n+  (set_attr \"predicable\" \"yes,no,yes,yes,no,no,no,yes,no,no\")\n+  (set_attr \"cond\" \"canuse,nocond,canuse,canuse,nocond,nocond,canuse_limm,canuse,nocond,nocond\")\n+  (set_attr \"cpu_facility\" \"*,cd,*,*,*,*,*,*,*,*\")\n+  ])\n \n (define_expand \"subdi3\"\n   [(parallel [(set (match_operand:DI 0 \"dest_reg_operand\" \"\")"}]}