{"sha": "99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "node_id": "C_kwDOANBUbNoAKDk5ZmE1ZDk0YzQxMzU1ZjgyZjlmODNkOThmYWVhZjU4YzZhYTg1ZmM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-06T05:06:56Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T03:03:51Z"}, "message": "RISC-V: Add vsext/vzext C/C++ intrinsic support\n\ngcc/ChangeLog:\n\n\t* config/riscv/iterators.md: Add sign_extend/zero_extend.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class ext): New class.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Add vsext/vzext support.\n\t* config/riscv/riscv-vector-builtins-functions.def (vsext): New macro\n\tdefine.\n\t(vzext): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct alu_def): Adjust\n\tfor vsext/vzext support.\n\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_WEXTI_OPS): New\n\tmacro define.\n\t(DEF_RVV_QEXTI_OPS): Ditto.\n\t(DEF_RVV_OEXTI_OPS): Ditto.\n\t(DEF_RVV_WEXTU_OPS): Ditto.\n\t(DEF_RVV_QEXTU_OPS): Ditto.\n\t(DEF_RVV_OEXTU_OPS): Ditto.\n\t(vint16mf4_t): Ditto.\n\t(vint16mf2_t): Ditto.\n\t(vint16m1_t): Ditto.\n\t(vint16m2_t): Ditto.\n\t(vint16m4_t): Ditto.\n\t(vint16m8_t): Ditto.\n\t(vint32mf2_t): Ditto.\n\t(vint32m1_t): Ditto.\n\t(vint32m2_t): Ditto.\n\t(vint32m4_t): Ditto.\n\t(vint32m8_t): Ditto.\n\t(vint64m1_t): Ditto.\n\t(vint64m2_t): Ditto.\n\t(vint64m4_t): Ditto.\n\t(vint64m8_t): Ditto.\n\t(vuint16mf4_t): Ditto.\n\t(vuint16mf2_t): Ditto.\n\t(vuint16m1_t): Ditto.\n\t(vuint16m2_t): Ditto.\n\t(vuint16m4_t): Ditto.\n\t(vuint16m8_t): Ditto.\n\t(vuint32mf2_t): Ditto.\n\t(vuint32m1_t): Ditto.\n\t(vuint32m2_t): Ditto.\n\t(vuint32m4_t): Ditto.\n\t(vuint32m8_t): Ditto.\n\t(vuint64m1_t): Ditto.\n\t(vuint64m2_t): Ditto.\n\t(vuint64m4_t): Ditto.\n\t(vuint64m8_t): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_WEXTI_OPS): Ditto.\n\t(DEF_RVV_QEXTI_OPS): Ditto.\n\t(DEF_RVV_OEXTI_OPS): Ditto.\n\t(DEF_RVV_WEXTU_OPS): Ditto.\n\t(DEF_RVV_QEXTU_OPS): Ditto.\n\t(DEF_RVV_OEXTU_OPS): Ditto.\n\t(rvv_arg_type_info::get_base_vector_type): Add sign_exted/zero_extend\n\tsupport.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Ditto.\n\t* config/riscv/vector-iterators.md (z): New attribute.\n\t* config/riscv/vector.md (@pred_<optab><mode>_vf2): New pattern.\n\t(@pred_<optab><mode>_vf4): Ditto.\n\t(@pred_<optab><mode>_vf8): Ditto.", "tree": {"sha": "fdda90deffc0d5340e9791e4d5a64bdb38b6c567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdda90deffc0d5340e9791e4d5a64bdb38b6c567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064a2d53a38fe55cafb0e00f5c7077e2bdf5a624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064a2d53a38fe55cafb0e00f5c7077e2bdf5a624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064a2d53a38fe55cafb0e00f5c7077e2bdf5a624"}], "stats": {"total": 415, "additions": 401, "deletions": 14}, "files": [{"sha": "f95dd405e12715f4bb02d5e7e07b96cd0187a332", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -207,7 +207,9 @@\n \t\t\t (ss_plus \"ssadd\")\n \t\t\t (us_plus \"usadd\")\n \t\t\t (ss_minus \"sssub\")\n-\t\t\t (us_minus \"ussub\")])\n+\t\t\t (us_minus \"ussub\")\n+\t\t\t (sign_extend \"extend\")\n+\t\t\t (zero_extend \"zero_extend\")])\n \n ;; <or_optab> code attributes\n (define_code_attr or_optab [(ior \"ior\")"}, {"sha": "1a9469a370a9f07142e0ae2dacb20afb23902ee9", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -197,6 +197,27 @@ class unop : public function_base\n   }\n };\n \n+/* Implements vsext.vf2/vsext.vf4/vsext.vf8/vzext.vf2/vzext.vf4/vzext.vf8.  */\n+template<rtx_code CODE>\n+class ext : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vf2:\n+\treturn e.use_exact_insn (code_for_pred_vf2 (CODE, e.vector_mode ()));\n+      case OP_TYPE_vf4:\n+\treturn e.use_exact_insn (code_for_pred_vf4 (CODE, e.vector_mode ()));\n+      case OP_TYPE_vf8:\n+\treturn e.use_exact_insn (code_for_pred_vf8 (CODE, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -241,6 +262,8 @@ static CONSTEXPR const binop<UDIV> vdivu_obj;\n static CONSTEXPR const binop<UMOD> vremu_obj;\n static CONSTEXPR const unop<NEG> vneg_obj;\n static CONSTEXPR const unop<NOT> vnot_obj;\n+static CONSTEXPR const ext<SIGN_EXTEND> vsext_obj;\n+static CONSTEXPR const ext<ZERO_EXTEND> vzext_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -295,6 +318,8 @@ BASE (vdivu)\n BASE (vremu)\n BASE (vneg)\n BASE (vnot)\n+BASE (vsext)\n+BASE (vzext)\n BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)"}, {"sha": "71629f36738c543d35a153af5665cf4188a9d145", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -68,6 +68,8 @@ extern const function_base *const vdivu;\n extern const function_base *const vremu;\n extern const function_base *const vneg;\n extern const function_base *const vnot;\n+extern const function_base *const vsext;\n+extern const function_base *const vzext;\n extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;"}, {"sha": "42514ed5a37b3845459495c2083185a5813ba52c", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -100,6 +100,12 @@ DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vneg, alu, full_preds, iu_v_ops)\n DEF_RVV_FUNCTION (vnot, alu, full_preds, iu_v_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf2_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf4_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf8_ops)\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf2_ops)\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf4_ops)\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf8_ops)\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)"}, {"sha": "e772a7ca475be2ac63d24f0fb0bb7babda43ce6e", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -192,14 +192,23 @@ struct alu_def : public build_base\n \t\t  bool overloaded_p) const override\n   {\n     b.append_base_name (instance.base_name);\n-    /* vop<sew>_v --> vop<sew>_v_<type>.  */\n-    if (!overloaded_p)\n+\n+    /* vop<sew> --> vop<sew>_<op>. According to rvv-intrinsic-doc, _vv/_vx/_v\n+       API doesn't have OP suffix in overloaded function name, otherwise, we\n+       always append OP suffix in function name. For example, vsext_vf2.  */\n+    if (instance.op_info->op == OP_TYPE_vv || instance.op_info->op == OP_TYPE_vx\n+\t|| instance.op_info->op == OP_TYPE_v)\n       {\n-\t/* vop<sew> --> vop<sew>_v.  */\n-\tb.append_name (operand_suffixes[instance.op_info->op]);\n-\t/* vop<sew>_v --> vop<sew>_v_<type>.  */\n-\tb.append_name (type_suffixes[instance.type.index].vector);\n+\tif (!overloaded_p)\n+\t  b.append_name (operand_suffixes[instance.op_info->op]);\n       }\n+    else\n+      b.append_name (operand_suffixes[instance.op_info->op]);\n+\n+    /* vop<sew>_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      b.append_name (type_suffixes[instance.type.index].vector);\n+\n     /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n        for vop_m C++ overloaded API.  */\n     if (overloaded_p && instance.pred == PRED_TYPE_m)"}, {"sha": "d3129b9f753b8707991e9497115e464075a58fb6", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -42,6 +42,42 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_B_OPS(TYPE, REQUIRE)\n #endif\n \n+/* Use \"DEF_RVV_WEXTI_OPS\" macro include Double-Widening signed integer which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WEXTI_OPS\n+#define DEF_RVV_WEXTI_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_QEXTI_OPS\" macro include Quad-Widening signed integer which will\n+   be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_QEXTI_OPS\n+#define DEF_RVV_QEXTI_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_OEXTI_OPS\" macro include Oct-Widening signed integer which will\n+   be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_OEXTI_OPS\n+#define DEF_RVV_OEXTI_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WEXTU_OPS\" macro include Double-Widening unsigned integer which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WEXTU_OPS\n+#define DEF_RVV_WEXTU_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_QEXTU_OPS\" macro include Quad-Widening unsigned integer which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_QEXTU_OPS\n+#define DEF_RVV_QEXTU_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_OEXTU_OPS\" macro include Oct-Widening unsigned integer which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_OEXTU_OPS\n+#define DEF_RVV_OEXTU_OPS(TYPE, REQUIRE)\n+#endif\n+\n DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n@@ -106,7 +142,75 @@ DEF_RVV_B_OPS (vbool4_t, 0)\n DEF_RVV_B_OPS (vbool2_t, 0)\n DEF_RVV_B_OPS (vbool1_t, 0)\n \n+DEF_RVV_WEXTI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint16mf2_t, 0)\n+DEF_RVV_WEXTI_OPS (vint16m1_t, 0)\n+DEF_RVV_WEXTI_OPS (vint16m2_t, 0)\n+DEF_RVV_WEXTI_OPS (vint16m4_t, 0)\n+DEF_RVV_WEXTI_OPS (vint16m8_t, 0)\n+DEF_RVV_WEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint32m1_t, 0)\n+DEF_RVV_WEXTI_OPS (vint32m2_t, 0)\n+DEF_RVV_WEXTI_OPS (vint32m4_t, 0)\n+DEF_RVV_WEXTI_OPS (vint32m8_t, 0)\n+DEF_RVV_WEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_QEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint32m1_t, 0)\n+DEF_RVV_QEXTI_OPS (vint32m2_t, 0)\n+DEF_RVV_QEXTI_OPS (vint32m4_t, 0)\n+DEF_RVV_QEXTI_OPS (vint32m8_t, 0)\n+DEF_RVV_QEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_OEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_WEXTU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint16mf2_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint16m1_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint16m2_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint16m4_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint16m8_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint32m1_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint32m2_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint32m4_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint32m8_t, 0)\n+DEF_RVV_WEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_QEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint32m1_t, 0)\n+DEF_RVV_QEXTU_OPS (vuint32m2_t, 0)\n+DEF_RVV_QEXTU_OPS (vuint32m4_t, 0)\n+DEF_RVV_QEXTU_OPS (vuint32m8_t, 0)\n+DEF_RVV_QEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+\n+DEF_RVV_OEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+\n #undef DEF_RVV_I_OPS\n #undef DEF_RVV_U_OPS\n #undef DEF_RVV_F_OPS\n #undef DEF_RVV_B_OPS\n+#undef DEF_RVV_WEXTI_OPS\n+#undef DEF_RVV_QEXTI_OPS\n+#undef DEF_RVV_OEXTI_OPS\n+#undef DEF_RVV_WEXTU_OPS\n+#undef DEF_RVV_QEXTU_OPS\n+#undef DEF_RVV_OEXTU_OPS"}, {"sha": "c79628e4a3b4b552c1130011c10cb3f48a657ea8", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 130, "deletions": 1, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -160,6 +160,48 @@ static const rvv_type_info b_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of Double-Widening signed integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wexti_ops[] = {\n+#define DEF_RVV_WEXTI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of Quad-Widening signed integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info qexti_ops[] = {\n+#define DEF_RVV_QEXTI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of Oct-Widening signed integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info oexti_ops[] = {\n+#define DEF_RVV_OEXTI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of Double-Widening unsigned integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wextu_ops[] = {\n+#define DEF_RVV_WEXTU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of Quad-Widening unsigned integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info qextu_ops[] = {\n+#define DEF_RVV_QEXTU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of Oct-Widening unsigned integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info oextu_ops[] = {\n+#define DEF_RVV_OEXTU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n static CONSTEXPR const rvv_arg_type_info rvv_arg_type_info_end\n   = rvv_arg_type_info (NUM_BASE_TYPES);\n \n@@ -269,6 +311,18 @@ static CONSTEXPR const rvv_arg_type_info vector_size_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_size),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (double demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vf2_args[]\n+  = {rvv_arg_type_info (RVV_BASE_double_trunc_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (quad demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vf4_args[]\n+  = {rvv_arg_type_info (RVV_BASE_quad_trunc_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (oct demote type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vf8_args[]\n+  = {rvv_arg_type_info (RVV_BASE_oct_trunc_vector), rvv_arg_type_info_end};\n+\n /* A list of none preds that will be registered for intrinsic functions.  */\n static CONSTEXPR const predication_type_index none_preds[]\n   = {PRED_TYPE_none, NUM_PRED_TYPES};\n@@ -481,6 +535,54 @@ static CONSTEXPR const rvv_op_info iu_v_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      v_args /* Args */};\n \n+/* A static operand information for vector_type func (double demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_vf2_ops\n+  = {wexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf2,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf2_args /* Args */};\n+\n+/* A static operand information for vector_type func (quad demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_vf4_ops\n+  = {qexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf4,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf4_args /* Args */};\n+\n+/* A static operand information for vector_type func (oct demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_vf8_ops\n+  = {oexti_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf8,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf8_args /* Args */};\n+\n+/* A static operand information for vector_type func (double demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vf2_ops\n+  = {wextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf2,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf2_args /* Args */};\n+\n+/* A static operand information for vector_type func (quad demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vf4_ops\n+  = {qextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf4,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf4_args /* Args */};\n+\n+/* A static operand information for vector_type func (oct demote type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vf8_ops\n+  = {oextu_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vf8,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vf8_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -763,7 +865,7 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n   if (!type)\n     return NUM_VECTOR_TYPES;\n   poly_int64 nunits = GET_MODE_NUNITS (TYPE_MODE (type));\n-  machine_mode inner_mode;\n+  machine_mode inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n   bool unsigned_p = TYPE_UNSIGNED (type);\n   switch (base_type)\n     {\n@@ -787,6 +889,30 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n       inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n       unsigned_p = true;\n       break;\n+    case RVV_BASE_double_trunc_vector:\n+      if (inner_mode == DImode)\n+\tinner_mode = SImode;\n+      else if (inner_mode == SImode)\n+\tinner_mode = HImode;\n+      else if (inner_mode == HImode)\n+\tinner_mode = QImode;\n+      else\n+\tgcc_unreachable ();\n+      break;\n+    case RVV_BASE_quad_trunc_vector:\n+      if (inner_mode == DImode)\n+\tinner_mode = HImode;\n+      else if (inner_mode == SImode)\n+\tinner_mode = QImode;\n+      else\n+\tgcc_unreachable ();\n+      break;\n+    case RVV_BASE_oct_trunc_vector:\n+      if (inner_mode == DImode)\n+\tinner_mode = QImode;\n+      else\n+\tgcc_unreachable ();\n+      break;\n     default:\n       return NUM_VECTOR_TYPES;\n     }\n@@ -851,6 +977,9 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_uint32_index:\n     case RVV_BASE_uint64_index:\n     case RVV_BASE_shift_vector:\n+    case RVV_BASE_double_trunc_vector:\n+    case RVV_BASE_quad_trunc_vector:\n+    case RVV_BASE_oct_trunc_vector:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type ("}, {"sha": "f14b6a55ec23cc5e1fd8887335c06c616629f517", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -152,6 +152,9 @@ enum rvv_base_type\n   RVV_BASE_uint32_index,\n   RVV_BASE_uint64_index,\n   RVV_BASE_shift_vector,\n+  RVV_BASE_double_trunc_vector,\n+  RVV_BASE_quad_trunc_vector,\n+  RVV_BASE_oct_trunc_vector,\n   NUM_BASE_TYPES\n };\n "}, {"sha": "6528e5711a46e857250b654de40e54a8dcddb274", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -164,6 +164,24 @@\n   (VNx64BI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VWEXTI [\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VQEXTI [\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VOEXTI [\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_attr VM [\n   (VNx1QI \"VNx1BI\") (VNx2QI \"VNx2BI\") (VNx4QI \"VNx4BI\") (VNx8QI \"VNx8BI\") (VNx16QI \"VNx16BI\") (VNx32QI \"VNx32BI\") (VNx64QI \"VNx64BI\")\n   (VNx1HI \"VNx1BI\") (VNx2HI \"VNx2BI\") (VNx4HI \"VNx4BI\") (VNx8HI \"VNx8BI\") (VNx16HI \"VNx16BI\") (VNx32HI \"VNx32BI\")\n@@ -199,6 +217,25 @@\n   (VNx1DF \"64\") (VNx2DF \"64\") (VNx4DF \"64\") (VNx8DF \"64\")\n ])\n \n+(define_mode_attr V_DOUBLE_TRUNC [\n+  (VNx1HI \"VNx1QI\") (VNx2HI \"VNx2QI\")  (VNx4HI \"VNx4QI\")  (VNx8HI \"VNx8QI\")  \n+  (VNx16HI \"VNx16QI\") (VNx32HI \"VNx32QI\")\n+  (VNx1SI \"VNx1HI\") (VNx2SI \"VNx2HI\") (VNx4SI \"VNx4HI\") (VNx8SI \"VNx8HI\") \n+  (VNx16SI \"VNx16HI\")\n+  (VNx1DI \"VNx1SI\") (VNx2DI \"VNx2SI\") (VNx4DI \"VNx4SI\") (VNx8DI \"VNx8SI\")\n+])\n+\n+(define_mode_attr V_QUAD_TRUNC [\n+  (VNx1SI \"VNx1QI\") (VNx2SI \"VNx2QI\") (VNx4SI \"VNx4QI\") (VNx8SI \"VNx8QI\") \n+  (VNx16SI \"VNx16QI\")\n+  (VNx1DI \"VNx1HI\") (VNx2DI \"VNx2HI\")\n+  (VNx4DI \"VNx4HI\") (VNx8DI \"VNx8HI\")\n+])\n+\n+(define_mode_attr V_OCT_TRUNC [\n+  (VNx1DI \"VNx1QI\") (VNx2DI \"VNx2QI\") (VNx4DI \"VNx4QI\") (VNx8DI \"VNx8QI\")\n+])\n+\n (define_int_iterator ORDER [UNSPEC_ORDERED UNSPEC_UNORDERED])\n \n (define_int_attr order [\n@@ -415,3 +452,5 @@\n \t\t\t      (umin \"%3,%4\")\n \t\t\t      (umax \"%3,%4\")\n \t\t\t      (mult \"%3,%4\")])\n+\n+(define_code_attr sz [(sign_extend \"s\") (zero_extend \"z\")])"}, {"sha": "8bafbdc870482856c77e3889a39f3cfb631ff913", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa5d94c41355f82f9f83d98faeaf58c6aa85fc/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=99fa5d94c41355f82f9f83d98faeaf58c6aa85fc", "patch": "@@ -142,7 +142,7 @@\n ;; It is valid for instruction that require sew/lmul ratio.\n (define_attr \"ratio\" \"\"\n   (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n-\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,vext\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -193,13 +193,14 @@\n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,\\\n-\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu\")\n+\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The index of operand[] to get the avl op.\n (define_attr \"vl_op_idx\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts,vstux,vstox\")\n+  (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts,vstux,\\\n+\t\t\t  vstox,vext\")\n \t   (const_int 4)\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -215,7 +216,7 @@\n \n ;; The tail policy op value.\n (define_attr \"ta\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov\")\n+  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vext\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[5])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -231,7 +232,7 @@\n \n ;; The mask policy op value.\n (define_attr \"ma\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde\")\n+  (cond [(eq_attr \"type\" \"vlde,vext\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[6])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -247,7 +248,7 @@\n \n ;; The avl type value.\n (define_attr \"avl_type\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov\")\n+  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext\")\n \t   (symbol_ref \"INTVAL (operands[7])\")\n \t (eq_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n@@ -1803,3 +1804,70 @@\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ta(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated integer widening operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 11.3 Vector Integer Extension\n+;; -------------------------------------------------------------------------------\n+\n+;; Vector Double-Widening Sign-extend and Zero-extend.\n+(define_insn \"@pred_<optab><mode>_vf2\"\n+  [(set (match_operand:VWEXTI 0 \"register_operand\"            \"=&vr\")\n+\t(if_then_else:VWEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"         \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"            \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"                \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"                \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_extend:VWEXTI\n+\t    (match_operand:<V_DOUBLE_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VWEXTI 2 \"vector_merge_operand\"         \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sz>ext.vf2\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vext\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Vector Quad-Widening Sign-extend and Zero-extend.\n+(define_insn \"@pred_<optab><mode>_vf4\"\n+  [(set (match_operand:VQEXTI 0 \"register_operand\"          \"=&vr\")\n+\t(if_then_else:VQEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"       \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"          \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"              \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"              \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"              \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_extend:VQEXTI\n+\t    (match_operand:<V_QUAD_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VQEXTI 2 \"vector_merge_operand\"       \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sz>ext.vf4\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vext\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Vector Oct-Widening Sign-extend and Zero-extend.\n+(define_insn \"@pred_<optab><mode>_vf8\"\n+  [(set (match_operand:VOEXTI 0 \"register_operand\"         \"=&vr\")\n+\t(if_then_else:VOEXTI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_extend:VOEXTI\n+\t    (match_operand:<V_OCT_TRUNC> 3 \"register_operand\" \"   vr\"))\n+\t  (match_operand:VOEXTI 2 \"vector_merge_operand\"      \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<sz>ext.vf8\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vext\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}