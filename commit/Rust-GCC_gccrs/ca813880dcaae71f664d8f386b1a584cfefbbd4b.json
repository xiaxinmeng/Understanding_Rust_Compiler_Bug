{"sha": "ca813880dcaae71f664d8f386b1a584cfefbbd4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4MTM4ODBkY2FhZTcxZjY2NGQ4ZjM4NmIxYTU4NGNmZWZiYmQ0Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-10T05:01:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-11T11:09:50Z"}, "message": "Support Intel AVX VNNI\n\n2020-10-13  Hongtao Liu  <hongtao.liu@intel.com>\n\t    Hongyu Wang  <hongyu.wang@intel.com>\n\ngcc/\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect AVXVNNI.\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA2_AVXVNNI_SET,\n\tOPTION_MASK_ISA2_AVXVNNI_UNSET): New.\n\t(OPTION_MASK_ISA2_AVX2_UNSET): Add AVXVNNI.\n\t(ix86_hanlde_option): Handle -mavxvnni, unset avxvnni when\n\tavx2 is disabled.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_AVXVNNI.\n\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n\tfor avxvnni.\n\t* config.gcc: Add avxvnniintrin.h.\n\t* config/i386/avx512vnnivlintrin.h: Reimplement 128/256 bit non-mask\n\tintrinsics with macros to support unified interface.\n\t* config/i386/avxvnniintrin.h: New header file.\n\t* config/i386/cpuid.h (bit_AVXVNNI): New.\n\t* config/i386/i386-builtins.c (def_builtin): Handle AVXVNNI mask\n\tfor unified builtin.\n\t* config/i386/i386-builtin.def (BDESC): Adjust AVX512VNNI\n\tbuiltins for AVXVNNI.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVXVNNI__.\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Handle bisa\n\tfor AVXVNNI to support unified intrinsic name, since there is no\n\tdependency between AVX512VNNI and AVXVNNI.\n\t* config/i386/i386-options.c (isa2_opts): Add -mavxvnni.\n\t(ix86_valid_target_attribute_inner_p): Handle avxnnni.\n\t(ix86_option_override_internal): Ditto.\n\t* config/i386/i386.h (TARGET_AVXVNNI, TARGET_AVXVNNI_P,\n\tTARGET_AVXVNNI_P, PTA_AVXVNNI): New.\n\t(PTA_SAPPHIRERAPIDS): Add AVX_VNNI.\n\t(PTA_ALDERLAKE): Likewise.\n\t* config/i386/i386.md (\"isa\"): Add avxvnni, avx512vnnivl.\n\t(\"enabled\"): Adjust for avxvnni and avx512vnnivl.\n\t* config/i386/i386.opt: Add option -mavxvnni.\n\t* config/i386/immintrin.h: Include avxvnniintrin.h.\n\t* config/i386/sse.md (vpdpbusd_<mode>): Adjust for AVXVNNI.\n\t(vpdpbusds_<mode>): Likewise.\n\t(vpdpwssd_<mode>): Likewise.\n\t(vpdpwssds_<mode>): Likewise.\n\t(vpdpbusd_v16si): New.\n\t(vpdpbusds_v16si): Likewise.\n\t(vpdpwssd_v16si): Likewise.\n\t(vpdpwssds_v16si): Likewise.\n\t* doc/invoke.texi: Document -mavxvnni.\n\t* doc/extend.texi: Document avxvnni.\n\t* doc/sourcebuild.texi: Document target avxvnni.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/avx512vl-vnni-1.c: Rename..\n\t* gcc.target/i386/avx512vl-vnni-1a.c: To This.\n\t* gcc.target/i386/avx512vl-vnni-1b.c: New test.\n\t* gcc.target/i386/avx512vl-vnni-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vnni-3.c: Ditto.\n\t* gcc.target/i386/avx-vnni-1.c: Ditto.\n\t* gcc.target/i386/avx-vnni-2.c: Ditto.\n\t* gcc.target/i386/avx-vnni-3.c: Ditto.\n\t* gcc.target/i386/avx-vnni-4.c: Ditto.\n\t* gcc.target/i386/avx-vnni-5.c: Ditto.\n\t* gcc.target/i386/avx-vnni-6.c: Ditto.\n\t* gcc.target/i386/avx-vpdpbusd-2.c: Ditto.\n\t* gcc.target/i386/avx-vpdpbusds-2.c: Ditto.\n\t* gcc.target/i386/avx-vpdpwssd-2.c: Ditto.\n\t* gcc.target/i386/avx-vpdpwssds-2.c: Ditto.\n\t* gcc.target/i386/vnni_inline_error.c: Ditto.\n\t* gcc.target/i386/avx512vnnivl-builtin.c: Ditto.\n\t* gcc.target/i386/avxvnni-builtin.c: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-12.c: Add -mavxvnni.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* lib/target-supports.exp (check_effective_target_avxvnni):\n\tNew proc.", "tree": {"sha": "47ec102bf7a2cfecbf5c7c007640bd04244e3baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ec102bf7a2cfecbf5c7c007640bd04244e3baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca813880dcaae71f664d8f386b1a584cfefbbd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca813880dcaae71f664d8f386b1a584cfefbbd4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca813880dcaae71f664d8f386b1a584cfefbbd4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca813880dcaae71f664d8f386b1a584cfefbbd4b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb3e275ab0ddbe1413b7f18fc25249fdb46a275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb3e275ab0ddbe1413b7f18fc25249fdb46a275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb3e275ab0ddbe1413b7f18fc25249fdb46a275"}], "stats": {"total": 1072, "additions": 956, "deletions": 116}, "files": [{"sha": "41728a2fcebeb2c0971093ffbd78140fc4878c01", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -713,6 +713,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t    set_feature (FEATURE_AVX512BF16);\n \t  if (eax & bit_HRESET)\n \t    set_feature (FEATURE_HRESET);\n+\t  if (eax & bit_AVXVNNI)\n+\t    set_feature (FEATURE_AVXVNNI);\n \n \t}\n     }"}, {"sha": "8f809c1604cda6b37cf95533726d88e41a251e7c", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512VNNI_SET \\\n   (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA2_AVXVNNI_SET OPTION_MASK_ISA2_AVXVNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET \\\n   (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512BITALG_SET \\\n@@ -206,6 +207,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_XSAVEOPT_UNSET OPTION_MASK_ISA_XSAVEOPT\n #define OPTION_MASK_ISA_AVX2_UNSET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX512F_UNSET)\n+#define OPTION_MASK_ISA2_AVX2_UNSET \\\n+  (OPTION_MASK_ISA2_AVXVNNI_UNSET | OPTION_MASK_ISA2_AVX512F_UNSET)\n #define OPTION_MASK_ISA_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_AVX512CD_UNSET \\\n    | OPTION_MASK_ISA_AVX512PF_UNSET | OPTION_MASK_ISA_AVX512ER_UNSET \\\n@@ -228,6 +231,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVX5124VNNIW_UNSET OPTION_MASK_ISA2_AVX5124VNNIW\n #define OPTION_MASK_ISA_AVX512VBMI2_UNSET OPTION_MASK_ISA_AVX512VBMI2\n #define OPTION_MASK_ISA_AVX512VNNI_UNSET OPTION_MASK_ISA_AVX512VNNI\n+#define OPTION_MASK_ISA2_AVXVNNI_UNSET OPTION_MASK_ISA2_AVXVNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_AVX512BITALG_UNSET OPTION_MASK_ISA_AVX512BITALG\n #define OPTION_MASK_ISA2_AVX512BF16_UNSET OPTION_MASK_ISA2_AVX512BF16\n@@ -310,7 +314,6 @@ along with GCC; see the file COPYING3.  If not see\n    | OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n-#define OPTION_MASK_ISA2_AVX2_UNSET OPTION_MASK_ISA2_AVX512F_UNSET\n #define OPTION_MASK_ISA2_AVX_UNSET OPTION_MASK_ISA2_AVX2_UNSET\n #define OPTION_MASK_ISA2_SSE4_2_UNSET OPTION_MASK_ISA2_AVX_UNSET\n #define OPTION_MASK_ISA2_SSE4_1_UNSET OPTION_MASK_ISA2_SSE4_2_UNSET\n@@ -882,6 +885,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavxvnni:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVXVNNI_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVXVNNI_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVXVNNI_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVXVNNI_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_msgx:\n       if (value)\n \t{"}, {"sha": "af02be57812089d60f82dbc346df79e1961e200f", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -224,6 +224,7 @@ enum processor_features\n   FEATURE_KL,\n   FEATURE_AESKLE,\n   FEATURE_WIDEKL,\n+  FEATURE_AVXVNNI,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "c4fd0363da297cb3b2789911ad006e85a96e1128", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -168,4 +168,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"kl\", FEATURE_KL, P_NONE, \"-mkl\")\n   ISA_NAMES_TABLE_ENTRY(\"aeskle\", FEATURE_AESKLE, P_NONE, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"widekl\", FEATURE_WIDEKL, P_NONE, \"-mwidekl\")\n+  ISA_NAMES_TABLE_ENTRY(\"avxvnni\", FEATURE_AVXVNNI, P_NONE, \"-mavxvnni\")\n ISA_NAMES_TABLE_END"}, {"sha": "15318b20ce03461c98dbd44ece64024edd622ef1", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -414,7 +414,7 @@ i[34567]86-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h keylockerintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -451,7 +451,7 @@ x86_64-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h keylockerintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "3845b038c9ec205e0d90d04d4cbf0622a3d07169", "filename": "gcc/config/i386/avx512vnnivlintrin.h", "status": "modified", "additions": 32, "deletions": 56, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -34,13 +34,10 @@\n #define __DISABLE_AVX512VNNIVL__\n #endif /* __AVX512VNNIVL__ */\n \n-extern __inline __m256i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_dpbusd_epi32 (__m256i __A, __m256i __B, __m256i __C)\n-{\n-  return (__m256i) __builtin_ia32_vpdpbusd_v8si ((__v8si)__A, (__v8si) __B,\n-\t\t\t\t\t\t\t\t(__v8si) __C);\n-}\n+#define _mm256_dpbusd_epi32(A, B, C)\t\t\t\t\\\n+  ((__m256i) __builtin_ia32_vpdpbusd_v8si ((__v8si) (A),\t\\\n+\t\t\t\t\t   (__v8si) (B),\t\\\n+\t\t\t\t\t   (__v8si) (C)))\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -58,13 +55,10 @@ _mm256_maskz_dpbusd_epi32 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n \t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m128i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_dpbusd_epi32 (__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_vpdpbusd_v4si ((__v4si)__A, (__v4si) __B,\n-\t\t\t\t\t\t\t\t(__v4si) __C);\n-}\n+#define _mm_dpbusd_epi32(A, B, C)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vpdpbusd_v4si ((__v4si) (A),\t\\\n+\t\t\t\t\t   (__v4si) (B),\t\\\n+\t\t\t\t\t   (__v4si) (C)))\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -82,13 +76,10 @@ _mm_maskz_dpbusd_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n \t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m256i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_dpbusds_epi32 (__m256i __A, __m256i __B, __m256i __C)\n-{\n-  return (__m256i) __builtin_ia32_vpdpbusds_v8si ((__v8si)__A, (__v8si) __B,\n-\t\t\t\t\t\t\t\t(__v8si) __C);\n-}\n+#define _mm256_dpbusds_epi32(A, B, C)\t\t\t\t\\\n+  ((__m256i) __builtin_ia32_vpdpbusds_v8si ((__v8si) (A),\t\\\n+\t\t\t\t\t    (__v8si) (B),\t\\\n+\t\t\t\t\t    (__v8si) (C)))\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -107,13 +98,10 @@ _mm256_maskz_dpbusds_epi32 (__mmask8 __A, __m256i __B, __m256i __C,\n \t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m128i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_dpbusds_epi32 (__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_vpdpbusds_v4si ((__v4si)__A, (__v4si) __B,\n-\t\t\t\t\t\t\t\t(__v4si) __C);\n-}\n+#define _mm_dpbusds_epi32(A, B, C)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vpdpbusds_v4si ((__v4si) (A),\t\\\n+\t\t\t\t\t    (__v4si) (B),\t\\\n+\t\t\t\t\t    (__v4si) (C)))\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -131,13 +119,10 @@ _mm_maskz_dpbusds_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n \t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m256i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_dpwssd_epi32 (__m256i __A, __m256i __B, __m256i __C)\n-{\n-  return (__m256i) __builtin_ia32_vpdpwssd_v8si ((__v8si)__A, (__v8si) __B,\n-\t\t\t\t\t\t\t\t(__v8si) __C);\n-}\n+#define _mm256_dpwssd_epi32(A, B, C)\t\t\t\t\\\n+  ((__m256i) __builtin_ia32_vpdpwssd_v8si ((__v8si) (A),\t\\\n+\t\t\t\t\t   (__v8si) (B),\t\\\n+\t\t\t\t\t   (__v8si) (C)))\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -155,13 +140,10 @@ _mm256_maskz_dpwssd_epi32 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n \t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m128i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_dpwssd_epi32 (__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_vpdpwssd_v4si ((__v4si)__A, (__v4si) __B,\n-\t\t\t\t\t\t\t\t(__v4si) __C);\n-}\n+#define _mm_dpwssd_epi32(A, B, C)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vpdpwssd_v4si ((__v4si) (A),\t\\\n+\t\t\t\t\t   (__v4si) (B),\t\\\n+\t\t\t\t\t   (__v4si) (C)))\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -179,13 +161,10 @@ _mm_maskz_dpwssd_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n \t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m256i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_dpwssds_epi32 (__m256i __A, __m256i __B, __m256i __C)\n-{\n-  return (__m256i) __builtin_ia32_vpdpwssds_v8si ((__v8si)__A, (__v8si) __B,\n-\t\t\t\t\t\t\t\t(__v8si) __C);\n-}\n+#define _mm256_dpwssds_epi32(A, B, C)\t\t\t\t\\\n+  ((__m256i) __builtin_ia32_vpdpwssds_v8si ((__v8si) (A),\t\\\n+\t\t\t\t\t    (__v8si) (B),\t\\\n+\t\t\t\t\t    (__v8si) (C)))\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -204,13 +183,10 @@ _mm256_maskz_dpwssds_epi32 (__mmask8 __A, __m256i __B, __m256i __C,\n \t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n }\n \n-extern __inline __m128i\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_dpwssds_epi32 (__m128i __A, __m128i __B, __m128i __C)\n-{\n-  return (__m128i) __builtin_ia32_vpdpwssds_v4si ((__v4si)__A, (__v4si) __B,\n-\t\t\t\t\t\t\t\t(__v4si) __C);\n-}\n+#define _mm_dpwssds_epi32(A, B, C)\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_vpdpwssds_v4si ((__v4si) (A),\t\\\n+\t\t\t\t\t    (__v4si) (B),\t\\\n+\t\t\t\t\t    (__v4si) (C)))\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "de7e6a906e7c9902eed05d368241074fcb46fe34", "filename": "gcc/config/i386/avxvnniintrin.h", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Favxvnniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Favxvnniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxvnniintrin.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,113 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avxvnniintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVXVNNIINTRIN_H_INCLUDED\n+#define _AVXVNNIINTRIN_H_INCLUDED\n+\n+#if !defined(__AVXVNNI__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avxvnni\")\n+#define __DISABLE_AVXVNNIVL__\n+#endif /* __AVXVNNIVL__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbusd_avx_epi32(__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return   (__m256i) __builtin_ia32_vpdpbusd_v8si ((__v8si) __A,\n+\t\t\t\t\t\t   (__v8si) __B,\n+\t\t\t\t\t\t   (__v8si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbusd_avx_epi32(__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpbusd_v4si ((__v4si) __A,\n+\t\t\t\t\t\t (__v4si) __B,\n+\t\t\t\t\t\t (__v4si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbusds_avx_epi32(__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpbusds_v8si ((__v8si) __A,\n+\t\t\t\t\t\t  (__v8si) __B,\n+\t\t\t\t\t\t  (__v8si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbusds_avx_epi32(__m128i __A,__m128i __B,__m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpbusds_v4si ((__v4si) __A,\n+\t\t\t\t\t\t  (__v4si) __B,\n+\t\t\t\t\t\t  (__v4si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpwssd_avx_epi32(__m256i __A,__m256i __B,__m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpwssd_v8si ((__v8si) __A,\n+\t\t\t\t\t\t (__v8si) __B,\n+\t\t\t\t\t\t (__v8si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpwssd_avx_epi32(__m128i __A,__m128i __B,__m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpwssd_v4si ((__v4si) __A,\n+\t\t\t\t\t\t (__v4si) __B,\n+\t\t\t\t\t\t (__v4si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpwssds_avx_epi32(__m256i __A,__m256i __B,__m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpwssds_v8si ((__v8si) __A,\n+\t\t\t\t\t\t  (__v8si) __B,\n+\t\t\t\t\t\t  (__v8si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpwssds_avx_epi32(__m128i __A,__m128i __B,__m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpwssds_v4si ((__v4si) __A,\n+\t\t\t\t\t\t  (__v4si) __B,\n+\t\t\t\t\t\t  (__v4si) __C);\n+}\n+\n+#ifdef __DISABLE_AVXVNNIVL__\n+#undef __DISABLE_AVXVNNIVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVXVNNIVL__ */\n+#endif /* _AVXVNNIINTRIN_H_INCLUDED */"}, {"sha": "d2d42f71a63449067709efb895b4c67c154fb03b", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -25,6 +25,7 @@\n #define _CPUID_H_INCLUDED\n \n /* %eax */\n+#define bit_AVXVNNI\t(1 << 4)\n #define bit_AVX512BF16\t(1 << 5)\n #define bit_HRESET\t(1 << 22)\n "}, {"sha": "67d5f2efc7431b084b000ce8430f6526860a16e5", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -2626,45 +2626,45 @@ BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512B\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_vgf2p8mulb_v16qi, \"__builtin_ia32_vgf2p8mulb_v16qi\", IX86_BUILTIN_VGF2P8MULB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vgf2p8mulb_v16qi_mask, \"__builtin_ia32_vgf2p8mulb_v16qi_mask\", IX86_BUILTIN_VGF2P8MULB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n-/* VNNI */\n+/* AVX512_VNNI */\n \n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusd_v16si, \"__builtin_ia32_vpdpbusd_v16si\", IX86_BUILTIN_VPDPBUSDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusd_v16si_mask, \"__builtin_ia32_vpdpbusd_v16si_mask\", IX86_BUILTIN_VPDPBUSDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusd_v16si_maskz, \"__builtin_ia32_vpdpbusd_v16si_maskz\", IX86_BUILTIN_VPDPBUSDV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v8si, \"__builtin_ia32_vpdpbusd_v8si\", IX86_BUILTIN_VPDPBUSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpbusd_v8si, \"__builtin_ia32_vpdpbusd_v8si\", IX86_BUILTIN_VPDPBUSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v8si_mask, \"__builtin_ia32_vpdpbusd_v8si_mask\", IX86_BUILTIN_VPDPBUSDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v8si_maskz, \"__builtin_ia32_vpdpbusd_v8si_maskz\", IX86_BUILTIN_VPDPBUSDV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v4si, \"__builtin_ia32_vpdpbusd_v4si\", IX86_BUILTIN_VPDPBUSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpbusd_v4si, \"__builtin_ia32_vpdpbusd_v4si\", IX86_BUILTIN_VPDPBUSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v4si_mask, \"__builtin_ia32_vpdpbusd_v4si_mask\", IX86_BUILTIN_VPDPBUSDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusd_v4si_maskz, \"__builtin_ia32_vpdpbusd_v4si_maskz\", IX86_BUILTIN_VPDPBUSDV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n \n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusds_v16si, \"__builtin_ia32_vpdpbusds_v16si\", IX86_BUILTIN_VPDPBUSDSV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusds_v16si_mask, \"__builtin_ia32_vpdpbusds_v16si_mask\", IX86_BUILTIN_VPDPBUSDSV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpbusds_v16si_maskz, \"__builtin_ia32_vpdpbusds_v16si_maskz\", IX86_BUILTIN_VPDPBUSDSV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v8si, \"__builtin_ia32_vpdpbusds_v8si\", IX86_BUILTIN_VPDPBUSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpbusds_v8si, \"__builtin_ia32_vpdpbusds_v8si\", IX86_BUILTIN_VPDPBUSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v8si_mask, \"__builtin_ia32_vpdpbusds_v8si_mask\", IX86_BUILTIN_VPDPBUSDSV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v8si_maskz, \"__builtin_ia32_vpdpbusds_v8si_maskz\", IX86_BUILTIN_VPDPBUSDSV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v4si, \"__builtin_ia32_vpdpbusds_v4si\", IX86_BUILTIN_VPDPBUSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpbusds_v4si, \"__builtin_ia32_vpdpbusds_v4si\", IX86_BUILTIN_VPDPBUSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v4si_mask, \"__builtin_ia32_vpdpbusds_v4si_mask\", IX86_BUILTIN_VPDPBUSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpbusds_v4si_maskz, \"__builtin_ia32_vpdpbusds_v4si_maskz\", IX86_BUILTIN_VPDPBUSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n \n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssd_v16si, \"__builtin_ia32_vpdpwssd_v16si\", IX86_BUILTIN_VPDPWSSDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssd_v16si_mask, \"__builtin_ia32_vpdpwssd_v16si_mask\", IX86_BUILTIN_VPDPWSSDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssd_v16si_maskz, \"__builtin_ia32_vpdpwssd_v16si_maskz\", IX86_BUILTIN_VPDPWSSDV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v8si, \"__builtin_ia32_vpdpwssd_v8si\", IX86_BUILTIN_VPDPWSSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpwssd_v8si, \"__builtin_ia32_vpdpwssd_v8si\", IX86_BUILTIN_VPDPWSSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v8si_mask, \"__builtin_ia32_vpdpwssd_v8si_mask\", IX86_BUILTIN_VPDPWSSDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v8si_maskz, \"__builtin_ia32_vpdpwssd_v8si_maskz\", IX86_BUILTIN_VPDPWSSDV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v4si, \"__builtin_ia32_vpdpwssd_v4si\", IX86_BUILTIN_VPDPWSSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpwssd_v4si, \"__builtin_ia32_vpdpwssd_v4si\", IX86_BUILTIN_VPDPWSSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v4si_mask, \"__builtin_ia32_vpdpwssd_v4si_mask\", IX86_BUILTIN_VPDPWSSDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssd_v4si_maskz, \"__builtin_ia32_vpdpwssd_v4si_maskz\", IX86_BUILTIN_VPDPWSSDV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n \n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssds_v16si, \"__builtin_ia32_vpdpwssds_v16si\", IX86_BUILTIN_VPDPWSSDSV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssds_v16si_mask, \"__builtin_ia32_vpdpwssds_v16si_mask\", IX86_BUILTIN_VPDPWSSDSV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, 0, CODE_FOR_vpdpwssds_v16si_maskz, \"__builtin_ia32_vpdpwssds_v16si_maskz\", IX86_BUILTIN_VPDPWSSDSV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v8si, \"__builtin_ia32_vpdpwssds_v8si\", IX86_BUILTIN_VPDPWSSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpwssds_v8si, \"__builtin_ia32_vpdpwssds_v8si\", IX86_BUILTIN_VPDPWSSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v8si_mask, \"__builtin_ia32_vpdpwssds_v8si_mask\", IX86_BUILTIN_VPDPWSSDSV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v8si_maskz, \"__builtin_ia32_vpdpwssds_v8si_maskz\", IX86_BUILTIN_VPDPWSSDSV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v4si, \"__builtin_ia32_vpdpwssds_v4si\", IX86_BUILTIN_VPDPWSSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXVNNI, CODE_FOR_vpdpwssds_v4si, \"__builtin_ia32_vpdpwssds_v4si\", IX86_BUILTIN_VPDPWSSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v4si_mask, \"__builtin_ia32_vpdpwssds_v4si_mask\", IX86_BUILTIN_VPDPWSSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v4si_maskz, \"__builtin_ia32_vpdpwssds_v4si_maskz\", IX86_BUILTIN_VPDPWSSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n "}, {"sha": "d8ec1e5900a62e501d80be09bb56ce18ccba1854", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -274,6 +274,10 @@ def_builtin (HOST_WIDE_INT mask, HOST_WIDE_INT mask2,\n       if (((mask2 == 0 || (mask2 & ix86_isa_flags2) != 0)\n \t   && (mask == 0 || (mask & ix86_isa_flags) != 0))\n \t  || ((mask & OPTION_MASK_ISA_MMX) != 0 && TARGET_MMX_WITH_SSE)\n+\t  /* \"Unified\" builtin used by either AVXVNNI intrinsics or AVX512VNNIVL\n+\t     non-mask intrinsics should be defined whenever avxvnni\n+\t     or avx512vnni && avx512vl exist.  */\n+\t  || (mask2 == OPTION_MASK_ISA2_AVXVNNI)\n \t  || (lang_hooks.builtin_function\n \t      == lang_hooks.builtin_function_ext_scope))\n \t{"}, {"sha": "87b3a2bf143c8a542e852fa8f7d3b04b3980ef14", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -606,6 +606,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__KL__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_WIDEKL)\n     def_or_undef (parse_in, \"__WIDEKL__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AVXVNNI)\n+    def_or_undef (parse_in, \"__AVXVNNI__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "795320b4557d6fa1de3cb3f18f42be0abf5591b8", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -11059,6 +11059,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A\n      OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32\n      OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4\n+     (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL) or\n+       OPTION_MASK_ISA2_AVXVNNI\n      where for each such pair it is sufficient if either of the ISAs is\n      enabled, plus if it is ored with other options also those others.\n      OPTION_MASK_ISA_MMX in bisa is satisfied also if TARGET_MMX_WITH_SSE.  */\n@@ -11077,6 +11079,17 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       && (isa & (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4)) != 0)\n     isa |= (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4);\n \n+  if ((((bisa & (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL))\n+\t== (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL))\n+       || (bisa2 & OPTION_MASK_ISA2_AVXVNNI) != 0)\n+      && (((isa & (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL))\n+\t   == (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL))\n+\t  || (isa2 & OPTION_MASK_ISA2_AVXVNNI) != 0))\n+    {\n+      isa |= OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL;\n+      isa2 |= OPTION_MASK_ISA2_AVXVNNI;\n+    }\n+\n   if ((bisa & OPTION_MASK_ISA_MMX) && !TARGET_MMX && TARGET_MMX_WITH_SSE\n       /* __builtin_ia32_maskmovq requires MMX registers.  */\n       && fcode != IX86_BUILTIN_MASKMOVQ)"}, {"sha": "467bed82f47a36c4eb9f93fd8b2d6bc15cf552c6", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -216,7 +216,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-muintr\",\t\tOPTION_MASK_ISA2_UINTR },\n   { \"-mhreset\",\t\tOPTION_MASK_ISA2_HRESET },\n   { \"-mkl\",\t\tOPTION_MASK_ISA2_KL },\n-  { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL }\n+  { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL },\n+  { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1047,6 +1048,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"amx-int8\", OPT_mamx_int8),\n     IX86_ATTR_ISA (\"amx-bf16\", OPT_mamx_bf16),\n     IX86_ATTR_ISA (\"hreset\", OPT_mhreset),\n+    IX86_ATTR_ISA (\"avxvnni\",   OPT_mavxvnni),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -2304,6 +2306,10 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags2_explicit\n \t\t & OPTION_MASK_ISA2_AMX_BF16))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_BF16;\n+\tif (((processor_alias_table[i].flags & PTA_AVXVNNI) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA2_AVXVNNI))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVXVNNI;\n         if (((processor_alias_table[i].flags & PTA_MOVDIRI) != 0)\n             && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MOVDIRI))\n           opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVDIRI;"}, {"sha": "3be7551d6c31f2311c0a6b285e1820b7d704fb6b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -217,6 +217,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_KL_P(x) TARGET_ISA2_KL_P(x)\n #define TARGET_WIDEKL\tTARGET_ISA2_WIDEKL\n #define TARGET_WIDEKL_P(x) TARGET_ISA2_WIDEKL_P(x)\n+#define TARGET_AVXVNNI\tTARGET_ISA2_AVXVNNI\n+#define TARGET_AVXVNNI_P(x)\tTARGET_ISA2_AVXVNNI_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2493,6 +2495,7 @@ const wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n const wide_int_bitmask PTA_HRESET (0, HOST_WIDE_INT_1U << 23);\n const wide_int_bitmask PTA_KL (0, HOST_WIDE_INT_1U << 24);\n const wide_int_bitmask PTA_WIDEKL (0, HOST_WIDE_INT_1U << 25);\n+const wide_int_bitmask PTA_AVXVNNI (0, HOST_WIDE_INT_1U << 26);\n \n const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n@@ -2536,9 +2539,9 @@ const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n-  | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR;\n+  | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR | PTA_AVXVNNI;\n const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n-  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET | PTA_KL | PTA_WIDEKL;\n+  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET | PTA_KL | PTA_WIDEKL | PTA_AVXVNNI;\n const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n   | PTA_AVX512F | PTA_AVX512CD | PTA_PREFETCHWT1;\n const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;"}, {"sha": "80f1ccccf27a37bf461c72fe3cf7f8bd4462a46d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -818,7 +818,8 @@\n \t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,\n-\t\t    avx512vl,noavx512vl,x64_avx512dq,x64_avx512bw\"\n+\t\t    avx512vl,noavx512vl,x64_avx512dq,x64_avx512bw,\n+\t\t    avxvnni,avx512vnnivl\"\n   (const_string \"base\"))\n \n ;; Define instruction set of MMX instructions\n@@ -867,6 +868,8 @@\n \t (eq_attr \"isa\" \"noavx512dq\") (symbol_ref \"!TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"avx512vl\") (symbol_ref \"TARGET_AVX512VL\")\n \t (eq_attr \"isa\" \"noavx512vl\") (symbol_ref \"!TARGET_AVX512VL\")\n+\t (eq_attr \"isa\" \"avxvnni\") (symbol_ref \"TARGET_AVXVNNI\")\n+\t (eq_attr \"isa\" \"avx512vnnivl\") (symbol_ref \"TARGET_AVX512VNNI && TARGET_AVX512VL\")\n \n \t (eq_attr \"mmx_isa\" \"native\")\n \t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")"}, {"sha": "fac76e4a985ba3ca345c3adb72534dbbeec8d8c3", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1143,3 +1143,8 @@ Support KL built-in functions and code generation.\n mwidekl\n Target Report Mask(ISA2_WIDEKL) Var(ix86_isa_flags2) Save\n Support WIDEKL built-in functions and code generation.\n+\n+mavxvnni\n+Target Report Mask(ISA2_AVXVNNI) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n+AVXVNNI built-in functions and code generation."}, {"sha": "b78796783789b1f3198c3e53f5614fc1e8447f4f", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -42,6 +42,8 @@\n \n #include <avxintrin.h>\n \n+#include <avxvnniintrin.h>\n+\n #include <avx2intrin.h>\n \n #include <avx512fintrin.h>"}, {"sha": "8437ad27087a8ba5bdd50c75dcc1298a0180d270", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -22915,16 +22915,30 @@\n    [(set_attr (\"prefix\") (\"evex\"))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vpdpbusd_<mode>\"\n-  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI4_AVX512VL\n-\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+(define_insn \"vpdpbusd_v16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n+\t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_VPMADDUBSWACCD))]\n   \"TARGET_AVX512VNNI\"\n-  \"vpdpbusd\\t{%3, %2, %0|%0, %2, %3 }\"\n-   [(set_attr (\"prefix\") (\"evex\"))])\n+  \"vpdpbusd\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpdpbusd_<mode>\"\n+  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VI4_AVX2\n+\t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n+\t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n+\t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n+\t  UNSPEC_VPMADDUBSWACCD))]\n+  \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vpdpbusd\\t{%3, %2, %0|%0, %2, %3}\n+  vpdpbusd\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"vex,evex\"))\n+   (set_attr (\"isa\") (\"avxvnni,avx512vnnivl\"))])\n \n (define_insn \"vpdpbusd_<mode>_mask\"\n   [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n@@ -22969,17 +22983,30 @@\n   \"vpdpbusd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))])\n \n+(define_insn \"vpdpbusds_v16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n+\t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPMADDUBSWACCSSD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpbusds\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n \n (define_insn \"vpdpbusds_<mode>\"\n-  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI4_AVX512VL\n-\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VI4_AVX2\n+\t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n+\t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n+\t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n \t  UNSPEC_VPMADDUBSWACCSSD))]\n-  \"TARGET_AVX512VNNI\"\n-  \"vpdpbusds\\t{%3, %2, %0|%0, %2, %3 }\"\n-   [(set_attr (\"prefix\") (\"evex\"))])\n+  \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n+  \"@\n+   %{vex%} vpdpbusds\\t{%3, %2, %0|%0, %2, %3}\n+   vpdpbusds\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"vex,evex\"))\n+   (set_attr (\"isa\") (\"avxvnni,avx512vnnivl\"))])\n \n (define_insn \"vpdpbusds_<mode>_mask\"\n   [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n@@ -23024,17 +23051,30 @@\n   \"vpdpbusds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))])\n \n+(define_insn \"vpdpwssd_v16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n+\t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPMADDWDACCD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssd\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n \n (define_insn \"vpdpwssd_<mode>\"\n-  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI4_AVX512VL\n-\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VI4_AVX2\n+\t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n+\t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n+\t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n \t  UNSPEC_VPMADDWDACCD))]\n-  \"TARGET_AVX512VNNI\"\n-  \"vpdpwssd\\t{%3, %2, %0|%0, %2, %3 }\"\n-   [(set_attr (\"prefix\") (\"evex\"))])\n+  \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vpdpwssd\\t{%3, %2, %0|%0, %2, %3}\n+  vpdpwssd\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"vex,evex\"))\n+   (set_attr (\"isa\") (\"avxvnni,avx512vnnivl\"))])\n \n (define_insn \"vpdpwssd_<mode>_mask\"\n   [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n@@ -23079,17 +23119,30 @@\n   \"vpdpwssd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))])\n \n+(define_insn \"vpdpwssds_v16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n+\t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPMADDWDACCSSD))]\n+  \"TARGET_AVX512VNNI\"\n+  \"vpdpwssds\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n \n (define_insn \"vpdpwssds_<mode>\"\n-  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI4_AVX512VL\n-\t  [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(unspec:VI4_AVX2\n+\t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n+\t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n+\t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n \t  UNSPEC_VPMADDWDACCSSD))]\n-  \"TARGET_AVX512VNNI\"\n-  \"vpdpwssds\\t{%3, %2, %0|%0, %2, %3 }\"\n-   [(set_attr (\"prefix\") (\"evex\"))])\n+  \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vpdpwssds\\t{%3, %2, %0|%0, %2, %3}\n+  vpdpwssds\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr (\"prefix\") (\"vex,evex\"))\n+   (set_attr (\"isa\") (\"avxvnni,avx512vnnivl\"))])\n \n (define_insn \"vpdpwssds_<mode>_mask\"\n   [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")"}, {"sha": "420a14b66b065464af08c2dd41df8422e8c26b4a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -6750,6 +6750,11 @@ Enable/disable the generation of the KEYLOCKER instructions.\n @cindex @code{target(\"widekl\")} function attribute, x86\n Enable/disable the generation of the WIDEKL instructions.\n \n+@item avxvnni\n+@itemx no-avxvnni\n+@cindex @code{target(\"avxvnni\")} function attribute, x86\n+Enable/disable the generation of the AVXVNNI instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "18ca759c8be1bd108d59724c91c2797bba5c600e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1367,7 +1367,7 @@ See RS/6000 and PowerPC Options.\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n--mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset@gol\n+-mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -30409,6 +30409,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mavx512vnni\n @opindex mavx512vnni\n @need 200\n+@itemx -mavxvnni\n+@opindex mavxvnni\n+@need 200\n @itemx -mavx5124vnniw\n @opindex mavx5124vnniw\n @need 200\n@@ -30443,9 +30446,9 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n-UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL or CLDEMOTE extended\n-instruction sets. Each has a corresponding @option{-mno-} option to disable\n-use of these instructions.\n+UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI or CLDEMOTE\n+extended instruction sets. Each has a corresponding @option{-mno-} option to\n+disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "4822efe0a58400e9c12868e0c584ccd1a0709adf", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -2243,6 +2243,9 @@ Target supports compiling @code{avx2} instructions.\n @item avx2_runtime\n Target supports the execution of @code{avx2} instructions.\n \n+@item avxvnni\n+Target supports the execution of @code{avxvnni} instructions.\n+\n @item avx512f\n Target supports compiling @code{avx512f} instructions.\n "}, {"sha": "62b2132957a4455e1a3900bacc1e2f8f2be361b9", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "843aa2bdb2f63e9e3b07ed012ecbd06bfd550ff7", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "a22d12aa980380f121f3bdd66ec6df8d6fc80dc8", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-1.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxvnni -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void extern\n+avxvnni_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x = _mm256_dpbusds_epi32 (x, y, z);\n+  x_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+}"}, {"sha": "4ab6f0c8c1e7e51745b92025acdd9f13f61f08d0", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+__attribute__((target(\"avxvnni\")))\n+void\n+avxvnni_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x = _mm256_dpbusds_epi32 (x, y, z);\n+  x_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+}"}, {"sha": "fdea7f95808125379661281182ad4d854d5498dc", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-3.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+__attribute__ ((__gnu_inline__, __always_inline__, target(\"avxvnni\")))\n+inline int\n+foo (void) /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((target(\"avx512vnni,avx512vl\")))\n+int\n+bar (void)\n+{\n+  return foo (); /* { dg-message \"called from here\" } */\n+}"}, {"sha": "1ef3edc140eab4bf119800776a807fa14e3ede52", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-4.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+__attribute__ ((__gnu_inline__, __always_inline__, target(\"avx512vnni,avx512vl\")))\n+inline int\n+foo (void) /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((target(\"avxvnni\")))\n+int\n+bar (void)\n+{\n+  return foo (); /* { dg-message \"called from here\" } */\n+}"}, {"sha": "6556a323b1d7a25b538088fee1a74d4a8fbc9062", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-5.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavxvnni -mavx512vnni -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void\n+avxvnni_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x = _mm256_dpbusds_epi32 (x, y, z);\n+  x_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+}"}, {"sha": "2c4262788a786583112bfd350437a15d0d626f77", "filename": "gcc/testsuite/gcc.target/i386/avx-vnni-6.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vnni-6.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxvnni -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void extern\n+avxvnni_test (void)\n+{\n+  x = _mm256_dpbusd_avx_epi32 (x, y, z);\n+  x_ = _mm_dpbusd_avx_epi32 (x_, y_, z_);\n+  x = _mm256_dpbusds_avx_epi32 (x, y, z);\n+  x_ = _mm_dpbusds_avx_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssd_avx_epi32 (x, y, z);\n+  x_ = _mm_dpwssd_avx_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssds_avx_epi32 (x, y, z);\n+  x_ = _mm_dpwssds_avx_epi32 (x_, y_, z_);\n+}"}, {"sha": "d4b8d89710dbaf7835d3fba987e15fae5f784b09", "filename": "gcc/testsuite/gcc.target/i386/avx-vpdpbusd-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusd-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnni\" } */\n+/* { dg-require-effective-target avxvnni } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, unsigned char *s1, char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = ((unsigned short)(s1[i]) * (short)(s2[i]));\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long)dst[i] + tempres[i*4] + tempres[i*4 + 1] + tempres[i*4 + 2] + tempres[i*4 + 3];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src2_256;\n+  union256i_ub src1_256;\n+  int res_ref_256[8];\n+\n+  if (!__builtin_cpu_supports (\"avxvnni\"))\n+    return;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3*i + sign;\n+      src2_256.a[i] = sign*10*i*i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbusd_avx_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src2_128;\n+  union128i_ub src1_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3*i*i + sign;\n+      src2_128.a[i] = sign*10*i*i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbusd_avx_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "5041ffe98b5644557902a97c597548442c1262ff", "filename": "gcc/testsuite/gcc.target/i386/avx-vpdpbusds-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpbusds-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnni \" } */\n+/* { dg-require-effective-target avxvnni } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, unsigned char *s1, char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = ((unsigned short)(s1[i]) * (short)(s2[i]));\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long)dst[i] + tempres[i*4] + tempres[i*4 + 1] + tempres[i*4 + 2] + tempres[i*4 + 3];\n+    r[i] = test > 0x7FFFFFFF ? 0x7FFFFFFF : test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src2_256;\n+  union256i_ub src1_256;\n+  int res_ref_256[8];\n+\n+  if (!__builtin_cpu_supports (\"avxvnni\"))\n+    return;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3*i*i + sign;\n+      src2_256.a[i] = sign*10*i*i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbusds_avx_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src2_128;\n+  union128i_ub src1_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3*i*i + sign;\n+      src2_128.a[i] = sign*10*i*i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbusds_avx_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "2630c97a4dfa387dd35b084e49dc84a42664af4e", "filename": "gcc/testsuite/gcc.target/i386/avx-vpdpwssd-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssd-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnni\" } */\n+/* { dg-require-effective-target avxvnni } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, short *s1, short *s2, int size)\n+{\n+  short tempres[16];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = ((int)(s1[i]) * (int)(s2[i]));\n+  }\n+  for (int i = 0; i < size / 2; i++) {\n+    long long test = (long long)dst[i] + tempres[i*2] + tempres[i*2 + 1];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_w src1_256, src2_256;\n+  int res_ref_256[8];\n+  \n+  if (!__builtin_cpu_supports (\"avxvnni\"))\n+    return;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src1_256.a[i] = 1 + i;\n+      src2_256.a[i] = 2 + 2*i + i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 16);\n+  res_256.x = _mm256_dpwssd_avx_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_w src1_128, src2_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src1_128.a[i] = 1 + i;\n+      src2_128.a[i] = 2 + 2*i + i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 8);\n+  res_128.x = _mm_dpwssd_avx_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "bc4395a21f1a17a4d83a3adf602dab21a48403d4", "filename": "gcc/testsuite/gcc.target/i386/avx-vpdpwssds-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vpdpwssds-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnni\" } */\n+/* { dg-require-effective-target avxvnni } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, short *s1, short *s2, int size)\n+{\n+  short tempres[16];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = ((int)(s1[i]) * (int)(s2[i]));\n+  }\n+  for (int i = 0; i < size / 2; i++) {\n+    long long test = (long long)dst[i] + tempres[i*2] + tempres[i*2 + 1];\n+    r[i] = test > 0x7FFFFFFF ? 0x7FFFFFFF : test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_w src1_256, src2_256;\n+  int res_ref_256[8];\n+\n+  if (!__builtin_cpu_supports (\"avxvnni\"))\n+    return;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      src1_256.a[i] = 1 + i;\n+      src2_256.a[i] = 2 + 2*i + i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 16);\n+  res_256.x = _mm256_dpwssds_avx_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_w src1_128, src2_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      src1_128.a[i] = 1 + i;\n+      src2_128.a[i] = 2 + 2*i + i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 8);\n+  res_128.x = _mm_dpwssds_avx_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "e63bc196b0e673ee35be70ec0d7ad98ad4c6041f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1a.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1a.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "previous_filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1.c"}, {"sha": "067e631c89afc04a6c02c5f451fd4748f19123d1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1b.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1b.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vnni -mavx512bw -mavxvnni -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x = _mm256_mask_dpbusd_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpbusd_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpbusd_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpbusd_epi32 (m, x_, y_, z_);\n+\n+  x = _mm256_dpbusds_epi32 (x, y, z);\n+  x = _mm256_mask_dpbusds_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpbusds_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpbusds_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpbusds_epi32 (m, x_, y_, z_);\n+\n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x = _mm256_mask_dpwssd_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpwssd_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpwssd_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpwssd_epi32 (m, x_, y_, z_);\n+\n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x = _mm256_mask_dpwssds_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpwssds_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpwssds_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpwssds_epi32 (m, x_, y_, z_);\n+}"}, {"sha": "d4b46356d800d6dc3bcb651e7a7b83fb5fcf25a3", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-2.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+__attribute__((target(\"avx512vnni,avx512vl\")))\n+void\n+avxvnni_test (void)\n+{\n+  x = _mm256_dpbusd_epi32 (x, y, z);\n+  x_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  x = _mm256_dpbusds_epi32 (x, y, z);\n+  x_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x = _mm256_dpwssds_epi32 (x, y, z);\n+  x_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+}"}, {"sha": "15a95abe83a0cbe1fa3de1a41f47c0cd73f75ef1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-3.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-3.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavxvnni -mavx512vnni -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tvpdpwssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+\n+void\n+avxvnni_test (void)\n+{\n+  register __m256i a __asm (\"xmm16\");\n+  register __m128i a_ __asm (\"xmm26\");\n+  a = _mm256_dpbusd_epi32 (x, y, z);\n+  asm volatile (\"\" : \"+v\" (a));\n+  x = a;\n+  a_ = _mm_dpbusd_epi32 (x_, y_, z_);\n+  asm volatile (\"\" : \"+v\" (a_));\n+  x_ = a_;\n+  a = _mm256_dpbusds_epi32 (x, y, z);\n+  asm volatile (\"\" : \"+v\" (a));\n+  x = a;\n+  a_ = _mm_dpbusds_epi32 (x_, y_, z_);\n+  asm volatile (\"\" : \"+v\" (a_));\n+  x_ = a_;\n+  a = _mm256_dpwssd_epi32 (x, y, z);\n+  asm volatile (\"\" : \"+v\" (a));\n+  x = a;\n+  a_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  asm volatile (\"\" : \"+v\" (a_));\n+  x_ = a_;\n+  a = _mm256_dpwssds_epi32 (x, y, z);\n+  asm volatile (\"\" : \"+v\" (a));\n+  x = a;\n+  a_ = _mm_dpwssds_epi32 (x_, y_, z_);\n+  asm volatile (\"\" : \"+v\" (a_));\n+  x_ = a_;\n+}"}, {"sha": "97aaba0c3ef8390f84e6c39507ade24ab052244e", "filename": "gcc/testsuite/gcc.target/i386/avx512vnnivl-builtin.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vnnivl-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vnnivl-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vnnivl-builtin.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mno-avxvnni -mavx512vnni -mavx512vl\" } */\n+typedef int v8si __attribute__ ((vector_size (32)));\n+v8si\n+foo (v8si a, v8si b, v8si c)\n+{\n+  return __builtin_ia32_vpdpbusd_v8si (a, b, c);\n+}"}, {"sha": "893a62ae185125df7b7075c7a0c62f69793f6600", "filename": "gcc/testsuite/gcc.target/i386/avxvnni-builtin.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnni-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnni-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnni-builtin.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavxvnni -mno-avx512vnni\" } */\n+typedef int v8si __attribute__ ((vector_size (32)));\n+v8si\n+foo (v8si a, v8si b, v8si c)\n+{\n+  return __builtin_ia32_vpdpbusd_v8si (a, b, c);\n+}"}, {"sha": "395a21c86684bdeecf69f43baab29ad52813a9c1", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -78,6 +78,7 @@ extern void test_uintr (void)\t\t\t__attribute__((__target__(\"uintr\")));\n extern void test_hreset (void)\t\t\t__attribute__((__target__(\"hreset\")));\n extern void test_keylocker (void)\t\t__attribute__((__target__(\"kl\")));\n extern void test_widekl (void)\t\t\t__attribute__((__target__(\"widekl\")));\n+extern void test_avxvnni (void)\t\t\t__attribute__((__target__(\"avxvnni\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -157,6 +158,7 @@ extern void test_no_uintr (void)\t\t__attribute__((__target__(\"no-uintr\")));\n extern void test_no_hreset (void)\t\t__attribute__((__target__(\"no-hreset\")));\n extern void test_no_keylocker (void)\t\t__attribute__((__target__(\"no-kl\")));\n extern void test_no_widekl (void)\t\t__attribute__((__target__(\"no-widekl\")));\n+extern void test_no_avxvnni (void)\t\t__attribute__((__target__(\"no-avxvnni\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "375d4d1b4ded81c86a5a4be0caf16675e95b990f", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "7029771334bb986973c1031233b8d2aefa927757", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "4ce0ffffaf346a36f39d771aa57d440bc46f3fb1", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "6e8b6f3fa1b6e0172c97261cb53f983a3b82819a", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "7faa053ace8e7934452ffc45e6625a359230c6b4", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -708,6 +708,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n \n #include <x86intrin.h>"}, {"sha": "eaed98426042cf4a285d947a744a7433f55c9fee", "filename": "gcc/testsuite/gcc.target/i386/vnni_inline_error.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni_inline_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni_inline_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvnni_inline_error.c?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512vnni -mavx512vl -mno-popcnt\" } */\n+\n+inline int __attribute__ ((__gnu_inline__, __always_inline__, target(\"popcnt\")))\n+foo () /* { dg-error \"inlining failed in call to 'always_inline' .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+int bar()\n+{\n+  return foo (); /* { dg-message \"called from here\" } */\n+}"}, {"sha": "ceee78c26a9379f908659ae3d594bca104227d04", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca813880dcaae71f664d8f386b1a584cfefbbd4b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ca813880dcaae71f664d8f386b1a584cfefbbd4b", "patch": "@@ -8461,6 +8461,18 @@ proc check_effective_target_avx2 { } {\n     } \"-O0 -mavx2\" ]\n }\n \n+# Return 1 if avxvnni instructions can be compiled.\n+proc check_effective_target_avxvnni { } {\n+    return [check_no_compiler_messages avxvnni object {\n+\ttypedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\t__v8si\n+\t_mm256_dpbusd_epi32 (__v8si __A, __v8si __B, __v8si __C)\n+        {\n+\t   return __builtin_ia32_vpdpbusd_v8si (__A, __B, __C);\n+\t}\n+    } \"-mavxvnni\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}