{"sha": "06715e1cfb475a89b2890951008e70325bdd0ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3MTVlMWNmYjQ3NWE4OWIyODkwOTUxMDA4ZTcwMzI1YmRkMGNlNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-23T12:48:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-23T12:48:18Z"}, "message": "PR libstdc++/90165 constrain variant(T&&) constructor\n\nAlso refactor some constraints slightly to be more readable.\n\n\tPR libstdc++/90165\n\t* include/std/variant (variant::__not_self): New helper for the\n\tis_same_v<remove_cvref_t<T>, variant>==false constraints.\n\t(variant::__to_type_impl): Remove.\n\t(variant::__to_type): Add default argument to check pack size, instead\n\tof using __to_type_impl.\n\t(variant::__accepted_type): Add default argument using __not_self.\n\t(variant::__is_in_place_tag, variant::__not_in_place_tag): New helpers\n\tfor variant(T&&) constructor constraint.\n\t(variant::variant(T&&)): Use __not_in_place_tag in constraints.\n\tExtract __accepted_type into a named template parameter for reuse in\n\tother constraints and in the exception specification.\n\t(variant::variant(in_place_type_t<T>, Args&&...))\n\t(variant::variant(in_place_type_t<T>, initializer_list<U>, Args&&...))\n\t(variant::variant(in_place_index_t<T>, Args&&...))\n\t(variant::variant(in_place_index_t<T>, initializer_list<U>, Args&&...))\n\t(variant::operator=T&&)): Remove redundant && from trait arguments.\n\t* testsuite/20_util/variant/compile.cc: Check variant(T&&) constructor\n\tisn't used for in_place_type or in_place_index arguments.\n\nFrom-SVN: r270509", "tree": {"sha": "c0de0775fe9a41f20b60738dd6b7b1f4415ea0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0de0775fe9a41f20b60738dd6b7b1f4415ea0e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06715e1cfb475a89b2890951008e70325bdd0ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06715e1cfb475a89b2890951008e70325bdd0ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06715e1cfb475a89b2890951008e70325bdd0ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06715e1cfb475a89b2890951008e70325bdd0ce4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e8c3da7408bc0695511ee13f88d451c8adadd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e8c3da7408bc0695511ee13f88d451c8adadd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e8c3da7408bc0695511ee13f88d451c8adadd8"}], "stats": {"total": 91, "additions": 64, "deletions": 27}, "files": [{"sha": "1d0192b66dab21427450ec64f2ca4d84a1be6865", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06715e1cfb475a89b2890951008e70325bdd0ce4", "patch": "@@ -1,5 +1,25 @@\n 2019-04-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90165\n+\t* include/std/variant (variant::__not_self): New helper for the\n+\tis_same_v<remove_cvref_t<T>, variant>==false constraints.\n+\t(variant::__to_type_impl): Remove.\n+\t(variant::__to_type): Add default argument to check pack size, instead\n+\tof using __to_type_impl.\n+\t(variant::__accepted_type): Add default argument using __not_self.\n+\t(variant::__is_in_place_tag, variant::__not_in_place_tag): New helpers\n+\tfor variant(T&&) constructor constraint.\n+\t(variant::variant(T&&)): Use __not_in_place_tag in constraints.\n+\tExtract __accepted_type into a named template parameter for reuse in\n+\tother constraints and in the exception specification.\n+\t(variant::variant(in_place_type_t<T>, Args&&...))\n+\t(variant::variant(in_place_type_t<T>, initializer_list<U>, Args&&...))\n+\t(variant::variant(in_place_index_t<T>, Args&&...))\n+\t(variant::variant(in_place_index_t<T>, initializer_list<U>, Args&&...))\n+\t(variant::operator=T&&)): Remove redundant && from trait arguments.\n+\t* testsuite/20_util/variant/compile.cc: Check variant(T&&) constructor\n+\tisn't used for in_place_type or in_place_index arguments.\n+\n \t* include/std/type_traits (unwrap_reference_t): Define for C++2a.\n \t(unwrap_ref_decay): Remove inheritance from unwrap_reference.\n \t* testsuite/20_util/unwrap_reference/1.cc: Adjust test to use alias."}, {"sha": "d65084eeb1fe8216030a0c4f490ee71a4745f531", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=06715e1cfb475a89b2890951008e70325bdd0ce4", "patch": "@@ -1284,6 +1284,10 @@ namespace __variant\n \t  __detail::__variant::_Traits<_Types...>::_S_default_ctor,\n \t    variant<_Types...>>;\n \n+      template<typename _Tp>\n+\tstatic constexpr bool __not_self\n+\t  = !is_same_v<__remove_cvref_t<_Tp>, variant>;\n+\n       template<typename _Tp>\n \tstatic constexpr bool\n \t__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;\n@@ -1292,17 +1296,10 @@ namespace __variant\n \tstatic constexpr size_t __accepted_index =\n \t  __detail::__variant::__accepted_index<_Tp&&, variant>::value;\n \n-      template<size_t _Np, bool = _Np < sizeof...(_Types)>\n-\tstruct __to_type_impl;\n-\n-      template<size_t _Np>\n-\tstruct __to_type_impl<_Np, true>\n-\t{ using type = variant_alternative_t<_Np, variant>; };\n+      template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>\n+\tusing __to_type = variant_alternative_t<_Np, variant>;\n \n-      template<size_t _Np>\n-\tusing __to_type = typename __to_type_impl<_Np>::type;\n-\n-      template<typename _Tp>\n+      template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>\n \tusing __accepted_type = __to_type<__accepted_index<_Tp>>;\n \n       template<typename _Tp>\n@@ -1311,6 +1308,17 @@ namespace __variant\n \n       using _Traits = __detail::__variant::_Traits<_Types...>;\n \n+      template<typename _Tp>\n+\tstruct __is_in_place_tag : false_type { };\n+      template<typename _Tp>\n+\tstruct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };\n+      template<size_t _Np>\n+\tstruct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };\n+\n+      template<typename _Tp>\n+\tstatic constexpr bool __not_in_place_tag\n+\t  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;\n+\n     public:\n       variant() = default;\n       variant(const variant& __rhs) = default;\n@@ -1320,20 +1328,21 @@ namespace __variant\n       ~variant() = default;\n \n       template<typename _Tp,\n-\t       typename = enable_if_t<!is_same_v<decay_t<_Tp>, variant>>,\n-\t       typename = enable_if_t<(sizeof...(_Types)>0)>,\n-\t       typename = enable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n-\t\t\t  && is_constructible_v<__accepted_type<_Tp&&>, _Tp&&>>>\n+\t       typename = enable_if_t<sizeof...(_Types) != 0>,\n+\t       typename = enable_if_t<__not_in_place_tag<_Tp>>,\n+\t       typename _Tj = __accepted_type<_Tp&&>,\n+\t       typename = enable_if_t<__exactly_once<_Tj>\n+\t\t\t\t      && is_constructible_v<_Tj, _Tp>>>\n \tconstexpr\n \tvariant(_Tp&& __t)\n-\tnoexcept(is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n+\tnoexcept(is_nothrow_constructible_v<_Tj, _Tp>)\n \t: variant(in_place_index<__accepted_index<_Tp&&>>,\n \t\t  std::forward<_Tp>(__t))\n \t{ }\n \n       template<typename _Tp, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n-\t\t\t  && is_constructible_v<_Tp, _Args&&...>>>\n+\t\t\t\t      && is_constructible_v<_Tp, _Args...>>>\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, _Args&&... __args)\n \t: variant(in_place_index<__index_of<_Tp>>,\n@@ -1342,8 +1351,8 @@ namespace __variant\n \n       template<typename _Tp, typename _Up, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n-\t\t\t  && is_constructible_v<\n-\t\t\t    _Tp, initializer_list<_Up>&, _Args&&...>>>\n+\t\t\t\t      && is_constructible_v<_Tp,\n+\t\t\t\t\t   initializer_list<_Up>&, _Args...>>>\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n@@ -1352,17 +1361,19 @@ namespace __variant\n \t{ }\n \n       template<size_t _Np, typename... _Args,\n-\t       typename = enable_if_t<\n-\t\t is_constructible_v<__to_type<_Np>, _Args&&...>>>\n+\t       typename _Tp = __to_type<_Np>,\n+\t       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, _Args&&... __args)\n \t: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ }\n \n       template<size_t _Np, typename _Up, typename... _Args,\n-\t       typename = enable_if_t<is_constructible_v<__to_type<_Np>,\n-\t\t\t\t      initializer_list<_Up>&, _Args&&...>>>\n+\t       typename _Tp = __to_type<_Np>,\n+\t       typename = enable_if_t<is_constructible_v<_Tp,\n+\t\t\t\t\t\t\t initializer_list<_Up>&,\n+\t\t\t\t\t\t\t _Args...>>>\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n@@ -1372,12 +1383,12 @@ namespace __variant\n \n       template<typename _Tp>\n \tenable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n-\t\t    && is_constructible_v<__accepted_type<_Tp&&>, _Tp&&>\n-\t\t    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp&&>\n-\t\t    && !is_same_v<decay_t<_Tp>, variant>, variant&>\n+\t\t    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>\n+\t\t    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,\n+\t\t    variant&>\n \toperator=(_Tp&& __rhs)\n-\tnoexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp&&>\n-\t\t && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n+\tnoexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>\n+\t\t && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)\n \t{\n \t  constexpr auto __index = __accepted_index<_Tp&&>;\n \t  if (index() == __index)"}, {"sha": "6acf5bc627e414870cf89d7ac21c04607f715f2e", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06715e1cfb475a89b2890951008e70325bdd0ce4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=06715e1cfb475a89b2890951008e70325bdd0ce4", "patch": "@@ -144,17 +144,23 @@ void arbitrary_ctor()\n   static_assert(noexcept(variant<int, DefaultNoexcept>(DefaultNoexcept{})));\n }\n \n+struct none { none() = delete; };\n+struct any { template <typename T> any(T&&) {} };\n+\n void in_place_index_ctor()\n {\n   variant<string, string> a(in_place_index<0>, \"a\");\n   variant<string, string> b(in_place_index<1>, {'a'});\n+\n+  static_assert(!is_constructible_v<variant<none, any>, std::in_place_index_t<0>>, \"PR libstdc++/90165\");\n }\n \n void in_place_type_ctor()\n {\n   variant<int, string, int> a(in_place_type<string>, \"a\");\n   variant<int, string, int> b(in_place_type<string>, {'a'});\n   static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>);\n+  static_assert(!is_constructible_v<variant<none, any>, std::in_place_type_t<none>>, \"PR libstdc++/90165\");\n }\n \n void dtor()"}]}