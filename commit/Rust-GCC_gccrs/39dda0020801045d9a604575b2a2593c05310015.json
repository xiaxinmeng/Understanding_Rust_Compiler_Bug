{"sha": "39dda0020801045d9a604575b2a2593c05310015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkZGEwMDIwODAxMDQ1ZDlhNjA0NTc1YjJhMjU5M2MwNTMxMDAxNQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-06-09T22:53:39Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-07-16T21:12:53Z"}, "message": "openacc: Fix standalone attach for Fortran assumed-shape array pointers\n\nThis patch makes it so that an \"attach\" operation for a Fortran pointer\nwith an array descriptor copies that array descriptor to the target,\nand similarly that detach operations release the array descriptor.\n\n2020-07-16  Julian Brown  <julian@codesourcery.com>\n\t    Thomas Schwinge  <thomas@codesourcery.com>\n\ngcc/fortran/\n\t* trans-openmp.c (gfc_trans_omp_clauses): Rework OpenACC\n\tattach/detach handling for arrays with descriptors.\n\ngcc/testsuite/\n\t* gfortran.dg/goacc/attach-descriptor.f90: New test.\n\nlibgomp/\n\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/attach-descriptor-2.f90: New test.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "32b809bf7d91a985754ef7bc0e33e8c92bff749c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b809bf7d91a985754ef7bc0e33e8c92bff749c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39dda0020801045d9a604575b2a2593c05310015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39dda0020801045d9a604575b2a2593c05310015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39dda0020801045d9a604575b2a2593c05310015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39dda0020801045d9a604575b2a2593c05310015/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f66b8486cea8668020e4bd48f261b760cb579be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f66b8486cea8668020e4bd48f261b760cb579be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f66b8486cea8668020e4bd48f261b760cb579be"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "80929c77cc6543b57c8c6c88889483c4dcdc2f06", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39dda0020801045d9a604575b2a2593c05310015/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39dda0020801045d9a604575b2a2593c05310015/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=39dda0020801045d9a604575b2a2593c05310015", "patch": "@@ -2685,9 +2685,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t  decl = build_fold_indirect_ref (decl);\n \t\t\t}\n \t\t    }\n-\t\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl))\n-\t\t      && n->u.map_op != OMP_MAP_ATTACH\n-\t\t      && n->u.map_op != OMP_MAP_DETACH)\n+\t\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl)))\n \t\t    {\n \t\t      tree type = TREE_TYPE (decl);\n \t\t      tree ptr = gfc_conv_descriptor_data_get (decl);\n@@ -2705,7 +2703,23 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t      OMP_CLAUSE_SIZE (node2) = TYPE_SIZE_UNIT (type);\n \t\t      node3 = build_omp_clause (input_location,\n \t\t\t\t\t\tOMP_CLAUSE_MAP);\n-\t\t      OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_POINTER);\n+\t\t      if (n->u.map_op == OMP_MAP_ATTACH)\n+\t\t\t{\n+\t\t\t /* Standalone attach clauses used with arrays with\n+\t\t\t    descriptors must copy the descriptor to the target,\n+\t\t\t    else they won't have anything to perform the\n+\t\t\t    attachment onto (see OpenACC 2.6, \"2.6.3. Data\n+\t\t\t    Structures with Pointers\").  */\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node, GOMP_MAP_ALLOC);\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_ATTACH);\n+\t\t\t}\n+\t\t      else if (n->u.map_op == OMP_MAP_DETACH)\n+\t\t\t{\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node, GOMP_MAP_RELEASE);\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_DETACH);\n+\t\t\t}\n+\t\t      else\n+\t\t\tOMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_POINTER);\n \t\t      if (present)\n \t\t\t{\n \t\t\t  ptr = gfc_conv_descriptor_data_get (decl);"}, {"sha": "9ca36f770c700a7871b9994129c7bd73256c500b", "filename": "gcc/testsuite/gfortran.dg/goacc/attach-descriptor.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39dda0020801045d9a604575b2a2593c05310015/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39dda0020801045d9a604575b2a2593c05310015/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90?ref=39dda0020801045d9a604575b2a2593c05310015", "patch": "@@ -0,0 +1,18 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+program att\n+  implicit none\n+  type t\n+    integer :: arr1(10)\n+    integer, allocatable :: arr2(:)\n+  end type t\n+  type(t) :: myvar\n+  integer, target :: tarr(10)\n+  integer, pointer :: myptr(:)\n+\n+  !$acc enter data attach(myvar%arr2, myptr)\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma acc enter data map\\\\(attach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) myptr\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(attach:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\);$\" 1 \"original\" } }\n+\n+  !$acc exit data detach(myvar%arr2, myptr)\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(release:\\\\*\\\\(c_char \\\\*\\\\) myptr\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(detach:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\);$\" 1 \"original\" } }\n+end program att"}, {"sha": "5d79cbc14fce17348fdd66c26e1fd73222e460ff", "filename": "libgomp/testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39dda0020801045d9a604575b2a2593c05310015/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39dda0020801045d9a604575b2a2593c05310015/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90?ref=39dda0020801045d9a604575b2a2593c05310015", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+\n+program att\n+  use openacc\n+  implicit none\n+  type t\n+    integer :: arr1(10)\n+    integer, allocatable :: arr2(:)\n+  end type t\n+  integer :: i\n+  type(t) :: myvar\n+  integer, target :: tarr(10)\n+  integer, pointer :: myptr(:)\n+\n+  allocate(myvar%arr2(10))\n+\n+  do i=1,10\n+    myvar%arr1(i) = 0\n+    myvar%arr2(i) = 0\n+    tarr(i) = 0\n+  end do\n+\n+  call acc_copyin(myvar)\n+  call acc_copyin(myvar%arr2)\n+  call acc_copyin(tarr)\n+\n+  myptr => tarr\n+\n+  !$acc enter data attach(myvar%arr2, myptr)\n+\n+  ! FIXME: This warning is emitted on the wrong line number.\n+  ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } 38 }\n+  !$acc serial present(myvar%arr2)\n+  do i=1,10\n+    myvar%arr1(i) = i\n+    myvar%arr2(i) = i\n+  end do\n+  myptr(3) = 99\n+  !$acc end serial\n+\n+  !$acc exit data detach(myvar%arr2, myptr)\n+\n+  call acc_copyout(myvar%arr2)\n+  call acc_copyout(myvar)\n+  call acc_copyout(tarr)\n+\n+  do i=1,10\n+    if (myvar%arr1(i) .ne. i) stop 1\n+    if (myvar%arr2(i) .ne. i) stop 2\n+  end do\n+  if (tarr(3) .ne. 99) stop 3\n+\n+end program att"}, {"sha": "58ef44e7c768636f5bfdfa69377903eb19c889e0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/attach-descriptor-2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39dda0020801045d9a604575b2a2593c05310015/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39dda0020801045d9a604575b2a2593c05310015/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-2.f90?ref=39dda0020801045d9a604575b2a2593c05310015", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+\n+program main\n+  use openacc\n+  implicit none\n+  ! TODO Per PR96080, data types chosen so that we can create a\n+  ! \"pointer object 'data_p'\" on the device.\n+  integer, dimension(:), target :: data(1)\n+  integer, dimension(:), pointer :: data_p\n+\n+  !TODO Per PR96080, not using OpenACC/Fortran runtime library routines.\n+\n+  !$acc enter data create(data)\n+  data_p => data\n+  !$acc enter data copyin(data_p)\n+\n+  !$acc enter data attach(data_p)\n+end program main"}]}