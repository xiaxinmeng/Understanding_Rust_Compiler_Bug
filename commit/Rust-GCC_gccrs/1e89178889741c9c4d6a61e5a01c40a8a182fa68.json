{"sha": "1e89178889741c9c4d6a61e5a01c40a8a182fa68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4OTE3ODg4OTc0MWM5YzRkNmE2MWU1YTAxYzQwYThhMTgyZmE2OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-04T22:34:38Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-06T22:52:44Z"}, "message": "c++: ICE in value_dependent_expression_p in C++98 mode [PR94938]\n\nHere we ICE with -std=c++98 since the newly added call to uses_template_parms\n(r10-6357): we hit\n26530             gcc_assert (cxx_dialect >= cxx11\n26531                         || INTEGRAL_OR_ENUMERATION_TYPE_P (type));\nand TYPE is a record type.  The problem is that the argument to\nvalue_dependent_expression_p does not satisfy potential_constant_expression\nwhich it must, as the comment explains.  I thought about fixing this in\nuses_template_parms -- only call v_d_e_p if p_c_e is true, but in this\ncase we want to also suppress the warnings if we don't have a constant\nexpression.  I couldn't simply check TREE_CONSTANT as in\ncompute_array_index_type_loc, because then we'd stop warning in the new\nWtype-limits3.C test.\n\nFixed by using type_dependent_expression_p_push instead.  This means\nthat we won't suppress the warnings for value-dependent expressions that\naren't type-dependent, e.g. sizeof (T).  This only seems to make a\ndifference for -Wdiv-by-zero, now tested in Wdiv-by-zero-3.C, where I\nthink it's reasonable to warn.  It could make -Wtautological-compare\nwarn more, but that warning doesn't trigger when it gets constant arguments.\nWtype-limits4.C is a test reduced from poly-int.h and it tests a scenario\nthat was missing in our testsuite.\n\nThis patch also moves the warning_sentinels after the RECURs -- we mean\nto use them for build_x_binary_op purposes only.\n\n\tPR c++/94938\n\t* pt.c (tsubst_copy_and_build): Call type_dependent_expression_p_push\n\tinstead of uses_template_parms.  Move the warning_sentinels after the\n\tRECURs.\n\n\t* g++.dg/warn/Wdiv-by-zero-3.C: New test.\n\t* g++.dg/warn/Wtype-limits4.C: New test.\n\t* g++.dg/warn/template-2.C: New test.\n\t* g++.old-deja/g++.pt/crash10.C: Add dg-warning.", "tree": {"sha": "9156964427f53a09d923d8450c3bb5e6c373ff4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9156964427f53a09d923d8450c3bb5e6c373ff4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e89178889741c9c4d6a61e5a01c40a8a182fa68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e89178889741c9c4d6a61e5a01c40a8a182fa68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e89178889741c9c4d6a61e5a01c40a8a182fa68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e89178889741c9c4d6a61e5a01c40a8a182fa68/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af711e1914ab6d88538f1fcf0146757b5608b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af711e1914ab6d88538f1fcf0146757b5608b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af711e1914ab6d88538f1fcf0146757b5608b1d"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "0798f0fc503acc9f206d14e528dc622d1514c449", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -1,3 +1,10 @@\n+2020-05-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94938\n+\t* pt.c (tsubst_copy_and_build): Call type_dependent_expression_p_push\n+\tinstead of uses_template_parms.  Move the warning_sentinels after the\n+\tRECURs.\n+\n 2020-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94951"}, {"sha": "c609112722512171892550483dc9f99e913bc029", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -19424,14 +19424,16 @@ tsubst_copy_and_build (tree t,\n       {\n \t/* If T was type-dependent, suppress warnings that depend on the range\n \t   of the types involved.  */\n-\tbool was_dep = uses_template_parms (t);\n+\tbool was_dep = type_dependent_expression_p_push (t);\n+\n+\ttree op0 = RECUR (TREE_OPERAND (t, 0));\n+\ttree op1 = RECUR (TREE_OPERAND (t, 1));\n+\n \twarning_sentinel s1(warn_type_limits, was_dep);\n \twarning_sentinel s2(warn_div_by_zero, was_dep);\n \twarning_sentinel s3(warn_logical_op, was_dep);\n \twarning_sentinel s4(warn_tautological_compare, was_dep);\n \n-\ttree op0 = RECUR (TREE_OPERAND (t, 0));\n-\ttree op1 = RECUR (TREE_OPERAND (t, 1));\n \ttree r = build_x_binary_op\n \t  (input_location, TREE_CODE (t),\n \t   op0,"}, {"sha": "b6b0441de6a4835d9946944fb9b8062a9cf4b09c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -1,3 +1,11 @@\n+2020-05-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94938\n+\t* g++.dg/warn/Wdiv-by-zero-3.C: New test.\n+\t* g++.dg/warn/Wtype-limits4.C: New test.\n+\t* g++.dg/warn/template-2.C: New test.\n+\t* g++.old-deja/g++.pt/crash10.C: Add dg-warning.\n+\n 2020-05-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94970"}, {"sha": "424eb0c3d49d9e15839b13634f9f2d785cff3490", "filename": "gcc/testsuite/g++.dg/warn/Wdiv-by-zero-3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdiv-by-zero-3.C?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/94938\n+\n+template <typename T, int N> int\n+foo (T t, int i)\n+{\n+  int m1 = 10 / t;\n+  int m2 = 10 / i;\n+  int m3 = 10 / (sizeof(T) - sizeof(int)); // { dg-warning \"division by\" }\n+  int m4 = 10 / N; // { dg-warning \"division by\" }\n+  return m1 + m2 + m3 + m4;\n+}\n+\n+void\n+f ()\n+{\n+  foo<int, 0>(0, 0);\n+}"}, {"sha": "3ae44b4f25a9cc51c0a160adb3aa545e675b34cc", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits4.C?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/94938\n+// { dg-additional-options \"-Wtype-limits\" }\n+\n+template<unsigned N> struct B { unsigned arr[N]; };\n+template<> struct B<1u> { int arr[10]; };\n+\n+template <unsigned N> bool\n+foo(B<N> l)\n+{\n+  int i = 0;\n+  return l.arr[i] < 0;\n+}\n+\n+void\n+j()\n+{\n+  B<1u> b;\n+  foo (b);\n+  B<2u> b2;\n+  // I think that in this instantiation we could warn, but it breaks\n+  // gcc bootstrap (marek 5/2020).\n+  foo (b2);\n+}"}, {"sha": "1d29528b2ac343b03e8ffb40fc4fd1cc737b322a", "filename": "gcc/testsuite/g++.dg/warn/template-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Ftemplate-2.C?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/94938 - ICE in value_dependent_expression_p in C++98 mode.\n+// { dg-do compile }\n+\n+template <typename> struct S { S(); S(bool); };\n+\n+struct C {\n+  bool operator()(S<float>);\n+};\n+\n+S<float> fn (bool);\n+\n+template<typename T> void\n+foo (T)\n+{\n+  S<float> s;\n+  S<float> x = fn(false || C()(s));\n+}\n+\n+int main ()\n+{\n+  foo(int());\n+}"}, {"sha": "012e3d0c11b6e1985a54e8d687dbcec0e1c4ca7f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash10.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e89178889741c9c4d6a61e5a01c40a8a182fa68/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash10.C?ref=1e89178889741c9c4d6a61e5a01c40a8a182fa68", "patch": "@@ -6,6 +6,7 @@ public:\n   enum { val = (N == 0) ? M : GCD<N, M % N>::val };\n // { dg-error \"constant expression\" \"valid\" { target *-*-* } .-1 }\n // { dg-message \"template argument\" \"valid\" { target *-*-* } .-2 }\n+// { dg-warning \"division by\" \"\" { target *-*-* } .-3 }\n };\n \n int main() {"}]}