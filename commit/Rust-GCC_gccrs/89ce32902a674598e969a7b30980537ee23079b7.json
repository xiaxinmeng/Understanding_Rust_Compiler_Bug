{"sha": "89ce32902a674598e969a7b30980537ee23079b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljZTMyOTAyYTY3NDU5OGU5NjlhN2IzMDk4MDUzN2VlMjMwNzliNw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T21:33:19Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T21:33:19Z"}, "message": "rs6000: Vector string isolate instructions\n\nAdds new instructions vstribr, vstrihr, vstribl, and vstrihl, with\noverloaded built-in support.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_strir): New #define.\n\t(vec_stril): Likewise.\n\t(vec_strir_p): Likewise.\n\t(vec_stril_p): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VSTRIR): New constant.\n\t(UNSPEC_VSTRIL): Likewise.\n\t(vstrir_<mode>): New expansion.\n\t(vstrir_code_<mode>): New insn.\n\t(vstrir_p_<mode>): New expansion.\n\t(vstrir_p_code_<mode>): New insn.\n\t(vstril_<mode>): New expansion.\n\t(vstril_code_<mode>): New insn.\n\t(vstril_p_<mode>): New expansion.\n\t(vstril_p_code_<mode>): New insn.\n\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vstribr):\n\tNew built-in function.\n\t(__builtin_altivec_vstrihr): Likewise.\n\t(__builtin_altivec_vstribl): Likewise.\n\t(__builtin_altivec_vstrihl): Likewise.\n\t(__builtin_altivec_vstribr_p): Likewise.\n\t(__builtin_altivec_vstrihr_p): Likewise.\n\t(__builtin_altivec_vstribl_p): Likewise.\n\t(__builtin_altivec_vstrihl_p): Likewise.\n\t(__builtin_vec_strir): New overloaded built-in function.\n\t(__builtin_vec_stril): Likewise.\n\t(__builtin_vec_strir_p): Likewise.\n\t(__builtin_vec_stril_p): Likewise.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n\tDefine overloaded forms of __builtin_vec_strir,\n\t__builtin_vec_stril, __builtin_vec_strir_p, and\n\t__builtin_vec_stril_p.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Add description of vec_stril,\n\tvec_stril_p, vec_strir, and vec_strir_p built-in functions.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-stril-0.c: New.\n\t* gcc.target/powerpc/vec-stril-1.c: New.\n\t* gcc.target/powerpc/vec-stril-10.c: New.\n\t* gcc.target/powerpc/vec-stril-11.c: New.\n\t* gcc.target/powerpc/vec-stril-12.c: New.\n\t* gcc.target/powerpc/vec-stril-13.c: New.\n\t* gcc.target/powerpc/vec-stril-14.c: New.\n\t* gcc.target/powerpc/vec-stril-15.c: New.\n\t* gcc.target/powerpc/vec-stril-16.c: New.\n\t* gcc.target/powerpc/vec-stril-17.c: New.\n\t* gcc.target/powerpc/vec-stril-18.c: New.\n\t* gcc.target/powerpc/vec-stril-19.c: New.\n\t* gcc.target/powerpc/vec-stril-2.c: New.\n\t* gcc.target/powerpc/vec-stril-20.c: New.\n\t* gcc.target/powerpc/vec-stril-21.c: New.\n\t* gcc.target/powerpc/vec-stril-22.c: New.\n\t* gcc.target/powerpc/vec-stril-23.c: New.\n\t* gcc.target/powerpc/vec-stril-3.c: New.\n\t* gcc.target/powerpc/vec-stril-4.c: New.\n\t* gcc.target/powerpc/vec-stril-5.c: New.\n\t* gcc.target/powerpc/vec-stril-6.c: New.\n\t* gcc.target/powerpc/vec-stril-7.c: New.\n\t* gcc.target/powerpc/vec-stril-8.c: New.\n\t* gcc.target/powerpc/vec-stril-9.c: New.\n\t* gcc.target/powerpc/vec-stril_p-0.c: New.\n\t* gcc.target/powerpc/vec-stril_p-1.c: New.\n\t* gcc.target/powerpc/vec-stril_p-10.c: New.\n\t* gcc.target/powerpc/vec-stril_p-11.c: New.\n\t* gcc.target/powerpc/vec-stril_p-2.c: New.\n\t* gcc.target/powerpc/vec-stril_p-3.c: New.\n\t* gcc.target/powerpc/vec-stril_p-4.c: New.\n\t* gcc.target/powerpc/vec-stril_p-5.c: New.\n\t* gcc.target/powerpc/vec-stril_p-6.c: New.\n\t* gcc.target/powerpc/vec-stril_p-7.c: New.\n\t* gcc.target/powerpc/vec-stril_p-8.c: New.\n\t* gcc.target/powerpc/vec-stril_p-9.c: New.\n\t* gcc.target/powerpc/vec-strir-0.c: New.\n\t* gcc.target/powerpc/vec-strir-1.c: New.\n\t* gcc.target/powerpc/vec-strir-10.c: New.\n\t* gcc.target/powerpc/vec-strir-11.c: New.\n\t* gcc.target/powerpc/vec-strir-12.c: New.\n\t* gcc.target/powerpc/vec-strir-13.c: New.\n\t* gcc.target/powerpc/vec-strir-14.c: New.\n\t* gcc.target/powerpc/vec-strir-15.c: New.\n\t* gcc.target/powerpc/vec-strir-16.c: New.\n\t* gcc.target/powerpc/vec-strir-17.c: New.\n\t* gcc.target/powerpc/vec-strir-18.c: New.\n\t* gcc.target/powerpc/vec-strir-19.c: New.\n\t* gcc.target/powerpc/vec-strir-2.c: New.\n\t* gcc.target/powerpc/vec-strir-20.c: New.\n\t* gcc.target/powerpc/vec-strir-21.c: New.\n\t* gcc.target/powerpc/vec-strir-22.c: New.\n\t* gcc.target/powerpc/vec-strir-23.c: New.\n\t* gcc.target/powerpc/vec-strir-3.c: New.\n\t* gcc.target/powerpc/vec-strir-4.c: New.\n\t* gcc.target/powerpc/vec-strir-5.c: New.\n\t* gcc.target/powerpc/vec-strir-6.c: New.\n\t* gcc.target/powerpc/vec-strir-7.c: New.\n\t* gcc.target/powerpc/vec-strir-8.c: New.\n\t* gcc.target/powerpc/vec-strir-9.c: New.\n\t* gcc.target/powerpc/vec-strir_p-0.c: New.\n\t* gcc.target/powerpc/vec-strir_p-1.c: New.\n\t* gcc.target/powerpc/vec-strir_p-10.c: New.\n\t* gcc.target/powerpc/vec-strir_p-11.c: New.\n\t* gcc.target/powerpc/vec-strir_p-2.c: New.\n\t* gcc.target/powerpc/vec-strir_p-3.c: New.\n\t* gcc.target/powerpc/vec-strir_p-4.c: New.\n\t* gcc.target/powerpc/vec-strir_p-5.c: New.\n\t* gcc.target/powerpc/vec-strir_p-6.c: New.\n\t* gcc.target/powerpc/vec-strir_p-7.c: New.\n\t* gcc.target/powerpc/vec-strir_p-8.c: New.\n\t* gcc.target/powerpc/vec-strir_p-9.c: New.", "tree": {"sha": "90e4f71bb647b750cd0224e646b5376850f6f5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e4f71bb647b750cd0224e646b5376850f6f5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ce32902a674598e969a7b30980537ee23079b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ce32902a674598e969a7b30980537ee23079b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ce32902a674598e969a7b30980537ee23079b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ce32902a674598e969a7b30980537ee23079b7/comments", "author": null, "committer": null, "parents": [{"sha": "840ac85ced0695fefecee433327e4298b4adb20a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840ac85ced0695fefecee433327e4298b4adb20a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840ac85ced0695fefecee433327e4298b4adb20a"}], "stats": {"total": 2956, "additions": 2956, "deletions": 0}, "files": [{"sha": "28a2c8f9b1b742ef39fc5acce270f14a2d6d9cb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -1,3 +1,40 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_strir): New #define.\n+\t(vec_stril): Likewise.\n+\t(vec_strir_p): Likewise.\n+\t(vec_stril_p): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VSTRIR): New constant.\n+\t(UNSPEC_VSTRIL): Likewise.\n+\t(vstrir_<mode>): New expansion.\n+\t(vstrir_code_<mode>): New insn.\n+\t(vstrir_p_<mode>): New expansion.\n+\t(vstrir_p_code_<mode>): New insn.\n+\t(vstril_<mode>): New expansion.\n+\t(vstril_code_<mode>): New insn.\n+\t(vstril_p_<mode>): New expansion.\n+\t(vstril_p_code_<mode>): New insn.\n+\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vstribr):\n+\tNew built-in function.\n+\t(__builtin_altivec_vstrihr): Likewise.\n+\t(__builtin_altivec_vstribl): Likewise.\n+\t(__builtin_altivec_vstrihl): Likewise.\n+\t(__builtin_altivec_vstribr_p): Likewise.\n+\t(__builtin_altivec_vstrihr_p): Likewise.\n+\t(__builtin_altivec_vstribl_p): Likewise.\n+\t(__builtin_altivec_vstrihl_p): Likewise.\n+\t(__builtin_vec_strir): New overloaded built-in function.\n+\t(__builtin_vec_stril): Likewise.\n+\t(__builtin_vec_strir_p): Likewise.\n+\t(__builtin_vec_stril_p): Likewise.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n+\tDefine overloaded forms of __builtin_vec_strir,\n+\t__builtin_vec_stril, __builtin_vec_strir_p, and\n+\t__builtin_vec_stril_p.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Add description of vec_stril,\n+\tvec_stril_p, vec_strir, and vec_strir_p built-in functions.\n+\n 2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_ternarylogic): New #define."}, {"sha": "b29413deb6d587cb31a612184bc2f2c84f8ca1f2", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -700,6 +700,12 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)\n #define vec_clrr(a, b)\t__builtin_vec_clrr (a, b)\n #define vec_ternarylogic(a, b, c, d)\t__builtin_vec_xxeval (a, b, c, d)\n+\n+#define vec_strir(a)\t__builtin_vec_strir (a)\n+#define vec_stril(a)\t__builtin_vec_stril (a)\n+\n+#define vec_strir_p(a)\t__builtin_vec_strir_p (a)\n+#define vec_stril_p(a)\t__builtin_vec_stril_p (a)\n #endif\n \n #endif /* _ALTIVEC_H */"}, {"sha": "1c0bbb7527a9faae492c4dcd8cd2c2f4262fba4b", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -169,6 +169,8 @@\n    UNSPEC_VCLRLB\n    UNSPEC_VCLRRB\n    UNSPEC_XXEVAL\n+   UNSPEC_VSTRIR\n+   UNSPEC_VSTRIL\n ])\n \n (define_c_enum \"unspecv\"\n@@ -781,6 +783,109 @@\n   DONE;\n })\n \n+(define_expand \"vstrir_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n+\t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]\n+\t\t\tUNSPEC_VSTRIR))]\n+  \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vstrir_code_<mode> (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_vstril_code_<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"vstrir_code_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VIshort\n+\t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n+\t   UNSPEC_VSTRIR))]\n+  \"TARGET_FUTURE\"\n+  \"vstri<wd>r %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; This expands into same code as vstrir_<mode> followed by condition logic\n+;; so that a single vstribr. or vstrihr. or vstribl. or vstrihl. instruction\n+;; can, for example, satisfy the needs of a vec_strir () function paired\n+;; with a vec_strir_p () function if both take the same incoming arguments.\n+(define_expand \"vstrir_p_<mode>\"\n+  [(match_operand:SI 0 \"gpc_reg_operand\")\n+   (match_operand:VIshort 1 \"altivec_register_operand\")]\n+  \"TARGET_FUTURE\"\n+{\n+  rtx scratch = gen_reg_rtx (<MODE>mode);\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vstrir_p_code_<mode> (scratch, operands[1]));\n+  else\n+    emit_insn (gen_vstril_p_code_<mode> (scratch, operands[1]));\n+  emit_insn (gen_cr6_test_for_zero (operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"vstrir_p_code_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VIshort\n+\t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n+\t   UNSPEC_VSTRIR))\n+   (set (reg:CC CR6_REGNO)\n+\t(unspec:CC [(match_dup 1)]\n+\t\t   UNSPEC_VSTRIR))]\n+  \"TARGET_FUTURE\"\n+  \"vstri<wd>r. %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vstril_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n+\t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]\n+\t\t\tUNSPEC_VSTRIR))]\n+  \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vstril_code_<mode> (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_vstrir_code_<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"vstril_code_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VIshort\n+\t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n+\t   UNSPEC_VSTRIL))]\n+  \"TARGET_FUTURE\"\n+  \"vstri<wd>l %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+;; This expands into same code as vstril_<mode> followed by condition logic\n+;; so that a single vstribr. or vstrihr. or vstribl. or vstrihl. instruction\n+;; can, for example, satisfy the needs of a vec_stril () function paired\n+;; with a vec_stril_p () function if both take the same incoming arguments.\n+(define_expand \"vstril_p_<mode>\"\n+  [(match_operand:SI 0 \"gpc_reg_operand\")\n+   (match_operand:VIshort 1 \"altivec_register_operand\")]\n+  \"TARGET_FUTURE\"\n+{\n+  rtx scratch = gen_reg_rtx (<MODE>mode);\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vstril_p_code_<mode> (scratch, operands[1]));\n+  else\n+    emit_insn (gen_vstrir_p_code_<mode> (scratch, operands[1]));\n+  emit_insn (gen_cr6_test_for_zero (operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"vstril_p_code_<mode>\"\n+  [(set (match_operand:VIshort 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VIshort\n+\t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n+\t   UNSPEC_VSTRIL))\n+   (set (reg:CC CR6_REGNO)\n+\t(unspec:CC [(match_dup 1)]\n+\t\t   UNSPEC_VSTRIR))]\n+  \"TARGET_FUTURE\"\n+  \"vstri<wd>l. %0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")])\n \n ;; Fused multiply subtract \n (define_insn \"*altivec_vnmsubfp\""}, {"sha": "1f86293d0e2224f6a40e7d7b438297d0f730e471", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -2612,12 +2612,27 @@ BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n BU_FUTURE_V_4 (XXEVAL, \"xxeval\", CONST, xxeval)\n \n+BU_FUTURE_V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n+BU_FUTURE_V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n+BU_FUTURE_V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n+BU_FUTURE_V_1 (VSTRIHL, \"vstrihl\", CONST, vstril_v8hi)\n+\n+BU_FUTURE_V_1 (VSTRIBR_P, \"vstribr_p\", CONST, vstrir_p_v16qi)\n+BU_FUTURE_V_1 (VSTRIHR_P, \"vstrihr_p\", CONST, vstrir_p_v8hi)\n+BU_FUTURE_V_1 (VSTRIBL_P, \"vstribl_p\", CONST, vstril_p_v16qi)\n+BU_FUTURE_V_1 (VSTRIHL_P, \"vstrihl_p\", CONST, vstril_p_v8hi)\n+\n /* Future architecture overloaded vector built-ins.  */\n BU_FUTURE_OVERLOAD_2 (CLRL, \"clrl\")\n BU_FUTURE_OVERLOAD_2 (CLRR, \"clrr\")\n BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n BU_FUTURE_OVERLOAD_4 (XXEVAL, \"xxeval\")\n \n+BU_FUTURE_OVERLOAD_1 (VSTRIR, \"strir\")\n+BU_FUTURE_OVERLOAD_1 (VSTRIL, \"stril\")\n+\n+BU_FUTURE_OVERLOAD_1 (VSTRIR_P, \"strir_p\")\n+BU_FUTURE_OVERLOAD_1 (VSTRIL_P, \"stril_p\")\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)"}, {"sha": "93f874862fb84d0d4ce914595405c12e31551d07", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -5551,6 +5551,46 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n \n+  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIHL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIHL,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIBL_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIBL_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIHL_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIHL_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIBR,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIBR,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIHR,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIHR,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIBR_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIBR_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n+\n+  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIHR_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIHR_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI, 0, 0 },\n+\n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n };\n \f"}, {"sha": "e35db4387dcc7a92395f022ccbbae3c4478e2f22", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -20833,6 +20833,62 @@ Perform a vector parallel bit extract operation, as if implemented by\n the Future @code{vpextd} instruction.\n @findex vec_pext\n \n+@smallexample\n+@exdent vector unsigned char vec_stril (vector unsigned char)\n+@exdent vector signed char vec_stril (vector signed char)\n+@exdent vector unsigned short vec_stril (vector unsigned short)\n+@exdent vector signed short vec_stril (vector signed short)\n+@end smallexample\n+Isolate the left-most non-zero elements of the incoming vector argument,\n+replacing all elements to the right of the left-most zero element\n+found within the argument with zero.  The typical implementation uses\n+the @code{vstribl} or @code{vstrihl} instruction on big-endian targets\n+and uses the @code{vstribr} or @code{vstrihr} instruction on\n+little-endian targets.\n+@findex vec_stril\n+\n+@smallexample\n+@exdent int vec_stril_p (vector unsigned char)\n+@exdent int vec_stril_p (vector signed char)\n+@exdent int short vec_stril_p (vector unsigned short)\n+@exdent int vec_stril_p (vector signed short)\n+@end smallexample\n+Return a non-zero value if and only if the argument contains a zero\n+element.  The typical implementation uses\n+the @code{vstribl.} or @code{vstrihl.} instruction on big-endian targets\n+and uses the @code{vstribr.} or @code{vstrihr.} instruction on\n+little-endian targets.  Choose this built-in to check for presence of\n+zero element if the same argument is also passed to @code{vec_stril}.\n+@findex vec_stril_p\n+\n+@smallexample\n+@exdent vector unsigned char vec_strir (vector unsigned char)\n+@exdent vector signed char vec_strir (vector signed char)\n+@exdent vector unsigned short vec_strir (vector unsigned short)\n+@exdent vector signed short vec_strir (vector signed short)\n+@end smallexample\n+Isolate the right-most non-zero elements of the incoming vector argument,\n+replacing all elements to the left of the right-most zero element\n+found within the argument with zero.  The typical implementation uses\n+the @code{vstribr} or @code{vstrihr} instruction on big-endian targets\n+and uses the @code{vstribl} or @code{vstrihl} instruction on\n+little-endian targets.\n+@findex vec_strir\n+\n+@smallexample\n+@exdent int vec_strir_p (vector unsigned char)\n+@exdent int vec_strir_p (vector signed char)\n+@exdent int short vec_strir_p (vector unsigned short)\n+@exdent int vec_strir_p (vector signed short)\n+@end smallexample\n+Return a non-zero value if and only if the argument contains a zero\n+element.  The typical implementation uses\n+the @code{vstribr.} or @code{vstrihr.} instruction on big-endian targets\n+and uses the @code{vstribl.} or @code{vstrihl.} instruction on\n+little-endian targets.  Choose this built-in to check for presence of\n+zero element if the same argument is also passed to @code{vec_strir}.\n+@findex vec_strir_p\n+\n @node PowerPC Hardware Transactional Memory Built-in Functions\n @subsection PowerPC Hardware Transactional Memory Built-in Functions\n GCC provides two interfaces for accessing the Hardware Transactional"}, {"sha": "f35b02232e540492326918b77caae81eebd8ccbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -1,3 +1,78 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-stril-0.c: New.\n+\t* gcc.target/powerpc/vec-stril-1.c: New.\n+\t* gcc.target/powerpc/vec-stril-10.c: New.\n+\t* gcc.target/powerpc/vec-stril-11.c: New.\n+\t* gcc.target/powerpc/vec-stril-12.c: New.\n+\t* gcc.target/powerpc/vec-stril-13.c: New.\n+\t* gcc.target/powerpc/vec-stril-14.c: New.\n+\t* gcc.target/powerpc/vec-stril-15.c: New.\n+\t* gcc.target/powerpc/vec-stril-16.c: New.\n+\t* gcc.target/powerpc/vec-stril-17.c: New.\n+\t* gcc.target/powerpc/vec-stril-18.c: New.\n+\t* gcc.target/powerpc/vec-stril-19.c: New.\n+\t* gcc.target/powerpc/vec-stril-2.c: New.\n+\t* gcc.target/powerpc/vec-stril-20.c: New.\n+\t* gcc.target/powerpc/vec-stril-21.c: New.\n+\t* gcc.target/powerpc/vec-stril-22.c: New.\n+\t* gcc.target/powerpc/vec-stril-23.c: New.\n+\t* gcc.target/powerpc/vec-stril-3.c: New.\n+\t* gcc.target/powerpc/vec-stril-4.c: New.\n+\t* gcc.target/powerpc/vec-stril-5.c: New.\n+\t* gcc.target/powerpc/vec-stril-6.c: New.\n+\t* gcc.target/powerpc/vec-stril-7.c: New.\n+\t* gcc.target/powerpc/vec-stril-8.c: New.\n+\t* gcc.target/powerpc/vec-stril-9.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-0.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-1.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-10.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-11.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-2.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-3.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-4.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-5.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-6.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-7.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-8.c: New.\n+\t* gcc.target/powerpc/vec-stril_p-9.c: New.\n+\t* gcc.target/powerpc/vec-strir-0.c: New.\n+\t* gcc.target/powerpc/vec-strir-1.c: New.\n+\t* gcc.target/powerpc/vec-strir-10.c: New.\n+\t* gcc.target/powerpc/vec-strir-11.c: New.\n+\t* gcc.target/powerpc/vec-strir-12.c: New.\n+\t* gcc.target/powerpc/vec-strir-13.c: New.\n+\t* gcc.target/powerpc/vec-strir-14.c: New.\n+\t* gcc.target/powerpc/vec-strir-15.c: New.\n+\t* gcc.target/powerpc/vec-strir-16.c: New.\n+\t* gcc.target/powerpc/vec-strir-17.c: New.\n+\t* gcc.target/powerpc/vec-strir-18.c: New.\n+\t* gcc.target/powerpc/vec-strir-19.c: New.\n+\t* gcc.target/powerpc/vec-strir-2.c: New.\n+\t* gcc.target/powerpc/vec-strir-20.c: New.\n+\t* gcc.target/powerpc/vec-strir-21.c: New.\n+\t* gcc.target/powerpc/vec-strir-22.c: New.\n+\t* gcc.target/powerpc/vec-strir-23.c: New.\n+\t* gcc.target/powerpc/vec-strir-3.c: New.\n+\t* gcc.target/powerpc/vec-strir-4.c: New.\n+\t* gcc.target/powerpc/vec-strir-5.c: New.\n+\t* gcc.target/powerpc/vec-strir-6.c: New.\n+\t* gcc.target/powerpc/vec-strir-7.c: New.\n+\t* gcc.target/powerpc/vec-strir-8.c: New.\n+\t* gcc.target/powerpc/vec-strir-9.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-0.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-1.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-10.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-11.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-2.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-3.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-4.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-5.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-6.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-7.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-8.c: New.\n+\t* gcc.target/powerpc/vec-strir_p-9.c: New.\n+\n 2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n \n \t* gcc.target/powerpc/vec-ternarylogic-0.c: New."}, {"sha": "d9ae5e8c39daa1769b9d41c8120115ccf5e3a018", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-0.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-0.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned char.  */\n+vector unsigned char\n+silj (vector unsigned char arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "a966ddc16997df81d5ecaeef501c7276b2d25e41", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-1.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned char.  */\n+vector unsigned char\n+silj (vector unsigned char arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 00, 0x0 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected3 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected4 =\n+    { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (silj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (silj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (silj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (silj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "8afa5098fdd9f89a6b5b488640bd7db55f815ddb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-10.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-10.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-11.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } }} } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } }} } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "7e4ec69371f1db2a68a4380762edb24cce5147ad", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-11.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-11.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector signed char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */\n+"}, {"sha": "097503ea8ceb5f05ad8d5f726edc0dbad4260f8c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-12.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-12.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-13.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "58e91ed56070d7d053ad7b342e24671c170b07c1", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-13.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-13.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector unsigned short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "e0211900171db726290d8fddfeb97a6f429ad10e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-14.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-14.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-15.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "fa38112b2550dad94af6ce82079e388750a0d9c9", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-15.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-15.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector signed short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "2c5ea7ecc064d3678b83615ae31f499aac8c7094", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-16.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-16.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-17.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector unsigned char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 00, 0x0 };\n+  vector unsigned char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector unsigned char expected3 =\n+    { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "2f82393bf9b71cdd8aae32f29b5d371ba2e7ef14", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-17.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-17.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Tail recursion replaced with iteration with -O2.  */\n+  vector unsigned char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector unsigned char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 00, 0x0 };\n+  vector unsigned char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector unsigned char expected3 =\n+    { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "37c18c1ddb30cca870aad7424d23336d66c4d9ae", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-18.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-18.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-19.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector signed char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 00, 0x0 };\n+  vector signed char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector signed char expected3 =\n+    { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "a0bdd64848a7fc7dd587d9b1d186f54fd69a8a35", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-19.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-19.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Tail recursion replaced with iteration with -O2.  */\n+  vector signed char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector signed char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 00, 0x0 };\n+  vector signed char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector signed char expected3 =\n+    { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "baffe92e4ada9a0ec7e900ff219494b03e4e59af", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-2.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed char.  */\n+vector signed char\n+silj (vector signed char arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M} 0 { target { le } } } } */"}, {"sha": "879b1aea22f4096dc2a43f1ebb0568a791cfadd3", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-20.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-20.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-21.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 }\n+  };\n+\n+  vector unsigned short expected0 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected2 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected3 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}\n+\n+"}, {"sha": "430ed0bbe4a2a92490e17ed754944f719b57272b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-21.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-21.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Iteration replaces tail recursion with -O2.  */\n+  vector unsigned short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 }\n+  };\n+\n+  vector unsigned short expected0 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected2 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected3 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}\n+\n+"}, {"sha": "acc438852fcbfcc1b1b78035a22d97eafb258aeb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-22.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-22.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-stril-23.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 }\n+  };\n+\n+  vector signed short expected0 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected2 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected3 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "75d1e10607a946e7ed5ff4a77fe9b625e5cec03b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-23.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-23.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Iteration replaces tail recursion with -O2.  */\n+  vector signed short result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 }\n+  };\n+\n+  vector signed short expected0 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected2 = { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected3 = { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "50f359b6068d3e24cb7503d38127738700c158cf", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-3.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+vector signed char\n+silj (vector signed char arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char expected2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char expected3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char expected4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (silj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (silj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (silj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (silj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "35447b96b33ce3e87fe0b2e735cb67a8916b1438", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-4.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned short.  */\n+vector unsigned short\n+silj (vector unsigned short arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "16f6bcf6400857dde7d335a064a198af657ace5f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-5.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned short.  */\n+vector unsigned short\n+silj (vector unsigned short arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+\n+  if (!vec_all_eq (silj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (silj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (silj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (silj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "b40e65b80c59cd18ee9d09d126c87a49d5ba7a6b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-6.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed short.  */\n+vector signed short\n+silj (vector signed short arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "b6f90ce54144b4ec18d3f85b5e199c7753a94bcf", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-7.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed short.  */\n+vector signed short\n+silj (vector signed short arg)\n+{\n+  return vec_stril (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected2 =\n+    { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short expected3 =\n+    { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short expected4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (!vec_all_eq (silj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (silj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (silj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (silj (input4), expected4))\n+    abort ();\n+}"}, {"sha": "9f2f3e34a99c350f070e1065e9c878c3b65134cd", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-8.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future -O1\" } */\n+/* See vec-stril-9.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "56864f4e477bb0c7b1f6d83d325aed3c98c19772", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril-9.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril-9.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector unsigned char result = vec_stril (*vp);\n+  if (vec_stril_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "2ec2e70659372d10b6609c56994f340a72fab030", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-0.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-0.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified predicate on array of\n+   unsigned char.  */\n+int\n+silj_p (vector unsigned char arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "0ec3541d810ec6bc62912131dc1ec2ea4216ddaa", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-1.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified predicate on array of\n+   unsigned char.  */\n+int\n+silj_p (vector unsigned char arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+\n+  if (silj_p (input1))\n+    abort ();\n+  if (!silj_p (input2))\n+    abort ();\n+  if (!silj_p (input3))\n+    abort ();\n+  if (!silj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "3c4ce86f1fa11174e8649a6b181e75784801b1fb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-10.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-10.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (vec_stril_p (input1))\n+    abort ();\n+  if (!vec_stril_p (input2))\n+    abort ();\n+  if (!vec_stril_p (input3))\n+    abort ();\n+  if (!vec_stril_p (input4))\n+    abort ();\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "60f7ccd8c337f06600cb59ca04bae00016885e03", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-11.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-11.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (vec_stril_p (input1))\n+    abort ();\n+  if (!vec_stril_p (input2))\n+    abort ();\n+  if (!vec_stril_p (input3))\n+    abort ();\n+  if (!vec_stril_p (input4))\n+    abort ();\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "2b0b347c1274d70606c7ed447222486bbdf3d91a", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-2.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed char.  */\n+int\n+silj_p (vector signed char arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "be477398648e12f24f3574788b7688d5c7b926c6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-3.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+int\n+silj_p (vector signed char arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+\n+  if (silj_p (input1))\n+    abort ();\n+  if (!silj_p (input2))\n+    abort ();\n+  if (!silj_p (input3))\n+    abort ();\n+  if (!silj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "4be60ac53da7bcbbc5ee55361bab105db9f87c74", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-4.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned short.  */\n+int\n+silj_p (vector unsigned short arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "2b520b1745c090af95f8198fe1c559cf769189e5", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-5.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of unsigned short.  */\n+int\n+silj_p (vector unsigned short arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (silj_p (input1))\n+    abort ();\n+  if (!silj_p (input2))\n+    abort ();\n+  if (!silj_p (input3))\n+    abort ();\n+  if (!silj_p (input4))\n+    abort ();\n+}"}, {"sha": "de719f92b00cfe972d346c027dca22493d7cdba7", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-6.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed short.  */\n+int\n+silj_p (vector signed short arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { le } } } } */"}, {"sha": "22f394fa6e0b87f28c500a41d50284cef24a0911", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-7.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate left-justified on array of signed short.  */\n+int\n+silj_p (vector signed short arg)\n+{\n+  return vec_stril_p (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (silj_p (input1))\n+    abort ();\n+  if (!silj_p (input2))\n+    abort ();\n+  if (!silj_p (input3))\n+    abort ();\n+  if (!silj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "daf322070ef29ac54a02c71d6107af37cc6cd70f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-8.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-8.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+\n+  if (vec_stril_p (input1))\n+    abort ();\n+  if (!vec_stril_p (input2))\n+    abort ();\n+  if (!vec_stril_p (input3))\n+    abort ();\n+  if (!vec_stril_p (input4))\n+    abort ();\n+\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "85e8ea750fd7e8ea7f7fa3adf949c47298910cf2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-stril_p-9.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-stril_p-9.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+\n+  if (vec_stril_p (input1))\n+    abort ();\n+  if (!vec_stril_p (input2))\n+    abort ();\n+  if (!vec_stril_p (input3))\n+    abort ();\n+  if (!vec_stril_p (input4))\n+    abort ();\n+\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { le } } } } */"}, {"sha": "6e9e944ca6d792bf75e14f677240bcfca781074f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-0.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-0.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned char.  */\n+vector unsigned char\n+sirj (vector unsigned char arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "8bf326afbc7f2e3c68a1e4e7e37226f8eb6e00c7", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-1.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned char.  */\n+vector unsigned char\n+sirj (vector unsigned char arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (sirj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (sirj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (sirj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (sirj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "b129168510fabb81e4c3b7abfbd02726bf2d5252", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-10.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-10.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-11.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "12d751a62f24890386569856cc46886c3c383374", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-11.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-11.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector signed char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "2ee44dabfd988dbcf8d176d23f6193877fd68a9d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-12.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-12.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-13.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */\n+"}, {"sha": "91ca59bb82624722a13c1a3c187d76b34148f716", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-13.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-13.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector unsigned short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */\n+"}, {"sha": "5f7d4341992d5ccd7f80716433b8c6c8ebd5b44a", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-14.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-14.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-15.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "0a3d8d02ac1727d2d23281f58110cd2e5390b005", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-15.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-15.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector signed short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "2418b2f40fe9ecd50ec13062d75f96090a9c0092", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-16.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-16.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-17.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector unsigned char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "1404342d4b4423509c1a1469d3c58c28e286ed32", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-17.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-17.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Tail recursion replaced with iteration with -O2.  */\n+  vector unsigned char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char composed_string [4] = {\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 }\n+  };\n+\n+  vector unsigned char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector unsigned char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "ab9592f49ee3a4c27146bde4e64cc8c898636159", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-18.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-18.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-19.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char composed_string [4] = {\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 }\n+  };\n+\n+  vector signed char expected0 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector signed char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+  vector signed char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "b0f78df40b35bbcd468e6a6d160b6eceab68bc54", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-19.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-19.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed char\n+doString(vector signed char *vp)\n+{\n+  /* Tail recursion replaced with iteration with -O2.  */\n+  vector signed char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char composed_string [4] = {\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 },\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 }\n+  };\n+\n+  vector signed char expected0 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector signed char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+  vector signed char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "a7efde73d561ea7fc1812ed798abf4355eb26472", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-2.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+vector signed char\n+sirj (vector signed char arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "8ac643e1dbfc6c16b294783f6de0b27df1f81b10", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-20.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-20.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-21.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0x0, 0xd, 0xe }\n+  };\n+\n+  vector unsigned short expected0 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "47bf0db89463a399a6f00012d3eef02a10275725", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-21.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-21.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned short\n+doString(vector unsigned short *vp)\n+{\n+  /* Iteration replaces tail recursion with -O2.  */\n+  vector unsigned short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0x0, 0xd, 0xe }\n+  };\n+\n+  vector unsigned short expected0 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "48a57983860f791c516ffaabefbd9e53c212dead", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-22.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-22.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-23.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector signed short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0x0, 0xd, 0xe }\n+  };\n+\n+  vector signed short expected0 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "b3b143f3b687ac6d0c525b89860de3b3e222d222", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-23.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-23.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector signed short\n+doString(vector signed short *vp)\n+{\n+  /* Iteration replaces tail recursion with -O2.  */\n+  vector signed short result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short composed_string [4] = {\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf },\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 },\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0x0, 0xd, 0xe }\n+  };\n+\n+  vector signed short expected0 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0xe };\n+\n+  if (!vec_all_eq (doString (&composed_string[0]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[1]), expected1))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[2]), expected2))\n+    abort ();\n+  if (!vec_all_eq (doString (&composed_string[3]), expected3))\n+    abort ();\n+}"}, {"sha": "25db69c52a6c9b22c55e30fc0957e2c5e6546a83", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-3.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+vector signed char\n+sirj (vector signed char arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char expected2 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11 };\n+\n+  if (!vec_all_eq (sirj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (sirj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (sirj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (sirj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "85a3f56d24f87b2b05d5e33e02492ba91d71d896", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-4.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned short.  */\n+vector unsigned short\n+sirj (vector unsigned short arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "7047039deab9c3e30419890e6d042427f23fec0f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-5.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-5.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned short.  */\n+vector unsigned short\n+sirj (vector unsigned short arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (sirj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (sirj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (sirj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (sirj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "56e8181212049a9fb28941b8da2d33f416910977", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-6.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed short.  */\n+vector signed short\n+sirj (vector signed short arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "fddee218759e77682a4505d970233b678b405e88", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-7.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed short.  */\n+vector signed short\n+sirj (vector signed short arg)\n+{\n+  return vec_strir (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short expected2 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short expected3 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (!vec_all_eq (sirj (input1), expected1))\n+    abort ();\n+  if (!vec_all_eq (sirj (input2), expected2))\n+    abort ();\n+  if (!vec_all_eq (sirj (input3), expected3))\n+    abort ();\n+  if (!vec_all_eq (sirj (input4), expected4))\n+    abort ();\n+\n+}"}, {"sha": "211cdeb8e50baa465eddf8e0f9602b80af5689fe", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-8.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=future\" } */\n+/* See vec-strir-9.c for the same test with -O2 optimization.  */\n+\n+#include <altivec.h>\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both with -O1.  */\n+  vector unsigned char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "b95711c71f497ef2d52281327a6f4817bb0f1485", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir-9.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir-9.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned char\n+doString(vector unsigned char *vp)\n+{\n+  /* Though two built-in functions are called, the implementation\n+     should use a single instruction to implement both and should\n+     convert tail recursion to iteration with two copies of the \"loop\n+     body\" when compiled with -O2 or -O3.  */\n+  vector unsigned char result = vec_strir (*vp);\n+  if (vec_strir_p (*vp))\n+    return result;\n+  else\n+    return doString (vp + 1);\n+}\n+\n+/* Enforce that exactly two dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 2 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 2 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "f94703dfe7713669e40c94267a638e72bdc7a3ba", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-0.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-0.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned char.  */\n+int\n+sirj_p (vector unsigned char arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "ce527a7c530f1bd62c12ee25c586b46043d940f9", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-1.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned char.  */\n+int\n+sirj_p (vector unsigned char arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+\n+  if (sirj_p (input1))\n+    abort ();\n+  if (!sirj_p (input2))\n+    abort ();\n+  if (!sirj_p (input3))\n+    abort ();\n+  if (!sirj_p (input4))\n+    abort ();\n+}"}, {"sha": "5a4c63940e1446ddda1f239528a1a44e34443de8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-10.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-10.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (vec_strir_p (input1))\n+    abort ();\n+  if (!vec_strir_p (input2))\n+    abort ();\n+  if (!vec_strir_p (input3))\n+    abort ();\n+  if (!vec_strir_p (input4))\n+    abort ();\n+\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "786b2798a1117bbe3be3c379c31c085de891a0c8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-11.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-11.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (vec_strir_p (input1))\n+    abort ();\n+  if (!vec_strir_p (input2))\n+    abort ();\n+  if (!vec_strir_p (input3))\n+    abort ();\n+  if (!vec_strir_p (input4))\n+    abort ();\n+\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "becb32205674eb337606e6f778bc21e364d0fcb8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-2.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+int\n+sirj_p (vector signed char arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}, {"sha": "42777702b3a87bf962b3673cb7118df8cfb1d608", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-3.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed char.  */\n+int\n+sirj_p (vector signed char arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+\n+  if (sirj_p (input1))\n+    abort ();\n+  if (!sirj_p (input2))\n+    abort ();\n+  if (!sirj_p (input3))\n+    abort ();\n+  if (!sirj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "f9b214caa295d1b444ace3c3d4291f2a4baff48b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-4.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned short.  */\n+int\n+sirj_p (vector unsigned short arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "337f2d08875fd64a0fa84c1668213b5283620021", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-5.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-5.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of unsigned short.  */\n+int\n+sirj_p (vector unsigned short arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short expected2 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector unsigned short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected3 =\n+    { 0x0, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector unsigned short expected4 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+\n+  if (sirj_p (input1))\n+    abort ();\n+  if (!sirj_p (input2))\n+    abort ();\n+  if (!sirj_p (input3))\n+    abort ();\n+  if (!sirj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "d1b79ee1250fcd22d70ec5f19827a30385d6c293", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-6.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed short.  */\n+int\n+sirj_p (vector signed short arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+/* Enforce that a single dot-form instruction which is properly biased\n+   for the target's endianness implements this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\.} 1 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\.} 1 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstrihr} 0 { target { le } } } } */"}, {"sha": "a6794d29fd1a3b351644ce4b7edb6bcc4b8ba6a2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-7.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string isolate right-justified on array of signed short.  */\n+int\n+sirj_p (vector signed short arg)\n+{\n+  return vec_strir_p (arg);\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector signed short input1 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input2 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0xf };\n+  vector signed short input3 =\n+    { 0x1, 0x0, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+  vector signed short input4 =\n+    { 0x1, 0x3, 0x5, 0x7, 0x9, 0xb, 0xd, 0x0 };\n+\n+  if (sirj_p (input1))\n+    abort ();\n+  if (!sirj_p (input2))\n+    abort ();\n+  if (!sirj_p (input3))\n+    abort ();\n+  if (!sirj_p (input4))\n+    abort ();\n+\n+}"}, {"sha": "f25528c7b460b9cdaa0a677ca1821cb864c8d805", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-8.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-8.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char input2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input3 =\n+    { 0x1, 0x2, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector unsigned char input4 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+\n+  if (!vec_strir_p (input1))\n+    abort ();\n+  if (!vec_strir_p (input2))\n+    abort ();\n+  if (!vec_strir_p (input3))\n+    abort ();\n+  if (!vec_strir_p (input4))\n+    abort ();\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */\n+\n+"}, {"sha": "42831a4cbed40acc52a2ad99f3c434ca5b513f89", "filename": "gcc/testsuite/gcc.target/powerpc/vec-strir_p-9.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ce32902a674598e969a7b30980537ee23079b7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-strir_p-9.c?ref=89ce32902a674598e969a7b30980537ee23079b7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input1 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0xf, 0x11 };\n+  vector signed char input2 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0xf, 0x11 };\n+  vector signed char input3 =\n+    { 0x1, 0x2, 0xf3, 0x0, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+  vector signed char input4 =\n+    { 0x1, 0x2, 0xf3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe2, 0x0, 0x11 };\n+\n+  if (vec_strir_p (input1))\n+    abort ();\n+  if (!vec_strir_p (input2))\n+    abort ();\n+  if (!vec_strir_p (input3))\n+    abort ();\n+  if (!vec_strir_p (input4))\n+    abort ();\n+\n+}\n+\n+/* Enforce that exactly four dot-form instructions which are properly biased\n+   for the target's endianness implement this built-in.  */\n+\n+/* { dg-final { scan-assembler-times {\\mvstribr\\.} 4 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr\\M[^.]} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl} 0 { target { be } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\.} 4 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribl\\M[^.]} 0 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mvstribr} 0 { target { le } } } } */"}]}