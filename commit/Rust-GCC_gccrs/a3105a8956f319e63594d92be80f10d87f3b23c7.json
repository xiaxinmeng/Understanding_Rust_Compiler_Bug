{"sha": "a3105a8956f319e63594d92be80f10d87f3b23c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxMDVhODk1NmYzMTllNjM1OTRkOTJiZTgwZjEwZDg3ZjNiMjNjNw==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1998-01-17T21:33:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-17T21:33:56Z"}, "message": "pexecute.c (pexecute): New function for mingw32.\n\n        * pexecute.c (pexecute): New function for mingw32. Supports pipes.\n        (pwait): New function for mingw32.\n        * gcc.c (execute): Mingw32 pexecute() supports pipes, but cygwin32\n        pipe support is broken for now.\n\nCo-Authored-By: J.J. VanderHeijden <J.J.vanderHeijden@student.utwente.nl>\n\nFrom-SVN: r17396", "tree": {"sha": "4ddabc9c801c690d8e76c304fa2ac8d55ea7828e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ddabc9c801c690d8e76c304fa2ac8d55ea7828e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3105a8956f319e63594d92be80f10d87f3b23c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3105a8956f319e63594d92be80f10d87f3b23c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3105a8956f319e63594d92be80f10d87f3b23c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3105a8956f319e63594d92be80f10d87f3b23c7/comments", "author": null, "committer": null, "parents": [{"sha": "77aff459558ec67ceafc407420e014433828f7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77aff459558ec67ceafc407420e014433828f7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77aff459558ec67ceafc407420e014433828f7a5"}], "stats": {"total": 158, "additions": 143, "deletions": 15}, "files": [{"sha": "7a660ffad31f515b64096b7e82efc212cc60ca9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3105a8956f319e63594d92be80f10d87f3b23c7", "patch": "@@ -1,3 +1,12 @@\n+Sat Jan 17 22:35:39 1998  Mumit Khan <khan@xraylith.wisc.edu>\n+\t\t\t  J.J VanderHeijden <J.J.vanderHeijden@student.utwente.nl>\n+\t\n+\t* pexecute.c (pexecute): New function for mingw32. Supports pipes.\n+\t(pwait): New function for mingw32.\n+\n+\t* gcc.c (execute): Mingw32 pexecute() supports pipes, but cygwin32\n+\tpipe support is broken for now.\n+\n 1998-01-17  Lee Iverson  <leei@Canada.AI.SRI.COM>\n \n \t* reorg.c: #include \"expr.h\" for rtx prototypes."}, {"sha": "52a23bb82d51cf4ae334374966af6773177c9355", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a3105a8956f319e63594d92be80f10d87f3b23c7", "patch": "@@ -2159,7 +2159,7 @@ execute ()\n   for (n_commands = 1, i = 0; i < argbuf_index; i++)\n     if (strcmp (argbuf[i], \"|\") == 0)\n       {\t\t\t\t/* each command.  */\n-#if defined (__MSDOS__) || (defined (_WIN32) && ! defined (__CYGWIN32__)) || defined (OS2) || defined (VMS)\n+#if defined (__MSDOS__) || (defined (_WIN32) && defined (__CYGWIN32_)) || defined (OS2) || defined (VMS)\n         fatal (\"-pipe not supported\");\n #endif\n \targbuf[i] = 0;\t/* termination of command args.  */"}, {"sha": "f9690e446e699d13aa45bf9652c74083c8057ac7", "filename": "gcc/pexecute.c", "status": "modified", "additions": 133, "deletions": 14, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3105a8956f319e63594d92be80f10d87f3b23c7/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=a3105a8956f319e63594d92be80f10d87f3b23c7", "patch": "@@ -223,20 +223,55 @@ pwait (pid, status, flags)\n #if defined (_WIN32)\n \n #include <process.h>\n-#include <signal.h>\n-extern int _spawnv ();\n-extern int _spawnvp ();\n \n #ifdef __CYGWIN32__\n \n #define fix_argv(argvec) (argvec)\n \n-#else\n+extern int _spawnv ();\n+extern int _spawnvp ();\n+\n+int\n+pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n+     const char *program;\n+     char * const *argv;\n+     const char *this_pname;\n+     const char *temp_base;\n+     char **errmsg_fmt, **errmsg_arg;\n+     int flags;\n+{\n+  int pid;\n+\n+  if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n+    abort ();\n+  pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv)\n+    (_P_NOWAIT, program, fix_argv(argv));\n+  if (pid == -1)\n+    {\n+      *errmsg_fmt = install_error_msg;\n+      *errmsg_arg = program;\n+      return -1;\n+    }\n+  return pid;\n+}\n+\n+int\n+pwait (pid, status, flags)\n+     int pid;\n+     int *status;\n+     int flags;\n+{\n+  /* ??? Here's an opportunity to canonicalize the values in STATUS.\n+     Needed?  */\n+  return cwait (status, pid, WAIT_CHILD);\n+}\n+\n+#else /* ! __CYGWIN32__ */\n \n /* This is a kludge to get around the Microsoft C spawn functions' propensity\n    to remove the outermost set of double quotes from all arguments.  */\n \n-char * const *\n+const char * const *\n fix_argv (argvec)\n      char **argvec;\n {\n@@ -253,7 +288,7 @@ fix_argv (argvec)\n         {\n           if (temp[j] == '\"')\n             {\n-              newtemp = (char *) xmalloc (len + 2);\n+              newtemp = xmalloc (len + 2);\n               strncpy (newtemp, temp, j);\n               newtemp [j] = '\\\\';\n               strncpy (&newtemp [j+1], &temp [j], len-j);\n@@ -267,36 +302,118 @@ fix_argv (argvec)\n         argvec[i] = temp;\n       }\n \n-  return (char * const *) argvec;\n+  return (const char * const *) argvec;\n }\n \n-#endif /* ! defined (__CYGWIN32__) */\n+#include <io.h>\n+#include <fcntl.h>\n+#include <signal.h>\n+\n+/* mingw32 headers may not define the following.  */\n \n+#ifndef _P_WAIT\n+#  define _P_WAIT\t0\n+#  define _P_NOWAIT\t1\n+#  define _P_OVERLAY\t2\n+#  define _P_NOWAITO\t3\n+#  define _P_DETACH\t4\n+\n+#  define WAIT_CHILD\t0\n+#  define WAIT_GRANDCHILD\t1\n+#endif\n+\n+/* Win32 supports pipes */\n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n      const char *program;\n      char * const *argv;\n      const char *this_pname;\n      const char *temp_base;\n-     char **errmsg_fmt;\n-     const char **errmsg_arg;\n+     char **errmsg_fmt, **errmsg_arg;\n      int flags;\n {\n   int pid;\n+  int pdes[2], org_stdin, org_stdout;\n+  int input_desc, output_desc;\n+  int retries, sleep_interval;\n+\n+  /* Pipe waiting from last process, to be used as input for the next one.\n+     Value is STDIN_FILE_NO if no pipe is waiting\n+     (i.e. the next command is the first of a group).  */\n+  static int last_pipe_input;\n+\n+  /* If this is the first process, initialize.  */\n+  if (flags & PEXECUTE_FIRST)\n+    last_pipe_input = STDIN_FILE_NO;\n+\n+  input_desc = last_pipe_input;\n+\n+  /* If this isn't the last process, make a pipe for its output,\n+     and record it as waiting to be the input to the next process.  */\n+  if (! (flags & PEXECUTE_LAST))\n+    {\n+      if (_pipe (pdes, 256, O_BINARY) < 0)\n+\t{\n+\t  *errmsg_fmt = \"pipe\";\n+\t  *errmsg_arg = NULL;\n+\t  return -1;\n+\t}\n+      output_desc = pdes[WRITE_PORT];\n+      last_pipe_input = pdes[READ_PORT];\n+    }\n+  else\n+    {\n+      /* Last process.  */\n+      output_desc = STDOUT_FILE_NO;\n+      last_pipe_input = STDIN_FILE_NO;\n+    }\n+\n+  if (input_desc != STDIN_FILE_NO)\n+    {\n+      org_stdin = dup (STDIN_FILE_NO);\n+      dup2 (input_desc, STDIN_FILE_NO);\n+      close (input_desc); \n+    }\n+\n+  if (output_desc != STDOUT_FILE_NO)\n+    {\n+      org_stdout = dup (STDOUT_FILE_NO);\n+      dup2 (output_desc, STDOUT_FILE_NO);\n+      close (output_desc);\n+    }\n \n-  if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n-    abort ();\n   pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv)\n-    (_P_NOWAIT, program, fix_argv (argv));\n+    (_P_NOWAIT, program, fix_argv(argv));\n+\n+  if (input_desc != STDIN_FILE_NO)\n+    {\n+      dup2 (org_stdin, STDIN_FILE_NO);\n+      close (org_stdin);\n+    }\n+\n+  if (output_desc != STDOUT_FILE_NO)\n+    {\n+      dup2 (org_stdout, STDOUT_FILE_NO);\n+      close (org_stdout);\n+    }\n+\n   if (pid == -1)\n     {\n       *errmsg_fmt = install_error_msg;\n       *errmsg_arg = program;\n       return -1;\n     }\n+\n   return pid;\n }\n \n+/* MS CRTDLL doesn't return enough information in status to decide if the\n+   child exited due to a signal or not, rather it simply returns an\n+   integer with the exit code of the child; eg., if the child exited with \n+   an abort() call and didn't have a handler for SIGABRT, it simply returns\n+   with status = 3. We fix the status code to conform to the usual WIF*\n+   macros. Note that WIFSIGNALED will never be true under CRTDLL. */\n+\n int\n pwait (pid, status, flags)\n      int pid;\n@@ -305,7 +422,7 @@ pwait (pid, status, flags)\n {\n   int termstat;\n \n-  pid = cwait (&termstat, pid, WAIT_CHILD);\n+  pid = _cwait (&termstat, pid, WAIT_CHILD);\n \n   /* ??? Here's an opportunity to canonicalize the values in STATUS.\n      Needed?  */\n@@ -322,6 +439,8 @@ pwait (pid, status, flags)\n   return pid;\n }\n \n+#endif /* ! defined (__CYGWIN32__) */\n+\n #endif /* _WIN32 */\n \n #ifdef OS2"}]}