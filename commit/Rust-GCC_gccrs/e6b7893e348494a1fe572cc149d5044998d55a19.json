{"sha": "e6b7893e348494a1fe572cc149d5044998d55a19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiNzg5M2UzNDg0OTRhMWZlNTcyY2MxNDlkNTA0NDk5OGQ1NWExOQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-03-31T11:43:43Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-03-31T11:43:43Z"}, "message": "re PR libgcj/26858 (NullPointerException not generated for large classes...)\n\n2006-03-30  Andrew Haley  <aph@redhat.com>\n\n        PR java/26858\n        * lang.c (java_attribute_table): New.\n        (LANG_HOOKS_ATTRIBUTE_TABLE): Define.\n        * expr.c (build_field_ref): Add a null pointer check for all\n        fields of offset > 4k.  Don't do so for accesses via the this\n        pointer, which we know can never be null.\n        * class.c (build_java_method_type): Mark arg 1 of all nonstatic\n        methods nonnull.\n\nFrom-SVN: r112574", "tree": {"sha": "8bf22cfbf415d9728bf595db481e2380c8f33e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf22cfbf415d9728bf595db481e2380c8f33e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b7893e348494a1fe572cc149d5044998d55a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b7893e348494a1fe572cc149d5044998d55a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b7893e348494a1fe572cc149d5044998d55a19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b7893e348494a1fe572cc149d5044998d55a19/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ef47dec918a7b32927f240581d9418981050170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef47dec918a7b32927f240581d9418981050170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef47dec918a7b32927f240581d9418981050170"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "e40d443b21421776f8b2666e46a1513fa4b3d6da", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e6b7893e348494a1fe572cc149d5044998d55a19", "patch": "@@ -1,3 +1,14 @@\n+2006-03-30  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/26858\n+\t* lang.c (java_attribute_table): New.\n+\t(LANG_HOOKS_ATTRIBUTE_TABLE): Define.\n+\t* expr.c (build_field_ref): Add a null pointer check for all\n+\tfields of offset > 4k.  Don't do so for accesses via the this\n+\tpointer, which we know can never be null.\n+\t* class.c (build_java_method_type): Mark arg 1 of all nonstatic\n+\tmethods nonnull.\n+\n 2006-03-30  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* Make-lang.in: Rename docdir to gcc_docdir."}, {"sha": "a6074518f59fbc319dfd9dbfa269577be2a1ec15", "filename": "gcc/java/class.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=e6b7893e348494a1fe572cc149d5044998d55a19", "patch": "@@ -681,7 +681,17 @@ build_java_method_type (tree fntype, tree this_class, int access_flags)\n {\n   if (access_flags & ACC_STATIC)\n     return fntype;\n-  return build_method_type (this_class, fntype);\n+  fntype = build_method_type (this_class, fntype);\n+\n+  /* We know that arg 1 of every nonstatic method is non-null; tell\n+     the back-end so.  */\n+  TYPE_ATTRIBUTES (fntype) = (tree_cons \n+\t\t\t      (get_identifier (\"nonnull\"),\n+\t\t\t       tree_cons (NULL_TREE, \n+\t\t\t\t\t  build_int_cst (NULL_TREE, 1),\n+\t\t\t\t\t  NULL_TREE),\n+\t\t\t       TYPE_ATTRIBUTES (fntype)));\n+  return fntype;\n }\n \n tree"}, {"sha": "c178552904dd07e768c94a4c4fce10117e54a37e", "filename": "gcc/java/expr.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=e6b7893e348494a1fe572cc149d5044998d55a19", "patch": "@@ -130,6 +130,10 @@ static GTY(()) tree quick_stack;\n /* A free-list of unused permanent TREE_LIST nodes.  */\n static GTY((deletable)) tree tree_list_free_list;\n \n+/* The physical memory page size used in this computer.  See\n+   build_field_ref().  */\n+static GTY(()) tree page_size;\n+\n /* The stack pointer of the Java virtual machine.\n    This does include the size of the quick_stack. */\n \n@@ -1678,11 +1682,28 @@ build_field_ref (tree self_value, tree self_class, tree name)\n     }\n   else\n     {\n-      int check = (flag_check_references\n-\t\t   && ! (DECL_P (self_value)\n-\t\t\t && DECL_NAME (self_value) == this_identifier_node));\n-\n       tree base_type = promote_type (base_class);\n+\n+      /* CHECK is true if self_value is not the this pointer.  */\n+      int check = (! (DECL_P (self_value)\n+\t\t      && DECL_NAME (self_value) == this_identifier_node));\n+\n+      /* Determine whether a field offset from NULL will lie within\n+\t Page 0: this is necessary on those GNU/Linux/BSD systems that\n+\t trap SEGV to generate NullPointerExceptions.  \n+\n+\t We assume that Page 0 will be mapped with NOPERM, and that\n+\t memory may be allocated from any other page, so only field\n+\t offsets < pagesize are guaratneed to trap.  We also assume\n+\t the smallest page size we'll encounter is 4k bytes.  */\n+      if (check && ! flag_check_references && ! flag_indirect_dispatch)\n+\t{\n+\t  tree field_offset = byte_position (field_decl);\n+\t  if (! page_size)\n+\t    page_size = size_int (4096); \t      \n+\t  check = ! INT_CST_LT_UNSIGNED (field_offset, page_size);\n+\t}\n+\n       if (base_type != TREE_TYPE (self_value))\n \tself_value = fold_build1 (NOP_EXPR, base_type, self_value);\n       if (! flag_syntax_only && flag_indirect_dispatch)\n@@ -1708,6 +1729,7 @@ build_field_ref (tree self_value, tree self_class, tree name)\n \t\t\tfield_offset);\n \t  \n \t  field_offset = fold (convert (sizetype, field_offset));\n+\t  self_value = java_check_reference (self_value, check);\n \t  address \n \t    = fold_build2 (PLUS_EXPR, \n \t\t\t   build_pointer_type (TREE_TYPE (field_decl)),"}, {"sha": "58f23e9e0e52cdaee9526911f2509fcd240e299c", "filename": "gcc/java/lang.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b7893e348494a1fe572cc149d5044998d55a19/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=e6b7893e348494a1fe572cc149d5044998d55a19", "patch": "@@ -108,6 +108,14 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n+/* Table of machine-independent attributes.  */\n+const struct attribute_spec java_attribute_table[] =\n+{\n+ { \"nonnull\",                0, -1, false, true, true,\n+\t\t\t      NULL },\n+  { NULL,                     0, 0, false, false, false, NULL }\n+};\n+\n /* Used to avoid printing error messages with bogus function\n    prototypes.  Starts out false.  */\n static bool inhibit_error_function_printing;\n@@ -213,6 +221,9 @@ struct language_function GTY(())\n #undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME java_mangle_decl\n \n+#undef LANG_HOOKS_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_ATTRIBUTE_TABLE java_attribute_table\n+\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}]}