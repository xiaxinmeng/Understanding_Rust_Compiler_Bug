{"sha": "e5898daf4cd10d161d6f768cd31fb26e1dd60051", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4OThkYWY0Y2QxMGQxNjFkNmY3NjhjZDMxZmIyNmUxZGQ2MDA1MQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-06-29T15:39:57Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-06-29T15:39:57Z"}, "message": "rs6000-c.c: Add support for built-in functions vector signed int vec_signed (vector float)...\n\ngcc/ChangeLog:\n\n2017-06-29  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n\tvector signed int vec_signed (vector float);\n\tvector signed long long vec_signed (vector double);\n\tvector signed int vec_signed2 (vector double, vector double);\n\tvector signed int vec_signede (vector double);\n\tvector signed int vec_signedo (vector double);\n\t* config/rs6000/rs6000.c (rs6000_generate_vsigned2_code): Add\n\tinstruction generator.\n\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPSXWS, UNSPEC_VSX_XVCVSPSXDS,\n\tUNSPEC_VSX_VSIGNED2): Add UNSPECS.\n\t(vsx_xvcvspsxws, vsx_xvcvdpuxds_scale, vsx_xvcvspuxws, vsigned2_v2df):\n\tAdd define_insn.\n\t(vsignedo_v2df, vsignede_v2df, vunsigned2_v2df, vunsignedo_v2df,\n\tvunsignede_v2df): Add define_expands.\n\t* config/rs6000/rs6000-builtin.def (VEC_SIGNED, VEC_UNSIGNED,\n\tVEC_SIGNED2, VEC_UNSIGNED2, VEC_SIGNEDE, VEC_UNSIGNEDE, VEC_SIGNEDO,\n\tVEC_UNSIGNEDO): Add definitions.\n\t* config/vsx.md (UNSPEC_VSX_XVCVSPSXWS, UNSPEC_VSX_XVCVSPSXDS,\n\tUNSPEC_VSX_VSIGNED2): Add UNSPECs.\n\t(vsx_xvcvspsxws, vsx_xvcvspuxws): Add define_insn.\n\t(vsigned2_v2df, vsigendo_v2df, vsignede_v2df,\n\tvunsigned2_v2df, vunsignedo_v2df, vunsignede_v2df): Add define_expands.\n\t* config/rs6000/altivec.h (vec_signed, vec_signed2,\n\tvec_signede and vec_signedo, vec_unsigned, vec_unsigned2,\n\tvec_unsignede, vec_unsignedo): Add builtin defines.\n\t* config/rs6000-protos.h (rs6000_generate_vsigned2_code): Add extern\n\tdeclaration.\n\t* doc/extend.texi: Update the built-in documentation file for the\n\tnew built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-06-29  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-3-runnable.c (test_int_result,\n\ttest_unsigned_int_result, test_ll_int_result,\n\ttest_ll_unsigned_int_result): Add result checking functions, add\n\tdebug support.\n\t(main): Add builtin function tests.\n\nFrom-SVN: r249798", "tree": {"sha": "82cba1c196681466f4224a133e283111b09c4090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82cba1c196681466f4224a133e283111b09c4090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5898daf4cd10d161d6f768cd31fb26e1dd60051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5898daf4cd10d161d6f768cd31fb26e1dd60051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5898daf4cd10d161d6f768cd31fb26e1dd60051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5898daf4cd10d161d6f768cd31fb26e1dd60051/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84eb0f1a3bfc8007e8d6ecf4bf208682fbf5b4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84eb0f1a3bfc8007e8d6ecf4bf208682fbf5b4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84eb0f1a3bfc8007e8d6ecf4bf208682fbf5b4dd"}], "stats": {"total": 561, "additions": 542, "deletions": 19}, "files": [{"sha": "de228dd1fa5a2ff9a10655eb5284060dcdb4b4ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -1,3 +1,35 @@\n+2017-06-29  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n+\tvector signed int vec_signed (vector float);\n+\tvector signed long long vec_signed (vector double);\n+\tvector signed int vec_signed2 (vector double, vector double);\n+\tvector signed int vec_signede (vector double);\n+\tvector signed int vec_signedo (vector double);\n+\t* config/rs6000/rs6000.c (rs6000_generate_vsigned2_code): Add\n+\tinstruction generator.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPSXWS, UNSPEC_VSX_XVCVSPSXDS,\n+\tUNSPEC_VSX_VSIGNED2): Add UNSPECS.\n+\t(vsx_xvcvspsxws, vsx_xvcvdpuxds_scale, vsx_xvcvspuxws, vsigned2_v2df):\n+\tAdd define_insn.\n+\t(vsignedo_v2df, vsignede_v2df, vunsigned2_v2df, vunsignedo_v2df,\n+\tvunsignede_v2df): Add define_expands.\n+\t* config/rs6000/rs6000-builtin.def (VEC_SIGNED, VEC_UNSIGNED,\n+\tVEC_SIGNED2, VEC_UNSIGNED2, VEC_SIGNEDE, VEC_UNSIGNEDE, VEC_SIGNEDO,\n+\tVEC_UNSIGNEDO): Add definitions.\n+\t* config/vsx.md (UNSPEC_VSX_XVCVSPSXWS, UNSPEC_VSX_XVCVSPSXDS,\n+\tUNSPEC_VSX_VSIGNED2): Add UNSPECs.\n+\t(vsx_xvcvspsxws, vsx_xvcvspuxws): Add define_insn.\n+\t(vsigned2_v2df, vsigendo_v2df, vsignede_v2df,\n+\tvunsigned2_v2df, vunsignedo_v2df, vunsignede_v2df): Add define_expands.\n+\t* config/rs6000/altivec.h (vec_signed, vec_signed2,\n+\tvec_signede and vec_signedo, vec_unsigned, vec_unsigned2,\n+\tvec_unsignede, vec_unsignedo): Add builtin defines.\n+\t* config/rs6000-protos.h (rs6000_generate_vsigned2_code): Add extern\n+\tdeclaration.\n+\t* doc/extend.texi: Update the built-in documentation file for the\n+\tnew built-in functions.\n+\n 2017-06-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Do not add"}, {"sha": "53d8c47c2aa25c997d8792c8de97b8e004f75658", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -182,6 +182,14 @@\n #define vec_rlnm(a,b,c) (__builtin_vec_rlnm((a),((b)<<8)|(c)))\n #define vec_rsqrt __builtin_vec_rsqrt\n #define vec_rsqrte __builtin_vec_rsqrte\n+#define vec_signed __builtin_vec_vsigned\n+#define vec_signed2 __builtin_vec_vsigned2\n+#define vec_signede __builtin_vec_vsignede\n+#define vec_signedo __builtin_vec_vsignedo\n+#define vec_unsigned __builtin_vec_vunsigned\n+#define vec_unsigned2 __builtin_vec_vunsigned2\n+#define vec_unsignede __builtin_vec_vunsignede\n+#define vec_unsignedo __builtin_vec_vunsignedo\n #define vec_vsubfp __builtin_vec_vsubfp\n #define vec_subc __builtin_vec_subc\n #define vec_vsubsws __builtin_vec_vsubsws"}, {"sha": "afec0145543ebf6c68c319f2ae6721a0fca6ae40", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -1611,6 +1611,9 @@ BU_VSX_2 (CMPLE_U2DI,         \"cmple_u2di\",     CONST,  vector_ngtuv2di)\n BU_VSX_2 (FLOAT2_V2DI,        \"float2_v2di\",    CONST,  float2_v2di)\n BU_VSX_2 (UNS_FLOAT2_V2DI,    \"uns_float2_v2di\",    CONST,  uns_float2_v2di)\n \n+BU_VSX_2 (VEC_VSIGNED2_V2DF,      \"vsigned2_v2df\",    CONST,  vsigned2_v2df)\n+BU_VSX_2 (VEC_VUNSIGNED2_V2DF,    \"vunsigned2_v2df\",  CONST,  vunsigned2_v2df)\n+\n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)\n BU_VSX_A (XVNABSDP,\t      \"xvnabsdp\",\tCONST,\tvsx_nabsv2df2)\n@@ -1702,6 +1705,16 @@ BU_VSX_1 (DOUBLEL_V4SI,      \"doublel_v4si\",     CONST,\tdoublelv4si2)\n BU_VSX_1 (DOUBLEL_V4SF,      \"doublel_v4sf\",     CONST,\tdoublelv4sf2)\n BU_VSX_1 (UNS_DOUBLEL_V4SI,  \"uns_doublel_v4si\", CONST,\tunsdoublelv4si2)\n \n+BU_VSX_1 (VEC_VSIGNED_V4SF,      \"vsigned_v4sf\",     CONST,  vsx_xvcvspsxws)\n+BU_VSX_1 (VEC_VSIGNED_V2DF,      \"vsigned_v2df\",     CONST,  vsx_xvcvdpsxds)\n+BU_VSX_1 (VEC_VSIGNEDE_V2DF,     \"vsignede_v2df\",    CONST,  vsignede_v2df)\n+BU_VSX_1 (VEC_VSIGNEDO_V2DF,     \"vsignedo_v2df\",    CONST,  vsignedo_v2df)\n+\n+BU_VSX_1 (VEC_VUNSIGNED_V4SF,    \"vunsigned_v4sf\",    CONST,  vsx_xvcvspsxws)\n+BU_VSX_1 (VEC_VUNSIGNED_V2DF,    \"vunsigned_v2df\",    CONST,  vsx_xvcvdpsxds)\n+BU_VSX_1 (VEC_VUNSIGNEDE_V2DF,   \"vunsignede_v2df\",   CONST,  vunsignede_v2df)\n+BU_VSX_1 (VEC_VUNSIGNEDO_V2DF,   \"vunsignedo_v2df\",   CONST,  vunsignedo_v2df)\n+\n /* VSX predicate functions.  */\n BU_VSX_P (XVCMPEQSP_P,\t      \"xvcmpeqsp_p\",\tCONST,\tvector_eq_v4sf_p)\n BU_VSX_P (XVCMPGESP_P,\t      \"xvcmpgesp_p\",\tCONST,\tvector_ge_v4sf_p)\n@@ -1791,6 +1804,8 @@ BU_VSX_OVERLOAD_2 (XXSPLTD,  \"xxspltd\")\n BU_VSX_OVERLOAD_2 (XXSPLTW,  \"xxspltw\")\n BU_VSX_OVERLOAD_2 (FLOAT2,   \"float2\")\n BU_VSX_OVERLOAD_2 (UNS_FLOAT2,   \"uns_float2\")\n+BU_VSX_OVERLOAD_2 (VSIGNED2,     \"vsigned2\")\n+BU_VSX_OVERLOAD_2 (VUNSIGNED2,   \"vunsigned2\")\n \n /* 1 argument VSX overloaded builtin functions.  */\n BU_VSX_OVERLOAD_1 (DOUBLE,   \"double\")\n@@ -1806,6 +1821,14 @@ BU_VSX_OVERLOAD_1 (FLOAT,  \"float\")\n BU_VSX_OVERLOAD_1 (FLOATE,  \"floate\")\n BU_VSX_OVERLOAD_1 (FLOATO,  \"floato\")\n \n+BU_VSX_OVERLOAD_1 (VSIGNED,   \"vsigned\")\n+BU_VSX_OVERLOAD_1 (VSIGNEDE,  \"vsignede\")\n+BU_VSX_OVERLOAD_1 (VSIGNEDO,  \"vsignedo\")\n+\n+BU_VSX_OVERLOAD_1 (VUNSIGNED,   \"vunsigned\")\n+BU_VSX_OVERLOAD_1 (VUNSIGNEDE,  \"vunsignede\")\n+BU_VSX_OVERLOAD_1 (VUNSIGNEDO,  \"vunsignedo\")\n+\n /* VSX builtins that are handled as special cases.  */\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n BU_VSX_OVERLOAD_X (ST,\t     \"st\")"}, {"sha": "6293308ede0e0d30da12f8e615e58423e3467f90", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -5550,6 +5550,29 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n \n+  { VSX_BUILTIN_VEC_VSIGNED, VSX_BUILTIN_VEC_VSIGNED_V4SF,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VSIGNED, VSX_BUILTIN_VEC_VSIGNED_V2DF,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VSIGNEDE, VSX_BUILTIN_VEC_VSIGNEDE_V2DF,\n+    RS6000_BTI_V4SI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VSIGNEDO, VSX_BUILTIN_VEC_VSIGNEDO_V2DF,\n+    RS6000_BTI_V4SI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VSIGNED2, VSX_BUILTIN_VEC_VSIGNED2_V2DF,\n+    RS6000_BTI_V4SI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+\n+  { VSX_BUILTIN_VEC_VUNSIGNED, VSX_BUILTIN_VEC_VUNSIGNED_V4SF,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V4SF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VUNSIGNED, VSX_BUILTIN_VEC_VUNSIGNED_V2DF,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VUNSIGNEDE, VSX_BUILTIN_VEC_VUNSIGNEDE_V2DF,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VUNSIGNEDO, VSX_BUILTIN_VEC_VUNSIGNEDO_V2DF,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V2DF, 0, 0 },\n+  { VSX_BUILTIN_VEC_VUNSIGNED2, VSX_BUILTIN_VEC_VUNSIGNED2_V2DF,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_V2DF,\n+    RS6000_BTI_V2DF, 0 },\n+\n   /* Crypto builtins.  */\n   { CRYPTO_BUILTIN_VPERMXOR, CRYPTO_BUILTIN_VPERMXOR_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,"}, {"sha": "44fdf8ae09c8a3e0f316a0f445d15423aa7d5ab6", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -73,6 +73,7 @@ extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void rs6000_scale_v2df (rtx, rtx, int);\n extern void rs6000_generate_float2_code (bool, rtx, rtx, rtx);\n+extern void rs6000_generate_vsigned2_code (bool, rtx, rtx, rtx);\n extern int expand_block_clear (rtx[]);\n extern int expand_block_move (rtx[]);\n extern bool expand_block_compare (rtx[]);"}, {"sha": "181794d8dad7e304fa80fd796d2ddc270bb85b6f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -41074,6 +41074,35 @@ rs6000_generate_float2_code (bool signed_convert, rtx dst, rtx src1, rtx src2)\n     emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp3, rtx_tmp2));\n }\n \n+void\n+rs6000_generate_vsigned2_code (bool signed_convert, rtx dst, rtx src1,\n+\t\t\t       rtx src2)\n+{\n+  rtx rtx_tmp0, rtx_tmp1, rtx_tmp2, rtx_tmp3;\n+\n+  rtx_tmp0 = gen_reg_rtx (V2DFmode);\n+  rtx_tmp1 = gen_reg_rtx (V2DFmode);\n+\n+  emit_insn (gen_vsx_xxpermdi_v2df (rtx_tmp0, src1, src2, GEN_INT (0)));\n+  emit_insn (gen_vsx_xxpermdi_v2df (rtx_tmp1, src1, src2, GEN_INT (3)));\n+\n+  rtx_tmp2 = gen_reg_rtx (V4SImode);\n+  rtx_tmp3 = gen_reg_rtx (V4SImode);\n+\n+  if (signed_convert)\n+    {\n+      emit_insn (gen_vsx_xvcvdpsxws (rtx_tmp2, rtx_tmp0));\n+      emit_insn (gen_vsx_xvcvdpsxws (rtx_tmp3, rtx_tmp1));\n+    }\n+  else\n+    {\n+      emit_insn (gen_vsx_xvcvdpuxws (rtx_tmp2, rtx_tmp0));\n+      emit_insn (gen_vsx_xvcvdpuxws (rtx_tmp3, rtx_tmp1));\n+    }\n+\n+  emit_insn (gen_p8_vmrgew_v4si (dst, rtx_tmp2, rtx_tmp3));\n+}\n+\n /* Implement the TARGET_OPTAB_SUPPORTED_P hook.  */\n \n static bool"}, {"sha": "2ddfae537c974d90cf76618c6358c03b218a8f0a", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -358,6 +358,8 @@\n    UNSPEC_VSX_XVCVDPSXDS\n    UNSPEC_VSX_XVCVDPUXDS\n    UNSPEC_VSX_SIGN_EXTEND\n+   UNSPEC_VSX_XVCVSPSXWS\n+   UNSPEC_VSX_XVCVSPSXDS\n    UNSPEC_VSX_VSLO\n    UNSPEC_VSX_EXTRACT\n    UNSPEC_VSX_SXEXPDP\n@@ -370,6 +372,7 @@\n    UNSPEC_VSX_VIEXP\n    UNSPEC_VSX_VTSTDC\n    UNSPEC_VSX_VEC_INIT\n+   UNSPEC_VSX_VSIGNED2\n    UNSPEC_LXVL\n    UNSPEC_STXVL\n    UNSPEC_VCLZLSBB\n@@ -1864,6 +1867,8 @@\n   DONE;\n })\n \n+;; convert vector of 64-bit floating point numbers to vector of\n+;; 64-bit signed integer\n (define_insn \"vsx_xvcvdpsxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n         (unspec:V2DI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")]\n@@ -1872,6 +1877,18 @@\n   \"xvcvdpsxds %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+;; convert vector of 32-bit floating point numbers to vector of\n+;; 32-bit signed integer\n+(define_insn \"vsx_xvcvspsxws\"\n+  [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n+\t\t     UNSPEC_VSX_XVCVSPSXWS))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"xvcvspsxws %x0,%x1\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n+;; convert vector of 64-bit floating point numbers to vector of\n+;; 64-bit unsigned integer\n (define_expand \"vsx_xvcvdpuxds_scale\"\n   [(match_operand:V2DI 0 \"vsx_register_operand\" \"\")\n    (match_operand:V2DF 1 \"vsx_register_operand\" \"\")\n@@ -1893,6 +1910,16 @@\n   DONE;\n })\n \n+;; convert vector of 32-bit floating point numbers to vector of\n+;; 32-bit unsigned integer\n+(define_insn \"vsx_xvcvspuxws\"\n+  [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n+\t\t     UNSPEC_VSX_XVCVSPSXWS))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"xvcvspuxws %x0,%x1\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n (define_insn \"vsx_xvcvdpuxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n         (unspec:V2DI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")]\n@@ -2137,6 +2164,173 @@\n   DONE;\n })\n \n+;; Generate vsigned2\n+;; convert two double float vectors to a vector of single precision ints\n+(define_expand \"vsigned2_v2df\"\n+  [(match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+   (unspec:V4SI [(match_operand:V2DF 1 \"register_operand\" \"wa\")\n+\t\t (match_operand:V2DF 2 \"register_operand\" \"wa\")]\n+  UNSPEC_VSX_VSIGNED2)]\n+  \"TARGET_VSX\"\n+{\n+  rtx rtx_src1, rtx_src2, rtx_dst;\n+  bool signed_convert=true;\n+\n+  rtx_dst = operands[0];\n+  rtx_src1 = operands[1];\n+  rtx_src2 = operands[2];\n+\n+  rs6000_generate_vsigned2_code (signed_convert, rtx_dst, rtx_src1, rtx_src2);\n+  DONE;\n+})\n+\n+;; Generate vsignedo_v2df\n+;; signed double float to int convert odd word\n+(define_expand \"vsignedo_v2df\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(match_operand:V2DF 1 \"register_operand\" \"wa\"))]\n+  \"TARGET_VSX\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (12);\n+      rtx_tmp = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_vsx_xvcvdpsxws (rtx_tmp, operands[1]));\n+\n+      /* Big endian word numbering for words in operand is 0 1 2 3.\n+\t take (operand[1] operand[1]) and shift left one word\n+\t 0 1 2 3    0 1 2 3  =>  1 2 3 0\n+\t Words 1 and 3 are now are now where they need to be for result.  */\n+\n+      emit_insn (gen_altivec_vsldoi_v4si (operands[0], rtx_tmp,\n+\t\t rtx_tmp, rtx_val));\n+    }\n+  else\n+    /* Little endian word numbering for operand is 3 2 1 0.\n+       Result words 3 and 1 are where they need to be.  */\n+    emit_insn (gen_vsx_xvcvdpsxws (operands[0], operands[1]));\n+\n+  DONE;\n+}\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+;; Generate vsignede_v2df\n+;; signed double float to int even word\n+(define_expand \"vsignede_v2df\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n+  \"TARGET_VSX\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    /* Big endian word numbering for words in operand is 0 1\n+       Result words 0 is where they need to be.  */\n+    emit_insn (gen_vsx_xvcvdpsxws (operands[0], operands[1]));\n+\n+  else\n+    {\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (12);\n+      rtx_tmp = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_vsx_xvcvdpsxws (rtx_tmp, operands[1]));\n+\n+      /* Little endian word numbering for operand is 3 2 1 0.\n+\t take (operand[1] operand[1]) and shift left three words\n+\t 0 1 2 3   0 1 2 3  =>  3 0 1 2\n+\t Words 0 and 2 are now where they need to be for the result.  */\n+      emit_insn (gen_altivec_vsldoi_v4si (operands[0], rtx_tmp,\n+\t\t rtx_tmp, rtx_val));\n+    }\n+  DONE;\n+}\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+;; Generate unsigned2\n+;; convert two double float vectors to a vector of single precision\n+;; unsigned ints\n+(define_expand \"vunsigned2_v2df\"\n+[(match_operand:V4SI 0 \"register_operand\" \"=v\")\n+ (unspec:V4SI [(match_operand:V2DF 1 \"register_operand\" \"v\")\n+\t       (match_operand:V2DF 2 \"register_operand\" \"v\")]\n+\t      UNSPEC_VSX_VSIGNED2)]\n+ \"TARGET_VSX\"\n+{\n+  rtx rtx_src1, rtx_src2, rtx_dst;\n+  bool signed_convert=false;\n+\n+  rtx_dst = operands[0];\n+  rtx_src1 = operands[1];\n+  rtx_src2 = operands[2];\n+\n+  rs6000_generate_vsigned2_code (signed_convert, rtx_dst, rtx_src1, rtx_src2);\n+  DONE;\n+})\n+\n+;; Generate vunsignedo_v2df\n+;; unsigned double float to int convert odd word\n+(define_expand \"vunsignedo_v2df\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n+  \"TARGET_VSX\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    {\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (12);\n+      rtx_tmp = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_vsx_xvcvdpuxws (rtx_tmp, operands[1]));\n+\n+      /* Big endian word numbering for words in operand is 0 1 2 3.\n+\t take (operand[1] operand[1]) and shift left one word\n+\t 0 1 2 3    0 1 2 3  =>  1 2 3 0\n+\t Words 1 and 3 are now are now where they need to be for result.  */\n+\n+      emit_insn (gen_altivec_vsldoi_v4si (operands[0], rtx_tmp,\n+\t\t rtx_tmp, rtx_val));\n+    }\n+  else\n+    /* Little endian word numbering for operand is 3 2 1 0.\n+       Result words 3 and 1 are where they need to be.  */\n+    emit_insn (gen_vsx_xvcvdpuxws (operands[0], operands[1]));\n+\n+  DONE;\n+}\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n+;; Generate vunsignede_v2df\n+;; unsigned double float to int even word\n+(define_expand \"vunsignede_v2df\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n+  \"TARGET_VSX\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    /* Big endian word numbering for words in operand is 0 1\n+       Result words 0 is where they need to be.  */\n+    emit_insn (gen_vsx_xvcvdpuxws (operands[0], operands[1]));\n+\n+  else\n+    {\n+      rtx rtx_tmp;\n+      rtx rtx_val = GEN_INT (12);\n+      rtx_tmp = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_vsx_xvcvdpuxws (rtx_tmp, operands[1]));\n+\n+      /* Little endian word numbering for operand is 3 2 1 0.\n+\t take (operand[1] operand[1]) and shift left three words\n+\t 0 1 2 3   0 1 2 3  =>  3 0 1 2\n+\t Words 0 and 2 are now where they need to be for the result.  */\n+      emit_insn (gen_altivec_vsldoi_v4si (operands[0], rtx_tmp,\n+\t\t rtx_tmp, rtx_val));\n+    }\n+  DONE;\n+}\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n ;; Only optimize (float (fix x)) -> frz if we are in fast-math mode, since\n ;; since the xvrdpiz instruction does not truncate the value if the floating\n ;; point value is < LONG_MIN or > LONG_MAX."}, {"sha": "84150ccf144debfef689ed48e3cc21a83dbb2c3a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -16658,6 +16658,13 @@ vector bool char vec_sel (vector bool char,\n                           vector bool char,\n                           vector unsigned char);\n \n+vector signed long long vec_signed (vector double);\n+vector signed int vec_signed (vector float);\n+\n+vector signed int vec_signede (vector double);\n+vector signed int vec_signedo (vector double);\n+vector signed int vec_signed2 (vector double, vector double);\n+\n vector signed char vec_sl (vector signed char,\n                            vector unsigned char);\n vector unsigned char vec_sl (vector unsigned char,\n@@ -17186,6 +17193,13 @@ vector signed int vec_sums (vector signed int, vector signed int);\n \n vector float vec_trunc (vector float);\n \n+vector signed long long vec_unsigned (vector double);\n+vector signed int vec_unsigned (vector float);\n+\n+vector signed int vec_unsignede (vector double);\n+vector signed int vec_unsignedo (vector double);\n+vector signed int vec_unsigned2 (vector double, vector double);\n+\n vector signed short vec_unpackh (vector signed char);\n vector bool short vec_unpackh (vector bool char);\n vector signed int vec_unpackh (vector signed short);"}, {"sha": "49a84d64e55c01447f68a2d05d2239439d2023cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -1,3 +1,11 @@\n+2017-06-29  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3-runnable.c (test_int_result,\n+\ttest_unsigned_int_result, test_ll_int_result,\n+\ttest_ll_unsigned_int_result): Add result checking functions, add\n+\tdebug support.\n+\t(main): Add builtin function tests.\n+\n 2017-06-29  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-3-vec_reve-runnable.c (dg-options,"}, {"sha": "17bb9b3225ba537460339ba9e0c6bce723e09b9f", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-runnable.c", "status": "modified", "additions": 210, "deletions": 19, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5898daf4cd10d161d6f768cd31fb26e1dd60051/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c?ref=e5898daf4cd10d161d6f768cd31fb26e1dd60051", "patch": "@@ -5,53 +5,181 @@\n \n #include <altivec.h> // vector\n \n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n #define ALL  1\n #define EVEN 2\n #define ODD  3\n \n void abort (void);\n \n-void test_result_sp(int check, vector float vec_result, vector float vec_expected)\n+void test_int_result(int check, vector int vec_result, vector int vec_expected)\n {\n \tint i;\n-\tfor(i = 0; i<4; i++) {\n \n-\tswitch (check) {\n-\tcase ALL:\n-\t\tbreak;\n-\tcase EVEN:\n-\t\tif (i%2 == 0)\n+\tfor (i = 0; i < 4; i++) {\n+\t\tswitch (check) {\n+\t\tcase ALL:\n \t\t\tbreak;\n-\t\telse\n-\t\t\tcontinue;\n-\tcase ODD:\n-\t\tif (i%2 != 0)\n+\t\tcase EVEN:\n+\t\t\tif (i%2 == 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\tcase ODD:\n+\t\t\tif (i%2 != 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (vec_result[i] != vec_expected[i]) {\n+#ifdef DEBUG\n+\t\t\tprintf(\"Test_int_result: \");\n+\t\t\tprintf(\"vec_result[%d] (%d) != vec_expected[%d] (%d)\\n\",\n+\t\t\t       i, vec_result[i], i, vec_expected[i]);\n+#else\n+\t\t\tabort();\n+#endif\n+\t\t}\n+\t}\n+}\n+\n+void test_unsigned_int_result(int check, vector unsigned int vec_result,\n+\t\t\t      vector unsigned int vec_expected)\n+{\n+\tint i;\n+\n+\tfor (i = 0; i < 4; i++) {\n+\t\tswitch (check) {\n+\t\tcase ALL:\n \t\t\tbreak;\n-\t\telse\n-\t\t\tcontinue;\n+\t\tcase EVEN:\n+\t\t\tif (i%2 == 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\tcase ODD:\n+\t\t\tif (i%2 != 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (vec_result[i] != vec_expected[i]) {\n+#ifdef DEBUG\n+\t\t\tprintf(\"Test_unsigned int_result: \");\n+\t\t\tprintf(\"vec_result[%d] (%d) != vec_expected[%d] (%d)\\n\",\n+\t\t\t       i, vec_result[i], i, vec_expected[i]);\n+#else\n+\t\t\tabort();\n+#endif\n+\t\t}\n+\n \t}\n+}\n \n-\tif (vec_result[i] != vec_expected[i])\n-\t\tabort();\n+void test_ll_int_result(vector long long int vec_result,\n+\t\t\tvector long long int vec_expected)\n+{\n+\tint i;\n+\n+\tfor (i = 0; i < 2; i++)\n+\t\tif (vec_result[i] != vec_expected[i]) {\n+#ifdef DEBUG\n+\t\t\tprintf(\"Test_ll_int_result: \");\n+\t\t\tprintf(\"vec_result[%d] (%lld) != vec_expected[%d] (%lld)\\n\",\n+\t\t\t       i, vec_result[i], i, vec_expected[i]);\n+#else\n+\t\t\tabort();\n+#endif\n+\t\t}\n+}\n+\n+void test_ll_unsigned_int_result(vector long long unsigned int vec_result,\n+\t\t\t\t vector long long unsigned int vec_expected)\n+{\n+\tint i;\n+\n+\tfor (i = 0; i < 2; i++)\n+\t\tif (vec_result[i] != vec_expected[i]) {\n+#ifdef DEBUG\n+\t\t\tprintf(\"Test_ll_unsigned_int_result: \");\n+\t\t\tprintf(\"vec_result[%d] (%lld) != vec_expected[%d] (%lld)\\n\",\n+\t\t\t       i, vec_result[i], i, vec_expected[i]);\n+#else\n+\t\t\tabort();\n+#endif\n+\t\t}\n+}\n+\n+void test_result_sp(int check, vector float vec_result,\n+\t\t    vector float vec_expected)\n+{\n+\tint i;\n+\tfor(i = 0; i<4; i++) {\n+\n+\t\tswitch (check) {\n+\t\tcase ALL:\n+\t\t\tbreak;\n+\t\tcase EVEN:\n+\t\t\tif (i%2 == 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\tcase ODD:\n+\t\t\tif (i%2 != 0)\n+\t\t\t\tbreak;\n+\t\t\telse\n+\t\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (vec_result[i] != vec_expected[i]) {\n+#ifdef DEBUG\n+\t\t\tprintf(\"Test_result_sp: \");\n+\t\t\tprintf(\"vec_result[%d] (%lld) != vec_expected[%d] (%lld)\\n\",\n+\t\t\t       i, vec_result[i], i, vec_expected[i]);\n+#else\n+\t\t\tabort();\n+#endif\n+\t\t}\n \t}\n }\n \n void test_result_dp(vector double vec_result, vector double vec_expected)\n {\n-\tif (vec_result[0] != vec_expected[0])\n+\tif (vec_result[0] != vec_expected[0]) {\n+#ifdef DEBUG\n+\t\tprintf(\"Test_result_dp: \");\n+\t\tprintf(\"vec_result[0] (%lld) != vec_expected[0] (%lld)\\n\",\n+\t\t       vec_result[0], vec_expected[0]);\n+#else\n \t\tabort();\n+#endif\n+\t}\n \n-\tif (vec_result[1] != vec_expected[1])\n+\tif (vec_result[1] != vec_expected[1]) {\n+#ifdef DEBUG\n+\t\tprintf(\"Test_result_dp: \");\n+\t\tprintf(\"vec_result[1] (%lld) != vec_expected[1] (%lld)\\n\",\n+\t\t       vec_result[1], vec_expected[1]);\n+#else\n \t\tabort();\n+#endif\n+\t}\n }\n \n int main()\n {\n \tint i;\n-\tvector unsigned int vec_unint;\n-\tvector signed int vec_int;\n+\tvector unsigned int vec_unint, vec_uns_int_expected, vec_uns_int_result;\n+\tvector signed int vec_int, vec_int_expected, vec_int_result;\n \tvector long long int vec_ll_int0, vec_ll_int1;\n+\tvector long long int vec_ll_int_expected, vec_ll_int_result;\n \tvector long long unsigned int vec_ll_uns_int0, vec_ll_uns_int1;\n+\tvector long long unsigned int vec_ll_uns_int_expected, vec_ll_uns_int_result;\n \tvector float  vec_flt, vec_flt_result, vec_flt_expected;\n \tvector double vec_dble0, vec_dble1, vec_dble_result, vec_dble_expected;\n \n@@ -163,4 +291,67 @@ int main()\n \tvec_flt_expected = (vector float){0.00, 34.00, 0.00, 97.00};\n \tvec_flt_result = vec_floato (vec_dble0);\n \ttest_result_sp(ODD, vec_flt_result, vec_flt_expected);\n+\n+\t/* Convert single precision float to int */\n+\tvec_flt = (vector float){-14.30, 34.00, 22.00, 97.00};\n+\tvec_int_expected = (vector signed int){-14, 34, 22, 97};\n+\tvec_int_result = vec_signed (vec_flt);\n+\ttest_int_result (ALL, vec_int_result, vec_int_expected);\n+\n+\t/* Convert double precision float to long long int */\n+\tvec_dble0 = (vector double){-124.930, 81234.49};\n+\tvec_ll_int_expected = (vector long long signed int){-124, 81234};\n+\tvec_ll_int_result = vec_signed (vec_dble0);\n+\ttest_ll_int_result (vec_ll_int_result, vec_ll_int_expected);\n+\n+\t/* Convert two double precision vector float to vector int */\n+\tvec_dble0 = (vector double){-124.930, 81234.49};\n+\tvec_dble1 = (vector double){-24.370, 8354.99};\n+\tvec_int_expected = (vector signed int){-124, 81234, -24, 8354};\n+\tvec_int_result = vec_signed2 (vec_dble0, vec_dble1);\n+\ttest_int_result (ALL, vec_int_result, vec_int_expected);\n+\n+\t/* Convert double precision vector float to vector int, even words */\n+\tvec_dble0 = (vector double){-124.930, 81234.49};\n+\tvec_int_expected = (vector signed int){-124, 0, 81234, 0};\n+\tvec_int_result = vec_signede (vec_dble0);\n+\ttest_int_result (EVEN, vec_int_result, vec_int_expected);\n+\n+\t/* Convert double precision vector float to vector int, odd words */\n+\tvec_dble0 = (vector double){-124.930, 81234.49};\n+\tvec_int_expected = (vector signed int){0, -124, 0, 81234};\n+\tvec_int_result = vec_signedo (vec_dble0);\n+\ttest_int_result (ODD, vec_int_result, vec_int_expected);\n+\n+\t/* Convert double precision float to long long unsigned int */\n+\tvec_dble0 = (vector double){124.930, 8134.49};\n+\tvec_ll_uns_int_expected = (vector long long unsigned int){124, 8134};\n+\tvec_ll_uns_int_result = vec_unsigned (vec_dble0);\n+\ttest_ll_unsigned_int_result (vec_ll_uns_int_result,\n+\t\t\t\t     vec_ll_uns_int_expected);\n+\n+\t/* Convert two double precision vector float to vector unsigned int */\n+\tvec_dble0 = (vector double){124.930, 8134.49};\n+\tvec_dble1 = (vector double){24.370, 834.99};\n+\tvec_uns_int_expected = (vector unsigned int){124, 8134, 24, 834};\n+\tvec_uns_int_result = vec_unsigned2 (vec_dble0, vec_dble1);\n+\ttest_unsigned_int_result (ALL, vec_uns_int_result,\n+\t\t\t\t  vec_uns_int_expected);\n+\n+\t/* Convert double precision vector float to vector unsigned int,\n+\t   even words */\n+\tvec_dble0 = (vector double){3124.930, 8234.49};\n+\tvec_uns_int_expected = (vector unsigned int){3124, 0, 8234, 0};\n+\tvec_uns_int_result = vec_unsignede (vec_dble0);\n+\ttest_unsigned_int_result (EVEN, vec_uns_int_result,\n+\t\t\t\t  vec_uns_int_expected);\n+\n+\t/* Convert double precision vector float to vector unsigned int,\n+\t   odd words */\n+\tvec_dble0 = (vector double){1924.930, 81234.49};\n+\tvec_uns_int_expected = (vector unsigned int){0, 1924, 0, 81234};\n+\tvec_uns_int_result = vec_unsignedo (vec_dble0);\n+\ttest_unsigned_int_result (ODD, vec_uns_int_result,\n+\t\t\t\t  vec_uns_int_expected);\n }\n+"}]}