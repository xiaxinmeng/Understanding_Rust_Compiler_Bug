{"sha": "121b312b9074813750141689cf9359576da87d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxYjMxMmI5MDc0ODEzNzUwMTQxNjg5Y2Y5MzU5NTc2ZGE4N2Q4MQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1994-08-15T15:51:03Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1994-08-15T15:51:03Z"}, "message": "encoding.c (objc_sizeof_type): Should assign from ROUND, not increment.\n\n\t* objc/encoding.c (objc_sizeof_type): Should assign from ROUND,\n\tnot increment.  Remove ; after while to fix infinite loop.\n\tAdd support for floats and doubles.\n\t(objc_alignof_type):  Add support for floats and doubles.\n\t* objc/selector.c (): Use __objc_selector_names, not\n\t__objc_selector_array.\n\t(sel_types_match): New function.\n\t(sel_get_typed_uid): Modified to use sel_types_match, so that we\n\tcan get typed selectors in an architecture-independent way.  Fixed\n\tstrcmp that should have been !strcmp.\n\nFrom-SVN: r7928", "tree": {"sha": "ccc6608f862459a0eaa667d2c3dfb0c45ea966b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc6608f862459a0eaa667d2c3dfb0c45ea966b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121b312b9074813750141689cf9359576da87d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121b312b9074813750141689cf9359576da87d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121b312b9074813750141689cf9359576da87d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121b312b9074813750141689cf9359576da87d81/comments", "author": null, "committer": null, "parents": [{"sha": "6b2821189ae15b06dd37875e4ed64b6630de2b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2821189ae15b06dd37875e4ed64b6630de2b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2821189ae15b06dd37875e4ed64b6630de2b6a"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "5f7ac213dfb209f20fa75f2e16787e3f06f46720", "filename": "gcc/objc/selector.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121b312b9074813750141689cf9359576da87d81/gcc%2Fobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121b312b9074813750141689cf9359576da87d81/gcc%2Fobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fselector.c?ref=121b312b9074813750141689cf9359576da87d81", "patch": "@@ -26,6 +26,7 @@ You should have received a copy of the GNU General Public License along with\n \n #include \"runtime.h\"\n #include \"objc/sarray.h\"\n+#include \"encoding.h\"\n \n /* Initial selector hash table size. Value doesnt matter much */\n #define SELECTOR_HASH_SIZE 128\n@@ -87,6 +88,34 @@ register_selectors_from_list (MethodList_t method_list)\n     }\n }\n \n+\n+/* Returns YES iff t1 and t2 have same method types, but we ignore\n+   the argframe layout */\n+BOOL\n+sel_types_match (const char* t1, const char* t2)\n+{\n+  if (!t1 || !t2)\n+    return NO;\n+  while (*t1 && *t2)\n+    {\n+      if (*t1 == '+') t1++;\n+      if (*t2 == '+') t2++;\n+      while (isdigit(*t1)) t1++;\n+      while (isdigit(*t2)) t2++;\n+      /* xxx Remove these next two lines when qualifiers are put in\n+\t all selectors, not just Protocol selectors. */\n+      t1 = objc_skip_type_qualifiers(t1);\n+      t2 = objc_skip_type_qualifiers(t2);\n+      if (!*t1 && !*t2)\n+\treturn YES;\n+      if (*t1 != *t2)\n+\treturn NO;\n+      t1++;\n+      t2++;\n+    }\n+  return NO;\n+}\n+\n /* return selector representing name */\n SEL\n sel_get_typed_uid (const char *name, const char *types)\n@@ -109,7 +138,7 @@ sel_get_typed_uid (const char *name, const char *types)\n \t      return s;\n \t    }\n \t}\n-      else if (! strcmp (s->sel_types, types))\n+      else if (sel_types_match (s->sel_types, types))\n \t{\n \t  return s;\n \t}\n@@ -150,7 +179,7 @@ sel_get_name (SEL selector)\n {\n   if ((soffset_decode((sidx)selector->sel_id) > 0)\n       && (soffset_decode((sidx)selector->sel_id) <= __objc_selector_max_index))\n-    return sarray_get (__objc_selector_array, (sidx) selector->sel_id);\n+    return sarray_get (__objc_selector_names, (sidx) selector->sel_id);\n   else\n     return 0;\n }\n@@ -205,7 +234,7 @@ __sel_register_typed_name (const char *name, const char *types,\n \t\t    return s;\n \t\t}\n \t    }\n-\t  else if (strcmp (s->sel_types, types))\n+\t  else if (!strcmp (s->sel_types, types))\n \t    {\n \t      if (orig)\n \t\t{"}]}