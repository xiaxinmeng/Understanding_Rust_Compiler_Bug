{"sha": "94fc547cecfe31473d5db4dec66e4be9f0a797f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmYzU0N2NlY2ZlMzE0NzNkNWRiNGRlYzY2ZTRiZTlmMGE3OTdmNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-01T20:46:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-01T20:46:08Z"}, "message": "re PR c++/5919 (ICE when passing variable array to template function)\n\n\tPR c++/5919\n\t* g++.dg/template/varmod1.C: New test.\n\n\tPR c++/5919\n\t* pt.c (unify): Use variably_modified_type_p to test validity of\n\ttemplate argument types.\n\nFrom-SVN: r59698", "tree": {"sha": "9d31a0fdd8168751516c3447f11d0dac0956f113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d31a0fdd8168751516c3447f11d0dac0956f113"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94fc547cecfe31473d5db4dec66e4be9f0a797f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fc547cecfe31473d5db4dec66e4be9f0a797f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94fc547cecfe31473d5db4dec66e4be9f0a797f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fc547cecfe31473d5db4dec66e4be9f0a797f4/comments", "author": null, "committer": null, "parents": [{"sha": "a82d6da5fcc41ade40261bca65c7717686c1ac9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82d6da5fcc41ade40261bca65c7717686c1ac9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82d6da5fcc41ade40261bca65c7717686c1ac9f"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "da4f5977ddaee3f27ad71f188cb80f70a8bc273d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94fc547cecfe31473d5db4dec66e4be9f0a797f4", "patch": "@@ -1,5 +1,9 @@\n 2002-12-01  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/5919\n+\t* pt.c (unify): Use variably_modified_type_p to test validity of\n+\ttemplate argument types.\n+\t\n \tPR c++/8727\n \t* cp-tree.h (lang_type_class): Add typeinfo_var.\n \t(CLASSTYPE_TYPEINFO_VAR): New macro."}, {"sha": "9f1a382bfa7cafbd21ce51c4f4085809c296d09f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=94fc547cecfe31473d5db4dec66e4be9f0a797f4", "patch": "@@ -8852,21 +8852,17 @@ unify (tparms, targs, parm, arg, strict)\n \t    return 0;\n \t  else if (targ)\n \t    return 1;\n-\t}\n \n-      /* Make sure that ARG is not a variable-sized array.  (Note that\n-\t were talking about variable-sized arrays (like `int[n]'),\n-\t rather than arrays of unknown size (like `int[]').)  We'll\n-\t get very confused by such a type since the bound of the array\n-\t will not be computable in an instantiation.  Besides, such\n-\t types are not allowed in ISO C++, so we can do as we please\n-\t here.  */\n-      if (TREE_CODE (arg) == ARRAY_TYPE \n-\t  && !uses_template_parms (arg)\n-\t  && TYPE_DOMAIN (arg)\n-\t  && (TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (arg)))\n-\t      != INTEGER_CST))\n-\treturn 1;\n+\t  /* Make sure that ARG is not a variable-sized array.  (Note\n+\t     that were talking about variable-sized arrays (like\n+\t     `int[n]'), rather than arrays of unknown size (like\n+\t     `int[]').)  We'll get very confused by such a type since\n+\t     the bound of the array will not be computable in an\n+\t     instantiation.  Besides, such types are not allowed in\n+\t     ISO C++, so we can do as we please here.  */\n+\t  if (variably_modified_type_p (arg))\n+\t    return 1;\n+\t}\n \n       TREE_VEC_ELT (targs, idx) = arg;\n       return 0;"}, {"sha": "0d87d1ec168407a7067c2906a6576c78bd39a8f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94fc547cecfe31473d5db4dec66e4be9f0a797f4", "patch": "@@ -1,5 +1,8 @@\n 2002-12-01  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/5919\n+\t* g++.dg/template/varmod1.C: New test.\n+\n \tPR c++/8727\n \t* g++.dg/inherit/typeinfo1.C: New test.\n \t"}, {"sha": "21fdcb6b5299626e1e93610936b3483e78c07d3d", "filename": "gcc/testsuite/g++.dg/template/varmod1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fc547cecfe31473d5db4dec66e4be9f0a797f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvarmod1.C?ref=94fc547cecfe31473d5db4dec66e4be9f0a797f4", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-w\" }\n+\n+template<typename T> void foo(T);\n+ \n+void bar()\n+{\n+  int i;\n+  int A[i][i]; \n+  foo(A); // { dg-error } \n+}"}]}