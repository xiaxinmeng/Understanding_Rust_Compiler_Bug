{"sha": "1384d88fa9d7bb81b3e37568622f6839cd28be26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4NGQ4OGZhOWQ3YmI4MWIzZTM3NTY4NjIyZjY4MzljZDI4YmUyNg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-08-14T09:51:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:51:25Z"}, "message": "[Ada] Expose part of ownership checking for use in GNATprove\n\nGNATprove needs to be able to call a subset of the ownership legality\nrules from marking. This is provided by a new function\nSem_SPARK.Is_Legal.\n\nThere is no impact on compilation.\n\n2019-08-14  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb, sem_spark.ads (Is_Legal): New function exposed\n\tfor use in GNATprove, to test legality rules not related to\n\tpermissions.\n\t(Check_Declaration_Legality): Extract the part of\n\tCheck_Declaration that checks rules not related to permissions.\n\t(Check_Declaration): Call the new Check_Declaration_Legality.\n\t(Check_Type_Legality): Rename of Check_Type. Introduce\n\tparameters to force or not checking, and update a flag detecting\n\tillegalities.\n\t(Check_Node): Ignore attribute references in statement position.\n\nFrom-SVN: r274454", "tree": {"sha": "7a021cf20b0f4fac191756ee5fe1f3583722cbbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a021cf20b0f4fac191756ee5fe1f3583722cbbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1384d88fa9d7bb81b3e37568622f6839cd28be26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1384d88fa9d7bb81b3e37568622f6839cd28be26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1384d88fa9d7bb81b3e37568622f6839cd28be26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1384d88fa9d7bb81b3e37568622f6839cd28be26/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05b77088c086863aa3e5c0456b9a0c0075e05a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b77088c086863aa3e5c0456b9a0c0075e05a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b77088c086863aa3e5c0456b9a0c0075e05a6d"}], "stats": {"total": 231, "additions": 198, "deletions": 33}, "files": [{"sha": "1d139475aeec6339d8afe3675874ff42c4180708", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1384d88fa9d7bb81b3e37568622f6839cd28be26", "patch": "@@ -1,3 +1,16 @@\n+2019-08-14  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_spark.adb, sem_spark.ads (Is_Legal): New function exposed\n+\tfor use in GNATprove, to test legality rules not related to\n+\tpermissions.\n+\t(Check_Declaration_Legality): Extract the part of\n+\tCheck_Declaration that checks rules not related to permissions.\n+\t(Check_Declaration): Call the new Check_Declaration_Legality.\n+\t(Check_Type_Legality): Rename of Check_Type. Introduce\n+\tparameters to force or not checking, and update a flag detecting\n+\tillegalities.\n+\t(Check_Node): Ignore attribute references in statement position.\n+\n 2019-08-14  Yannick Moy  <moy@adacore.com>\n \n \t* sem_spark.adb (Check_Old_Loop_Entry): New procedure to check"}, {"sha": "b0686b798fcaccc9f04cbb3e850829e6a3adf59d", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 179, "deletions": 33, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=1384d88fa9d7bb81b3e37568622f6839cd28be26", "patch": "@@ -637,6 +637,14 @@ package body Sem_SPARK is\n \n    procedure Check_Declaration (Decl : Node_Id);\n \n+   procedure Check_Declaration_Legality\n+     (Decl  : Node_Id;\n+      Force : Boolean;\n+      Legal : in out Boolean);\n+   --  Check the legality of declaration Decl regarding rules not related to\n+   --  permissions. Update Legal to False if a rule is violated. Issue an\n+   --  error message if Force is True and Emit_Messages returns True.\n+\n    procedure Check_Expression (Expr : Node_Id; Mode : Extended_Checking_Mode);\n    pragma Precondition (Nkind_In (Expr, N_Index_Or_Discriminant_Constraint,\n                                         N_Range_Constraint,\n@@ -686,7 +694,10 @@ package body Sem_SPARK is\n \n    procedure Check_Statement (Stmt : Node_Id);\n \n-   procedure Check_Type (Typ : Entity_Id);\n+   procedure Check_Type_Legality\n+     (Typ   : Entity_Id;\n+      Force : Boolean;\n+      Legal : in out Boolean);\n    --  Check that type Typ is either not deep, or that it is an observing or\n    --  owning type according to SPARK RM 3.10\n \n@@ -1138,11 +1149,12 @@ package body Sem_SPARK is\n       Expr_Root   : Entity_Id;\n       Perm        : Perm_Kind;\n       Status      : Error_Status;\n+      Dummy       : Boolean := True;\n \n    --  Start of processing for Check_Assignment\n \n    begin\n-      Check_Type (Target_Typ);\n+      Check_Type_Legality (Target_Typ, Force => True, Legal => Dummy);\n \n       if Is_Anonymous_Access_Type (Target_Typ) then\n          Check_Source_Of_Borrow_Or_Observe (Expr, Status);\n@@ -1410,11 +1422,18 @@ package body Sem_SPARK is\n       Target     : constant Entity_Id := Defining_Identifier (Decl);\n       Target_Typ : constant Node_Id := Etype (Target);\n       Expr       : Node_Id;\n+      Dummy      : Boolean := True;\n \n    begin\n+      --  Start with legality rules not related to permissions\n+\n+      Check_Declaration_Legality (Decl, Force => True, Legal => Dummy);\n+\n+      --  Now check permission-related legality rules\n+\n       case N_Declaration'(Nkind (Decl)) is\n          when N_Full_Type_Declaration =>\n-            Check_Type (Target);\n+            null;\n \n             --  ??? What about component declarations with defaults.\n \n@@ -1424,7 +1443,105 @@ package body Sem_SPARK is\n          when N_Object_Declaration =>\n             Expr := Expression (Decl);\n \n-            Check_Type (Target_Typ);\n+            if Present (Expr) then\n+               Check_Assignment (Target => Target,\n+                                 Expr   => Expr);\n+            end if;\n+\n+            if Is_Deep (Target_Typ) then\n+               declare\n+                  Tree : constant Perm_Tree_Access :=\n+                    new Perm_Tree_Wrapper'\n+                      (Tree =>\n+                         (Kind                => Entire_Object,\n+                          Is_Node_Deep        => True,\n+                          Explanation         => Decl,\n+                          Permission          => Read_Write,\n+                          Children_Permission => Read_Write));\n+               begin\n+                  Set (Current_Perm_Env, Target, Tree);\n+               end;\n+            end if;\n+\n+         when N_Iterator_Specification =>\n+            null;\n+\n+         when N_Loop_Parameter_Specification =>\n+            null;\n+\n+         --  Checking should not be called directly on these nodes\n+\n+         when N_Function_Specification\n+            | N_Entry_Declaration\n+            | N_Procedure_Specification\n+            | N_Component_Declaration\n+         =>\n+            raise Program_Error;\n+\n+         --  Ignored constructs for pointer checking\n+\n+         when N_Formal_Object_Declaration\n+            | N_Formal_Type_Declaration\n+            | N_Incomplete_Type_Declaration\n+            | N_Private_Extension_Declaration\n+            | N_Private_Type_Declaration\n+            | N_Protected_Type_Declaration\n+         =>\n+            null;\n+\n+         --  The following nodes are rewritten by semantic analysis\n+\n+         when N_Expression_Function =>\n+            raise Program_Error;\n+      end case;\n+   end Check_Declaration;\n+\n+   --------------------------------\n+   -- Check_Declaration_Legality --\n+   --------------------------------\n+\n+   procedure Check_Declaration_Legality\n+     (Decl  : Node_Id;\n+      Force : Boolean;\n+      Legal : in out Boolean)\n+   is\n+      function Original_Emit_Messages return Boolean renames Emit_Messages;\n+\n+      function Emit_Messages return Boolean;\n+      --  Local wrapper around generic formal parameter Emit_Messages, to\n+      --  check the value of parameter Force before calling the original\n+      --  Emit_Messages, and setting Legal to False.\n+\n+      -------------------\n+      -- Emit_Messages --\n+      -------------------\n+\n+      function Emit_Messages return Boolean is\n+      begin\n+         Legal := False;\n+         return Force and then Original_Emit_Messages;\n+      end Emit_Messages;\n+\n+      --  Local variables\n+\n+      Target     : constant Entity_Id := Defining_Identifier (Decl);\n+      Target_Typ : constant Node_Id := Etype (Target);\n+      Expr       : Node_Id;\n+\n+   --  Start of processing for Check_Declaration_Legality\n+\n+   begin\n+      case N_Declaration'(Nkind (Decl)) is\n+         when N_Full_Type_Declaration =>\n+            Check_Type_Legality (Target, Force, Legal);\n+\n+         when N_Subtype_Declaration =>\n+            null;\n+\n+         when N_Object_Declaration =>\n+            Expr := Expression (Decl);\n+\n+            Check_Type_Legality (Target_Typ, Force, Legal);\n \n             --  A declaration of a stand-alone object of an anonymous access\n             --  type shall have an explicit initial value and shall occur\n@@ -1453,26 +1570,6 @@ package body Sem_SPARK is\n                end if;\n             end if;\n \n-            if Present (Expr) then\n-               Check_Assignment (Target => Target,\n-                                 Expr   => Expr);\n-            end if;\n-\n-            if Is_Deep (Target_Typ) then\n-               declare\n-                  Tree : constant Perm_Tree_Access :=\n-                    new Perm_Tree_Wrapper'\n-                      (Tree =>\n-                         (Kind                => Entire_Object,\n-                          Is_Node_Deep        => True,\n-                          Explanation         => Decl,\n-                          Permission          => Read_Write,\n-                          Children_Permission => Read_Write));\n-               begin\n-                  Set (Current_Perm_Env, Target, Tree);\n-               end;\n-            end if;\n-\n          when N_Iterator_Specification =>\n             null;\n \n@@ -1504,7 +1601,7 @@ package body Sem_SPARK is\n          when N_Expression_Function =>\n             raise Program_Error;\n       end case;\n-   end Check_Declaration;\n+   end Check_Declaration_Legality;\n \n    ----------------------\n    -- Check_Expression --\n@@ -2668,6 +2765,12 @@ package body Sem_SPARK is\n          when N_Subprogram_Declaration =>\n             Check_Subprogram_Contract (N);\n \n+         --  Attribute references in statement position are not supported in\n+         --  SPARK and will be rejected by GNATprove.\n+\n+         when N_Attribute_Reference =>\n+            null;\n+\n          --  Ignored constructs for pointer checking\n \n          when N_Abstract_Subprogram_Declaration\n@@ -3503,13 +3606,38 @@ package body Sem_SPARK is\n       end case;\n    end Check_Statement;\n \n-   ----------------\n-   -- Check_Type --\n-   ----------------\n+   -------------------------\n+   -- Check_Type_Legality --\n+   -------------------------\n+\n+   procedure Check_Type_Legality\n+     (Typ   : Entity_Id;\n+      Force : Boolean;\n+      Legal : in out Boolean)\n+   is\n+      function Original_Emit_Messages return Boolean renames Emit_Messages;\n+\n+      function Emit_Messages return Boolean;\n+      --  Local wrapper around generic formal parameter Emit_Messages, to\n+      --  check the value of parameter Force before calling the original\n+      --  Emit_Messages, and setting Legal to False.\n+\n+      -------------------\n+      -- Emit_Messages --\n+      -------------------\n+\n+      function Emit_Messages return Boolean is\n+      begin\n+         Legal := False;\n+         return Force and then Original_Emit_Messages;\n+      end Emit_Messages;\n+\n+      --  Local variables\n \n-   procedure Check_Type (Typ : Entity_Id) is\n       Check_Typ : constant Entity_Id := Retysp (Typ);\n \n+   --  Start of processing for Check_Type_Legality\n+\n    begin\n       case Type_Kind'(Ekind (Check_Typ)) is\n          when Access_Kind =>\n@@ -3519,7 +3647,7 @@ package body Sem_SPARK is\n                =>\n                   null;\n                when E_Access_Subtype =>\n-                  Check_Type (Base_Type (Check_Typ));\n+                  Check_Type_Legality (Base_Type (Check_Typ), Force, Legal);\n                when E_Access_Attribute_Type =>\n                   if Emit_Messages then\n                      Error_Msg_N (\"access attribute not allowed in SPARK\",\n@@ -3546,7 +3674,7 @@ package body Sem_SPARK is\n          when E_Array_Type\n             | E_Array_Subtype\n          =>\n-            Check_Type (Component_Type (Check_Typ));\n+            Check_Type_Legality (Component_Type (Check_Typ), Force, Legal);\n \n          when Record_Kind =>\n             if Is_Deep (Check_Typ)\n@@ -3569,7 +3697,7 @@ package body Sem_SPARK is\n                      --  Ignore components which are not visible in SPARK\n \n                      if Component_Is_Visible_In_SPARK (Comp) then\n-                        Check_Type (Etype (Comp));\n+                        Check_Type_Legality (Etype (Comp), Force, Legal);\n                      end if;\n                      Next_Component_Or_Discriminant (Comp);\n                   end loop;\n@@ -3595,7 +3723,7 @@ package body Sem_SPARK is\n          =>\n             null;\n       end case;\n-   end Check_Type;\n+   end Check_Type_Legality;\n \n    --------------\n    -- Get_Expl --\n@@ -4141,6 +4269,24 @@ package body Sem_SPARK is\n       end case;\n    end Is_Deep;\n \n+   --------------\n+   -- Is_Legal --\n+   --------------\n+\n+   function Is_Legal (N : Node_Id) return Boolean is\n+      Legal : Boolean := True;\n+\n+   begin\n+      case Nkind (N) is\n+         when N_Declaration =>\n+            Check_Declaration_Legality (N, Force => False, Legal => Legal);\n+         when others =>\n+            null;\n+      end case;\n+\n+      return Legal;\n+   end Is_Legal;\n+\n    ----------------------\n    -- Is_Local_Context --\n    ----------------------"}, {"sha": "7c16281b9a2f3feb1841162d2af1de2d657f74a8", "filename": "gcc/ada/sem_spark.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2Fsem_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1384d88fa9d7bb81b3e37568622f6839cd28be26/gcc%2Fada%2Fsem_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.ads?ref=1384d88fa9d7bb81b3e37568622f6839cd28be26", "patch": "@@ -152,6 +152,12 @@ generic\n \n package Sem_SPARK is\n \n+   function Is_Legal (N : Node_Id) return Boolean;\n+   --  Test the legality of a node wrt ownership-checking rules. This does not\n+   --  check rules related to the validity of permissions associated with paths\n+   --  from objects, so that it can be called from GNATprove on code of library\n+   --  units analyzed in SPARK_Mode Auto.\n+\n    procedure Check_Safe_Pointers (N : Node_Id);\n    --  The entry point of this package. It analyzes a node and reports errors\n    --  when there are violations of ownership rules."}]}