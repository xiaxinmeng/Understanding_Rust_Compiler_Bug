{"sha": "9c7e898bbd643f45a553afcb5204717048205a1a", "node_id": "C_kwDOANBUbNoAKDljN2U4OThiYmQ2NDNmNDVhNTUzYWZjYjUyMDQ3MTcwNDgyMDVhMWE", "commit": {"author": {"name": "Paul-Antoine Arras", "email": "pa@codesourcery.com", "date": "2023-02-01T15:13:23Z"}, "committer": {"name": "Paul-Antoine Arras", "email": "pa@codesourcery.com", "date": "2023-02-02T15:26:19Z"}, "message": "amdgcn: Add instruction pattern for conditional shift operations\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-valu.md (cond_<expander><mode>): Add\n\tcond_{ashl|ashr|lshr}\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/gcn/cond_shift_3.c: New test.\n\t* gcc.target/gcn/cond_shift_3_run.c: New test.\n\t* gcc.target/gcn/cond_shift_4.c: New test.\n\t* gcc.target/gcn/cond_shift_4_run.c: New test.\n\t* gcc.target/gcn/cond_shift_8.c: New test.\n\t* gcc.target/gcn/cond_shift_8_run.c: New test.\n\t* gcc.target/gcn/cond_shift_9.c: New test.\n\t* gcc.target/gcn/cond_shift_9_run.c: New test.", "tree": {"sha": "76188604789967f051ac3bb18a73d2524a0f7831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76188604789967f051ac3bb18a73d2524a0f7831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c7e898bbd643f45a553afcb5204717048205a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7e898bbd643f45a553afcb5204717048205a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7e898bbd643f45a553afcb5204717048205a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7e898bbd643f45a553afcb5204717048205a1a/comments", "author": null, "committer": null, "parents": [{"sha": "cd41085a37b8288dbdfe0f81027ce04b978578f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd41085a37b8288dbdfe0f81027ce04b978578f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd41085a37b8288dbdfe0f81027ce04b978578f1"}], "stats": {"total": 279, "additions": 279, "deletions": 0}, "files": [{"sha": "47d9d87d58a395c1f06eaab1a07ca35af9dc48a9", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -3489,6 +3489,29 @@\n     DONE;\n   })\n \n+(define_code_iterator cond_shiftop [ashift lshiftrt ashiftrt])\n+\n+(define_expand \"cond_<expander><mode>\"\n+  [(match_operand:V_INT_noHI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (cond_shiftop:V_INT_noHI\n+     (match_operand:V_INT_noHI 2 \"gcn_alu_operand\")\n+     (match_operand:V_INT_noHI 3 \"gcn_alu_operand\"))\n+   (match_operand:V_INT_noHI 4 \"register_operand\")]\n+  \"\"\n+  {\n+    operands[1] = force_reg (DImode, operands[1]);\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+\n+    rtx shiftby = gen_reg_rtx (<VnSI>mode);\n+    convert_move (shiftby, operands[3], 0);\n+\n+    emit_insn (gen_v<expander><mode>3_exec (operands[0], operands[2],\n+                                            shiftby, operands[4],\n+                                            operands[1]));\n+    DONE;\n+  })\n+\n ;; }}}\n ;; {{{ Vector reductions\n "}, {"sha": "983386c146461193d350c9cb06f35e9511912c90", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)                                               \\\n+  void __attribute__ ((noipa))                                                 \\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,                \\\n+\t\t\tTYPE *__restrict b, int n)                             \\\n+  {                                                                            \\\n+    for (int i = 0; i < n; ++i)                                                \\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : 72;                                       \\\n+  }\n+\n+#define TEST_TYPE(T, TYPE)                                                     \\\n+  T (TYPE, shl, <<)                                                            \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T)                                                            \\\n+  TEST_TYPE (T, int32_t)                                                       \\\n+  TEST_TYPE (T, uint32_t)                                                      \\\n+  TEST_TYPE (T, int64_t)                                                       \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tv_lshlrev_b32\\tv[0-9]+, 3, v[0-9]+} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_ashrrev_i32\\tv[0-9]+, 3, v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64si3_exec} 18 } } */\n+/* { dg-final { scan-assembler-times {vashrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64di3_exec} 2 } } */\n+/* { dg-final { scan-assembler-times {vashrv64di3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64di3_exec} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {v_cndmask_b32} } } */\n+/* { dg-final { scan-assembler-not {movv64di_exec/2} } } */"}, {"sha": "8f89918e8ac8327632ca01445ac29ac860d6bdbe", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_3_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_3_run.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : 72))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "c610363d9df2b5e7a54800724a9674456c45a116", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : 0;\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tv_lshlrev_b32\\tv[0-9]+, 3, v[0-9]+} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tv_ashrrev_i32\\tv[0-9]+, 3, v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64si3_exec} 18 } } */\n+/* { dg-final { scan-assembler-times {vashrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64di3_exec} 2 } } */\n+/* { dg-final { scan-assembler-times {vashrv64di3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64di3_exec} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {v_cndmask_b32} } } */\n+/* { dg-final { scan-assembler-not {movv64di_exec/2} } } */\n+"}, {"sha": "6017d68e8201b3ff2be62f78ad402562493586c1", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_4_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_4_run.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : 0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "0749e2e5e5378747ff89ae6b61ef87127b811995", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_8.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : 91;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {vashlv64si3_exec} 18 } } */\n+/* { dg-final { scan-assembler-times {vashrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64di3_exec} 2 } } */\n+/* { dg-final { scan-assembler-times {vashrv64di3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64di3_exec} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {movv64si_exec/0} } } */\n+/* { dg-final { scan-assembler-not {movv64di_exec/0} } } */"}, {"sha": "13da01975693a562d857227de89195d1f127dadd", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_8_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_8_run.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_8.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : 91))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "61aba27504e65b364d1bb12c2914d02e68b7937f", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_9.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -dp\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : 0;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {vashlv64si3_exec} 18 } } */\n+/* { dg-final { scan-assembler-times {vashrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vashlv64di3_exec} 2 } } */\n+/* { dg-final { scan-assembler-times {vashrv64di3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64si3_exec} 1 } } */\n+/* { dg-final { scan-assembler-times {vlshrv64di3_exec} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {v_cndmask_b32} } } */\n+/* { dg-final { scan-assembler-not {movv64si_exec/2} } } */\n+/* { dg-final { scan-assembler-not {movv64di_exec/1} } } */"}, {"sha": "de8e010bdab5fb3c4697072e3408421a0d3e732c", "filename": "gcc/testsuite/gcc.target/gcn/cond_shift_9_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c7e898bbd643f45a553afcb5204717048205a1a/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Fcond_shift_9_run.c?ref=9c7e898bbd643f45a553afcb5204717048205a1a", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_9.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : 0))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}