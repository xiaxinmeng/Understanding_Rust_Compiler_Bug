{"sha": "e8dde8759781d78310905ed3c2fb8b78e84964a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkZGU4NzU5NzgxZDc4MzEwOTA1ZWQzYzJmYjhiNzhlODQ5NjRhOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:37:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:37:25Z"}, "message": "[multiple changes]\n\n2012-10-01  Vincent Pucci  <pucci@adacore.com>\n\n\t* system-solaris-sparcv9.ads, system-mingw.ads, system-vms_64.ads: Flag\n\tSupport_Atomic_Primitives set to True.\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* impunit.adb: Ada.Locales is a language defined unit.\n\n2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Apply_Parameter_Aliasing_Checks): Removed.\n\t(Apply_Parameter_Aliasing_And_Validity_Checks): New routine.\n\t(Apply_Parameter_Validity_Checks): Removed.\n\t* checks.ads (Apply_Parameter_Aliasing_Checks): Removed.\n\t(Apply_Parameter_Aliasing_And_Validity_Checks): New routine.\n\t(Apply_Parameter_Validity_Checks): Removed.\n\t* exp_ch6.adb (Expand_Call): Remove the generation of parameter\n\taliasing checks.\n\t* freeze.adb: Remove with and use clauses for Validsw.\n\t(Freeze_Entity): Update the guard and generation of aliasing\n\tand scalar initialization checks for subprogram parameters.\n\t* opt.ads: Add new flags Check_Aliasing_Of_Parameters and\n\tCheck_Validity_Of_Parameters along with comments on usage.\n\t* sem_attr.adb (Analyze_Attribute): Pragma Overlaps_Storage is\n\tno longer an Ada 2012 feature.\n\t* sem_ch4.adb: Remove with and use clauses for Checks and Validsw.\n\t(Analyze_Call): Remove the generation of aliasing checks for\n\tsubprogram parameters.\n\t* sem_ch13.adb: Remove with and use clauses for Validsw.\n\t(Analyze_Aspect_Specifications): Remove the generation of scalar\n\tinitialization checks.\n\t* switch-c.adb (Scan_Front_End_Switches): Add processing for\n\t-gnateA and -gnateV.\n\t* usage.adb (Usage): Add information on switches -gnateA and\n\t-gnateV. Remove information on validity switches 'l', 'L',\n\t'v' and 'V'.\n\t* validsw.adb (Reset_Validity_Check_Options): Remove the\n\treset of flags Validity_Check_Non_Overlapping_Params\n\tand Validity_Check_Valid_Scalars_On_Params.\n\t(Save_Validity_Check_Options): Remove the processing\n\tfor flags Validity_Check_Non_Overlapping_Params\n\tand Validity_Check_Valid_Scalars_On_Params.\n\t(Set_Validity_Check_Options): Remove the processing\n\tfor flags Validity_Check_Non_Overlapping_Params and\n\tValidity_Check_Valid_Scalars_On_Params.\n\t* validsw.ads: Remove flags Validity_Check_Non_Overlapping_Params\n\tand Validity_Check_Valid_Scalars_On_Params along with their\n\tcomments on usage.\n\nFrom-SVN: r191900", "tree": {"sha": "efe1cf74cc286ad84a604fb33d2a19a2672b1970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efe1cf74cc286ad84a604fb33d2a19a2672b1970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8dde8759781d78310905ed3c2fb8b78e84964a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dde8759781d78310905ed3c2fb8b78e84964a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8dde8759781d78310905ed3c2fb8b78e84964a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dde8759781d78310905ed3c2fb8b78e84964a9/comments", "author": null, "committer": null, "parents": [{"sha": "7bd76b9c7aeff03ae44113a0b69404e7d7d9662c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd76b9c7aeff03ae44113a0b69404e7d7d9662c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd76b9c7aeff03ae44113a0b69404e7d7d9662c"}], "stats": {"total": 735, "additions": 309, "deletions": 426}, "files": [{"sha": "06be8c91b191f09273622563d2ffb7d98c388c8f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -1,3 +1,53 @@\n+2012-10-01  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* system-solaris-sparcv9.ads, system-mingw.ads, system-vms_64.ads: Flag\n+\tSupport_Atomic_Primitives set to True.\n+\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* impunit.adb: Ada.Locales is a language defined unit.\n+\n+2012-10-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Apply_Parameter_Aliasing_Checks): Removed.\n+\t(Apply_Parameter_Aliasing_And_Validity_Checks): New routine.\n+\t(Apply_Parameter_Validity_Checks): Removed.\n+\t* checks.ads (Apply_Parameter_Aliasing_Checks): Removed.\n+\t(Apply_Parameter_Aliasing_And_Validity_Checks): New routine.\n+\t(Apply_Parameter_Validity_Checks): Removed.\n+\t* exp_ch6.adb (Expand_Call): Remove the generation of parameter\n+\taliasing checks.\n+\t* freeze.adb: Remove with and use clauses for Validsw.\n+\t(Freeze_Entity): Update the guard and generation of aliasing\n+\tand scalar initialization checks for subprogram parameters.\n+\t* opt.ads: Add new flags Check_Aliasing_Of_Parameters and\n+\tCheck_Validity_Of_Parameters along with comments on usage.\n+\t* sem_attr.adb (Analyze_Attribute): Pragma Overlaps_Storage is\n+\tno longer an Ada 2012 feature.\n+\t* sem_ch4.adb: Remove with and use clauses for Checks and Validsw.\n+\t(Analyze_Call): Remove the generation of aliasing checks for\n+\tsubprogram parameters.\n+\t* sem_ch13.adb: Remove with and use clauses for Validsw.\n+\t(Analyze_Aspect_Specifications): Remove the generation of scalar\n+\tinitialization checks.\n+\t* switch-c.adb (Scan_Front_End_Switches): Add processing for\n+\t-gnateA and -gnateV.\n+\t* usage.adb (Usage): Add information on switches -gnateA and\n+\t-gnateV. Remove information on validity switches 'l', 'L',\n+\t'v' and 'V'.\n+\t* validsw.adb (Reset_Validity_Check_Options): Remove the\n+\treset of flags Validity_Check_Non_Overlapping_Params\n+\tand Validity_Check_Valid_Scalars_On_Params.\n+\t(Save_Validity_Check_Options): Remove the processing\n+\tfor flags Validity_Check_Non_Overlapping_Params\n+\tand Validity_Check_Valid_Scalars_On_Params.\n+\t(Set_Validity_Check_Options): Remove the processing\n+\tfor flags Validity_Check_Non_Overlapping_Params and\n+\tValidity_Check_Valid_Scalars_On_Params.\n+\t* validsw.ads: Remove flags Validity_Check_Non_Overlapping_Params\n+\tand Validity_Check_Valid_Scalars_On_Params along with their\n+\tcomments on usage.\n+\n 2012-10-01  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch13.adb (Add_Invariants): Analyze the invariant expression"}, {"sha": "885a5686c604a24e4ba3127c92451a4963f6515e", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 149, "deletions": 273, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -1774,263 +1774,60 @@ package body Checks is\n         (Ck_Node, Target_Typ, Source_Typ, Do_Static => False);\n    end Apply_Length_Check;\n \n-   -------------------------------------\n-   -- Apply_Parameter_Aliasing_Checks --\n-   -------------------------------------\n-\n-   procedure Apply_Parameter_Aliasing_Checks (Call : Node_Id) is\n-      Loc        : constant Source_Ptr := Sloc (Call);\n-      Actual     : Node_Id;\n-      Actual_Typ : Entity_Id;\n-      Check      : Node_Id;\n-      Cond       : Node_Id := Empty;\n-      Param      : Node_Id;\n-      Param_Typ  : Entity_Id;\n-\n-   begin\n-      --  Do not generate the checks in Ada 83, 95 or 05 mode because they\n-      --  require an Ada 2012 construct.\n-\n-      --  Why??? these pragmas and attributes are available in all ada modes\n-\n-      if Ada_Version_Explicit < Ada_2012 then\n-         return;\n-      end if;\n-\n-      --  Inspect all pairs of parameters\n-\n-      Actual := First_Actual (Call);\n-      while Present (Actual) loop\n-         Actual_Typ := Base_Type (Etype (Actual));\n-\n-         if Nkind (Actual) = N_Identifier\n-           and then Is_Object_Reference (Actual)\n-         then\n-            Param := Next_Actual (Actual);\n-            while Present (Param) loop\n-               Param_Typ := Base_Type (Etype (Param));\n-\n-               if Nkind (Param) = N_Identifier\n-                 and then Is_Object_Reference (Param)\n-                 and then Actual_Typ = Param_Typ\n-               then\n-                  --  Generate:\n-                  --    Actual'Overlaps_Storage (Param)\n-\n-                  Check :=\n-                   Make_Attribute_Reference (Loc,\n-                      Prefix         =>\n-                        New_Reference_To (Entity (Actual), Loc),\n-                      Attribute_Name => Name_Overlaps_Storage,\n-                      Expressions    =>\n-                        New_List (New_Reference_To (Entity (Param), Loc)));\n-\n-                  if No (Cond) then\n-                     Cond := Check;\n-                  else\n-                     Cond :=\n-                       Make_And_Then (Loc,\n-                         Left_Opnd  => Cond,\n-                         Right_Opnd => Check);\n-                  end if;\n-               end if;\n-\n-               Next_Actual (Param);\n-            end loop;\n-         end if;\n+   --------------------------------------------------\n+   -- Apply_Parameter_Aliasing_And_Validity_Checks --\n+   --------------------------------------------------\n \n-         Next_Actual (Actual);\n-      end loop;\n-\n-      --  Raise Program_Error when the actuals overlap\n-\n-      if Present (Cond) then\n-         Insert_Action (Call,\n-           Make_Raise_Program_Error (Loc,\n-             Condition => Cond,\n-             Reason    => PE_Explicit_Raise));\n-      end if;\n-   end Apply_Parameter_Aliasing_Checks;\n-\n-   -------------------------------------\n-   -- Apply_Parameter_Validity_Checks --\n-   -------------------------------------\n-\n-   procedure Apply_Parameter_Validity_Checks (Subp : Entity_Id) is\n+   procedure Apply_Parameter_Aliasing_And_Validity_Checks (Subp : Entity_Id) is\n       Subp_Decl : Node_Id;\n-      Subp_Spec : Node_Id;\n-\n-      procedure Create_PPC_Pragma (Prag : in out Node_Id; Nam : Name_Id);\n-      --  Create a pre or post condition pragma with name Nam\n-\n-      -----------------------\n-      -- Create_PPC_Pragma --\n-      -----------------------\n \n-      procedure Create_PPC_Pragma (Prag : in out Node_Id; Nam : Name_Id) is\n-         Loc   : constant Source_Ptr := Sloc (Subp);\n-         Assoc : Node_Id;\n+      procedure Add_Aliasing_Check\n+        (Formal_1 : Entity_Id;\n+         Formal_2 : Entity_Id);\n+      --  Add a single 'Overlapping_Storage check to a post condition pragma\n+      --  which verifies that Formal_1 is not aliasing Formal_2.\n \n-      begin\n-         Prag :=\n-           Make_Pragma (Loc,\n-             Pragma_Identifier            => Make_Identifier (Loc, Nam),\n-             Class_Present                =>\n-               Is_Abstract_Subprogram (Subp)\n-                 or else (Nkind (Subp_Spec) = N_Procedure_Specification\n-                            and then Null_Present (Subp_Spec)),\n-             Pragma_Argument_Associations => New_List (\n-               Make_Pragma_Argument_Association (Loc,\n-                 Chars      => Name_Check,\n-                 Expression => Empty)));\n-\n-         --  Emulate the behavior of a from-aspect pragma\n-\n-         Set_From_Aspect_Specification (Prag);\n-\n-         --  Process all formals and a possible function result\n-\n-         Apply_Parameter_Validity_Checks (Subp, Prag);\n-         Assoc := First (Pragma_Argument_Associations (Prag));\n-\n-         --  Insert the pragma in the tree only when the related subprogram\n-         --  has eligible formals and function result that produced validity\n-         --  checks.\n-\n-         if Present (Expression (Assoc)) then\n-\n-            --  Add a message unless exception messages are suppressed\n-\n-            if not Exception_Locations_Suppressed then\n-               Append_To (Pragma_Argument_Associations (Prag),\n-                 Make_Pragma_Argument_Association (Loc,\n-                   Chars      => Name_Message,\n-                   Expression =>\n-                     Make_String_Literal (Loc,\n-                       Strval => \"failed \" & Get_Name_String (Nam) &\n-                                  \" from \" & Build_Location_String (Loc))));\n-            end if;\n-\n-            --  Insert the pragma in the tree\n-\n-            if Nkind (Parent (Subp_Decl)) = N_Compilation_Unit then\n-               Add_Global_Declaration (Prag);\n-            else\n-               Insert_After (Subp_Decl, Prag);\n-            end if;\n-\n-            Analyze (Prag);\n-         end if;\n-      end Create_PPC_Pragma;\n-\n-      --  Local variables\n-\n-      Post : Node_Id := Empty;\n-      Pre  : Node_Id := Empty;\n-\n-   --  Start of processing for Apply_Parameter_Validity_Checks\n-\n-   begin\n-      --  Extract the subprogram specification and declaration nodes\n-\n-      Subp_Spec := Parent (Subp);\n-\n-      if Nkind (Subp_Spec) = N_Defining_Program_Unit_Name then\n-         Subp_Spec := Parent (Subp_Spec);\n-      end if;\n-\n-      Subp_Decl := Parent (Subp_Spec);\n-\n-      --  Do not generate checks in Ada 83 or 95 because the pragmas involved\n-      --  are not allowed in those modes.\n-\n-      if Ada_Version_Explicit < Ada_2005 then\n-         return;\n-\n-      --  Do not process subprograms where pre and post conditions do not make\n-      --  sense.\n-\n-      elsif not Comes_From_Source (Subp)\n-        or else Is_Imported (Subp)\n-        or else Is_Intrinsic_Subprogram (Subp)\n-        or else Is_Formal_Subprogram (Subp)\n-        or else not Nkind_In (Subp_Decl, N_Abstract_Subprogram_Declaration,\n-                                         N_Generic_Subprogram_Declaration,\n-                                         N_Subprogram_Declaration)\n-      then\n-         return;\n-      end if;\n-\n-      --  A subprogram may already have a pre or post condition pragma. Look\n-      --  through the its contract and recover the pre and post conditions (if\n-      --  available).\n-\n-      --  So what??? you can have multiple such pragmas, this is unnecessary\n-      --  complexity being added for no purpose???\n-\n-      if Present (Contract (Subp)) then\n-         declare\n-            Nam  : Name_Id;\n-            Prag : Node_Id;\n-\n-         begin\n-            Prag := Spec_PPC_List (Contract (Subp));\n-            while Present (Prag) loop\n-               Nam := Pragma_Name (Prag);\n-\n-               if Nam = Name_Precondition then\n-                  Pre := Prag;\n-               elsif Nam = Name_Postcondition then\n-                  Post := Prag;\n-               end if;\n-\n-               Prag := Next_Pragma (Prag);\n-            end loop;\n-         end;\n-      end if;\n-\n-      --  Generate the missing pre or post condition pragmas\n-\n-      if No (Pre) then\n-         Create_PPC_Pragma (Pre, Name_Precondition);\n-      end if;\n+      procedure Add_Validity_Check\n+        (Context    : Entity_Id;\n+         PPC_Nam    : Name_Id;\n+         For_Result : Boolean := False);\n+      --  Add a single 'Valid[_Scalar] check which verifies the initialization\n+      --  of Context. PPC_Nam denotes the pre or post condition pragma name.\n+      --  Set flag For_Result when to verify the result of a function.\n \n-      if No (Post) then\n-         Create_PPC_Pragma (Post, Name_Postcondition);\n-      end if;\n-   end Apply_Parameter_Validity_Checks;\n+      procedure Build_PPC_Pragma (PPC_Nam : Name_Id; Check : Node_Id);\n+      --  Create a pre or post condition pragma with name PPC_Nam which\n+      --  tests expression Check.\n \n-   -------------------------------------\n-   -- Apply_Parameter_Validity_Checks --\n-   -------------------------------------\n+      ------------------------\n+      -- Add_Aliasing_Check --\n+      ------------------------\n \n-   procedure Apply_Parameter_Validity_Checks\n-     (Subp : Entity_Id;\n-      Prag : Node_Id)\n-   is\n-      Loc      : constant Source_Ptr := Sloc (Subp);\n-      Prag_Nam : constant Name_Id    := Pragma_Name (Prag);\n-      Formal   : Entity_Id;\n+      procedure Add_Aliasing_Check\n+        (Formal_1 : Entity_Id;\n+         Formal_2 : Entity_Id)\n+      is\n+         Loc : constant Source_Ptr := Sloc (Subp);\n \n-      procedure Add_Validity_Check\n-        (Context    : Entity_Id;\n-         For_Result : Boolean := False);\n-      --  Add a single validity check to a pre or post condition which verifies\n-      --  that Context has properly initialized scalars. Set flag For_Result to\n-      --  verify the result of a function.\n+      begin\n+         Build_PPC_Pragma (Name_Postcondition,\n+           Make_Attribute_Reference (Loc,\n+             Prefix         => New_Reference_To (Formal_1, Loc),\n+             Attribute_Name => Name_Overlaps_Storage,\n+             Expressions    => New_List (New_Reference_To (Formal_2, Loc))));\n+      end Add_Aliasing_Check;\n \n       ------------------------\n       -- Add_Validity_Check --\n       ------------------------\n \n       procedure Add_Validity_Check\n         (Context    : Entity_Id;\n+         PPC_Nam    : Name_Id;\n          For_Result : Boolean := False)\n       is\n-         Assoc : constant Node_Id   :=\n-                   First (Pragma_Argument_Associations (Prag));\n-         Expr  : constant Node_Id   := Expression (Assoc);\n-         Typ   : constant Entity_Id := Etype (Context);\n+         Loc   : constant Source_Ptr := Sloc (Subp);\n+         Typ   : constant Entity_Id  := Etype (Context);\n          Check : Node_Id;\n          Nam   : Name_Id;\n \n@@ -2069,67 +1866,146 @@ package body Checks is\n              Prefix         => Check,\n              Attribute_Name => Nam);\n \n-         --  Step 2: Associate the check with the related pragma\n+         --  Step 2: Create a pre or post condition pragma\n+\n+         Build_PPC_Pragma (PPC_Nam, Check);\n+      end Add_Validity_Check;\n+\n+      ----------------------\n+      -- Build_PPC_Pragma --\n+      ----------------------\n+\n+      procedure Build_PPC_Pragma (PPC_Nam : Name_Id; Check : Node_Id) is\n+         Loc  : constant Source_Ptr := Sloc (Subp);\n+         Prag : Node_Id;\n+\n+      begin\n+         Prag :=\n+           Make_Pragma (Loc,\n+             Pragma_Identifier            => Make_Identifier (Loc, PPC_Nam),\n+             Pragma_Argument_Associations => New_List (\n+               Make_Pragma_Argument_Association (Loc,\n+                 Chars      => Name_Check,\n+                 Expression => Check)));\n+\n+         --  Add a message unless exception messages are suppressed\n+\n+         if not Exception_Locations_Suppressed then\n+            Append_To (Pragma_Argument_Associations (Prag),\n+              Make_Pragma_Argument_Association (Loc,\n+                Chars      => Name_Message,\n+                Expression =>\n+                  Make_String_Literal (Loc,\n+                    Strval => \"failed \" & Get_Name_String (PPC_Nam) &\n+                               \" from \" & Build_Location_String (Loc))));\n+         end if;\n+\n+         --  Insert the pragma in the tree\n \n-         if No (Expr) then\n-            Set_Expression (Assoc, Check);\n+         if Nkind (Parent (Subp_Decl)) = N_Compilation_Unit then\n+            Add_Global_Declaration (Prag);\n          else\n-            Set_Expression (Assoc,\n-              Make_And_Then (Loc,\n-                Left_Opnd  => Expr,\n-                Right_Opnd => Check));\n+            Insert_After (Subp_Decl, Prag);\n          end if;\n-      end Add_Validity_Check;\n \n-   --  Start of processing for Apply_Parameter_Validity_Checks\n+         Analyze (Prag);\n+      end Build_PPC_Pragma;\n+\n+      --  Local variables\n+\n+      Formal    : Entity_Id;\n+      Pair      : Entity_Id;\n+      Subp_Spec : Node_Id;\n+\n+   --  Start of processing for Apply_Parameter_Aliasing_And_Validity_Checks\n \n    begin\n-      --  Do not process subprograms where pre and post conditions do not make\n-      --  sense.\n+      --  Extract the subprogram specification and declaration nodes\n \n-      --  More detail here of why these specific conditions are needed???\n-      --  And remember to document them ???\n+      Subp_Spec := Parent (Subp);\n+      if Nkind (Subp_Spec) = N_Defining_Program_Unit_Name then\n+         Subp_Spec := Parent (Subp_Spec);\n+      end if;\n+      Subp_Decl := Parent (Subp_Spec);\n \n       if not Comes_From_Source (Subp)\n+\n+         --  Do not process formal subprograms because the corresponding actual\n+         --  will receive the proper checks when the instance is analyzed.\n+\n+        or else Is_Formal_Subprogram (Subp)\n+\n+         --  Do not process imported subprograms since pre and post conditions\n+         --  are never verified on routines coming from a different language.\n+\n         or else Is_Imported (Subp)\n         or else Is_Intrinsic_Subprogram (Subp)\n+\n+         --  Do not consider subprogram bodies because pre and post conditions\n+         --  cannot be associated with them.\n+\n+        or else Nkind (Subp_Decl) /= N_Subprogram_Declaration\n+\n+         --  Do not process null procedures because there is no benefit of\n+         --  adding the checks to a no action routine.\n+\n+        or else (Nkind (Subp_Spec) = N_Procedure_Specification\n+                   and then Null_Present (Subp_Spec))\n       then\n          return;\n       end if;\n \n-      --  Generate the following validity checks for each formal parameter:\n-      --\n-      --    mode IN     - Pre       => Formal'Valid[_Scalars]\n-      --    mode IN OUT - Pre, Post => Formal'Valid[_Scalars]\n-      --    mode    OUT -      Post => Formal'Valid[_Scalars]\n+      --  Inspect all the formals applying aliasing and scalar initialization\n+      --  checks where applicable.\n \n       Formal := First_Formal (Subp);\n       while Present (Formal) loop\n-         if Prag_Nam = Name_Precondition\n-           and then Ekind_In (Formal, E_In_Parameter, E_In_Out_Parameter)\n-         then\n-            Add_Validity_Check (Formal);\n+\n+         --  Generate the following scalar initialization checks for each\n+         --  formal parameter:\n+\n+         --    mode IN     - Pre       => Formal'Valid[_Scalars]\n+         --    mode IN OUT - Pre, Post => Formal'Valid[_Scalars]\n+         --    mode    OUT -      Post => Formal'Valid[_Scalars]\n+\n+         if Check_Validity_Of_Parameters then\n+            if Ekind_In (Formal, E_In_Parameter, E_In_Out_Parameter) then\n+               Add_Validity_Check (Formal, Name_Precondition, False);\n+            end if;\n+\n+            if Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter) then\n+               Add_Validity_Check (Formal, Name_Postcondition, False);\n+            end if;\n          end if;\n \n-         if Prag_Nam = Name_Postcondition\n-           and then Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter)\n-         then\n-            Add_Validity_Check (Formal);\n+         --  Generate the following aliasing checks for every pair of formal\n+         --  parameters:\n+\n+         --    Formal'Overlapping_Storage (Pair)\n+\n+         if Check_Aliasing_Of_Parameters then\n+            Pair := Next_Formal (Formal);\n+            while Present (Pair) loop\n+               Add_Aliasing_Check (Formal, Pair);\n+\n+               Next_Formal (Pair);\n+            end loop;\n          end if;\n \n          Next_Formal (Formal);\n       end loop;\n \n-      --  Generate the following validy check for a function result:\n-      --\n-      --    Post => Sub'Result'Valid[_Scalars]\n+      --  Generate the following scalar initialization check for a function\n+      --  result:\n+\n+      --    Post => Subp'Result'Valid[_Scalars]\n \n-      if Prag_Nam = Name_Postcondition\n-        and then Ekind_In (Subp, E_Function, E_Generic_Function)\n+      if Check_Validity_Of_Parameters\n+        and then Ekind (Subp) = E_Function\n       then\n-         Add_Validity_Check (Subp, For_Result => True);\n+         Add_Validity_Check (Subp, Name_Postcondition, True);\n       end if;\n-   end Apply_Parameter_Validity_Checks;\n+   end Apply_Parameter_Aliasing_And_Validity_Checks;\n \n    ---------------------------\n    -- Apply_Predicate_Check --"}, {"sha": "0580aec8e6df8368bb2a3d59113cdd98fc1d67eb", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -154,20 +154,10 @@ package Checks is\n    --  formals, the check is performed only if the corresponding actual is\n    --  constrained, i.e., whether Lhs'Constrained is True.\n \n-   procedure Apply_Parameter_Aliasing_Checks (Call : Node_Id);\n-   --  Given a subprogram call Call, introduce a check to verify that none of\n-   --  the actual parameters overlap.\n-\n-   procedure Apply_Parameter_Validity_Checks (Subp : Entity_Id);\n+   procedure Apply_Parameter_Aliasing_And_Validity_Checks (Subp : Entity_Id);\n    --  Given a subprogram Subp, add both a pre and post condition pragmas that\n-   --  verify the validity of formal parameters and function results.\n-\n-   procedure Apply_Parameter_Validity_Checks\n-     (Subp : Entity_Id;\n-      Prag : Node_Id);\n-   --  Given a subprogram Subp and a pre or post condition pragma Prag, augment\n-   --  the expression of the pragma to verify the validity of qualifying formal\n-   --  parameter and function results.\n+   --  detect aliased objects and verify the proper initialization of scalars\n+   --  in parameters and function results.\n \n    procedure Apply_Predicate_Check (N : Node_Id; Typ : Entity_Id);\n    --  N is an expression to which a predicate check may need to be applied"}, {"sha": "930f82befc0a3c24888dae59108182eb0dd8a9fc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -3404,13 +3404,6 @@ package body Exp_Ch6 is\n \n       Expand_Actuals (Call_Node, Subp);\n \n-      --  Now that we have all parameters, add aliasing checks to detect\n-      --  overlapping objects.\n-\n-      if Validity_Check_Non_Overlapping_Params then\n-         Apply_Parameter_Aliasing_Checks (N);\n-      end if;\n-\n       --  If the subprogram is a renaming, or if it is inherited, replace it in\n       --  the call with the name of the actual subprogram being called. If this\n       --  is a dispatching call, the run-time decides what to call. The Alias"}, {"sha": "606587769e11adfdca070bfd4575542dc17152d3", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -65,7 +65,6 @@ with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n-with Validsw;  use Validsw;\n \n package body Freeze is\n \n@@ -2657,12 +2656,14 @@ package body Freeze is\n          end;\n       end if;\n \n-      --  Add checks to detect proper initialization of scalars\n+      --  Add checks to detect proper initialization of scalars and overlapping\n+      --  storage of subprogram parameters.\n \n       if Is_Subprogram (E)\n-        and then Validity_Check_Valid_Scalars_On_Params\n+        and then (Check_Aliasing_Of_Parameters\n+                    or else Check_Validity_Of_Parameters)\n       then\n-         Apply_Parameter_Validity_Checks (E);\n+         Apply_Parameter_Aliasing_And_Validity_Checks (E);\n       end if;\n \n       --  Deal with delayed aspect specifications. The analysis of the"}, {"sha": "712a6885bd828ccb65cc1303434953f9b18b699f", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -564,6 +564,7 @@ package body Impunit is\n     (\"a-cbprqu\", T),  -- Ada.Containers.Bounded_Priority_Queues\n     (\"a-extiin\", T),  -- Ada.Execution_Time.Interrupts\n     (\"a-iteint\", T),  -- Ada.Iterator_Interfaces\n+    (\"a-locale\", T),  -- Ada.Locales\n     (\"a-synbar\", T),  -- Ada.Synchronous_Barriers\n     (\"a-undesu\", T),  -- Ada.Unchecked_Deallocate_Subpool\n "}, {"sha": "311dad768204ace99eb84926a6608018a3906568", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -270,6 +270,11 @@ package Opt is\n    --  Set to True to build, bind and link all the sources of a project file\n    --  (switch -B)\n \n+   Check_Aliasing_Of_Parameters : Boolean := False;\n+   --  GNAT\n+   --  Set to True to detect whether subprogram parameters and function results\n+   --  alias the same object(s).\n+\n    Check_Object_Consistency : Boolean := False;\n    --  GNATBIND, GNATMAKE\n    --  Set to True to check whether every object file is consistent with\n@@ -315,9 +320,14 @@ package Opt is\n \n    Check_Unreferenced_Formals : Boolean := False;\n    --  GNAT\n-   --  Set True to check for unreferenced formals. This is turned on by\n+   --  Set to True to check for unreferenced formals. This is turned on by\n    --  -gnatwa/wf/wu and turned off by -gnatwA/wF/wU.\n \n+   Check_Validity_Of_Parameters : Boolean := False;\n+   --  GNAT\n+   --  Set to True to check for proper scalar initialization of subprogram\n+   --  parameters on both entry and exit.\n+\n    Check_Withs : Boolean := False;\n    --  GNAT\n    --  Set to True to enable checking for unused withs, and also the case"}, {"sha": "f2cb86c12f24506a492e75e95f64e9a2de416a7c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -4062,7 +4062,6 @@ package body Sem_Attr is\n       ----------------------\n \n       when Attribute_Overlaps_Storage =>\n-         Check_Ada_2012_Attribute;\n          Check_E1;\n \n          --  Both arguments must be objects of any type"}, {"sha": "caa674105933ceeec1d5bba391483913865876a1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -63,7 +63,6 @@ with Targparm; use Targparm;\n with Ttypes;   use Ttypes;\n with Tbuild;   use Tbuild;\n with Urealp;   use Urealp;\n-with Validsw;  use Validsw;\n with Warnsw;   use Warnsw;\n \n with GNAT.Heap_Sort_G;\n@@ -1523,12 +1522,6 @@ package body Sem_Ch13 is\n                           Chars      => Name_Check,\n                           Expression => Relocate_Node (Expr))));\n \n-                  --  Add checks to detect proper initialization of scalars\n-\n-                  if Validity_Check_Valid_Scalars_On_Params then\n-                     Apply_Parameter_Validity_Checks (E, Aitem);\n-                  end if;\n-\n                   --  Add message unless exception messages are suppressed\n \n                   if not Opt.Exception_Locations_Suppressed then"}, {"sha": "15f70806b680ef33b6bbd4403e2c46a4ddff5265", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -25,7 +25,6 @@\n \n with Aspects;  use Aspects;\n with Atree;    use Atree;\n-with Checks;   use Checks;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n@@ -63,7 +62,6 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n-with Validsw;  use Validsw;\n \n package body Sem_Ch4 is\n \n@@ -1245,15 +1243,6 @@ package body Sem_Ch4 is\n \n          End_Interp_List;\n       end if;\n-\n-      --  Add aliasing checks to detect overlapping objects. Process the call\n-      --  now in case expansion is disabled.\n-\n-      if not Expander_Active\n-        and then Validity_Check_Non_Overlapping_Params\n-      then\n-         Apply_Parameter_Aliasing_Checks (N);\n-      end if;\n    end Analyze_Call;\n \n    -----------------------------"}, {"sha": "37c6eb76524bed83c9fe6c389a5ed3a7fce14305", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -380,6 +380,12 @@ package body Switch.C is\n                      Enable_Switch_Storing;\n                      Ptr := Ptr + 1;\n \n+                  --  -gnateA (aliasing checks on parameters)\n+\n+                  when 'A' =>\n+                     Ptr := Ptr + 1;\n+                     Check_Aliasing_Of_Parameters := True;\n+\n                   --  -gnatec (configuration pragmas)\n \n                   when 'c' =>\n@@ -566,6 +572,22 @@ package body Switch.C is\n                   when 'P' =>\n                      Treat_Categorization_Errors_As_Warnings := True;\n \n+                  --  -gnateS (generate SCO information)\n+\n+                  --  Include Source Coverage Obligation information in ALI\n+                  --  files for the benefit of source coverage analysis tools\n+                  --  (xcov).\n+\n+                  when 'S' =>\n+                     Generate_SCO := True;\n+                     Ptr := Ptr + 1;\n+\n+                  --  -gnateV (validity checks on parameters)\n+\n+                  when 'V' =>\n+                     Ptr := Ptr + 1;\n+                     Check_Validity_Of_Parameters := True;\n+\n                   --  -gnatez (final delimiter of explicit switches)\n \n                   --  All switches that come after -gnatez have been added by\n@@ -577,16 +599,6 @@ package body Switch.C is\n                      Disable_Switch_Storing;\n                      Ptr := Ptr + 1;\n \n-                  --  -gnateS (generate SCO information)\n-\n-                  --  Include Source Coverage Obligation information in ALI\n-                  --  files for the benefit of source coverage analysis tools\n-                  --  (xcov).\n-\n-                  when 'S' =>\n-                     Generate_SCO := True;\n-                     Ptr := Ptr + 1;\n-\n                   --  All other -gnate? switches are unassigned\n \n                   when others =>"}, {"sha": "ad64a84dfcfe11a9986880df19c6217d9c89474e", "filename": "gcc/ada/system-mingw.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-mingw.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -132,6 +132,7 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n+   Support_Atomic_Primitives : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "a7db8dfab5949aa17417178e16d5fec8b9c0a44e", "filename": "gcc/ada/system-solaris-sparcv9.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-sparcv9.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -132,6 +132,7 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n+   Support_Atomic_Primitives : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "aa4fa3750bc31218b4e7f3c06c42dda10ebac6e3", "filename": "gcc/ada/system-vms_64.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fsystem-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms_64.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -150,6 +150,7 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n+   Support_Atomic_Primitives : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "12324ef64d2ebe59ce60e7bd19ee9de5fed3dcec", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -167,6 +167,11 @@ begin\n    Write_Switch_Char (\"Dnn\");\n    Write_Line (\"Debug expanded generated code (max line length = nn)\");\n \n+   --  Line for -gnateA switch\n+\n+   Write_Switch_Char (\"eA\");\n+   Write_Line (\"Aliasing checks on subprogram parameters\");\n+\n    --  Line for -gnatec switch\n \n    Write_Switch_Char (\"ec=?\");\n@@ -227,6 +232,11 @@ begin\n    Write_Switch_Char (\"eS\");\n    Write_Line (\"Generate SCO (Source Coverage Obligation) information\");\n \n+   --  Line for -gnateV switch\n+\n+   Write_Switch_Char (\"eV\");\n+   Write_Line (\"Validity checks on subprogram parameters\");\n+\n    --  Line for -gnatE switch\n \n    Write_Switch_Char (\"E\");\n@@ -399,8 +409,6 @@ begin\n    Write_Line (\"        F    turn off checking for floating-point\");\n    Write_Line (\"        i    turn on checking for in params\");\n    Write_Line (\"        I    turn off checking for in params\");\n-   Write_Line (\"        l    turn on checking for non-overlapping params\");\n-   Write_Line (\"        L    turn off checking for non-overlapping params\");\n    Write_Line (\"        m    turn on checking for in out params\");\n    Write_Line (\"        M    turn off checking for in out params\");\n    Write_Line (\"        o    turn on checking for operators/attributes\");\n@@ -413,8 +421,6 @@ begin\n    Write_Line (\"        S    turn off checking for subscripts\");\n    Write_Line (\"        t    turn on checking for tests\");\n    Write_Line (\"        T    turn off checking for tests\");\n-   Write_Line (\"        v    turn on checking for 'Valid_Scalars on params\");\n-   Write_Line (\"        V    turn off checking for 'Valid_Scalars on params\");\n    Write_Line (\"        n    turn off all validity checks (including RM)\");\n \n    --  Lines for -gnatw switch"}, {"sha": "b37825ed46107d44fecc770dda9be0f6c610bbcc", "filename": "gcc/ada/validsw.adb", "status": "modified", "additions": 55, "deletions": 81, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fvalidsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fvalidsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.adb?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -33,18 +33,16 @@ package body Validsw is\n \n    procedure Reset_Validity_Check_Options is\n    begin\n-      Validity_Check_Components              := False;\n-      Validity_Check_Copies                  := False;\n-      Validity_Check_Default                 := True;\n-      Validity_Check_Floating_Point          := False;\n-      Validity_Check_In_Out_Params           := False;\n-      Validity_Check_In_Params               := False;\n-      Validity_Check_Non_Overlapping_Params  := False;\n-      Validity_Check_Operands                := False;\n-      Validity_Check_Returns                 := False;\n-      Validity_Check_Subscripts              := False;\n-      Validity_Check_Tests                   := False;\n-      Validity_Check_Valid_Scalars_On_Params := False;\n+      Validity_Check_Components     := False;\n+      Validity_Check_Copies         := False;\n+      Validity_Check_Default        := True;\n+      Validity_Check_Floating_Point := False;\n+      Validity_Check_In_Out_Params  := False;\n+      Validity_Check_In_Params      := False;\n+      Validity_Check_Operands       := False;\n+      Validity_Check_Returns        := False;\n+      Validity_Check_Subscripts     := False;\n+      Validity_Check_Tests          := False;\n    end Reset_Validity_Check_Options;\n \n    ---------------------------------\n@@ -80,13 +78,11 @@ package body Validsw is\n       Add ('e', Validity_Check_Components);\n       Add ('f', Validity_Check_Floating_Point);\n       Add ('i', Validity_Check_In_Params);\n-      Add ('l', Validity_Check_Non_Overlapping_Params);\n       Add ('m', Validity_Check_In_Out_Params);\n       Add ('o', Validity_Check_Operands);\n       Add ('r', Validity_Check_Returns);\n       Add ('s', Validity_Check_Subscripts);\n       Add ('t', Validity_Check_Tests);\n-      Add ('v', Validity_Check_Valid_Scalars_On_Params);\n    end Save_Validity_Check_Options;\n \n    ----------------------------------------\n@@ -137,119 +133,97 @@ package body Validsw is\n          case C is\n \n             when 'c' =>\n-               Validity_Check_Copies                  := True;\n+               Validity_Check_Copies         := True;\n \n             when 'd' =>\n-               Validity_Check_Default                 := True;\n+               Validity_Check_Default        := True;\n \n             when 'e' =>\n-               Validity_Check_Components              := True;\n+               Validity_Check_Components     := True;\n \n             when 'f' =>\n-               Validity_Check_Floating_Point          := True;\n+               Validity_Check_Floating_Point := True;\n \n             when 'i' =>\n-               Validity_Check_In_Params               := True;\n-\n-            when 'l' =>\n-               Validity_Check_Non_Overlapping_Params  := True;\n+               Validity_Check_In_Params      := True;\n \n             when 'm' =>\n-               Validity_Check_In_Out_Params           := True;\n+               Validity_Check_In_Out_Params  := True;\n \n             when 'o' =>\n-               Validity_Check_Operands                := True;\n+               Validity_Check_Operands       := True;\n \n             when 'p' =>\n-               Validity_Check_Parameters              := True;\n+               Validity_Check_Parameters     := True;\n \n             when 'r' =>\n-               Validity_Check_Returns                 := True;\n+               Validity_Check_Returns        := True;\n \n             when 's' =>\n-               Validity_Check_Subscripts              := True;\n+               Validity_Check_Subscripts     := True;\n \n             when 't' =>\n-               Validity_Check_Tests                   := True;\n-\n-            when 'v' =>\n-               Validity_Check_Valid_Scalars_On_Params := True;\n+               Validity_Check_Tests          := True;\n \n             when 'C' =>\n-               Validity_Check_Copies                  := False;\n+               Validity_Check_Copies         := False;\n \n             when 'D' =>\n-               Validity_Check_Default                 := False;\n+               Validity_Check_Default        := False;\n \n             when 'E' =>\n-               Validity_Check_Components              := False;\n+               Validity_Check_Components     := False;\n \n             when 'F' =>\n-               Validity_Check_Floating_Point          := False;\n+               Validity_Check_Floating_Point := False;\n \n             when 'I' =>\n-               Validity_Check_In_Params               := False;\n-\n-            when 'L' =>\n-               Validity_Check_Non_Overlapping_Params  := False;\n+               Validity_Check_In_Params      := False;\n \n             when 'M' =>\n-               Validity_Check_In_Out_Params           := False;\n+               Validity_Check_In_Out_Params  := False;\n \n             when 'O' =>\n-               Validity_Check_Operands                := False;\n+               Validity_Check_Operands       := False;\n \n             when 'P' =>\n-               Validity_Check_Parameters              := False;\n+               Validity_Check_Parameters     := False;\n \n             when 'R' =>\n-               Validity_Check_Returns                 := False;\n+               Validity_Check_Returns        := False;\n \n             when 'S' =>\n-               Validity_Check_Subscripts              := False;\n+               Validity_Check_Subscripts     := False;\n \n             when 'T' =>\n-               Validity_Check_Tests                   := False;\n-\n-            when 'V' =>\n-               Validity_Check_Valid_Scalars_On_Params := False;\n-\n-            --  Note: The following two flags are not set when \"-gnatVa\" is in\n-            --  effect because the associated checks are deemed too aggressive.\n-\n-            --     Validity_Check_Non_Overlapping_Params\n-            --     Validity_Check_Valid_Scalars_On_Params\n-\n-            --  and in any case these do not belong as validity checks ???\n+               Validity_Check_Tests          := False;\n \n             when 'a' =>\n-               Validity_Check_Components              := True;\n-               Validity_Check_Copies                  := True;\n-               Validity_Check_Default                 := True;\n-               Validity_Check_Floating_Point          := True;\n-               Validity_Check_In_Out_Params           := True;\n-               Validity_Check_In_Params               := True;\n-               Validity_Check_Operands                := True;\n-               Validity_Check_Parameters              := True;\n-               Validity_Check_Returns                 := True;\n-               Validity_Check_Subscripts              := True;\n-               Validity_Check_Tests                   := True;\n+               Validity_Check_Components     := True;\n+               Validity_Check_Copies         := True;\n+               Validity_Check_Default        := True;\n+               Validity_Check_Floating_Point := True;\n+               Validity_Check_In_Out_Params  := True;\n+               Validity_Check_In_Params      := True;\n+               Validity_Check_Operands       := True;\n+               Validity_Check_Parameters     := True;\n+               Validity_Check_Returns        := True;\n+               Validity_Check_Subscripts     := True;\n+               Validity_Check_Tests          := True;\n \n             when 'n' =>\n-               Validity_Check_Components              := False;\n-               Validity_Check_Copies                  := False;\n-               Validity_Check_Default                 := False;\n-               Validity_Check_Floating_Point          := False;\n-               Validity_Check_In_Out_Params           := False;\n-               Validity_Check_In_Params               := False;\n-               Validity_Check_Non_Overlapping_Params  := False;\n-               Validity_Check_Operands                := False;\n-               Validity_Check_Parameters              := False;\n-               Validity_Check_Returns                 := False;\n-               Validity_Check_Subscripts              := False;\n-               Validity_Check_Tests                   := False;\n-               Validity_Check_Valid_Scalars_On_Params := False;\n-               Validity_Checks_On                     := False;\n+               Validity_Check_Components     := False;\n+               Validity_Check_Copies         := False;\n+               Validity_Check_Default        := False;\n+               Validity_Check_Floating_Point := False;\n+               Validity_Check_In_Out_Params  := False;\n+               Validity_Check_In_Params      := False;\n+               Validity_Check_Operands       := False;\n+               Validity_Check_Parameters     := False;\n+               Validity_Check_Returns        := False;\n+               Validity_Check_Subscripts     := False;\n+               Validity_Check_Tests          := False;\n+               Validity_Checks_On            := False;\n \n             when ' ' =>\n                null;"}, {"sha": "afc4fa55ae386aa59b9b0664a68893b2fd116680", "filename": "gcc/ada/validsw.ads", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fvalidsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dde8759781d78310905ed3c2fb8b78e84964a9/gcc%2Fada%2Fvalidsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.ads?ref=e8dde8759781d78310905ed3c2fb8b78e84964a9", "patch": "@@ -82,13 +82,6 @@ package Validsw is\n    --  Validity_Checks, then the initial value of all IN parameters\n    --  will be checked at the point of call of a procedure or function.\n \n-   Validity_Check_Non_Overlapping_Params : Boolean := False;\n-   --  Controls the validity checking of IN, IN OUT and OUT parameters in terms\n-   --  of overlapping storage. If this switch is set to True using -gnatVl or\n-   --  an 'l' in the argument of a pragma Validity_Checks, each subprogram call\n-   --  is preceded by a sequence of checks which ensure that actual parameters\n-   --  do not alias the same object or space.\n-\n    Validity_Check_Operands : Boolean := False;\n    --  Controls validity checking of operands. If this switch is set to\n    --  True using -gnatVo or an 'o' in the argument of a Validity_Checks\n@@ -124,13 +117,6 @@ package Validsw is\n    --  switch is set to True using -gnatVt, or a 't' in the argument of a\n    --  Validity_Checks pragma, then all such conditions are validity checked.\n \n-   Validity_Check_Valid_Scalars_On_Params : Boolean := False;\n-   --  Controls validity checking of parameters with respect to properly\n-   --  initialized scalars. If this switch is set to True using -gnatVv, or a\n-   --  'v' in the argument of pragma Validity_Checks, each IN, IN OUT and OUT\n-   --  parameter along with possible function result is checked on entry and\n-   --  exit of a subprogram for properly initialized scalars.\n-\n    Force_Validity_Checks : Boolean := False;\n    --  Normally, operands that do not come from source (i.e. cases of expander\n    --  generated code) are not checked, if this flag is set True, then checking"}]}