{"sha": "bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiMDM2YzUxNWE0M2QyYzNkZWQ2Mzk5YWE0ODZmYmMzZDdmOGE3Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-12-16T16:24:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-12-16T16:24:26Z"}, "message": "[AArch64] Split X-reg UBFX into W-reg LSR when possible\n\n\t* config/aarch64/aarch64.md: New define_split above insv<mode>.\n\n\t* gcc.target/aarch64/ubfx_lsr_1.c: New test.\n\nFrom-SVN: r243755", "tree": {"sha": "e93ba6beedbbf1e6e73ee6f7352cb482ff41b05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93ba6beedbbf1e6e73ee6f7352cb482ff41b05d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17f3bb6d2547e75cac271f19cc04d8fe3cb0bf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f3bb6d2547e75cac271f19cc04d8fe3cb0bf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f3bb6d2547e75cac271f19cc04d8fe3cb0bf5f"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d7f39fcb05e6e4fffeb334ecd99673ff62f5f658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "patch": "@@ -1,3 +1,7 @@\n+2016-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md: New define_split above insv<mode>.\n+\n 2016-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/78408"}, {"sha": "078bd8e69a0ebf6dbc94dab33d9eb494ec9154eb", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "patch": "@@ -4325,6 +4325,26 @@\n   [(set_attr \"type\" \"bfx\")]\n )\n \n+;; When the bit position and width add up to 32 we can use a W-reg LSR\n+;; instruction taking advantage of the implicit zero-extension of the X-reg.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extract:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t (match_operand 2\n+\t\t\t   \"aarch64_simd_shift_imm_offset_di\")\n+\t\t\t (match_operand 3\n+\t\t\t   \"aarch64_simd_shift_imm_di\")))]\n+  \"IN_RANGE (INTVAL (operands[2]) + INTVAL (operands[3]), 1,\n+\t     GET_MODE_BITSIZE (DImode) - 1)\n+   && (INTVAL (operands[2]) + INTVAL (operands[3]))\n+       == GET_MODE_BITSIZE (SImode)\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (lshiftrt:SI (match_dup 4) (match_dup 3))))]\n+  {\n+    operands[4] = gen_lowpart (SImode, operands[1]);\n+  }\n+)\n+\n ;; Bitfield Insert (insv)\n (define_expand \"insv<mode>\"\n   [(set (zero_extract:GPI (match_operand:GPI 0 \"register_operand\")"}, {"sha": "fc73346906ce72c8d6785743dd21af6eda4b6ed5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "patch": "@@ -1,3 +1,7 @@\n+2016-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ubfx_lsr_1.c: New test.\n+\n 2016-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/78408"}, {"sha": "f6f72b074e1fc6bcb1976eee6c545e9781b4bed6", "filename": "gcc/testsuite/gcc.target/aarch64/ubfx_lsr_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fubfx_lsr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb036c515a43d2c3ded6399aa486fbc3d7f8a76/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fubfx_lsr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fubfx_lsr_1.c?ref=bcb036c515a43d2c3ded6399aa486fbc3d7f8a76", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Check that an X-reg UBFX can be simplified into a W-reg LSR.  */\n+\n+int\n+f (unsigned long long x)\n+{\n+  x = (x >> 24) & 255;\n+  return x + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"lsr\\tw\" } } */\n+/* { dg-final { scan-assembler-not \"ubfx\\tx\" } } */"}]}