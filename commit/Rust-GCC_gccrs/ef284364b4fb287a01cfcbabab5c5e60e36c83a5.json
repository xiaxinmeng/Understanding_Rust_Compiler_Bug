{"sha": "ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyODQzNjRiNGZiMjg3YTAxY2ZjYmFiYWI1YzVlNjBlMzZjODNhNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-06-30T21:04:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-06-30T21:04:23Z"}, "message": "dwarf2out: Add REG_CFA_FLUSH_QUEUE.\n\n        * reg-notes.def (REG_CFA_FLUSH_QUEUE): New.\n        * dwarf2out.c (dwarf2out_frame_debug): Handle it.\n        * final.c (final_scan_insn): Look for it, and invoke\n        dwarf2out_frame_debug before the insn if found.\n\nFrom-SVN: r175729", "tree": {"sha": "2f2309df014d81d43d533530f0492a97a39bc755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f2309df014d81d43d533530f0492a97a39bc755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/comments", "author": null, "committer": null, "parents": [{"sha": "c8412f9770056dff19e3470901193784c7764bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8412f9770056dff19e3470901193784c7764bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8412f9770056dff19e3470901193784c7764bcf"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "28109773726c69e6f1f4bb7be8083f346ea4984e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "patch": "@@ -1,3 +1,10 @@\n+2011-06-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* reg-notes.def (REG_CFA_FLUSH_QUEUE): New.\n+\t* dwarf2out.c (dwarf2out_frame_debug): Handle it.\n+\t* final.c (final_scan_insn): Look for it, and invoke\n+\tdwarf2out_frame_debug before the insn if found.\n+\n 2011-06-30  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_frame_debug_cfa_offset): Allow PC_RTX"}, {"sha": "9ab551d8ed23f776dc1774f9c93eedc85e475f63", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "patch": "@@ -2832,6 +2832,7 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n   const char *label;\n   rtx note, n;\n   bool handled_one = false;\n+  bool need_flush = false;\n \n   if (!NONJUMP_INSN_P (insn) || clobbers_queued_reg_save (insn))\n     dwarf2out_flush_queued_reg_saves ();\n@@ -2854,7 +2855,7 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n       {\n       case REG_FRAME_RELATED_EXPR:\n \tinsn = XEXP (note, 0);\n-\tgoto found;\n+\tgoto do_frame_expr;\n \n       case REG_CFA_DEF_CFA:\n \tdwarf2out_frame_debug_def_cfa (XEXP (note, 0), label);\n@@ -2934,24 +2935,36 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n \thandled_one = true;\n \tbreak;\n \n+      case REG_CFA_FLUSH_QUEUE:\n+\t/* The actual flush happens below.  */\n+\tneed_flush = true;\n+\thandled_one = true;\n+\tbreak;\n+\n       default:\n \tbreak;\n       }\n+\n   if (handled_one)\n     {\n-      if (any_cfis_emitted)\n-\tdwarf2out_flush_queued_reg_saves ();\n-      return;\n+      /* Minimize the number of advances by emitting the entire queue\n+\t once anything is emitted.  */\n+      need_flush |= any_cfis_emitted;\n     }\n+  else\n+    {\n+      insn = PATTERN (insn);\n+    do_frame_expr:\n+      dwarf2out_frame_debug_expr (insn, label);\n \n-  insn = PATTERN (insn);\n- found:\n-  dwarf2out_frame_debug_expr (insn, label);\n+      /* Check again.  A parallel can save and update the same register.\n+         We could probably check just once, here, but this is safer than\n+         removing the check at the start of the function.  */\n+      if (any_cfis_emitted || clobbers_queued_reg_save (insn))\n+\tneed_flush = true;\n+    }\n \n-  /* Check again.  A parallel can save and update the same register.\n-     We could probably check just once, here, but this is safer than\n-     removing the check above.  */\n-  if (any_cfis_emitted || clobbers_queued_reg_save (insn))\n+  if (need_flush)\n     dwarf2out_flush_queued_reg_saves ();\n }\n "}, {"sha": "c0c1fc850ecfa69bc1857b74c65234ab688ea341", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "patch": "@@ -2683,7 +2683,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \n \tcurrent_output_insn = debug_insn = insn;\n \n-\tif (CALL_P (insn) && dwarf2out_do_frame ())\n+\tif (dwarf2out_do_frame ()\n+\t    && (CALL_P (insn)\n+\t\t|| find_reg_note (insn, REG_CFA_FLUSH_QUEUE, NULL)))\n \t  dwarf2out_frame_debug (insn, false);\n \n \t/* Find the proper template for this insn.  */"}, {"sha": "eccac9e9d7046232e8926d099d147f6fa2a8836d", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef284364b4fb287a01cfcbabab5c5e60e36c83a5/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=ef284364b4fb287a01cfcbabab5c5e60e36c83a5", "patch": "@@ -155,16 +155,23 @@ REG_NOTE (CFA_EXPRESSION)\n    first pattern is the register to be restored.  */\n REG_NOTE (CFA_RESTORE)\n \n-/* Attached to insn that is RTX_FRAME_RELATED_P, marks insn that sets\n+/* Attached to insns that are RTX_FRAME_RELATED_P, marks insn that sets\n    vDRAP from DRAP.  If vDRAP is a register, vdrap_reg is initalized\n    to the argument, if it is a MEM, it is ignored.  */\n REG_NOTE (CFA_SET_VDRAP)\n \n-/* Attached to insn that are RTX_FRAME_RELATED_P, indicating a window\n+/* Attached to insns that are RTX_FRAME_RELATED_P, indicating a window\n    save operation, i.e. will result in a DW_CFA_GNU_window_save.\n    The argument is ignored.  */\n REG_NOTE (CFA_WINDOW_SAVE)\n \n+/* Attached to insns that are RTX_FRAME_RELATED_P, marks the insn as\n+   requiring that all queued information should be flushed *before* insn,\n+   regardless of what is visible in the rtl.  The argument is ignored.\n+   This is normally used for a call instruction which is not exposed to\n+   the rest of the compiler as a CALL_INSN.  */\n+REG_NOTE (CFA_FLUSH_QUEUE)\n+\n /* Indicates that REG holds the exception context for the function.\n    This context is shared by inline functions, so the code to acquire\n    the real exception context is delayed until after inlining.  */"}]}