{"sha": "d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjZGNhY2FmMjAwZDM2YmZjNjI1ZDRkZTNiNDBhOTc3MmM0ZmQ5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-08T11:59:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-08T11:59:52Z"}, "message": "ggc-simple.c (init_ggc): Absorb the old init.\n\n        * ggc-simple.c (init_ggc): Absorb the old init.\n        (ggc_push_context): Use xcalloc.\n        (ggc_alloc_rtx, ggc_alloc_rtvec, ggc_alloc_tree): Likewise.\n        (ggc_collect): Add [rvts] tags to the collection stats.\n\nFrom-SVN: r29206", "tree": {"sha": "9035a92632e998ec8c873222c91affee6c0f5cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9035a92632e998ec8c873222c91affee6c0f5cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f/comments", "author": null, "committer": null, "parents": [{"sha": "7cf3d8b413d6c4de263ff9e8049481760e9bb3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf3d8b413d6c4de263ff9e8049481760e9bb3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf3d8b413d6c4de263ff9e8049481760e9bb3d5"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "f878d5af144e7482db4139d56c2d48cbced89ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "patch": "@@ -4,6 +4,11 @@ Wed Sep  8 04:43:22 1999  Richard Henderson  <rth@cygnus.com>\n \t(zap_lists): New.\n \t(init_EXPR_INSN_LIST_cache): Install it.\n \n+\t* ggc-simple.c (init_ggc): Absorb the old init.\n+\t(ggc_push_context): Use xcalloc.\n+\t(ggc_alloc_rtx, ggc_alloc_rtvec, ggc_alloc_tree): Likewise.\n+\t(ggc_collect): Add [rvts] tags to the collection stats.\n+\n Wed Sep  8 11:14:25 1999  Andreas Schwab  <schwab@suse.de>\n \n \t* cccp.c (main): Fix handling of -include and -imacros options."}, {"sha": "5e695ad1b547bb8589f8ffcd982556bac9ecca1a", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=d2cdcacaf200d36bfc625d4de3b40a9772c4fd9f", "patch": "@@ -28,9 +28,14 @@\n #include \"hash.h\"\n \n /* Debugging flags.  */\n-#undef GGC_DUMP\n+\n+/* Zap memory before freeing to catch dangling pointers.  */\n #define GGC_POISON\n \n+/* Log alloc and release.  Don't enable this unless you want a\n+   really really lot of data.  */\n+#undef GGC_DUMP\n+\n /* Global lists of roots, rtxs, and trees.  */\n \n struct ggc_root\n@@ -115,6 +120,11 @@ init_ggc PROTO ((void))\n {\n   /* Initialize the global context.  */\n   ggc_push_context ();\n+\n+#ifdef GGC_DUMP\n+  dump = fopen (\"zgcdump\", \"w\");\n+  setlinebuf (dump);\n+#endif\n }\n \n /* Start a new GGC context.  Memory allocated in previous contexts\n@@ -123,8 +133,7 @@ init_ggc PROTO ((void))\n void\n ggc_push_context PROTO ((void))\n {\n-  struct ggc_status *gs = (struct ggc_status *) xmalloc (sizeof (*gs));\n-  bzero (gs, sizeof (*gs));\n+  struct ggc_status *gs = (struct ggc_status *) xcalloc (1, sizeof (*gs));\n   gs->next = ggc_chain;\n   ggc_chain = gs;\n }\n@@ -194,8 +203,7 @@ ggc_alloc_rtx (nslots)\n   struct ggc_rtx *n;\n   int size = sizeof(*n) + (nslots-1) * sizeof(rtunion);\n \n-  n = (struct ggc_rtx *) xmalloc (size);\n-  bzero ((char *) n, size);\n+  n = (struct ggc_rtx *) xcalloc (1, size);\n   n->chain = ggc_chain->rtxs;\n   ggc_chain->rtxs = n;\n \n@@ -215,8 +223,7 @@ ggc_alloc_rtvec (nelt)\n   struct ggc_rtvec *v;\n   int size = sizeof (*v) + (nelt - 1) * sizeof (rtx);\n \n-  v = (struct ggc_rtvec *) xmalloc (size);\n-  bzero ((char *) v, size);\n+  v = (struct ggc_rtvec *) xcalloc (1, size);\n   v->chain = ggc_chain->vecs;\n   ggc_chain->vecs = v;\n \n@@ -236,8 +243,7 @@ ggc_alloc_tree (length)\n   struct ggc_tree *n;\n   int size = sizeof(*n) - sizeof(n->tree) + length;\n \n-  n = (struct ggc_tree *) xmalloc (size);\n-  bzero ((char *) n, size);\n+  n = (struct ggc_tree *) xcalloc (1, size);\n   n->chain = ggc_chain->trees;\n   ggc_chain->trees = n;\n \n@@ -284,8 +290,7 @@ ggc_alloc_string (contents, length)\n }\n \n \n-/* Freeing a bit of rtl isn't quite as simple as calling free, there are\n-   a few associated bits that might need freeing as well.  */\n+/* Freeing a bit of rtl is as simple as calling free.  */\n \n static void\n ggc_free_rtx (r)\n@@ -757,7 +762,7 @@ ggc_collect ()\n   if (!quiet_flag)\n     {\n       time = (time + 500) / 1000;\n-      fprintf (stderr, \"%d,%d,%d,%d %d.%03d}\", n_rtxs, n_vecs, n_trees,\n+      fprintf (stderr, \"%dr,%dv,%dt,%ds %d.%03d}\", n_rtxs, n_vecs, n_trees,\n \t       n_strings, time / 1000, time % 1000);\n     }\n }\n@@ -877,16 +882,6 @@ ggc_mark_tree_hash_table_ptr (elt)\n   ggc_mark_tree_hash_table (*(struct hash_table **) elt);\n }\n \n-#ifdef GGC_DUMP\n-/* Don't enable this unless you want a really really lot of data.  */\n-static void __attribute__((constructor))\n-init(void)\n-{\n-  dump = fopen (\"zgcdump\", \"w\");\n-  setlinebuf (dump);\n-}\n-#endif\n-\n #if 0\n /* GDB really should have a memory search function.  Since this is just\n    for initial debugging, I won't even pretend to get the __data_start"}]}