{"sha": "a31830a7cab48698868c117ba9100ec31069a91b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxODMwYTdjYWI0ODY5ODg2OGMxMTdiYTkxMDBlYzMxMDY5YTkxYg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-02-11T19:53:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-02-11T19:53:11Z"}, "message": "fwprop.c (try_fwprop_subst): Use set_unique_reg_note to add the REG_EQ* note.\n\n\t* fwprop.c (try_fwprop_subst): Use set_unique_reg_note\n\tto add the REG_EQ* note.\n\t* see.c (see_merge_one_use_extension): Likewise.\n\t* local-alloc.c (update_equiv_regs): Likewise.  Also don't\n\tturn REG_EQUAL notes into REG_EQUIV notes if the target\n\tregister may have more than one set.\n\t* function.c (assign_parm_setup_reg): Use set_unique_reg_note.\n\t* gcse.c (try_replace_reg): Likewise.\n\t* alias.c (init_alias_analysis): Use find_reg_equal_equiv_note.\n\t* calls.c (fixup_tail_calls): Likewise.  Abort if there is\n\tmore than one REG_EQUIV note.\n\t* reload1.c (gen_reload): Use set_unique_reg_note.\n\nFrom-SVN: r121821", "tree": {"sha": "b8e43a1106916133f6889b90922be4c1b0c3b737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e43a1106916133f6889b90922be4c1b0c3b737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31830a7cab48698868c117ba9100ec31069a91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31830a7cab48698868c117ba9100ec31069a91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31830a7cab48698868c117ba9100ec31069a91b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31830a7cab48698868c117ba9100ec31069a91b/comments", "author": null, "committer": null, "parents": [{"sha": "4c38b6d9425a007d8e27511703f9660c48962e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c38b6d9425a007d8e27511703f9660c48962e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c38b6d9425a007d8e27511703f9660c48962e6e"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "75cec2a33be01ce6058c5ac748b2632bc79771c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -1,3 +1,18 @@\n+2007-02-11  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* fwprop.c (try_fwprop_subst): Use set_unique_reg_note\n+\tto add the REG_EQ* note.\n+\t* see.c (see_merge_one_use_extension): Likewise.\n+\t* local-alloc.c (update_equiv_regs): Likewise.  Also don't\n+\tturn REG_EQUAL notes into REG_EQUIV notes if the target\n+\tregister may have more than one set.\n+\t* function.c (assign_parm_setup_reg): Use set_unique_reg_note.\n+\t* gcse.c (try_replace_reg): Likewise.\n+\t* alias.c (init_alias_analysis): Use find_reg_equal_equiv_note.\n+\t* calls.c (fixup_tail_calls): Likewise.  Abort if there is\n+\tmore than one REG_EQUIV note.\n+\t* reload1.c (gen_reload): Use set_unique_reg_note.\n+\n 2007-02-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (TARGET_VECTORIZE_BUILTIN_CONVERSION): Define."}, {"sha": "b873e9743bf1735d804d15b651461957f5bac672", "filename": "gcc/alias.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -2546,10 +2546,12 @@ init_alias_analysis (void)\n \t\t  rtx src = SET_SRC (set);\n \t\t  rtx t;\n \n-\t\t  if (REG_NOTES (insn) != 0\n-\t\t      && (((note = find_reg_note (insn, REG_EQUAL, 0)) != 0\n-\t\t\t   && REG_N_SETS (regno) == 1)\n-\t\t\t  || (note = find_reg_note (insn, REG_EQUIV, NULL_RTX)) != 0)\n+\t\t  note = find_reg_equal_equiv_note (insn);\n+\t\t  if (note && REG_NOTE_KIND (note) == REG_EQUAL\n+\t\t      && REG_N_SETS (regno) != 1)\n+\t\t    note = NULL_RTX;\n+\n+\t\t  if (note != NULL_RTX\n \t\t      && GET_CODE (XEXP (note, 0)) != EXPR_LIST\n \t\t      && ! rtx_varies_p (XEXP (note, 0), 1)\n \t\t      && ! reg_overlap_mentioned_p (SET_DEST (set),"}, {"sha": "53e4d3f073d5b1d483c414441a222b009cc9e003", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -3130,24 +3130,19 @@ fixup_tail_calls (void)\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n+      rtx note;\n+\n       /* There are never REG_EQUIV notes for the incoming arguments\n \t after the NOTE_INSN_FUNCTION_BEG note, so stop if we see it.  */\n       if (NOTE_P (insn)\n \t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG)\n \tbreak;\n \n-      while (1)\n-\t{\n-\t  rtx note = find_reg_note (insn, REG_EQUIV, 0);\n-\t  if (note)\n-\t    {\n-\t      /* Remove the note and keep looking at the notes for\n-\t\t this insn.  */\n-\t      remove_note (insn, note);\n-\t      continue;\n-\t    }\n-\t  break;\n-\t}\n+      note = find_reg_note (insn, REG_EQUIV, 0);\n+      if (note)\n+\tremove_note (insn, note);\n+      note = find_reg_note (insn, REG_EQUIV, 0);\n+      gcc_assert (!note);\n     }\n }\n "}, {"sha": "31958b1cf8bea6b80ad2498fc1a927abac750f51", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -2800,20 +2800,14 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \t\tcontinue;\n \n \t      if (SET_DEST (set) == regno_reg_rtx [regnoi])\n-\t\tREG_NOTES (sinsn)\n-\t\t  = gen_rtx_EXPR_LIST (REG_EQUIV, stacki,\n-\t\t\t\t       REG_NOTES (sinsn));\n+\t\tset_unique_reg_note (sinsn, REG_EQUIV, stacki);\n \t      else if (SET_DEST (set) == regno_reg_rtx [regnor])\n-\t\tREG_NOTES (sinsn)\n-\t\t  = gen_rtx_EXPR_LIST (REG_EQUIV, stackr,\n-\t\t\t\t       REG_NOTES (sinsn));\n+\t\tset_unique_reg_note (sinsn, REG_EQUIV, stackr);\n \t    }\n \t}\n       else if ((set = single_set (linsn)) != 0\n \t       && SET_DEST (set) == parmreg)\n-\tREG_NOTES (linsn)\n-\t  = gen_rtx_EXPR_LIST (REG_EQUIV,\n-\t\t\t       data->stack_parm, REG_NOTES (linsn));\n+\tset_unique_reg_note (linsn, REG_EQUIV, data->stack_parm);\n     }\n \n   /* For pointer data type, suggest pointer register.  */"}, {"sha": "1ab3e525138155fcd172e8a7aca66c0453e0a421", "filename": "gcc/fwprop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -691,9 +691,10 @@ try_fwprop_subst (struct df_ref *use, rtx *loc, rtx new, rtx def_insn, bool set_\n \t  if (dump_file)\n \t    fprintf (dump_file, \" Setting REG_EQUAL note\\n\");\n \n-\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (new),\n-\t\t\t\t\t\tREG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUAL, copy_rtx (new));\n \n+\t  /* ??? Is this still necessary if we add the note through\n+\t     set_unique_reg_note?  */\n           if (!CONSTANT_P (new))\n \t    update_df (insn, loc, DF_INSN_USES (df, def_insn),\n \t\t       type, DF_REF_IN_NOTE);"}, {"sha": "36b2c8f9db4c81910e501db1f0cbe62037ea48e1", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -2668,7 +2668,8 @@ try_replace_reg (rtx from, rtx to, rtx insn)\n   /* If there is already a REG_EQUAL note, update the expression in it\n      with our replacement.  */\n   if (note != 0 && REG_NOTE_KIND (note) == REG_EQUAL)\n-    XEXP (note, 0) = simplify_replace_rtx (XEXP (note, 0), from, to);\n+    set_unique_reg_note (insn, REG_EQUAL,\n+\t\t\t simplify_replace_rtx (XEXP (note, 0), from, to));\n \n   if (!success && set && reg_mentioned_p (from, SET_SRC (set)))\n     {"}, {"sha": "6f24968f10c8360c9592478b4c39a8bd3beac6b5", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -930,8 +930,13 @@ update_equiv_regs (void)\n \n \t  /* If this register is known to be equal to a constant, record that\n \t     it is always equivalent to the constant.  */\n-\t  if (note && ! rtx_varies_p (XEXP (note, 0), 0))\n-\t    PUT_MODE (note, (enum machine_mode) REG_EQUIV);\n+\t  if (REG_N_SETS (regno) == 1\n+\t      && note && ! rtx_varies_p (XEXP (note, 0), 0))\n+\t    {\n+\t      rtx note_value = XEXP (note, 0);\n+\t      remove_note (insn, note);\n+\t      set_unique_reg_note (insn, REG_EQUIV, note_value);\n+\t    }\n \n \t  /* If this insn introduces a \"constant\" register, decrease the priority\n \t     of that register.  Record this insn if the register is only used once\n@@ -953,9 +958,7 @@ update_equiv_regs (void)\n \t  if (note == 0 && REG_BASIC_BLOCK (regno) >= 0\n \t      && MEM_P (SET_SRC (set))\n \t      && validate_equiv_mem (insn, dest, SET_SRC (set)))\n-\t    REG_NOTES (insn) = note = gen_rtx_EXPR_LIST (REG_EQUIV,\n-\t\t\t    \t\t\t\t copy_rtx (SET_SRC (set)),\n-\t\t\t\t\t\t\t REG_NOTES (insn));\n+\t    note = set_unique_reg_note (insn, REG_EQUIV, copy_rtx (SET_SRC (set)));\n \n \t  if (note)\n \t    {\n@@ -1061,9 +1064,8 @@ update_equiv_regs (void)\n \t  if (validate_equiv_mem (init_insn, src, dest)\n \t      && ! memref_used_between_p (dest, init_insn, insn))\n \t    {\n-\t      REG_NOTES (init_insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUIV, copy_rtx (dest),\n-\t\t\t\t     REG_NOTES (init_insn));\n+\t      set_unique_reg_note (init_insn, REG_EQUIV, copy_rtx (dest));\n+\n \t      /* This insn makes the equivalence, not the one initializing\n \t\t the register.  */\n \t      reg_equiv_init[regno]"}, {"sha": "1ea559e368b7c573476a3f7d76582c8a5e5b0782", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -7832,8 +7832,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       if (insn)\n \t{\n \t  /* Add a REG_EQUIV note so that find_equiv_reg can find it.  */\n-\t  REG_NOTES (insn)\n-\t    = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUIV, in);\n \t  return insn;\n \t}\n \n@@ -7842,7 +7841,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n \n       gen_reload (out, op1, opnum, type);\n       insn = emit_insn (gen_add2_insn (out, op0));\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUIV, in);\n     }\n \n #ifdef SECONDARY_MEMORY_NEEDED\n@@ -7902,8 +7901,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       insn = emit_insn_if_valid_for_reload (insn);\n       if (insn)\n \t{\n-\t  REG_NOTES (insn)\n-\t    = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUIV, in);\n \t  return insn;\n \t}\n "}, {"sha": "4664faaa9ee77b4966337995eafd1e10c3bb575d", "filename": "gcc/see.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31830a7cab48698868c117ba9100ec31069a91b/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=a31830a7cab48698868c117ba9100ec31069a91b", "patch": "@@ -2612,7 +2612,8 @@ see_merge_one_use_extension (void **slot, void *b)\n \t/* Replacement failed.  Remove the note.  */\n \tremove_note (ref_copy, note);\n       else\n-\tXEXP (note, 0) = simplified_note;\n+\tset_unique_reg_note (ref_copy, REG_NOTE_KIND (note),\n+\t\t\t     simplified_note);\n     }\n \n   if (!see_want_to_be_merged_with_extension (ref, use_se, USE_EXTENSION))"}]}