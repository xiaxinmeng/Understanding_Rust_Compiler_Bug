{"sha": "58145e4deb905cb924d9a11d836d08e1584dc52d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxNDVlNGRlYjkwNWNiOTI0ZDlhMTFkODM2ZDA4ZTE1ODRkYzUyZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-01-18T19:45:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-18T19:45:13Z"}, "message": "real.h (real_format): Add a canonical_nan_lsbs_set field.\n\ngcc/\n\t* real.h (real_format): Add a canonical_nan_lsbs_set field.\n\t(coldfire_single_format): Declare.\n\t(coldfire_double_format): Likewise.\n\t* real.c (encode_ieee_single): Use canonical_nan_lsbs_set instead\n\tof qnan_msb_set to determine the lower bits of a canonical\n\tNaN significand.\n\t(encode_ieee_double): Likewise.\n\t(encode_ieee_quad): Likewise.\n\t(ieee_single_format): Initialize canonical_nan_lsbs_set.\n\t(mips_single_format): Likewise.\n\t(ieee_double_format): Likewise.\n\t(mips_double_format): Likewise.\n\t(ieee_extended_motorola_format): Likewise.\n\t(ieee_extended_intel_96_format): Likewise.\n\t(ieee_extended_intel_128_format): Likewise.\n\t(ieee_extended_intel_96_round_53_format): Likewise.\n\t(ibm_extended_format): Likewise.\n\t(mips_extended_format): Likewise.\n\t(ieee_quad_format): Likewise.\n\t(mips_quad_format): Likewise.\n\t(vax_f_format): Likewise.\n\t(vax_d_format): Likewise.\n\t(vax_g_format): Likewise.\n\t(i370_single_format): Likewise.\n\t(i370_double_format): Likewise.\n\t(decimal_single_format): Likewise.\n\t(decimal_double_format): Likewise.\n\t(decimal_quad_format): Likewise.\n\t(c4x_single_format): Likewise.\n\t(c4x_extended_format): Likewise.\n\t(real_internal_format): Likewise.\n\t(coldfire_single_format): New real_format.\n\t(coldfire_double_format): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_f_format): Initialize\n\tcanonical_nan_lsbs_set.\n\t(pdp11_d_format): Likewise.\n\t* config/m68k/m68k.c (override_options): Override REAL_FORMAT_MODE\n\tif TARGET_COLDFIRE_CPU.\n\nFrom-SVN: r120922", "tree": {"sha": "9c8fa4a657c721bda18f8f7a160f5df0056567c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c8fa4a657c721bda18f8f7a160f5df0056567c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58145e4deb905cb924d9a11d836d08e1584dc52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58145e4deb905cb924d9a11d836d08e1584dc52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58145e4deb905cb924d9a11d836d08e1584dc52d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58145e4deb905cb924d9a11d836d08e1584dc52d/comments", "author": null, "committer": null, "parents": [{"sha": "29ca003a7aad12d6bdf0ea6a7e49a8544e0ba5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ca003a7aad12d6bdf0ea6a7e49a8544e0ba5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ca003a7aad12d6bdf0ea6a7e49a8544e0ba5ad"}], "stats": {"total": 197, "additions": 150, "deletions": 47}, "files": [{"sha": "646470a8df9bb81062572b7b2e6af518b8498549", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58145e4deb905cb924d9a11d836d08e1584dc52d", "patch": "@@ -1,3 +1,44 @@\n+2007-01-18  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* real.h (real_format): Add a canonical_nan_lsbs_set field.\n+\t(coldfire_single_format): Declare.\n+\t(coldfire_double_format): Likewise.\n+\t* real.c (encode_ieee_single): Use canonical_nan_lsbs_set instead\n+\tof qnan_msb_set to determine the lower bits of a canonical\n+\tNaN significand.\n+\t(encode_ieee_double): Likewise.\n+\t(encode_ieee_quad): Likewise.\n+\t(ieee_single_format): Initialize canonical_nan_lsbs_set.\n+\t(mips_single_format): Likewise.\n+\t(ieee_double_format): Likewise.\n+\t(mips_double_format): Likewise.\n+\t(ieee_extended_motorola_format): Likewise.\n+\t(ieee_extended_intel_96_format): Likewise.\n+\t(ieee_extended_intel_128_format): Likewise.\n+\t(ieee_extended_intel_96_round_53_format): Likewise.\n+\t(ibm_extended_format): Likewise.\n+\t(mips_extended_format): Likewise.\n+\t(ieee_quad_format): Likewise.\n+\t(mips_quad_format): Likewise.\n+\t(vax_f_format): Likewise.\n+\t(vax_d_format): Likewise.\n+\t(vax_g_format): Likewise.\n+\t(i370_single_format): Likewise.\n+\t(i370_double_format): Likewise.\n+\t(decimal_single_format): Likewise.\n+\t(decimal_double_format): Likewise.\n+\t(decimal_quad_format): Likewise.\n+\t(c4x_single_format): Likewise.\n+\t(c4x_extended_format): Likewise.\n+\t(real_internal_format): Likewise.\n+\t(coldfire_single_format): New real_format.\n+\t(coldfire_double_format): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_f_format): Initialize\n+\tcanonical_nan_lsbs_set.\n+\t(pdp11_d_format): Likewise.\n+\t* config/m68k/m68k.c (override_options): Override REAL_FORMAT_MODE\n+\tif TARGET_COLDFIRE_CPU.\n+\n 2007-01-18  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/m68k/m68k-protos.h (m68k_output_pic_call): Delete."}, {"sha": "aa91b72df00dcc91812d4479e18996c84e64cfd1", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=58145e4deb905cb924d9a11d836d08e1584dc52d", "patch": "@@ -512,6 +512,12 @@ override_options (void)\n \t      : (m68k_cpu_flags & FL_COLDFIRE) != 0 ? FPUTYPE_COLDFIRE\n \t      : FPUTYPE_68881);\n \n+  if (TARGET_COLDFIRE_FPU)\n+    {\n+      REAL_MODE_FORMAT (SFmode) = &coldfire_single_format;\n+      REAL_MODE_FORMAT (DFmode) = &coldfire_double_format;\n+    }\n+\n   /* Sanity check to ensure that msep-data and mid-sahred-library are not\n    * both specified together.  Doing so simply doesn't make sense.\n    */"}, {"sha": "3e295b174b6e112a10ca9b77f1ddd76e4e1ef24c", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=58145e4deb905cb924d9a11d836d08e1584dc52d", "patch": "@@ -78,6 +78,7 @@ const struct real_format pdp11_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -96,6 +97,7 @@ const struct real_format pdp11_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n "}, {"sha": "b966917ae8f176cdc7b14e008299578432551b0c", "filename": "gcc/real.c", "status": "modified", "additions": 98, "deletions": 47, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=58145e4deb905cb924d9a11d836d08e1584dc52d", "patch": "@@ -2681,18 +2681,12 @@ encode_ieee_single (const struct real_format *fmt, long *buf,\n       if (fmt->has_nans)\n \t{\n \t  if (r->canonical)\n-\t    sig = 0;\n+\t    sig = (fmt->canonical_nan_lsbs_set ? (1 << 22) - 1 : 0);\n \t  if (r->signalling == fmt->qnan_msb_set)\n \t    sig &= ~(1 << 22);\n \t  else\n \t    sig |= 1 << 22;\n-\t  /* We overload qnan_msb_set here: it's only clear for\n-\t     mips_ieee_single, which wants all mantissa bits but the\n-\t     quiet/signalling one set in canonical NaNs (at least\n-\t     Quiet ones).  */\n-\t  if (r->canonical && !fmt->qnan_msb_set)\n-\t    sig |= (1 << 22) - 1;\n-\t  else if (sig == 0)\n+\t  if (sig == 0)\n \t    sig = 1 << 21;\n \n \t  image |= 255 << 23;\n@@ -2787,7 +2781,8 @@ const struct real_format ieee_single_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format mips_single_format =\n@@ -2806,9 +2801,29 @@ const struct real_format mips_single_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    true\n   };\n \n+const struct real_format coldfire_single_format =\n+  {\n+    encode_ieee_single,\n+    decode_ieee_single,\n+    2,\n+    1,\n+    24,\n+    24,\n+    -125,\n+    128,\n+    31,\n+    31,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true\n+  };\n \f\n /* IEEE double-precision format.  */\n \n@@ -2860,21 +2875,23 @@ encode_ieee_double (const struct real_format *fmt, long *buf,\n       if (fmt->has_nans)\n \t{\n \t  if (r->canonical)\n-\t    sig_hi = sig_lo = 0;\n+\t    {\n+\t      if (fmt->canonical_nan_lsbs_set)\n+\t\t{\n+\t\t  sig_hi = (1 << 19) - 1;\n+\t\t  sig_lo = 0xffffffff;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  sig_hi = 0;\n+\t\t  sig_lo = 0;\n+\t\t}\n+\t    }\n \t  if (r->signalling == fmt->qnan_msb_set)\n \t    sig_hi &= ~(1 << 19);\n \t  else\n \t    sig_hi |= 1 << 19;\n-\t  /* We overload qnan_msb_set here: it's only clear for\n-\t     mips_ieee_single, which wants all mantissa bits but the\n-\t     quiet/signalling one set in canonical NaNs (at least\n-\t     Quiet ones).  */\n-\t  if (r->canonical && !fmt->qnan_msb_set)\n-\t    {\n-\t      sig_hi |= (1 << 19) - 1;\n-\t      sig_lo = 0xffffffff;\n-\t    }\n-\t  else if (sig_hi == 0 && sig_lo == 0)\n+\t  if (sig_hi == 0 && sig_lo == 0)\n \t    sig_hi = 1 << 18;\n \n \t  image_hi |= 2047 << 20;\n@@ -3012,7 +3029,8 @@ const struct real_format ieee_double_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format mips_double_format =\n@@ -3031,9 +3049,29 @@ const struct real_format mips_double_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    true\n   };\n \n+const struct real_format coldfire_double_format =\n+  {\n+    encode_ieee_double,\n+    decode_ieee_double,\n+    2,\n+    1,\n+    53,\n+    53,\n+    -1021,\n+    1024,\n+    63,\n+    63,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true\n+  };\n \f\n /* IEEE extended real format.  This comes in three flavors: Intel's as\n    a 12 byte image, Intel's as a 16 byte image, and Motorola's.  Intel\n@@ -3361,7 +3399,8 @@ const struct real_format ieee_extended_motorola_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format ieee_extended_intel_96_format =\n@@ -3380,7 +3419,8 @@ const struct real_format ieee_extended_intel_96_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format ieee_extended_intel_128_format =\n@@ -3399,7 +3439,8 @@ const struct real_format ieee_extended_intel_128_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n /* The following caters to i386 systems that set the rounding precision\n@@ -3420,7 +3461,8 @@ const struct real_format ieee_extended_intel_96_round_53_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \f\n /* IBM 128-bit extended precision format: a pair of IEEE double precision\n@@ -3506,7 +3548,8 @@ const struct real_format ibm_extended_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format mips_extended_format =\n@@ -3525,7 +3568,8 @@ const struct real_format mips_extended_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    true\n   };\n \n \f\n@@ -3575,8 +3619,11 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n \n \t  if (r->canonical)\n \t    {\n-\t      /* Don't use bits from the significand.  The\n-\t\t initialization above is right.  */\n+\t      if (fmt->canonical_nan_lsbs_set)\n+\t\t{\n+\t\t  image3 |= 0x7fff;\n+\t\t  image2 = image1 = image0 = 0xffffffff;\n+\t\t}\n \t    }\n \t  else if (HOST_BITS_PER_LONG == 32)\n \t    {\n@@ -3598,16 +3645,7 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n \t    image3 &= ~0x8000;\n \t  else\n \t    image3 |= 0x8000;\n-\t  /* We overload qnan_msb_set here: it's only clear for\n-\t     mips_ieee_single, which wants all mantissa bits but the\n-\t     quiet/signalling one set in canonical NaNs (at least\n-\t     Quiet ones).  */\n-\t  if (r->canonical && !fmt->qnan_msb_set)\n-\t    {\n-\t      image3 |= 0x7fff;\n-\t      image2 = image1 = image0 = 0xffffffff;\n-\t    }\n-\t  else if (((image3 & 0xffff) | image2 | image1 | image0) == 0)\n+\t  if (((image3 & 0xffff) | image2 | image1 | image0) == 0)\n \t    image3 |= 0x4000;\n \t}\n       else\n@@ -3792,7 +3830,8 @@ const struct real_format ieee_quad_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n const struct real_format mips_quad_format =\n@@ -3811,7 +3850,8 @@ const struct real_format mips_quad_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    true\n   };\n \f\n /* Descriptions of VAX floating point formats can be found beginning at\n@@ -4109,6 +4149,7 @@ const struct real_format vax_f_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4128,6 +4169,7 @@ const struct real_format vax_d_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4147,6 +4189,7 @@ const struct real_format vax_g_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \f\n@@ -4323,6 +4366,7 @@ const struct real_format i370_single_format =\n     false,\n     false, /* ??? The encoding does allow for \"unnormals\".  */\n     false, /* ??? The encoding does allow for \"unnormals\".  */\n+    false,\n     false\n   };\n \n@@ -4342,6 +4386,7 @@ const struct real_format i370_double_format =\n     false,\n     false, /* ??? The encoding does allow for \"unnormals\".  */\n     false, /* ??? The encoding does allow for \"unnormals\".  */\n+    false,\n     false\n   };\n \f\n@@ -4416,7 +4461,8 @@ const struct real_format decimal_single_format =\n     true,\n     true,\n     true, \n-    true\n+    true,\n+    false\n   };\n \n /* Double precision decimal floating point (IEEE 754R). */\n@@ -4436,7 +4482,8 @@ const struct real_format decimal_double_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    false\n   };\n \n /* Quad precision decimal floating point (IEEE 754R). */\n@@ -4456,7 +4503,8 @@ const struct real_format decimal_quad_format =\n     true,\n     true, \n     true, \n-    true\n+    true,\n+    false\n   };\n \f\n /* The \"twos-complement\" c4x format is officially defined as\n@@ -4665,6 +4713,7 @@ const struct real_format c4x_single_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4684,6 +4733,7 @@ const struct real_format c4x_extended_format =\n     false,\n     false,\n     false,\n+    false,\n     false\n   };\n \n@@ -4728,7 +4778,8 @@ const struct real_format real_internal_format =\n     true,\n     false,\n     true,\n-    true\n+    true,\n+    false\n   };\n \f\n /* Calculate the square root of X in mode MODE, and store the result"}, {"sha": "81ee855dbfae5b1a5df3f1ee4933cafda2bb1ac6", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58145e4deb905cb924d9a11d836d08e1584dc52d/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=58145e4deb905cb924d9a11d836d08e1584dc52d", "patch": "@@ -155,6 +155,7 @@ struct real_format\n   bool has_denorm;\n   bool has_signed_zero;\n   bool qnan_msb_set;\n+  bool canonical_nan_lsbs_set;\n };\n \n \n@@ -255,8 +256,10 @@ extern unsigned int real_hash (const REAL_VALUE_TYPE *);\n /* Target formats defined in real.c.  */\n extern const struct real_format ieee_single_format;\n extern const struct real_format mips_single_format;\n+extern const struct real_format coldfire_single_format;\n extern const struct real_format ieee_double_format;\n extern const struct real_format mips_double_format;\n+extern const struct real_format coldfire_double_format;\n extern const struct real_format ieee_extended_motorola_format;\n extern const struct real_format ieee_extended_intel_96_format;\n extern const struct real_format ieee_extended_intel_96_round_53_format;"}]}