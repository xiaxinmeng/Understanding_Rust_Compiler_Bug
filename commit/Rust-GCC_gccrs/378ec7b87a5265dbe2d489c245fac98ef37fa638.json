{"sha": "378ec7b87a5265dbe2d489c245fac98ef37fa638", "node_id": "C_kwDOANBUbNoAKDM3OGVjN2I4N2E1MjY1ZGJlMmQ0ODljMjQ1ZmFjOThlZjM3ZmE2Mzg", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-03-23T03:45:05Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-03-24T04:14:30Z"}, "message": "[testsuite] test for weak_undefined support and add options\n\nA number of tests that depend on weak undefined symbols fail to\nrequire that support, and arrange to skip some targets and add special\noptions to others on a test-by-test basis.  Fix this by stating the\nrequirement explicitly, and adding a proc to return any required\noptions.\n\nOthers rely on weak undefined symbols only to test for the\navailability of posix_memalign.  Drop that in favor of dg effective\ntarget support for posix_memalign.\n\n\nfor  gcc/ChangeLog\n\n\t* doc/sourcebuild.texi (weak_undefined, posix_memalign):\n\tDocument options and effective targets.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* lib/target-supports.exp (add_options_for_weak_undefined):\n\tNew.\n\t(check_effective_target_weak_undefined): Use it.\n\t(check_effective_target_posix_memalign): New.\n\t* gcc.dg/torture/pr53922.c: Drop skips and custom options in\n\tfavor of effective target requirement and added options for\n\tweak_undefined symbols.\n\t* gcc.dg/torture/pr90020.c: Likewise.\n\t* gcc.dg/addr_equal-1.c: Likewise.\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Likewise, for\n\tabitest.S-using tests.\n\t* gcc.dg/torture/pr60092.c: Likewise, but in favor of\n\tposix_memalign tests.\n\t* gcc.dg/vect/vect-tail-nomask-1.c: Likewise.", "tree": {"sha": "3acd00b204f616c57c61eff2272763908d831c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3acd00b204f616c57c61eff2272763908d831c53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378ec7b87a5265dbe2d489c245fac98ef37fa638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378ec7b87a5265dbe2d489c245fac98ef37fa638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378ec7b87a5265dbe2d489c245fac98ef37fa638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378ec7b87a5265dbe2d489c245fac98ef37fa638/comments", "author": null, "committer": null, "parents": [{"sha": "3b67db31236631432e7f6d74ed49af9ae2183a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b67db31236631432e7f6d74ed49af9ae2183a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b67db31236631432e7f6d74ed49af9ae2183a4d"}], "stats": {"total": 99, "additions": 54, "deletions": 45}, "files": [{"sha": "8f1c7b65d69de15c4118be4c4a9150b4ddbc65ac", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -2693,6 +2693,9 @@ Target supports Newlib.\n GCC was configured with @code{--enable-newlib-nano-formatted-io}, which reduces\n the code size of Newlib formatted I/O functions.\n \n+@item posix_memalign\n+Target supports @code{posix_memalign}.\n+\n @item pow10\n Target provides @code{pow10} function.\n \n@@ -2755,6 +2758,9 @@ Target is a VxWorks RTP.\n \n @item wchar\n Target supports wide characters.\n+\n+@item weak_undefined\n+Target supports weak undefined symbols\n @end table\n \n @subsubsection Other attributes\n@@ -3126,6 +3132,9 @@ instructions, if any.\n \n @item tls\n Add the target-specific flags needed to use thread-local storage.\n+\n+@item weak_undefined\n+Add the flags needed to enable support for weak undefined symbols.\n @end table\n \n @node Require Support"}, {"sha": "db65dea4a8d2a683ff163d00186e68d435165fca", "filename": "gcc/testsuite/gcc.dg/addr_equal-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_equal-1.c?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -1,9 +1,8 @@\n-/* { dg-do run { target { nonpic || pie_enabled } } } */\n-/* { dg-require-weak \"\" } */\n+/* { dg-do run { target { { nonpic || pie_enabled } && weak_undefined } } } */\n /* { dg-require-alias \"\" } */\n /* { dg-options \"-O2 -fdelete-null-pointer-checks\" } */\n-/* { dg-skip-if \"\" { powerpc-ibm-aix* } } */\n /* { dg-skip-if \"function pointers can be NULL\" { keeps_null_pointer_checks } } */\n+/* { dg-add-options weak_undefined } */\n void abort (void);\n extern int undef_var0, undef_var1;\n extern __attribute__ ((weak)) int weak_undef_var0;"}, {"sha": "07359d676496415a45efa1eefbabe975cb3f208c", "filename": "gcc/testsuite/gcc.dg/torture/pr53922.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53922.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53922.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53922.c?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -1,11 +1,5 @@\n-/* { dg-do run } */\n-/* { dg-require-weak \"\" } */\n-/* { dg-skip-if \"No undefined\" { *-*-mingw* } } */\n-/* { dg-skip-if \"No undefined weak\" { *-*-aix* } } */\n-/* { dg-skip-if \"No undefined weak\" { hppa*-*-hpux* && { ! lp64 } } } */\n-/* { dg-skip-if \"No undefined weak\" { nvptx-*-* } } */\n-/* { dg-options \"-Wl,-undefined,dynamic_lookup\" { target *-*-darwin* } } */\n-/* { dg-additional-options \"-Wl,-flat_namespace\" { target *-*-darwin[89]* } } */\n+/* { dg-do run { target { weak_undefined } } } */\n+/* { dg-add-options weak_undefined } */\n \n int x(int a)\n {"}, {"sha": "102ba6e0d9f871f0c60b79ce7e92275a5e209a8d", "filename": "gcc/testsuite/gcc.dg/torture/pr60092.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60092.c?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -1,22 +1,14 @@\n-/* { dg-do run } */\n-/* { dg-require-weak \"\" } */\n-/* { dg-skip-if \"No undefined weak\" { hppa*-*-hpux* && { ! lp64 } } } */\n-/* { dg-skip-if \"No undefined weak\" { nvptx-*-* } } */\n-/* { dg-additional-options \"-Wl,-undefined,dynamic_lookup\" { target *-*-darwin* } } */\n-/* { dg-additional-options \"-Wl,-flat_namespace\" { target *-*-darwin[89]* } } */\n+/* { dg-do run { target { posix_memalign } } } */\n \n typedef __SIZE_TYPE__ size_t;\n-extern int posix_memalign(void **memptr, size_t alignment, size_t size) __attribute__((weak));\n+extern int posix_memalign(void **memptr, size_t alignment, size_t size);\n extern void abort(void);\n int\n main (void)\n {\n   void *p;\n   int ret;\n \n-  if (!posix_memalign)\n-    return 0;\n-\n   p = (void *)&ret;\n   ret = posix_memalign (&p, sizeof (void *), -1);\n   if (p != (void *)&ret)"}, {"sha": "40035aa758e6e4ab325d37d5c20982778f60085a", "filename": "gcc/testsuite/gcc.dg/torture/pr90020.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90020.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90020.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90020.c?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -1,8 +1,5 @@\n-/* { dg-do run } */\n-/* { dg-skip-if \"No undefined weak\" { hppa*-*-hpux* || powerpc-ibm-aix* } } */\n-/* { dg-require-weak \"\" } */\n-/* { dg-additional-options \"-Wl,-undefined,dynamic_lookup\" { target *-*-darwin* } } */\n-/* { dg-additional-options \"-Wl,-flat_namespace\" { target *-*-darwin[89]* } } */\n+/* { dg-do run  { target { weak_undefined } } } */\n+/* { dg-add-options weak_undefined } */\n \n void __attribute__((noinline,noclone))\n check (int i)"}, {"sha": "ee9ab2e9d910b7301641201e15e0443a1eca294b", "filename": "gcc/testsuite/gcc.dg/vect/vect-tail-nomask-1.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -1,14 +1,10 @@\n-/* { dg-require-weak \"\" } */\n-/* { dg-skip-if \"No undefined weak\" { hppa*-*-hpux* && { ! lp64 } } } */\n-/* { dg-skip-if \"No undefined weak\" { nvptx-*-* } } */\n-/* { dg-additional-options \"-Wl,-undefined,dynamic_lookup\" { target *-*-darwin* } } */\n-/* { dg-additional-options \"-Wl,-flat_namespace\" { target *-*-darwin[89]* } } */\n+/* { dg-skip-if \"No undefined weak\" { ! { posix_memalign } } } */\n /* { dg-additional-options \"--param vect-epilogues-nomask=1 -mavx2\" { target avx2_runtime } } */\n \n #define SIZE 1023\n #define ALIGN 64\n \n-extern int posix_memalign(void **memptr, __SIZE_TYPE__ alignment, __SIZE_TYPE__ size) __attribute__((weak));\n+extern int posix_memalign(void **memptr, __SIZE_TYPE__ alignment, __SIZE_TYPE__ size);\n extern void free (void *);\n \n void __attribute__((noinline))\n@@ -98,9 +94,6 @@ run_test ()\n int\n main (int argc, const char **argv)\n {\n-  if (!posix_memalign)\n-    return 0;\n-\n   run_test ();\n   return 0;\n }"}, {"sha": "38a2c06a5956063d5032bdf65cb4bbf3d035fe4d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -32,12 +32,15 @@ set additional_flags \"-W -Wall -Wno-abi -fno-pie -no-pie\"\n # Test parameter passing.  This uses abitest.S which relies on weak\n # symbols.\n \n-if { [check_weak_available] } {\n+set additional_flags_for_abitest [add_options_for_weak_undefined \"\"]\n+set additional_flags_for_abitest \"$additional_flags $additional_flags_for_abitest\"\n+\n+if { [check_effective_target_weak_undefined] } {\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n \tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n-\t\t\t\t    $additional_flags\n+\t\t$additional_flags_for_abitest\n \t}\n     }\n }\n@@ -54,28 +57,28 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/rec_*.c]] {\n \n # Test unnamed argument retrieval via the va_arg macro.  This uses abitest.S\n # which relies on weak symbols.\n-if { [check_weak_available] } {\n+if { [check_effective_target_weak_undefined] } {\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n \tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n-\t\t\t\t    $additional_flags\n+\t\t$additional_flags_for_abitest\n \t}\n     }\n }\n \n # Test function return value.  This uses abitest.S which relies on\n # weak symbols.\n-if { [check_weak_available] } {\n+if { [check_effective_target_weak_undefined] } {\n     #   Disable -fipa-ra to prevent the compiler from generating\n     #   conflicting code.\n-    set additional_flags_for_func_ret $additional_flags\n+    set additional_flags_for_func_ret $additional_flags_for_abitest\n     append additional_flags_for_func_ret \" -fno-ipa-ra\"\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {\n \tif {[runtest_file_p $runtests $src]} {\n \t    c-torture-execute [list $src \\\n \t\t\t\t    $srcdir/$subdir/abitest.S] \\\n-\t\t\t\t    $additional_flags_for_func_ret\n+\t\t$additional_flags_for_func_ret\n \t}\n     }\n }"}, {"sha": "8a110f2d3bd1b3e0cc7d077f8db962e4113629f0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec7b87a5265dbe2d489c245fac98ef37fa638/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=378ec7b87a5265dbe2d489c245fac98ef37fa638", "patch": "@@ -356,6 +356,18 @@ proc check_weak_available { } {\n     }\n }\n \n+# return options to add to enable weak undefined symbols.\n+\n+proc add_options_for_weak_undefined { flags } {\n+    if { [istarget *-*-darwin*] } {\n+\tlappend flags \"-Wl,-undefined,dynamic_lookup\"\n+\tif { [istarget *-*-darwin[89]*] } {\n+\t    lappend flags \"-Wl,-flat_namespace\"\n+\t}\n+    }\n+    return $flags\n+}\n+\n # return 1 if weak undefined symbols are supported.\n \n proc check_effective_target_weak_undefined { } {\n@@ -365,7 +377,7 @@ proc check_effective_target_weak_undefined { } {\n     return [check_runtime weak_undefined {\n \textern void foo () __attribute__((weak));\n \tint main (void) { if (foo) return 1; return 0; }\n-    } \"\"]\n+    } [add_options_for_weak_undefined \"\"]]\n }\n \n ###############################\n@@ -1154,6 +1166,16 @@ proc check_effective_target_clone {} {\n     return [check_function_available \"clone\"]\n }\n \n+# Return 1 if the target supports posix_memalign, 0 otherwise.\n+proc check_effective_target_posix_memalign {} {\n+    if { [istarget *-*-vxworks*] } {\n+\t# VxWorks doesn't have posix_memalign but our way to test\n+\t# can't tell as we're doing partial links for kernel modules.\n+\treturn 0\n+    }\n+    return [check_function_available \"posix_memalign\"]\n+}\n+\n # Return 1 if the target supports setrlimit, 0 otherwise.\n proc check_effective_target_setrlimit {} {\n     # Darwin has non-posix compliant RLIMIT_AS\n@@ -2891,7 +2913,7 @@ proc check_fork_available {} {\n \t# VxWorks doesn't have fork but our way to test can't\n \t# tell as we're doing partial links for kernel modules.\n \treturn 0\n-     }    \n+    }\n     if { [istarget cris-*-*] } {\n \t# Compiling and linking works, and an executable running e.g.\n \t# gcc.dg/torture/ftrapv-1.c works on now-historical hardware,\n@@ -10836,7 +10858,7 @@ proc check_vect_support_and_set_flags { } {\n         } else {\n             set dg-do-what-default compile\n         }\n-    } elseif [istarget \"aarch64*-*-*\"] {\n+    } elseif [istarget aarch64*-*-*] {\n         set dg-do-what-default run\n     } elseif [istarget s390*-*-*] {\n \t# The S/390 backend set a default of 2 for that value."}]}