{"sha": "f4c31037a235659024062506d8e07640a7165662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjMzEwMzdhMjM1NjU5MDI0MDYyNTA2ZDhlMDc2NDBhNzE2NTY2Mg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-29T15:08:57Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-29T15:08:57Z"}, "message": "re PR libfortran/48488 (Wrong default format for real numbers)\n\n2011-04-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/48488\n\tPR libgfortran/48602\n\tPR libgfortran/48615\n\tPR libgfortran/48684\n\tPR libgfortran/48787\n\t* gfortran.dg/fmt_g.f: Adjust test.\n\t* gfortran.dg/fmt_g0_1.f08: Adjust test.\n\t* gfortran.dg/round_3.f08: New test.\n\t* gfortran.dg/namelist_print_1.f: Adjust test.\n\t* gfortran.dg/char4_iunit_1.f03: Adjust test.\n\t* gfortran.dg/f2003_io_5.f03: Adjust test.\n\t* gfortran.dg/coarray_15.f90: Adjust test.\n\t* gfortran.dg/namelist_65.f90: Adjust test.\n\t* gfortran.dg/fmt_cache_1.f: Adjust test.\n\t* gfortran.dg/char4_iunit_2.f03: Adjust test.\n\t* gfortran.dg/real_const_3.f90: Adjust test.\n\nFrom-SVN: r173168", "tree": {"sha": "0b24a094afa50332654ce568d6bbbaf63a1384de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b24a094afa50332654ce568d6bbbaf63a1384de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c31037a235659024062506d8e07640a7165662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c31037a235659024062506d8e07640a7165662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c31037a235659024062506d8e07640a7165662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c31037a235659024062506d8e07640a7165662/comments", "author": null, "committer": null, "parents": [{"sha": "45a2c4774f993ad7a9ecac91add79b7e2ebef566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a2c4774f993ad7a9ecac91add79b7e2ebef566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a2c4774f993ad7a9ecac91add79b7e2ebef566"}], "stats": {"total": 208, "additions": 151, "deletions": 57}, "files": [{"sha": "e7153e59f9a17e5c3ed9ae4068165209b83408fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -1,3 +1,22 @@\n+2011-04-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/48488\n+\tPR libgfortran/48602\n+\tPR libgfortran/48615\n+\tPR libgfortran/48684\n+\tPR libgfortran/48787\n+\t* gfortran.dg/fmt_g.f: Adjust test.\n+\t* gfortran.dg/fmt_g0_1.f08: Adjust test.\n+\t* gfortran.dg/round_3.f08: New test.\n+\t* gfortran.dg/namelist_print_1.f: Adjust test.\n+\t* gfortran.dg/char4_iunit_1.f03: Adjust test.\n+\t* gfortran.dg/f2003_io_5.f03: Adjust test.\n+\t* gfortran.dg/coarray_15.f90: Adjust test.\n+\t* gfortran.dg/namelist_65.f90: Adjust test.\n+\t* gfortran.dg/fmt_cache_1.f: Adjust test.\n+\t* gfortran.dg/char4_iunit_2.f03: Adjust test.\n+\t* gfortran.dg/real_const_3.f90: Adjust test.\n+\n 2011-04-28  Xinliang David Li  <davidxl@google.com>\n \n \t* testsuite/gcc.dg/tree-prof/prof-robust-1.c: New test."}, {"sha": "f02cc1a7b5bccbd697511fb56c820c0b0d16d94f", "filename": "gcc/testsuite/gfortran.dg/char4_iunit_1.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_1.f03?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -5,7 +5,7 @@\n ! Test case prepared by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n program char4_iunit_1\n   implicit none\n-  character(kind=4,len=42) :: string\n+  character(kind=4,len=44) :: string\n   integer(kind=4) :: i,j\n   real(kind=4) :: inf, nan, large\n \n@@ -24,11 +24,11 @@ program char4_iunit_1\n   write(string, *) .true., .false. , .true.\n   if (string .ne. 4_\" T F T                                    \") call abort\n   write(string, *) 1.2345e-06, 4.2846e+10_8\n-  if (string .ne. 4_\"  1.23450002E-06   42846000000.000000     \") call abort\n+  if (string .ne. 4_\"   1.23450002E-06   42846000000.000000      \") call abort\n   write(string, *) nan, inf\n-  if (string .ne. 4_\"             NaN        Infinity          \") call abort\n+  if (string .ne. 4_\"              NaN         Infinity    \") call abort\n   write(string, '(10x,f3.1,3x,f9.1)') nan, inf\n-  if (string .ne. 4_\"          NaN    Infinity                 \") call abort\n+  if (string .ne. 4_\"          NaN    Infinity             \") call abort\n   write(string, *) (1.2, 3.4 )\n-  if (string .ne. 4_\" (  1.2000000    ,  3.4000001    )        \") call abort\n+  if (string .ne. 4_\" (  1.20000005    ,  3.40000010    )  \") call abort\n end program char4_iunit_1"}, {"sha": "cbf0f7fbd3df4a62ed039cd5cc94b3b271debef9", "filename": "gcc/testsuite/gfortran.dg/char4_iunit_2.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar4_iunit_2.f03?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -43,5 +43,5 @@ program char4_iunit_2\n   write(widestring,*)\"test\",i, x, str_default,&\n    trim(str_char4)\n   if (widestring .ne. &\n-    k_\" test         345   52.542999     0 hijklmnp qwertyuiopasd\") call abort\n+    k_\" test         345   52.5429993     0 hijklmnp qwertyuiopasd\") call abort\n end program char4_iunit_2"}, {"sha": "0aecb2f4e1181c3cbdf749749848f5d968c3ce50", "filename": "gcc/testsuite/gfortran.dg/coarray_15.f90", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_15.f90?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -9,7 +9,7 @@ program ex2\n       implicit none\n       real, allocatable :: z(:)[:]\n       integer :: image\n-      character(len=80) :: str\n+      character(len=128) :: str\n \n       allocate(z(3)[*])\n       write(*,*) 'z allocated on image',this_image()\n@@ -25,18 +25,18 @@ program ex2\n \n       str = repeat('X', len(str))\n       write(str,*) 'z=',z(:),' on image',this_image()\n-      if (str /= \" z=   1.2000000       1.2000000       1.2000000      on image           1\") &\n-        call abort ()\n+      if (str /= \" z=   1.20000005       1.20000005       1.20000005      on image           1\") &\n+        call abort\n \n       str = repeat('X', len(str))\n       write(str,*) 'z=',z,' on image',this_image()\n-      if (str /= \" z=   1.2000000       1.2000000       1.2000000      on image           1\") &\n-        call abort ()\n+      if (str /= \" z=   1.20000005       1.20000005       1.20000005      on image           1\") &\n+        call abort\n \n       str = repeat('X', len(str))\n       write(str,*) 'z=',z(1:3)[this_image()],' on image',this_image()\n-      if (str /= \" z=   1.2000000       1.2000000       1.2000000      on image           1\") &\n-        call abort ()\n+      if (str /= \" z=   1.20000005       1.20000005       1.20000005      on image           1\") &\n+        call abort\n \n       call ex2a()\n       call ex5()\n@@ -46,7 +46,7 @@ subroutine ex2a()\n       implicit none\n       real, allocatable :: z(:,:)[:,:]\n       integer :: image\n-      character(len=100) :: str\n+      character(len=128) :: str\n \n       allocate(z(2,2)[1,*])\n       write(*,*) 'z allocated on image',this_image()\n@@ -62,38 +62,38 @@ subroutine ex2a()\n \n       str = repeat('X', len(str))\n       write(str,*) 'z=',z(:,:),' on image',this_image()\n-      if (str /= \" z=   1.2000000       1.2000000       1.2000000       1.2000000      on image           1\") &\n-        call abort ()\n+      if (str /= \" z=   1.20000005       1.20000005       1.20000005       1.20000005      on image           1\") &\n+        call abort\n \n       str = repeat('X', len(str))\n       write(str,*) 'z=',z,' on image',this_image()\n-      if (str /= \" z=   1.2000000       1.2000000       1.2000000       1.2000000      on image           1\") &\n-        call abort ()\n+      if (str /= \" z=   1.20000005       1.20000005       1.20000005       1.20000005      on image           1\") &\n+        call abort\n end subroutine ex2a\n \n subroutine ex5\n    implicit none\n    integer :: me\n    real, save :: w(4)[*]\n-   character(len=100) :: str\n+   character(len=128) :: str\n \n    me = this_image()\n    w = me\n \n    str = repeat('X', len(str))\n    write(str,*) 'In main on image',this_image(), 'w= ',w \n-   if (str /= \" In main on image           1 w=    1.0000000       1.0000000       1.0000000       1.0000000\") &\n-     call abort ()\n+   if (str /= \" In main on image           1 w=    1.00000000       1.00000000       1.00000000       1.00000000\") &\n+        call abort\n \n    str = repeat('X', len(str))\n    write(str,*) 'In main on image',this_image(), 'w= ',w(1:4) \n-   if (str /= \" In main on image           1 w=    1.0000000       1.0000000       1.0000000       1.0000000\") &\n-     call abort ()\n+   if (str /= \" In main on image           1 w=    1.00000000       1.00000000       1.00000000       1.00000000\") &\n+        call abort\n \n    str = repeat('X', len(str))\n    write(str,*) 'In main on image',this_image(), 'w= ',w(:)[1]\n-   if (str /= \" In main on image           1 w=    1.0000000       1.0000000       1.0000000       1.0000000\") &\n-     call abort ()\n+   if (str /= \" In main on image           1 w=    1.00000000       1.00000000       1.00000000       1.00000000\") &\n+        call abort\n \n    sync all\n    call ex5_sub(me,w)\n@@ -103,10 +103,10 @@ subroutine ex5_sub(n,w)\n    implicit none\n    integer :: n\n    real :: w(n)\n-   character(len=50) :: str\n+   character(len=75) :: str\n \n    str = repeat('X', len(str))\n    write(str,*) 'In sub on image',this_image(), 'w= ',w \n-   if (str /= \" In sub on image           1 w=    1.0000000\") &\n-     call abort ()\n+   if (str /= \" In sub on image           1 w=    1.00000000\") &\n+        call abort\n end subroutine ex5_sub"}, {"sha": "c064e0cf3c1d26277cd3b4ef22a2c5389a163545", "filename": "gcc/testsuite/gfortran.dg/f2003_io_5.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2003_io_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2003_io_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2003_io_5.f03?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -5,7 +5,7 @@\n real :: a(10) = [ (i*1.3, i=1,10) ]\n real :: b(10)\n complex :: c\n-character(34) :: complex\n+character(36) :: complex\n namelist /nm/ a\n \n open(99,file=\"mynml\",form=\"formatted\",decimal=\"point\",status=\"replace\")\n@@ -18,9 +18,9 @@\n \n c = (3.123,4.456)\n write(complex,*,decimal=\"comma\") c\n-if (complex.ne.\" (  3,1229999    ;  4,4559999    )\") call abort\n+if (complex.ne.\" (  3,12299991    ;  4,45599985    )\") call abort\n c = (0.0, 0.0)\n read(complex,*,decimal=\"comma\") c\n-if (complex.ne.\" (  3,1229999    ;  4,4559999    )\") call abort\n+if (complex.ne.\" (  3,12299991    ;  4,45599985    )\") call abort\n \n end"}, {"sha": "1062c2f059bc80bfe07682bf8a7dcc1b89e0c103", "filename": "gcc/testsuite/gfortran.dg/fmt_cache_1.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_cache_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_cache_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_cache_1.f?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -3,9 +3,10 @@\n ! pr40330  incorrect io.\n ! test case derived from pr40662, <jvdelisle@gcc.gnu.org>\n       program astap\n-      character(40) teststring\n-      arlxca = 0.0\n-      open(10, status=\"scratch\")\n+      implicit none\n+      character(34) :: teststring\n+      real(4) :: arlxca = 0.0\n+      open(10)\n       write(10,40) arlxca\n       write(10,40) arlxca\n 40    format(t4,\"arlxca = \",1pg13.6,t27,\"arlxcc = \",g13.6,t53,\n@@ -20,14 +21,13 @@ program astap\n      .         t4,\"dtmpcc = \",g13.6,t27,\"ebalna = \",g13.6,t53,\n      .            \"ebalnc = \",g13.6,t79,\"ebalsa = \",g13.6,t105,\n      .            \"ebalsc = \",g13.6)\n-      rewind 10\n       rewind 10\n       teststring = \"\"\n       read(10,'(a)') teststring\n-      if (teststring.ne.\"   arlxca =   0.00000     arlxcc = \")call abort\n+      if (teststring.ne.\"   arlxca =   0.00000     arlxcc =\")call abort\n       teststring = \"\"\n       read(10,'(a)') teststring\n-      if (teststring.ne.\"   arlxca =   0.00000     arlxcc = \")call abort\n+      if (teststring.ne.\"   arlxca =   0.00000     arlxcc =\")call abort\n       end program astap\n \n "}, {"sha": "cb73492829e545ee692d99b051dee972a7e715ae", "filename": "gcc/testsuite/gfortran.dg/fmt_g.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g.f?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -31,13 +31,13 @@ PROGRAM FOO\n        WRITE(buffer,\"(G12.5E5,'<')\") -10000.\n        if (buffer.ne.\"************<\") call abort\n        WRITE(buffer,\"(G13.5E5,'<')\") -10000.\n-       if (buffer.ne.\"-10000.      <\") call abort\n+       if (buffer.ne.\"*************<\") call abort\n        WRITE(buffer,\"(G14.5E5,'<')\") -10000.\n-       if (buffer.ne.\" -10000.      <\") call abort\n+       if (buffer.ne.\"-10000.       <\") call abort\n        WRITE(buffer,\"(G15.5E5,'<')\") -10000.\n-       if (buffer.ne.\"  -10000.      <\") call abort\n+       if (buffer.ne.\" -10000.       <\") call abort\n        WRITE(buffer,\"(G16.5E5,'<')\") -10000.\n-       if (buffer.ne.\"   -10000.      <\") call abort\n+       if (buffer.ne.\"  -10000.       <\") call abort\n \n        STOP\n        END"}, {"sha": "ead6f81b28aca05db0100955417fb4f75958206a", "filename": "gcc/testsuite/gfortran.dg/fmt_g0_1.f08", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_1.f08?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -2,19 +2,19 @@\n ! PR36420 Fortran 2008: g0 edit descriptor \n ! Test case provided by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n     character(25) :: string = \"(g0,g0,g0)\" \n-    character(33) :: buffer\n+    character(50) :: buffer\n     write(buffer, '(g0,g0,g0)') ':',12340,':'\n     if (buffer.ne.\":12340:\") call abort\n     write(buffer, string) ':',0,':'\n     if (buffer.ne.\":0:\") call abort\n-    write(buffer, string) ':',1.0/3.0,':'\n-    if (buffer.ne.\":.33333334:\") call abort\n-    write(buffer, '(1x,a,g0,a)') ':',1.0/3.0,':'\n-    if (buffer.ne.\" :.33333334:\") call abort\n+    write(buffer, string) ':',1.0_8/3.0_8,':'\n+    if (buffer.ne.\":.33333333333333331:\") call abort\n+    write(buffer, '(1x,a,g0,a)') ':',1.0_8/3.0_8,':'\n+    if (buffer.ne.\" :.33333333333333331:\") call abort\n     write(buffer, string) ':',\"hello\",':'\n-    if (buffer.ne.\":hello:\") call abort\n+    if (buffer.ne.\":hello:\") call abort \n     write(buffer, \"(g0,g0,g0,g0)\") ':',.true.,.false.,':'\n     if (buffer.ne.\":TF:\") call abort\n-    write(buffer, \"(g0,g0,',',g0,g0)\") '(',( 1.2345, 2.4567 ),')'\n-    if (buffer.ne.\"(1.2345001,2.4567001)\") call abort\n+    write(buffer, \"(g0,g0,',',g0,g0)\") '(',( 1.2345_8, 2.4567_8 ),')'\n+    if (buffer.ne.\"(1.2344999999999999,2.4567000000000001)\") call abort\n end"}, {"sha": "7efbe7083a34cdd2ceea3ecaa0ca8363a7b6d0bc", "filename": "gcc/testsuite/gfortran.dg/namelist_65.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_65.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_65.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_65.f90?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -14,9 +14,9 @@ program oneline\n \n write(out,nl1)\n if (out(1).ne.\"&NL1\") call abort\n-if (out(2).ne.\" A=  1.0000000    ,\") call abort\n-if (out(3).ne.\" B=  2.0000000    ,\") call abort\n-if (out(4).ne.\" C=  3.0000000    ,\") call abort\n+if (out(2).ne.\" A=  1.00000000    ,\") call abort\n+if (out(3).ne.\" B=  2.00000000    ,\") call abort\n+if (out(4).ne.\" C=  3.00000000    ,\") call abort\n if (out(5).ne.\" /\") call abort\n \n end program oneline"}, {"sha": "2e5de8305b8c91c244f7adf24602f9b1a67644f8", "filename": "gcc/testsuite/gfortran.dg/namelist_print_1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_print_1.f?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -9,5 +9,5 @@\n       namelist /mynml/ x\n       x = 1\n ! ( dg-output \"^\" }\n-      print mynml ! { dg-output \"&MYNML(\\n|\\r\\n|\\r) X=  1.0000000    ,(\\n|\\r\\n|\\r) /(\\n|\\r\\n|\\r)\" }\n+      print mynml ! { dg-output \"&MYNML(\\n|\\r\\n|\\r) X=  1.00000000    ,(\\n|\\r\\n|\\r) /(\\n|\\r\\n|\\r)\" }\n       end"}, {"sha": "e4b5de7e46e5a69c9283a519576c572ba9d1ac11", "filename": "gcc/testsuite/gfortran.dg/real_const_3.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -42,15 +42,15 @@ program main\n   if (trim(adjustl(str)) .ne. 'NaN') call abort\n \n   write(str,*) z\n-  if (trim(adjustl(str)) .ne. '(            NaN,            NaN)') call abort\n+  if (trim(adjustl(str)) .ne. '(             NaN,             NaN)') call abort\n \n   write(str,*) z2\n-  if (trim(adjustl(str)) .ne. '(            NaN,            NaN)') call abort\n+  if (trim(adjustl(str)) .ne. '(             NaN,             NaN)') call abort\n \n   write(str,*) z3\n-  if (trim(adjustl(str)) .ne. '(       Infinity,      -Infinity)') call abort\n+  if (trim(adjustl(str)) .ne. '(        Infinity,       -Infinity)') call abort\n \n   write(str,*) z4\n-  if (trim(adjustl(str)) .ne. '(  0.0000000    , -0.0000000    )') call abort\n+  if (trim(adjustl(str)) .ne. '(  0.00000000    , -0.00000000    )') call abort\n \n end program main"}, {"sha": "ec02bc9312916de18eed4e93f31917a540a32a9e", "filename": "gcc/testsuite/gfortran.dg/round_3.f08", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c31037a235659024062506d8e07640a7165662/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fround_3.f08?ref=f4c31037a235659024062506d8e07640a7165662", "patch": "@@ -0,0 +1,75 @@\n+! { dg-do run }\n+! PR48615 Invalid UP/DOWN rounding with E and ES descriptors\n+! Test case provided by Thomas Henlich.\n+program pr48615\n+    call checkfmt(\"(RU,F17.0)\", 2.5,     \"               3.\")\n+    call checkfmt(\"(RU,-1P,F17.1)\", 2.5, \"              0.3\")\n+    call checkfmt(\"(RU,E17.1)\", 2.5,     \"          0.3E+01\") ! 0.2E+01\n+    call checkfmt(\"(RU,1P,E17.0)\", 2.5,  \"           3.E+00\")\n+    call checkfmt(\"(RU,ES17.0)\", 2.5,    \"           3.E+00\") ! 2.E+00\n+    call checkfmt(\"(RU,EN17.0)\", 2.5,    \"           3.E+00\")\n+\n+    call checkfmt(\"(RD,F17.0)\", 2.5,     \"               2.\")\n+    call checkfmt(\"(RD,-1P,F17.1)\", 2.5, \"              0.2\")\n+    call checkfmt(\"(RD,E17.1)\", 2.5,     \"          0.2E+01\")\n+    call checkfmt(\"(RD,1P,E17.0)\", 2.5,  \"           2.E+00\")\n+    call checkfmt(\"(RD,ES17.0)\", 2.5,    \"           2.E+00\")\n+    call checkfmt(\"(RD,EN17.0)\", 2.5,    \"           2.E+00\")\n+\n+    call checkfmt(\"(RC,F17.0)\", 2.5,     \"               3.\")\n+    call checkfmt(\"(RC,-1P,F17.1)\", 2.5, \"              0.3\")\n+    call checkfmt(\"(RC,E17.1)\", 2.5,     \"          0.3E+01\") ! 0.2E+01\n+    call checkfmt(\"(RC,1P,E17.0)\", 2.5,  \"           3.E+00\")\n+    call checkfmt(\"(RC,ES17.0)\", 2.5,    \"           3.E+00\") ! 2.E+00\n+    call checkfmt(\"(RC,EN17.0)\", 2.5,    \"           3.E+00\")\n+\n+    call checkfmt(\"(RN,F17.0)\", 2.5,     \"               2.\")\n+    call checkfmt(\"(RN,-1P,F17.1)\", 2.5, \"              0.2\")\n+    call checkfmt(\"(RN,E17.1)\", 2.5,     \"          0.2E+01\")\n+    call checkfmt(\"(RN,1P,E17.0)\", 2.5,  \"           2.E+00\")\n+    call checkfmt(\"(RN,ES17.0)\", 2.5,    \"           2.E+00\")\n+    call checkfmt(\"(RN,EN17.0)\", 2.5,    \"           2.E+00\")\n+\n+    call checkfmt(\"(RZ,F17.0)\", 2.5,     \"               2.\")\n+    call checkfmt(\"(RZ,-1P,F17.1)\", 2.5, \"              0.2\")\n+    call checkfmt(\"(RZ,E17.1)\", 2.5,     \"          0.2E+01\")\n+    call checkfmt(\"(RZ,1P,E17.0)\", 2.5,  \"           2.E+00\")\n+    call checkfmt(\"(RZ,ES17.0)\", 2.5,    \"           2.E+00\")\n+    call checkfmt(\"(RZ,EN17.0)\", 2.5,    \"           2.E+00\")\n+\n+    call checkfmt(\"(RZ,F17.0)\", -2.5,     \"              -2.\")\n+    call checkfmt(\"(RZ,-1P,F17.1)\", -2.5, \"             -0.2\")\n+    call checkfmt(\"(RZ,E17.1)\", -2.5,     \"         -0.2E+01\")\n+    call checkfmt(\"(RZ,1P,E17.0)\", -2.5,  \"          -2.E+00\")\n+    call checkfmt(\"(RZ,ES17.0)\", -2.5,    \"          -2.E+00\")\n+    call checkfmt(\"(RZ,EN17.0)\", -2.5,    \"          -2.E+00\")\n+\n+    call checkfmt(\"(RN,F17.0)\", -2.5,     \"              -2.\")\n+    call checkfmt(\"(RN,-1P,F17.1)\", -2.5, \"             -0.2\")\n+    call checkfmt(\"(RN,E17.1)\", -2.5,     \"         -0.2E+01\")\n+    call checkfmt(\"(RN,1P,E17.0)\", -2.5,  \"          -2.E+00\")\n+    call checkfmt(\"(RN,ES17.0)\", -2.5,    \"          -2.E+00\")\n+    call checkfmt(\"(RN,EN17.0)\", -2.5,    \"          -2.E+00\")\n+\n+    call checkfmt(\"(RC,F17.0)\", -2.5,     \"              -3.\")\n+    call checkfmt(\"(RC,-1P,F17.1)\", -2.5, \"             -0.3\")\n+    call checkfmt(\"(RC,E17.1)\", -2.5,     \"         -0.3E+01\") ! -0.2E+01\n+    call checkfmt(\"(RC,1P,E17.0)\", -2.5,  \"          -3.E+00\")\n+    call checkfmt(\"(RC,ES17.0)\", -2.5,    \"          -3.E+00\") ! -2.E+00\n+    call checkfmt(\"(RC,EN17.0)\", -2.5,    \"          -3.E+00\")\n+\n+    call checkfmt(\"(RU,E17.1)\", nearest(2.0, 1.0),     \"          0.3E+01\") ! 0.2E+01\n+    call checkfmt(\"(RD,E17.1)\", nearest(3.0, -1.0),    \"          0.2E+01\") ! 0.3E+01\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*), intent(in) :: cmp\n+        character(len=40) :: s\n+        \n+        write(s, fmt) x\n+        if (s /= cmp) call abort\n+        !if (s /= cmp) print \"(a,1x,a,' expected: ',1x)\", fmt, s, cmp\n+    end subroutine\n+end program"}]}