{"sha": "62d19588b9a08077dce7990d90dc61033a0b240d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkMTk1ODhiOWEwODA3N2RjZTc5OTBkOTBkYzYxMDMzYTBiMjQwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-21T16:52:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-21T17:50:13Z"}, "message": "libstdc++: Fix atomic waiting for non-linux targets\n\nThis fixes some UNRESOLVED tests on (at least) Solaris and Darwin, and\ndisables some tests that hang forever on Solaris. A proper fix is still\nneeded.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_base.h (atomic_flag::wait): Use correct\n\ttype for __atomic_wait call.\n\t* include/bits/atomic_timed_wait.h (__atomic_wait_until): Check\n\t_GLIBCXX_HAVE_LINUX_FUTEX.\n\t* include/bits/atomic_wait.h (__atomic_notify): Likewise.\n\t* include/bits/semaphore_base.h (_GLIBCXX_HAVE_POSIX_SEMAPHORE):\n\tOnly define if SEM_VALUE_MAX or _POSIX_SEM_VALUE_MAX is defined.\n\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Disable on\n\tnon-linux targes.\n\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.", "tree": {"sha": "93a67536aa4c8d8c14a6de088b30458d2a664a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a67536aa4c8d8c14a6de088b30458d2a664a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d19588b9a08077dce7990d90dc61033a0b240d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d19588b9a08077dce7990d90dc61033a0b240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d19588b9a08077dce7990d90dc61033a0b240d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d19588b9a08077dce7990d90dc61033a0b240d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a20f9059070fc42b9effde0d890dcebccc2f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a20f9059070fc42b9effde0d890dcebccc2f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a20f9059070fc42b9effde0d890dcebccc2f84"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "7de02f1699776596ab8cdc37861b74a331e779b6", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -234,7 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     wait(bool __old,\n \tmemory_order __m = memory_order_seq_cst) const noexcept\n     {\n-      std::__atomic_wait(&_M_i, __old,\n+      std::__atomic_wait(&_M_i, static_cast<__atomic_flag_data_type>(__old),\n \t\t\t [__m, this, __old]()\n \t\t\t { return this->test(__m) != __old; });\n     }"}, {"sha": "405f7e93ca85a4f81156552ac6e08cc66d040e57", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -240,12 +240,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       do\n \t{\n \t  __atomic_wait_status __res;\n+#ifdef _GLIBCXX_HAVE_LINUX_FUTEX\n \t  if constexpr (__platform_wait_uses_type<_Tp>)\n \t    {\n \t      __res = __detail::__platform_wait_until((__platform_wait_t*)(void*) __addr,\n \t\t\t\t\t\t      __old, __atime);\n \t    }\n \t  else\n+#endif\n \t    {\n \t      __res = __w._M_do_wait_until(__version, __atime);\n \t    }"}, {"sha": "7b2682a577ef088ed63a536da29395c7d56ccf4c", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -292,11 +292,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (!__w._M_waiting())\n \treturn;\n \n+#ifdef _GLIBCXX_HAVE_LINUX_FUTEX\n       if constexpr (__platform_wait_uses_type<_Tp>)\n \t{\n \t  __platform_notify((__platform_wait_t*)(void*) __addr, __all);\n \t}\n       else\n+#endif\n \t{\n \t  __w._M_notify(__all);\n \t}"}, {"sha": "78a0b6ba26e6d9a07cb59453b1454be25400dd54", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -39,8 +39,10 @@\n #include <ext/numeric_traits.h>\n \n #if __has_include(<semaphore.h>)\n-#define _GLIBCXX_HAVE_POSIX_SEMAPHORE 1\n-#include <semaphore.h>\n+# include <semaphore.h>\n+# if defined SEM_VALUE_MAX || _POSIX_SEM_VALUE_MAX\n+#  define _GLIBCXX_HAVE_POSIX_SEMAPHORE 1\n+# endif\n #endif\n \n #include <chrono>\n@@ -54,7 +56,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __platform_semaphore\n   {\n     using __clock_t = chrono::system_clock;\n+#ifdef SEM_VALUE_MAX\n     static constexpr ptrdiff_t _S_max = SEM_VALUE_MAX;\n+#else\n+    static constexpr ptrdiff_t _S_max = _POSIX_SEM_VALUE_MAX;\n+#endif\n \n     explicit __platform_semaphore(ptrdiff_t __count) noexcept\n     {"}, {"sha": "29781c6e135733040adc51c82d5356f27a9e4af4", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/bool.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -1,7 +1,8 @@\n-// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n-// { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "629556a9d2d0090837924e4e3d1a315c02040726", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/generic.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -1,7 +1,8 @@\n-// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n-// { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "f54961f893d48265d6514550749bae1aa9dc881a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/pointers.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -1,7 +1,8 @@\n-// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n-// { dg-require-effective-target pthread }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n // { dg-require-gthreads \"\" }\n+// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "763d3e77159cbc75a567611b0e6e0f85abf5720d", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/wait_notify/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -1,7 +1,8 @@\n-// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n-// { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "27d9b601c2f4c6051a9a18ce6fb0592d7a36e4f3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_float/wait_notify.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d19588b9a08077dce7990d90dc61033a0b240d/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc?ref=62d19588b9a08077dce7990d90dc61033a0b240d", "patch": "@@ -1,7 +1,8 @@\n-// { dg-options \"-std=gnu++2a -pthread\" }\n+// { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n-// { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}]}