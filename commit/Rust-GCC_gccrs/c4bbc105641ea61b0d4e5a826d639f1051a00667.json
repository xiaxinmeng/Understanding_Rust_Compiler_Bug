{"sha": "c4bbc105641ea61b0d4e5a826d639f1051a00667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiYmMxMDU2NDFlYTYxYjBkNGU1YTgyNmQ2MzlmMTA1MWEwMDY2Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-09T23:23:28Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-09T23:23:28Z"}, "message": "re PR fortran/26038 (ICE on allocation of assumed length CHARACTER dummy.)\n\n2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26038\n\t* trans-stmt.c (gfc_trans_allocate): Provide assumed character length\n\tscalar with missing backend_decl for the hidden dummy charlen.\n\n\tPR fortran/25059\n\t* interface.c (gfc_extend_assign): Remove detection of non-PURE\n\tsubroutine in assignment interface, with gfc_error, and put it in\n\t* resolve.c (resolve_code).\n\n\tPR fortran/25070\n\t* interface.c (gfc_procedure_use): Flag rank checking for non-\n\telemental, contained or interface procedures in call to\n\t(compare_actual_formal), where ranks are checked for assumed\n\tshape arrays..\n\n2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26038\n\t* gfortran.dg/allocate_char_star_scalar_1.f90: New test.\n\n\tPR fortran/25059\n\t* gfortran.dg/impure_assignment_1.f90: New test.\n\n\tPR fortran/25070\n\t* gfortran.dg/assumed_shape_ranks_1.f90: New test.\n\nFrom-SVN: r110816", "tree": {"sha": "00c734869e76676429a0a682e4ca72bdc7c46b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c734869e76676429a0a682e4ca72bdc7c46b7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4bbc105641ea61b0d4e5a826d639f1051a00667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bbc105641ea61b0d4e5a826d639f1051a00667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4bbc105641ea61b0d4e5a826d639f1051a00667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bbc105641ea61b0d4e5a826d639f1051a00667/comments", "author": null, "committer": null, "parents": [{"sha": "95c029c30c717127d0120154eff20232ecb9f3c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c029c30c717127d0120154eff20232ecb9f3c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c029c30c717127d0120154eff20232ecb9f3c8"}], "stats": {"total": 145, "additions": 134, "deletions": 11}, "files": [{"sha": "ae80278d962004fda943a2952c9808af148c4d09", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -1,3 +1,20 @@\n+2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26038\n+\t* trans-stmt.c (gfc_trans_allocate): Provide assumed character length\n+\tscalar with missing backend_decl for the hidden dummy charlen.\n+\n+\tPR fortran/25059\n+\t* interface.c (gfc_extend_assign): Remove detection of non-PURE\n+\tsubroutine in assignment interface, with gfc_error, and put it in\n+\t* resolve.c (resolve_code).\n+\n+\tPR fortran/25070\n+\t* interface.c (gfc_procedure_use): Flag rank checking for non-\n+\telemental, contained or interface procedures in call to\n+\t(compare_actual_formal), where ranks are checked for assumed\n+\tshape arrays..\n+\n 2006-02-08  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/25425"}, {"sha": "7c8627952aff9be2163d58321841bf571f45e4d9", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -1241,7 +1241,10 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n \t}\n \n       if (!compare_parameter\n-\t  (f->sym, a->expr, ranks_must_agree, is_elemental))\n+\t  (f->sym, a->expr,\n+\t   ranks_must_agree && f->sym->as\n+\t     && f->sym->as->type == AS_ASSUMED_SHAPE,\n+\t   is_elemental))\n \t{\n \t  if (where)\n \t    gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n@@ -1563,15 +1566,19 @@ check_intents (gfc_formal_arglist * f, gfc_actual_arglist * a)\n void\n gfc_procedure_use (gfc_symbol * sym, gfc_actual_arglist ** ap, locus * where)\n {\n+  int ranks_must_agree;\n+  ranks_must_agree = !sym->attr.elemental && (sym->attr.contained\n+\t\t\t|| sym->attr.if_source == IFSRC_IFBODY);\n+\n   /* Warn about calls with an implicit interface.  */\n   if (gfc_option.warn_implicit_interface\n       && sym->attr.if_source == IFSRC_UNKNOWN)\n     gfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n                  sym->name, where);\n \n   if (sym->attr.if_source == IFSRC_UNKNOWN\n-      || !compare_actual_formal (ap, sym->formal, 0,\n-\t\t\t         sym->attr.elemental, where))\n+      || !compare_actual_formal (ap, sym->formal, ranks_must_agree,\n+\t\t\t\t sym->attr.elemental, where))\n     return;\n \n   check_intents (sym->formal, *ap);\n@@ -1796,13 +1803,6 @@ gfc_extend_assign (gfc_code * c, gfc_namespace * ns)\n   c->expr2 = NULL;\n   c->ext.actual = actual;\n \n-  if (gfc_pure (NULL) && !gfc_pure (sym))\n-    {\n-      gfc_error (\"Subroutine '%s' called in lieu of assignment at %L must be \"\n-\t\t \"PURE\", sym->name, &c->loc);\n-      return FAILURE;\n-    }\n-\n   return SUCCESS;\n }\n "}, {"sha": "3e1c005f4e6c72cef52a854faa7927641aaef0d9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -4241,7 +4241,16 @@ resolve_code (gfc_code * code, gfc_namespace * ns)\n \t    break;\n \n \t  if (gfc_extend_assign (code, ns) == SUCCESS)\n-\t    goto call;\n+\t    {\n+\t      if (gfc_pure (NULL) && !gfc_pure (code->symtree->n.sym))\n+\t\t{\n+\t\t  gfc_error (\"Subroutine '%s' called instead of assignment at \"\n+\t\t\t     \"%L must be PURE\", code->symtree->n.sym->name,\n+\t\t\t     &code->loc);\n+\t\t  break;\n+\t\t}\n+\t      goto call;\n+\t    }\n \n \t  if (gfc_pure (NULL))\n \t    {"}, {"sha": "2f8d09b3d6be1c12ef78e1bf354b43559822e5c9", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -3455,6 +3455,10 @@ gfc_trans_allocate (gfc_code * code)\n \t  gfc_add_modify_expr (&se.pre, val, tmp);\n \n \t  tmp = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (se.expr)));\n+\n+\t  if (expr->ts.type == BT_CHARACTER && tmp == NULL_TREE)\n+\t    tmp = se.string_length;\n+\n \t  parm = gfc_chainon_list (NULL_TREE, val);\n \t  parm = gfc_chainon_list (parm, tmp);\n \t  parm = gfc_chainon_list (parm, pstat);"}, {"sha": "bd7b36f0fd9edd05698988cbadb661290b7e02bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -1,3 +1,14 @@\n+2006-02-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26038\n+\t* gfortran.dg/allocate_char_star_scalar_1.f90: New test.\n+\n+\tPR fortran/25059\n+\t* gfortran.dg/impure_assignment_1.f90: New test.\n+\n+\tPR fortran/25070\n+\t* gfortran.dg/assumed_shape_ranks_1.f90: New test.\n+\n 2006-02-09  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR target/26141"}, {"sha": "305136cd6594d13611f221fa0e47fc5660e03d42", "filename": "gcc/testsuite/gfortran.dg/allocate_char_star_scalar_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_char_star_scalar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_char_star_scalar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_char_star_scalar_1.f90?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! Tests the patch for PR26038 that used to ICE in gfc_trans_allocate\n+! for the want of a string_length to pass to the library.\n+! Contributed by hjl@lucon.org && Erik Edelmann  <eedelmanncc.gnu.org>\n+module moo\n+\n+contains\n+\n+    subroutine foo(self)\n+        character(*) :: self\n+        pointer :: self\n+\n+        nullify(self)\n+        allocate(self)          ! Used to ICE here\n+        print *, len(self)\n+    end subroutine\n+\n+end module moo\n+\n+\n+program hum\n+\n+    use moo\n+\n+    character(5), pointer :: p\n+    character(10), pointer :: q\n+\n+    call foo(p)\n+    call foo(q)\n+\n+end program hum"}, {"sha": "a7f24ea1bc541b0f4f8d62f63af9ded110a2c78f", "filename": "gcc/testsuite/gfortran.dg/assumed_shape_ranks_1.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_1.f90?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! Tests fix for PR25070; was no error for actual and assumed shape\n+! dummy ranks not matching.\n+! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n+\n+module addon\n+  interface extra\n+    function foo (y)\n+      integer :: foo (2), y (:)\n+    end function foo\n+  end interface extra\n+end module addon\n+\n+  use addon\n+  INTEGER :: I(2,2)\n+  I=RESHAPE((/1,2,3,4/),(/2,2/))\n+  CALL TST(I)   ! { dg-error \"Type/rank mismatch in argument\" }\n+  i = foo (i)   ! { dg-error \"Type/rank mismatch|Incompatible ranks\" }\n+CONTAINS\n+  SUBROUTINE TST(I)\n+    INTEGER :: I(:)\n+    write(6,*) I\n+  END SUBROUTINE TST\n+END\n+"}, {"sha": "772ba7567e829b7947a355d3a13c2736620216fb", "filename": "gcc/testsuite/gfortran.dg/impure_assignment_1.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_assignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bbc105641ea61b0d4e5a826d639f1051a00667/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_assignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_assignment_1.f90?ref=c4bbc105641ea61b0d4e5a826d639f1051a00667", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! Tests fix for PR25059, which gave and ICE after error message  \n+! Contributed by Joost VandeVondele  <jv244@cam.ac.uk>\n+MODULE M1\n+ TYPE T1\n+  INTEGER :: I\n+ END TYPE T1\n+ INTERFACE ASSIGNMENT(=)\n+   MODULE PROCEDURE S1\n+ END INTERFACE\n+CONTAINS\n+   SUBROUTINE S1(I,J)\n+     TYPE(T1), INTENT(OUT):: I\n+     TYPE(T1), INTENT(IN) :: J\n+     I%I=J%I**2\n+   END SUBROUTINE S1\n+END MODULE M1\n+\n+USE M1\n+CONTAINS\n+PURE SUBROUTINE S2(I,J)\n+     TYPE(T1), INTENT(OUT):: I\n+     TYPE(T1), INTENT(IN) :: J\n+     I=J                      ! { dg-error \"must be PURE\" }\n+END SUBROUTINE S2\n+END\n\\ No newline at end of file"}]}