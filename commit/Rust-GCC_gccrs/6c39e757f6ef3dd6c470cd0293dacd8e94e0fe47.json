{"sha": "6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzOWU3NTdmNmVmM2RkNmM0NzBjZDAyOTNkYWNkOGU5NGUwZmU0Nw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-30T21:55:39Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-30T21:55:39Z"}, "message": "In gcc/c-family/: 2010-11-30 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/c-family/:\n2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c-common.h (objc_finish_function): New.\n\t(objc_non_volatilized_type): Removed.\n\t(objc_type_quals_match): Removed.\n\t* stub-objc.c (objc_finish_function): New.\n\t(objc_non_volatilized_type): Removed.\n\t(objc_type_quals_match): Removed.\n\t\nIn gcc/objc/:\n2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (objc_build_volatilized_type): Removed.\n\t(objc_non_volatilized_type): Removed.\n\t(objc_type_quals_match): Removed.\n\t(local_variables_to_volatilize): New.\n\t(objc_volatilize_decl): Add the decl to volatilize to\n\tlocal_variables_to_volatilize, but don't volatilize it yet.\n\t(objc_finish_function): New.\n\t* objc-act.h (local_variables_to_volatilize): New.\n\nIn gcc/cp/:\n2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* decl.c (finish_function): Call objc_finish_function when\n\tcompiling Objective-C++.\n\t* call.c (standard_conversion): Do not call\n\tobjc_non_volatilized_type().\n\t(implicit_conversion): Same change.\n\t* typeck.c (comp_ptr_ttypes_real): Same change.\n\nIn gcc/:\n2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* c-decl.c (finish_function): Call objc_finish_function in\n\tObjective-C.\n\t* c-typeck.c (convert_for_assignment): Do not call\n\tobjc_type_quals_match().\n\nFrom-SVN: r167318", "tree": {"sha": "8172aebfe61894b96734ffe92ed52f31bce5003d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8172aebfe61894b96734ffe92ed52f31bce5003d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab3acf4666620a8f37107698cd01a2a4a716552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab3acf4666620a8f37107698cd01a2a4a716552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab3acf4666620a8f37107698cd01a2a4a716552"}], "stats": {"total": 238, "additions": 106, "deletions": 132}, "files": [{"sha": "d169fc9dd92ea0a6479a9d08ff7238bacf8d1161", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -1,3 +1,10 @@\n+2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-decl.c (finish_function): Call objc_finish_function in\n+\tObjective-C.\n+\t* c-typeck.c (convert_for_assignment): Do not call\n+\tobjc_type_quals_match().\n+\t\n 2010-11-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46722"}, {"sha": "b1055b039e9668ea98b5e535c14a2c90facbf8f3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -8184,6 +8184,9 @@ void\n finish_function (void)\n {\n   tree fndecl = current_function_decl;\n+  \n+  if (c_dialect_objc ())\n+    objc_finish_function ();\n \n   if (TREE_CODE (fndecl) == FUNCTION_DECL\n       && targetm.calls.promote_prototypes (TREE_TYPE (fndecl)))"}, {"sha": "84eef7d7453715a1d09c687498498b847d84ea38", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -1,3 +1,12 @@\n+2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (objc_finish_function): New.\n+\t(objc_non_volatilized_type): Removed.\n+\t(objc_type_quals_match): Removed.\n+\t* stub-objc.c (objc_finish_function): New.\n+\t(objc_non_volatilized_type): Removed.\n+\t(objc_type_quals_match): Removed.\n+\t\n 2010-11-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (parse_optimize_options): Declare."}, {"sha": "7e261e88df3d99746a950e4902f91c20cc6db2a3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -998,12 +998,10 @@ extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n extern void objc_check_global_decl (tree);\n extern tree objc_common_type (tree, tree);\n-extern tree objc_non_volatilized_type (tree);\n extern bool objc_compare_types (tree, tree, int, tree);\n extern bool objc_have_common_type (tree, tree, int, tree);\n extern bool objc_diagnose_private_ivar (tree);\n extern void objc_volatilize_decl (tree);\n-extern bool objc_type_quals_match (tree, tree);\n extern tree objc_rewrite_function_call (tree, tree);\n extern tree objc_message_selector (void);\n extern tree objc_lookup_ivar (tree, tree);\n@@ -1065,6 +1063,7 @@ extern const char * objc_maybe_printable_name (tree, int);\n extern bool objc_is_property_ref (tree);\n extern bool objc_string_ref_type_p (tree);\n extern void objc_check_format_arg (tree, tree);\n+extern void objc_finish_function (void);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "fbf7ece1e9762dad54e453109dcdd34ec8529782", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -66,12 +66,6 @@ objc_check_global_decl (tree ARG_UNUSED (decl))\n {\n }\n \n-tree\n-objc_non_volatilized_type (tree type)\n-{\n-  return type;\n-}\n-\n tree\n objc_common_type (tree ARG_UNUSED (type1), tree ARG_UNUSED (type2))\n {\n@@ -97,12 +91,6 @@ objc_volatilize_decl (tree ARG_UNUSED (decl))\n {\n }\n \n-bool\n-objc_type_quals_match (tree ARG_UNUSED (ltyp), tree ARG_UNUSED (rtyp))\n-{\n-  return false;\n-}\n-\n tree\n objc_rewrite_function_call (tree function, tree ARG_UNUSED (first_param))\n {\n@@ -461,3 +449,8 @@ objc_check_format_arg (tree ARG_UNUSED (format_arg),\n \t\t       tree ARG_UNUSED (args_list))\n {\n }\n+\n+void\n+objc_finish_function (void)\n+{\n+}"}, {"sha": "65d255abd135342ee7266393ae835e8c978ebb06", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -5605,20 +5605,16 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t      if (TYPE_QUALS_NO_ADDR_SPACE (ttr)\n \t\t  & ~TYPE_QUALS_NO_ADDR_SPACE (ttl))\n \t\t{\n-\t\t  /* Types differing only by the presence of the 'volatile'\n-\t\t     qualifier are acceptable if the 'volatile' has been added\n-\t\t     in by the Objective-C EH machinery.  */\n-\t\t  if (!objc_type_quals_match (ttl, ttr))\n-\t\t    WARN_FOR_QUALIFIERS (location, 0,\n-\t\t\t\t\t G_(\"passing argument %d of %qE discards \"\n-\t\t\t\t\t    \"%qv qualifier from pointer target type\"),\n-\t\t\t\t\t G_(\"assignment discards %qv qualifier \"\n-\t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t G_(\"initialization discards %qv qualifier \"\n-\t\t\t\t\t    \"from pointer target type\"),\n-\t\t\t\t\t G_(\"return discards %qv qualifier from \"\n-\t\t\t\t\t    \"pointer target type\"),\n-\t\t\t\t\t TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl));\n+\t\t  WARN_FOR_QUALIFIERS (location, 0,\n+\t\t\t\t       G_(\"passing argument %d of %qE discards \"\n+\t\t\t\t\t  \"%qv qualifier from pointer target type\"),\n+\t\t\t\t       G_(\"assignment discards %qv qualifier \"\n+\t\t\t\t\t  \"from pointer target type\"),\n+\t\t\t\t       G_(\"initialization discards %qv qualifier \"\n+\t\t\t\t\t  \"from pointer target type\"),\n+\t\t\t\t       G_(\"return discards %qv qualifier from \"\n+\t\t\t\t\t  \"pointer target type\"),\n+\t\t\t\t       TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl));\n \t\t}\n \t      /* If this is not a case of ignoring a mismatch in signedness,\n \t\t no warning.  */"}, {"sha": "706c974ae4a4907ea0e9dc59bfcd676af6b9955c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -1,3 +1,12 @@\n+2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* decl.c (finish_function): Call objc_finish_function when\n+\tcompiling Objective-C++.\n+\t* call.c (standard_conversion): Do not call\n+\tobjc_non_volatilized_type().\n+\t(implicit_conversion): Same change.\n+\t* typeck.c (comp_ptr_ttypes_real): Same change.\n+\n 2010-11-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cp-gimplify.c, cp-lang.c, cvt.c, cxx-pretty-print.c, error.c,"}, {"sha": "6a11217ed9b4ce497c693a8f8e1fefa623de3e3d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -872,8 +872,6 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t       && TREE_CODE (TREE_TYPE (from)) != FUNCTION_TYPE)\n \t{\n \t  tree nfrom = TREE_TYPE (from);\n-\t  if (c_dialect_objc ())\n-\t    nfrom = objc_non_volatilized_type (nfrom);\n \t  from = build_pointer_type\n \t    (cp_build_qualified_type (void_type_node, \n \t\t\t              cp_type_quals (nfrom)));\n@@ -1483,9 +1481,6 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       || expr == error_mark_node)\n     return NULL;\n \n-  if (c_dialect_objc ())\n-    from = objc_non_volatilized_type (from);\n-\n   if (TREE_CODE (to) == REFERENCE_TYPE)\n     conv = reference_binding (to, from, expr, c_cast_p, flags);\n   else"}, {"sha": "f772d605b82aa47bd8a9bea3c16afd625f79d90c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -12811,6 +12811,9 @@ finish_function (int flags)\n   if (fndecl == NULL_TREE)\n     return error_mark_node;\n \n+  if (c_dialect_objc ())\n+    objc_finish_function ();\n+\n   gcc_assert (!defer_mark_used_calls);\n   defer_mark_used_calls = true;\n "}, {"sha": "80aa725d251905eb97edaa1b77685de7b45b8552", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -7869,24 +7869,18 @@ comp_ptr_ttypes_real (tree to, tree from, int constp)\n \t so the usual checks are not appropriate.  */\n       if (TREE_CODE (to) != FUNCTION_TYPE && TREE_CODE (to) != METHOD_TYPE)\n \t{\n-\t  /* In Objective-C++, some types may have been 'volatilized' by\n-\t     the compiler for EH; when comparing them here, the volatile\n-\t     qualification must be ignored.  */\n-\t  tree nv_to = objc_non_volatilized_type (to);\n-\t  tree nv_from = objc_non_volatilized_type (from);\n-\n-\t  if (!at_least_as_qualified_p (nv_to, nv_from))\n+\t  if (!at_least_as_qualified_p (to, from))\n \t    return 0;\n \n-\t  if (!at_least_as_qualified_p (nv_from, nv_to))\n+\t  if (!at_least_as_qualified_p (from, to))\n \t    {\n \t      if (constp == 0)\n \t\treturn 0;\n \t      to_more_cv_qualified = true;\n \t    }\n \n \t  if (constp > 0)\n-\t    constp &= TYPE_READONLY (nv_to);\n+\t    constp &= TYPE_READONLY (to);\n \t}\n \n       if (TREE_CODE (to) == VECTOR_TYPE)"}, {"sha": "90765eb93e53f814497340f48b17b5ec50dd940d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -1,3 +1,14 @@\n+2010-11-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_build_volatilized_type): Removed.\n+\t(objc_non_volatilized_type): Removed.\n+\t(objc_type_quals_match): Removed.\n+\t(local_variables_to_volatilize): New.\n+\t(objc_volatilize_decl): Add the decl to volatilize to\n+\tlocal_variables_to_volatilize, but don't volatilize it yet.\n+\t(objc_finish_function): New.\n+\t* objc-act.h (local_variables_to_volatilize): New.\n+\n 2010-11-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \t    Mike Stump  <mikestump@comcast.net>\n "}, {"sha": "b9cb6508ec6a5afed12ba1a68687b098979fb7ad", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 41, "deletions": 90, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -405,6 +405,10 @@ static int objc_collecting_ivars = 0;\n \n static char *errbuf;\t/* Buffer for error diagnostics */\n \n+/* An array of all the local variables in the current function that\n+   need to be marked as volatile.  */\n+VEC(tree,gc) *local_variables_to_volatilize = NULL;\n+\n \f\n static int flag_typed_selectors;\n \n@@ -2257,61 +2261,6 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n   return s;\n }\n \n-/* Build a type differing from TYPE only in that TYPE_VOLATILE is set.\n-   Unlike tree.c:build_qualified_type(), preserve TYPE_LANG_SPECIFIC in the\n-   process.  */\n-static tree\n-objc_build_volatilized_type (tree type)\n-{\n-  tree t;\n-\n-  /* Check if we have not constructed the desired variant already.  */\n-  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-    {\n-      /* The type qualifiers must (obviously) match up.  */\n-      if (!TYPE_VOLATILE (t)\n-\t  || (TYPE_READONLY (t) != TYPE_READONLY (type))\n-\t  || (TYPE_RESTRICT (t) != TYPE_RESTRICT (type)))\n-\tcontinue;\n-\n-      /* For pointer types, the pointees (and hence their TYPE_LANG_SPECIFIC\n-\t info, if any) must match up.  */\n-      if (POINTER_TYPE_P (t)\n-\t  && (TREE_TYPE (t) != TREE_TYPE (type)))\n-\tcontinue;\n-\n-      /* Only match up the types which were previously volatilized in similar fashion and not\n-\t because they were declared as such. */\n-      if (!lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (t)))\n-\tcontinue;\n-\n-      /* Everything matches up!  */\n-      return t;\n-    }\n-\n-  /* Ok, we could not re-use any of the pre-existing variants.  Create\n-     a new one.  */\n-  t = build_variant_type_copy (type);\n-  TYPE_VOLATILE (t) = 1;\n-\n-  TYPE_ATTRIBUTES (t) = merge_attributes (TYPE_ATTRIBUTES (type),\n-                      \t\t\t  tree_cons (get_identifier (\"objc_volatilized\"),\n-                                 \t  NULL_TREE,\n-                                 \t  NULL_TREE));\n-  if (TREE_CODE (t) == ARRAY_TYPE)\n-    TREE_TYPE (t) = objc_build_volatilized_type (TREE_TYPE (t));\n-\n-  /* Set up the canonical type information. */\n-  if (TYPE_STRUCTURAL_EQUALITY_P (type))\n-    SET_TYPE_STRUCTURAL_EQUALITY (t);\n-  else if (TYPE_CANONICAL (type) != type)\n-    TYPE_CANONICAL (t) = objc_build_volatilized_type (TYPE_CANONICAL (type));\n-  else\n-    TYPE_CANONICAL (t) = t;\n-\n-  return t;\n-}\n-\n /* Mark DECL as being 'volatile' for purposes of Darwin\n    _setjmp()/_longjmp() exception handling.  Called from\n    objc_mark_locals_volatile().  */\n@@ -2324,17 +2273,44 @@ objc_volatilize_decl (tree decl)\n       && (TREE_CODE (decl) == VAR_DECL\n \t  || TREE_CODE (decl) == PARM_DECL))\n     {\n-      tree t = TREE_TYPE (decl);\n+      if (local_variables_to_volatilize == NULL)\n+\tlocal_variables_to_volatilize = VEC_alloc (tree, gc, 8);\n \n-      t = objc_build_volatilized_type (t);\n+      VEC_safe_push (tree, gc, local_variables_to_volatilize, decl);\n+    }\n+}\n \n-      TREE_TYPE (decl) = t;\n-      TREE_THIS_VOLATILE (decl) = 1;\n-      TREE_SIDE_EFFECTS (decl) = 1;\n-      DECL_REGISTER (decl) = 0;\n+/* Called when parsing of a function completes; if any local variables\n+   in the function were marked as variables to volatilize, change them\n+   to volatile.  We do this at the end of the function when the\n+   warnings about discarding 'volatile' have already been produced.\n+   We are making the variables as volatile just to force the compiler\n+   to preserve them between setjmp/longjmp, but we don't want warnings\n+   for them as they aren't really volatile.  */\n+void\n+objc_finish_function (void)\n+{\n+  /* If there are any local variables to volatilize, volatilize them.  */\n+  if (local_variables_to_volatilize)\n+    {\n+      int i;\n+      tree decl;\n+      FOR_EACH_VEC_ELT (tree, local_variables_to_volatilize, i, decl)\n+\t{\n+\t  tree t = TREE_TYPE (decl);\n+\n+\t  t = build_qualified_type (t, TYPE_QUALS (t) | TYPE_QUAL_VOLATILE);\n+\t  TREE_TYPE (decl) = t;\n+\t  TREE_THIS_VOLATILE (decl) = 1;\n+\t  TREE_SIDE_EFFECTS (decl) = 1;\n+\t  DECL_REGISTER (decl) = 0;\n #ifndef OBJCPLUS\n-      C_DECL_REGISTER (decl) = 0;\n+\t  C_DECL_REGISTER (decl) = 0;\n #endif\n+\t}\n+\n+      /* Now we delete the vector.  This sets it to NULL as well.  */\n+      VEC_free (tree, gc, local_variables_to_volatilize);\n     }\n }\n \n@@ -2691,24 +2667,6 @@ objc_have_common_type (tree ltyp, tree rtyp, int argno, tree callee)\n   return false;\n }\n \n-/* Check if LTYP and RTYP have the same type qualifiers.  If either type\n-   lives in the volatilized hash table, ignore the 'volatile' bit when\n-   making the comparison.  */\n-\n-bool\n-objc_type_quals_match (tree ltyp, tree rtyp)\n-{\n-  int lquals = TYPE_QUALS (ltyp), rquals = TYPE_QUALS (rtyp);\n-\n-  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (ltyp)))\n-    lquals &= ~TYPE_QUAL_VOLATILE;\n-\n-  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (rtyp)))\n-    rquals &= ~TYPE_QUAL_VOLATILE;\n-\n-  return (lquals == rquals);\n-}\n-\n #ifndef OBJCPLUS\n /* Determine if CHILD is derived from PARENT.  The routine assumes that\n    both parameters are RECORD_TYPEs, and is non-reflexive.  */\n@@ -2828,16 +2786,6 @@ objc_check_global_decl (tree decl)\n     error (\"redeclaration of Objective-C class %qs\", IDENTIFIER_POINTER (id));\n }\n \n-/* Return a non-volatalized version of TYPE. */\n-\n-tree\n-objc_non_volatilized_type (tree type)\n-{\n-  if (lookup_attribute (\"objc_volatilized\", TYPE_ATTRIBUTES (type)))\n-    type = build_qualified_type (type, (TYPE_QUALS (type) & ~TYPE_QUAL_VOLATILE));\n-  return type;\n-}\n-\n /* Construct a PROTOCOLS-qualified variant of INTERFACE, where\n    INTERFACE may either name an Objective-C class, or refer to the\n    special 'id' or 'Class' types.  If INTERFACE is not a valid ObjC\n@@ -5353,6 +5301,9 @@ objc_begin_try_stmt (location_t try_locus, tree body)\n       error_at (try_locus, \"%<-fobjc-exceptions%> is required to enable Objective-C exception syntax\");\n     }\n \n+  /* Collect the list of local variables.  We'll mark them as volatile\n+     at the end of compilation of this function to prevent them being\n+     clobbered by setjmp/longjmp.  */\n   if (flag_objc_sjlj_exceptions)\n     objc_mark_locals_volatile (NULL);\n }"}, {"sha": "7e8e41848804bbc8f257d6270188e9a414502214", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=6c39e757f6ef3dd6c470cd0293dacd8e94e0fe47", "patch": "@@ -253,6 +253,10 @@ extern GTY ((length (\"SIZEHASHTABLE\"))) hash *als_name_hash_list;\n \n #define SIZEHASHTABLE\t\t257\n \n+/* An array of all the local variables in the current function that\n+   need to be marked as volatile.  */\n+extern GTY(()) VEC(tree,gc) *local_variables_to_volatilize;\n+\n /* Objective-C/Objective-C++ @implementation list.  */\n \n struct GTY(()) imp_entry {"}]}