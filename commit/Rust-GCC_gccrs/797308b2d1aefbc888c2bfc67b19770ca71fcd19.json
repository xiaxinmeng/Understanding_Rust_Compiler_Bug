{"sha": "797308b2d1aefbc888c2bfc67b19770ca71fcd19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3MzA4YjJkMWFlZmJjODg4YzJiZmM2N2IxOTc3MGNhNzFmY2QxOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-08T23:07:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-08T23:07:02Z"}, "message": "libstdc++.exp (check_v3_target_debug_mode): Use exe as the executable extension.\n\n2005-11-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/lib/libstdc++.exp (check_v3_target_debug_mode): Use\n\texe as the executable extension.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Change gnu defaults to\n\tnew.\n\t(GLIBCXX_ENABLE_PCH): Adjust message order.\n\t* configure: Regenerate.\n\t\n\t* scripts/testsuite_flags.in (query): Correct print_usagex typo.\n\n\t* include/bits/functexcept.h: Remove argument names.\n\n\t* src/mt_allocator.cc: Adjust comment.\n\nFrom-SVN: r106665", "tree": {"sha": "68172ad8ca41a86c573e44e23a6cd51404050185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68172ad8ca41a86c573e44e23a6cd51404050185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/797308b2d1aefbc888c2bfc67b19770ca71fcd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/797308b2d1aefbc888c2bfc67b19770ca71fcd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/797308b2d1aefbc888c2bfc67b19770ca71fcd19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/797308b2d1aefbc888c2bfc67b19770ca71fcd19/comments", "author": null, "committer": null, "parents": [{"sha": "13bb031a244a3c29916b360880915f4ad4c6e1d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bb031a244a3c29916b360880915f4ad4c6e1d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bb031a244a3c29916b360880915f4ad4c6e1d4"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "89b8ebb6a4e14971fa8d4006f815be16f5b23e61", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -1,3 +1,19 @@\n+2005-11-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_debug_mode): Use\n+\texe as the executable extension.\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Change gnu defaults to\n+\tnew.\n+\t(GLIBCXX_ENABLE_PCH): Adjust message order.\n+\t* configure: Regenerate.\n+\t\n+\t* scripts/testsuite_flags.in (query): Correct print_usagex typo.\n+\n+\t* include/bits/functexcept.h: Remove argument names.\n+\n+\t* src/mt_allocator.cc: Adjust comment.\n+\t\n 2005-11-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/18174\n@@ -120,8 +136,9 @@\n 2005-10-17  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \tPR libstdc++/24244\n-\t* include/tr1/boost_shared_ptr.h (_Sp_counted_base::_Sp_counted_base()):\n-\tWhen __GTHREAD_MUTEX_INIT is defined, initialize the mutex.\n+\t* include/tr1/boost_shared_ptr.h\n+\t(_Sp_counted_base::_Sp_counted_base()): When __GTHREAD_MUTEX_INIT\n+\tis defined, initialize the mutex.\n \n 2005-10-15  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "c4d31d93a13035d44cbb5ae27a4760bb4400bb9e", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -1280,7 +1280,7 @@ AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n   if test $enable_libstdcxx_allocator_flag = auto; then\n     case ${target_os} in\n       linux* | gnu* | kfreebsd*-gnu | knetbsd*-gnu)\n-        enable_libstdcxx_allocator_flag=mt\n+        enable_libstdcxx_allocator_flag=new\n         ;;\n       *)\n         enable_libstdcxx_allocator_flag=new\n@@ -1558,10 +1558,7 @@ dnl Substs:\n dnl  glibcxx_PCHFLAGS\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n-  AC_MSG_CHECKING([for enabled PCH])\n   GLIBCXX_ENABLE(libstdcxx-pch,$1,,[build pre-compiled libstdc++ headers])\n-  AC_MSG_RESULT([$enable_libstdcxx_pch])\n-\n   if test $enable_libstdcxx_pch = yes; then\n     AC_CACHE_CHECK([for compiler with PCH support],\n       [glibcxx_cv_prog_CXX_pch],\n@@ -1587,6 +1584,9 @@ AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n     enable_libstdcxx_pch=$glibcxx_cv_prog_CXX_pch\n   fi\n \n+  AC_MSG_CHECKING([for enabled PCH])\n+  AC_MSG_RESULT([$enable_libstdcxx_pch])\n+\n   GLIBCXX_CONDITIONAL(GLIBCXX_BUILD_PCH, test $enable_libstdcxx_pch = yes)\n   if test $enable_libstdcxx_pch = yes; then\n     glibcxx_PCHFLAGS=\"-include bits/stdc++.h\""}, {"sha": "fb830d4a103ec005c53cc2b6a22ce73f0d4ff53f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -5134,8 +5134,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n echo \"${ECHO_T}$ac_exception_model_name\" >&6\n \n \n-  echo \"$as_me:$LINENO: checking for enabled PCH\" >&5\n-echo $ECHO_N \"checking for enabled PCH... $ECHO_C\" >&6\n    # Check whether --enable-libstdcxx-pch or --disable-libstdcxx-pch was given.\n if test \"${enable_libstdcxx_pch+set}\" = set; then\n   enableval=\"$enable_libstdcxx_pch\"\n@@ -5151,9 +5149,6 @@ else\n   enable_libstdcxx_pch=$is_hosted\n fi;\n \n-  echo \"$as_me:$LINENO: result: $enable_libstdcxx_pch\" >&5\n-echo \"${ECHO_T}$enable_libstdcxx_pch\" >&6\n-\n   if test $enable_libstdcxx_pch = yes; then\n     echo \"$as_me:$LINENO: checking for compiler with PCH support\" >&5\n echo $ECHO_N \"checking for compiler with PCH support... $ECHO_C\" >&6\n@@ -5196,6 +5191,11 @@ echo \"${ECHO_T}$glibcxx_cv_prog_CXX_pch\" >&6\n     enable_libstdcxx_pch=$glibcxx_cv_prog_CXX_pch\n   fi\n \n+  echo \"$as_me:$LINENO: checking for enabled PCH\" >&5\n+echo $ECHO_N \"checking for enabled PCH... $ECHO_C\" >&6\n+  echo \"$as_me:$LINENO: result: $enable_libstdcxx_pch\" >&5\n+echo \"${ECHO_T}$enable_libstdcxx_pch\" >&6\n+\n \n   if test $enable_libstdcxx_pch = yes; then\n     glibcxx_PCHFLAGS=\"-include bits/stdc++.h\"\n@@ -6352,7 +6352,7 @@ fi;\n   if test $enable_libstdcxx_allocator_flag = auto; then\n     case ${target_os} in\n       linux* | gnu* | kfreebsd*-gnu | knetbsd*-gnu)\n-        enable_libstdcxx_allocator_flag=mt\n+        enable_libstdcxx_allocator_flag=new\n         ;;\n       *)\n         enable_libstdcxx_allocator_flag=new"}, {"sha": "3e2ce2c5581bfc6a4f5691b4072f18aba808a9f2", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -59,35 +59,35 @@ namespace std\n \n   // Helpers for exception objects in <stdexcept>\n   void\n-  __throw_logic_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_logic_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_domain_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_domain_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_invalid_argument(const char* __s) __attribute__((__noreturn__));\n+  __throw_invalid_argument(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_length_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_length_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_out_of_range(const char* __s) __attribute__((__noreturn__));\n+  __throw_out_of_range(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_runtime_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_runtime_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_range_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_range_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_overflow_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_overflow_error(const char*) __attribute__((__noreturn__));\n \n   void\n-  __throw_underflow_error(const char* __s) __attribute__((__noreturn__));\n+  __throw_underflow_error(const char*) __attribute__((__noreturn__));\n \n   // Helpers for exception objects in basic_ios\n   void\n-  __throw_ios_failure(const char* __s) __attribute__((__noreturn__));\n+  __throw_ios_failure(const char*) __attribute__((__noreturn__));\n } // namespace std\n \n #endif"}, {"sha": "6f70002bcd46e37bcaa51c602352a3a1efdada79", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -57,7 +57,7 @@ case ${query} in\n       echo ${PCHFLAGS}\n       ;;\n     *)\n-      print_usagex\n+      print_usage\n       ;;\n esac\n "}, {"sha": "7f1e7159b4dcc6733efe2c1fcc0df833a9d039ba", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -63,7 +63,7 @@ namespace __gnu_internal\n   static void \n   _M_destroy_thread_key(void* __id)\n   {\n-    // Return this thread id record to front of thread_freelist.\n+    // Return this thread id record to the front of thread_freelist.\n     __gnu_cxx::lock sentry(__gnu_internal::freelist_mutex);\n     size_t _M_id = reinterpret_cast<size_t>(__id);\n "}, {"sha": "0f10e6dff917b7aaf6f1ab296f73675225e74358", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/797308b2d1aefbc888c2bfc67b19770ca71fcd19/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=797308b2d1aefbc888c2bfc67b19770ca71fcd19", "patch": "@@ -611,7 +611,7 @@ proc check_v3_target_debug_mode { } {\n \t# on correct ordering of static object destructors. This is\n \t# indicative of the presence and use of __cxa_atexit.\n \tset src debug_mode[pid].cc\n-\tset exe debug_mode[pid].x\n+\tset exe debug_mode[pid].exe\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include <string>\""}]}