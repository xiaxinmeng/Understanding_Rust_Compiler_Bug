{"sha": "338392ed0fd9ca466905860e931b7a480179bce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4MzkyZWQwZmQ5Y2E0NjY5MDU4NjBlOTMxYjdhNDgwMTc5YmNlNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-07T16:25:12Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-07T16:25:12Z"}, "message": "Add rewrite_virtuals_into_loop_closed_ssa\n\n2015-07-07  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-cfg.c (get_virtual_phi): New function.\n\t* tree-cfg.h (get_virtual_phi): Declare.\n\t* tree-ssa-loop-manip.c (replace_uses_in_dominated_bbs)\n\t(rewrite_virtuals_into_loop_closed_ssa): New function.\n\t* tree-ssa-loop-manip.h (rewrite_virtuals_into_loop_closed_ssa):\n\tDeclare.\n\t* tree-parloops.c (replace_uses_in_bbs_by): Remove.\n\t(transform_to_exit_first_loop_alt): Use\n\trewrite_virtuals_into_loop_closed_ssa.\n\nFrom-SVN: r225520", "tree": {"sha": "3eb1e7150ba1a00608cd3f4c2b16ae22ac5438b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb1e7150ba1a00608cd3f4c2b16ae22ac5438b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338392ed0fd9ca466905860e931b7a480179bce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338392ed0fd9ca466905860e931b7a480179bce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338392ed0fd9ca466905860e931b7a480179bce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338392ed0fd9ca466905860e931b7a480179bce4/comments", "author": null, "committer": null, "parents": [{"sha": "9b20858a9ba7039a12cef6e724e541bdcce2ba25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b20858a9ba7039a12cef6e724e541bdcce2ba25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b20858a9ba7039a12cef6e724e541bdcce2ba25"}], "stats": {"total": 125, "additions": 90, "deletions": 35}, "files": [{"sha": "7dee74d5d3b91b59c6067079565e2c6bc653b2e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -1,3 +1,15 @@\n+2015-07-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-cfg.c (get_virtual_phi): New function.\n+\t* tree-cfg.h (get_virtual_phi): Declare.\n+\t* tree-ssa-loop-manip.c (replace_uses_in_dominated_bbs)\n+\t(rewrite_virtuals_into_loop_closed_ssa): New function.\n+\t* tree-ssa-loop-manip.h (rewrite_virtuals_into_loop_closed_ssa):\n+\tDeclare.\n+\t* tree-parloops.c (replace_uses_in_bbs_by): Remove.\n+\t(transform_to_exit_first_loop_alt): Use\n+\trewrite_virtuals_into_loop_closed_ssa.\n+\n 2015-07-07  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Move"}, {"sha": "b7c4026b68452c2df389545208fe73e1b06157b6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -2623,6 +2623,23 @@ delete_tree_cfg_annotations (void)\n   vec_free (label_to_block_map_for_fn (cfun));\n }\n \n+/* Return the virtual phi in BB.  */\n+\n+gphi *\n+get_virtual_phi (basic_block bb)\n+{\n+  for (gphi_iterator gsi = gsi_start_phis (bb);\n+       !gsi_end_p (gsi);\n+       gsi_next (&gsi))\n+    {\n+      gphi *phi = gsi.phi ();\n+\n+      if (virtual_operand_p (PHI_RESULT (phi)))\n+\treturn phi;\n+    }\n+\n+  return NULL;\n+}\n \n /* Return the first statement in basic block BB.  */\n "}, {"sha": "af58c80559d83ea36915a990d6c91eea9f91ffb6", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -59,6 +59,7 @@ extern bool simple_goto_p (gimple);\n extern bool stmt_ends_bb_p (gimple);\n extern bool assert_unreachable_fallthru_edge_p (edge);\n extern void delete_tree_cfg_annotations (void);\n+extern gphi *get_virtual_phi (basic_block);\n extern gimple first_stmt (basic_block);\n extern gimple last_stmt (basic_block);\n extern gimple last_and_only_stmt (basic_block);"}, {"sha": "4a2757dc71bf89d385f61a211ea210a7fcb8c705", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -1492,25 +1492,6 @@ replace_uses_in_bb_by (tree name, tree val, basic_block bb)\n     }\n }\n \n-/* Replace uses of NAME by VAL in blocks BBS.  */\n-\n-static void\n-replace_uses_in_bbs_by (tree name, tree val, bitmap bbs)\n-{\n-  gimple use_stmt;\n-  imm_use_iterator imm_iter;\n-\n-  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, name)\n-    {\n-      if (!bitmap_bit_p (bbs, gimple_bb (use_stmt)->index))\n-\tcontinue;\n-\n-      use_operand_p use_p;\n-      FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n-\tSET_USE (use_p, val);\n-    }\n-}\n-\n /* Do transformation from:\n \n      <bb preheader>:\n@@ -1631,18 +1612,11 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n   tree control = gimple_cond_lhs (cond_stmt);\n   edge e;\n \n-  /* Gather the bbs dominated by the exit block.  */\n-  bitmap exit_dominated = BITMAP_ALLOC (NULL);\n-  bitmap_set_bit (exit_dominated, exit_block->index);\n-  vec<basic_block> exit_dominated_vec\n-    = get_dominated_by (CDI_DOMINATORS, exit_block);\n-\n-  int i;\n-  basic_block dom_bb;\n-  FOR_EACH_VEC_ELT (exit_dominated_vec, i, dom_bb)\n-    bitmap_set_bit (exit_dominated, dom_bb->index);\n-\n-  exit_dominated_vec.release ();\n+  /* Rewriting virtuals into loop-closed ssa normal form makes this\n+     transformation simpler.  It also ensures that the virtuals are in\n+     loop-closed ssa normal from after the transformation, which is required by\n+     create_parallel_loop.  */\n+  rewrite_virtuals_into_loop_closed_ssa (loop);\n \n   /* Create the new_header block.  */\n   basic_block new_header = split_block_before_cond_jump (exit->src);\n@@ -1675,6 +1649,7 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n   vec<edge_var_map> *v = redirect_edge_var_map_vector (post_inc_edge);\n   edge_var_map *vm;\n   gphi_iterator gsi;\n+  int i;\n   for (gsi = gsi_start_phis (header), i = 0;\n        !gsi_end_p (gsi) && v->iterate (i, &vm);\n        gsi_next (&gsi), i++)\n@@ -1692,10 +1667,9 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n       /* Replace ivtmp/sum_b with ivtmp/sum_c in header phi.  */\n       add_phi_arg (phi, res_c, post_cond_edge, UNKNOWN_LOCATION);\n \n-      /* Replace sum_b with sum_c in exit phi.  Loop-closed ssa does not hold\n-\t for virtuals, so we cannot get away with exit_block only.  */\n+      /* Replace sum_b with sum_c in exit phi.  */\n       tree res_b = redirect_edge_var_map_def (vm);\n-      replace_uses_in_bbs_by (res_b, res_c, exit_dominated);\n+      replace_uses_in_bb_by (res_b, res_c, exit_block);\n \n       struct reduction_info *red = reduction_phi (reduction_list, phi);\n       gcc_assert (virtual_operand_p (res_a)\n@@ -1710,7 +1684,6 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n \t}\n     }\n   gcc_assert (gsi_end_p (gsi) && !v->iterate (i, &vm));\n-  BITMAP_FREE (exit_dominated);\n \n   /* Set the preheader argument of the new phis to ivtmp/sum_init.  */\n   flush_pending_stmts (entry);"}, {"sha": "3fbb4563670b73d88913ec117ece2c85bfba9a02", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -560,6 +560,57 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   free (use_blocks);\n }\n \n+/* Replace uses of OLD_VAL with NEW_VAL in bbs dominated by BB.  */\n+\n+static void\n+replace_uses_in_dominated_bbs (tree old_val, tree new_val, basic_block bb)\n+{\n+  gimple use_stmt;\n+  imm_use_iterator imm_iter;\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, old_val)\n+    {\n+      if (!dominated_by_p (CDI_DOMINATORS, gimple_bb (use_stmt), bb))\n+\t  continue;\n+\n+      use_operand_p use_p;\n+      FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\tSET_USE (use_p, new_val);\n+    }\n+}\n+\n+/* Ensure a virtual phi is present in the exit block, if LOOP contains a vdef.\n+   In other words, ensure loop-closed ssa normal form for virtuals.  Handles\n+   only loops with a single exit that dominates the latch.  */\n+\n+void\n+rewrite_virtuals_into_loop_closed_ssa (struct loop *loop)\n+{\n+  gphi *phi;\n+  /* TODO: Handle !single_dom_exit loops.  */\n+  edge exit = single_dom_exit (loop);\n+  gcc_assert (exit != NULL);\n+\n+  phi = get_virtual_phi (loop->header);\n+  if (phi == NULL)\n+    return;\n+\n+  tree final_loop = PHI_ARG_DEF_FROM_EDGE (phi, single_succ_edge (loop->latch));\n+\n+  phi = get_virtual_phi (exit->dest);\n+  if (phi != NULL)\n+    {\n+      tree final_exit = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n+      gcc_assert (operand_equal_p (final_loop, final_exit, 0));\n+      return;\n+    }\n+\n+  tree res_new = copy_ssa_name (final_loop, NULL);\n+  gphi *nphi = create_phi_node (res_new, exit->dest);\n+  replace_uses_in_dominated_bbs (final_loop, res_new, exit->dest);\n+  add_phi_arg (nphi, final_loop, exit, UNKNOWN_LOCATION);\n+}\n+\n /* Check invariants of the loop closed ssa form for the USE in BB.  */\n \n static void"}, {"sha": "9285718eababdaa6fce919e49ad0aa57485285f1", "filename": "gcc/tree-ssa-loop-manip.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-ssa-loop-manip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338392ed0fd9ca466905860e931b7a480179bce4/gcc%2Ftree-ssa-loop-manip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.h?ref=338392ed0fd9ca466905860e931b7a480179bce4", "patch": "@@ -25,6 +25,7 @@ typedef void (*transform_callback)(struct loop *, void *);\n extern void create_iv (tree, tree, tree, struct loop *, gimple_stmt_iterator *,\n \t\t       bool, tree *, tree *);\n extern void rewrite_into_loop_closed_ssa (bitmap, unsigned);\n+extern void rewrite_virtuals_into_loop_closed_ssa (struct loop *);\n extern void verify_loop_closed_ssa (bool);\n extern basic_block split_loop_exit_edge (edge);\n extern basic_block ip_end_pos (struct loop *);"}]}