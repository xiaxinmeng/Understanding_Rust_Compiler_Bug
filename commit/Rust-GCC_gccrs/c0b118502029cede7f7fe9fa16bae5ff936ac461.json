{"sha": "c0b118502029cede7f7fe9fa16bae5ff936ac461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiMTE4NTAyMDI5Y2VkZTdmN2ZlOWZhMTZiYWU1ZmY5MzZhYzQ2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:02:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:02:56Z"}, "message": "[multiple changes]\n\n2011-08-03  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_aggr.adb (Analyze_Array_Aggregate): When checking the discrete\n\tchoices of a named array aggregate, bail out when any choices are\n\tmarked as Errors_Posted.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch13.adb (Expand_N_Freeze_Entity): cleanup determination of scope\n\tin which entity is frozen, to handle properly loop variables in\n\titerators.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Set_String_Literal_Subtype): if the lower bound of the\n\tsubtype is not static, compute the upper bound using attributes, to\n\thandle properly index types that are not integer types.\n\n2011-08-03  Bob Duff  <duff@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Fix some dangling URLs.\n\tUpdate copyright notice.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Discriminant_Constraints): Only use\n\tOriginal_Discriminant if within an instance.\n\t* sem_ch4.adb (Analyze_Selected_Component): Ditto.\n\n2011-08-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* einfo.ads: Minor reformatting.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Check_Premature_Freezing): diagnose the presence of a\n\tcomposite type with an unfrozen subcomponent, in the profile of a\n\tprimitive operation.\n\nFrom-SVN: r177236", "tree": {"sha": "f799ddc9473294fcea2b4faca5462e7c472648ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f799ddc9473294fcea2b4faca5462e7c472648ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0b118502029cede7f7fe9fa16bae5ff936ac461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b118502029cede7f7fe9fa16bae5ff936ac461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b118502029cede7f7fe9fa16bae5ff936ac461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b118502029cede7f7fe9fa16bae5ff936ac461/comments", "author": null, "committer": null, "parents": [{"sha": "edc429ff61275ef7df40999418e6b6e365a22131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc429ff61275ef7df40999418e6b6e365a22131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc429ff61275ef7df40999418e6b6e365a22131"}], "stats": {"total": 190, "additions": 146, "deletions": 44}, "files": [{"sha": "2ce9de1811d90e68764a321582ae321b05b13ac6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -1,3 +1,42 @@\n+2011-08-03  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aggr.adb (Analyze_Array_Aggregate): When checking the discrete\n+\tchoices of a named array aggregate, bail out when any choices are\n+\tmarked as Errors_Posted.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): cleanup determination of scope\n+\tin which entity is frozen, to handle properly loop variables in\n+\titerators.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Set_String_Literal_Subtype): if the lower bound of the\n+\tsubtype is not static, compute the upper bound using attributes, to\n+\thandle properly index types that are not integer types.\n+\n+2011-08-03  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Fix some dangling URLs.\n+\tUpdate copyright notice.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Discriminant_Constraints): Only use\n+\tOriginal_Discriminant if within an instance.\n+\t* sem_ch4.adb (Analyze_Selected_Component): Ditto.\n+\n+2011-08-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Check_Premature_Freezing): diagnose the presence of a\n+\tcomposite type with an unfrozen subcomponent, in the profile of a\n+\tprimitive operation.\n+\n 2011-08-03  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.ads, exp_aggr.adb, exp_ch3.adb: Minor reformatting."}, {"sha": "993094e19c709acc6d50f96128bc321fe2de8907", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -2426,11 +2426,11 @@ package Einfo is\n --       Thus this flag has no meaning to the back end.\n \n --    Is_Limited_Composite (Flag106)\n---       Present in all entities. Set for composite types that have a\n---       limited component. Used to enforce the rule that operations on\n---       the composite type that depend on the full view of the component\n---       do not become visible until the immediate scope of the composite\n---       type itself (RM 7.3.1 (5)).\n+--       Present in all entities. Set for composite types that have a limited\n+--       component. Used to enforce the rule that operations on the composite\n+--       type that depend on the full view of the component do not become\n+--       visible until the immediate scope of the composite type itself\n+--       (RM 7.3.1 (5)).\n \n --    Is_Limited_Interface (Flag197)\n --       Present in record types and subtypes. True for interface types, if"}, {"sha": "dbf664c5bad2395520775b5f770a15d93bd2463b", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,6 @@ with Sem_Eval; use Sem_Eval;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n-with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n with Validsw;  use Validsw;\n@@ -213,7 +212,6 @@ package body Exp_Ch13 is\n    procedure Expand_N_Freeze_Entity (N : Node_Id) is\n       E              : constant Entity_Id := Entity (N);\n       E_Scope        : Entity_Id;\n-      S              : Entity_Id;\n       In_Other_Scope : Boolean;\n       In_Outer_Scope : Boolean;\n       Decl           : Node_Id;\n@@ -306,13 +304,18 @@ package body Exp_Ch13 is\n          E_Scope := Corresponding_Spec (Unit_Declaration_Node (E_Scope));\n       end if;\n \n-      S := Current_Scope;\n-      while S /= Standard_Standard and then S /= E_Scope loop\n-         S := Scope (S);\n-      end loop;\n+      --  If the scope of the entity is in open scopes, it is the current one\n+      --  or an enclosing one, including a loop, a block, or a subprogram.\n \n-      In_Other_Scope := not (S = E_Scope);\n-      In_Outer_Scope := (not In_Other_Scope) and then (S /= Current_Scope);\n+      if In_Open_Scopes (E_Scope) then\n+         In_Other_Scope := False;\n+         In_Outer_Scope := E_Scope /= Current_Scope;\n+\n+      --  Otherwise it is a local package or a different compilation unit.\n+      else\n+         In_Other_Scope := True;\n+         In_Outer_Scope := False;\n+      end if;\n \n       --  If the entity being frozen is defined in a scope that is not\n       --  currently on the scope stack, we must establish the proper"}, {"sha": "69159632d50ad352203e6931cadfb8fef1bc43e7", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -3764,7 +3764,10 @@ package body Exp_Disp is\n       DT_Aggr : constant Elist_Id := New_Elmt_List;\n       --  Entities marked with attribute Is_Dispatch_Table_Entity\n \n-      procedure Check_Premature_Freezing (Subp : Entity_Id; Typ : Entity_Id);\n+      procedure Check_Premature_Freezing\n+        (Subp        : Entity_Id;\n+         Tagged_Type : Entity_Id;\n+         Typ         : Entity_Id);\n       --  Verify that all non-tagged types in the profile of a subprogram\n       --  are frozen at the point the subprogram is frozen. This enforces\n       --  the rule on RM 13.14 (14) as modified by AI05-019. At the point a\n@@ -3775,6 +3778,8 @@ package body Exp_Disp is\n       --  Typical violation of the rule involves an object declaration that\n       --  freezes a tagged type, when one of its primitive operations has a\n       --  type in its profile whose full view has not been analyzed yet.\n+      --  More complex cases involve composite types that have one private\n+      --  unfrozen subcomponent.\n \n       procedure Export_DT (Typ : Entity_Id; DT : Entity_Id; Index : Nat := 0);\n       --  Export the dispatch table DT of tagged type Typ. Required to generate\n@@ -3814,10 +3819,15 @@ package body Exp_Disp is\n       -- Check_Premature_Freezing --\n       ------------------------------\n \n-      procedure Check_Premature_Freezing (Subp : Entity_Id; Typ : Entity_Id) is\n+      procedure Check_Premature_Freezing\n+        (Subp        : Entity_Id;\n+         Tagged_Type : Entity_Id;\n+         Typ         : Entity_Id)\n+      is\n+         Comp : Entity_Id;\n       begin\n          if Present (N)\n-           and then  Is_Private_Type (Typ)\n+           and then Is_Private_Type (Typ)\n            and then No (Full_View (Typ))\n            and then not Is_Generic_Type (Typ)\n            and then not Is_Tagged_Type (Typ)\n@@ -3828,8 +3838,26 @@ package body Exp_Disp is\n               (\"declaration must appear after completion of type &\", N, Typ);\n             Error_Msg_NE\n               (\"\\which is an untagged type in the profile of\"\n-               & \" primitive operation & declared#\",\n-               N, Subp);\n+               & \" primitive operation & declared#\", N, Subp);\n+\n+         else\n+            Comp := Private_Component (Typ);\n+\n+            if not Is_Tagged_Type (Typ)\n+              and then Present (Comp)\n+              and then not Is_Frozen (Comp)\n+            then\n+               Error_Msg_Sloc := Sloc (Subp);\n+               Error_Msg_Node_2 := Subp;\n+               Error_Msg_Name_1 := Chars (Tagged_Type);\n+               Error_Msg_NE\n+                 (\"declaration must appear after completion of type &\",\n+                   N, Comp);\n+               Error_Msg_NE\n+                 (\"\\which is a component of untagged type& in the profile of\"\n+               & \" primitive & of type % that is frozen by the declaration \",\n+                   N, Typ);\n+            end if;\n          end if;\n       end Check_Premature_Freezing;\n \n@@ -4587,11 +4615,11 @@ package body Exp_Disp is\n                begin\n                   F := First_Formal (Prim);\n                   while Present (F) loop\n-                     Check_Premature_Freezing (Prim, Etype (F));\n+                     Check_Premature_Freezing (Prim, Typ, Etype (F));\n                      Next_Formal (F);\n                   end loop;\n \n-                  Check_Premature_Freezing (Prim, Etype (Prim));\n+                  Check_Premature_Freezing (Prim, Typ, Etype (Prim));\n                end;\n \n                if Present (Frnodes) then"}, {"sha": "670c23cf031a9da96c468f1106141d4ea4411a6c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -4285,9 +4285,8 @@ Integrity Systems}, and has been approved by ISO/IEC/SC22/WG9 for inclusion in\n the next revision of the standard. The formal definition given by\n the Ada Rapporteur Group (ARG) can be found in two Ada Issues (AI-249 and\n AI-305) available at\n-@url{http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs/AI-00249.TXT} and\n-@url{http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs/AI-00305.TXT}\n-respectively.\n+@url{http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ais/ai-00249.txt} and\n+@url{http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ais/ai-00305.txt}.\n \n The above set is a superset of the restrictions provided by pragma\n @code{Profile (Restricted)}, it includes six additional restrictions"}, {"sha": "ba83f787f5df695f54ffdecdaf0d92097ab4ba82", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -7,7 +7,7 @@\n @c                                                                            o\n @c                             G N A T _ U G N                                o\n @c                                                                            o\n-@c                     Copyright (C) 1992-2010, AdaCore                       o\n+@c                     Copyright (C) 1992-2011, AdaCore                       o\n @c                                                                            o\n @c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n "}, {"sha": "63a02e1d2477ff5f7b585310666849e95f288ba7", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -1823,6 +1823,9 @@ package body Sem_Aggr is\n             --  Used to keep track of the number of discrete choices in the\n             --  current association.\n \n+            Errors_Posted_On_Choices : Boolean := False;\n+            --  Keeps track of whether any choices have semantic errors\n+\n          begin\n             --  STEP 2 (A): Check discrete choices validity\n \n@@ -1867,6 +1870,14 @@ package body Sem_Aggr is\n                      Check_Unset_Reference (Choice);\n                      Check_Non_Static_Context (Choice);\n \n+                     --  If semantic errors were posted on the choice, then\n+                     --  record that for possible early return from later\n+                     --  processing (see handling of enumeration choices).\n+\n+                     if Error_Posted (Choice) then\n+                        Errors_Posted_On_Choices := True;\n+                     end if;\n+\n                      --  Do not range check a choice. This check is redundant\n                      --  since this test is already done when we check that the\n                      --  bounds of the array aggregate are within range.\n@@ -2144,13 +2155,12 @@ package body Sem_Aggr is\n                     and then Compile_Time_Known_Value (Choices_Low)\n                     and then Compile_Time_Known_Value (Choices_High)\n                   then\n-                     --  If the bounds have semantic errors, do not attempt\n-                     --  further resolution to prevent cascaded errors.\n+                     --  If any of the expressions or range bounds in choices\n+                     --  have semantic errors, then do not attempt further\n+                     --  resolution, to prevent cascaded errors.\n \n-                     if Error_Posted (Choices_Low)\n-                       or else Error_Posted (Choices_High)\n-                     then\n-                        return False;\n+                     if Errors_Posted_On_Choices then\n+                        return Failure;\n                      end if;\n \n                      declare"}, {"sha": "6441cfa739656a6de5d41fec1ddd2677778ed53a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -8298,7 +8298,9 @@ package body Sem_Ch3 is\n                --  the point of instantiation, we want to find the discriminant\n                --  that corresponds to D in Rec, i.e. X.\n \n-               if Present (Original_Discriminant (Id)) then\n+               if Present (Original_Discriminant (Id))\n+                 and then In_Instance\n+               then\n                   Discr := Find_Corresponding_Discriminant (Id, T);\n                   Found := True;\n "}, {"sha": "82a6161533d7279f2dca3aeb757007ae4ccdffb0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -3754,6 +3754,7 @@ package body Sem_Ch4 is\n       --  be done transitively, so note the new original discriminant.\n \n       if Nkind (Sel) = N_Identifier\n+        and then In_Instance\n         and then Present (Original_Discriminant (Sel))\n       then\n          Comp := Find_Corresponding_Discriminant (Sel, Prefix_Type);"}, {"sha": "7d51803724275f0c0ce5e7fd80d5fed969e4f663", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b118502029cede7f7fe9fa16bae5ff936ac461/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c0b118502029cede7f7fe9fa16bae5ff936ac461", "patch": "@@ -9873,29 +9873,49 @@ package body Sem_Res is\n          Set_String_Literal_Low_Bound (Subtype_Id, Low_Bound);\n \n       else\n-         Set_String_Literal_Low_Bound\n-           (Subtype_Id, Make_Integer_Literal (Loc, 1));\n-         Set_Etype (String_Literal_Low_Bound (Subtype_Id), Standard_Positive);\n-\n-         --  Build bona fide subtype for the string, and wrap it in an\n-         --  unchecked conversion, because the backend expects the\n-         --  String_Literal_Subtype to have a static lower bound.\n+         --  If the lower bound is not static we create a range for the string\n+         --  literal, using the index type and the known length of the literal.\n+         --  The index type is not necessarily Positive, so the upper bound is\n+         --  computed as  T'Val (T'Pos (Low_Bound) + L - 1)\n \n          declare\n             Index_List    : constant List_Id    := New_List;\n             Index_Type    : constant Entity_Id := Etype (First_Index (Typ));\n             High_Bound    : constant Node_Id :=\n-                               Make_Op_Add (Loc,\n-                                  Left_Opnd => New_Copy_Tree (Low_Bound),\n-                                  Right_Opnd =>\n-                                    Make_Integer_Literal (Loc,\n-                                      String_Length (Strval (N)) - 1));\n+              Make_Attribute_Reference (Loc,\n+                Attribute_Name => Name_Val,\n+                Prefix => New_Occurrence_Of (Index_Type, Loc),\n+                Expressions =>\n+                New_List (\n+                  Make_Op_Add (Loc,\n+                    Left_Opnd =>\n+                      Make_Attribute_Reference (Loc,\n+                        Attribute_Name => Name_Pos,\n+                        Prefix => New_Occurrence_Of (Index_Type, Loc),\n+                        Expressions => New_List (New_Copy_Tree (Low_Bound))),\n+                      Right_Opnd =>\n+                            Make_Integer_Literal (Loc,\n+                              String_Length (Strval (N)) - 1))));\n+\n             Array_Subtype : Entity_Id;\n             Index_Subtype : Entity_Id;\n             Drange        : Node_Id;\n             Index         : Node_Id;\n \n          begin\n+            Set_String_Literal_Low_Bound\n+              (Subtype_Id,\n+               Make_Attribute_Reference (Loc,\n+                 Attribute_Name => Name_First,\n+                 Prefix         =>\n+                   New_Occurrence_Of (Base_Type (Index_Type), Loc)));\n+            Set_Etype (String_Literal_Low_Bound (Subtype_Id), Index_Type);\n+            Analyze_And_Resolve (String_Literal_Low_Bound (Subtype_Id));\n+\n+            --  Build bona fide subtype for the string, and wrap it in an\n+            --  unchecked conversion, because the backend expects the\n+            --  String_Literal_Subtype to have a static lower bound.\n+\n             Index_Subtype :=\n               Create_Itype (Subtype_Kind (Ekind (Index_Type)), N);\n             Drange := Make_Range (Loc, New_Copy_Tree (Low_Bound), High_Bound);"}]}