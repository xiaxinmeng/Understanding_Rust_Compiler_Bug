{"sha": "e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkZGVjNGVmMWM3MTZhNzg5MWI0NWQwNDczNGNmOTJmMzU2M2NjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-09-08T11:33:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-09-08T11:33:08Z"}, "message": "re PR target/33329 (ICE in expand_simple_binop, at optabs.c:1294)\n\n        PR target/33329\n        PR target/26449\n        * config/i386/sse.md (mulv4si3): Do not expand sse2 sequence.\n        (*sse2_mulv4si3): New define_insn_and_split pattern. Split insn in\n        split1 pass.\n        (mulv16qi3): Implement as define_insn_and_split pattern instead of\n        define_expand, to split insn in split1 pass.\n        (mulv2di3): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/33329\n        PR target/26449\n        * gcc.target/i386/pr33329.c: New file.\n\nFrom-SVN: r128269", "tree": {"sha": "876b7ca4bc50725d03f1ecf64568f646160c69a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876b7ca4bc50725d03f1ecf64568f646160c69a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79646678b52a9c63f19ce74a2471291aae1d59a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79646678b52a9c63f19ce74a2471291aae1d59a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79646678b52a9c63f19ce74a2471291aae1d59a4"}], "stats": {"total": 148, "additions": 100, "deletions": 48}, "files": [{"sha": "9366bc26a5ce2b37943caddf76cd8f89102f3252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "patch": "@@ -1,3 +1,14 @@\n+2007-09-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/33329\n+\tPR target/26449\n+\t* config/i386/sse.md (mulv4si3): Do not expand sse2 sequence.\n+\t(*sse2_mulv4si3): New define_insn_and_split pattern. Split insn in\n+\tsplit1 pass.\n+\t(mulv16qi3): Implement as define_insn_and_split pattern instead of\n+\tdefine_expand, to split insn in split1 pass.\n+\t(mulv2di3): Ditto.\n+\n 2007-09-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/33301"}, {"sha": "02964d7aa6a4e96b2f17f4fba76406be240cb9a1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 65, "deletions": 48, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "patch": "@@ -2899,11 +2899,15 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"mulv16qi3\"\n+(define_insn_and_split \"mulv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n \t(mult:V16QI (match_operand:V16QI 1 \"register_operand\" \"\")\n \t\t    (match_operand:V16QI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   rtx t[12], op0;\n   int i;\n@@ -3097,50 +3101,6 @@\n {\n   if (TARGET_SSE4_1)\n     ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\n- else\n-   {\n-     rtx t1, t2, t3, t4, t5, t6, thirtytwo;\n-     rtx op0, op1, op2;\n-\n-     op0 = operands[0];\n-     op1 = operands[1];\n-     op2 = operands[2];\n-     t1 = gen_reg_rtx (V4SImode);\n-     t2 = gen_reg_rtx (V4SImode);\n-     t3 = gen_reg_rtx (V4SImode);\n-     t4 = gen_reg_rtx (V4SImode);\n-     t5 = gen_reg_rtx (V4SImode);\n-     t6 = gen_reg_rtx (V4SImode);\n-     thirtytwo = GEN_INT (32);\n-\n-     /* Multiply elements 2 and 0.  */\n-     emit_insn (gen_sse2_umulv2siv2di3 (gen_lowpart (V2DImode, t1),\n-\t\t\t\t\top1, op2));\n-\n-     /* Shift both input vectors down one element, so that elements 3\n-\tand 1 are now in the slots for elements 2 and 0.  For K8, at\n-\tleast, this is faster than using a shuffle.  */\n-     emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t2),\n-\t\t\t\t  gen_lowpart (TImode, op1),\n-\t\t\t\t  thirtytwo));\n-     emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t3),\n-\t\t\t\t  gen_lowpart (TImode, op2),\n-\t\t\t\t  thirtytwo)); \n-     /* Multiply elements 3 and 1.  */\n-     emit_insn (gen_sse2_umulv2siv2di3 (gen_lowpart (V2DImode, t4),\n-\t\t\t\t\tt2, t3));\n-\n-     /* Move the results in element 2 down to element 1; we don't care\n-\twhat goes in elements 2 and 3.  */\n-     emit_insn (gen_sse2_pshufd_1 (t5, t1, const0_rtx, const2_rtx,\n-\t\t\t\tconst0_rtx, const0_rtx));\n-     emit_insn (gen_sse2_pshufd_1 (t6, t4, const0_rtx, const2_rtx,\n-\t\t\t\t   const0_rtx, const0_rtx));\n-\n-    /* Merge the parts back together.  */\n-     emit_insn (gen_sse2_punpckldq (op0, t5, t6));\n-     DONE;\n-   }\n })\n \n (define_insn \"*sse4_1_mulv4si3\"\n@@ -3153,11 +3113,68 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"mulv2di3\"\n+(define_insn_and_split \"*sse2_mulv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n+\t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n+  \"TARGET_SSE2 && !TARGET_SSE4_1\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  rtx t1, t2, t3, t4, t5, t6, thirtytwo;\n+  rtx op0, op1, op2;\n+\n+  op0 = operands[0];\n+  op1 = operands[1];\n+  op2 = operands[2];\n+  t1 = gen_reg_rtx (V4SImode);\n+  t2 = gen_reg_rtx (V4SImode);\n+  t3 = gen_reg_rtx (V4SImode);\n+  t4 = gen_reg_rtx (V4SImode);\n+  t5 = gen_reg_rtx (V4SImode);\n+  t6 = gen_reg_rtx (V4SImode);\n+  thirtytwo = GEN_INT (32);\n+\n+  /* Multiply elements 2 and 0.  */\n+  emit_insn (gen_sse2_umulv2siv2di3 (gen_lowpart (V2DImode, t1),\n+\t\t\t\t     op1, op2));\n+\n+  /* Shift both input vectors down one element, so that elements 3\n+     and 1 are now in the slots for elements 2 and 0.  For K8, at\n+     least, this is faster than using a shuffle.  */\n+  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t2),\n+\t\t\t       gen_lowpart (TImode, op1),\n+\t\t\t       thirtytwo));\n+  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t3),\n+\t\t\t       gen_lowpart (TImode, op2),\n+\t\t\t       thirtytwo)); \n+  /* Multiply elements 3 and 1.  */\n+  emit_insn (gen_sse2_umulv2siv2di3 (gen_lowpart (V2DImode, t4),\n+\t\t\t\t     t2, t3));\n+\n+  /* Move the results in element 2 down to element 1; we don't care\n+     what goes in elements 2 and 3.  */\n+  emit_insn (gen_sse2_pshufd_1 (t5, t1, const0_rtx, const2_rtx,\n+\t\t\t\tconst0_rtx, const0_rtx));\n+  emit_insn (gen_sse2_pshufd_1 (t6, t4, const0_rtx, const2_rtx,\n+\t\t\t\tconst0_rtx, const0_rtx));\n+\n+  /* Merge the parts back together.  */\n+  emit_insn (gen_sse2_punpckldq (op0, t5, t6));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"mulv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n \t(mult:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && !(reload_completed || reload_in_progress)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n {\n   rtx t1, t2, t3, t4, t5, t6, thirtytwo;\n   rtx op0, op1, op2;"}, {"sha": "79b14b77e9fcec496d13073a11cda115b3687fba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "patch": "@@ -1,3 +1,9 @@\n+2007-09-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/33329\n+\tPR target/26449\n+\t* gcc.target/i386/pr33329.c: New file.\n+\n 2007-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/renaming3.adb, renaming4.ads: New test."}, {"sha": "bb589ee2780cb4cd248cff3e8a598737c30786e6", "filename": "gcc/testsuite/gcc.target/i386/pr33329.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33329.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ddec4ef1c716a7891b45d04734cf92f3563cc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33329.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr33329.c?ref=e9ddec4ef1c716a7891b45d04734cf92f3563cc5", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+extern void g (int *);\n+\n+void f (void)\n+{\n+  int tabs[8], tabcount;\n+\n+  for (tabcount = 1; tabcount <= 8; tabcount += 7)\n+    {\n+      int i;\n+      for (i = 0; i < 8; i++)\n+\ttabs[i] = i * 2;\n+      g (tabs);\n+    }\n+}\n+"}]}