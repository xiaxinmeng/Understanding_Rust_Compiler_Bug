{"sha": "b53cd1c5cf3aa84837b677fda803c1664857774a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzY2QxYzVjZjNhYTg0ODM3YjY3N2ZkYTgwM2MxNjY0ODU3Nzc0YQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-06-12T07:39:25Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-06-12T07:39:25Z"}, "message": "Don't call pbb_to_depth_to_oldiv from compute_type_for_level.\n\n2010-06-12  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (gcc_type_for_interval): Do not pass\n\told_type in parameter.\n\t(gcc_type_for_value): Update call to gcc_type_for_interval.\n\t(compute_type_for_level_1): Renamed compute_type_for_level.\n\tUpdate call to gcc_type_for_interval.\n\nFrom-SVN: r160649", "tree": {"sha": "07e4a2a5c4e4379950a9befc5bae4aef1c2d718b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e4a2a5c4e4379950a9befc5bae4aef1c2d718b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53cd1c5cf3aa84837b677fda803c1664857774a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53cd1c5cf3aa84837b677fda803c1664857774a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53cd1c5cf3aa84837b677fda803c1664857774a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53cd1c5cf3aa84837b677fda803c1664857774a/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd8d93a0beea307b26f01d36d0808fbbfa61f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd8d93a0beea307b26f01d36d0808fbbfa61f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd8d93a0beea307b26f01d36d0808fbbfa61f1a"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "3d1b0eb301ad968eb85ab3ae7fd17b9bdc22dd9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53cd1c5cf3aa84837b677fda803c1664857774a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53cd1c5cf3aa84837b677fda803c1664857774a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b53cd1c5cf3aa84837b677fda803c1664857774a", "patch": "@@ -1,3 +1,11 @@\n+2010-06-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (gcc_type_for_interval): Do not pass\n+\told_type in parameter.\n+\t(gcc_type_for_value): Update call to gcc_type_for_interval.\n+\t(compute_type_for_level_1): Renamed compute_type_for_level.\n+\tUpdate call to gcc_type_for_interval.\n+\n 2010-06-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (Wstrict-aliasing=, Wstrict-overflow=, fabi-version=,"}, {"sha": "8116afed1a4e290984fee46bf251b260cb366f97", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53cd1c5cf3aa84837b677fda803c1664857774a/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53cd1c5cf3aa84837b677fda803c1664857774a/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=b53cd1c5cf3aa84837b677fda803c1664857774a", "patch": "@@ -469,11 +469,10 @@ precision_for_interval (mpz_t low, mpz_t up)\n   return precision;\n }\n \n-/* Return a type that could represent the integer value VAL, or\n-   otherwise return NULL_TREE.  */\n+/* Return a type that could represent the integer value VAL.  */\n \n static tree\n-gcc_type_for_interval (mpz_t low, mpz_t up, tree old_type)\n+gcc_type_for_interval (mpz_t low, mpz_t up)\n {\n   bool unsigned_p = true;\n   int precision, prec_up, prec_int;\n@@ -482,14 +481,12 @@ gcc_type_for_interval (mpz_t low, mpz_t up, tree old_type)\n \n   gcc_assert (value_le (low, up));\n \n-  /* Preserve the signedness of the old IV.  */\n-  if ((old_type && !TYPE_UNSIGNED (old_type))\n-      || value_neg_p (low))\n+  if (value_neg_p (low))\n     unsigned_p = false;\n \n   prec_up = precision_for_value (up);\n   prec_int = precision_for_interval (low, up);\n-  precision = prec_up > prec_int ? prec_up : prec_int;\n+  precision = MAX (prec_up, prec_int);\n \n   if (precision > BITS_PER_WORD)\n     {\n@@ -516,7 +513,7 @@ gcc_type_for_interval (mpz_t low, mpz_t up, tree old_type)\n static tree\n gcc_type_for_value (mpz_t val)\n {\n-  return gcc_type_for_interval (val, val, NULL_TREE);\n+  return gcc_type_for_interval (val, val);\n }\n \n /* Return the type for the clast_term T used in STMT.  */\n@@ -726,11 +723,10 @@ compute_bounds_for_level (poly_bb_p pbb, int level, mpz_t low, mpz_t up)\n }\n \n /* Compute the type for the induction variable at LEVEL for the\n-   statement PBB, based on the transformed schedule of PBB.  OLD_TYPE\n-   is the type of the old induction variable for that loop.  */\n+   statement PBB, based on the transformed schedule of PBB.  */\n \n static tree\n-compute_type_for_level_1 (poly_bb_p pbb, int level, tree old_type)\n+compute_type_for_level (poly_bb_p pbb, int level)\n {\n   mpz_t low, up;\n   tree type;\n@@ -739,39 +735,13 @@ compute_type_for_level_1 (poly_bb_p pbb, int level, tree old_type)\n   value_init (up);\n \n   compute_bounds_for_level (pbb, level, low, up);\n-  type = gcc_type_for_interval (low, up, old_type);\n+  type = gcc_type_for_interval (low, up);\n \n   value_clear (low);\n   value_clear (up);\n   return type;\n }\n \n-/* Compute the type for the induction variable at LEVEL for the\n-   statement PBB, based on the transformed schedule of PBB.  */\n-\n-static tree\n-compute_type_for_level (poly_bb_p pbb, int level)\n-{\n-  tree oldiv = pbb_to_depth_to_oldiv (pbb, level);\n-  tree type = TREE_TYPE (oldiv);\n-\n-  if (type && POINTER_TYPE_P (type))\n-    {\n-#ifdef ENABLE_CHECKING\n-      tree ctype = compute_type_for_level_1 (pbb, level, type);\n-\n-      /* In the case of a pointer type, check that after the loop\n-\t transform, the lower and the upper bounds of the type fit the\n-\t oldiv pointer type.  */\n-      gcc_assert (TYPE_PRECISION (type) >= TYPE_PRECISION (ctype)\n-\t\t  && integer_zerop (lower_bound_in_type (ctype, ctype)));\n-#endif\n-      return type;\n-    }\n-\n-  return compute_type_for_level_1 (pbb, level, type);\n-}\n-\n /* Walks a CLAST and returns the first statement in the body of a\n    loop.  */\n "}]}