{"sha": "43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhYTRlMDVlYTcyZDMwMGVkZTE0MWIzMjIyZTU0Zjc3YzZlYTRhNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-28T15:29:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-28T15:29:45Z"}, "message": "ChangeLog.4: Fix typos.\n\n\t* ChangeLog.4: Fix typos.\n\t* ChangeLog.6: Likewise.\n\t* FSFChangeLog.10: Likewise.\n\t* genattrtab.c: Fix comment typos.\n\t* haifa-sched.c: Likewise.\n\t* real.c: Likewise.\n\t* tree.h: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/crti.asm: Likewise.\n\t* config/arm/crtn.asm: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/frv/frv.md: Likewise.\n\t* config/h8300/h8300.md: Likewise.\n\t* config/i386/rtemself.h: Likewise.\n\t* config/ia64/unwind-ia64.c: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\t* config/m88k/m88k.c: Likewise.\n\t* config/m88k/m88k.md: Likewise.\n\t* config/mips/sr71k.md: Likewise.\n\t* config/mmix/mmix.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/sh/sh.md: Likewise.\n\nFrom-SVN: r57614", "tree": {"sha": "d6229d36c3ba1bde96e6ff5cf2b04b6fb1b8d777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6229d36c3ba1bde96e6ff5cf2b04b6fb1b8d777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/comments", "author": null, "committer": null, "parents": [{"sha": "13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e8651c8a52719e6e5a8b4b1a6552bffd7bcd79"}], "stats": {"total": 87, "additions": 56, "deletions": 31}, "files": [{"sha": "4089780ef8f68d52e97ac88634a8427f612b9463", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1,3 +1,28 @@\n+2002-09-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog.4: Fix typos.\n+\t* ChangeLog.6: Likewise.\n+\t* FSFChangeLog.10: Likewise.\n+\t* genattrtab.c: Fix comment typos.\n+\t* haifa-sched.c: Likewise.\n+\t* real.c: Likewise.\n+\t* tree.h: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/crti.asm: Likewise.\n+\t* config/arm/crtn.asm: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/frv/frv.md: Likewise.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/i386/rtemself.h: Likewise.\n+\t* config/ia64/unwind-ia64.c: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\t* config/m88k/m88k.c: Likewise.\n+\t* config/m88k/m88k.md: Likewise.\n+\t* config/mips/sr71k.md: Likewise.\n+\t* config/mmix/mmix.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\n 2002-09-26  Theodore A. Roth  <troth@verinet.com>\n \n         * config/avr/avr.c: Eliminate use of _PC_ in pc relative insns."}, {"sha": "ac0f7e0ffd09278c56d2283ac1dc7021e3078c72", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -11108,7 +11108,7 @@ Sun 20-Aug-2000 09:25:45 BST  Neil Booth  <NeilB@earthling.net>\n \tinstructions in it before checking for indirect jumps.\n \n \t* ifcvt.c (find_if_block): Do not consider a THEN block that ends\n-\tin a indirect jump as a potential for conditional execution.\n+\tin an indirect jump as a potential for conditional execution.\n \n \t* d30v.h (d30v_init_expanders): Don't declare here.\n \t* d30v-protos.h (d30v_init_expanders): Declare here with a valid"}, {"sha": "5618eaa29e2d3a5f0e13ca288da870f3d9fad0d8", "filename": "gcc/ChangeLog.6", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FChangeLog.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.6?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -12374,7 +12374,7 @@ Thu Aug 30 10:21:43 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t(INIT_SECTION_ASM_OP): Define.\n \t(FINI_SECTION_ASM_OP): Define.\n \t(SUBTARGET_EXTRA_SECTIONS): Remove trailing comma.\n-\t(RDATA_SECTION_FUNCITON): Provide prototype.\n+\t(RDATA_SECTION_FUNCTION): Provide prototype.\n \n 2001-08-29  Geoffrey Keating  <geoffk@redhat.com>\n "}, {"sha": "e7ae6c5af0a28b536b9b24b3dfcc184d4ab37f10", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -6057,7 +6057,7 @@ Mon Jul 17 06:41:19 1995  Richard Kenner  (kenner@vlsi1.ultra.nyu.edu)\n \n \t* xm-alpha.h (sbrk): Add declaration.\n \n-\t* convert.c (convert_to_integer): If TYPE is a enumeral type or\n+\t* convert.c (convert_to_integer): If TYPE is an enumeral type or\n \tif its precision is not the same as the size of its mode,\n \tconvert in two steps.\n "}, {"sha": "23b9043214919f71b01bd612fb44ead52d937777", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -8055,7 +8055,7 @@ emit_sfm (base_reg, count)\n    current stack pointer -> |    | /\n                               --\n \n-  For a given function some or all of these stack compomnents\n+  For a given function some or all of these stack components\n   may not be needed, giving rise to the possibility of\n   eliminating some of the registers.\n "}, {"sha": "ac58e44838df7882cd14f253861a21ce315394cd", "filename": "gcc/config/arm/crti.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrti.asm?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -35,7 +35,7 @@\n # .init sections.  Users may put any desired instructions in those\n # sections.\n \n-\t# Note - this macro is complimented by the FUNC_END macro\n+\t# Note - this macro is complemented by the FUNC_END macro\n \t# in crtn.asm.  If you change this macro you must also change\n \t# that macro match.\n .macro FUNC_START"}, {"sha": "2f4b5422eb240cc5bd22c50c5e85272c18e5ba53", "filename": "gcc/config/arm/crtn.asm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Farm%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrtn.asm?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -35,7 +35,7 @@\n # fact return.  Users may put any desired instructions in those sections.\n # This file is the last thing linked into any executable.\n \n-\t# Note - this macro is complimented by the FUNC_START macro\n+\t# Note - this macro is complemented by the FUNC_START macro\n \t# in crti.asm.  If you change this macro you must also change\n \t# that macro match.\n \t#"}, {"sha": "a49b1572669eb629ff1f96471348ce7704248b41", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1753,7 +1753,7 @@ frv_function_epilogue (file, size)\n \n \f\n /* Called after register allocation to add any instructions needed for the\n-   epilogue.  Using a epilogue insn is favored compared to putting all of the\n+   epilogue.  Using an epilogue insn is favored compared to putting all of the\n    instructions in the FUNCTION_PROLOGUE macro, since it allows the scheduler\n    to intermix instructions with the saves of the caller saved registers.  In\n    some cases, it might be necessary to emit a barrier instruction as the last\n@@ -2701,7 +2701,7 @@ frv_print_operand_jump_hint (insn)\n }\n \n \f\n-/* Print an operand to a assembler instruction.\n+/* Print an operand to an assembler instruction.\n \n    `%' followed by a letter and a digit says to output an operand in an\n    alternate fashion.  Four letters have standard, built-in meanings described\n@@ -7672,7 +7672,7 @@ frv_initialize_trampoline (addr, fnaddr, static_chain)\n    registers can only be copied to memory and not to another class of\n    registers.  In that case, secondary reload registers are not needed and\n    would not be helpful.  Instead, a stack location must be used to perform the\n-   copy and the `movM' pattern should use memory as a intermediate storage.\n+   copy and the `movM' pattern should use memory as an intermediate storage.\n    This case often occurs between floating-point and general registers.  */\n \n enum reg_class"}, {"sha": "a5e82ee65a9d8cb3281ee5fa10bb8c2d9d740c37", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -5524,7 +5524,7 @@\n }\")\n \n ;; Called after register allocation to add any instructions needed for the\n-;; epilogue.  Using a epilogue insn is favored compared to putting all of the\n+;; epilogue.  Using an epilogue insn is favored compared to putting all of the\n ;; instructions in the FUNCTION_EPILOGUE macro, since it allows the scheduler\n ;; to intermix instructions with the restires of the caller saved registers.\n ;; In some cases, it might be necessary to emit a barrier instruction as the"}, {"sha": "ab2573ab5b946c56e3e62629edb039d1e5296472", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -35,7 +35,7 @@\n ;; more 16bit registers).  At that point addhi and subhi can't use\n ;; adds/subs.\n \n-;; There's currently no way to have a insv/extzv expander for the H8/300H\n+;; There's currently no way to have an insv/extzv expander for the H8/300H\n ;; because word_mode is different for the H8/300 and H8/300H.\n \n ;; Shifts/rotates by small constants should be handled by special"}, {"sha": "096717816f2cd535f9b07819e2d1bd451dfea684", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions for rtems targeting a ix86 using ELF.\n+/* Definitions for rtems targeting an ix86 using ELF.\n    Copyright (C) 1996, 1997, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Joel Sherrill (joel@OARcorp.com).\n "}, {"sha": "e55f1f8c363969f40bbecb6178fd1b011b2f4cbf", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -143,7 +143,7 @@ typedef struct unw_state_record\n   unsigned int any_spills : 1;\t\t/* got any register spills? */\n   unsigned int in_body : 1;\t/* are we inside a body? */\n   unsigned int no_reg_stack_frame : 1;\t/* Don't adjust bsp for i&l regs */\n-  unsigned char *imask;\t\t/* imask of of spill_mask record or NULL */\n+  unsigned char *imask;\t\t/* imask of spill_mask record or NULL */\n   unsigned long pr_val;\t\t/* predicate values */\n   unsigned long pr_mask;\t/* predicate mask */\n   long spill_offset;\t\t/* psp-relative offset for spill base */"}, {"sha": "00be9c4408d335442ea7bc6e0b1a7f2d37966c8e", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -851,7 +851,7 @@ enum reg_class {\n    class of registers.  In that case, secondary reload registers are\n    not needed and would not be helpful.  Instead, a stack location\n    must be used to perform the copy and the `movM' pattern should use\n-   memory as a intermediate storage.  This case often occurs between\n+   memory as an intermediate storage.  This case often occurs between\n    floating-point and general registers.  */\n \n /* `SECONDARY_MEMORY_NEEDED (CLASS1, CLASS2, M)'"}, {"sha": "fde0d14a2a134e28081283177c8e125dddf248d8", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -2921,7 +2921,7 @@ print_operand (file, x, code)\n       fprintf (file, \"%d\", value);\n       return;\n \n-    case 'S': /* compliment the value and then... */\n+    case 'S': /* complement the value and then... */\n       value = ~value;\n     case 's': /* print the width and offset values forming the integer\n \t\t constant with a SET instruction.  See integer_ok_for_set. */"}, {"sha": "edefd23db088f2b2f8f3249f2ebf63fd00099114", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -398,10 +398,10 @@\n ;;\n ;; When the extracted conditions are the same, the define_split patterns\n ;; below change extu/extu/{and,or} into {and,or}/extu.  If the reversed\n-;; conditions match, one compare word can be complimented, resulting in\n+;; conditions match, one compare word can be complemented, resulting in\n ;; {and.c,or.c}/extu.  These changes are done for ext/ext/{and,or} as well.\n ;; If the conditions don't line up, one can be rotated.  To keep the pairwise\n-;; relationship, it may be necessary to both rotate and compliment.  Rotating\n+;; relationship, it may be necessary to both rotate and complement.  Rotating\n ;; makes branching cheaper, but doesn't help (or hurt) creating a value, so\n ;; we don't do this for ext/ext/{and,or}.\n ;;\n@@ -430,7 +430,7 @@\n      ; /* The conditions match.  */\n    else if (GET_CODE (operands[1])\n \t    == reverse_condition (GET_CODE (operands[3])))\n-     /* Reverse the condition by complimenting the compare word.  */\n+     /* Reverse the condition by complementing the compare word.  */\n      operands[4] = gen_rtx_NOT (CCmode, operands[4]);\n    else\n      {\n@@ -525,7 +525,7 @@\n    (set (match_dup 0)\n \t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n   \"operands[5] = gen_rtx_SUBREG (CCEVENmode, operands[5], 0);\n-   /* Reverse the condition by  complimenting the compare word.  */\n+   /* Reverse the condition by complementing the compare word.  */\n    if (GET_CODE (operands[1]) != GET_CODE (operands[3]))\n       operands[4] = gen_rtx_NOT (CCmode, operands[4]);\")\n \n@@ -585,7 +585,7 @@\n      ; /* The conditions match.  */\n    else if (GET_CODE (operands[1])\n \t    == reverse_condition (GET_CODE (operands[3])))\n-     /* Reverse the condition by complimenting the compare word.  */\n+     /* Reverse the condition by complementing the compare word.  */\n      operands[4] = gen_rtx_NOT (CCmode, operands[4]);\n    else\n      {\n@@ -677,7 +677,7 @@\n    (set (match_dup 0)\n \t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n   \"operands[5] = gen_rtx_SUBREG (CCEVENmode, operands[5], 0);\n-   /* Reverse the condition by  complimenting the compare word.  */\n+   /* Reverse the condition by complementing the compare word.  */\n    if (GET_CODE (operands[1]) != GET_CODE (operands[3]))\n       operands[4] = gen_rtx_NOT (CCmode, operands[4]);\")\n "}, {"sha": "82162e3ca3943af9a347ae78db35bace458afc10", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -4,7 +4,7 @@\n ;;\n ;; The SR3 is describeds as:\n ;;     - nine-stage pipeline, insn buffering with out-of-order issue to\n-;;       multiple function units, with a average dispatch rate of 2\n+;;       multiple function units, with an average dispatch rate of 2\n ;;       insn.s per cycle (max 6 insns: 2 fpu, 4 cpu).\n ;;\n ;;  The details on this are scant except for a diagram in"}, {"sha": "be1d25ef4de9c88f4f4124dffd20ecaab18d7d3e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -693,7 +693,7 @@ mmix_asm_preferred_eh_data_format (code, global)\n   return DW_EH_PE_absptr;\n }\n \n-/* Make a note that we've seen the beginning of of the prologue.  This\n+/* Make a note that we've seen the beginning of the prologue.  This\n    matters to whether we'll translate register numbers as calculated by\n    mmix_machine_dependent_reorg.  */\n "}, {"sha": "666c6afb0c425d15c258517745fab199165a426b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -7389,7 +7389,7 @@ print_operand (file, x, code)\n \n     case 'G':\n       /* X is a constant integer.  If it is negative, print \"m\",\n-\t otherwise print \"z\".  This is to make a aze or ame insn.  */\n+\t otherwise print \"z\".  This is to make an aze or ame insn.  */\n       if (GET_CODE (x) != CONST_INT)\n \toutput_operand_lossage (\"invalid %%G value\");\n       else if (INTVAL (x) >= 0)"}, {"sha": "b23766474cfdebf29ca034f47aa0832646bb646a", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1955,7 +1955,7 @@\n   \"and\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-;; If the constant is 255, then emit a extu.b instruction instead of an\n+;; If the constant is 255, then emit an extu.b instruction instead of an\n ;; and, since that will give better code.\n \n (define_expand \"andsi3\""}, {"sha": "47a6f00c25eaf7e207bc5afce926b5a66e936fe0", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1838,7 +1838,7 @@ operate_exp (op, left, right)\n    The first produces a function `function_units_used' which is given an\n    insn and produces an encoding showing which function units are required\n    for the execution of that insn.  If the value is non-negative, the insn\n-   uses that unit; otherwise, the value is a one's compliment mask of units\n+   uses that unit; otherwise, the value is a one's complement mask of units\n    used.\n \n    The second produces a function `result_ready_cost' which is used to\n@@ -2246,7 +2246,7 @@ simplify_knowing (exp, known_true)\n /* Translate the CONST_STRING expressions in X to change the encoding of\n    value.  On input, the value is a bitmask with a one bit for each unit\n    used; on output, the value is the unit number (zero based) if one\n-   and only one unit is used or the one's compliment of the bitmask.  */\n+   and only one unit is used or the one's complement of the bitmask.  */\n \n static rtx\n encode_units_mask (x)\n@@ -2264,7 +2264,7 @@ encode_units_mask (x)\n     case CONST_STRING:\n       i = atoi (XSTR (x, 0));\n       if (i < 0)\n-\t/* The sign bit encodes a one's compliment mask.  */\n+\t/* The sign bit encodes a one's complement mask.  */\n \tabort ();\n       else if (i != 0 && i == (i & -i))\n \t/* Only one bit is set, so yield that unit number.  */"}, {"sha": "c253f2cede1231f70bd278e5aaeb30c533f227eb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -389,7 +389,7 @@ static rtx last_scheduled_insn;\n \n /* Compute the function units used by INSN.  This caches the value\n    returned by function_units_used.  A function unit is encoded as the\n-   unit number if the value is non-negative and the compliment of a\n+   unit number if the value is non-negative and the complement of a\n    mask if the value is negative.  A function unit index is the\n    non-negative encoding.  The scheduler using only DFA description\n    should never use the following function.  */"}, {"sha": "78324f6868eb51eda7753944dd93a5b3dd8e8cd6", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -3739,7 +3739,7 @@ const struct real_format i370_double_format =\n     false\n   };\n \f\n-/* The \"twos-compliment\" c4x format is officially defined as\n+/* The \"twos-complement\" c4x format is officially defined as\n \n \tx = s(~s).f * 2**e\n "}, {"sha": "1c16c83dbe4f2c5a4eead5156edef1597013f0c7", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43aa4e05ea72d300ede141b3222e54f77c6ea4a7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=43aa4e05ea72d300ede141b3222e54f77c6ea4a7", "patch": "@@ -1826,7 +1826,7 @@ struct tree_decl GTY(())\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n        DECL_FUNCTION_CODE.  */\n     enum built_in_function f;\n-    /* In a FUNCITON_DECL for which DECL_BUILT_IN does not hold, this\n+    /* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this\n        is used by language-dependent code.  */\n     HOST_WIDE_INT i;\n     /* DECL_ALIGN and DECL_OFFSET_ALIGN.  (These are not used for"}]}