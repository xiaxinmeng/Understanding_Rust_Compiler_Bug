{"sha": "84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiYWZjOGQxOTFlMzFkMjA1ZDljMzNjZDBkYzkxY2Y5OTEwY2FiMw==", "commit": {"author": {"name": "Douglas Gregor", "email": "dgregor@cs.indiana.edu", "date": "2005-02-21T23:15:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-02-21T23:15:35Z"}, "message": "cv_func.C: New test.\n\n2005-02-21  Douglas Gregor  <dgregor@cs.indiana.edu>\n\n        * g++.dg/other/cv_func.C: New test.\n        * g++.dg/template/mem_func_ptr.C: New test.\n        * g++.dg/template/qualttp20.C: We now get the xfail'd warning\n        when we are being pedantic; we expect this test to pass now.\n        * g++.old-deja/g++.pt/ptrmem5.C: We no longer receive a bogus\n        error here.\n\nFrom-SVN: r95357", "tree": {"sha": "af3594b665e83e53542a937dca36da67827c4609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af3594b665e83e53542a937dca36da67827c4609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/comments", "author": null, "committer": null, "parents": [{"sha": "9804209d324be049840389053e370d5a1ce51550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9804209d324be049840389053e370d5a1ce51550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9804209d324be049840389053e370d5a1ce51550"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "6c9ab1bc2f7db31ada62e1331dfc925ad8d0e625", "filename": "gcc/testsuite/g++.dg/other/cv_func.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcv_func.C?ref=84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-options \"-pedantic -pedantic-errors\" }\n+typedef int FIC(int) const;\n+typedef int FI(int);\n+\n+FIC f; // { dg-error \"qualified\" }\n+// { dg-error \"ignoring\" \"\" { target *-*-* } 6 }\n+struct S {\n+  FIC f; // OK\n+\n+  const FI g; // { dg-error \"qualifier\" }\n+\n+  int h(int) const;\n+\n+};\n+FIC S::*pm = &S::f;\n+const FI S::*pm2 = &S::f; // { dg-error \"qualifier\" }\n+// { dg-error \"cannot convert\" \"\" { target *-*-* } 17 }\n+const FIC S::*pm3 = &S::f; // { dg-error \"qualifier\" }\n+\n+int S::f(int) const\n+{\n+  return 17;\n+}\n+\n+\n+int foo(float) const // { dg-error \"qualifier\" }\n+{\n+  return 0;\n+}\n+\n+int bar(float) volatile; // { dg-error \"qualifier\" }"}, {"sha": "bcdda5ca69decb7528853d905504bf3c5c8b2e68", "filename": "gcc/testsuite/g++.dg/template/mem_func_ptr.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmem_func_ptr.C?ref=84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do compile }\n+template<typename T> struct takes_member_ptr;\n+template<typename T, typename Class> struct takes_member_ptr<T Class::*> {};\n+\n+template<typename T, typename Class>\n+void fun_takes_member_ptr(T Class::*) {}\n+\n+\n+template<typename T> struct order_member_ptrs;\n+template<typename T, typename Class> struct order_member_ptrs<T Class::*> {};\n+template<typename R, typename T1, typename Class> \n+  struct order_member_ptrs<R (Class::*)(T1)>\n+  {\n+    typedef int type;\n+  };\n+\n+template<typename R, typename T1, typename Class>\n+  struct order_member_ptrs<R (Class::*)(T1) const>\n+  {\n+    typedef int c_type;\n+  };\n+\n+template<typename R, typename T1, typename Class>\n+  struct order_member_ptrs<R (Class::*)(T1) volatile>\n+  {\n+    typedef int v_type;\n+  };\n+\n+template<typename R, typename T1, typename Class>\n+  struct order_member_ptrs<R (Class::*)(T1) const volatile>\n+  {\n+    typedef int cv_type;\n+  };\n+\n+\t  \n+struct X {\n+  void bar(float) {}\n+  void bar_c(float) const {}\n+  void bar_v(float) volatile {}\n+  void bar_cv(float) const volatile {}\n+};\n+\n+void foo()\n+{\n+  sizeof(takes_member_ptr<void (X::*)(float)>);\n+  sizeof(takes_member_ptr<void (X::*)(float) const>);\n+  sizeof(takes_member_ptr<void (X::*)(float) volatile>);\n+  sizeof(takes_member_ptr<void (X::*)(float) const volatile>);\n+  sizeof(order_member_ptrs<void (X::*)(float)>::type);\n+  sizeof(order_member_ptrs<void (X::*)(float) const>::c_type);\n+  sizeof(order_member_ptrs<void (X::*)(float) volatile>::v_type);\n+  sizeof(order_member_ptrs<void (X::*)(float) const volatile>::cv_type);\n+  fun_takes_member_ptr(&X::bar);\n+  fun_takes_member_ptr(&X::bar_c);\n+  fun_takes_member_ptr(&X::bar_v);\n+  fun_takes_member_ptr(&X::bar_cv);\n+}"}, {"sha": "ae20d7629020fe28badceebb28669c7b1e14247f", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile }\n+// { dg-options \"-pedantic -pedantic-errors\" }\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>\n@@ -16,7 +17,7 @@ struct AS\n template <typename T> struct B1 : T\n {\n   typedef typename T::L __restrict__ r;// { dg-error \"'__restrict__' qualifiers cannot\" \"\" }\n-  typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring '__restrict__'\" \"\" { xfail *-*-* } }\n+  typedef typename T::myT __restrict__ p;// { dg-error \"ignoring '__restrict__'\" }\n \n   // The following are DR 295 dependent\n   typedef typename T::myT volatile *myvolatile;"}, {"sha": "54e975edab6bdbc850541c198d8bdce9de324dea", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ptrmem5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bafc8d191e31d205d9c33cd0dc91cf9910cab3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem5.C?ref=84bafc8d191e31d205d9c33cd0dc91cf9910cab3", "patch": "@@ -14,4 +14,4 @@ struct Null {\n int *pd = NULL;\n int (*pf)() = NULL;\n int Null::*pmd = NULL;\n-int (Null::*pmf)() = NULL; // { dg-bogus \"\" \"\" { xfail *-*-* } }  - cannot convert - \n+int (Null::*pmf)() = NULL; "}]}