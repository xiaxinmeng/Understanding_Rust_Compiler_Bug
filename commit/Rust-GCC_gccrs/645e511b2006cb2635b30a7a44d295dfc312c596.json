{"sha": "645e511b2006cb2635b30a7a44d295dfc312c596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1ZTUxMWIyMDA2Y2IyNjM1YjMwYTdhNDRkMjk1ZGZjMzEyYzU5Ng==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-11-29T17:49:24Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-11-29T17:49:24Z"}, "message": "re PR fortran/40958 (module files too large)\n\n2011-11-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/40958\n\t* module.c (prev_module_line):  New variable.\n\t(prev_module_column):  New variable.\n\t(prev_character):  New variable.\n\t(module_char):  Update the new variables.\n\t(module_unget_char):  New function.\n\t(parse_string):  Use module_unget_char.\n\t(parse_integer):  Likewise.\n\t(parse_name):  Likewise.\n\nFrom-SVN: r181810", "tree": {"sha": "0b450b1d27ddf3d44af1bf96dd40dcd4f043f45d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b450b1d27ddf3d44af1bf96dd40dcd4f043f45d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/645e511b2006cb2635b30a7a44d295dfc312c596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645e511b2006cb2635b30a7a44d295dfc312c596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645e511b2006cb2635b30a7a44d295dfc312c596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645e511b2006cb2635b30a7a44d295dfc312c596/comments", "author": null, "committer": null, "parents": [{"sha": "7fa14a013045ffc50f3b280223d067ee406ca06d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa14a013045ffc50f3b280223d067ee406ca06d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa14a013045ffc50f3b280223d067ee406ca06d"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "170c6fbdeff3d7a84cf47a9ddee19714e81979ee", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645e511b2006cb2635b30a7a44d295dfc312c596/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645e511b2006cb2635b30a7a44d295dfc312c596/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=645e511b2006cb2635b30a7a44d295dfc312c596", "patch": "@@ -1,3 +1,15 @@\n+2011-11-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/40958\n+\t* module.c (prev_module_line):  New variable.\n+\t(prev_module_column):  New variable.\n+\t(prev_character):  New variable.\n+\t(module_char):  Update the new variables.\n+\t(module_unget_char):  New function.\n+\t(parse_string):  Use module_unget_char.\n+\t(parse_integer):  Likewise.\n+\t(parse_name):  Likewise.\n+\n 2011-11-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51306"}, {"sha": "70f8565c1507a55f7118acfc2418d1a3bef3d3bd", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645e511b2006cb2635b30a7a44d295dfc312c596/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645e511b2006cb2635b30a7a44d295dfc312c596/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=645e511b2006cb2635b30a7a44d295dfc312c596", "patch": "@@ -194,6 +194,8 @@ static char module_name[GFC_MAX_SYMBOL_LEN + 1];\n static bool specified_nonint, specified_int;\n \n static int module_line, module_column, only_flag;\n+static int prev_module_line, prev_module_column, prev_character;\n+\n static enum\n { IO_INPUT, IO_OUTPUT }\n iomode;\n@@ -1036,6 +1038,10 @@ module_char (void)\n   if (c == EOF)\n     bad_module (\"Unexpected EOF\");\n \n+  prev_module_line = module_line;\n+  prev_module_column = module_column;\n+  prev_character = c;\n+\n   if (c == '\\n')\n     {\n       module_line++;\n@@ -1046,6 +1052,16 @@ module_char (void)\n   return c;\n }\n \n+/* Unget a character while remembering the line and column.  Works for\n+   a single character only.  */\n+\n+static void\n+module_unget_char (void)\n+{\n+  module_line = prev_module_line;\n+  module_column = prev_module_column;\n+  ungetc (prev_character, module_fp);\n+}\n \n /* Parse a string constant.  The delimiter is guaranteed to be a\n    single quote.  */\n@@ -1106,24 +1122,22 @@ parse_string (void)\n static void\n parse_integer (int c)\n {\n-  module_locus m;\n-\n   atom_int = c - '0';\n \n   for (;;)\n     {\n-      get_module_locus (&m);\n-\n       c = module_char ();\n       if (!ISDIGIT (c))\n-\tbreak;\n+\t{\n+\t  module_unget_char ();\n+\t  break;\n+\t}\n \n       atom_int = 10 * atom_int + c - '0';\n       if (atom_int > 99999999)\n \tbad_module (\"Integer overflow\");\n     }\n \n-  set_module_locus (&m);\n }\n \n \n@@ -1132,7 +1146,6 @@ parse_integer (int c)\n static void\n parse_name (int c)\n {\n-  module_locus m;\n   char *p;\n   int len;\n \n@@ -1141,13 +1154,14 @@ parse_name (int c)\n   *p++ = c;\n   len = 1;\n \n-  get_module_locus (&m);\n-\n   for (;;)\n     {\n       c = module_char ();\n       if (!ISALNUM (c) && c != '_' && c != '-')\n-\tbreak;\n+\t{\n+\t  module_unget_char ();\n+\t  break;\n+\t}\n \n       *p++ = c;\n       if (++len > GFC_MAX_SYMBOL_LEN)\n@@ -1156,11 +1170,6 @@ parse_name (int c)\n \n   *p = '\\0';\n \n-  fseek (module_fp, -1, SEEK_CUR);\n-  module_column = m.column + len - 1;\n-\n-  if (c == '\\n')\n-    module_line--;\n }\n \n "}]}